uint64_t sub_22EC48604(_QWORD **a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5, int a6, _DWORD *a7, uint64_t a8, int *a9)
{
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 v25;
  BOOL v26;
  int v27;
  const llvm::APInt *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v40;
  llvm::APInt *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  int v56;
  unsigned int v57[24];
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int8 v65;

  result = sub_22EF5C728((*a1)[11], *a4);
  v18 = result;
  if (!*((_BYTE *)a1 + 9))
  {
    v19 = *(_QWORD *)(result + 32);
    sub_22EFFD9B4(a3);
    result = sub_22EC4A7BC(v19, v20, (uint64_t)*a1);
    if ((_DWORD)result)
    {
      *((_BYTE *)a1 + 8) = 1;
      return result;
    }
  }
  v21 = *a7;
  v22 = *(_QWORD *)(a3 + 16);
  if (v21 >= ((unint64_t)(*(_QWORD *)(a3 + 24) - v22) >> 3)
    || (result = sub_22EC378D4(*(unsigned __int8 **)(v22 + 8 * v21), v18), (_DWORD)result))
  {
    v23 = *(unsigned __int8 *)(v18 + 16);
    if (v23 == 5 && v18 != 0)
    {
      if (!*((_BYTE *)a1 + 9))
      {
        v29 = *a1;
        sub_22F0D5A50(*(_QWORD *)(v18 + 40));
        sub_22E8FCA40(v29, v30, 0x1404u, 0, (uint64_t)&v63);
        sub_22F0D4E74(*(_QWORD *)(v18 + 40));
        v60 = v31;
        sub_22E8906A0((uint64_t)&v63, &v60);
        result = (uint64_t)sub_22E903BEC((unsigned int *)&v63);
      }
      *((_BYTE *)a1 + 8) = 1;
      ++*a7;
      ++*a9;
      return result;
    }
    v54 = a4;
    v25 = *(_BYTE *)(a5 + 12);
    v61 = *(_DWORD *)(a5 + 8);
    if (v61 > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)&v60);
      v23 = *(unsigned __int8 *)(v18 + 16);
    }
    else
    {
      v60 = 0;
    }
    v62 = v25;
    v26 = v23 != 2 || v18 == 0;
    v27 = v26;
    v56 = v27;
    if (!v26)
    {
      v28 = (const llvm::APInt *)(v18 + 40);
      v59 = *(_DWORD *)(v18 + 48);
      if (v59 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v58, v28);
      else
        v58 = *(_QWORD *)v28;
      if (v61 >= 0x41 && v60)
        MEMORY[0x2348A0E84](v60, 0x1000C8000313F17);
      v60 = v58;
      v61 = v59;
      v59 = 0;
      v53 = a2;
      if (*(_BYTE *)(a5 + 12))
        result = llvm::APInt::zextOrTrunc((llvm::APInt *)a5);
      else
        result = llvm::APInt::sextOrTrunc((llvm::APInt *)a5);
      v34 = v64;
      v35 = v63;
      if (*(_DWORD *)(a5 + 8) >= 0x41u)
      {
        result = *(_QWORD *)a5;
        if (*(_QWORD *)a5)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      *(_QWORD *)a5 = v35;
      *(_DWORD *)(a5 + 8) = v34;
      *(_BYTE *)(a5 + 12) = v62;
      a2 = v53;
    }
    v55 = *(_QWORD *)(v18 + 32);
    v36 = *a7;
    v37 = *(_QWORD *)(a3 + 16);
    if (v36 < ((unint64_t)(*(_QWORD *)(a3 + 24) - v37) >> 3))
    {
      while (1)
      {
        v38 = **(unsigned __int8 **)(v37 + 8 * v36);
        if (v38 != 164 || a6 == 0)
          break;
        result = sub_22EC4A8F4(a1, a2, a3);
        if (!(_DWORD)result)
        {
          v42 = *(_DWORD *)(a5 + 8);
          if (v42 <= v61)
          {
            if (v42 < v61)
            {
              result = sub_22E46361C((llvm::APInt *)a5, (uint64_t)&v63);
              if (*(_DWORD *)(a5 + 8) >= 0x41u)
              {
                result = *(_QWORD *)a5;
                if (*(_QWORD *)a5)
                  result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
              }
              *(_QWORD *)a5 = v63;
              *(_DWORD *)(a5 + 8) = v64;
            }
            v40 = v62;
          }
          else
          {
            result = sub_22E46361C((llvm::APInt *)&v60, (uint64_t)&v63);
            if (v61 >= 0x41)
            {
              result = v60;
              if (v60)
                result = MEMORY[0x2348A0E84](v60, 0x1000C8000313F17);
            }
            v60 = v63;
            v61 = v64;
            v40 = v65;
            v62 = v65;
          }
          *(_BYTE *)(a5 + 12) = v40;
          if (!v56)
            goto LABEL_79;
          v41 = (llvm::APInt *)a5;
          if (v40)
          {
LABEL_68:
            result = llvm::APInt::compare(v41, (const llvm::APInt *)&v60);
            goto LABEL_73;
          }
LABEL_72:
          result = llvm::APInt::compareSigned(v41, (const llvm::APInt *)&v60);
LABEL_73:
          if ((int)result >= 1)
          {
            if (v61 > 0x40 || (v43 = *(_DWORD *)(a5 + 8), v43 > 0x40))
            {
              result = llvm::APInt::assignSlowCase((llvm::APInt *)&v60, (const llvm::APInt *)a5);
              LOBYTE(v40) = *(_BYTE *)(a5 + 12);
            }
            else
            {
              v60 = *(_QWORD *)a5;
              v61 = v43;
            }
            v62 = v40;
          }
          goto LABEL_79;
        }
        *((_BYTE *)a1 + 8) = 1;
LABEL_79:
        v36 = *a7;
        v37 = *(_QWORD *)(a3 + 16);
        if (v36 >= ((unint64_t)(*(_QWORD *)(a3 + 24) - v37) >> 3))
          goto LABEL_80;
      }
      if (v38 == 164)
        goto LABEL_81;
      if ((v56 & 1) == 0)
      {
        if (*(_DWORD *)(a5 + 8) > 0x40u)
        {
          result = llvm::APInt::equalSlowCase((llvm::APInt *)a5, (const llvm::APInt *)&v60);
          if ((result & 1) != 0)
            goto LABEL_80;
        }
        else if (*(_QWORD *)a5 == v60)
        {
          goto LABEL_80;
        }
        sub_22EC38D34((uint64_t)&v63, (*a1)[11], *a9, a2);
        sub_22EC48FF8();
        result = llvm::APInt::operator++();
        goto LABEL_79;
      }
      sub_22EC38D34((uint64_t)&v63, (*a1)[11], *a9, a2);
      sub_22EC48FF8();
      llvm::APInt::operator++();
      LOBYTE(v40) = *(_BYTE *)(a5 + 12);
      if ((_BYTE)v40)
      {
        v41 = (llvm::APInt *)a5;
        goto LABEL_68;
      }
      v41 = (llvm::APInt *)a5;
      goto LABEL_72;
    }
LABEL_80:
    if (*((_BYTE *)a1 + 8))
      goto LABEL_81;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v54 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 4
      || *((_BYTE *)a1 + 9))
    {
      goto LABEL_87;
    }
    v44 = v62;
    v64 = v61;
    if (v61 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v63);
      v65 = v44;
      if (v61 > 0x40)
      {
        v46 = (uint64_t *)v54;
        if (!llvm::APInt::equalSlowCase((llvm::APInt *)&v60, (const llvm::APInt *)&v63))
          goto LABEL_99;
        goto LABEL_94;
      }
      v45 = v63;
    }
    else
    {
      v45 = 0;
      v63 = 0;
      v65 = v62;
    }
    v46 = (uint64_t *)v54;
    if (v60 != v45)
    {
LABEL_99:
      result = sub_22EF5FE30((*a1)[11], v55, (const llvm::APInt *)&v60, 0, 0, 0);
      *v46 = result;
      if (v64 >= 0x41)
      {
        result = v63;
        if (v63)
          result = MEMORY[0x2348A0E84](v63, 0x1000C8000313F17);
      }
      if (*((_BYTE *)a1 + 8))
        goto LABEL_81;
LABEL_87:
      if ((v56 & 1) == 0)
      {
        if (*(_BYTE *)(a5 + 12))
        {
          result = llvm::APInt::compare((llvm::APInt *)a5, (const llvm::APInt *)&v60);
          if ((result & 0x80000000) != 0)
          {
LABEL_114:
            result = sub_22EC38D34((uint64_t)&v63, (*a1)[11], 0, a2);
            if (!a1[2])
            {
              sub_22EFFD9B4(a3);
              result = sub_22EC49F30();
            }
            goto LABEL_81;
          }
        }
        else
        {
          result = llvm::APInt::compareSigned((llvm::APInt *)a5, (const llvm::APInt *)&v60);
          if ((result & 0x80000000) != 0)
            goto LABEL_114;
        }
      }
      if (*(_DWORD *)a2 == 8)
      {
        result = *(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
        if (result && (*(_DWORD *)(result + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
        {
          v50 = *(_DWORD *)(result + 16);
        }
        else
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
            goto LABEL_81;
          result = sub_22F10CF48(result);
          if (!result)
            goto LABEL_81;
          v50 = *(unsigned __int8 *)(result + 16);
        }
        if (v50 == 4)
          goto LABEL_114;
      }
LABEL_81:
      if (v61 >= 0x41)
      {
        result = v60;
        if (v60)
          return MEMORY[0x2348A0E84](v60, 0x1000C8000313F17);
      }
      return result;
    }
LABEL_94:
    if (*(_DWORD *)a2 == 8)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
      if (v47 && (*(_DWORD *)(v47 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
      {
        v51 = *(_DWORD *)(v47 + 16);
        goto LABEL_118;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      {
        v52 = sub_22F10CF48(v47);
        if (v52)
        {
          v51 = *(unsigned __int8 *)(v52 + 16);
LABEL_118:
          v46 = (uint64_t *)v54;
          if (v51 == 4)
            goto LABEL_99;
        }
      }
    }
    v48 = *a1;
    sub_22EFFD954(a3);
    sub_22E8FCA40(v48, v49, 0x150Du, 0, (uint64_t)v57);
    sub_22E903BEC(v57);
    goto LABEL_99;
  }
  if (!*((_BYTE *)a1 + 9))
    result = sub_22EC44448(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * *a7), (uint64_t *)a4, v18, *a1);
  if (a8)
  {
    sub_22EC496F8(a1, a8, (unsigned int *)a9, *(_DWORD **)(*(_QWORD *)(a3 + 16) + 8 * *a7));
    v32 = (*a1)[11];
    v33 = *a9;
    v63 = 0;
    result = (uint64_t)sub_22EFFD4BC((char *)(a8 + 16), v32, v33, &v63);
  }
  ++*a7;
  return result;
}

void sub_22EC48E20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, unsigned int *a7)
{
  unsigned int *v8;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v15;
  _QWORD *v16;
  int v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29[24];
  uint64_t v30;

  v8 = a5;
  v30 = a4;
  v11 = *a5;
  v12 = *(_QWORD *)(a3 + 16);
  if (v11 >= ((unint64_t)(*(_QWORD *)(a3 + 24) - v12) >> 3))
  {
    if (!*(_BYTE *)(a1 + 9))
    {
      v21 = *(_QWORD **)a1;
      sub_22EFFD954(a3);
      v18 = v22;
      v19 = v21;
      v20 = 3619;
      goto LABEL_8;
    }
LABEL_9:
    *(_BYTE *)(a1 + 8) = 1;
    *v8 = v11 + 1;
    v8 = a7;
    goto LABEL_17;
  }
  v15 = *(unsigned __int8 **)(v12 + 8 * v11);
  v16 = *(_QWORD **)a1;
  if (*v15 == 180 && (*(_BYTE *)(v16[9] + 1) & 2) == 0)
  {
    if (!*(_BYTE *)(a1 + 9))
    {
      sub_22EFFD954(a3);
      v18 = v17;
      v19 = v16;
      v20 = 3616;
LABEL_8:
      sub_22E8FCA40(v19, v18, v20, 0, (uint64_t)v29);
      v23 = sub_22E8901B8((uint64_t)v29, &v30);
      sub_22F0D4E74(a3);
      v28 = v24;
      sub_22E8906A0(v23, &v28);
      sub_22E903BEC(v29);
      LODWORD(v11) = *v8;
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  if (!*(_BYTE *)(a1 + 9))
  {
    sub_22F0D5A50((uint64_t)v15);
    v26 = sub_22EC45014(v16, a2, v25, v15, 1, 0);
    if ((v26 & 1) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!sub_22F335F3C())
  {
    v26 = 1;
    goto LABEL_12;
  }
  v26 = sub_22EC49774((_QWORD *)a1);
  if ((v26 & 1) != 0)
LABEL_12:
    *(_BYTE *)(a1 + 8) = 1;
LABEL_13:
  v27 = (_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL);
  if (!*(_BYTE *)(a1 + 9) && v27)
  {
    *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * *v8) = v27;
    *(_DWORD *)a3 |= *v27 & 0x3E000;
  }
  sub_22EC496F8((_BYTE *)a1, a6, a7, v27);
LABEL_17:
  ++*v8;
}

void sub_22EC48FF8()
{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  _DWORD *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v51;
  int v52;
  unsigned int *v53;
  unint64_t v54;
  _BYTE v55[12];
  char v56;
  void *__p;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[32];
  __int128 v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  _QWORD v67[1551];

  v0 = (_BYTE *)MEMORY[0x24BDAC7A8]();
  v8 = v5;
  v9 = (int *)v4;
  v10 = v3;
  v11 = v2;
  v12 = (_OWORD *)v1;
  v13 = v0;
  v67[1549] = *MEMORY[0x24BDAC8D0];
  v14 = *(unsigned __int8 **)(*(_QWORD *)(v2 + 16) + 8 * *v4);
  v65 = v14;
  v66 = v3;
  v15 = v3 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    sub_22EC48E20((uint64_t)v0, v1, v2, v3, v4, v5, v6);
    return;
  }
  v16 = *v14;
  if (v16 == 179)
  {
    v28 = v5;
    v29 = v6;
LABEL_21:
    v30 = v14;
LABEL_22:
    sub_22EC496F8(v0, v28, v29, v30);
LABEL_23:
    ++*v9;
    return;
  }
  v53 = v6;
  v52 = v7;
  if (v16 == 180)
  {
    v17 = (unsigned __int8 **)*((_QWORD *)v14 + 2);
    if (((*((_QWORD *)v14 + 3) - (_QWORD)v17) & 0x7FFFFFFF8) == 8)
    {
      v18 = *v17;
      v19 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)v0 + 88), v3);
      if (v19)
      {
        if (!sub_22EC378D4(v18, v19))
        {
          v14 = (unsigned __int8 *)**((_QWORD **)v14 + 2);
          v65 = v14;
        }
      }
    }
  }
  v20 = *(_QWORD *)v13;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v13 + 72) + 1) & 1) != 0)
  {
    v21 = *(_QWORD *)v15;
  }
  else
  {
    v21 = *(_QWORD *)v15;
    if (*v14 != 180)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0);
      v23 = *(_DWORD *)(v22 + 16);
      v24 = v23;
      if (v22)
        v25 = v23 == 11;
      else
        v25 = 0;
      if (v25)
      {
        v26 = v53;
        if (((v23 >> 19) & 0x1FF) - 166 < 0x35)
          goto LABEL_71;
      }
      else
      {
        v26 = v53;
        if (v22 && v23 == 44)
        {
          v27 = sub_22F114198(*(_QWORD *)(v22 + 24));
          if ((*(_BYTE *)(v27 + 74) & 1) != 0 || *(_QWORD *)(v27 + 128) > 7uLL)
            goto LABEL_71;
          v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        else
        {
          v48 = v23 > 0x27u;
          v49 = (1 << v23) & 0x8180001600;
          if (!v48 && v49 != 0)
            goto LABEL_71;
        }
        if (v24 == 6)
        {
LABEL_71:
          sub_22EC477A0(v13, (uint64_t)v12, v11, v10, v9, v8, v26);
          return;
        }
      }
      v46 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)v13 + 88), v10);
      if (v46)
      {
        v47 = v46;
        if (!sub_22EC378D4(v14, v46))
        {
          if (!v13[9])
            sub_22EC44448((uint64_t)v14, &v66, v47, *(_QWORD **)v13);
          if (!v8)
            goto LABEL_23;
          v0 = v13;
          v28 = v8;
          v29 = v53;
          goto LABEL_21;
        }
      }
      else
      {
        v67[0] = v14;
        if (sub_22EB392FC(*(_QWORD *)v13, v10, v67, v13[9] == 0, 0, 1) != 29)
        {
          v51 = v67[0];
          if ((v67[0] & 1) != 0
            || (v51 = sub_22EB1B954(*(_QWORD *)v13, (void *)(v67[0] & 0xFFFFFFFFFFFFFFFELL)),
                v67[0] = v51,
                (v51 & 1) != 0))
          {
            v13[8] = 1;
          }
          v30 = (_DWORD *)(v51 & 0xFFFFFFFFFFFFFFFELL);
          v0 = v13;
          v28 = v8;
          v29 = v53;
          goto LABEL_22;
        }
      }
      goto LABEL_43;
    }
  }
  sub_22F0D5A50((uint64_t)v14);
  v54 = (v31 << 32) | 2;
  *(_QWORD *)v55 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 56)
  {
    *(_DWORD *)v61 = 9;
    *(_QWORD *)&v61[8] = 0;
    *(_QWORD *)&v61[16] = v10;
    *(_DWORD *)&v61[24] = 0;
    *(_QWORD *)&v62 = 0;
  }
  else
  {
    v32 = v12[1];
    *(_OWORD *)v61 = *v12;
    *(_OWORD *)&v61[16] = v32;
    v62 = v12[2];
  }
  sub_22EC395BC(v67, v20, v61, &v54, &v65, 1, 1, 1);
  if (LODWORD(v67[0]))
  {
    v33 = v53;
    if (v13[9])
    {
      if (v8)
      {
        v34 = (_DWORD *)sub_22EC49774(v13);
LABEL_39:
        sub_22EC496F8(v13, v8, v33, v34);
      }
LABEL_40:
      ++*v9;
      sub_22EC3CE2C((uint64_t)v67);
      return;
    }
    goto LABEL_36;
  }
  if (*v65 == 180)
  {
    v33 = v53;
    if (v13[9])
    {
      v13[8] = 1;
      goto LABEL_40;
    }
LABEL_36:
    v35 = sub_22EC3DF80((int)v67, *(_QWORD *)v13);
    if ((v35 & 1) != 0)
      v13[8] = 1;
    v34 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_39;
  }
  sub_22EC3CE2C((uint64_t)v67);
LABEL_43:
  v36 = *(_QWORD *)v15;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 72) + 52) & 0x40000000) != 0
     || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2)
    && !sub_22F111060(v36))
  {
    if (!v13[9])
      sub_22EC45014(*(_QWORD *)v13, v12, 0, v65, 1, 0);
    v13[8] = 1;
    ++*v9;
    ++*v53;
  }
  else
  {
    sub_22EC497C8(v13, (uint64_t)v12, v11, v10, (unsigned int *)v9, v8, v53);
    ++*v53;
    if (v52)
    {
      v37 = *(_QWORD **)v13;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v13 + 72) + 1) & 1) != 0 && !v13[8])
      {
        if (v13[11])
          v13[8] = 1;
        if (!v13[9])
        {
          sub_22F0D5A50((uint64_t)v65);
          sub_22E8FCA40(v37, v38, 0x145Fu, 0, (uint64_t)v67);
          sub_22F0D4E74((uint64_t)v65);
          v64 = v39;
          v40 = sub_22E8906A0((uint64_t)v67, &v64);
          sub_22F0D5A50((uint64_t)v65);
          *(_QWORD *)&v61[12] = 0;
          v61[20] = 0;
          *(_QWORD *)&v62 = 0;
          *((_QWORD *)&v62 + 1) = 0x100000000000000;
          *(_QWORD *)v61 = v41 | ((unint64_t)v41 << 32);
          v61[8] = 0;
          *(_QWORD *)&v61[24] = 123;
          v63 = 0;
          v42 = sub_22E890748(v40, v61);
          v43 = *(_QWORD *)v13;
          sub_22F0D60E4((uint64_t)v65);
          v45 = sub_22F141A3C(v44, 0, *(_QWORD **)(v43 + 112), *(_DWORD **)(v43 + 72));
          *(_QWORD *)&v55[4] = 0;
          v56 = 0;
          v58 = 0;
          v59 = 0x100000000000000;
          v54 = v45 | ((unint64_t)v45 << 32);
          v55[0] = 0;
          __p = (void *)125;
          v60 = 0;
          sub_22E890748(v42, &v54);
          if (SHIBYTE(v59) < 0)
            operator delete(__p);
          if (SHIBYTE(v62) < 0)
            operator delete(*(void **)&v61[24]);
          sub_22E903BEC((unsigned int *)v67);
        }
      }
    }
  }
}

void sub_22EC496F8(_BYTE *a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v7 = sub_22EFFD554(a2, *(_QWORD *)(*(_QWORD *)a1 + 88), *a3, a4);
    if (a4)
    {
      v8 = v7;
      if (v7)
      {
        sub_22F0D4E74((uint64_t)a4);
        sub_22EC49CB8(a1, v8, v9, 1);
      }
    }
    ++*a3;
  }
}

uint64_t sub_22EC49774(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = a1[3];
  if (!result)
  {
    v3 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 16, 3);
    result = sub_22F336010(v3, *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16392));
    a1[3] = result;
  }
  return result;
}

uint64_t sub_22EC497C8(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  void *__p;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unsigned int v70[25];
  int v71;
  unsigned int v72[24];
  uint64_t v73;

  v73 = a4;
  v14 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      result = sub_22EC46C30(a4);
      if (!(_DWORD)result)
      {
LABEL_32:
        if (!a1[9])
        {
          v33 = *(_QWORD **)a1;
          sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * *a5));
          sub_22E8FCA40(v33, v34, 0xDEEu, 0, (uint64_t)v72);
          result = (uint64_t)sub_22E903BEC(v72);
        }
        ++*a5;
        a1[8] = 1;
        return result;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(v14 + 16) - 57 <= 0xFFFFFFFD)
        v14 = sub_22F10CF48(v14);
      result = *(unsigned int *)(v14 + 20);
      if (!(_DWORD)result)
        goto LABEL_32;
    }
  }
  else
  {
    v15 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), a4);
    if (v15 && *(_BYTE *)(v15 + 16) == 2)
    {
      v16 = (unsigned int *)(v15 + 40);
      if (*(_DWORD *)(v15 + 48) >= 0x41u)
        v16 = *(unsigned int **)v16;
      result = *v16;
      if (!(_DWORD)result)
        goto LABEL_32;
    }
  }
  v18 = *a5;
  v19 = *a7;
  sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v18));
  v21 = v20;
  sub_22F0D4E74(a3);
  v23 = sub_22EC49E30(a1, a3, v18, a4, a6, v19, v22 & 0xFFFFFFFF00000000 | v21);
  v71 = 0;
  v24 = *a5;
  result = sub_22EC46D18(a1, a2, a3, &v73, 0, a5, v23, &v71, 0);
  if (!v23)
    return result;
  v25 = v73;
  v23[1] = v73;
  if (*a5 == v24)
    v26 = v24;
  else
    v26 = *a5 - 1;
  v27 = *(_QWORD *)(a3 + 16);
  if (v26 < ((unint64_t)(*(_QWORD *)(a3 + 24) - v27) >> 3))
  {
    v28 = *(_QWORD *)(v27 + 8 * v26);
    if (v28)
    {
      sub_22F0D4E74(v28);
      *((_DWORD *)v23 + 11) = v29;
    }
  }
  if (!a1[9])
  {
    v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16) != 45
       && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) & 0xFEu)
        - 2 > 3;
    if (!v30 && !sub_22EFFD880(a3, *(_QWORD *)(*(_QWORD *)a1 + 72)))
    {
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
        if (*(_DWORD *)a2 == 6)
        {
          v35 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 16) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          v36 = v35;
          if (v35)
            v37 = (*(_DWORD *)(v35 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
          else
            v37 = 0;
          if (!v37
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v35 + 104) + 96), *(_QWORD *)(v35 + 104)),
                !*(_DWORD *)(*(_QWORD *)(v36 + 128) + 16)))
          {
            v38 = sub_22EFC3B90(v36);
            do
            {
              v38 = *(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v38)
                goto LABEL_49;
            }
            while ((*(_DWORD *)(v38 + 28) & 0x7Fu) - 49 > 2);
          }
        }
        else if (*(_DWORD *)a2 == 10)
        {
          v32 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 16) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 24));
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v32 + 104) + 96), *(_QWORD *)(v32 + 104));
          if (*(_DWORD *)(*(_QWORD *)(v32 + 128) + 16) == 1 && !sub_22EFC3B90(v32))
            goto LABEL_49;
        }
      }
      v39 = *(_QWORD **)a1;
      sub_22EFFD954((unint64_t)v23);
      sub_22E8FCA40(v39, v40, 0x1A56u, 0, (uint64_t)v70);
      sub_22F0D4E74((uint64_t)v23);
      v69 = v41;
      v42 = sub_22E8906A0((uint64_t)v70, &v69);
      sub_22EFFD954((unint64_t)v23);
      v63 = 0;
      v64 = 0;
      v66 = 0;
      v67 = 0x100000000000000;
      v61 = v43 | ((unint64_t)v43 << 32);
      v62 = 0;
      v65 = (void *)123;
      v68 = 0;
      v44 = sub_22E890748(v42, &v61);
      v45 = *(_QWORD *)a1;
      sub_22EFFD9B4((unint64_t)v23);
      v47 = sub_22F141A3C(v46, 0, *(_QWORD **)(v45 + 112), *(_DWORD **)(v45 + 72));
      v55 = 0;
      v56 = 0;
      v58 = 0;
      v59 = 0x100000000000000;
      v53 = v47 | ((unint64_t)v47 << 32);
      v54 = 0;
      __p = (void *)125;
      v60 = 0;
      sub_22E890748(v44, &v53);
      if (SHIBYTE(v59) < 0)
        operator delete(__p);
      if (SHIBYTE(v67) < 0)
        operator delete(v65);
      sub_22E903BEC(v70);
    }
  }
LABEL_49:
  result = sub_22F10C2A4(*(_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if (!a1[9])
    {
      v48 = result;
      if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 <= 2)
      {
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 104) + 96), *(_QWORD *)(result + 104));
        if ((**(_QWORD **)(v48 + 128) & 1) != 0)
        {
          v49 = *(_QWORD **)a1;
          sub_22EFFD954((unint64_t)v23);
          sub_22E8FCA40(v49, v50, 0x1917u, 0, (uint64_t)v70);
          sub_22F0D4E74((uint64_t)v23);
          v61 = v51;
          v52 = sub_22E8906A0((uint64_t)v70, (uint64_t *)&v61);
          sub_22E8901B8(v52, &v73);
          return (uint64_t)sub_22E903BEC(v70);
        }
      }
    }
  }
  return result;
}

void sub_22EC49CB8(_BYTE *a1, unint64_t a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v7;
  BOOL v8;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27[25];
  unsigned __int8 v28;
  uint64_t v29;

  v4 = a3;
  v29 = a3;
  v28 = a4;
  if ((**(_QWORD **)(*(_QWORD *)a1 + 72) & 0x100) != 0)
    v7 = 5275;
  else
    v7 = 6683;
  if (a1[11])
    v8 = (**(_QWORD **)(*(_QWORD *)a1 + 72) & 0x100) == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (sub_22F115260(*(_QWORD *)(a2 + 8)))
      v10 = a4 == 0;
    else
      v10 = 0;
    if (v10)
    {
      v7 = 3620;
    }
    else
    {
      sub_22F0D4E74(a2);
      if (!HIDWORD(v11) || !(_DWORD)v11)
        return;
    }
  }
  else
  {
    a1[8] = 1;
  }
  if (!a1[9])
  {
    sub_22E8FCA40(*(_QWORD **)a1, v4, v7, 0, (uint64_t)v27);
    v12 = sub_22E8906A0((uint64_t)v27, &v29);
    v13 = sub_22E894E38(v12, &v28);
    v26 = *(_QWORD *)(a2 + 8);
    sub_22E8901B8(v13, &v26);
    sub_22E903BEC(v27);
    v14 = *(_QWORD **)a1;
    sub_22F0D5A50(a2);
    sub_22E8FCA40(v14, v15, 0x1775u, 0, (uint64_t)v27);
    v21 = sub_22F0005B0(a2, *(_QWORD *)(*(_QWORD *)a1 + 88), 1, v16, v17, v18, v19, v20);
    if (v28)
      v22 = v21;
    else
      v22 = 0;
    v25 = v22;
    v23 = sub_22E894E38((uint64_t)v27, &v25);
    sub_22F0D4E74(a2);
    v26 = v24;
    sub_22E8906A0(v23, &v26);
    sub_22E903BEC(v27);
  }
}

_QWORD *sub_22EC49E30(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, unint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;

  if (!a5)
    return 0;
  v14 = *(_QWORD *)(a5 + 16);
  if (((unint64_t)(*(_QWORD *)(a5 + 24) - v14) >> 3) > a6)
  {
    v15 = *(_QWORD **)(v14 + 8 * a6);
    if (v15)
    {
      if (*(unsigned __int8 *)v15 == 180)
        return v15;
      sub_22EC49CB8(a1, (unint64_t)v15, a7, 1);
    }
  }
  v16 = *(_QWORD *)(a2 + 16);
  v17 = (unint64_t)(*(_QWORD *)(a2 + 24) - v16) >> 3;
  LODWORD(v18) = v17 - a3;
  if (v17 <= a3)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v19 = *(unsigned __int8 **)(v16 + 8 * a3);
    if (v19 && *v19 == 180)
      v18 = (*((_QWORD *)v19 + 3) - *((_QWORD *)v19 + 2)) >> 3;
  }
  v15 = sub_22EC463A8((uint64_t)a1, a4, a7, v18);
  sub_22EFFD554(a5, *(_QWORD *)(*(_QWORD *)a1 + 88), a6, v15);
  return v15;
}

uint64_t sub_22EC49F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  __int16 v80;
  _BYTE v81[96];
  _BYTE v82[96];
  unsigned int v83[24];
  uint64_t *v84;
  _BYTE v85[64];
  _BYTE *v86;
  uint64_t v87;
  unint64_t v88;
  int v89[48];
  _QWORD v90[1527];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v90[1525] = *MEMORY[0x24BDAC8D0];
  v6 = v3;
  v7 = v3 | ((unint64_t)v3 << 32);
  v8 = ((unint64_t)v3 << 32) | 0x204;
  v87 = v8;
  v88 = v7;
  v86 = 0;
  sub_22EFFD1B0((uint64_t)v85, *(_QWORD *)(*(_QWORD *)v0 + 88), v3, 0, 0, v3);
  v9 = *v5;
  if ((*(_BYTE *)(*(_QWORD *)(*v5 + 72) + 1) & 2) == 0)
    goto LABEL_16;
  v10 = v4 << 32;
  for (i = (_QWORD *)(v2 + 16); ; i = (_QWORD *)(v14 + 32))
  {
    v12 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (v12)
      v13 = (*(_DWORD *)(v12 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v13 = 0;
    if (v13)
    {
      v14 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v14 = sub_22F10CF48(v12);
    if (!v14)
    {
      v74 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      goto LABEL_13;
    }
  }
  v74 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_13:
  v9 = *v5;
  if (v74 != 45)
  {
LABEL_16:
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_19;
  }
  if (*((_BYTE *)v5 + 9))
  {
    v15 = v85;
  }
  else
  {
    v19 = sub_22E3CD3D4(*(_QWORD *)(v9 + 88) + 2032, 64, 3);
    v15 = (_BYTE *)sub_22EFFD1B0(v19, *(_QWORD *)(*v5 + 88), v6, 0, 0, v6);
    v9 = *v5;
  }
  *((_QWORD *)v15 + 1) = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 16392);
  v86 = v15;
  v87 = v10 | 2;
  v88 = v7;
  v17 = &v86;
  v16 = 1;
  v18 = 1;
LABEL_19:
  sub_22EC395BC(v89, v9, v2, &v87, v17, v18, 0, 1);
  v20 = v89[0];
  if (!v16 || v89[0] || v89[46] != 39)
    goto LABEL_106;
  v84 = 0;
  sub_22ED03FCC(v90, *v5, HIDWORD(v87), &v84);
  v21 = *v84;
  v22 = *(_WORD *)(*v84 + 80) & 0x7F;
  v23 = -40;
  if (v22 > 0x46)
  {
    if (v22 != 83)
    {
      if (v22 == 71)
      {
        v23 = -56;
      }
      else if (v22 != 81)
      {
        goto LABEL_33;
      }
    }
  }
  else
  {
    if (v22 > 0x18)
      goto LABEL_32;
    if (v22 == 16)
      goto LABEL_25;
    if (((1 << v22) & 0x1066) == 0)
    {
      if (v22 == 24)
      {
LABEL_25:
        v23 = -48;
      }
      else
      {
LABEL_32:
        if (v22 == 70)
        {
          v23 = -64;
        }
        else
        {
LABEL_33:
          v24 = v22 - 52;
          v25 = v22 - 33 >= 5;
          v26 = -48;
          if (!v25)
            v26 = -64;
          if (v24 >= 6)
            v23 = v26;
          else
            v23 = -72;
        }
      }
    }
  }
  v27 = *(_QWORD *)(v21 + 72 + v23 + 16);
  v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  if ((v27 & 4) != 0)
    v28 = (_QWORD *)*v28;
  if (v28)
    v29 = v28 - 8;
  else
    v29 = 0;
  if (sub_22EFC0EB8(*v84))
    goto LABEL_105;
  v30 = *(_QWORD *)(v21 + 112);
  v31 = *(_QWORD *)(v30 + 80);
  v32 = (v31 & 0x4000000000000000) != 0 ? *(_QWORD *)(v30 + 16 * ((v31 >> 61) & 1) + 168) & 3 : v31 >> 63;
  if (v32 != 1)
    goto LABEL_105;
  if (!v29[5])
    goto LABEL_105;
  v33 = sub_22F1E361C(*(_QWORD **)(*v5 + 112), *(_DWORD *)(v21 + 24));
  if (!v33 || v33 == 3)
    goto LABEL_105;
  v34 = v29[2];
  v35 = v34 & 0xFFFFFFFFFFFFFFF8;
  if ((v34 & 4) != 0)
    v35 = *(_QWORD *)v35;
  if (!v35 || (*(_WORD *)(v35 + 8) & 0x7F) != 16)
    goto LABEL_105;
  v76 = v29;
  v37 = v35 - 48;
  while (2)
  {
    v38 = *v5;
    v39 = *(_QWORD *)(*v5 + 3352);
    if ((v39 & 1) != 0)
    {
      v39 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v38 + 88) + 16048) + 16))(*(_QWORD *)(*(_QWORD *)(v38 + 88) + 16048), v39 >> 1);
      *(_QWORD *)(v38 + 3352) = v39;
    }
    v40 = sub_22EFCE860(v39 + 48, v37 + 48);
    v41 = *(_WORD *)(v37 + 56) & 0x7F;
    v42 = -40;
    if (v41 > 0x46)
    {
      if (v41 != 83)
      {
        if (v41 == 71)
        {
          v42 = -56;
        }
        else if (v41 != 81)
        {
          goto LABEL_72;
        }
      }
    }
    else
    {
      if (v41 > 0x18)
        goto LABEL_71;
      if (v41 == 16)
        goto LABEL_64;
      if (((1 << v41) & 0x1066) == 0)
      {
        if (v41 == 24)
        {
LABEL_64:
          v42 = -48;
        }
        else
        {
LABEL_71:
          if (v41 == 70)
          {
            v42 = -64;
          }
          else
          {
LABEL_72:
            v43 = v41 - 52;
            v25 = v41 - 33 >= 5;
            v44 = -64;
            if (v25)
              v44 = -48;
            v25 = v43 >= 6;
            v42 = -72;
            if (v25)
              v42 = v44;
          }
        }
      }
    }
    v45 = *(_QWORD *)(v37 + 48 + v42 + 16);
    v46 = v45 & 0xFFFFFFFFFFFFFFF8;
    if ((v45 & 4) != 0)
      v46 = *(_QWORD *)v46;
    v47 = v46 - 48;
    if (v46)
      v48 = (*(_WORD *)(v46 + 8) & 0x7F) == 16;
    else
      v48 = 0;
    v49 = !v48 || v40;
    if (v48)
      v37 = v47;
    else
      v37 = 0;
    if ((v49 & 1) == 0)
      continue;
    break;
  }
  if (v40)
  {
    v50 = 0;
    v51 = v76[5];
    v52 = "";
    if ((v51 & 7) == 0)
    {
      v53 = v51 & 0xFFFFFFFFFFFFFFF8;
      if (v53)
      {
        v54 = *(_DWORD **)(v53 + 16);
        v55 = *v54;
        v52 = (const char *)(v54 + 4);
        v50 = v55;
      }
    }
    v78 = (unint64_t)v52;
    v79 = v50;
    v80 = 0;
    v56 = sub_22EC4A768((uint64_t)&v78, "basic_string", 12, "deque", 5, "forward_list", 12);
    v58 = sub_22E72DCE4(v56, "list", 4, "map", 3, "multimap", 8, v57, "multiset", 8, 1);
    v60 = sub_22E72DCE4(v58, "priority_queue", 14, "queue", 5, "set", 3, v59, "stack", 5, 1);
    v61 = sub_22EC4A768(v60, "unordered_map", 13, "unordered_set", 13, "vector", 6);
    if (*(_BYTE *)(v61 + 17))
    {
      if (*(_BYTE *)(v61 + 16))
      {
        v62 = *v5;
        v78 = v8;
        v79 = v7;
        sub_22EC3968C(v89, v62, v2, &v78, 0, 0, 0, *((unsigned __int8 *)v5 + 10));
        if (!*((_BYTE *)v5 + 9))
        {
          sub_22E8FCA40((_QWORD *)*v5, *(_DWORD *)(v21 + 24), 0x1A26u, 0, (uint64_t)v83);
          sub_22E903BEC(v83);
          if (*(_DWORD *)v2 == 7)
          {
            sub_22E8FCA40((_QWORD *)*v5, v6, 0x180Du, 0, (uint64_t)v81);
            v63 = (unsigned int *)v81;
LABEL_104:
            sub_22E903BEC(v63);
          }
          else if (*(_DWORD *)v2 == 6)
          {
            sub_22E8FCA40((_QWORD *)*v5, *(_DWORD *)(*(_QWORD *)(v2 + 32) + 24), 0x180Du, 0, (uint64_t)v82);
            v63 = (unsigned int *)v82;
            goto LABEL_104;
          }
        }
      }
    }
  }
LABEL_105:
  v20 = v89[0];
LABEL_106:
  if (!v20)
  {
    if (*((_BYTE *)v5 + 9))
      goto LABEL_128;
    sub_22EC412B0(v89, *v5, (int *)v2, (unsigned __int16 *)&v87, v17, v18);
    if (*(_DWORD *)v2 != 7)
    {
      if (*(_DWORD *)v2 == 6)
      {
        sub_22E8FCA40((_QWORD *)*v5, *(_DWORD *)(*(_QWORD *)(v2 + 32) + 24), 0x162Au, 0, (uint64_t)&v78);
        v77 = 1;
        v65 = sub_22E8900C4((uint64_t)&v78, &v77);
        v66 = 0;
        if (((1 << *(_DWORD *)v2) & 0x7FFB8) == 0)
        {
          if (((1 << *(_DWORD *)v2) & 0x100045) != 0)
            v66 = *(uint64_t **)(v2 + 32);
          else
            v66 = (uint64_t *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF8);
        }
        v84 = v66;
        sub_22E890024(v65, (uint64_t *)&v84);
        goto LABEL_127;
      }
LABEL_128:
      v64 = 1;
      *((_BYTE *)v5 + 8) = 1;
      goto LABEL_129;
    }
    v67 = *(_QWORD *)(v2 + 8);
    if (v67 && *(_DWORD *)v67 == 8)
    {
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 16) & 0xFFFFFFFFFFFFFFF0);
      if (v68)
        v69 = (*(_DWORD *)(v68 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v69 = 0;
      if (v69)
      {
        v73 = *(_DWORD *)(v68 + 16);
LABEL_131:
        v70 = 2 * (v73 == 4);
        goto LABEL_124;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      {
        v75 = sub_22F10CF48(v68);
        if (v75)
        {
          v73 = *(unsigned __int8 *)(v75 + 16);
          goto LABEL_131;
        }
      }
    }
    v70 = 0;
LABEL_124:
    sub_22E8FCA40((_QWORD *)*v5, v6, 0x162Au, 0, (uint64_t)&v78);
    LODWORD(v84) = v70;
    v71 = sub_22E8900C4((uint64_t)&v78, (int *)&v84);
    v77 = *(_DWORD *)(v2 + 32);
    sub_22E89519C(v71, (unsigned int *)&v77);
LABEL_127:
    sub_22E903BEC((unsigned int *)&v78);
    goto LABEL_128;
  }
  if (*((_BYTE *)v5 + 9))
    v64 = 0;
  else
    v64 = sub_22EC3DF80((int)v89, *v5);
LABEL_129:
  sub_22EC3CE2C((uint64_t)v89);
  return v64;
}

uint64_t sub_22EC4A768(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  v11 = sub_22F2ABF14(a1, a2, a3, 1);
  v12 = sub_22F2ABF14(v11, a4, a5, 1);
  return sub_22F2ABF14(v12, a6, a7, 1);
}

uint64_t sub_22EC4A7BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v13 = a2;
  result = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    {
      return 0;
    }
    else
    {
      v7 = sub_22EC6602C(a3, result) & 0xFFFFFFFFFFFFFFF8;
      v11 = *(_QWORD *)(a3 + 88) + 2128;
      v12 = 2587;
      v8 = (_BYTE *)sub_22E3B8AAC(v11);
      v10 = v8;
      v9 = *v8;
      v8[v9 + 1] = 9;
      *v8 = v9 + 1;
      *(_QWORD *)&v8[8 * v9 + 16] = a1;
      sub_22E90A46C(a3, a2, v7, (uint64_t)&v10, 0);
      if (v10)
      {
        if (v11)
          sub_22E3BB10C(v11, (unint64_t)v10);
      }
      sub_22EB4E494(a3, a2, v7, 1);
      return sub_22EB17F48(a3, v7, &v13, 1, 0, 0, 0, 0);
    }
  }
  return result;
}

BOOL sub_22EC4A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, unsigned __int8 *a10, unsigned int *a11, char a12, unsigned __int8 a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unint64_t *v19;
  llvm::APInt *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  BOOL v32;
  _BOOL8 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t (**v49)();
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  void **v86;
  void **v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unint64_t *v103;
  unsigned int v104;
  char v105;
  void **v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t *v109;
  void **v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  int v114;
  void **v115;
  int v116;
  unsigned __int8 *v117;
  unsigned int v118;
  void **v119;
  unsigned int v120;
  unint64_t *v121;
  int v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  BOOL v130;
  _QWORD *v131;
  _QWORD *v132;
  int v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  int *v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  unsigned __int8 *v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  unsigned __int8 *v156;
  unsigned int *v157;
  unsigned int v158;
  BOOL v159;
  _QWORD *v160;
  int v161;
  size_t v162;
  void *v163;
  uint64_t (***p_dst)();
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  _DWORD *v173;
  int *v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  uint64_t *v198;
  unsigned int v199;
  _QWORD **v200;
  unsigned int v201;
  _QWORD *v202;
  char *v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int *v208;
  unsigned int *v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  unsigned __int8 *v213;
  int v214;
  uint64_t v215;
  _DWORD *v216;
  int v217;
  int *v218;
  unsigned int v220;
  int *v221;
  int *v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t (**v226)();
  int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  int v231;
  uint64_t v232;
  uint64_t (**v233)();
  uint64_t v234;
  unint64_t v235;
  _QWORD **v236;
  unsigned int v237;
  _QWORD *v238;
  char *v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  _QWORD *v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int *v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t v259;
  void **v260;
  _QWORD *v261;
  uint64_t v262;
  unsigned __int8 v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  uint64_t *v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  int v286;
  unsigned int *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  _DWORD *v294;
  int v295;
  unsigned int *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  __int16 v301;
  unint64_t v302;
  __int16 v303;
  uint64_t *v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unsigned __int8 *v312;
  uint64_t v313;
  unsigned int v314;
  int v315;
  uint64_t v316;
  unsigned __int8 *v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t *v323;
  unint64_t *v324;
  unint64_t *v325;
  unint64_t *v326;
  unint64_t *v327;
  unint64_t *v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  llvm::APInt *v332;
  int v333;
  llvm::APInt *v334;
  llvm::APInt *v335;
  int *v336;
  unsigned int *v337;
  unsigned int *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _DWORD *v342;
  unsigned __int8 *v343;
  unsigned __int8 *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  _QWORD **v349;
  void **v350;
  unsigned int v351;
  char v352;
  void *__p[2];
  unint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  char v359;
  unint64_t *v360;
  unsigned int v361;
  char v362;
  void **v363;
  unsigned int v364;
  char v365;
  uint64_t (**__dst)();
  _QWORD v367[4];
  _BYTE v368[96];
  void *__src;
  __int128 __len;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  _QWORD v376[2];
  unsigned int v377;
  uint64_t v378;

  v13 = MEMORY[0x24BDAC7A8]();
  v21 = (unint64_t *)v18;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  v349 = (_QWORD **)v13;
  v25 = a11;
  v378 = *MEMORY[0x24BDAC8D0];
  if ((unsigned __int16)*(_DWORD *)(v16 + 20) >> 1 == v17)
  {
    if (*(_DWORD *)(v16 + 16))
    {
      v26 = *(unsigned __int8 *)(v13 + 8);
      v27 = *a9;
      v28 = (_DWORD *)sub_22E487828(v16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * v27) = v28;
      if (v28)
        *(_DWORD *)v23 |= *v28 & 0x3E000;
      sub_22EC48FF8();
      v29 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * v27);
      if (v29 != sub_22E487828(v22))
        sub_22F336094(v22, *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * v27));
      v30 = v26 == 0;
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * v27) = v22;
      *(_DWORD *)v23 |= *(_DWORD *)v22 & 0x3E000;
      v31 = *((unsigned __int8 *)v349 + 8);
      goto LABEL_8;
    }
    v49 = (uint64_t (**)())sub_22E487828(v16);
    v50 = (uint64_t)v49;
    __dst = v49;
    v51 = *(unsigned int **)(v22 + 24);
    if (*v51)
    {
      v53 = v51 + 3;
    }
    else
    {
      v52 = v51 + 5;
      v53 = v51 + 4;
      if ((*(_BYTE *)(v22 + 20) & 1) != 0)
        v53 = v52;
    }
    v54 = *v53;
    sub_22F0D5A50((uint64_t)v49);
    v56 = v55;
    sub_22F0D60E4(v50);
    __src = (void *)((v54 << 32) | 1);
    *(_QWORD *)&__len = v56 | (unint64_t)(v57 << 32);
    sub_22EC395BC(&v374, *v349, v24, &__src, &__dst, 1, 1, 1);
    if (a10)
    {
      if (*((_BYTE *)v349 + 9))
        v58 = sub_22EC49774(v349);
      else
        v58 = sub_22EC3DF80((int)&v374, (int)*v349);
      sub_22EC496F8(v349, (uint64_t)a10, a11, (_DWORD *)(v58 & 0xFFFFFFFFFFFFFFFELL));
    }
    ++*a9;
    v33 = (_DWORD)v374 == 0;
    sub_22EC3CE2C((uint64_t)&v374);
    return v33;
  }
  v34 = v17;
  v35 = *(_QWORD *)(v16 + 24);
  v36 = v17;
  v37 = (_DWORD *)(v35 + 24 * v17);
  v342 = v37;
  v332 = v20;
  if (v17)
  {
    if (!a10)
    {
      v40 = 0;
      goto LABEL_52;
    }
    v38 = *a11;
    v39 = *((_QWORD *)a10 + 2);
    if (v38 >= ((unint64_t)(*((_QWORD *)a10 + 3) - v39) >> 3)
      || (v40 = *(unsigned __int8 **)(v39 + 8 * v38)) == 0)
    {
      v41 = *((_QWORD *)a10 + 7);
      if (v41 < 4 || (*((_QWORD *)a10 + 7) & 2) != 0)
      {
        v327 = v19;
        v330 = v17;
        v43 = v15;
        v339 = v14;
        v44 = *a9;
        v45 = v18;
        v46 = *v18;
        if (*v37)
        {
          v47 = v37 + 3;
        }
        else
        {
          v48 = *(_DWORD *)(v35 + 24 * v17 + 16);
          if (v48)
            goto LABEL_44;
          v47 = (unsigned int *)(v35 + 24 * v17 + 20);
        }
        v48 = *v47;
LABEL_44:
        v63 = v17;
        v64 = sub_22E487828(v16);
        sub_22F0D60E4(v64);
        v66 = (unsigned __int8 *)sub_22EC49E30(v349, v43, v44, v46, (uint64_t)a10, v38, v48 | (unint64_t)(v65 << 32));
        v36 = v63;
        v40 = v66;
        v24 = v339;
        v37 = v342;
        v21 = (unint64_t *)v45;
        v23 = v43;
        v25 = a11;
        v34 = v330;
LABEL_45:
        v19 = v327;
        goto LABEL_52;
      }
      v40 = (unsigned __int8 *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
    }
    if (*v40 == 180)
      goto LABEL_52;
    v59 = v14;
    v327 = v19;
    v60 = v40;
    if (*v37)
    {
      v61 = v37 + 3;
    }
    else
    {
      v62 = *(_DWORD *)(v35 + 24 * v17 + 16);
      if (v62)
      {
LABEL_47:
        v319 = v17;
        v67 = sub_22E487828(v16);
        sub_22F0D60E4(v67);
        sub_22EC49CB8(v349, (unint64_t)v60, v62 | (unint64_t)(v68 << 32), 0);
        if (*((_BYTE *)v349 + 9))
        {
          v40 = 0;
          v25 = a11;
          v19 = v327;
          v24 = v59;
          v37 = v342;
LABEL_51:
          v36 = v319;
          goto LABEL_52;
        }
        v19 = v327;
        v24 = v59;
        v37 = v342;
        if (*v60 == 165)
        {
          v40 = (unsigned __int8 *)*((_QWORD *)v60 + 3);
          v25 = a11;
          goto LABEL_51;
        }
        v325 = v21;
        v205 = sub_22E3CD3D4((*v349)[11] + 2032, 32, 3);
        v206 = (*v349)[11];
        if (*v342)
        {
          v208 = v342 + 3;
        }
        else
        {
          v207 = *(_DWORD *)(v35 + 24 * v319 + 16);
          if (v207)
          {
LABEL_367:
            v241 = sub_22E487828(v22);
            sub_22F0D60E4(v241);
            sub_22F3C2C48(v205, v206, v207, (uint64_t)v60, v242);
            v25 = a11;
            sub_22EFFD554((uint64_t)a10, (*v349)[11], *a11, (_DWORD *)v205);
            v36 = v319;
            v21 = v325;
            v37 = v342;
            v40 = *(unsigned __int8 **)(v205 + 24);
            goto LABEL_45;
          }
          v208 = (int *)(v35 + 24 * v319 + 20);
        }
        v207 = *v208;
        goto LABEL_367;
      }
      v61 = (unsigned int *)(v35 + 24 * v17 + 20);
    }
    v62 = *v61;
    goto LABEL_47;
  }
  if (*(_QWORD *)(v13 + 16))
    v40 = *(unsigned __int8 **)(v13 + 16);
  else
    v40 = a10;
LABEL_52:
  if (*v37)
  {
    v69 = v36;
    v70 = sub_22EF5C728((*v349)[11], *v21);
    if (v70)
    {
      v71 = v70;
      v364 = 1;
      v363 = 0;
      v365 = 0;
      v361 = 1;
      v360 = 0;
      v362 = 0;
      if (*v342 == 1)
      {
        v72 = *(unsigned __int8 **)(v22 + 8 * (*(_DWORD *)(v35 + 24 * v69 + 8) + 1) + 32);
        sub_22F007D7C(v72, (*v349)[11], 0, (uint64_t)&v374);
        v363 = (void **)v374;
        v364 = v375;
        v73 = BYTE4(v375);
        v365 = BYTE4(v375);
        if (v375 > 0x40)
        {
          llvm::APInt::assignSlowCase((llvm::APInt *)&v360, (const llvm::APInt *)&v363);
          v73 = v365;
        }
        else
        {
          v360 = (unint64_t *)v374;
          v361 = v375;
        }
        v362 = v73;
      }
      else
      {
        v84 = (_DWORD *)(v35 + 24 * v69);
        v85 = v84[2];
        v84 += 2;
        sub_22F007D7C(*(unsigned __int8 **)(v22 + 32 + 8 * (v85 + 1)), (*v349)[11], 0, (uint64_t)&v374);
        v363 = (void **)v374;
        v364 = v375;
        v365 = BYTE4(v375);
        sub_22F007D7C(*(unsigned __int8 **)(v22 + 32 + 8 * (*v84 + 2)), (*v349)[11], 0, (uint64_t)&v374);
        v86 = (void **)v374;
        v360 = (unint64_t *)v374;
        v361 = v375;
        v362 = BYTE4(v375);
        v72 = *(unsigned __int8 **)(v22 + 32 + 8 * (*v84 + 2));
        v87 = (void **)&v363;
        if (v364 >= 0x41)
          v87 = v363;
        v88 = *v87;
        if (v375 < 0x41)
          v86 = (void **)&v360;
        if (v88 != *v86)
        {
          v89 = sub_22E487828(v22);
          if (sub_22F0005B0(v89, (*v349)[11], 1, v90, v91, v92, v93, v94))
          {
            if (!*((_BYTE *)v349 + 9))
              *(_DWORD *)v349[2] |= 0x40000u;
          }
        }
      }
      v337 = v25;
      v340 = v24;
      if (*(_BYTE *)(v71 + 16) == 2)
      {
        v97 = *(_DWORD *)(v71 + 48);
        v356 = v97;
        if (v97 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v355, (const llvm::APInt *)(v71 + 40));
          v97 = v356;
          v98 = v355;
        }
        else
        {
          v98 = *(_QWORD *)(v71 + 40);
          v355 = v98;
        }
        v358 = v97;
        v357 = v98;
        v356 = 0;
        v359 = 0;
        v117 = v40;
        if (v365)
          llvm::APInt::zextOrTrunc((llvm::APInt *)&v363);
        else
          llvm::APInt::sextOrTrunc((llvm::APInt *)&v363);
        v118 = v375;
        v119 = (void **)v374;
        if (v364 >= 0x41 && v363)
          MEMORY[0x2348A0E84](v363, 0x1000C8000313F17);
        v363 = v119;
        v364 = v118;
        v365 = v359;
        if (v362)
          llvm::APInt::zextOrTrunc((llvm::APInt *)&v360);
        else
          llvm::APInt::sextOrTrunc((llvm::APInt *)&v360);
        v120 = v375;
        v121 = (unint64_t *)v374;
        if (v361 >= 0x41 && v360)
          MEMORY[0x2348A0E84](v360, 0x1000C8000313F17);
        v360 = v121;
        v361 = v120;
        v362 = v359;
        if (v359)
          v122 = llvm::APInt::compare((llvm::APInt *)&v360, (const llvm::APInt *)&v357);
        else
          v122 = llvm::APInt::compareSigned((llvm::APInt *)&v360, (const llvm::APInt *)&v357);
        v107 = (uint64_t)v117;
        if ((v122 & 0x80000000) == 0)
        {
          if (*((_BYTE *)v349 + 9))
            goto LABEL_137;
          v160 = *v349;
          sub_22F0D5A50((uint64_t)v72);
          sub_22E8FCA40(v160, v161, 0xA90u, 0, (uint64_t)&v374);
          __src = &v371;
          __len = xmmword_22F455490;
          llvm::APInt::toString();
          v162 = __len;
          if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_448;
          v163 = __src;
          if ((unint64_t)__len >= 0x17)
          {
            v185 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)__len | 7) != 0x17)
              v185 = __len | 7;
            v186 = v185 + 1;
            p_dst = (uint64_t (***)())operator new(v185 + 1);
            v367[0] = v162;
            v367[1] = v186 | 0x8000000000000000;
            __dst = (uint64_t (**)())p_dst;
          }
          else
          {
            HIBYTE(v367[1]) = __len;
            p_dst = &__dst;
            if (!(_QWORD)__len)
            {
LABEL_293:
              *((_BYTE *)p_dst + v162) = 0;
              if (__src != &v371)
                free(__src);
              v187 = sub_22F2F3734((uint64_t)&v374, (void **)&__dst);
              __src = &v371;
              __len = xmmword_22F455490;
              llvm::APInt::toString();
              v188 = (void *)__len;
              if ((unint64_t)__len <= 0x7FFFFFFFFFFFFFF7)
              {
                v189 = __src;
                if ((unint64_t)__len >= 0x17)
                {
                  v191 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
                  if (((unint64_t)__len | 7) != 0x17)
                    v191 = __len | 7;
                  v192 = v191 + 1;
                  v190 = operator new(v191 + 1);
                  __p[1] = v188;
                  v354 = v192 | 0x8000000000000000;
                  __p[0] = v190;
                }
                else
                {
                  HIBYTE(v354) = __len;
                  v190 = __p;
                  if (!(_QWORD)__len)
                    goto LABEL_303;
                }
                memmove(v190, v189, (size_t)v188);
LABEL_303:
                *((_BYTE *)v188 + (_QWORD)v190) = 0;
                if (__src != &v371)
                  free(__src);
                v193 = sub_22F2F3734(v187, __p);
                sub_22F0D4E74((uint64_t)v72);
                __src = v194;
                sub_22E8906A0(v193, (uint64_t *)&__src);
                if (SHIBYTE(v354) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v367[1]) < 0)
                  operator delete(__dst);
                sub_22E903BEC((unsigned int *)&v374);
LABEL_137:
                ++*a9;
                if (v358 >= 0x41 && v357)
                  MEMORY[0x2348A0E84](v357, 0x1000C8000313F17);
LABEL_140:
                v33 = 1;
LABEL_141:
                if (v361 >= 0x41 && v360)
                  MEMORY[0x2348A0E84](v360, 0x1000C8000313F17);
                if (v364 >= 0x41 && v363)
                  MEMORY[0x2348A0E84](v363, 0x1000C8000313F17);
                return v33;
              }
LABEL_448:
              abort();
            }
          }
          memmove(p_dst, v163, v162);
          goto LABEL_293;
        }
        if (v358 >= 0x41 && v357)
          MEMORY[0x2348A0E84](v357, 0x1000C8000313F17);
      }
      else
      {
        v99 = v34;
        v100 = (*v349)[11];
        v101 = sub_22EF67C8C(v100);
        sub_22EF5CDF0(v100, *(_QWORD *)(v101 & 0xFFFFFFFFFFFFFFF0));
        v102 = v40;
        v103 = v21;
        if (v365)
          llvm::APInt::zextOrTrunc((llvm::APInt *)&v363);
        else
          llvm::APInt::sextOrTrunc((llvm::APInt *)&v363);
        v104 = v375;
        v105 = v365;
        v106 = (void **)v374;
        if (v364 >= 0x41 && v363)
          MEMORY[0x2348A0E84](v363, 0x1000C8000313F17);
        v363 = v106;
        v364 = v104;
        v365 = v105;
        if (v362)
          llvm::APInt::zextOrTrunc((llvm::APInt *)&v360);
        else
          llvm::APInt::sextOrTrunc((llvm::APInt *)&v360);
        v21 = v103;
        v107 = (uint64_t)v102;
        v108 = v375;
        v109 = (unint64_t *)v374;
        v34 = v99;
        if (v361 >= 0x41 && v360)
          MEMORY[0x2348A0E84](v360, 0x1000C8000313F17);
        v360 = v109;
        v361 = v108;
        v365 = 1;
        v362 = 1;
      }
      v347 = v23;
      v323 = v21;
      v331 = v34;
      if (!v107)
      {
LABEL_99:
        if (v364 >= 0x41)
          v110 = v363;
        else
          v110 = (void **)&v363;
        v111 = *(_DWORD *)v110;
        LODWORD(__dst) = *(_DWORD *)v110;
        v112 = *a9;
        sub_22EC38D34((uint64_t)&v374, (*v349)[11], 0, v340);
        while (1)
        {
          v113 = v365;
          v114 = v365
               ? llvm::APInt::compare((llvm::APInt *)&v363, (const llvm::APInt *)&v360)
               : llvm::APInt::compareSigned((llvm::APInt *)&v363, (const llvm::APInt *)&v360);
          if (v114 > 0)
            break;
          __src = *(void **)(v71 + 32);
          *a9 = v112;
          v377 = v111;
          if (a12 && v364 > 0x40)
            llvm::APInt::equalSlowCase((llvm::APInt *)&v363, (const llvm::APInt *)&v360);
          if ((sub_22EC4A8F4(v349, &v374, v347) & 1) != 0)
            goto LABEL_140;
          llvm::APInt::operator++();
          if (v364 >= 0x41)
            v115 = v363;
          else
            v115 = (void **)&v363;
          v111 = *(_DWORD *)v115;
          LODWORD(__dst) = *(_DWORD *)v115;
        }
        if (v331)
        {
          if (a12)
          {
            v116 = *((unsigned __int8 *)v349 + 8);
            v351 = v364;
            if (v364 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v350, (const llvm::APInt *)&v363);
              v113 = v365;
            }
            else
            {
              v350 = v363;
            }
            v352 = v113;
            sub_22EC48604(v349, v340, v347, v323, (uint64_t)&v350, 0, a9, v107, (int *)&__dst);
            if (v351 >= 0x41 && v350)
              MEMORY[0x2348A0E84](v350, 0x1000C8000313F17);
            if (v116)
              v159 = 1;
            else
              v159 = *((_BYTE *)v349 + 8) == 0;
            v33 = !v159;
          }
          else
          {
            v33 = 0;
          }
        }
        else
        {
          if (v332)
          {
            if (*((_DWORD *)v332 + 2) > 0x40u || (v135 = v364, v364 > 0x40))
            {
              llvm::APInt::assignSlowCase(v332, (const llvm::APInt *)&v363);
              v113 = v365;
            }
            else
            {
              *(_QWORD *)v332 = v363;
              *((_DWORD *)v332 + 2) = v135;
            }
            *((_BYTE *)v332 + 12) = v113;
          }
          v33 = 0;
          *v337 = v111;
        }
        goto LABEL_141;
      }
      if (!sub_22F3C2220((_QWORD *)v107))
      {
LABEL_441:
        v297 = (unint64_t *)&v360;
        if (v361 >= 0x41)
          v297 = v360;
        v298 = *v297;
        if (v298 >= ((*(_QWORD *)(v107 + 24) - *(_QWORD *)(v107 + 16)) >> 3))
        {
          v299 = (*v349)[11];
          v374 = 0;
          sub_22EFFD4BC((char *)(v107 + 16), v299, v298 + 1, &v374);
        }
        goto LABEL_99;
      }
      if (*((_BYTE *)v349 + 9))
      {
        v107 = 0;
        goto LABEL_99;
      }
      v195 = (uint64_t *)(*v349)[11];
      v196 = sub_22EFFA6B0(**(unsigned __int8 ***)(v107 + 16));
      v197 = *(_QWORD *)(v71 + 32);
      v198 = (uint64_t *)(v197 & 0xFFFFFFFFFFFFFFF0);
      v329 = v197;
      if (sub_22F1124D8(*(_QWORD *)(v197 & 0xFFFFFFFFFFFFFFF0)))
      {
        v329 = sub_22EF6A4D4(v195, v197);
        v198 = (uint64_t *)(v329 & 0xFFFFFFFFFFFFFFF0);
      }
      v199 = sub_22EF5CDF0((uint64_t)v195, *v198);
      v317 = v196;
      v322 = v197;
      v314 = v199;
      if (*v196 == 225)
      {
        v200 = (_QWORD **)(v71 + 40);
        v201 = *(_DWORD *)(v71 + 48);
        if (v201 >= 0x41)
        {
          v310 = *((unsigned int *)v196 + 4);
          if (v201 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v71 + 40)) >= 0x41)
          {
            v203 = (char *)(v107 + 16);
            v204 = v310;
            goto LABEL_403;
          }
          v202 = (_QWORD *)**v200;
          v204 = v310;
          v203 = (char *)(v107 + 16);
          if ((unint64_t)v202 >= v310)
            goto LABEL_403;
        }
        else
        {
          v202 = *v200;
          v203 = (char *)(v107 + 16);
          v204 = *((_DWORD *)v196 + 4);
          if ((unint64_t)*v200 >= v204)
          {
LABEL_403:
            v374 = 0;
            sub_22EFFD4BC(v203, (uint64_t)v195, v204, &v374);
            if (v204)
            {
              v279 = 0;
              v307 = v204;
              v312 = v196 + 20;
              v280 = (uint64_t)(v195 + 254);
              v302 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v199;
              v304 = v195 + 254;
              v345 = (uint64_t)v195;
              do
              {
                v281 = (*(_DWORD *)v196 >> 21) & 7;
                if (v281 == 4)
                {
                  v282 = *(unsigned int *)&v312[4 * *((unsigned int *)v196 + 1) + 4 * v279];
                }
                else if (v281 == 2)
                {
                  v282 = *(unsigned __int16 *)&v312[4 * *((unsigned int *)v196 + 1) + 2 * v279];
                }
                else
                {
                  v282 = v312[4 * *((unsigned int *)v196 + 1) + v279];
                }
                LODWORD(v375) = v199;
                if (v199 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v374);
                }
                else
                {
                  v283 = v302;
                  if (!v199)
                    v283 = 0;
                  v374 = (void *)(v283 & v282);
                }
                v284 = v280;
                v285 = (_DWORD *)sub_22E3CD3D4(v280, 32, 3);
                sub_22EFF605C((uint64_t)v196);
                sub_22EFF8F1C((uint64_t)v285, v345, (uint64_t)&v374, v329, v286);
                if (v322 != v329)
                {
                  v287 = (unsigned int *)sub_22E3CD3D4(v284, 24, 3);
                  v285 = sub_22F003694(v287, v322, 30, (uint64_t)v285, 0, 0, 0);
                }
                sub_22EFFD554(v107, v345, v279, v285);
                v199 = v314;
                v196 = v317;
                if (v375 >= 0x41 && v374)
                  MEMORY[0x2348A0E84](v374, 0x1000C8000313F17);
                ++v279;
                v280 = (uint64_t)v304;
              }
              while (v307 != v279);
            }
            goto LABEL_441;
          }
        }
        v204 = v202;
        goto LABEL_403;
      }
      v376[0] = 0;
      v375 = 0;
      v374 = 0;
      v234 = **((_QWORD **)v196 + 2);
      LODWORD(__src) = 7;
      sub_22EF6B358((uint64_t)v195, v234);
      if (v376[0] >= 0)
        v235 = HIBYTE(v376[0]) & 0x7F;
      else
        v235 = v375;
      v236 = (_QWORD **)(v71 + 40);
      v237 = *(_DWORD *)(v71 + 48);
      if (v237 >= 0x41)
      {
        v311 = v235;
        if (v237 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v71 + 40)) >= 0x41)
        {
          v239 = (char *)(v107 + 16);
          v240 = v311;
          goto LABEL_423;
        }
        v238 = (_QWORD *)**v236;
        v240 = v311;
        v239 = (char *)(v107 + 16);
        if ((unint64_t)v238 >= v311)
        {
LABEL_423:
          __src = 0;
          sub_22EFFD4BC(v239, (uint64_t)v195, v240, &__src);
          if (v240)
          {
            v288 = 0;
            v313 = v240;
            v289 = (uint64_t)(v195 + 254);
            v305 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v199;
            v308 = v195 + 254;
            v346 = (uint64_t)v195;
            do
            {
              v290 = (char *)&v374;
              if (v376[0] < 0)
                v290 = (char *)v374;
              v291 = v290[v288];
              LODWORD(__len) = v199;
              if (v199 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src);
              }
              else
              {
                v292 = v305;
                if (!v199)
                  v292 = 0;
                __src = (void *)(v292 & v291);
              }
              v293 = v289;
              v294 = (_DWORD *)sub_22E3CD3D4(v289, 32, 3);
              sub_22EFF605C((uint64_t)v196);
              sub_22EFF8F1C((uint64_t)v294, v346, (uint64_t)&__src, v329, v295);
              if (v322 != v329)
              {
                v296 = (unsigned int *)sub_22E3CD3D4(v293, 24, 3);
                v294 = sub_22F003694(v296, v322, 30, (uint64_t)v294, 0, 0, 0);
              }
              sub_22EFFD554(v107, v346, v288, v294);
              v199 = v314;
              v196 = v317;
              if (__len >= 0x41 && __src)
                MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
              ++v288;
              v289 = (uint64_t)v308;
            }
            while (v313 != v288);
          }
          if (SHIBYTE(v376[0]) < 0)
            operator delete(v374);
          goto LABEL_441;
        }
      }
      else
      {
        v238 = *v236;
        v239 = (char *)(v107 + 16);
        v240 = v235;
        if ((unint64_t)*v236 >= v235)
          goto LABEL_423;
      }
      v240 = v238;
      goto LABEL_423;
    }
    if (*((_BYTE *)v349 + 9))
      goto LABEL_344;
    sub_22E8FCA40(*v349, v342[3], 0xA8Fu, 0, (uint64_t)&v374);
    v83 = (uint64_t)&v374;
    goto LABEL_79;
  }
  v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v74 || *(_BYTE *)(v74 + 16) != 45)
  {
    v95 = *(_DWORD *)(v35 + 24 * v36 + 16);
    if (!v95)
      v95 = *(_DWORD *)(v35 + 24 * v36 + 20);
    if (!*((_BYTE *)v349 + 9))
    {
      sub_22E8FCA40(*v349, v95, 0xD20u, 0, (uint64_t)&v374);
      LODWORD(__src) = (*(_DWORD *)(*v349)[9] >> 8) & 1;
      v83 = sub_22E89519C((uint64_t)&v374, (unsigned int *)&__src);
LABEL_79:
      sub_22E8901B8(v83, (uint64_t *)v21);
      goto LABEL_80;
    }
LABEL_344:
    v218 = (int *)a9;
    v217 = *a9 + 1;
LABEL_345:
    *v218 = v217;
    return 1;
  }
  __p[0] = 0;
  v75 = v35 + 24 * v36;
  v78 = *(void **)(v75 + 8);
  v76 = (uint64_t *)(v75 + 8);
  v77 = v78;
  if ((v78 & 1) != 0)
    v77 = 0;
  __p[0] = v77;
  v328 = v19;
  if (!v77)
  {
    v123 = *v76;
    v320 = v36;
    if ((v123 & 1) != 0)
    {
      v124 = (void **)(v123 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v300 = *(_QWORD *)(v123 + 40);
      if ((v300 & 7) != 0)
        v124 = 0;
      else
        v124 = (void **)(v300 & 0xFFFFFFFFFFFFFFF8);
    }
    v363 = v124;
    v125 = sub_22F114198(*(_QWORD *)(v74 + 24));
    v126 = sub_22EFCE144(v125 + 64, (uint64_t)v124);
    if (v126)
    {
      v127 = v126;
      v128 = v126;
      v129 = (uint64_t)v342;
      while (1)
      {
        v130 = (v128 & 4) == 0;
        v131 = (_QWORD *)(v128 & 0xFFFFFFFFFFFFFFF8);
        if (!v131)
          v130 = 1;
        v132 = v131;
        if (!v130)
          v132 = (_QWORD *)*v131;
        v133 = *((_DWORD *)v132 + 7) & 0x7F;
        if (v132 && (v133 - 52) >= 0xFFFFFFFD)
        {
          __p[0] = v132;
          goto LABEL_237;
        }
        if (v132 && v133 == 68)
          break;
        if (!v130)
        {
          v128 = v131[1];
          if (v128)
            continue;
        }
        goto LABEL_164;
      }
      v344 = v40;
      v326 = v21;
      v335 = (llvm::APInt *)v126;
      if (*((_BYTE *)v349 + 9))
      {
        v248 = (uint64_t)*v349;
        v249 = *(unsigned __int16 *)(v22 + 22) - 1;
        v374 = v376;
        v375 = 0x400000000;
        sub_22E4639CC((uint64_t)&v374, v249, 0);
        if ((_DWORD)v249)
        {
          v250 = 0;
          do
          {
            *(_QWORD *)((char *)v374 + v250) = *(_QWORD *)(v22 + 40 + v250);
            v250 += 8;
          }
          while (8 * v249 != v250);
        }
        v251 = *(_QWORD *)(v248 + 88);
        v318 = *(_QWORD *)(v22 + 24);
        v252 = *(_DWORD *)(v22 + 16);
        v303 = (unsigned __int16)*(_DWORD *)(v22 + 20) >> 1;
        v306 = v374;
        v309 = v375;
        v315 = *(_DWORD *)(v22 + 20) & 1;
        v253 = (int *)sub_22E487828(v22);
        v22 = sub_22F3C2884(v251, v318, v303, (uint64_t)v306, v309, v252, v315, v253);
        if (v374 != v376)
          free(v374);
        v127 = (unint64_t)v335;
      }
      v254 = (uint64_t)*v349;
      v374 = v376;
      v375 = 0x400000000;
      v255 = *((unsigned int *)v132 + 16);
      if ((_DWORD)v255)
      {
        v316 = v254;
        v269 = (uint64_t *)v132[7];
        if ((_DWORD)v255 != 1)
        {
          v270 = 8 * v255 - 8;
          do
          {
            LODWORD(__src) = 0;
            __len = 1uLL;
            v271 = sub_22E4EF088((uint64_t)&v374, (unint64_t)&__src, 1);
            v272 = (char *)v374 + 24 * v375;
            v273 = *(_OWORD *)v271;
            *((_QWORD *)v272 + 2) = *(_QWORD *)(v271 + 16);
            *(_OWORD *)v272 = v273;
            LODWORD(v375) = v375 + 1;
            v274 = *v269++;
            *((_QWORD *)v374 + 3 * v375 - 2) = v274;
            v270 -= 8;
          }
          while (v270);
        }
        v275 = *(_QWORD *)(v22 + 24) + 24 * v320;
        LODWORD(__src) = 0;
        v276 = *(_QWORD *)(v275 + 16);
        *(_QWORD *)&__len = 1;
        *((_QWORD *)&__len + 1) = v276;
        v277 = sub_22E4EF088((uint64_t)&v374, (unint64_t)&__src, 1);
        v255 = (unint64_t)v374 + 24 * v375;
        v278 = *(_OWORD *)v277;
        *(_QWORD *)(v255 + 16) = *(_QWORD *)(v277 + 16);
        *(_OWORD *)v255 = v278;
        LODWORD(v375) = v375 + 1;
        *((_QWORD *)v374 + 3 * v375 - 2) = *v269;
        v256 = v374;
        LODWORD(v255) = v375;
        v127 = (unint64_t)v335;
        v21 = v326;
        v254 = v316;
      }
      else
      {
        v256 = v376;
      }
      sub_22F3C2ACC((_QWORD *)v22, *(_QWORD *)(v254 + 88), v34, v256, &v256[3 * v255]);
      v40 = v344;
      if (v374 != v376)
        free(v374);
      v129 = *(_QWORD *)(v22 + 24) + 24 * v320;
      __p[0] = *(void **)v132[7];
      if (__p[0])
        goto LABEL_237;
LABEL_164:
      if (*((_BYTE *)v349 + 9))
        goto LABEL_344;
      if (v127 >= 8)
      {
        sub_22E8FCA40(*v349, *(_DWORD *)(v129 + 20), 0xD21u, 0, (uint64_t)&v374);
        sub_22E8BAE44((uint64_t)&v374, (uint64_t *)&v363);
        sub_22E903BEC((unsigned int *)&v374);
        v134 = v127 & 0xFFFFFFFFFFFFFFF8;
        if ((v127 & 4) != 0 && v134)
          v134 = *(_QWORD *)v134;
        sub_22E8FCA40(*v349, *(_DWORD *)(v134 + 24), 0x15F6u, 0, (uint64_t)v368);
        v96 = (unsigned int *)v368;
        goto LABEL_81;
      }
    }
    else
    {
      v129 = (uint64_t)v342;
      if (*((_BYTE *)v349 + 9))
        goto LABEL_344;
    }
    v144 = v129;
    v145 = sub_22F114198(*(_QWORD *)(v74 + 24));
    LODWORD(v367[0]) = 16843009;
    BYTE4(v367[0]) = 1;
    memset((char *)v367 + 5, 0, 19);
    __dst = &off_24FAB87E8;
    v367[3] = v145;
    v146 = (uint64_t)*v349;
    v147 = *(_DWORD *)(v144 + 20);
    v374 = v363;
    LODWORD(v375) = v147;
    sub_22EFC6D6C((uint64_t)v376, (uint64_t)v363);
    v148 = sub_22F114198(*(_QWORD *)(v74 + 24));
    if (v148)
      v149 = v148 + 64;
    else
      v149 = 0;
    sub_22EC6AB20(v146, (uint64_t *)&v374, 3, 0, 0, (uint64_t)&__dst, 1, v149, (uint64_t)&__src, 0, 0, 1u);
    v334 = (llvm::APInt *)__src;
    if (__src)
    {
      v338 = v25;
      v257 = v40;
      v258 = (uint64_t)*v349;
      v259 = (*v349)[11] + 2128;
      v374 = 0;
      v375 = v259;
      LODWORD(v376[0]) = 3363;
      v260 = v363;
      v374 = (void *)sub_22E3B8AAC(v259);
      *((_BYTE *)v374 + *(unsigned __int8 *)v374 + 1) = 5;
      v261 = v374;
      v262 = *(unsigned __int8 *)v374;
      v263 = v262 + 1;
      *(_BYTE *)v374 = v262 + 1;
      v261[v262 + 2] = v260;
      v264 = *v21;
      *((_BYTE *)v261 + v263 + 1) = 9;
      v265 = v374;
      v266 = *(unsigned __int8 *)v374;
      *(_BYTE *)v374 = v266 + 1;
      v265[v266 + 2] = v264;
      sub_22EC6BEF8(v258, (uint64_t)&__src, (uint64_t)&v374, 1);
      if (v374 && v375)
        sub_22E3BB10C(v375, (unint64_t)v374);
      v267 = sub_22F2E6D78((uint64_t)&__src);
      if (v267)
      {
        if ((*(_DWORD *)(v267 + 28) & 0x7Fu) - 49 >= 3)
          v268 = 0;
        else
          v268 = (void *)v267;
      }
      else
      {
        v268 = 0;
      }
      v40 = v257;
      __p[0] = v268;
      *((_BYTE *)v349 + 8) = 1;
      v25 = v338;
    }
    else
    {
      sub_22E8FCA40(*v349, *(_DWORD *)(v144 + 20), 0xD22u, 0, (uint64_t)&v374);
      v150 = sub_22E8BAE44((uint64_t)&v374, (uint64_t *)&v363);
      sub_22E8901B8(v150, (uint64_t *)v21);
      sub_22E903BEC((unsigned int *)&v374);
      ++*a9;
    }
    v374 = &v373;
    sub_22E8D19C8((void ***)&v374);
    if (*((uint64_t **)&__len + 1) != &v372)
      free(*((void **)&__len + 1));
    v129 = v144;
    if (!v334)
      return 1;
LABEL_237:
    v342 = (_DWORD *)v129;
  }
  v336 = (int *)v25;
  v79 = sub_22F114198(*(_QWORD *)(v74 + 24));
  v80 = 0;
  if (v79)
  {
    v81 = v79;
    v82 = v40;
    if ((*(_DWORD *)(v79 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v79 + 104) + 96), *(_QWORD *)(v79 + 104));
      v80 = *(_DWORD *)(*(_QWORD *)(v81 + 128) + 16);
    }
  }
  else
  {
    v82 = v40;
  }
  LODWORD(v363) = v80;
  v136 = sub_22F114198(*(_QWORD *)(v74 + 24));
  v137 = sub_22EFC3B90(v136);
  v333 = v80;
  v341 = v24;
  v348 = v23;
  if (v137)
  {
    v138 = (int *)v137;
    v139 = v80;
LABEL_178:
    if ((v138[17] & 1) == 0 || *((_QWORD *)v138 + 5))
    {
      if (!__p[0]
        || __p[0] != v138
        && (v140 = (*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))(),
            v140 != (*(uint64_t (**)(int *))(*(_QWORD *)v138 + 32))(v138)))
      {
        LODWORD(v363) = ++v139;
        goto LABEL_184;
      }
      __p[0] = v138;
      v141 = (unint64_t)v138;
      goto LABEL_189;
    }
LABEL_184:
    while (1)
    {
      v138 = (int *)(*((_QWORD *)v138 + 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v138)
        break;
      if ((v138[7] & 0x7Fu) - 49 < 3)
        goto LABEL_178;
    }
  }
  v141 = (unint64_t)__p[0];
  if (!__p[0])
  {
    v138 = 0;
    v143 = 1;
    v142 = v82;
    goto LABEL_207;
  }
  v138 = (int *)__p[0];
LABEL_189:
  v142 = v82;
  if ((v138[7] & 0x7Fu) - 52 > 0xFFFFFFFC)
  {
    v143 = 0;
  }
  else
  {
    v141 = (unint64_t)v138;
    while (1)
    {
      v141 = *(_QWORD *)(v141 + 8) & 0xFFFFFFFFFFFFFFF8;
      v143 = v141 == 0;
      if (!v141)
        break;
      v138 = (int *)v141;
      if ((*(_DWORD *)(v141 + 28) & 0x7Fu) - 52 > 0xFFFFFFFC)
        goto LABEL_207;
    }
    v138 = 0;
  }
LABEL_207:
  if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v74 + 24)) + 72) & 0xE000) == 0x4000)
  {
    LODWORD(v363) = 0;
    if (v142)
    {
      v151 = *((_QWORD *)v142 + 7);
      if ((v151 & 2) == 0)
        goto LABEL_246;
      v152 = v151 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v151 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_246;
      if (!v143)
      {
        if (v138 == (int *)v152)
          goto LABEL_246;
        v153 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v152 + 32))(v152);
        if (v153 == (*(uint64_t (**)(int *))(*(_QWORD *)v138 + 32))(v138))
          goto LABEL_246;
      }
      v154 = (char *)(v142 + 16);
      v155 = **((_QWORD **)v142 + 2);
      if (!v155)
      {
LABEL_245:
        v167 = (*v349)[11];
        v374 = 0;
        sub_22EFFD4BC(v154, v167, 0, &v374);
LABEL_246:
        *((_QWORD *)v142 + 7) = v141 | 2;
        goto LABEL_247;
      }
      v156 = v142;
      if (*v342)
      {
        v157 = v342 + 3;
      }
      else
      {
        v158 = v342[4];
        if (v158)
          goto LABEL_244;
        v157 = v342 + 5;
      }
      v158 = *v157;
LABEL_244:
      v165 = sub_22E487828(v22);
      sub_22F0D60E4(v165);
      sub_22EC49CB8(v349, v155, v158 | (unint64_t)(v166 << 32), 1);
      v142 = v156;
      goto LABEL_245;
    }
  }
LABEL_247:
  v168 = *v349;
  if (*((_BYTE *)v349 + 9))
  {
    if (!sub_22EB17B6C(v168, (unint64_t)v138, *((unsigned __int8 *)v349 + 10)))
      goto LABEL_344;
  }
  else
  {
    LODWORD(v374) = v342[5];
    if (sub_22EB17F48(v168, v138, &v374, 1, 0, 0, 0, 0))
      goto LABEL_344;
  }
  if (!v34)
  {
    if (*((_BYTE *)v349 + 9))
      goto LABEL_255;
    if (v328)
    {
      if ((*(_QWORD *)(*v349)[9] & 0x100) != 0)
      {
        sub_22F114198(*(_QWORD *)(v74 + 24));
        if (!*v328 || (v181 = sub_22EFC306C(*v328), v181 > sub_22EFC306C((unint64_t)v138) + 1))
        {
          __src = 0;
          v182 = sub_22F114198(*(_QWORD *)(v74 + 24));
          v183 = sub_22EFC3B90(v182);
          sub_22F114198(*(_QWORD *)(v74 + 24));
          if (v183)
          {
LABEL_276:
            if ((*(_BYTE *)(v183 + 68) & 1) != 0 && !*(_QWORD *)(v183 + 40))
            {
LABEL_282:
              while (1)
              {
                v183 = *(_QWORD *)(v183 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v183)
                  break;
                if ((*(_DWORD *)(v183 + 28) & 0x7Fu) - 49 <= 2)
                {
                  sub_22F114198(*(_QWORD *)(v74 + 24));
                  goto LABEL_276;
                }
              }
              sub_22F114198(*(_QWORD *)(v74 + 24));
            }
            else
            {
              sub_22F114198(*(_QWORD *)(v74 + 24));
              v184 = *v328;
              if (!*v328
                || v183 != v184
                && (v321 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v183 + 32))(v183),
                    v321 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v184 + 32))(v184)))
              {
                __src = (void *)v183;
                goto LABEL_282;
              }
            }
          }
          if (__src)
          {
            v220 = sub_22EFC306C((unint64_t)__src);
            if (v220 > sub_22EFC306C((unint64_t)__p[0]))
            {
              v221 = *(int **)(v22 + 24);
              if (*v221)
              {
                v223 = v221 + 3;
              }
              else
              {
                v222 = v221 + 5;
                v223 = v221 + 4;
                if ((*(_BYTE *)(v22 + 20) & 1) != 0)
                  v223 = v222;
              }
              sub_22E8FCA40(*v349, *v223, 0x1462u, 0, (uint64_t)&v374);
              v224 = sub_22E890024((uint64_t)&v374, (uint64_t *)__p);
              v225 = sub_22E890024(v224, (uint64_t *)&__src);
              sub_22F0D4E74(v22);
              __dst = v226;
              sub_22E8906A0(v225, (uint64_t *)&__dst);
              sub_22E903BEC((unsigned int *)&v374);
              v227 = sub_22EFC306C((unint64_t)__src);
              if (v142)
              {
                v228 = *((_QWORD *)v142 + 2);
                if (v227 + v333 <= ((unint64_t)(*((_QWORD *)v142 + 3) - v228) >> 3))
                {
                  v229 = *(_QWORD *)(v228 + 8 * (v227 + v333));
                  if (v229)
                  {
                    v230 = *v349;
                    sub_22F0D5A50(v229);
                    sub_22E8FCA40(v230, v231, 0x1774u, 0, (uint64_t)&v374);
                    v232 = sub_22E890024((uint64_t)&v374, (uint64_t *)&__src);
                    sub_22F0D4E74(v229);
                    __dst = v233;
                    sub_22E8906A0(v232, (uint64_t *)&__dst);
                    sub_22E903BEC((unsigned int *)&v374);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*((_BYTE *)v349 + 9))
    *((_QWORD *)v342 + 1) = v141;
LABEL_255:
  if (v142 && v363 >= ((*((_QWORD *)v142 + 3) - *((_QWORD *)v142 + 2)) >> 3))
  {
    v169 = (*v349)[11];
    v374 = 0;
    sub_22EFFD4BC((char *)v142 + 16, v169, (_DWORD)v363 + 1, &v374);
  }
  v324 = v21;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v138 + 6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 4)
  {
    LODWORD(__dst) = (_DWORD)v363;
    v176 = v341;
    sub_22EC38DD0((uint64_t)&v374, (unint64_t)v138, v341);
    __src = (void *)v376[0];
    HIBYTE(v301) = 0;
    v177 = v348;
    if ((sub_22EC4A8F4(v349, &v374, v348) & 1) != 0)
      return 1;
    goto LABEL_265;
  }
  v170 = v34 + 1;
  v171 = (unsigned __int16)*(_DWORD *)(v22 + 20) >> 1;
  if (v34 + 1 != v171 && !*((_BYTE *)v349 + 9))
  {
    v343 = v142;
    v172 = *(_QWORD *)(v22 + 24);
    v173 = (_DWORD *)(v172 + 24 * v170);
    if (*v173)
    {
      v174 = v173 + 3;
    }
    else
    {
      v175 = *(_DWORD *)(v172 + 24 * v170 + 16);
      if (v175)
      {
LABEL_325:
        sub_22E8FCA40(*v349, v175, 0xCAEu, 0, (uint64_t)&v374);
        if (*v173)
        {
          v209 = v173 + 3;
        }
        else
        {
          v210 = *(_DWORD *)(v172 + 24 * v170 + 16);
          if (v210)
            goto LABEL_329;
          v209 = (unsigned int *)(v172 + 24 * v170 + 20);
        }
        v210 = *v209;
LABEL_329:
        v211 = sub_22E487828(v22);
        sub_22F0D60E4(v211);
        __src = (void *)__PAIR64__(v212, v210);
        sub_22E8906A0((uint64_t)&v374, (uint64_t *)&__src);
        sub_22E903BEC((unsigned int *)&v374);
        sub_22E8FCA40(*v349, v138[6], 0x1602u, 0, (uint64_t)&v374);
        __src = v138;
        sub_22E890024((uint64_t)&v374, (uint64_t *)&__src);
        sub_22E903BEC((unsigned int *)&v374);
        v142 = v343;
        goto LABEL_330;
      }
      v174 = (int *)(v172 + 24 * v170 + 20);
    }
    v175 = *v174;
    goto LABEL_325;
  }
LABEL_330:
  if (!*((_BYTE *)v349 + 8)
    && *(unsigned __int8 *)sub_22E487828(v22) != 180
    && *(unsigned __int8 *)sub_22E487828(v22) != 225)
  {
    if (!*((_BYTE *)v349 + 9))
    {
      v243 = *v349;
      v244 = sub_22E487828(v22);
      sub_22F0D5A50(v244);
      sub_22E8FCA40(v243, v245, 0xD99u, 0, (uint64_t)&v374);
      v246 = sub_22E487828(v22);
      sub_22F0D4E74(v246);
      __src = v247;
      sub_22E8906A0((uint64_t)&v374, (uint64_t *)&__src);
      sub_22E903BEC((unsigned int *)&v374);
      sub_22E8FCA40(*v349, v138[6], 0x1602u, 0, (uint64_t)&v374);
      __src = v138;
      sub_22E890024((uint64_t)&v374, (uint64_t *)&__src);
LABEL_80:
      v96 = (unsigned int *)&v374;
LABEL_81:
      sub_22E903BEC(v96);
      goto LABEL_344;
    }
    goto LABEL_344;
  }
  v176 = v341;
  if (v170 != v171)
    goto LABEL_344;
  v213 = (unsigned __int8 *)sub_22E487828(v22);
  if (sub_22EC4CD94((uint64_t)v349, *(_DWORD *)v341, *(_QWORD *)(v341 + 32), v213, (uint64_t)v138, a13))
    goto LABEL_344;
  v214 = *((unsigned __int8 *)v349 + 8);
  LODWORD(__src) = (_DWORD)v363;
  v215 = *a9;
  v216 = (_DWORD *)sub_22E487828(v22);
  v177 = v348;
  *(_QWORD *)(*(_QWORD *)(v348 + 16) + 8 * v215) = v216;
  if (v216)
    *(_DWORD *)v348 |= *v216 & 0x3E000;
  sub_22EC38DD0((uint64_t)&v374, (unint64_t)v138, v341);
  sub_22EC48FF8();
  sub_22E487828(v22);
  *(_QWORD *)(*(_QWORD *)(v348 + 16) + 8 * v215) = v22;
  *(_DWORD *)v348 |= *(_DWORD *)v22 & 0x3E000;
  if (!v214 && *((_BYTE *)v349 + 8))
  {
    do
      v138 = (int *)(*((_QWORD *)v138 + 1) & 0xFFFFFFFFFFFFFFF8);
    while (v138 && (v138[7] & 0x7Fu) - 49 > 2);
    v217 = (_DWORD)v363 + 1;
    v218 = v336;
    if (v328)
      *v328 = (unint64_t)v138;
    goto LABEL_345;
  }
  do
LABEL_265:
    v138 = (int *)(*((_QWORD *)v138 + 1) & 0xFFFFFFFFFFFFFFF8);
  while (v138 && (v138[7] & 0x7Fu) - 49 > 2);
  v178 = (_DWORD)v363 + 1;
  LODWORD(v363) = (_DWORD)v363 + 1;
  if (v34)
  {
    if (!a12)
      return 0;
    v179 = sub_22F114198(*(_QWORD *)(v74 + 24));
    v180 = *((unsigned __int8 *)v349 + 8);
    if ((*(_DWORD *)(v179 + 72) & 0xE000) == 0x4000)
    {
      v32 = v180 == 0;
      return !v32;
    }
    LOBYTE(v301) = 0;
    sub_22EC47B0C(v349, v176, v177, *v324, 0, 0, v138, 0, a9, v142, &v363, v301);
    v30 = v180 == 0;
    v31 = *((unsigned __int8 *)v349 + 8);
LABEL_8:
    v32 = !v30 || v31 == 0;
    return !v32;
  }
  if (v328)
    *v328 = (unint64_t)v138;
  v33 = 0;
  *v336 = v178;
  return v33;
}

BOOL sub_22EC4CD94(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9;
  _BOOL8 v10;
  unsigned int v11;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17[24];
  uint64_t v18;

  v18 = a5;
  if (*a4 == 180)
  {
    v9 = (*((_QWORD *)a4 + 3) - *((_QWORD *)a4 + 2)) & 0x7FFFFFFF8;
    v10 = v9 != 0;
    if (v9)
      v11 = 3480;
    else
      v11 = 5245;
    if (!v9 || (a6 & 1) == 0)
      goto LABEL_14;
    if (a2)
    {
      v11 = 3480;
      v10 = 1;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v11 = 3480;
  v10 = 1;
  if (a6 && !a2)
  {
LABEL_11:
    v10 = sub_22E3CB5E0(a3);
    if (v10)
      v11 = 3480;
    else
      v11 = 5245;
  }
LABEL_14:
  if (!*(_BYTE *)(a1 + 9))
  {
    v13 = *(_QWORD **)a1;
    sub_22F0D5A50((uint64_t)a4);
    sub_22E8FCA40(v13, v14, v11, 0, (uint64_t)v17);
    sub_22F0D5A50((uint64_t)a4);
    v16 = v15;
    sub_22F2F2168((uint64_t)v17, &v16);
    sub_22E903BEC(v17);
    sub_22E8FCA40(*(_QWORD **)a1, *(_DWORD *)(a5 + 24), 0x1602u, 0, (uint64_t)v17);
    sub_22E890024((uint64_t)v17, &v18);
    sub_22E903BEC(v17);
  }
  return v10;
}

void sub_22EC4CEC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EC4CED8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = sub_22F2E6D78(a2);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 49 > 2)
      return 0;
    v4 = *(_QWORD *)(result + 16);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((v4 & 4) != 0)
      v5 = (_QWORD *)*v5;
    v6 = sub_22EFCBB30((unint64_t)v5);
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v8 = v7 + 64;
      v9 = sub_22EFCC008(v6);
      return v9 == sub_22EFCC008(v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 sub_22EC4CF54@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24FAB87E8;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

void sub_22EC4CFAC(_QWORD **a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, _BYTE *a6, uint64_t a7)
{
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD **v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37[24];
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[24];
  _BYTE v41[48];

  sub_22EFFD9B4(a5);
  v15 = v14;
  v16 = (*(_QWORD *)(a5 + 24) - *(_QWORD *)(a5 + 16)) >> 3;
  sub_22EC38DD0((uint64_t)v41, a3, a4);
  if (v16 <= a2
    || (v17 = *(unsigned __int8 **)(*(_QWORD *)(a5 + 16) + 8 * a2)) == 0)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v24 && *(_BYTE *)(v24 + 16) == 45)
      sub_22F114198(*(_QWORD *)(v24 + 24));
    if ((_DWORD)a7)
    {
      v33 = (int *)sub_22E3CD3D4((*a1)[11] + 2032, 16, 3);
      sub_22F336010((uint64_t)v33, *(_QWORD *)(a3 + 48));
      if (v16 <= a2)
      {
        sub_22EFFD554(a5, (*a1)[11], a2, v33);
        return;
      }
      *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8 * a2) = v33;
      v29 = *(_DWORD *)a5;
      v30 = *v33;
      goto LABEL_32;
    }
    if ((*(_DWORD *)(a3 + 72) & 3) != 0 && (*(_DWORD *)(a3 + 72) & 3) != 3)
    {
      if (*((_BYTE *)a1 + 9))
        return;
      v27 = sub_22EACC620(*a1, v15, a3);
      if ((v27 & 1) == 0)
      {
        v28 = (int *)(v27 & 0xFFFFFFFFFFFFFFFELL);
        sub_22EC3D074((uint64_t)*a1, (uint64_t)v41);
        if (v16 > a2)
        {
          *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8 * a2) = v28;
          if (!v28)
            return;
          v29 = *(_DWORD *)a5;
          v30 = *v28;
          goto LABEL_32;
        }
        v34 = (*a1)[11];
        v35 = a5;
        v36 = a2;
        v32 = v28;
LABEL_34:
        sub_22EFFD554(v35, v34, v36, v32);
        *a6 = 1;
        return;
      }
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        if (!*((_BYTE *)a1 + 9))
        {
          sub_22E8FCA40(*a1, v15, 0xE23u, 0, (uint64_t)v40);
          v39 = *(_QWORD *)(a3 + 48);
          v25 = sub_22E8901B8((uint64_t)v40, &v39);
          sub_22F0D4E74(*(_QWORD *)(a5 + 48) & ((uint64_t)(*(_QWORD *)(a5 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
          v38 = v26;
          sub_22E8906A0(v25, &v38);
          sub_22E903BEC(v40);
          sub_22E8FCA40(*a1, *(_DWORD *)(a3 + 24), 0x1801u, 0, (uint64_t)v37);
          sub_22E903BEC(v37);
        }
        goto LABEL_26;
      }
      v31 = sub_22EC49F30();
      if ((v31 & 1) == 0)
      {
        if (*((_BYTE *)a1 + 8) || *((_BYTE *)a1 + 9))
          return;
        v32 = (int *)(v31 & 0xFFFFFFFFFFFFFFFELL);
        if (v16 > a2)
        {
          *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8 * a2) = v32;
          if (!v32)
            return;
          v29 = *(_DWORD *)a5;
          v30 = *v32;
LABEL_32:
          *(_DWORD *)a5 = v30 & 0x3E000 | v29;
          return;
        }
        if (*(unsigned __int8 *)v32 == 179)
          return;
        v34 = (*a1)[11];
        v35 = a5;
        v36 = a2;
        goto LABEL_34;
      }
    }
LABEL_26:
    *((_BYTE *)a1 + 8) = 1;
    return;
  }
  v18 = *v17;
  if (v18 == 165)
  {
    v17 = (unsigned __int8 *)*((_QWORD *)v17 + 3);
    v19 = a1;
    v20 = a6;
    v21 = a5;
    v22 = a2;
    v23 = 1;
  }
  else
  {
    if (v18 != 180)
      return;
    v19 = a1;
    v20 = a6;
    v21 = a5;
    v22 = a2;
    v23 = a7;
  }
  sub_22EC46504(v19, v41, v17, v20, v21, v22, v23);
}

uint64_t sub_22EC4D2E0(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_DWORD *)a2 & 0x7FFFFFFF;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0x80000000 | v3;
  *(_DWORD *)a1 = *(_DWORD *)a2 & 0x80000000 | v3;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  switch(v3)
  {
    case 0:
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v6;
      goto LABEL_6;
    case 1:
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      v10 = *(_OWORD *)(a2 + 96);
      v11 = *(_OWORD *)(a2 + 112);
      v12 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 96) = v10;
      break;
    case 2:
      sub_22ECF93A4(a1 + 16, a2 + 16);
      break;
    case 4:
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
LABEL_6:
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 32) = v5;
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_22EC4D3B4(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  if ((*a4 & 7 | *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFFF0) + 8)) == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16840))
  {
    v19 = 0;
    v10 = sub_22ED13340((unsigned int *)a1, a2, a5, 0, &v20, &v19);
    if (v10)
    {
      v11 = v10;
      v21 = 0;
      v22 = *(_QWORD *)(v10 + 48);
      v23 = v19;
      v24 = v10;
      v25 = v20;
      v12 = sub_22EC51434(a6 + 8, (unint64_t)&v21);
      v13 = *(_QWORD *)(a6 + 8) + 40 * *(unsigned int *)(a6 + 16);
      v14 = *(_QWORD *)(v12 + 32);
      v15 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *(_OWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 32) = v14;
      ++*(_DWORD *)(a6 + 16);
      v16 = *(_QWORD *)(v11 + 48);
      *a3 = v16;
      v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
        v17 = (unint64_t)sub_22F10D2BC(v16);
      *a4 = v17 & 0xFFFFFFFFFFFFFFF0;
    }
    else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) != 45)
    {
      *(_DWORD *)a6 = 0;
      *(_DWORD *)(a6 + 184) = 12;
      return 1;
    }
  }
  return 0;
}

double sub_22EC4D4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 v30;
  int v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  int v41;
  BOOL v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BOOL4 v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  BOOL v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t i;
  _OWORD *v152;
  uint64_t v153;
  uint64_t *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  int *v172;
  unint64_t v173;
  _QWORD *v174;
  int v175;
  int v176;
  _OWORD *v177;
  unint64_t v178;
  int v179;
  uint64_t *v180;
  unint64_t v181;
  int v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD v189[335];
  int v190;
  _OWORD v191[9];
  _QWORD *v192;
  uint64_t v193;
  _QWORD v194[5];
  __int128 v195;
  uint64_t v196;
  int v197;
  __int128 v198;
  int v199;
  uint64_t v200;

  v12 = MEMORY[0x24BDAC7A8]();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = v12;
  v200 = *MEMORY[0x24BDAC8D0];
  v172 = v26;
  v27 = *((_QWORD *)v26 + 2);
  sub_22F0D5A50(v21);
  v29 = v28;
  LODWORD(v27) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16);
  v30 = sub_22F003E64(v22, *(_QWORD *)(v25 + 88), 0);
  v175 = 0;
  v174 = (_QWORD *)v25;
  v173 = v20;
  v31 = sub_22ED0169C(v25, v29, v20, v14, &v175);
  v33 = v27;
  v34 = v31;
  v35 = 0;
  v36 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16)
      - 25;
  v37 = v33 != 40;
  v38 = v30;
  v39 = v16;
  if (v33 != 40 && v36 > 1)
    goto LABEL_20;
  if (!v38)
  {
    v41 = v33;
    v42 = sub_22EC4E528((unsigned __int8 *)v22);
    v38 = 0;
    v33 = v41;
    if (!v42)
    {
      if (v34 != 2)
      {
        if (*v24 < 0x400u || v34 != 1)
          goto LABEL_7;
        if (!sub_22EC4E584(v174[9], v39, a10))
        {
          v38 = 0;
          v33 = v41;
LABEL_19:
          v35 = 0;
          goto LABEL_20;
        }
      }
      v64 = v175;
      if ((v175 & 0x18) != 0)
      {
        v47 = a12;
        v65 = v173;
        if ((v175 & 1) != 0)
        {
          if ((v39 & 0xCFFFFFFF8) != 0)
          {
            v66 = v174[11];
            v185 = v39;
            v67 = sub_22E491354((unsigned int *)&v185, a9);
            v68 = sub_22EF5DBC4(v66, v67, v185);
          }
          else
          {
            v68 = v39 & 7 | a9;
          }
          sub_22EC392E4(a12, v68, (*(_DWORD *)v22 >> 8) & 3);
          v64 = v175;
        }
        v85 = a12 + 8;
        if ((v64 & 8) != 0)
          v116 = 3;
        else
          v116 = 24;
        LODWORD(v185) = v116;
        v186 = v173;
        goto LABEL_170;
      }
      v47 = a12;
      v65 = v173;
      if ((v175 & 1) != 0)
      {
        sub_22EC392E4(a12, v173, (*(_DWORD *)v22 >> 8) & 3);
      }
      else if ((v175 & 4) != 0)
      {
        LODWORD(v185) = 12;
        v186 = v173;
        v85 = a12 + 8;
LABEL_170:
        v117 = sub_22EC51434(v85, (unint64_t)&v185);
        v118 = *(_QWORD *)(v47 + 8) + 40 * *(unsigned int *)(v47 + 16);
        v119 = *(_QWORD *)(v117 + 32);
        v120 = *(_OWORD *)(v117 + 16);
        *(_OWORD *)v118 = *(_OWORD *)v117;
        *(_OWORD *)(v118 + 16) = v120;
        *(_QWORD *)(v118 + 32) = v119;
        ++*(_DWORD *)(v47 + 16);
      }
      LODWORD(v185) = 4;
      v186 = v65;
      v115 = v47 + 8;
      goto LABEL_172;
    }
  }
LABEL_7:
  if (v34)
    goto LABEL_19;
  v43 = v33 != 40 && v38 == 0;
  v44 = !v43;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45
    || !v44)
  {
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v174[9] + 1) & 1) != 0)
  {
    v79 = v38;
    v170 = v33;
    v80 = sub_22EC4E5DC((uint64_t)v174, *((_QWORD *)v172 + 2), (uint64_t)v24, v22, v37, v33 == 40, a12);
    if (!v80)
      return *(double *)&v32;
    v35 = v80;
    v38 = v79;
    if (v80 != 1)
    {
      *(_DWORD *)a12 = 0;
      *(_DWORD *)(a12 + 184) = 13;
      *(_DWORD *)(a12 + 188) = v80;
    }
    v33 = v170;
  }
  else
  {
    v35 = 1;
  }
LABEL_20:
  if (v33 == 40 && (v39 & 0x605) != 1)
  {
    if ((*(_QWORD *)((a9 & 0xFFFFFFFFFFFFFFF0) + 8) | a9 & 7) == *(_QWORD *)(v174[11] + 16840))
    {
      *(_DWORD *)a12 = 0;
      *(_DWORD *)(a12 + 184) = 12;
      return *(double *)&v32;
    }
    v47 = a12;
    if (v35 && *(_DWORD *)(a12 + 200))
    {
      *(_DWORD *)a12 = 0;
      *(_DWORD *)(a12 + 184) = 13;
      *(_DWORD *)(a12 + 188) = v35;
      return *(double *)&v32;
    }
    if (v38)
    {
      v58 = !sub_22E95F2F0(v39 >> 11, a10 >> 11);
      v59 = 21;
      v60 = 14;
      goto LABEL_76;
    }
    if (!v34)
    {
      v59 = 19;
LABEL_78:
      *(_DWORD *)v47 = 0;
      goto LABEL_79;
    }
    if (v34 != 1)
    {
      if (v34 == 2)
      {
        if ((*(_DWORD *)v22 & 0x1C00) == 0x400)
        {
          v59 = 15;
        }
        else if ((sub_22F001B50(v22) & 1) != 0)
        {
          v59 = 16;
        }
        else if ((*(_DWORD *)v22 & 0x1C00) == 0x1400)
        {
          v59 = 17;
        }
        else
        {
          sub_22F001E84((unsigned __int8 *)v22);
          v59 = 18;
        }
      }
      else
      {
        v59 = 0;
      }
      goto LABEL_78;
    }
    goto LABEL_75;
  }
  if (v36 >= 2)
  {
    if (v34 == 2
      || *v24 >= 0x400u
      && v34 == 1
      && (v61 = v33, v62 = v38, v63 = sub_22EC4E584(v174[9], v39, a10), v38 = v62, v33 = v61, v63))
    {
      if (v38 == 1)
      {
        v49 = v33;
        v50 = sub_22EC4E528((unsigned __int8 *)v22);
        v38 = 1;
        v33 = v49;
        if (!v50)
        {
          v51 = v39;
          v52 = 2;
          goto LABEL_119;
        }
      }
      else if (v38)
      {
        v69 = *(_QWORD *)v174[9];
        v70 = *(_QWORD *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
        if ((v69 & 0x800) != 0
          || (v71 = *(unsigned __int8 *)(*(_QWORD *)v70 + 16), v71 == 45)
          || (v71 & 0xFEu) - 2 <= 3)
        {
          if (*(_BYTE *)(*(_QWORD *)v70 + 16) == 45)
          {
            v72 = v14;
            if ((v69 & 0x220) != 0)
            {
              if ((v69 & 0x200) != 0)
              {
                v184 = v22;
                v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v130)
                {
                  if (*(_BYTE *)(v130 + 16) == 45)
                  {
                    v131 = v33;
                    v168 = v38;
                    v132 = sub_22EC4EF78((unsigned int *)v172);
                    v133 = sub_22F1CF68C(*(_QWORD *)(v174[13] + 32), 0x1935u, v132, v174[13]);
                    v38 = v168;
                    v33 = v131;
                    if (v133 != 1)
                    {
                      v171 = v39;
                      v185 = (uint64_t)&v187;
                      v186 = 0x1000000000;
                      v189[332] = v191;
                      v189[333] = v191;
                      v189[334] = 16;
                      v190 = 0;
                      v191[8] = 0u;
                      v192 = v194;
                      v193 = 0x400000000;
                      v194[4] = (char *)&v195 + 8;
                      v195 = 0u;
                      v196 = 1;
                      v197 = v132;
                      v199 = 0;
                      v198 = 0u;
                      v134 = sub_22F114198(*(_QWORD *)(v130 + 24));
                      v135 = sub_22EC66BE4((uint64_t)v174, v134);
                      v183 = 0;
                      v136 = sub_22EC4EFB8(v174, v132, &v184, 1uLL, (uint64_t)&v185, v173, v135, (uint64_t)&v183, 0, 1u, 0, 0, 1u);
                      v137 = v174[11] + 2128;
                      v138 = (unsigned __int8 *)sub_22E3B8AAC(v137);
                      v139 = *v138;
                      v140 = v138 + 1;
                      v140[v139] = 2;
                      *(_QWORD *)&v138[8 * v139 + 16] = v136;
                      v141 = *v172;
                      v142 = (v139 + 1);
                      v140[v142] = 2;
                      *(_QWORD *)&v138[8 * v142 + 16] = v141;
                      v143 = *(_QWORD *)(v184 + 8);
                      v144 = (v139 + 2);
                      v140[v144] = 9;
                      *v138 = v139 + 3;
                      *(_QWORD *)&v138[8 * v144 + 16] = v143;
                      sub_22F0D4E74(v184);
                      sub_22E4D6448((uint64_t)(v138 + 336), v145, 1);
                      v182 = 6453;
                      v181 = v137;
                      v146 = (uint64_t *)sub_22E3B8AAC(v137);
                      v180 = v146;
                      v147 = *((_OWORD *)v138 + 5);
                      v149 = *((_OWORD *)v138 + 2);
                      v148 = *((_OWORD *)v138 + 3);
                      *((_OWORD *)v146 + 4) = *((_OWORD *)v138 + 4);
                      *((_OWORD *)v146 + 5) = v147;
                      *((_OWORD *)v146 + 2) = v149;
                      *((_OWORD *)v146 + 3) = v148;
                      v150 = *((_OWORD *)v138 + 1);
                      *(_OWORD *)v146 = *(_OWORD *)v138;
                      *((_OWORD *)v146 + 1) = v150;
                      for (i = 12; i != 42; i += 3)
                        std::string::operator=((std::string *)&v146[i], (const std::string *)&v138[i * 8]);
                      sub_22E78D560((uint64_t)(v146 + 42), (uint64_t)(v138 + 336));
                      sub_22E78D658((uint64_t)(v146 + 56), (uint64_t *)v138 + 56);
                      sub_22E3BB10C(v137, (unint64_t)v138);
                      v72 = v14;
                      switch(v136)
                      {
                        case 0:
                          sub_22E90A904(v174, v132, *v183, v183[1], (uint64_t)v172, (uint64_t)&v180);
                          break;
                        case 1:
                          v176 = v132;
                          v179 = 6453;
                          v177 = 0;
                          v178 = v137;
                          if (v146)
                          {
                            v152 = (_OWORD *)sub_22E3B8AAC(v137);
                            v153 = 0;
                            v177 = v152;
                            v154 = v180;
                            v155 = *((_OWORD *)v180 + 1);
                            *v152 = *(_OWORD *)v180;
                            v152[1] = v155;
                            v156 = *((_OWORD *)v154 + 5);
                            v158 = *((_OWORD *)v154 + 2);
                            v157 = *((_OWORD *)v154 + 3);
                            v152[4] = *((_OWORD *)v154 + 4);
                            v152[5] = v156;
                            v152[2] = v158;
                            v152[3] = v157;
                            do
                            {
                              std::string::operator=((std::string *)((char *)v152 + v153 * 8 + 96), (const std::string *)&v154[v153 + 12]);
                              v153 += 3;
                            }
                            while (v153 != 30);
                            sub_22E78D560((uint64_t)(v152 + 21), (uint64_t)(v154 + 42));
                            sub_22E78D658((uint64_t)(v152 + 28), v154 + 56);
                            v39 = v171;
                          }
                          sub_22ED1231C((uint64_t)&v185, &v176, v174, 0, (int)&v184, 1u, "", 0, 0);
                          goto LABEL_199;
                        case 2:
                          v176 = v132;
                          v179 = 6453;
                          v177 = 0;
                          v178 = v137;
                          if (v146)
                          {
                            v159 = (_OWORD *)sub_22E3B8AAC(v137);
                            v160 = 0;
                            v177 = v159;
                            v161 = v180;
                            v162 = *((_OWORD *)v180 + 1);
                            *v159 = *(_OWORD *)v180;
                            v159[1] = v162;
                            v163 = *((_OWORD *)v161 + 5);
                            v165 = *((_OWORD *)v161 + 2);
                            v164 = *((_OWORD *)v161 + 3);
                            v159[4] = *((_OWORD *)v161 + 4);
                            v159[5] = v163;
                            v159[2] = v165;
                            v159[3] = v164;
                            do
                            {
                              std::string::operator=((std::string *)((char *)v159 + v160 * 8 + 96), (const std::string *)&v161[v160 + 12]);
                              v160 += 3;
                            }
                            while (v160 != 30);
                            sub_22E78D560((uint64_t)(v159 + 21), (uint64_t)(v161 + 42));
                            sub_22E78D658((uint64_t)(v159 + 28), v161 + 56);
                            v39 = v171;
                          }
                          sub_22ED1231C((uint64_t)&v185, &v176, v174, 2, (int)&v184, 1u, "", 0, 0);
LABEL_199:
                          if (v177 && v178)
                          {
                            sub_22E3BB10C(v178, (unint64_t)v177);
                            v177 = 0;
                          }
                          break;
                        case 3:
                          sub_22E90379C(v174, v132, (uint64_t)&v180, 0, (uint64_t)&v176);
                          sub_22E903BEC((unsigned int *)&v176);
                          sub_22EB17D68(v174, *v183);
                          break;
                        default:
                          break;
                      }
                      if (v180 && v181)
                        sub_22E3BB10C(v181, (unint64_t)v180);
                      sub_22E9DC79C(&v185);
                      v33 = v131;
                      v38 = v168;
                    }
                  }
                }
              }
              v51 = v39;
              v52 = 0;
            }
            else
            {
              v51 = v39;
              LODWORD(v185) = 6;
              v186 = v14;
              v124 = v33;
              v125 = v38;
              v126 = sub_22EC51434(a12 + 8, (unint64_t)&v185);
              v38 = v125;
              v33 = v124;
              v52 = 0;
              v127 = *(_QWORD *)(a12 + 8) + 40 * *(unsigned int *)(a12 + 16);
              v128 = *(_QWORD *)(v126 + 32);
              v129 = *(_OWORD *)(v126 + 16);
              *(_OWORD *)v127 = *(_OWORD *)v126;
              *(_OWORD *)(v127 + 16) = v129;
              *(_QWORD *)(v127 + 32) = v128;
              ++*(_DWORD *)(a12 + 16);
            }
            goto LABEL_120;
          }
          v51 = v39;
          v52 = 0;
LABEL_119:
          v72 = v14;
LABEL_120:
          v86 = v33;
          v87 = v51 >> 11;
          v88 = a10 >> 11;
          if (v51 >> 11 == a10 >> 11)
            v89 = a10;
          else
            v89 = a10 & 0x7FF;
          if (v87 == a10 >> 11)
            v90 = v51;
          else
            v90 = v51 & 0x7FF;
          v91 = v51;
          v92 = v51 & 0xFFFFFFFF00000000 | v90;
          if (v51 & 0xC00000000 | v90 & 0xCFFFFFFF8)
          {
            v93 = v174[11];
            v185 = v92;
            v94 = v72;
            v95 = v38;
            v96 = sub_22E491354((unsigned int *)&v185, v94);
            v97 = sub_22EF5DBC4(v93, v96, v185);
            v38 = v95;
            v98 = v97;
          }
          else
          {
            v98 = v90 & 7 | v72;
          }
          v43 = (_DWORD)v90 == v89;
          v47 = a12;
          if (!v43 || HIDWORD(v91) != a11)
          {
            v99 = v52;
            v100 = v38;
            sub_22EC392E4(a12, v98, v99);
            v38 = v100;
          }
          if (v38 == 1)
            v101 = 4;
          else
            v101 = 5;
          LODWORD(v185) = v101;
          v186 = v98;
          v102 = sub_22EC51434(a12 + 8, (unint64_t)&v185);
          v103 = *(_QWORD *)(a12 + 8) + 40 * *(unsigned int *)(a12 + 16);
          v104 = *(_QWORD *)(v102 + 32);
          v105 = *(_OWORD *)(v102 + 16);
          *(_OWORD *)v103 = *(_OWORD *)v102;
          *(_OWORD *)(v103 + 16) = v105;
          *(_QWORD *)(v103 + 32) = v104;
          ++*(_DWORD *)(a12 + 16);
          if (v86 == 40)
            v106 = 1;
          else
            v106 = 2;
          if (!sub_22E95F2F0(v87, v88))
          {
            *(_DWORD *)a12 = 0;
            v59 = 22;
            goto LABEL_79;
          }
          if (v87 == v88)
          {
            v107 = v173;
          }
          else
          {
            v108 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 8);
            v107 = v173;
            if ((v108 & 8) != 0)
            {
              v109 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              v110 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x7FFLL;
            }
            else
            {
              v109 = 0;
              v110 = 0;
            }
            v111 = v110 | (v108 | v98) & 7;
            v112 = v109 | v91 & 0xFFFFF800 | v111;
            if ((v112 & 0xCFFFFFFF8) != 0)
            {
              v113 = v174[11];
              v185 = v112;
              v114 = sub_22E491354((unsigned int *)&v185, a9);
              v98 = sub_22EF5DBC4(v113, v114, v185);
            }
            else
            {
              v98 = v111 & 7 | a9;
            }
            *(_QWORD *)&v32 = sub_22EC392E4(a12, v98, v106).n128_u64[0];
          }
          if ((v175 & 8) != 0)
          {
            *(_QWORD *)&v32 = sub_22F335C64(a12, v107, v106).n128_u64[0];
            return *(double *)&v32;
          }
          if ((v175 & 0x10) == 0)
          {
            if ((v175 & 1) != 0
              && (*(_QWORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 8) | v98 & 7) != (*(_QWORD *)((v173 & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) | v173 & 7))
            {
              *(_QWORD *)&v32 = sub_22EC392E4(a12, v173, v106).n128_u64[0];
            }
            return *(double *)&v32;
          }
          LODWORD(v185) = 24;
          v186 = v107;
          v115 = a12 + 8;
LABEL_172:
          v121 = sub_22EC51434(v115, (unint64_t)&v185);
          v122 = *(_QWORD *)(v47 + 8) + 40 * *(unsigned int *)(v47 + 16);
          v123 = *(_QWORD *)(v121 + 32);
          v32 = *(_OWORD *)(v121 + 16);
          *(_OWORD *)v122 = *(_OWORD *)v121;
          *(_OWORD *)(v122 + 16) = v32;
          *(_QWORD *)(v122 + 32) = v123;
          ++*(_DWORD *)(v47 + 16);
          return *(double *)&v32;
        }
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
  {
    v167 = v38;
    v169 = v33;
    v53 = v173;
    if (v39 >= 0x800)
    {
      if ((v39 & 0xC000007F8) != 0)
      {
        v54 = v39 & 0xFFFFFFFF000007FFLL;
        v55 = v39;
        v39 = v174[11];
        v185 = v54;
        v56 = sub_22E491354((unsigned int *)&v185, v18);
        v57 = v39;
        LODWORD(v39) = v55;
        v53 = sub_22EF5DBC4(v57, v56, v185);
      }
      else
      {
        v53 = v39 & 7 | v18;
      }
    }
    sub_22ECFA94C(&v185, v174, v22, v53, 0, 0, 0, *v24 > 0x3FFu, 0, 0);
    if ((v185 & 0x7FFFFFFF) == 4)
    {
      if (v35 && *(_DWORD *)(a12 + 200))
      {
        *(_DWORD *)a12 = 0;
        *(_DWORD *)(a12 + 184) = 13;
        *(_DWORD *)(a12 + 188) = v35;
      }
      else
      {
        v76 = *(_QWORD *)((a9 & 0xFFFFFFFFFFFFFFF0) + 8) | a9 & 7;
        v77 = *(_QWORD *)(v174[11] + 16840);
        *(_DWORD *)a12 = 0;
        if (v76 == v77)
          v78 = 12;
        else
          v78 = 23;
        *(_DWORD *)(a12 + 184) = v78;
      }
    }
    else
    {
      *(_QWORD *)&v32 = sub_22EC3936C(a12, (uint64_t)&v185, v53, 0).n128_u64[0];
      if (v34 == 1
        && ((a10 & ~(_BYTE)v39 & 7) != 0
         || ((v39 >> 9) & 3) < ((a10 >> 9) & 3)
         || !sub_22E95F2F0(v39 >> 11, a10 >> 11)))
      {
        *(_DWORD *)a12 = 0;
        v75 = 21;
      }
      else
      {
        if (v34 < 1 || (v169 != 40 ? (v74 = v167 == 0) : (v74 = 0), !v74))
        {
          v176 = 5;
          v177 = (_OWORD *)v53;
          v81 = sub_22EC51434(a12 + 8, (unint64_t)&v176);
          v82 = *(_QWORD *)(a12 + 8) + 40 * *(unsigned int *)(a12 + 16);
          v83 = *(_QWORD *)(v81 + 32);
          v32 = *(_OWORD *)(v81 + 16);
          *(_OWORD *)v82 = *(_OWORD *)v81;
          *(_OWORD *)(v82 + 16) = v32;
          *(_QWORD *)(v82 + 32) = v83;
          ++*(_DWORD *)(a12 + 16);
          if (v39 >= 0x800)
          {
            if (v39 >> 11 <= 0x1A && ((1 << (v39 >> 11)) & 0x7000020) != 0)
            {
              if (v169 == 40)
                v84 = 1;
              else
                v84 = 2;
              *(_QWORD *)&v32 = sub_22EC392E4(a12, v173, v84).n128_u64[0];
            }
            else
            {
              *(_DWORD *)a12 = 0;
              *(_DWORD *)(a12 + 184) = 22;
            }
          }
          goto LABEL_147;
        }
        *(_DWORD *)a12 = 0;
        v75 = 20;
      }
      *(_DWORD *)(a12 + 184) = v75;
    }
LABEL_147:
    if ((v185 & 0x7FFFFFFF) == 2 && v188 != v189)
      free(v188);
    return *(double *)&v32;
  }
  v47 = a12;
  if (v34 == 2)
  {
    if (v33 != 40 && v38 == 0)
    {
      *(_DWORD *)a12 = 0;
      v59 = 20;
LABEL_79:
      *(_DWORD *)(v47 + 184) = v59;
      return *(double *)&v32;
    }
    goto LABEL_75;
  }
  if (v34)
  {
LABEL_75:
    v58 = !sub_22E95F2F0(v39 >> 11, a10 >> 11);
    v59 = 23;
    v60 = 21;
LABEL_76:
    if (!v58)
      v59 = v60;
    goto LABEL_78;
  }
  v48 = sub_22EC4E5DC((uint64_t)v174, *((_QWORD *)v172 + 2), (uint64_t)v24, v22, 1, v33 == 40, a12);
  if (v48)
  {
    *(_DWORD *)a12 = 0;
    *(_DWORD *)(a12 + 184) = 13;
    *(_DWORD *)(a12 + 188) = v48;
  }
  return *(double *)&v32;
}

BOOL sub_22EC4E528(unsigned __int8 *a1)
{
  return (*(_DWORD *)a1 & 0x1C00) == 0x400
      || (sub_22F001B50((uint64_t)a1) & 1) != 0
      || (*(_DWORD *)a1 & 0x1C00) == 0x1400
      || sub_22F001E84(a1);
}

BOOL sub_22EC4E584(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;

  if (((*(_DWORD *)(a1 + 52) & 0x40000000) != 0 || (*(_BYTE *)(a1 + 104) & 0x20) != 0)
    && (v3 = a2 >> 11, v4 = a3 >> 11, !sub_22E95F2F0(a2 >> 11, a3 >> 11)))
  {
    return sub_22E95F2F0(v4, v3);
  }
  else
  {
    return 1;
  }
}

uint64_t sub_22EC4E5DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  BOOL v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t result;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  BOOL v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  void *v125[2];
  __int128 v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131[2];

  v131[0] = a4;
  v13 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v13 || (v14 = *(_DWORD *)(v13 + 16), (v14 & 0xFE) != 0x28))
  {
    v13 = sub_22F10CF48(v13);
    v14 = *(_DWORD *)(v13 + 16);
  }
  if ((v14 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v13)
          break;
        v15 = *(_DWORD *)(v13 + 16);
        if ((v15 & 0xFE) != 0x28)
          break;
        if ((v15 & 0x100000) == 0)
          goto LABEL_10;
      }
      v13 = sub_22F10CF48(v13);
    }
    while ((*(_DWORD *)(v13 + 16) & 0x100000) != 0);
  }
LABEL_10:
  v113 = a6;
  v16 = *(_QWORD *)(v13 + 32);
  v114 = v16 & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
    v17 = (unint64_t)sub_22F10D2BC(v16);
  v18 = *(_QWORD *)(a4 + 8);
  v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
    v19 = (unint64_t)sub_22F10D2BC(v18);
  v20 = v17 & 0xFFFFFFFFFFFFFFF0;
  v118 = a7;
  v21 = a7 + 192;
  sub_22ECF9840(a7 + 192, 2);
  v23 = *(_WORD *)a3 != 2 || (*(_WORD *)a3 & 0xFF00) == 256;
  v121 = (_QWORD *)a1;
  if (!a5)
    goto LABEL_163;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v24 || *(_BYTE *)(v24 + 16) != 45)
    goto LABEL_163;
  v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0);
  v111 = v16;
  v108 = a3;
  v115 = v20;
  if ((sub_22EE8B180(a1, *(unsigned int *)(a3 + 4)) & 1) == 0)
  {
    v25 = sub_22F114198(*(_QWORD *)(v109 + 24));
    v26 = sub_22EC66BE4(a1, v25);
    if (v26)
    {
      while (1)
      {
        v27 = (unint64_t *)(v26 & 0xFFFFFFFFFFFFFFF8);
        v28 = (v26 & 0xFFFFFFFFFFFFFFF8) == 0 || (v26 & 4) == 0;
        v29 = v26 & 0xFFFFFFFFFFFFFFF8;
        if (!v28)
          v29 = *v27;
        v30 = *(_DWORD *)(v29 + 28);
        v31 = v30 & 0x7F;
        if (v31 <= 0x2F)
        {
          if (((1 << (v30 & 0x7F)) & 0xC00000060000) != 0)
          {
            v32 = sub_22EFBAEA4(v29);
            v30 = *(_DWORD *)(v32 + 28);
            LODWORD(v31) = v30 & 0x7F;
          }
          else
          {
            v32 = v29;
            if (v31 == 13)
              goto LABEL_44;
          }
        }
        else
        {
          v32 = v29;
        }
        if ((_DWORD)v31 == 29)
          v33 = (_QWORD *)v32;
        else
          v33 = 0;
        if (v33)
        {
          v32 = v33[6];
          LODWORD(v31) = *(_DWORD *)(v32 + 28) & 0x7F;
        }
        if ((_DWORD)v31 != 55 || (*(_BYTE *)(v32 + 28) & 0x80) != 0 || !sub_22EFD8400(v32, 1))
          goto LABEL_44;
        v34 = (v30 >> 13) & 3 | v29;
        if (v33)
          break;
        sub_22ED0475C((uint64_t)v121, v32, v34, a2, (uint64_t)v131, 1uLL, v21, 1, 0, 0, 0, 0, 0, 0, 0);
        if (v28)
          goto LABEL_50;
LABEL_45:
        v26 = v27[1];
        if (!v26)
          goto LABEL_50;
      }
      sub_22ED07F48(v121, v33, v34, a2, 0, (uint64_t)v131, 1uLL, v21, 1u, 0, 0, 0, 0);
LABEL_44:
      if (v28)
        goto LABEL_50;
      goto LABEL_45;
    }
  }
LABEL_50:
  v16 = v111;
  v20 = v115;
  a3 = v108;
  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v109 + 24)) + 28) & 0x80) == 0)
  {
LABEL_163:
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v35 || *(_BYTE *)(v35 + 16) != 45)
      goto LABEL_81;
    v116 = v20;
    if ((sub_22EE8B180(v121, *(unsigned int *)(a3 + 4)) & 1) == 0)
    {
      v36 = sub_22F114198(*(_QWORD *)(v35 + 24));
      v37 = sub_22EFD4DF4(v36);
      if ((uint64_t *)v37 != v38)
      {
        v39 = (uint64_t *)v37;
        v40 = v38;
        do
        {
          v41 = *v39;
          v42 = *v39 & 0xFFFFFFFFFFFFFFFCLL;
          v43 = *(_QWORD *)(v42 + 16);
          v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
          if ((v43 & 4) != 0)
            v44 = (_QWORD *)*v44;
          if (v44)
            v45 = (uint64_t)(v44 - 8);
          else
            v45 = 0;
          v46 = *(_DWORD *)(v42 + 28);
          if ((v46 & 0x7E) == 0x2E)
          {
            v42 = *(_QWORD *)(v42 + 64);
            v46 = *(_DWORD *)(v42 + 28);
          }
          if ((v46 & 0x7F) == 0x1D)
            v47 = (uint64_t *)v42;
          else
            v47 = 0;
          if (v47)
            v42 = v47[6];
          if ((a5 & 1) == 0)
          {
            v48 = *(_QWORD *)(*(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v48)
              v49 = *(unsigned __int8 *)(v48 + 16) - 27 > 0xFFFFFFFD;
            else
              v49 = 0;
            if (!v49)
              v48 = sub_22F10CF48(v48);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) != 40)
              goto LABEL_79;
            v41 = *v39;
          }
          if (v47)
            sub_22ED096FC((uint64_t)v121, v47, v41, v45, v131[0], a2, v21, 0, v23, 1);
          else
            sub_22ED08B24((uint64_t)v121, (uint64_t *)v42, v41, v45, v131[0], a2, v21, 0, v23, 0, 1);
LABEL_79:
          ++v39;
        }
        while (v39 != v40);
      }
    }
    v20 = v116;
    if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v35 + 24)) + 28) & 0x80) == 0)
    {
LABEL_81:
      sub_22F0D5A50(v131[0]);
      v130 = 0;
      v51 = v50;
      result = sub_22ED03FCC(v21, v121, v50, &v130);
      if ((_DWORD)result)
        return result;
      v53 = *v130;
      v54 = *(_DWORD *)(*v130 + 28);
      *(_DWORD *)(*v130 + 28) = v54 | 0x800;
      v55 = v54 & 0x7F;
      v56 = v20;
      if (v55 == 56)
      {
        v57 = *(_QWORD *)(*(_QWORD *)(v53 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v57)
          v58 = *(unsigned __int8 *)(v57 + 16) - 27 > 0xFFFFFFFD;
        else
          v58 = 0;
        if (!v58)
          v57 = sub_22F10CF48(v57);
        v56 = *(_QWORD *)(v57 + 24);
      }
      v129 = v56;
      v59 = *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0);
      v60 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v112 = v16;
      if (v60 == 40)
      {
        v61 = 1;
      }
      else
      {
        v62 = *(_DWORD *)(v59 + 16);
        if (v62 != 41)
        {
          if (v60 != 41 || (v59 = sub_22F10CF48(v59)) == 0)
          {
            v120 = 0;
            goto LABEL_105;
          }
          v62 = *(_DWORD *)(v59 + 16);
        }
        if ((v62 & 0x100000) != 0)
        {
          do
          {
            while (1)
            {
              v59 = *(_QWORD *)(*(_QWORD *)(v59 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v59)
                break;
              v63 = *(_DWORD *)(v59 + 16);
              if ((v63 & 0xFE) != 0x28)
                break;
              if ((v63 & 0x100000) == 0)
                goto LABEL_101;
            }
            v59 = sub_22F10CF48(v59);
          }
          while ((*(_DWORD *)(v59 + 16) & 0x100000) != 0);
        }
LABEL_101:
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
          v61 = 1;
        else
          v61 = 2;
      }
      v120 = v61;
LABEL_105:
      v64 = sub_22F1133DC(&v129, v121[11]);
      v65 = *(_DWORD *)(v118 + 200) > 1u;
      v66 = (void *)v130[1];
      LODWORD(v122) = 8;
      v123 = v64;
      LOBYTE(v124) = v65;
      *((_QWORD *)&v124 + 1) = v53;
      v125[0] = v66;
      v117 = v118 + 8;
      v67 = sub_22EC51434(v118 + 8, (unint64_t)&v122);
      v68 = *(_QWORD *)(v118 + 8) + 40 * *(unsigned int *)(v118 + 16);
      v69 = *(_QWORD *)(v67 + 32);
      v70 = *(_OWORD *)(v67 + 16);
      *(_OWORD *)v68 = *(_OWORD *)v67;
      *(_OWORD *)(v68 + 16) = v70;
      *(_QWORD *)(v68 + 32) = v69;
      ++*(_DWORD *)(v118 + 16);
      v128 = 0;
      if (!sub_22ED0169C((uint64_t)v121, v51, v20, v64, &v128))
      {
        v123 = 0;
        LODWORD(v122) = 0;
        v71 = *((_OWORD *)v130 + 9);
        *(_OWORD *)v125 = *((_OWORD *)v130 + 8);
        v126 = v71;
        v124 = *((_OWORD *)v130 + 7);
        v127 = v130[20];
        sub_22EC3936C(v118, (uint64_t)&v122, v71, 0);
        v64 = v126;
        if ((v122 & 0x7FFFFFFF) == 2 && v125[0] != &v126)
          free(v125[0]);
        v120 = 0;
      }
      v72 = *(_QWORD *)(v114 + 8);
      if ((v72 & 8) != 0)
      {
        v74 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v73 = HIDWORD(*(_QWORD *)((v72 & 0xFFFFFFFFFFFFFFF0) + 0x18));
      }
      else
      {
        v73 = 0;
        v74 = 0;
      }
      v75 = v74 | (v72 | v112) & 7;
      v76 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFF0) + 8);
      v110 = v64 & 0xFFFFFFFFFFFFFFF0;
      if ((v76 & 8) != 0)
      {
        v78 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v77 = HIDWORD(*(_QWORD *)((v76 & 0xFFFFFFFFFFFFFFF0) + 0x18));
      }
      else
      {
        LODWORD(v77) = 0;
        v78 = 0;
      }
      v79 = v78 | (v76 | v64) & 7;
      v80 = v74 >> 11;
      v81 = v78 >> 11;
      if (v74 >> 11 == v78 >> 11)
        v82 = v75;
      else
        v82 = v75 & 0x7FF;
      if (v80 == v78 >> 11)
        v83 = v79;
      else
        v83 = v79 & 0x7FF;
      if (((v82 | (v73 << 32)) & 0xCFFFFFFF8) != 0)
      {
        v84 = v121[11];
        v122 = v82 | (v73 << 32);
        v85 = sub_22E491354((unsigned int *)&v122, v64);
        v86 = sub_22EF5DBC4(v84, v85, v122);
      }
      else
      {
        v86 = v82 & 7 | v64;
      }
      if ((_DWORD)v82 != v83 || (_DWORD)v73 != (_DWORD)v77)
        sub_22EC392E4(v118, v86, v120);
      if (v120)
        v87 = 4;
      else
        v87 = 5;
      LODWORD(v122) = v87;
      v123 = v86;
      v88 = sub_22EC51434(v117, (unint64_t)&v122);
      v89 = *(_QWORD *)(v118 + 8) + 40 * *(unsigned int *)(v118 + 16);
      v90 = *(_QWORD *)(v88 + 32);
      v91 = *(_OWORD *)(v88 + 16);
      *(_OWORD *)v89 = *(_OWORD *)v88;
      *(_OWORD *)(v89 + 16) = v91;
      *(_QWORD *)(v89 + 32) = v90;
      ++*(_DWORD *)(v118 + 16);
      if (v113)
        v92 = 1;
      else
        v92 = 2;
      if (sub_22E95F2F0(v74 >> 11, v81))
      {
        if (v80 == v81)
        {
          v93 = v112;
        }
        else
        {
          v94 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v94 & 8) != 0)
          {
            v95 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
            v96 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x7FFLL;
          }
          else
          {
            v95 = 0;
            v96 = 0;
          }
          v97 = v96 | (v94 | v86) & 7;
          v98 = v74 & 0xFFFFF800;
          v99 = v121[11];
          v100 = *(_QWORD *)v110;
          if ((*(_BYTE *)(*(_QWORD *)v110 + 8) & 0xF) != 0)
            v100 = (unint64_t)sub_22F10D2BC(v64);
          v93 = v112;
          v101 = v100 & 0xFFFFFFFFFFFFFFF0;
          if (((v95 | v98 | v97) & 0xCFFFFFFF8) != 0)
          {
            v122 = v95 | v98 | v97;
            v102 = sub_22E491354((unsigned int *)&v122, v101);
            v86 = sub_22EF5DBC4(v99, v102, v122);
          }
          else
          {
            v86 = v101 | v97 & 7;
          }
          sub_22EC392E4(v118, v86, v92);
        }
        if ((v128 & 8) == 0)
        {
          if ((v128 & 0x10) != 0)
          {
            v103 = 24;
          }
          else
          {
            if ((v128 & 4) == 0)
            {
              if ((v128 & 1) != 0
                && (*(_QWORD *)((v86 & 0xFFFFFFFFFFFFFFF0) + 8) | v86 & 7) != (*(_QWORD *)(v114 + 8) | v93 & 7))
              {
                sub_22EC392E4(v118, v93, v92);
              }
              return 0;
            }
            v103 = 12;
          }
          LODWORD(v122) = v103;
          v123 = v93;
          v104 = sub_22EC51434(v117, (unint64_t)&v122);
          result = 0;
          v105 = *(_QWORD *)(v118 + 8) + 40 * *(unsigned int *)(v118 + 16);
          v106 = *(_QWORD *)(v104 + 32);
          v107 = *(_OWORD *)(v104 + 16);
          *(_OWORD *)v105 = *(_OWORD *)v104;
          *(_OWORD *)(v105 + 16) = v107;
          *(_QWORD *)(v105 + 32) = v106;
          ++*(_DWORD *)(v118 + 16);
          return result;
        }
        sub_22F335C64(v118, v93, v92);
        return 0;
      }
      *(_DWORD *)v118 = 0;
      *(_DWORD *)(v118 + 184) = 22;
    }
  }
  return 1;
}

uint64_t sub_22EC4EF78(unsigned int *a1)
{
  return ((uint64_t (*)(void))((char *)sub_22EC4EF94 + 4 * byte_22F483754[*a1]))();
}

void sub_22EC4EF94(uint64_t a1, uint64_t a2)
{
  sub_22F0D5A50(a2);
}

uint64_t sub_22EC4EF9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_22EC4EFA4(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24);
}

uint64_t sub_22EC4EFB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_22EC4EFB8(_QWORD *a1, unsigned int a2, uint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, char a11, char a12, unsigned __int8 a13)
{
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  unint64_t *v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v48;
  int v49;
  int v50;
  char v53;
  unint64_t v55;
  _QWORD v56[3];

  sub_22ECF9840(a5, 3);
  v55 = a6;
  v18 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v18 & 8) != 0)
    v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v19 = 0;
  *(_DWORD *)(a5 + 6632) = v19;
  if (a7)
  {
    v20 = a12 ^ 1 | a13;
    v21 = a10 & ~a9;
    if (a4 != 1)
      v21 = 0;
    v50 = v21;
    if (a4 != 1)
      v20 = 1;
    v53 = v20;
    while (1)
    {
      v22 = (unint64_t *)(a7 & 0xFFFFFFFFFFFFFFF8);
      v23 = (a7 & 0xFFFFFFFFFFFFFFF8) == 0 || (a7 & 4) == 0;
      v24 = a7 & 0xFFFFFFFFFFFFFFF8;
      if (!v23)
        v24 = *v22;
      v25 = *(_DWORD *)(v24 + 28);
      v26 = v25 & 0x7F;
      if (v26 <= 0x2F)
      {
        v27 = v24;
        if (((1 << (v25 & 0x7F)) & 0xC00000060000) != 0)
        {
          v27 = sub_22EFBAEA4(v24);
          v25 = *(_DWORD *)(v27 + 28);
          LODWORD(v26) = v25 & 0x7F;
        }
        else if (v26 == 13)
        {
          goto LABEL_41;
        }
      }
      else
      {
        v27 = v24;
      }
      v28 = (v25 >> 13) & 3 | v24;
      if ((_DWORD)v26 == 29)
        v29 = (_QWORD *)v27;
      else
        v29 = 0;
      v56[0] = v28;
      v56[2] = v29;
      if (v29)
      {
        v27 = v29[6];
        LODWORD(v26) = *(_DWORD *)(v27 + 28) & 0x7F;
      }
      if ((_DWORD)v26 == 55)
        v30 = v27;
      else
        v30 = 0;
      v56[1] = v30;
      if (!v30 || (*(_BYTE *)(v30 + 28) & 0x80) != 0 || a11 && !sub_22EAC23F4(a1, v30))
        goto LABEL_41;
      v31 = a13;
      if ((v53 & 1) == 0)
      {
        if (*(unsigned __int8 *)*a3 != 180)
        {
          v31 = 0;
          if (!v29)
          {
LABEL_37:
            if (v50)
              v32 = sub_22EC4F388(a1[11], v56);
            else
              v32 = 0;
            LOBYTE(v49) = 0;
            BYTE3(v48) = 0;
            BYTE2(v48) = v32;
            BYTE1(v48) = a10;
            LOBYTE(v48) = 0;
            sub_22ED0475C(a1, v30, v28, v55, a3, a4, a5, v31, v48, 0, 0, v49);
            goto LABEL_41;
          }
          goto LABEL_35;
        }
        v31 = sub_22EC4F388(a1[11], v56);
      }
      if (!v29)
        goto LABEL_37;
LABEL_35:
      sub_22ED07F48(a1, v29, v28, v55, 0, (uint64_t)a3, a4, a5, v31, 0, a10, 0, 0);
LABEL_41:
      if (!v23)
      {
        a7 = v22[1];
        if (a7)
          continue;
      }
      break;
    }
  }
  if ((*(_BYTE *)(a1[9] + 1) & 8) != 0 && a4 == 1 && (a13 & 1) == 0)
  {
    v33 = *a3;
    v34 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v34)
    {
      v35 = v34;
      if ((*(_DWORD *)(v34 + 28) & 0x7Fu) - 35 <= 2 && (sub_22EE8B180(a1, a2) & 1) == 0)
      {
        v36 = sub_22EFD4DF4(v35);
        if ((uint64_t *)v36 != v37)
        {
          v38 = (uint64_t *)v36;
          v39 = v37;
          do
          {
            v40 = *v38;
            v41 = *v38 & 0xFFFFFFFFFFFFFFFCLL;
            v42 = *(_QWORD *)(v41 + 16);
            v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
            if ((v42 & 4) != 0)
              v43 = (_QWORD *)*v43;
            if (v43)
              v44 = (uint64_t)(v43 - 8);
            else
              v44 = 0;
            v45 = *(_DWORD *)(v41 + 28);
            if ((v45 & 0x7Fu) <= 0x2F && ((1 << (v45 & 0x7F)) & 0xC00000060000) != 0)
            {
              v41 = sub_22EFBAEA4(*v38 & 0xFFFFFFFFFFFFFFFCLL);
              v45 = *(_DWORD *)(v41 + 28);
            }
            if ((v45 & 0x7F) == 0x1D)
              sub_22ED096FC((uint64_t)a1, (uint64_t *)v41, v40, v44, v33, v55, a5, a10, a10, 0);
            else
              sub_22ED08B24((uint64_t)a1, (uint64_t *)v41, v40, v44, v33, v55, a5, a10, a10, 0, 0);
            ++v38;
          }
          while (v38 != v39);
        }
      }
    }
  }
  return sub_22ED03FCC(a5, a1, a2, a8);
}

BOOL sub_22EC4F388(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[1] + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 26;
  else
    v3 = 0;
  if (!v3)
  {
    v17 = a2;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    v13 = a1;
    v2 = sub_22F10CF48(v2);
    a1 = v13;
    a2 = v17;
    if (!v2)
      return 0;
  }
  if ((*(_DWORD *)(v2 + 20) & 0x3FFFC0) == 0)
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a2[1] + 120) + 48);
  v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 0xFE) == 0x28)
      goto LABEL_18;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v14 = a1;
    v15 = a2;
    v5 = sub_22F10CF48(v5);
    a1 = v14;
    a2 = v15;
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 16);
LABEL_18:
      if ((v6 & 0x100000) != 0)
      {
        v16 = a2;
        do
        {
          v11 = a1;
          v5 = *(_QWORD *)(*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v5 || (v12 = *(_DWORD *)(v5 + 16), (v12 & 0xFE) != 0x28))
          {
            v5 = sub_22F10CF48(v5);
            v12 = *(_DWORD *)(v5 + 16);
          }
          a1 = v11;
          a2 = v16;
        }
        while ((v12 & 0x100000) != 0);
      }
      v4 = *(_QWORD *)(v5 + 32);
    }
  }
  v7 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFCLL) + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  if (v8)
    v9 = (uint64_t)(v8 - 8);
  else
    v9 = 0;
  return *(_QWORD *)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((sub_22EF6477C(a1, v9) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_22EC4F51C(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 72) & 0xE000) == 0x4000)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_DWORD **)(a1 + 128) & 1) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) >> 24) & 1;
}

BOOL sub_22EC4F580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _BOOL8 v7;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  std::string::size_type size;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::string __p;
  int v20;
  uint64_t v21;

  if (*(_DWORD *)a3)
    return 0;
  v6 = *(_QWORD **)(a3 + 32);
  if (sub_22EFBC5B4((uint64_t)v6))
    return 0;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  if ((v9 & 0x8000000000000000) != 0)
    return 0;
  v10 = v6[6] & 7 | *(_QWORD *)((v6[6] & 0xFFFFFFFFFFFFFFF0) + 8);
  v11 = sub_22F141A3C(HIDWORD(v9), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  sub_22EC36FF4((_QWORD *)a1, v10, v11, (uint64_t)&__p);
  v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v7 = size != 0;
  if (size)
  {
    v14 = *(_QWORD *)(a3 + 16);
    v20 = 21;
    v21 = v14;
    v15 = sub_22EC51434(a2 + 8, (unint64_t)&v20);
    v16 = *(_QWORD *)(a2 + 8) + 40 * *(unsigned int *)(a2 + 16);
    v17 = *(_QWORD *)(v15 + 32);
    v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(v16 + 32) = v17;
    ++*(_DWORD *)(a2 + 16);
    std::string::operator=((std::string *)(a2 + 6840), &__p);
    *(_DWORD *)(a2 + 6864) = v11;
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v12 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

BOOL sub_22EC4F6C4(unsigned __int8 *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v6;
  unsigned int v7;

  if (!sub_22F0085E8((uint64_t)a1, *(_QWORD *)(a2 + 88), 0))
    return 0;
  sub_22F007D7C(a1, *(_QWORD *)(a2 + 88), 0, (uint64_t)&v6);
  v4 = sub_22E42E5EC((uint64_t)&v6, 0);
  if (v7 >= 0x41 && v6)
    MEMORY[0x2348A0E84](v6, 0x1000C8000313F17);
  return v4;
}

uint64_t sub_22EC4F754(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
  {
    v3 = a2;
    result = sub_22EC4F7E4(result, a2);
    a2 = v3;
  }
  *(_QWORD *)(result + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(result + 632) = result + 648;
  *(_QWORD *)(result + 640) = 0x400000000;
  if (*(_DWORD *)(a2 + 640))
  {
    v2 = result;
    v4 = a2;
    sub_22F24C77C(result + 632, a2 + 632);
    result = v2;
    a2 = v4;
  }
  *(_BYTE *)(result + 680) = *(_BYTE *)(a2 + 680);
  return result;
}

uint64_t sub_22EC4F7E4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v7 = *(_QWORD *)a1;
        if (v5)
        {
          v8 = sub_22EC4FA0C((uint64_t)v4, (uint64_t)&v4[152 * v5], v7);
          v7 = *(_QWORD *)a1;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
        }
        else
        {
          v8 = *(_QWORD *)a1;
        }
        v9 = v7 + 152 * v6;
        if (v9 != v8)
        {
          v10 = v7 + 152 * v6;
          do
          {
            v11 = *(_DWORD *)(v10 - 152);
            v10 -= 152;
            if ((v11 & 0x7FFFFFFF) == 2)
            {
              v12 = *(void **)(v9 - 120);
              if ((void *)(v9 - 104) != v12)
                free(v12);
            }
            v9 = v10;
          }
          while (v10 != v8);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v13 = *(_DWORD *)(a2 + 8);
        if (v13)
        {
          v14 = *(char **)a2;
          v15 = 152 * v13;
          do
          {
            v16 = &v14[v15];
            if ((*(_DWORD *)&v14[v15 - 152] & 0x7FFFFFFF) == 2)
            {
              v17 = (char *)*((_QWORD *)v16 - 15);
              if (v16 - 104 != v17)
                free(v17);
            }
            v15 -= 152;
          }
          while (v15);
        }
        goto LABEL_42;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v18 = *(_QWORD *)a1;
          v19 = 152 * v6;
          do
          {
            v20 = v18 + v19;
            if ((*(_DWORD *)(v18 + v19 - 152) & 0x7FFFFFFF) == 2)
            {
              v21 = *(void **)(v20 - 120);
              if ((void *)(v20 - 104) != v21)
                free(v21);
            }
            v19 -= 152;
          }
          while (v19);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F33628C(a1);
      }
      else if ((_DWORD)v6)
      {
        sub_22EC4FA0C((uint64_t)v4, (uint64_t)&v4[152 * v6], *(_QWORD *)a1);
LABEL_32:
        v22 = *(char **)a2;
        v23 = *(unsigned int *)(a2 + 8);
        if (v6 != v23)
        {
          v24 = *(_QWORD *)a1 + 152 * v6;
          v25 = (uint64_t)&v22[152 * v6];
          v26 = 152 * v23 - 152 * v6;
          do
          {
            v27 = sub_22EC4D2E0(v24, v25);
            v25 += 152;
            v24 = v27 + 152;
            v26 -= 152;
          }
          while (v26);
          v22 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        v28 = *(_DWORD *)(a2 + 8);
        if (v28)
        {
          v29 = 152 * v28;
          do
          {
            v30 = &v22[v29];
            if ((*(_DWORD *)&v22[v29 - 152] & 0x7FFFFFFF) == 2)
            {
              v31 = (char *)*((_QWORD *)v30 - 15);
              if (v30 - 104 != v31)
                free(v31);
            }
            v29 -= 152;
          }
          while (v29);
        }
LABEL_42:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      v6 = 0;
      goto LABEL_32;
    }
    sub_22F3361F0((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_22EC4FA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((*(_DWORD *)a3 & 0x7FFFFFFF) == 2)
      {
        v6 = *(void **)(a3 + 32);
        if ((void *)(a3 + 48) != v6)
          free(v6);
      }
      sub_22EC4D2E0(a3, v5);
      v5 += 152;
      a3 += 152;
    }
    while (v5 != a2);
  }
  return a3;
}

char **sub_22EC4FA84(char **result)
{
  char *v1;
  unsigned int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char **v8;
  char **v9;

  v1 = *result;
  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v3 = 152 * v2;
    do
    {
      v4 = &v1[v3];
      if ((*(_DWORD *)&v1[v3 - 152] & 0x7FFFFFFF) == 2)
      {
        v5 = (char *)*((_QWORD *)v4 - 15);
        if (v4 - 104 != v5)
        {
          v8 = result;
          v6 = v3;
          v7 = v1;
          free(v5);
          v3 = v6;
          v1 = v7;
          result = v8;
        }
      }
      v3 -= 152;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v9 = result;
    free(v1);
    return v9;
  }
  return result;
}

BOOL sub_22EC4FB1C(unint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x2000000) == 0)
    return 1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 2) == 0 && !sub_22E49F6F8(a1);
}

char **sub_22EC4FB8C(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v5;
  char **v6;
  char *v7;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v5 = 688 * v3;
    do
    {
      v6 = (char **)&v2[v5];
      v7 = *(char **)&v2[v5 - 56];
      if (&v2[v5 - 40] != v7)
      {
        free(v7);
        v6 = (char **)&v2[v5];
      }
      sub_22EC4FA84(v6 - 86);
      v5 -= 688;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unsigned __int8 *sub_22EC4FC24(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  void *v4[2];
  _BYTE v5[192];
  void *v6[2];
  _QWORD v7[9];

  v7[8] = *MEMORY[0x24BDAC8D0];
  v6[0] = v7;
  v6[1] = (void *)0x800000000;
  v4[0] = v5;
  v4[1] = (void *)0x800000000;
  result = sub_22EFF59A4(a1, (uint64_t)v6, (uint64_t)v4);
  if (v4[0] != v5)
  {
    v3 = result;
    free(v4[0]);
    result = v3;
  }
  if (v6[0] != v7)
  {
    v2 = result;
    free(v6[0]);
    return v2;
  }
  return result;
}

uint64_t sub_22EC4FCEC(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int32 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned __int8 **v44;
  int v45;
  BOOL v46;
  unsigned __int8 *v47;
  unsigned __int8 **v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;

  v7 = result;
  v8 = *a2;
  if (v8 == 141)
  {
    result = sub_22EFFA604(*(unsigned __int8 **)&a2[a2[3]]);
    if (result)
    {
      v9 = result;
      if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 <= 5)
      {
        result = sub_22EFBAEF8(result);
        if ((_DWORD)result)
        {
          result = sub_22EC50AC4(v9);
          if ((_DWORD)result)
          {
            v10 = *(unsigned __int8 **)&a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                                         + 8
                                         + ((unint64_t)*(unsigned int *)a2 >> 24)];
            v15 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v15)
              v16 = *(unsigned __int8 *)(v15 + 16) - 27 > 0xFFFFFFFD;
            else
              v16 = 0;
            if (!v16)
              v15 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0));
            result = (uint64_t)sub_22EFFEB40(v10);
            if (*(unsigned __int8 *)result != 188)
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) & 0xFE) == 0x28)
              {
                v17 = 24 * *(unsigned int *)(v7 + 8);
                while (v17)
                {
                  v14 = *(_DWORD *)(*(_QWORD *)v7 - 24 + v17);
                  v17 -= 24;
                  if (v14 != 7)
                  {
LABEL_31:
                    if (v14 == 8)
                      return result;
                    goto LABEL_32;
                  }
                }
                goto LABEL_32;
              }
              goto LABEL_140;
            }
          }
        }
      }
    }
    return result;
  }
  if (v8 == 140)
  {
    result = sub_22EFFA604(*(unsigned __int8 **)&a2[a2[3]]);
    if (result)
    {
      v9 = result;
      if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 <= 5)
      {
        result = sub_22EC50AC4(result);
        if ((_DWORD)result)
        {
          v10 = (unsigned __int8 *)sub_22F060ED0((uint64_t)a2);
          v11 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v11)
            v12 = *(unsigned __int8 *)(v11 + 16) - 27 > 0xFFFFFFFD;
          else
            v12 = 0;
          if (!v12)
            v11 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0));
          result = (uint64_t)sub_22EFFEB40(v10);
          if (*(unsigned __int8 *)result != 188)
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFE) == 0x28)
            {
              v13 = 24 * *(unsigned int *)(v7 + 8);
              while (v13)
              {
                v14 = *(_DWORD *)(*(_QWORD *)v7 - 24 + v13);
                v13 -= 24;
                if (v14 != 7)
                  goto LABEL_31;
              }
LABEL_32:
              v18 = 7;
LABEL_141:
              v65.n128_u32[0] = v18;
              v65.n128_u64[1] = (unint64_t)v10;
              v66 = v9;
              goto LABEL_142;
            }
            goto LABEL_140;
          }
        }
      }
    }
    return result;
  }
  if ((v8 + 113) < 0xFBu)
  {
    if ((v8 & 0xFE) != 0x76)
      return result;
    v19 = *((_QWORD *)a2 + 2);
    v20 = *(_WORD *)(v19 + 80) & 0x7F;
    v21 = -40;
    if (v20 > 0x46)
    {
      if (v20 == 83)
        goto LABEL_99;
      if (v20 == 71)
      {
        v21 = -56;
        goto LABEL_99;
      }
      if (v20 != 81)
      {
LABEL_94:
        v38 = v20 - 52;
        v39 = v20 - 33 >= 5;
        v40 = -48;
        if (!v39)
          v40 = -64;
        if (v38 >= 6)
          v21 = v40;
        else
          v21 = -72;
      }
    }
    else
    {
      if (v20 > 0x18)
        goto LABEL_93;
      if (v20 == 16)
      {
LABEL_38:
        v21 = -48;
        goto LABEL_99;
      }
      if (((1 << v20) & 0x1066) == 0)
      {
        if (v20 == 24)
          goto LABEL_38;
LABEL_93:
        if (v20 == 70)
        {
          v21 = -64;
          goto LABEL_99;
        }
        goto LABEL_94;
      }
    }
LABEL_99:
    v41 = *(_QWORD *)(v19 + 72 + v21 + 16);
    v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
    if ((v41 & 4) != 0)
      v42 = (_QWORD *)*v42;
    if (*((_DWORD *)a2 + 8))
    {
      v43 = v42 ? (uint64_t)(v42 - 8) : 0;
      result = sub_22E90DE00(v43);
      if ((_DWORD)result)
      {
        v44 = (unsigned __int8 **)(a2 + 40);
        v45 = *a2;
        v46 = v45 == 119;
        if (v45 == 119)
          v47 = a2;
        else
          v47 = 0;
        v48 = (unsigned __int8 **)(v47 + 48);
        if (v46)
          v44 = v48;
        v10 = *v44;
        result = (uint64_t)sub_22EFFEB40(*v44);
        if (*(unsigned __int8 *)result != 188)
        {
          v49 = **(_QWORD **)(v19 + 120);
          v65.n128_u32[0] = 8;
          v65.n128_u64[1] = (unint64_t)v10;
          v66 = v49;
LABEL_142:
          v64 = sub_22E467108(v7, &v65);
          if ((v10[1] & 3) != 0)
            result = sub_22EC3D21C(v7, v10, 0, a3, a4, 1, v64);
          else
            result = sub_22EC3D6C0(v7, v10, a3, a4, 1, 1, v64);
          --*(_DWORD *)(v7 + 8);
          return result;
        }
      }
    }
    return result;
  }
  result = sub_22EFFA604(*(unsigned __int8 **)&a2[a2[3]]);
  if (!result)
    return result;
  v9 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 > 5)
    return result;
  if (*(_QWORD *)(result + 40) < 8uLL || (*(_QWORD *)(result + 40) & 7) != 0)
    return result;
  result = *(_QWORD *)(*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!result || *(_BYTE *)(result + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return result;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  if ((*(_QWORD *)(result + 16) & 0x3FFFC000000000) != 0x4000000000)
    return result;
  v24 = sub_22F10AEAC(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v9 + 120) + 48) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(_QWORD *)(v9 + 16);
  result = v25 & 0xFFFFFFFFFFFFFFF8;
  if ((v25 & 4) != 0)
  {
    result = *(_QWORD *)result;
    if (!result)
      return result;
  }
  else if (!result)
  {
    return result;
  }
  result = sub_22EFC84D4(result);
  if (!(_DWORD)result || v24 == 0)
    return result;
  v27 = *(_QWORD *)(v24 + 16);
  result = v27 & 0xFFFFFFFFFFFFFFF8;
  if ((v27 & 4) != 0)
  {
    result = *(_QWORD *)result;
    if (!result)
      return result;
  }
  else if (!result)
  {
    return result;
  }
  result = sub_22EFC84D4(result);
  if (!(_DWORD)result)
    return result;
  v28 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (!v28 || (*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 > 2 || !sub_22E90DE00(v28))
  {
    result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      return result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
      return result;
    result = sub_22F30A204(result);
    if (!(_DWORD)result)
      return result;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v30 || *(unsigned __int8 *)(v30 + 16) - 27 <= 0xFFFFFFFD)
    v30 = sub_22F10CF48(v30);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 39)
    goto LABEL_117;
  v31 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v31 || *(unsigned __int8 *)(v31 + 16) - 27 <= 0xFFFFFFFD)
    v31 = sub_22F10CF48(v31);
  v32 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v31 + 24) & 0xFFFFFFFFFFFFFFF0));
  if (v32 && (*(_DWORD *)(v32 + 28) & 0x7Fu) - 35 <= 2 && sub_22E90DE00(v32))
  {
LABEL_117:
    v50 = 0;
    v51 = *(_QWORD *)(v9 + 40);
    v52 = "";
    if ((v51 & 7) == 0)
    {
      v53 = v51 & 0xFFFFFFFFFFFFFFF8;
      if (v53)
      {
        v54 = *(_DWORD **)(v53 + 16);
        v55 = *v54;
        v52 = (const char *)(v54 + 4);
        v50 = v55;
      }
    }
    v65.n128_u64[0] = (unint64_t)v52;
    v65.n128_u64[1] = v50;
    LOWORD(v66) = 0;
    v56 = sub_22E72DCE4((uint64_t)&v65, "begin", 5, "rbegin", 6, "cbegin", 6, v29, "crbegin", 7, 1);
    v58 = sub_22E72DCE4(v56, "end", 3, "rend", 4, "cend", 4, v57, "crend", 5, 1);
    result = sub_22F2ABF14(v58, "data", 4, 1);
    if (!*(_BYTE *)(result + 17) || !*(_BYTE *)(result + 16))
      return result;
  }
  else
  {
    result = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!result || *(unsigned __int8 *)(result + 16) - 27 <= 0xFFFFFFFD)
      result = sub_22F10CF48(result);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) != 0x28)
      return result;
    v33 = *(_QWORD *)(v9 + 40);
    if ((v33 & 7) != 0)
      return result;
    v34 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (!v34)
      return result;
    v35 = *(_QWORD *)(v34 + 16);
    if (*(_DWORD *)v35 == 8)
    {
      v59 = bswap64(*(_QWORD *)(v35 + 16));
      v39 = v59 >= 0x616E795F63617374;
      v60 = v59 > 0x616E795F63617374;
      v61 = !v39;
      v37 = v60 - v61;
    }
    else
    {
      if (*(_DWORD *)v35 != 3)
        return result;
      v36 = bswap32(*(unsigned __int16 *)(v35 + 16)) >> 16;
      if (v36 == 26469)
        v37 = *(unsigned __int8 *)(v35 + 18) - 116;
      else
        v37 = v36 < 0x6765 ? -1 : 1;
    }
    if (v37)
      return result;
  }
  v10 = *(unsigned __int8 **)&a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)
                               + 8
                               + ((unint64_t)*(unsigned int *)a2 >> 24)];
  v62 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v62 || *(unsigned __int8 *)(v62 + 16) - 27 <= 0xFFFFFFFD)
    v62 = sub_22F10CF48(v62);
  result = (uint64_t)sub_22EFFEB40(v10);
  if (*(unsigned __int8 *)result != 188)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      v63 = 24 * *(unsigned int *)(v7 + 8);
      while (v63)
      {
        v14 = *(_DWORD *)(*(_QWORD *)v7 - 24 + v63);
        v63 -= 24;
        if (v14 != 7)
          goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_140:
    v18 = 8;
    goto LABEL_141;
  }
  return result;
}

void sub_22EC504FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  int v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int i;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BOOL4 v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t j;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;

  LODWORD(v8) = *a2;
  if ((v8 + 113) >= 0xFBu)
  {
    v8 = *(unsigned int *)a2;
    v14 = (unsigned __int8 **)&a2[v8 >> 24];
    v15 = sub_22EFFA604(*v14);
    if (v15)
    {
      if ((*(_DWORD *)(v15 + 28) & 0x7Eu) - 52 >= 6)
        v9 = 0;
      else
        v9 = v15;
    }
    else
    {
      v9 = 0;
    }
    v12 = (uint64_t *)&v14[((v8 >> 18) & 1) + 1];
    v13 = (unsigned int *)(a2 + 16);
    if (!v9)
      return;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 2);
    if ((_DWORD)v8 == 119)
      v10 = a2;
    else
      v10 = 0;
    v11 = (uint64_t *)(v10 + 48);
    if ((_DWORD)v8 == 119)
      v12 = v11;
    else
      v12 = (uint64_t *)(a2 + 40);
    v13 = (unsigned int *)(a2 + 32);
    if (!v9)
      return;
  }
  v16 = *v13;
  if (v8 == 141)
  {
    if (sub_22EFBAEF8(v9))
    {
      v18 = *v12++;
      v17 = v18;
      --v16;
      if (!v18)
        goto LABEL_87;
      goto LABEL_23;
    }
    LOBYTE(v8) = *a2;
  }
  if (v8 != 140)
    goto LABEL_87;
  v17 = sub_22F060ED0((uint64_t)a2);
  if (!v17)
    goto LABEL_87;
LABEL_23:
  v19 = *(_QWORD *)(v9 + 56);
  v20 = (unint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8);
  if ((v19 & 4) != 0)
    v20 = (unint64_t *)v20[4];
  if (v20)
  {
    v61.n128_u64[0] = *v20;
    v61.n128_u64[1] = (unint64_t)(v20 + 1);
    v21 = sub_22EA41158(v61.n128_u64);
    if (v21)
    {
      while (!*(_QWORD *)v22 || *(_WORD *)(*(_QWORD *)v22 + 32) != 57)
      {
        v23 = *(_QWORD *)(v21 + 32);
        if (v23 >= 0x10 && (*(_QWORD *)(v21 + 32) & 0xFLL) == 0)
          v25 = *(_QWORD *)((char *)&unk_22F483788
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v25 = 1;
        v61.n128_u64[0] = *(_QWORD *)(v21 + 32);
        v61.n128_u64[1] = (v22 + v25 + 7) & -v25;
        v21 = sub_22EA41158(v61.n128_u64);
        if (!v21)
          goto LABEL_36;
      }
      goto LABEL_83;
    }
LABEL_36:
    if ((*(_QWORD *)(v9 + 40) & 7) == 6)
    {
      v26 = *(_DWORD *)(*(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFFFF8);
      if ((v26 - 18) < 8 || v26 == 15)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v28)
          v29 = *(unsigned __int8 *)(v28 + 16) - 27 > 0xFFFFFFFD;
        else
          v29 = 0;
        if (!v29)
          v28 = sub_22F10CF48(v28);
        v30 = *(_QWORD *)(v28 + 24);
        v31 = v30 & 0xFFFFFFFFFFFFFFF0;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 40)
        {
          v32 = *(_DWORD *)(v9 + 28);
          v33 = v9;
          if ((v32 & 0x7F) != 0x53)
          {
            v34 = *(_QWORD *)(v9 + 16);
            v35 = v34 & 0xFFFFFFFFFFFFFFF8;
            if ((v34 & 4) != 0)
              v35 = *(_QWORD *)v35;
            for (i = *(_WORD *)(v35 + 8) & 0x7F; i != 83; i = *(_WORD *)(v35 + 8) & 0x7F)
            {
              v37 = -40;
              if (i > 70)
              {
                if (i == 71)
                {
                  v37 = -56;
                }
                else if (i != 81)
                {
                  goto LABEL_62;
                }
              }
              else
              {
                if (i > 0x18)
                  goto LABEL_61;
                if (i == 16)
                  goto LABEL_55;
                if (((1 << i) & 0x1066) != 0)
                  goto LABEL_68;
                if (i == 24)
                {
LABEL_55:
                  v37 = -48;
                }
                else
                {
LABEL_61:
                  if (i != 70)
                  {
LABEL_62:
                    v38 = i - 52;
                    if ((i - 33) >= 5)
                      v39 = -48;
                    else
                      v39 = -64;
                    if (v38 >= 6)
                      v37 = v39;
                    else
                      v37 = -72;
                    goto LABEL_68;
                  }
                  v37 = -64;
                }
              }
LABEL_68:
              v40 = *(_QWORD *)(v35 + v37 + 16);
              v35 = v40 & 0xFFFFFFFFFFFFFFF8;
              if ((v40 & 4) != 0)
                v35 = *(_QWORD *)v35;
            }
            v33 = v35 - 40;
          }
          if ((v32 & 0x7Eu) - 54 >= 4)
            v41 = 0;
          else
            v41 = v9;
          if (v41
            && (v60 = *(_QWORD *)(v33 + 88),
                v42 = *(_QWORD *)(v28 + 24),
                v43 = sub_22EFBAEF8(v41),
                LOBYTE(v30) = v42,
                v43))
          {
            v44 = sub_22EFD7784(v41);
            v45 = sub_22EF5F8C4(v60, v44, 1);
            LOBYTE(v30) = v42;
          }
          else
          {
            v45 = *(_QWORD *)(**(_QWORD **)(v41 + 120) + 48);
          }
          if ((*(_QWORD *)(v31 + 8) | v30 & 7) == (*(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFF0) + 8) | v45 & 7))
          {
LABEL_83:
            v61.n128_u32[0] = 4;
            v61.n128_u64[1] = v17;
            v62 = v9;
            v46 = sub_22E467108(a1, &v61);
            if ((*(_BYTE *)(v17 + 1) & 3) != 0)
              sub_22EC3D21C(a1, v17, 0, a3, a4, 0, v46);
            else
              sub_22EC3D6C0(a1, v17, a3, a4, 1, 0, v46);
            --*(_DWORD *)(a1 + 8);
          }
        }
      }
    }
  }
LABEL_87:
  v47 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v47)
    v48 = *(_BYTE *)(v47 + 16) == 26;
  else
    v48 = 0;
  if (v48
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v47 = sub_22F10CF48(v47)) != 0)
  {
    v49 = (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38);
  }
  else
  {
    v49 = 0;
  }
  if (v16 >= v49)
    v50 = v49;
  else
    v50 = v16;
  if ((_DWORD)v50)
  {
    for (j = 0; j != v50; ++j)
    {
      v52 = *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * j);
      if ((*(_BYTE *)(v52 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v52);
        v54 = *((unsigned int *)v53 + 2);
        if ((_DWORD)v54)
        {
          v55 = 8 * v54;
          v56 = *v53;
          while (*(_WORD *)(*(_QWORD *)v56 + 32) != 57)
          {
            v56 += 8;
            v55 -= 8;
            if (!v55)
              goto LABEL_110;
          }
        }
        else
        {
          v56 = *v53;
        }
        if (v56 != *v53 + 8 * v54)
        {
          v57 = *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * j);
          v58 = v12[j];
          v61.n128_u32[0] = 4;
          v61.n128_u64[1] = v58;
          v62 = v57;
          v59 = sub_22E467108(a1, &v61);
          if ((*(_BYTE *)(v58 + 1) & 3) != 0)
            sub_22EC3D21C(a1, v58, 0, a3, a4, 0, v59);
          else
            sub_22EC3D6C0(a1, v58, a3, a4, 1, 0, v59);
          --*(_DWORD *)(a1 + 8);
        }
      }
LABEL_110:
      ;
    }
  }
}

_DWORD *sub_22EC50A30(_DWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)a1;
  v3 = a1[2];
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (v4 != v3)
  {
    if (v4 <= v3)
    {
      if (*(_DWORD *)(v2 + 12) < v3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v4 = *(_DWORD *)(v2 + 8);
      }
      if (v4 != v3)
      {
        v5 = 24 * v3 - 24 * v4;
        v6 = (_QWORD *)(*(_QWORD *)v2 + 24 * v4 + 16);
        do
        {
          *v6 = 0;
          v6 += 3;
          v5 -= 24;
        }
        while (v5);
      }
    }
    *(_DWORD *)(v2 + 8) = v3;
  }
  return a1;
}

uint64_t sub_22EC50AC4(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  const char *v34;
  unsigned int v35;
  int v36;
  int v37;
  int v39;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  const char *v52;
  uint64_t v53;
  __int16 v54;

  if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x38)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v2)
      v3 = *(unsigned __int8 *)(v2 + 16) - 27 > 0xFFFFFFFD;
    else
      v3 = 0;
    if (!v3)
      v2 = sub_22F10CF48(v2);
    v4 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF0));
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 <= 2 && sub_22E90DE00(v4))
        return 1;
    }
  }
  v6 = *(_WORD *)(a1 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 0x46)
  {
    if (v6 == 83)
      goto LABEL_27;
    if (v6 == 71)
    {
      v7 = -56;
      goto LABEL_27;
    }
    if (v6 != 81)
    {
LABEL_22:
      v8 = v6 - 52;
      v9 = v6 - 33 >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v7 = v10;
      else
        v7 = -72;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_21;
    if (v6 == 16)
    {
LABEL_14:
      v7 = -48;
      goto LABEL_27;
    }
    if (((1 << v6) & 0x1066) == 0)
    {
      if (v6 == 24)
        goto LABEL_14;
LABEL_21:
      if (v6 == 70)
      {
        v7 = -64;
        goto LABEL_27;
      }
      goto LABEL_22;
    }
  }
LABEL_27:
  v11 = *(_QWORD *)(a1 + 72 + v7 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
    v13 = v12 - 8;
  else
    v13 = 0;
  v14 = v13[2];
  result = v14 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 4) != 0)
    result = *(_QWORD *)result;
  if (!result)
    return result;
  if ((*(_WORD *)(result + 8) & 0x7F) != 0x10
    || ((v15 = *(_QWORD *)(result - 8) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(result - 8) & 7) == 0)
      ? (v16 = v15 == 0)
      : (v16 = 1),
        v16
     || (v17 = *(_QWORD *)(v15 + 16), (*(_DWORD *)v17 & 0xFFFFFFFE) == 0)
     || *(_BYTE *)(v17 + 16) != 95
     || (v18 = *(unsigned __int8 *)(v17 + 17), v18 != 95) && (word_22F4ADB24[v18] & 0x20) == 0))
  {
    result = sub_22EFC84D4(result);
    if (!(_DWORD)result)
      return result;
  }
  v19 = sub_22EFD7784(a1);
  v20 = sub_22F10C2A4(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0));
  if (!v20 || (*(_DWORD *)(v20 + 28) & 0x7Fu) - 35 > 2 || !sub_22E90DE00(v20))
  {
    v22 = sub_22EFD7784(a1);
    result = sub_22F10C2A4(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      return result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
      return 0;
    result = sub_22F30A204(result);
    if (!(_DWORD)result)
      return result;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v23 || *(unsigned __int8 *)(v23 + 16) - 27 <= 0xFFFFFFFD)
    v23 = sub_22F10CF48(v23);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 39)
    goto LABEL_55;
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v28 || *(unsigned __int8 *)(v28 + 16) - 27 <= 0xFFFFFFFD)
    v28 = sub_22F10CF48(v28);
  v29 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v28 + 24) & 0xFFFFFFFFFFFFFFF0));
  if (v29)
  {
    if ((*(_DWORD *)(v29 + 28) & 0x7Fu) - 35 <= 2 && sub_22E90DE00(v29))
    {
LABEL_55:
      result = 0;
      v24 = *(_QWORD *)(a1 + 40);
      if (v24 < 8 || (v24 & 7) != 0)
        return result;
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (v25)
      {
        v42 = *(_DWORD **)(v25 + 16);
        v43 = *v42;
        v27 = (const char *)(v42 + 4);
        v26 = v43;
      }
      else
      {
        v26 = 0;
        v27 = "";
      }
      v52 = v27;
      v53 = v26;
      v54 = 0;
      v44 = sub_22E72DCE4((uint64_t)&v52, "begin", 5, "rbegin", 6, "cbegin", 6, v21, "crbegin", 7, 1);
      v46 = sub_22E72DCE4(v44, "end", 3, "rend", 4, "cend", 4, v45, "crend", 5, 1);
      v47 = sub_22F2ABF14(v46, "c_str", 5, 1);
      v48 = sub_22F2ABF14(v47, "data", 4, 1);
      v49 = sub_22F2ABF14(v48, "get", 3, 1);
      v41 = sub_22E72DCE4(v49, "find", 4, "equal_range", 11, "lower_bound", 11, v50, "upper_bound", 11, 1);
      goto LABEL_93;
    }
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v30 || *(unsigned __int8 *)(v30 + 16) - 27 <= 0xFFFFFFFD)
    v30 = sub_22F10CF48(v30);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) != 0x28)
    return 0;
  v31 = *(_QWORD *)(a1 + 40);
  if (v31 >= 8 && (v31 & 7) == 0)
  {
    v32 = v31 & 0xFFFFFFFFFFFFFFF8;
    if (v32)
    {
      v33 = *(_DWORD **)(v32 + 16);
      v35 = *v33;
      v34 = (const char *)(v33 + 4);
      v52 = v34;
      v53 = v35;
      v54 = 0;
      if (v35 == 5)
      {
        v36 = *(_DWORD *)v34;
        v37 = *((unsigned __int8 *)v34 + 4);
        if (v36 == 1852797542 && v37 == 116)
          v54 = 257;
      }
    }
    else
    {
      v52 = "";
      v53 = 0;
      v54 = 0;
    }
    v41 = sub_22E72DCE4((uint64_t)&v52, "back", 4, "at", 2, "top", 3, v21, "value", 5, 1);
LABEL_93:
    if (*(_BYTE *)(v41 + 17))
      v51 = *(_BYTE *)(v41 + 16) == 0;
    else
      v51 = 1;
    return !v51;
  }
  if ((v31 & 7) == 6)
    v39 = *(_DWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
  else
    v39 = 0;
  return v39 == 43 || v39 == 7;
}

uint64_t sub_22EC51014(uint64_t a1, uint64_t a2, unsigned __int8 *a3, __n128 a4)
{
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v18;
  uint64_t v19;

  v7 = *a3;
  if (v7 == 186)
  {
    v15 = *((_QWORD *)a3 + 1);
    if ((v15 & 1) == 0 && (*(_BYTE *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
      return 0;
    v16 = *((_QWORD *)a3 + 2);
    v14 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 4) != 0)
      v14 = *(_QWORD *)(v14 + 40);
LABEL_21:
    sub_22EC3D6C0(a2, v14, **(_QWORD **)a1, *(_QWORD *)(*(_QWORD *)a1 + 8), 1, **(unsigned __int8 **)(a1 + 8), a4);
    return 0;
  }
  if (v7 != 161)
    return 0;
  v8 = *((_QWORD *)a3 + 2);
  if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
    return 0;
  v10 = *(_QWORD *)(v8 + 48);
  if ((v10 & 1) == 0 && (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
    return 0;
  if (!sub_22EFBC5B4(*((_QWORD *)a3 + 2)))
    return 0;
  v11 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v11)
  {
LABEL_16:
    v18.n128_u32[0] = 2;
    v18.n128_u64[1] = (unint64_t)a3;
    v19 = v8;
    sub_22E467108(a2, &v18);
    v14 = sub_22EFBC5B4(v8);
    goto LABEL_21;
  }
  v12 = 24 * v11;
  v13 = (_QWORD *)(*(_QWORD *)a2 + 16);
  while (*((_DWORD *)v13 - 4) != 2 || *v13 != v8)
  {
    v13 += 3;
    v12 -= 24;
    if (!v12)
      goto LABEL_16;
  }
  return 0;
}

uint64_t sub_22EC5113C(uint64_t a1)
{
  return sub_22EAC7348(*(_QWORD *)a1, **(_DWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
}

uint64_t sub_22EC51154(uint64_t a1, unsigned __int8 *a2, char a3, _BYTE *a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  while (1)
  {
    do
    {
      v6 = (unint64_t)a2;
      LODWORD(v7) = *a2;
      if (v7 > 0xD5)
      {
        if ((_DWORD)v7 == 233)
        {
          LODWORD(v7) = *(_DWORD *)a2;
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_18;
          v8 = a2 + 16;
        }
        else
        {
          if ((_DWORD)v7 != 214)
            break;
          v8 = a2 + 24;
        }
      }
      else if ((_DWORD)v7 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          return sub_22EFFBE1C(v6, a1, 1) == 0;
        v8 = a2 + 24;
        if (!a2[48])
          v8 = a2 + 32;
        LOBYTE(v7) = -101;
      }
      else
      {
        if ((_DWORD)v7 != 176)
          break;
        v7 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v7 == -1)
          return sub_22EFFBE1C(v6, a1, 1) == 0;
        v8 = &a2[8 * v7 + 40];
        LOBYTE(v7) = -80;
      }
      a2 = *(unsigned __int8 **)v8;
    }
    while (*(_QWORD *)v8 != v6);
    if (v7 != 233)
      break;
    LODWORD(v7) = *(_DWORD *)v6;
LABEL_18:
    if ((v7 & 0x7C0000) != 0x100000)
      return 1;
    a2 = *(unsigned __int8 **)(v6 + 16);
    a3 = 1;
  }
  if ((v7 + 102) < 0xF5u)
  {
    switch(v7)
    {
      case 0x67u:
        v17 = a3 & 1;
        v12 = sub_22EC51154(a1, *(_QWORD *)(v6 + 32), v17, a4);
        if (!(_DWORD)v12)
        {
          v14 = *(_QWORD *)(v6 + 40);
          v16 = a1;
          v15 = v17;
          return sub_22EC51154(v16, v14, v15, a4);
        }
        break;
      case 0x6Bu:
        return 2;
      case 0xA1u:
        v10 = *(_QWORD *)((*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v10 & 8) != 0 && (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
          *a4 = 1;
        if ((a3 & 1) != 0)
        {
          v11 = *(_QWORD *)(v6 + 16);
          v12 = 1;
          if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
            return !sub_22E3CB5E0(*(_QWORD *)(v6 + 16));
        }
        else
        {
          return 1;
        }
        break;
      default:
        return sub_22EFFBE1C(v6, a1, 1) == 0;
    }
    return v12;
  }
  v9 = 1;
  v12 = 2;
  switch((*(_DWORD *)v6 >> 18) & 0x7F)
  {
    case 0:
    case 1:
    case 2:
    case 5:
      v14 = *(_QWORD *)(v6 + 16);
      v15 = a3 & 1;
      v16 = a1;
      return sub_22EC51154(v16, v14, v15, a4);
    case 0xC:
      return v12;
    case 0xE:
      return 0;
    default:
      return v9;
  }
  return v9;
}

BOOL sub_22EC51384(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = 1;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7E) == 0x24)
  {
    v3 = *(_QWORD *)(a2 + 152);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0 && v4)
    {
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)v4 + 152);
        v4 = v5 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v5 & 4) != 0 && v4);
    }
    v6 = **a1;
    if (v4)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (v7)
    {
      return 1;
    }
    else if (v6 == v4)
    {
      return 0;
    }
    else
    {
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 32))(v4);
      return v8 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
  }
  return v2;
}

unint64_t sub_22EC51434(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v2;
}

__n128 sub_22EC514AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  __n128 result;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8) == a2)
  {
    v19 = sub_22EC51434(a1, a3);
    v20 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
    v21 = *(_QWORD *)(v19 + 32);
    result = *(__n128 *)(v19 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v19;
    *(__n128 *)(v20 + 16) = result;
    *(_QWORD *)(v20 + 32) = v21;
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    v4 = a2 - *(_QWORD *)a1;
    v5 = sub_22EC51434(a1, a3);
    v6 = (__n128 *)(*(_QWORD *)a1 + v4);
    v7 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v7 - 8);
    v8 = *(_OWORD *)(v7 - 24);
    *(_OWORD *)v7 = *(_OWORD *)(v7 - 40);
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_QWORD *)a1;
    v10 = *(_DWORD *)(a1 + 8);
    v11 = *(_QWORD *)a1 + 40 * v10 - 40;
    if ((__n128 *)v11 != v6)
    {
      memmove(&v6[2].n128_i8[8], v6, v11 - (_QWORD)v6);
      v10 = *(_DWORD *)(a1 + 8);
      v9 = *(_QWORD *)a1;
    }
    v12 = v10 + 1;
    *(_DWORD *)(a1 + 8) = v12;
    v13 = v9 + 40 * v12;
    v15 = v5 >= (unint64_t)v6 && v5 < v13;
    v16 = v5 + 40 * v15;
    result = *(__n128 *)v16;
    v18 = *(__n128 *)(v16 + 16);
    v6[2].n128_u64[0] = *(_QWORD *)(v16 + 32);
    *v6 = result;
    v6[1] = v18;
  }
  return result;
}

uint64_t sub_22EC515B8(int **a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int *v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unsigned int *v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  _BOOL4 v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  _BOOL4 v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  unsigned int v108[24];
  unint64_t v109;
  int v110;

  v110 = a4;
  v8 = a1[1];
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned int *)(a2 + 8);
  v11 = sub_22EC520DC(*(_QWORD *)a2, *(_DWORD *)(a2 + 8), 0, (uint64_t)a3);
  v12 = v11;
  v109 = v11;
  v13 = *a3;
  if (v13 == 186)
    v14 = (uint64_t)a3;
  else
    v14 = 0;
  if (!(_DWORD)v10)
  {
LABEL_9:
    v18 = 0;
    v16 = 1;
    goto LABEL_10;
  }
  v15 = 24 * v10;
  v16 = 1;
  while (1)
  {
    v17 = *(_DWORD *)(v9 - 24 + v15);
    if (v17 > 8)
    {
      v18 = 0;
      goto LABEL_10;
    }
    if (((1 << v17) & 0x16) == 0)
      break;
    v15 -= 24;
    if (!v15)
      goto LABEL_9;
  }
  v18 = 0;
  if (((1 << v17) & 0x180) == 0)
    goto LABEL_10;
  if (v13 == 161)
  {
    v24 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0));
    v25 = v24 && (*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 <= 2 && sub_22F30A204(v24);
    v56 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v56)
    {
      v57 = *(_DWORD **)a2;
      v58 = 24 * v56;
      while ((*v57 & 0xFFFFFFFD) != 0)
      {
        v57 += 6;
        v58 -= 24;
        if (!v58)
          goto LABEL_79;
      }
      return 0;
    }
LABEL_79:
    v16 = 0;
    v18 = 0;
    result = 0;
    if (!v25)
      return result;
    goto LABEL_10;
  }
  if (!v14)
    return 1;
  v35 = *(_QWORD *)(v14 + 16);
  if ((v35 & 4) != 0)
  {
    if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 48))
      return 1;
  }
  v36 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0));
  if (!v36 || (*(_DWORD *)(v36 + 28) & 0x7Fu) - 35 > 2)
    return 1;
  v77 = sub_22F30A204(v36);
  v16 = 1;
  v18 = 1;
  result = 1;
  if (v77)
  {
LABEL_10:
    v19 = **a1;
    switch(v19)
    {
      case 1:
        if (!v14)
          return 0;
        v30 = v12;
        if (v12)
          v31 = v18;
        else
          v31 = 0;
        if (v31 == 1)
        {
          sub_22E8FCA40(v8, v12, 0x1942u, 0, (uint64_t)v108);
          sub_22E8906A0((uint64_t)v108, (uint64_t *)&v109);
          goto LABEL_31;
        }
        v48 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v48)
          goto LABEL_70;
        v49 = 0;
        v50 = *(_DWORD **)a2;
        v51 = 24 * v48;
        v52 = *(_DWORD **)a2;
        while (2)
        {
          if (*v52)
          {
            if (*v52 != 6)
            {
              v78 = 24 * v48;
              do
              {
                if ((*v50 & 0xFFFFFFFD) == 0)
                  return 0;
                v50 += 6;
                v78 -= 24;
              }
              while (v78);
              sub_22E8FCA40(v8, v12, 0x1945u, 0, (uint64_t)v108);
              sub_22E8900C4((uint64_t)v108, &v110);
              LOBYTE(v105) = *((_QWORD *)a1[3] + 1) == 0;
              v79 = sub_22E894E38((uint64_t)v108, (unsigned __int8 *)&v105);
              v80 = *(_QWORD *)a1[2];
              switch(*(_DWORD *)v80)
              {
                case 0:
                case 2:
                case 6:
                  goto LABEL_141;
                case 1:
                  goto LABEL_140;
                case 3:
                case 4:
                case 5:
                  __break(1u);
                  goto LABEL_123;
                default:
                  if (*(_DWORD *)v80 == 19)
LABEL_140:
                    v86 = *(_QWORD *)(v80 + 32) & 0xFFFFFFFFFFFFFFF8;
                  else
LABEL_141:
                    v86 = *(_QWORD *)(v80 + 32);
                  LOBYTE(v104) = (*(_DWORD *)(v86 + 28) & 0x200) != 0;
                  v87 = sub_22E894E38(v79, (unsigned __int8 *)&v104);
                  v88 = *(_QWORD *)a1[2];
                  v89 = 0;
                  v90 = 1 << *(_DWORD *)v88;
                  if ((v90 & 0x7FFB8) == 0)
                  {
                    if ((v90 & 0x100045) != 0)
                      v89 = *(_QWORD *)(v88 + 32);
                    else
                      v89 = *(_QWORD *)(v88 + 32) & 0xFFFFFFFFFFFFFFF8;
                  }
                  v107 = v89;
                  v22 = (unsigned int *)sub_22E890024(v87, (uint64_t *)&v107);
                  v106 = (**(_DWORD **)a1[4] & 0x300) != 0;
                  v23 = (unsigned __int8 *)&v106;
                  break;
              }
              goto LABEL_89;
            }
          }
          else
          {
            v49 = 1;
          }
          v52 += 6;
          v51 -= 24;
          if (!v51)
          {
            if (v49 == 1)
            {
LABEL_123:
              sub_22E8FCA40(v8, v30, 0x1BCDu, 0, (uint64_t)v108);
              sub_22E8900C4((uint64_t)v108, &v110);
              goto LABEL_59;
            }
LABEL_70:
            v53 = *(_QWORD *)a1[2];
            v54 = 0;
            v55 = 1 << *(_DWORD *)v53;
            if ((v55 & 0x7FFB8) == 0)
            {
              if ((v55 & 0x100045) != 0)
                v54 = *(_QWORD *)(v53 + 32);
              else
                v54 = *(_QWORD *)(v53 + 32) & 0xFFFFFFFFFFFFFFF8;
            }
            v102 = *(_DWORD *)(v53 + 24) + 1;
            *(_DWORD *)(v53 + 24) = v102;
            sub_22F3C6C94(v14, v54, v102);
            return 1;
          }
          continue;
        }
      case 2:
        if (*a3 != 186)
          return 0;
        if (v18)
        {
          v32 = v12;
          v33 = v8;
          v34 = 6466;
          goto LABEL_58;
        }
        if (a4)
          v59 = 6761;
        else
          v59 = 6762;
        sub_22E8FCA40(v8, v12, v59, 0, (uint64_t)v108);
        v47 = *((_QWORD *)a1[3] + 1) == 0;
        goto LABEL_85;
      case 3:
      case 4:
        v20 = *a3;
        if (v20 == 104)
        {
          if (v19 == 4)
            return 0;
          v32 = v12;
          v33 = v8;
          v34 = 6956;
        }
        else
        {
          if (v20 != 114)
          {
            if (v20 == 161)
            {
              if (v19 == 4)
                return 0;
              sub_22E8FCA40(v8, v12, 0x1B2Eu, 0, (uint64_t)v108);
              LOBYTE(v105) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[3] + 2) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16) & 0xFE) == 40;
              v21 = sub_22E894E38((uint64_t)v108, (unsigned __int8 *)&v105);
              v107 = *((_QWORD *)a3 + 2);
              v22 = (unsigned int *)sub_22E890024(v21, (uint64_t *)&v107);
              LOBYTE(v104) = (*(_DWORD *)(*((_QWORD *)a3 + 2) + 28) & 0x7F) == 64;
              v23 = (unsigned __int8 *)&v104;
            }
            else
            {
              sub_22E8FCA40(v8, v12, 0x1B2Du, 0, (uint64_t)v108);
              v47 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[3] + 2) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16) & 0xFE) == 40;
LABEL_85:
              v60 = v47;
              LOBYTE(v107) = v60;
              v22 = v108;
              v23 = (unsigned __int8 *)&v107;
            }
LABEL_89:
            v46 = (unsigned int *)sub_22E894E38((uint64_t)v22, v23);
LABEL_90:
            sub_22E8906A0((uint64_t)v46, (uint64_t *)&v109);
LABEL_91:
            sub_22E903BEC(v108);
LABEL_92:
            if (!*(_DWORD *)(a2 + 8))
              return 0;
            v61 = 0;
            while (1)
            {
              v62 = *(_QWORD *)a2 + 24 * v61;
              v63 = *(_DWORD *)v62;
              v64 = *(_QWORD *)(v62 + 16);
              if (*(_DWORD *)v62 == 6)
              {
                if ((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8) == 0
                  || (*(_DWORD *)((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 60 > 6)
                {
                  goto LABEL_114;
                }
                v107 = 0;
                v107 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
                sub_22E8FCA40(v8, *(_DWORD *)(v64 + 8), 0x163Du, 0, (uint64_t)v108);
                v68 = sub_22E890024((uint64_t)v108, (uint64_t *)&v107);
                v69 = 0;
                if ((*(_DWORD *)(v107 + 28) & 0x7F) != 0x40)
                  v69 = *(_BYTE *)(v107 + 98) & 1;
                LOBYTE(v104) = v69;
                v70 = sub_22E894E38(v68, (unsigned __int8 *)&v104);
                v106 = (*(_QWORD *)v64 & 1) == 0;
                v71 = sub_22E894E38(v70, (unsigned __int8 *)&v106);
                if ((*(_QWORD *)v64 & 2) != 0)
                  v72 = 2;
                else
                  v72 = 3;
                if ((*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFFCLL) == 4)
                  v73 = (*(_QWORD *)v64 & 2) >> 1;
                else
                  v73 = v72;
                if (*(_QWORD *)v64 >= 4uLL)
                  v74 = v73;
                else
                  v74 = 4;
                v103 = v74 == 3;
                v75 = sub_22E894E38(v71, (unsigned __int8 *)&v103);
                v65 = sub_22E890024(v75, (uint64_t *)&v107);
                goto LABEL_113;
              }
              if (v63 == 2)
                break;
              if (!v63)
              {
                v107 = *(_QWORD *)(v62 + 16);
                sub_22E8FCA40(v8, *(_DWORD *)(v64 + 24), 0x1632u, 0, (uint64_t)v108);
                v65 = sub_22E890024((uint64_t)v108, (uint64_t *)&v107);
LABEL_113:
                v76 = v65;
                v105 = sub_22EC520DC(*(_QWORD *)a2, *(_DWORD *)(a2 + 8), v61 + 1, (uint64_t)a3);
                sub_22E8906A0(v76, (uint64_t *)&v105);
                sub_22E903BEC(v108);
              }
LABEL_114:
              if (++v61 == *(_DWORD *)(a2 + 8))
                return 0;
            }
            sub_22E8FCA40(v8, *(_DWORD *)(v64 + 24), 0x1646u, 0, (uint64_t)v108);
            LOBYTE(v104) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) & 0xFE) == 40;
            v66 = sub_22E894E38((uint64_t)v108, (unsigned __int8 *)&v104);
            v106 = (*(_DWORD *)(v64 + 28) & 0x200) != 0;
            v67 = sub_22E894E38(v66, (unsigned __int8 *)&v106);
            v107 = *(_QWORD *)(v64 + 40);
            v65 = sub_22E894538(v67, (uint64_t *)&v107);
            goto LABEL_113;
          }
          v32 = v12;
          v33 = v8;
          v34 = 4670;
        }
LABEL_58:
        sub_22E8FCA40(v33, v32, v34, 0, (uint64_t)v108);
LABEL_59:
        v46 = v108;
        goto LABEL_90;
      case 5:
        v26 = *a3;
        if (v26 == 186)
        {
          v27 = *(int **)a1[2];
          if (!v27)
            return 0;
          v28 = 1 << *v27;
          if ((v28 & 0x7FFB8) != 0)
            return 0;
          v29 = (v28 & 0x100045) != 0 ? *((_QWORD *)v27 + 4) : *((_QWORD *)v27 + 4) & 0xFFFFFFFFFFFFFFF8;
          v107 = v29;
          if (!v29)
            return 0;
          if (v18)
          {
            sub_22E8FCA40(v8, v12, 0x1943u, 0, (uint64_t)v108);
            v81 = sub_22E890024((uint64_t)v108, (uint64_t *)&v107);
            sub_22E8906A0(v81, (uint64_t *)&v109);
            sub_22E903BEC(v108);
            sub_22E8FCA40(v8, *(_DWORD *)(v107 + 24), 0x17ABu, 0, (uint64_t)v108);
            LOBYTE(v105) = 1;
            sub_22E894E38((uint64_t)v108, (unsigned __int8 *)&v105);
LABEL_31:
            sub_22E903BEC(v108);
            return 0;
          }
          LOBYTE(v105) = v27 != a1[3];
          v82 = *(unsigned int *)(a2 + 8);
          if ((_DWORD)v82)
          {
            v83 = *(_DWORD **)a2;
            v84 = 24 * v82;
            while (*v83 == 6 || *v83 == 0)
            {
              v83 += 6;
              v84 -= 24;
              if (!v84)
                goto LABEL_138;
            }
            v91 = 6468;
          }
          else
          {
LABEL_138:
            v91 = 3148;
          }
          sub_22E8FCA40(v8, v12, v91, 0, (uint64_t)v108);
          v92 = sub_22E890024((uint64_t)v108, (uint64_t *)&v107);
          v93 = sub_22E894E38(v92, (unsigned __int8 *)&v105);
          v94 = sub_22E8900C4(v93, &v110);
          sub_22E8906A0(v94, (uint64_t *)&v109);
          sub_22E903BEC(v108);
          v95 = *(_DWORD *)(a2 + 8);
          if (!v95 || *(_DWORD *)(*(_QWORD *)a2 + 24 * v95 - 24))
          {
            sub_22E8FCA40(v8, *(_DWORD *)(v107 + 24), 0x1643u, 0, (uint64_t)v108);
            sub_22E8900C4((uint64_t)v108, &v110);
            sub_22E894E38((uint64_t)v108, (unsigned __int8 *)&v105);
            goto LABEL_91;
          }
          goto LABEL_92;
        }
        v38 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v38)
          goto LABEL_49;
        v39 = 24 * v38;
        v40 = *(_DWORD **)a2;
        do
        {
          if ((*v40 & 0xFFFFFFFD) == 0)
            return 0;
          v40 += 6;
          v39 -= 24;
        }
        while (v39);
        if ((v16 & 1) != 0)
          goto LABEL_49;
        v41 = 24 * v38;
        while (2)
        {
          v42 = *(_DWORD *)(*(_QWORD *)a2 - 24 + v41);
          if (v42 <= 8)
          {
            if (((1 << v42) & 0x16) != 0)
            {
              v41 -= 24;
              if (!v41)
                break;
              continue;
            }
            if (((1 << v42) & 0x180) != 0)
              return 0;
          }
          break;
        }
LABEL_49:
        if (v26 != 161 || (*(_DWORD *)(*((_QWORD *)a3 + 2) + 28) & 0x7Fu) - 60 > 6)
          return 0;
        v107 = *((_QWORD *)a3 + 2);
        v43 = *(_QWORD *)a1[2];
        if (v43)
        {
          v44 = 1 << *(_DWORD *)v43;
          if ((v44 & 0x7FFB8) == 0)
          {
            v45 = (v44 & 0x100045) != 0 ? *(_QWORD *)(v43 + 32) : *(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF8;
            v105 = v45;
            if (v45)
            {
              v96 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) & 0xFE;
              v97 = v96 != 40;
              if (v96 == 40)
                v98 = 6308;
              else
                v98 = 6681;
              sub_22E8FCA40(v8, v12, v98, 0, (uint64_t)v108);
              v99 = sub_22E890024((uint64_t)v108, (uint64_t *)&v105);
              v100 = sub_22E890024(v99, (uint64_t *)&v107);
              LOBYTE(v104) = (*(_DWORD *)(v107 + 28) & 0x7F) == 64;
              v101 = sub_22E894E38(v100, (unsigned __int8 *)&v104);
              sub_22E8906A0(v101, (uint64_t *)&v109);
              sub_22E903BEC(v108);
              sub_22E8FCA40(v8, *(_DWORD *)(v105 + 24), 0x17ABu, 0, (uint64_t)v108);
              v104 = v97;
              sub_22E89519C((uint64_t)v108, (unsigned int *)&v104);
              goto LABEL_91;
            }
          }
        }
        goto LABEL_92;
      default:
        goto LABEL_92;
    }
  }
  return result;
}

unint64_t sub_22EC520DC(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;
  int v5;
  uint64_t v7;
  unint64_t v8;

  if (a2 == a3)
  {
LABEL_12:
    sub_22F0D4E74(a4);
    v8 = v7 & 0xFFFFFFFF00000000;
    return v7 | v8;
  }
  while (1)
  {
    v4 = a3;
    v5 = *(_DWORD *)(a1 + 24 * a3);
    if (v5 != 6)
      break;
    if ((**(_QWORD **)(a1 + 24 * a3 + 16) & 0xFFFFFFFFFFFFFFF8) != 0
      && (*(_DWORD *)((**(_QWORD **)(a1 + 24 * a3 + 16) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 60 <= 6)
    {
      goto LABEL_11;
    }
LABEL_8:
    ++a3;
    if (a2 == v4 + 1)
      goto LABEL_12;
  }
  if (!v5)
    goto LABEL_11;
  if (v5 != 2)
    goto LABEL_8;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24 * a3 + 16) + 29) & 2) == 0)
  {
LABEL_11:
    a4 = *(_QWORD *)(a1 + 24 * a3 + 8);
    goto LABEL_12;
  }
  v8 = 0;
  LODWORD(v7) = 0;
  return v7 | v8;
}

unsigned __int8 **sub_22EC52194(unsigned __int8 **a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 7;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

uint64_t sub_22EC521F4(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v7 = (a2 - 1);
  while (1)
  {
    v8 = v7;
    if (!(_DWORD)v7)
      break;
    v9 = a1[v7--];
    if ((*(_DWORD *)(v9 + 8) & 7) != 3)
      goto LABEL_6;
  }
  v9 = *a1;
LABEL_6:
  v10 = *(_QWORD *)(v9 + 1488);
  if (v10)
    v11 = v10 + 72;
  else
    v11 = 0;
  do
  {
    v12 = v8;
    v13 = a1[v8];
    if (a3)
    {
      v14 = *(_QWORD *)(a3 + 16);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 4) != 0)
        v15 = (_QWORD *)*v15;
      if (v11)
      {
        v16 = sub_22EFCC008((uint64_t)v15);
        if (v16 == sub_22EFCC008(v11))
          goto LABEL_52;
      }
      if (!*(_DWORD *)(v13 + 1224))
      {
        v28 = 0;
        v29 = a3;
        if ((sub_22F246C54((uint64_t *)(v13 + 1232), &v29, &v28) & 1) == 0)
          goto LABEL_52;
      }
    }
    else if (!*(_DWORD *)(v13 + 1224))
    {
      v17 = *(_DWORD *)(v13 + 1256);
      if (!v17)
        goto LABEL_53;
    }
    v18 = sub_22F31DCF8(v11);
    v11 = v18;
    if ((*(_WORD *)(v18 + 8) & 0x7F) == 0x53)
      break;
    if (!sub_22EFC7ADC(v18))
      break;
    v19 = *(_WORD *)(v11 + 8);
    if ((v19 & 0x7Eu) - 54 > 3)
      break;
    v20 = v19 & 0x7F;
    v21 = -40;
    if (v20 > 70)
    {
      if (v20 == 83)
        goto LABEL_38;
      if (v20 == 71)
      {
        v21 = -56;
        goto LABEL_38;
      }
      if (v20 != 81)
        goto LABEL_33;
    }
    else
    {
      if (v20 > 0x18)
        goto LABEL_32;
      if (v20 == 16)
        goto LABEL_25;
      if (((1 << v20) & 0x1066) == 0)
      {
        if (v20 == 24)
        {
LABEL_25:
          v21 = -48;
          goto LABEL_38;
        }
LABEL_32:
        if (v20 == 70)
        {
          v21 = -64;
          goto LABEL_38;
        }
LABEL_33:
        if ((v20 - 52) < 6)
        {
          v21 = -72;
        }
        else if ((v20 - 33) >= 5)
        {
          v21 = -48;
        }
        else
        {
          v21 = -64;
        }
      }
    }
LABEL_38:
    v22 = *(_QWORD *)(v11 + v21 + 16);
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 4) != 0)
    {
      v23 = (_QWORD *)*v23;
      if (!v23)
        break;
    }
    else if (!v23)
    {
      break;
    }
    v24 = v23[8];
    if (!v24)
      break;
    if (((*(unsigned __int16 *)(v24 + 8) | (*(unsigned __int8 *)(v24 + 10) << 16)) & 0x100000) == 0)
      break;
    if ((*(_QWORD *)(v11 - 32) & 7) != 6)
      break;
    v8 = v12 - 1;
  }
  while (*(_DWORD *)(*(_QWORD *)(v11 - 32) & 0xFFFFFFFFFFFFFFF8) == 42);
  if ((sub_22EFC7ADC(v11) & 1) != 0)
  {
LABEL_52:
    v17 = 0;
LABEL_53:
    v25 = 0;
    return v25 & 0x100000000 | v17;
  }
  v27 = v12;
  if (a3)
  {
    v28 = 0;
    v29 = 0;
    if ((sub_22EB4EE10(a4, a3, 0, 0, 0, 0, &v29, &v28, (int *)&v27) & 1) != 0)
      goto LABEL_52;
  }
  else if ((sub_22EBBBBEC(a4, *(_DWORD *)(a1[v12] + 1840), 0, 0, (int *)&v27, 0) & 1) != 0)
  {
    goto LABEL_52;
  }
  v25 = 0x100000000;
  v17 = v27;
  return v25 & 0x100000000 | v17;
}

_DWORD *sub_22EC524B4(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v4;

  result = *(_DWORD **)(a1 + 1584);
  if (!result)
  {
    v4 = *(unsigned int *)(a1 + 1440);
    if ((_DWORD)v4)
    {
      result = sub_22EFE8F48(*(_QWORD *)(a2 + 88), 0, *(_DWORD *)(a1 + 1568), *(_QWORD *)(a1 + 1432), v4, *(_DWORD *)(a1 + 1572), *(_QWORD *)(a1 + 1576) & 0xFFFFFFFFFFFFFFFELL);
      *(_QWORD *)(a1 + 1584) = result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22EC5250C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t result;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 416);
  if (!v4)
  {
LABEL_36:
    v10 = 0;
    goto LABEL_37;
  }
  v5 = *(_DWORD *)(v4 + 28) & 0x7F;
  if (v5 == 64)
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    v8 = *(_WORD *)(v7 + 8) & 0x7F;
    v9 = -40;
    if (v8 > 0x46)
    {
      if (v8 == 83)
        goto LABEL_31;
      if (v8 == 71)
      {
        v9 = -56;
        goto LABEL_31;
      }
      if (v8 != 81)
      {
LABEL_26:
        if (v8 - 52 < 6)
        {
          v9 = -72;
        }
        else
        {
          v9 = -48;
          if (v8 - 33 < 5)
            v9 = -64;
        }
      }
    }
    else
    {
      if (v8 > 0x18)
        goto LABEL_25;
      if (v8 == 16)
      {
LABEL_8:
        v9 = -48;
        goto LABEL_31;
      }
      if (((1 << v8) & 0x1066) == 0)
      {
        if (v8 == 24)
          goto LABEL_8;
LABEL_25:
        if (v8 == 70)
        {
          v9 = -64;
          goto LABEL_31;
        }
        goto LABEL_26;
      }
    }
LABEL_31:
    v14 = *(_QWORD *)(v7 + v9 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)(v15 + 8);
    if (v15)
    {
      v10 = (*(_WORD *)(v15 + 8) & 0x7Eu) - 34 < 4;
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if ((v5 - 67) < 0xFFFFFFF9)
  {
    v10 = 2 * ((v5 - 49) < 3);
    goto LABEL_37;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 4) != 0)
    v12 = *(_QWORD *)v12;
  if ((*(_WORD *)(v12 + 8) & 0x7Eu) - 34 < 4)
  {
    v10 = 3;
    goto LABEL_37;
  }
  v13 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 80) + 72), *(_QWORD *)(v4 + 80));
  if ((*(_DWORD *)(v13 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v13 + 97) & 0x20) != 0)
  {
    v10 = 4;
  }
  else
  {
    if (sub_22EFB6870(v4))
    {
      v10 = 5;
      goto LABEL_37;
    }
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 67 < 0xFFFFFFFE)
      goto LABEL_36;
    if ((*(_BYTE *)(v4 + 420) & 7) == 2)
      v10 = 0;
    else
      v10 = 5;
  }
LABEL_37:
  if (*(_DWORD *)(a1 + 10680) <= *(_DWORD *)(a1 + 11956))
  {
    v16 = sub_22EFC7ADC(*(_QWORD *)(a1 + 216));
    if (v10)
      goto LABEL_39;
  }
  else
  {
    v16 = 1;
    if (v10)
    {
LABEL_39:
      if (v10 != 3 || v16)
        return sub_22F36F200(*(_QWORD *)(a1 + 88), 0, v4);
      else
        return 0;
    }
  }
  if (v16 && (!v4 || (*(_DWORD *)(v4 + 28) & 0x7F) != 0x40))
  {
LABEL_75:
    if (!a2)
      return sub_22F36F16C(*(_QWORD *)(a1 + 88), a2);
    v26 = *(_WORD *)(a2 + 8);
    if ((v26 & 0x7F) != 2)
      return sub_22F36F16C(*(_QWORD *)(a1 + 88), a2);
    while (1)
    {
      v27 = v26 & 0x7F;
      v28 = -40;
      if (v27 > 70)
      {
        if (v27 != 83)
        {
          if (v27 == 71)
          {
            v28 = -56;
          }
          else if (v27 != 81)
          {
            goto LABEL_88;
          }
        }
      }
      else
      {
        if (v27 > 0x18)
          goto LABEL_87;
        if (v27 == 16)
          goto LABEL_80;
        if (((1 << v27) & 0x1066) != 0)
          goto LABEL_94;
        if (v27 == 24)
        {
LABEL_80:
          v28 = -48;
        }
        else
        {
LABEL_87:
          if (v27 != 70)
          {
LABEL_88:
            v29 = v27 - 52;
            if ((v27 - 33) >= 5)
              v30 = -48;
            else
              v30 = -64;
            if (v29 >= 6)
              v28 = v30;
            else
              v28 = -72;
            goto LABEL_94;
          }
          v28 = -64;
        }
      }
LABEL_94:
      v31 = *(_QWORD *)(a2 + v28 + 16);
      a2 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        a2 = *(_QWORD *)a2;
      v26 = *(_WORD *)(a2 + 8);
      if (a2)
        v32 = (v26 & 0x7F) == 2;
      else
        v32 = 0;
      if (!v32)
        return sub_22F36F16C(*(_QWORD *)(a1 + 88), a2);
    }
  }
  v18 = (unint64_t *)(a1 + 216);
LABEL_47:
  v19 = *v18;
  while (1)
  {
    v20 = *(_WORD *)(v19 + 8);
    v21 = v20 & 0x7F;
    if (v21 == 16 || v21 == 83)
      return 0;
    if ((v20 & 0x7Eu) - 58 >= 0xFFFFFFFA && (*(_BYTE *)(v19 + 10) & 1) != 0)
      break;
    v22 = -40;
    if (v21 > 70)
    {
      if (v21 == 71)
      {
        v22 = -56;
      }
      else if (v21 != 81)
      {
        goto LABEL_62;
      }
    }
    else
    {
      if (v21 > 0x18)
        goto LABEL_61;
      if (v21 == 16)
        goto LABEL_55;
      if (((1 << v21) & 0x1066) != 0)
        goto LABEL_68;
      if (v21 == 24)
      {
LABEL_55:
        v22 = -48;
      }
      else
      {
LABEL_61:
        if (v21 != 70)
        {
LABEL_62:
          v23 = v21 - 52;
          if ((v21 - 33) >= 5)
            v24 = -48;
          else
            v24 = -64;
          if (v23 >= 6)
            v22 = v24;
          else
            v22 = -72;
          goto LABEL_68;
        }
        v22 = -64;
      }
    }
LABEL_68:
    v25 = *(_QWORD *)(v19 + v22 + 16);
    v19 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 4) != 0)
    {
      v18 = (unint64_t *)(v19 + 8);
      goto LABEL_47;
    }
  }
  result = 0;
  if (v21 != 16)
    goto LABEL_75;
  return result;
}

_QWORD *sub_22EC52964(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  if (a4[24])
  {
    v22 = *a4;
    v23 = *((_DWORD *)a4 + 2);
    v24 = *((_QWORD *)a4 + 2);
    *(_DWORD *)(a2[16] + 112) = *(_DWORD *)(a2[16] + 112) & 0x80000000 | *((_DWORD *)a4 + 1) & 0x7FFFFFFF;
    v25 = a2[16];
    *(_QWORD *)(v25 + 120) = v24;
    *(_WORD *)(v25 + 108) = *(_WORD *)(v25 + 108) & 0xDFFF | (v22 << 13);
    return sub_22F3B1D48(a2, v23);
  }
  v7 = a2[2];
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  result = (_QWORD *)sub_22EC5250C(a1, (unint64_t)v8);
  v11 = v10;
  if (result)
  {
    v26 = result;
    v27 = 0;
LABEL_43:
    *(_DWORD *)(a2[16] + 112) = *(_DWORD *)(a2[16] + 112) & 0x80000000 | (*(uint64_t (**)(_QWORD *, uint64_t))(*v26 + 16))(v26, a3) & 0x7FFFFFFF;
    v29 = a2[16];
    *(_QWORD *)(v29 + 120) = v11;
    *(_WORD *)(v29 + 108) = *(_WORD *)(v29 + 108) & 0xDFFF | v27;
    v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v26 + 56))(v26, a3);
    return sub_22F3B1D48(a2, v23);
  }
  v12 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(v12 + 68) & 0x20) != 0 || (*(_BYTE *)(v12 + 104) & 0xC) != 0)
  {
    if (v10)
    {
      v28 = sub_22F36F200(*(_QWORD *)(a1 + 88), 0, v10);
    }
    else
    {
      v13 = a2[2];
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      if (v14)
      {
        v15 = *(_WORD *)(v14 + 8);
        if ((v15 & 0x7F) == 2)
        {
          do
          {
            v16 = v15 & 0x7F;
            v17 = -40;
            if (v16 > 70)
            {
              if (v16 != 83)
              {
                if (v16 == 71)
                {
                  v17 = -56;
                }
                else if (v16 != 81)
                {
                  goto LABEL_23;
                }
              }
            }
            else
            {
              if (v16 > 0x18)
                goto LABEL_22;
              if (v16 == 16)
                goto LABEL_15;
              if (((1 << v16) & 0x1066) != 0)
                goto LABEL_29;
              if (v16 == 24)
              {
LABEL_15:
                v17 = -48;
              }
              else
              {
LABEL_22:
                if (v16 != 70)
                {
LABEL_23:
                  v18 = v16 - 52;
                  if ((v16 - 33) >= 5)
                    v19 = -48;
                  else
                    v19 = -64;
                  if (v18 >= 6)
                    v17 = v19;
                  else
                    v17 = -72;
                  goto LABEL_29;
                }
                v17 = -64;
              }
            }
LABEL_29:
            v20 = *(_QWORD *)(v14 + v17 + 16);
            v14 = v20 & 0xFFFFFFFFFFFFFFF8;
            if ((v20 & 4) != 0)
              v14 = *(_QWORD *)v14;
            v15 = *(_WORD *)(v14 + 8);
            if (v14)
              v21 = (v15 & 0x7F) == 2;
            else
              v21 = 0;
          }
          while (v21);
        }
      }
      v28 = sub_22F36F16C(*(_QWORD *)(a1 + 88), v14);
    }
    v26 = (_QWORD *)v28;
    v27 = 0x2000;
    goto LABEL_43;
  }
  return result;
}

uint64_t sub_22EC52B9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7, int a8, char a9)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;

  v11 = result;
  *(_QWORD *)(a2 + 1488) = a3;
  v12 = *(_WORD *)(a3 + 80) & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 == 83)
      goto LABEL_17;
    if (v12 == 71)
    {
      v13 = -56;
      goto LABEL_17;
    }
    if (v12 != 81)
    {
LABEL_12:
      v14 = v12 - 52;
      v15 = v12 - 33 >= 5;
      v16 = -48;
      if (!v15)
        v16 = -64;
      if (v14 >= 6)
        v13 = v16;
      else
        v13 = -72;
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_11;
    if (v12 == 16)
    {
LABEL_4:
      v13 = -48;
      goto LABEL_17;
    }
    if (((1 << v12) & 0x1066) == 0)
    {
      if (v12 == 24)
        goto LABEL_4;
LABEL_11:
      if (v12 == 70)
      {
        v13 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v17 = *(_QWORD *)(a3 + 72 + v13 + 16);
  v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 4) != 0)
    v18 = (_QWORD *)*v18;
  if (v18)
    v19 = v18 - 8;
  else
    v19 = 0;
  *(_QWORD *)(a2 + 1480) = v19;
  if ((a5 - 1) <= 1)
    *(_DWORD *)(a2 + 1224) = a5;
  *(_DWORD *)(a2 + 1504) = a6;
  *(_QWORD *)(a2 + 1496) = a4;
  *(_BYTE *)(a2 + 1513) = a7;
  *(_BYTE *)(a2 + 1512) = a9;
  if (a8)
  {
    result = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v20 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
    else
      v20 = 0;
    if (!v20)
      result = sub_22F10CF48(result);
    v21 = *(_QWORD *)(result + 24);
    *(_QWORD *)(a2 + 1416) = v21;
    v22 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v22 + 17) & 4) == 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v23 || (*(_DWORD *)(v23 + 16) & 0xFF800FF) != 86507531)
      {
        v25 = *(_QWORD *)(a3 + 56);
        if ((v25 & 4) != 0 && (v27 = v25 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v27 + 16)))
          v26 = **(unsigned int ***)(v27 + 24);
        else
          v26 = (unsigned int *)(a3 + 64);
        return sub_22EE8B0B0(v11, *v26, v21);
      }
    }
  }
  else
  {
    *(_BYTE *)(a2 + 1408) = 1;
  }
  return result;
}

unint64_t sub_22EC52D88(unint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t i;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  BOOL v39;
  unsigned int v40[24];
  unint64_t v41;

  v2 = (_QWORD *)result;
  v3 = *(unsigned int *)(a2 + 136);
  v4 = (uint64_t *)(a2 + 1416);
  v5 = *(_QWORD *)(a2 + 1416);
  if ((_DWORD)v3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(result + 72) + 1) & 1) != 0)
        goto LABEL_11;
      v7 = *(_QWORD *)(a2 + 128);
      result = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (!result)
        goto LABEL_11;
      result = sub_22EC554B0((unsigned __int8 *)result);
      if (!result)
        goto LABEL_11;
      v8 = (_QWORD *)result;
      v9 = v7 + 8;
      v10 = 8 * v3 - 8;
      while (v10)
      {
        result = *(_QWORD *)(*(_QWORD *)v9 + 8);
        if (result)
          result = sub_22EC554B0((unsigned __int8 *)result);
        v9 += 8;
        v10 -= 8;
        if ((_QWORD *)result != v8)
          goto LABEL_11;
      }
      if (v8[5] || (v8[15] >= 8uLL ? (v28 = (v8[15] & 4) == 0) : (v28 = 0), v28))
      {
        v29 = v8[6];
        if (v29)
        {
          v30 = v29 & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          result = sub_22EF6462C(v2[11], (unint64_t)v8);
          v30 = result;
        }
        *(_QWORD *)(a2 + 1416) = v30;
        v31 = *(unsigned int *)(a2 + 136);
        if ((_DWORD)v31)
        {
          v32 = *(uint64_t **)(a2 + 128);
          v33 = 8 * v31;
          do
          {
            v34 = *v32;
            v35 = *(unsigned __int8 **)(*v32 + 8);
            if ((*((_QWORD *)v35 + 1) & 7 | *(_QWORD *)((*((_QWORD *)v35 + 1) & 0xFFFFFFFFFFFFFFF0) + 8)) != (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) | v30 & 7))
            {
              if (*v35 == 173)
              {
                v36 = *((_QWORD *)v35 + 2);
                v37 = (unsigned int *)sub_22E3CD3D4(v2[11] + 2032, 24, 3);
                result = (unint64_t)sub_22F003694(v37, v30, 30, v36, 0, 0, 0);
                *((_QWORD *)v35 + 2) = result;
              }
              else
              {
                v38 = (unsigned int *)sub_22E3CD3D4(v2[11] + 2032, 24, 3);
                result = (unint64_t)sub_22F003694(v38, v30, 30, (uint64_t)v35, 0, 0, 0);
                *(_QWORD *)(v34 + 8) = result;
              }
            }
            ++v32;
            v33 -= 8;
          }
          while (v33);
        }
      }
      else
      {
LABEL_11:
        v11 = *(unsigned int *)(a2 + 136);
        if (v11 >= 2)
        {
          v12 = *(uint64_t **)(a2 + 128);
          v13 = &v12[v11];
          do
          {
            v14 = *v12;
            v15 = *(_QWORD *)(*v12 + 8);
            if (v15)
              v16 = (uint64_t *)(v15 + 8);
            else
              v16 = (uint64_t *)(v2[11] + 16392);
            v17 = *v16;
            v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v18 + 8) & 0xF) != 0)
              v18 = (unint64_t)sub_22F10D2BC(v17);
            v41 = v18 & 0xFFFFFFFFFFFFFFF0;
            v19 = sub_22EF63D48(v2[11], v18 & 0xFFFFFFFFFFFFFFF0);
            if (v19 == sub_22EF63D48(v2[11], *v4))
            {
              v22 = v41;
              v23 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
              if (v23)
              {
                while (2)
                {
                  v25 = 0;
                  v24 = 1;
                  switch(*(_DWORD *)(v23 + 16) >> 19)
                  {
                    case '!':
                      break;
                    case '"':
                      v25 = 2;
                      break;
                    case '#':
                      v25 = 1;
                      break;
                    case '$':
                      v25 = 3;
                      break;
                    default:
                      v23 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v23 + 40) & 0xFFFFFFFFFFFFFFF0));
                      v24 = 0;
                      v25 = 0;
                      if (v23)
                        continue;
                      break;
                  }
                  break;
                }
              }
              else
              {
                v24 = 0;
                v25 = 0;
              }
              for (i = *(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(result + 40))
              {
                result = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
                if (!result)
                  break;
                v27 = (*(_DWORD *)(result + 16) >> 19) - 33;
                if (v27 < 4)
                {
                  if (!v24 || v25 > ((0x3010200u >> (8 * v27)) & 3))
                    *v4 = v22;
                  break;
                }
              }
            }
            else
            {
              sub_22E8FCA40(v2, *(_DWORD *)(v14 + 4), 0x1384u, 0, (uint64_t)v40);
              v20 = sub_22E8901B8((uint64_t)v40, (uint64_t *)&v41);
              v21 = sub_22E8901B8(v20, v4);
              v39 = (*(_DWORD *)(a2 + 8) & 7) == 2;
              sub_22E894E38(v21, (unsigned __int8 *)&v39);
              result = (unint64_t)sub_22E903BEC(v40);
            }
            ++v12;
          }
          while (v12 != v13);
        }
      }
    }
  }
  else if (v5 <= 0xF)
  {
    *v4 = *(_QWORD *)(*(_QWORD *)(result + 88) + 16392);
  }
  return result;
}

uint64_t sub_22EC5313C(uint64_t a1, unsigned int a2, unint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;

  v14 = sub_22EF579A8(*(_QWORD *)(a1 + 88), a3, a2);
  v15 = *v14;
  if ((*v14 & 0xFLL) == 0 && v15 && *(_BYTE *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
    *((_DWORD *)v14 + 2) = a4;
  v16 = sub_22EFBB670(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a2, a2, a5, a3, (uint64_t)v14, 4);
  v17 = *(_DWORD *)(v16 + 96);
  *(_DWORD *)(v16 + 96) = v17 | 0x10000;
  *(_DWORD *)(v16 + 28) |= 0x800u;
  *(_BYTE *)(v16 + 96) = v17 & 0x9F | (32 * (a6 & 3));
  sub_22EFC9100(v16, *(_QWORD *)(a1 + 88));
  sub_22EFBC9E4(v16, a7);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
  {
    v18 = sub_22E904A34(a1, 0);
    v19 = *(_DWORD *)(v18 + 1528);
    if (v19 >= *(_DWORD *)(v18 + 1532))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(v18 + 1528);
    }
    *(_QWORD *)(*(_QWORD *)(v18 + 1520) + 8 * v19) = v16;
    ++*(_DWORD *)(v18 + 1528);
  }
  return v16;
}

void sub_22EC53290(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unint64_t *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  char v104;
  unsigned int *v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  BOOL v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  char v145;
  char v146;
  uint64_t v147;
  unsigned int *v148;
  int v149;
  _QWORD *v150;
  uint64_t (**v151)();
  int v152;
  char v153;
  uint64_t v154;
  _BYTE v155[11];
  __int128 v156;
  uint64_t v157;
  unsigned int v158[24];
  _BYTE v159[96];
  unsigned int v160[24];
  unsigned int v161[24];
  _BYTE *v162;
  void *v163;
  uint64_t v164;
  int v165;
  _BYTE v166[64];
  unsigned int v167[24];
  unsigned __int8 v168[32];
  uint64_t v169[4];
  uint64_t v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  uint64_t v174;
  _BYTE v175[48];
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  int v186;
  char v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD v190[11];

  v190[8] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E904A34(a1, 0);
  v14 = a4;
  if (*(_DWORD *)(v8 + 1424))
    v14 = **(_QWORD **)(a4 + 64);
  v15 = *(_QWORD *)(v14 + 64) != 0;
  v188 = v190;
  v189 = 0x800000000;
  v16 = *(unsigned int *)(a3 + 120);
  v147 = v8;
  v148 = a2;
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = *(int **)(a3 + 112);
    v146 = v15;
    while (1)
    {
      v20 = *v18;
      v18 += 30;
      v19 = v20;
      if (v20 != 6)
        break;
      if (v16 == ++v17)
      {
        LODWORD(v17) = 0;
        goto LABEL_13;
      }
    }
    if (((1 << v19) & 0xB7) != 0)
      LODWORD(v17) = 0;
LABEL_13:
    v24 = *(_QWORD *)(a3 + 112) + 120 * v17;
    v25 = (unsigned __int16 *)(v24 + 32);
    if (!*(_DWORD *)(v24 + 60))
    {
      sub_22F2E4F2C((uint64_t)v25);
      *(_QWORD *)v26 |= 0x2000000uLL;
      *(_DWORD *)(v26 + 144) = 0;
    }
    v27 = sub_22EE8156C(a1, a3, a4, v9, v10, v11, v12, v13);
    v28 = *(_DWORD *)(a3 + 76);
    v29 = *v25;
    v149 = (v29 >> 9) & 1;
    v30 = *((_DWORD *)v25 + 4);
    if (v30)
    {
      if (v30 != 1
        || (v29 & 2) != 0
        || (v31 = (_QWORD *)*((_QWORD *)v25 + 5), *v31)
        || (v32 = v31[2]) == 0
        || ((v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v34 = (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 86507531)
          : (v34 = 0),
            !v34))
      {
        if (HIDWORD(v189) >= v30
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(), (v30 = *((_DWORD *)v25 + 4)) != 0))
        {
          v51 = v30;
          v52 = v189;
          v53 = 16;
          do
          {
            v54 = *(_QWORD *)(*((_QWORD *)v25 + 5) + v53);
            if (v52 >= HIDWORD(v189))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v52 = v189;
            }
            v188[v52] = v54;
            v52 = v189 + 1;
            LODWORD(v189) = v189 + 1;
            v53 += 32;
            --v51;
          }
          while (v51);
        }
      }
    }
    a2 = v148;
    if ((*(_BYTE *)(*(_QWORD *)(*v27 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
      sub_22EE67290(a1, *v148, v27, 2);
    v15 = v146;
  }
  else
  {
    LOWORD(v173) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15064) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15064), 0);
    *((_QWORD *)&v173 + 1) = 0;
    LODWORD(v174) = 0;
    v176 = 0;
    memset(v175, 0, sizeof(v175));
    BYTE2(v173) = BYTE2(v173) & 0xFC | 2;
    DWORD1(v173) = 1;
    v21 = *(_QWORD *)(a1 + 72);
    v22 = *(_QWORD *)(a1 + 88);
    if ((*(_DWORD *)(v21 + 52) & 0x40000000) != 0)
    {
      if ((*(_QWORD *)(*(_QWORD *)(v22 + 2000) + 64) & 0x100000000) != 0)
        v143 = 10241;
      else
        v143 = 8193;
      DWORD1(v173) = v143;
    }
    if ((*(_BYTE *)(v21 + 1) & 4) != 0)
    {
      v23 = sub_22EF67C08(v22);
      v22 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v23 = *(_QWORD *)(v22 + 16832);
    }
    v35 = sub_22EF63D8C(v22, v23, 0, 0, &v173, 0);
    v27 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v35, 0);
    v149 = 0;
    v28 = a2[1];
  }
  v36 = sub_22F3365E8(a1, *(_QWORD *)a2, (uint64_t)v27, v15, a2[3]);
  v37 = (_QWORD *)sub_22F3366E8(a1, v36, *(_QWORD *)a2, v27, v28, v188, v189, (**(_QWORD **)a3 >> 37) & 3, *(_QWORD *)(a3 + 1136));
  if ((_DWORD)v16)
    sub_22EAA82D0((_QWORD *)a1, v37);
  v38 = *(_DWORD *)(a1 + 1688);
  if (v38)
    sub_22E91066C(a1, (uint64_t)v37, v38);
  v39 = sub_22EA223D4(a1, (uint64_t)v37, 1);
  if (v39)
    sub_22EFCA95C((uint64_t)v37, v39);
  sub_22EA7E768((_QWORD *)a1, a4, (uint64_t)v37, a3);
  v40 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(v40 + 68) & 0x20) != 0)
  {
    sub_22F31C994(a1, (uint64_t)v37);
    v40 = *(_QWORD *)(a1 + 72);
  }
  if (*(_DWORD *)(v40 + 72))
    sub_22EC985FC(a1, (uint64_t)v37);
  v41 = (_DWORD)v16 != 0;
  v168[0] = 0;
  v168[24] = 0;
  sub_22EC52964(a1, (_QWORD *)v36, (uint64_t)v37, v168);
  v42 = v37 + 9;
  if (!v37)
    v42 = 0;
  *(_QWORD *)(a1 + 216) = v42;
  *(_QWORD *)(a4 + 360) = v42;
  v43 = *(_QWORD *)a2;
  v44 = a2[3];
  v45 = v148[2];
  v46 = sub_22E8FB7BC((uint64_t)v37);
  v47 = v45;
  v48 = v148;
  sub_22EC52B9C(a1, v147, (uint64_t)v37, v43, v44, v47, v41, v149, v46 ^ 1);
  if (v148[3])
  {
    v49 = *(_WORD *)(v36 + 72) & 0x7F;
    v50 = -40;
    if (v49 > 0x46)
    {
      switch(v49)
      {
        case 'S':
          goto LABEL_65;
        case 'G':
          v50 = -56;
          goto LABEL_65;
        case 'Q':
          goto LABEL_65;
      }
    }
    else
    {
      if (v49 <= 0x18)
      {
        if (v49 == 16)
          goto LABEL_48;
        if (((1 << v49) & 0x1066) != 0)
          goto LABEL_65;
        if (v49 == 24)
        {
LABEL_48:
          v50 = -48;
LABEL_65:
          v55 = *(_QWORD *)(v36 + 64 + v50 + 16);
          v56 = v55 & 0xFFFFFFFFFFFFFFF8;
          if ((v55 & 4) != 0)
            v56 = *(_QWORD *)v56;
          v57 = *(_WORD *)(v56 + 8) & 0x7F;
          v58 = v57 > 0x18 || ((1 << v57) & 0x1000006) == 0;
          if (v58 && v57 - 52 >= 6 && (sub_22EBBB18C(a1) < 0x10 || sub_22EBBBBEC(a1, 0, 1, 0, 0, 0)))
          {
            sub_22E8FCA40((_QWORD *)a1, v148[2], 0xBC0u, 0, (uint64_t)v167);
            sub_22E903BEC(v167);
          }
          goto LABEL_71;
        }
      }
      if (v49 == 70)
      {
LABEL_63:
        v50 = -64;
        goto LABEL_65;
      }
    }
    if (v49 - 52 < 6)
    {
      v50 = -72;
      goto LABEL_65;
    }
    if (v49 - 33 < 5)
      goto LABEL_63;
    goto LABEL_48;
  }
LABEL_71:
  v150 = v37;
  v162 = v166;
  v163 = v166;
  v164 = 8;
  v165 = 0;
  v59 = *((_QWORD *)v148 + 2);
  v60 = v148[6];
  if ((_DWORD)v60)
  {
    v61 = 0;
    v145 = 0;
    if (v148[3])
      v62 = v148 + 2;
    else
      v62 = v148;
    v63 = *v62;
    v64 = v147;
    v65 = 48 * v60;
    v144 = (uint64_t *)(v147 + 1232);
    while (1)
    {
      v66 = *(_DWORD *)(v59 + v61);
      if (v66 > 1)
        break;
      if (v66 == 1)
      {
        if ((**(_QWORD **)(a1 + 72) & 0x800) != 0)
          v67 = 6400;
        else
          v67 = 5350;
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), v67, 0, (uint64_t)v161);
        sub_22E903BEC(v161);
      }
      if (*(_DWORD *)(v64 + 1256))
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), 0xBC2u, 0, (uint64_t)&v173);
        v98 = sub_22F2F30F4((uint64_t)&v173, (uint64_t)"'this'");
        LODWORD(v151) = *(_DWORD *)(*(_QWORD *)(v64 + 1264) + 32 * (*(_DWORD *)(v64 + 1256) - 1) + 8);
        HIDWORD(v151) = (_DWORD)v151;
        v99 = sub_22E8906A0(v98, (uint64_t *)&v151);
        v100 = sub_22F141A3C(v63, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
        v101 = *(unsigned int *)(v59 + v61 + 4);
        BYTE4(v169[2]) = 0;
        *(uint64_t *)((char *)&v169[1] + 4) = 0;
        v170 = 0;
        v171 = 0;
        v169[3] = 0;
        v172 = 0;
        v169[0] = v100 | (unint64_t)(v101 << 32);
        LOBYTE(v169[1]) = 1;
        sub_22E890748(v99, v169);
        if (SHIBYTE(v171) < 0)
          operator delete((void *)v169[3]);
        sub_22E903BEC((unsigned int *)&v173);
        goto LABEL_178;
      }
      if (v48[3] == 1 && *(_DWORD *)(v59 + v61) != 1)
      {
        if ((**(_QWORD **)(a1 + 72) & 0x1000) != 0)
          v68 = 6413;
        else
          v68 = 5228;
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), v68, 0, (uint64_t)v160);
        sub_22E903BEC(v160);
      }
      v69 = sub_22EBBB18C(a1);
      if (v69 <= 0xF)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), 0x1303u, 0, (uint64_t)&v173);
        LOBYTE(v169[0]) = 1;
        sub_22E894E38((uint64_t)&v173, (unsigned __int8 *)v169);
        goto LABEL_91;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 123) & 0x40) != 0)
      {
        if (*(_DWORD *)(v59 + v61) != 1)
          goto LABEL_178;
        v91 = *(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v91 & 8) == 0 || (*(_BYTE *)((v91 & 0xFFFFFFFFFFFFFFF0) + 0x19) & 6) == 0)
          goto LABEL_178;
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), 0xEF9u, 0, (uint64_t)v159);
        v70 = (unsigned int *)v159;
        goto LABEL_92;
      }
      v83 = v59 + v61;
      sub_22EBBBBEC(a1, *(_DWORD *)(v59 + v61 + 4), 1, 1, 0, *(_DWORD *)(v59 + v61) == 1);
      v84 = *(_DWORD *)(v64 + 1272);
      if (v84)
        goto LABEL_113;
LABEL_178:
      v63 = *(unsigned int *)(v59 + v61 + 4);
      v61 += 48;
      if (v65 == v61)
      {
        v59 = *((_QWORD *)v48 + 2);
        v121 = v48[6];
        v122 = v145;
        goto LABEL_195;
      }
    }
    v71 = v59 + v61;
    v72 = *(_QWORD *)(v59 + v61 + 24);
    if ((v72 & 1) != 0)
      goto LABEL_178;
    if (v72 >= 2)
    {
      v73 = v59 + v61;
      if ((**(_QWORD **)(a1 + 72) & 0x400) != 0)
        v74 = 6393;
      else
        v74 = 5270;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), v74, 0, (uint64_t)v158);
      sub_22E903BEC(v158);
      v75 = *(_QWORD *)(v73 + 32);
      if (v75 < 0x10)
        goto LABEL_168;
      v76 = *(_QWORD *)(v71 + 24);
      v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(_BYTE *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x20) != 0)
      {
        v78 = *(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0);
        if (!v78 || *(_BYTE *)(v78 + 16) != 36)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
            goto LABEL_105;
          v79 = sub_22F10CF48(v78);
          v76 = *(_QWORD *)(v71 + 24);
          if (!v79)
          {
            v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
LABEL_105:
            sub_22EE67384(a1, v77, 11);
            v76 = *(_QWORD *)(v71 + 24);
          }
        }
      }
      v80 = *(_DWORD *)(v59 + v61 + 20);
      if (v80 == 3)
        v81 = 2;
      else
        v81 = v80 == 2;
      v82 = sub_22EC5313C(a1, *(_DWORD *)(v73 + 4), *(_QWORD *)(v73 + 32), *(_DWORD *)(v59 + v61 + 16), *(_QWORD *)(v59 + v61 + 8), v81, v76 & 0xFFFFFFFFFFFFFFFELL);
      if (v82)
        sub_22EA0483C(a1, v82, (uint64_t *)a4, 0);
      goto LABEL_158;
    }
    v85 = v48[3];
    if (v66 == 3 && v85 == 2)
    {
      v92 = v59 + v61;
      v93 = *(_DWORD *)(v59 + v61 + 4);
      v94 = (_QWORD *)a1;
      v95 = 4655;
    }
    else
    {
      if (v66 != 2 || v85 != 1)
      {
        v88 = *(_DWORD *)(v59 + v61 + 4);
        *(_QWORD *)&v156 = *(_QWORD *)(v59 + v61 + 8);
        DWORD2(v156) = v88;
        sub_22EFC6D6C((uint64_t)&v157, v156);
        *(_QWORD *)&v173 = 0;
        *((_QWORD *)&v173 + 1) = v175;
        v174 = 0x800000000;
        v178 = 0;
        v179 = 0;
        v177 = 0;
        v180 = (_QWORD *)a1;
        v181 = v156;
        v182 = v157;
        v183 = 0;
        v184 = 0;
        v185 = 0;
        v186 = 257;
        v187 = 0;
        sub_22EC56024((uint64_t)&v173);
        sub_22EC63520(a1, (uint64_t)&v173, (_QWORD *)a4, 0, 0);
        v89 = v173;
        if ((_DWORD)v173 == 5)
          goto LABEL_123;
        if ((_DWORD)v174)
        {
          if (v89 != 2)
            goto LABEL_147;
LABEL_140:
          v82 = **((_QWORD **)&v173 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          v103 = *(_DWORD *)(v82 + 28) & 0x7F;
          if (v103 <= 0x2F && ((1 << v103) & 0xC00000060000) != 0)
          {
            v82 = sub_22EFBAEA4(**((_QWORD **)&v173 + 1) & 0xFFFFFFFFFFFFFFFCLL);
            v103 = *(_DWORD *)(v82 + 28) & 0x7F;
          }
          if (v103 - 60 <= 6)
          {
            v90 = 0;
            if ((sub_22EB17F48(a1, (_DWORD *)v82, (unsigned int *)(v59 + 4 + v61), 1, 0, 0, 0, 0) & 1) != 0)
              goto LABEL_149;
          }
          else
          {
LABEL_147:
            v82 = 0;
          }
          v90 = 1;
        }
        else
        {
          memset(v169, 0, sizeof(v169));
          v153 = 1;
          v152 = 16843009;
          v154 = 0;
          memset(v155, 0, sizeof(v155));
          v151 = &off_24FAB8848;
          v102 = sub_22EB22808(a1, a4, (uint64_t)v169, (uint64_t)&v173, (uint64_t)&v151, 0, 0, 0, 0);
          if (HIDWORD(v169[3]))
            free((void *)v169[2]);
          if ((v102 & 1) == 0)
          {
            v89 = v173;
            goto LABEL_140;
          }
LABEL_123:
          v82 = 0;
          v90 = 0;
        }
LABEL_149:
        if (BYTE1(v186))
        {
          if ((_DWORD)v173 == 5)
          {
            sub_22EC64D18(v180, (uint64_t)&v173);
          }
          else if (v178 && (*(_DWORD *)(v180[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v180, (uint64_t)&v173);
          }
        }
        if (v177)
        {
          v120 = sub_22EC6CBD0(v177);
          MEMORY[0x2348A0E9C](v120, 0x10E0C409F09D3C3);
        }
        if (*((_BYTE **)&v173 + 1) == v175)
        {
          if (!v90)
            goto LABEL_176;
        }
        else
        {
          free(*((void **)&v173 + 1));
          if (!v90)
          {
LABEL_176:
            v64 = v147;
LABEL_177:
            v48 = v148;
            goto LABEL_178;
          }
        }
LABEL_158:
        sub_22E3BA850((uint64_t)&v162, *(const void **)(v59 + v61 + 8));
        if (!v104)
        {
          if (v82)
          {
            *(_QWORD *)&v173 = v82;
            v169[0] = 0;
            if (sub_22F246C54(v144, &v173, v169))
            {
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + v61 + 4), 0xBC2u, 0, (uint64_t)&v173);
              v110 = sub_22E8BAE44((uint64_t)&v173, (uint64_t *)(v59 + v61 + 8));
              v169[0] = v82;
              v64 = v147;
              LODWORD(v151) = *(_DWORD *)(*(_QWORD *)(v147 + 1264)
                                        + 32 * (*((_DWORD *)sub_22F283EC0(v144, v169) + 2) - 1)
                                        + 8);
              HIDWORD(v151) = (_DWORD)v151;
              v111 = sub_22E8906A0(v110, (uint64_t *)&v151);
              v112 = sub_22F141A3C(v63, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
              v113 = *(unsigned int *)(v59 + v61 + 4);
              BYTE4(v169[2]) = 0;
              *(uint64_t *)((char *)&v169[1] + 4) = 0;
              v170 = 0;
              v171 = 0;
              v169[3] = 0;
              v172 = 0;
              v169[0] = v112 | (unint64_t)(v113 << 32);
              LOBYTE(v169[1]) = 1;
              sub_22E890748(v111, v169);
              if (SHIBYTE(v171) < 0)
                operator delete((void *)v169[3]);
              sub_22E903BEC((unsigned int *)&v173);
              goto LABEL_177;
            }
          }
          v107 = *(_DWORD *)(v59 + v61 + 4);
          v108 = (_QWORD *)a1;
          v109 = 3010;
LABEL_166:
          sub_22E8FCA40(v108, v107, v109, 0, (uint64_t)&v173);
          sub_22E8BAE44((uint64_t)&v173, (uint64_t *)(v59 + v61 + 8));
          sub_22E903BEC((unsigned int *)&v173);
LABEL_167:
          v64 = v147;
LABEL_168:
          v48 = v148;
          goto LABEL_178;
        }
        if (!v82)
        {
          v107 = *(_DWORD *)(v59 + v61 + 4);
          v108 = (_QWORD *)a1;
          v109 = 3009;
          goto LABEL_166;
        }
        if ((*(_BYTE *)(v82 + 28) & 0x80) != 0)
          goto LABEL_167;
        v105 = (unsigned int *)sub_22E3CB5E0(v82);
        v106 = v59 + v61;
        if ((v105 & 1) == 0)
        {
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v106 + 4), 0xBC3u, 0, (uint64_t)&v173);
          sub_22E8BAE44((uint64_t)&v173, (uint64_t *)(v59 + v61 + 8));
          sub_22E903BEC((unsigned int *)&v173);
          v107 = *(_DWORD *)(v82 + 24);
          v108 = (_QWORD *)a1;
          v109 = 6001;
          goto LABEL_166;
        }
        v114 = *(_DWORD *)(v106 + 16);
        v115 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v82 + 48) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v114)
        {
          v48 = v148;
          if (v115 != 36)
          {
            sub_22E8FCA40((_QWORD *)a1, v114, 0x1191u, 0, (uint64_t)&v173);
            v116 = *(_QWORD *)(v71 + 24);
            if (v116 < 2)
            {
              LODWORD(v169[0]) = *(_DWORD *)(v59 + v61 + 4);
              HIDWORD(v169[0]) = v169[0];
            }
            else
            {
              sub_22F0D4E74(v116 & 0xFFFFFFFFFFFFFFFELL);
              v169[0] = v117;
            }
            sub_22E8906A0((uint64_t)&v173, v169);
            v105 = sub_22E903BEC((unsigned int *)&v173);
            v114 = 0;
          }
        }
        else
        {
          v114 = 0;
          v145 |= v115 == 36;
          v48 = v148;
        }
        if (*(_QWORD *)(v71 + 24) < 2uLL)
        {
          if (*(_DWORD *)(v59 + v61) == 3)
            v119 = 2;
          else
            v119 = 1;
          sub_22F32FC30(a1, v82, *(_DWORD *)(v59 + v61 + 4), v119, v114);
          v118 = v147;
        }
        else
        {
          v118 = v147;
          sub_22F336D2C((uint64_t)v105, v147, v82);
        }
        v84 = *(_DWORD *)(v118 + 1272);
        v64 = v118;
        if (!v84)
          goto LABEL_178;
        v83 = v59 + v61;
LABEL_113:
        LODWORD(v173) = v84 - 1;
        *(_QWORD *)(sub_22F33774C(v147 + 1736, (int *)&v173) + 1) = *(_QWORD *)(v83 + 40);
        goto LABEL_178;
      }
      v92 = v59 + v61;
      v93 = *(_DWORD *)(v59 + v61 + 4);
      v94 = (_QWORD *)a1;
      v95 = 3115;
    }
    sub_22E8FCA40(v94, v93, v95, 0, (uint64_t)&v173);
    v96 = sub_22F141A3C(v63, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    v97 = *(unsigned int *)(v92 + 4);
    BYTE4(v169[2]) = 0;
    *(uint64_t *)((char *)&v169[1] + 4) = 0;
    v170 = 0;
    v171 = 0;
    v169[3] = 0;
    v172 = 0;
    v169[0] = v96 | (unint64_t)(v97 << 32);
    LOBYTE(v169[1]) = 1;
    sub_22E890748((uint64_t)&v173, v169);
    if (SHIBYTE(v171) < 0)
      operator delete((void *)v169[3]);
LABEL_91:
    v70 = (unsigned int *)&v173;
LABEL_92:
    sub_22E903BEC(v70);
    goto LABEL_178;
  }
  v121 = 0;
  v122 = 0;
  v64 = v147;
LABEL_195:
  *(_DWORD *)(v64 + 1508) = *(_DWORD *)(v64 + 1272);
  *(_BYTE *)(v64 + 1516) |= v122 & 1;
  v123 = *(_QWORD *)(v150[6] & 0xFFFFFFFFFFFFFFF0);
  if (v123)
    v124 = *(_BYTE *)(v123 + 16) == 26;
  else
    v124 = 0;
  if (v124
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v123 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v123 = sub_22F10CF48(v123)) != 0)
  {
    v125 = *(_QWORD *)(v123 + 16);
    if ((v125 & 0x3FFFC000000000) != 0)
    {
      v126 = 0;
      v127 = v59 + 48 * v121;
      v128 = (unsigned __int16)(v125 >> 38);
      do
      {
        if (a4)
        {
          v129 = *(_QWORD *)(v150[15] + 8 * v126);
          if (*(_QWORD *)(v129 + 40) >= 8uLL && (*(_QWORD *)(v129 + 40) & 7) == 0)
          {
            if (v121)
            {
              v131 = 0;
              v132 = v59;
LABEL_210:
              v133 = *(_QWORD *)(v129 + 40);
              if ((v133 & 7) != 0)
                v134 = 0;
              else
                v134 = v133 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                if (*(_QWORD *)(v132 + 8) == v134)
                {
                  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v129 + 24), 0x119Eu, 0, (uint64_t)&v173);
                  sub_22E903BEC((unsigned int *)&v173);
                  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v132 + 4), 0x1817u, 0, (uint64_t)v169);
                  v135 = sub_22E8BAE44((uint64_t)v169, (uint64_t *)(v132 + 8));
                  v131 = 1;
                  LOBYTE(v151) = 1;
                  sub_22E894E38(v135, (unsigned __int8 *)&v151);
                  sub_22E903BEC((unsigned int *)v169);
                  v132 += 48;
                  if (v132 != v127)
                    goto LABEL_210;
                  goto LABEL_220;
                }
                v132 += 48;
              }
              while (v132 != v127);
              if ((v131 & 1) != 0)
                goto LABEL_220;
            }
            sub_22EA2018C(a1, a4, v129);
LABEL_220:
            sub_22EA0483C(a1, v129, (uint64_t *)a4, 1);
          }
        }
        ++v126;
      }
      while (v126 != v128);
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(v147 + 1488) + 80) & 0xC0000000) == 0x80000000)
    v136 = 5;
  else
    v136 = 6;
  LODWORD(v151) = v136;
  *(_QWORD *)&v173 = 0;
  LODWORD(v156) = 3;
  v169[0] = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v151, (int *)v169, (__int16 *)(a1 + 1693), (uint64_t *)&v173, (int *)&v156);
  v137 = *(unsigned int *)(a1 + 3696);
  v138 = v137 - 2;
  v139 = *(_QWORD *)(a1 + 3688);
  v140 = *(_DWORD *)(v139 + 576 * (v137 - 2));
  if (v140 == 5)
  {
    *(_BYTE *)(v139 + 576 * v137 - 4) = *(_BYTE *)(v139 + 576 * v138 + 572);
    v141 = 1;
  }
  else if (v140 == 2)
  {
    *(_BYTE *)(v139 + 576 * v137 - 4) = 1;
    v141 = *(_BYTE *)(v139 + 576 * v138 + 573) != 0;
  }
  else
  {
    v141 = 0;
    *(_BYTE *)(v139 + 576 * v137 - 4) = 0;
  }
  v142 = v139 + 576 * v137;
  *(_BYTE *)(v142 - 3) = v141;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v142 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v142 - 496));
  }
  if (v163 != v162)
    free(v163);
  if (v188 != v190)
    free(v188);
}

void sub_22EC54548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X9 }
}

uint64_t sub_22EC545E4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  int v58;
  __int16 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  unsigned int v87;
  unsigned int *v88;
  int v89;
  unint64_t v90;
  int v91;
  int v92;
  int v93;
  __int16 v94;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t *v109;
  unsigned int v110;
  unsigned int v111;
  char *v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  __int128 v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;

  v7 = 1;
  v8 = *(_QWORD *)(v3 + 1488);
  v100 = *(_QWORD *)(v3 + 1496);
  v105 = *(_QWORD *)(v3 + 1480);
  v9 = *(_QWORD *)(v105 + 128);
  if (v9 && ((*(unsigned __int16 *)(v9 + 8) | (*(unsigned __int8 *)(v9 + 10) << 16)) & 0x100000) != 0)
    v96 = (*(unsigned __int8 *)(v9 + 104) >> 2) & 1;
  else
    LOBYTE(v96) = 0;
  v92 = *(unsigned __int8 *)(v3 + 1408);
  v93 = *(unsigned __int8 *)(v3 + 1513);
  v94 = *(_WORD *)(v3 + 1514);
  v91 = *(unsigned __int8 *)(v3 + 1516);
  sub_22EFC80C4(v8, v105 + 64);
  v10 = (*(_QWORD *)(v8 + 144) & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_QWORD *)(v8 + 144) & 6) == 0;
  v97 = v8;
  if (v10)
    v11 = *(_QWORD *)(v8 + 144) & 0xFFFFFFFFFFFFFFF8;
  else
    v11 = v8;
  sub_22EFC80C4(v11, v105 + 64);
  sub_22EB48E64(v4);
  v108 = 0;
  v102 = *(_DWORD *)(v3 + 1272);
  if (!v102)
    goto LABEL_84;
  v12 = 0;
  v107 = v106;
  v101 = v3 + 1736;
  v103 = v3;
  v104 = v4;
  do
  {
    v13 = v12;
    v14 = *(_QWORD *)(v3 + 1264);
    v15 = v14 + 32 * v12;
    v16 = (char *)(v15 + 24);
    if ((*(_BYTE *)(v15 + 24) & 0x40) != 0)
    {
      v51 = 1;
      goto LABEL_79;
    }
    v17 = *(_DWORD *)(v3 + 1508);
    v18 = *(_QWORD *)(sub_22F33774C(v101, &v108) + 1);
    v19 = 1;
    if ((sub_22EFC7ADC(*(_QWORD *)(v4 + 216)) & 1) != 0 || v13 >= v17 || (*v16 & 0x10) != 0)
      goto LABEL_52;
    v20 = v96 ^ 1;
    if ((*v16 & 0x20) == 0)
      v20 = 1;
    if ((v20 & 1) == 0 && (sub_22F308578((uint64_t *)v15) & 1) != 0)
      goto LABEL_52;
    v21 = 0;
    v22 = 0;
    if ((_DWORD)v18 && HIDWORD(v18))
    {
      if (v7 & 1 | ((_DWORD)v13 + 1 == *(_DWORD *)(v103 + 1508)))
      {
        v23 = sub_22F141A3C(v107, 0, *(_QWORD **)(v104 + 112), *(_DWORD **)(v104 + 72));
        v22 = v18 & 0xFFFFFFFF00000000;
        v21 = v23;
      }
      else
      {
        v22 = sub_22F141A3C(HIDWORD(v18), 0, *(_QWORD **)(v104 + 112), *(_DWORD **)(v104 + 72)) << 32;
        v21 = v18;
      }
    }
    v90 = v22;
    if (sub_22F308578((uint64_t *)v15))
    {
      v24 = sub_22EFBC5B4(*(_QWORD *)v15);
      if (v24)
      {
        if ((sub_22F0005B0(v24, *(_QWORD *)(v104 + 88), 1, v25, v26, v27, v28, v29) & 1) != 0)
          goto LABEL_52;
      }
    }
    if ((*v16 & 3) != 0)
      goto LABEL_44;
    if ((*v16 & 8) != 0)
    {
      v31 = sub_22EBBB18C(v104);
      v30 = sub_22F10ACF8(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0));
      if ((v30 & 4) != 0)
        goto LABEL_52;
    }
    else
    {
      v30 = *(_QWORD *)(v14 + 32 * v13 + 16);
      if ((v30 & 4) != 0)
        goto LABEL_52;
    }
    v32 = v30 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_BYTE *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
      goto LABEL_52;
    while (1)
    {
      v33 = *(_QWORD *)v32;
      v34 = (*(_DWORD *)(*(_QWORD *)v32 + 16) & 0xFE) - 6;
      if (v33)
        v35 = v34 > 0xFFFFFFFB;
      else
        v35 = 0;
      if (v35)
      {
        v36 = v33;
        goto LABEL_42;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        break;
      v36 = sub_22F10CF48(v33);
      if (!v36)
        break;
LABEL_42:
      v32 = *(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0;
    }
    v37 = sub_22F10C2A4(v33);
    if (v37)
    {
      v50 = v37;
      if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 35 <= 2)
      {
        if ((*(_BYTE *)(v37 + 74) & 1) == 0
          || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v37 + 104) + 96), *(_QWORD *)(v37 + 104)),
              (**(_QWORD **)(v50 + 128) & 0x10000000000) == 0)
          || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104)),
              (**(_QWORD **)(v50 + 128) & 0x100000000000) == 0))
        {
LABEL_45:
          v19 = 1;
          goto LABEL_52;
        }
      }
    }
LABEL_44:
    if ((~*v16 & 3) == 0)
      goto LABEL_45;
    sub_22E8FCA40((_QWORD *)v104, *(_DWORD *)(v14 + 32 * v13 + 8), 0x1BDCu, 0, v5 - 216);
    if ((*v16 & 8) != 0)
    {
      sub_22F2F30F4(v5 - 216, (uint64_t)"'this'");
    }
    else
    {
      v115 = *(_QWORD *)v15;
      sub_22E890024(v5 - 216, (uint64_t *)&v115);
    }
    LOBYTE(v115) = (*v16 & 0x20) != 0;
    sub_22E894E38(v5 - 216, (unsigned __int8 *)&v115);
    BYTE12(v116) = 0;
    *(_QWORD *)((char *)&v116 + 4) = 0;
    v118 = 0;
    v119 = 0;
    v117 = 0;
    v120 = 0;
    v115 = v90 | v21;
    LOBYTE(v116) = 1;
    sub_22E890748(v5 - 216, &v115);
    if (SHIBYTE(v119) < 0)
      operator delete(v117);
    sub_22E903BEC((unsigned int *)(v5 - 216));
    v19 = 0;
LABEL_52:
    v38 = (_DWORD)v18 != 0 && HIDWORD(v18) != 0;
    v39 = v107;
    if (v38)
      v39 = HIDWORD(v18);
    v107 = v39;
    v40 = *v16;
    if ((*v16 & 8) != 0)
    {
      v4 = v104;
      v43 = *(unsigned int *)(v14 + 32 * v13 + 8);
      if ((v40 & 3) != 0)
        v44 = v13 >= v17;
      else
        v44 = (v13 >= v17) | 2;
      v42 = v44 | 4u;
    }
    else
    {
      v41 = v40 & 3;
      v4 = v104;
      if (v41 == 3)
      {
        v42 = v13 >= v17;
        v43 = *(unsigned int *)(v14 + 32 * v13 + 8);
      }
      else
      {
        v43 = *(_QWORD *)(v14 + 32 * v13 + 8);
        if (v41)
          v45 = v13 >= v17;
        else
          v45 = (v13 >= v17) | 2u;
        v42 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8 | v45;
      }
    }
    v46 = sub_22F336FAC();
    sub_22EC552F0(v4, v105, (uint64_t *)v15);
    v47 = v113;
    if (v113 >= (unint64_t)v114)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = v113;
    }
    v48 = (unint64_t *)&v112[16 * v47];
    *v48 = v42;
    v48[1] = v43;
    ++v113;
    v49 = v110;
    if (v110 >= (unint64_t)v111)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v49 = v110;
    }
    v3 = v103;
    v109[v49] = v46 & 0xFFFFFFFFFFFFFFFELL;
    ++v110;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 68) & 0x20) != 0)
      sub_22E9FFABC(v4, v97, v15);
    v7 |= v38 & v19;
    v12 = v13 + 1;
    v108 = v13 + 1;
  }
  while ((_DWORD)v13 + 1 != v102);
LABEL_84:
  sub_22F3B1B24(v105, *(_QWORD *)(v4 + 88), v112, v113);
  v53 = *(_QWORD *)(v4 + 72);
  if ((*(_QWORD *)(v53 + 20) & 0x20000000000) != 0)
  {
    v10 = (*(_BYTE *)(v53 + 1) & 0x40) == 0;
    v54 = v96;
    if (v10)
      v54 = 1;
    if ((v54 & 1) == 0)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v97 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v55)
        v56 = *(_BYTE *)(v55 + 16) == 26;
      else
        v56 = 0;
      if (!v56)
        v55 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v97 + 48) & 0xFFFFFFFFFFFFFFF0));
      v57 = sub_22EF72F20(*(_QWORD *)(v4 + 88), (*(_QWORD *)(v55 + 16) >> 59) & 1, 0, 0);
      v58 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 88) + 15064) + 24))(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 15064), (*(_QWORD *)(v55 + 16) >> 59) & 1);
      if (v58 != v57 && ((*(_DWORD *)(v55 + 16) >> 19) & 0x1F) == v58)
        v60 = v57;
      else
        v60 = (*(_DWORD *)(v55 + 16) >> 19) & 0x1F;
      v61 = sub_22F336F24(v4, (_QWORD *)v55, v60);
      v62 = sub_22F36A4F8(*(_QWORD *)(v4 + 88), v61);
      *(_WORD *)(v5 - 216) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 88) + 15064)
                                                                       + 24))(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 15064), 0);
      *(_BYTE *)(v5 - 214) = 0;
      *(_QWORD *)(v5 - 208) = 0;
      v63 = v5 - 216;
      *(_OWORD *)(v63 + 24) = 0u;
      *(_OWORD *)(v63 + 40) = 0u;
      *(_OWORD *)(v63 + 56) = 0u;
      *(_DWORD *)(v5 - 200) = 0;
      *(_DWORD *)(v5 - 144) = 0;
      *(_DWORD *)(v5 - 212) = 1;
      v64 = sub_22EF63D8C(*(_QWORD *)(v4 + 88), v62, 0, 0, (__int128 *)(v5 - 216), 0);
      v65 = sub_22EFC6C44((_QWORD *)(*(_QWORD *)(v4 + 88) + 15224), *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFF0) + 8) | v62 & 7);
      v66 = sub_22EF579A8(*(_QWORD *)(v4 + 88), v62, v100);
      v67 = *(_QWORD *)(v4 + 88);
      v115 = v65;
      LODWORD(v116) = v100;
      *((_QWORD *)&v116 + 1) = v66;
      v68 = sub_22EF579A8(v67, v64, v100);
      v69 = (*(_DWORD *)(v4 + 56) & 0xFC) != 4;
      v70 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v97 + 64))(v97);
      sub_22F0D60E4(v70);
      v72 = sub_22EFD88BC(v67, v105, v100, (uint64_t *)&v115, v64, (uint64_t)v68, v69, 1, 0, 0, v89, v71, 0);
      *(_DWORD *)(v72 + 28) = *(_DWORD *)(v72 + 28) & 0xFFFF9DFF | 0x200;
      sub_22EFCCFA0(v105 + 64, v72);
    }
  }
  v73 = sub_22EFC3B90(v105);
  *(_QWORD *)(v5 - 216) = v5 - 200;
  *(_QWORD *)(v5 - 208) = v6;
  sub_22F271D38(v5 - 216, v73, 0);
  v74 = *(_DWORD *)(v105 + 24);
  v75 = *(uint64_t **)(v5 - 216);
  v76 = *(unsigned int *)(v5 - 208);
  v115 = 0;
  *(_QWORD *)&v116 = 0;
  sub_22EA39224(v4, 0, v74, v105, v75, v76, 0, 0, (uint64_t)&v115);
  sub_22E80F94C((uint64_t *)&v116);
  sub_22EAB3AC0(v4, 0, (uint64_t *)v105);
  v78 = *(void **)(v5 - 216);
  if (v78 != (void *)(v5 - 200))
    free(v78);
  *(_BYTE *)(v4 + 1693) |= v94 & 1;
  *(_BYTE *)(v4 + 1694) |= HIBYTE(v94) & 1;
  v79 = sub_22F3C6258(*(_QWORD *)(v4 + 88), v105, v100, 2, v106, v93 != 0, v92 == 0, v77, v109, v110, 0, a3, 0, v91 != 0);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 8) != 0
    && (*(_BYTE *)(v97 + 28) & 0x80) == 0
    && (*(_BYTE *)(v97 + 83) & 0xC0) == 0
    && *(_BYTE *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v97 + 64))(v97) != 11)
  {
    v80 = *(_QWORD *)(v105 + 16);
    v81 = (_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF8);
    if ((v80 & 4) != 0)
      v81 = (_QWORD *)*v81;
    if ((sub_22EFC7ADC((unint64_t)v81) & 1) == 0)
    {
      v82 = sub_22EAA84E0((_QWORD *)v4, v97, 1);
      v83 = 0x40000000;
      if (!v82)
        v83 = 0;
      *(_QWORD *)(v97 + 80) = *(_QWORD *)(v97 + 80) & 0xFFFFFFFF3FFFFFFFLL | v83;
    }
  }
  sub_22EA1FF30((unsigned int *)v4, v3);
  if ((sub_22EFC7ADC(*(_QWORD *)(v4 + 216)) & 1) == 0)
  {
    v84 = *(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696);
    v85 = *(_DWORD *)(v84 - 576);
    if (v85 <= 5 && v85 != 2)
    {
      v86 = (_QWORD *)(v84 - 448);
      v87 = *(_DWORD *)(v84 - 440);
      v88 = (unsigned int *)(v84 - 440);
      if (v87 >= *(_DWORD *)(v84 - 436))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v87 = *v88;
      }
      *(_QWORD *)(*v86 + 8 * v87) = v79;
      ++*v88;
    }
  }
  v51 = sub_22EBCC6C0(v4, v79);
LABEL_79:
  if (v109 != v98)
    free(v109);
  if (v112 != v99)
    free(v112);
  return v51;
}

uint64_t sub_22EC552F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v15;
  int v16;

  v6 = *((_DWORD *)a3 + 2);
  v7 = a3[2];
  if ((a3[3] & 8) != 0)
    goto LABEL_8;
  if ((a3[3] & 3) == 3)
    goto LABEL_8;
  v8 = *a3;
  if ((*(_DWORD *)(*a3 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(v8 + 98) & 1) == 0)
    goto LABEL_8;
  v9 = *(_QWORD *)(v8 + 56);
  v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if ((v9 & 4) != 0)
    v10 = *(_QWORD *)(v10 + 32);
  if (!v10)
LABEL_8:
    v10 = (unint64_t)sub_22EF579A8(*(_QWORD *)(a1 + 88), a3[2], *((_DWORD *)a3 + 2));
  if (a2)
    v11 = a2 + 64;
  else
    v11 = 0;
  v12 = sub_22EFC7430(80, *(_QWORD *)(a1 + 88), v11, 0);
  v13 = sub_22EA41AB8(v12, 49, v11, v6);
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = v7;
  *(_QWORD *)(v13 + 56) = v10 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)v13 = &off_24FAC2F90;
  *(_DWORD *)(v13 + 64) = v6;
  *(_DWORD *)(v13 + 68) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v16 = 3364;
    v15 = &unk_24FAB79A8;
    if (sub_22EE8B0B0(a1, v6, v7)
      || (v15 = 0, sub_22F1110EC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&v15), v15)
      && (v15[28] & 0x80) != 0)
    {
      sub_22EFC77E8(a2, 1);
      sub_22EFC77E8(v12, 1);
    }
  }
  *(_DWORD *)(v12 + 28) = *(_DWORD *)(v12 + 28) & 0xFFFF9DFF | 0x4200;
  sub_22EFCCFA0(a2 + 64, v12);
  if ((~*((unsigned __int8 *)a3 + 24) & 3) == 0)
    *(_QWORD *)(v12 + 72) = *a3 | 3;
  return v12;
}

uint64_t sub_22EC554B0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  while (1)
  {
    while (1)
    {
      do
      {
        v1 = a1;
        v2 = *a1;
        if (v2 > 0xD5)
        {
          if (v2 == 233)
          {
            if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
              goto LABEL_40;
            v2 = *(_DWORD *)a1;
            v4 = a1 + 16;
          }
          else
          {
            if (v2 != 214)
              break;
            v4 = a1 + 24;
          }
        }
        else if (v2 == 155)
        {
          if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
            goto LABEL_40;
          v4 = a1 + 24;
          if (!a1[48])
            v4 = a1 + 32;
          v2 = 155;
        }
        else
        {
          if (v2 != 176)
            break;
          v3 = *((unsigned int *)a1 + 5);
          if ((_DWORD)v3 == -1)
            goto LABEL_40;
          v4 = &a1[8 * v3 + 40];
          v2 = 176;
        }
        a1 = *(unsigned __int8 **)v4;
      }
      while (*(unsigned __int8 **)v4 != v1);
      if (v2 == 161)
      {
        v7 = 0;
        v8 = *((_QWORD *)v1 + 2);
        if (v8 && (*(_DWORD *)(v8 + 28) & 0x7F) == 0x43)
        {
          v9 = *(_QWORD *)(v8 + 16);
          v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
          if ((v9 & 4) != 0)
            v10 = (_QWORD *)*v10;
          if (v10)
            return (uint64_t)(v10 - 8);
          else
            return 0;
        }
        return v7;
      }
      if ((v2 & 0xFE) == 0x70)
      {
        if ((*(_DWORD *)v1 & 0xFC0000) != 0x800000)
          return 0;
        v5 = (unsigned __int8 **)(v1 + 24);
        goto LABEL_28;
      }
      if (v2 != 153)
        break;
      if ((*(_DWORD *)v1 & 0x1FC0000) != 0x780000)
        goto LABEL_40;
      v5 = (unsigned __int8 **)(v1 + 16);
LABEL_28:
      a1 = *v5;
    }
    if (v2 != 224)
      break;
    v6 = (_DWORD *)*((_QWORD *)v1 + 2);
    if (*v6 >= 0x100u)
    {
      a1 = *(unsigned __int8 **)&v6[2 * ((*v6 >> 8) - 1) + 4];
      if (a1)
      {
        if (*a1 - 102 < 0x85)
          continue;
      }
    }
    return 0;
  }
  if (v2 == 103)
  {
    v11 = sub_22EC554B0(*((_QWORD *)v1 + 4));
    if (!v11)
      return 0;
    v7 = v11;
    if (v11 != sub_22EC554B0(*((_QWORD *)v1 + 5)))
      return 0;
  }
  else
  {
LABEL_40:
    v7 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12 && *(_BYTE *)(v12 + 16) == 44)
      return sub_22F114198(*(_QWORD *)(v12 + 24));
  }
  return v7;
}

void sub_22EC556A8(uint64_t a1, __int16 a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int i;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  _QWORD v112[2];
  __int128 v113;
  int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD v121[6];

  v121[4] = *MEMORY[0x24BDAC8D0];
  v3 = sub_22F336F24(*(_QWORD *)a1, **(_QWORD ***)(a1 + 8), a2);
  v4 = *(_QWORD *)a1;
  v5 = **(_QWORD **)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 24);
  v7 = **(_QWORD ***)(a1 + 32);
  v8 = (uint64_t *)v7[15];
  v9 = *(_QWORD *)(v7[6] & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  if (!v10
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26 || (v9 = sub_22F10CF48(v9)) == 0)
    || (v11 = *(_QWORD *)(v9 + 16), (v11 & 0x3FFFC000000000) == 0))
  {
LABEL_10:
    v106 = v6;
    v13 = sub_22EF5B848(*(_QWORD *)(v4 + 88), v3, 0);
    LOWORD(v113) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 88) + 15064) + 24))(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 15064), 0);
    BYTE2(v113) = 0;
    *((_QWORD *)&v113 + 1) = 0;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0;
    DWORD1(v113) = 1;
    v114 = 5;
    v14 = sub_22EF63D8C(*(_QWORD *)(v4 + 88), v13, 0, 0, &v113, 0);
    v105 = sub_22EFC6C44((_QWORD *)(*(_QWORD *)(v4 + 88) + 15224), *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) | v13 & 7);
    v15 = sub_22EF579A8(*(_QWORD *)(v4 + 88), v13, v5);
    v16 = sub_22EF579A8(*(_QWORD *)(v4 + 88), v14, v5);
    v17 = v16;
    v18 = 0;
    v19 = 0;
    if ((*v16 & 0xFLL) == 0)
    {
      v19 = v16 + 1;
      v20 = *(unsigned __int8 *)(*(_QWORD *)(*v16 & 0xFFFFFFFFFFFFFFF0) + 16);
      v21 = v20 == 26;
      v18 = v20 == 26 ? *v16 : 0;
      if (!v21)
        v19 = 0;
    }
    v112[0] = v18;
    v112[1] = v19;
    v22 = *(_QWORD *)(v18 + 24);
    v23 = sub_22E47EE80(v112);
    if ((v22 & 0xF) != 0)
    {
      v24 = 0;
      v25 = 3;
    }
    else
    {
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v26 == 39)
        v24 = v22;
      else
        v24 = 0;
      v25 = 3;
      if (v26 == 39)
        v25 = v23 + 3;
    }
    if ((*v15 & 0xFLL) != 0)
    {
      v27 = 0;
      v28 = 3;
    }
    else
    {
      v29 = *(unsigned __int8 *)(*(_QWORD *)(*v15 & 0xFFFFFFFFFFFFFFF0) + 16);
      v30 = v29 == 39;
      if (v29 == 39)
        v27 = *v15;
      else
        v27 = 0;
      v28 = (uint64_t)v15 + 11;
      if (!v30)
        v28 = 3;
    }
    v31 = *(_QWORD *)(v24 + 32);
    if ((v31 & 0xF) != 0)
    {
      v32 = 0;
    }
    else
    {
      v33 = v31 & 0xFFFFFFFFFFFFFFF0;
      if (v31 < 0x10)
        v34 = 1;
      else
        v34 = *(_QWORD *)((char *)&unk_22F483980
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)v33 + 16) << 56) >> 53));
      v35 = (v34 + v25) & -v34;
      if (*(_BYTE *)(*(_QWORD *)v33 + 16) == 26)
        v32 = v35;
      else
        v32 = 0;
    }
    v36 = *(_QWORD *)(v27 + 32);
    v104 = v14;
    if ((v36 & 0xF) != 0)
    {
      v37 = 0;
    }
    else
    {
      v38 = v36 & 0xFFFFFFFFFFFFFFF0;
      if (v36 < 0x10)
        v39 = 1;
      else
        v39 = *(_QWORD *)((char *)&unk_22F483980
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)v38 + 16) << 56) >> 53));
      v40 = (v39 + v28) & -v39;
      if (*(_BYTE *)(*(_QWORD *)v38 + 16) == 26)
        v37 = v40;
      else
        v37 = 0;
    }
    v119 = v121;
    v120 = 0x400000000;
    v41 = *(_QWORD *)(v7[6] & 0xFFFFFFFFFFFFFFF0);
    v107 = v3;
    v108 = v5;
    v103 = (uint64_t)v17;
    if (v41 && *(_BYTE *)(v41 + 16) == 26
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v41 = sub_22F10CF48(v41)) != 0)
    {
      v42 = *(_QWORD *)(v41 + 16);
      if ((v42 & 0x3FFFC000000000) != 0)
      {
        v43 = 0;
        v44 = v32 + 16;
        v45 = v37 + 16;
        v46 = (unsigned __int16)(v42 >> 38);
        do
        {
          v47 = *(_QWORD *)(v7[15] + 8 * v43);
          v48 = *(_QWORD *)(v4 + 88);
          v49 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v48 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v48 + 1960) + 80));
          if (v49)
            v50 = v49 + 40;
          else
            v50 = 0;
          v51 = *(_QWORD *)(v47 + 56);
          v52 = v51 & 0xFFFFFFFFFFFFFFF8;
          if ((v51 & 4) != 0 && *(_DWORD *)(v52 + 16))
            v53 = **(int ***)(v52 + 24);
          else
            v53 = (int *)(v47 + 64);
          v54 = *v53;
          v55 = *(_QWORD *)(v47 + 40);
          if ((v55 & 7) != 0)
            v56 = 0;
          else
            v56 = v55 & 0xFFFFFFFFFFFFFFF8;
          if ((v51 & 4) != 0)
            v52 = *(_QWORD *)(v52 + 32);
          v57 = sub_22EFBF080(v48, v50, v54, *(_DWORD *)(v47 + 24), v56, *(_QWORD *)(v47 + 48), v52, *(_BYTE *)(v47 + 96) & 7, 0);
          v58 = v120;
          if (v120 >= (unint64_t)HIDWORD(v120))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v58 = v120;
          }
          v119[v58] = v57;
          LODWORD(v120) = v120 + 1;
          *(_QWORD *)(v44 + 8 * v43) = v47;
          *(_QWORD *)(v45 + 8 * v43++) = v47;
        }
        while (v46 != v43);
      }
    }
    v59 = *(_QWORD *)(v4 + 88);
    v109 = v105;
    v110 = v5;
    v111 = v15;
    v60 = (*(_DWORD *)(v4 + 56) & 0xFC) != 4;
    v61 = (**(_DWORD **)(v4 + 72) >> 11) & 1;
    v62 = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
    sub_22F0D60E4(v62);
    v64 = sub_22EFD88BC(v59, v106, v5, &v109, v104, v103, v60, 1, 0, v61, v102, v63, 0);
    *(_DWORD *)(v64 + 28) = *(_DWORD *)(v64 + 28) & 0xFFFF9DFF | 0x200;
    v65 = *(_QWORD *)(v106 + 128);
    if (v65
      && ((*(unsigned __int16 *)(v65 + 8) | (*(unsigned __int8 *)(v65 + 10) << 16)) & 0x100000) != 0
      && (*(_BYTE *)(v65 + 104) & 4) != 0)
    {
      v98 = v7[18];
      if ((v98 & 6) != 0)
        v99 = 0;
      else
        v99 = v98 & 0xFFFFFFFFFFFFFFF8;
      v67 = sub_22EFE964C(*(_QWORD *)(v4 + 88), v106 + 64, v5, v105, *(_QWORD *)(v99 + 56), v64);
      *(_DWORD *)(v67 + 28) = *(_DWORD *)(v67 + 28) & 0xFFFF9DFF | 0x200;
      *(_QWORD *)(v64 + 144) = v67 & 0xFFFFFFFFFFFFFFF9;
      v66 = v106 + 64;
    }
    else
    {
      v66 = v106 + 64;
      v67 = v64;
    }
    sub_22EFCCFA0(v66, v67);
    v68 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v4 + 88) + 15192), "__invoke", 8uLL);
    v69 = *(_QWORD *)(v4 + 88);
    v109 = v68;
    v110 = v5;
    sub_22EFC6D6C((uint64_t)&v111, v68);
    v70 = v7[7];
    v71 = v70 & 0xFFFFFFFFFFFFFFF8;
    if ((v70 & 4) != 0)
      v71 = *(_QWORD *)(v71 + 32);
    v72 = (*(_DWORD *)(v4 + 56) & 0xFC) != 4;
    v73 = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
    sub_22F0D60E4(v73);
    v75 = sub_22EFD6AD8(v69, v106, v108, &v109, v107, v71, 2, v72, 1, 0, v74, 0);
    v76 = *(_QWORD *)(v7[6] & 0xFFFFFFFFFFFFFFF0);
    if (v76 && *(_BYTE *)(v76 + 16) == 26
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v76 = sub_22F10CF48(v76)) != 0)
    {
      v77 = *(_QWORD *)(v76 + 16);
      if ((v77 & 0x3FFFC000000000) != 0)
      {
        if (v75)
          v78 = v75 + 72;
        else
          v78 = 0;
        v79 = (unsigned __int16)(v77 >> 38);
        v80 = v119;
        v81 = v78 & 0xFFFFFFFFFFFFFFFBLL;
        do
        {
          v82 = *v80++;
          *(_QWORD *)(v82 + 16) = v81;
          --v79;
        }
        while (v79);
      }
    }
    v83 = v119;
    v84 = *(_DWORD *)(v75 + 28);
    if (!v75 || (v85 = v75, (*(_DWORD *)(v75 + 28) & 0x7F) != 0x53))
    {
      v86 = *(_QWORD *)(v75 + 16);
      v87 = v86 & 0xFFFFFFFFFFFFFFF8;
      if ((v86 & 4) != 0)
        v87 = *(_QWORD *)v87;
      for (i = *(_WORD *)(v87 + 8) & 0x7F; i != 83; i = *(_WORD *)(v87 + 8) & 0x7F)
      {
        v89 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v89 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_96;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_95;
          if (i == 16)
            goto LABEL_89;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_102;
          if (i == 24)
          {
LABEL_89:
            v89 = -48;
          }
          else
          {
LABEL_95:
            if (i != 70)
            {
LABEL_96:
              v90 = i - 52;
              if ((i - 33) >= 5)
                v91 = -48;
              else
                v91 = -64;
              if (v90 >= 6)
                v89 = v91;
              else
                v89 = -72;
              goto LABEL_102;
            }
            v89 = -64;
          }
        }
LABEL_102:
        v92 = *(_QWORD *)(v87 + v89 + 16);
        v87 = v92 & 0xFFFFFFFFFFFFFFF8;
        if ((v92 & 4) != 0)
          v87 = *(_QWORD *)v87;
      }
      v85 = v87 - 40;
    }
    if ((_DWORD)v120)
    {
      v93 = 8 * v120;
      v94 = (void *)sub_22E3CD3D4(*(_QWORD *)(v85 + 88) + 2032, v93, 3);
      *(_QWORD *)(v75 + 120) = v94;
      memmove(v94, v83, v93);
      v84 = *(_DWORD *)(v75 + 28);
    }
    *(_DWORD *)(v75 + 28) = v84 & 0xFFFF9DFF | 0x4200;
    v95 = *(_QWORD *)(v106 + 128);
    if (v95
      && ((*(unsigned __int16 *)(v95 + 8) | (*(unsigned __int8 *)(v95 + 10) << 16)) & 0x100000) != 0
      && (*(_BYTE *)(v95 + 104) & 4) != 0)
    {
      v100 = v7[18];
      if ((v100 & 6) != 0)
        v101 = 0;
      else
        v101 = v100 & 0xFFFFFFFFFFFFFFF8;
      v97 = sub_22EFE964C(*(_QWORD *)(v4 + 88), v106 + 64, v108, v68, *(_QWORD *)(v101 + 56), v75);
      *(_DWORD *)(v97 + 28) = *(_DWORD *)(v97 + 28) & 0xFFFF9DFF | 0x4200;
      *(_QWORD *)(v75 + 144) = v97 & 0xFFFFFFFFFFFFFFF9;
      v96 = v106 + 64;
    }
    else
    {
      v96 = v106 + 64;
      v97 = v75;
    }
    sub_22EFCCFA0(v96, v97);
    if (v119 != v121)
      free(v119);
    return;
  }
  v12 = 8 * (unsigned __int16)(v11 >> 38);
  while (!sub_22E484F44(*v8))
  {
    ++v8;
    v12 -= 8;
    if (!v12)
      goto LABEL_10;
  }
}

_DWORD *sub_22EC55F58(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 12 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F337904(a1, (uint64_t)v4, (uint64_t)v4 + 12 * v3);
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(12 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22EC56024(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  BOOL v12;
  unsigned int v13;
  unint64_t v14;
  char **v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = **(_QWORD **)(v3 + 72);
  switch(v2)
  {
    case 0:
    case 5:
    case 9:
    case 10:
    case 12:
      if (*(_BYTE *)(a1 + 160))
        v5 = 442;
      else
        v5 = 58;
      if ((v4 & 0x100) != 0)
        v6 = v5;
      else
        v6 = 32;
      v7 = *(_BYTE *)(a1 + 160) == 0;
      v8 = v6 | 0x800;
      goto LABEL_9;
    case 1:
      if (*(_BYTE *)(a1 + 160))
        v8 = 278;
      else
        v8 = 4;
      v7 = (**(_QWORD **)(v3 + 72) & 0x100) == 0;
      v6 = 2;
LABEL_9:
      if (!v7)
        v6 = v8;
      break;
    case 2:
      v6 = 1;
      break;
    case 3:
      if ((v4 & 0x100) != 0)
        v6 = 42;
      else
        v6 = 8;
      break;
    case 4:
      v6 = 1024;
      break;
    case 6:
      v6 = 20;
      break;
    case 7:
      v6 = 16;
      break;
    case 8:
      v6 = 2986;
      break;
    case 11:
      v6 = 64;
      break;
    case 13:
      v6 = 4096;
      break;
    case 14:
      v6 = 0x2000;
      break;
    case 15:
      v6 = 638;
      break;
    default:
      v6 = 0;
      break;
  }
  *(_DWORD *)(a1 + 156) = v6;
  v9 = *(_QWORD *)(a1 + 120);
  if ((v9 & 7) == 6 && (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
  {
    sub_22F331450(v3);
    v9 = *(_QWORD *)(a1 + 120);
  }
  v10 = v9 & 7;
  v11 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if (v10)
    v12 = 1;
  else
    v12 = v11 == 0;
  if (!v12)
  {
    v13 = (unsigned __int16)(*v11 >> 9);
    if (v13 >= 0x1C)
    {
      v14 = v13 - 27;
      if (v14 > 0x7E7)
      {
        v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 88) + 15208);
        v17 = v16[1];
        if (v17 + 2024 <= v14)
        {
          v18 = v13 - v17 - 2051;
          v19 = v16[2];
        }
        else
        {
          v18 = v13 - 2051;
          v19 = *v16;
        }
        v15 = (char **)(v19 + 48 * v18);
      }
      else
      {
        v15 = &(&off_24FAC8C40)[6 * v14];
      }
      if (!strchr(v15[2], 102))
        *(_BYTE *)(a1 + 164) = 1;
    }
  }
}

void sub_22EC561E4(uint64_t a1)
{
  unsigned int v1;
  unint64_t v3;
  int v4;
  int v6;
  int v7;
  uint64_t i;
  uint64_t j;
  unint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int v48;
  BOOL v49;
  int v50;
  char *v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  _BOOL4 v58;
  int v59;
  uint64_t k;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  char *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  char *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[32];
  _QWORD v101[2];
  unsigned int v102;
  uint64_t v103;
  llvm *v104;
  unsigned int v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 16);
  if (!v1)
    return;
  if (v1 != 1)
  {
    if (*(_DWORD *)a1 == 5)
      return;
    v103 = 1;
    for (i = 8; i != 264; i += 16)
      *(uint64_t *)((char *)&v103 + i) = -4096;
    v101[0] = 1;
    for (j = 1; j != 33; j += 2)
      v101[j] = 0;
    v98 = v100;
    v99 = 0x400000000;
    v94 = 0;
    v92 = 0;
    v10 = 0;
    v91 = 0;
    v93 = 0;
    v11 = 0;
    while (1)
    {
      v12 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) & 0xFFFFFFFFFFFFFFFCLL);
      v13 = v12[7] & 0x7F;
      v14 = v13 > 0x2F;
      v15 = (1 << v13) & 0xC00000060000;
      if (!v14 && v15 != 0)
        v12 = (_DWORD *)sub_22EFBAEA4((uint64_t)v12);
      v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12);
      v18 = v17;
      if ((*(_DWORD *)(v17 + 28) & 0x80) != 0 && (v1 != 1 || v11))
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * --v1);
        goto LABEL_131;
      }
      if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 43 >= 0xFFFFFFF6)
        break;
LABEL_56:
      v38 = v103;
      v39 = v103 & 1;
      v40 = v18 >> 4;
      if ((v103 & 1) != 0)
      {
        v41 = 16;
        v42 = (char *)&v104;
      }
      else
      {
        v41 = v105;
        if (!v105)
        {
          v51 = 0;
          v52 = 0;
          goto LABEL_76;
        }
        v42 = (char *)v104;
      }
      v43 = v41 - 1;
      v44 = (v41 - 1) & (v40 ^ (v18 >> 9));
      v45 = &v42[16 * v44];
      v46 = *(_QWORD *)v45;
      if (v18 == *(_QWORD *)v45)
      {
LABEL_69:
        v96 = v10;
        v23 = &v42[16 * v44];
        goto LABEL_32;
      }
      v47 = 0;
      v48 = 1;
      while (v46 != -4096)
      {
        if (v47)
          v49 = 0;
        else
          v49 = v46 == -8192;
        if (v49)
          v47 = v45;
        v50 = v44 + v48++;
        v44 = v50 & v43;
        v45 = &v42[16 * v44];
        v46 = *(_QWORD *)v45;
        if (v18 == *(_QWORD *)v45)
          goto LABEL_69;
      }
      if (v47)
        v51 = v47;
      else
        v51 = v45;
      if ((v103 & 1) != 0)
        v52 = 16;
      else
        v52 = v105;
LABEL_76:
      if (4 * (v103 >> 1) + 4 >= 3 * v52)
      {
        sub_22EC729B0((uint64_t)&v103, 2 * v52);
        v38 = v103;
        if ((v103 & 1) != 0)
        {
          v67 = 16;
          v68 = (char *)&v104;
LABEL_137:
          v39 = v103 & 1;
          v69 = v67 - 1;
          v70 = (v67 - 1) & (v40 ^ (v18 >> 9));
          v51 = &v68[16 * v70];
          v71 = *(_QWORD *)v51;
          if (v18 != *(_QWORD *)v51)
          {
            v72 = 0;
            v73 = 1;
            while (v71 != -4096)
            {
              if (v72)
                v74 = 0;
              else
                v74 = v71 == -8192;
              if (v74)
                v72 = v51;
              v75 = v70 + v73++;
              v70 = v75 & v69;
              v51 = &v68[16 * (v75 & v69)];
              v71 = *(_QWORD *)v51;
              if (v18 == *(_QWORD *)v51)
                goto LABEL_79;
            }
            if (v72)
              v51 = v72;
          }
          goto LABEL_79;
        }
        v67 = v105;
        if (v105)
        {
          v68 = (char *)v104;
          goto LABEL_137;
        }
        v39 = 0;
        v51 = 0;
      }
      else if (v52 + ~(v103 >> 1) - HIDWORD(v103) <= v52 >> 3)
      {
        sub_22EC729B0((uint64_t)&v103, v52);
        v97 = 0;
        sub_22EC72918((uint64_t)&v103, v18, &v97);
        v51 = v97;
        v38 = v103;
        v39 = v103 & 1;
      }
LABEL_79:
      LODWORD(v103) = (v38 & 0xFFFFFFFE | v39) + 2;
      if (*(_QWORD *)v51 != -4096)
        --HIDWORD(v103);
      *(_QWORD *)v51 = v18;
      *((_DWORD *)v51 + 2) = v11;
      v53 = *(_DWORD *)(v18 + 28);
      v54 = v53 & 0x7F;
      if (v54 == 74)
      {
        LODWORD(v94) = 1;
      }
      else if ((v54 - 33) > 4)
      {
        if (v54 == 29)
        {
          HIDWORD(v92) = 1;
          v91 = 1;
        }
        else if ((v53 & 0x7Eu) - 52 >= 6)
        {
          if (v10)
          {
            if (sub_22ED10A18(*(_QWORD *)(a1 + 112), v10, v18))
            {
              v63 = v99;
              if (v99 >= (unint64_t)HIDWORD(v99))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v63 = v99;
              }
              *((_QWORD *)v98 + v63) = v18;
              LODWORD(v99) = v99 + 1;
              *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * --v1);
              goto LABEL_131;
            }
            BYTE4(v94) = 1;
          }
          v10 = v18;
        }
        else
        {
          HIDWORD(v92) = 1;
        }
      }
      else
      {
        BYTE4(v94) |= v93;
        v93 = 1;
        LODWORD(v92) = v11;
      }
      ++v11;
LABEL_131:
      if (v11 >= v1)
      {
        if (v1 < 2)
          goto LABEL_181;
        v76 = v94;
        if ((*(_BYTE *)(a1 + 162) == 0 || (v93 & 1) == 0) | BYTE4(v94) & 1)
        {
LABEL_182:
          if ((_DWORD)v99 && (v94 & 0x100000000) == 0)
            sub_22ED10C74(*(_QWORD **)(a1 + 112), *(_DWORD *)(a1 + 128), v10, (unint64_t *)v98, v99);
          *(_DWORD *)(a1 + 16) = v1;
          if ((v10 != 0) & (HIDWORD(v92) | v76) | BYTE4(v94) & 1)
            goto LABEL_186;
          if ((v76 & 1) != 0)
          {
            v90 = 4;
          }
          else if ((v1 > 1) | v91 & 1)
          {
            v90 = 3;
          }
          else
          {
            v90 = 2;
          }
          *(_DWORD *)a1 = v90;
        }
        else
        {
          if (!((HIDWORD(v92) | v94) & 1 | (v10 != 0)))
          {
            BYTE4(v94) = 0;
            v10 = 0;
            v76 = 0;
            HIDWORD(v92) = 0;
            goto LABEL_182;
          }
          if ((_DWORD)v92)
            v77 = 0;
          else
            v77 = v1 - 1;
          v78 = *(_QWORD *)(a1 + 8);
          v79 = *(_QWORD *)(v78 + 8 * v77);
          v80 = *(_QWORD *)(v78 + 8 * v92) & 0xFFFFFFFFFFFFFFFCLL;
          v81 = *(_DWORD *)(v80 + 28) & 0x7F;
          if (v81 <= 0x2F && ((1 << v81) & 0xC00000060000) != 0)
            v81 = *(_DWORD *)(sub_22EFBAEA4(v80) + 28) & 0x7F;
          if (v81 - 33 <= 4)
          {
            v83 = sub_22EC56CEC(*(_QWORD *)(v80 + 16));
            v84 = sub_22EC56CEC(*(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFFCLL) + 16));
            if (v84)
            {
              v85 = v84;
              v86 = sub_22EFCC008(v83);
              if (v86 == sub_22EFCC008(v85))
              {
                v87 = *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFFCLL) + 28);
                v88 = v87 & 0x7F;
                if (v88 <= 0x2F && ((1 << v88) & 0xC00000060000) != 0)
                {
                  v87 = *(_DWORD *)(sub_22EFBAEA4(v79 & 0xFFFFFFFFFFFFFFFCLL) + 28);
                  v88 = v87 & 0x7F;
                }
                if (v88 - 60 < 8
                  || (v87 & 0x7Eu) - 52 < 6
                  || (v89 = v88 - 29, v89 <= 0x2D) && ((1 << v89) & 0x200000700001) != 0)
                {
                  BYTE4(v94) = 0;
                  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v92) = *(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                         + 8 * --v1);
LABEL_181:
                  v76 = v94;
                  goto LABEL_182;
                }
              }
            }
          }
          *(_DWORD *)(a1 + 16) = v1;
LABEL_186:
          *(_QWORD *)a1 = 0x200000005;
        }
        if (v98 != v100)
          free(v98);
        if ((v101[0] & 1) == 0)
          llvm::deallocate_buffer((llvm *)v101[1], (void *)(16 * v102));
        if ((v103 & 1) == 0)
          llvm::deallocate_buffer(v104, (void *)(16 * v105));
        return;
      }
    }
    v19 = *(_QWORD *)(v17 + 48);
    if (v19)
      v20 = v19 & 0xFFFFFFFFFFFFFFF0;
    else
      v20 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 88), v17);
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
    v97 = 0;
    v22 = sub_22EC726E8((uint64_t)v101, v21, &v97);
    v23 = v97;
    if ((v22 & 1) != 0)
    {
      v96 = v10;
LABEL_32:
      v24 = *((unsigned int *)v23 + 2);
      v95 = *(_QWORD *)(a1 + 112);
      v25 = *(_DWORD *)(a1 + 152);
      v26 = *(_QWORD *)(a1 + 8);
      v27 = *(_QWORD *)(v26 + 8 * v11) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v26 + 8 * v24) & 0xFFFFFFFFFFFFFFFCLL;
      if (v25 != 8 || (*(_DWORD *)(v27 + 28) & 0x7E) != 0x2E || (*(_DWORD *)(v28 + 28) & 0x7E) == 0x2E)
      {
        v29 = *(_DWORD *)(v27 + 28) & 0x7F;
        v14 = v29 > 0x2F;
        v30 = (1 << v29) & 0xC00000060000;
        if (!v14 && v30 != 0)
          v27 = sub_22EFBAEA4(v27);
        v32 = *(_DWORD *)(v28 + 28) & 0x7F;
        v14 = v32 > 0x2F;
        v33 = (1 << v32) & 0xC00000060000;
        if (v14 || v33 == 0)
          v35 = v28;
        else
          v35 = sub_22EFBAEA4(v28);
        v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 32))(v27);
        if (v36 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35))
        {
          if (((v25 & 0xFFFFFFFB) == 1) != (*(_DWORD *)(v35 + 28) & 0x7Fu) - 33 < 5)
            goto LABEL_47;
LABEL_48:
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * --v1);
          v10 = v96;
          goto LABEL_131;
        }
        v55 = *(_DWORD *)(v27 + 28);
        if ((v55 & 0x7Eu) - 58 < 0xFFFFFFFA)
        {
LABEL_90:
          if ((v55 & 0x7Fu) - 33 < 0xFFFFFFF9)
            goto LABEL_91;
          v64 = sub_22EFE8FBC(*(_QWORD *)(v27 + 56));
          v65 = sub_22EFE8FBC(*(_QWORD *)(v35 + 56));
          if (v64 != v65)
          {
            if (v64 >= v65)
              goto LABEL_48;
            goto LABEL_47;
          }
          v66 = *(_DWORD *)(*(_QWORD *)(v27 + 56) + 12) & 0x1FFFFFFF;
          if (v64 == v66)
          {
LABEL_91:
            v59 = *(_DWORD *)(v27 + 28);
            if ((v59 & 0x7Fu) - 67 >= 0xFFFFFFF9)
            {
              if (!sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0), 0)
                || (sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0
                || (*(_BYTE *)(v27 + 8) & 4) != 0 && (sub_22EC62AF4(v95, v27) & 1) == 0)
              {
                goto LABEL_48;
              }
            }
            else
            {
              if ((v59 & 0x7Eu) - 52 < 6 || (v59 & 0x7Fu) - 60 < 7)
              {
                for (k = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 48))(v27);
                      ;
                      k = (*(uint64_t (**)(uint64_t))(*(_QWORD *)k + 48))(k))
                {
                  v58 = k != 0;
                  if (!k || k == v35)
                    break;
                }
                goto LABEL_110;
              }
              if ((*(_BYTE *)(v28 + 8) & 4) == 0 || (sub_22EC62AF4(v95, v28) & 1) != 0)
                goto LABEL_48;
            }
          }
          else
          {
            while ((sub_22EC624F8(v95, *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v64 + 16), 0) & 1) != 0
                 || (sub_22EC624F8(v95, *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v64 + 16), 0) & 1) == 0)
            {
              if (v66 == ++v64)
                goto LABEL_91;
            }
          }
        }
        else
        {
          v56 = sub_22EFC0EB8(v27);
          v57 = sub_22EFC0EB8(v35);
          v58 = v56 < v57;
          if (v56 == v57)
          {
            v55 = *(_DWORD *)(v27 + 28);
            goto LABEL_90;
          }
LABEL_110:
          if (!v58)
            goto LABEL_48;
        }
      }
LABEL_47:
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v24) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11);
      goto LABEL_48;
    }
    if ((v101[0] & 1) != 0)
      v37 = 16;
    else
      v37 = v102;
    if (4 * (LODWORD(v101[0]) >> 1) + 4 >= 3 * v37)
    {
      v37 *= 2;
    }
    else if (v37 + ~(LODWORD(v101[0]) >> 1) - HIDWORD(v101[0]) > v37 >> 3)
    {
LABEL_53:
      LODWORD(v101[0]) += 2;
      if (*(_QWORD *)v23)
        --HIDWORD(v101[0]);
      *(_QWORD *)v23 = v21;
      *((_DWORD *)v23 + 2) = v11;
      goto LABEL_56;
    }
    sub_22EC72790((uint64_t)v101, v37);
    v97 = 0;
    sub_22EC726E8((uint64_t)v101, v21, &v97);
    v23 = v97;
    goto LABEL_53;
  }
  v3 = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v4 = *(_DWORD *)(v3 + 28);
  if ((v4 & 0x7Fu) <= 0x2F && ((1 << (v4 & 0x7F)) & 0xC00000060000) != 0)
    v4 = *(_DWORD *)(sub_22EFBAEA4(v3) + 28);
  v6 = v4 & 0x7F;
  if (v6 == 74)
  {
    v7 = 4;
  }
  else
  {
    if (v6 != 29)
      return;
    v7 = 3;
  }
  *(_DWORD *)a1 = v7;
}

unint64_t sub_22EC56CEC(uint64_t a1)
{
  char v1;
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;
  BOOL v5;

  v1 = a1;
  v2 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v3 = v2;
  if ((v1 & 4) != 0)
    v3 = (_QWORD *)v2[1];
  v4 = v3[1] & 0x7F;
  v5 = v4 > 0x18 || ((1 << v4) & 0x1000006) == 0;
  if (!v5 || v4 - 52 < 6)
    return (unint64_t)v3;
  if ((v1 & 4) != 0)
    v2 = (_QWORD *)*v2;
  return sub_22EFCBB30((unint64_t)v2);
}

void sub_22EC56D44(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  const char *p_p;
  llvm::raw_ostream *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = v2;
  v4 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v4) > 0x12)
  {
    *(_DWORD *)(v4 + 15) = 544370534;
    *(_OWORD *)v4 = *(_OWORD *)"lookup results for ";
    *((_QWORD *)v2 + 4) += 19;
  }
  else
  {
    v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v2, "lookup results for ");
  }
  v12 = *(_QWORD *)(a1 + 120);
  sub_22EFC683C(&v12, &__p);
  if (v14 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, p_p);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 2618;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, ":\n");
  }
  if (v14 < 0)
    operator delete(__p);
  v8 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a1 + 8);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      sub_22F372FB8((llvm *)(v11 & 0xFFFFFFFFFFFFFFFCLL));
      v10 -= 8;
    }
    while (v10);
  }
}

unint64_t sub_22EC56E74(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  unsigned int *v20;
  char *v21;
  int v22;
  const void **v23;
  const void **v24;
  const void *v25;
  size_t v26;
  unint64_t v27;
  llvm *v28;
  _BOOL4 v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  char v62;
  char v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  int v78;
  unint64_t v79;
  uint64_t i;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  char **v98;
  unint64_t result;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  BOOL v107;
  char v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *__p;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  _BYTE v121[120];
  void *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  unsigned __int8 v129;
  _QWORD v130[9];
  int v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a2 + 152);
  if (v2 != 9 && v2 != 0)
    return 0;
  v4 = a2;
  v118 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a2 + 120) & 7) != 0 || (*(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8) == 0)
    return 0;
  v6 = a1;
  v7 = *(_QWORD *)(a1 + 72);
  if (v2)
    v8 = 1;
  else
    v8 = (*(_QWORD *)v7 & 0x100) == 0;
  if (!v8)
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(_QWORD *)(v9 + 1368);
    if (!v10)
    {
      v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(v9 + 15192), "__make_integer_seq", 0x12uLL);
      *(_QWORD *)(v9 + 1368) = v10;
      v9 = *(_QWORD *)(v6 + 88);
    }
    if (v10 == v118)
    {
      result = sub_22F3680F4(v9);
      goto LABEL_176;
    }
    v11 = *(_QWORD *)(v9 + 1376);
    if (!v11)
    {
      v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(v9 + 15192), "__type_pack_element", 0x13uLL);
      *(_QWORD *)(v9 + 1376) = v11;
    }
    if (v11 == v118)
    {
      result = sub_22F368154(*(_QWORD *)(v6 + 88));
      goto LABEL_176;
    }
    v7 = *(_QWORD *)(v6 + 72);
  }
  v12 = *(_DWORD *)(v7 + 52);
  v113 = v4;
  v117 = v6;
  if ((v12 & 0x40000000) != 0 && (*(_WORD *)(v7 + 148) & 0x800) != 0)
  {
    v13 = sub_22EC57AD8((char *)(*(_QWORD *)(v118 + 16) + 16), **(unsigned int **)(v118 + 16));
    if ((_DWORD)v13)
    {
      v110 = HIDWORD(v13);
      if (HIDWORD(v13))
      {
        v14 = 0;
        v108 = 0;
        v109 = v13 - 1;
        v15 = *(_QWORD *)(v6 + 88);
        while (1)
        {
          v16 = *(_QWORD *)(v15 + 2000);
          v17 = *(_QWORD *)(v16 + 56);
          if ((v17 & 0x100000000) != 0)
            break;
          if ((int)v17 <= 119)
          {
            if ((_DWORD)v17 == 100)
              v18 = 1;
            else
              v18 = 2;
          }
          else
          {
            if ((_DWORD)v17 != 120)
            {
              if ((_DWORD)v17 != 200)
                goto LABEL_30;
LABEL_32:
              v18 = 8;
              goto LABEL_37;
            }
            v18 = 4;
          }
LABEL_37:
          v19 = (v109 + v14);
          v20 = (unsigned int *)((char *)&unk_22F48406C + 16 * v19);
          if (((unsigned __int16)v18 & (_WORD)v20[3]) != 0)
          {
            v111 = v14;
            v21 = (char *)&unk_22F48406C + 16 * v19;
            if (strlen(off_24FAB88E0[*((unsigned __int16 *)v21 + 5)]))
            {
              v119 = v121;
              v120 = 0x200000000;
              v22 = 1;
              llvm::StringRef::split();
              v23 = (const void **)v119;
              if ((_DWORD)v120)
              {
                v24 = (const void **)((char *)v119 + 16 * v120);
                do
                {
                  v25 = *v23;
                  v26 = (size_t)v23[1];
                  v23 += 2;
                  v27 = *(_QWORD *)(v6 + 80);
                  v28 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v27 + 544), v25, v26);
                  v29 = sub_22F2EE534(v27, v28);
                }
                while (v29 && v23 != v24);
                v22 = v29;
                v23 = (const void **)v119;
              }
              if (v23 != (const void **)v121)
                free(v23);
              if (!v22)
                goto LABEL_103;
            }
            v122 = &v124;
            v123 = 0x100000000;
            v119 = v121;
            v120 = 0x500000000;
            v31 = *v20;
            sub_22EC6CC40(v6, (uint64_t)&unk_22F492AD4 + 16 * word_22F48ED2C[v31], (uint64_t)&v122);
            v32 = v123;
            v33 = *((unsigned int *)v21 + 1);
            if (v33 >= 2)
            {
              v34 = v33 - 1;
              v35 = v31 + 1;
              do
              {
                v130[0] = &v130[2];
                v130[1] = 0x100000000;
                sub_22EC6CC40(v6, (uint64_t)&unk_22F492AD4 + 16 * word_22F48ED2C[v35], (uint64_t)v130);
                if (LODWORD(v130[1]) > v32)
                  v32 = v130[1];
                sub_22F338F44((uint64_t)&v119, (unint64_t)v130);
                if ((_QWORD *)v130[0] != &v130[2])
                  free((void *)v130[0]);
                ++v35;
                --v34;
              }
              while (v34);
            }
            v107 = v32 > 1;
            v36 = 0;
            LOWORD(v130[0]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 15088) + 720))(*(_QWORD *)(v15 + 15088));
            *(_OWORD *)((char *)v130 + 4) = 0uLL;
            memset(&v130[3], 0, 48);
            v131 = 0;
            BYTE2(v130[0]) &= 0xFCu;
            if ((_DWORD)v123)
            {
              __p = 0;
              if (v32)
              {
                v37 = 0;
                __p = 0;
                v36 = 0;
                v38 = 0;
                while (1)
                {
                  *(_QWORD *)&v125 = &v126;
                  *((_QWORD *)&v125 + 1) = 0x500000000;
                  v39 = v120;
                  if ((_DWORD)v120)
                    break;
                  v44 = &v126;
LABEL_68:
                  if ((_DWORD)v123 == 1)
                    v45 = 0;
                  else
                    v45 = v37;
                  v46 = sub_22EF63D8C(v15, *((_QWORD *)v122 + v45), v44, v39, (__int128 *)v130, 0);
                  v47 = v46;
                  if (v36 >= v38)
                  {
                    v48 = v36 - __p;
                    v49 = v48 + 1;
                    if ((unint64_t)(v48 + 1) >> 61)
                      abort();
                    if (((char *)v38 - (char *)__p) >> 2 > v49)
                      v49 = ((char *)v38 - (char *)__p) >> 2;
                    if ((unint64_t)((char *)v38 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                      v50 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v50 = v49;
                    if (v50)
                    {
                      if (v50 >> 61)
                        sub_22E3B3F8C();
                      v51 = (char *)operator new(8 * v50);
                    }
                    else
                    {
                      v51 = 0;
                    }
                    v52 = (unint64_t *)&v51[8 * v48];
                    *v52 = v47;
                    v53 = v52 + 1;
                    while (v36 != __p)
                    {
                      v54 = *--v36;
                      *--v52 = v54;
                    }
                    v38 = (unint64_t *)&v51[8 * v50];
                    if (__p)
                      operator delete(__p);
                    __p = v52;
                    v36 = v53;
                  }
                  else
                  {
                    *v36++ = v46;
                  }
                  if ((uint64_t *)v125 != &v126)
                    free((void *)v125);
                  if (++v37 == v32)
                    goto LABEL_95;
                }
                v40 = 0;
                v39 = 0;
                v41 = 0;
                while (1)
                {
                  v42 = *(_DWORD *)((char *)v119 + v40 + 8);
                  if (!v42)
                    break;
                  v43 = *(_QWORD *)(*(_QWORD *)((char *)v119 + v40) + 8 * (v37 % v42));
                  if (v39 >= HIDWORD(v125))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v39 = DWORD2(v125);
                  }
                  *(_QWORD *)(v125 + 8 * v39) = v43;
                  v39 = ++DWORD2(v125);
                  ++v41;
                  v40 += 24;
                  if (v41 >= v120)
                  {
                    v44 = (uint64_t *)v125;
                    goto LABEL_68;
                  }
                }
                if ((uint64_t *)v125 != &v126)
                  free((void *)v125);
              }
            }
            else
            {
              __p = 0;
            }
LABEL_95:
            v4 = v113;
            v116 = *(_DWORD *)(v113 + 128);
            v55 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v15 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v15 + 1960) + 80));
            v56 = v55 + 40;
            if (!v55)
              v56 = 0;
            v115 = v56;
            v6 = v117;
            if (__p == v36)
            {
LABEL_98:
              if (__p)
                operator delete(__p);
              sub_22F3390CC((char **)&v119);
              if (v122 != &v124)
                free(v122);
              v108 |= v107;
LABEL_103:
              v14 = v111;
              goto LABEL_104;
            }
            v114 = (char *)&unk_22F48406C + 16 * v19 + 8;
            v57 = (uint64_t *)__p;
            while (2)
            {
              v58 = *v57;
              v59 = *(_DWORD *)(v6 + 56);
              v60 = *(_QWORD *)(*v57 & 0xFFFFFFFFFFFFFFF0);
              if (v60)
                v61 = *(_BYTE *)(v60 + 16) == 26;
              else
                v61 = 0;
              if (!v61)
              {
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                  v60 = sub_22F10CF48(v60);
                else
                  v60 = 0;
              }
              v62 = (v59 & 0xFC) != 4;
              v63 = v60 != 0;
              v130[0] = v118;
              LODWORD(v130[1]) = v116;
              sub_22EFC6D6C((uint64_t)&v130[2], v118);
              v64 = sub_22EFC4400(v15, v115, v116, v130, v58, 0, 1, v62, 0, v63, 0, 0);
              v65 = *(_DWORD *)(v64 + 28) | 0x200;
              *(_DWORD *)(v64 + 28) = v65;
              v66 = *(_QWORD *)(*v57 & 0xFFFFFFFFFFFFFFF0);
              v130[0] = &v130[2];
              v130[1] = 0x400000000;
              v67 = *(_QWORD *)(v66 + 16);
              if ((v67 & 0x3FFFC000000000) != 0)
              {
                v68 = 0;
                v69 = 0;
                v70 = v66 + 40;
                v71 = (unsigned __int16)(v67 >> 38);
                do
                {
                  v72 = sub_22EFBF080(v15, v64 + 72, 0, 0, 0, *(_QWORD *)(v70 + 8 * v69), 0, 0, 0);
                  v73 = v72;
                  v74 = *(_DWORD *)(v72 + 96);
                  *(_DWORD *)(v72 + 96) = v74 & 0xFFF01FFF;
                  if (v69 >= 0xFF)
                    sub_22F3AC2B8(v72, v69);
                  else
                    *(_DWORD *)(v72 + 96) = v74 & 0xF0001FFF | v68 & 0xFF00000;
                  v75 = LODWORD(v130[1]);
                  if (LODWORD(v130[1]) >= (unint64_t)HIDWORD(v130[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v75 = LODWORD(v130[1]);
                  }
                  *(_QWORD *)(v130[0] + 8 * v75) = v73;
                  v76 = ++LODWORD(v130[1]);
                  ++v69;
                  v68 += 0x100000;
                }
                while (v71 != v69);
                v77 = (_QWORD *)v130[0];
                v65 = *(_DWORD *)(v64 + 28);
                v4 = v113;
              }
              else
              {
                v76 = 0;
                v77 = &v130[2];
              }
              v78 = v65 & 0x7F;
              v79 = v64;
              if (v78 != 83)
              {
                for (i = *(_QWORD *)(v64 + 16); ; i = *(_QWORD *)(v81 + v83 + 16))
                {
                  v81 = i & 0xFFFFFFFFFFFFFFF8;
                  if ((i & 4) != 0)
                    v81 = *(_QWORD *)v81;
                  v82 = *(_WORD *)(v81 + 8) & 0x7F;
                  if (v82 == 83)
                  {
                    v79 = v81 - 40;
                    break;
                  }
                  v83 = -40;
                  if ((*(_WORD *)(v81 + 8) & 0x7Fu) > 0x46)
                  {
                    if (v82 == 71)
                    {
                      v83 = -56;
                      continue;
                    }
                    if (v82 != 81)
                      goto LABEL_139;
                  }
                  else
                  {
                    if (v82 > 0x18)
                      goto LABEL_138;
                    if (v82 == 16)
                      goto LABEL_132;
                    if (((1 << v82) & 0x1066) == 0)
                    {
                      if (v82 == 24)
                      {
LABEL_132:
                        v83 = -48;
                        continue;
                      }
LABEL_138:
                      if (v82 == 70)
                      {
                        v83 = -64;
                        continue;
                      }
LABEL_139:
                      v84 = v82 - 52;
                      v85 = v82 - 33 >= 5;
                      v86 = -64;
                      if (v85)
                        v86 = -48;
                      v85 = v84 >= 6;
                      v83 = -72;
                      if (v85)
                        v83 = v86;
                      continue;
                    }
                  }
                }
              }
              v6 = v117;
              if (v76)
              {
                v87 = 8 * v76;
                v88 = (void *)sub_22E3CD3D4(*(_QWORD *)(v79 + 88) + 2032, v87, 3);
                *(_QWORD *)(v64 + 120) = v88;
                memmove(v88, v77, v87);
              }
              v89 = *v114;
              if ((*v114 & 1) != 0)
              {
                v125 = 0uLL;
                v127 = 0;
                v126 = 0;
                v128 = 0;
                v129 = ((((v129 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v92 = sub_22F39D714(v15, &v125);
                sub_22EFCA95C(v64, v92);
                if ((v89 & 2) != 0)
                  goto LABEL_163;
LABEL_153:
                if ((v89 & 4) != 0)
                {
LABEL_164:
                  v125 = 0uLL;
                  v127 = 0;
                  v126 = 0;
                  v128 = 0;
                  v129 = ((((v129 >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v94 = sub_22F3843E0(v15, &v125);
                  sub_22EFCA95C(v64, v94);
                }
              }
              else
              {
                if ((*v114 & 2) == 0)
                  goto LABEL_153;
LABEL_163:
                v125 = 0uLL;
                v127 = 0;
                v126 = 0;
                v128 = 0;
                v129 = ((((v129 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v93 = sub_22F383BD4(v15, &v125);
                sub_22EFCA95C(v64, v93);
                if ((v89 & 4) != 0)
                  goto LABEL_164;
              }
              if ((*(_BYTE *)(*(_QWORD *)(v117 + 72) + 60) & 1) == 0)
              {
                v125 = 0uLL;
                v127 = 0;
                v126 = 0;
                v128 = 0;
                v129 = ((((v129 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v95 = sub_22F39A9DC(v15, &v125);
                sub_22EFCA95C(v64, v95);
              }
              v90 = *(unsigned int *)(v64 + 28);
              v91 = *(unsigned int *)(v4 + 16);
              if (v91 >= *(unsigned int *)(v4 + 20))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v91 = *(unsigned int *)(v4 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v91) = (v90 >> 13) & 3 | v64;
              ++*(_DWORD *)(v4 + 16);
              *(_DWORD *)v4 = 2;
              if ((_QWORD *)v130[0] != &v130[2])
                free((void *)v130[0]);
              if (++v57 == (uint64_t *)v36)
                goto LABEL_98;
              continue;
            }
          }
LABEL_104:
          if (++v14 == v110)
            goto LABEL_180;
        }
        if (*(_DWORD *)(v16 + 64) != 100)
        {
LABEL_30:
          v18 = 16;
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      v108 = 0;
LABEL_180:
      if (v110 > 1 || (v108 & 1) != 0)
        sub_22EC561E4(v4);
      return 1;
    }
  }
  v96 = (unsigned __int16)(*(_DWORD *)v118 >> 9);
  if (v96 < 0x1C)
    return 0;
  v97 = v96 - 27;
  if ((*(_QWORD *)v7 & 0x100) != 0 || (v12 & 0x40000000) != 0 || (*(_QWORD *)v7 & 8) != 0)
  {
    if (v97 > 0x7E7)
    {
      v103 = *(uint64_t **)(*(_QWORD *)(v6 + 88) + 15208);
      v104 = v103[1];
      if (v104 + 2024 <= v97)
      {
        v105 = v96 - v104 - 2051;
        v106 = v103[2];
      }
      else
      {
        v105 = v96 - 2051;
        v106 = *v103;
      }
      v98 = (char **)(v106 + 48 * v105);
    }
    else
    {
      v98 = &(&off_24FAC8C40)[6 * v97];
    }
    if (strchr(v98[2], 102))
      return 0;
  }
  result = sub_22EA07920(v6, v118, v97, *(_QWORD **)(v6 + 3344), *(unsigned __int8 *)(v4 + 160), *(_DWORD *)(v4 + 128));
  if (result)
  {
LABEL_176:
    v100 = result;
    v101 = *(unsigned int *)(result + 28);
    v102 = *(_DWORD *)(v4 + 16);
    if (v102 >= *(_DWORD *)(v4 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v102 = *(_DWORD *)(v4 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v102) = (v101 >> 13) & 3 | v100;
    ++*(_DWORD *)(v4 + 16);
    *(_DWORD *)v4 = 2;
    return 1;
  }
  return result;
}

uint64_t sub_22EC57AD8(char *__s1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v20;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;
  int v31;
  int v32;
  int v34;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v40;
  int v41;
  int v43;
  int v45;
  unsigned int v47;
  int v48;
  int v50;
  int v52;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  int v60;
  int v61;
  int v63;
  unsigned int v64;
  int v65;
  int v68;
  int v69;
  BOOL v70;
  unint64_t v72;
  int v75;
  BOOL v76;
  unint64_t v78;
  int v80;
  int v82;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  BOOL v90;
  int v92;
  BOOL v93;
  int v95;
  BOOL v96;
  BOOL v97;
  int v99;
  BOOL v100;
  BOOL v101;
  int v103;
  uint64_t v104;
  BOOL v106;
  uint64_t v107;
  int v109;
  int v111;
  int v116;
  int v117;
  int v118;
  int v119;
  char *v120;
  const char *v121;
  size_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v129;
  int v131;
  int v132;
  int v136;
  BOOL v137;
  int v142;
  BOOL v143;
  int v145;
  int v146;
  BOOL v150;
  int v153;
  BOOL v154;
  int v157;
  int v159;
  int v161;
  int v162;
  BOOL v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v169;
  unsigned int v170;
  BOOL v171;
  BOOL v173;
  int v175;
  int v177;
  int v184;
  int v185;
  int v188;
  int v191;
  BOOL v192;
  int v195;
  unsigned int v197;
  int v199;
  int v200;
  int v202;
  int v206;
  int v208;
  unsigned int v209;
  int v217;
  unsigned int v219;
  int v221;
  BOOL v222;
  unsigned int v228;
  int v239;
  unsigned int v240;
  int v243;
  int v244;
  int v248;
  int v250;
  int v254;
  int v255;
  unsigned int v258;
  int v260;
  int v261;
  int v263;
  int v266;
  int v267;
  int v269;
  unsigned int v270;
  int v274;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v283;
  int v285;
  int v287;
  unsigned int v288;
  int v289;
  int v291;
  int v294;
  int v297;
  int v299;
  int v301;
  int v303;
  _QWORD *v306;
  int v309;
  int v310;
  int v313;
  int v317;
  int v318;
  int v320;
  int v321;
  int v326;
  int v327;
  int v329;
  unsigned int v335;
  int v337;
  int v339;
  int v340;
  BOOL v341;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  BOOL v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v357;
  int v359;
  int v361;
  int v364;
  int v369;
  int v371;
  int v375;
  int v377;
  BOOL v378;
  int v379;
  int v382;
  int v383;
  int v388;
  int v389;
  int v390;
  int v391;
  BOOL v392;
  int v393;
  int v396;
  int v397;
  int v398;
  BOOL v399;
  int v400;
  int v402;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v416;
  int v417;
  int v419;
  int v421;
  uint64_t v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  BOOL v434;
  int v435;
  int v436;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v445;
  int v446;
  int v447;
  int v449;
  int v451;
  int v453;
  int v454;
  int v455;
  int v456;
  int v461;
  int v464;
  int v466;
  uint64_t v467;
  int v468;
  int v472;
  unsigned int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v480;
  unsigned int v483;
  int v484;
  int v485;
  BOOL v486;
  int v488;
  unsigned int v490;
  int v492;
  int v494;
  int v495;
  int v496;
  int v498;
  int v502;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v511;
  int v512;
  int v515;
  int v517;
  int v519;
  int v521;
  int v525;
  int v526;
  int v527;
  int v529;
  unsigned int v530;
  int v532;
  unsigned int v533;
  int v535;
  unsigned int v536;
  int v538;
  int v539;
  int v542;
  int v544;
  int v550;
  int v551;
  BOOL v552;
  int v553;
  unsigned int v558;
  int v561;
  int v564;
  int v565;
  unsigned int v569;
  unsigned int v571;
  int v572;
  int v574;
  unsigned int v576;
  int v577;
  int v579;
  unsigned int v580;
  int v581;
  int v582;
  unsigned int v585;
  int v587;
  unsigned int v588;
  int v589;
  unsigned int v592;
  int v593;
  BOOL v594;
  int v595;
  int v596;
  int v597;
  int v603;
  int v604;
  unsigned int v605;
  unsigned int v607;
  unsigned int v608;
  int v610;
  unsigned int v611;
  unsigned int v613;
  unsigned int v615;
  unsigned int v617;
  int v620;
  unsigned int v621;
  int v623;
  unsigned int v624;
  unsigned int v627;
  unsigned int v630;
  int v631;
  unsigned int v632;
  int v633;
  unsigned int v634;
  int v636;
  int v638;
  unsigned int v639;
  unsigned int v645;
  unsigned int v647;
  int v648;
  unsigned int v649;
  int v650;
  int v651;
  unsigned int v653;
  int v657;
  int v658;
  int v671;
  unsigned int v672;
  int v674;
  unsigned int v675;
  int v677;
  unsigned int v678;
  int v679;
  int v681;
  int v682;
  unsigned int v685;
  unsigned int v688;
  unsigned int v692;
  unsigned int v694;
  int v696;
  unsigned int v697;
  unsigned int v699;
  unsigned int v702;
  int v704;
  int v706;
  int v709;
  int v711;
  int v712;
  int v713;
  int v716;
  int v717;
  unsigned int v719;
  unsigned int v721;
  unsigned int v723;
  int v725;
  unsigned int v726;
  int v728;
  unsigned int v729;
  int v730;
  int v731;
  unsigned int v733;
  unsigned int v735;
  unsigned int v737;
  unsigned int v739;
  unsigned int v741;
  unsigned int v743;
  unsigned int v746;
  unsigned int v748;
  unsigned int v750;
  unsigned int v754;
  unsigned int v756;
  unsigned int v758;
  unsigned int v760;
  unsigned int v762;
  unsigned int v764;
  int v766;
  unsigned int v767;
  int v769;
  unsigned int v770;
  int v772;
  unsigned int v773;
  unsigned int v775;
  unsigned int v777;
  int v779;
  unsigned int v780;
  int v781;
  unsigned int v782;
  int v783;
  unsigned int v784;
  int v785;
  unsigned int v786;
  int v787;
  unsigned int v788;
  unsigned int v790;
  unsigned int v792;
  unsigned int v794;
  int v795;
  unsigned int v796;
  int v797;
  unsigned int v798;
  int v799;
  int v800;
  int v801;
  int v802;
  int v803;
  unsigned int v804;
  int v805;
  unsigned int v806;
  int v807;
  unsigned int v808;
  unsigned int v810;
  unsigned int v812;
  unsigned int v814;
  unsigned int v816;
  unsigned int v818;
  unsigned int v820;
  unsigned int v822;
  unsigned int v824;
  unsigned int v826;
  int v827;
  unsigned int v828;
  int v829;
  unsigned int v830;
  int v831;
  unsigned int v833;
  unsigned int v835;
  unsigned int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  unsigned int v842;
  int v843;
  unsigned int v844;
  int v845;
  unsigned int v846;
  int v847;
  unsigned int v848;
  int v849;
  unsigned int v850;
  int v851;
  unsigned int v852;
  int v853;
  int v854;
  int v855;

  switch(a2)
  {
    case 3:
      switch(*__s1)
      {
        case 'a':
          v3 = __s1[1];
          if (v3 == 110)
          {
            if (__s1[2] != 121)
              goto LABEL_2621;
          }
          else
          {
            if (v3 != 108)
            {
              if (v3 == 98 && __s1[2] == 115)
              {
                v4 = 0x100000000;
                v5 = 837;
                return v4 | v5;
              }
              goto LABEL_2621;
            }
            if (__s1[2] != 108)
              goto LABEL_2621;
          }
          v4 = 0x100000000;
          v5 = 901;
          return v4 | v5;
        case 'c':
          v423 = __s1[1];
          if (v423 == 116)
          {
            if (__s1[2] != 122)
              goto LABEL_2621;
            v4 = 0x100000000;
            v5 = 840;
            return v4 | v5;
          }
          if (v423 != 111)
          {
            if (v423 == 108 && __s1[2] == 122)
            {
              v4 = 0x100000000;
              v5 = 838;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          if (__s1[2] != 115)
            goto LABEL_2621;
          goto LABEL_2623;
        case 'd':
          if (*(_WORD *)(__s1 + 1) != 29807)
            goto LABEL_2621;
          v4 = 0x700000000;
          v5 = 109;
          return v4 | v5;
        case 'e':
          v424 = __s1[1];
          if (v424 == 120)
          {
            v504 = __s1[2];
            goto LABEL_1911;
          }
          if (v424 == 114 && __s1[2] == 102)
            goto LABEL_2623;
          goto LABEL_2621;
        case 'f':
          if (*(_WORD *)(__s1 + 1) != 24941)
            goto LABEL_2621;
          goto LABEL_1749;
        case 'l':
          v7 = *(unsigned __int16 *)(__s1 + 1);
          v8 = 26479;
          goto LABEL_2620;
        case 'm':
          v425 = __s1[1];
          if (v425 != 105)
          {
            if (v425 != 97)
              goto LABEL_2621;
            v426 = __s1[2];
            if (v426 == 100)
            {
LABEL_1749:
              v4 = 0x100000000;
              v5 = 806;
              return v4 | v5;
            }
            if (v426 != 120)
              goto LABEL_2621;
            goto LABEL_2104;
          }
          v505 = __s1[2];
          if (v505 == 110)
          {
LABEL_2104:
            v4 = 0x600000000;
            v5 = 843;
            return v4 | v5;
          }
          if (v505 != 120)
            goto LABEL_2621;
          v4 = 0x400000000;
          v5 = 870;
          break;
        case 'n':
          if (*(_WORD *)(__s1 + 1) != 28257)
            goto LABEL_2621;
          v4 = 0x300000000;
          v5 = 786;
          return v4 | v5;
        case 'p':
          v427 = *(unsigned __int16 *)(__s1 + 1);
          v428 = 30575;
          goto LABEL_2058;
        case 's':
          v7 = *(unsigned __int16 *)(__s1 + 1);
          goto LABEL_1596;
        case 't':
          v7 = *(unsigned __int16 *)(__s1 + 1);
          goto LABEL_1598;
        default:
          goto LABEL_2621;
      }
      return v4 | v5;
    case 4:
      switch(*__s1)
      {
        case 'a':
          v6 = __s1[1];
          switch(v6)
          {
            case 't':
              v7 = *((unsigned __int16 *)__s1 + 1);
LABEL_1598:
              v8 = 28257;
              break;
            case 's':
              v7 = *((unsigned __int16 *)__s1 + 1);
LABEL_1596:
              v8 = 28265;
              break;
            case 'c':
              v7 = *((unsigned __int16 *)__s1 + 1);
              v8 = 29551;
              break;
            default:
              goto LABEL_2621;
          }
          goto LABEL_2620;
        case 'c':
          v429 = __s1[1];
          if (v429 == 111)
          {
            v7 = *((unsigned __int16 *)__s1 + 1);
            v8 = 26739;
            goto LABEL_2620;
          }
          if (v429 == 101)
          {
            v7 = *((unsigned __int16 *)__s1 + 1);
            v8 = 27753;
            goto LABEL_2620;
          }
          if (v429 != 98)
            goto LABEL_2621;
          goto LABEL_1748;
        case 'e':
          v430 = __s1[1];
          if (v430 == 120)
          {
            v7 = *((unsigned __int16 *)__s1 + 1);
            v8 = 12912;
          }
          else
          {
            if (v430 != 114)
              goto LABEL_2621;
            v7 = *((unsigned __int16 *)__s1 + 1);
            v8 = 25446;
          }
          goto LABEL_2620;
        case 'f':
          v431 = __s1[1];
          if (v431 != 109)
          {
            if (v431 == 100)
            {
              v427 = *((unsigned __int16 *)__s1 + 1);
              v428 = 28009;
              goto LABEL_2058;
            }
            if (v431 != 97)
              goto LABEL_2621;
            v7 = *((unsigned __int16 *)__s1 + 1);
            v8 = 29538;
LABEL_2620:
            if (v7 == v8)
            {
LABEL_2623:
              v4 = 0x100000000;
              v5 = 785;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          v539 = __s1[2];
          if (v539 != 111)
          {
            if (v539 == 105)
            {
              if (__s1[3] != 110)
                goto LABEL_2621;
              goto LABEL_2689;
            }
            if (v539 == 97 && __s1[3] == 120)
            {
LABEL_2689:
              v4 = 0x400000000;
              v5 = 790;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          if (__s1[3] != 100)
            goto LABEL_2621;
LABEL_2059:
          v4 = 0x100000000;
          v5 = 789;
          break;
        case 'h':
          v432 = *(unsigned __int16 *)(__s1 + 1);
          v433 = __s1[3];
          goto LABEL_1611;
        case 'l':
          if (*(_WORD *)(__s1 + 1) != 26479)
            goto LABEL_2621;
          v436 = __s1[3];
          v4 = 0x100000000;
          v5 = 785;
          if (v436 != 50 && v436 != 98)
            goto LABEL_2621;
          return v4 | v5;
        case 'm':
          if (*(_WORD *)(__s1 + 1) != 25711 || __s1[3] != 102)
            goto LABEL_2621;
          goto LABEL_1776;
        case 'p':
          if (*(_WORD *)(__s1 + 1) != 30575)
            goto LABEL_2621;
          v438 = __s1[3];
          if (v438 == 110)
            goto LABEL_2080;
          if (v438 != 114)
            goto LABEL_2621;
          goto LABEL_2059;
        case 'r':
          v439 = *(unsigned __int16 *)(__s1 + 1);
          v11 = __s1[3];
          v440 = 28265;
          goto LABEL_1627;
        case 's':
          v441 = __s1[1];
          if (v441 == 116)
          {
            if (*((_WORD *)__s1 + 1) != 28773)
              goto LABEL_2621;
            v4 = 0x400000000;
            v5 = 866;
            return v4 | v5;
          }
          if (v441 == 113)
          {
LABEL_1748:
            v7 = *((unsigned __int16 *)__s1 + 1);
            v8 = 29810;
            goto LABEL_2620;
          }
          if (v441 != 105)
            goto LABEL_2621;
          v442 = __s1[2];
          if (v442 == 110)
          {
            v535 = __s1[3];
            goto LABEL_2617;
          }
          if (v442 == 103 && __s1[3] == 110)
            goto LABEL_2623;
          goto LABEL_2621;
        case 't':
          v10 = *(unsigned __int16 *)(__s1 + 1);
          v11 = __s1[3];
          v12 = 28257;
          goto LABEL_1636;
        default:
          goto LABEL_2621;
      }
      return v4 | v5;
    case 5:
      switch(*__s1)
      {
        case 'a':
          v9 = __s1[1];
          if (v9 != 116)
          {
            if (v9 == 115)
            {
              v10 = *((unsigned __int16 *)__s1 + 1);
              v11 = __s1[4];
              v12 = 28265;
            }
            else
            {
              if (v9 != 99)
                goto LABEL_2621;
              v10 = *((unsigned __int16 *)__s1 + 1);
              v11 = __s1[4];
              v12 = 29551;
            }
LABEL_1636:
            v350 = v10 == v12;
            v351 = 104;
            break;
          }
          if (*((_WORD *)__s1 + 1) != 28257)
            goto LABEL_2621;
          v535 = __s1[4];
          if (v535 == 50)
            goto LABEL_2059;
LABEL_2617:
          if (v535 == 104)
            goto LABEL_2623;
          goto LABEL_2621;
        case 'c':
          v443 = __s1[1];
          if (v443 == 114)
          {
            if (*((_WORD *)__s1 + 1) == 29551 && __s1[4] == 115)
            {
              v4 = 0x600000000;
              v5 = 886;
              return v4 | v5;
            }
          }
          else
          {
            if (v443 == 111)
            {
              v455 = *((unsigned __int16 *)__s1 + 1);
              v11 = __s1[4];
              v456 = 28787;
              goto LABEL_2069;
            }
            if (v443 == 108 && *((_WORD *)__s1 + 1) == 28001 && __s1[4] == 112)
            {
              v4 = 0x600000000;
              v5 = 855;
              return v4 | v5;
            }
          }
          goto LABEL_2621;
        case 'e':
          if (*(_WORD *)(__s1 + 1) != 28792)
            goto LABEL_2621;
          v445 = __s1[3];
          if (v445 == 109)
          {
            if (__s1[4] != 49)
              goto LABEL_2621;
          }
          else if (v445 != 49 || __s1[4] != 48)
          {
            goto LABEL_2621;
          }
          goto LABEL_2623;
        case 'f':
          v446 = __s1[1];
          if (v446 != 114)
          {
            if (v446 != 108)
              goto LABEL_2621;
            v11 = __s1[4];
            v350 = *((unsigned __int16 *)__s1 + 1) == 28527;
            v351 = 114;
            break;
          }
          v506 = __s1[2];
          if (v506 != 101)
          {
            if (v506 != 97)
              goto LABEL_2621;
            v477 = *(unsigned __int16 *)(__s1 + 3);
            v478 = 29795;
            goto LABEL_1775;
          }
          if (*(_WORD *)(__s1 + 3) != 28792)
            goto LABEL_2621;
          goto LABEL_1483;
        case 'h':
          v427 = *(_DWORD *)(__s1 + 1);
          v428 = 1953460345;
          goto LABEL_2058;
        case 'i':
          v447 = __s1[1];
          if (v447 != 115)
          {
            if (v447 == 108 && *((_WORD *)__s1 + 1) == 26479 && __s1[4] == 98)
            {
              v4 = 0x300000000;
              v5 = 794;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          v507 = __s1[2];
          if (v507 == 110)
          {
            v508 = *(unsigned __int16 *)(__s1 + 3);
            v509 = 28257;
          }
          else
          {
            if (v507 != 105)
              goto LABEL_2621;
            v508 = *(unsigned __int16 *)(__s1 + 3);
            v509 = 26222;
          }
          if (v508 == v509)
            goto LABEL_2439;
          goto LABEL_2621;
        case 'l':
          v449 = __s1[1];
          if (v449 == 111)
          {
            if (*((_WORD *)__s1 + 1) == 12647)
            {
              v504 = __s1[4] | 0x40;
LABEL_1911:
              if (v504 == 112)
                goto LABEL_2623;
            }
          }
          else if (v449 == 100 && *((_WORD *)__s1 + 1) == 30821 && __s1[4] == 112)
          {
            v4 = 0x600000000;
            v5 = 797;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 'm':
          v451 = __s1[1];
          if (v451 == 117)
          {
            if (*((_WORD *)__s1 + 1) == 12908 && __s1[4] == 52)
            {
              v4 = 0x200000000;
              v5 = 864;
              return v4 | v5;
            }
          }
          else if (v451 == 97 && *((_WORD *)__s1 + 1) == 12900 && __s1[4] == 52)
          {
            v4 = 0x200000000;
            v5 = 862;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 'r':
          v453 = __s1[1];
          if (v453 == 115)
          {
            v439 = *((unsigned __int16 *)__s1 + 1);
            v11 = __s1[4];
            v440 = 29297;
LABEL_1627:
            v350 = v439 == v440;
            v351 = 116;
            break;
          }
          if (v453 != 111)
          {
            if (v453 != 104)
              goto LABEL_2621;
            v432 = *((unsigned __int16 *)__s1 + 1);
            v433 = __s1[4];
LABEL_1611:
            v434 = v432 == 25697;
            v435 = 100;
            goto LABEL_1925;
          }
          v542 = __s1[2];
          if (v542 == 117)
          {
            v7 = *(unsigned __int16 *)(__s1 + 3);
            v8 = 25710;
            goto LABEL_2620;
          }
          if (v542 == 111 && *(_WORD *)(__s1 + 3) == 28276)
          {
LABEL_2080:
            v4 = 0x300000000;
            v5 = 803;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 's':
          v7 = *(_DWORD *)(__s1 + 1);
          goto LABEL_1684;
        case 't':
          v454 = __s1[1];
          if (v454 == 114)
          {
            v11 = __s1[4];
            v350 = *((unsigned __int16 *)__s1 + 1) == 28277;
            v351 = 99;
          }
          else
          {
            if (v454 != 97)
              goto LABEL_2621;
            v455 = *((unsigned __int16 *)__s1 + 1);
            v11 = __s1[4];
            v456 = 28782;
LABEL_2069:
            v350 = v455 == v456;
            v351 = 105;
          }
          break;
        default:
          goto LABEL_2621;
      }
LABEL_2070:
      if (!v350 || v11 != v351)
        goto LABEL_2621;
      goto LABEL_2623;
    case 6:
      switch(*__s1)
      {
        case 'i':
          v13 = __s1[5];
          v14 = *(_DWORD *)(__s1 + 1) == 1936026739;
          v15 = 115;
          goto LABEL_1396;
        case 'j':
        case 'k':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'u':
          goto LABEL_2621;
        case 'l':
          v345 = __s1[1];
          if (v345 == 103)
          {
            v7 = *(_DWORD *)(__s1 + 2);
            v8 = 1634561377;
            goto LABEL_2620;
          }
          if (v345 == 101 && *(_DWORD *)(__s1 + 2) == 1752459118)
          {
            v4 = 0x300000000;
            v5 = 878;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 'm':
          v346 = __s1[1];
          if (v346 == 117)
          {
            v475 = *(_DWORD *)(__s1 + 2);
            v476 = 1768447852;
            goto LABEL_1895;
          }
          if (v346 == 105)
          {
            v427 = *(_DWORD *)(__s1 + 2);
            v428 = 1734438254;
            goto LABEL_2058;
          }
          if (v346 != 97)
            goto LABEL_2621;
          v347 = __s1[2];
          if (v347 == 120)
          {
            v391 = __s1[5];
            v392 = *(unsigned __int16 *)(__s1 + 3) == 24941;
            v393 = 103;
            goto LABEL_1455;
          }
          if (v347 != 100)
            goto LABEL_2621;
          v16 = __s1[5];
          v17 = *(unsigned __int16 *)(__s1 + 3) == 26719;
          v18 = 105;
          goto LABEL_22;
        case 'r':
          v348 = __s1[1];
          if (v348 != 111)
          {
            if (v348 == 101 && *(_DWORD *)(__s1 + 2) == 1869967725)
            {
              v4 = 0xC00000000;
              v5 = 823;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          v475 = *(_DWORD *)(__s1 + 2);
          v476 = 1702125940;
LABEL_1895:
          if (v475 != v476)
            goto LABEL_2621;
          goto LABEL_1930;
        case 's':
          v349 = __s1[1];
          if (v349 == 105)
          {
            v477 = *(_DWORD *)(__s1 + 2);
            v478 = 1936679790;
LABEL_1775:
            if (v477 == v478)
            {
LABEL_1776:
              v4 = 0x400000000;
              v5 = 807;
              return v4 | v5;
            }
          }
          else if (v349 == 101 && *(_DWORD *)(__s1 + 2) == 1952671084)
          {
            v4 = 0xA00000000;
            v5 = 908;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 't':
          v11 = __s1[5];
          v350 = *(_DWORD *)(__s1 + 1) == 1835884903;
          v351 = 97;
          goto LABEL_2070;
        case 'v':
          if (*(_DWORD *)(__s1 + 1) != 1684107116)
            goto LABEL_2621;
          v36 = __s1[5] - 50;
          if (v36 >= 7)
            goto LABEL_2621;
          v5 = qword_22F4941D0[v36];
          v306 = &unk_22F494208;
          goto LABEL_3169;
        default:
          if (*__s1 != 97)
            goto LABEL_2621;
          v248 = __s1[1];
          switch(v248)
          {
            case 't':
              v7 = *(_DWORD *)(__s1 + 2);
              v8 = 1768975969;
              break;
            case 's':
              v7 = *(_DWORD *)(__s1 + 2);
LABEL_1684:
              v8 = 1768975977;
              break;
            case 'c':
              v7 = *(_DWORD *)(__s1 + 2);
              v8 = 1768977263;
              break;
            default:
              goto LABEL_2621;
          }
          break;
      }
      goto LABEL_2620;
    case 7:
      switch(*__s1)
      {
        case 'a':
          v146 = __s1[1];
          if (v146 != 116)
          {
            if (v146 == 114)
            {
              if (*(_DWORD *)(__s1 + 2) == 1868849005 && __s1[6] == 116)
              {
                v4 = 0x200000000;
                v5 = 135;
                return v4 | v5;
              }
            }
            else if (v146 == 100 && *(_DWORD *)(__s1 + 2) == 1634951012 && __s1[6] == 116)
            {
LABEL_1930:
              v4 = 0x100000000;
              v5 = 842;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          v502 = __s1[2];
          if (v502 == 111)
          {
            v603 = *(_DWORD *)(__s1 + 3);
            v604 = 1919901549;
            goto LABEL_2377;
          }
          if (v502 == 97)
          {
            v427 = *(_DWORD *)(__s1 + 3);
            v428 = 1768960622;
LABEL_2058:
            if (v427 == v428)
              goto LABEL_2059;
          }
          goto LABEL_2621;
        case 'b':
          if (*(_DWORD *)(__s1 + 1) != 1769108065 || *(_WORD *)(__s1 + 5) != 29285)
            goto LABEL_2621;
          v4 = 0x100000000;
          v5 = 1504;
          return v4 | v5;
        case 'c':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
          goto LABEL_2621;
        case 'd':
          if (*(_DWORD *)(__s1 + 1) != 1701996389 || *(_WORD *)(__s1 + 5) != 29541)
            goto LABEL_2621;
          goto LABEL_2623;
        case 'i':
          v13 = *(unsigned __int16 *)(__s1 + 5);
          v14 = *(_DWORD *)(__s1 + 1) == 1970365811;
          v15 = 27745;
          goto LABEL_1396;
        default:
          switch(*__s1)
          {
            case 'm':
              v16 = *(unsigned __int16 *)(__s1 + 5);
              v17 = *(_DWORD *)(__s1 + 1) == 1935631457;
              v18 = 29793;
LABEL_22:
              if (!v17 || v16 != v18)
                goto LABEL_2621;
              v4 = 0x100000000;
              v5 = 861;
              return v4 | v5;
            case 'r':
              v11 = *(unsigned __int16 *)(__s1 + 5);
              v350 = *(_DWORD *)(__s1 + 1) == 1634296929;
              v351 = 29550;
              goto LABEL_2070;
            case 's':
              v359 = __s1[1];
              if (v359 == 117)
              {
                v433 = __s1[6];
                v434 = *(_DWORD *)(__s1 + 2) == 1634951010;
                v435 = 116;
LABEL_1925:
                if (v434 && v433 == v435)
                  goto LABEL_1930;
              }
              else
              {
                if (v359 == 105)
                {
                  v398 = __s1[6];
                  v399 = *(_DWORD *)(__s1 + 2) == 1768058471;
                  v400 = 116;
                  goto LABEL_2198;
                }
                if (v359 == 104 && *(_DWORD *)(__s1 + 2) == 1818650229 && __s1[6] == 101)
                {
                  v4 = 0xB000000000;
                  v5 = 2034;
                  return v4 | v5;
                }
              }
              goto LABEL_2621;
            case 'v':
              v361 = __s1[1];
              if (v361 == 115)
              {
                if (*(_DWORD *)(__s1 + 2) == 1701998452)
                {
                  v36 = __s1[6] - 50;
                  if (v36 < 7)
                  {
                    v5 = qword_22F494240[v36];
                    v306 = &unk_22F494278;
                    goto LABEL_3169;
                  }
                }
              }
              else if (v361 == 108 && *(_DWORD *)(__s1 + 2) == 828662127 && __s1[6] == 54)
              {
                v4 = 0x3700000000;
                v5 = 1314;
                return v4 | v5;
              }
              break;
            default:
              goto LABEL_2621;
          }
          goto LABEL_2621;
      }
    case 8:
      switch(*__s1)
      {
        case 'a':
          v20 = __s1[1];
          if (v20 != 116)
          {
            if (v20 == 98 && *(_DWORD *)(__s1 + 2) == 1768185715 && *((_WORD *)__s1 + 3) == 26214)
            {
              v4 = 0x100000000;
              v5 = 841;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          if (*((_WORD *)__s1 + 1) != 28015 || __s1[4] != 95)
            goto LABEL_2621;
          v494 = __s1[5];
          if (v494 > 108)
          {
            switch(v494)
            {
              case 'm':
                v717 = __s1[6];
                if (v717 == 105)
                {
                  if (__s1[7] != 110)
                    goto LABEL_2621;
                }
                else if (v717 != 97 || __s1[7] != 120)
                {
                  goto LABEL_2621;
                }
                break;
              case 's':
                v24 = *((unsigned __int16 *)__s1 + 3);
                v25 = 25205;
LABEL_46:
                if (v24 != v25)
                  goto LABEL_2621;
LABEL_47:
                v4 = 0x800000000;
                v5 = 1516;
                return v4 | v5;
              case 'x':
                v603 = *((unsigned __int16 *)__s1 + 3);
                v604 = 29295;
LABEL_2377:
                if (v603 != v604)
                  goto LABEL_2621;
                break;
              default:
                goto LABEL_2621;
            }
          }
          else
          {
            if (v494 != 97)
            {
              if (v494 == 100)
              {
                v495 = *((unsigned __int16 *)__s1 + 3);
                v496 = 25445;
              }
              else
              {
                if (v494 != 105)
                  goto LABEL_2621;
                v495 = *((unsigned __int16 *)__s1 + 3);
                v496 = 25454;
              }
              if (v495 == v496)
              {
                v4 = 0x800000000;
                v5 = 1524;
                return v4 | v5;
              }
              goto LABEL_2621;
            }
            v716 = __s1[6];
            if (v716 != 110)
            {
              if (v716 != 100 || __s1[7] != 100)
                goto LABEL_2621;
              goto LABEL_47;
            }
            if (__s1[7] != 100)
              goto LABEL_2621;
          }
          v4 = 0x800000000;
          v5 = 1540;
          return v4 | v5;
        case 'c':
          v391 = *((_DWORD *)__s1 + 1);
          v392 = *(_DWORD *)(__s1 + 1) == 1937338479;
          v393 = 1852270963;
LABEL_1455:
          if (!v392 || v391 != v393)
            goto LABEL_2621;
          goto LABEL_2059;
        case 'd':
          if (*(_DWORD *)(__s1 + 1) != 1635021673 || *((_DWORD *)__s1 + 1) != 1701015137)
            goto LABEL_2621;
          v4 = 0x300000000;
          v5 = 892;
          return v4 | v5;
        case 'h':
          if (*(_DWORD *)(__s1 + 1) != 1600547937)
            goto LABEL_2621;
          v396 = __s1[5];
          if (v396 > 107)
          {
            if (v396 == 108)
            {
              v32 = *((unsigned __int16 *)__s1 + 3);
              goto LABEL_2843;
            }
            if (v396 == 115)
            {
              v32 = *((unsigned __int16 *)__s1 + 3);
              goto LABEL_2845;
            }
            if (v396 != 116)
              goto LABEL_2621;
            v32 = *((unsigned __int16 *)__s1 + 3);
            goto LABEL_1473;
          }
          if (v396 == 99)
          {
            v32 = *((unsigned __int16 *)__s1 + 3);
            goto LABEL_2847;
          }
          if (v396 != 101)
            goto LABEL_2621;
          v32 = *((unsigned __int16 *)__s1 + 3);
          goto LABEL_2615;
        case 'i':
          if (__s1[1] != 115)
            goto LABEL_2621;
          v397 = __s1[2];
          if (v397 == 110)
          {
            v398 = __s1[7];
            v399 = *(_DWORD *)(__s1 + 3) == 1634562671;
            v400 = 108;
          }
          else
          {
            if (v397 != 102)
              goto LABEL_2621;
            v398 = __s1[7];
            v399 = *(_DWORD *)(__s1 + 3) == 1953066601;
            v400 = 101;
          }
LABEL_2198:
          if (!v399 || v398 != v400)
            goto LABEL_2621;
LABEL_2439:
          v4 = 0x500000000;
          v5 = 896;
          return v4 | v5;
        case 'l':
          if (*(_DWORD *)(__s1 + 1) != 1835884903 || *((_DWORD *)__s1 + 1) != 1918853485)
            goto LABEL_2621;
LABEL_1483:
          v4 = 0xC00000000;
          v5 = 811;
          return v4 | v5;
        case 'p':
          v402 = __s1[1];
          if (v402 == 114)
          {
            if (*(_DWORD *)(__s1 + 2) == 1952802405 && *((_WORD *)__s1 + 3) == 26723)
            {
              v4 = 0x100000000;
              v5 = 1515;
              return v4 | v5;
            }
          }
          else if (v402 == 111 && *(_DWORD *)(__s1 + 2) == 1970234224 && *((_WORD *)__s1 + 3) == 29806)
          {
            v4 = 0x100000000;
            v5 = 839;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 's':
          if (*(_DWORD *)(__s1 + 1) != 1717990760 || *((_DWORD *)__s1 + 1) != 845507686)
            goto LABEL_2621;
          v4 = 0xB000000000;
          v5 = 2210;
          return v4 | v5;
        case 'u':
          if (*(_DWORD *)(__s1 + 1) != 1835103088 || *((_DWORD *)__s1 + 1) != 1701605485)
            goto LABEL_2621;
          v4 = 0x600000000;
          v5 = 849;
          return v4 | v5;
        case 'v':
          if (*(_DWORD *)(__s1 + 1) != 1919906931 || *((_DWORD *)__s1 + 1) != 909206898)
            goto LABEL_2621;
          v4 = 0x2C00000000;
          v5 = 1369;
          return v4 | v5;
        default:
          goto LABEL_2621;
      }
    case 9:
      switch(*__s1)
      {
        case 'a':
          if (*(_WORD *)(__s1 + 1) != 28532 || __s1[3] != 109)
            goto LABEL_2621;
          v23 = __s1[4];
          if (v23 == 105)
          {
            v511 = *(_DWORD *)(__s1 + 5);
            v512 = 1919901539;
            goto LABEL_2600;
          }
          if (v23 != 95)
            goto LABEL_2621;
          v24 = *(_DWORD *)(__s1 + 5);
          v25 = 1734894456;
          goto LABEL_46;
        case 'b':
          if (*(_QWORD *)(__s1 + 1) != 0x7463656C65737469)
            goto LABEL_2621;
          v4 = 0x100000000;
          v5 = 907;
          return v4 | v5;
        case 'g':
          if (*(_QWORD *)(__s1 + 1) != 0x65636E65665F7465)
            goto LABEL_2621;
          v4 = 0x200000000;
          v5 = 1508;
          return v4 | v5;
        case 'h':
          if (*(_DWORD *)(__s1 + 1) != 1600547937)
            goto LABEL_2621;
          v352 = __s1[5];
          if (v352 <= 111)
          {
            if (v352 == 101)
            {
              v353 = *((unsigned __int16 *)__s1 + 3);
              v354 = __s1[8];
              goto LABEL_2625;
            }
            if (v352 != 108)
              goto LABEL_2621;
            v353 = *((unsigned __int16 *)__s1 + 3);
            v354 = __s1[8];
            goto LABEL_1554;
          }
          if (v352 == 112)
          {
            v636 = *((unsigned __int16 *)__s1 + 3);
            v377 = __s1[8];
            goto LABEL_2628;
          }
          if (v352 != 115)
            goto LABEL_2621;
          v538 = *((unsigned __int16 *)__s1 + 3);
          v354 = __s1[8];
          goto LABEL_2745;
        case 'i':
          if (__s1[1] != 115)
            goto LABEL_2621;
          v355 = __s1[2];
          if (v355 == 111)
          {
            v13 = *(unsigned __int16 *)(__s1 + 7);
            v14 = *(_DWORD *)(__s1 + 3) == 1919247474;
            v15 = 25701;
            goto LABEL_1396;
          }
          if (v355 != 103)
            goto LABEL_2621;
          if (*(_DWORD *)(__s1 + 3) != 1952540018 || *(_WORD *)(__s1 + 7) != 29285)
            goto LABEL_2621;
          goto LABEL_1401;
        case 'm':
          if (*(_QWORD *)(__s1 + 1) == 0x65636E65665F6D65)
            goto LABEL_1438;
          goto LABEL_2621;
        case 'n':
          v357 = __s1[1];
          if (v357 == 111)
          {
            if (*(_DWORD *)(__s1 + 2) == 1818324338 && *(_DWORD *)(__s1 + 5) == 1702521196)
            {
              v4 = 0x300000000;
              v5 = 881;
              return v4 | v5;
            }
          }
          else if (v357 == 101 && *(_DWORD *)(__s1 + 2) == 1717662840 && *(_DWORD *)(__s1 + 5) == 1919251558)
          {
            goto LABEL_2059;
          }
          break;
        case 'r':
          if (*(_QWORD *)(__s1 + 1) == 0x7265646E69616D65)
            goto LABEL_2059;
          goto LABEL_2621;
        default:
          goto LABEL_2621;
      }
      goto LABEL_2621;
    case 10:
      v26 = *__s1;
      if (v26 <= 109)
      {
        if (v26 == 97)
        {
          if (*(_DWORD *)(__s1 + 1) != 1768779636 || *(_WORD *)(__s1 + 5) != 24419)
            goto LABEL_2621;
          v277 = __s1[7];
          if (v277 > 108)
          {
            if (v277 == 109)
            {
              v651 = __s1[8];
              if (v651 == 105)
              {
                if (__s1[9] != 110)
                  goto LABEL_2621;
              }
              else if (v651 != 97 || __s1[9] != 120)
              {
                goto LABEL_2621;
              }
            }
            else
            {
              if (v277 == 115)
              {
                v511 = *((unsigned __int16 *)__s1 + 4);
                v512 = 25205;
              }
              else
              {
                if (v277 != 120)
                  goto LABEL_2621;
                v511 = *((unsigned __int16 *)__s1 + 4);
                v512 = 29295;
              }
LABEL_2600:
              if (v511 != v512)
                goto LABEL_2621;
            }
          }
          else
          {
            if (v277 != 97)
            {
              if (v277 == 100)
              {
                v278 = *((unsigned __int16 *)__s1 + 4);
                v279 = 25445;
              }
              else
              {
                if (v277 != 105)
                  goto LABEL_2621;
                v278 = *((unsigned __int16 *)__s1 + 4);
                v279 = 25454;
              }
              if (v278 == v279)
              {
                v4 = 0x600000000;
                v5 = 1562;
                return v4 | v5;
              }
              goto LABEL_2621;
            }
            v650 = __s1[8];
            if (v650 != 110 && v650 != 100 || __s1[9] != 100)
              goto LABEL_2621;
          }
          v4 = 0x600000000;
          v5 = 1556;
          return v4 | v5;
        }
        if (v26 != 104)
        {
          if (v26 == 105)
          {
            v13 = __s1[9];
            v14 = *(_QWORD *)(__s1 + 1) == 0x61757165746F6E73;
            v15 = 108;
LABEL_1396:
            if (v14 && v13 == v15)
            {
LABEL_1401:
              v4 = 0x500000000;
              v5 = 902;
              return v4 | v5;
            }
          }
          goto LABEL_2621;
        }
        if (*(_DWORD *)(__s1 + 1) != 1600547937)
          goto LABEL_2621;
        v280 = __s1[5];
        switch(v280)
        {
          case 'r':
            v581 = __s1[6];
            if (v581 == 115)
            {
              v538 = *(unsigned __int16 *)(__s1 + 7);
              v354 = __s1[9];
LABEL_2745:
              v594 = v538 == 29297;
              v595 = 116;
            }
            else
            {
              if (v581 != 101)
                goto LABEL_2621;
              v582 = *(unsigned __int16 *)(__s1 + 7);
              v354 = __s1[9];
LABEL_2322:
              v594 = v582 == 26979;
              v595 = 112;
            }
LABEL_2746:
            if (!v594 || v354 != v595)
              goto LABEL_2621;
            goto LABEL_2849;
          case 'l':
            v32 = *(_DWORD *)(__s1 + 6);
LABEL_2324:
            v281 = 808544111;
            break;
          case 'e':
            v32 = *(_DWORD *)(__s1 + 6);
LABEL_992:
            v281 = 808546424;
            break;
          default:
            goto LABEL_2621;
        }
LABEL_2848:
        if (v32 != v281)
          goto LABEL_2621;
LABEL_2849:
        v4 = 0x100000000;
        v5 = 835;
        return v4 | v5;
      }
      if (v26 != 110)
      {
        if (v26 == 115)
        {
          if (*(_QWORD *)(__s1 + 1) == 0x65747368746F6F6DLL && __s1[9] == 112)
          {
            v4 = 0x400000000;
            v5 = 874;
            return v4 | v5;
          }
        }
        else if (v26 == 118 && *(_QWORD *)(__s1 + 1) == 0x6C61685F64616F6CLL && __s1[9] == 102)
        {
          v4 = 0x500000000;
          v5 = 1413;
          return v4 | v5;
        }
        goto LABEL_2621;
      }
      v289 = __s1[1];
      if (v289 != 100)
      {
        if (v289 != 97)
          goto LABEL_2621;
        if (*(_DWORD *)(__s1 + 2) != 1702259060 || __s1[6] != 95)
          goto LABEL_2621;
        v291 = __s1[7];
        if (v291 <= 107)
        {
          if (v291 == 99)
          {
            v32 = *((unsigned __int16 *)__s1 + 4);
LABEL_2847:
            v281 = 29551;
          }
          else
          {
            if (v291 != 101)
              goto LABEL_2621;
            v32 = *((unsigned __int16 *)__s1 + 4);
LABEL_2615:
            v281 = 28792;
          }
        }
        else
        {
          switch(v291)
          {
            case 'l':
              v32 = *((unsigned __int16 *)__s1 + 4);
LABEL_2843:
              v281 = 26479;
              break;
            case 's':
              v32 = *((unsigned __int16 *)__s1 + 4);
LABEL_2845:
              v281 = 28265;
              break;
            case 't':
              v32 = *((unsigned __int16 *)__s1 + 4);
LABEL_1473:
              v281 = 28257;
              break;
            default:
              goto LABEL_2621;
          }
        }
        goto LABEL_2848;
      }
      if (*(_DWORD *)(__s1 + 2) != 1735287154 || *((_WORD *)__s1 + 3) != 24421)
        goto LABEL_2621;
      v461 = __s1[8];
      if (v461 != 51 && v461 != 50)
      {
        if (v461 == 49 && __s1[9] == 68)
        {
          v4 = 0x300000000;
          v5 = 2722;
          return v4 | v5;
        }
        goto LABEL_2621;
      }
      if (__s1[9] != 68)
        goto LABEL_2621;
      v4 = 0x300000000;
      v5 = 2725;
      return v4 | v5;
    case 11:
      switch(*__s1)
      {
        case 'a':
          v27 = __s1[1];
          if (v27 == 116)
          {
            if (*(_DWORD *)(__s1 + 2) == 1667853679 && __s1[6] == 95)
            {
              v498 = __s1[7];
              if (v498 == 120)
              {
                if (*((_WORD *)__s1 + 4) == 26723 && __s1[10] == 103)
                {
                  v4 = 0x800000000;
                  v5 = 1548;
                  return v4 | v5;
                }
              }
              else if (v498 == 108)
              {
                if (*((_WORD *)__s1 + 4) == 24943 && __s1[10] == 100)
                {
                  v4 = 0x1500000000;
                  v5 = 1782;
                  return v4 | v5;
                }
              }
              else if (v498 == 105 && *((_WORD *)__s1 + 4) == 26990 && __s1[10] == 116)
              {
                v4 = 0x1200000000;
                v5 = 1637;
                return v4 | v5;
              }
            }
          }
          else if (v27 == 114 && *(_QWORD *)(__s1 + 2) == 0x63615F746F645F6DLL && __s1[10] == 99)
          {
            v4 = 0x400000000;
            v5 = 137;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 'b':
          if (*(_QWORD *)(__s1 + 1) != 0x72657665725F7469 || *(_WORD *)(__s1 + 9) != 25971)
            goto LABEL_2621;
          v4 = 0x100000000;
          v5 = 108;
          return v4 | v5;
        case 'c':
          if (*(_QWORD *)(__s1 + 1) != 0x695F747265766E6FLL || *(_WORD *)(__s1 + 9) != 29806)
            goto LABEL_2621;
          goto LABEL_1521;
        case 'd':
          if (*(_QWORD *)(__s1 + 1) != 0x735F6363615F746FLL || *(_WORD *)(__s1 + 9) != 29793)
            goto LABEL_2621;
          v4 = 0x400000000;
          v5 = 116;
          return v4 | v5;
        case 'f':
          if (*(_QWORD *)(__s1 + 1) != 0x676E656C5F747361 || *(_WORD *)(__s1 + 9) != 26740)
            goto LABEL_2621;
          v4 = 0x100000000;
          v5 = 884;
          return v4 | v5;
        case 'h':
          v377 = *(unsigned __int16 *)(__s1 + 9);
          v378 = *(_QWORD *)(__s1 + 1) == 0x697669645F666C61;
          v379 = 25956;
          goto LABEL_1535;
        case 'i':
          if (__s1[1] != 115)
            goto LABEL_2621;
          v412 = __s1[2];
          if (v412 == 117)
          {
            v413 = *(_QWORD *)(__s1 + 3);
            v414 = 0x6465726564726F6ELL;
          }
          else
          {
            if (v412 != 108)
              goto LABEL_2621;
            v413 = *(_QWORD *)(__s1 + 3);
            v414 = 0x6C61757165737365;
          }
          if (v413 == v414)
            goto LABEL_1401;
          goto LABEL_2621;
        case 'n':
          if (*(_DWORD *)(__s1 + 1) != 1986622561 || *(_WORD *)(__s1 + 5) != 24421)
            goto LABEL_2621;
          v416 = __s1[7];
          if (v416 <= 111)
          {
            if (v416 == 101)
            {
              v353 = *((unsigned __int16 *)__s1 + 4);
              v354 = __s1[10];
LABEL_2625:
              v417 = 28792;
            }
            else
            {
              if (v416 != 108)
                goto LABEL_2621;
              v353 = *((unsigned __int16 *)__s1 + 4);
              v354 = __s1[10];
LABEL_1554:
              v417 = 26479;
            }
            v594 = v353 == v417;
            v595 = 50;
            goto LABEL_2746;
          }
          if (v416 == 112)
          {
            v636 = *((unsigned __int16 *)__s1 + 4);
            v377 = __s1[10];
LABEL_2628:
            v378 = v636 == 30575;
            v379 = 114;
            goto LABEL_1535;
          }
          if (v416 != 115)
            goto LABEL_2621;
          v538 = *((unsigned __int16 *)__s1 + 4);
          v354 = __s1[10];
          goto LABEL_2745;
        case 'r':
          if (*(_QWORD *)(__s1 + 1) != 0x67616D695F646165 || __s1[9] != 101)
            goto LABEL_2621;
          v36 = __s1[10] - 102;
          if (v36 >= 4)
            goto LABEL_2621;
          v5 = qword_22F4942B0[v36];
          v306 = &unk_22F4942D0;
          goto LABEL_3169;
        case 'v':
          v419 = __s1[1];
          if (v419 == 115)
          {
            if (*(_QWORD *)(__s1 + 2) == 0x6C61685F65726F74 && __s1[10] == 102)
              goto LABEL_1884;
          }
          else if (v419 == 108 && *((_WORD *)__s1 + 1) == 24943 && __s1[4] == 100)
          {
            v421 = __s1[5];
            if (v421 == 97)
            {
              if (*(_DWORD *)(__s1 + 6) == 1818323039 && __s1[10] == 102)
              {
                v4 = 0x500000000;
                v5 = 1439;
                return v4 | v5;
              }
            }
            else if (v421 == 95 && *(_DWORD *)(__s1 + 6) == 1718378856)
            {
              v422 = __s1[10];
              goto LABEL_2665;
            }
          }
          break;
        default:
          goto LABEL_2621;
      }
      goto LABEL_2621;
    case 12:
      v29 = *__s1;
      if (v29 > 109)
      {
        switch(*__s1)
        {
          case 'n':
            if (*(_DWORD *)(__s1 + 1) != 1986622561 || *(_WORD *)(__s1 + 5) != 24421)
              goto LABEL_2621;
            v31 = __s1[7];
            if (v31 != 114)
            {
              if (v31 == 108)
              {
                v32 = *((_DWORD *)__s1 + 2);
                goto LABEL_2324;
              }
              if (v31 != 101)
                goto LABEL_2621;
              v32 = *((_DWORD *)__s1 + 2);
              goto LABEL_992;
            }
            v593 = __s1[8];
            if (v593 == 115)
            {
              v538 = *(unsigned __int16 *)(__s1 + 9);
              v354 = __s1[11];
              goto LABEL_2745;
            }
            if (v593 != 101)
              goto LABEL_2621;
            v582 = *(unsigned __int16 *)(__s1 + 9);
            v354 = __s1[11];
            goto LABEL_2322;
          case 'r':
            if (__s1[1] != 101)
              goto LABEL_2621;
            v299 = __s1[2];
            if (v299 == 116)
            {
              if (*(_QWORD *)(__s1 + 3) == 0x6E6576655F6E6961 && __s1[11] == 116)
                goto LABEL_1408;
            }
            else if (v299 == 97 && *(_QWORD *)(__s1 + 3) == 0x756567616D695F64 && __s1[11] == 105)
            {
              v4 = 0x2400000000;
              v5 = 2474;
              return v4 | v5;
            }
            goto LABEL_2621;
          case 'v':
            v301 = __s1[1];
            if (v301 == 115)
            {
              if (*(_DWORD *)(__s1 + 2) != 1701998452)
                goto LABEL_2621;
              v466 = __s1[6];
              if (v466 == 97)
              {
                if (*(_DWORD *)(__s1 + 7) == 1818323039 && __s1[11] == 102)
                {
                  v4 = 0x800000000;
                  v5 = 1444;
                  return v4 | v5;
                }
              }
              else if (v466 == 95 && *(_DWORD *)(__s1 + 7) == 1718378856)
              {
                v467 = __s1[11];
                goto LABEL_2740;
              }
            }
            else if (v301 == 108 && *((_WORD *)__s1 + 1) == 24943 && __s1[4] == 100)
            {
              v303 = __s1[5];
              if (v303 == 97)
              {
                if (*(_DWORD *)(__s1 + 6) == 1818323039 && __s1[10] == 102)
                {
                  v422 = __s1[11];
LABEL_2665:
                  v36 = v422 - 50;
                  if (v36 < 7)
                  {
                    v5 = qword_22F494328[v36];
                    v306 = &unk_22F494360;
                    goto LABEL_3169;
                  }
                }
              }
              else if (v303 == 95 && *(_DWORD *)(__s1 + 6) == 1718378856 && *((_WORD *)__s1 + 5) == 13873)
              {
                goto LABEL_1425;
              }
            }
            break;
          case 'w':
            if (*(_QWORD *)(__s1 + 1) != 0x616D695F65746972 || *(_WORD *)(__s1 + 9) != 25959)
              goto LABEL_2621;
            v36 = __s1[11] - 102;
            if (v36 >= 4)
              goto LABEL_2621;
            v5 = qword_22F494398[v36];
            v306 = &unk_22F4943B8;
            goto LABEL_3169;
          default:
            goto LABEL_2621;
        }
        goto LABEL_2621;
      }
      if (v29 == 97)
      {
        if (*(_WORD *)(__s1 + 1) == 28532 && __s1[3] == 109)
        {
          v329 = __s1[4];
          if (v329 == 105)
          {
            if (*(_DWORD *)(__s1 + 5) == 1953718115 && *((_DWORD *)__s1 + 2) == 1701998452)
            {
              v4 = 0x1500000000;
              v5 = 1574;
              return v4 | v5;
            }
          }
          else if (v329 == 95 && *(_DWORD *)(__s1 + 5) == 2020633955 && *((_DWORD *)__s1 + 2) == 1734894456)
          {
            v4 = 0x800000000;
            v5 = 1532;
            return v4 | v5;
          }
        }
        goto LABEL_2621;
      }
      if (v29 == 99)
      {
        if (*(_DWORD *)(__s1 + 1) == 1702260335 && *((_DWORD *)__s1 + 1) == 1601466981)
        {
          switch(__s1[8])
          {
            case 'c':
              if (*(_WORD *)(__s1 + 9) != 24936 || __s1[11] != 114)
                goto LABEL_2621;
              goto LABEL_1208;
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'j':
            case 'k':
              goto LABEL_2621;
            case 'h':
              if (*(_WORD *)(__s1 + 9) != 27745 || __s1[11] != 102)
                goto LABEL_2621;
              goto LABEL_2547;
            case 'i':
              if (*(_WORD *)(__s1 + 9) != 29806)
                goto LABEL_2621;
              v36 = __s1[11] - 50;
              if (v36 >= 7)
                goto LABEL_2621;
              v37 = &unk_22F4942F0;
              goto LABEL_3168;
            case 'l':
              if (*(_WORD *)(__s1 + 9) != 28271 || __s1[11] != 103)
                goto LABEL_2621;
              v4 = 0xB00000000;
              v5 = 649;
              return v4 | v5;
            default:
              if (__s1[8] != 117)
                goto LABEL_2621;
              if (*(_WORD *)(__s1 + 9) != 28265 || __s1[11] != 116)
                goto LABEL_2621;
              v4 = 0xB00000000;
              v5 = 517;
              return v4 | v5;
          }
        }
        goto LABEL_2621;
      }
      if (v29 != 103)
        goto LABEL_2621;
      if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
        goto LABEL_2621;
      v161 = __s1[4];
      switch(v161)
      {
        case 'w':
          if (*(_DWORD *)(__s1 + 5) == 1600877167 && *((_DWORD *)__s1 + 2) == 1835623519)
          {
            v4 = 0x100000000;
            v5 = 781;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 'l':
          if (*(_DWORD *)(__s1 + 5) != 1818321775 || *((_DWORD *)__s1 + 2) != 1684627308)
            goto LABEL_2621;
          break;
        case 'g':
          v162 = *((_DWORD *)__s1 + 2);
          v163 = *(_DWORD *)(__s1 + 5) == 1886744434;
          v164 = 1684627312;
LABEL_1365:
          if (!v163 || v162 != v164)
            goto LABEL_2621;
          break;
        default:
          goto LABEL_2621;
      }
LABEL_2358:
      v4 = 0x100000000;
      v5 = 782;
      return v4 | v5;
    case 13:
      switch(*__s1)
      {
        case 'c':
          if (*(_DWORD *)(__s1 + 1) == 1702260335 && *((_DWORD *)__s1 + 1) == 1601466981)
          {
            v34 = __s1[8];
            switch(__s1[8])
            {
              case 'c':
                if (*(_WORD *)(__s1 + 9) != 24936 || __s1[11] != 114)
                  goto LABEL_2621;
                v36 = __s1[12] - 50;
                if (v36 >= 7)
                  goto LABEL_2621;
                v37 = &unk_22F4943D8;
                goto LABEL_3168;
              case 'd':
              case 'e':
              case 'g':
              case 'j':
              case 'k':
                goto LABEL_2621;
              case 'f':
                if (*(_DWORD *)(__s1 + 9) != 1952542572)
                  goto LABEL_2621;
                v4 = 0xB00000000;
                v5 = 143;
                return v4 | v5;
              case 'h':
                if (*(_WORD *)(__s1 + 9) != 27745 || __s1[11] != 102)
                  goto LABEL_2621;
                v36 = __s1[12] - 50;
                if (v36 >= 7)
                  goto LABEL_2621;
                v37 = &unk_22F494410;
                goto LABEL_3168;
              case 'i':
                if (*(_DWORD *)(__s1 + 9) != 909210734)
                  goto LABEL_2621;
                v4 = 0xB00000000;
                v5 = 506;
                return v4 | v5;
              case 'l':
                if (*(_WORD *)(__s1 + 9) != 28271 || __s1[11] != 103)
                  goto LABEL_2621;
                v36 = __s1[12] - 50;
                if (v36 >= 7)
                  goto LABEL_2621;
                v37 = &unk_22F494448;
                goto LABEL_3168;
              default:
                if (v34 == 115)
                {
                  if (*(_DWORD *)(__s1 + 9) != 1953656680)
                    goto LABEL_2621;
                  v4 = 0xB00000000;
                  v5 = 319;
                  return v4 | v5;
                }
                if (v34 != 117)
                  goto LABEL_2621;
                v597 = __s1[9];
                if (v597 == 108)
                {
                  if (*((_WORD *)__s1 + 5) == 28271 && __s1[12] == 103)
                  {
                    v4 = 0xB00000000;
                    v5 = 715;
                    return v4 | v5;
                  }
                }
                else if (v597 == 105)
                {
                  if (*((_WORD *)__s1 + 5) == 29806)
                  {
                    v36 = __s1[12] - 50;
                    if (v36 < 7)
                    {
                      v37 = &unk_22F494480;
                      goto LABEL_3168;
                    }
                  }
                }
                else if (v597 == 99 && *((_WORD *)__s1 + 5) == 24936 && __s1[12] == 114)
                {
                  v4 = 0xB00000000;
                  v5 = 253;
                  return v4 | v5;
                }
                break;
            }
          }
          goto LABEL_2621;
        case 'f':
          if (*(_QWORD *)(__s1 + 1) != 0x747369645F747361 || *(_DWORD *)(__s1 + 9) != 1701015137)
            goto LABEL_2621;
          v4 = 0x100000000;
          v5 = 895;
          return v4 | v5;
        case 'g':
          if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
            goto LABEL_2621;
          v375 = __s1[4];
          if (v375 == 105)
          {
            if (*(_QWORD *)(__s1 + 5) != 0x6D69645F6567616DLL)
              goto LABEL_2621;
            v4 = 0x1B00000000;
            v5 = 2633;
            return v4 | v5;
          }
          if (v375 != 103 || *(_QWORD *)(__s1 + 5) != 0x64695F6C61626F6CLL)
            goto LABEL_2621;
          goto LABEL_2358;
        case 'i':
          v13 = *(_DWORD *)(__s1 + 9);
          v14 = *(_QWORD *)(__s1 + 1) == 0x6572677373656C73;
          v15 = 1919251553;
          goto LABEL_1396;
        case 'n':
          v377 = *(_DWORD *)(__s1 + 9);
          v378 = *(_QWORD *)(__s1 + 1) == 0x69645F6576697461;
          v379 = 1701079414;
LABEL_1535:
          if (!v378 || v377 != v379)
            goto LABEL_2621;
          v4 = 0x100000000;
          v5 = 836;
          return v4 | v5;
        case 'r':
          if (*(_QWORD *)(__s1 + 1) != 0x655F657361656C65 || *(_DWORD *)(__s1 + 9) != 1953391990)
            goto LABEL_2621;
LABEL_1408:
          v4 = 0x100000000;
          v5 = 2716;
          return v4 | v5;
        case 's':
          if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || *(_WORD *)(__s1 + 9) != 24927)
            goto LABEL_2621;
          v382 = __s1[11];
          if (v382 == 110)
          {
            if (__s1[12] != 121)
              goto LABEL_2621;
          }
          else if (v382 != 108 || __s1[12] != 108)
          {
            goto LABEL_2621;
          }
          v4 = 0x100000000;
          v5 = 23;
          return v4 | v5;
        case 'v':
          v383 = __s1[1];
          if (v383 == 115)
          {
            if (*(_DWORD *)(__s1 + 2) != 1701998452)
              goto LABEL_2621;
            v480 = __s1[6];
            if (v480 == 97)
            {
              if (*(_DWORD *)(__s1 + 7) == 1818323039 && __s1[11] == 102)
              {
                v467 = __s1[12];
LABEL_2740:
                v36 = v467 - 50;
                if (v36 < 7)
                {
                  v5 = qword_22F4944B8[v36];
                  v306 = &unk_22F4944F0;
                  goto LABEL_3169;
                }
              }
            }
            else if (v480 == 95 && *(_DWORD *)(__s1 + 7) == 1718378856 && *(_WORD *)(__s1 + 11) == 13873)
            {
              goto LABEL_1444;
            }
          }
          else if (v383 == 108
                 && *(_QWORD *)(__s1 + 2) == 0x6C61685F6164616FLL
                 && *(_QWORD *)(__s1 + 5) == 0x3631666C61685F61)
          {
LABEL_1425:
            v4 = 0x500000000;
            v5 = 1467;
            return v4 | v5;
          }
          goto LABEL_2621;
        case 'w':
          if (*(_QWORD *)(__s1 + 1) != 0x616D695F65746972 || *(_DWORD *)(__s1 + 9) != 1769301351)
            goto LABEL_2621;
          v4 = 0x1100000000;
          v5 = 2550;
          return v4 | v5;
        default:
          goto LABEL_2621;
      }
    case 14:
      v38 = *__s1;
      if (v38 <= 113)
      {
        switch(*__s1)
        {
          case 'a':
            if (*(_QWORD *)(__s1 + 1) != 0x6D635F63696D6F74 || *(_QWORD *)(__s1 + 6) != 0x67686378706D635FLL)
              goto LABEL_2621;
            v4 = 0x600000000;
            v5 = 1568;
            return v4 | v5;
          case 'c':
            if (*(_DWORD *)(__s1 + 1) == 1702260335 && *((_DWORD *)__s1 + 1) == 1601466981)
            {
              v364 = __s1[8];
              switch(__s1[8])
              {
                case 'c':
                  if (*(_DWORD *)(__s1 + 9) != 829579624 || __s1[13] != 54)
                    goto LABEL_2621;
                  v4 = 0xB00000000;
                  v5 = 242;
                  return v4 | v5;
                case 'd':
                  if (*(_DWORD *)(__s1 + 9) != 1818391919 || __s1[13] != 101)
                    goto LABEL_2621;
                  v4 = 0xB00000000;
                  v5 = 583;
                  return v4 | v5;
                case 'e':
                case 'g':
                case 'i':
                case 'j':
                case 'k':
                  goto LABEL_2621;
                case 'f':
                  if (*(_DWORD *)(__s1 + 9) != 1952542572)
                    goto LABEL_2621;
                  v36 = __s1[13] - 50;
                  if (v36 >= 7)
                    goto LABEL_2621;
                  v37 = &unk_22F494528;
                  goto LABEL_3168;
                case 'h':
                  if (*(_DWORD *)(__s1 + 9) != 828796001 || __s1[13] != 54)
                    goto LABEL_2621;
                  v4 = 0xB00000000;
                  v5 = 58;
                  return v4 | v5;
                case 'l':
                  if (*(_DWORD *)(__s1 + 9) != 828862063 || __s1[13] != 54)
                    goto LABEL_2621;
                  v4 = 0xB00000000;
                  v5 = 704;
                  return v4 | v5;
                default:
                  if (v364 == 115)
                  {
                    if (*(_DWORD *)(__s1 + 9) == 1953656680)
                    {
                      v36 = __s1[13] - 50;
                      if (v36 < 7)
                      {
                        v37 = &unk_22F494560;
                        goto LABEL_3168;
                      }
                    }
                  }
                  else
                  {
                    if (v364 != 117)
                      goto LABEL_2621;
                    v596 = __s1[9];
                    if (v596 > 107)
                    {
                      if (v596 == 108)
                      {
                        if (*((_WORD *)__s1 + 5) == 28271 && __s1[12] == 103)
                        {
                          v36 = __s1[13] - 50;
                          if (v36 < 7)
                          {
                            v37 = &unk_22F4945D0;
                            goto LABEL_3168;
                          }
                        }
                      }
                      else if (v596 == 115 && *(_DWORD *)(__s1 + 10) == 1953656680)
                      {
                        v4 = 0xB00000000;
                        v5 = 385;
                        return v4 | v5;
                      }
                    }
                    else if (v596 == 99)
                    {
                      if (*((_WORD *)__s1 + 5) == 24936 && __s1[12] == 114)
                      {
                        v36 = __s1[13] - 50;
                        if (v36 < 7)
                        {
                          v37 = &unk_22F494598;
                          goto LABEL_3168;
                        }
                      }
                    }
                    else if (v596 == 105 && *(_DWORD *)(__s1 + 10) == 909210734)
                    {
                      v4 = 0xB00000000;
                      v5 = 572;
                      return v4 | v5;
                    }
                  }
                  break;
              }
            }
            goto LABEL_2621;
          case 'e':
            if (*(_QWORD *)(__s1 + 1) != 0x6D5F65756575716ELL || *(_QWORD *)(__s1 + 6) != 0x72656B72616D5F65)
              goto LABEL_2621;
            v4 = 0x100000000;
            v5 = 2715;
            return v4 | v5;
          case 'f':
            if (*(_QWORD *)(__s1 + 1) != 0x6D726F6E5F747361 || *(_QWORD *)(__s1 + 6) != 0x657A696C616D726FLL)
              goto LABEL_2621;
            v4 = 0x100000000;
            v5 = 885;
            return v4 | v5;
          case 'g':
            if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
              goto LABEL_2621;
            v369 = __s1[4];
            if (v369 != 110)
            {
              if (v369 != 108)
                goto LABEL_2621;
              v162 = __s1[13];
              v163 = *(_QWORD *)(__s1 + 5) == 0x7A69735F6C61636FLL;
              v164 = 101;
              goto LABEL_1365;
            }
            if (*(_QWORD *)(__s1 + 5) == 0x70756F72675F6D75 && __s1[13] == 115)
              goto LABEL_2358;
            goto LABEL_2621;
          case 'i':
            if (__s1[1] != 115)
              goto LABEL_2621;
            v371 = __s1[2];
            if (v371 == 103)
            {
              if (*(_QWORD *)(__s1 + 3) == 0x7165726574616572 && *(_QWORD *)(__s1 + 6) == 0x6C61757165726574)
                goto LABEL_1401;
            }
            else if (v371 == 95
                   && *(_QWORD *)(__s1 + 3) == 0x76655F64696C6176
                   && *(_QWORD *)(__s1 + 6) == 0x746E6576655F6469)
            {
              v4 = 0x100000000;
              v5 = 2718;
              return v4 | v5;
            }
            break;
          default:
            goto LABEL_2621;
        }
        goto LABEL_2621;
      }
      if (v38 == 114)
      {
        v165 = *(_QWORD *)(__s1 + 1);
        v166 = *(_QWORD *)(__s1 + 6);
        v167 = 0x5F6D656D5F646165;
        goto LABEL_1433;
      }
      if (v38 == 118)
      {
        if (*(_QWORD *)(__s1 + 1) == 0x685F6165726F7473 && *(_QWORD *)(__s1 + 6) == 0x3631666C61685F61)
        {
LABEL_1444:
          v4 = 0x800000000;
          v5 = 1496;
          return v4 | v5;
        }
        goto LABEL_2621;
      }
      if (v38 != 119)
        goto LABEL_2621;
      if (*(_QWORD *)(__s1 + 1) != 0x756F72675F6B726FLL || *(_QWORD *)(__s1 + 4) != 0x615F70756F72675FLL)
        goto LABEL_2621;
      v177 = __s1[12];
      if (v177 == 110)
      {
        if (__s1[13] != 121)
          goto LABEL_2621;
      }
      else if (v177 != 108 || __s1[13] != 108)
      {
        goto LABEL_2621;
      }
      v4 = 0x100000000;
      v5 = 2709;
      return v4 | v5;
    case 15:
      v40 = *__s1;
      if (v40 > 114)
      {
        switch(v40)
        {
          case 's':
            if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || *(_QWORD *)(__s1 + 7) != 0x7463656C655F7075)
              goto LABEL_2621;
            v4 = 0x100000000;
            v5 = 51;
            break;
          case 'v':
            if (*(_QWORD *)(__s1 + 1) != 0x61685F65726F7473 || *(_QWORD *)(__s1 + 6) != 0x74725F666C61685FLL)
              goto LABEL_2621;
            v335 = __s1[14] - 101;
            if (v335 > 0x15 || ((1 << v335) & 0x200A01) == 0)
              goto LABEL_2621;
LABEL_1884:
            v4 = 0x800000000;
            v5 = 1423;
            break;
          case 'w':
            v165 = *(_QWORD *)(__s1 + 1);
            v166 = *(_QWORD *)(__s1 + 7);
            v167 = 0x6D656D5F65746972;
LABEL_1433:
            if (v165 != v167 || v166 != 0x65636E65665F6D65)
              goto LABEL_2621;
LABEL_1438:
            v4 = 0x100000000;
            v5 = 1507;
            break;
          default:
            goto LABEL_2621;
        }
      }
      else
      {
        switch(*__s1)
        {
          case 'a':
            v41 = __s1[1];
            if (v41 == 116)
            {
              if (*(_DWORD *)(__s1 + 2) == 1667853679 && __s1[6] == 95)
              {
                v464 = __s1[7];
                if (v464 == 102)
                {
                  if (*((_DWORD *)__s1 + 2) == 1751348325 && *(_DWORD *)(__s1 + 11) == 1919901544)
                    goto LABEL_2743;
                }
                else if (v464 == 101 && *((_DWORD *)__s1 + 2) == 1634231160 && *(_DWORD *)(__s1 + 11) == 1701277281)
                {
                  goto LABEL_2733;
                }
              }
            }
            else if (v41 == 114
                   && *(_QWORD *)(__s1 + 2) == 0x63615F746F645F6DLL
                   && *(_QWORD *)(__s1 + 7) == 0x7461735F6363615FLL)
            {
              v4 = 0x200000000;
              v5 = 141;
              return v4 | v5;
            }
            goto LABEL_2621;
          case 'b':
            if (*(_QWORD *)(__s1 + 1) != 0x5F646C6569667469 || *(_QWORD *)(__s1 + 7) != 0x747265736E695F64)
              goto LABEL_2621;
            v4 = 0x100000000;
            v5 = 103;
            return v4 | v5;
          case 'c':
            if (*(_DWORD *)(__s1 + 1) != 1702260335 || *((_DWORD *)__s1 + 1) != 1601466981)
              goto LABEL_2621;
            v309 = __s1[8];
            if (v309 <= 104)
            {
              if (v309 == 100)
              {
                if (*(_DWORD *)(__s1 + 9) != 1818391919 || __s1[13] != 101)
                  goto LABEL_2621;
                v36 = __s1[14] - 50;
                if (v36 >= 7)
                  goto LABEL_2621;
                v37 = &unk_22F494608;
LABEL_3168:
                v5 = v37[v36];
                v306 = &unk_22F494678;
LABEL_3169:
                v4 = v306[(int)v36];
                return v4 | v5;
              }
              if (v309 != 102)
                goto LABEL_2621;
              if (*(_DWORD *)(__s1 + 9) != 1952542572 || *(_WORD *)(__s1 + 13) != 13873)
                goto LABEL_2621;
              v4 = 0xB00000000;
              v5 = 120;
            }
            else
            {
              if (v309 == 105)
              {
                if (*(_WORD *)(__s1 + 9) != 29806 || __s1[11] != 95)
                  goto LABEL_2621;
                v638 = __s1[12];
                if (v638 == 115)
                {
                  if (*(_WORD *)(__s1 + 13) != 29793)
                    goto LABEL_2621;
                }
                else
                {
                  if (v638 != 114)
                    goto LABEL_2621;
                  if (__s1[13] != 116)
                    goto LABEL_2621;
                  v639 = __s1[14] - 101;
                  if (v639 > 0x15 || ((1 << v639) & 0x200A01) == 0)
                    goto LABEL_2621;
                }
LABEL_1521:
                v4 = 0xB00000000;
                v5 = 451;
                return v4 | v5;
              }
              if (v309 != 115)
              {
                if (v309 != 117)
                  goto LABEL_2621;
                v310 = __s1[9];
                if (v310 != 115)
                {
                  if (v310 == 108)
                  {
                    if (*(_DWORD *)(__s1 + 10) == 828862063 && __s1[14] == 54)
                    {
                      v4 = 0xB00000000;
                      v5 = 770;
                      return v4 | v5;
                    }
                  }
                  else if (v310 == 99 && *(_DWORD *)(__s1 + 10) == 829579624 && __s1[14] == 54)
                  {
                    v4 = 0xB00000000;
                    v5 = 308;
                    return v4 | v5;
                  }
                  goto LABEL_2621;
                }
                if (*(_DWORD *)(__s1 + 10) != 1953656680)
                  goto LABEL_2621;
                v36 = __s1[14] - 50;
                if (v36 >= 7)
                  goto LABEL_2621;
                v37 = &unk_22F494640;
                goto LABEL_3168;
              }
              if (*(_DWORD *)(__s1 + 9) != 1953656680 || *(_WORD *)(__s1 + 13) != 13873)
                goto LABEL_2621;
              v4 = 0xB00000000;
              v5 = 374;
            }
            break;
          case 'g':
            if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
              goto LABEL_2621;
            v313 = __s1[4];
            if (v313 != 105)
            {
              if (v313 != 103)
                goto LABEL_2621;
              v162 = *(unsigned __int16 *)(__s1 + 13);
              v163 = *(_QWORD *)(__s1 + 5) == 0x69735F6C61626F6CLL;
              v164 = 25978;
              goto LABEL_1365;
            }
            if (*(_DWORD *)(__s1 + 5) != 1701273965 || __s1[9] != 95)
              goto LABEL_2621;
            v561 = __s1[10];
            if (v561 != 119)
            {
              if (v561 == 100 && *(_DWORD *)(__s1 + 11) == 1752461413)
              {
                v4 = 0x300000000;
                v5 = 2630;
                return v4 | v5;
              }
              goto LABEL_2621;
            }
            if (*(_DWORD *)(__s1 + 11) != 1752458345)
              goto LABEL_2621;
            v4 = 0x2400000000;
            v5 = 2567;
            return v4 | v5;
          default:
            goto LABEL_2621;
        }
      }
      return v4 | v5;
    case 16:
      v43 = *__s1;
      if (v43 <= 102)
      {
        if (v43 != 97)
        {
          if (v43 != 99)
            goto LABEL_2621;
          if (*(_DWORD *)(__s1 + 1) != 1702260335 || *((_DWORD *)__s1 + 1) != 1601466981)
            goto LABEL_2621;
          switch(__s1[8])
          {
            case 'c':
              if (*(_DWORD *)(__s1 + 9) != 1601331560)
                goto LABEL_2621;
              v169 = __s1[13];
              if (v169 == 115)
              {
                if (*((_WORD *)__s1 + 7) != 29793)
                  goto LABEL_2621;
              }
              else
              {
                if (v169 != 114)
                  goto LABEL_2621;
                if (__s1[14] != 116)
                  goto LABEL_2621;
                v170 = __s1[15] - 101;
                if (v170 > 0x15 || ((1 << v170) & 0x200A01) == 0)
                  goto LABEL_2621;
              }
LABEL_1208:
              v4 = 0xB00000000;
              v5 = 187;
              return v4 | v5;
            case 'd':
              if (*(_DWORD *)(__s1 + 9) != 1818391919 || *((_DWORD *)__s1 + 3) != 909206892)
                goto LABEL_2621;
              v4 = 0xB00000000;
              v5 = 638;
              return v4 | v5;
            case 'e':
            case 'f':
            case 'g':
            case 'j':
            case 'k':
              goto LABEL_2621;
            case 'h':
              if (*(_DWORD *)(__s1 + 9) != 1600547937 || *(_WORD *)(__s1 + 13) != 29810)
                goto LABEL_2621;
              v630 = __s1[15] - 101;
              if (v630 > 0x15 || ((1 << v630) & 0x200A01) == 0)
                goto LABEL_2621;
LABEL_2547:
              v4 = 0xB00000000;
              v5 = 73;
              return v4 | v5;
            case 'i':
              if (*(_WORD *)(__s1 + 9) != 29806)
                goto LABEL_2621;
              switch(__s1[11])
              {
                case '2':
                  if (__s1[12] != 95)
                    goto LABEL_2621;
                  v631 = __s1[13];
                  if (v631 == 115)
                  {
                    if (*((_WORD *)__s1 + 7) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v631 != 114)
                      goto LABEL_2621;
                    if (__s1[14] != 116)
                      goto LABEL_2621;
                    v632 = __s1[15] - 101;
                    if (v632 > 0x15 || ((1 << v632) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v4 = 0xB00000000;
                  v5 = 462;
                  return v4 | v5;
                case '3':
                  if (__s1[12] != 95)
                    goto LABEL_2621;
                  v781 = __s1[13];
                  if (v781 == 115)
                  {
                    if (*((_WORD *)__s1 + 7) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v781 != 114)
                      goto LABEL_2621;
                    if (__s1[14] != 116)
                      goto LABEL_2621;
                    v782 = __s1[15] - 101;
                    if (v782 > 0x15 || ((1 << v782) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v5 = 473;
                  goto LABEL_778;
                case '4':
                  if (__s1[12] != 95)
                    goto LABEL_2621;
                  v783 = __s1[13];
                  if (v783 == 115)
                  {
                    if (*((_WORD *)__s1 + 7) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v783 != 114)
                      goto LABEL_2621;
                    if (__s1[14] != 116)
                      goto LABEL_2621;
                    v784 = __s1[15] - 101;
                    if (v784 > 0x15 || ((1 << v784) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v5 = 484;
                  goto LABEL_778;
                case '8':
                  if (__s1[12] != 95)
                    goto LABEL_2621;
                  v785 = __s1[13];
                  if (v785 == 115)
                  {
                    if (*((_WORD *)__s1 + 7) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v785 != 114)
                      goto LABEL_2621;
                    if (__s1[14] != 116)
                      goto LABEL_2621;
                    v786 = __s1[15] - 101;
                    if (v786 > 0x15 || ((1 << v786) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v5 = 495;
                  goto LABEL_778;
                default:
                  goto LABEL_2621;
              }
            case 'l':
              if (*(_DWORD *)(__s1 + 9) != 1600613999)
                goto LABEL_2621;
              v633 = __s1[13];
              if (v633 == 115)
              {
                if (*((_WORD *)__s1 + 7) != 29793)
                  goto LABEL_2621;
              }
              else
              {
                if (v633 != 114)
                  goto LABEL_2621;
                if (__s1[14] != 116)
                  goto LABEL_2621;
                v634 = __s1[15] - 101;
                if (v634 > 0x15 || ((1 << v634) & 0x200A01) == 0)
                  goto LABEL_2621;
              }
              v5 = 649;
              goto LABEL_778;
            default:
              if (__s1[8] != 117)
                goto LABEL_2621;
              v577 = __s1[9];
              if (v577 == 115)
              {
                if (*(_DWORD *)(__s1 + 10) == 1953656680 && *((_WORD *)__s1 + 7) == 13873)
                {
                  v5 = 440;
                  goto LABEL_778;
                }
                goto LABEL_2621;
              }
              if (v577 != 105)
                goto LABEL_2621;
              if (*((_WORD *)__s1 + 5) != 29806 || __s1[12] != 95)
                goto LABEL_2621;
              v579 = __s1[13];
              if (v579 == 115)
              {
                if (*((_WORD *)__s1 + 7) != 29793)
                  goto LABEL_2621;
              }
              else
              {
                if (v579 != 114)
                  goto LABEL_2621;
                if (__s1[14] != 116)
                  goto LABEL_2621;
                v580 = __s1[15] - 101;
                if (v580 > 0x15 || ((1 << v580) & 0x200A01) == 0)
                  goto LABEL_2621;
              }
              v5 = 517;
              goto LABEL_778;
          }
        }
        if (*(_QWORD *)(__s1 + 1) != 0x65665F63696D6F74 || *(_DWORD *)(__s1 + 9) != 1600676724)
          goto LABEL_2621;
        v254 = __s1[13];
        if (v254 > 114)
        {
          if (v254 == 115)
          {
            if (*((_WORD *)__s1 + 7) != 25205)
              goto LABEL_2621;
            goto LABEL_2318;
          }
          if (v254 != 120 || *((_WORD *)__s1 + 7) != 29295)
            goto LABEL_2621;
        }
        else
        {
          if (v254 != 97)
          {
            if (v254 == 109)
            {
              v255 = __s1[14];
              if (v255 == 105)
              {
                if (__s1[15] != 110)
                  goto LABEL_2621;
              }
              else if (v255 != 97 || __s1[15] != 120)
              {
                goto LABEL_2621;
              }
LABEL_2733:
              v4 = 0x1500000000;
              v5 = 1845;
              return v4 | v5;
            }
LABEL_2621:
            v5 = 0;
            v4 = 0;
            return v4 | v5;
          }
          v589 = __s1[14];
          if (v589 != 110)
          {
            if (v589 != 100 || __s1[15] != 100)
              goto LABEL_2621;
LABEL_2318:
            v4 = 0x1800000000;
            v5 = 1908;
            return v4 | v5;
          }
          if (__s1[15] != 100)
            goto LABEL_2621;
        }
LABEL_2743:
        v4 = 0xC00000000;
        v5 = 1980;
        return v4 | v5;
      }
      if (v43 != 103)
      {
        if (v43 != 115)
        {
          if (v43 != 118)
            goto LABEL_2621;
          if (*(_DWORD *)(__s1 + 1) != 1919906931 || __s1[5] != 101)
            goto LABEL_2621;
          v45 = __s1[6];
          if (v45 == 97)
          {
            if (*(_QWORD *)(__s1 + 7) != 0x74725F666C61685FLL)
              goto LABEL_2621;
            v536 = __s1[15] - 101;
            if (v536 > 0x15 || ((1 << v536) & 0x200A01) == 0)
              goto LABEL_2621;
            v5 = 1444;
          }
          else
          {
            if (v45 != 95 || *(_DWORD *)(__s1 + 7) != 1718378856)
              goto LABEL_2621;
            switch(__s1[11])
            {
              case '2':
                if (*((_WORD *)__s1 + 6) != 29279 || __s1[14] != 116)
                  goto LABEL_2621;
                v47 = __s1[15] - 101;
                if (v47 > 0x15 || ((1 << v47) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1431;
                break;
              case '3':
                if (*((_WORD *)__s1 + 6) != 29279 || __s1[14] != 116)
                  goto LABEL_2621;
                v719 = __s1[15] - 101;
                if (v719 > 0x15 || ((1 << v719) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1472;
                break;
              case '4':
                if (*((_WORD *)__s1 + 6) != 29279 || __s1[14] != 116)
                  goto LABEL_2621;
                v721 = __s1[15] - 101;
                if (v721 > 0x15 || ((1 << v721) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1480;
                break;
              case '8':
                if (*((_WORD *)__s1 + 6) != 29279 || __s1[14] != 116)
                  goto LABEL_2621;
                v723 = __s1[15] - 101;
                if (v723 > 0x15 || ((1 << v723) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1488;
                break;
              default:
                goto LABEL_2621;
            }
          }
          goto LABEL_833;
        }
        if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || *((_QWORD *)__s1 + 1) != 0x746F6C6C61625F70)
          goto LABEL_2621;
        v5 = 56;
        goto LABEL_2685;
      }
      if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
        goto LABEL_2621;
      v250 = __s1[4];
      if (v250 == 115)
      {
        if (*(_QWORD *)(__s1 + 5) != 0x70756F72675F6275 || *((_QWORD *)__s1 + 1) != 0x64695F70756F7267)
          goto LABEL_2621;
        v5 = 2761;
        goto LABEL_2685;
      }
      if (v250 != 105)
        goto LABEL_2621;
      if (*(_QWORD *)(__s1 + 5) != 0x6965685F6567616DLL || *((_QWORD *)__s1 + 1) != 0x7468676965685F65)
        goto LABEL_2621;
      v5 = 2603;
      v4 = 0x1B00000000;
      return v4 | v5;
    case 17:
      v48 = *__s1;
      if (v48 <= 114)
      {
        if (v48 != 97)
        {
          if (v48 == 99)
          {
            v283 = __s1[1];
            if (v283 != 114)
            {
              if (v283 != 111)
                goto LABEL_2621;
              if (*(_DWORD *)(__s1 + 2) != 1919252078 || *((_WORD *)__s1 + 3) != 24436)
                goto LABEL_2621;
              v285 = __s1[8];
              switch(__s1[8])
              {
                case 'c':
                  if (*(_WORD *)(__s1 + 9) != 24936 || __s1[11] != 114)
                    goto LABEL_2621;
                  break;
                case 'd':
                case 'e':
                case 'g':
                case 'j':
                case 'k':
                  goto LABEL_2621;
                case 'f':
                  if (*(_DWORD *)(__s1 + 9) != 1952542572 || *((_DWORD *)__s1 + 3) != 1953652596)
                    goto LABEL_2621;
                  v699 = __s1[16] - 101;
                  if (v699 > 0x15 || ((1 << v699) & 0x200A01) == 0)
                    goto LABEL_2621;
                  v5 = 143;
                  goto LABEL_778;
                case 'h':
                  if (*(_WORD *)(__s1 + 9) != 27745 || __s1[11] != 102)
                    goto LABEL_2621;
                  switch(__s1[12])
                  {
                    case '2':
                      if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                        goto LABEL_2621;
                      v702 = __s1[16] - 101;
                      if (v702 > 0x15 || ((1 << v702) & 0x200A01) == 0)
                        goto LABEL_2621;
                      v5 = 87;
                      break;
                    case '3':
                      if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                        goto LABEL_2621;
                      v833 = __s1[16] - 101;
                      if (v833 > 0x15 || ((1 << v833) & 0x200A01) == 0)
                        goto LABEL_2621;
                      v5 = 12;
                      break;
                    case '4':
                      if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                        goto LABEL_2621;
                      v835 = __s1[16] - 101;
                      if (v835 > 0x15 || ((1 << v835) & 0x200A01) == 0)
                        goto LABEL_2621;
                      v5 = 29;
                      break;
                    case '8':
                      if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                        goto LABEL_2621;
                      v837 = __s1[16] - 101;
                      if (v837 > 0x15 || ((1 << v837) & 0x200A01) == 0)
                        goto LABEL_2621;
                      v5 = 40;
                      break;
                    default:
                      goto LABEL_2621;
                  }
                  goto LABEL_778;
                case 'i':
                  if (*(_DWORD *)(__s1 + 9) != 909210734 || __s1[13] != 95)
                    goto LABEL_2621;
                  v704 = __s1[14];
                  if (v704 != 115)
                  {
                    if (v704 == 114 && __s1[15] == 116)
                    {
                      v532 = __s1[16];
                      goto LABEL_2012;
                    }
                    goto LABEL_2621;
                  }
                  if (*(_WORD *)(__s1 + 15) != 29793)
                    goto LABEL_2621;
                  goto LABEL_2014;
                case 'l':
                  if (*(_WORD *)(__s1 + 9) != 28271 || __s1[11] != 103)
                    goto LABEL_2621;
                  switch(__s1[12])
                  {
                    case '2':
                      if (__s1[13] != 95)
                        goto LABEL_2621;
                      v706 = __s1[14];
                      if (v706 != 115)
                      {
                        if (v706 == 114 && __s1[15] == 116)
                        {
                          v620 = __s1[16];
                          goto LABEL_2452;
                        }
                        goto LABEL_2621;
                      }
                      if (*(_WORD *)(__s1 + 15) != 29793)
                        goto LABEL_2621;
                      goto LABEL_2454;
                    case '3':
                      if (__s1[13] != 95)
                        goto LABEL_2621;
                      v838 = __s1[14];
                      if (v838 != 115)
                      {
                        if (v838 == 114 && __s1[15] == 116)
                        {
                          v766 = __s1[16];
                          goto LABEL_3226;
                        }
                        goto LABEL_2621;
                      }
                      if (*(_WORD *)(__s1 + 15) != 29793)
                        goto LABEL_2621;
                      goto LABEL_3228;
                    case '4':
                      if (__s1[13] != 95)
                        goto LABEL_2621;
                      v839 = __s1[14];
                      if (v839 != 115)
                      {
                        if (v839 == 114 && __s1[15] == 116)
                        {
                          v769 = __s1[16];
                          goto LABEL_3235;
                        }
                        goto LABEL_2621;
                      }
                      if (*(_WORD *)(__s1 + 15) != 29793)
                        goto LABEL_2621;
                      goto LABEL_3237;
                    case '8':
                      if (__s1[13] != 95)
                        goto LABEL_2621;
                      v840 = __s1[14];
                      if (v840 != 115)
                      {
                        if (v840 == 114 && __s1[15] == 116)
                        {
                          v772 = __s1[16];
                          goto LABEL_3244;
                        }
                        goto LABEL_2621;
                      }
                      if (*(_WORD *)(__s1 + 15) != 29793)
                        goto LABEL_2621;
                      break;
                    default:
                      goto LABEL_2621;
                  }
                  goto LABEL_3246;
                default:
                  if (v285 == 115)
                  {
                    if (*(_DWORD *)(__s1 + 9) != 1953656680 || __s1[13] != 95)
                      goto LABEL_2621;
                    v711 = __s1[14];
                    if (v711 != 115)
                    {
                      if (v711 == 114 && __s1[15] == 116)
                      {
                        v623 = __s1[16];
                        goto LABEL_2461;
                      }
                      goto LABEL_2621;
                    }
                    if (*(_WORD *)(__s1 + 15) != 29793)
                      goto LABEL_2621;
                    goto LABEL_2463;
                  }
                  if (v285 != 117)
                    goto LABEL_2621;
                  v657 = __s1[9];
                  if (v657 != 108)
                  {
                    if (v657 == 105)
                    {
                      if (*((_WORD *)__s1 + 5) == 29806)
                      {
                        switch(__s1[12])
                        {
                          case '2':
                            if (__s1[13] != 95)
                              goto LABEL_2621;
                            v800 = __s1[14];
                            if (v800 == 115)
                            {
                              if (*(_WORD *)(__s1 + 15) != 29793)
                                goto LABEL_2621;
                              goto LABEL_2882;
                            }
                            if (v800 == 114 && __s1[15] == 116)
                            {
                              v694 = __s1[16] - 101;
                              if (v694 <= 0x15)
                                goto LABEL_2881;
                            }
                            goto LABEL_2621;
                          case '3':
                            if (__s1[13] != 95)
                              goto LABEL_2621;
                            v853 = __s1[14];
                            if (v853 == 115)
                            {
                              if (*(_WORD *)(__s1 + 15) != 29793)
                                goto LABEL_2621;
                              goto LABEL_3459;
                            }
                            if (v853 == 114 && __s1[15] == 116)
                            {
                              v822 = __s1[16] - 101;
                              if (v822 <= 0x15)
                                goto LABEL_3458;
                            }
                            goto LABEL_2621;
                          case '4':
                            if (__s1[13] != 95)
                              goto LABEL_2621;
                            v854 = __s1[14];
                            if (v854 == 115)
                            {
                              if (*(_WORD *)(__s1 + 15) != 29793)
                                goto LABEL_2621;
                              goto LABEL_3467;
                            }
                            if (v854 == 114 && __s1[15] == 116)
                            {
                              v824 = __s1[16] - 101;
                              if (v824 <= 0x15)
                                goto LABEL_3466;
                            }
                            goto LABEL_2621;
                          case '8':
                            if (__s1[13] != 95)
                              goto LABEL_2621;
                            v855 = __s1[14];
                            if (v855 == 115)
                            {
                              if (*(_WORD *)(__s1 + 15) != 29793)
                                goto LABEL_2621;
                              goto LABEL_3475;
                            }
                            if (v855 == 114 && __s1[15] == 116)
                            {
                              v826 = __s1[16] - 101;
                              if (v826 <= 0x15)
                                goto LABEL_3474;
                            }
                            break;
                          default:
                            goto LABEL_2621;
                        }
                      }
                      goto LABEL_2621;
                    }
                    if (v657 != 99 || *(_DWORD *)(__s1 + 10) != 1601331560)
                      goto LABEL_2621;
                    v658 = __s1[14];
                    if (v658 != 115)
                    {
                      if (v658 == 114 && __s1[15] == 116)
                      {
                        v269 = __s1[16];
                        goto LABEL_952;
                      }
                      goto LABEL_2621;
                    }
                    if (*(_WORD *)(__s1 + 15) != 29793)
                      goto LABEL_2621;
                    goto LABEL_954;
                  }
                  if (*(_DWORD *)(__s1 + 10) != 1600613999)
                    goto LABEL_2621;
                  v799 = __s1[14];
                  if (v799 == 115)
                  {
                    if (*(_WORD *)(__s1 + 15) != 29793)
                      goto LABEL_2621;
                    goto LABEL_2872;
                  }
                  if (v799 == 114 && __s1[15] == 116)
                  {
                    v692 = __s1[16] - 101;
                    if (v692 <= 0x15)
                      goto LABEL_2871;
                  }
                  goto LABEL_2621;
              }
              switch(__s1[12])
              {
                case '2':
                  if (__s1[13] != 95)
                    goto LABEL_2621;
                  v287 = __s1[14];
                  if (v287 == 115)
                  {
                    if (*(_WORD *)(__s1 + 15) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v287 != 114)
                      goto LABEL_2621;
                    if (__s1[15] != 116)
                      goto LABEL_2621;
                    v288 = __s1[16] - 101;
                    if (v288 > 0x15 || ((1 << v288) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v5 = 198;
                  goto LABEL_778;
                case '3':
                  if (__s1[13] != 95)
                    goto LABEL_2621;
                  v827 = __s1[14];
                  if (v827 == 115)
                  {
                    if (*(_WORD *)(__s1 + 15) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v827 != 114)
                      goto LABEL_2621;
                    if (__s1[15] != 116)
                      goto LABEL_2621;
                    v828 = __s1[16] - 101;
                    if (v828 > 0x15 || ((1 << v828) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v5 = 209;
                  goto LABEL_778;
                case '4':
                  if (__s1[13] != 95)
                    goto LABEL_2621;
                  v829 = __s1[14];
                  if (v829 == 115)
                  {
                    if (*(_WORD *)(__s1 + 15) != 29793)
                      goto LABEL_2621;
                  }
                  else
                  {
                    if (v829 != 114)
                      goto LABEL_2621;
                    if (__s1[15] != 116)
                      goto LABEL_2621;
                    v830 = __s1[16] - 101;
                    if (v830 > 0x15 || ((1 << v830) & 0x200A01) == 0)
                      goto LABEL_2621;
                  }
                  v5 = 220;
                  goto LABEL_778;
                case '8':
                  if (__s1[13] != 95)
                    goto LABEL_2621;
                  v831 = __s1[14];
                  if (v831 != 115)
                  {
                    if (v831 == 114 && __s1[15] == 116)
                    {
                      v779 = __s1[16];
                      goto LABEL_3269;
                    }
                    goto LABEL_2621;
                  }
                  if (*(_WORD *)(__s1 + 15) != 29793)
                    goto LABEL_2621;
                  goto LABEL_3271;
                default:
                  goto LABEL_2621;
              }
            }
            if (*(_QWORD *)(__s1 + 2) != 0x6573755F65746165 || *(_QWORD *)(__s1 + 9) != 0x746E6576655F7265)
              goto LABEL_2621;
            v5 = 2717;
          }
          else
          {
            if (v48 != 103)
              goto LABEL_2621;
            if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
              goto LABEL_2621;
            v50 = __s1[4];
            if (v50 == 103)
            {
              if (*(_QWORD *)(__s1 + 5) != 0x666F5F6C61626F6CLL || *(_DWORD *)(__s1 + 13) != 1952805734)
                goto LABEL_2621;
              v5 = 782;
            }
            else
            {
              if (v50 != 100)
                goto LABEL_2621;
              if (*(_QWORD *)(__s1 + 5) != 0x715F746C75616665 || *(_DWORD *)(__s1 + 13) != 1702192501)
                goto LABEL_2621;
              v5 = 2721;
            }
          }
          goto LABEL_2685;
        }
        if (*(_QWORD *)(__s1 + 1) != 0x6C665F63696D6F74 || *(_QWORD *)(__s1 + 9) != 0x7261656C635F6761)
          goto LABEL_2621;
        v5 = 2016;
        v4 = 0x300000000;
        return v4 | v5;
      }
      if (v48 != 115)
      {
        if (v48 == 118)
        {
          if (*(_DWORD *)(__s1 + 1) != 1919906931 || __s1[5] != 101)
            goto LABEL_2621;
          v297 = __s1[6];
          if (v297 == 97)
          {
            if (*(_DWORD *)(__s1 + 7) != 1818323039 || __s1[11] != 102)
              goto LABEL_2621;
            switch(__s1[12])
            {
              case '2':
                if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                  goto LABEL_2621;
                v558 = __s1[16] - 101;
                if (v558 > 0x15 || ((1 << v558) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1431;
                break;
              case '3':
                if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                  goto LABEL_2621;
                v733 = __s1[16] - 101;
                if (v733 > 0x15 || ((1 << v733) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1472;
                break;
              case '4':
                if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                  goto LABEL_2621;
                v735 = __s1[16] - 101;
                if (v735 > 0x15 || ((1 << v735) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1480;
                break;
              case '8':
                if (*(_WORD *)(__s1 + 13) != 29279 || __s1[15] != 116)
                  goto LABEL_2621;
                v737 = __s1[16] - 101;
                if (v737 > 0x15 || ((1 << v737) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 1488;
                break;
              default:
                goto LABEL_2621;
            }
          }
          else
          {
            if (v297 != 95)
              goto LABEL_2621;
            if (*(_QWORD *)(__s1 + 7) != 0x725F3631666C6168 || __s1[15] != 116)
              goto LABEL_2621;
            v239 = __s1[16];
LABEL_830:
            v240 = v239 - 101;
            if (v240 > 0x15 || ((1 << v240) & 0x200A01) == 0)
              goto LABEL_2621;
            v5 = 1496;
          }
LABEL_833:
          v4 = 0x800000000;
          return v4 | v5;
        }
        if (v48 != 119)
          goto LABEL_2621;
        if (*(_QWORD *)(__s1 + 1) != 0x756F72675F746961 || *(_QWORD *)(__s1 + 9) != 0x73746E6576655F70)
          goto LABEL_2621;
        v5 = 1514;
LABEL_2685:
        v4 = 0x100000000;
        return v4 | v5;
      }
      if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || __s1[9] != 95)
        goto LABEL_2621;
      v294 = __s1[10];
      if (v294 == 115)
      {
        if (*(_DWORD *)(__s1 + 11) != 1717990760 || *(_WORD *)(__s1 + 15) != 25964)
          goto LABEL_2621;
LABEL_2137:
        v5 = 98;
        goto LABEL_2685;
      }
      if (v294 != 98)
        goto LABEL_2621;
      if (*(_DWORD *)(__s1 + 11) != 1769108065 || *(_WORD *)(__s1 + 15) != 29285)
        goto LABEL_2621;
      v5 = 2763;
      goto LABEL_823;
    case 18:
      v52 = *__s1;
      if (v52 > 117)
      {
        if (v52 == 118)
        {
          if (*(_QWORD *)(__s1 + 1) == 0x685F6165726F7473 && *(_QWORD *)(__s1 + 9) == 0x74725F3631666C61)
          {
            v239 = __s1[17];
            goto LABEL_830;
          }
        }
        else if (v52 == 119)
        {
          v150 = *(_QWORD *)(__s1 + 1) == 0x756F72675F6B726FLL && *(_QWORD *)(__s1 + 9) == 0x6569727261625F70;
          if (v150 && __s1[17] == 114)
          {
            v5 = 1505;
            goto LABEL_823;
          }
        }
      }
      else if (v52 == 99)
      {
        if (*(_DWORD *)(__s1 + 1) == 1702260335 && *((_DWORD *)__s1 + 1) == 1601466981)
        {
          v206 = __s1[8];
          switch(__s1[8])
          {
            case 'c':
              if (*(_DWORD *)(__s1 + 9) != 829579624 || *(_WORD *)(__s1 + 13) != 24374)
                goto LABEL_2621;
              v208 = __s1[15];
              if (v208 == 115)
              {
                if (*((_WORD *)__s1 + 8) != 29793)
                  goto LABEL_2621;
                goto LABEL_2214;
              }
              if (v208 == 114 && __s1[16] == 116)
              {
                v209 = __s1[17] - 101;
                if (v209 <= 0x15 && ((1 << v209) & 0x200A01) != 0)
                  goto LABEL_2214;
              }
              goto LABEL_2621;
            case 'd':
              if (*(_QWORD *)(__s1 + 9) != 0x74725F656C62756FLL)
                goto LABEL_2621;
              v605 = __s1[17] - 101;
              if (v605 > 0x15 || ((1 << v605) & 0x200A01) == 0)
                goto LABEL_2621;
              v5 = 583;
              goto LABEL_778;
            case 'e':
            case 'g':
            case 'i':
            case 'j':
            case 'k':
              goto LABEL_2621;
            case 'f':
              if (*(_DWORD *)(__s1 + 9) != 1952542572)
                goto LABEL_2621;
              switch(__s1[13])
              {
                case '2':
                  if (*((_WORD *)__s1 + 7) != 29279 || __s1[16] != 116)
                    goto LABEL_2621;
                  v607 = __s1[17] - 101;
                  if (v607 > 0x15 || ((1 << v607) & 0x200A01) == 0)
                    goto LABEL_2621;
                  v5 = 154;
                  break;
                case '3':
                  if (*((_WORD *)__s1 + 7) != 29279 || __s1[16] != 116)
                    goto LABEL_2621;
                  v754 = __s1[17] - 101;
                  if (v754 > 0x15 || ((1 << v754) & 0x200A01) == 0)
                    goto LABEL_2621;
                  v5 = 165;
                  break;
                case '4':
                  if (*((_WORD *)__s1 + 7) != 29279 || __s1[16] != 116)
                    goto LABEL_2621;
                  v756 = __s1[17] - 101;
                  if (v756 > 0x15 || ((1 << v756) & 0x200A01) == 0)
                    goto LABEL_2621;
                  v5 = 176;
                  break;
                case '8':
                  if (*((_WORD *)__s1 + 7) != 29279 || __s1[16] != 116)
                    goto LABEL_2621;
                  v758 = __s1[17] - 101;
                  if (v758 > 0x15 || ((1 << v758) & 0x200A01) == 0)
                    goto LABEL_2621;
                  v5 = 1;
                  break;
                default:
                  goto LABEL_2621;
              }
              goto LABEL_778;
            case 'h':
              if (*(_QWORD *)(__s1 + 9) != 0x74725F3631666C61)
                goto LABEL_2621;
              v608 = __s1[17] - 101;
              if (v608 > 0x15 || ((1 << v608) & 0x200A01) == 0)
                goto LABEL_2621;
              v5 = 58;
              goto LABEL_778;
            case 'l':
              if (*(_DWORD *)(__s1 + 9) != 828862063 || *(_WORD *)(__s1 + 13) != 24374)
                goto LABEL_2621;
              v610 = __s1[15];
              if (v610 == 115)
              {
                if (*((_WORD *)__s1 + 8) != 29793)
                  goto LABEL_2621;
                goto LABEL_741;
              }
              if (v610 == 114 && __s1[16] == 116)
              {
                v611 = __s1[17] - 101;
                if (v611 <= 0x15 && ((1 << v611) & 0x200A01) != 0)
                  goto LABEL_741;
              }
              goto LABEL_2621;
            default:
              if (v206 == 115)
              {
                if (*(_DWORD *)(__s1 + 9) == 1953656680)
                {
                  switch(__s1[13])
                  {
                    case '2':
                      if (__s1[14] != 95)
                        goto LABEL_2621;
                      v648 = __s1[15];
                      if (v648 == 115)
                      {
                        if (*((_WORD *)__s1 + 8) != 29793)
                          goto LABEL_2621;
                        goto LABEL_2224;
                      }
                      if (v648 == 114 && __s1[16] == 116)
                      {
                        v649 = __s1[17] - 101;
                        if (v649 <= 0x15 && ((1 << v649) & 0x200A01) != 0)
                          goto LABEL_2224;
                      }
                      goto LABEL_2621;
                    case '3':
                      if (__s1[14] != 95)
                        goto LABEL_2621;
                      v795 = __s1[15];
                      if (v795 == 115)
                      {
                        if (*((_WORD *)__s1 + 8) != 29793)
                          goto LABEL_2621;
                        goto LABEL_3101;
                      }
                      if (v795 == 114 && __s1[16] == 116)
                      {
                        v796 = __s1[17] - 101;
                        if (v796 <= 0x15 && ((1 << v796) & 0x200A01) != 0)
                          goto LABEL_3101;
                      }
                      goto LABEL_2621;
                    case '4':
                      if (__s1[14] != 95)
                        goto LABEL_2621;
                      v787 = __s1[15];
                      if (v787 == 115)
                      {
                        if (*((_WORD *)__s1 + 8) != 29793)
                          goto LABEL_2621;
                        goto LABEL_3109;
                      }
                      if (v787 == 114 && __s1[16] == 116)
                      {
                        v788 = __s1[17] - 101;
                        if (v788 <= 0x15 && ((1 << v788) & 0x200A01) != 0)
                          goto LABEL_3109;
                      }
                      goto LABEL_2621;
                    case '8':
                      if (__s1[14] != 95)
                        goto LABEL_2621;
                      v797 = __s1[15];
                      if (v797 == 115)
                      {
                        if (*((_WORD *)__s1 + 8) != 29793)
                          goto LABEL_2621;
                        goto LABEL_3117;
                      }
                      if (v797 == 114 && __s1[16] == 116)
                      {
                        v798 = __s1[17] - 101;
                        if (v798 <= 0x15 && ((1 << v798) & 0x200A01) != 0)
                          goto LABEL_3117;
                      }
                      break;
                    default:
                      goto LABEL_2621;
                  }
                }
                goto LABEL_2621;
              }
              if (v206 != 117)
                goto LABEL_2621;
              v527 = __s1[9];
              if (v527 > 107)
              {
                if (v527 == 108)
                {
                  if (*((_WORD *)__s1 + 5) == 28271 && __s1[12] == 103)
                  {
                    switch(__s1[13])
                    {
                      case '2':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v728 = __s1[15];
                        if (v728 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_2841;
                        }
                        if (v728 == 114 && __s1[16] == 116)
                        {
                          v729 = __s1[17] - 101;
                          if (v729 <= 0x15 && ((1 << v729) & 0x200A01) != 0)
                            goto LABEL_2841;
                        }
                        goto LABEL_2621;
                      case '3':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v847 = __s1[15];
                        if (v847 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3431;
                        }
                        if (v847 == 114 && __s1[16] == 116)
                        {
                          v848 = __s1[17] - 101;
                          if (v848 <= 0x15 && ((1 << v848) & 0x200A01) != 0)
                            goto LABEL_3431;
                        }
                        goto LABEL_2621;
                      case '4':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v849 = __s1[15];
                        if (v849 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3439;
                        }
                        if (v849 == 114 && __s1[16] == 116)
                        {
                          v850 = __s1[17] - 101;
                          if (v850 <= 0x15 && ((1 << v850) & 0x200A01) != 0)
                            goto LABEL_3439;
                        }
                        goto LABEL_2621;
                      case '8':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v851 = __s1[15];
                        if (v851 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3447;
                        }
                        if (v851 == 114 && __s1[16] == 116)
                        {
                          v852 = __s1[17] - 101;
                          if (v852 <= 0x15 && ((1 << v852) & 0x200A01) != 0)
                            goto LABEL_3447;
                        }
                        break;
                      default:
                        goto LABEL_2621;
                    }
                  }
                  goto LABEL_2621;
                }
                if (v527 != 115)
                  goto LABEL_2621;
                if (*(_DWORD *)(__s1 + 10) != 1953656680 || __s1[14] != 95)
                  goto LABEL_2621;
                v671 = __s1[15];
                if (v671 == 115)
                {
                  if (*((_WORD *)__s1 + 8) != 29793)
                    goto LABEL_2621;
                  goto LABEL_2611;
                }
                if (v671 == 114 && __s1[16] == 116)
                {
                  v672 = __s1[17] - 101;
                  if (v672 <= 0x15 && ((1 << v672) & 0x200A01) != 0)
                    goto LABEL_2611;
                }
              }
              else
              {
                if (v527 == 99)
                {
                  if (*((_WORD *)__s1 + 5) == 24936 && __s1[12] == 114)
                  {
                    switch(__s1[13])
                    {
                      case '2':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v725 = __s1[15];
                        if (v725 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_2827;
                        }
                        if (v725 == 114 && __s1[16] == 116)
                        {
                          v726 = __s1[17] - 101;
                          if (v726 <= 0x15 && ((1 << v726) & 0x200A01) != 0)
                            goto LABEL_2827;
                        }
                        goto LABEL_2621;
                      case '3':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v841 = __s1[15];
                        if (v841 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3407;
                        }
                        if (v841 == 114 && __s1[16] == 116)
                        {
                          v842 = __s1[17] - 101;
                          if (v842 <= 0x15 && ((1 << v842) & 0x200A01) != 0)
                            goto LABEL_3407;
                        }
                        goto LABEL_2621;
                      case '4':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v843 = __s1[15];
                        if (v843 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3415;
                        }
                        if (v843 == 114 && __s1[16] == 116)
                        {
                          v844 = __s1[17] - 101;
                          if (v844 <= 0x15 && ((1 << v844) & 0x200A01) != 0)
                            goto LABEL_3415;
                        }
                        goto LABEL_2621;
                      case '8':
                        if (__s1[14] != 95)
                          goto LABEL_2621;
                        v845 = __s1[15];
                        if (v845 == 115)
                        {
                          if (*((_WORD *)__s1 + 8) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3423;
                        }
                        if (v845 == 114 && __s1[16] == 116)
                        {
                          v846 = __s1[17] - 101;
                          if (v846 <= 0x15 && ((1 << v846) & 0x200A01) != 0)
                            goto LABEL_3423;
                        }
                        break;
                      default:
                        goto LABEL_2621;
                    }
                  }
                  goto LABEL_2621;
                }
                if (v527 != 105)
                  goto LABEL_2621;
                if (*(_DWORD *)(__s1 + 10) != 909210734 || __s1[14] != 95)
                  goto LABEL_2621;
                v529 = __s1[15];
                if (v529 == 115)
                {
                  if (*((_WORD *)__s1 + 8) != 29793)
                    goto LABEL_2621;
                  goto LABEL_1771;
                }
                if (v529 == 114 && __s1[16] == 116)
                {
                  v530 = __s1[17] - 101;
                  if (v530 <= 0x15 && ((1 << v530) & 0x200A01) != 0)
                    goto LABEL_1771;
                }
              }
              break;
          }
        }
      }
      else if (v52 == 103 && *(_WORD *)(__s1 + 1) == 29797 && __s1[3] == 95)
      {
        v54 = __s1[4];
        if (v54 == 115)
        {
          v55 = *(_QWORD *)(__s1 + 10);
          v56 = *(_QWORD *)(__s1 + 5) == 0x70756F72675F6275;
          v57 = 0x657A69735F70756FLL;
        }
        else
        {
          if (v54 != 110)
            goto LABEL_2621;
          v55 = *(_QWORD *)(__s1 + 10);
          v56 = *(_QWORD *)(__s1 + 5) == 0x675F6275735F6D75;
          v57 = 0x7370756F72675F62;
        }
        if (v56 && v55 == v57)
        {
LABEL_1975:
          v5 = 2761;
          goto LABEL_2685;
        }
      }
      goto LABEL_2621;
    case 19:
      HIDWORD(v58) = *__s1 - 99;
      LODWORD(v58) = HIDWORD(v58);
      switch((v58 >> 1))
      {
        case 0u:
          if (*(_DWORD *)(__s1 + 1) != 1702260335 || *((_DWORD *)__s1 + 1) != 1601466981)
            goto LABEL_2621;
          v60 = __s1[8];
          if (v60 <= 104)
          {
            if (v60 != 100)
            {
              if (v60 == 102 && *(_QWORD *)(__s1 + 9) == 0x725F363174616F6CLL && __s1[17] == 116)
              {
                v483 = __s1[18] - 101;
                if (v483 <= 0x15 && ((1 << v483) & 0x200A01) != 0)
                {
                  v5 = 120;
                  goto LABEL_778;
                }
              }
              goto LABEL_2621;
            }
            if (*(_DWORD *)(__s1 + 9) != 1818391919 || __s1[13] != 101)
              goto LABEL_2621;
            switch(__s1[14])
            {
              case '2':
                if (*(_WORD *)(__s1 + 15) != 29279 || __s1[17] != 116)
                  goto LABEL_2621;
                v592 = __s1[18] - 101;
                if (v592 > 0x15 || ((1 << v592) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 594;
                break;
              case '3':
                if (*(_WORD *)(__s1 + 15) != 29279 || __s1[17] != 116)
                  goto LABEL_2621;
                v746 = __s1[18] - 101;
                if (v746 > 0x15 || ((1 << v746) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 605;
                break;
              case '4':
                if (*(_WORD *)(__s1 + 15) != 29279 || __s1[17] != 116)
                  goto LABEL_2621;
                v748 = __s1[18] - 101;
                if (v748 > 0x15 || ((1 << v748) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 616;
                break;
              case '8':
                if (*(_WORD *)(__s1 + 15) != 29279 || __s1[17] != 116)
                  goto LABEL_2621;
                v750 = __s1[18] - 101;
                if (v750 > 0x15 || ((1 << v750) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 627;
                break;
              default:
                goto LABEL_2621;
            }
            goto LABEL_778;
          }
          switch(v60)
          {
            case 'i':
              if (*(_QWORD *)(__s1 + 9) == 0x725F7461735F746ELL && __s1[17] == 116)
              {
                v585 = __s1[18] - 101;
                if (v585 <= 0x15 && ((1 << v585) & 0x200A01) != 0)
                {
                  v5 = 451;
                  goto LABEL_778;
                }
              }
              goto LABEL_2621;
            case 's':
              if (*(_DWORD *)(__s1 + 9) != 1953656680 || *((_DWORD *)__s1 + 3) != 1597387124)
                goto LABEL_2621;
              v587 = __s1[16];
              if (v587 == 115)
              {
                if (*(_WORD *)(__s1 + 17) != 29793)
                  goto LABEL_2621;
                goto LABEL_653;
              }
              if (v587 == 114 && __s1[17] == 116)
              {
                v588 = __s1[18] - 101;
                if (v588 <= 0x15 && ((1 << v588) & 0x200A01) != 0)
                  goto LABEL_653;
              }
              break;
            case 'u':
              v61 = __s1[9];
              switch(v61)
              {
                case 's':
                  if (*(_DWORD *)(__s1 + 10) == 1953656680)
                  {
                    switch(__s1[14])
                    {
                      case '2':
                        if (__s1[15] != 95)
                          goto LABEL_2621;
                        v674 = __s1[16];
                        if (v674 == 115)
                        {
                          if (*(_WORD *)(__s1 + 17) != 29793)
                            goto LABEL_2621;
                          goto LABEL_2570;
                        }
                        if (v674 == 114 && __s1[17] == 116)
                        {
                          v675 = __s1[18] - 101;
                          if (v675 <= 0x15 && ((1 << v675) & 0x200A01) != 0)
                            goto LABEL_2570;
                        }
                        goto LABEL_2621;
                      case '3':
                        if (__s1[15] != 95)
                          goto LABEL_2621;
                        v803 = __s1[16];
                        if (v803 == 115)
                        {
                          if (*(_WORD *)(__s1 + 17) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3309;
                        }
                        if (v803 == 114 && __s1[17] == 116)
                        {
                          v804 = __s1[18] - 101;
                          if (v804 <= 0x15 && ((1 << v804) & 0x200A01) != 0)
                            goto LABEL_3309;
                        }
                        goto LABEL_2621;
                      case '4':
                        if (__s1[15] != 95)
                          goto LABEL_2621;
                        v805 = __s1[16];
                        if (v805 == 115)
                        {
                          if (*(_WORD *)(__s1 + 17) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3317;
                        }
                        if (v805 == 114 && __s1[17] == 116)
                        {
                          v806 = __s1[18] - 101;
                          if (v806 <= 0x15 && ((1 << v806) & 0x200A01) != 0)
                            goto LABEL_3317;
                        }
                        goto LABEL_2621;
                      case '8':
                        if (__s1[15] != 95)
                          goto LABEL_2621;
                        v807 = __s1[16];
                        if (v807 == 115)
                        {
                          if (*(_WORD *)(__s1 + 17) != 29793)
                            goto LABEL_2621;
                          goto LABEL_3325;
                        }
                        if (v807 == 114 && __s1[17] == 116)
                        {
                          v808 = __s1[18] - 101;
                          if (v808 <= 0x15 && ((1 << v808) & 0x200A01) != 0)
                            goto LABEL_3325;
                        }
                        break;
                      default:
                        goto LABEL_2621;
                    }
                  }
                  goto LABEL_2621;
                case 'l':
                  if (*(_DWORD *)(__s1 + 10) != 828862063 || *((_WORD *)__s1 + 7) != 24374)
                    goto LABEL_2621;
                  v677 = __s1[16];
                  if (v677 == 115)
                  {
                    if (*(_WORD *)(__s1 + 17) != 29793)
                      goto LABEL_2621;
                    goto LABEL_2578;
                  }
                  if (v677 == 114 && __s1[17] == 116)
                  {
                    v678 = __s1[18] - 101;
                    if (v678 <= 0x15 && ((1 << v678) & 0x200A01) != 0)
                      goto LABEL_2578;
                  }
                  break;
                case 'c':
                  if (*(_DWORD *)(__s1 + 10) != 829579624 || *((_WORD *)__s1 + 7) != 24374)
                    goto LABEL_2621;
                  v63 = __s1[16];
                  if (v63 == 115)
                  {
                    if (*(_WORD *)(__s1 + 17) != 29793)
                      goto LABEL_2621;
                    goto LABEL_1834;
                  }
                  if (v63 == 114 && __s1[17] == 116)
                  {
                    v64 = __s1[18] - 101;
                    if (v64 <= 0x15 && ((1 << v64) & 0x200A01) != 0)
                      goto LABEL_1834;
                  }
                  break;
                default:
                  goto LABEL_2621;
              }
              break;
            default:
              goto LABEL_2621;
          }
          break;
        case 2u:
          if (*(_QWORD *)(__s1 + 1) != 0x6C61636F6C5F7465
            || *(_QWORD *)(__s1 + 9) != 0x5F7261656E696C5FLL
            || *(_WORD *)(__s1 + 17) != 25705)
          {
            goto LABEL_2621;
          }
          goto LABEL_706;
        case 3u:
          if (*(_QWORD *)(__s1 + 1) != 0x5F64696C61765F73
            || *(_QWORD *)(__s1 + 9) != 0x5F65767265736572
            || *(_WORD *)(__s1 + 17) != 25705)
          {
            goto LABEL_2621;
          }
          v5 = 2714;
          goto LABEL_2685;
        case 8u:
          if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275
            || *(_QWORD *)(__s1 + 9) != 0x616364616F72625FLL
            || *(_WORD *)(__s1 + 17) != 29811)
          {
            goto LABEL_2621;
          }
          v5 = 24;
          goto LABEL_725;
        default:
          goto LABEL_2621;
      }
      goto LABEL_2621;
    case 20:
      v65 = *__s1;
      switch(*__s1)
      {
        case 'a':
          if (*(_QWORD *)(__s1 + 1) != 0x6F6C5F63696D6F74
            || *(_QWORD *)(__s1 + 9) != 0x696C7078655F6461
            || *(_QWORD *)(__s1 + 12) != 0x746963696C707865)
          {
            goto LABEL_2621;
          }
          v5 = 1803;
          goto LABEL_810;
        case 'b':
        case 'e':
        case 'f':
          goto LABEL_2621;
        case 'c':
          if (*(_DWORD *)(__s1 + 1) == 1702260335 && *((_DWORD *)__s1 + 1) == 1601466981)
          {
            switch(__s1[8])
            {
              case 'c':
                if (*(_QWORD *)(__s1 + 9) != 0x5F7461735F726168 || *(_WORD *)(__s1 + 17) != 29810)
                  goto LABEL_2621;
                v258 = __s1[19] - 101;
                if (v258 > 0x15 || ((1 << v258) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 187;
                goto LABEL_778;
              case 'd':
                if (*(_QWORD *)(__s1 + 9) != 0x5F3631656C62756FLL || *(_WORD *)(__s1 + 17) != 29810)
                  goto LABEL_2621;
                v613 = __s1[19] - 101;
                if (v613 > 0x15 || ((1 << v613) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 638;
                goto LABEL_778;
              case 'e':
              case 'f':
              case 'g':
              case 'h':
              case 'j':
              case 'k':
                goto LABEL_2621;
              case 'i':
                if (*(_WORD *)(__s1 + 9) != 29806)
                  goto LABEL_2621;
                switch(__s1[11])
                {
                  case '2':
                    if (*((_DWORD *)__s1 + 3) != 1952543583 || *(_DWORD *)(__s1 + 15) != 1953652596)
                      goto LABEL_2621;
                    v615 = __s1[19] - 101;
                    if (v615 > 0x15 || ((1 << v615) & 0x200A01) == 0)
                      goto LABEL_2621;
                    v5 = 462;
                    break;
                  case '3':
                    if (*((_DWORD *)__s1 + 3) != 1952543583 || *(_DWORD *)(__s1 + 15) != 1953652596)
                      goto LABEL_2621;
                    v760 = __s1[19] - 101;
                    if (v760 > 0x15 || ((1 << v760) & 0x200A01) == 0)
                      goto LABEL_2621;
                    v5 = 473;
                    break;
                  case '4':
                    if (*((_DWORD *)__s1 + 3) != 1952543583 || *(_DWORD *)(__s1 + 15) != 1953652596)
                      goto LABEL_2621;
                    v762 = __s1[19] - 101;
                    if (v762 > 0x15 || ((1 << v762) & 0x200A01) == 0)
                      goto LABEL_2621;
                    v5 = 484;
                    break;
                  case '8':
                    if (*((_DWORD *)__s1 + 3) != 1952543583 || *(_DWORD *)(__s1 + 15) != 1953652596)
                      goto LABEL_2621;
                    v764 = __s1[19] - 101;
                    if (v764 > 0x15 || ((1 << v764) & 0x200A01) == 0)
                      goto LABEL_2621;
                    v5 = 495;
                    break;
                  default:
                    goto LABEL_2621;
                }
                goto LABEL_778;
              case 'l':
                if (*(_QWORD *)(__s1 + 9) != 0x5F7461735F676E6FLL || *(_WORD *)(__s1 + 17) != 29810)
                  goto LABEL_2621;
                v617 = __s1[19] - 101;
                if (v617 > 0x15 || ((1 << v617) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 649;
                goto LABEL_778;
              default:
                if (__s1[8] != 117)
                  goto LABEL_2621;
                v574 = __s1[9];
                if (v574 != 115)
                {
                  if (v574 == 105 && *(_QWORD *)(__s1 + 10) == 0x725F7461735F746ELL && __s1[18] == 116)
                  {
                    v576 = __s1[19] - 101;
                    if (v576 <= 0x15 && ((1 << v576) & 0x200A01) != 0)
                    {
                      v5 = 517;
                      goto LABEL_778;
                    }
                  }
                  goto LABEL_2621;
                }
                if (*(_DWORD *)(__s1 + 10) != 1953656680 || *(_DWORD *)(__s1 + 13) != 1597387124)
                  goto LABEL_2621;
                v696 = __s1[17];
                if (v696 == 115)
                {
                  if (*((_WORD *)__s1 + 9) != 29793)
                    goto LABEL_2621;
                  goto LABEL_777;
                }
                if (v696 == 114 && __s1[18] == 116)
                {
                  v697 = __s1[19] - 101;
                  if (v697 <= 0x15 && ((1 << v697) & 0x200A01) != 0)
                    goto LABEL_777;
                }
                break;
            }
          }
          goto LABEL_2621;
        case 'd':
          if (*(_QWORD *)(__s1 + 1) != 0x61703878345F746FLL || *(_QWORD *)(__s1 + 6) != 0x5F64656B63617038)
            goto LABEL_2621;
          v260 = __s1[14];
          if (v260 == 117)
          {
            if (*(_DWORD *)(__s1 + 15) != 1852399475 || __s1[19] != 116)
              goto LABEL_2621;
          }
          else
          {
            if (v260 != 115)
              goto LABEL_2621;
            v261 = __s1[15];
            if (v261 != 117 && v261 != 115)
              goto LABEL_2621;
            if (*((_DWORD *)__s1 + 4) != 1953392991)
              goto LABEL_2621;
          }
          v5 = 132;
          goto LABEL_2685;
        case 'g':
          if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
            goto LABEL_2621;
          v263 = __s1[4];
          if (v263 == 105)
          {
            if (*(_QWORD *)(__s1 + 5) == 0x7272615F6567616DLL && *(_QWORD *)(__s1 + 12) == 0x657A69735F796172)
            {
              v5 = 2660;
              v4 = 0xF00000000;
              return v4 | v5;
            }
          }
          else if (v263 == 103
                 && *(_QWORD *)(__s1 + 5) == 0x696C5F6C61626F6CLL
                 && *(_QWORD *)(__s1 + 12) == 0x64695F7261656E69)
          {
LABEL_706:
            v5 = 784;
            goto LABEL_2685;
          }
          goto LABEL_2621;
        default:
          if (v65 != 115)
          {
            if (v65 == 119)
            {
              v171 = *(_QWORD *)(__s1 + 1) == 0x756F72675F6B726FLL && *(_QWORD *)(__s1 + 9) == 0x6364616F72625F70;
              if (v171 && *(_QWORD *)(__s1 + 12) == 0x7473616364616F72)
              {
                v5 = 2710;
                goto LABEL_725;
              }
            }
            goto LABEL_2621;
          }
          if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || __s1[9] != 95)
            goto LABEL_2621;
          v337 = __s1[10];
          if (v337 == 115)
          {
            if (*(_QWORD *)(__s1 + 11) == 0x755F656C66667568 && __s1[19] == 112)
              goto LABEL_766;
          }
          else
          {
            if (v337 != 114)
              goto LABEL_2621;
            if (*(_DWORD *)(__s1 + 11) != 1668637797 || *(_WORD *)(__s1 + 15) != 24421)
              goto LABEL_2621;
            v339 = __s1[17];
            if (v339 != 109)
            {
              if (v339 != 97 || *((_WORD *)__s1 + 9) != 25700)
                goto LABEL_2621;
              goto LABEL_3376;
            }
            v709 = __s1[18];
            if (v709 == 105)
            {
              if (__s1[19] != 110)
                goto LABEL_2621;
              goto LABEL_3376;
            }
            if (v709 == 97 && __s1[19] == 120)
              goto LABEL_3376;
          }
          goto LABEL_2621;
      }
    case 21:
      v68 = *__s1;
      switch(*__s1)
      {
        case 'a':
          v69 = __s1[1];
          if (v69 == 116)
          {
            if (*(_QWORD *)(__s1 + 2) == 0x6F74735F63696D6FLL
              && *(_QWORD *)(__s1 + 10) == 0x696C7078655F6572
              && *(_QWORD *)(__s1 + 13) == 0x746963696C707865)
            {
              v5 = 1595;
              goto LABEL_810;
            }
          }
          else if (v69 == 115)
          {
            v70 = *(_QWORD *)(__s1 + 2) == 0x6B726F775F636E79 && *(_QWORD *)(__s1 + 10) == 0x635F70756F72675FLL;
            if (v70 && *(_QWORD *)(__s1 + 13) == 0x79706F635F70756FLL)
            {
              v5 = 1510;
              goto LABEL_823;
            }
          }
          goto LABEL_2621;
        case 'b':
        case 'e':
        case 'f':
          goto LABEL_2621;
        case 'c':
          if (*(_DWORD *)(__s1 + 1) != 1702260335 || *((_DWORD *)__s1 + 1) != 1601466981)
            goto LABEL_2621;
          v266 = __s1[8];
          if (v266 <= 107)
          {
            if (v266 != 99)
            {
              if (v266 == 105
                && *(_QWORD *)(__s1 + 9) == 0x7461735F3631746ELL
                && *(_QWORD *)(__s1 + 12) == 0x74725F7461735F36)
              {
                v532 = __s1[20];
LABEL_2012:
                v533 = v532 - 101;
                if (v533 <= 0x15 && ((1 << v533) & 0x200A01) != 0)
                {
LABEL_2014:
                  v5 = 506;
                  goto LABEL_778;
                }
              }
              goto LABEL_2621;
            }
            if (*(_WORD *)(__s1 + 9) != 24936 || __s1[11] != 114)
              goto LABEL_2621;
            switch(__s1[12])
            {
              case '2':
                if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                  goto LABEL_2621;
                v627 = __s1[20] - 101;
                if (v627 > 0x15 || ((1 << v627) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 198;
                break;
              case '3':
                if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                  goto LABEL_2621;
                v775 = __s1[20] - 101;
                if (v775 > 0x15 || ((1 << v775) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 209;
                break;
              case '4':
                if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                  goto LABEL_2621;
                v777 = __s1[20] - 101;
                if (v777 > 0x15 || ((1 << v777) & 0x200A01) == 0)
                  goto LABEL_2621;
                v5 = 220;
                break;
              case '8':
                if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                  goto LABEL_2621;
                v779 = __s1[20];
LABEL_3269:
                v780 = v779 - 101;
                if (v780 > 0x15 || ((1 << v780) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3271:
                v5 = 231;
                break;
              default:
                goto LABEL_2621;
            }
          }
          else
          {
            switch(v266)
            {
              case 'l':
                if (*(_WORD *)(__s1 + 9) != 28271 || __s1[11] != 103)
                  goto LABEL_2621;
                switch(__s1[12])
                {
                  case '2':
                    if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                      goto LABEL_2621;
                    v620 = __s1[20];
LABEL_2452:
                    v621 = v620 - 101;
                    if (v621 > 0x15 || ((1 << v621) & 0x200A01) == 0)
                      goto LABEL_2621;
LABEL_2454:
                    v5 = 660;
                    break;
                  case '3':
                    if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                      goto LABEL_2621;
                    v766 = __s1[20];
LABEL_3226:
                    v767 = v766 - 101;
                    if (v767 > 0x15 || ((1 << v767) & 0x200A01) == 0)
                      goto LABEL_2621;
LABEL_3228:
                    v5 = 671;
                    break;
                  case '4':
                    if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                      goto LABEL_2621;
                    v769 = __s1[20];
LABEL_3235:
                    v770 = v769 - 101;
                    if (v770 > 0x15 || ((1 << v770) & 0x200A01) == 0)
                      goto LABEL_2621;
LABEL_3237:
                    v5 = 682;
                    break;
                  case '8':
                    if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                      goto LABEL_2621;
                    v772 = __s1[20];
LABEL_3244:
                    v773 = v772 - 101;
                    if (v773 > 0x15 || ((1 << v773) & 0x200A01) == 0)
                      goto LABEL_2621;
LABEL_3246:
                    v5 = 693;
                    break;
                  default:
                    goto LABEL_2621;
                }
                break;
              case 's':
                if (*(_QWORD *)(__s1 + 9) == 0x7461735F74726F68 && *(_QWORD *)(__s1 + 12) == 0x74725F7461735F74)
                {
                  v623 = __s1[20];
LABEL_2461:
                  v624 = v623 - 101;
                  if (v624 <= 0x15 && ((1 << v624) & 0x200A01) != 0)
                  {
LABEL_2463:
                    v5 = 319;
                    goto LABEL_778;
                  }
                }
                goto LABEL_2621;
              case 'u':
                v267 = __s1[9];
                if (v267 == 108)
                {
                  if (*(_QWORD *)(__s1 + 10) != 0x5F7461735F676E6FLL || *((_WORD *)__s1 + 9) != 29810)
                    goto LABEL_2621;
                  v692 = __s1[20] - 101;
                  if (v692 > 0x15)
                    goto LABEL_2621;
LABEL_2871:
                  if (((1 << v692) & 0x200A01) == 0)
                    goto LABEL_2621;
LABEL_2872:
                  v5 = 715;
                }
                else
                {
                  if (v267 != 105)
                  {
                    if (v267 == 99 && *(_QWORD *)(__s1 + 10) == 0x5F7461735F726168 && *((_WORD *)__s1 + 9) == 29810)
                    {
                      v269 = __s1[20];
LABEL_952:
                      v270 = v269 - 101;
                      if (v270 <= 0x15 && ((1 << v270) & 0x200A01) != 0)
                      {
LABEL_954:
                        v5 = 253;
                        goto LABEL_778;
                      }
                    }
                    goto LABEL_2621;
                  }
                  if (*((_WORD *)__s1 + 5) != 29806)
                    goto LABEL_2621;
                  switch(__s1[12])
                  {
                    case '2':
                      if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                        goto LABEL_2621;
                      v694 = __s1[20] - 101;
                      if (v694 > 0x15)
                        goto LABEL_2621;
LABEL_2881:
                      if (((1 << v694) & 0x200A01) == 0)
                        goto LABEL_2621;
LABEL_2882:
                      v5 = 528;
                      break;
                    case '3':
                      if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                        goto LABEL_2621;
                      v822 = __s1[20] - 101;
                      if (v822 > 0x15)
                        goto LABEL_2621;
LABEL_3458:
                      if (((1 << v822) & 0x200A01) == 0)
                        goto LABEL_2621;
LABEL_3459:
                      v5 = 539;
                      break;
                    case '4':
                      if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                        goto LABEL_2621;
                      v824 = __s1[20] - 101;
                      if (v824 > 0x15)
                        goto LABEL_2621;
LABEL_3466:
                      if (((1 << v824) & 0x200A01) == 0)
                        goto LABEL_2621;
LABEL_3467:
                      v5 = 550;
                      break;
                    case '8':
                      if (*(_DWORD *)(__s1 + 13) != 1952543583 || *((_DWORD *)__s1 + 4) != 1953652596)
                        goto LABEL_2621;
                      v826 = __s1[20] - 101;
                      if (v826 > 0x15)
                        goto LABEL_2621;
LABEL_3474:
                      if (((1 << v826) & 0x200A01) == 0)
                        goto LABEL_2621;
LABEL_3475:
                      v5 = 561;
                      break;
                    default:
                      goto LABEL_2621;
                  }
                }
                break;
              default:
                goto LABEL_2621;
            }
          }
          goto LABEL_778;
        case 'd':
          if (*(_QWORD *)(__s1 + 1) != 0x61703878345F746FLL
            || *(_QWORD *)(__s1 + 9) != 0x5F75755F64656B63
            || *(_DWORD *)(__s1 + 17) != 1953393013)
          {
            goto LABEL_2621;
          }
          v5 = 131;
          goto LABEL_2685;
        case 'g':
          if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
            goto LABEL_2621;
          v274 = __s1[4];
          if (v274 != 115)
          {
            if (v274 == 105
              && *(_QWORD *)(__s1 + 5) == 0x6D756E5F6567616DLL
              && *(_QWORD *)(__s1 + 13) == 0x73656C706D61735FLL)
            {
              v5 = 2749;
              v4 = 0xC00000000;
              return v4 | v5;
            }
            goto LABEL_2621;
          }
          if (*(_QWORD *)(__s1 + 5) != 0x70756F72675F6275 || __s1[13] != 95)
            goto LABEL_2621;
          v550 = __s1[14];
          switch(v550)
          {
            case 'l':
              v712 = __s1[15];
              if (v712 != 116 && v712 != 101)
                goto LABEL_2621;
              break;
            case 'g':
              v713 = __s1[15];
              if (v713 != 116)
              {
                if (v713 != 101)
                  goto LABEL_2621;
                v551 = __s1[20];
                v552 = *((_DWORD *)__s1 + 4) == 1935764831;
                v553 = 107;
LABEL_2978:
                if (!v552 || v551 != v553)
                  goto LABEL_2621;
LABEL_2989:
                v5 = 72;
                goto LABEL_2685;
              }
              break;
            case 'e':
              v551 = *(unsigned __int16 *)(__s1 + 19);
              v552 = *(_DWORD *)(__s1 + 15) == 1634557809;
              v553 = 27507;
              goto LABEL_2978;
            default:
              goto LABEL_2621;
          }
          if (*((_DWORD *)__s1 + 4) != 1935764831 || __s1[20] != 107)
            goto LABEL_2621;
          goto LABEL_2989;
        default:
          if (v68 == 115)
          {
            v340 = __s1[1];
            if (v340 == 117)
            {
              if (*(_QWORD *)(__s1 + 2) == 0x5F70756F72675F62
                && *(_QWORD *)(__s1 + 10) == 0x5F656C6666756873
                && *(_QWORD *)(__s1 + 13) == 0x726F785F656C6666)
              {
                goto LABEL_2137;
              }
            }
            else if (v340 == 101)
            {
              v341 = *(_QWORD *)(__s1 + 2) == 0x655F726573755F74 && *(_QWORD *)(__s1 + 10) == 0x6174735F746E6576;
              if (v341 && *(_QWORD *)(__s1 + 13) == 0x7375746174735F74)
              {
                v5 = 2719;
                goto LABEL_2685;
              }
            }
          }
          else
          {
            if (v68 != 119)
              goto LABEL_2621;
            v173 = *(_QWORD *)(__s1 + 1) == 0x756F72675F6B726FLL && *(_QWORD *)(__s1 + 9) == 0x6563756465725F70;
            if (!v173 || __s1[17] != 95)
              goto LABEL_2621;
            v175 = __s1[18];
            if (v175 != 109)
            {
              if (v175 != 97 || *(_WORD *)(__s1 + 19) != 25700)
                goto LABEL_2621;
              goto LABEL_2943;
            }
            v572 = __s1[19];
            if (v572 == 105)
            {
              if (__s1[20] != 110)
                goto LABEL_2621;
              goto LABEL_2943;
            }
            if (v572 == 97 && __s1[20] == 120)
              goto LABEL_2943;
          }
          goto LABEL_2621;
      }
    case 22:
      HIDWORD(v72) = *__s1 - 97;
      LODWORD(v72) = HIDWORD(v72);
      switch((v72 >> 1))
      {
        case 0u:
          if (*(_QWORD *)(__s1 + 1) != 0x6F775F63696D6F74
            || *(_QWORD *)(__s1 + 9) != 0x5F6D6574695F6B72
            || *(_QWORD *)(__s1 + 14) != 0x65636E65665F6D65)
          {
            goto LABEL_2621;
          }
          v5 = 1781;
          goto LABEL_2685;
        case 1u:
          if (*(_DWORD *)(__s1 + 1) != 1702260335 || *((_DWORD *)__s1 + 1) != 1601466981)
            goto LABEL_2621;
          v217 = __s1[8];
          if (v217 <= 114)
          {
            if (v217 == 99)
            {
              if (*(_QWORD *)(__s1 + 9) == 0x61735F3631726168 && *(_DWORD *)(__s1 + 17) == 1953652596)
              {
                v569 = __s1[21] - 101;
                if (v569 <= 0x15 && ((1 << v569) & 0x200A01) != 0)
                {
LABEL_2214:
                  v5 = 242;
                  goto LABEL_778;
                }
              }
            }
            else if (v217 == 108
                   && *(_QWORD *)(__s1 + 9) == 0x61735F3631676E6FLL
                   && *(_DWORD *)(__s1 + 17) == 1953652596)
            {
              v219 = __s1[21] - 101;
              if (v219 <= 0x15 && ((1 << v219) & 0x200A01) != 0)
              {
LABEL_741:
                v5 = 704;
                goto LABEL_778;
              }
            }
            goto LABEL_2621;
          }
          if (v217 == 115)
          {
            if (*(_DWORD *)(__s1 + 9) != 1953656680)
              goto LABEL_2621;
            switch(__s1[13])
            {
              case '2':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v571 = __s1[21] - 101;
                if (v571 > 0x15 || ((1 << v571) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_2224:
                v5 = 330;
                break;
              case '3':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v739 = __s1[21] - 101;
                if (v739 > 0x15 || ((1 << v739) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3101:
                v5 = 341;
                break;
              case '4':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v741 = __s1[21] - 101;
                if (v741 > 0x15 || ((1 << v741) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3109:
                v5 = 352;
                break;
              case '8':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v743 = __s1[21] - 101;
                if (v743 > 0x15 || ((1 << v743) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3117:
                v5 = 363;
                break;
              default:
                goto LABEL_2621;
            }
            goto LABEL_778;
          }
          if (v217 != 117)
            goto LABEL_2621;
          v472 = __s1[9];
          if (v472 > 107)
          {
            if (v472 != 108)
            {
              if (v472 == 115
                && *(_QWORD *)(__s1 + 10) == 0x7461735F74726F68
                && *(_QWORD *)(__s1 + 13) == 0x74725F7461735F74)
              {
                v653 = __s1[21] - 101;
                if (v653 <= 0x15 && ((1 << v653) & 0x200A01) != 0)
                {
LABEL_2611:
                  v5 = 385;
                  goto LABEL_778;
                }
              }
              goto LABEL_2621;
            }
            if (*((_WORD *)__s1 + 5) != 28271 || __s1[12] != 103)
              goto LABEL_2621;
            switch(__s1[13])
            {
              case '2':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v688 = __s1[21] - 101;
                if (v688 > 0x15 || ((1 << v688) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_2841:
                v5 = 726;
                break;
              case '3':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v816 = __s1[21] - 101;
                if (v816 > 0x15 || ((1 << v816) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3431:
                v5 = 737;
                break;
              case '4':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v818 = __s1[21] - 101;
                if (v818 > 0x15 || ((1 << v818) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3439:
                v5 = 748;
                break;
              case '8':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v820 = __s1[21] - 101;
                if (v820 > 0x15 || ((1 << v820) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3447:
                v5 = 759;
                break;
              default:
                goto LABEL_2621;
            }
          }
          else
          {
            if (v472 != 99)
            {
              if (v472 == 105
                && *(_QWORD *)(__s1 + 10) == 0x7461735F3631746ELL
                && *(_QWORD *)(__s1 + 13) == 0x74725F7461735F36)
              {
                v474 = __s1[21] - 101;
                if (v474 <= 0x15 && ((1 << v474) & 0x200A01) != 0)
                {
LABEL_1771:
                  v5 = 572;
                  goto LABEL_778;
                }
              }
              goto LABEL_2621;
            }
            if (*((_WORD *)__s1 + 5) != 24936 || __s1[12] != 114)
              goto LABEL_2621;
            switch(__s1[13])
            {
              case '2':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v685 = __s1[21] - 101;
                if (v685 > 0x15 || ((1 << v685) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_2827:
                v5 = 264;
                break;
              case '3':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v810 = __s1[21] - 101;
                if (v810 > 0x15 || ((1 << v810) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3407:
                v5 = 275;
                break;
              case '4':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v812 = __s1[21] - 101;
                if (v812 > 0x15 || ((1 << v812) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3415:
                v5 = 286;
                break;
              case '8':
                if (*(_DWORD *)(__s1 + 14) != 1952543583 || *(_DWORD *)(__s1 + 17) != 1953652596)
                  goto LABEL_2621;
                v814 = __s1[21] - 101;
                if (v814 > 0x15 || ((1 << v814) & 0x200A01) == 0)
                  goto LABEL_2621;
LABEL_3423:
                v5 = 297;
                break;
              default:
                goto LABEL_2621;
            }
          }
          goto LABEL_778;
        case 3u:
          if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
            goto LABEL_2621;
          v221 = __s1[4];
          if (v221 == 115)
          {
            if (*(_QWORD *)(__s1 + 5) == 0x70756F72675F6275
              && *(_QWORD *)(__s1 + 13) == 0x695F6C61636F6C5FLL
              && __s1[21] == 100)
            {
              goto LABEL_1975;
            }
          }
          else if (v221 == 109)
          {
            v222 = *(_QWORD *)(__s1 + 5) == 0x675F6275735F7861 && *(_QWORD *)(__s1 + 13) == 0x7A69735F70756F72;
            if (v222 && __s1[21] == 101)
              goto LABEL_1975;
          }
          break;
        case 9u:
          if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275
            || *(_QWORD *)(__s1 + 9) != 0x656C66667568735FLL
            || *(_QWORD *)(__s1 + 14) != 0x6E776F645F656C66)
          {
            goto LABEL_2621;
          }
LABEL_766:
          v5 = 99;
          goto LABEL_2685;
        default:
          goto LABEL_2621;
      }
      goto LABEL_2621;
    case 23:
      v75 = *__s1;
      if (v75 == 103)
      {
        if (*(_WORD *)(__s1 + 1) != 29797 || __s1[3] != 95)
          goto LABEL_2621;
        v191 = __s1[4];
        if (v191 != 105)
        {
          if (v191 == 101)
          {
            v192 = *(_QWORD *)(__s1 + 5) == 0x5F6465756575716ELL && *(_QWORD *)(__s1 + 13) == 0x69735F6C61636F6CLL;
            if (v192 && *(_WORD *)(__s1 + 21) == 25978)
            {
              v5 = 783;
              goto LABEL_2685;
            }
          }
          goto LABEL_2621;
        }
        v486 = *(_QWORD *)(__s1 + 5) == 0x6168635F6567616DLL && *(_QWORD *)(__s1 + 13) == 0x64726F5F6C656E6ELL;
        if (!v486 || *(_WORD *)(__s1 + 21) != 29285)
          goto LABEL_2621;
LABEL_1823:
        v5 = 2567;
        v4 = 0x2400000000;
        return v4 | v5;
      }
      if (v75 != 99)
      {
        if (v75 == 98)
        {
          v76 = *(_QWORD *)(__s1 + 1) == 0x5F646C6569667469 && *(_QWORD *)(__s1 + 9) == 0x5F74636172747865;
          if (v76 && *(_QWORD *)(__s1 + 15) == 0x64656E6769735F74)
          {
            v5 = 104;
            goto LABEL_823;
          }
        }
        goto LABEL_2621;
      }
      if (*(_DWORD *)(__s1 + 1) == 1702260335 && *((_DWORD *)__s1 + 1) == 1601466981)
      {
        v195 = __s1[8];
        if (v195 == 117)
        {
          v488 = __s1[9];
          switch(v488)
          {
            case 's':
              if (*(_DWORD *)(__s1 + 10) != 1953656680)
                goto LABEL_2621;
              switch(__s1[14])
              {
                case '2':
                  if (*(_DWORD *)(__s1 + 15) != 1952543583 || *(_DWORD *)(__s1 + 18) != 1953652596)
                    goto LABEL_2621;
                  v645 = __s1[22] - 101;
                  if (v645 > 0x15 || ((1 << v645) & 0x200A01) == 0)
                    goto LABEL_2621;
LABEL_2570:
                  v5 = 396;
                  break;
                case '3':
                  if (*(_DWORD *)(__s1 + 15) != 1952543583 || *(_DWORD *)(__s1 + 18) != 1953652596)
                    goto LABEL_2621;
                  v790 = __s1[22] - 101;
                  if (v790 > 0x15 || ((1 << v790) & 0x200A01) == 0)
                    goto LABEL_2621;
LABEL_3309:
                  v5 = 407;
                  break;
                case '4':
                  if (*(_DWORD *)(__s1 + 15) != 1952543583 || *(_DWORD *)(__s1 + 18) != 1953652596)
                    goto LABEL_2621;
                  v792 = __s1[22] - 101;
                  if (v792 > 0x15 || ((1 << v792) & 0x200A01) == 0)
                    goto LABEL_2621;
LABEL_3317:
                  v5 = 418;
                  break;
                case '8':
                  if (*(_DWORD *)(__s1 + 15) != 1952543583 || *(_DWORD *)(__s1 + 18) != 1953652596)
                    goto LABEL_2621;
                  v794 = __s1[22] - 101;
                  if (v794 > 0x15 || ((1 << v794) & 0x200A01) == 0)
                    goto LABEL_2621;
LABEL_3325:
                  v5 = 429;
                  break;
                default:
                  goto LABEL_2621;
              }
              break;
            case 'l':
              if (*(_QWORD *)(__s1 + 10) != 0x61735F3631676E6FLL || *(_DWORD *)(__s1 + 18) != 1953652596)
                goto LABEL_2621;
              v647 = __s1[22] - 101;
              if (v647 > 0x15 || ((1 << v647) & 0x200A01) == 0)
                goto LABEL_2621;
LABEL_2578:
              v5 = 770;
              break;
            case 'c':
              if (*(_QWORD *)(__s1 + 10) != 0x61735F3631726168 || *(_DWORD *)(__s1 + 18) != 1953652596)
                goto LABEL_2621;
              v490 = __s1[22] - 101;
              if (v490 > 0x15 || ((1 << v490) & 0x200A01) == 0)
                goto LABEL_2621;
LABEL_1834:
              v5 = 308;
              break;
            default:
              goto LABEL_2621;
          }
        }
        else
        {
          if (v195 != 115)
            goto LABEL_2621;
          if (*(_QWORD *)(__s1 + 9) != 0x735F363174726F68 || *(_QWORD *)(__s1 + 14) != 0x74725F7461735F36)
            goto LABEL_2621;
          v197 = __s1[22] - 101;
          if (v197 > 0x15 || ((1 << v197) & 0x200A01) == 0)
            goto LABEL_2621;
LABEL_653:
          v5 = 374;
        }
LABEL_778:
        v4 = 0xB00000000;
        return v4 | v5;
      }
      goto LABEL_2621;
    case 24:
      HIDWORD(v78) = *__s1 - 97;
      LODWORD(v78) = HIDWORD(v78);
      switch((v78 >> 1))
      {
        case 0u:
          if (*(_DWORD *)(__s1 + 1) != 1768779636 || *(_WORD *)(__s1 + 5) != 24419)
            goto LABEL_2621;
          v80 = __s1[7];
          if (v80 != 102)
          {
            if (v80 == 101
              && *((_QWORD *)__s1 + 1) == 0x5F65676E61686378
              && *((_QWORD *)__s1 + 2) == 0x746963696C707865)
            {
              goto LABEL_2635;
            }
            goto LABEL_2621;
          }
          v515 = __s1[8];
          if (v515 != 108)
          {
            if (v515 == 101
              && *(_QWORD *)(__s1 + 9) == 0x655F726F5F686374
              && *((_QWORD *)__s1 + 2) == 0x746963696C707865)
            {
              goto LABEL_2641;
            }
            goto LABEL_2621;
          }
          if (*(_QWORD *)(__s1 + 9) != 0x5F747365745F6761 || *((_QWORD *)__s1 + 2) != 0x7465735F646E615FLL)
            goto LABEL_2621;
          v5 = 2025;
LABEL_725:
          v4 = 0x300000000;
          break;
        case 1u:
          if (*(_QWORD *)(__s1 + 1) != 0x755F747265766E6FLL
            || *(_QWORD *)(__s1 + 9) != 0x5F363174726F6873
            || *(_QWORD *)(__s1 + 15) != 0x74725F7461735F36)
          {
            goto LABEL_2621;
          }
          v228 = __s1[23] - 101;
          if (v228 > 0x15 || ((1 << v228) & 0x200A01) == 0)
            goto LABEL_2621;
LABEL_777:
          v5 = 440;
          goto LABEL_778;
        case 3u:
          if (*(_QWORD *)(__s1 + 1) != 0x6567616D695F7465
            || *(_QWORD *)(__s1 + 9) != 0x70696D5F6D756E5FLL
            || *((_QWORD *)__s1 + 2) != 0x736C6576656C5F70)
          {
            goto LABEL_2621;
          }
          v5 = 2728;
          v4 = 0x1500000000;
          return v4 | v5;
        case 9u:
          if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275
            || *(_QWORD *)(__s1 + 9) != 0x65737265766E695FLL
            || *((_QWORD *)__s1 + 2) != 0x746F6C6C61625F65)
          {
            goto LABEL_2621;
          }
          v5 = 57;
          goto LABEL_2685;
        default:
          goto LABEL_2621;
      }
      return v4 | v5;
    case 25:
      v82 = *__s1;
      if (v82 == 115)
      {
        if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || __s1[9] != 95)
          goto LABEL_2621;
        v199 = __s1[10];
        if (v199 == 110)
        {
          if (*(_QWORD *)(__s1 + 11) != 0x6F66696E755F6E6FLL || *(_DWORD *)(__s1 + 19) != 1633643890)
            goto LABEL_2621;
          v492 = __s1[23];
          if (v492 == 110)
          {
            if (__s1[24] != 121)
              goto LABEL_2621;
          }
          else if (v492 != 108 || __s1[24] != 108)
          {
            goto LABEL_2621;
          }
          v5 = 52;
        }
        else
        {
          if (v199 != 98)
            goto LABEL_2621;
          v200 = __s1[11];
          if (v200 == 114)
          {
            if (*(_QWORD *)(__s1 + 12) != 0x5F7473616364616FLL || *(_QWORD *)(__s1 + 17) != 0x74737269665F7473)
              goto LABEL_2621;
            v5 = 55;
          }
          else
          {
            if (v200 != 97)
              goto LABEL_2621;
            if (*(_QWORD *)(__s1 + 12) != 0x6E69665F746F6C6CLL || *((_WORD *)__s1 + 10) != 24420)
              goto LABEL_2621;
            v202 = __s1[22];
            if (v202 != 109 && v202 != 108)
              goto LABEL_2621;
            if (*(_WORD *)(__s1 + 23) != 25203)
              goto LABEL_2621;
LABEL_2175:
            v5 = 71;
          }
        }
        goto LABEL_2685;
      }
      if (v82 == 98)
      {
        if (*(_QWORD *)(__s1 + 1) == 0x5F646C6569667469
          && *(_QWORD *)(__s1 + 9) == 0x5F74636172747865
          && *(_QWORD *)(__s1 + 17) == 0x64656E6769736E75)
        {
          v5 = 106;
          goto LABEL_823;
        }
        goto LABEL_2621;
      }
      if (v82 != 97)
        goto LABEL_2621;
      if (*(_QWORD *)(__s1 + 1) != 0x65665F63696D6F74 || *(_DWORD *)(__s1 + 9) != 1600676724)
        goto LABEL_2621;
      v84 = __s1[13];
      if (v84 > 114)
      {
        if (v84 == 115)
        {
          if (*(_QWORD *)(__s1 + 14) != 0x696C7078655F6275 || *(_QWORD *)(__s1 + 17) != 0x746963696C707865)
            goto LABEL_2621;
          goto LABEL_2102;
        }
        if (v84 != 120)
          goto LABEL_2621;
        if (*(_QWORD *)(__s1 + 14) != 0x696C7078655F726FLL || *(_QWORD *)(__s1 + 17) != 0x746963696C707865)
          goto LABEL_2621;
      }
      else
      {
        if (v84 != 97)
        {
          if (v84 != 109)
            goto LABEL_2621;
          v85 = __s1[14];
          if (v85 == 105)
          {
            v86 = *(_QWORD *)(__s1 + 15);
            v87 = 0x63696C7078655F6ELL;
          }
          else
          {
            if (v85 != 97)
              goto LABEL_2621;
            v86 = *(_QWORD *)(__s1 + 15);
            v87 = 0x63696C7078655F78;
          }
          if (v86 != v87 || *(_WORD *)(__s1 + 23) != 29801)
            goto LABEL_2621;
LABEL_2635:
          v5 = 1866;
LABEL_810:
          v4 = 0x2A00000000;
          return v4 | v5;
        }
        v544 = __s1[14];
        if (v544 != 110)
        {
          if (v544 != 100)
            goto LABEL_2621;
          if (*(_QWORD *)(__s1 + 15) != 0x63696C7078655F64 || *(_WORD *)(__s1 + 23) != 29801)
            goto LABEL_2621;
LABEL_2102:
          v5 = 1932;
          v4 = 0x3000000000;
          return v4 | v5;
        }
        if (*(_QWORD *)(__s1 + 15) != 0x63696C7078655F64 || *(_WORD *)(__s1 + 23) != 29801)
          goto LABEL_2621;
      }
LABEL_2641:
      v5 = 1992;
      v4 = 0x1800000000;
      return v4 | v5;
    case 26:
      v88 = *__s1;
      if (v88 == 115)
      {
        if (*(_QWORD *)(__s1 + 1) == 0x70756F72675F6275
          && *(_QWORD *)(__s1 + 9) == 0x5F746F6C6C61625FLL
          && *(_QWORD *)(__s1 + 17) == 0x6E756F635F746962
          && __s1[25] == 116)
        {
          v5 = 70;
          goto LABEL_2685;
        }
        goto LABEL_2621;
      }
      if (v88 != 97)
        goto LABEL_2621;
      v89 = *(_QWORD *)(__s1 + 1) == 0x6C665F63696D6F74 && *(_QWORD *)(__s1 + 9) == 0x7261656C635F6761;
      v90 = v89 && *(_QWORD *)(__s1 + 17) == 0x6963696C7078655FLL;
      if (!v90 || __s1[25] != 116)
        goto LABEL_2621;
      v5 = 2019;
LABEL_356:
      v4 = 0x600000000;
      return v4 | v5;
    case 27:
      if (*(_DWORD *)__s1 != 1601463655)
        goto LABEL_2621;
      v92 = __s1[4];
      if (v92 == 105)
      {
        if (*(_QWORD *)(__s1 + 5) == 0x6168635F6567616DLL
          && *(_QWORD *)(__s1 + 13) == 0x7461645F6C656E6ELL
          && *(_QWORD *)(__s1 + 19) == 0x657079745F617461)
        {
          goto LABEL_1823;
        }
      }
      else if (v92 == 101)
      {
        v93 = *(_QWORD *)(__s1 + 5) == 0x5F6465756575716ELL && *(_QWORD *)(__s1 + 13) == 0x5F6275735F6D756ELL;
        if (v93 && *(_QWORD *)(__s1 + 19) == 0x7370756F72675F62)
        {
          v5 = 2762;
          goto LABEL_2685;
        }
      }
      goto LABEL_2621;
    case 28:
      v95 = *__s1;
      if (v95 <= 99)
      {
        if (v95 != 97)
        {
          if (v95 == 99)
          {
            v96 = *(_QWORD *)(__s1 + 1) == 0x655F657275747061 && *(_QWORD *)(__s1 + 9) == 0x6F72705F746E6576;
            v97 = v96 && *(_QWORD *)(__s1 + 17) == 0x695F676E696C6966;
            if (v97 && *(_QWORD *)(__s1 + 20) == 0x6F666E695F676E69)
            {
              v5 = 2720;
              goto LABEL_2685;
            }
          }
          goto LABEL_2621;
        }
        v104 = *(_QWORD *)(__s1 + 20);
        v106 = *(_QWORD *)(__s1 + 1) == 0x6F635F63696D6F74
            && *(_QWORD *)(__s1 + 9) == 0x78655F657261706DLL
            && *(_QWORD *)(__s1 + 17) == 0x775F65676E616863;
        v107 = 0x6B6165775F65676ELL;
        goto LABEL_804;
      }
      if (v95 == 100)
      {
        if (*(_QWORD *)(__s1 + 1) != 0x735F6363615F746FLL
          || *(_QWORD *)(__s1 + 9) != 0x61703878345F7461
          || *(_QWORD *)(__s1 + 14) != 0x5F64656B63617038)
        {
          goto LABEL_2621;
        }
        v243 = __s1[22];
        if (v243 == 117)
        {
          if (*(_DWORD *)(__s1 + 23) != 1852399475 || __s1[27] != 116)
            goto LABEL_2621;
        }
        else
        {
          if (v243 != 115)
            goto LABEL_2621;
          v244 = __s1[23];
          if (v244 != 117 && v244 != 115)
            goto LABEL_2621;
          if (*((_DWORD *)__s1 + 6) != 1953392991)
            goto LABEL_2621;
        }
        v5 = 134;
        goto LABEL_2685;
      }
      if (v95 != 115)
        goto LABEL_2621;
      if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275 || __s1[9] != 95)
        goto LABEL_2621;
      v153 = __s1[10];
      if (v153 != 115)
      {
        if (v153 == 98)
        {
          v154 = *(_QWORD *)(__s1 + 11) == 0x69625F746F6C6C61 && *(_QWORD *)(__s1 + 19) == 0x6361727478655F74;
          if (v154 && __s1[27] == 116)
          {
            v5 = 69;
            goto LABEL_2685;
          }
        }
        goto LABEL_2621;
      }
      if (*(_DWORD *)(__s1 + 11) != 1601069411)
        goto LABEL_2621;
      v517 = __s1[15];
      if (v517 == 105)
      {
        if (*((_QWORD *)__s1 + 2) != 0x65766973756C636ELL || __s1[24] != 95)
          goto LABEL_2621;
        v681 = __s1[25];
        if (v681 != 109)
        {
          if (v681 != 97)
            goto LABEL_2621;
          goto LABEL_2808;
        }
        v802 = __s1[26];
        if (v802 != 105)
        {
          if (v802 != 97)
            goto LABEL_2621;
          goto LABEL_3367;
        }
      }
      else
      {
        if (v517 != 101)
          goto LABEL_2621;
        if (*((_QWORD *)__s1 + 2) != 0x65766973756C6378 || __s1[24] != 95)
          goto LABEL_2621;
        v519 = __s1[25];
        if (v519 != 109)
        {
          if (v519 != 97)
            goto LABEL_2621;
LABEL_2808:
          if (*((_WORD *)__s1 + 13) != 25700)
            goto LABEL_2621;
          goto LABEL_3376;
        }
        v801 = __s1[26];
        if (v801 != 105)
        {
          if (v801 != 97)
            goto LABEL_2621;
LABEL_3367:
          if (__s1[27] != 120)
            goto LABEL_2621;
LABEL_3376:
          v5 = 27;
LABEL_823:
          v4 = 0x200000000;
          return v4 | v5;
        }
      }
      if (__s1[27] != 110)
        goto LABEL_2621;
      goto LABEL_3376;
    case 29:
      v99 = *__s1;
      if (v99 <= 114)
      {
        if (v99 == 97)
        {
          if (*(_QWORD *)(__s1 + 1) == 0x726F775F636E7973
            && *(_QWORD *)(__s1 + 9) == 0x5F70756F72675F6BLL
            && *(_QWORD *)(__s1 + 17) == 0x5F64656469727473
            && *(_DWORD *)(__s1 + 25) == 2037411683)
          {
            v5 = 1512;
            goto LABEL_823;
          }
        }
        else if (v99 == 100)
        {
          v100 = *(_QWORD *)(__s1 + 1) == 0x735F6363615F746FLL && *(_QWORD *)(__s1 + 9) == 0x61703878345F7461;
          v101 = v100 && *(_QWORD *)(__s1 + 17) == 0x5F75755F64656B63;
          if (v101 && *(_DWORD *)(__s1 + 25) == 1953393013)
          {
            v5 = 133;
            goto LABEL_2685;
          }
        }
        goto LABEL_2621;
      }
      if (v99 == 115)
      {
        if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275
          || *(_QWORD *)(__s1 + 9) != 0x72657473756C635FLL
          || *(_QWORD *)(__s1 + 17) != 0x63756465725F6465
          || *(_DWORD *)(__s1 + 25) != 1919901541)
        {
          goto LABEL_2621;
        }
LABEL_859:
        v5 = 101;
        goto LABEL_2685;
      }
      if (v99 != 119)
        goto LABEL_2621;
      if (*(_QWORD *)(__s1 + 1) != 0x756F72675F6B726FLL || *((_QWORD *)__s1 + 1) != 0x5F6E6163735F7075)
        goto LABEL_2621;
      v157 = __s1[16];
      if (v157 == 105)
      {
        if (*(_QWORD *)(__s1 + 17) != 0x65766973756C636ELL || __s1[25] != 95)
          goto LABEL_2621;
        v521 = __s1[26];
        if (v521 != 109)
        {
          if (v521 != 97)
            goto LABEL_2621;
LABEL_1965:
          if (*(_WORD *)(__s1 + 27) != 25700)
            goto LABEL_2621;
LABEL_2943:
          v5 = 2713;
          goto LABEL_2685;
        }
        v682 = __s1[27];
        if (v682 != 105)
        {
          if (v682 != 97)
            goto LABEL_2621;
LABEL_2812:
          if (__s1[28] != 120)
            goto LABEL_2621;
          goto LABEL_2943;
        }
      }
      else
      {
        if (v157 != 101)
          goto LABEL_2621;
        if (*(_QWORD *)(__s1 + 17) != 0x65766973756C6378 || __s1[25] != 95)
          goto LABEL_2621;
        v159 = __s1[26];
        if (v159 != 109)
        {
          if (v159 != 97)
            goto LABEL_2621;
          goto LABEL_1965;
        }
        v679 = __s1[27];
        if (v679 != 105)
        {
          if (v679 != 97)
            goto LABEL_2621;
          goto LABEL_2812;
        }
      }
      if (__s1[28] != 110)
        goto LABEL_2621;
      goto LABEL_2943;
    case 30:
      v103 = *__s1;
      if (v103 != 115)
      {
        if (v103 != 97)
          goto LABEL_2621;
        v104 = *(_QWORD *)(__s1 + 22);
        v106 = *(_QWORD *)(__s1 + 1) == 0x6F635F63696D6F74
            && *(_QWORD *)(__s1 + 9) == 0x78655F657261706DLL
            && *(_QWORD *)(__s1 + 17) == 0x735F65676E616863;
        v107 = 0x676E6F7274735F65;
LABEL_804:
        if (!v106 || v104 != v107)
          goto LABEL_2621;
        v5 = 1655;
        goto LABEL_810;
      }
      if (*(_QWORD *)(__s1 + 1) != 0x70756F72675F6275
        || *(_QWORD *)(__s1 + 9) != 0x72657473756C635FLL
        || *(_QWORD *)(__s1 + 17) != 0x63756465725F6465
        || *(_WORD *)(__s1 + 25) != 24421)
      {
        goto LABEL_2621;
      }
      v184 = __s1[27];
      if (v184 != 120)
      {
        if (v184 == 109)
        {
          v485 = __s1[28];
          if (v485 == 117)
          {
            if (__s1[29] != 108)
              goto LABEL_2621;
          }
          else if (v485 == 105)
          {
            if (__s1[29] != 110)
              goto LABEL_2621;
          }
          else if (v485 != 97 || __s1[29] != 120)
          {
            goto LABEL_2621;
          }
        }
        else
        {
          if (v184 != 97)
            goto LABEL_2621;
          v185 = __s1[28];
          if (v185 == 110)
          {
            if (__s1[29] == 100)
              goto LABEL_859;
            goto LABEL_2621;
          }
          if (v185 != 100 || __s1[29] != 100)
            goto LABEL_2621;
        }
        v5 = 100;
        goto LABEL_2685;
      }
      if (*((_WORD *)__s1 + 14) != 29295)
        goto LABEL_2621;
      goto LABEL_859;
    case 31:
      if (*(_QWORD *)__s1 != 0x756F72675F627573 || *((_WORD *)__s1 + 4) != 24432)
        goto LABEL_2621;
      v109 = __s1[10];
      if (v109 != 110)
      {
        if (v109 == 98 && *(_DWORD *)(__s1 + 11) == 1869376609 && *(_WORD *)(__s1 + 15) == 24436)
        {
          v111 = __s1[17];
          if (v111 == 105)
          {
            if (*(_QWORD *)(__s1 + 18) == 0x65766973756C636ELL && *(_QWORD *)(__s1 + 23) == 0x6E6163735F657669)
              goto LABEL_2175;
          }
          else if (v111 == 101
                 && *(_QWORD *)(__s1 + 18) == 0x65766973756C6378
                 && *(_QWORD *)(__s1 + 23) == 0x6E6163735F657669)
          {
            goto LABEL_2175;
          }
        }
        goto LABEL_2621;
      }
      if (*(_QWORD *)(__s1 + 11) != 0x6F66696E755F6E6FLL || *(_QWORD *)(__s1 + 14) != 0x5F6D726F66696E75)
        goto LABEL_2621;
      v317 = __s1[22];
      if (v317 == 114)
      {
        if (*(_QWORD *)(__s1 + 23) != 0x726F5F6563756465)
          goto LABEL_2621;
        goto LABEL_2684;
      }
      if (v317 != 98)
      {
        if (v317 == 97 && *(_QWORD *)(__s1 + 23) == 0x6C617571655F6C6CLL)
        {
          v5 = 53;
          goto LABEL_2685;
        }
        goto LABEL_2621;
      }
      if (*(_QWORD *)(__s1 + 23) != 0x7473616364616F72)
        goto LABEL_2621;
      v5 = 54;
      goto LABEL_2685;
    case 32:
      if (*(_QWORD *)__s1 != 0x756F72675F627573
        || *((_QWORD *)__s1 + 1) != 0x6E755F6E6F6E5F70
        || *((_QWORD *)__s1 + 2) != 0x65725F6D726F6669
        || *(_QWORD *)(__s1 + 21) != 0x5F6563756465725FLL)
      {
        goto LABEL_2621;
      }
      v116 = __s1[29];
      if (v116 == 120)
      {
        v390 = *((unsigned __int16 *)__s1 + 15);
        goto LABEL_1452;
      }
      if (v116 != 109)
      {
        if (v116 != 97)
          goto LABEL_2621;
        v117 = __s1[30];
        if (v117 == 110)
        {
          v484 = __s1[31];
          goto LABEL_1806;
        }
        if (v117 != 100)
          goto LABEL_2621;
        v118 = __s1[31];
        goto LABEL_352;
      }
      v388 = __s1[30];
      if (v388 == 117)
      {
        v525 = __s1[31];
        goto LABEL_1983;
      }
      if (v388 == 105)
      {
        v526 = __s1[31];
        goto LABEL_1986;
      }
      if (v388 != 97)
        goto LABEL_2621;
      v389 = __s1[31];
      goto LABEL_1449;
    case 33:
      if (memcmp(__s1, "atomic_flag_test_and_set_explicit", 0x21uLL))
        goto LABEL_2621;
      v5 = 2028;
      goto LABEL_356;
    case 37:
      v119 = *__s1;
      if (v119 != 115)
      {
        if (v119 != 97)
          goto LABEL_2621;
        v120 = __s1 + 1;
        v121 = "tomic_compare_exchange_weak_explicit";
        v122 = 36;
        goto LABEL_367;
      }
      if (memcmp(__s1 + 1, "ub_group_clustered_reduce_logical_or", 0x24uLL))
        goto LABEL_2621;
      goto LABEL_1148;
    case 38:
      if (memcmp(__s1, "sub_group_clustered_reduce_logical_", 0x23uLL))
        goto LABEL_2621;
      v123 = __s1[35];
      if (v123 == 120)
      {
        v124 = *((unsigned __int16 *)__s1 + 18);
        v125 = 29295;
      }
      else
      {
        if (v123 != 97)
          goto LABEL_2621;
        v124 = *((unsigned __int16 *)__s1 + 18);
        v125 = 25710;
      }
      if (v124 != v125)
        goto LABEL_2621;
LABEL_1148:
      v5 = 102;
      goto LABEL_2685;
    case 39:
      v126 = *__s1;
      if (v126 == 115)
      {
        if (*(_QWORD *)(__s1 + 1) == 0x70756F72675F6275
          && *(_QWORD *)(__s1 + 9) == 0x696E755F6E6F6E5FLL
          && *(_QWORD *)(__s1 + 14) == 0x5F6D726F66696E75)
        {
          v188 = __s1[22];
          if (v188 == 115)
          {
            if (*(_DWORD *)(__s1 + 23) != 1601069411)
              goto LABEL_2621;
            v468 = __s1[27];
            if (v468 == 105)
            {
              if (*(_QWORD *)(__s1 + 28) == 0x65766973756C636ELL && *(_QWORD *)(__s1 + 31) == 0x726F5F6576697375)
                goto LABEL_2684;
            }
            else if (v468 == 101
                   && *(_QWORD *)(__s1 + 28) == 0x65766973756C6378
                   && *(_QWORD *)(__s1 + 31) == 0x726F5F6576697375)
            {
              goto LABEL_2684;
            }
          }
          else if (v188 == 114
                 && *(_QWORD *)(__s1 + 23) == 0x6F6C5F6563756465
                 && *(_QWORD *)(__s1 + 31) == 0x726F5F6C61636967)
          {
            goto LABEL_2179;
          }
        }
      }
      else if (v126 == 97)
      {
        v120 = __s1 + 1;
        v121 = "tomic_compare_exchange_strong_explicit";
        v122 = 38;
LABEL_367:
        if (!memcmp(v120, v121, v122))
        {
          v5 = 1697;
          v4 = 0x5400000000;
          return v4 | v5;
        }
      }
      goto LABEL_2621;
    case 40:
      if (*(_QWORD *)__s1 != 0x756F72675F627573
        || *((_QWORD *)__s1 + 1) != 0x6E755F6E6F6E5F70
        || *(_QWORD *)(__s1 + 14) != 0x5F6D726F66696E75)
      {
        goto LABEL_2621;
      }
      v129 = __s1[22];
      if (v129 != 115)
      {
        if (v129 != 114)
          goto LABEL_2621;
        if (*(_QWORD *)(__s1 + 23) != 0x6F6C5F6563756465 || *(_QWORD *)(__s1 + 29) != 0x5F6C616369676F6CLL)
          goto LABEL_2621;
        v131 = __s1[37];
        if (v131 != 120)
        {
          if (v131 != 97)
            goto LABEL_2621;
          v132 = *((unsigned __int16 *)__s1 + 19);
LABEL_1183:
          v327 = 25710;
          goto LABEL_2178;
        }
        v132 = *((unsigned __int16 *)__s1 + 19);
LABEL_2177:
        v327 = 29295;
LABEL_2178:
        if (v132 != v327)
          goto LABEL_2621;
LABEL_2179:
        v5 = 86;
        goto LABEL_2685;
      }
      if (*(_DWORD *)(__s1 + 23) != 1601069411)
        goto LABEL_2621;
      v318 = __s1[27];
      if (v318 == 105)
      {
        if (*(_QWORD *)(__s1 + 28) != 0x65766973756C636ELL || __s1[36] != 95)
          goto LABEL_2621;
        v564 = __s1[37];
        if (v564 != 120)
        {
          if (v564 != 109)
          {
            if (v564 != 97)
              goto LABEL_2621;
            v565 = __s1[38];
            if (v565 != 110)
            {
              if (v565 != 100)
                goto LABEL_2621;
              goto LABEL_2190;
            }
            goto LABEL_3120;
          }
          v731 = __s1[38];
          if (v731 != 117)
          {
            if (v731 != 105)
            {
              if (v731 != 97)
                goto LABEL_2621;
LABEL_3061:
              v389 = __s1[39];
LABEL_1449:
              if (v389 != 120)
                goto LABEL_2621;
              goto LABEL_1987;
            }
            goto LABEL_3171;
          }
LABEL_3170:
          v525 = __s1[39];
LABEL_1983:
          if (v525 != 108)
            goto LABEL_2621;
LABEL_1987:
          v5 = 84;
          goto LABEL_2685;
        }
      }
      else
      {
        if (v318 != 101)
          goto LABEL_2621;
        if (*(_QWORD *)(__s1 + 28) != 0x65766973756C6378 || __s1[36] != 95)
          goto LABEL_2621;
        v320 = __s1[37];
        if (v320 != 120)
        {
          if (v320 != 109)
          {
            if (v320 != 97)
              goto LABEL_2621;
            v321 = __s1[38];
            if (v321 != 110)
            {
              if (v321 != 100)
                goto LABEL_2621;
LABEL_2190:
              v118 = __s1[39];
LABEL_352:
              if (v118 != 100)
                goto LABEL_2621;
              goto LABEL_1987;
            }
LABEL_3120:
            v484 = __s1[39];
LABEL_1806:
            if (v484 != 100)
              goto LABEL_2621;
LABEL_2684:
            v5 = 85;
            goto LABEL_2685;
          }
          v730 = __s1[38];
          if (v730 != 117)
          {
            if (v730 != 105)
            {
              if (v730 != 97)
                goto LABEL_2621;
              goto LABEL_3061;
            }
LABEL_3171:
            v526 = __s1[39];
LABEL_1986:
            if (v526 != 110)
              goto LABEL_2621;
            goto LABEL_1987;
          }
          goto LABEL_3170;
        }
      }
      v390 = *((unsigned __int16 *)__s1 + 19);
LABEL_1452:
      if (v390 != 29295)
        goto LABEL_2621;
      goto LABEL_2684;
    case 47:
      if (*(_QWORD *)__s1 != 0x756F72675F627573
        || *((_QWORD *)__s1 + 1) != 0x6E755F6E6F6E5F70
        || *((_QWORD *)__s1 + 2) != 0x63735F6D726F6669
        || *(_QWORD *)(__s1 + 19) != 0x5F6E6163735F6D72)
      {
        goto LABEL_2621;
      }
      v136 = __s1[27];
      if (v136 == 105)
      {
        if (*(_QWORD *)(__s1 + 28) == 0x65766973756C636ELL
          && *(_QWORD *)(__s1 + 36) == 0x6C616369676F6C5FLL
          && *(_QWORD *)(__s1 + 39) == 0x726F5F6C61636967)
        {
          goto LABEL_2179;
        }
      }
      else if (v136 == 101)
      {
        v137 = *(_QWORD *)(__s1 + 28) == 0x65766973756C6378 && *(_QWORD *)(__s1 + 36) == 0x6C616369676F6C5FLL;
        if (v137 && *(_QWORD *)(__s1 + 39) == 0x726F5F6C61636967)
          goto LABEL_2179;
      }
      goto LABEL_2621;
    case 48:
      if (*(_QWORD *)__s1 != 0x756F72675F627573
        || *((_QWORD *)__s1 + 1) != 0x6E755F6E6F6E5F70
        || *((_QWORD *)__s1 + 2) != 0x63735F6D726F6669
        || *(_QWORD *)(__s1 + 19) != 0x5F6E6163735F6D72)
      {
        goto LABEL_2621;
      }
      v142 = __s1[27];
      if (v142 == 105)
      {
        if (*(_QWORD *)(__s1 + 28) != 0x65766973756C636ELL
          || *(_QWORD *)(__s1 + 36) != 0x6C616369676F6C5FLL
          || __s1[44] != 95)
        {
          goto LABEL_2621;
        }
        v326 = __s1[45];
        if (v326 != 120)
        {
          if (v326 != 97)
            goto LABEL_2621;
          goto LABEL_1182;
        }
      }
      else
      {
        if (v142 != 101)
          goto LABEL_2621;
        v143 = *(_QWORD *)(__s1 + 28) == 0x65766973756C6378 && *(_QWORD *)(__s1 + 36) == 0x6C616369676F6C5FLL;
        if (!v143 || __s1[44] != 95)
          goto LABEL_2621;
        v145 = __s1[45];
        if (v145 != 120)
        {
          if (v145 != 97)
            goto LABEL_2621;
LABEL_1182:
          v132 = *((unsigned __int16 *)__s1 + 23);
          goto LABEL_1183;
        }
      }
      v132 = *((unsigned __int16 *)__s1 + 23);
      goto LABEL_2177;
    default:
      goto LABEL_2621;
  }
}

void sub_22EC608B8(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[64];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[24];
  int v26;
  __int16 v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a3 == 912)
  {
    v5 = a1[11];
    v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(v5 + 15192), "objc_super", 0xAuLL);
    v15 = 0;
    v16 = v18;
    v17 = 0x800000000;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = a1;
    v23 = v6;
    v24 = 0;
    sub_22EFC6D6C((uint64_t)v25, v6);
    *(_OWORD *)&v25[8] = xmmword_22F4555C0;
    v26 = 16842752;
    v27 = 0;
    v28 = 0;
    sub_22EC56024((uint64_t)&v15);
    sub_22EC63520((uint64_t)a1, (uint64_t)&v15, a2, 0, 0);
    if ((_DWORD)v15 == 2)
    {
      v7 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = *(_DWORD *)(v7 + 28) & 0x7F;
      if (v8 <= 0x2F && ((1 << v8) & 0xC00000060000) != 0)
      {
        v7 = sub_22EFBAEA4(*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFFCLL);
        v8 = *(_DWORD *)(v7 + 28) & 0x7F;
      }
      if (v8 - 38 >= 0xFFFFFFFB)
      {
        v10 = *(_QWORD *)(v7 + 48);
        if (v10)
          v11 = v10 & 0xFFFFFFFFFFFFFFF0;
        else
          v11 = sub_22EF6462C(v5, v7);
        *(_QWORD *)(v5 + 1408) = v11;
      }
    }
    if (HIBYTE(v26))
    {
      if ((_DWORD)v15 == 5)
      {
        sub_22EC64D18(v22, (uint64_t)&v15);
      }
      else if (v20 && (*(_DWORD *)(v22[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v22, (uint64_t)&v15);
      }
    }
    v12 = v19;
    if (v19)
    {
      v13 = *(void **)(v19 + 240);
      if (v13 != (void *)(v19 + 256))
        free(v13);
      v14 = *(void **)(v12 + 176);
      if (v14 != *(void **)(v12 + 168))
        free(v14);
      if ((*(_BYTE *)(v12 + 32) & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v12 + 40), (void *)(16 * *(unsigned int *)(v12 + 48)));
      sub_22E687D9C((uint64_t *)(v12 + 8));
      MEMORY[0x2348A0E9C](v12, 0x10E0C409F09D3C3);
    }
    if (v16 != v18)
      free(v16);
  }
}

BOOL sub_22EC60AEC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 128);
  if ((v2
     || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104)),
         (v2 = *(_QWORD *)(a1 + 128)) != 0))
    && *(_QWORD *)(v2 + 88)
    && (sub_22EFC7ADC(a1 + 64) & 1) == 0)
  {
    return (*(_BYTE *)(a1 + 74) & 2) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22EC60B4C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;

  if (a4)
  {
    v5 = result;
    v6 = a2 & 7;
    if (v6 == 7)
    {
      v7 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      if (v7 >= 3)
        v7 = 3;
      v6 = v7 | 8;
    }
    switch(v6)
    {
      case 3:
        if ((*(_WORD *)(a4 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
        {
          v8 = *(_QWORD *)(a4 + 64);
          if (v8
            || (result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 40) + 96), *(_QWORD *)(a4 + 40)),
                (v8 = *(_QWORD *)(a4 + 64)) != 0))
          {
            if (*(_QWORD *)(v8 + 88))
            {
              result = sub_22EC60AEC(a4 - 64);
              if ((_DWORD)result)
              {
                if (sub_22E49F6F8(a4 - 64))
                  sub_22EABCDDC(v5, a4 - 64);
                result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 40) + 96), *(_QWORD *)(a4 + 40));
                if ((*(_WORD *)(*(_QWORD *)(a4 + 64) + 8) & 0x200) == 0)
                  result = sub_22EABD328(v5, a4 - 64);
                if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 2) != 0)
                {
                  result = sub_22EABDAF8(a4 - 64);
                  if ((_DWORD)result)
                    result = (uint64_t)sub_22EABDBA0(v5, a4 - 64);
                }
              }
            }
          }
        }
        break;
      case 4:
        if ((*(_WORD *)(a4 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
        {
          v9 = *(_QWORD *)(a4 + 64);
          if (v9
            || (result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 40) + 96), *(_QWORD *)(a4 + 40)),
                (v9 = *(_QWORD *)(a4 + 64)) != 0))
          {
            if (*(_QWORD *)(v9 + 88))
            {
              result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 40) + 96), *(_QWORD *)(a4 + 40));
              if ((*(_WORD *)(*(_QWORD *)(a4 + 64) + 8) & 0x2000) == 0)
              {
                v10 = a4 - 64;
                result = sub_22EC60AEC(v10);
                if ((_DWORD)result)
                  result = sub_22EABEFB4(v5, v10);
              }
            }
          }
        }
        break;
      case 6:
        if ((a2 & 7) == 6
          && *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8) == 15
          && (*(_WORD *)(a4 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
        {
          v11 = *(_QWORD *)(a4 + 64);
          if (v11
            || (result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 40) + 96), *(_QWORD *)(a4 + 40)),
                (v11 = *(_QWORD *)(a4 + 64)) != 0))
          {
            if (*(_QWORD *)(v11 + 88))
            {
              result = sub_22EC60AEC(a4 - 64);
              if ((_DWORD)result)
              {
                result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 40) + 96), *(_QWORD *)(a4 + 40));
                if ((*(_WORD *)(*(_QWORD *)(a4 + 64) + 8) & 0x800) == 0)
                  result = (uint64_t)sub_22EABE360(v5, a4 - 64);
                if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 2) != 0)
                {
                  result = sub_22EABE940(a4 - 64);
                  if ((_DWORD)result)
                    result = (uint64_t)sub_22EABEA08(v5, a4 - 64);
                }
              }
            }
          }
        }
        break;
      case 8:
        if ((~(_BYTE)a2 & 7) != 0)
          goto LABEL_43;
        v12 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
        if (v12 >= 3)
          v12 = 3;
        if (v12)
LABEL_43:
          v13 = 0;
        else
          v13 = *(_QWORD **)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        result = sub_22ED5DCD0(result, v13, a3);
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t sub_22EC60E04(_QWORD *a1)
{
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unint64_t v12;

  v1 = a1[45];
  v2 = a1;
  do
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      return 0;
    v3 = v2[45];
  }
  while (!v3);
  if (v1 && *a1 && (*(_BYTE *)(*a1 + 8) & 0x80) != 0)
  {
    while (1)
    {
      v4 = *(_WORD *)(v1 + 8) & 0x7F;
      if (v4 == 16 || v4 == 83)
      {
        v10 = *(_WORD *)(v3 + 8) & 0x7F;
        if (v10 == 83 || v10 == 16)
        {
          v12 = sub_22EFCC008(v3);
          if (v12 != sub_22EFCC008(v1) && (sub_22EFCBE78(v3, v1) & 1) != 0)
            return v1;
        }
        return v3;
      }
      v5 = -40;
      if ((*(_WORD *)(v1 + 8) & 0x7Fu) > 0x46)
      {
        if (v4 == 71)
        {
          v5 = -56;
          goto LABEL_25;
        }
        if (v4 == 81)
          goto LABEL_25;
      }
      else
      {
        if (v4 <= 0x18)
        {
          if (((1 << v4) & 0x1066) != 0)
            goto LABEL_25;
          if (v4 == 24)
          {
            v5 = -48;
            goto LABEL_25;
          }
        }
        if (v4 == 70)
        {
          v5 = -64;
          goto LABEL_25;
        }
      }
      v6 = v4 - 52;
      if (v4 - 33 >= 5)
        v7 = -48;
      else
        v7 = -64;
      if (v6 >= 6)
        v5 = v7;
      else
        v5 = -72;
LABEL_25:
      v8 = *(_QWORD *)(v1 + v5 + 16);
      v1 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v1 = *(_QWORD *)v1;
    }
  }
  return v3;
}

void sub_22EC60F70(uint64_t *a1, const void *a2, unint64_t a3)
{
  char v6;

  sub_22E3BA850((uint64_t)(a1 + 19), a2);
  if (v6)
    sub_22EC6F288(a1, (unint64_t)a2, a3);
}

void sub_22EC60FC8(uint64_t *a1, uint64_t **a2, unint64_t a3)
{
  uint64_t **v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  BOOL v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  char v17;
  BOOL v18;

  if (a2)
  {
    v4 = a2;
    v6 = (uint64_t)(a1 + 19);
    while (1)
    {
      v7 = v4[45];
      if (!v7)
        break;
      v8 = v7[1] & 0x7F;
      if (v8 == 83 || v8 == 16)
      {
        sub_22EC60F70(a1, v7, (unint64_t)v4[45]);
      }
      else
      {
        v10 = v8 > 0x18 || ((1 << v8) & 0x1000006) == 0;
        if (!v10 || v8 - 52 <= 5)
          break;
      }
LABEL_33:
      v4 = (uint64_t **)*v4;
      if (!v4)
        return;
    }
    v11 = *((unsigned int *)v4 + 94);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)v4[46];
      v13 = &v12[v11];
      do
      {
        v14 = *v12;
        if ((*(_BYTE *)(*v12 + 8) & 4) == 0 || sub_22EC62AF4(*a1, *v12))
        {
          v15 = *(_QWORD *)(v14 + 72);
          if (v15 && (*(_DWORD *)(v15 + 28) & 0x7F) == 0x11)
          {
            do
            {
              v15 = *(_QWORD *)(v15 + 88);
              if (v15)
                v18 = (*(_DWORD *)(v15 + 28) & 0x7F) == 17;
              else
                v18 = 0;
            }
            while (v18);
          }
          if (v15)
            v16 = (const void *)(v15 + 48);
          else
            v16 = 0;
          sub_22E3BA850(v6, v16);
          if (v17)
          {
            sub_22EC6F43C((uint64_t)a1, v14, a3);
            sub_22EC6F288(a1, (unint64_t)v16, a3);
          }
        }
        ++v12;
      }
      while (v12 != v13);
    }
    goto LABEL_33;
  }
}

uint64_t sub_22EC61124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(void))sub_22EC64380)();
  v9 = sub_22EC70088(*(_QWORD *)(a4 + 8), *(_DWORD *)(a4 + 16), a3);
  if ((uint64_t *)v9 != v10)
  {
    v11 = (uint64_t *)v9;
    v12 = v10;
    do
    {
      v13 = *v11;
      v11 += 2;
      v8 |= sub_22EC64380(a1, a2, v13);
    }
    while (v11 != v12);
  }
  sub_22EC561E4(a2);
  return v8 & 1;
}

uint64_t sub_22EC611AC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v4;
  __int16 v9;
  uint64_t v10;
  int v12;
  _BYTE *v14;
  unint64_t i;
  unint64_t *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t j;
  unint64_t *v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  const void *v38;
  char v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  _BYTE *v43;
  _QWORD *v44;
  _BOOL4 v45;
  uint64_t v46;
  void *v47;
  void *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t k;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t m;
  uint64_t v71;
  char v72;
  void **v73;
  unsigned int v74;
  BOOL v75;
  uint64_t v76;
  unint64_t n;
  unint64_t *v78;
  BOOL v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  void *v89;
  int v90;
  char v91;
  int v92;
  int v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  int v97;
  int v98;
  char v99[24];
  uint64_t v100;
  char v101[8];
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  unsigned int v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  int v113;
  _QWORD v114[5];
  _DWORD *v115;
  uint64_t v116;
  _DWORD v117[26];
  uint64_t v118;
  __int16 v119;
  char v120;
  int *v121;
  uint64_t v122;
  _QWORD v123[8];
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE v127[64];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int16 v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 120;
  if (*(_QWORD *)(a2 + 120))
  {
    v9 = *(_WORD *)(a3 + 8);
    *(_WORD *)(a3 + 8) = v9 | 0x1000;
    if (sub_22EC64380(a1, a2, a3))
    {
      sub_22EC561E4(a2);
      if ((*(_WORD *)(a3 + 8) & 0x7Fu) - 35 <= 2)
        *(_QWORD *)(a2 + 96) = a3 - 64;
      v10 = 1;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 160))
      {
        v12 = *(_WORD *)(a3 + 8) & 0x7F;
        if (v12 == 83 || v12 == 16)
        {
          v121 = (int *)v123;
          v122 = 0x800000000;
          v104 = v108;
          v105 = v108;
          v106 = 8;
          LODWORD(v107) = 0;
          sub_22E3BA850((uint64_t)&v104, (const void *)a3);
          v14 = sub_22E79390C();
          for (i = sub_22EFCE144(a3, (uint64_t)v14); i; i = v16[1])
          {
            v16 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFF8);
            v17 = (i & 0xFFFFFFFFFFFFFFF8) == 0 || (i & 4) == 0;
            if (v17)
              v18 = i & 0xFFFFFFFFFFFFFFF8;
            else
              v18 = *v16;
            v19 = *(_QWORD *)(v18 + 72);
            if (v19 && (*(_DWORD *)(v19 + 28) & 0x7F) == 0x11)
            {
              do
              {
                v19 = *(_QWORD *)(v19 + 88);
                if (v19)
                  v23 = (*(_DWORD *)(v19 + 28) & 0x7F) == 17;
                else
                  v23 = 0;
              }
              while (v23);
            }
            if ((*(_BYTE *)(v19 + 80) & 3) == 0)
              v19 = *(_QWORD *)(v19 + 104) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_BYTE *)(v18 + 8) & 4) == 0 || sub_22EC62AF4(a1, v18))
            {
              v20 = v19 ? (const void *)(v19 + 48) : 0;
              sub_22E3BA850((uint64_t)&v104, v20);
              if (v21)
              {
                v22 = v122;
                if (v122 >= (unint64_t)HIDWORD(v122))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v122;
                }
                *(_QWORD *)&v121[2 * v22] = v19;
                LODWORD(v122) = v122 + 1;
              }
            }
            if (v17)
              break;
          }
          v124 = 0;
          v125 = v127;
          v126 = 0x800000000;
          v128 = 0;
          v130 = 0;
          v129 = 0;
          v131 = *(_QWORD **)(a2 + 112);
          v132 = *(_OWORD *)v4;
          v133 = *(_QWORD *)(v4 + 16);
          v24 = *(_QWORD *)(a2 + 152);
          v134 = 0;
          v135 = v24;
          v136 = *(_WORD *)(a2 + 160);
          v137 = *(_BYTE *)(a2 + 162);
          v138 = 0;
          v139 = *(_BYTE *)(a2 + 164);
          v140 = 0;
          v141 = *(_BYTE *)(a2 + 166);
          v25 = v122;
          if ((_DWORD)v122)
          {
            v26 = 0;
            v93 = 0;
            v91 = 0;
            do
            {
              v27 = *(_QWORD *)&v121[2 * v25 - 2];
              LODWORD(v122) = v25 - 1;
              v28 = *(_DWORD *)(a2 + 16);
              if (v28)
                v29 = (int *)&v124;
              else
                v29 = (int *)a2;
              v30 = v27 + 48;
              if (v27)
                v31 = v27 + 48;
              else
                v31 = 0;
              if (sub_22EC64380(a1, (uint64_t)v29, v31))
              {
                sub_22EC561E4((uint64_t)v29);
                v42 = *v29;
                v43 = v125;
                if (v28)
                  v44 = v125;
                else
                  v44 = *(_QWORD **)(a2 + 8);
                v45 = sub_22F339140(v42, v44);
                v93 |= !v45;
                v26 |= v45;
                if (v28)
                {
                  sub_22E3D0148(a2 + 8, v43, &v43[8 * v126]);
                  *(_DWORD *)a2 = 2;
                  LODWORD(v124) = 0;
                  LODWORD(v126) = 0;
                  v46 = v128;
                  if (v128)
                  {
                    v47 = *(void **)(v128 + 240);
                    if (v47 != (void *)(v128 + 256))
                      free(v47);
                    v48 = *(void **)(v46 + 176);
                    if (v48 != *(void **)(v46 + 168))
                      free(v48);
                    if ((*(_BYTE *)(v46 + 32) & 1) == 0)
                      llvm::deallocate_buffer(*(llvm **)(v46 + 40), (void *)(16 * *(unsigned int *)(v46 + 48)));
                    sub_22E687D9C((uint64_t *)(v46 + 8));
                    MEMORY[0x2348A0E9C](v46, 0x10E0C409F09D3C3);
                  }
                  v140 = 0;
                  v91 = 1;
                  v128 = 0;
                  v129 = 0;
                }
                else
                {
                  v91 = 1;
                }
              }
              else
              {
                v32 = sub_22E79390C();
                for (j = sub_22EFCE144(v30, (uint64_t)v32); j; j = v34[1])
                {
                  v34 = (unint64_t *)(j & 0xFFFFFFFFFFFFFFF8);
                  v35 = (j & 0xFFFFFFFFFFFFFFF8) == 0 || (j & 4) == 0;
                  if (v35)
                    v36 = j & 0xFFFFFFFFFFFFFFF8;
                  else
                    v36 = *v34;
                  v37 = *(_QWORD *)(v36 + 72);
                  if (v37 && (*(_DWORD *)(v37 + 28) & 0x7F) == 0x11)
                  {
                    do
                    {
                      v37 = *(_QWORD *)(v37 + 88);
                      if (v37)
                        v41 = (*(_DWORD *)(v37 + 28) & 0x7F) == 17;
                      else
                        v41 = 0;
                    }
                    while (v41);
                  }
                  if ((*(_BYTE *)(v36 + 8) & 4) == 0 || sub_22EC62AF4(a1, v36))
                  {
                    v38 = v37 ? (const void *)(v37 + 48) : 0;
                    sub_22E3BA850((uint64_t)&v104, v38);
                    if (v39)
                    {
                      v40 = v122;
                      if (v122 >= (unint64_t)HIDWORD(v122))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v40 = v122;
                      }
                      *(_QWORD *)&v121[2 * v40] = v37;
                      LODWORD(v122) = v122 + 1;
                    }
                  }
                  if (v35)
                    break;
                }
              }
              v25 = v122;
            }
            while ((_DWORD)v122);
            if ((v91 & 1) != 0)
            {
              if ((v26 & v93 & 1) != 0)
                *(_QWORD *)a2 = 0x300000005;
              else
                sub_22EC561E4(a2);
              v10 = 1;
            }
            else
            {
              v10 = 0;
            }
          }
          else
          {
            v10 = 0;
          }
          if (v138)
          {
            if ((_DWORD)v124 == 5)
            {
              sub_22EC64D18(v131, (uint64_t)&v124);
            }
            else if (v129 && (*(_DWORD *)(v131[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v131, (uint64_t)&v124);
            }
          }
          v76 = v128;
          if (v128)
          {
            v88 = *(void **)(v128 + 240);
            if (v88 != (void *)(v128 + 256))
              free(v88);
            v89 = *(void **)(v76 + 176);
            if (v89 != *(void **)(v76 + 168))
              free(v89);
            if ((*(_BYTE *)(v76 + 32) & 1) == 0)
              llvm::deallocate_buffer(*(llvm **)(v76 + 40), (void *)(16 * *(unsigned int *)(v76 + 48)));
            sub_22E687D9C((uint64_t *)(v76 + 8));
            MEMORY[0x2348A0E9C](v76, 0x10E0C409F09D3C3);
          }
          if (v125 != v127)
            free(v125);
          if (v105 != v104)
            free(v105);
          if (v121 != (int *)v123)
            free(v121);
          goto LABEL_9;
        }
        v49 = v12 - 38;
        if (v49 >= 0xFFFFFFFD)
          v50 = a3 - 64;
        else
          v50 = 0;
        if (v49 >= 0xFFFFFFFD)
        {
          v51 = *(_QWORD *)(a3 + 64);
          if (v51
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 40) + 96), *(_QWORD *)(a3 + 40)),
                (v51 = *(_QWORD *)(a3 + 64)) != 0))
          {
            if (*(_QWORD *)(v51 + 88))
            {
              v52 = *(_DWORD *)(a2 + 152) - 2;
              if (v52 >= 0xA || ((0x225u >> v52) & 1) == 0)
              {
                if ((a4 & 1) == 0 && sub_22EFC7ADC(a3) && sub_22F3B1AA4(a3 - 64))
                {
                  v10 = 0;
                  *(_DWORD *)a2 = 1;
                }
                else
                {
                  v53 = *(_QWORD *)(a2 + 120);
                  v98 = *(_DWORD *)(a2 + 156);
                  v96 = v53;
                  v97 = v98;
                  v54 = &v105;
                  v105 = &v105;
                  v106 = (uint64_t)&v105;
                  v107 = 0;
                  v108[0] = 1;
                  for (k = 5; k != 21; k += 2)
                    (&v104)[k] = 0;
                  v110 = v114;
                  v111 = v114;
                  v112 = 4;
                  v113 = 0;
                  v114[4] = 0;
                  v115 = v117;
                  v116 = 0x400000000;
                  v117[24] = 0;
                  v118 = 0;
                  v119 = 257;
                  v120 = 1;
                  v104 = (_QWORD *)v50;
                  v10 = sub_22EFB3774(v50, (unsigned int (*)(uint64_t, unint64_t, uint64_t))sub_22EC72C40, (uint64_t)&v96, (uint64_t)&v104, 0);
                  if (!(_DWORD)v10)
                    goto LABEL_205;
                  *(_QWORD *)(a2 + 96) = v50;
                  v95 = *(_BYTE *)(a2 + 166);
                  v56 = v106;
                  if ((_QWORD **)v106 != &v105)
                  {
                    v92 = 0;
                    v94 = 0;
                    v57 = 3;
                    while (1)
                    {
                      v58 = *(_QWORD *)(v56 + 16) + 24 * *(unsigned int *)(v56 + 24);
                      if (*(_DWORD *)(v56 + 128) < v57)
                        v57 = *(_DWORD *)(v56 + 128);
                      v59 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v58 - 24) + 16) & 0xFFFFFFFFFFFFFFF0);
                      v60 = *(_QWORD *)(v59 + 8) & 0xFLL;
                      if (v94 > 0xF)
                      {
                        if (v60)
                          v59 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)(v58 - 24) + 16));
                        if (v94 != *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFF0) + 8))
                        {
                          v63 = *(_QWORD *)(v56 + 136);
                          if (!v63)
                            goto LABEL_139;
                          while (1)
                          {
                            v64 = v63 & 0xFFFFFFFFFFFFFFF8;
                            if ((v63 & 4) == 0 || !v64)
                              break;
                            if (((unsigned __int16)v98 & *(_WORD *)(*(_QWORD *)v64 + 30) & 0x3FFF) != 0
                              && sub_22EFBAEF8(*(_QWORD *)v64))
                            {
                              goto LABEL_212;
                            }
                            v63 = *(_QWORD *)(v64 + 8);
                            if (!v63)
                              goto LABEL_139;
                          }
                          if (((unsigned __int16)v98 & *(_WORD *)(v64 + 30) & 0x3FFF) == 0 || !sub_22EFBAEF8(v64))
                          {
LABEL_139:
                            v65 = *(_QWORD *)(v106 + 136);
                            v66 = *(_QWORD *)(v56 + 136);
                            v121 = &v98;
                            v122 = (uint64_t)&v95;
                            v123[0] = a1;
                            v102 = v66;
                            v103 = v65;
                            do
                            {
                              v67 = sub_22EC7017C((uint64_t)&v121, &v103);
                              v68 = sub_22EC7017C((uint64_t)&v121, &v102);
                              v69 = v68;
                              if (!v67 || !v68)
                              {
                                if (v67 | v68)
                                  goto LABEL_212;
                                goto LABEL_161;
                              }
                            }
                            while (v67 == v68);
                            v124 = 1;
                            for (m = 8; m != 520; m += 16)
                              *(uint64_t *)((char *)&v124 + m) = -4096;
                            do
                            {
                              v100 = v67;
                              v101[0] = 0;
                              sub_22F339204((uint64_t)v99, (uint64_t)&v124, &v100, v101);
                              v67 = sub_22EC7017C((uint64_t)&v121, &v103);
                            }
                            while (v67);
                            v90 = 0;
                            while (1)
                            {
                              v71 = sub_22F3391A8((uint64_t)&v124, v69);
                              v72 = v124;
                              v73 = (void **)v125;
                              if ((v124 & 1) != 0)
                                v73 = (void **)&v125;
                              v74 = v126;
                              if ((v124 & 1) != 0)
                                v74 = 32;
                              if (&v73[2 * v74] == (void **)v71)
                                break;
                              if (!*(_BYTE *)(v71 + 8))
                              {
                                *(_BYTE *)(v71 + 8) = 1;
                                ++v90;
                              }
                              v69 = sub_22EC7017C((uint64_t)&v121, &v102);
                              if (!v69)
                              {
                                v72 = v124;
                                v75 = v90 == v124 >> 1;
                                goto LABEL_156;
                              }
                            }
                            v75 = 0;
LABEL_156:
                            if ((v72 & 1) == 0)
                              llvm::deallocate_buffer((llvm *)v125, (void *)(16 * v126));
                            if (v75)
                              goto LABEL_161;
                          }
LABEL_212:
                          sub_22F337B04((_QWORD *)a2, (uint64_t *)&v104);
                          goto LABEL_205;
                        }
                        if (v92 != *(_DWORD *)(v58 - 8))
                        {
                          v61 = *(_QWORD *)(v56 + 136);
                          if (v61)
                          {
                            while (1)
                            {
                              v62 = v61 & 0xFFFFFFFFFFFFFFF8;
                              if ((v61 & 4) == 0 || !v62)
                                break;
                              if (((unsigned __int16)v98 & *(_WORD *)(*(_QWORD *)v62 + 30) & 0x3FFF) != 0
                                && sub_22EFBAEF8(*(_QWORD *)v62))
                              {
                                goto LABEL_215;
                              }
                              v61 = *(_QWORD *)(v62 + 8);
                              if (!v61)
                                goto LABEL_161;
                            }
                            if (((unsigned __int16)v98 & *(_WORD *)(v62 + 30) & 0x3FFF) != 0 && sub_22EFBAEF8(v62))
                            {
LABEL_215:
                              sub_22F337A30((_QWORD *)a2, (uint64_t *)&v104);
                              goto LABEL_205;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (v60)
                          v59 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)(v58 - 24) + 16));
                        v94 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFF0) + 8);
                        v92 = *(_DWORD *)(v58 - 8);
                      }
LABEL_161:
                      v56 = *(_QWORD *)(v56 + 8);
                      if ((_QWORD **)v56 == &v105)
                      {
                        v54 = (_QWORD **)v106;
                        goto LABEL_184;
                      }
                    }
                  }
                  v57 = 3;
LABEL_184:
                  for (n = (unint64_t)v54[17]; n; n = v78[1])
                  {
                    v78 = (unint64_t *)(n & 0xFFFFFFFFFFFFFFF8);
                    v79 = (n & 0xFFFFFFFFFFFFFFF8) == 0 || (n & 4) == 0;
                    v80 = n & 0xFFFFFFFFFFFFFFF8;
                    if (!v79)
                      v80 = *v78;
                    v81 = (*(_DWORD *)(v80 + 28) >> 13) & 3;
                    if (v57 <= v81)
                      v82 = v81;
                    else
                      v82 = v57;
                    if (v81 == 2)
                      v83 = 3;
                    else
                      v83 = v82;
                    v84 = (unint64_t)v78;
                    if (!v79)
                      v84 = *v78;
                    v85 = sub_22EAC6F40(a2, v84);
                    if (v85)
                    {
                      v86 = v85;
                      v87 = *(unsigned int *)(a2 + 16);
                      if (v87 >= *(unsigned int *)(a2 + 20))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v87 = *(unsigned int *)(a2 + 16);
                      }
                      *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v87) = v86 | v83;
                      ++*(_DWORD *)(a2 + 16);
                      *(_DWORD *)a2 = 2;
                    }
                    if (v79)
                      break;
                  }
                  sub_22EC561E4(a2);
LABEL_205:
                  if (v115 != v117)
                    free(v115);
                  if (v111 != v110)
                    free(v111);
                  if ((v108[0] & 1) == 0)
                    llvm::deallocate_buffer((llvm *)v108[1], (void *)(16 * v109));
                  sub_22E687D9C((uint64_t *)&v105);
                }
                goto LABEL_9;
              }
            }
          }
        }
      }
      v10 = 0;
    }
LABEL_9:
    *(_WORD *)(a3 + 8) = *(_WORD *)(a3 + 8) & 0xEFFF | v9 & 0x1000;
    return v10;
  }
  return 0;
}

uint64_t sub_22EC61DA0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 8992);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(result + 8984) + 56 * v4 - 48);
    if (v5)
    {
      result = sub_22F367D88(*(_QWORD *)(result + 88), a2, v5, 1);
      if (!a2)
        return result;
      goto LABEL_6;
    }
  }
  v6 = *(_QWORD *)(a2 + 8);
  if ((v6 & 4) != 0)
    *(_QWORD *)(a2 + 8) = v6 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (a2)
  {
LABEL_6:
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 33 >= 0xFFFFFFF9)
    {
      v7 = *(_QWORD *)(a2 + 56);
      v8 = *(_DWORD *)(v7 + 12) & 0x1FFFFFFF;
      if ((_DWORD)v8)
      {
        v9 = (uint64_t *)(v7 + 16);
        v10 = 8 * v8;
        do
        {
          v11 = *v9++;
          result = sub_22EC61DA0(v3, v11);
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
  return result;
}

uint64_t sub_22EC61E54(unint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  while (1)
  {
    if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v2 = sub_22EFC20FC(a1, 1);
    }
    else
    {
      v3 = *(_DWORD *)(a1 + 28) & 0x7F;
      if (a1 && (v3 - 38) >= 0xFFFFFFFD)
      {
        v2 = sub_22EFD57F4(a1);
      }
      else if (a1 && v3 == 33)
      {
        v2 = sub_22EFC3A1C(a1);
      }
      else
      {
        if (!a1 || (v3 - 67) < 0xFFFFFFF9)
          goto LABEL_15;
        v2 = sub_22EFBD3B0(a1);
      }
    }
    if (v2)
      a1 = v2;
LABEL_15:
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)(v5 + 8);
    v6 = *(_WORD *)(v5 + 8) & 0x7F;
    if (v6 == 83 || v6 == 16)
      break;
    v8 = -40;
    if ((*(_WORD *)(v5 + 8) & 0x7Fu) <= 0x46)
    {
      if (v6 <= 0x18)
      {
        if (v6 == 16)
          goto LABEL_24;
        if (((1 << v6) & 0x1066) != 0)
          goto LABEL_36;
        if (v6 == 24)
          goto LABEL_24;
      }
      if (v6 == 70)
        goto LABEL_34;
LABEL_32:
      if (v6 - 52 >= 6)
      {
        if (v6 - 33 >= 5)
        {
LABEL_24:
          v8 = -48;
          goto LABEL_36;
        }
LABEL_34:
        v8 = -64;
        goto LABEL_36;
      }
      v8 = -72;
      goto LABEL_36;
    }
    if (v6 == 83)
      goto LABEL_36;
    if (v6 == 71)
    {
      v8 = -56;
      goto LABEL_36;
    }
    if (v6 != 81)
      goto LABEL_32;
LABEL_36:
    a1 = v5 + v8;
  }
  v9 = *(_QWORD *)(a1 + 8) & 6;
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
  {
    if (!v9)
      return 0;
    return sub_22EFC7594(a1);
  }
  else
  {
    if (v9)
      return *(_QWORD *)(a1 - 8);
    return 0;
  }
}

uint64_t sub_22EC61FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  char v13;
  BOOL v14;
  size_t v15;
  const void *v16;
  size_t v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  size_t v24;

  v21 = a2;
  v22 = 0;
  v4 = a1 + 10128;
  v23 = (const void *)a2;
  if ((sub_22F275208((uint64_t *)(a1 + 10128), &v23, &v22) & 1) != 0)
    return 1;
  v6 = *(_DWORD *)(a2 + 28);
  if (v6 == 6)
  {
    v7 = *(_DWORD *)(a1 + 8992);
    if (v7 && *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v7 - 48) == a2)
      goto LABEL_23;
  }
  else if (v6 == 5 && !*(_QWORD *)(a2 + 32))
  {
LABEL_23:
    sub_22F275184(v4, &v21, (uint64_t)&v23);
    return 1;
  }
  v8 = sub_22EC6212C((std::string *)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 72);
  v12 = (const void *)(v11 + 496);
  v13 = *(_BYTE *)(v11 + 519);
  v14 = v13 < 0;
  v16 = *(const void **)(v11 + 496);
  v15 = *(_QWORD *)(v11 + 504);
  if (v13 < 0)
    v12 = v16;
  v17 = v13 & 0x7F;
  if (!v14)
    v15 = v17;
  v23 = v12;
  v24 = v15;
  LOBYTE(v22) = 58;
  v18 = llvm::StringRef::find();
  if (v18 == -1)
  {
    v19 = v23;
    v20 = v24;
  }
  else
  {
    v19 = v23;
    if (v24 >= v18)
      v20 = v18;
    else
      v20 = v24;
  }
  if (v10 == v20 && (!v20 || !memcmp(v8, v19, v20)))
    goto LABEL_23;
  return 0;
}

const char *sub_22EC6212C(std::string *this)
{
  int v1;
  std::string *size;
  char *v3;

  v1 = HIDWORD(this[1].__r_.__value_.__r.__words[0]);
  if (v1 == 5)
    return "<global>";
  size = this;
  if ((v1 - 3) > 1)
  {
    if (v1 == 6)
    {
      do
      {
        v3 = (char *)size;
        size = (std::string *)size[1].__r_.__value_.__l.__size_;
      }
      while (size);
      if (v3[23] >= 0)
        return v3;
      else
        return *(const char **)v3;
    }
    else if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      return (const char *)this->__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    std::string::find(this, 58, 0);
    if (SHIBYTE(size->__r_.__value_.__r.__words[2]) < 0)
      return (const char *)size->__r_.__value_.__r.__words[0];
  }
  return (const char *)size;
}

uint64_t sub_22EC621E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v3 = sub_22EF5929C(*(_QWORD *)(a1 + 88), a2);
  if (!v4)
    return 0;
  v5 = (_QWORD **)v3;
  v6 = 8 * v4 - 8;
  do
  {
    v7 = *v5++;
    result = sub_22EC6224C(a1, v7, 0);
    if ((result & 1) != 0)
      break;
    v9 = v6;
    v6 -= 8;
  }
  while (v9);
  return result;
}

uint64_t sub_22EC6224C(uint64_t a1, _QWORD *a2, int a3)
{
  char v3;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;

  v3 = a3;
  if (!a3)
  {
    v21 = *((unsigned int *)a2 + 108);
    v22 = *(_QWORD *)(a1 + 10096);
    if (v21 >= (*(_QWORD *)(a1 + 10104) - v22) >> 2 || !*(_DWORD *)(v22 + 4 * v21))
      goto LABEL_27;
    return 1;
  }
  if ((sub_22EC61FEC(a1, (uint64_t)a2) & 1) != 0)
    return 1;
  if (*((_DWORD *)a2 + 7) == 4)
  {
    v6 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 9904), a2);
    v7 = *(_QWORD *)(a1 + 9912);
    v8 = 9920;
    if (v7 == *(_QWORD *)(a1 + 9904))
      v8 = 9924;
    if (v6 != (void **)(v7 + 8 * *(unsigned int *)(a1 + v8)))
      return 1;
  }
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x800000000000) != 0)
  {
    if (*(_DWORD *)(a1 + 8992))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 8);
      if (*(_DWORD *)(v9 + 28) == 4)
      {
        v10 = sub_22EC6212C((std::string *)v9);
        v12 = v11;
        v13 = *((_BYTE *)a2 + 23);
        v14 = v13 < 0;
        v15 = v13 >= 0 ? a2 : (_QWORD *)*a2;
        v16 = v13 & 0x7F;
        v17 = v14 ? a2[1] : v16;
        if (v12 == v17 && (!v17 || !memcmp(v10, v15, v17)))
        {
          v18 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 9904), a2);
          v19 = *(_QWORD *)(a1 + 9912);
          v20 = 9920;
          if (v19 == *(_QWORD *)(a1 + 9904))
            v20 = 9924;
          if (v18 != (void **)(v19 + 8 * *(unsigned int *)(a1 + v20)))
            return 1;
        }
      }
    }
  }
LABEL_27:
  v24 = sub_22F337CE8(a1);
  if (!*(_DWORD *)(v24 + 8))
    return 0;
  v25 = v24;
  result = sub_22F2588D8(*(_QWORD *)v24, *(_DWORD *)(v24 + 16), (uint64_t)a2, &v36);
  if ((result & 1) == 0 && (v3 & 1) == 0)
  {
    v26 = *(_DWORD *)(v25 + 8);
    v27 = *(uint64_t **)v25;
    v28 = *(unsigned int *)(v25 + 16);
    v29 = *(_QWORD *)v25 + 8 * v28;
    if (v26)
    {
      if ((_DWORD)v28)
      {
        v30 = 8 * v28;
        v31 = v27;
        while ((*v31 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v31;
          v30 -= 8;
          if (!v30)
            goto LABEL_36;
        }
      }
      else
      {
        v31 = v27;
      }
    }
    else
    {
LABEL_36:
      v31 = (uint64_t *)v29;
    }
    v32 = &v27[v28];
    if (v31 == v32)
      return 0;
    while (1)
    {
      v33 = *v31;
      if (!*(_DWORD *)(*v31 + 416))
        sub_22F420060(*v31);
      v35 = 0;
      v36 = a2;
      result = sub_22F275208((uint64_t *)(v33 + 408), &v36, &v35);
      if ((result & 1) != 0)
        return 1;
      v34 = v31 + 1;
      v31 = (uint64_t *)v29;
      if (v34 != (uint64_t *)v29)
      {
        v31 = v34;
        while ((*v31 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v31 == (uint64_t *)v29)
          {
            v31 = (uint64_t *)v29;
            break;
          }
        }
      }
      if (v31 == v32)
        return result;
    }
  }
  return result;
}

uint64_t sub_22EC62498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = sub_22EF5929C(*(_QWORD *)(a1 + 88), a2);
  if (!v4)
    return 0;
  v5 = (uint64_t *)v3;
  v6 = 8 * v4 - 8;
  do
  {
    v7 = *v5++;
    result = sub_22EC61FEC(a1, v7);
    if ((result & 1) != 0)
      break;
    v9 = v6;
    v6 -= 8;
  }
  while (v9);
  return result;
}

uint64_t sub_22EC624F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = a2;
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v6 == 38)
  {
    if (*(_QWORD *)(a2 + 72) >= 8uLL)
    {
      while (1)
      {
        v7 = *(_QWORD *)(v4 + 72);
        if ((v7 & 6) != 2)
        {
          if ((*(_BYTE *)(v4 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v4) & 1) != 0)
            return 1;
          v7 = *(_QWORD *)(v4 + 72);
          if (a3)
          {
            if ((*(_QWORD *)(v4 + 72) & 6) != 2)
              break;
          }
        }
LABEL_18:
        v4 = v7 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 6) != 2 || v4 == 0)
        {
          if ((v7 & 6) != 4 || v4 == 0)
            return 0;
          v4 = *(_QWORD *)v4;
        }
        if (!v4)
          return 0;
      }
      v8 = *(_QWORD *)(v4 + 8) & 6;
      if ((*(_BYTE *)(v4 + 29) & 0x80) != 0)
      {
        if (v8)
        {
          v9 = sub_22EFC7594(v4);
          goto LABEL_15;
        }
      }
      else if (v8)
      {
        v9 = *(_QWORD *)(v4 - 8);
LABEL_15:
        v10 = *(unsigned int *)(a3 + 8);
        if (v10 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
        ++*(_DWORD *)(a3 + 8);
        v7 = *(_QWORD *)(v4 + 72);
        goto LABEL_18;
      }
      v9 = 0;
      goto LABEL_15;
    }
    return 0;
  }
  if (a2 && v6 == 59)
  {
    if (*(_QWORD *)(a2 + 72) < 4uLL)
      return 0;
    while (1)
    {
      v13 = *(_QWORD *)(v4 + 72);
      if ((v13 & 3) != 1)
      {
        if ((*(_BYTE *)(v4 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v4) & 1) != 0)
          return 1;
        v13 = *(_QWORD *)(v4 + 72);
        if (a3)
        {
          if ((*(_QWORD *)(v4 + 72) & 3) != 1)
            break;
        }
      }
LABEL_47:
      v4 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v13 & 3) != 1 || v4 == 0)
      {
        if ((v13 & 3) != 2 || v4 == 0)
          return 0;
        v4 = *(_QWORD *)v4;
      }
      if (!v4)
        return 0;
    }
    v14 = *(_QWORD *)(v4 + 8) & 6;
    if ((*(_BYTE *)(v4 + 29) & 0x80) != 0)
    {
      if (v14)
      {
        v15 = sub_22EFC7594(v4);
        goto LABEL_44;
      }
    }
    else if (v14)
    {
      v15 = *(_QWORD *)(v4 - 8);
LABEL_44:
      v16 = *(unsigned int *)(a3 + 8);
      if (v16 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v15;
      ++*(_DWORD *)(a3 + 8);
      v13 = *(_QWORD *)(v4 + 72);
      goto LABEL_47;
    }
    v15 = 0;
    goto LABEL_44;
  }
  result = 0;
  if (a2 && *(_QWORD *)(a2 + 72) >= 8uLL)
  {
    while (1)
    {
      v20 = *(_QWORD *)(v4 + 72);
      if ((v20 & 6) != 2)
      {
        if ((*(_BYTE *)(v4 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v4) & 1) != 0)
          return 1;
        v20 = *(_QWORD *)(v4 + 72);
        if (a3)
        {
          if ((*(_QWORD *)(v4 + 72) & 6) != 2)
            break;
        }
      }
LABEL_75:
      v4 = v20 & 0xFFFFFFFFFFFFFFF8;
      if ((v20 & 6) != 2 || v4 == 0)
      {
        if ((v20 & 6) != 4 || v4 == 0)
          return 0;
        v4 = *(_QWORD *)v4;
      }
      if (!v4)
        return 0;
    }
    v21 = *(_QWORD *)(v4 + 8) & 6;
    if ((*(_BYTE *)(v4 + 29) & 0x80) != 0)
    {
      if (v21)
      {
        v22 = sub_22EFC7594(v4);
        goto LABEL_72;
      }
    }
    else if (v21)
    {
      v22 = *(_QWORD *)(v4 - 8);
LABEL_72:
      v23 = *(unsigned int *)(a3 + 8);
      if (v23 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      v20 = *(_QWORD *)(v4 + 72);
      goto LABEL_75;
    }
    v22 = 0;
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_22EC62824(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v16;
  uint64_t v17;
  char v19;

  if (a2)
  {
    v6 = 0;
    v7 = a2;
    while (1)
    {
      v8 = *(_DWORD *)(v7 + 28);
      if ((v8 & 0x7Fu) - 38 >= 0xFFFFFFFD)
        break;
      if ((v8 & 0x7Eu) - 58 < 0xFFFFFFFA)
      {
        if ((v8 & 0x7Fu) - 67 < 0xFFFFFFF9)
          goto LABEL_9;
        v9 = sub_22EFBC2B0(v7);
LABEL_8:
        if (v9 == 2)
          goto LABEL_9;
        goto LABEL_32;
      }
      v12 = *(_QWORD *)(v7 + 144) & 6;
      v13 = (_QWORD *)(*(_QWORD *)(v7 + 144) & 0xFFFFFFFFFFFFFFF8);
      if (v12 != 4 || v13 == 0)
      {
        if (v12 != 2 || v13 == 0)
          goto LABEL_32;
      }
      else
      {
        v13 += 2;
      }
      if ((*v13 & 6) == 2)
      {
LABEL_9:
        if ((*(_BYTE *)(v7 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v7) & 1) != 0)
        {
          v19 = 1;
          return v19 & 1 | ((v6 & 1) == 0);
        }
        if (a3)
        {
          v10 = *(_QWORD *)(v7 + 8) & 6;
          if ((*(_BYTE *)(v7 + 29) & 0x80) != 0)
          {
            if (!v10)
              goto LABEL_27;
            v11 = sub_22EFC7594(v7);
          }
          else
          {
            if (v10)
            {
              v11 = *(_QWORD *)(v7 - 8);
              goto LABEL_28;
            }
LABEL_27:
            v11 = 0;
          }
LABEL_28:
          v16 = *(unsigned int *)(a3 + 8);
          if (v16 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v11;
          ++*(_DWORD *)(a3 + 8);
        }
        v6 = 1;
      }
LABEL_32:
      v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 40))(v7);
      v7 = v17;
      if (v17 == a2 || v17 == 0)
        goto LABEL_41;
    }
    v9 = sub_22EFD5760(v7);
    goto LABEL_8;
  }
  v6 = 0;
LABEL_41:
  v19 = 0;
  return v19 & 1 | ((v6 & 1) == 0);
}

uint64_t sub_22EC629C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;

  if (a2)
  {
    v6 = 0;
    v7 = a2;
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 16);
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v9 = *(_QWORD *)(v9 + 8);
      v10 = *(_WORD *)(v9 + 8) & 0x7F;
      if (v10 != 83 && v10 != 16)
        goto LABEL_23;
      if ((*(_BYTE *)(v7 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v7) & 1) != 0)
      {
        v17 = 1;
        return v17 & 1 | ((v6 & 1) == 0);
      }
      if (a3)
        break;
LABEL_22:
      v6 = 1;
LABEL_23:
      v15 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 40))(v7);
      v7 = v15;
      if (v15 == a2 || v15 == 0)
        goto LABEL_30;
    }
    v12 = *(_QWORD *)(v7 + 8) & 6;
    if ((*(_BYTE *)(v7 + 29) & 0x80) != 0)
    {
      if (v12)
      {
        v13 = sub_22EFC7594(v7);
        goto LABEL_19;
      }
    }
    else if (v12)
    {
      v13 = *(_QWORD *)(v7 - 8);
LABEL_19:
      v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v13;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_22;
    }
    v13 = 0;
    goto LABEL_19;
  }
  v6 = 0;
LABEL_30:
  v17 = 0;
  return v17 & 1 | ((v6 & 1) == 0);
}

uint64_t sub_22EC62AF4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v4 = *(_QWORD *)(a2 + 8) & 6;
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    if (v4)
    {
      v5 = (_QWORD *)sub_22EFC7594(a2);
      v4 = *(_QWORD *)(a2 + 8) & 6;
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    v5 = *(_QWORD **)(a2 - 8);
    goto LABEL_7;
  }
  v5 = 0;
LABEL_7:
  if ((sub_22EC6224C(a1, v5, v4 == 6) & 1) != 0)
    return 1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
    v8 = *(_QWORD *)(v8 + 8);
  if (!v8)
    return 0;
  result = 0;
  v9 = *(_WORD *)(v8 + 8);
  v10 = v9 & 0x7F;
  v11 = v10 > 0x10 || ((1 << (v9 & 0x7F)) & 0x11020) == 0;
  if (v11 && v10 != 83)
  {
    v12 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (v12 > 0x3A)
    {
      if (v12 == 64)
        goto LABEL_83;
      if (v12 != 59)
      {
LABEL_21:
        if ((v9 & 0x7Eu) - 52 > 5 || (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
        {
          if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
          {
            while (1)
            {
              v13 = v9 & 0x7F;
              v14 = -40;
              if (v13 > 70)
              {
                if (v13 == 83)
                  goto LABEL_41;
                if (v13 == 71)
                {
                  v14 = -56;
                  goto LABEL_41;
                }
                if (v13 != 81)
                  goto LABEL_35;
              }
              else
              {
                if (v13 > 0x18)
                  goto LABEL_34;
                if (v13 == 16)
                  goto LABEL_27;
                if (((1 << v13) & 0x1066) == 0)
                {
                  if (v13 == 24)
                  {
LABEL_27:
                    v14 = -48;
                    goto LABEL_41;
                  }
LABEL_34:
                  if (v13 == 70)
                  {
                    v14 = -64;
                    goto LABEL_41;
                  }
LABEL_35:
                  v15 = v13 - 52;
                  if ((v13 - 33) >= 5)
                    v16 = -48;
                  else
                    v16 = -64;
                  if (v15 >= 6)
                    v14 = v16;
                  else
                    v14 = -72;
                }
              }
LABEL_41:
              v17 = sub_22EF5929C(*(_QWORD *)(a1 + 88), v8 + v14);
              if (v18)
              {
                v19 = (uint64_t *)v17;
                v20 = 8 * v18;
                while ((sub_22EC61FEC(a1, *v19) & 1) == 0)
                {
                  ++v19;
                  v20 -= 8;
                  if (!v20)
                    goto LABEL_45;
                }
LABEL_166:
                result = 1;
                goto LABEL_168;
              }
LABEL_45:
              v21 = *(_WORD *)(v8 + 8) & 0x7F;
              v22 = -40;
              if (v21 > 0x46)
              {
                if (v21 != 83)
                {
                  if (v21 == 71)
                  {
                    v22 = -56;
                  }
                  else if (v21 != 81)
                  {
                    goto LABEL_56;
                  }
                }
              }
              else
              {
                if (v21 > 0x18)
                  goto LABEL_55;
                if (v21 == 16)
                  goto LABEL_48;
                if (((1 << v21) & 0x1066) != 0)
                  goto LABEL_62;
                if (v21 == 24)
                {
LABEL_48:
                  v22 = -48;
                }
                else
                {
LABEL_55:
                  if (v21 != 70)
                  {
LABEL_56:
                    v23 = v21 - 52;
                    if (v21 - 33 >= 5)
                      v24 = -48;
                    else
                      v24 = -64;
                    if (v23 >= 6)
                      v22 = v24;
                    else
                      v22 = -72;
                    goto LABEL_62;
                  }
                  v22 = -64;
                }
              }
LABEL_62:
              v25 = *(_QWORD *)(v8 + v22 + 16);
              v8 = v25 & 0xFFFFFFFFFFFFFFF8;
              if ((v25 & 4) != 0)
                v8 = *(_QWORD *)(v8 + 8);
              v9 = *(_WORD *)(v8 + 8);
              v26 = (v9 & 0x7Fu) > 0x10 || ((1 << (v9 & 0x7F)) & 0x11020) == 0;
              if (!v26 || (v9 & 0x7F) == 0x53)
                return 0;
            }
          }
          v29 = -40;
          if (v10 > 70)
          {
            if (v10 == 71)
            {
              v29 = -56;
              goto LABEL_162;
            }
            if (v10 == 81)
              goto LABEL_162;
          }
          else
          {
            if (v10 <= 0x18)
            {
              if (v10 == 16)
                goto LABEL_93;
              if (((1 << v10) & 0x1066) != 0)
                goto LABEL_162;
              if (v10 == 24)
                goto LABEL_93;
            }
            if (v10 == 70)
            {
LABEL_154:
              v29 = -64;
              goto LABEL_162;
            }
          }
          if ((v10 - 52) < 6)
          {
            v29 = -72;
            goto LABEL_162;
          }
          if ((v10 - 33) < 5)
            goto LABEL_154;
LABEL_93:
          v29 = -48;
LABEL_162:
          v39 = v8 + v29;
          goto LABEL_133;
        }
LABEL_83:
        v28 = -40;
        if (v10 > 70)
        {
          if (v10 == 71)
          {
            v28 = -56;
            goto LABEL_141;
          }
          if (v10 == 81)
            goto LABEL_141;
        }
        else
        {
          if (v10 <= 0x18)
          {
            if (v10 == 16)
              goto LABEL_86;
            if (((1 << v10) & 0x1066) != 0)
              goto LABEL_141;
            if (v10 == 24)
              goto LABEL_86;
          }
          if (v10 == 70)
          {
LABEL_139:
            v28 = -64;
            goto LABEL_141;
          }
        }
        if ((v10 - 52) < 6)
        {
          v28 = -72;
          goto LABEL_141;
        }
        if ((v10 - 33) < 5)
          goto LABEL_139;
LABEL_86:
        v28 = -48;
LABEL_141:
        v40 = v8 + v28;
LABEL_165:
        if ((*(_BYTE *)(v40 + 8) & 4) == 0)
          goto LABEL_166;
        result = sub_22EC62AF4(a1, v40);
LABEL_168:
        if ((_DWORD)result && !*(_DWORD *)(a1 + 10680))
        {
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200000000000000) == 0)
          {
            v41 = *(_QWORD *)(a2 + 8);
            if ((v41 & 4) != 0)
              *(_QWORD *)(a2 + 8) = v41 & 0xFFFFFFFFFFFFFFF9 | 2;
          }
          return 1;
        }
        return result;
      }
    }
    else if (v12 != 32 && v12 != 38)
    {
      goto LABEL_21;
    }
    v27 = -40;
    if (v10 > 70)
    {
      if (v10 == 71)
      {
        v27 = -56;
        goto LABEL_101;
      }
      if (v10 == 81)
      {
LABEL_101:
        v30 = sub_22EFC7948(v8 + v27);
        if (!v30)
          goto LABEL_110;
        v31 = *(_QWORD *)(v30 + 56);
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x3B)
        {
          v32 = (_DWORD *)(a2 + 68);
        }
        else
        {
          if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x26)
          {
            v32 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 32);
            v33 = 16;
LABEL_108:
            v34 = *v32 >> v33;
            if ((*(_DWORD *)(v31 + 12) & 0x1FFFFFFFu) <= v34 || *(_QWORD *)(v31 + 8 * v34 + 16) != a2)
            {
LABEL_110:
              v35 = *(_WORD *)(v8 + 8) & 0x7F;
              v36 = -40;
              if (v35 > 0x46)
              {
                switch(v35)
                {
                  case 'S':
                    goto LABEL_132;
                  case 'G':
                    v36 = -56;
                    goto LABEL_132;
                  case 'Q':
                    goto LABEL_132;
                }
              }
              else
              {
                if (v35 <= 0x18)
                {
                  if (v35 == 16)
                    goto LABEL_113;
                  if (((1 << v35) & 0x1066) != 0)
                    goto LABEL_132;
                  if (v35 == 24)
                  {
LABEL_113:
                    v36 = -48;
LABEL_132:
                    v39 = v8 + v36;
LABEL_133:
                    v42 = 0;
                    result = sub_22EE8B858(a1, v39, &v42, 0);
                    goto LABEL_168;
                  }
                }
                if (v35 == 70)
                {
LABEL_127:
                  v36 = -64;
                  goto LABEL_132;
                }
              }
              if (v35 - 52 < 6)
              {
                v36 = -72;
                goto LABEL_132;
              }
              if (v35 - 33 < 5)
                goto LABEL_127;
              goto LABEL_113;
            }
            v37 = *(_WORD *)(v8 + 8) & 0x7F;
            v38 = -40;
            if (v37 > 0x46)
            {
              switch(v37)
              {
                case 'S':
                  goto LABEL_164;
                case 'G':
                  v38 = -56;
                  goto LABEL_164;
                case 'Q':
                  goto LABEL_164;
              }
            }
            else
            {
              if (v37 <= 0x18)
              {
                if (v37 == 16)
                  goto LABEL_121;
                if (((1 << v37) & 0x1066) != 0)
                  goto LABEL_164;
                if (v37 == 24)
                {
LABEL_121:
                  v38 = -48;
LABEL_164:
                  v40 = v8 + v38;
                  goto LABEL_165;
                }
              }
              if (v37 == 70)
              {
LABEL_160:
                v38 = -64;
                goto LABEL_164;
              }
            }
            if (v37 - 52 < 6)
            {
              v38 = -72;
              goto LABEL_164;
            }
            if (v37 - 33 < 5)
              goto LABEL_160;
            goto LABEL_121;
          }
          v32 = (_DWORD *)(a2 + 64);
        }
        v33 = 20;
        goto LABEL_108;
      }
    }
    else
    {
      if (v10 <= 0x18)
      {
        if (v10 == 16)
        {
LABEL_82:
          v27 = -48;
          goto LABEL_101;
        }
        if (((1 << v10) & 0x1066) != 0)
          goto LABEL_101;
        if (v10 == 24)
          goto LABEL_82;
      }
      if (v10 == 70)
      {
LABEL_99:
        v27 = -64;
        goto LABEL_101;
      }
    }
    if ((v10 - 52) >= 6)
    {
      if ((v10 - 33) >= 5)
        goto LABEL_82;
      goto LABEL_99;
    }
    v27 = -72;
    goto LABEL_101;
  }
  return result;
}

uint64_t sub_22EC631CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD **)(a2 + 8);
    v7 = 8 * v4;
    while (1)
    {
      v8 = *v6 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_BYTE *)(v8 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v8) & 1) != 0)
        return 1;
      ++v6;
      v7 -= 8;
      if (!v7)
        return sub_22EFB948C(a3) >= 3 && sub_22EFB9D84(a3) == 0;
    }
  }
  else
  {
    return sub_22EFB948C(a3) >= 3 && sub_22EFB9D84(a3) == 0;
  }
}

uint64_t sub_22EC63260(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  int v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;

  if (!a2)
    return 1;
  v4 = (_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 4) == 0)
    return 1;
  v8 = sub_22EC62AF4(a1, a2);
  if ((v8 & 1) == 0)
  {
    v10 = (_BYTE *)a2;
    while (!a3)
    {
LABEL_19:
      v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v10 + 40))(v10);
      v15 = v14 == a2 || v14 == 0;
      v9 = !v15;
      if (!v15)
      {
        v10 = (_BYTE *)v14;
        v4 = (_QWORD *)(v14 + 8);
        if ((*(_BYTE *)(v14 + 8) & 4) != 0 && (sub_22EC62AF4(a1, v14) & 1) == 0)
          continue;
      }
      return v8 | v9;
    }
    v11 = *v4 & 6;
    if ((v10[29] & 0x80) != 0)
    {
      if (v11)
      {
        v12 = sub_22EFC7594((unint64_t)v10);
        goto LABEL_16;
      }
    }
    else if (v11)
    {
      v12 = *((_QWORD *)v10 - 1);
LABEL_16:
      v13 = *(unsigned int *)(a3 + 8);
      if (v13 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v12;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_19;
    }
    v12 = 0;
    goto LABEL_16;
  }
  v9 = 1;
  return v8 | v9;
}

unint64_t sub_22EC63394(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  unint64_t v9;
  unint64_t v10;

  if (!a2 || (a2[7] & 0x7F) != 0x10)
    return sub_22EC63498(*(_QWORD *)(a1 + 112), (unint64_t)a2, *(_DWORD *)(a1 + 156));
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (uint64_t *)(*(_QWORD *)(a1 + 112) + 11928);
  v8[0] = v4;
  v9 = 0;
  if ((sub_22F246C54(v5, v8, &v9) & 1) == 0 || (v6 = *(_QWORD *)(v9 + 8)) == 0)
  {
    v6 = v4;
    if ((*(_BYTE *)(v4 + 8) & 4) == 0
      || (v6 = v4, (sub_22EC62AF4(*(_QWORD *)(a1 + 112), v4) & 1) != 0)
      || (v6 = sub_22EC63498(*(_QWORD *)(a1 + 112), v4, *(_DWORD *)(a1 + 156))) != 0)
    {
      v7 = *(_QWORD *)(a1 + 112) + 11928;
      v9 = v4;
      v10 = v6;
      sub_22F28ADF8(v7, &v9, &v10, (uint64_t)v8);
    }
  }
  return v6;
}

unint64_t sub_22EC63498(uint64_t a1, unint64_t a2, __int16 a3)
{
  unsigned __int16 v5;
  unint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  v5 = a3 & 0x3FFF;
  v6 = a2;
  while (v6 == a2
       || (v5 & *(_WORD *)(v6 + 30)) == 0
       || (*(_BYTE *)(v6 + 8) & 4) != 0 && (sub_22EC62AF4(a1, v6) & 1) == 0)
  {
    v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 40))(v6);
    v6 = v7;
    if (v7 == a2 || v7 == 0)
      return 0;
  }
  return v6;
}

uint64_t sub_22EC63520(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t **v34;
  BOOL v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  char v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _WORD *v73;
  uint64_t v74;
  int v75;
  int v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *i;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  BOOL v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  int v117;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  _QWORD *v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  void **v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  llvm::SmallPtrSetImplBase *v145;
  int v146;
  char v148;
  uint64_t **v149;
  unint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  _BYTE v159[128];
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  int v163;
  _QWORD v164[10];

  v164[8] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 120);
  if (!v5)
    return 0;
  v6 = a3;
  v8 = a1;
  v9 = *(_DWORD *)(a2 + 152);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0 || a5)
  {
    if (v9 == 9)
    {
      while (1)
      {
        if ((v6[1] & 8) != 0)
        {
          v15 = v6[45];
          if (!v15)
            break;
          v16 = *(_WORD *)(v15 + 8) & 0x7F;
          if (v16 == 33)
          {
            if ((*(_BYTE *)(v15 + 12) & 0x80) != 0)
              break;
          }
          else if (v16 != 12 && v16 != 5)
          {
            break;
          }
        }
        v6 = (_QWORD *)*v6;
      }
    }
    v18 = v6;
    v19 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a2 + 156) = v19 & 0xFFFFF7FF | (((v19 & 0x420) != 0) << 11);
    v21 = sub_22E8CEB58(a1 + 3320, v5);
    v156 = v21;
    if (!v21)
    {
LABEL_56:
      *(_DWORD *)(a2 + 156) = *(_DWORD *)(a2 + 156) & 0xFFFFF7FF | (((v19 >> 11) & 1) << 11);
      v34 = (uint64_t **)v6;
      v8 = a1;
      goto LABEL_214;
    }
    v22 = v21;
    v23 = 0;
    while (1)
    {
      if ((v22 & 1) != 0)
        v24 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      else
        v24 = v22;
      v25 = sub_22EAC6F40(a2, v24);
      if (v25)
      {
        v26 = v25;
        if (v9 == 9)
        {
          if ((v23 & 1) == 0)
          {
            if ((v22 & 1) != 0)
              v27 = *(void **)(v22 & 0xFFFFFFFFFFFFFFFELL);
            else
              v27 = (void *)v22;
            v29 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v6 + 9), v27);
            v30 = v6[10];
            v31 = 88;
            if (v30 == v6[9])
              v31 = 92;
            if (v29 != (void **)(v30 + 8 * *(unsigned int *)((char *)v6 + v31)))
              goto LABEL_194;
          }
          v32 = (v22 & 1) != 0 ? *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL) : v22;
          v33 = sub_22EFB948C(v32);
          if (v33 != 3)
          {
            if (v33)
            {
LABEL_194:
              v91 = *(unsigned int *)(v26 + 28);
              v92 = *(_DWORD *)(a2 + 16);
              if (v92 >= *(_DWORD *)(a2 + 20))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v92 = *(_DWORD *)(a2 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v92) = (v91 >> 13) & 3 | v26;
              ++*(_DWORD *)(a2 + 16);
              *(_DWORD *)a2 = 2;
              if (!v6)
                goto LABEL_298;
              while (1)
              {
                v93 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v18 + 9), (void *)v26);
                v94 = v18[10];
                v95 = v94 == v18[9] ? 92 : 88;
                if (v93 != (void **)(v94 + 8 * *(unsigned int *)((char *)v18 + v95)))
                  break;
                v18 = (_QWORD *)*v18;
                if (!v18)
                  goto LABEL_298;
              }
              v121 = v18[45];
              if (v121 && ((v122 = *(_WORD *)(v121 + 8) & 0x7F, v122 != 16) ? (v123 = v122 == 83) : (v123 = 1), v123))
              {
LABEL_298:
                if ((v22 & 1) != 0)
                  v124 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
                else
                  v124 = v22;
                v125 = *(_QWORD *)(v124 + 16);
                v126 = (_QWORD *)(v125 & 0xFFFFFFFFFFFFFFF8);
                if ((v125 & 4) != 0)
                  v126 = (_QWORD *)*v126;
                v127 = sub_22EFCBB30((unint64_t)v126);
                v128 = 0;
                v129 = 1;
              }
              else
              {
                v128 = v18;
                v129 = 0;
                v127 = 0;
              }
              v155 = v22;
              if ((v22 & 1) != 0)
              {
                sub_22E8CECFC(&v155);
                v130 = v155;
                if (v155)
                {
                  while (1)
                  {
                    if ((v129 & 1) != 0)
                    {
                      if ((v130 & 1) != 0)
                        v131 = *(_QWORD *)(v130 & 0xFFFFFFFFFFFFFFFELL);
                      else
                        v131 = v130;
                      v133 = *(_QWORD *)(v131 + 16);
                      v134 = (_QWORD *)(v133 & 0xFFFFFFFFFFFFFFF8);
                      if ((v133 & 4) != 0)
                        v134 = (_QWORD *)*v134;
                      v135 = sub_22EFCBB30((unint64_t)v134);
                      if (!v127)
                        break;
                      v136 = sub_22EFCC008(v135);
                      if (v136 != sub_22EFCC008(v127))
                        break;
                    }
                    else
                    {
                      if ((v130 & 1) != 0)
                        v132 = *(void **)(v130 & 0xFFFFFFFFFFFFFFFELL);
                      else
                        v132 = (void *)v130;
                      v137 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v128 + 9), v132);
                      v138 = v128[10];
                      v139 = 88;
                      if (v138 == v128[9])
                        v139 = 92;
                      if (v137 == (void **)(v138 + 8 * *(unsigned int *)((char *)v128 + v139)))
                        break;
                    }
                    if ((v130 & 1) != 0)
                      v140 = *(_QWORD *)(v130 & 0xFFFFFFFFFFFFFFFELL);
                    else
                      v140 = v130;
                    v141 = sub_22EAC6F40(a2, v140);
                    if (v141)
                    {
                      v142 = v141;
                      v143 = *(unsigned int *)(v141 + 28);
                      v144 = *(unsigned int *)(a2 + 16);
                      if (v144 >= *(unsigned int *)(a2 + 20))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v144 = *(unsigned int *)(a2 + 16);
                      }
                      *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v144) = (v143 >> 13) & 3 | v142;
                      ++*(_DWORD *)(a2 + 16);
                      *(_DWORD *)a2 = 2;
                    }
                    if ((v130 & 1) != 0)
                    {
                      sub_22E8CECFC(&v155);
                      v130 = v155;
                      if (v155)
                        continue;
                    }
                    break;
                  }
                }
              }
              sub_22EC561E4(a2);
              *(_DWORD *)(a2 + 156) = *(_DWORD *)(a2 + 156) & 0xFFFFF7FF | (((v19 >> 11) & 1) << 11);
              return 1;
            }
          }
          v23 = 1;
          *(_BYTE *)(a2 + 165) = 1;
        }
        else
        {
          if (v9 != 12)
            goto LABEL_194;
          v28 = (v22 & 1) != 0 ? *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL) : v22;
          if ((*(_DWORD *)(v28 + 28) & 0x7F) == 0x3E)
            goto LABEL_194;
        }
      }
      if ((v22 & 1) != 0)
      {
        sub_22E8CECFC((unint64_t *)&v156);
        v22 = v156;
        if (v156)
          continue;
      }
      goto LABEL_56;
    }
  }
  v10 = v5 & 7;
  if (v10 == 7)
  {
    v11 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (v11 >= 3)
      v11 = 3;
    v10 = v11 | 8;
  }
  if ((v10 - 3) >= 2)
  {
    if (v10 == 6 && (*(_QWORD *)(a2 + 120) & 7) == 6 && a3 && *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8) == 15)
    {
LABEL_10:
      v12 = a3;
      do
      {
        v13 = v12[45];
        if (v13)
          sub_22EC60B4C(v8, v5, *(_DWORD *)(a2 + 128), v13);
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
  else if (a3)
  {
    goto LABEL_10;
  }
  v155 = sub_22E8CEB58(v8 + 3320, v5);
  v156 = v8;
  v157 = v159;
  v158 = 0x800000000;
  v160 = v164;
  v161 = v164;
  v162 = 8;
  v163 = 0;
  v146 = *(_DWORD *)(a2 + 156) >> 11;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(a2 + 156) & 0xFFFFF7FF | (((*(_DWORD *)(a2 + 156) & 0x420) != 0) << 11);
  v149 = (uint64_t **)v6;
  if (!v6)
    goto LABEL_204;
  v148 = 0;
  v152 = 0;
  v145 = (llvm::SmallPtrSetImplBase *)(v6 + 9);
  v35 = (v5 & 7) != 0;
  v150 = v5 & 0xFFFFFFFFFFFFFFF8;
  v151 = 0;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) == 0)
    v35 = 1;
  v153 = v35;
  while (1)
  {
    v36 = v6[45];
    if (v36)
    {
      v37 = *(_WORD *)(v36 + 8) & 0x7F;
      if (v37 == 16 || v37 == 83)
      {
        if (v9 == 3)
          goto LABEL_204;
        if ((v152 & 1) == 0)
        {
          sub_22EC60FC8(&v156, v149, v6[45]);
          v99 = 126 - 2 * __clz(v158);
          if ((_DWORD)v158)
            v100 = v99;
          else
            v100 = 0;
          sub_22EC6F624((uint64_t)v157, (__int128 *)v157 + v158, v100, 1);
        }
        if (!*(_BYTE *)(a2 + 160))
          *(_DWORD *)(a2 + 156) = *(_DWORD *)(a2 + 156) & 0xFFFFF7FF | ((v146 & 1) << 11);
        v101 = v151;
        while (1)
        {
          v102 = v155;
          if (!v155)
          {
LABEL_248:
            v88 = 0;
            goto LABEL_249;
          }
          v103 = 0;
          while (1)
          {
            if ((v102 & 1) != 0)
              v102 = *(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFFELL);
            v104 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v6 + 9), (void *)v102);
            v105 = v6[10];
            if (v105 == v6[9])
              v106 = 92;
            else
              v106 = 88;
            if (v104 == (void **)(v105 + 8 * *(unsigned int *)((char *)v6 + v106)))
              goto LABEL_245;
            v107 = v155;
            if ((v155 & 1) != 0)
            {
              v108 = sub_22EAC6F40(a2, *(_QWORD *)(v155 & 0xFFFFFFFFFFFFFFFELL));
              if (!v108)
                goto LABEL_242;
              goto LABEL_238;
            }
            v108 = sub_22EAC6F40(a2, v155);
            if (!v108)
              break;
LABEL_238:
            v109 = *(unsigned int *)(v108 + 28);
            v110 = *(unsigned int *)(a2 + 16);
            if (v110 >= *(unsigned int *)(a2 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v110 = *(unsigned int *)(a2 + 16);
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v110) = (v109 >> 13) & 3 | v108;
            ++*(_DWORD *)(a2 + 16);
            *(_DWORD *)a2 = 2;
            if ((v107 & 1) == 0)
            {
              v155 = 0;
              goto LABEL_246;
            }
            v103 = 1;
LABEL_242:
            sub_22E8CECFC(&v155);
            v102 = v155;
            if (!v155)
              goto LABEL_245;
          }
          v155 = 0;
LABEL_245:
          if ((v103 & 1) == 0)
            goto LABEL_248;
LABEL_246:
          if ((v6[1] & 0x80) != 0)
            goto LABEL_208;
          v88 = 1;
LABEL_249:
          if (v6[45])
          {
            v111 = v101;
            v101 = v6[45];
            goto LABEL_251;
          }
          if ((v6[1] & 0x80) != 0 && v101)
          {
            if (*v6)
            {
              if ((*(_BYTE *)(*v6 + 8) & 0x80) != 0)
                goto LABEL_286;
              v111 = 0;
LABEL_251:
              v112 = v101;
              v113 = sub_22EC60E04(v6);
              v114 = v113;
              if (v115)
                v101 = v113;
              else
                v101 = v111;
              while (2)
              {
                if (v114)
                {
                  v116 = sub_22EFCC008(v112);
                  if (v116 == sub_22EFCC008(v114))
                  {
                    if (!*(_BYTE *)(a2 + 160))
                      goto LABEL_286;
                    v120 = *(_WORD *)(v112 + 8) & 0x7F;
                    if (v120 == 33)
                    {
                      if ((*(_BYTE *)(v112 + 12) & 0x80) == 0)
                        goto LABEL_286;
                    }
                    else if (v120 == 12 || v120 == 5)
                    {
                      goto LABEL_286;
                    }
LABEL_204:
                    v88 = 0;
                    goto LABEL_209;
                  }
                }
                v117 = *(_WORD *)(v112 + 8) & 0x7F;
                if (v117 == 33)
                {
                  if ((*(_BYTE *)(v112 + 12) & 0x80) != 0)
                  {
LABEL_261:
                    if (v88)
                    {
                      if ((v6[1] & 0x80) == 0)
                        sub_22EC61124(v8, a2, v112, (uint64_t)&v156);
                      goto LABEL_208;
                    }
                    if (sub_22EC61124(v8, a2, v112, (uint64_t)&v156))
                      goto LABEL_208;
                    if (*(_BYTE *)(a2 + 160))
                    {
                      v119 = *(_WORD *)(v112 + 8) & 0x7F;
                      if (v119 == 33)
                      {
                        v88 = 0;
                        if ((*(_BYTE *)(v112 + 12) & 0x80) != 0)
                          goto LABEL_209;
                      }
                      else
                      {
                        v88 = 0;
                        if (v119 != 12 && v119 != 5)
                          goto LABEL_209;
                      }
                    }
                    else
                    {
                      v88 = 0;
                    }
                  }
                }
                else if (v117 != 12 && v117 != 5)
                {
                  goto LABEL_261;
                }
                v112 = sub_22EFCB77C(v112);
                if (!v112)
                  goto LABEL_286;
                continue;
              }
            }
LABEL_287:
            v88 = *(_DWORD *)(a2 + 16) != 0;
            goto LABEL_209;
          }
LABEL_286:
          v6 = (_QWORD *)*v6;
          if (!v6)
            goto LABEL_287;
        }
      }
    }
    v38 = v155;
    if (!v155)
      goto LABEL_110;
    v39 = 1;
    do
    {
      if ((v38 & 1) != 0)
        v38 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFFELL);
      v40 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v6 + 9), (void *)v38);
      v41 = v6[10];
      v42 = 88;
      if (v41 == v6[9])
        v42 = 92;
      if (v40 == (void **)(v41 + 8 * *(unsigned int *)((char *)v6 + v42)))
        break;
      v43 = v155;
      if ((v155 & 1) != 0)
        v44 = *(_QWORD *)(v155 & 0xFFFFFFFFFFFFFFFELL);
      else
        v44 = v155;
      v45 = sub_22EAC6F40(a2, v44);
      if (!v45)
        goto LABEL_91;
      v46 = v45;
      if (v9 != 9
        || ((v43 & 1) != 0 ? (v47 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL)) : (v47 = v43),
            (v48 = *(_DWORD *)(v47 + 28) & 0x7F, v49 = v48 > 0x3B, v50 = (1 << v48) & 0x800004100000000, !v49)
          ? (v51 = v50 == 0)
          : (v51 = 1),
            !v51))
      {
        v39 = 0;
LABEL_88:
        v52 = *(unsigned int *)(v46 + 28);
        v53 = *(unsigned int *)(a2 + 16);
        if (v53 >= *(unsigned int *)(a2 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v53 = *(unsigned int *)(a2 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v53) = (v52 >> 13) & 3 | v46;
        ++*(_DWORD *)(a2 + 16);
        *(_DWORD *)a2 = 2;
LABEL_91:
        if ((v43 & 1) == 0)
          goto LABEL_108;
        goto LABEL_92;
      }
      if ((v148 & 1) == 0)
      {
        if ((v43 & 1) != 0)
          v54 = *(void **)(v43 & 0xFFFFFFFFFFFFFFFELL);
        else
          v54 = (void *)v43;
        v55 = sub_22E3BA914(v145, v54);
        v56 = v149[10];
        v57 = 88;
        if (v56 == v149[9])
          v57 = 92;
        if (v55 != (void **)&v56[*(unsigned int *)((char *)v149 + v57)])
        {
          v148 = 0;
          goto LABEL_88;
        }
      }
      if ((v43 & 1) != 0)
        v58 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
      else
        v58 = v43;
      v59 = sub_22EFB948C(v58);
      v148 = 1;
      if (v59 != 3 && v59)
        goto LABEL_88;
      *(_BYTE *)(a2 + 165) = 1;
      if ((v43 & 1) == 0)
      {
LABEL_108:
        v155 = 0;
        break;
      }
LABEL_92:
      sub_22E8CECFC(&v155);
      v38 = v155;
    }
    while (v155);
    if ((v39 & 1) == 0)
    {
      sub_22EC561E4(a2);
      v88 = 1;
      if (v36 && (v6[1] & 0x20) != 0 && (*(_WORD *)(v36 + 8) & 0x7Fu) - 35 <= 2)
        *(_QWORD *)(a2 + 96) = v36 - 64;
      goto LABEL_209;
    }
LABEL_110:
    if (v9 == 10 && (v6[1] & 0x20) == 0)
      goto LABEL_204;
    if (v36)
    {
      v60 = v151;
      v61 = v36;
      goto LABEL_114;
    }
    v90 = *v6;
    if ((v6[1] & 0x80) != 0)
    {
      v61 = v151;
      if (v151)
      {
        if (!v90)
          goto LABEL_204;
        if ((*(_BYTE *)(v90 + 8) & 0x80) == 0)
          break;
      }
    }
LABEL_187:
    v6 = (_QWORD *)v90;
    if (!v90)
      goto LABEL_204;
  }
  v60 = 0;
LABEL_114:
  v62 = sub_22EC60E04(v6);
  v63 = v62;
  if (v64)
    v65 = v62;
  else
    v65 = v60;
  v151 = v65;
  while (2)
  {
    if (v63)
    {
      v66 = sub_22EFCC008(v61);
      if (v66 == sub_22EFCC008(v63))
      {
LABEL_186:
        v90 = *v6;
        goto LABEL_187;
      }
    }
    v67 = *(_WORD *)(v61 + 8) & 0x7F;
    if (v67 <= 0x21)
    {
      if (((1 << v67) & 0x1000006) != 0)
      {
        if ((_DWORD)v67 == 24)
        {
          v68 = v153;
          if ((*(_BYTE *)(v61 + 10) & 2) == 0)
            v68 = 1;
          if ((v68 & 1) == 0)
          {
            v69 = sub_22EFDC9F0(v61 - 48);
            if (v69)
            {
              v70 = sub_22EFDB894(v69, v150, &v154);
              if (v70)
              {
                v71 = sub_22EAC6F40(a2, v70);
                if (v71)
                {
                  v96 = v71;
                  v97 = *(unsigned int *)(v71 + 28);
                  v98 = *(_DWORD *)(a2 + 16);
                  if (v98 >= *(_DWORD *)(a2 + 20))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v98 = *(_DWORD *)(a2 + 16);
                  }
                  *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v98) = (v97 >> 13) & 3 | v96;
                  ++*(_DWORD *)(a2 + 16);
                  *(_DWORD *)a2 = 2;
                  goto LABEL_208;
                }
              }
            }
          }
        }
        goto LABEL_182;
      }
      if (v67 == 33)
      {
        if ((*(_BYTE *)(v61 + 12) & 0x80) == 0)
          goto LABEL_182;
      }
      else if (((1 << v67) & 0x1020) != 0)
      {
        goto LABEL_182;
      }
    }
    if ((v67 - 52) < 6)
      goto LABEL_182;
    if ((_DWORD)v67 != 83 && (_DWORD)v67 != 16)
    {
      v88 = 1;
      v89 = sub_22EC611AC(v8, a2, v61, 1);
      if ((v89 & 1) != 0)
        goto LABEL_209;
LABEL_182:
      v61 = sub_22EFCB77C(v61);
      if (!v61)
        goto LABEL_186;
      continue;
    }
    break;
  }
  if ((v152 & 1) != 0)
    goto LABEL_179;
  v73 = (_WORD *)v61;
  while (2)
  {
    LOWORD(v74) = v73[4];
    v75 = v74 & 0x7F;
    if (v75 == 33)
    {
      v74 = *((_QWORD *)v73 + 1);
      if ((v74 & 0x8000000000) != 0)
        goto LABEL_145;
    }
    else if (v75 != 12 && v75 != 5)
    {
LABEL_145:
      sub_22EC60F70(&v156, v73, (unint64_t)v73);
      LOWORD(v74) = v73[4];
    }
    v77 = v74 & 0x7F;
    v78 = -40;
    if (v77 > 70)
    {
      if (v77 != 83)
      {
        if (v77 == 71)
        {
          v78 = -56;
        }
        else if (v77 != 81)
        {
          goto LABEL_157;
        }
      }
    }
    else
    {
      if (v77 > 0x18)
        goto LABEL_156;
      if (v77 == 16)
        goto LABEL_149;
      if (((1 << v77) & 0x1066) == 0)
      {
        if (v77 == 24)
        {
LABEL_149:
          v78 = -48;
        }
        else
        {
LABEL_156:
          if (v77 == 70)
          {
            v78 = -64;
          }
          else
          {
LABEL_157:
            v79 = v77 - 52;
            v80 = (v77 - 33) >= 5;
            v81 = -64;
            if (v80)
              v81 = -48;
            v80 = v79 >= 6;
            v78 = -72;
            if (v80)
              v78 = v81;
          }
        }
      }
    }
    v82 = *(_QWORD *)((char *)v73 + v78 + 16);
    v73 = (_WORD *)(v82 & 0xFFFFFFFFFFFFFFF8);
    if ((v82 & 4) != 0)
      v73 = *(_WORD **)v73;
    if (v73)
      continue;
    break;
  }
  for (i = v6; ; i = (_QWORD *)*i)
  {
    v84 = i[45];
    if (v84)
    {
      v85 = *(_WORD *)(v84 + 8) & 0x7F;
      if (v85 == 16 || v85 == 83)
        break;
    }
  }
  sub_22EC60FC8(&v156, v149, v84);
  v86 = 126 - 2 * __clz(v158);
  if ((_DWORD)v158)
    v87 = v86;
  else
    v87 = 0;
  sub_22EC6F624((uint64_t)v157, (__int128 *)v157 + v158, v87, 1);
LABEL_179:
  if (!sub_22EC61124(v8, a2, v61, (uint64_t)&v156))
  {
    v152 = 1;
    goto LABEL_182;
  }
LABEL_208:
  sub_22EC561E4(a2);
  v88 = 1;
LABEL_209:
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(a2 + 156) & 0xFFFFF7FF | ((v146 & 1) << 11);
  if (v161 != v160)
    free(v161);
  if (v157 != v159)
    free(v157);
  v34 = v149;
  if (v88)
    return 1;
LABEL_214:
  if (a4 && (sub_22EC56E74(v8, a2) & 1) != 0)
    return 1;
  result = *(_QWORD *)(v8 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)result + 272))(result, a2, v34);
  return result;
}

uint64_t sub_22EC64380(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t *v8;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  char *v46[2];
  _QWORD v47[17];
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[10];
  void *v56;
  uint64_t v57;
  _BYTE v58[104];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v61[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    sub_22EC60B4C(a1, *(_QWORD *)(a2 + 120), *(_DWORD *)(a2 + 128), a3);
  v6 = sub_22EFCE144(a3, *(_QWORD *)(a2 + 120));
  if (v6)
  {
    v7 = 0;
    while (1)
    {
      while (1)
      {
        v8 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
        v9 = (v6 & 0xFFFFFFFFFFFFFFF8) == 0 || (v6 & 4) == 0;
        if (!v9)
          break;
        v11 = sub_22EAC6F40(a2, (unint64_t)v8);
        if (!v11)
        {
LABEL_20:
          if ((v7 & 1) == 0)
            goto LABEL_22;
LABEL_21:
          v7 = 1;
LABEL_26:
          v14 = *(_QWORD *)(a2 + 120);
          if ((v14 & 7) == 5)
          {
            v15 = *(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v15 + 17) & 4) == 0
              && (*(_WORD *)(a3 + 8) & 0x7Fu) - 35 <= 2
              && (*(_BYTE *)(a3 + 10) & 1) != 0)
            {
              LOBYTE(v42) = 0;
              v16 = sub_22F110500((uint64_t)&v42, v15);
              if ((v14 & 7) != 5
                || !v16
                || (LOBYTE(v42) = 0, (v34 = sub_22F110500((uint64_t)&v42, v16)) == 0)
                || *(_QWORD *)(v34 + 24) > 0xFuLL
                || (*(_BYTE *)(v34 + 17) & 4) != 0)
              {
                v17 = a3 - 64;
                v18 = (_QWORD *)sub_22EA3A8C8(a3 - 64);
                v19 = sub_22EA3A92C(v17);
                if (v18 != (_QWORD *)v19)
                {
                  v20 = (_QWORD *)v19;
                  do
                  {
                    v21 = *v18 & 0xFFFFFFFFFFFFFFFCLL;
                    v22 = *(unsigned int *)(v21 + 28);
                    if (v21)
                      v23 = (*(_DWORD *)(v21 + 28) & 0x7F) == 29;
                    else
                      v23 = 0;
                    if (v23)
                    {
                      if (*(_BYTE *)(a2 + 160))
                      {
                        v24 = *(unsigned int *)(a2 + 16);
                        if (v24 >= *(unsigned int *)(a2 + 20))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v24 = *(unsigned int *)(a2 + 16);
                        }
                        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v24) = v21 | (v22 >> 13) & 3;
                        ++*(_DWORD *)(a2 + 16);
                        *(_DWORD *)a2 = 2;
                        v7 = 1;
                      }
                      else
                      {
                        v25 = *(_DWORD *)(a2 + 128);
                        v42 = 0;
                        v43 = v25;
                        v44 = 0;
                        v45 = 0;
                        v46[0] = (char *)v47;
                        v46[1] = (char *)0x400000000;
                        v47[16] = 0;
                        v48 = 0;
                        v49 = 0;
                        v50 = 0;
                        v51 = 0;
                        v52 = 0;
                        v53 = v55;
                        v54 = 0x800000000;
                        v55[8] = 0;
                        v55[9] = 0;
                        v56 = v58;
                        v57 = 0x400000000;
                        v58[96] = 0;
                        v59 = v61;
                        v60 = 0x400000000;
                        v41 = 0;
                        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 48) + 48) & 0xFFFFFFFFFFFFFFF0);
                        if (v26)
                          v27 = *(_BYTE *)(v26 + 16) == 26;
                        else
                          v27 = 0;
                        if (!v27)
                        {
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                            v26 = sub_22F10CF48(v26);
                          else
                            v26 = 0;
                        }
                        sub_22E4913B4(v26, (uint64_t)&v36);
                        v28 = 0;
                        LOWORD(v36) = v36 & 0xFFE0;
                        v37 = 0;
                        v38 = 0u;
                        v39 = 0u;
                        v40 = 0;
                        v29 = *(_QWORD *)(a2 + 120);
                        if ((v29 & 7) - 3 <= 2)
                          v28 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 8);
                        v30 = sub_22EF63D8C(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 88), v28, 0, 0, &v36, 0);
                        if (!sub_22EDC3E48(*(_QWORD *)(a2 + 112), v21, 0, v30, (void **)&v41, (uint64_t)&v42, 0))
                        {
                          v31 = (unint64_t)v41;
                          v32 = v41[7];
                          v33 = *(unsigned int *)(a2 + 16);
                          if (v33 >= *(unsigned int *)(a2 + 20))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v33 = *(unsigned int *)(a2 + 16);
                          }
                          *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v33) = (v32 >> 13) & 3 | v31;
                          ++*(_DWORD *)(a2 + 16);
                          *(_DWORD *)a2 = 2;
                          v7 = 1;
                        }
                        if (v59 != v61)
                          free(v59);
                        if (v56 != v58)
                          free(v56);
                        if (v53 != v55)
                          free(v53);
                        sub_22E89277C(v46);
                      }
                    }
                    ++v18;
                  }
                  while (v18 != v20);
                }
              }
            }
          }
          return v7 & 1;
        }
LABEL_15:
        v12 = *(unsigned int *)(v11 + 28);
        v13 = *(unsigned int *)(a2 + 16);
        if (v13 >= *(unsigned int *)(a2 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = *(unsigned int *)(a2 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v13) = (v12 >> 13) & 3 | v11;
        ++*(_DWORD *)(a2 + 16);
        *(_DWORD *)a2 = 2;
        if (v9)
          goto LABEL_21;
        v6 = v8[1];
        v7 = 1;
        if (!v6)
          goto LABEL_26;
      }
      v10 = sub_22EAC6F40(a2, *v8);
      if (v10)
      {
        v11 = v10;
        goto LABEL_15;
      }
      v6 = v8[1];
      if (!v6)
        goto LABEL_20;
    }
  }
LABEL_22:
  if ((*(_WORD *)(a3 + 8) & 0x7F) != 0x53 || (sub_22EC56E74(a1, a2) & 1) == 0)
  {
    v7 = 0;
    goto LABEL_26;
  }
  v7 = 1;
  return v7 & 1;
}

uint64_t sub_22EC64868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;

  v4 = *(_QWORD *)(a4 + 8);
  if (!v4)
    return sub_22EC611AC(a1, a2, a3, 0);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5 || (*(_QWORD *)(v4 + 8) & 6) != 2 || (*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 > 2)
    return sub_22EC611AC(a1, a2, a3, 0);
  v9 = sub_22F0AABF8(*(_QWORD *)(a4 + 8));
  return sub_22EC648E0(a1, a2, v9);
}

BOOL sub_22EC648E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[64];
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = sub_22E46A3A0(a3);
  v24 = v6;
  if (v5 != v6)
  {
    v7 = v5;
    do
    {
      v8 = *(_QWORD *)(**(_QWORD **)(v7 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
        v8 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v7 + 16));
      v9 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 24));
      v10 = *(_DWORD *)(a2 + 152);
      v26 = 0;
      v27 = v29;
      v28 = 0x800000000;
      v31 = 0;
      v32 = 0;
      v30 = 0;
      v33 = a1;
      v34 = *(_OWORD *)(a2 + 120);
      v35 = *(_QWORD *)(a2 + 136);
      v36 = 0;
      v37 = v10;
      v38 = 0;
      v39 = 16842752;
      v40 = 0;
      v41 = 0;
      sub_22EC56024((uint64_t)&v26);
      v32 = sub_22EF6477C(*(_QWORD *)(a1 + 88), a3);
      if (v9)
        v11 = v9 + 64;
      else
        v11 = 0;
      sub_22EC611AC(a1, &v26, v11, 0);
      if ((_DWORD)v28)
      {
        v12 = (uint64_t *)v27;
        v13 = *(_DWORD *)(a2 + 16);
        v14 = 8 * v28;
        do
        {
          v15 = *v12;
          v16 = *(unsigned __int8 *)(v7 + 12);
          v17 = (v16 >> 2) & 3;
          v18 = v16 & 2;
          if (v17 != 3)
            v18 = v17;
          if (v18 <= (v15 & 3))
            v18 = v15 & 3;
          if ((v15 & 3) == 2)
            v19 = 3;
          else
            v19 = v18;
          if (v13 >= *(_DWORD *)(a2 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = *(_DWORD *)(a2 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v13) = v15 & 0xFFFFFFFFFFFFFFFCLL | v19;
          v13 = *(_DWORD *)(a2 + 16) + 1;
          *(_DWORD *)(a2 + 16) = v13;
          *(_DWORD *)a2 = 2;
          ++v12;
          v14 -= 8;
        }
        while (v14);
      }
      HIBYTE(v39) = 0;
      if (v30)
      {
        v20 = *(void **)(v30 + 240);
        v21 = v30;
        if (v20 != (void *)(v30 + 256))
          free(v20);
        v22 = *(void **)(v21 + 176);
        if (v22 != *(void **)(v21 + 168))
          free(v22);
        if ((*(_BYTE *)(v21 + 32) & 1) == 0)
          llvm::deallocate_buffer(*(llvm **)(v21 + 40), (void *)(16 * *(unsigned int *)(v21 + 48)));
        sub_22E687D9C((uint64_t *)(v21 + 8));
        MEMORY[0x2348A0E9C](v21, 0x10E0C409F09D3C3);
      }
      if (v27 != v29)
        free(v27);
      v7 += 24;
    }
    while (v7 != v24);
  }
  sub_22EC561E4(a2);
  *(_QWORD *)(a2 + 96) = a3;
  return *(_DWORD *)(a2 + 16) != 0;
}

uint64_t sub_22EC64BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!a4)
    return sub_22EC63520(a1, a2, a3, a5, 0);
  if (*(_DWORD *)a4 && *(_DWORD *)(a4 + 4) && !*(_QWORD *)(a4 + 8))
    return 0;
  v9 = *(_QWORD *)(a4 + 8);
  if (!v9)
    return sub_22EC63520(a1, a2, a3, a5, 0);
  v11 = *(_QWORD *)(v9 + 16);
  if (v11 && (*(_QWORD *)(v9 + 8) & 6) == 2 && (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 <= 2)
  {
    v14 = sub_22F0AABF8(v9);
    return sub_22EC648E0(a1, a2, v14);
  }
  v12 = sub_22E958204(a1, a4, a6);
  if (v12)
  {
    v13 = v12;
    if ((sub_22EFC7ADC(v12) & 1) != 0 || (sub_22E958490(a1, a4, v13) & 1) == 0)
    {
      *(_QWORD *)(a2 + 144) = *(_QWORD *)a4;
      return sub_22EC611AC(a1, a2, v13, 0);
    }
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 144) = *(_QWORD *)a4;
  }
  return 0;
}

void sub_22EC64D18(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v22;
  void **v23;
  uint64_t *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  void **v30;
  uint64_t *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *i;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63[24];
  unsigned int v64[24];
  _BYTE v65[96];
  unsigned int v66[24];
  std::string v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  _BYTE v72[64];
  unint64_t v73;
  uint64_t v74;
  uint64_t v75[2];

  v2 = *(_QWORD *)(a2 + 120);
  v3 = *(_DWORD *)(a2 + 128);
  v74 = *(_QWORD *)(a2 + 144);
  v75[0] = v2;
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      sub_22E8FCA40(a1, v3, 0xA43u, 0, (uint64_t)&v68);
      v33 = sub_22E894538((uint64_t)&v68, v75);
      sub_22E8906A0(v33, &v74);
      sub_22E903BEC((unsigned int *)&v68);
      v34 = 0;
      v35 = *(_QWORD *)(a2 + 88);
      *(_OWORD *)&v67.__r_.__value_.__r.__words[1] = 0uLL;
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67.__r_.__value_.__l.__size_;
      v36 = v35 + 8;
      v37 = *(_QWORD *)(v35 + 16);
      if (v37 == v35 + 8)
        goto LABEL_92;
      break;
    case 1:
      v53 = *(unint64_t **)(a2 + 88);
      v54 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v53[2] + 16) + 24 * *(unsigned int *)(v53[2] + 24) - 24)
                                    + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v54 + 8) & 0xF) != 0)
        v54 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v53[2] + 16)
                                                                      + 24 * *(unsigned int *)(v53[2] + 24)
                                                                      - 24)
                                                          + 16));
      v73 = v54 & 0xFFFFFFFFFFFFFFF0;
      sub_22E8FCA40(a1, v3, 0xA44u, 0, (uint64_t)&v68);
      v55 = sub_22E894538((uint64_t)&v68, v75);
      v56 = sub_22E8901B8(v55, (uint64_t *)&v73);
      sub_22EAAAFAC((uint64_t)a1, v53, &v67);
      v57 = sub_22F2F3734(v56, (void **)&v67.__r_.__value_.__l.__data_);
      sub_22E8906A0(v57, &v74);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      sub_22E903BEC((unsigned int *)&v68);
      for (i = (uint64_t *)(v53[2] + 136); ; i = (uint64_t *)(v60 + 2))
      {
        v59 = *i;
        while (1)
        {
          v60 = (int *)(v59 & 0xFFFFFFFFFFFFFFF8);
          if ((v59 & 4) != 0)
          {
            if (v60)
              break;
          }
          if ((v60[7] & 0x7Eu) - 54 < 4)
          {
            v61 = (*(uint64_t (**)(int *))(*(_QWORD *)v60 + 32))(v60);
            v59 = 0;
            if ((*(_QWORD *)(v61 + 80) & 0xE000) == 0x4000)
              continue;
            if ((*((_QWORD *)v60 + 5) & 7) == 6)
            {
              v59 = 0;
              if ((*(_DWORD *)(*((_QWORD *)v60 + 5) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
                continue;
            }
          }
          goto LABEL_94;
        }
        v62 = *(_QWORD **)v60;
        if ((*(_DWORD *)(*(_QWORD *)v60 + 28) & 0x7Eu) - 54 >= 4
          || (*(_QWORD *)((*(uint64_t (**)(_QWORD))(*v62 + 32))(*(_QWORD *)v60) + 80) & 0xE000) != 0x4000
          && ((v62[5] & 7) != 6 || (*(_DWORD *)(v62[5] & 0xFFFFFFFFFFFFFFF8) - 1) > 3))
        {
          break;
        }
      }
      v60 = *(int **)v60;
LABEL_94:
      sub_22E8FCA40(a1, v60[6], 0x1530u, 0, (uint64_t)v66);
      sub_22E903BEC(v66);
      return;
    case 2:
      sub_22E8FCA40(a1, v3, 0xA46u, 0, (uint64_t)&v68);
      v6 = sub_22E894538((uint64_t)&v68, v75);
      sub_22E8906A0(v6, &v74);
      sub_22E903BEC((unsigned int *)&v68);
      v7 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(a2 + 8);
        v9 = 8 * v7;
        do
        {
          v10 = *v8++;
          v67.__r_.__value_.__r.__words[0] = v10 & 0xFFFFFFFFFFFFFFFCLL;
          sub_22E8FCA40(a1, *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x152Eu, 0, (uint64_t)&v68);
          sub_22E890024((uint64_t)&v68, (uint64_t *)&v67);
          sub_22E903BEC((unsigned int *)&v68);
          v9 -= 8;
        }
        while (v9);
      }
      return;
    case 3:
      sub_22E8FCA40(a1, v3, 0xA48u, 0, (uint64_t)&v68);
      v11 = sub_22E894538((uint64_t)&v68, v75);
      sub_22E8906A0(v11, &v74);
      sub_22E903BEC((unsigned int *)&v68);
      v68 = v72;
      v69 = v72;
      v70 = 8;
      v71 = 0;
      v12 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v12)
        goto LABEL_37;
      v13 = *(_QWORD **)(a2 + 8);
      v14 = 8 * v12;
      do
      {
        v15 = *v13 & 0xFFFFFFFFFFFFFFFCLL;
        if (v15)
          v16 = (*(_DWORD *)(v15 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFB;
        else
          v16 = 0;
        if (v16)
        {
          sub_22E3BA850((uint64_t)&v68, (const void *)(*v13 & 0xFFFFFFFFFFFFFFFCLL));
          sub_22E8FCA40(a1, *(_DWORD *)(v15 + 24), 0x161Bu, 0, (uint64_t)v64);
          sub_22E903BEC(v64);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
      v17 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v17)
        goto LABEL_37;
      v18 = *(_QWORD **)(a2 + 8);
      v19 = 8 * v17;
      do
      {
        v20 = *v18 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 33 >= 5)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v20 + 24), 0x161Cu, 0, (uint64_t)v63);
          sub_22E903BEC(v63);
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
      if (!*(_DWORD *)(a2 + 16))
        goto LABEL_37;
      v21 = *(_QWORD **)(a2 + 8);
      v22 = 1;
      do
      {
        while (1)
        {
          v23 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v68, (void *)(*v21 & 0xFFFFFFFFFFFFFFFCLL));
          v24 = v69 == v68 ? (uint64_t *)((char *)&v70 + 4) : &v70;
          v25 = (void **)&v69[8 * *(unsigned int *)v24];
          v26 = *(_QWORD *)(a2 + 8);
          v27 = *(unsigned int *)(a2 + 16);
          if (v23 == v25)
            break;
          do
          {
            v28 = *(_QWORD *)(v26 + 8 * v27 - 8);
            v29 = v27 - 1;
            *(_DWORD *)(a2 + 16) = v29;
            *v21 = v28;
            if (v21 == (_QWORD *)(v26 + 8 * v29))
              goto LABEL_36;
            v30 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v68, (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL));
            if (v69 == v68)
              v31 = (uint64_t *)((char *)&v70 + 4);
            else
              v31 = &v70;
            v32 = (void **)&v69[8 * *(unsigned int *)v31];
            v26 = *(_QWORD *)(a2 + 8);
            v27 = *(unsigned int *)(a2 + 16);
          }
          while (v30 != v32);
          v22 = 0;
          if (++v21 == (_QWORD *)(v26 + 8 * v27))
            goto LABEL_36;
        }
        ++v21;
      }
      while (v21 != (_QWORD *)(v26 + 8 * v27));
      if ((v22 & 1) == 0)
LABEL_36:
        sub_22EA3DA00(a2);
LABEL_37:
      if (v69 != v68)
        free(v69);
      return;
    default:
      return;
  }
  do
  {
    v38 = *(_QWORD *)(v37 + 136);
    v39 = v38 & 0xFFFFFFFFFFFFFFF8;
    if ((v38 & 4) != 0 && v39)
      v39 = *(_QWORD *)v39;
    if ((*(_WORD *)(a2 + 156) & *(_WORD *)(v39 + 30) & 0x3FFF) == 0)
      goto LABEL_71;
    size = v67.__r_.__value_.__l.__size_;
    p_size = &v67.__r_.__value_.__l.__size_;
    v42 = &v67.__r_.__value_.__l.__size_;
    if (!v67.__r_.__value_.__l.__size_)
    {
LABEL_52:
      v44 = (uint64_t *)operator new(0x28uLL);
      v44[4] = v39;
      *v44 = 0;
      v44[1] = 0;
      v44[2] = (uint64_t)v42;
      *p_size = (std::string::size_type)v44;
      if (*(_QWORD *)v67.__r_.__value_.__l.__data_)
      {
        v67.__r_.__value_.__r.__words[0] = *(_QWORD *)v67.__r_.__value_.__l.__data_;
        v45 = (uint64_t *)*p_size;
      }
      else
      {
        v45 = v44;
      }
      sub_22E49FD00((uint64_t *)v67.__r_.__value_.__l.__size_, v45);
      ++v67.__r_.__value_.__r.__words[2];
      v46 = *(_DWORD *)(v39 + 28) & 0x7F;
      v47 = v46;
      v48 = v39;
      if (v46 <= 0x2F)
      {
        v47 = *(_DWORD *)(v39 + 28) & 0x7F;
        v48 = v39;
        if (((1 << v46) & 0xC00000060000) != 0)
        {
          v48 = sub_22EFBAEA4(v39);
          v47 = *(_DWORD *)(v48 + 28) & 0x7F;
        }
      }
      if ((v47 - 42) >= 0xFFFFFFFD)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v39 + 24), 0x1531u, 0, (uint64_t)&v68);
        v73 = *(_QWORD *)((*(_QWORD *)(v48 + 80) & 0xFFFFFFFFFFFFFFF8)
                        + ((2 * *(_QWORD *)(v48 + 80)) & 8));
      }
      else
      {
        if (v46 > 0x2F)
        {
          v49 = v39;
        }
        else
        {
          v49 = v39;
          if (((1 << v46) & 0xC00000060000) != 0)
          {
            v49 = sub_22EFBAEA4(v39);
            v46 = *(_DWORD *)(v49 + 28) & 0x7F;
          }
        }
        if (v46 - 43 < 0xFFFFFFF6)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v39 + 24), 0x1530u, 0, (uint64_t)v65);
          v50 = (unsigned int *)v65;
LABEL_70:
          sub_22E903BEC(v50);
          goto LABEL_71;
        }
        sub_22E8FCA40(a1, *(_DWORD *)(v39 + 24), 0x1531u, 0, (uint64_t)&v68);
        v51 = *(_QWORD *)(v49 + 48);
        if (v51)
          v52 = v51 & 0xFFFFFFFFFFFFFFF0;
        else
          v52 = sub_22EF6462C(a1[11], v49);
        v73 = v52;
      }
      sub_22E8901B8((uint64_t)&v68, (uint64_t *)&v73);
      v50 = (unsigned int *)&v68;
      goto LABEL_70;
    }
    while (1)
    {
      while (1)
      {
        v42 = (std::string::size_type *)size;
        v43 = *(_QWORD *)(size + 32);
        if (v43 <= v39)
          break;
        size = *v42;
        p_size = v42;
        if (!*v42)
          goto LABEL_52;
      }
      if (v43 >= v39)
        break;
      size = v42[1];
      if (!size)
      {
        p_size = v42 + 1;
        goto LABEL_52;
      }
    }
LABEL_71:
    v37 = *(_QWORD *)(v37 + 8);
  }
  while (v37 != v36);
  v34 = (_QWORD *)v67.__r_.__value_.__l.__size_;
LABEL_92:
  sub_22F258024(v34);
}

void sub_22EC6543C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  int v11;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  BOOL v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];
  int v47;
  uint64_t v48;
  llvm *v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[17];

  v53[16] = *MEMORY[0x24BDAC8D0];
  v9 = *(_DWORD *)a5;
  if (*(_DWORD *)a5 <= 1u && *(_DWORD *)(a5 + 4) == 0)
    goto LABEL_6;
  v32 = a2;
  v33 = a6;
  if ((v9 & 1) != 0)
  {
    v35 = (_QWORD *)(a5 + 8);
    v36 = (_QWORD *)(a5 + 136);
    goto LABEL_54;
  }
  v34 = *(unsigned int *)(a5 + 16);
  if (((2 * v9) & 0xFFFFFFFC) < v34 && v34 >= 0x41)
  {
    v44 = a5;
    sub_22F33A164((_QWORD *)a5);
    a5 = v44;
    goto LABEL_57;
  }
  if ((_DWORD)v34)
  {
    v35 = *(_QWORD **)(a5 + 8);
    v36 = &v35[v34];
    do
LABEL_54:
      *v35++ = -4096;
    while (v35 != v36);
    v42 = *(_DWORD *)a5 & 1;
    goto LABEL_56;
  }
  v42 = 0;
LABEL_56:
  *(_DWORD *)a5 = v42;
  *(_DWORD *)(a5 + 4) = 0;
LABEL_57:
  a6 = v33;
  a2 = v32;
LABEL_6:
  *(_DWORD *)(a5 + 144) = 0;
  v11 = *(_DWORD *)a6;
  if (*(_DWORD *)a6 > 1u || *(_DWORD *)(a6 + 4) != 0)
  {
    v37 = a5;
    v38 = a2;
    if ((v11 & 1) != 0)
    {
      v40 = (_QWORD *)(a6 + 8);
      v41 = (_QWORD *)(a6 + 136);
    }
    else
    {
      v39 = *(unsigned int *)(a6 + 16);
      if (((2 * v11) & 0xFFFFFFFC) < v39 && v39 >= 0x41)
      {
        v45 = a6;
        sub_22F33A164((_QWORD *)a6);
        a6 = v45;
        goto LABEL_62;
      }
      if (!(_DWORD)v39)
      {
        v43 = 0;
LABEL_61:
        *(_DWORD *)a6 = v43;
        *(_DWORD *)(a6 + 4) = 0;
LABEL_62:
        a2 = v38;
        a5 = v37;
        goto LABEL_11;
      }
      v40 = *(_QWORD **)(a6 + 8);
      v41 = &v40[v39];
    }
    do
      *v40++ = -4096;
    while (v40 != v41);
    v43 = *(_DWORD *)a6 & 1;
    goto LABEL_61;
  }
LABEL_11:
  *(_DWORD *)(a6 + 144) = 0;
  v46[0] = a1;
  v46[1] = a5;
  v46[2] = a6;
  v47 = a2;
  v48 = 1;
  v13 = 5;
  v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v46[v13] = v14;
    v13 += 2;
  }
  while (v13 != 21);
  v51 = v53;
  v52 = 0x1000000000;
  if (a4)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a3 + 8 * v15);
      v18 = *(_QWORD *)(v17 + 8);
      if (v18 == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16840))
      {
        v19 = sub_22E9058F0((unsigned __int8 *)v17);
        v20 = *v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 64;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 80;
        v25 = *((unsigned int *)v19 + 1);
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v28 = *(_DWORD *)(v27 + 28) & 0x7F;
            v31 = v28 > 0x2F;
            v29 = (1 << v28) & 0xC00000060000;
            if (!v31 && v29 != 0)
              v27 = sub_22EFBAEA4(v27);
            if (v27)
              v31 = (*(_DWORD *)(v27 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
            else
              v31 = 0;
            if (!v31)
              v27 = *(_QWORD *)(v27 + 48);
            sub_22EC6573C(v46, *(_QWORD *)(v27 + 48));
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
      }
      else
      {
        sub_22EC6573C(v46, v18);
      }
      v15 = ++v16;
    }
    while (a4 != v16);
    if (v51 != v53)
      free(v51);
  }
  if ((v48 & 1) == 0)
    llvm::deallocate_buffer(v49, (void *)(8 * v50));
}

void sub_22EC6573C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[128];
  void *v63;
  unsigned int v64;
  unsigned int v65;
  _QWORD v66[34];

  v66[32] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x1000000000;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t)(a1 + 4);
  while (2)
  {
    v5 = *(_DWORD *)(v3 + 16);
    switch((char)v5)
    {
      case 25:
        goto LABEL_19;
      case 26:
        v11 = *(_QWORD *)(v3 + 16);
        v12 = (unsigned __int16)(v11 >> 38);
        if ((unsigned __int16)(v11 >> 38))
        {
          v13 = (_QWORD *)(v3 + 40);
          v14 = v61;
          v15 = 8 * v12;
          do
          {
            v16 = *(_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF0);
            if (v14 >= HIDWORD(v61))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v14 = v61;
            }
            *((_QWORD *)v60 + v14) = v16;
            v14 = v61 + 1;
            LODWORD(v61) = v61 + 1;
            ++v13;
            v15 -= 8;
          }
          while (v15);
        }
LABEL_19:
        v10 = *(_QWORD *)(v3 + 24);
        goto LABEL_13;
      case 27:
      case 28:
      case 29:
      case 30:
      case 35:
      case 36:
      case 37:
      case 42:
      case 43:
        goto LABEL_92;
      case 31:
        v17 = *(_QWORD *)(v3 + 40);
        v18 = v61;
        if (v61 >= (unint64_t)HIDWORD(v61))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v61;
        }
        *((_QWORD *)v60 + v18) = v17;
        LODWORD(v61) = v61 + 1;
        goto LABEL_12;
      case 32:
      case 33:
      case 34:
        v6 = a1[1];
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
        v8 = sub_22E3CD31C((uint64_t *)(v7 + 72), v7);
        v9 = (void *)(v8 + 40);
        if (!v8)
          v9 = 0;
        v63 = v9;
        sub_22EC70694(v6, (uint64_t *)&v63);
        goto LABEL_92;
      case 38:
      case 39:
        goto LABEL_12;
      case 40:
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v3)
          {
            v5 = *(_DWORD *)(v3 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v3 = sub_22F10CF48(v3);
          v5 = *(_DWORD *)(v3 + 16);
        }
LABEL_12:
        v10 = *(_QWORD *)(v3 + 32);
LABEL_13:
        v3 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
        continue;
      case 44:
        v19 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v3 + 24)) + 16);
        v20 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0)
          v20 = *(_QWORD *)v20;
        v21 = (void *)(v20 - 64);
        if (v20)
          v22 = (*(_WORD *)(v20 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
        else
          v22 = 0;
        v23 = !v22;
        if (v23)
          v21 = 0;
        v63 = v21;
        if ((v23 & 1) == 0)
          sub_22EC70458(a1[2], (uint64_t *)&v63);
        sub_22EC70588(a1[1], v20);
        goto LABEL_92;
      case 45:
        v24 = sub_22F114198(*(_QWORD *)(v3 + 24));
        if (*(_QWORD *)(v24 + 40) != *(_QWORD *)(*a1 + 232))
        {
          v25 = v24;
          v26 = *(_QWORD *)(v24 + 16);
          v27 = v26 & 0xFFFFFFFFFFFFFFF8;
          if ((v26 & 4) != 0)
            v27 = *(_QWORD *)v27;
          v28 = (void *)(v27 - 64);
          if (v27)
            v29 = (*(_WORD *)(v27 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
          else
            v29 = 0;
          v30 = !v29;
          if (v30)
            v28 = 0;
          v63 = v28;
          if ((v30 & 1) == 0)
            sub_22EC70458(a1[2], (uint64_t *)&v63);
          sub_22EC70588(a1[1], v27);
          if ((*(_DWORD *)(v25 + 28) & 0x7E) == 0x24)
          {
            v31 = *(_QWORD *)(v25 + 152);
            v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
            if ((v31 & 4) != 0 && v32)
            {
              do
              {
                v33 = *(_QWORD *)(*v32 + 152);
                v32 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
              }
              while ((v33 & 4) != 0 && v32);
            }
            v34 = v32[2];
            v35 = v34 & 0xFFFFFFFFFFFFFFF8;
            if ((v34 & 4) != 0)
              v35 = *(_QWORD *)v35;
            v36 = (void *)(v35 - 64);
            if (v35)
              v37 = (*(_WORD *)(v35 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
            else
              v37 = 0;
            v38 = !v37;
            if (v38)
              v36 = 0;
            v63 = v36;
            if ((v38 & 1) == 0)
              sub_22EC70458(a1[2], (uint64_t *)&v63);
            sub_22EC70588(a1[1], v35);
            v39 = *(_QWORD *)(v25 + 168);
            v40 = *(unsigned int *)(v39 + 8);
            if ((_DWORD)v40)
            {
              v41 = 0;
              v42 = 24 * v40;
              do
              {
                sub_22EC70724((unint64_t)a1, (int *)(*(_QWORD *)v39 + v41));
                v41 += 24;
              }
              while (v42 != v41);
            }
          }
          v63 = (void *)v25;
          sub_22EC70458(a1[2], (uint64_t *)&v63);
          if (sub_22EC70458(v4, (uint64_t *)&v63))
          {
            v43 = *a1;
            v44 = *((unsigned int *)a1 + 6);
            sub_22EF6477C(*(_QWORD *)(*a1 + 88), v25);
            if ((sub_22EE8B180(v43, v44) & 1) == 0)
            {
              v63 = v66;
              v65 = 32;
              v45 = 1;
              v66[0] = v25;
              do
              {
                v46 = *((_QWORD *)v63 + v45 - 1);
                v64 = v45 - 1;
                v47 = sub_22E46A3A0(v46);
                if (v47 != v48)
                {
                  v49 = v47;
                  v50 = v48;
                  do
                  {
                    v51 = *(_QWORD *)(**(_QWORD **)(v49 + 16) & 0xFFFFFFFFFFFFFFF0);
                    if ((*(_BYTE *)(v51 + 8) & 0xF) != 0)
                      v51 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v49 + 16));
                    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    if (v52)
                    {
                      if (*(_BYTE *)(v52 + 16) == 45)
                      {
                        v53 = (_QWORD *)sub_22F114198(*(_QWORD *)(v52 + 24));
                        v59 = v53;
                        sub_22EC70458(a1[2], (uint64_t *)&v59);
                        if (sub_22EC70458(v4, (uint64_t *)&v59))
                        {
                          v54 = v53[2];
                          v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8);
                          if ((v54 & 4) != 0)
                            v55 = (_QWORD *)*v55;
                          sub_22EC70588(a1[1], (unint64_t)v55);
                          sub_22E3CD31C((uint64_t *)(v53[13] + 96), v53[13]);
                          v56 = v53[16];
                          v57 = *(_QWORD *)(v56 + 24);
                          if ((v57 & 1) != 0)
                            v57 = sub_22EFCF510(v56);
                          if (v57 != sub_22F24CD30((uint64_t)v53))
                          {
                            v58 = v64;
                            if (v64 >= (unint64_t)v65)
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                              v58 = v64;
                            }
                            *((_QWORD *)v63 + v58) = v53;
                            ++v64;
                          }
                        }
                      }
                    }
                    v49 += 24;
                  }
                  while (v49 != v50);
                }
                v45 = v64;
              }
              while (v64);
              if (v63 != v66)
                free(v63);
            }
          }
        }
        goto LABEL_92;
      default:
        switch(*(_DWORD *)(v3 + 16))
        {
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 0xAu:
            goto LABEL_12;
          default:
            break;
        }
LABEL_92:
        if ((_DWORD)v61)
        {
          v3 = *((_QWORD *)v60 + v61 - 1);
          LODWORD(v61) = v61 - 1;
          continue;
        }
        if (v60 != v62)
          free(v60);
        return;
    }
  }
}

unint64_t sub_22EC65CE0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  unint64_t v10;
  int v11;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[64];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _QWORD v28[2];
  int v29;
  int v30;
  BOOL v31;
  BOOL v32;
  char v33;
  BOOL v34;
  __int16 v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = v21;
  v20 = 0x800000000;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = a1;
  v26 = a3;
  v27 = a4;
  sub_22EFC6D6C((uint64_t)v28, a3);
  v28[1] = 0;
  v29 = a5;
  v30 = 0;
  v31 = a6 != 0;
  v32 = a6 == 2;
  v33 = 1;
  v34 = a6 == 0;
  v35 = 0;
  v36 = 0;
  sub_22EC56024((uint64_t)&v18);
  sub_22EC63520(a1, &v18, a2, 0, 0);
  v10 = 0;
  v11 = v18;
  if ((_DWORD)v18 == 2)
  {
    v10 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = *(_DWORD *)(v10 + 28) & 0x7F;
    v14 = v13 > 0x2F;
    v15 = (1 << v13) & 0xC00000060000;
    if (!v14 && v15 != 0)
      v10 = sub_22EFBAEA4(*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFFCLL);
  }
  if (v34)
  {
    if (v11 == 5)
    {
      sub_22EC64D18(v25, (uint64_t)&v18);
    }
    else if (v23 && (*(_DWORD *)(v25[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v25, (uint64_t)&v18);
    }
  }
  if (v22)
  {
    v17 = sub_22EC6CBD0(v22);
    MEMORY[0x2348A0E9C](v17, 0x10E0C409F09D3C3);
  }
  if (v19 != v21)
    free(v19);
  return v10;
}

void sub_22EC65EB4(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__src;
  uint64_t v11;
  _BYTE v12[64];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[24];
  int v20;
  __int16 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = a1[11] + 16 * a2 + 15280;
  v9 = 0;
  __src = v12;
  v11 = 0x800000000;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = a1;
  v17 = v7 | 6;
  v18 = 0;
  sub_22EFC6D6C((uint64_t)v19, v7 | 6);
  *(_OWORD *)&v19[8] = xmmword_22F4559B0;
  v20 = 16842752;
  v21 = 0;
  v22 = 0;
  sub_22EC56024((uint64_t)&v9);
  sub_22EC63520(a1, &v9, a3, 0, 0);
  sub_22E3D0148(a4, __src, (_BYTE *)__src + 8 * v11);
  if (HIBYTE(v20))
  {
    if ((_DWORD)v9 == 5)
    {
      sub_22EC64D18(v16, (uint64_t)&v9);
    }
    else if (v14 && (*(_DWORD *)(v16[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v16, (uint64_t)&v9);
    }
  }
  if (v13)
  {
    v8 = sub_22EC6CBD0(v13);
    MEMORY[0x2348A0E9C](v8, 0x10E0C409F09D3C3);
  }
  if (__src != v12)
    free(__src);
}

unint64_t sub_22EC6602C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, int a11, int a12)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  signed int v16;
  signed int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t NodeOrInsertPos;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void **v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v96;
  int v97;
  void **(*v100)(uint64_t);
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  int v109;
  char v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t *v113;
  _DWORD v114[6];
  _QWORD v115[2];
  unint64_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  _QWORD *v120;
  uint64_t v121;
  _QWORD v122[339];
  int v123;
  _OWORD v124[9];
  _QWORD *v125;
  uint64_t v126;
  _QWORD v127[5];
  __int128 v128;
  uint64_t v129;
  int v130;
  __int128 v131;
  int v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int v139;
  signed int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t vars0;

  v12 = MEMORY[0x24BDAC7A8]();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = (_QWORD *)v12;
  v146 = *MEMORY[0x24BDAC8D0];
  v25 = *(_QWORD *)(v13 + 128);
  if (!v25)
  {
    v26 = v13;
    v109 = v15;
    v105 = v14;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 104) + 96), *(_QWORD *)(v13 + 104));
    v14 = v105;
    v15 = v109;
    v25 = *(_QWORD *)(v26 + 128);
  }
  v27 = *(_QWORD *)(v25 + 88);
  v115[1] = 0;
  v116 = v27;
  v108 = *(_DWORD *)(v27 + 24);
  v133 = &v135;
  v135 = v27;
  v136 = v23;
  v137 = v14;
  v138 = v21;
  v139 = v19;
  v140 = v17;
  v141 = v15;
  v142 = a9;
  v143 = a10;
  v144 = a11;
  v145 = a12;
  v134 = 0x200000000CLL;
  v28 = v14;
  v29 = v15;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v31 = *(_QWORD *)(NodeOrInsertPos + 152);
    goto LABEL_119;
  }
  v106 = v28;
  LODWORD(v103) = a10;
  v110 = v29;
  v32 = sub_22E3CD3D4((uint64_t)(v24 + 1045), 160, 3);
  *(_QWORD *)v32 = 0;
  v33 = (void *)(v32 + 24);
  *(_QWORD *)(v32 + 8) = v32 + 24;
  v34 = (void **)(v32 + 8);
  v104 = v32;
  *(_QWORD *)(v32 + 16) = 0x2000000000;
  v35 = v19;
  if ((unint64_t **)(v32 + 8) != &v133)
  {
    v36 = v134;
    if ((_DWORD)v134)
    {
      if (v134 >= 0x21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v134;
        if (!(_DWORD)v134)
          goto LABEL_10;
        v33 = *v34;
      }
      else
      {
        v37 = v134;
      }
      memcpy(v33, v133, 4 * v37);
LABEL_10:
      *(_DWORD *)(v104 + 16) = v36;
    }
  }
  *(_QWORD *)(v104 + 152) = 0;
  llvm::FoldingSetBase::InsertNode();
  if (v23 != 5)
  {
    v45 = *(_QWORD *)(v116 + 48);
    if (v45)
      v46 = v45 & 0xFFFFFFFFFFFFFFF0;
    else
      v46 = sub_22EF6462C(v24[11], v116);
    v47 = v46 & 7 | *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF0) + 8);
    v115[0] = 0;
    if (!v23)
    {
      v49 = sub_22EFC6A3C((_QWORD *)(v24[11] + 15224), v47);
      v58 = v108;
      if (sub_22E49F6F8(v116))
      {
        v59 = *(_DWORD *)(v116 + 24);
        v117 = v24;
        v118 = (uint64_t)&v116;
        v114[0] = v59;
        v120 = v24;
        v121 = (uint64_t)v114;
        v61 = *(_QWORD *)off_255E04E38(&off_255E04E38, v116);
        if (!v61)
          goto LABEL_44;
        v62 = (uint64_t)&vars0 - v61;
        if (v62 < 0)
          v62 = -v62;
        if ((unint64_t)(v62 - 8126464) <= 0x40000)
          sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v120, (uint64_t)sub_22EC72DA0, (uint64_t)&v117);
        else
LABEL_44:
          sub_22EABCDDC(v24, v60);
      }
      sub_22E5BBE34((uint64_t)v114, v108, v47, 1, 0, 0);
      v107 = 0;
      goto LABEL_63;
    }
    v48 = v24[11];
    if (v23 > 2)
    {
      v49 = (v48 + 15520) | 6;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v116 + 104) + 96), *(_QWORD *)(v116 + 104));
      if ((*(_WORD *)(*(_QWORD *)(v116 + 128) + 8) & 0x800) == 0)
      {
        v63 = *(_DWORD *)(v116 + 24);
        v117 = v24;
        v118 = (uint64_t)&v116;
        v114[0] = v63;
        v120 = v24;
        v121 = (uint64_t)v114;
        v65 = *(_QWORD *)off_255E04E38(&off_255E04E38, v116);
        if (!v65)
          goto LABEL_51;
        v66 = (uint64_t)&vars0 - v65;
        if (v66 < 0)
          v66 = -v66;
        if ((unint64_t)(v66 - 8126464) <= 0x40000)
          sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v120, (uint64_t)sub_22EC72DD0, (uint64_t)&v117);
        else
LABEL_51:
          sub_22EABE360((uint64_t)v24, v64);
      }
      if ((*(_BYTE *)(v24[9] + 1) & 2) == 0 || !sub_22EABE940(v116))
        goto LABEL_59;
      v67 = *(_DWORD *)(v116 + 24);
      v117 = v24;
      v118 = (uint64_t)&v116;
      v114[0] = v67;
      v120 = v24;
      v121 = (uint64_t)v114;
      v69 = *(_QWORD *)off_255E04E38(&off_255E04E38, v116);
      if (!v69)
        goto LABEL_58;
      v70 = (uint64_t)&vars0 - v69;
      if (v70 < 0)
        v70 = -v70;
      if ((unint64_t)(v70 - 8126464) > 0x40000)
      {
LABEL_58:
        sub_22EABEA08((uint64_t)v24, v68);
        goto LABEL_59;
      }
      v100 = sub_22EC72DE0;
    }
    else
    {
      v49 = sub_22EFC6A3C((_QWORD *)(v48 + 15224), v47);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v116 + 104) + 96), *(_QWORD *)(v116 + 104));
      if ((*(_WORD *)(*(_QWORD *)(v116 + 128) + 8) & 0x200) == 0)
      {
        v50 = *(_DWORD *)(v116 + 24);
        v117 = v24;
        v118 = (uint64_t)&v116;
        v114[0] = v50;
        v120 = v24;
        v121 = (uint64_t)v114;
        v52 = *(_QWORD *)off_255E04E38(&off_255E04E38, v116);
        if (!v52)
          goto LABEL_29;
        v53 = (uint64_t)&vars0 - v52;
        if (v53 < 0)
          v53 = -v53;
        if ((unint64_t)(v53 - 8126464) <= 0x40000)
          sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v120, (uint64_t)sub_22EC72DB0, (uint64_t)&v117);
        else
LABEL_29:
          sub_22EABD328((uint64_t)v24, v51);
      }
      if ((*(_BYTE *)(v24[9] + 1) & 2) == 0 || !sub_22EABDAF8(v116))
        goto LABEL_59;
      v54 = *(_DWORD *)(v116 + 24);
      v117 = v24;
      v118 = (uint64_t)&v116;
      v114[0] = v54;
      v120 = v24;
      v121 = (uint64_t)v114;
      v56 = *(_QWORD *)off_255E04E38(&off_255E04E38, v116);
      if (!v56)
        goto LABEL_36;
      v57 = (uint64_t)&vars0 - v56;
      if (v57 < 0)
        v57 = -v57;
      if ((unint64_t)(v57 - 8126464) > 0x40000)
      {
LABEL_36:
        sub_22EABDBA0((uint64_t)v24, v55);
LABEL_59:
        if (v21)
          v71 = v47 | v106 | 4;
        else
          v71 = v47 | v106;
        v72 = v24[11];
        v73 = sub_22EF5DD84(v72, v71, v35);
        v74 = sub_22EF5DE18(v72, v73, v17);
        v58 = v108;
        sub_22E5BBE34((uint64_t)v114, v108, v74, (v23 & 0xFFFFFFFD) == 1, 0, 0);
        v115[0] = v114;
        v107 = 1;
LABEL_63:
        if (a10)
          v75 = v47 | a9 | 4;
        else
          v75 = v47 | a9;
        v76 = v24[11];
        v77 = sub_22EF5DD84(v76, v75, a11);
        v78 = sub_22EF5DE18(v76, v77, v17);
        v79 = v110 ^ 1;
        v111 = v78;
        sub_22E5BBE34((uint64_t)&v120, v58, v78, v79, 0, 0);
        v80 = sub_22F003E64((uint64_t)&v120, v24[11], 0);
        v120 = v122;
        v121 = 0x1000000000;
        v122[336] = v124;
        v122[337] = v124;
        v122[338] = 16;
        v123 = 0;
        v124[8] = 0u;
        v125 = v127;
        v126 = 0x400000000;
        v127[4] = (char *)&v128 + 8;
        v128 = 0u;
        v129 = 1;
        v130 = v58;
        v132 = 0;
        v131 = 0u;
        v81 = sub_22EFCE144(v116 + 64, v49);
        if (v81 <= 7)
        {
          v31 = *(_QWORD *)(v104 + 152) & 1;
          *(_QWORD *)(v104 + 152) = v31;
LABEL_118:
          sub_22E9DC79C((uint64_t *)&v120);
          goto LABEL_119;
        }
        v117 = v119;
        v118 = 0x800000000;
        sub_22E7CB8C8((uint64_t)&v117, v81, 0);
        if (!(_DWORD)v118)
        {
LABEL_110:
          v113 = 0;
          switch(sub_22ED03FCC((uint64_t *)&v120, v24, v108, &v113))
          {
            case 0u:
              v31 = *v113 & 0xFFFFFFFFFFFFFFF9 | *(_QWORD *)(v104 + 152) & 1 | 4;
              goto LABEL_115;
            case 1u:
              v31 = *(_QWORD *)(v104 + 152) & 1;
              goto LABEL_115;
            case 2u:
              v31 = *(_QWORD *)(v104 + 152) & 1 | 2;
              goto LABEL_115;
            case 3u:
              v31 = *(_QWORD *)(v104 + 152) & 1 | *v113 & 0xFFFFFFFFFFFFFFF9;
LABEL_115:
              *(_QWORD *)(v104 + 152) = v31;
              break;
            default:
              v31 = *(_QWORD *)(v104 + 152);
              break;
          }
          if (v117 != v119)
            free(v117);
          goto LABEL_118;
        }
        v112 = v23 - 3;
        v83 = (uint64_t *)v117;
        v84 = 8 * v118;
        v102 = v80;
        while (1)
        {
          v85 = *v83;
          if ((*(_BYTE *)(*v83 + 28) & 0x80) == 0)
            break;
LABEL_105:
          ++v83;
          v84 -= 8;
          if (!v84)
            goto LABEL_110;
        }
        v86 = v85 & 0xFFFFFFFFFFFFFFFCLL;
        v87 = *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFFCLL) + 28);
        v88 = v87 & 0x7F;
        if (v88 <= 0x2F)
        {
          if (((1 << (v87 & 0x7F)) & 0xC00000060000) != 0)
          {
            v91 = sub_22EFBAEA4(v85 & 0xFFFFFFFFFFFFFFFCLL);
            v90 = *(_DWORD *)(v91 + 28);
            v89 = v90 & 0x7F;
LABEL_75:
            if (v89 == 29)
              v92 = (_QWORD *)v91;
            else
              v92 = 0;
            if (v92)
            {
              v91 = v92[6];
              v89 = *(_DWORD *)(v91 + 28) & 0x7F;
            }
            v93 = v86 | (v90 >> 13) & 3;
            if (v89 == 55)
              v94 = v91;
            else
              v94 = 0;
            if (v88 <= 0x2F && ((1 << (v87 & 0x7F)) & 0xC00000060000) != 0)
            {
              v96 = sub_22EFBAEA4(v85 & 0xFFFFFFFFFFFFFFFCLL);
              v97 = *(_DWORD *)(v96 + 28);
              goto LABEL_88;
            }
LABEL_109:
            LOBYTE(v97) = v87;
            v96 = v85 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_88:
            if ((v97 & 0x7Eu) - 58 >= 0xFFFFFFFC)
            {
              if (v112 > 1)
              {
                if (v94)
                  sub_22ED0475C((uint64_t)v24, v94, v93, v111, (uint64_t)v115, v107, (uint64_t)&v120, 1, 0, 1, 0, 0, 0, 0, 0);
                else
                  sub_22ED0475C((uint64_t)v24, v96, v85, v111, (uint64_t)v115, v107, (uint64_t)&v120, 1, 0, 1, 0, 0, 0, 0, 0);
              }
              else
              {
                v103 = v103 & 0xFFFFFFFF00000000 | v102;
                sub_22ED05760((uint64_t)v24, v96, v85, v116, v111, v102, (uint64_t)v115, v107, (uint64_t)&v120, 1, 0, 0, 0, 0);
              }
            }
            else
            {
              if (v88 <= 0x2F && ((1 << (v87 & 0x7F)) & 0xC00000060000) != 0)
              {
                v86 = sub_22EFBAEA4(v85 & 0xFFFFFFFFFFFFFFFCLL);
                v87 = *(_DWORD *)(v86 + 28);
              }
              if ((v87 & 0x7F) == 0x1D)
              {
                if (v112 > 1)
                {
                  if (v94)
                    sub_22ED07F48(v24, v92, v93, v111, 0, (uint64_t)v115, v107, (uint64_t)&v120, 1u, 0, 1u, 0, 0);
                  else
                    sub_22ED07F48(v24, (_QWORD *)v86, v85, v111, 0, (uint64_t)v115, v107, (uint64_t)&v120, 1u, 0, 1u, 0, 0);
                }
                else
                {
                  v101 = v101 & 0xFFFFFFFF00000000 | v102;
                  sub_22ED07BB0((uint64_t)v24, v86, v85, v116, 0, v111, v102, v82, (uint64_t)v115, v107, (uint64_t)&v120, 1, 0, 0);
                }
              }
            }
            goto LABEL_105;
          }
          if (v88 == 13)
          {
            v92 = 0;
            v94 = 0;
            v93 = 0;
            goto LABEL_109;
          }
        }
        v89 = *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F;
        v90 = *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFFCLL) + 28);
        v91 = v85 & 0xFFFFFFFFFFFFFFFCLL;
        goto LABEL_75;
      }
      v100 = sub_22EC72DC0;
    }
    sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v120, (uint64_t)v100, (uint64_t)&v117);
    goto LABEL_59;
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v116 + 104) + 96), *(_QWORD *)(v116 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v116 + 128) + 8) & 0x2000) == 0)
  {
    v38 = *(_DWORD *)(v116 + 24);
    v117 = v24;
    v118 = (uint64_t)&v116;
    v114[0] = v38;
    v120 = v24;
    v121 = (uint64_t)v114;
    v40 = *(_QWORD *)off_255E04E38(&off_255E04E38, v116);
    if (!v40)
      goto LABEL_17;
    v41 = (uint64_t)&vars0 - v40;
    if (v41 < 0)
      v41 = -v41;
    if ((unint64_t)(v41 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v120, (uint64_t)sub_22EC72D90, (uint64_t)&v117);
    else
LABEL_17:
      sub_22EABEFB4((uint64_t)v24, v39);
  }
  v42 = sub_22EFD10F8(v116);
  v43 = *(_QWORD *)(v104 + 152) & 7 | v42;
  *(_QWORD *)(v104 + 152) = v43;
  if (v42)
  {
    v44 = ~(*(_DWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v42 + 32))(v42) + 80) >> 20) & 4;
    v43 = *(_QWORD *)(v104 + 152);
  }
  else
  {
    v44 = 0;
  }
  v31 = v43 & 0xFFFFFFFFFFFFFFF9 | v44;
  *(_QWORD *)(v104 + 152) = v31;
LABEL_119:
  if (v133 != &v135)
    free(v133);
  return v31;
}

unint64_t sub_22EC66BE4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v12[2];
  unint64_t v13;
  _QWORD v14[2];
  int v15;
  uint64_t vars0;

  v2 = a2;
  v13 = a2;
  if (sub_22EC60AEC(a2))
  {
    v5 = *(_DWORD *)(v2 + 24);
    v12[0] = &v13;
    v12[1] = (unint64_t *)a1;
    v15 = v5;
    v14[0] = a1;
    v14[1] = &v15;
    v6 = *(_QWORD *)off_255E04E38(&off_255E04E38, v4);
    if (!v6)
      goto LABEL_6;
    v7 = (uint64_t)&vars0 - v6;
    if (v7 < 0)
      v7 = -v7;
    if ((unint64_t)(v7 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v14, (uint64_t)sub_22EC72DF0, (uint64_t)v12);
    else
LABEL_6:
      sub_22EC72DF0(v12);
    v2 = v13;
  }
  v8 = *(_QWORD *)(v2 + 48);
  if (v8)
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  else
    v9 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v2);
  v10 = sub_22EFC6A3C((_QWORD *)(*(_QWORD *)(a1 + 88) + 15224), v9 & 7 | *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8));
  return sub_22EFCE144(v13 + 64, v10);
}

unint64_t sub_22EC66CD8(uint64_t a1, uint64_t a2)
{
  return sub_22EC6602C(a1, a2) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22EC66D18(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned __int8 a6, _BOOL8 a7, int a8, char a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  _BOOL4 v42;
  char v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t result;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  char v74;
  char v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  _QWORD *v84;
  char v86;
  int v87;
  uint64_t v88;
  uint64_t v89[4];
  unsigned __int8 v90;
  void *v91[2];
  _QWORD v92[12];

  v13 = a3;
  v92[10] = *MEMORY[0x24BDAC8D0];
  v86 = a6;
  v90 = a6;
  sub_22EC63520(a1, a3, a2, 0, 0);
  v15 = *(unsigned int *)(v13 + 16);
  v81 = a1;
  if (!(_DWORD)v15)
  {
    v80 = 0;
    v78 = 0;
    goto LABEL_91;
  }
  v16 = 0;
  v79 = (char *)(a1 + 10664);
  v80 = 0;
  v17 = *(_QWORD **)(v13 + 8);
  v78 = 0;
  LODWORD(v18) = *(_DWORD *)(v13 + 16);
  v19 = 1;
  v20 = v17;
  v21 = &v17[v15];
  v82 = a4;
  while (2)
  {
    v22 = *v20;
    v84 = v20;
    v83 = v19;
    while (1)
    {
      v23 = v22 & 0xFFFFFFFFFFFFFFFCLL;
      v27 = (v22 & 0xFFFFFFFFFFFFFFFCLL) == 0;
      v24 = *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFFCLL) + 28);
      if (!v27 && (v24 & 0x7E) == 0x2E)
      {
        v23 = *(_QWORD *)(v23 + 64);
        v24 = *(_DWORD *)(v23 + 28);
      }
      if ((v24 & 0x80) != 0)
        goto LABEL_49;
      if ((v24 & 0x7Eu) - 58 < 0xFFFFFFFA)
      {
        v25 = 0;
LABEL_37:
        v30 = 1;
        goto LABEL_38;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v26)
        v27 = *(_BYTE *)(v26 + 16) == 26;
      else
        v27 = 0;
      if (v27
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v26 = sub_22F10CF48(v26), v19 = v83, v20 = v84, v26))
      {
        if ((*(_QWORD *)(v26 + 16) & 0x3FFFC000000000) == 0x4000000000)
        {
          if ((v28 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v23 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
            && *(_BYTE *)(v28 + 16) == 39
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
            && (v29 = sub_22F10CF48(v28), v19 = v83, v20 = v84, v29))
          {
            v30 = 0;
            v25 = 0;
            goto LABEL_38;
          }
        }
      }
      v31 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v31 && *(_BYTE *)(v31 + 16) == 26)
        goto LABEL_28;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      {
        v33 = 0;
        v20 = v84;
        v19 = v83;
        goto LABEL_29;
      }
      v31 = sub_22F10CF48(v31);
      v20 = v84;
      v19 = v83;
      if (v31)
LABEL_28:
        v33 = (unsigned __int16)(*(_QWORD *)(v31 + 16) >> 38);
      else
        v33 = 0;
LABEL_29:
      v25 = a5 == v33;
      v30 = 1;
      if (a5 && a5 == v33)
      {
        v34 = 0;
        v35 = 1;
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)((a4[v34] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 120) + 8 * v34) + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v25 = v27;
          v34 = v35++;
        }
        while (v27 && a5 != v34);
        goto LABEL_37;
      }
LABEL_38:
      if ((*(_DWORD *)(v23 + 28) & 0x7F) == 0x1D)
      {
        v37 = v13;
        v38 = a7;
        v39 = *(_QWORD *)(v23 + 56);
        v40 = *(_DWORD *)(v39 + 12) & 0x1FFFFFFF;
        v41 = v40 != 1;
        if (v40 != 1)
          goto LABEL_40;
        v44 = sub_22EFC7864(*(_QWORD *)(v39 + 16));
        if (!a10 && !v44)
        {
          v13 = v37;
          v17 = *(_QWORD **)(v37 + 8);
          v18 = *(unsigned int *)(v37 + 16);
          v21 = &v17[v18];
          a7 = v38;
          a4 = v82;
          v20 = v84;
          v19 = v83;
          goto LABEL_49;
        }
        v20 = v84;
        v19 = v83;
        if (a10)
        {
          v75 = v79[1288];
          v76 = *(_DWORD *)(v81 + 8456);
          v74 = *v79;
          v77 = *(_DWORD *)(*(_QWORD *)(v81 + 104) + 180);
          sub_22EE03478(v81);
          if (!v45)
            v79[1288] = 1;
          *v79 = 0;
          v91[0] = v92;
          v91[1] = (void *)0x100000000;
          LODWORD(v89[0]) = 7;
          v89[1] = a10;
          v89[3] = a10 & 0xFFFFFFFFFFFFFFFCLL | 1;
          v42 = !sub_22ED678A8(v81, *(_QWORD *)(v39 + 16), (uint64_t)v89, v23, *(_DWORD *)(v37 + 128), *(_DWORD *)(v37 + 128), 0, (uint64_t)v91, 0)&& *(_DWORD *)(v81 + 8456) <= v76;
          a7 = v38;
          v20 = v84;
          v19 = v83;
          v13 = v37;
          a4 = v82;
          if (v91[0] != v92)
          {
            free(v91[0]);
            v19 = v83;
            v20 = v84;
          }
          *(_DWORD *)(v81 + 8456) = v76;
          v79[1288] = v75;
          *v79 = v74;
          v46 = *(_QWORD *)(v81 + 104);
          if (*(_DWORD *)(v46 + 180) == 5)
            *(_BYTE *)(v46 + 170) = 1;
          v41 = 0;
          if (v77)
            v47 = 3;
          else
            v47 = 0;
          *(_DWORD *)(v46 + 180) = v47;
          if (a7 && v42)
          {
            a8 = 0;
            v86 = 0;
            v19 = 0;
            v90 = 0;
            v17 = *(_QWORD **)(v37 + 8);
            if ((((v80 | v78) | BYTE4(v78)) & 1) != 0)
              v20 = *(_QWORD **)(v37 + 8);
            else
              ++v20;
            v80 = 0x100000000;
            a7 = 1;
            v78 = 0;
            goto LABEL_82;
          }
        }
        else
        {
LABEL_40:
          v42 = v40 == 1;
          a7 = v38;
          v13 = v37;
          a4 = v82;
        }
      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
      if ((v19 & v25) == 1)
        break;
      v43 = v30 ^ 1;
      if (!v86)
        v43 = 0;
      if ((v43 & 1) != 0)
      {
        v86 = 1;
        LODWORD(v80) = 1;
LABEL_81:
        ++v20;
        v17 = *(_QWORD **)(v13 + 8);
        goto LABEL_82;
      }
      if (a7 && v42)
      {
        HIDWORD(v80) = 1;
        a7 = 1;
        goto LABEL_81;
      }
      if ((a8 & v41 & 1) != 0)
      {
        BYTE4(v78) = 1;
        a8 = 1;
        goto LABEL_81;
      }
      v17 = *(_QWORD **)(v13 + 8);
      v18 = *(unsigned int *)(v13 + 16);
      v21 = &v17[v18];
LABEL_49:
      v22 = *(v21 - 1);
      LODWORD(v18) = v18 - 1;
      *(_DWORD *)(v13 + 16) = v18;
      *v20 = v22;
      v21 = &v17[v18];
      v16 = 1;
      if (v20 == v21)
        goto LABEL_90;
    }
    a8 = 0;
    v86 = 0;
    v90 = 0;
    v17 = *(_QWORD **)(v13 + 8);
    if ((((v80 | BYTE4(v80)) | BYTE4(v78)) & 1) != 0)
      v20 = *(_QWORD **)(v13 + 8);
    else
      ++v20;
    v78 = 1;
    v19 = 1;
    a7 = a10 != 0;
    v80 = 0;
LABEL_82:
    v18 = *(unsigned int *)(v13 + 16);
    v21 = &v17[v18];
    if (v20 != v21)
      continue;
    break;
  }
  if (v16)
LABEL_90:
    sub_22EA3DA00(v13);
LABEL_91:
  if (((a10 != 0) & BYTE4(v80)) != 0)
    result = 4;
  else
    result = 2;
  if (((a10 != 0) & BYTE4(v80)) != 0 || (v78 & 1) != 0)
    return result;
  if ((v80 & HIDWORD(v80) & 1) == 0)
  {
    if ((v80 & 0x100000000) != 0)
      v58 = 4;
    else
      v58 = 5;
    if ((v80 & 1) != 0)
      v58 = 3;
    if ((((v80 | BYTE4(v80)) | BYTE4(v78)) & 1) != 0)
      result = v58;
    else
      result = 1;
    if ((((v80 | BYTE4(v80)) | BYTE4(v78)) & 1) != 0 || !a9)
      return result;
    sub_22E8FCA40((_QWORD *)v81, *(_DWORD *)(v13 + 128), 0x1183u, 0, (uint64_t)v91);
    v88 = *(_QWORD *)(v13 + 120);
    v59 = sub_22E894538((uint64_t)v91, &v88);
    v87 = a5;
    v60 = sub_22E8900C4(v59, &v87);
    v61 = sub_22E8901B8(v60, a4);
    v62 = v61;
    if (a5 == 2)
      v63 = a4[1];
    else
      v63 = 0;
    if (*(_BYTE *)(v61 + 80))
    {
      v64 = *(unsigned __int8 **)(v61 + 32);
      if (!v64)
      {
        v64 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v62 + 40));
        *(_QWORD *)(v62 + 32) = v64;
      }
      v64[*v64 + 1] = 9;
      v65 = *(_BYTE **)(v62 + 32);
    }
    else
    {
      if (!*(_BYTE *)(v61 + 92))
        goto LABEL_133;
      v68 = (uint64_t *)(*(_QWORD *)v61 + 12784);
      v69 = *(_QWORD *)(v61 + 16);
      if (v69)
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 32))(v69);
      v89[0] = v69;
      v70 = sub_22F2F1D6C(v68, v89)[1] + 32 * *(unsigned int *)(v62 + 88);
      v73 = *(unsigned __int8 **)(v70 + 8);
      v72 = (_QWORD *)(v70 + 8);
      v71 = v73;
      if (!v73)
      {
        v71 = (unsigned __int8 *)sub_22E3B8AAC(v72[1]);
        *v72 = v71;
      }
      v71[*v71 + 1] = 9;
      v65 = (_BYTE *)*v72;
    }
    v66 = *v65;
    *v65 = v66 + 1;
    *(_QWORD *)&v65[8 * v66 + 16] = v63;
LABEL_133:
    v67 = sub_22E894E38(v62, &v90);
    LOBYTE(v89[0]) = a7 | a8;
    sub_22E894E38(v67, (unsigned __int8 *)v89);
    sub_22E903BEC((unsigned int *)v91);
    return 0;
  }
  sub_22E8FCA40((_QWORD *)v81, *(_DWORD *)(v13 + 128), 0x116Cu, 0, (uint64_t)v91);
  v89[0] = *(_QWORD *)(v13 + 120);
  sub_22E894538((uint64_t)v91, v89);
  sub_22E903BEC((unsigned int *)v91);
  v49 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v49)
  {
    v50 = *(_QWORD **)(v13 + 8);
    v51 = 8 * v49;
    do
    {
      v52 = *v50 & 0xFFFFFFFFFFFFFFFCLL;
      v53 = *(_DWORD *)(v52 + 28) & 0x7F;
      v57 = v53 > 0x2F;
      v54 = (1 << v53) & 0xC00000060000;
      if (v57 || v54 == 0)
        v56 = *v50 & 0xFFFFFFFFFFFFFFFCLL;
      else
        v56 = sub_22EFBAEA4(*v50 & 0xFFFFFFFFFFFFFFFCLL);
      if (v56)
        v57 = (*(_DWORD *)(v56 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9;
      else
        v57 = 0;
      if (!v57)
      {
        if ((*(_DWORD *)(v56 + 28) & 0x7F) == 0x1D)
          v56 = *(_QWORD *)(v56 + 48);
        else
          v56 = 0;
      }
      sub_22ED113EC((unsigned int *)v81, v52, v56, 0, 0, 0);
      ++v50;
      v51 -= 8;
    }
    while (v51);
  }
  return 0;
}

void sub_22EC67598(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  unint64_t *v13;
  unint64_t i;
  unint64_t *v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t *v56;
  _QWORD v57[2];
  char v58;
  uint64_t v59;
  int v60;
  _QWORD v61[2];
  unsigned int v62;
  void *v63;
  uint64_t v64;
  _BYTE v65[128];
  _QWORD v66[2];
  unsigned int v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[18];

  v70[16] = *MEMORY[0x24BDAC8D0];
  v66[0] = 1;
  v9 = 1;
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v66[v9] = v10;
    v9 += 2;
  }
  while (v9 != 17);
  v68 = v70;
  v69 = 0x1000000000;
  v61[0] = 1;
  v11 = 1;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v61[v11] = v12;
    v11 += 2;
  }
  while (v11 != 17);
  v63 = v65;
  v64 = 0x1000000000;
  sub_22EC6543C(a1, a3, a4, a5, (uint64_t)v66, (uint64_t)v61);
  if ((_DWORD)v69)
  {
    v13 = (unint64_t *)v68;
    v55 = (char *)v68 + 8 * v69;
    v53 = a2;
    v54 = a6;
    do
    {
      v56 = v13;
      for (i = sub_22EFCE144(*v13, a2); i; i = v15[1])
      {
        v15 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFF8);
        v16 = (i & 0xFFFFFFFFFFFFFFF8) == 0 || (i & 4) == 0;
        v17 = i & 0xFFFFFFFFFFFFFFF8;
        if (!v16)
          v17 = *v15;
        v18 = *(_DWORD *)(v17 + 28);
        v19 = v18 & 0x7E;
        v20 = v17;
        if (v17 && v19 == 46)
        {
          v20 = *(_QWORD *)(v17 + 64);
          v18 = *(_DWORD *)(v20 + 28);
          v19 = v18 & 0x7E;
        }
        v21 = v18 & 0x7F;
        if ((v19 - 52) < 6 || v21 == 29)
        {
          v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 56))(v17);
          if (v23)
          {
            v24 = v23;
            while (1)
            {
              v25 = *(_DWORD *)(v24 + 28);
              if ((v25 & 0x200000) != 0)
                goto LABEL_32;
              if ((v25 & 0x1800000) != 0)
              {
                v26 = *(_QWORD *)(v24 + 16);
                v27 = v26 & 0xFFFFFFFFFFFFFFF8;
                if ((v26 & 4) != 0)
                  v27 = *(_QWORD *)(v27 + 8);
                v28 = v27 ? v27 - 64 : 0;
                v57[0] = 0;
                if (sub_22F33A234((uint64_t)v61, v28, v57))
                {
LABEL_32:
                  if ((*(_BYTE *)(v24 + 8) & 4) == 0 || (sub_22EC62AF4(a1, v24) & 1) != 0)
                    break;
                }
              }
              v24 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 48))(v24);
              if (!v24)
                goto LABEL_72;
            }
            v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 32))(v20);
            v59 = v29;
            v60 = 0;
            sub_22E7930C0((_DWORD *)a6, &v59, &v60, (uint64_t)v57);
            v30 = v57[0];
            if (v58)
            {
              v32 = *(uint64_t **)(a6 + 32);
              v31 = *(_QWORD *)(a6 + 40);
              if ((unint64_t)v32 >= v31)
              {
                v34 = *(uint64_t **)(a6 + 24);
                v35 = ((char *)v32 - (char *)v34) >> 4;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 60)
                  abort();
                v37 = v31 - (_QWORD)v34;
                if (v37 >> 3 > v36)
                  v36 = v37 >> 3;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
                  v38 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  if (v38 >> 60)
                    sub_22E3B3F8C();
                  v39 = (char *)operator new(16 * v38);
                }
                else
                {
                  v39 = 0;
                }
                v40 = (uint64_t *)&v39[16 * v35];
                *v40 = v29;
                v40[1] = 0;
                v41 = v40;
                if (v32 == v34)
                {
                  a6 = v54;
                }
                else
                {
                  do
                  {
                    *((_OWORD *)v41 - 1) = *((_OWORD *)v32 - 1);
                    v41 -= 2;
                    v32 -= 2;
                  }
                  while (v32 != v34);
                  a6 = v54;
                  v32 = *(uint64_t **)(v54 + 24);
                }
                v33 = v40 + 2;
                *(_QWORD *)(a6 + 24) = v41;
                *(_QWORD *)(a6 + 32) = v40 + 2;
                *(_QWORD *)(a6 + 40) = &v39[16 * v38];
                if (v32)
                  operator delete(v32);
                a2 = v53;
              }
              else
              {
                *v32 = v29;
                v32[1] = 0;
                v33 = v32 + 2;
              }
              *(_QWORD *)(a6 + 32) = v33;
              v42 = *(_QWORD *)(a6 + 24);
              v43 = (((unint64_t)v33 - v42) >> 4) - 1;
              *(_DWORD *)(v30 + 8) = v43;
            }
            else
            {
              v43 = *(_DWORD *)(v57[0] + 8);
              v42 = *(_QWORD *)(a6 + 24);
            }
            v44 = v42 + 16 * v43;
            v47 = *(_QWORD *)(v44 + 8);
            v45 = (unint64_t *)(v44 + 8);
            v46 = v47;
            if (v47)
              v48 = v46 == v20;
            else
              v48 = 1;
            if (v48)
            {
LABEL_71:
              *v45 = v20;
            }
            else
            {
              v49 = *(_DWORD *)(v46 + 28);
              if ((v49 & 0x7Eu) - 58 <= 0xFFFFFFF9)
              {
                if ((v49 & 0x7F) == 0x1D)
                  v46 = *(_QWORD *)(v46 + 48);
                else
                  v46 = 0;
              }
              v50 = *(_DWORD *)(v20 + 28);
              v51 = v20;
              if ((v50 & 0x7Eu) - 58 <= 0xFFFFFFF9)
              {
                if ((v50 & 0x7F) == 0x1D)
                  v51 = *(_QWORD *)(v20 + 48);
                else
                  v51 = 0;
              }
              while ((*(_BYTE *)(v51 + 104) & 3) == 0)
              {
                v52 = sub_22E3CD31C((uint64_t *)(v51 + 104), v51);
                if (!v52)
                  break;
                v51 = v52;
                if (v52 == v46)
                  goto LABEL_71;
              }
            }
          }
        }
LABEL_72:
        if (v16)
          break;
      }
      v13 = v56 + 1;
    }
    while (v56 + 1 != (unint64_t *)v55);
  }
  if (v63 != v65)
    free(v63);
  if ((v61[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v61[1], (void *)(8 * v62));
  if (v68 != v70)
    free(v68);
  if ((v66[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v66[1], (void *)(8 * v67));
}

void sub_22EC67A18(_QWORD *a1, uint64_t **a2, int a3, uint64_t a4, char a5, char a6)
{
  uint64_t v10;
  __int128 *v11;
  _BYTE *v12;
  uint64_t **i;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27[2];
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  _BYTE v33[64];
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  __int16 v51;
  char v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  _QWORD v61[9];

  v61[8] = *MEMORY[0x24BDAC8D0];
  v27[0] = (uint64_t)v27;
  v27[1] = (uint64_t)v27;
  v28 = 0;
  v29 = v33;
  v30 = v33;
  v31 = 8;
  v32 = 0;
  v34 = a4;
  v35 = 0;
  v36 = a6;
  v53 = a1;
  v54 = v56;
  v55 = 0x800000000;
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  v10 = a1[9];
  v11 = (__int128 *)v56;
  v12 = v56;
  if ((*(_BYTE *)(v10 + 1) & 1) == 0)
    goto LABEL_8;
  for (i = a2; ; i = (uint64_t **)*i)
  {
    v14 = (unint64_t)i[45];
    if (v14)
    {
      v15 = *(_WORD *)(v14 + 8) & 0x7F;
      if (v15 == 16 || v15 == 83)
        break;
    }
  }
  sub_22EC60FC8((uint64_t *)&v53, a2, v14);
  v12 = v54;
  v11 = (__int128 *)((char *)v54 + 16 * v55);
  if ((_DWORD)v55)
    v16 = 126 - 2 * __clz(v55);
  else
LABEL_8:
    v16 = 0;
  sub_22EC6F624((uint64_t)v12, v11, v16, 1);
  v37 = 0;
  v38 = v40;
  v39 = 0x800000000;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = a1;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = a3;
  v49 = 0;
  v50 = 16842752;
  v51 = 0;
  v52 = 0;
  sub_22EC56024((uint64_t)&v37);
  LOBYTE(v51) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  if ((a5 & 1) == 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
    v18 = sub_22E3CD31C((uint64_t *)(v17 + 72), v17);
    if (v18)
      v19 = (const void *)(v18 + 40);
    else
      v19 = 0;
    sub_22E3BA850((uint64_t)&v29, v19);
  }
  v20 = operator new(0x28uLL);
  v20[2] = 0;
  v20[3] = 0;
  *((_DWORD *)v20 + 8) = 0;
  v21 = v27[0];
  *v20 = v27[0];
  v20[1] = v27;
  *(_QWORD *)(v21 + 8) = v20;
  v27[0] = (uint64_t)v20;
  ++v28;
  sub_22EC70DDC(v27, a2, (uint64_t)&v37, (uint64_t)&v53);
  v22 = (_QWORD **)v27[0];
  v23 = *(_QWORD *)v27[0];
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v27[0] + 8);
  *v22[1] = v23;
  --v28;
  sub_22F339A14((uint64_t)(v22 + 2));
  operator delete(v22);
  if (HIBYTE(v50))
  {
    if ((_DWORD)v37 == 5)
    {
      sub_22EC64D18(v44, (uint64_t)&v37);
    }
    else if (v42 && (*(_DWORD *)(v44[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v44, (uint64_t)&v37);
    }
  }
  v24 = v41;
  if (v41)
  {
    v25 = *(void **)(v41 + 240);
    if (v25 != (void *)(v41 + 256))
      free(v25);
    v26 = *(void **)(v24 + 176);
    if (v26 != *(void **)(v24 + 168))
      free(v26);
    if ((*(_BYTE *)(v24 + 32) & 1) == 0)
      llvm::deallocate_buffer(*(llvm **)(v24 + 40), (void *)(16 * *(unsigned int *)(v24 + 48)));
    sub_22E687D9C((uint64_t *)(v24 + 8));
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v38 != v40)
    free(v38);
  if (v58 != v57)
    free(v58);
  if (v54 != v56)
    free(v54);
  if (v30 != v29)
    free(v30);
  sub_22F339A88(v27);
}

unint64_t sub_22EC67D70(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v13;

  if (a4)
  {
    v8 = sub_22F3AD454(a1[11], a1[27], a3, a2, a4);
    v13 = (uint64_t *)a1[1611];
LABEL_10:
    sub_22EA0483C((uint64_t)a1, v8, v13, 1);
    return v8;
  }
  v7 = sub_22EC65CE0(a1, a1[1611], a2, a3, 2, 0);
  if (!v7)
  {
    v11 = a1[27];
LABEL_9:
    v8 = sub_22F3AD3E8(a1[11], v11, a3, a2);
    v13 = *(uint64_t **)(a1[1611] + 24);
    goto LABEL_10;
  }
  v8 = v7;
  v9 = *(_QWORD *)(v7 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  v11 = a1[27];
  if (v10 != (_QWORD *)v11)
    goto LABEL_9;
  return v8;
}

void sub_22EC67E3C(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void **v16;
  _BYTE v17[16];
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16);
  v9 = a3 - v8;
  if ((_DWORD)a3 == (_DWORD)v8)
    goto LABEL_5;
  if (v9 < 0)
    v9 = v8 - a3;
  if (v8 / v9 >= 3)
  {
LABEL_5:
    v10 = (((unint64_t)v8 + 2) * (unsigned __int128)0x5555555555555556uLL) >> 64;
    v11 = llvm::StringRef::edit_distance();
    if (v11 <= v10)
    {
      v12 = v11;
      v21[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 424) + 88) + 15192), a2, a3);
      v21[1] = 0;
      v22 = &v24;
      v23 = 0x100000000;
      v25 = v12;
      memset(v29, 0, 24);
      v27 = 0;
      v26 = 0;
      v28 = 0;
      if (a4)
      {
        v24 = 0;
        LODWORD(v23) = 1;
        LOBYTE(v28) = 1;
      }
      v13 = *(unsigned int *)(a1 + 592);
      sub_22EFC70E8((_QWORD *)(a1 + 584));
      LODWORD(v15) = *(_DWORD *)(a1 + 592);
      if (v14)
        v15 = v14;
      else
        v15 = v15;
      v27 = v13 | (v15 << 32);
      sub_22F330280((uint64_t)v17, (uint64_t)v21);
      sub_22EC68070(a1, (unint64_t)v17);
      v16 = (void **)&v20;
      sub_22E8D19C8(&v16);
      if (v18 != &v19)
        free(v18);
      v16 = (void **)v29;
      sub_22E8D19C8(&v16);
      if (v22 != &v24)
        free(v22);
    }
  }
}

void sub_22EC67FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v6 = *(unsigned int *)(a3 + 8);
  sub_22EFC70E8((_QWORD *)a3);
  LODWORD(v8) = *(_DWORD *)(a3 + 8);
  if (v7)
    v8 = v7;
  else
    v8 = v8;
  *(_QWORD *)(a1 + 52) = v6 | (v8 << 32);
  if (a2 && *(_BYTE *)(a1 + 60) && (*(_DWORD *)a2 && *(_DWORD *)(a2 + 4) || *(_QWORD *)(a2 + 8)))
    *(_DWORD *)(a1 + 52) = *(_DWORD *)a2;
}

void sub_22EC68070(uint64_t a1, unint64_t a2)
{
  unsigned int *v4;
  const void *v5;
  size_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  const void *v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t **v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  BOOL v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  size_t v56;
  void *v57;
  void **v58;
  size_t v59;
  int v60;
  _BOOL4 v61;
  unsigned int v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  _BYTE __p[24];
  uint64_t v67;
  BOOL v68;
  void *v69[2];
  uint64_t v70;

  v4 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 16);
  v7 = *v4;
  v5 = v4 + 4;
  v6 = v7;
  if ((*(_QWORD *)a2 & 7) != 0)
    v8 = 0;
  else
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned int **)(v8 + 16);
  v12 = *v9;
  v10 = v9 + 4;
  v11 = v12;
  if (v6 <= 2)
  {
    if (v11 != v6 || v6 && memcmp(v10, v5, v6))
      return;
    v13 = *(_DWORD *)(a2 + 40);
    if (v13 > 0x2710)
      return;
    v14 = *(_DWORD *)(a2 + 44);
    if (v14 > 0x2710)
      return;
    v15 = *(_DWORD *)(a2 + 48);
    if (v15 > 0x2710)
      return;
    v16 = 100 * v13 + 110 * v14 + 150 * v15;
    if (v16 > 0x2710 || v6 < (unsigned __int16)(v16 + 50) / 0x64u)
      return;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    sub_22EC685E8(*(_QWORD *)(a1 + 424), a2);
    if (!*(_QWORD *)a2)
      return;
    v17 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 448) + 24))(*(_QWORD *)(a1 + 448), a2);
    *(_DWORD *)(a2 + 48) = v17;
    v18 = *(_DWORD *)(a2 + 40);
    if (v18 > 0x2710)
      return;
    v19 = *(_DWORD *)(a2 + 44);
    if (v19 > 0x2710)
      return;
    if (v17 > 0x2710 || 150 * v17 + 100 * v18 + 110 * v19 > 0x2710)
      return;
    v21 = (uint64_t **)(a1 + 16);
  }
  else
  {
    v18 = *(_DWORD *)(a2 + 40);
    v21 = (uint64_t **)(a1 + 16);
    if (v18 > 0x2710)
      goto LABEL_26;
    v19 = *(_DWORD *)(a2 + 44);
    if (v19 > 0x2710)
      goto LABEL_26;
  }
  v22 = *(_DWORD *)(a2 + 48);
  if (v22 > 0x2710)
  {
LABEL_26:
    v23 = -1;
    goto LABEL_27;
  }
  v62 = 100 * v18 + 110 * v19 + 150 * v22;
  if (v62 >= 0x2711)
    v23 = -1;
  else
    v23 = v62;
LABEL_27:
  v25 = v21 + 1;
  v24 = v21[1];
  if (v24)
  {
    while (1)
    {
      while (1)
      {
        v26 = (uint64_t **)v24;
        v27 = *((_DWORD *)v24 + 8);
        if (v27 <= v23)
          break;
        v24 = *v26;
        v25 = v26;
        if (!*v26)
          goto LABEL_35;
      }
      if (v27 >= v23)
        break;
      v24 = v26[1];
      if (!v24)
      {
        v25 = v26 + 1;
        goto LABEL_35;
      }
    }
  }
  else
  {
    v26 = v21 + 1;
LABEL_35:
    v28 = (uint64_t *)v26;
    v26 = (uint64_t **)operator new(0x48uLL);
    *((_DWORD *)v26 + 8) = v23;
    v26[5] = 0;
    v26[6] = 0;
    v26[7] = (uint64_t *)0x7000000000;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v28;
    *v25 = (uint64_t *)v26;
    v29 = (uint64_t *)**v21;
    v30 = (uint64_t *)v26;
    if (v29)
    {
      *v21 = v29;
      v30 = *v25;
    }
    sub_22E49FD00(v21[1], v30);
    v21[2] = (uint64_t *)((char *)v21[2] + 1);
  }
  v31 = sub_22F339FAC((llvm::StringMapImpl *)(v26 + 5), v10, v11);
  v32 = *v31;
  v33 = (_QWORD *)(*v31 + 8);
  v34 = *(_DWORD *)(*v31 + 16);
  if (v34 && !*(_DWORD *)(*v33 + 88 * v34 - 64))
    sub_22F338060(*v31 + 8);
  v35 = sub_22F2E6D78(a2);
  if (v35)
  {
    v36 = *(_QWORD *)(v32 + 8);
    v37 = *(_DWORD *)(v32 + 16);
    if (v37)
    {
      v38 = v35;
      v39 = v36 + 88 * v37;
      v40 = 88 * v37;
      while (sub_22F2E6D78(v36) != v38)
      {
        v36 += 88;
        v40 -= 88;
        if (!v40)
        {
          v36 = v39;
          break;
        }
      }
      v41 = v36;
      v36 = *(_QWORD *)(v32 + 8);
      v37 = *(_DWORD *)(v32 + 16);
    }
    else
    {
      v41 = *(_QWORD *)(v32 + 8);
    }
    if (v41 != v36 + 88 * v37)
    {
      if (*(_DWORD *)(a2 + 24) && (v42 = **(_QWORD **)(a2 + 16)) != 0)
      {
        do
        {
          v43 = sub_22F3B120C(v42);
          if (v43)
            break;
          v44 = *(_QWORD *)(v42 + 16);
          v45 = v44 & 0xFFFFFFFFFFFFFFF8;
          if ((v44 & 4) != 0)
            v45 = *(_QWORD *)v45;
          if (!v45)
            break;
          v42 = v45 - 48;
        }
        while ((*(_WORD *)(v45 + 8) & 0x7F) == 0x10);
      }
      else
      {
        v43 = 0;
      }
      sub_22EC6887C((uint64_t *)a2, *(unsigned int **)(*(_QWORD *)(a1 + 424) + 72), (uint64_t)__p);
      v68 = v43;
      v70 = *(_QWORD *)&__p[16];
      *(_OWORD *)v69 = *(_OWORD *)__p;
      if (*(_DWORD *)(v41 + 24) && (v51 = **(_QWORD **)(v41 + 16)) != 0)
      {
        do
        {
          v52 = sub_22F3B120C(v51);
          if ((v52 & 1) != 0)
            break;
          v53 = *(_QWORD *)(v51 + 16);
          v54 = v53 & 0xFFFFFFFFFFFFFFF8;
          if ((v53 & 4) != 0)
            v54 = *(_QWORD *)v54;
          if (!v54)
            break;
          v51 = v54 - 48;
        }
        while ((*(_WORD *)(v54 + 8) & 0x7F) == 0x10);
      }
      else
      {
        v52 = 0;
      }
      sub_22EC6887C((uint64_t *)v41, *(unsigned int **)(*(_QWORD *)(a1 + 424) + 72), (uint64_t)&v64);
      __p[0] = v52;
      *(_OWORD *)&__p[8] = v64;
      v67 = v65;
      if (v68 < v52)
        goto LABEL_107;
      if (v68 <= v52)
      {
        if (v67 >= 0)
          v55 = &__p[8];
        else
          v55 = *(_BYTE **)&__p[8];
        if (v67 >= 0)
          v56 = HIBYTE(v67) & 0x7F;
        else
          v56 = *(_QWORD *)&__p[16];
        if (v70 >= 0)
          v57 = (void *)HIBYTE(v70);
        else
          v57 = v69[1];
        if (v70 >= 0)
          v58 = v69;
        else
          v58 = (void **)v69[0];
        if (v56 >= (unint64_t)v57)
          v59 = (size_t)v57;
        else
          v59 = v56;
        v60 = memcmp(v58, v55, v59);
        v61 = (unint64_t)v57 < v56;
        if (v60)
          v61 = v60 < 0;
        if (v61)
LABEL_107:
          sub_22F3336AC(v41, a2);
      }
      if (SHIBYTE(v67) < 0)
        operator delete(*(void **)&__p[8]);
      if (SHIBYTE(v70) < 0)
        operator delete(v69[0]);
      return;
    }
  }
  else
  {
    v37 = *(_DWORD *)(v32 + 16);
  }
  if (!v37 || *(_DWORD *)(a2 + 24))
  {
    v63 = sub_22EC72EA4((uint64_t)v33, a2);
    sub_22F330280(*(_QWORD *)(v32 + 8) + 88 * *(unsigned int *)(v32 + 16), v63);
    ++*(_DWORD *)(v32 + 16);
  }
  if (*(_QWORD *)(a1 + 32) >= 6uLL)
  {
    v46 = (uint64_t **)(a1 + 24);
    do
    {
      v47 = *v46;
      v48 = (uint64_t *)(a1 + 24);
      if (*v46)
      {
        do
        {
          v49 = v47;
          v47 = (uint64_t *)v47[1];
        }
        while (v47);
      }
      else
      {
        do
        {
          v49 = (uint64_t *)v48[2];
          v50 = *v49 == (_QWORD)v48;
          v48 = v49;
        }
        while (v50);
      }
      sub_22EC72F0C(v21, v49);
      sub_22F339F14((uint64_t)(v49 + 5));
      operator delete(v49);
    }
    while (*(_QWORD *)(a1 + 32) > 5uLL);
  }
}

void sub_22EC685E8(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  void **v18;
  __int128 v19;
  void *v20[2];
  _BYTE v21[30];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  void *__src;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a2 + 16);
  v4 = *(unint64_t **)(a2 + 16);
  v6 = *(unsigned int *)(a2 + 24);
  v7 = v4;
  if ((_DWORD)v6 && !*v4)
    v7 = &v4[v6];
  v8 = &v4[v6];
  while (1)
  {
    if (v7 == v8)
    {
      *(_BYTE *)(a2 + 61) = 0;
      return;
    }
    if ((*(_BYTE *)(*v7 + 8) & 4) != 0 && !sub_22EC62AF4(a1, *v7))
      break;
    ++v7;
  }
  v9 = *(unsigned int *)(a2 + 24);
  v10 = *(_BYTE **)(a2 + 16);
  if ((_DWORD)v9)
  {
    v11 = &v10[8 * v9];
    if (!*(_QWORD *)v10)
      v10 = v11;
  }
  __src = v27;
  v26 = 0x400000000;
  sub_22E3D0148((uint64_t)&__src, v10, v7);
  v12 = v26;
  v13 = (_DWORD)v26 != 0;
  if (v7 != v8)
  {
    while ((*(_BYTE *)(*v7 + 8) & 4) != 0 && !sub_22EC62AF4(a1, *v7))
    {
      if (v13)
      {
        v13 = 1;
      }
      else
      {
        v15 = *v7;
        if ((~*(_DWORD *)(*v7 + 8) & 6) != 0)
        {
          v13 = 0;
          v14 = v26;
          v16 = HIDWORD(v26);
LABEL_21:
          if (v14 >= v16)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = v26;
          }
          *((_QWORD *)__src + v14) = v15;
          LODWORD(v26) = v26 + 1;
          goto LABEL_24;
        }
        v13 = 0;
      }
LABEL_24:
      if (++v7 == v8)
      {
        v12 = v26;
        goto LABEL_31;
      }
    }
    if (v13)
    {
      v14 = v26;
    }
    else
    {
      v14 = 0;
      LODWORD(v26) = 0;
    }
    v15 = *v7;
    v16 = HIDWORD(v26);
    v13 = 1;
    goto LABEL_21;
  }
LABEL_31:
  if (v12)
  {
    v17 = (uint64_t *)__src;
    *(_DWORD *)(a2 + 24) = 0;
    sub_22F263224(v5, *(_QWORD *)(a2 + 16), v17, &v17[v12]);
    *(_BYTE *)(a2 + 61) = !v13;
  }
  else
  {
    memset(v21, 0, sizeof(v21));
    v22 = 0;
    v19 = 0u;
    v20[1] = (void *)0x100000000;
    v20[0] = v21;
    v24 = 0;
    v23 = 0uLL;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    sub_22F24C77C((uint64_t)v5, (uint64_t)v20);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)&v21[8];
    *(_QWORD *)(a2 + 54) = *(_QWORD *)&v21[22];
    sub_22EA44D30((void **)(a2 + 64));
    *(_OWORD *)(a2 + 64) = v23;
    *(_QWORD *)(a2 + 80) = v24;
    v24 = 0;
    v23 = 0uLL;
    v18 = (void **)&v23;
    sub_22E8D19C8(&v18);
    if (v20[0] != v21)
      free(v20[0]);
  }
  if (__src != v27)
    free(__src);
}

void sub_22EC6887C(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18[2];
  uint64_t v19;

  if (a1[1])
  {
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    v10 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    v9 = MEMORY[0x24BED83D8] + 16;
    v17 = v18;
    llvm::raw_ostream::SetBufferAndMode();
    v6 = a1[1];
    sub_22E462F04((unint64_t *)&v8, a2);
    sub_22F0AAD88(v6, (llvm::raw_ostream *)&v9, &v8, 0);
    sub_22EFC6724((uint64_t)&v9, *a1);
    if (*((char *)v17 + 23) < 0)
    {
      sub_22E3BB2B4((_BYTE *)a3, *v17, (unint64_t)v17[1]);
    }
    else
    {
      v7 = *(_OWORD *)v17;
      *(_QWORD *)(a3 + 16) = v17[2];
      *(_OWORD *)a3 = v7;
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v9);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  else
  {
    sub_22EFC683C(a1, (_QWORD *)a3);
  }
}

void sub_22EC68998(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;
  char v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  void **v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  void *__s1;
  size_t __n;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[32];
  void *v79;
  uint64_t v80;
  _BYTE v81[32];
  void *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  int v92;
  void **p_s1;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v75 = 0;
  sub_22F338680((uint64_t)&v82, a2);
  v79 = v81;
  v80 = 0x400000000;
  if (v83)
  {
    sub_22F24C890((uint64_t)&v79, (uint64_t)&v82);
    v4 = v83;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(_QWORD *)(a1 + 8) - 8;
    do
    {
      if (!v4)
        break;
      if (*((_QWORD *)v82 + v4 - 1) != *(_QWORD *)(v7 + v6))
        break;
      v83 = --v4;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = sub_22EC698E4((uint64_t *)a1, (uint64_t)v82, v4, (uint64_t *)&v75);
  if (!v83)
    goto LABEL_71;
  v9 = v8;
  v10 = *((_QWORD *)v82 + v83 - 1);
  if (!v10)
    goto LABEL_74;
  v11 = *(_WORD *)(v10 + 8) & 0x7F;
  if ((v11 - 13) > 0x3D)
    goto LABEL_74;
  v12 = v11 == 16 || v11 == 24;
  if (v12)
  {
    v13 = -48;
  }
  else if (v11 == 71)
  {
    v13 = -56;
  }
  else if (v11 == 70)
  {
    v13 = -64;
  }
  else if ((v11 - 52) < 6)
  {
    v13 = -72;
  }
  else
  {
    v14 = (v11 - 33) >= 5;
    v13 = -48;
    if (!v14)
      v13 = -64;
  }
  v15 = *(_QWORD *)(v10 + v13 + 40);
  if ((v15 & 7) != 0)
    v16 = 0;
  else
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(a1 + 128);
  v18 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    v20 = *(_QWORD **)(a1 + 128);
    while (*v20 != v16)
    {
      ++v20;
      v19 -= 8;
      if (!v19)
      {
        v20 = (_QWORD *)(v17 + 8 * v18);
        break;
      }
    }
  }
  else
  {
    v20 = *(_QWORD **)(a1 + 128);
  }
  if (v18 != ((uint64_t)v20 - v17) >> 3)
  {
    __s1 = 0;
    __n = 0;
    v74 = 0;
    LODWORD(v86) = 0;
    v90 = 0;
    v91 = 0;
    v92 = 1;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    v85 = MEMORY[0x24BED83D8] + 16;
    p_s1 = &__s1;
    llvm::raw_ostream::SetBufferAndMode();
    v76 = v78;
    v77 = 0x400000000;
    v21 = (uint64_t)v75;
    sub_22EC697AC((uint64_t)v75, (uint64_t)&v76);
    sub_22F0AAD88(v21, (llvm::raw_ostream *)&v85, (__int128 *)(*(_QWORD *)a1 + 15104), 0);
    if (v89 != v87)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v85);
    if (v74 >= 0)
      v22 = HIBYTE(v74) & 0x7F;
    else
      v22 = __n;
    v23 = *(_BYTE *)(a1 + 79);
    v24 = v23;
    v25 = v23 & 0x7F;
    if (v24 < 0)
      v25 = *(_QWORD *)(a1 + 64);
    if (v22 == v25)
    {
      if (v24 >= 0)
        v26 = (unsigned __int8 *)(a1 + 56);
      else
        v26 = *(unsigned __int8 **)(a1 + 56);
      if (v74 < 0)
      {
        v34 = memcmp(__s1, v26, __n) == 0;
      }
      else if ((v74 & 0x7F00000000000000) != 0)
      {
        v27 = (HIBYTE(v74) & 0x7F) - 1;
        v28 = &__s1;
        do
        {
          v30 = *(unsigned __int8 *)v28;
          v28 = (void **)((char *)v28 + 1);
          v29 = v30;
          v32 = *v26++;
          v31 = v32;
          v14 = v27-- != 0;
          v33 = v14;
          v34 = v29 == v31;
        }
        while (v29 == v31 && (v33 & 1) != 0);
      }
      else
      {
        v34 = 1;
      }
    }
    else
    {
      v34 = 0;
    }
    if (v76 != v78)
      free(v76);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v85);
    if (SHIBYTE(v74) < 0)
    {
      operator delete(__s1);
      if (v34)
      {
LABEL_71:
        v39 = *(_QWORD *)a1;
        v40 = *(_QWORD **)(*(_QWORD *)a1 + 920);
        if (!v40)
        {
          v40 = (_QWORD *)sub_22E3CD3D4(v39 + 2032, 24, 3);
          v40[1] = 0;
          v40[2] = 0;
          *v40 = 0;
          *(_QWORD *)(v39 + 920) = v40;
        }
        v75 = v40;
        v9 = sub_22EC698E4((uint64_t *)a1, (uint64_t)v79, v80, (uint64_t *)&v75);
        goto LABEL_74;
      }
    }
    else if (v34)
    {
      goto LABEL_71;
    }
  }
  v35 = *(_QWORD *)(a1 + 80);
  v36 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v36)
  {
    v37 = 8 * v36;
    v38 = *(_QWORD **)(a1 + 80);
    while (*v38 != v16)
    {
      ++v38;
      v37 -= 8;
      if (!v37)
      {
        v38 = (_QWORD *)(v35 + 8 * v36);
        break;
      }
    }
  }
  else
  {
    v38 = *(_QWORD **)(a1 + 80);
  }
  if (v36 != ((uint64_t)v38 - v35) >> 3)
    goto LABEL_71;
LABEL_74:
  v41 = (uint64_t)v75;
  if (!v75 || !*(_DWORD *)(a1 + 136))
    goto LABEL_103;
  v76 = v78;
  v77 = 0x400000000;
  sub_22EC697AC((uint64_t)v75, (uint64_t)&v76);
  v42 = *(_QWORD *)(a1 + 128);
  v43 = *(unsigned int *)(a1 + 136);
  v44 = (uint64_t *)v76;
  v45 = v77;
  if (v77 < 0x40)
  {
    v46 = 0;
    v47 = &v85;
    if (!(_DWORD)v77)
    {
      v50 = 1;
      if ((_DWORD)v43)
        goto LABEL_85;
      goto LABEL_99;
    }
  }
  else
  {
    v46 = operator new[]();
    v47 = (uint64_t *)v46;
  }
  if ((v45 + 1) > 2)
    v48 = (v45 + 1);
  else
    v48 = 2;
  v49 = 1;
  do
  {
    *((_DWORD *)v47 + v49) = v49;
    ++v49;
  }
  while (v48 != v49);
  v50 = 0;
  if ((_DWORD)v43)
  {
LABEL_85:
    v51 = 1;
    do
    {
      *(_DWORD *)v47 = v51;
      if ((v50 & 1) == 0)
      {
        v52 = v51 - 1;
        v53 = *(_QWORD *)(v42 + 8 * (v51 - 1));
        v54 = (unsigned int *)v47 + 1;
        v55 = v44;
        v56 = v45;
        v57 = v51;
        do
        {
          v58 = *v54;
          if (*v54 >= v57)
            v59 = v54 - 1;
          else
            v59 = v54;
          v60 = *v59;
          v61 = *v55++;
          if (v53 != v61)
            ++v52;
          if (v60 + 1 < v52)
            v57 = v60 + 1;
          else
            v57 = v52;
          *v54++ = v57;
          v52 = v58;
          --v56;
        }
        while (v56);
      }
      v12 = v51++ == v43;
    }
    while (!v12);
  }
LABEL_99:
  v9 = *((_DWORD *)v47 + v45);
  if (v46)
    MEMORY[0x2348A0E84](v46, 0x1000C8052888210);
  if (v76 != v78)
    free(v76);
LABEL_103:
  v86 = v41;
  v85 = a2;
  v87 = v9;
  v63 = (uint64_t **)(a1 + 184);
  v62 = *(uint64_t **)(a1 + 184);
  if (v62)
  {
    while (1)
    {
      while (1)
      {
        v64 = (uint64_t **)v62;
        v65 = *((_DWORD *)v62 + 8);
        if (v65 <= v9)
          break;
        v62 = *v64;
        v63 = v64;
        if (!*v64)
          goto LABEL_111;
      }
      if (v65 >= v9)
        break;
      v62 = v64[1];
      if (!v62)
      {
        v63 = v64 + 1;
        goto LABEL_111;
      }
    }
  }
  else
  {
    v64 = (uint64_t **)(a1 + 184);
LABEL_111:
    v66 = (uint64_t *)v64;
    v64 = (uint64_t **)operator new(0x1B8uLL);
    *((_DWORD *)v64 + 8) = v9;
    v64[5] = (uint64_t *)(v64 + 7);
    v64[6] = (uint64_t *)0x1000000000;
    *v64 = 0;
    v64[1] = 0;
    v64[2] = v66;
    *v63 = (uint64_t *)v64;
    v67 = **(_QWORD **)(a1 + 176);
    v68 = (uint64_t *)v64;
    if (v67)
    {
      *(_QWORD *)(a1 + 176) = v67;
      v68 = *v63;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 184), v68);
    ++*(_QWORD *)(a1 + 192);
  }
  v69 = sub_22E5BBF6C((uint64_t)(v64 + 5), (unint64_t)&v85);
  v70 = (uint64_t)&v64[5][3 * *((unsigned int *)v64 + 12)];
  v71 = *(_OWORD *)v69;
  *(_QWORD *)(v70 + 16) = *(_QWORD *)(v69 + 16);
  *(_OWORD *)v70 = v71;
  ++*((_DWORD *)v64 + 12);
  if (v79 != v81)
    free(v79);
  if (v82 != &v84)
    free(v82);
}

uint64_t sub_22EC68FEC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  llvm **v12;
  llvm *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  const void *v48;
  size_t v49;
  unsigned int v50;
  void **v51;
  char v52;
  void *v53;
  void *v54;
  void **v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v72;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  void **v80;
  _QWORD *v81;
  _QWORD *v82;
  _DWORD *v83;
  unsigned int v85;
  uint64_t v86;
  __int128 v87;
  void **v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char v93;
  uint64_t v94;
  int v95;
  void **v96;
  void *__p[2];
  uint64_t v98;
  void *v99[2];
  char v100;
  void **v101[2];
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  char v114;
  _QWORD v115[5];

  v115[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 408) + 1;
  *(_QWORD *)(a1 + 408) = v2;
  v3 = a1 + 40;
  v4 = *(unsigned int *)(a1 + 48);
  if (v2 < v4)
    return *(_QWORD *)v3 + 88 * v2;
  v5 = a1;
  *(_QWORD *)(a1 + 408) = v4;
  v6 = (uint64_t **)(a1 + 16);
  v7 = (void **)v115;
  v8 = (uint64_t *)(a1 + 832);
  v82 = (_QWORD *)(a1 + 816);
  v83 = (_DWORD *)(a1 + 464);
  v77 = a1 + 584;
  v79 = (void **)(MEMORY[0x24BED83D8] + 16);
  do
  {
    if (!*(_QWORD *)(v5 + 32))
      return *(_QWORD *)v3;
    v78 = v1;
    v9 = *v6;
    v10 = (uint64_t)(*v6 + 5);
    if (!*((_DWORD *)*v6 + 13))
    {
      sub_22EC72F0C(v6, *v6);
      sub_22F339F14(v10);
      operator delete(v9);
      v11 = 2;
      v5 = a1;
      goto LABEL_116;
    }
    v12 = (llvm **)v9[5];
    if (*((_DWORD *)v9 + 12))
    {
      while (1)
      {
        v13 = *v12;
        if (*v12 && (llvm *)((char *)v13 + 8) != 0)
          break;
        ++v12;
      }
    }
    else
    {
      v13 = *v12;
    }
    v14 = *((_DWORD *)v13 + 4);
    if (v14)
    {
      sub_22F333E34((uint64_t)&v105, *((_QWORD *)v13 + 1) + 88 * v14 - 88);
      sub_22F338060((uint64_t)v13 + 8);
      v5 = a1;
      if (v108 || v114 || sub_22F33821C(a1, (unint64_t)&v105))
      {
        v72 = sub_22EC72EA4(v3, (unint64_t)&v105);
        sub_22F330280(*(_QWORD *)(a1 + 40) + 88 * *(unsigned int *)(a1 + 48), v72);
        ++*(_DWORD *)(a1 + 48);
        v1 = *(_QWORD *)(a1 + 40) + 88 * *(_QWORD *)(a1 + 408);
        v11 = 1;
      }
      else
      {
        v11 = 0;
        v1 = v78;
      }
      v101[0] = v7;
      sub_22E8D19C8(v101);
      if (v107 != &v109)
        free(v107);
      continue;
    }
    v74 = v8;
    v75 = v6;
    v76 = v3;
    llvm::StringMapImpl::RemoveKey();
    v15 = (void *)(*(_QWORD *)v13 + 113);
    sub_22F339DFC((char **)v13 + 1);
    llvm::deallocate_buffer(v13, v15);
    v5 = a1;
    v16 = *(_DWORD *)(a1 + 840);
    if (!v16)
      goto LABEL_115;
    v85 = **(_DWORD **)(*(_QWORD *)(a1 + 8) + 16);
    v17 = *(_QWORD **)(a1 + 832);
    v80 = v7;
    v81 = &v17[11 * v16];
    do
    {
      v18 = v82;
      v19 = *v82;
      v20 = (_QWORD *)*v82;
      if (*v82)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)v20[1];
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v18[2];
          v39 = *v21 == (_QWORD)v18;
          v18 = v21;
        }
        while (v39);
      }
      v22 = v82;
      if (v19)
      {
        do
        {
          v23 = v19;
          v19 = *(_QWORD *)(v19 + 8);
        }
        while (v19);
      }
      else
      {
        do
        {
          v23 = v22[2];
          v39 = *(_QWORD *)v23 == (_QWORD)v22;
          v22 = (_QWORD *)v23;
        }
        while (v39);
      }
      v24 = *(_QWORD **)(v5 + 808);
      v25 = (uint64_t *)v24[5];
      v26 = *(_QWORD *)(v23 + 40) + 24 * *(unsigned int *)(v23 + 48);
      v86 = v26;
      while (v25 != (uint64_t *)v26)
      {
        v28 = *v25;
        v27 = v25[1];
        if ((*(_BYTE *)(v27 + 8) & 4) == 0)
        {
          v29 = 0;
LABEL_69:
          v31 = 1;
          goto LABEL_26;
        }
        v29 = *(_QWORD *)(v27 + 16);
        if (!v29)
          goto LABEL_69;
        v30 = sub_22F10C2A4(*(_QWORD *)(v27 + 16));
        if (v30 && (*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 <= 2)
        {
          v35 = *(_QWORD *)(v30 + 40);
          v36 = (v35 & 7) != 0 ? 0 : v35 & 0xFFFFFFFFFFFFFFF8;
          v37 = (*v17 & 7) != 0 ? 0 : *v17 & 0xFFFFFFFFFFFFFFF8;
          if (v36 == v37)
            goto LABEL_48;
        }
        v31 = 0;
LABEL_26:
        sub_22F330280((uint64_t)&v105, (uint64_t)v17);
        v108 = 0;
        v106 = v25[1];
        v113 = v106 != 0;
        v32 = *((_DWORD *)v25 + 4);
        v111 = v32;
        v33 = -1;
        if (v110 <= 0x2710 && v32 <= 0x2710)
        {
          v34 = 110 * v32 + 100 * v110;
          if (v34 > 0x2710)
            v33 = -1;
          else
            v33 = (unsigned __int16)(v34 + 50) / 0x64u;
        }
        if ((*v17 & 7) != 0)
          v38 = 0;
        else
          v38 = *v17 & 0xFFFFFFFFFFFFFFF8;
        if (v33 && v38 != *(_QWORD *)(v5 + 8) && v85 / v33 < 3)
          goto LABEL_46;
        sub_22F3385BC((uint64_t)v83);
        v42 = (*v17 & 7) != 0 ? 0 : *v17 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v5 + 584) = v42;
        if (!sub_22EC611AC(*(_QWORD *)(v5 + 424), v83, v28, 0) || (*v83 & 0xFFFFFFFE) != 2)
          goto LABEL_46;
        v43 = *(_QWORD *)(v5 + 440);
        if (!v43 || !*(_QWORD *)(v43 + 8))
        {
LABEL_99:
          v64 = *(unsigned int *)(v5 + 480);
          if ((_DWORD)v64)
          {
            v65 = *(uint64_t **)(v5 + 472);
            v66 = 8 * v64;
            do
            {
              v67 = *(_QWORD *)(v5 + 424);
              v68 = v112;
              if ((v31 & 1) == 0 && (v69 = sub_22F10C2A4(v29)) != 0)
              {
                if ((*(_DWORD *)(v69 + 28) & 0x7Fu) - 35 >= 3)
                  v70 = 0;
                else
                  v70 = v69;
              }
              else
              {
                v70 = 0;
              }
              if (!sub_22E90ACC4(v67, v68, v70, *v65))
                sub_22F33852C((uint64_t)&v105, *v65 & 0xFFFFFFFFFFFFFFFCLL);
              ++v65;
              v66 -= 8;
              v5 = a1;
            }
            while (v66);
          }
          v7 = v80;
          if (v108)
          {
            sub_22EC67FFC((uint64_t)&v105, *(_QWORD *)(v5 + 440), v77);
            sub_22F330280((uint64_t)v101, (uint64_t)&v105);
            sub_22EC68070(v5, (unint64_t)v101);
            v88 = (void **)&v104;
            sub_22E8D19C8(&v88);
            if (v102 != &v103)
              free(v102);
          }
          goto LABEL_46;
        }
        sub_22EC6887C(&v105, *(unsigned int **)(*(_QWORD *)(v5 + 424) + 72), (uint64_t)v99);
        __p[0] = 0;
        __p[1] = 0;
        v98 = 0;
        v89 = 0;
        v93 = 0;
        v94 = 0;
        v95 = 1;
        v91 = 0;
        v92 = 0;
        v90 = 0;
        v88 = v79;
        v96 = __p;
        llvm::raw_ostream::SetBufferAndMode();
        v44 = v5;
        v45 = *(_QWORD *)(*(_QWORD *)(v5 + 440) + 8);
        *(_QWORD *)&v87 = sub_22E8FCD8C(*(_QWORD *)(*(_QWORD *)(v44 + 424) + 88), *(_QWORD *)(*(_QWORD *)(v44 + 424) + 80));
        *((_QWORD *)&v87 + 1) = v46;
        sub_22F0AAD88(v45, (llvm::raw_ostream *)&v88, &v87, 0);
        v47 = *(unsigned int **)(*(_QWORD *)(v44 + 8) + 16);
        v50 = *v47;
        v48 = v47 + 4;
        v49 = v50;
        if (v50 <= (unint64_t)(v91 - (_QWORD)v92))
        {
          if (v49)
          {
            memcpy(v92, v48, v49);
            v92 += v49;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v88, (const char *)v48);
        }
        v51 = v96;
        v52 = *((_BYTE *)v96 + 23);
        if (v52 >= 0)
          v53 = (void *)(v52 & 0x7F);
        else
          v53 = v96[1];
        v54 = (void *)(v100 & 0x7F);
        if (v100 < 0)
          v54 = v99[1];
        if (v53 == v54)
        {
          if (v100 >= 0)
            v55 = v99;
          else
            v55 = (void **)v99[0];
          v5 = a1;
          if ((*((_BYTE *)v96 + 23) & 0x80) != 0)
          {
            v63 = memcmp(*v96, v55, (size_t)v96[1]) == 0;
          }
          else if ((v52 & 0x7F) != 0)
          {
            v56 = (v52 & 0x7F) - 1;
            do
            {
              v58 = *(unsigned __int8 *)v51;
              v51 = (void **)((char *)v51 + 1);
              v57 = v58;
              v60 = *(unsigned __int8 *)v55;
              v55 = (void **)((char *)v55 + 1);
              v59 = v60;
              v62 = v56-- != 0;
              v63 = v57 == v59;
            }
            while (v57 == v59 && v62);
          }
          else
          {
            v63 = 1;
          }
        }
        else
        {
          v63 = 0;
          v5 = a1;
        }
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v88);
        if (SHIBYTE(v98) < 0)
          operator delete(__p[0]);
        if (v100 < 0)
        {
          operator delete(v99[0]);
          if (!v63)
            goto LABEL_99;
        }
        else if (!v63)
        {
          goto LABEL_99;
        }
LABEL_46:
        v88 = v7;
        sub_22E8D19C8(&v88);
        if (v107 != &v109)
          free(v107);
LABEL_48:
        v25 += 3;
        v39 = v25 != (uint64_t *)(v24[5] + 24 * *((unsigned int *)v24 + 12)) || v24 == v21;
        if (!v39)
        {
          v40 = (_QWORD *)v24[1];
          if (v40)
          {
            do
            {
              v41 = v40;
              v40 = (_QWORD *)*v40;
            }
            while (v40);
          }
          else
          {
            do
            {
              v41 = (_QWORD *)v24[2];
              v39 = *v41 == (_QWORD)v24;
              v24 = v41;
            }
            while (!v39);
          }
          v25 = (uint64_t *)v41[5];
          v24 = v41;
        }
        v26 = v86;
      }
      v17 += 11;
    }
    while (v17 != v81);
LABEL_115:
    v8 = v74;
    sub_22F33860C(v74);
    v11 = 2;
    v6 = v75;
    v3 = v76;
LABEL_116:
    v1 = v78;
  }
  while (v11 != 1);
  return v1;
}

uint64_t sub_22EC697AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (result)
    result = sub_22EC697AC(result, a2);
  else
    *(_DWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (v6 >> 1) & 3;
  if (v7 - 2 < 2)
  {
    v12 = v5 & (v6 << 61 >> 63) & 0xFFFFFFFFFFFFFFF0;
    result = sub_22F10AC24(&v12);
    v5 = result;
    if (!result)
      return result;
LABEL_7:
    v8 = *(_DWORD *)(a2 + 8);
    if (v8 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v5;
    ++*(_DWORD *)(a2 + 8);
    return result;
  }
  if (v7 != 1)
  {
    if ((v6 & 6) != 0)
      return result;
    goto LABEL_7;
  }
  v9 = *(_DWORD *)(v5 + 28) & 0x7F;
  if ((v9 - 35) < 3)
    return result;
  if (v9 == 16)
  {
    if ((*(_QWORD *)(a1 + 8) & 6) != 2)
      return result;
    v10 = *(_QWORD *)(v5 + 40);
    if (v10 < 8 || (v10 & 7) != 0)
      return result;
    goto LABEL_22;
  }
  if (v9 == 17)
    v11 = *(_QWORD *)(a1 + 16);
  else
    v11 = 0;
  v10 = *(_QWORD *)(v11 + 40);
  if ((v10 & 7) == 0)
  {
LABEL_22:
    v5 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) == 0)
      return result;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_22EC698E4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[3];

  if (a3)
  {
    v6 = 0;
    v7 = 8 * a3;
    v8 = a2 - 8;
    while (1)
    {
      v9 = *(_QWORD *)(v8 + v7);
      if (v9)
      {
        v10 = *(_WORD *)(v9 + 8);
        if ((v10 & 0x7F) == 0x10)
        {
          v11 = v9 - 48;
          v12 = *a1;
          v13 = *a4 & 0xFFFFFFFFFFFFFFF9 | 2;
LABEL_11:
          v17[0] = 0;
          v17[1] = v13;
          v17[2] = v11;
          *a4 = sub_22F0AA9D0(v12, (uint64_t)v17);
          v6 = (v6 + 1);
          goto LABEL_12;
        }
        if ((v10 & 0x7Eu) - 34 <= 3)
        {
          v12 = *a1;
          v14 = (*(_DWORD *)(v9 - 36) & 0x7F) - 26;
          v11 = *(_QWORD *)(v9 - 16);
          if (v14 >= 7)
            v15 = 4;
          else
            v15 = 6;
          v13 = v15 | *a4 & 0xFFFFFFFFFFFFFFF9;
          goto LABEL_11;
        }
      }
LABEL_12:
      v7 -= 8;
      if (!v7)
        return v6;
    }
  }
  return 0;
}

uint64_t sub_22EC699D0(uint64_t result, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  BOOL v24;
  unsigned int v25;
  uint64_t *i;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t **v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  size_t **j;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  size_t *v73;
  size_t *v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  const void *v80;
  size_t v81;
  size_t v82;
  _BYTE *v83;
  size_t v84;
  const char *v85;
  uint64_t k;
  size_t v87;
  uint64_t *v88;
  uint64_t v89;
  const char *v90;
  size_t v91;
  uint64_t m;
  char *v93;
  size_t v94;
  uint64_t v95;
  uint64_t n;
  size_t v97;
  uint64_t v98;
  uint64_t ii;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  size_t v104;
  const char *v105;
  uint64_t v106;
  void ***v107;
  uint64_t v108;
  void **v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  void *v123[2];
  void *v124[2];
  _OWORD v125[2];
  _QWORD v126[6];

  v11 = (_QWORD *)result;
  v126[4] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(a2 + 104) + 170))
    goto LABEL_4;
  v13 = *(_QWORD *)(a2 + 72);
  if ((*(_QWORD *)(v13 + 140) & 0x100000000000000) == 0)
    goto LABEL_4;
  v14 = (_BYTE *)(a2 + 10272);
  if (*(_BYTE *)(a2 + 12032))
    goto LABEL_4;
  if ((*(_BYTE *)v13 & 0x10) != 0)
  {
    result = sub_22EFC7ADC(*(_QWORD *)(a2 + 216));
    if ((_DWORD)result)
    {
      if ((*(_WORD *)(*(_QWORD *)(a2 + 216) + 8) & 0x7Eu) - 54 <= 3)
        goto LABEL_4;
    }
  }
  v21 = *a3;
  if ((*a3 & 7) != 0)
    goto LABEL_4;
  v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 0xFFFFFFFFFFFFFFF8) == 0 || a6 && *(_DWORD *)a6 && *(_DWORD *)(a6 + 4) && !*(_QWORD *)(a6 + 8))
    goto LABEL_4;
  if (*(_DWORD *)(a2 + 10680))
    goto LABEL_4;
  if (a5)
  {
    v23 = a5;
    while ((*((_BYTE *)v23 + 9) & 8) == 0)
    {
      v23 = (uint64_t *)*v23;
      if (!v23)
        goto LABEL_24;
    }
    result = *(_QWORD *)(a2 + 12896);
    if (!result)
    {
      result = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a2 + 88) + 15192), "super", 5uLL);
      *(_QWORD *)(a2 + 12896) = result;
    }
    if (result == v22)
      goto LABEL_4;
  }
LABEL_24:
  v123[0] = 0;
  result = sub_22F285220(*(_QWORD *)(a2 + 12040), *(_DWORD *)(a2 + 12056), v22, v123);
  if ((_DWORD)result)
    v24 = v123[0] == (void *)(*(_QWORD *)(a2 + 12040) + 56 * *(unsigned int *)(a2 + 12056));
  else
    v24 = 1;
  if (!v24)
  {
    v25 = *((_DWORD *)a3 + 2);
    if (*((_QWORD *)v123[0] + 6))
    {
      for (i = (uint64_t *)*((_QWORD *)v123[0] + 5); i; i = (uint64_t *)*i)
      {
        v27 = *((_DWORD *)i + 7);
        if (v25 >= v27)
        {
          if (v27 >= v25)
            goto LABEL_4;
          ++i;
        }
      }
    }
    else
    {
      v28 = *((unsigned int *)v123[0] + 4);
      if ((_DWORD)v28)
      {
        v29 = (_DWORD *)*((_QWORD *)v123[0] + 1);
        v30 = 4 * v28;
        while (*v29 != v25)
        {
          ++v29;
          v30 -= 4;
          if (!v30)
            goto LABEL_41;
        }
        if (v30)
          goto LABEL_4;
      }
    }
  }
LABEL_41:
  v31 = *(_QWORD *)(a2 + 72);
  if ((*(_QWORD *)(v31 + 8) & 0xC0000000000) != 0
    && (v32 = *(_QWORD *)(v22 + 16), *(_DWORD *)v32 == 6)
    && ((v33 = *(_DWORD *)(v32 + 16), v34 = *(unsigned __int16 *)(v32 + 20), v33 == 1952671094)
      ? (v35 = v34 == 29295)
      : (v35 = 0),
        v35)
    || (v36 = *(_DWORD *)(a2 + 12036), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 104) + 40) + 24) - 1 < v36))
  {
LABEL_4:
    *v11 = 0;
    return result;
  }
  v118 = a4;
  *(_DWORD *)(a2 + 12036) = v36 + 1;
  if (a11 && (~*(_QWORD *)(v31 + 20) & 0x20200000000000) == 0)
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 80) + 112) + 48))(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 112), *(_QWORD *)(v22 + 16) + 16, **(unsigned int **)(v22 + 16), *((unsigned int *)a3 + 2));
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a7 + 32))(&v121, a7);
  v37 = (_QWORD *)operator new();
  v38 = 0;
  v39 = a3;
  v40 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if ((*a3 & 7) != 0)
    v40 = 0;
  *v37 = &off_24FAB88B8;
  v37[1] = v40;
  v37[3] = 0;
  v37[2] = v37 + 3;
  v37[5] = v37 + 7;
  v117 = (uint64_t)(v37 + 5);
  v41 = v121;
  v120 = (uint64_t)v37;
  v121 = 0;
  v37[4] = 0;
  v37[6] = 0x400000000;
  v37[51] = 0;
  v37[52] = 0;
  v37[53] = a2;
  v37[54] = a5;
  if (a6)
  {
    v38 = (_QWORD *)operator new();
    *v38 = *(_QWORD *)a6;
    sub_22F0AB560(v38 + 1, a6 + 8);
  }
  *(_QWORD *)(v120 + 440) = v38;
  *(_QWORD *)(v120 + 448) = v41;
  *(_QWORD *)(v120 + 456) = a8;
  *(_QWORD *)(v120 + 464) = 0;
  *(_QWORD *)(v120 + 472) = v120 + 488;
  *(_QWORD *)(v120 + 480) = 0x800000000;
  *(_QWORD *)(v120 + 552) = 0;
  *(_QWORD *)(v120 + 568) = 0;
  *(_QWORD *)(v120 + 560) = 0;
  *(_QWORD *)(v120 + 576) = a2;
  *(_OWORD *)(v120 + 584) = *(_OWORD *)v39;
  *(_QWORD *)(v120 + 600) = v39[2];
  *(_QWORD *)(v120 + 608) = 0;
  *(_DWORD *)(v120 + 616) = v118;
  *(_DWORD *)(v120 + 620) = 0;
  *(_DWORD *)(v120 + 624) = 16842752;
  *(_WORD *)(v120 + 628) = 0;
  *(_BYTE *)(v120 + 630) = 0;
  sub_22EC56024(v120 + 464);
  v42 = *(_QWORD *)(a2 + 216);
  v119 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v120 + 632) = v119;
  sub_22F338680(v120 + 640, v42);
  v43 = v120;
  *(_QWORD *)(v120 + 696) = 0;
  *(_QWORD *)(v120 + 688) = 0;
  *(_QWORD *)(v120 + 704) = 0;
  *(_QWORD *)(v120 + 712) = v120 + 728;
  *(_QWORD *)(v120 + 720) = 0x400000000;
  *(_QWORD *)(v120 + 760) = v120 + 776;
  *(_QWORD *)(v120 + 768) = 0x400000000;
  v44 = (uint64_t **)(v120 + 816);
  *(_QWORD *)(v120 + 824) = 0;
  *(_QWORD *)(v120 + 816) = 0;
  *(_QWORD *)(v120 + 808) = v120 + 816;
  if (a6)
  {
    v45 = *(_QWORD *)(a6 + 8);
    if (v45)
    {
      LODWORD(v123[1]) = 0;
      BYTE8(v125[0]) = 0;
      *(_QWORD *)&v125[1] = 0;
      DWORD2(v125[1]) = 1;
      v124[1] = 0;
      *(_QWORD *)&v125[0] = 0;
      v124[0] = 0;
      v123[0] = (void *)(MEMORY[0x24BED83D8] + 16);
      v126[0] = v120 + 688;
      llvm::raw_ostream::SetBufferAndMode();
      sub_22F0AAD88(v45, (llvm::raw_ostream *)v123, (__int128 *)(v119 + 15104), 0);
      sub_22EC697AC(v45, v120 + 760);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v123);
      v43 = v120;
    }
  }
  v46 = *(unsigned int *)(v43 + 648);
  if ((_DWORD)v46)
  {
    v66 = 8 * v46;
    v67 = *(_QWORD *)(v43 + 640) - 8;
    do
    {
      v68 = *(_QWORD *)(v67 + v66);
      if (v68 && (*(_WORD *)(v68 + 8) & 0x7F) == 0x10)
      {
        v69 = *(_QWORD *)(v68 - 8);
        v70 = *(unsigned int *)(v43 + 720);
        if (v70 >= *(unsigned int *)(v43 + 724))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v43 = v120;
          v70 = *(unsigned int *)(v120 + 720);
        }
        v71 = v69 & 0xFFFFFFFFFFFFFFF8;
        if ((v69 & 7) != 0)
          v71 = 0;
        *(_QWORD *)(*(_QWORD *)(v43 + 712) + 8 * v70) = v71;
        ++*(_DWORD *)(v43 + 720);
      }
      v66 -= 8;
    }
    while (v66);
  }
  v124[0] = (void *)1;
  v47 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v119 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v119 + 1960) + 80));
  v48 = (void *)(v47 + 40);
  if (!v47)
    v48 = 0;
  v123[0] = v48;
  v49 = *(_QWORD **)(v119 + 920);
  if (!v49)
  {
    v49 = (_QWORD *)sub_22E3CD3D4(v119 + 2032, 24, 3);
    v49[1] = 0;
    v49[2] = 0;
    *v49 = 0;
    *(_QWORD *)(v119 + 920) = v49;
  }
  v123[1] = v49;
  v50 = *v44;
  v51 = (uint64_t **)(v120 + 816);
  if (*v44)
  {
    while (1)
    {
      while (1)
      {
        v51 = (uint64_t **)v50;
        v52 = *((_DWORD *)v50 + 8);
        if (v52 < 2)
          break;
        v50 = *v51;
        v44 = v51;
        if (!*v51)
          goto LABEL_70;
      }
      if (v52)
        break;
      v50 = v51[1];
      if (!v50)
      {
        v44 = v51 + 1;
        goto LABEL_70;
      }
    }
  }
  else
  {
LABEL_70:
    v53 = (uint64_t *)v51;
    v51 = (uint64_t **)operator new(0x1B8uLL);
    *((_DWORD *)v51 + 8) = 1;
    v51[5] = (uint64_t *)(v51 + 7);
    v51[6] = (uint64_t *)0x1000000000;
    *v51 = 0;
    v51[1] = 0;
    v51[2] = v53;
    *v44 = (uint64_t *)v51;
    v54 = **(_QWORD **)(v120 + 808);
    v55 = (uint64_t *)v51;
    if (v54)
    {
      *(_QWORD *)(v120 + 808) = v54;
      v55 = *v44;
    }
    sub_22E49FD00(*(uint64_t **)(v120 + 816), v55);
    ++*(_QWORD *)(v120 + 824);
  }
  v56 = sub_22E5BBF6C((uint64_t)(v51 + 5), (unint64_t)v123);
  v57 = (uint64_t)&v51[5][3 * *((unsigned int *)v51 + 12)];
  v58 = *(_OWORD *)v56;
  *(_QWORD *)(v57 + 16) = *(_QWORD *)(v56 + 16);
  *(_OWORD *)v57 = v58;
  ++*((_DWORD *)v51 + 12);
  *(_QWORD *)(v120 + 832) = v120 + 848;
  *(_QWORD *)(v120 + 840) = 0x200000000;
  *(_BYTE *)(v120 + 1024) = a9;
  *(_BYTE *)(v120 + 1025) = 0;
  *(_BYTE *)(v120 + 627) = 0;
  memset(v125, 0, sizeof(v125));
  *(_OWORD *)v123 = 0u;
  v124[1] = (void *)0x100000000;
  v124[0] = v125;
  memset(v126, 0, 24);
  v59 = sub_22EC72EA4(v117, (unint64_t)v123);
  sub_22F333E34(*(_QWORD *)(v120 + 40) + 88 * *(unsigned int *)(v120 + 48), v59);
  ++*(_DWORD *)(v120 + 48);
  v122 = (void **)v126;
  sub_22E8D19C8(&v122);
  if (v124[0] != v125)
    free(v124[0]);
  if (a8)
  {
    sub_22F337E60(a2, a8, v118, v120, 1, 0, 1);
    if (a10)
    {
      v110 = sub_22F3174CC(a10);
      if ((uint64_t *)v110 != v111)
      {
        v112 = (uint64_t *)v110;
        v113 = v111;
        do
        {
          v114 = *v112++;
          v115 = v114 + 48;
          if (v114)
            v116 = v115;
          else
            v116 = 0;
          sub_22F337E60(a2, v116, v118, v120, 1, 0, 1);
        }
        while (v112 != v113);
      }
    }
    v61 = 0;
    if (!a6 || (**(_QWORD **)(a2 + 72) & 0x100) == 0)
    {
LABEL_114:
      v83 = *(_BYTE **)(v120 + 448);
      if (!a6)
        goto LABEL_120;
      goto LABEL_115;
    }
LABEL_203:
    if (*(_QWORD *)(a6 + 8))
    {
      v61 = 1;
      goto LABEL_81;
    }
    goto LABEL_205;
  }
  if (!a6 || !*(_QWORD *)(a6 + 8))
  {
    v61 = *(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1;
LABEL_81:
    v62 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 15192);
    v63 = *(unsigned int *)(v62 + 8);
    if ((_DWORD)v63)
    {
      for (j = *(size_t ***)v62; !*j || *j + 1 == 0; ++j)
        ;
    }
    else
    {
      j = *(size_t ***)v62;
    }
    v72 = *(_QWORD *)v62 + 8 * v63;
    if (j != (size_t **)v72)
    {
      v73 = *j;
      do
      {
        sub_22EC67E3C(v120, v73 + 2, *v73, 0);
        do
        {
          v74 = j[1];
          ++j;
          v73 = v74;
          if (v74)
            v75 = v73 + 1 == 0;
          else
            v75 = 1;
        }
        while (v75);
      }
      while (j != (size_t **)v72);
      v62 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 15192);
    }
    v76 = *(_QWORD *)(v62 + 120);
    if (v76)
    {
      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
      if (v79)
      {
        v80 = (const void *)v78;
        v81 = v79;
        do
        {
          sub_22EC67E3C(v120, v80, v81, 0);
          v80 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
          v81 = v82;
        }
        while (v82);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
    }
    goto LABEL_114;
  }
  v60 = sub_22E958204(a2, a6, a9);
  if (!v60)
  {
    *v11 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
    goto LABEL_191;
  }
  sub_22F337E60(a2, v60, v118, v120, 1, 0, 1);
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1) != 0)
    goto LABEL_203;
LABEL_205:
  v61 = 0;
  v83 = *(_BYTE **)(v120 + 448);
LABEL_115:
  if (*(_DWORD *)a6 && *(_DWORD *)(a6 + 4) || *(_QWORD *)(a6 + 8))
  {
    v84 = 8;
    sub_22EC67E3C(v120, "template", 8uLL, 1);
    if (v83[9])
    {
      v85 = "operator";
      goto LABEL_189;
    }
    goto LABEL_182;
  }
LABEL_120:
  if (v83[13])
    sub_22EC67E3C(v120, "super", 5uLL, 1);
  if (v83[8])
  {
    for (k = 0; k != 17; ++k)
    {
      v87 = strlen(off_24FAB8C00[k]);
      sub_22EC67E3C(v120, off_24FAB8C00[k], v87, 1);
    }
    v88 = *(uint64_t **)(a2 + 72);
    if ((v88[13] & 0x20) == 0)
    {
      sub_22EC67E3C(v120, "long", 4uLL, 1);
      sub_22EC67E3C(v120, "_Complex", 8uLL, 1);
      sub_22EC67E3C(v120, "_Imaginary", 0xAuLL, 1);
      v88 = *(uint64_t **)(a2 + 72);
    }
    v89 = *v88;
    if ((v89 & 1) != 0)
    {
      sub_22EC67E3C(v120, "restrict", 8uLL, 1);
      v89 = **(_QWORD **)(a2 + 72);
    }
    if ((v89 & 0x800100) != 0)
    {
      v90 = "BOOL";
      v91 = 4;
    }
    else
    {
      if ((v89 & 1) == 0)
        goto LABEL_141;
      v90 = "_Bool";
      v91 = 5;
    }
    sub_22EC67E3C(v120, v90, v91, 1);
    v89 = **(_QWORD **)(a2 + 72);
LABEL_141:
    if ((v89 & 0x100) != 0)
    {
      sub_22EC67E3C(v120, "class", 5uLL, 1);
      sub_22EC67E3C(v120, "typename", 8uLL, 1);
      sub_22EC67E3C(v120, "wchar_t", 7uLL, 1);
      v89 = **(_QWORD **)(a2 + 72);
      if ((v89 & 0x200) != 0)
      {
        sub_22EC67E3C(v120, "char16_t", 8uLL, 1);
        sub_22EC67E3C(v120, "char32_t", 8uLL, 1);
        sub_22EC67E3C(v120, "constexpr", 9uLL, 1);
        sub_22EC67E3C(v120, "decltype", 8uLL, 1);
        sub_22EC67E3C(v120, "thread_local", 0xCuLL, 1);
        v89 = **(_QWORD **)(a2 + 72);
      }
    }
    if ((v89 & 0x100000000) != 0)
      sub_22EC67E3C(v120, "typeof", 6uLL, 1);
    goto LABEL_146;
  }
  if (v83[11])
  {
    for (m = 0; m != 9; ++m)
    {
      v93 = off_24FAB8C88[m];
      if (v93)
        v94 = strlen(off_24FAB8C88[m]);
      else
        v94 = 0;
      sub_22EC67E3C(v120, v93, v94, 1);
    }
  }
LABEL_146:
  if (v83[10] && (*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1) != 0)
  {
    sub_22EC67E3C(v120, "const_cast", 0xAuLL, 1);
    sub_22EC67E3C(v120, "dynamic_cast", 0xCuLL, 1);
    sub_22EC67E3C(v120, "reinterpret_cast", 0x10uLL, 1);
    sub_22EC67E3C(v120, "static_cast", 0xBuLL, 1);
  }
  if (v83[9])
  {
    sub_22EC67E3C(v120, "sizeof", 6uLL, 1);
    v95 = **(_QWORD **)(a2 + 72);
    if ((v95 & 0x800100) != 0)
    {
      sub_22EC67E3C(v120, "false", 5uLL, 1);
      sub_22EC67E3C(v120, "true", 4uLL, 1);
      v95 = **(_QWORD **)(a2 + 72);
    }
    if ((v95 & 0x100) != 0)
    {
      for (n = 0; n != 5; ++n)
      {
        v97 = strlen(off_24FAB8CD0[n]);
        sub_22EC67E3C(v120, off_24FAB8CD0[n], v97, 1);
      }
      v98 = *(_QWORD *)(a2 + 216);
      if ((*(_WORD *)(v98 + 8) & 0x7Eu) - 54 < 4
        && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v98 - 72) + 32))(v98 - 72) + 80) & 0xE000) != 0x4000
        && ((*(_QWORD *)(v98 - 32) & 7) != 6
         || (*(_DWORD *)(*(_QWORD *)(v98 - 32) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
      {
        sub_22EC67E3C(v120, "this", 4uLL, 1);
      }
      v95 = **(_QWORD **)(a2 + 72);
      if ((v95 & 0x200) != 0)
      {
        sub_22EC67E3C(v120, "alignof", 7uLL, 1);
        sub_22EC67E3C(v120, "nullptr", 7uLL, 1);
        v95 = **(_QWORD **)(a2 + 72);
      }
    }
    if ((v95 & 2) != 0)
      sub_22EC67E3C(v120, "_Alignof", 8uLL, 1);
  }
  if (!v83[12])
    goto LABEL_182;
  if (sub_22E903398(a2) || sub_22F30914C(a2))
  {
    for (ii = 0; ii != 8; ++ii)
    {
      v100 = strlen(off_24FAB8CF8[ii]);
      sub_22EC67E3C(v120, off_24FAB8CF8[ii], v100, 1);
    }
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1) != 0)
    {
      sub_22EC67E3C(v120, "catch", 5uLL, 1);
      sub_22EC67E3C(v120, "try", 3uLL, 1);
    }
    if (a5)
    {
      if (a5[5])
        sub_22EC67E3C(v120, "break", 5uLL, 1);
      if (a5[6])
        sub_22EC67E3C(v120, "continue", 8uLL, 1);
    }
    v101 = *(unsigned int *)(a2 + 1904);
    if ((_DWORD)v101)
    {
      v102 = *(_QWORD *)(*(_QWORD *)(a2 + 1896) + 8 * v101 - 8);
      if (v102)
      {
        if (*(_DWORD *)(v102 + 56))
        {
          v103 = "default";
          v104 = 4;
          v105 = "case";
LABEL_179:
          sub_22EC67E3C(v120, v105, v104, 1);
          sub_22EC67E3C(v120, v103, 7uLL, 1);
        }
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1) != 0)
    {
      sub_22EC67E3C(v120, "namespace", 9uLL, 1);
      sub_22EC67E3C(v120, "template", 8uLL, 1);
    }
    if (a5 && (a5[1] & 0x20) != 0)
    {
      sub_22EC67E3C(v120, "explicit", 8uLL, 1);
      v104 = 6;
      sub_22EC67E3C(v120, "friend", 6uLL, 1);
      sub_22EC67E3C(v120, "mutable", 7uLL, 1);
      sub_22EC67E3C(v120, "private", 7uLL, 1);
      sub_22EC67E3C(v120, "protected", 9uLL, 1);
      v103 = "virtual";
      v105 = "public";
      goto LABEL_179;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 1) != 0)
  {
    sub_22EC67E3C(v120, "using", 5uLL, 1);
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 1) & 2) != 0)
    {
      v85 = "static_assert";
      v84 = 13;
LABEL_189:
      sub_22EC67E3C(v120, v85, v84, 1);
      if ((v61 & 1) == 0)
        goto LABEL_190;
LABEL_193:
      v106 = *(_QWORD *)(a2 + 8);
      if (v106 && !*v14)
      {
        v123[0] = v124;
        v123[1] = (void *)0x400000000;
        *v14 = 1;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 248))(v106, v123);
        v107 = (void ***)v123[0];
        if (LODWORD(v123[1]))
        {
          v108 = 8 * LODWORD(v123[1]);
          do
          {
            v109 = *v107++;
            v122 = v109;
            *(_BYTE *)sub_22F328324(a2 + 10224, (unint64_t *)&v122) = 1;
            v108 -= 8;
          }
          while (v108);
          v107 = (void ***)v123[0];
        }
        if (v107 != (void ***)v124)
          free(v107);
      }
      sub_22F3380BC(v120, *(uint64_t **)(a2 + 10248), *(uint64_t **)(a2 + 10256));
      goto LABEL_190;
    }
  }
LABEL_182:
  if (v61)
    goto LABEL_193;
LABEL_190:
  *v11 = v120;
LABEL_191:
  result = v121;
  v121 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22EC6AB20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v15;
  int v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  __n128 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  unint64_t v49;
  const void *p_p;
  size_t v51;
  BOOL v52;
  BOOL v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  const void *v57;
  size_t v58;
  BOOL v59;
  BOOL v60;
  void ***v61;
  uint64_t v62;
  unsigned __int8 v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  size_t v67;
  _BOOL4 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  void **v76;
  void *__p;
  unint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  void **v81[2];
  void *v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  void **v88[2];
  void *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  _QWORD v94[5];

  v15 = a5;
  v17 = a3;
  v18 = a2;
  v94[3] = *MEMORY[0x24BDAC8D0];
  v20 = *(_QWORD *)(a1 + 8);
  if (v20)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 368))(v20, a2, a3, a4, a5, a6, a8, a10, a11);
    if (*(_QWORD *)a9)
      return result;
    v88[0] = (void **)(a9 + 64);
    sub_22E8D19C8(v88);
    v24 = *(void **)(a9 + 16);
    v15 = a5;
    v18 = a2;
    if (v24 != (void *)(a9 + 32))
    {
      v25 = a9;
      v26 = v18;
      free(v24);
      v18 = v26;
      a9 = v25;
      v15 = a5;
    }
  }
  v73 = *(unsigned __int8 *)(a6 + 12);
  v74 = *(unsigned __int8 *)(a6 + 13);
  if ((*v18 & 7) != 0)
    v27 = 0;
  else
    v27 = *v18 & 0xFFFFFFFFFFFFFFF8;
  v28 = v17;
  v29 = v15;
  v30 = (uint64_t)v18;
  result = sub_22EC699D0((uint64_t)&v80, a1, v18, v28, a4, v15, a6, a8, a10, a11, a7 == 1);
  v31 = (_QWORD *)v80;
  if (v80)
  {
    if (*(_QWORD *)(v80 + 32))
    {
      v32 = v30;
      if (*(_DWORD *)(*(_QWORD *)(v80 + 16) + 32) < 0x2711u)
      {
        v36 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v80 + 16) + 32);
        v33 = **(_DWORD **)(v27 + 16);
        if (v36 < 0x32)
          goto LABEL_19;
        v34 = (42949673 * (unint64_t)(v36 + 50)) >> 32;
LABEL_16:
        if (v33 / v34 <= 2)
        {
LABEL_17:
          v35.n128_f64[0] = sub_22F338770(a9, a1, v27, *(_DWORD *)(v32 + 8), a12);
          return (*(uint64_t (**)(_QWORD *, __n128))(*v31 + 8))(v31, v35);
        }
LABEL_19:
        v37 = sub_22EC68FEC(v80);
        sub_22F330280((uint64_t)v88, v37);
        v38 = sub_22EC68FEC((uint64_t)v31);
        sub_22F330280((uint64_t)v81, v38);
        if (!v88[0]
          || (v91 > 0x2710 || v92 > 0x2710 || v93 > 0x2710 || (v39 = 100 * v91 + 110 * v92 + 150 * v93, v39 > 0x2710)
            ? (v40 = -1)
            : (v40 = (unsigned __int16)(v39 + 50) / 0x64u),
              v33 >= 3 ? (v41 = v40 == 0) : (v41 = 1),
              !v41 ? (v42 = v33 / v40 > 2) : (v42 = 1),
              !v42))
        {
          v45 = *(_DWORD *)(v30 + 8);
LABEL_59:
          sub_22F338770(a9, a1, v27, v45, a12);
          goto LABEL_47;
        }
        if (!v81[0])
          goto LABEL_57;
        if (v84 <= 0x2710 && v85 <= 0x2710 && v86 <= 0x2710)
        {
          v43 = 100 * v84 + 110 * v85 + 150 * v86;
          if (v43 >= 0x2711)
            v43 = -1;
        }
        else
        {
          v43 = -1;
        }
        if (v91 <= 0x2710 && v92 <= 0x2710 && v93 <= 0x2710)
        {
          v44 = 100 * v91 + 110 * v92 + 150 * v93;
          if (v44 >= 0x2711)
            v44 = -1;
        }
        else
        {
          v44 = -1;
        }
        if (v43 > v44)
        {
LABEL_57:
          v46 = sub_22F330280(a9, (uint64_t)v88);
          sub_22EC67FFC(v46, v29, v30);
          sub_22EC685E8(a1, a9);
          goto LABEL_47;
        }
        if (!v74 || v73)
        {
          *(_OWORD *)(a9 + 48) = 0u;
          *(_OWORD *)a9 = 0u;
          *(_OWORD *)(a9 + 16) = 0u;
          *(_OWORD *)(a9 + 32) = 0u;
          *(_QWORD *)(a9 + 16) = a9 + 32;
          *(_DWORD *)(a9 + 28) = 1;
          *(_QWORD *)(a9 + 40) = 0;
          *(_QWORD *)(a9 + 48) = 0;
          *(_QWORD *)(a9 + 54) = 0;
          *(_QWORD *)(a9 + 72) = 0;
          *(_QWORD *)(a9 + 80) = 0;
          *(_QWORD *)(a9 + 64) = 0;
LABEL_47:
          __p = &v87;
          sub_22E8D19C8((void ***)&__p);
          if (v82 != &v83)
            free(v82);
          v81[0] = (void **)v94;
          sub_22E8D19C8(v81);
          if (v89 != &v90)
            free(v89);
          return (*(uint64_t (**)(_QWORD *, __n128))(*v31 + 8))(v31, v35);
        }
        v76 = v88[0];
        sub_22EFC683C((uint64_t *)&v76, &__p);
        v47 = v79;
        if ((v79 & 0x80u) == 0)
          v48 = v79 & 0x7F;
        else
          v48 = v78;
        if (v48 == 5)
        {
          if ((v79 & 0x80u) == 0)
            v49 = v79;
          else
            v49 = v78;
          if ((v79 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v49 >= 5)
            v51 = 5;
          else
            v51 = v49;
          v52 = memcmp(p_p, "super", v51) == 0;
          v53 = v49 == 5 && v52;
        }
        else
        {
          v53 = 0;
        }
        if ((v47 & 0x80) != 0)
          operator delete(__p);
        if (!v53)
        {
          v76 = v81[0];
          sub_22EFC683C((uint64_t *)&v76, &__p);
          v54 = v79;
          if ((v79 & 0x80u) == 0)
            v55 = v79 & 0x7F;
          else
            v55 = v78;
          if (v55 == 5)
          {
            if ((v79 & 0x80u) == 0)
              v56 = v79;
            else
              v56 = v78;
            if ((v79 & 0x80u) == 0)
              v57 = &__p;
            else
              v57 = __p;
            if (v56 >= 5)
              v58 = 5;
            else
              v58 = v56;
            v59 = memcmp(v57, "super", v58) == 0;
            v60 = v56 == 5 && v59;
          }
          else
          {
            v60 = 0;
          }
          if ((v54 & 0x80) != 0)
            operator delete(__p);
          if (v60)
          {
            v61 = v81;
          }
          else
          {
            v62 = *(_QWORD *)(*sub_22F339FAC((llvm::StringMapImpl *)(v31[2] + 40), "super", 5uLL) + 8);
            if (!*(_DWORD *)(v62 + 24) || **(_QWORD **)(v62 + 16))
              goto LABEL_105;
            v61 = *(void ****)(*sub_22F339FAC((llvm::StringMapImpl *)(v31[2] + 40), "super", 5uLL) + 8);
          }
          sub_22F3336AC((uint64_t)v88, (uint64_t)v61);
        }
LABEL_105:
        if (v91 > 0x2710
          || v92 > 0x2710
          || v93 > 0x2710
          || (v72 = 100 * v91 + 110 * v92 + 150 * v93, v72 > 0x2710)
          || (unsigned __int16)(v72 + 50) >= 0x64u)
        {
          v76 = v88[0];
          sub_22EFC683C((uint64_t *)&v76, &__p);
          v63 = v79;
          if ((v79 & 0x80u) == 0)
            v64 = v79 & 0x7F;
          else
            v64 = v78;
          if (v64 == 5)
          {
            if ((v79 & 0x80u) == 0)
              v65 = v79;
            else
              v65 = v78;
            if ((v79 & 0x80u) == 0)
              v66 = &__p;
            else
              v66 = __p;
            if (v65 >= 5)
              v67 = 5;
            else
              v67 = v65;
            v68 = memcmp(v66, "super", v67) != 0;
            v69 = v65 != 5 || v68;
          }
          else
          {
            v69 = 1;
          }
          v70 = v29;
          v71 = v30;
          if ((v63 & 0x80) != 0)
          {
            operator delete(__p);
            v71 = v30;
            v70 = v29;
          }
          if (!v69)
          {
            sub_22EC67FFC((uint64_t)v88, v70, v71);
            sub_22F333E34(a9, (uint64_t)v88);
            goto LABEL_47;
          }
        }
        else
        {
          v71 = v30;
        }
        v45 = *(_DWORD *)(v71 + 8);
        goto LABEL_59;
      }
    }
    else
    {
      v32 = v30;
      if (*(_DWORD *)(v80 + 48) == 1)
        goto LABEL_17;
    }
    v33 = **(_DWORD **)(v27 + 16);
    LODWORD(v34) = -1;
    goto LABEL_16;
  }
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_QWORD *)(a9 + 16) = a9 + 32;
  *(_DWORD *)(a9 + 28) = 1;
  *(_QWORD *)(a9 + 40) = 0;
  *(_QWORD *)(a9 + 48) = 0;
  *(_QWORD *)(a9 + 54) = 0;
  *(_QWORD *)(a9 + 72) = 0;
  *(_QWORD *)(a9 + 80) = 0;
  *(_QWORD *)(a9 + 64) = 0;
  return result;
}

uint64_t sub_22EC6B26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, int a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void (**v28)(void);
  void (**v29)(void);
  uint64_t v32;
  uint64_t v33;
  void **v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _BYTE v39[16];
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[22];
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  void *v50[2];
  uint64_t v51;
  _BYTE v52[22];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  sub_22EC699D0((uint64_t)&v33, a1, (uint64_t *)a2, a3, a4, a5, a6, a10, a11, a12, a9 == 1);
  v49 = 0uLL;
  v50[0] = &v51;
  v50[1] = (void *)0x100000000;
  *(_QWORD *)v52 = 0;
  *(_QWORD *)&v52[8] = 0;
  *(_QWORD *)&v52[14] = 0;
  v54 = 0;
  v53 = 0uLL;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v33;
  if (v17 && v33)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 368))(&v43, v17, a2, a3, a4, a5, *(_QWORD *)(v33 + 448), a10, a11, a12);
    v49 = v43;
    sub_22F24C77C((uint64_t)v50, (uint64_t)&v44);
    *(_OWORD *)v52 = *(_OWORD *)v46;
    *(_QWORD *)&v52[14] = *(_QWORD *)&v46[14];
    sub_22EA44D30((void **)&v53);
    v53 = v47;
    v54 = v48;
    v48 = 0;
    v47 = 0uLL;
    v34 = (void **)&v47;
    sub_22E8D19C8(&v34);
    if (v44 != &v45)
      free(v44);
    if ((_QWORD)v49)
    {
      sub_22F330280((uint64_t)v39, (uint64_t)&v49);
      sub_22EC68070(v18, (unint64_t)v39);
      *(_QWORD *)&v43 = &v42;
      sub_22E8D19C8((void ***)&v43);
      if (v40 != &v41)
        free(v40);
    }
  }
  else if (!v33)
  {
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v18 + 32))
  {
    if (*(_DWORD *)(v18 + 48) == 1)
      goto LABEL_16;
    v21 = -1;
    goto LABEL_11;
  }
  v19 = *(_DWORD *)(*(_QWORD *)(v18 + 16) + 32);
  v20 = v19 > 0x2710;
  v21 = (unsigned __int16)(v19 + 50) / 0x64u;
  if (v20)
    v21 = -1;
  if (v21)
  {
LABEL_11:
    if ((_QWORD)v49)
      goto LABEL_22;
    v22 = (*(_QWORD *)a2 & 7) != 0 ? 0 : *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (**(_DWORD **)(v22 + 16) / v21 >= 3)
      goto LABEL_22;
LABEL_16:
    v23 = 0;
    goto LABEL_17;
  }
LABEL_22:
  v25 = (_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 564);
  ++*v25;
  v32 = v18;
  v26 = (_QWORD *)a7[3];
  if (v26)
  {
    if (v26 == a7)
    {
      v38 = v37;
      (*(void (**)(void))(*a7 + 24))();
    }
    else
    {
      v38 = (_QWORD *)a7[3];
      a7[3] = 0;
    }
  }
  else
  {
    v38 = 0;
  }
  v27 = (_QWORD *)a8[3];
  if (v27)
  {
    if (v27 == a8)
    {
      v36 = v35;
      (*(void (**)(void))(*a8 + 24))();
    }
    else
    {
      v36 = (_QWORD *)a8[3];
      a8[3] = 0;
    }
  }
  else
  {
    v36 = 0;
  }
  v23 = sub_22F3387F0(a1, &v32, (uint64_t)v37, (uint64_t)v35, *(_DWORD *)(a2 + 8));
  if (v36 == v35)
  {
    v28 = (void (**)(void))(v35[0] + 32);
  }
  else
  {
    if (!v36)
      goto LABEL_42;
    v28 = (void (**)(void))(*v36 + 40);
  }
  (*v28)();
LABEL_42:
  if (v38 == v37)
  {
    v29 = (void (**)(void))(v37[0] + 32);
    goto LABEL_46;
  }
  if (v38)
  {
    v29 = (void (**)(void))(*v38 + 40);
LABEL_46:
    (*v29)();
  }
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v18 = 0;
LABEL_17:
  *(_QWORD *)&v43 = &v53;
  sub_22E8D19C8((void ***)&v43);
  if (v50[0] != &v51)
    free(v50[0]);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return v23;
}

uint64_t sub_22EC6B6AC(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(unsigned int *)(a2 + 24);
  if (!(_DWORD)v2)
  {
LABEL_26:
    LOBYTE(v14) = 1;
    return v14 & 1;
  }
  v5 = *(uint64_t **)(a2 + 16);
  if (!*v5)
  {
    if (!a1[8] && !a1[9] && !a1[10] && !a1[12])
    {
      LOBYTE(v14) = a1[13] != 0;
      return v14 & 1;
    }
    goto LABEL_26;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 8 * v2;
  do
  {
    v10 = *v5;
    v11 = *(_DWORD *)(*v5 + 28);
    if (*v5)
      v12 = (*(_DWORD *)(*v5 + 28) & 0x7F) == 29;
    else
      v12 = 0;
    if (v12)
    {
      v10 = *(_QWORD *)(v10 + 48);
      v11 = *(_DWORD *)(v10 + 28);
    }
    if ((v11 & 0x7Eu) - 58 >= 0xFFFFFFFC)
    {
      v13 = (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) + 80) & 0xE000) == 0x4000
         || (*(_QWORD *)(v10 + 40) & 7) == 6
         && (*(_DWORD *)(*(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
      v8 |= v13;
      v7 |= !v13;
      v11 = *(_DWORD *)(v10 + 28);
    }
    v6 |= (v11 & 0x7Fu) - 43 < 0xFFFFFFF6;
    ++v5;
    v9 -= 8;
  }
  while (v9);
  if ((a1[15] == 0 || (v7 & 1) == 0) | v8 & 1 || (v14 = *(_QWORD *)(a2 + 8)) != 0)
    LOBYTE(v14) = (a1[8] != 0) | v6;
  return v14 & 1;
}

BOOL sub_22EC6B82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  char v57;

  v4 = sub_22F2E6D78(a2);
  v5 = *(unsigned int *)(a2 + 24);
  if (v4)
  {
    v6 = *(_QWORD **)(a2 + 16);
    if ((_DWORD)v5 && !*v6)
      v7 = &v6[v5];
    else
      v7 = *(uint64_t **)(a2 + 16);
    v9 = &v6[v5];
    if (v7 == v9)
    {
      v36 = 2;
      return (v36 != 2) & v6;
    }
LABEL_9:
    v10 = *v7;
    v11 = *(_DWORD *)(*v7 + 28);
    if ((v11 & 0x7Fu) <= 0x2F && ((1 << (v11 & 0x7F)) & 0xC00000060000) != 0)
    {
      v10 = sub_22EFBAEA4(*v7);
      v11 = *(_DWORD *)(v10 + 28);
    }
    v13 = v11 & 0x7F;
    if (v13 == 29)
      v14 = *(_QWORD *)(v10 + 48);
    else
      v14 = 0;
    v15 = *(unsigned __int8 *)(a1 + 36);
    if (*(_BYTE *)(a1 + 36) || v14)
    {
LABEL_35:
      v20 = v13 - 33;
      if (v15)
      {
        if (v20 < 0xFFFFFFF9)
          goto LABEL_85;
        if (v13 > 0x20 || ((1 << v13) & 0x150000000) == 0)
          goto LABEL_85;
      }
      else if (v20 > 9)
      {
        goto LABEL_85;
      }
      v22 = *(_QWORD *)(a1 + 40);
      v23 = *(_WORD *)(v22 + 8) & 0x7F;
      v24 = -40;
      if (v23 > 0x46)
      {
        if (v23 == 83)
          goto LABEL_60;
        if (v23 == 71)
        {
          v24 = -56;
          goto LABEL_60;
        }
        if (v23 != 81)
        {
LABEL_55:
          if (v23 - 52 < 6)
          {
            v24 = -72;
          }
          else if (v23 - 33 >= 5)
          {
            v24 = -48;
          }
          else
          {
            v24 = -64;
          }
        }
      }
      else
      {
        if (v23 > 0x18)
          goto LABEL_54;
        if (v23 == 16)
        {
LABEL_47:
          v24 = -48;
          goto LABEL_60;
        }
        if (((1 << v23) & 0x1066) == 0)
        {
          if (v23 == 24)
            goto LABEL_47;
LABEL_54:
          if (v23 == 70)
          {
            v24 = -64;
            goto LABEL_60;
          }
          goto LABEL_55;
        }
      }
LABEL_60:
      v25 = v22 + v24;
      if ((*(_DWORD *)(v25 + 28) & 0x7F) == 0x53)
        goto LABEL_84;
      while (1)
      {
        v26 = *(_QWORD *)(v25 + 16);
        v27 = v26 & 0xFFFFFFFFFFFFFFF8;
        if ((v26 & 4) != 0)
          v27 = *(_QWORD *)v27;
        v28 = *(_WORD *)(v27 + 8) & 0x7F;
        if (v28 == 83)
        {
          v25 = v27 - 40;
LABEL_84:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 88) + 2000) + 1) & 1) != 0)
          {
            v56 = v13 - 35 < 3;
            if (v15)
              v57 = 1;
            else
              v57 = v56;
            v36 = 1;
            if (*(_DWORD *)(a1 + 32) >= 2u)
              LOBYTE(v6) = v57;
            else
              LOBYTE(v6) = 1;
            return (v36 != 2) & v6;
          }
LABEL_85:
          if (!v14)
            goto LABEL_159;
          v33 = *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0);
          v34 = v33 && *(_BYTE *)(v33 + 16) == 26;
          if (v34
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v33 = sub_22F10CF48(v33)) != 0)
          {
            v35 = (unsigned __int16)(*(_QWORD *)(v33 + 16) >> 38);
          }
          else
          {
            v35 = 0;
          }
          if (v35 < *(_DWORD *)(a1 + 32) || sub_22EFC0EB8(v14) > *(_DWORD *)(a1 + 32))
            goto LABEL_159;
          if ((*(_DWORD *)(v14 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
            goto LABEL_95;
          v37 = *(_QWORD *)(a1 + 48);
          if (!v37)
          {
            if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14) + 80) & 0xE000) != 0x4000
              && ((*(_QWORD *)(v14 + 40) & 7) != 6
               || (*(_DWORD *)(*(_QWORD *)(v14 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
            {
              v37 = *(_QWORD *)(a1 + 48);
              if (v37)
                goto LABEL_97;
              v41 = *(_QWORD *)(a1 + 40);
              if (v41 && (*(_WORD *)(v41 + 8) & 0x7Eu) - 54 <= 3)
              {
                v38 = v41 - 72;
                goto LABEL_99;
              }
LABEL_110:
              v42 = 0;
              goto LABEL_130;
            }
LABEL_95:
            v36 = 0;
            goto LABEL_156;
          }
LABEL_97:
          v38 = *(_QWORD *)(v37 + 24);
          if (!v38 || (*(_DWORD *)(v38 + 28) & 0x7Eu) - 54 >= 4)
            goto LABEL_110;
LABEL_99:
          v39 = *(_WORD *)(v38 + 80) & 0x7F;
          v40 = -40;
          if (v39 > 0x46)
          {
            if (v39 != 83)
            {
              if (v39 == 71)
              {
                v40 = -56;
              }
              else if (v39 != 81)
              {
LABEL_118:
                v43 = v39 - 52;
                if (v39 - 33 >= 5)
                  v44 = -48;
                else
                  v44 = -64;
                v32 = v43 >= 6;
                v40 = -72;
                if (v32)
                  v40 = v44;
              }
            }
          }
          else
          {
            if (v39 > 0x18)
              goto LABEL_117;
            if (v39 == 16)
              goto LABEL_102;
            if (((1 << v39) & 0x1066) == 0)
            {
              if (v39 == 24)
              {
LABEL_102:
                v40 = -48;
              }
              else
              {
LABEL_117:
                if (v39 != 70)
                  goto LABEL_118;
                v40 = -64;
              }
            }
          }
          v45 = *(_QWORD *)(v38 + 72 + v40 + 16);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
          if ((v45 & 4) != 0)
            v46 = (_QWORD *)*v46;
          if (v46)
            v47 = v46 - 8;
          else
            v47 = 0;
          v42 = (*(uint64_t (**)(_QWORD *))(*v47 + 32))(v47);
LABEL_130:
          v48 = *(_WORD *)(v14 + 80) & 0x7F;
          v49 = -40;
          if (v48 > 0x46)
          {
            if (v48 != 83)
            {
              if (v48 == 71)
              {
                v49 = -56;
              }
              else if (v48 != 81)
              {
LABEL_141:
                v50 = v48 - 52;
                if (v48 - 33 >= 5)
                  v51 = -48;
                else
                  v51 = -64;
                v32 = v50 >= 6;
                v49 = -72;
                if (v32)
                  v49 = v51;
              }
            }
          }
          else
          {
            if (v48 > 0x18)
              goto LABEL_140;
            if (v48 == 16)
              goto LABEL_133;
            if (((1 << v48) & 0x1066) == 0)
            {
              if (v48 == 24)
              {
LABEL_133:
                v49 = -48;
              }
              else
              {
LABEL_140:
                if (v48 != 70)
                  goto LABEL_141;
                v49 = -64;
              }
            }
          }
          v52 = *(_QWORD *)(v14 + 72 + v49 + 16);
          v53 = (_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8);
          if ((v52 & 4) != 0)
            v53 = (_QWORD *)*v53;
          if (v53)
            v54 = v53 - 8;
          else
            v54 = 0;
          v55 = (*(uint64_t (**)(_QWORD *))(*v54 + 32))(v54);
          if (v42 && (v42 == v55 || (sub_22EFB35BC(v42, v55) & 1) != 0))
            goto LABEL_95;
          v36 = 3;
LABEL_156:
          if (v36 <= 1)
            v36 = 1;
          if (v36 != 3)
            goto LABEL_179;
LABEL_159:
          if (++v7 == v9)
          {
            LOBYTE(v6) = 1;
            v36 = 2;
            return (v36 != 2) & v6;
          }
          goto LABEL_9;
        }
        v29 = -40;
        if ((*(_WORD *)(v27 + 8) & 0x7Fu) > 0x46)
        {
          if (v28 == 71)
          {
            v29 = -56;
            goto LABEL_80;
          }
          if (v28 != 81)
            goto LABEL_74;
        }
        else
        {
          if (v28 > 0x18)
            goto LABEL_73;
          if (v28 == 16)
            goto LABEL_67;
          if (((1 << v28) & 0x1066) == 0)
          {
            if (v28 == 24)
            {
LABEL_67:
              v29 = -48;
              goto LABEL_80;
            }
LABEL_73:
            if (v28 == 70)
            {
              v29 = -64;
              goto LABEL_80;
            }
LABEL_74:
            v30 = v28 - 52;
            if (v28 - 33 >= 5)
              v31 = -48;
            else
              v31 = -64;
            v32 = v30 >= 6;
            v29 = -72;
            if (v32)
              v29 = v31;
          }
        }
LABEL_80:
        v25 = v27 + v29;
      }
    }
    v14 = v10;
    if ((v11 & 0x7Eu) - 58 > 0xFFFFFFF9)
    {
LABEL_34:
      v15 = *(unsigned __int8 *)(a1 + 36);
      v13 = *(_DWORD *)(v10 + 28) & 0x7F;
      goto LABEL_35;
    }
    if (v13 - 48 > 0x1A)
      goto LABEL_33;
    v16 = *(_QWORD *)(v10 + 48);
    if (v16 < 0x10)
      goto LABEL_159;
    v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v18 == 32 || v18 == 39 || (v18 & 0xFE) == 0x28)
      v17 = *(_QWORD *)(sub_22F10ACF8(v17) & 0xFFFFFFFFFFFFFFF0);
    v19 = v17 && *(_BYTE *)(v17 + 16) == 26;
    if (!v19
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
       || (v17 = sub_22F10CF48(v17)) == 0)
      || *(_DWORD *)(a1 + 32) != (unsigned __int16)(*(_QWORD *)(v17 + 16) >> 38))
    {
LABEL_33:
      v14 = 0;
      goto LABEL_34;
    }
    v36 = 1;
LABEL_179:
    LOBYTE(v6) = 1;
    return (v36 != 2) & v6;
  }
  else
  {
    return (_DWORD)v5 && **(_QWORD **)(a2 + 16) == 0;
  }
}

void sub_22EC6BEF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 88) + 2128;
  v5 = 0;
  v6 = v4;
  v7 = 6001;
  sub_22EC6BF44(a1, a2, a3, (uint64_t)&v5, a4);
  if (v5)
  {
    if (v6)
      sub_22E3BB10C(v6, v5);
  }
}

void sub_22EC6BF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  void **v14;
  std::string::size_type v15;
  std::string::size_type v16;
  void *p_dst;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33[24];
  std::string v34[2];
  uint64_t v35;
  std::string __dst;
  _DWORD v37[3];
  __int16 v38;
  std::string::value_type v39;
  __int128 v40;
  std::string::size_type v41;
  void *v42[2];
  char v43;

  sub_22EC6887C((uint64_t *)a2, *(unsigned int **)(a1 + 72), (uint64_t)v42);
  sub_22EC6887C((uint64_t *)a2, *(unsigned int **)(a1 + 72), (uint64_t)v34);
  v10 = std::string::insert(v34, 0, "'");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&__dst, "'");
  v13 = v12->__r_.__value_.__r.__words[2];
  v40 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v41 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34[0].__r_.__value_.__l.__data_);
  if (v43 >= 0)
    v14 = v42;
  else
    v14 = (void **)v42[0];
  if (v43 >= 0)
    v15 = v43 & 0x7F;
  else
    v15 = (std::string::size_type)v42[1];
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v16 = *(_QWORD *)(a2 + 52);
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = *(_QWORD *)(a2 + 52);
    v20 = a4;
    v21 = a5;
    v22 = v18 + 1;
    p_dst = operator new(v18 + 1);
    v23 = v22 | 0x8000000000000000;
    a5 = v21;
    a4 = v20;
    v16 = v19;
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v23;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_18;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
  p_dst = &__dst;
  if (v15)
LABEL_18:
    memmove(p_dst, v14, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v24 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v37[0] = __dst.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
  v25 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (*(_BYTE *)(a2 + 61))
  {
    if (*(_DWORD *)(a2 + 24))
      v29 = **(_QWORD **)(a2 + 16);
    else
      v29 = 0;
    sub_22F338924(a1, *(_DWORD *)(a2 + 52), v29, 0, a5);
    if (v25 < 0)
LABEL_46:
      operator delete((void *)v24);
  }
  else
  {
    sub_22E90379C((_QWORD *)a1, *(_DWORD *)(a2 + 52), a3, 0, (uint64_t)&__dst);
    v26 = sub_22E90749C((uint64_t)&__dst, &v40);
    if (a5)
    {
      v34[0].__r_.__value_.__r.__words[0] = v16;
      v34[0].__r_.__value_.__s.__data_[8] = 1;
      *(_WORD *)((char *)&v34[0].__r_.__value_.__r.__words[1] + 1) = v38;
      v34[0].__r_.__value_.__s.__data_[11] = v39;
      *(std::string::size_type *)((char *)&v34[0].__r_.__value_.__r.__words[1] + 4) = 0;
      v34[0].__r_.__value_.__s.__data_[20] = 0;
      if (v25 < 0)
      {
        sub_22E3BB2B4(&v34[1], (void *)v24, *((unint64_t *)&v24 + 1));
      }
      else
      {
        *(_OWORD *)&v34[1].__r_.__value_.__l.__data_ = v24;
        LODWORD(v34[1].__r_.__value_.__r.__words[2]) = v37[0];
        *(_DWORD *)((char *)&v34[1].__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v37 + 3);
        *((_BYTE *)&v34[1].__r_.__value_.__s + 23) = v25;
      }
      LOBYTE(v35) = 0;
    }
    else
    {
      v35 = 0;
      memset(v34, 0, sizeof(v34));
    }
    sub_22E890748(v26, v34);
    if (SHIBYTE(v34[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34[1].__r_.__value_.__l.__data_);
    sub_22E903BEC((unsigned int *)&__dst);
    if (*(_DWORD *)(a2 + 24))
    {
      v27 = **(_QWORD **)(a2 + 16);
      if (v27)
      {
        if (*(_DWORD *)(a4 + 16))
        {
          sub_22E90379C((_QWORD *)a1, *(_DWORD *)(v27 + 24), a4, 0, (uint64_t)&__dst);
          v28 = sub_22E90749C((uint64_t)&__dst, &v40);
          if (a5)
          {
            v35 = 0;
            memset(v34, 0, sizeof(v34));
          }
          else
          {
            v34[0].__r_.__value_.__r.__words[0] = v16;
            v34[0].__r_.__value_.__s.__data_[8] = 1;
            *(_WORD *)((char *)&v34[0].__r_.__value_.__r.__words[1] + 1) = v38;
            v34[0].__r_.__value_.__s.__data_[11] = v39;
            *(std::string::size_type *)((char *)&v34[0].__r_.__value_.__r.__words[1] + 4) = 0;
            v34[0].__r_.__value_.__s.__data_[20] = 0;
            if (v25 < 0)
            {
              sub_22E3BB2B4(&v34[1], (void *)v24, *((unint64_t *)&v24 + 1));
            }
            else
            {
              *(_OWORD *)&v34[1].__r_.__value_.__l.__data_ = v24;
              LODWORD(v34[1].__r_.__value_.__r.__words[2]) = v37[0];
              *(_DWORD *)((char *)&v34[1].__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v37 + 3);
              *((_BYTE *)&v34[1].__r_.__value_.__s + 23) = v25;
            }
            LOBYTE(v35) = 0;
          }
          sub_22E890748(v28, v34);
          if (SHIBYTE(v34[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34[1].__r_.__value_.__l.__data_);
          sub_22E903BEC((unsigned int *)&__dst);
        }
      }
    }
    v30 = *(_QWORD *)(a2 + 64);
    v31 = *(_QWORD *)(a2 + 72) - v30;
    if (v31)
    {
      v32 = 24 * (v31 / 24);
      do
      {
        sub_22E90379C((_QWORD *)a1, *(_DWORD *)(a2 + 52), v30, 0, (uint64_t)v33);
        sub_22E903BEC(v33);
        v30 += 24;
        v32 -= 24;
      }
      while (v32);
    }
    if (v25 < 0)
      goto LABEL_46;
  }
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v43 < 0)
    operator delete(v42[0]);
}

unint64_t sub_22EC6C350(unint64_t a1)
{
  int v2;
  int v3;
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  while (1)
  {
    v2 = *(_DWORD *)(a1 + 28);
    v3 = v2 & 0x7F;
    if (a1)
    {
      if ((v3 - 67) >= 0xFFFFFFF9)
        break;
    }
    if (a1 && (v2 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v17 = 0;
      if (sub_22EFBF86C(a1, &v17, 0))
        return v17;
      else
        return 0;
    }
    if (a1 && (v3 - 38) >= 0xFFFFFFFB)
      return sub_22EFC3500(a1);
    if (a1 && v3 == 22)
    {
      v16 = *(_QWORD *)(a1 + 120);
      if (!v16)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
        v16 = *(_QWORD *)(a1 + 120);
      }
LABEL_58:
      if (v16 >= 8)
        return *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
      return 0;
    }
    if (a1 && v3 == 23)
    {
      v16 = *(_QWORD *)(a1 + 104);
      if (!v16)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
        v16 = *(_QWORD *)(a1 + 104);
      }
      goto LABEL_58;
    }
    result = 0;
    if (!a1 || (v3 - 33) < 0xFFFFFFF9)
      return result;
    a1 = *(_QWORD *)(a1 + 48);
    if (!a1)
      return 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
  {
    v8 = -40;
    if (i > 70)
    {
      if (i == 71)
      {
        v8 = -56;
      }
      else if (i != 81)
      {
        goto LABEL_28;
      }
    }
    else
    {
      if (i > 0x18)
        goto LABEL_27;
      if (i == 16)
        goto LABEL_21;
      if (((1 << i) & 0x1066) != 0)
        goto LABEL_34;
      if (i == 24)
      {
LABEL_21:
        v8 = -48;
      }
      else
      {
LABEL_27:
        if (i != 70)
        {
LABEL_28:
          v9 = i - 52;
          if ((i - 33) >= 5)
            v10 = -48;
          else
            v10 = -64;
          if (v9 >= 6)
            v8 = v10;
          else
            v8 = -72;
          goto LABEL_34;
        }
        v8 = -64;
      }
    }
LABEL_34:
    v11 = *(_QWORD *)(v6 + v8 + 16);
    v6 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v6 = *(_QWORD *)v6;
  }
  v12 = *(_QWORD *)(a1 + 80);
  if (!v12)
    return 0;
  v13 = 0;
  v14 = *(_QWORD *)(v6 + 48);
  v15 = v12;
  while (sub_22EFBBF74(v15, v14) != 2)
  {
    if ((*(_BYTE *)(v15 + 72) & 3) != 0)
    {
      if (v13)
        return 0;
      v13 = 1;
    }
    v15 = sub_22E3CD31C((uint64_t *)(v15 + 72), v15);
    result = 0;
    if (v15 == v12 || !v15)
      return result;
  }
  return v15;
}

void sub_22EC6C5C8(uint64_t a1, unsigned int a2, uint64_t a3, int a4, std::string::size_type *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v13;
  std::string::size_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void **v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  std::string::value_type v54;
  void *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  int v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  std::string v65;
  BOOL v66;
  void *__p[2];
  char v68;
  char v69;
  int v70[4];
  uint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  uint64_t **v76;
  uint64_t v77;
  _QWORD v78[10];

  v78[8] = *MEMORY[0x24BDAC8D0];
  v64 = a3;
  v77 = 0x800000000;
  v71 = 1;
  v76 = (uint64_t **)v78;
  v72 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v73 = v72;
  v74 = v72;
  v75 = v72;
  if (a6)
  {
    v13 = 8 * a6;
    v14 = a5;
    do
    {
      v15 = *v14;
      v65.__r_.__value_.__r.__words[0] = v15;
      if (*(_DWORD *)(v15 + 28) != 5)
      {
        sub_22F33A3F0((uint64_t)__p, (uint64_t)&v71, (uint64_t *)&v65);
        if (v68)
        {
          v16 = v77;
          if (v77 >= (unint64_t)HIDWORD(v77))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v77;
          }
          v76[v16] = (uint64_t *)v15;
          LODWORD(v77) = v77 + 1;
        }
      }
      ++v14;
      v13 -= 8;
    }
    while (v13);
  }
  v59 = (uint64_t **)a5;
  v61 = a8;
  v62 = 0;
  v63 = 0uLL;
  v17 = a2;
  v18 = sub_22F1653F8(*(_QWORD **)(a1 + 80), a2, a4);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)(a1 + 112);
    v21 = a2 & 0x7FFFFFFF;
    v22 = *(_DWORD *)(v20 + 304);
    v23 = v22 + 1;
    if (v22 + 1 > 1)
    {
      if ((v22 & 0x80000000) != 0)
      {
        v25 = -2 - v22;
        v24 = (_DWORD *)(((*(_QWORD *)(*(_QWORD *)(v20 + 224) + 8 * ((-2 - v22) >> 6)) >> (-2 - v22)) & 1) != 0
                       ? *(_QWORD *)(v20 + 200) + 24 * v25
                       : sub_22F1E1134(*(_QWORD *)(a1 + 112), v25, 0));
      }
      else
      {
        v24 = (_DWORD *)(*(_QWORD *)(v20 + 184) + 24 * v22);
      }
    }
    else
    {
      v24 = *(_DWORD **)(v20 + 184);
    }
    if ((*v24 & 0x7FFFFFFFu) > v21)
      goto LABEL_18;
    if (v22 == -2
      || (v23 != *(_DWORD *)(v20 + 192)
        ? ((v23 & 0x80000000) != 0
         ? ((v29 = -3 - v22,
             ((*(_QWORD *)(*(_QWORD *)(v20 + 224) + 8 * ((-3 - v22) >> 6)) >> (-3 - v22)) & 1) == 0)
          ? (v28 = (_DWORD *)sub_22F1E1134(v20, v29, 0))
          : (v28 = (_DWORD *)(*(_QWORD *)(v20 + 200) + 24 * v29)))
         : (v28 = (_DWORD *)(*(_QWORD *)(v20 + 184) + 24 * v23)),
           v27 = *v28 & 0x7FFFFFFF)
        : (v27 = *(_DWORD *)(v20 + 216)),
          v27 > v21))
    {
      v26 = *(_DWORD *)(v20 + 304);
    }
    else
    {
LABEL_18:
      v26 = sub_22F1E1EE8(v20, v21);
    }
    v30 = sub_22E6155EC((_QWORD *)v20, v26);
    if (v30)
    {
      v47 = *(_QWORD *)(a1 + 80);
      v48 = *(_BYTE *)(v30 + 23);
      v49 = v48 < 0;
      if (v48 >= 0)
        v50 = v30;
      else
        v50 = *(_QWORD *)v30;
      v51 = v48 & 0x7F;
      if (v49)
        v52 = *(_QWORD *)(v30 + 8);
      else
        v52 = v51;
      v66 = 0;
      sub_22F410194(*(_QWORD *)(v47 + 104), v19, v50, v52, &v66);
      if (v66)
        v53 = 60;
      else
        v53 = 34;
      sub_22E74ABDC(v53, (const void **)__p, (uint64_t)&v65);
      if (v66)
        v54 = 62;
      else
        v54 = 34;
      std::string::push_back(&v65, v54);
      *(_QWORD *)v70 = v65.__r_.__value_.__l.__size_;
      v55 = (void *)v65.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)&v70[1] + 3) = *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 7);
      v56 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
      if (v69 < 0)
        operator delete(__p[0]);
      *(_QWORD *)((char *)&v63 + 7) = *(_QWORD *)((char *)&v70[1] + 3);
      v62 = v55;
      *(_QWORD *)&v63 = *(_QWORD *)v70;
      HIBYTE(v63) = v56;
      v38 = v56 >= 0 ? v56 & 0x7F : *(_QWORD *)v70;
      if (v38)
        goto LABEL_46;
    }
  }
  v31 = v77;
  if (!(_DWORD)v77)
  {
    v38 = 0;
LABEL_46:
    sub_22E8FCA40((_QWORD *)a1, v17, 0xF71u, 0, (uint64_t)__p);
    LODWORD(v65.__r_.__value_.__l.__data_) = a7;
    v39 = sub_22E8900C4((uint64_t)__p, (int *)&v65);
    v40 = sub_22E890024(v39, &v64);
    LOBYTE(v70[0]) = v38 != 0;
    v41 = sub_22E894E38(v40, (unsigned __int8 *)v70);
    sub_22E90749C(v41, &v62);
    sub_22E903BEC((unsigned int *)__p);
    sub_22E8FCA40((_QWORD *)a1, a4, 0x1804u, 0, (uint64_t)__p);
    LODWORD(v65.__r_.__value_.__l.__data_) = a7;
    sub_22E8900C4((uint64_t)__p, (int *)&v65);
    sub_22E903BEC((unsigned int *)__p);
    if (!v61)
      goto LABEL_53;
    v42 = *v59;
    goto LABEL_83;
  }
  v32 = v76;
  if ((_DWORD)v77 == 1)
  {
    sub_22E8FCA40((_QWORD *)a1, v17, 0xF70u, 0, (uint64_t)__p);
    v43 = a7;
    v70[0] = a7;
    v57 = sub_22E8900C4((uint64_t)__p, v70);
    v58 = sub_22E890024(v57, &v64);
    sub_22F1D8A24(*v32, 0, &v65);
    sub_22F2F3734(v58, (void **)&v65.__r_.__value_.__l.__data_);
    v46 = v61;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    sub_22E903BEC((unsigned int *)__p);
  }
  else
  {
    v33 = 0;
    memset(&v65, 0, sizeof(v65));
    v34 = 8 * v77;
    while (1)
    {
      v35 = v32[v33];
      std::string::append(&v65, "\n        ");
      if (v31 != 5 && (_DWORD)v33 == 4)
        break;
      sub_22F1D8A24(v35, 0, __p);
      if (v69 >= 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      if (v69 >= 0)
        v37 = v69 & 0x7F;
      else
        v37 = (std::string::size_type)__p[1];
      std::string::append(&v65, (const std::string::value_type *)v36, v37);
      if (v69 < 0)
        operator delete(__p[0]);
      ++v33;
      v34 -= 8;
      if (!v34)
        goto LABEL_49;
    }
    std::string::append(&v65, "[...]");
LABEL_49:
    sub_22E8FCA40((_QWORD *)a1, v17, 0xF72u, 0, (uint64_t)__p);
    v43 = a7;
    v70[0] = a7;
    v44 = sub_22E8900C4((uint64_t)__p, v70);
    v45 = sub_22E890024(v44, &v64);
    sub_22E90749C(v45, &v65);
    sub_22E903BEC((unsigned int *)__p);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    v46 = v61;
  }
  sub_22E8FCA40((_QWORD *)a1, a4, 0x1804u, 0, (uint64_t)__p);
  LODWORD(v65.__r_.__value_.__l.__data_) = v43;
  sub_22E8900C4((uint64_t)__p, (int *)&v65);
  sub_22E903BEC((unsigned int *)__p);
  if (v46)
  {
    v42 = *v32;
LABEL_83:
    sub_22F33AE78(a1, v17, (unint64_t)v42);
  }
LABEL_53:
  if (SHIBYTE(v63) < 0)
    operator delete(v62);
  if ((v71 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v72.i64[0], (void *)(8 * v72.u32[2]));
  if (v76 != v78)
    free(v76);
}

uint64_t sub_22EC6CBD0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 240);
  if (v2 != (void *)(a1 + 256))
    free(v2);
  v3 = *(void **)(a1 + 176);
  if (v3 != *(void **)(a1 + 168))
    free(v3);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(16 * *(unsigned int *)(a1 + 48)));
  sub_22E687D9C((uint64_t *)(a1 + 8));
  return a1;
}

void sub_22EC6CC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  const char *v8;
  size_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  llvm *v13;
  int v14;
  unint64_t v15;
  llvm *v16;
  int v17;
  unint64_t v18;
  llvm *v19;
  int v20;
  unint64_t v21;
  llvm *v22;
  int v23;
  unint64_t v24;
  llvm *v25;
  int v26;
  unint64_t v27;
  llvm *v28;
  int v29;
  unint64_t v30;
  llvm *v31;
  int v32;
  unint64_t v33;
  llvm *v34;
  int v35;
  unint64_t v36;
  llvm *v37;
  int v38;
  unint64_t v39;
  llvm *v40;
  int v41;
  unint64_t v42;
  llvm *v43;
  int v44;
  unint64_t v45;
  llvm *v46;
  unint64_t v47;
  llvm *v48;
  int v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _BYTE *v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  __int128 *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  __int128 v107;
  int v108;
  unint64_t v109;
  llvm *v110;
  unint64_t v111;
  llvm *v112;
  unint64_t v113;
  llvm *v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  llvm *v118;
  unint64_t v119;
  llvm *v120;
  unint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t i;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  llvm *v135;
  unint64_t v136;
  llvm *v137;
  unint64_t v138;
  llvm *v139;
  unint64_t v140;
  llvm *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  llvm *v150;
  unint64_t v151;
  llvm *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  llvm *v163;
  unint64_t v164;
  llvm *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  llvm *v175;
  unint64_t v176;
  llvm *v177;
  uint64_t v178;
  unint64_t v179;
  llvm *v180;
  unint64_t v181;
  llvm *v182;
  uint64_t v183;
  unint64_t v184;
  llvm *v185;
  unint64_t v186;
  llvm *v187;
  unint64_t v188;
  llvm *v189;
  unint64_t v190;
  llvm *v191;
  unint64_t v192;
  llvm *v193;
  unint64_t v194;
  llvm *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  llvm *v201;
  unint64_t v202;
  llvm *v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  unint64_t v214;
  llvm *v215;
  int v216;
  void *__src;
  uint64_t v218;
  _BYTE v219[32];
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)(a1 + 88);
  v216 = 1;
  v6 = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v109 = *(_QWORD *)(a1 + 80);
      v110 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v109 + 544), "cl_khr_int64_base_atomics", 0x19uLL);
      if (!sub_22F2EE534(v109, v110))
        goto LABEL_418;
      v111 = *(_QWORD *)(a1 + 80);
      v112 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v111 + 544), "cl_khr_int64_extended_atomics", 0x1DuLL);
      if (!sub_22F2EE534(v111, v112))
        goto LABEL_418;
      v113 = *(_QWORD *)(a1 + 80);
      v114 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v113 + 544), "cl_khr_fp64", 0xBuLL);
      if (!sub_22F2EE534(v113, v114))
        goto LABEL_418;
      v115 = v5[2071];
      goto LABEL_281;
    case 1:
      v8 = "atomic_flag";
      v9 = 11;
      goto LABEL_79;
    case 2:
      v115 = v5[2070];
      goto LABEL_281;
    case 3:
      v115 = v5[2099];
      goto LABEL_281;
    case 4:
      v115 = v5[2060];
      goto LABEL_281;
    case 5:
      v116 = *(_DWORD *)(v5[1886] + *(_QWORD *)(*(_QWORD *)v5[1886] - 24) + 124);
      goto LABEL_276;
    case 6:
      v117 = *(_QWORD *)(a1 + 80);
      v118 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v117 + 544), "cl_khr_int64_base_atomics", 0x19uLL);
      if (!sub_22F2EE534(v117, v118))
        goto LABEL_418;
      v119 = *(_QWORD *)(a1 + 80);
      v120 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v119 + 544), "cl_khr_int64_extended_atomics", 0x1DuLL);
      if (!sub_22F2EE534(v119, v120))
        goto LABEL_418;
      v115 = v5[2061];
      goto LABEL_281;
    case 7:
      v116 = *(_DWORD *)(v5[1886] + *(_QWORD *)(*(_QWORD *)v5[1886] - 24) + 120);
LABEL_276:
      v121 = sub_22EF5B0AC((uint64_t)v5, v116);
      goto LABEL_280;
    case 8:
      v121 = sub_22EF67C8C((uint64_t)v5);
      goto LABEL_280;
    case 9:
      v115 = v5[2066];
      goto LABEL_281;
    case 0xA:
      v121 = sub_22F36D7FC((uint64_t)v5);
LABEL_280:
      v115 = v121;
      goto LABEL_281;
    case 0xB:
      v134 = *(_QWORD *)(a1 + 80);
      v135 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v134 + 544), "cl_khr_int64_base_atomics", 0x19uLL);
      if (!sub_22F2EE534(v134, v135))
        goto LABEL_418;
      v136 = *(_QWORD *)(a1 + 80);
      v137 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v136 + 544), "cl_khr_int64_extended_atomics", 0x1DuLL);
      if (!sub_22F2EE534(v136, v137))
        goto LABEL_418;
      v115 = v5[2067];
LABEL_281:
      v51 = sub_22F36A8C0((uint64_t)v5, v115);
      goto LABEL_282;
    case 0xC:
      v10 = v5[2050];
      goto LABEL_283;
    case 0xD:
      v10 = v5[2051];
      goto LABEL_283;
    case 0xE:
      v10 = v5[2153];
      goto LABEL_283;
    case 0xF:
      v8 = "clk_profiling_info";
      goto LABEL_74;
    case 0x10:
      v138 = *(_QWORD *)(a1 + 80);
      v139 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v138 + 544), "cl_khr_fp64", 0xBuLL);
      if (!sub_22F2EE534(v138, v139))
        goto LABEL_418;
      v10 = v5[2071];
      goto LABEL_283;
    case 0x11:
      v10 = v5[2152];
      goto LABEL_283;
    case 0x12:
      v10 = v5[2070];
      goto LABEL_283;
    case 0x13:
      v140 = *(_QWORD *)(a1 + 80);
      v141 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v140 + 544), "cl_khr_fp16", 0xBuLL);
      if (!sub_22F2EE534(v140, v141))
        goto LABEL_418;
      v10 = v5[2099];
      goto LABEL_283;
    case 0x14:
      v11 = *(unsigned __int8 *)(a2 + 9);
      if (v11 == 1)
      {
        v10 = v5[2115];
        goto LABEL_283;
      }
      if (v11 == 2)
      {
        v10 = v5[2127];
        goto LABEL_283;
      }
      if (v11 != 3)
        goto LABEL_293;
      v12 = *(_QWORD *)(a1 + 80);
      v13 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v12 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v12, v13))
      {
        v10 = v5[2139];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x15:
      v14 = *(unsigned __int8 *)(a2 + 9);
      if (v14 == 1)
      {
        v10 = v5[2116];
        goto LABEL_283;
      }
      if (v14 == 2)
      {
        v10 = v5[2128];
        goto LABEL_283;
      }
      if (v14 != 3)
        goto LABEL_293;
      v15 = *(_QWORD *)(a1 + 80);
      v16 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v15 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v15, v16))
      {
        v10 = v5[2140];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x16:
      v17 = *(unsigned __int8 *)(a2 + 9);
      if (v17 == 1)
      {
        v10 = v5[2117];
        goto LABEL_283;
      }
      if (v17 == 2)
      {
        v10 = v5[2129];
        goto LABEL_283;
      }
      if (v17 != 3)
        goto LABEL_293;
      v18 = *(_QWORD *)(a1 + 80);
      v19 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v18 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v18, v19))
      {
        v10 = v5[2141];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x17:
      v20 = *(unsigned __int8 *)(a2 + 9);
      if (v20 == 1)
      {
        v10 = v5[2118];
        goto LABEL_283;
      }
      if (v20 == 2)
      {
        v10 = v5[2130];
        goto LABEL_283;
      }
      if (v20 != 3)
        goto LABEL_293;
      v21 = *(_QWORD *)(a1 + 80);
      v22 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v21 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v21, v22))
      {
        v10 = v5[2142];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x18:
      v23 = *(unsigned __int8 *)(a2 + 9);
      if (v23 == 1)
      {
        v10 = v5[2119];
        goto LABEL_283;
      }
      if (v23 == 2)
      {
        v10 = v5[2131];
        goto LABEL_283;
      }
      if (v23 != 3)
        goto LABEL_293;
      v24 = *(_QWORD *)(a1 + 80);
      v25 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v24 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v24, v25))
      {
        v10 = v5[2143];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x19:
      v26 = *(unsigned __int8 *)(a2 + 9);
      if (v26 == 1)
      {
        v10 = v5[2121];
        goto LABEL_283;
      }
      if (v26 == 2)
      {
        v10 = v5[2133];
        goto LABEL_283;
      }
      if (v26 != 3)
        goto LABEL_293;
      v27 = *(_QWORD *)(a1 + 80);
      v28 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v27 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v27, v28))
      {
        v10 = v5[2145];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x1A:
      v29 = *(unsigned __int8 *)(a2 + 9);
      if (v29 == 1)
      {
        v10 = v5[2123];
        goto LABEL_283;
      }
      if (v29 == 2)
      {
        v10 = v5[2135];
        goto LABEL_283;
      }
      if (v29 != 3)
        goto LABEL_293;
      v30 = *(_QWORD *)(a1 + 80);
      v31 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v30 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v30, v31))
      {
        v10 = v5[2147];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x1B:
      v32 = *(unsigned __int8 *)(a2 + 9);
      if (v32 == 1)
      {
        v10 = v5[2125];
        goto LABEL_283;
      }
      if (v32 == 2)
      {
        v10 = v5[2137];
        goto LABEL_283;
      }
      if (v32 != 3)
        goto LABEL_293;
      v33 = *(_QWORD *)(a1 + 80);
      v34 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v33 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v33, v34))
      {
        v10 = v5[2149];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x1C:
      v35 = *(unsigned __int8 *)(a2 + 9);
      if (v35 == 1)
      {
        v10 = v5[2120];
        goto LABEL_283;
      }
      if (v35 == 2)
      {
        v10 = v5[2132];
        goto LABEL_283;
      }
      if (v35 != 3)
        goto LABEL_293;
      v36 = *(_QWORD *)(a1 + 80);
      v37 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v36 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v36, v37))
      {
        v10 = v5[2144];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x1D:
      v38 = *(unsigned __int8 *)(a2 + 9);
      if (v38 == 1)
      {
        v10 = v5[2122];
        goto LABEL_283;
      }
      if (v38 == 2)
      {
        v10 = v5[2134];
        goto LABEL_283;
      }
      if (v38 != 3)
        goto LABEL_293;
      v39 = *(_QWORD *)(a1 + 80);
      v40 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v39 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v39, v40))
      {
        v10 = v5[2146];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x1E:
      v41 = *(unsigned __int8 *)(a2 + 9);
      if (v41 == 1)
      {
        v10 = v5[2124];
        goto LABEL_283;
      }
      if (v41 == 2)
      {
        v10 = v5[2136];
        goto LABEL_283;
      }
      if (v41 != 3)
        goto LABEL_293;
      v42 = *(_QWORD *)(a1 + 80);
      v43 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v42 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (sub_22F2EE534(v42, v43))
      {
        v10 = v5[2148];
        goto LABEL_283;
      }
      goto LABEL_418;
    case 0x1F:
      v44 = *(unsigned __int8 *)(a2 + 9);
      if (v44 == 1)
      {
        v10 = v5[2126];
        goto LABEL_283;
      }
      if (v44 == 2)
      {
        v214 = *(_QWORD *)(a1 + 80);
        v215 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v214 + 544), "cl_khr_3d_image_writes", 0x16uLL);
        if (sub_22F2EE534(v214, v215))
        {
          v10 = v5[2138];
          goto LABEL_283;
        }
LABEL_418:
        v86 = 0;
        v70 = 0;
        goto LABEL_286;
      }
      if (v44 != 3)
        goto LABEL_293;
      v45 = *(_QWORD *)(a1 + 80);
      v46 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v45 + 544), "cl_khr_3d_image_writes", 0x16uLL);
      if (!sub_22F2EE534(v45, v46))
        goto LABEL_418;
      v47 = *(_QWORD *)(a1 + 80);
      v48 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v47 + 544), "__opencl_c_read_write_images", 0x1CuLL);
      if (!sub_22F2EE534(v47, v48))
        goto LABEL_418;
      v10 = v5[2150];
LABEL_283:
      v122 = *(_DWORD *)(a3 + 8);
      if (v122 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v122 = *(_DWORD *)(a3 + 8);
      }
      v86 = 0;
      v70 = 0;
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v122) = v10;
      ++*(_DWORD *)(a3 + 8);
LABEL_286:
      v6 = *(_DWORD *)a2;
LABEL_287:
      if (v6 >= 51)
      {
        v123 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v123)
        {
          for (i = 0; i < v123; ++i)
          {
            v125 = *((unsigned int *)v86 + i / v70);
            if ((_DWORD)v125 != 1)
            {
              *(_QWORD *)(*(_QWORD *)a3 + 8 * i) = sub_22EF63724((uint64_t)v5, *(_QWORD *)(*(_QWORD *)a3 + 8 * i), v125, 0);
              v123 = *(unsigned int *)(a3 + 8);
            }
          }
        }
      }
LABEL_293:
      if (*(_DWORD *)(a2 + 4) >= 2u && *(_DWORD *)(a3 + 8))
      {
        v126 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v126) = sub_22EF63724((uint64_t)v5, *(_QWORD *)(*(_QWORD *)a3 + 8 * v126), *(unsigned int *)(a2 + 4), 0);
          ++v126;
        }
        while (v126 < *(unsigned int *)(a3 + 8));
      }
      v127 = *(_BYTE *)(a2 + 8);
      if ((v127 & 4) != 0)
      {
        v128 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v128)
        {
          v129 = *(_QWORD **)a3;
          do
          {
            *v129++ |= 4uLL;
            --v128;
          }
          while (v128);
          v127 = *(_BYTE *)(a2 + 8);
        }
      }
      if ((v127 & 2) != 0)
      {
        v130 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v130)
        {
          v131 = *(_QWORD **)a3;
          do
          {
            *v131++ |= 1uLL;
            --v130;
          }
          while (v130);
          v127 = *(_BYTE *)(a2 + 8);
        }
      }
      if ((v127 & 1) != 0 && *(_DWORD *)(a3 + 8))
      {
        v132 = 0;
        do
        {
          v133 = sub_22EF5DD84((uint64_t)v5, *(_QWORD *)(*(_QWORD *)a3 + 8 * v132), *(_DWORD *)(a2 + 12));
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v132) = v133;
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v132++) = sub_22EF5B848((uint64_t)v5, v133, 0);
        }
        while (v132 < *(unsigned int *)(a3 + 8));
      }
      return;
    case 0x20:
      v10 = v5[2060];
      goto LABEL_283;
    case 0x21:
      v49 = *(_DWORD *)(v5[1886] + *(_QWORD *)(*(_QWORD *)v5[1886] - 24) + 124);
      goto LABEL_81;
    case 0x22:
      v10 = v5[2061];
      goto LABEL_283;
    case 0x23:
      v8 = "cl_mem_fence_flags";
LABEL_74:
      v9 = 18;
      goto LABEL_79;
    case 0x24:
      v50 = "memory_order";
      goto LABEL_77;
    case 0x25:
      v50 = "memory_scope";
LABEL_77:
      v51 = sub_22EC6EF80(a1, v50, 0xCuLL);
      goto LABEL_282;
    case 0x26:
      v8 = "ndrange_t";
      v9 = 9;
LABEL_79:
      v51 = sub_22EC6ED44(a1, v8, v9);
      goto LABEL_282;
    case 0x27:
      v49 = *(_DWORD *)(v5[1886] + *(_QWORD *)(*(_QWORD *)v5[1886] - 24) + 120);
LABEL_81:
      v51 = sub_22EF5B0AC((uint64_t)v5, v49);
      goto LABEL_282;
    case 0x28:
      v10 = v5[2154];
      goto LABEL_283;
    case 0x29:
      v10 = v5[2155];
      goto LABEL_283;
    case 0x2A:
      v10 = v5[2151];
      goto LABEL_283;
    case 0x2B:
      v10 = v5[2059];
      goto LABEL_283;
    case 0x2C:
      v51 = sub_22EF67C8C((uint64_t)v5);
      goto LABEL_282;
    case 0x2D:
      v10 = v5[2064];
      goto LABEL_283;
    case 0x2E:
      v10 = v5[2066];
      goto LABEL_283;
    case 0x2F:
      v51 = sub_22F36D7FC((uint64_t)v5);
LABEL_282:
      v10 = v51;
      goto LABEL_283;
    case 0x30:
      v10 = v5[2067];
      goto LABEL_283;
    case 0x31:
      v10 = v5[2065];
      goto LABEL_283;
    case 0x32:
      v10 = v5[2049];
      goto LABEL_283;
    case 0x33:
      __src = v219;
      v142 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v142;
      v143 = v5[2065];
      v144 = v5[2060];
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v143;
      v145 = v5[2066];
      v146 = v5[2061];
      v220 = v144;
      v221 = v145;
      v147 = v5[2067];
      v148 = v5[2070];
      v222 = v146;
      v223 = v147;
      v149 = *(_QWORD *)(a1 + 80);
      v224 = v148;
      v218 = 0xB00000009;
      v150 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v149 + 544), "cl_khr_fp64", 0xBuLL);
      if (sub_22F2EE534(v149, v150))
      {
        *((_QWORD *)__src + v218) = v5[2071];
        LODWORD(v218) = v218 + 1;
      }
      v151 = *(_QWORD *)(a1 + 80);
      v152 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v151 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = v218;
      if (sub_22F2EE534(v151, v152))
      {
        v153 = v5[2099];
        if (v218 >= HIDWORD(v218))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v218;
        }
        *((_QWORD *)__src + v70) = v153;
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      v154 = v70;
      if (*(_DWORD *)(a3 + 12) <= 0xAu)
        goto LABEL_413;
      goto LABEL_414;
    case 0x34:
      __src = v219;
      v155 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v155;
      v156 = v5[2065];
      v157 = v5[2060];
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v156;
      v158 = v5[2066];
      v159 = v5[2061];
      v220 = v157;
      v221 = v158;
      v160 = v5[2067];
      v161 = v5[2070];
      v222 = v159;
      v223 = v160;
      v162 = *(_QWORD *)(a1 + 80);
      v224 = v161;
      v218 = 0xB00000009;
      v163 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v162 + 544), "cl_khr_fp64", 0xBuLL);
      if (sub_22F2EE534(v162, v163))
      {
        *((_QWORD *)__src + v218) = v5[2071];
        LODWORD(v218) = v218 + 1;
      }
      v164 = *(_QWORD *)(a1 + 80);
      v165 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v164 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = v218;
      if (sub_22F2EE534(v164, v165))
      {
        v166 = v5[2099];
        if (v218 >= HIDWORD(v218))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v218;
        }
        *((_QWORD *)__src + v70) = v166;
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 0x42u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v205 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v205;
      }
      while (v205);
      goto LABEL_404;
    case 0x35:
      __src = v219;
      v167 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v167;
      v168 = v5[2065];
      v169 = v5[2060];
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v168;
      v170 = v5[2066];
      v171 = v5[2061];
      v220 = v169;
      v221 = v170;
      v172 = v5[2067];
      v173 = v5[2070];
      v222 = v171;
      v223 = v172;
      v174 = *(_QWORD *)(a1 + 80);
      v224 = v173;
      v218 = 0xB00000009;
      v175 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v174 + 544), "cl_khr_fp64", 0xBuLL);
      if (sub_22F2EE534(v174, v175))
      {
        *((_QWORD *)__src + v218) = v5[2071];
        LODWORD(v218) = v218 + 1;
      }
      v176 = *(_QWORD *)(a1 + 80);
      v177 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v176 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = v218;
      if (sub_22F2EE534(v176, v177))
      {
        v178 = v5[2099];
        if (v218 >= HIDWORD(v218))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v218;
        }
        *((_QWORD *)__src + v70) = v178;
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 0x37u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v206 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v206;
      }
      while (v206);
      goto LABEL_410;
    case 0x36:
      __src = v219;
      *(_QWORD *)v219 = v5[2064];
      *(_QWORD *)&v219[8] = *(_QWORD *)v219;
      v52 = v5[2066];
      *(_QWORD *)&v219[16] = v5[2065];
      *(_QWORD *)&v219[24] = *(_QWORD *)&v219[16];
      v53 = v5[2067];
      v220 = v52;
      v221 = v52;
      LODWORD(v52) = *(_DWORD *)(a3 + 12);
      v222 = v53;
      v223 = v53;
      v218 = 0x800000008;
      if (v52 < 0x30)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v54 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v54;
      }
      while (v54);
      goto LABEL_103;
    case 0x37:
      __src = v219;
      v55 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v55;
      v56 = v5[2065];
      v57 = v5[2060];
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v56;
      v58 = v5[2066];
      v59 = v5[2061];
      v220 = v57;
      v221 = v58;
      v60 = v5[2067];
      LODWORD(v57) = *(_DWORD *)(a3 + 12);
      v222 = v59;
      v223 = v60;
      v218 = 0x800000008;
      if (v57 > 7)
      {
        v62 = 8;
        v61 = v219;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v61 = __src;
        v62 = v218;
      }
      sub_22E3D0148(a3, v61, &v61[8 * v62]);
      if (__src != v219)
        free(__src);
      v70 = 8;
      goto LABEL_240;
    case 0x38:
      __src = v219;
      v63 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v63;
      v64 = v5[2065];
      v65 = v5[2060];
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v64;
      v66 = v5[2066];
      v67 = v5[2061];
      v220 = v65;
      v221 = v66;
      v68 = v5[2067];
      LODWORD(v65) = *(_DWORD *)(a3 + 12);
      v222 = v67;
      v223 = v68;
      v218 = 0x800000008;
      if (v65 < 0x30)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v69 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v69;
      }
      while (v69);
LABEL_103:
      if (__src != v219)
        free(__src);
      v70 = 8;
      goto LABEL_210;
    case 0x39:
      __src = v219;
      v71 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v71;
      v72 = v5[2065];
      v73 = v5[2060];
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v72;
      v74 = v5[2066];
      v75 = v5[2061];
      v220 = v73;
      v221 = v74;
      v76 = v5[2067];
      LODWORD(v73) = *(_DWORD *)(a3 + 12);
      v222 = v75;
      v223 = v76;
      v218 = 0x800000008;
      if (v73 < 0x28)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v77 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v77;
      }
      while (v77);
      if (__src != v219)
        free(__src);
      v70 = 8;
      goto LABEL_218;
    case 0x3A:
      __src = v219;
      v78 = v5[2064];
      *(_QWORD *)v219 = v5[2051];
      *(_QWORD *)&v219[8] = v78;
      v79 = v5[2065];
      v80 = *(_DWORD *)(a3 + 12);
      *(_QWORD *)&v219[16] = v5[2059];
      *(_QWORD *)&v219[24] = v79;
      v218 = 0x400000004;
      if (v80 > 3)
      {
        v82 = 4;
        v81 = v219;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v81 = __src;
        v82 = v218;
      }
      sub_22E3D0148(a3, v81, &v81[8 * v82]);
      if (__src != v219)
        free(__src);
      v70 = 4;
      goto LABEL_240;
    case 0x3B:
      __src = v219;
      *(_QWORD *)v219 = v5[2070];
      v218 = 0x300000001;
      v179 = *(_QWORD *)(a1 + 80);
      v180 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v179 + 544), "cl_khr_fp64", 0xBuLL);
      if (sub_22F2EE534(v179, v180))
      {
        *((_QWORD *)__src + v218) = v5[2071];
        LODWORD(v218) = v218 + 1;
      }
      v181 = *(_QWORD *)(a1 + 80);
      v182 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v181 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = v218;
      if (sub_22F2EE534(v181, v182))
      {
        v183 = v5[2099];
        if (v218 >= HIDWORD(v218))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v218;
        }
        *((_QWORD *)__src + v70) = v183;
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 0x12u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v207 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v207;
      }
      while (v207);
      goto LABEL_404;
    case 0x3C:
      __src = v219;
      *(_QWORD *)v219 = v5[2051];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v83 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v83;
      }
      while (v83);
      goto LABEL_207;
    case 0x3D:
      __src = v219;
      *(_QWORD *)v219 = v5[2051];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v84 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v84;
      }
      while (v84);
      goto LABEL_215;
    case 0x3E:
      __src = v219;
      v218 = 0x100000000;
      v184 = *(_QWORD *)(a1 + 80);
      v185 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v184 + 544), "cl_khr_fp64", 0xBuLL);
      v70 = 0;
      if (sub_22F2EE534(v184, v185))
      {
        *(_QWORD *)__src = v5[2071];
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 4u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v208 = 4;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v208;
      }
      while (v208);
      goto LABEL_398;
    case 0x3F:
      __src = v219;
      v218 = 0x100000000;
      v186 = *(_QWORD *)(a1 + 80);
      v187 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v186 + 544), "cl_khr_fp64", 0xBuLL);
      v70 = 0;
      if (sub_22F2EE534(v186, v187))
      {
        *(_QWORD *)__src = v5[2071];
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v209 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v209;
      }
      while (v209);
      goto LABEL_404;
    case 0x40:
      __src = v219;
      v218 = 0x100000000;
      v188 = *(_QWORD *)(a1 + 80);
      v189 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v188 + 544), "cl_khr_fp64", 0xBuLL);
      v70 = 0;
      if (sub_22F2EE534(v188, v189))
      {
        *(_QWORD *)__src = v5[2071];
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v210 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v210;
      }
      while (v210);
      goto LABEL_410;
    case 0x41:
      __src = v219;
      *(_QWORD *)v219 = v5[2070];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 4u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v85 = 4;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v85;
      }
      while (v85);
      if (__src != v219)
        free(__src);
      v70 = 1;
      goto LABEL_132;
    case 0x42:
      __src = v219;
      *(_QWORD *)v219 = v5[2070];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v87 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v87;
      }
      while (v87);
      goto LABEL_207;
    case 0x43:
      __src = v219;
      *(_QWORD *)v219 = v5[2070];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v88 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v88;
      }
      while (v88);
      goto LABEL_215;
    case 0x44:
      __src = v219;
      v218 = 0x100000000;
      v190 = *(_QWORD *)(a1 + 80);
      v191 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v190 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = 0;
      if (sub_22F2EE534(v190, v191))
      {
        *(_QWORD *)__src = v5[2099];
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 4u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v211 = 4;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v211;
      }
      while (v211);
LABEL_398:
      if (__src != v219)
        free(__src);
LABEL_132:
      v86 = &xmmword_22F4946E0;
      goto LABEL_286;
    case 0x45:
      __src = v219;
      v218 = 0x100000000;
      v192 = *(_QWORD *)(a1 + 80);
      v193 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v192 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = 0;
      if (sub_22F2EE534(v192, v193))
      {
        *(_QWORD *)__src = v5[2099];
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v212 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v212;
      }
      while (v212);
LABEL_404:
      if (__src != v219)
        free(__src);
      goto LABEL_210;
    case 0x46:
      __src = v219;
      v218 = 0x100000000;
      v194 = *(_QWORD *)(a1 + 80);
      v195 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v194 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = 0;
      if (sub_22F2EE534(v194, v195))
      {
        *(_QWORD *)__src = v5[2099];
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v213 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v213;
      }
      while (v213);
LABEL_410:
      if (__src != v219)
        free(__src);
      goto LABEL_218;
    case 0x47:
      __src = v219;
      *(_QWORD *)v219 = v5[2060];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v89 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v89;
      }
      while (v89);
      goto LABEL_207;
    case 0x48:
      __src = v219;
      *(_QWORD *)v219 = v5[2060];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v90 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v90;
      }
      while (v90);
      goto LABEL_215;
    case 0x49:
      __src = v219;
      *(_QWORD *)v219 = v5[2061];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v91 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v91;
      }
      while (v91);
      goto LABEL_207;
    case 0x4A:
      __src = v219;
      *(_QWORD *)v219 = v5[2061];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v92 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v92;
      }
      while (v92);
      goto LABEL_215;
    case 0x4B:
      __src = v219;
      *(_QWORD *)v219 = v5[2059];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v93 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v93;
      }
      while (v93);
      goto LABEL_207;
    case 0x4C:
      __src = v219;
      *(_QWORD *)v219 = v5[2059];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v94 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v94;
      }
      while (v94);
      goto LABEL_215;
    case 0x4D:
      __src = v219;
      *(_QWORD *)v219 = v5[2064];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v95 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v95;
      }
      while (v95);
      goto LABEL_207;
    case 0x4E:
      __src = v219;
      *(_QWORD *)v219 = v5[2064];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v96 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v96;
      }
      while (v96);
      goto LABEL_215;
    case 0x4F:
      __src = v219;
      *(_QWORD *)v219 = v5[2066];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v97 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v97;
      }
      while (v97);
      goto LABEL_207;
    case 0x50:
      __src = v219;
      *(_QWORD *)v219 = v5[2066];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v98 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v98;
      }
      while (v98);
      goto LABEL_215;
    case 0x51:
      __src = v219;
      *(_QWORD *)v219 = v5[2067];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v99 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v99;
      }
      while (v99);
      goto LABEL_207;
    case 0x52:
      __src = v219;
      *(_QWORD *)v219 = v5[2067];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v100 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v100;
      }
      while (v100);
      goto LABEL_215;
    case 0x53:
      __src = v219;
      *(_QWORD *)v219 = v5[2065];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 6u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v101 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v101;
      }
      while (v101);
LABEL_207:
      if (__src != v219)
        free(__src);
      v70 = 1;
      goto LABEL_210;
    case 0x54:
      __src = v219;
      *(_QWORD *)v219 = v5[2065];
      v218 = 0x100000001;
      if (*(_DWORD *)(a3 + 12) < 5u)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v102 = 5;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v102;
      }
      while (v102);
LABEL_215:
      if (__src != v219)
        free(__src);
      v70 = 1;
LABEL_218:
      v86 = (__int128 *)&unk_22F4941BC;
      goto LABEL_286;
    case 0x55:
      __src = v219;
      v196 = v5[2066];
      v197 = v5[2061];
      *(_QWORD *)v219 = v5[2060];
      *(_QWORD *)&v219[8] = v196;
      v198 = v5[2067];
      v199 = v5[2070];
      *(_QWORD *)&v219[16] = v197;
      *(_QWORD *)&v219[24] = v198;
      v200 = *(_QWORD *)(a1 + 80);
      v220 = v199;
      v218 = 0x700000005;
      v201 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v200 + 544), "cl_khr_fp64", 0xBuLL);
      if (sub_22F2EE534(v200, v201))
      {
        *((_QWORD *)__src + v218) = v5[2071];
        LODWORD(v218) = v218 + 1;
      }
      v202 = *(_QWORD *)(a1 + 80);
      v203 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v202 + 544), "cl_khr_fp16", 0xBuLL);
      v70 = v218;
      if (sub_22F2EE534(v202, v203))
      {
        v204 = v5[2099];
        if (v218 >= HIDWORD(v218))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v218;
        }
        *((_QWORD *)__src + v70) = v204;
        v70 = v218 + 1;
        LODWORD(v218) = v218 + 1;
      }
      v154 = v70;
      if (*(_DWORD *)(a3 + 12) <= 6u)
      {
LABEL_413:
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v154 = v218;
      }
LABEL_414:
      sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v154);
      if (__src != v219)
        free(__src);
LABEL_240:
      v86 = (__int128 *)&v216;
      goto LABEL_286;
    case 0x56:
      __src = v219;
      *(_QWORD *)v219 = v5[2051];
      v103 = v5[2061];
      *(_OWORD *)&v219[8] = *(_OWORD *)(v5 + 2059);
      v104 = *(_DWORD *)(a3 + 12);
      *(_QWORD *)&v219[24] = v103;
      v218 = 0x400000004;
      if (v104 < 0x18)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v105 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v105;
      }
      while (v105);
      goto LABEL_228;
    case 0x57:
      __src = v219;
      v106 = *(_DWORD *)(a3 + 12);
      v107 = *((_OWORD *)v5 + 1033);
      *(_OWORD *)v219 = *((_OWORD *)v5 + 1032);
      *(_OWORD *)&v219[16] = v107;
      v218 = 0x400000004;
      if (v106 < 0x18)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      v108 = 6;
      do
      {
        sub_22E3D0148(a3, __src, (_BYTE *)__src + 8 * v218);
        --v108;
      }
      while (v108);
LABEL_228:
      if (__src != v219)
        free(__src);
      v70 = 4;
LABEL_210:
      v86 = (__int128 *)&unk_22F4941A4;
      goto LABEL_286;
    default:
      v86 = 0;
      v70 = 0;
      goto LABEL_287;
  }
}

unint64_t sub_22EC6ED44(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[64];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  __int16 v27;
  int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), a2, a3);
  v16 = 0;
  v17 = v19;
  v18 = 0x800000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = (_QWORD *)a1;
  v24 = v6;
  v25 = 0;
  sub_22EFC6D6C((uint64_t)v26, v6);
  v26[1] = 0;
  v26[2] = 0;
  v27 = 0;
  v28 = 257;
  v29 = 0;
  sub_22EC56024((uint64_t)&v16);
  sub_22EC63520(a1, (uint64_t)&v16, *(_QWORD **)(a1 + 3344), 0, 0);
  if (!(_DWORD)v18 || (_DWORD)v16 != 2)
    goto LABEL_10;
  v7 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFCLL;
  v8 = *(_DWORD *)(v7 + 28) & 0x7F;
  if (v8 <= 0x2F && ((1 << v8) & 0xC00000060000) != 0)
  {
    v7 = sub_22EFBAEA4(*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = *(_DWORD *)(v7 + 28) & 0x7F;
  }
  if (v8 - 39 < 3)
    v10 = sub_22EF64680(*(_QWORD *)(a1 + 88), v7, 0);
  else
LABEL_10:
    v10 = sub_22EC6F1BC((_QWORD *)a1, (uint64_t)"typedef", 7, (uint64_t)a2, a3);
  v11 = v10;
  if (BYTE1(v28))
  {
    if ((_DWORD)v16 == 5)
    {
      sub_22EC64D18(v23, (uint64_t)&v16);
    }
    else if (v21 && (*(_DWORD *)(v23[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v23, (uint64_t)&v16);
    }
  }
  v12 = v20;
  if (v20)
  {
    v14 = *(void **)(v20 + 240);
    if (v14 != (void *)(v20 + 256))
      free(v14);
    v15 = *(void **)(v12 + 176);
    if (v15 != *(void **)(v12 + 168))
      free(v15);
    if ((*(_BYTE *)(v12 + 32) & 1) == 0)
      llvm::deallocate_buffer(*(llvm **)(v12 + 40), (void *)(16 * *(unsigned int *)(v12 + 48)));
    sub_22E687D9C((uint64_t *)(v12 + 8));
    MEMORY[0x2348A0E9C](v12, 0x10E0C409F09D3C3);
  }
  if (v17 != v19)
    free(v17);
  return v11;
}

unint64_t sub_22EC6EF80(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[64];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[24];
  int v27;
  __int16 v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), a2, a3);
  v16 = 0;
  v17 = v19;
  v18 = 0x800000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = (_QWORD *)a1;
  v24 = v6;
  v25 = 0;
  sub_22EFC6D6C((uint64_t)v26, v6);
  *(_OWORD *)&v26[8] = xmmword_22F4555C0;
  v27 = 16842752;
  v28 = 0;
  v29 = 0;
  sub_22EC56024((uint64_t)&v16);
  sub_22EC63520(a1, (uint64_t)&v16, *(_QWORD **)(a1 + 3344), 0, 0);
  if (!(_DWORD)v18 || (_DWORD)v16 != 2)
    goto LABEL_10;
  v7 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFCLL;
  v8 = *(_DWORD *)(v7 + 28);
  if ((v8 & 0x7Fu) <= 0x2F && ((1 << (v8 & 0x7F)) & 0xC00000060000) != 0)
  {
    v7 = sub_22EFBAEA4(*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = *(_DWORD *)(v7 + 28);
  }
  if ((v8 & 0x7F) == 0x21)
    v10 = sub_22EF64864(*(_QWORD *)(a1 + 88), v7);
  else
LABEL_10:
    v10 = sub_22EC6F1BC((_QWORD *)a1, (uint64_t)"enum", 4, (uint64_t)a2, a3);
  v11 = v10;
  if (HIBYTE(v27))
  {
    if ((_DWORD)v16 == 5)
    {
      sub_22EC64D18(v23, (uint64_t)&v16);
    }
    else if (v21 && (*(_DWORD *)(v23[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v23, (uint64_t)&v16);
    }
  }
  v12 = v20;
  if (v20)
  {
    v14 = *(void **)(v20 + 240);
    if (v14 != (void *)(v20 + 256))
      free(v14);
    v15 = *(void **)(v12 + 176);
    if (v15 != *(void **)(v12 + 168))
      free(v15);
    if ((*(_BYTE *)(v12 + 32) & 1) == 0)
      llvm::deallocate_buffer(*(llvm **)(v12 + 40), (void *)(16 * *(unsigned int *)(v12 + 48)));
    sub_22E687D9C((uint64_t *)(v12 + 8));
    MEMORY[0x2348A0E9C](v12, 0x10E0C409F09D3C3);
  }
  if (v17 != v19)
    free(v17);
  return v11;
}

uint64_t sub_22EC6F1BC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v8[24];
  _QWORD v9[2];
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a4;
  v9[1] = a5;
  sub_22E8FCA40(a1, 0, 0x1149u, 0, (uint64_t)v8);
  v6 = sub_22F2F2210((uint64_t)v8, (uint64_t)v10);
  sub_22F2F2210(v6, (uint64_t)v9);
  sub_22E903BEC(v8);
  return *(_QWORD *)(a1[11] + 16392);
}

unint64_t sub_22EC6F220(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F338FA8(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F338FA8(a1);
    }
  }
  return v2;
}

void sub_22EC6F288(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  unint64_t i;
  unint64_t *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v17 = 0x400000000;
  v6 = (uint64_t)(a1 + 19);
  while (1)
  {
    v7 = sub_22E79390C();
    for (i = sub_22EFCE144(a2, (uint64_t)v7); i; i = v9[1])
    {
      v9 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFF8);
      v10 = (i & 0xFFFFFFFFFFFFFFF8) == 0 || (i & 4) == 0;
      if (v10)
        v11 = i & 0xFFFFFFFFFFFFFFF8;
      else
        v11 = *v9;
      v12 = *(_QWORD *)(v11 + 72);
      if (v12 && (*(_DWORD *)(v12 + 28) & 0x7F) == 0x11)
      {
        do
        {
          v12 = *(_QWORD *)(v12 + 88);
          if (v12)
            v16 = (*(_DWORD *)(v12 + 28) & 0x7F) == 17;
          else
            v16 = 0;
        }
        while (v16);
      }
      if (v12)
        v13 = (const void *)(v12 + 48);
      else
        v13 = 0;
      if ((*(_BYTE *)(v11 + 8) & 4) == 0 || sub_22EC62AF4(*a1, v11))
      {
        sub_22E3BA850(v6, v13);
        if (v14)
        {
          sub_22EC6F43C((uint64_t)a1, v11, a3);
          v15 = v17;
          if (v17 >= (unint64_t)HIDWORD(v17))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v17;
          }
          v18[v15] = v13;
          LODWORD(v17) = v17 + 1;
        }
      }
      if (v10)
        break;
    }
    if (!(_DWORD)v17)
      break;
    a2 = v18[v17 - 1];
    LODWORD(v17) = v17 - 1;
  }
}

unint64_t sub_22EC6F43C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v6 = *(_QWORD *)(a2 + 72);
  if (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) == 0x11)
  {
    do
    {
      v6 = *(_QWORD *)(v6 + 88);
      if (v6)
        v19 = (*(_DWORD *)(v6 + 28) & 0x7F) == 17;
      else
        v19 = 0;
    }
    while (v19);
  }
  if (v6)
    v7 = v6 + 48;
  else
    v7 = 0;
  if ((sub_22EFCBE78(v7, a3) & 1) == 0)
  {
    do
    {
      v14 = *(_WORD *)(v7 + 8) & 0x7F;
      v15 = -40;
      if (v14 > 0x46)
      {
        if (v14 != 83)
        {
          if (v14 == 71)
          {
            v15 = -56;
          }
          else if (v14 != 81)
          {
            goto LABEL_25;
          }
        }
      }
      else
      {
        if (v14 > 0x18)
          goto LABEL_24;
        if (v14 == 16)
          goto LABEL_17;
        if (((1 << v14) & 0x1066) != 0)
          goto LABEL_31;
        if (v14 == 24)
        {
LABEL_17:
          v15 = -48;
        }
        else
        {
LABEL_24:
          if (v14 != 70)
          {
LABEL_25:
            v16 = v14 - 52;
            if (v14 - 33 >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v15 = v17;
            else
              v15 = -72;
            goto LABEL_31;
          }
          v15 = -64;
        }
      }
LABEL_31:
      v18 = *(_QWORD *)(v7 + v15 + 16);
      v7 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    while (!sub_22EFCBE78(v7, a3));
  }
  result = sub_22EFCC008(v7);
  v9 = result;
  v10 = *(_QWORD *)(a2 + 72);
  if (v10 && (*(_DWORD *)(v10 + 28) & 0x7F) == 0x11)
  {
    do
    {
      v10 = *(_QWORD *)(v10 + 88);
      if (v10)
        v20 = (*(_DWORD *)(v10 + 28) & 0x7F) == 17;
      else
        v20 = 0;
    }
    while (v20);
  }
  v11 = *(_DWORD *)(a1 + 16);
  if (v11 >= *(_DWORD *)(a1 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 16);
  }
  v12 = v10 + 48;
  if (!v10)
    v12 = 0;
  v13 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v11);
  *v13 = v12;
  v13[1] = v9;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

void sub_22EC6F624(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 *v21;
  unint64_t v22;
  __int128 *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 *v43;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

__int128 *sub_22EC6FD48(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a3 + 1);
  if (v3 >= *((_QWORD *)result + 1))
  {
    if (v4 < v3)
    {
      v6 = *a2;
      *a2 = *a3;
      *a3 = v6;
      if (*((_QWORD *)a2 + 1) < *((_QWORD *)result + 1))
      {
        v7 = *result;
        *result = *a2;
        *a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *a2;
      *a2 = v8;
      if (*((_QWORD *)a3 + 1) >= *((_QWORD *)a2 + 1))
        return result;
      v5 = *a2;
      *a2 = *a3;
    }
    else
    {
      v5 = *result;
      *result = *a3;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_22EC6FDEC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < *(_QWORD *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      sub_22EC6FD48((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)a2 - 1);
      return 1;
    case 4:
      sub_22EC6FFEC(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      v16 = (__int128 *)(a1 + 16);
      v17 = (__int128 *)(a1 + 32);
      v18 = (__int128 *)(a1 + 48);
      sub_22EC6FFEC(a1, a1 + 16, a1 + 32, a1 + 48);
      if (*(a2 - 1) < *(_QWORD *)(a1 + 56))
      {
        v19 = *v18;
        *v18 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v19;
        if (*(_QWORD *)(a1 + 56) < *(_QWORD *)(a1 + 40))
        {
          v20 = *v17;
          *v17 = *v18;
          *v18 = v20;
          if (*(_QWORD *)(a1 + 40) < *(_QWORD *)(a1 + 24))
          {
            v21 = *v16;
            *v16 = *v17;
            *v17 = v21;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)(a1 + 8))
            {
              v22 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v16;
              *v16 = v22;
            }
          }
        }
      }
      return 1;
    default:
      v7 = (_QWORD *)(a1 + 32);
      sub_22EC6FD48((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v8 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v9 = 0;
      v10 = 48;
      break;
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 < v7[1])
    {
      v12 = *v8;
      v13 = v10;
      while (1)
      {
        v14 = a1 + v13;
        *(_OWORD *)(a1 + v13) = *(_OWORD *)(a1 + v13 - 16);
        v13 -= 16;
        if (!v13)
          break;
        if (v11 >= *(_QWORD *)(v14 - 24))
        {
          v15 = (_QWORD *)(a1 + v13);
          goto LABEL_13;
        }
      }
      v15 = (_QWORD *)a1;
LABEL_13:
      *v15 = v12;
      v15[1] = v11;
      if (++v9 == 8)
        return v8 + 2 == a2;
    }
    v7 = v8;
    v10 += 16;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
}

__n128 sub_22EC6FFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  sub_22EC6FD48((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)(a3 + 8) < *(_QWORD *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_22EC70088(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v5 = sub_22EFCC008(a3);
  if (!a2)
    return a1;
  v6 = a2;
  v7 = a1 + 16 * a2;
  while (1)
  {
    v8 = v6 >> 1;
    v9 = a1 + 16 * (v6 >> 1);
    v10 = *(_QWORD *)(v9 + 8);
    if (v10 >= v5)
      break;
    a1 = v9 + 16;
    v8 = v6 + ~v8;
LABEL_7:
    v6 = v8;
    if (!v8)
      return a1;
  }
  if (v10 > v5)
  {
    v7 = a1 + 16 * (v6 >> 1);
    goto LABEL_7;
  }
  if (v6 >= 2)
  {
    do
    {
      v11 = v8 >> 1;
      v12 = a1 + 16 * (v8 >> 1);
      v13 = *(_QWORD *)(v12 + 8);
      v14 = v12 + 16;
      v8 += ~(v8 >> 1);
      if (v13 < v5)
        a1 = v14;
      else
        v8 = v11;
    }
    while (v8);
  }
  v15 = v9 + 16;
  if (v7 != v9 + 16)
  {
    v16 = (v7 - (v9 + 16)) >> 4;
    do
    {
      v17 = v16 >> 1;
      v18 = v15 + 16 * (v16 >> 1);
      v19 = *(_QWORD *)(v18 + 8);
      v20 = v18 + 16;
      v16 += ~(v16 >> 1);
      if (v19 > v5)
        v16 = v17;
      else
        v15 = v20;
    }
    while (v16);
  }
  return a1;
}

uint64_t sub_22EC7017C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v9;
  int v10;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  do
  {
    if (!v3)
      return 0;
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0 && v4)
    {
      v3 = *(_QWORD *)(v4 + 8);
      *a2 = v3;
      v4 = *(_QWORD *)v4;
    }
    else
    {
      v3 = 0;
      *a2 = 0;
    }
    v5 = *(_DWORD *)(v4 + 28);
  }
  while ((**(_DWORD **)a1 & HIWORD(v5) & 0x3FFF) == 0);
  if (**(_BYTE **)(a1 + 8))
  {
    v6 = sub_22ED5601C(v4, 1, 1);
    if (v6)
      v4 = v6;
    v5 = *(_DWORD *)(v4 + 28);
  }
  v7 = v5 & 0x7F;
  if (v7 > 0x2F || ((1 << (v5 & 0x7F)) & 0xC00000060000) == 0)
  {
    v10 = v5 & 0x7F;
    v9 = v4;
  }
  else
  {
    v9 = sub_22EFBAEA4(v4);
    v10 = *(_DWORD *)(v9 + 28) & 0x7F;
  }
  if ((v10 - 43) >= 0xFFFFFFF6)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (v12)
      v13 = v12 & 0xFFFFFFFFFFFFFFF0;
    else
      v13 = sub_22EF6462C(*(_QWORD *)(v2 + 88), v9);
    return v13 & 7 | *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  }
  else
  {
    if (v7 <= 0x2F && ((1 << v7) & 0xC00000060000) != 0)
      v4 = sub_22EFBAEA4(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
}

uint64_t sub_22EC702D0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[512];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        v9[8] = *(_BYTE *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 512);
    if (a2 > 0x20)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F339434(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F339434(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22EC70458(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  int v12;
  uint64_t *v13;

  v13 = 0;
  v4 = sub_22EC70834(a1, *a2, &v13);
  if ((v4 & 1) != 0)
    return v4 ^ 1u;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 16;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_14;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_14:
    v11 = v4;
    sub_22EC708E0(a1, v6);
    v13 = 0;
    sub_22EC70834(a1, *a2, &v13);
    v4 = v11;
  }
  v7 = v13;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= *(_DWORD *)(a1 + 148))
  {
    v12 = v4;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v12;
    v9 = *(_DWORD *)(a1 + 144);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 144);
  return v4 ^ 1u;
}

BOOL sub_22EC70588(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  while (1)
  {
    v3 = *(_WORD *)(a2 + 8) & 0x7F;
    if (v3 == 83)
      break;
    if (v3 == 16)
    {
      if ((*(_BYTE *)(a2 + 56) & 4) == 0)
        break;
LABEL_8:
      v4 = -48;
      goto LABEL_21;
    }
    v4 = -40;
    if ((*(_WORD *)(a2 + 8) & 0x7Fu) > 0x46)
    {
      if (v3 == 81)
        goto LABEL_21;
      if (v3 == 71)
      {
        v4 = -56;
        goto LABEL_21;
      }
    }
    else
    {
      if (v3 <= 0x18)
      {
        if (((1 << v3) & 0x1066) != 0)
          goto LABEL_21;
        if (v3 == 24)
          goto LABEL_8;
      }
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_21;
      }
    }
    v5 = v3 - 52;
    if (v3 - 33 >= 5)
      v6 = -48;
    else
      v6 = -64;
    if (v5 >= 6)
      v4 = v6;
    else
      v4 = -72;
LABEL_21:
    v7 = *(_QWORD *)(a2 + v4 + 16);
    a2 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      a2 = *(_QWORD *)a2;
  }
  v9 = sub_22EFCC008(a2);
  return sub_22EC70694(a1, (uint64_t *)&v9);
}

BOOL sub_22EC70694(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_22EC70A4C(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(a1 + 144);
    if (v7 >= *(_DWORD *)(a1 + 148))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = v8;
      v7 = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

unint64_t sub_22EC70724(unint64_t result, int *a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = result;
  v3 = *a2;
  if ((*a2 - 5) < 2)
  {
    v13 = *((_QWORD *)a2 + 1);
    result = sub_22F0F08CC(&v13);
    if (result && (*(_DWORD *)(result + 28) & 0x7F) == 0x1C)
    {
      v4 = *(_QWORD *)(result + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      v6 = v5 - 64;
      if (v5)
        v7 = (*(_WORD *)(v5 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v7 = 0;
      v8 = !v7;
      if (v8)
        v6 = 0;
      v12 = v6;
      if ((v8 & 1) == 0)
        sub_22EC70458(*(_QWORD *)(v2 + 16), &v12);
      return sub_22EC70588(*(_QWORD *)(v2 + 8), v5);
    }
  }
  else if (v3 == 8)
  {
    v9 = a2[1];
    if ((_DWORD)v9)
    {
      v10 = *((_QWORD *)a2 + 1);
      v11 = 24 * v9;
      do
      {
        result = sub_22EC70724(v2, v10);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
  else if (v3 == 1)
  {
    return sub_22EC6573C(result, *((_QWORD *)a2 + 1));
  }
  return result;
}

uint64_t sub_22EC70834(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_22EC708E0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 136; i += 8)
    {
      v10 = *(_QWORD *)(a1 + i);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v8++ = v10;
    }
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F3394FC(a1, v14, v8);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F3394FC(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

_QWORD *sub_22EC70A4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22EC70B04(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22EC70BB4((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_22EC70B04(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *sub_22EC70BB4(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 16;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_22EC70C70((uint64_t)a1, v5);
  v9 = 0;
  sub_22EC70B04(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22EC70C70(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 136; i += 8)
    {
      v10 = *(_QWORD *)(a1 + i);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v8++ = v10;
    }
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F3395B4(a1, v14, v8);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F3395B4(a1, v6, (_QWORD *)v6 + v7);
    return llvm::deallocate_buffer(v6, (void *)(8 * v7));
  }
}

void sub_22EC70DDC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD **v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[64];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[24];
  int v64;
  __int16 v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v8 = a2[45];
    if (v8)
    {
      if (*a2)
        goto LABEL_8;
      v9 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 3), (void *)a2[45]);
      v10 = a1[4];
      v11 = 40;
      if (v10 == a1[3])
        v11 = 44;
      if (v9 != (void **)(v10 + 8 * *(unsigned int *)((char *)a1 + v11)))
      {
        v8 = a2[45];
LABEL_8:
        v12 = *(_WORD *)(v8 + 8) & 0x7F;
        v13 = v12 > 0x18 || ((1 << v12) & 0x1000006) == 0;
        if (v13 && v12 - 52 > 5)
          goto LABEL_37;
      }
    }
    v14 = *(_DWORD *)(a3 + 156);
    *(_DWORD *)(a3 + 156) = v14 & 0xFFFFF7FF | (((v14 & 0x420) != 0) << 11);
    v15 = (unint64_t *)a2[10];
    v16 = 88;
    if (v15 == (unint64_t *)a2[9])
      v16 = 92;
    v17 = *(unsigned int *)((char *)a2 + v16);
    v18 = &v15[v17];
    if ((_DWORD)v17)
    {
      v19 = 8 * v17;
      while (*v15 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v15;
        v19 -= 8;
        if (!v19)
        {
          v15 = v18;
          break;
        }
      }
    }
    v53 = &v55;
    v54 = (void *)0x800000000;
    sub_22F31BF68((uint64_t)&v53, v15, v18, v18);
    v20 = (unint64_t *)v53;
    if ((_DWORD)v54)
    {
      v21 = 8 * v54;
      do
      {
        v22 = *v20;
        if (*v20)
        {
          if ((*(_DWORD *)(v22 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
          {
            v23 = sub_22EAC6F40(a3, v22);
            if (v23)
            {
              v24 = v23;
              v25 = a1[15];
              v26 = sub_22EC71320(a1, v23);
              (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 24))(v25, v24, v26, 0, 0);
              v27 = *a1 + 16;
              v52 = *(_QWORD *)(v24 + 40);
              v28 = sub_22F3396F0(v27, &v52);
              sub_22F2998B8((uint64_t)(v28 + 1), v24);
            }
          }
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
      v20 = (unint64_t *)v53;
    }
    if (v20 != (unint64_t *)&v55)
      free(v20);
    *(_DWORD *)(a3 + 156) = *(_DWORD *)(a3 + 156) & 0xFFFFF7FF | (((v14 >> 11) & 1) << 11);
    v8 = a2[45];
    if (!v8)
    {
      if (!*a2)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 112) + 88) + 1960) + 80);
        v30 = sub_22E3CD31C((uint64_t *)(v29 + 72), v29);
        v8 = v30 ? v30 + 40 : 0;
        sub_22EC71544((uint64_t **)a1, v8, a3, 0, 0);
        if (v8)
        {
LABEL_60:
          v41 = sub_22EC70088(*(_QWORD *)(a4 + 8), *(_DWORD *)(a4 + 16), v8);
          if ((unint64_t *)v41 != v42)
          {
            v43 = (unint64_t *)v41;
            v44 = v42;
            do
            {
              v45 = *v43;
              v43 += 2;
              sub_22EC71544((uint64_t **)a1, v45, a3, 0, 0);
            }
            while (v43 != v44);
          }
        }
      }
LABEL_63:
      v46 = operator new(0x28uLL);
      v46[2] = 0;
      v46[3] = 0;
      *((_DWORD *)v46 + 8) = 0;
      v47 = *a1;
      *v46 = *a1;
      v46[1] = a1;
      *(_QWORD *)(v47 + 8) = v46;
      *a1 = (uint64_t)v46;
      ++a1[2];
      sub_22EC70DDC(a1, *a2, a3, a4);
      v48 = (_QWORD **)*a1;
      v49 = *(_QWORD *)*a1;
      *(_QWORD *)(v49 + 8) = *(_QWORD *)(*a1 + 8);
      *v48[1] = v49;
      --a1[2];
      sub_22F339A14((uint64_t)(v48 + 2));
      operator delete(v48);
      return;
    }
LABEL_37:
    v31 = sub_22EC60E04(a2);
    v32 = v8;
    while (1)
    {
      if (v31)
      {
        v33 = sub_22EFCC008(v32);
        if (v33 == sub_22EFCC008(v31))
          goto LABEL_59;
      }
      v34 = *(_WORD *)(v32 + 8) & 0x7F;
      if (v34 == 24)
        break;
      v35 = v34 > 0x18 || ((1 << v34) & 0x1000006) == 0;
      if (v35 && v34 - 52 >= 6)
        sub_22EC71544((uint64_t **)a1, v32, a3, 0, 0);
      v32 = sub_22EFCB77C(v32);
      if (!v32)
        goto LABEL_59;
    }
    if ((*(_BYTE *)(v32 + 10) & 2) == 0)
      goto LABEL_59;
    v37 = *(_QWORD **)(a3 + 112);
    v36 = *(_QWORD *)(a3 + 120);
    v38 = *(_DWORD *)(a3 + 128);
    v53 = 0;
    v54 = v56;
    v55 = 0x800000000;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = v37;
    v61 = v36;
    v62 = v38;
    sub_22EFC6D6C((uint64_t)v63, v36);
    *(_OWORD *)&v63[8] = xmmword_22F463A40;
    v64 = 16842752;
    v65 = 0;
    v66 = 0;
    sub_22EC56024((uint64_t)&v53);
    v39 = sub_22EFDC9F0(v32 - 48);
    if (v39)
      sub_22EC71544((uint64_t **)a1, v39 + 48, (uint64_t)&v53, 0, 0);
    if (HIBYTE(v64))
    {
      if ((_DWORD)v53 == 5)
      {
        sub_22EC64D18(v60, (uint64_t)&v53);
      }
      else if (v58 && (*(_DWORD *)(v60[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v60, (uint64_t)&v53);
      }
    }
    v40 = v57;
    if (v57)
    {
      v50 = *(void **)(v57 + 240);
      if (v50 != (void *)(v57 + 256))
        free(v50);
      v51 = *(void **)(v40 + 176);
      if (v51 != *(void **)(v40 + 168))
        free(v51);
      if ((*(_BYTE *)(v40 + 32) & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v40 + 40), (void *)(16 * *(unsigned int *)(v40 + 48)));
      sub_22E687D9C((uint64_t *)(v40 + 8));
      MEMORY[0x2348A0E9C](v40, 0x10E0C409F09D3C3);
    }
    if (v54 == v56)
    {
LABEL_59:
      if (!v8)
        goto LABEL_63;
      goto LABEL_60;
    }
    free(v54);
    if (v8)
      goto LABEL_60;
    goto LABEL_63;
  }
}

uint64_t sub_22EC71320(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int v20;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v28;

  v26 = (uint64_t *)a1[1];
  if (v26 != a1)
  {
    v3 = *(_DWORD *)(a2 + 28);
    v4 = (uint64_t **)a1;
    while (1)
    {
      v5 = *v4;
      v6 = *(_QWORD *)(a2 + 40);
      v28 = 0;
      v7 = (sub_22F2C355C(v5[2], *((_DWORD *)v5 + 8), v6, &v28) & 1) != 0
         ? v28
         : v5[2] + 16 * *((unsigned int *)v5 + 8);
      v8 = *v4;
      if (v7 != (*v4)[2] + 16 * *((unsigned int *)*v4 + 8))
        break;
LABEL_44:
      v4 = (uint64_t **)v8;
      if (v8 == v26)
        return 0;
    }
    v11 = *(_QWORD *)(v7 + 8);
    v10 = (uint64_t *)(v7 + 8);
    v9 = v11;
    if ((v11 & 4) != 0)
    {
      v13 = v9 & 0xFFFFFFFFFFFFFFF8;
      v10 = *(uint64_t **)v13;
      v12 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
    }
    else
    {
      v12 = (uint64_t)&v10[v9 > 7];
    }
    while (1)
    {
      if (v10 == (uint64_t *)v12)
        goto LABEL_44;
      v14 = *v10;
      v15 = *(_DWORD *)(*v10 + 28);
      v16 = (v15 & 0x3EFF0000) != 0x60000 || (v3 & 0x680000) == 0;
      if (v16 && (((v15 | v3) & 0x400000) == 0 || ((v15 ^ v3) & 0x3FFF0000) == 0))
      {
        v17 = *(_DWORD *)(*v10 + 28) & 0x7F;
        v18 = (1 << (v15 & 0x7F)) & 0xC00000060000;
        if (v17 > 0x2F || v18 == 0)
          v20 = *(_DWORD *)(*v10 + 28) & 0x7F;
        else
          v20 = *(_DWORD *)(sub_22EFBAEA4(*v10) + 28) & 0x7F;
        if ((v20 - 52) < 6 || v20 == 29)
        {
          v23 = *(_DWORD *)(a2 + 28);
          v22 = v23 & 0x7F;
          if (v22 <= 0x2F && ((1 << v22) & 0xC00000060000) != 0)
            v22 = *(_DWORD *)(sub_22EFBAEA4(a2) + 28) & 0x7F;
          if ((v22 - 52 < 6 || v22 == 29) && v4 == (uint64_t **)a1)
            goto LABEL_42;
        }
        else
        {
          v23 = *(_DWORD *)(a2 + 28);
        }
        if (v17 != 13 || (v23 & 0x7E) != 0x2E)
          return v14;
        v24 = a2;
        do
          v24 = *(_QWORD *)(v24 + 72);
        while (v24 && (*(_DWORD *)(v24 + 28) & 0x7E) == 0x2E);
        if (v24 != v14)
          return v14;
      }
LABEL_42:
      ++v10;
    }
  }
  return 0;
}

void sub_22EC71544(uint64_t **a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  const void *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t *n;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  unint64_t i;
  unint64_t *v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int *v51;
  _BYTE *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int k;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t j;
  uint64_t *v102;
  uint64_t v103;
  unint64_t *v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int m;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  int *v162[4];
  int *v163;
  void *v164;
  uint64_t v165;
  _QWORD v166[6];

  v166[4] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v9 = (const void *)sub_22EFCC008(a2);
  sub_22E3BA850((uint64_t)(a1 + 3), v9);
  if (!v10)
    return;
  (*(void (**)(uint64_t *, unint64_t))(*a1[15] + 32))(a1[15], a2);
  v11 = *(_WORD *)(a2 + 8) & 0x7F;
  if (v11 != 83)
  {
    v38 = a2 - 64;
    if ((v11 - 38) >= 0xFFFFFFFD)
      sub_22F337BD8(*(_QWORD *)(a3 + 112), a2 - 64);
LABEL_42:
    v164 = v166;
    v165 = 0x400000000;
    v160 = a4;
    v159 = v38;
    if (!*((_BYTE *)a1 + 129) && ((v39 = *(_WORD *)(a2 + 8) & 0x7F, v39 == 16) || v39 == 83))
      sub_22F339980(a2, 0, v162);
    else
      sub_22F3398CC(a2, v162);
    v40 = v162[0];
    v41 = v163;
    if (v162[0] != v163)
    {
      v42 = v162[1];
      v43 = v162[2];
      do
      {
        for (i = *((_QWORD *)v40 + 1) & 0xFFFFFFFFFFFFFFFCLL; i; i = v45[1])
        {
          v45 = (unint64_t *)(i & 0xFFFFFFFFFFFFFFF8);
          v46 = (i & 0xFFFFFFFFFFFFFFF8) == 0 || (i & 4) == 0;
          v47 = i & 0xFFFFFFFFFFFFFFF8;
          if (!v46)
            v47 = *v45;
          v48 = sub_22EAC6F40(a3, v47);
          if (v48)
          {
            v49 = v48;
            v50 = v165;
            if (v165 >= (unint64_t)HIDWORD(v165))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v50 = v165;
            }
            *((_QWORD *)v164 + v50) = v49;
            LODWORD(v165) = v165 + 1;
          }
          if (v46)
            break;
        }
        while (1)
        {
          do
          {
            v51 = v40 + 4;
            v40 = v42;
            if (v51 == v42)
              break;
            v40 = v51;
          }
          while (*(_QWORD *)v51 > 0xFFFFFFFFFFFFFFFDLL);
          if (v40 == v43)
            break;
          v52 = *(_BYTE **)v40;
          if (v52 != sub_22E79390C())
            goto LABEL_67;
        }
        v40 = v43;
LABEL_67:
        ;
      }
      while (v40 != v41);
    }
    if ((_DWORD)v165)
    {
      v53 = (uint64_t *)v164;
      v54 = 8 * v165;
      do
      {
        v55 = *v53++;
        v56 = a1[15];
        v57 = sub_22EC71320((uint64_t *)a1, v55);
        (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t, _QWORD))(*v56 + 24))(v56, v55, v57, a2, a5);
        v58 = (uint64_t)(*a1 + 2);
        v162[0] = *(int **)(v55 + 40);
        v59 = sub_22F3396F0(v58, (uint64_t *)v162);
        sub_22F2998B8((uint64_t)(v59 + 1), v55);
        v54 -= 8;
      }
      while (v54);
    }
    LODWORD(v165) = 0;
    if ((v160 & 1) != 0)
    {
      v98 = operator new(0x28uLL);
      v98[2] = 0;
      v98[3] = 0;
      *((_DWORD *)v98 + 8) = 0;
      v99 = (uint64_t)*a1;
      *v98 = *a1;
      v98[1] = a1;
      *(_QWORD *)(v99 + 8) = v98;
      *a1 = v98;
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v100 = sub_22E79390C();
      for (j = sub_22EFCE144(a2, (uint64_t)v100); j; j = v104[1])
      {
        v104 = (unint64_t *)(j & 0xFFFFFFFFFFFFFFF8);
        v105 = (j & 0xFFFFFFFFFFFFFFF8) == 0 || (j & 4) == 0;
        if (v105)
          v106 = j & 0xFFFFFFFFFFFFFFF8;
        else
          v106 = *v104;
        if ((*(_BYTE *)(v106 + 8) & 4) == 0 || sub_22EC62AF4(*(_QWORD *)(a3 + 112), v106))
        {
          v107 = *(_QWORD *)(v106 + 72);
          if (v107 && (*(_DWORD *)(v107 + 28) & 0x7F) == 0x11)
          {
            do
            {
              v107 = *(_QWORD *)(v107 + 88);
              if (v107)
                v109 = (*(_DWORD *)(v107 + 28) & 0x7F) == 17;
              else
                v109 = 0;
            }
            while (v109);
          }
          if (v107)
            v108 = v107 + 48;
          else
            v108 = 0;
          sub_22EC71544(a1, v108, a3, 1, a5);
        }
        if (v105)
          break;
      }
      v102 = *a1;
      v103 = **a1;
      *(_QWORD *)(v103 + 8) = (*a1)[1];
      *(_QWORD *)v102[1] = v103;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_22F339A14((uint64_t)(v102 + 2));
      operator delete(v102);
    }
    if ((*(_WORD *)(a2 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      if (!*(_QWORD *)(a2 + 64))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 40) + 96), *(_QWORD *)(a2 + 40));
        if (!*(_QWORD *)(a2 + 64))
          goto LABEL_137;
      }
      v60 = sub_22E46A3A0(v159);
      if (v60 != v61)
      {
        v62 = v60;
        v63 = v61;
        do
        {
          v64 = *(_QWORD *)(**(_QWORD **)(v62 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v64 + 8) & 0xF) != 0)
            v64 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v62 + 16));
          v65 = *(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v65 + 17) & 4) != 0)
          {
            if (*((_BYTE *)a1 + 128))
            {
              v73 = sub_22F10D628(v65);
              if (v73)
              {
                v162[0] = *(int **)(v73 + 32);
                v74 = sub_22F0F08CC((uint64_t *)v162);
                if (v74)
                {
                  if ((*(_DWORD *)(v74 + 28) & 0x7F) == 0x1C)
                  {
                    v67 = *(_QWORD *)(v74 + 48);
                    goto LABEL_83;
                  }
                }
              }
            }
          }
          else
          {
            v66 = *(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v66 && *(_BYTE *)(v66 + 16) == 45)
            {
              v67 = sub_22F114198(*(_QWORD *)(v66 + 24));
LABEL_83:
              v68 = operator new(0x28uLL);
              v68[2] = 0;
              v68[3] = 0;
              *((_DWORD *)v68 + 8) = 0;
              v69 = (uint64_t)*a1;
              *v68 = *a1;
              v68[1] = a1;
              *(_QWORD *)(v69 + 8) = v68;
              *a1 = v68;
              a1[2] = (uint64_t *)((char *)a1[2] + 1);
              if (v67)
                v70 = v67 + 64;
              else
                v70 = 0;
              sub_22EC71544(a1, v70, a3, v160, 1);
              v71 = *a1;
              v72 = **a1;
              *(_QWORD *)(v72 + 8) = (*a1)[1];
              *(_QWORD *)v71[1] = v72;
              a1[2] = (uint64_t *)((char *)a1[2] - 1);
              sub_22F339A14((uint64_t)(v71 + 2));
              operator delete(v71);
            }
          }
          v62 += 24;
        }
        while (v62 != v63);
      }
    }
    v75 = *(_WORD *)(a2 + 8) & 0x7F;
    v76 = a2 - 48;
    if (v75 == 22)
      v77 = a2 - 48;
    else
      v77 = 0;
    if (v75 == 22)
    {
      v110 = sub_22F257E10(a2 - 48);
      if (v110)
      {
        v111 = v110;
        while ((*(_BYTE *)(v111 + 28) & 0x80) != 0 || (*(_BYTE *)(v111 + 8) & 4) != 0)
        {
          v111 = *(_QWORD *)(v111 + 128);
          if (!v111)
            goto LABEL_168;
        }
LABEL_220:
        v155 = operator new(0x28uLL);
        v155[2] = 0;
        v155[3] = 0;
        *((_DWORD *)v155 + 8) = 0;
        v156 = (uint64_t)*a1;
        *v155 = *a1;
        v155[1] = a1;
        *(_QWORD *)(v156 + 8) = v155;
        *a1 = v155;
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        sub_22EC71544(a1, v111 + 48, a3, v160, 0);
        v157 = *a1;
        v158 = **a1;
        *(_QWORD *)(v158 + 8) = (*a1)[1];
        *(_QWORD *)v157[1] = v158;
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        sub_22F339A14((uint64_t)(v157 + 2));
        operator delete(v157);
        while (1)
        {
          v111 = *(_QWORD *)(v111 + 128);
          if (!v111)
            break;
          if ((*(_BYTE *)(v111 + 28) & 0x80) == 0 && (*(_BYTE *)(v111 + 8) & 4) == 0)
            goto LABEL_220;
        }
      }
LABEL_168:
      v112 = (uint64_t *)sub_22F276134(v77);
      v113 = sub_22F2761B0(v77);
      if (v112 != (uint64_t *)v113)
      {
        v114 = (uint64_t *)v113;
        do
        {
          v116 = *v112++;
          v115 = v116;
          v117 = operator new(0x28uLL);
          v117[2] = 0;
          v117[3] = 0;
          *((_DWORD *)v117 + 8) = 0;
          v118 = (uint64_t)*a1;
          *v117 = *a1;
          v117[1] = a1;
          *(_QWORD *)(v118 + 8) = v117;
          *a1 = v117;
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v116)
            v119 = v115 + 48;
          else
            v119 = 0;
          sub_22EC71544(a1, v119, a3, v160, 0);
          v120 = *a1;
          v121 = **a1;
          *(_QWORD *)(v121 + 8) = (*a1)[1];
          *(_QWORD *)v120[1] = v121;
          a1[2] = (uint64_t *)((char *)a1[2] - 1);
          sub_22F339A14((uint64_t)(v120 + 2));
          operator delete(v120);
        }
        while (v112 != v114);
      }
      if (sub_22F3B46CC(v77))
      {
        v122 = operator new(0x28uLL);
        v122[2] = 0;
        v122[3] = 0;
        *((_DWORD *)v122 + 8) = 0;
        v123 = (uint64_t)*a1;
        *v122 = *a1;
        v122[1] = a1;
        *(_QWORD *)(v123 + 8) = v122;
        *a1 = v122;
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        v124 = sub_22F3B46CC(v77);
        if (v124)
          v125 = v124 + 48;
        else
          v125 = 0;
        sub_22EC71544(a1, v125, a3, v160, 1);
        v126 = *a1;
        v127 = **a1;
        *(_QWORD *)(v127 + 8) = (*a1)[1];
        *(_QWORD *)v126[1] = v127;
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        sub_22F339A14((uint64_t)(v126 + 2));
        operator delete(v126);
      }
      v128 = a5;
      if (!sub_22F3B4E88(v77))
        goto LABEL_137;
      v129 = operator new(0x28uLL);
      v129[2] = 0;
      v129[3] = 0;
      *((_DWORD *)v129 + 8) = 0;
      v130 = (uint64_t)*a1;
      *v129 = *a1;
      v129[1] = a1;
      *(_QWORD *)(v130 + 8) = v129;
      *a1 = v129;
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v131 = sub_22F3B4E88(v77);
    }
    else
    {
      if (v75 == 23)
      {
        v132 = sub_22F259248(a2 - 48);
        if ((uint64_t *)v132 != v133)
        {
          v134 = (uint64_t *)v132;
          v135 = v133;
          do
          {
            v137 = *v134++;
            v136 = v137;
            v138 = operator new(0x28uLL);
            v138[2] = 0;
            v138[3] = 0;
            *((_DWORD *)v138 + 8) = 0;
            v139 = (uint64_t)*a1;
            *v138 = *a1;
            v138[1] = a1;
            *(_QWORD *)(v139 + 8) = v138;
            *a1 = v138;
            a1[2] = (uint64_t *)((char *)a1[2] + 1);
            if (v137)
              v140 = v136 + 48;
            else
              v140 = 0;
            sub_22EC71544(a1, v140, a3, v160, 0);
            v141 = *a1;
            v142 = **a1;
            *(_QWORD *)(v142 + 8) = (*a1)[1];
            *(_QWORD *)v141[1] = v142;
            a1[2] = (uint64_t *)((char *)a1[2] - 1);
            sub_22F339A14((uint64_t)(v141 + 2));
            operator delete(v141);
          }
          while (v134 != v135);
        }
        goto LABEL_137;
      }
      if (v75 == 19)
        v78 = a2 - 48;
      else
        v78 = 0;
      if (v75 != 19)
        goto LABEL_137;
      v79 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFF8;
      v80 = *(unsigned int *)(v79 + 24);
      if ((_DWORD)v80)
      {
        v81 = *(uint64_t **)(v79 + 16);
        v82 = 8 * v80;
        do
        {
          v84 = *v81++;
          v83 = v84;
          v85 = operator new(0x28uLL);
          v85[2] = 0;
          v85[3] = 0;
          *((_DWORD *)v85 + 8) = 0;
          v86 = (uint64_t)*a1;
          *v85 = *a1;
          v85[1] = a1;
          *(_QWORD *)(v86 + 8) = v85;
          *a1 = v85;
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v84)
            v87 = v83 + 48;
          else
            v87 = 0;
          sub_22EC71544(a1, v87, a3, v160, 0);
          v88 = *a1;
          v89 = **a1;
          *(_QWORD *)(v89 + 8) = (*a1)[1];
          *(_QWORD *)v88[1] = v89;
          a1[2] = (uint64_t *)((char *)a1[2] - 1);
          sub_22F339A14((uint64_t)(v88 + 2));
          operator delete(v88);
          v82 -= 8;
        }
        while (v82);
      }
      v90 = v76;
      if ((*(_DWORD *)(v78 + 28) & 0x7F) != 0x53)
      {
        v91 = *(_QWORD *)(v78 + 16);
        v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        if ((v91 & 4) != 0)
          v92 = *(_QWORD *)v92;
        for (k = *(_WORD *)(v92 + 8) & 0x7F; k != 83; k = *(_WORD *)(v92 + 8) & 0x7F)
        {
          v94 = -40;
          if (k > 70)
          {
            if (k == 71)
            {
              v94 = -56;
            }
            else if (k != 81)
            {
              goto LABEL_123;
            }
          }
          else
          {
            if (k > 0x18)
              goto LABEL_122;
            if (k == 16)
              goto LABEL_116;
            if (((1 << k) & 0x1066) != 0)
              goto LABEL_129;
            if (k == 24)
            {
LABEL_116:
              v94 = -48;
            }
            else
            {
LABEL_122:
              if (k != 70)
              {
LABEL_123:
                v95 = k - 52;
                if ((k - 33) >= 5)
                  v96 = -48;
                else
                  v96 = -64;
                if (v95 >= 6)
                  v94 = v96;
                else
                  v94 = -72;
                goto LABEL_129;
              }
              v94 = -64;
            }
          }
LABEL_129:
          v97 = *(_QWORD *)(v92 + v94 + 16);
          v92 = v97 & 0xFFFFFFFFFFFFFFF8;
          if ((v97 & 4) != 0)
            v92 = *(_QWORD *)v92;
        }
        v90 = v92 - 40;
      }
      if (!sub_22F368C34(*(_QWORD *)(v90 + 88), v78))
      {
LABEL_137:
        if (v164 != v166)
          free(v164);
        return;
      }
      v143 = operator new(0x28uLL);
      v143[2] = 0;
      v143[3] = 0;
      *((_DWORD *)v143 + 8) = 0;
      v144 = (uint64_t)*a1;
      *v143 = *a1;
      v143[1] = a1;
      *(_QWORD *)(v144 + 8) = v143;
      *a1 = v143;
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      if ((*(_DWORD *)(v78 + 28) & 0x7F) != 0x53)
      {
        v145 = *(_QWORD *)(v78 + 16);
        v146 = v145 & 0xFFFFFFFFFFFFFFF8;
        if ((v145 & 4) != 0)
          v146 = *(_QWORD *)v146;
        for (m = *(_WORD *)(v146 + 8) & 0x7F; m != 83; m = *(_WORD *)(v146 + 8) & 0x7F)
        {
          v148 = -40;
          if (m > 70)
          {
            if (m == 71)
            {
              v148 = -56;
            }
            else if (m != 81)
            {
              goto LABEL_202;
            }
          }
          else
          {
            if (m > 0x18)
              goto LABEL_201;
            if (m == 16)
              goto LABEL_195;
            if (((1 << m) & 0x1066) != 0)
              goto LABEL_208;
            if (m == 24)
            {
LABEL_195:
              v148 = -48;
            }
            else
            {
LABEL_201:
              if (m != 70)
              {
LABEL_202:
                v149 = m - 52;
                if ((m - 33) >= 5)
                  v150 = -48;
                else
                  v150 = -64;
                if (v149 >= 6)
                  v148 = v150;
                else
                  v148 = -72;
                goto LABEL_208;
              }
              v148 = -64;
            }
          }
LABEL_208:
          v151 = *(_QWORD *)(v146 + v148 + 16);
          v146 = v151 & 0xFFFFFFFFFFFFFFF8;
          if ((v151 & 4) != 0)
            v146 = *(_QWORD *)v146;
        }
        v76 = v146 - 40;
      }
      v131 = sub_22F368C34(*(_QWORD *)(v76 + 88), v78);
      v128 = 1;
    }
    if (v131)
      v152 = v131 + 48;
    else
      v152 = 0;
    sub_22EC71544(a1, v152, a3, v160, v128);
    v153 = *a1;
    v154 = **a1;
    *(_QWORD *)(v154 + 8) = (*a1)[1];
    *(_QWORD *)v153[1] = v154;
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    sub_22F339A14((uint64_t)(v153 + 2));
    operator delete(v153);
    goto LABEL_137;
  }
  v12 = *(_QWORD *)(a3 + 112);
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 72) + 1) & 1) != 0)
  {
    v38 = a2 - 64;
    goto LABEL_42;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 15192);
  if (*((_BYTE *)a1 + 129))
  {
    v14 = *(_QWORD *)(v13 + 120);
    if (v14)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      if (v17)
      {
        v18 = (const void *)v16;
        v19 = v17;
        do
        {
          sub_22E3CB704((llvm::StringMapImpl *)v13, v18, v19);
          v18 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          v19 = v20;
        }
        while (v20);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v21 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v21)
  {
    for (n = *(uint64_t **)v13; !*n || *n == -8; ++n)
      ;
  }
  else
  {
    n = *(uint64_t **)v13;
  }
  v24 = *(_QWORD *)v13 + 8 * v21;
  if (n != (uint64_t *)v24)
  {
    v25 = v12 + 3320;
    v26 = *n;
    while (1)
    {
      v27 = sub_22E8CEB58(v25, *(_QWORD *)(v26 + 8));
      v164 = (void *)v27;
      if (v27)
        break;
      do
      {
LABEL_33:
        v36 = n[1];
        ++n;
        v26 = v36;
        if (v36)
          v37 = v26 == -8;
        else
          v37 = 1;
      }
      while (v37);
      if (n == (uint64_t *)v24)
        return;
    }
    while (1)
    {
      if ((v27 & 1) != 0)
      {
        if (!sub_22E8CE620(v25, *(_QWORD **)(v27 & 0xFFFFFFFFFFFFFFFELL), a2, 0, 0))
          goto LABEL_30;
        v29 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v28 = sub_22E8CE620(v25, (_QWORD *)v27, a2, 0, 0);
        v29 = v27;
        if ((v28 & 1) == 0)
          goto LABEL_33;
      }
      v30 = sub_22EAC6F40(a3, v29);
      if (v30)
      {
        v31 = v30;
        v32 = a1[15];
        v33 = sub_22EC71320((uint64_t *)a1, v30);
        (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t, _QWORD))(*v32 + 24))(v32, v31, v33, a2, a5);
        v34 = (uint64_t)(*a1 + 2);
        v162[0] = *(int **)(v31 + 40);
        v35 = sub_22F3396F0(v34, (uint64_t *)v162);
        sub_22F2998B8((uint64_t)(v35 + 1), v31);
        if ((v27 & 1) == 0)
          goto LABEL_33;
      }
      else if ((v27 & 1) == 0)
      {
        goto LABEL_33;
      }
LABEL_30:
      sub_22E8CECFC((unint64_t *)&v164);
      v27 = (uint64_t)v164;
      if (!v164)
        goto LABEL_33;
    }
  }
}

_QWORD *sub_22EC72294(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F339808((uint64_t *)a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

int *sub_22EC72354(int *a1)
{
  int v2;
  int *result;
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      v6 = a1 + 2;
      v7 = 4;
    }
    else
    {
      v6 = (int *)*((_QWORD *)a1 + 1);
      v7 = a1[4];
    }
    return &v6[4 * v7];
  }
  else
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v4 = a1 + 18;
      goto LABEL_4;
    }
    result = (int *)*((_QWORD *)a1 + 1);
    v5 = a1[4];
    if ((_DWORD)v5)
    {
      v4 = &result[4 * v5];
LABEL_4:
      while (*(_QWORD *)result >= 0xFFFFFFFFFFFFFFFELL)
      {
        result += 4;
        if (result == v4)
          return v4;
      }
    }
  }
  return result;
}

uint64_t **sub_22EC723C8(uint64_t **result, unsigned int *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int *v10;

  v3 = result;
  if (result[5])
  {
    v4 = result + 3;
    return sub_22E67708C(v4, a2, a2);
  }
  v5 = *result;
  v6 = *((unsigned int *)result + 2);
  v7 = *a2;
  if ((_DWORD)v6)
  {
    v8 = 4 * v6;
    v9 = *result;
    while (*(_DWORD *)v9 != v7)
    {
      v9 = (uint64_t *)((char *)v9 + 4);
      v8 -= 4;
      if (!v8)
        goto LABEL_10;
    }
    if (v8)
      return result;
LABEL_10:
    if (v6 > 1)
    {
      do
      {
        v10 = (unsigned int *)*v3 + v6 - 1;
        sub_22E67708C(v3 + 3, v10, v10);
        LODWORD(v6) = *((_DWORD *)v3 + 2) - 1;
        *((_DWORD *)v3 + 2) = v6;
      }
      while ((_DWORD)v6);
      v4 = v3 + 3;
      return sub_22E67708C(v4, a2, a2);
    }
  }
  if (v6 >= *((_DWORD *)result + 3))
  {
    result = (uint64_t **)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *v3;
    v6 = *((unsigned int *)v3 + 2);
  }
  *((_DWORD *)v5 + v6) = v7;
  ++*((_DWORD *)v3 + 2);
  return result;
}

_QWORD *sub_22EC724C4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v12 = 56 * v3;
    sub_22F339C34(a1, (uint64_t)v4, (uint64_t)v4 + v12);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EC72590(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_22F339E88(*(_QWORD **)(a1 + 184));
  v2 = *(void **)(a1 + 128);
  if (v2 != (void *)(a1 + 144))
    free(v2);
  v3 = *(void **)(a1 + 80);
  if (v3 != (void *)(a1 + 96))
    free(v3);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v4 = *(void **)(a1 + 8);
  if (v4 != (void *)(a1 + 24))
    free(v4);
  return a1;
}

uint64_t *sub_22EC72604(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(_DWORD *)(v1 + 28))
      free(*(void **)(v1 + 16));
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

_QWORD *sub_22EC72658(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_22EC726E8(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 9) ^ a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -1;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_22EC72790(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((unint64_t)(v10 + 1) >= 2)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 256);
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F33A0A8(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F33A0A8(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22EC72918(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

int *sub_22EC729B0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 2;
      }
      v8 += 16;
    }
    while (v8 != 256);
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22EC72B38((int *)a1, v14, v9);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22EC72B38((int *)a1, v6, &v6[2 * v7]);
    return (int *)llvm::deallocate_buffer((llvm *)v6, (void *)(16 * v7));
  }
}

int *sub_22EC72B38(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 16;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v8[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22EC72C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v5 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v5 + 8) & 0xF) != 0)
    v5 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  v6 = sub_22F10C2A4(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
  if (v6)
  {
    if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 35 >= 3)
      v7 = 0;
    else
      v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  result = sub_22EFCE144(v7 + 64, *(_QWORD *)a1);
  *(_QWORD *)(a3 + 120) = result;
  if (result)
  {
    v9 = result;
    while (1)
    {
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) == 0 || !v10)
        break;
      v11 = *(_DWORD *)(a1 + 8);
      result = ((unsigned __int16)v11 & *(_WORD *)(*(_QWORD *)v10 + 30) & 0x3FFF) != 0;
      if (((unsigned __int16)v11 & *(_WORD *)(*(_QWORD *)v10 + 30) & 0x3FFF) == 0)
      {
        v9 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(a3 + 120) = v9;
        if (v9)
          continue;
      }
      return result;
    }
    if ((*(_WORD *)(a1 + 8) & *(_WORD *)(v10 + 30) & 0x3FFF) != 0)
    {
      return 1;
    }
    else
    {
      result = 0;
      *(_QWORD *)(a3 + 120) = 0;
    }
  }
  return result;
}

uint64_t sub_22EC72D24()
{
  llvm::FoldingSetNodeID::AddNodeID();
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EC72D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::FoldingSetNodeID::AddNodeID();
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

unint64_t sub_22EC72D90(uint64_t a1)
{
  return sub_22EABEFB4(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
}

uint64_t sub_22EC72DA0(uint64_t a1)
{
  return sub_22EABCDDC(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
}

void **sub_22EC72DB0(uint64_t a1)
{
  return sub_22EABD328(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
}

void **sub_22EC72DC0(uint64_t a1)
{
  return sub_22EABDBA0(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
}

void **sub_22EC72DD0(uint64_t a1)
{
  return sub_22EABE360(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
}

void **sub_22EC72DE0(uint64_t a1)
{
  return sub_22EABEA08(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
}

uint64_t sub_22EC72DF0(unint64_t **a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t result;

  v2 = a1[1];
  if (sub_22E49F6F8(**a1))
    sub_22EABCDDC(v2, **a1);
  v3 = **a1;
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
  if ((*(_WORD *)(*(_QWORD *)(v3 + 128) + 8) & 0x200) == 0)
    result = sub_22EABD328(v2, **a1);
  if ((*(_BYTE *)(v2[9] + 1) & 2) != 0)
  {
    result = sub_22EABDAF8(**a1);
    if ((_DWORD)result)
      return sub_22EABDBA0(v2, **a1);
  }
  return result;
}

unint64_t sub_22EC72EA4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 88 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F33A2E0(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F33A2E0(a1);
    }
  }
  return v2;
}

uint64_t *sub_22EC72F0C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_22E6C2420(v6, a2);
}

uint64_t sub_22EC72F60(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 72; i += 8)
    {
      v10 = *(_QWORD *)(a1 + i);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v8++ = v10;
    }
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F33A614(a1, v14, v8);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F33A614(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

void sub_22EC730CC(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a1) >> 4);
    if (v7 + 1 > 0x333333333333333)
      abort();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x199999999999999)
      v10 = 0x333333333333333;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x333333333333333)
      sub_22E3B3F8C();
    v11 = 5 * v10;
    v12 = (char *)operator new(80 * v10);
    v13 = &v12[80 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[16 * v11];
    *(_QWORD *)v13 = *a2;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 5) = 0;
    *((_QWORD *)v13 + 9) = 0;
    sub_22F33A6D4((uint64_t *)v13 + 1, a2 + 1);
    v19 = v13 + 80;
    sub_22F33A730(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v15 = v18;
    v14 = v19;
    if (v19 != v18)
    {
      do
      {
        v16 = v14 - 80;
        sub_22F3092FC((uint64_t *)v14 - 9);
        v14 = v16;
      }
      while (v16 != v15);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *a2;
    v5[1] = 0;
    v5[5] = 0;
    v5[9] = 0;
    sub_22F33A6D4(v5 + 1, a2 + 1);
    v6 = v5 + 10;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t *sub_22EC7322C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v18 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v18))
  {
    *v18 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v4 = *(uint64_t **)(a1 + 32);
  if (a2 + 10 == v4)
  {
    v8 = a2;
  }
  else
  {
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (((uint64_t)a2 - *(_QWORD *)(a1 + 24)) >> 4) + 88);
    do
    {
      *(v5 - 11) = *(v5 - 1);
      sub_22F33A6D4(v5 - 10, v5);
      v6 = v5 + 10;
      v7 = v5 + 9;
      v5 += 10;
    }
    while (v7 != v4);
    v4 = *(uint64_t **)(a1 + 32);
    v8 = v6 - 11;
  }
  for (; v4 != v8; v4 -= 10)
    sub_22F3092FC(v4 - 9);
  *(_QWORD *)(a1 + 32) = v8;
  if (v8 != a2)
  {
    v9 = *(unsigned int *)(a1 + 16);
    v10 = *(_QWORD *)a1 + 16 * v9;
    if (*(_DWORD *)(a1 + 8))
    {
      if ((_DWORD)v9)
      {
        v11 = 16 * v9;
        v12 = *(_QWORD *)a1;
        while ((*(_QWORD *)v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v12 += 16;
          v11 -= 16;
          if (!v11)
            goto LABEL_16;
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
      }
    }
    else
    {
LABEL_16:
      v12 = *(_QWORD *)a1 + 16 * v9;
    }
    v13 = *(_QWORD *)a1 + 16 * v9;
    if (v12 != v13)
    {
      v14 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - *(_QWORD *)(a1 + 24)) >> 4);
      do
      {
        v15 = *(unsigned int *)(v12 + 8);
        if (v14 < v15)
          *(_DWORD *)(v12 + 8) = v15 - 1;
        v16 = v12 + 16;
        v12 = v10;
        if (v16 != v10)
        {
          v12 = v16;
          while ((*(_QWORD *)v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v12 += 16;
            if (v12 == v10)
            {
              v12 = v10;
              break;
            }
          }
        }
      }
      while (v12 != v13);
    }
  }
  return a2;
}

void sub_22EC733F8(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  void *v5;
  char v6;
  size_t v7;
  void *v8;
  void *v9;
  size_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  unint64_t v28;
  int v29;
  int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  _QWORD v42[2];
  void *v43[2];
  __int128 v44;
  void *v45[2];
  uint64_t v46;
  __int128 __p;
  uint64_t v48;
  unint64_t v49;
  _OWORD __dst[3];
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = sub_22E49F3DC(*(_QWORD **)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 344));
  if (v2)
    v3 = *v2 & 0x7FFFFFFF;
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1 + 72);
  v5 = (void *)(v4 + 496);
  v6 = *(_BYTE *)(v4 + 519);
  v8 = *(void **)(v4 + 496);
  v7 = *(_QWORD *)(v4 + 504);
  if (v6 >= 0)
    v9 = v5;
  else
    v9 = v8;
  if (v6 >= 0)
    v10 = v6 & 0x7F;
  else
    v10 = v7;
  if (v10)
    goto LABEL_25;
  v11 = *(_QWORD *)(sub_22E6155EC(*(_QWORD **)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 344)) + 88);
  do
  {
    v12 = (unint64_t *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    if ((v13 & 2) == 0)
      break;
    v11 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while (v11);
  v14 = *v12;
  v9 = v12 + 4;
  v10 = v14;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_56;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    *(_QWORD *)&__dst[0] = v15;
    *((_QWORD *)&__dst[0] + 1) = v10;
    *(_QWORD *)&__dst[1] = v17 | 0x8000000000000000;
  }
  else
  {
    BYTE7(__dst[1]) = v10;
    v15 = __dst;
    if (!v10)
      goto LABEL_22;
  }
  memmove(v15, v9, v10);
LABEL_22:
  *((_BYTE *)v15 + v10) = 0;
  v18 = *(_QWORD *)(a1 + 72);
  v19 = v18 + 496;
  if (*(char *)(v18 + 519) < 0)
    operator delete(*(void **)v19);
  *(_OWORD *)v19 = __dst[0];
  *(_QWORD *)(v19 + 16) = *(_QWORD *)&__dst[1];
LABEL_25:
  sub_22F1D07D8(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16), v9, v10, 0, 1, (uint64_t)&v52);
  v20 = v53;
  if ((v53 & 1) != 0)
  {
    v21 = sub_22E6155EC(*(_QWORD **)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 344));
    v53 = v20 & 0xFE;
    v52 = v21;
  }
  if (!v9)
  {
    memset(__dst, 0, sizeof(__dst));
    v23 = v52;
    v51 = v52;
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 104) + 488;
LABEL_38:
    v29 = 0;
    *(_OWORD *)v45 = __dst[0];
    v46 = *(_QWORD *)&__dst[1];
    goto LABEL_40;
  }
  if (v10 > 0x7FFFFFFFFFFFFFF7)
LABEL_56:
    abort();
  if (v10 > 0x16)
  {
    v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v25 = v10 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *(_QWORD *)&__dst[0] = v27;
    v28 = v26 | 0x8000000000000000;
    *((_QWORD *)&__dst[0] + 1) = v10;
    *(_QWORD *)&__dst[1] = v26 | 0x8000000000000000;
    memmove(v27, v9, v10);
    *((_BYTE *)v27 + v10) = 0;
    v22 = (char *)operator new(v26);
    *(_QWORD *)&__dst[2] = v10;
    *((_QWORD *)&__dst[2] + 1) = v28;
    *((_QWORD *)&__dst[1] + 1) = v22;
    goto LABEL_36;
  }
  BYTE7(__dst[1]) = v10;
  if (v10)
  {
    memmove(__dst, v9, v10);
    *((_BYTE *)__dst + v10) = 0;
    HIBYTE(__dst[2]) = v10;
    v22 = (char *)&__dst[1] + 8;
LABEL_36:
    memmove(v22, v9, v10);
    goto LABEL_37;
  }
  LOBYTE(__dst[0]) = 0;
  HIBYTE(__dst[2]) = 0;
  v22 = (char *)&__dst[1] + 8;
LABEL_37:
  v22[v10] = 0;
  v23 = v52;
  v51 = v52;
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 104) + 488;
  if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
    goto LABEL_38;
  sub_22E3BB2B4(v45, *(void **)&__dst[0], *((unint64_t *)&__dst[0] + 1));
  v29 = 1;
LABEL_40:
  v30 = SHIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_22E3BB2B4(&__p, *((void **)&__dst[1] + 1), *(unint64_t *)&__dst[2]);
  }
  else
  {
    v48 = *((_QWORD *)&__dst[2] + 1);
    __p = *(_OWORD *)((char *)&__dst[1] + 8);
  }
  v49 = v23;
  v31 = sub_22F158F40(v24, v3, v9, v10, (uint64_t)v45);
  if (SHIBYTE(v48) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
  v41 = 0;
  v42[0] = 0;
  *(_DWORD *)((char *)v42 + 7) = 0;
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  v32 = sub_22EC75C28(a1 + 8984, (unint64_t)&v41);
  v33 = *(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992);
  v34 = *(_OWORD *)v32;
  *(_DWORD *)(v33 + 15) = *(_DWORD *)(v32 + 15);
  *(_OWORD *)v33 = v34;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  *(_OWORD *)(v33 + 24) = *(_OWORD *)(v32 + 24);
  *(_QWORD *)(v33 + 40) = *(_QWORD *)(v32 + 40);
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_DWORD *)(v33 + 48) = (*(_DWORD *)(v32 + 48))++ != 0;
  v35 = *(_DWORD *)(a1 + 8992) + 1;
  *(_DWORD *)(a1 + 8992) = v35;
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
    v35 = *(_DWORD *)(a1 + 8992);
  }
  v36 = *(_QWORD *)(a1 + 8984);
  *(_DWORD *)(v36 + 56 * v35 - 56) = v3;
  v37 = v36 + 56 * *(unsigned int *)(a1 + 8992);
  *(_QWORD *)(v37 - 48) = v31;
  *(_WORD *)(v37 - 40) = 1;
  sub_22F1DB478(a1 + 10096, (unint64_t)v31, v3, (uint64_t)nullsub_161, (uint64_t)&v41, (uint64_t)nullsub_914, (uint64_t)&v40);
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v39 = sub_22E3CD31C((uint64_t *)(v38 + 72), v38);
  *(_QWORD *)(v39 + 8) = *(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF9 | 2;
  *(_QWORD *)(v39 - 8) = v31;
  if ((v30 & 0x80000000) == 0)
  {
    if (!v29)
      return;
    goto LABEL_51;
  }
  operator delete(*((void **)&__dst[1] + 1));
  if (v29)
LABEL_51:
    operator delete(*(void **)&__dst[0]);
}

uint64_t sub_22EC738A0(uint64_t a1, int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, int *a9)
{
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  std::string::size_type size;
  const void **v42;
  std::string *p_str;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  std::string *v52;
  size_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  size_t v76;
  std::string *v77;
  size_t v78;
  BOOL v79;
  _QWORD *v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84[2];
  unsigned int v85[24];
  unsigned int v86[24];
  _BYTE v87[96];
  unsigned int v88[24];
  _BYTE v89[96];
  _BYTE v90[96];
  std::string __str;
  uint64_t v92;
  _BYTE v93[17];
  std::string v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v11 = *a9;
  *a9 = 5;
  if (a4 == 1)
    v12 = 3;
  else
    v12 = 2;
  v13 = a8 != 0;
  if (!a8)
    v12 = a4;
  v83 = v12;
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 240) >> 5;
  if ((v14 - 2) < 2)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xF60u, 0, (uint64_t)v89);
    v27 = (unsigned int *)v89;
LABEL_28:
    sub_22E903BEC(v27);
    return 0;
  }
  if (v14 == 1)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xF61u, 0, (uint64_t)v90);
    v27 = (unsigned int *)v90;
    goto LABEL_28;
  }
  if (v14 == 4 && v83 == 1)
  {
    v81 = a2;
    sub_22E8FCA40((_QWORD *)a1, a3, 0xF67u, 0, (uint64_t)&v94);
    __str.__r_.__value_.__s.__data_[20] = 0;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = 0;
    LODWORD(__str.__r_.__value_.__l.__data_) = a3;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = a3;
    __str.__r_.__value_.__s.__data_[8] = 0;
    *(_QWORD *)v93 = 0;
    *(_QWORD *)&v93[7] = 0;
    strcpy((char *)&v92, "export ");
    *(_WORD *)&v93[15] = 7;
    sub_22E890748((uint64_t)&v94, &__str);
    if ((v93[15] & 0x80000000) != 0)
      operator delete((void *)v92);
    sub_22E903BEC((unsigned int *)&v94);
    v83 = 0;
    a2 = v81;
  }
  v20 = *(_DWORD *)(a1 + 8992);
  if (v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v20 - 48);
    v22 = *(_DWORD *)(v21 + 28);
    if (v22 <= 6 && ((1 << v22) & 0x5A) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a3, 0xF6Cu, 0, (uint64_t)v88);
      sub_22E903BEC(v88);
      v24 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 48) + 432);
      v25 = *(_QWORD *)(a1 + 10096);
      if (v24 >= (*(_QWORD *)(a1 + 10104) - v25) >> 2)
        v26 = 0;
      else
        v26 = *(_DWORD *)(v25 + 4 * v24);
      sub_22E8FCA40((_QWORD *)a1, v26, 0x176Au, 0, (uint64_t)v87);
      v27 = (unsigned int *)v87;
      goto LABEL_28;
    }
    v80 = (_QWORD *)(a1 + 8984);
    v82 = a2;
    v79 = v13;
    if (v22 == 5)
      v28 = v21;
    else
      v28 = 0;
  }
  else
  {
    v80 = (_QWORD *)(a1 + 8984);
    v82 = a2;
    v79 = v13;
    v28 = 0;
  }
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x800000000000) != 0 && v11 && v11 != 1)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xF62u, 0, (uint64_t)v86);
    sub_22E903BEC(v86);
    v31 = *(_DWORD *)(a1 + 8992);
    if (v31)
    {
      v32 = *(_DWORD *)(*v80 + 56 * v31 - 56);
      if (!v32)
        goto LABEL_46;
    }
    else
    {
      v33 = sub_22E49F3DC(*(_QWORD **)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 344));
      if (!v33)
        goto LABEL_46;
      v32 = *v33 & 0x7FFFFFFF;
      if (!v32)
        goto LABEL_46;
    }
    v34 = v32;
    sub_22E8FCA40((_QWORD *)a1, v32, 0x1617u, 0, (uint64_t)&v94);
    __str.__r_.__value_.__s.__data_[20] = 0;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 4) = 0;
    *(_QWORD *)v93 = 0;
    *(_QWORD *)&v93[8] = 0x800000000000000;
    __str.__r_.__value_.__r.__words[0] = v34 | (v34 << 32);
    __str.__r_.__value_.__s.__data_[8] = 0;
    v92 = 0xA3B656C75646F6DLL;
    v93[16] = 0;
    sub_22E890748((uint64_t)&v94, &__str);
    if ((v93[15] & 0x80000000) != 0)
      operator delete((void *)v92);
    sub_22E903BEC((unsigned int *)&v94);
  }
LABEL_46:
  sub_22EC741D0(&__str, (uint64_t *)a5, a6);
  if (a8)
  {
    std::string::append(&__str, ":");
    sub_22EC741D0(&v94, a7, a8);
    v35 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v94
        : (std::string *)v94.__r_.__value_.__r.__words[0];
    v36 = (v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? *((_BYTE *)&v94.__r_.__value_.__s + 23) & 0x7F
        : v94.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
  }
  v37 = *(_QWORD *)(a1 + 72);
  v38 = *(char *)(v37 + 519);
  if (v38 < 0)
  {
    if (!*(_QWORD *)(v37 + 504))
      goto LABEL_77;
LABEL_59:
    v39 = *(_BYTE *)(v37 + 519) & 0x7F;
    if ((v38 & 0x80u) == 0)
      v40 = *(_BYTE *)(v37 + 519) & 0x7F;
    else
      v40 = *(_QWORD *)(v37 + 504);
    size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v40 == size)
    {
      v42 = (const void **)(v37 + 496);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((*(_BYTE *)(v37 + 519) & 0x80) != 0)
      {
        if (!memcmp(*v42, p_str, *(_QWORD *)(v37 + 504)))
          goto LABEL_77;
      }
      else
      {
        if ((*(_BYTE *)(v37 + 519) & 0x7F) == 0)
          goto LABEL_77;
        while (*(unsigned __int8 *)v42 == p_str->__r_.__value_.__s.__data_[0])
        {
          v42 = (const void **)((char *)v42 + 1);
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v39)
            goto LABEL_77;
        }
      }
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 8), 0xC4Bu, 0, (uint64_t)&v94);
    v44 = a5 + 16 * a6 - 16;
    if (a8)
      v44 = (uint64_t)&a7[2 * a8 - 2];
    v45 = *(_DWORD *)(v44 + 8);
    LODWORD(v84[0]) = *(_DWORD *)(a5 + 8);
    HIDWORD(v84[0]) = v45;
    v46 = sub_22E8906A0((uint64_t)&v94, v84);
    sub_22E90749C(v46, (_BYTE *)(*(_QWORD *)(a1 + 72) + 496));
    sub_22E903BEC((unsigned int *)&v94);
    goto LABEL_97;
  }
  if (*(_BYTE *)(v37 + 519))
    goto LABEL_59;
LABEL_77:
  std::string::operator=((std::string *)(v37 + 496), &__str);
  v47 = *(_QWORD *)(a1 + 80);
  v48 = (uint64_t *)(*(_QWORD *)(v47 + 104) + 488);
  switch(v83)
  {
    case 0:
    case 2:
      v49 = sub_22F1502C8(v48);
      if (!v49)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &__str;
        else
          v71 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
        else
          v72 = __str.__r_.__value_.__l.__size_;
        v73 = sub_22F412B64(v48, a3, v71, v72);
        v50 = v73;
        if (v83 == 2)
          *(_DWORD *)(v73 + 28) = 3;
        goto LABEL_89;
      }
      v50 = v49;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 8), 0xF6Du, 0, (uint64_t)&v94);
      sub_22E90749C((uint64_t)&v94, &__str);
      sub_22E903BEC((unsigned int *)&v94);
      v51 = *(_DWORD *)(v50 + 24);
      if (v51)
      {
        sub_22E8FCA40((_QWORD *)a1, v51, 0x176Bu, 0, (uint64_t)v85);
        sub_22E903BEC(v85);
        goto LABEL_89;
      }
      v65 = v50;
      do
      {
        v66 = v65;
        v65 = *(_QWORD *)(v65 + 32);
      }
      while (v65);
      v67 = *(_QWORD *)(v66 + 256);
      v57 = (uint64_t)v80;
      if (v67)
      {
        sub_22E8FCA40((_QWORD *)a1, 0, 0x176Cu, 0, (uint64_t)&v94);
        do
        {
          v68 = (uint64_t *)v67;
          v69 = *(_QWORD *)(v67 + 8);
          if ((v69 & 2) == 0)
            break;
          v67 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v69 & 0xFFFFFFFFFFFFFFFCLL) != 0);
        v70 = *v68;
        v84[0] = (uint64_t)(v68 + 4);
        v84[1] = v70;
        sub_22F2F2210((uint64_t)&v94, (uint64_t)v84);
        sub_22E903BEC((unsigned int *)&v94);
        v57 = (uint64_t)v80;
      }
      goto LABEL_90;
    case 1:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &__str;
      else
        v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        v53 = __str.__r_.__value_.__l.__size_;
      v54 = sub_22E3CB704((llvm::StringMapImpl *)(v47 + 544), v52, v53);
      v55 = *(_DWORD *)(a5 + 8);
      v56 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 112);
      v94.__r_.__value_.__r.__words[0] = v54;
      LODWORD(v94.__r_.__value_.__r.__words[1]) = v55;
      v50 = (*(uint64_t (**)(uint64_t, _QWORD, std::string *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v56 + 16))(v56, a3, &v94, 1, 1, 0) & 0xFFFFFFFFFFFFFFF8;
      if (!v50)
      {
        sub_22E8FCA40((_QWORD *)a1, a3, 0xF68u, 0, (uint64_t)&v94);
        sub_22E90749C((uint64_t)&v94, &__str);
        sub_22E903BEC((unsigned int *)&v94);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &__str;
        else
          v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
        else
          v78 = __str.__r_.__value_.__l.__size_;
        v50 = sub_22F412B64(v48, a3, v77, v78);
      }
      goto LABEL_89;
    case 3:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &__str;
      else
        v75 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
      else
        v76 = __str.__r_.__value_.__l.__size_;
      v50 = sub_22F412B64(v48, a3, v75, v76);
      *(_DWORD *)(v50 + 28) = 4;
      goto LABEL_89;
    default:
      v50 = 0;
LABEL_89:
      v57 = (uint64_t)v80;
LABEL_90:
      if (v28)
      {
        sub_22E9014A4((int64x2_t *)a1, 0);
      }
      else
      {
        LODWORD(v94.__r_.__value_.__l.__data_) = 0;
        v94.__r_.__value_.__l.__size_ = 0;
        *(_DWORD *)((char *)&v94.__r_.__value_.__r.__words[1] + 7) = 0;
        v95 = 0u;
        v96 = 0u;
        v58 = sub_22EC75C28(v57, (unint64_t)&v94);
        v59 = *(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992);
        v60 = *(_OWORD *)v58;
        *(_DWORD *)(v59 + 15) = *(_DWORD *)(v58 + 15);
        *(_OWORD *)v59 = v60;
        *(_QWORD *)(v59 + 32) = 0;
        *(_QWORD *)(v59 + 40) = 0;
        *(_QWORD *)(v59 + 24) = 0;
        *(_OWORD *)(v59 + 24) = *(_OWORD *)(v58 + 24);
        *(_QWORD *)(v59 + 40) = *(_QWORD *)(v58 + 40);
        *(_QWORD *)(v58 + 32) = 0;
        *(_QWORD *)(v58 + 40) = 0;
        *(_QWORD *)(v58 + 24) = 0;
        *(_DWORD *)(v59 + 48) = (*(_DWORD *)(v58 + 48))++ != 0;
        ++*(_DWORD *)(a1 + 8992);
        if ((_QWORD)v95)
        {
          *((_QWORD *)&v95 + 1) = v95;
          operator delete((void *)v95);
        }
        if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200000000000000) != 0)
        {
          v74 = *(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992);
          sub_22F25ACCC(v74 - 32, (__n128 *)(a1 + 10096));
          *(_QWORD *)(a1 + 10104) = *(_QWORD *)(a1 + 10096);
          ++*(_DWORD *)(a1 + 10120);
          ++*(_DWORD *)(v74 - 8);
        }
      }
      v61 = *(_QWORD *)(a1 + 8984);
      *(_DWORD *)(v61 + 56 * *(unsigned int *)(a1 + 8992) - 56) = v82;
      v62 = v61 + 56 * *(unsigned int *)(a1 + 8992);
      *(_QWORD *)(v62 - 48) = v50;
      *(_BYTE *)(v62 - 40) = v83 != 1;
      *(_BYTE *)(v62 - 39) = v79;
      sub_22F1DB478(a1 + 10096, v50, a3, (uint64_t)nullsub_161, (uint64_t)&v94, (uint64_t)nullsub_914, (uint64_t)v84);
      v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
      v64 = sub_22E3CD31C((uint64_t *)(v63 + 72), v63);
      *(_QWORD *)(v64 + 8) |= 6uLL;
      *(_QWORD *)(v64 - 8) = v50;
      *a9 = 2;
      break;
  }
LABEL_97:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 0;
}

std::string *sub_22EC741D0(std::string *this, uint64_t *a2, uint64_t a3)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  int v7;
  std::string::size_type size;
  uint64_t v9;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    v4 = this;
    v5 = 16 * a3;
    do
    {
      v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      v7 = v6;
      size = v6 & 0x7F;
      if (v7 < 0)
        size = v4->__r_.__value_.__l.__size_;
      if (size)
        std::string::append(v4, ".");
      v9 = *a2;
      a2 += 2;
      this = std::string::append(v4, (const std::string::value_type *)(*(_QWORD *)(v9 + 16) + 16), **(unsigned int **)(v9 + 16));
      v5 -= 16;
    }
    while (v5);
  }
  return this;
}

uint64_t sub_22EC74254(int64x2_t *a1, int a2, int a3)
{
  unsigned __int32 v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t v10;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _BYTE __p[23];
  __int16 v26;
  int v27;
  _QWORD v28[2];
  void *v29[2];
  __int128 v30;
  unsigned int v31[24];
  _BYTE v32[96];
  unsigned int v33[24];
  _BYTE v34[96];

  v5 = a1[562].u32[0];
  if (!v5)
    goto LABEL_3;
  v6 = a1[561].i64[1] + 56 * v5;
  v7 = *(_DWORD *)(*(_QWORD *)(v6 - 48) + 28);
  if ((v7 - 2) < 4)
    goto LABEL_3;
  if (v7 == 6)
  {
    sub_22E8FCA40(a1, a3, 0x11CFu, 0, (uint64_t)v33);
    sub_22E903BEC(v33);
    sub_22E8FCA40(a1, *(_DWORD *)(a1[561].i64[1] + 56 * a1[562].u32[0] - 56), 0x6Du, 0, (uint64_t)v32);
    v8 = (unsigned int *)v32;
    goto LABEL_4;
  }
  if (!v7)
  {
LABEL_3:
    sub_22E8FCA40(a1, a3, 0x11CDu, 0, (uint64_t)v34);
    v8 = (unsigned int *)v34;
LABEL_4:
    sub_22E903BEC(v8);
    return 0;
  }
  if (!*(_BYTE *)(v6 - 40))
  {
    sub_22E8FCA40(a1, a3, 0x11CEu, 0, (uint64_t)v31);
    sub_22E903BEC(v31);
    sub_22E8FCA40(a1, *(_DWORD *)(a1[561].i64[1] + 56 * a1[562].u32[0] - 56), 0x16E4u, 0, (uint64_t)&v27);
    v10 = *(unsigned int *)(a1[561].i64[1] + 56 * a1[562].u32[0] - 56);
    v23 = 0;
    v24 = 0;
    v21 = v10 | (v10 << 32);
    v22 = 0;
    memset(&__p[8], 0, 15);
    strcpy(__p, "export ");
    v26 = 7;
    sub_22E890748((uint64_t)&v27, &v21);
    if ((char)v26 < 0)
      operator delete(*(void **)__p);
    v8 = (unsigned int *)&v27;
    goto LABEL_4;
  }
  sub_22E9014A4(a1, 1);
  v12 = sub_22F412AEC(*(_QWORD *)(a1[5].i64[0] + 104) + 488, *(_QWORD *)(a1[561].i64[1] + 56 * a1[562].u32[0] - 48), a3);
  v27 = 0;
  v28[0] = 0;
  *(_DWORD *)((char *)v28 + 7) = 0;
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  v13 = sub_22EC75C28((uint64_t)&a1[561].i64[1], (unint64_t)&v27);
  v14 = a1[561].i64[1] + 56 * a1[562].u32[0];
  v15 = *(_OWORD *)v13;
  *(_DWORD *)(v14 + 15) = *(_DWORD *)(v13 + 15);
  *(_OWORD *)v14 = v15;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v13 + 24);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_DWORD *)(v14 + 48) = (*(_DWORD *)(v13 + 48))++ != 0;
  v16 = a1[562].i32[0] + 1;
  a1[562].i32[0] = v16;
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
    v16 = a1[562].u32[0];
  }
  v17 = a1[561].i64[1];
  *(_DWORD *)(v17 + 56 * v16 - 56) = a2;
  v18 = v17 + 56 * a1[562].u32[0];
  *(_QWORD *)(v18 - 48) = v12;
  *(_BYTE *)(v18 - 40) = 1;
  sub_22F1DB478((uint64_t)a1[631].i64, (unint64_t)v12, a2, (uint64_t)nullsub_161, (uint64_t)&v27, (uint64_t)nullsub_914, (uint64_t)&v21);
  v19 = *(_QWORD *)(*(_QWORD *)(a1[5].i64[1] + 1960) + 80);
  v20 = sub_22E3CD31C((uint64_t *)(v19 + 72), v19);
  *(_QWORD *)(v20 + 8) |= 6uLL;
  *(_QWORD *)(v20 - 8) = v12;
  return 0;
}

_QWORD *sub_22EC74554(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  std::string::size_type v16;
  const char *v17;
  std::string *v18;
  char v19;
  unsigned int v20;
  std::string *p_p;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string::size_type size;
  std::string::size_type v29;
  std::string::size_type v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  signed __int8 v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type v42;
  std::string *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  std::string __dst[4];
  std::string __p;
  uint64_t v52;
  int v53;

  v7 = a6;
  v8 = a5;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 20);
  v52 = 0;
  v53 = 0;
  memset(&__p, 0, sizeof(__p));
  if (a7)
  {
    v14 = sub_22EC6212C(*(std::string **)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 48));
    if (!v14)
    {
      memset(__dst, 0, 24);
LABEL_20:
      __p = __dst[0];
      std::string::append(&__p, ":");
      sub_22EC741D0(__dst, v8, v7);
      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = __dst;
      else
        v27 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
      else
        size = __dst[0].__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v27, size);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) >> 31;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_31:
      v29 = v19 & 0x7F;
      if (v20)
        v30 = __p.__r_.__value_.__l.__size_;
      else
        v30 = v29;
      v31 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), p_p, v30);
      v32 = *((_DWORD *)v8 + 2);
      v52 = v31;
      v53 = v32;
      v8 = &v52;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 20);
      v7 = 1;
      goto LABEL_35;
    }
    v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v17 = v14;
    if (v15 >= 0x17)
    {
      v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v22 = v15 | 7;
      v48 = a4;
      v23 = a2;
      v24 = a3;
      v25 = v22 + 1;
      v18 = (std::string *)operator new(v22 + 1);
      v26 = v25 | 0x8000000000000000;
      a3 = v24;
      a2 = v23;
      a4 = v48;
      __dst[0].__r_.__value_.__l.__size_ = v16;
      __dst[0].__r_.__value_.__r.__words[2] = v26;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    }
    else
    {
      *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v15;
      v18 = __dst;
      if (!v15)
      {
LABEL_18:
        v18->__r_.__value_.__s.__data_[v16] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_20;
      }
    }
    memmove(v18, v17, v16);
    goto LABEL_18;
  }
  if ((v13 & 0xC00000000000) != 0)
  {
    sub_22EC741D0(__dst, a5, a6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __dst[0];
    v19 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
    v20 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) >> 31;
    if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
LABEL_35:
  if ((v13 & 0x800000000000) != 0)
  {
    v33 = *(_DWORD *)(a1 + 8992);
    if (v33)
    {
      v34 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8984) + 56 * v33 - 48);
      if (v34)
      {
        v35 = *((_DWORD *)v34 + 7);
        v36 = v35 > 6;
        v37 = (1 << v35) & 0x5A;
        if (!v36 && v37 != 0)
        {
          v39 = v34[23];
          v40 = v39 & 0x7F;
          if (v39 >= 0)
            v41 = v39 & 0x7F;
          else
            v41 = *((_QWORD *)v34 + 1);
          v42 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v42 = __p.__r_.__value_.__l.__size_;
          if (v41 == v42)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &__p;
            else
              v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v34[23] & 0x80) == 0)
            {
              if ((v39 & 0x7F) != 0)
              {
                while (*v34 == v43->__r_.__value_.__s.__data_[0])
                {
                  ++v34;
                  v43 = (std::string *)((char *)v43 + 1);
                  if (!--v40)
                    goto LABEL_63;
                }
                goto LABEL_57;
              }
LABEL_63:
              sub_22E8FCA40((_QWORD *)a1, a4, 0xF6Fu, 0, (uint64_t)__dst);
              v47 = sub_22E90749C((uint64_t)__dst, &__p);
              v49 = *(_BYTE *)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 40) ^ 1;
              sub_22E894E38(v47, &v49);
              sub_22E903BEC((unsigned int *)__dst);
              v45 = 0;
              goto LABEL_60;
            }
            if (!memcmp(*(const void **)v34, v43, *((_QWORD *)v34 + 1)))
              goto LABEL_63;
          }
        }
      }
    }
  }
LABEL_57:
  v44 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 112)
                                                                                       + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 112), a4, v8, v7, 1, 0) & 0xFFFFFFFFFFFFFFF8;
  if (v44)
    v45 = sub_22EC74940(a1, a2, a3, a4, v44, (uint64_t)v8, v7);
  else
    v45 = 0;
LABEL_60:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v45;
}

_QWORD *sub_22EC74940(uint64_t a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v13;
  const void **v14;
  char v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  char v19;
  const void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v40;
  unsigned int v41[24];
  unint64_t v42;
  void *__p;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;

  v8 = a5;
  v47 = *MEMORY[0x24BDAC8D0];
  v42 = a5;
  sub_22F1DB478(a1 + 10096, a5, a4, (uint64_t)nullsub_161, (uint64_t)v41, (uint64_t)nullsub_914, (uint64_t)&__p);
  sub_22EC74DD4((unsigned int *)a1, v8, a4, *(_QWORD *)(a1 + 216), 0);
  v13 = v8;
  do
  {
    v14 = (const void **)v13;
    v13 = *(_QWORD *)(v13 + 32);
  }
  while (v13);
  v15 = *((_BYTE *)v14 + 23);
  if (v15 >= 0)
    v16 = v14;
  else
    v16 = *v14;
  if (v15 >= 0)
    v17 = v15 & 0x7F;
  else
    v17 = (size_t)v14[1];
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_BYTE *)(v18 + 519);
  if (v19 >= 0)
    v20 = (const void *)(v18 + 496);
  else
    v20 = *(const void **)(v18 + 496);
  v21 = v19 & 0x7F;
  if (v19 < 0)
    v21 = *(_QWORD *)(v18 + 504);
  if (v17 == v21 && (!v17 || !memcmp(v16, v20, v17)))
  {
    if ((*(_BYTE *)(v18 + 240) & 0xE0) != 0)
    {
      v22 = 3950;
    }
    else
    {
      if ((*(_QWORD *)(v18 + 20) & 0x400000000000) != 0)
        goto LABEL_24;
      v22 = 3941;
    }
    sub_22E8FCA40((_QWORD *)a1, a4, v22, 0, (uint64_t)v41);
    sub_22F1D8A24((uint64_t *)v8, 0, &__p);
    v23 = sub_22F2F3734((uint64_t)v41, &__p);
    sub_22E90749C(v23, (_BYTE *)(*(_QWORD *)(a1 + 72) + 496));
    if (v46 < 0)
      operator delete(__p);
    sub_22E903BEC(v41);
  }
LABEL_24:
  __p = &v45;
  v44 = 0x200000000;
  if (a7)
  {
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x800000000000) == 0 || *(_QWORD *)(v8 + 32))
    {
      v24 = 0;
      if (v8 && (_DWORD)a7)
      {
        v24 = 0;
        v26 = a7 - 1;
        v27 = (int *)(a6 + 8);
        v28 = v8;
        do
        {
          v28 = *(_QWORD *)(v28 + 32);
          v30 = *v27;
          v27 += 4;
          v29 = v30;
          if (v24 >= HIDWORD(v44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v24 = v44;
          }
          *((_DWORD *)__p + v24) = v29;
          v24 = v44 + 1;
          LODWORD(v44) = v44 + 1;
          if (!v26)
            break;
          --v26;
        }
        while (v28);
      }
    }
    else
    {
      v24 = 1;
      v45 = *(_DWORD *)(a6 + 8);
      LODWORD(v44) = 1;
    }
  }
  else
  {
    v24 = 0;
    if (v8)
    {
      v25 = v8;
      do
      {
        if (v24 >= HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v24 = v44;
        }
        *((_DWORD *)__p + v24) = 0;
        v24 = v44 + 1;
        LODWORD(v44) = v44 + 1;
        v25 = *(_QWORD *)(v25 + 32);
      }
      while (v25);
    }
  }
  v31 = sub_22F3ADBD8(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a2, v8, (int *)__p, v24);
  sub_22EFCCFA0(*(_QWORD *)(a1 + 216), (unint64_t)v31);
  v32 = *(_DWORD *)(a1 + 8992);
  if (v32)
    sub_22EF5934C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v32 - 48), (uint64_t)v31);
  v33 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(v33 + 20);
  if ((v34 & 0x800000000000) != 0 && a3 && *(_DWORD *)(v8 + 28) == 4)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xD10u, 0, (uint64_t)v41);
    v40 = __PAIR64__(*(_DWORD *)(a6 + 16 * a7 - 8), a3);
    sub_22E8906A0((uint64_t)v41, (uint64_t *)&v40);
LABEL_58:
    sub_22E903BEC(v41);
    goto LABEL_59;
  }
  v35 = *(_DWORD *)(a1 + 8992);
  if (v35)
  {
    v36 = *(_QWORD *)(a1 + 8984) + 56 * v35;
    if (*(_BYTE *)(v36 - 40) || (v34 & 0x800000000000) != 0 && *(_DWORD *)(*(_QWORD *)(v36 - 48) + 28) == 5)
    {
      if (a3 || sub_22EC75118(v31[2]))
      {
        sub_22F33AA10(*(_QWORD *)(v36 - 48) + 1472, v8, 0);
      }
      else
      {
        sub_22E6D6C48(*(_QWORD *)(v36 - 48) + 1360, (uint64_t *)&v42);
        v8 = v42;
      }
      goto LABEL_59;
    }
  }
  if (a3)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xD0Fu, 0, (uint64_t)v41);
    v37 = *(_DWORD *)(a1 + 8992);
    if (v37)
      LOBYTE(v37) = *(_BYTE *)(*(_QWORD *)(a1 + 8984) + 56 * v37 - 38) == 0;
    LOBYTE(v40) = v37;
    sub_22E894E38((uint64_t)v41, (unsigned __int8 *)&v40);
    goto LABEL_58;
  }
  if ((*(_BYTE *)(v33 + 240) & 0xE0) != 0)
    sub_22F1502C8((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 104) + 488));
LABEL_59:
  sub_22E3BA850(a1 + 9904, (const void *)v8);
  if (__p != &v45)
    free(__p);
  return v31;
}

unsigned int *sub_22EC74DD4(unsigned int *result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v6;
  unsigned int *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _BYTE v26[96];
  void *__p[2];
  char v28;
  unsigned int v29[24];
  unint64_t v30;

  v6 = a4;
  v9 = result;
  v10 = 0;
  v30 = a4;
  if (!a4 || (*(_WORD *)(a4 + 8) & 0x7F) != 0xC)
    goto LABEL_28;
  v11 = *(_DWORD *)(a4 + 8);
  if ((v11 & 0xE000) == 0x2000)
  {
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 - 40) + 16))(a4 - 40);
    v10 = (int)result;
  }
  else
  {
    v10 = 0;
  }
  v12 = v11 & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 != 83)
    {
      if (v12 == 71)
      {
        v13 = -56;
        goto LABEL_22;
      }
      if (v12 == 81)
        goto LABEL_22;
LABEL_17:
      v14 = v12 - 52;
      v15 = v12 - 33 >= 5;
      v16 = -48;
      if (!v15)
        v16 = -64;
      if (v14 >= 6)
        v13 = v16;
      else
        v13 = -72;
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_16;
    if (v12 != 16)
    {
      if (((1 << v12) & 0x1066) != 0)
        goto LABEL_22;
      if (v12 != 24)
      {
LABEL_16:
        if (v12 == 70)
        {
          v13 = -64;
          goto LABEL_22;
        }
        goto LABEL_17;
      }
    }
    v13 = -48;
  }
LABEL_22:
  for (i = *(_QWORD *)(v6 + v13 + 16); ; i = *(_QWORD *)(v6 - 24))
  {
    v6 = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 4) != 0)
      v6 = *(_QWORD *)v6;
    v30 = v6;
LABEL_28:
    v18 = *(_WORD *)(v6 + 8) & 0x7F;
    if (v18 != 5 && v18 != 12)
      break;
  }
  if (v18 != 83)
  {
    v21 = 3942;
    if (a5)
    {
      if (sub_22EC6224C((uint64_t)v9, (_QWORD *)a2, 0))
        v21 = 5294;
      else
        v21 = 3942;
    }
    sub_22E8FCA40(v9, a3, v21, 0, (uint64_t)v29);
    sub_22F1D8A24((uint64_t *)a2, 0, __p);
    v22 = sub_22F2F3734((uint64_t)v29, __p);
    sub_22E894FB4(v22, (uint64_t *)&v30);
    if (v28 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v29);
    v23 = *(_WORD *)(v30 + 8) & 0x7F;
    v24 = -40;
    if (v23 > 0x46)
    {
      if (v23 != 83)
      {
        if (v23 == 71)
        {
          v24 = -56;
          goto LABEL_62;
        }
        if (v23 == 81)
          goto LABEL_62;
LABEL_57:
        if (v23 - 52 < 6)
        {
          v24 = -72;
        }
        else
        {
          v24 = -48;
          if (v23 - 33 < 5)
            v24 = -64;
        }
      }
    }
    else
    {
      if (v23 > 0x18)
        goto LABEL_56;
      if (v23 != 16)
      {
        if (((1 << v23) & 0x1066) != 0)
          goto LABEL_62;
        if (v23 != 24)
        {
LABEL_56:
          if (v23 == 70)
          {
            v24 = -64;
            goto LABEL_62;
          }
          goto LABEL_57;
        }
      }
      v24 = -48;
    }
LABEL_62:
    v25 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v30 + v24) + 16))(v30 + v24);
    sub_22E8FCA40(v9, v25, 0x16B8u, 0, (uint64_t)v29);
    sub_22E894FB4((uint64_t)v29, (uint64_t *)&v30);
    v20 = v29;
    return sub_22E903BEC(v20);
  }
  if ((*(_WORD *)(a2 + 1344) & 0x80) == 0 && v10)
  {
    sub_22E8FCA40(v9, a3, 0x14ADu, 0, (uint64_t)v29);
    sub_22F1D8A24((uint64_t *)a2, 0, __p);
    sub_22F2F3734((uint64_t)v29, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v29);
    sub_22E8FCA40(v9, v10, 0x15F3u, 0, (uint64_t)v26);
    v20 = (unsigned int *)v26;
    return sub_22E903BEC(v20);
  }
  return result;
}

unint64_t sub_22EC75118(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((a1 & 4) != 0)
    v1 = *(_QWORD *)(v1 + 8);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_WORD *)(v1 + 8) & 0x7F;
    if (v2 == 5)
      return v1 - 40;
    v3 = -40;
    if ((*(_WORD *)(v1 + 8) & 0x7Fu) > 0x46)
    {
      if (v2 != 83)
      {
        if (v2 == 71)
        {
          v3 = -56;
        }
        else if (v2 != 81)
        {
          goto LABEL_16;
        }
      }
    }
    else
    {
      if (v2 > 0x18)
        goto LABEL_15;
      if (v2 == 16)
        goto LABEL_8;
      if (((1 << v2) & 0x1066) != 0)
        goto LABEL_22;
      if (v2 == 24)
      {
LABEL_8:
        v3 = -48;
      }
      else
      {
LABEL_15:
        if (v2 != 70)
        {
LABEL_16:
          v4 = v2 - 52;
          if (v2 - 33 >= 5)
            v5 = -48;
          else
            v5 = -64;
          if (v4 >= 6)
            v3 = v5;
          else
            v3 = -72;
          goto LABEL_22;
        }
        v3 = -64;
      }
    }
LABEL_22:
    v6 = *(_QWORD *)(v1 + v3 + 16);
    v1 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
}

uint64_t sub_22EC751FC(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  char v13;
  char v14;

  if (*(_DWORD *)(a1 + 8352) == 2)
  {
    v5 = a2;
    if (sub_22F2A4A8C(*(_QWORD *)(a1 + 112), a2))
      goto LABEL_11;
  }
  else
  {
    v5 = a2;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v7 = sub_22E3CD31C((uint64_t *)(v6 + 72), v6);
  v8 = v7 + 40;
  if (v7)
    v9 = v7 + 40;
  else
    v9 = 0;
  v10 = sub_22EFC47F4(*(_QWORD *)(a1 + 88), v9, v5, a3, v5);
  v11 = *(_DWORD *)(a1 + 8992);
  if (v11)
    sub_22EF5934C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v11 - 48), v10);
  sub_22EFCCFA0(v8, v10);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96), v10);
LABEL_11:
  (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 112) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 112), a3, 1, v5);
  result = sub_22F1DB478(a1 + 10096, a3, v5, (uint64_t)nullsub_161, (uint64_t)&v14, (uint64_t)nullsub_914, (uint64_t)&v13);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 240) & 0xE0) != 0)
    return sub_22F1502C8((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 104) + 488));
  return result;
}

uint64_t sub_22EC75368(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int *v14;
  uint64_t v16;
  int v17;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE v26[96];
  unsigned int v27[24];
  _BYTE v28[96];
  unsigned int v29[24];
  _BYTE v30[96];
  unsigned int v31[24];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _BYTE v36[23];
  __int16 v37;
  unsigned int v38[26];

  v8 = sub_22F3ADD2C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a3);
  *(_DWORD *)(v8 + 72) = a4;
  sub_22EFCCFA0(*(_QWORD *)(a1 + 216), v8);
  if (v8)
    v9 = v8 + 40;
  else
    v9 = 0;
  *(_QWORD *)(a1 + 216) = v9;
  *(_QWORD *)(a2 + 360) = v9;
  v10 = *(_DWORD *)(a1 + 8992);
  if (!v10
    || ((v11 = *(_QWORD *)(a1 + 8984) + 56 * v10, v12 = *(_DWORD *)(*(_QWORD *)(v11 - 48) + 28), v12 <= 6)
      ? (v13 = ((1 << v12) & 0x5A) == 0)
      : (v13 = 1),
        v13))
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xD0Fu, 0, (uint64_t)v38);
    LODWORD(v32) = 0;
    sub_22E8900C4((uint64_t)v38, (int *)&v32);
LABEL_13:
    v14 = v38;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(v11 - 40))
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xD0Fu, 0, (uint64_t)v38);
    LODWORD(v32) = 1;
    sub_22E8900C4((uint64_t)v38, (int *)&v32);
    sub_22E903BEC(v38);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 56), 0x16E4u, 0, (uint64_t)v38);
    v16 = *(unsigned int *)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 56);
    v34 = 0;
    v35 = 0;
    v32 = v16 | (v16 << 32);
    v33 = 0;
    memset(&v36[8], 0, 15);
    strcpy(v36, "export ");
    v37 = 7;
    sub_22E890748((uint64_t)v38, &v32);
    if ((char)v37 < 0)
      operator delete(*(void **)v36);
    goto LABEL_13;
  }
  if (v12 == 6)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0xD0Bu, 0, (uint64_t)v31);
    sub_22E903BEC(v31);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 56), 0x177Eu, 0, (uint64_t)v30);
    v14 = (unsigned int *)v30;
    goto LABEL_14;
  }
  do
  {
    v17 = *(_WORD *)(v9 + 8) & 0x7F;
    if (v17 != 16)
      goto LABEL_27;
    if (*(_QWORD *)(v9 - 8) < 8uLL || (*(_QWORD *)(v9 - 8) & 7) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a3, 0xD12u, 0, (uint64_t)v29);
      sub_22E903BEC(v29);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 - 24), 0x1533u, 0, (uint64_t)v28);
      v14 = (unsigned int *)v28;
      goto LABEL_14;
    }
    sub_22E3BA850(a1 + 10000, (const void *)(v9 - 48));
    if (!v19)
      break;
    v17 = *(_WORD *)(v9 + 8) & 0x7F;
LABEL_27:
    v20 = -40;
    if (v17 > 70)
    {
      switch(v17)
      {
        case 'S':
          goto LABEL_44;
        case 'G':
          v20 = -56;
          goto LABEL_44;
        case 'Q':
          goto LABEL_44;
      }
    }
    else
    {
      if (v17 <= 0x18)
      {
        if (v17 == 16)
          goto LABEL_30;
        if (((1 << v17) & 0x1066) != 0)
          goto LABEL_44;
        if (v17 == 24)
        {
LABEL_30:
          v20 = -48;
          goto LABEL_44;
        }
      }
      if (v17 == 70)
      {
        v20 = -64;
        goto LABEL_44;
      }
    }
    v21 = v17 - 52;
    if ((v17 - 33) >= 5)
      v22 = -48;
    else
      v22 = -64;
    if (v21 >= 6)
      v20 = v22;
    else
      v20 = -72;
LABEL_44:
    v23 = *(_QWORD *)(v9 + v20 + 16);
    v9 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 4) != 0)
      v9 = *(_QWORD *)(v9 + 8);
  }
  while (v9);
  v24 = sub_22EC75118(*(_QWORD *)(v8 + 16));
  if (v24)
  {
    v25 = v24;
    sub_22E8FCA40((_QWORD *)a1, a3, 0xD13u, 0, (uint64_t)v27);
    sub_22E903BEC(v27);
    if (*(_DWORD *)(v25 + 72))
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v25 + 24), 0x15EBu, 0, (uint64_t)v26);
      v14 = (unsigned int *)v26;
LABEL_14:
      sub_22E903BEC(v14);
    }
    sub_22EFC77E8(v8, 1);
  }
  else
  {
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  return v8;
}

uint64_t sub_22EC75740(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v6;
  unint64_t i;

  if (a4)
    *(_DWORD *)(a3 + 72) = a4;
  a1[27] = sub_22EA044C0((uint64_t)a1, a1[27]);
  if ((*(_BYTE *)(a3 + 28) & 0x80) == 0)
  {
    if (*(_DWORD *)(a3 + 72))
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    else
      v6 = 0;
    if ((*(_WORD *)(a3 + 48) & 0x80) != 0)
      sub_22EFCC320(a3 + 40);
    for (i = *(_QWORD *)(a3 + 56); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (sub_22EC757F8(a1, i, v6))
        sub_22EC75B58((uint64_t)a1, 5);
    }
  }
  return a3;
}

uint64_t sub_22EC757F8(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  char v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v26[24];
  unsigned int v27[25];
  _BOOL4 v28;
  unsigned int v29[24];
  unsigned int v30[24];
  uint64_t v31;

  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v6 > 0x2B)
  {
    if (v6 == 44)
    {
      v7 = 3;
    }
    else
    {
      if (v6 != 82)
        goto LABEL_11;
      v7 = 1;
    }
  }
  else if (v6 == 4)
  {
    v7 = 0;
  }
  else
  {
    if (v6 != 7)
      goto LABEL_11;
    v7 = 2;
  }
  sub_22EC75B58((uint64_t)a1, v7);
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
LABEL_11:
  if (v6 - 13 >= 0x3E)
    v8 = 0;
  else
    v8 = a2;
  v31 = v8;
  if (v8 && *(_QWORD *)(v8 + 40))
  {
    v9 = sub_22EFB948C(v8);
    if (v9 == 4 || v9 == 1)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v8 + 24), 0xD0Cu, 0, (uint64_t)v30);
      sub_22E890024((uint64_t)v30, &v31);
      sub_22E903BEC(v30);
      if (a3)
      {
        sub_22E8FCA40(a1, a3, 0x15EBu, 0, (uint64_t)v29);
        sub_22E903BEC(v29);
      }
    }
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_DWORD *)(a2 + 28);
  if ((v12 & 0x7E) == 0x2E)
  {
    v13 = v12 & 0x7F;
    v14 = a2;
    if (v13 <= 0x2F)
    {
      v14 = a2;
      if (((1 << v13) & 0xC00000060000) != 0)
        v14 = sub_22EFBAEA4(a2);
    }
    v31 = v14;
    v15 = sub_22EFB948C(v14);
    if (v15 != 5)
    {
      if (v15 == 4)
      {
        v16 = 0;
LABEL_34:
        sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xD11u, 0, (uint64_t)v30);
        v28 = v16;
        v17 = sub_22E8900C4((uint64_t)v30, (int *)&v28);
        sub_22E890024(v17, &v31);
        sub_22E903BEC(v30);
        sub_22E8FCA40(a1, *(_DWORD *)(v31 + 24), 0x1812u, 0, (uint64_t)v27);
        sub_22E903BEC(v27);
        if (a3)
        {
          sub_22E8FCA40(a1, a3, 0x15EBu, 0, (uint64_t)v26);
          sub_22E903BEC(v26);
        }
        goto LABEL_36;
      }
      if (v15 != 1)
      {
LABEL_36:
        v12 = *(_DWORD *)(a2 + 28);
        goto LABEL_37;
      }
    }
    v16 = v15 != 1;
    goto LABEL_34;
  }
LABEL_37:
  v18 = v12 & 0x7F;
  if (v18 <= 0x39 && ((1 << v18) & 0x3F0003E01011066) != 0 || v18 - 70 <= 0xD && ((1 << (v18 - 70)) & 0x2803) != 0)
  {
    v19 = sub_22EFCAE04(a2);
    v20 = v19;
    if (v18 == 16)
    {
      if ((*(_WORD *)(v19 + 8) & 0x80) != 0)
        sub_22EFCC320(v19);
      if (!*(_QWORD *)(v20 + 16))
      {
        if ((v11 & 1) == 0)
          sub_22EC75B58((uint64_t)a1, 4);
        return 0;
      }
    }
  }
  else
  {
    if (v18 - 19 > 4)
      return 0;
    v20 = sub_22EFCAE04(a2);
  }
  v21 = *(_WORD *)(sub_22EFCBB30(v20) + 8) & 0x7F;
  if (v21 != 83 && v21 != 16 || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x21)
    return 0;
  if ((*(_WORD *)(v20 + 8) & 0x80) != 0)
    sub_22EFCC320(v20);
  v22 = *(_QWORD *)(v20 + 16);
  if (!v22)
    return 1;
  v23 = a3;
  LODWORD(v24) = 1;
  do
  {
    v24 = v24 & sub_22EC757F8(a1, v22, v23);
    v22 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v22);
  return v24;
}

void sub_22EC75B58(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

unsigned int *sub_22EC75B98(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8[25];
  unsigned int v9;
  unsigned int v10[36];

  if (v3)
    v6 = 5237;
  else
    v6 = 3341;
  sub_22E8FCA40(v4, a3, v6, 0, (uint64_t)v10);
  v9 = v5;
  sub_22E89519C((uint64_t)v10, &v9);
  result = sub_22E903BEC(v10);
  if (v3)
  {
    sub_22E8FCA40(v4, v3, 0x15EBu, 0, (uint64_t)v8);
    return sub_22E903BEC(v8);
  }
  return result;
}

unint64_t sub_22EC75C28(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F33AFD4(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F33AFD4(a1);
    }
  }
  return v2;
}

unint64_t sub_22EC75C90(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  int v13;
  unsigned int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int *v111;
  int v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD **v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD **v151;
  uint64_t v152;
  _QWORD **v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD **v156;
  _QWORD **v157;
  _QWORD **v158;
  _QWORD *v159;
  _QWORD **v160;
  uint64_t v161;
  _QWORD **v162;
  _QWORD *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  __int16 v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t *v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  _BYTE *v181;
  _BYTE *v182;
  uint64_t v183;
  int v184;
  _BYTE v185[128];
  unint64_t v186;
  _BYTE v187[96];
  uint64_t v188;
  char v189;
  unsigned int v190[24];
  uint64_t v191[12];
  uint64_t v192;
  uint64_t v193;
  unsigned int v194[24];
  unsigned int v195[24];
  unsigned int v196[24];
  unsigned int v197[24];
  int v198[24];
  int v199[24];
  uint64_t v200[13];

  v13 = a4;
  v16 = *a6;
  v17 = (*a6 >> 7) & 0x1FFFF;
  *(_WORD *)(a5 + 1088) = (*a6 >> 9) & 0x80 | *(_WORD *)(a5 + 1088) & 0xFF7F;
  v18 = sub_22EE8156C((uint64_t)a1, a5, a2, a4, a5, (uint64_t)a6, a7, a8);
  v186 = *v18;
  v19 = *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v19 & 8) != 0 && (*(_BYTE *)((v19 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) != 0)
  {
    v20 = v18;
    v177 = v17;
    sub_22E8FCA40(a1, a3, 0x11F7u, 0, (uint64_t)&v181);
    v21 = sub_22E8901B8((uint64_t)&v181, (uint64_t *)&v186);
    v22 = *(_QWORD *)(v186 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v23 == 39
      || ((v24 = *(_QWORD *)(v186 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v22 + 16) == 32)
       || v23 == 32 && (v24 = sub_22F10CF48(*(_QWORD *)(v186 & 0xFFFFFFFFFFFFFFF0))) != 0)
      && sub_22E509ED0(v24))
    {
      LODWORD(v25) = 1;
    }
    else
    {
      if (*(_BYTE *)(v22 + 16) == 32)
        goto LABEL_12;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      {
        LODWORD(v25) = 0;
        goto LABEL_14;
      }
      v25 = sub_22F10CF48(v22);
      v22 = v25;
      if (v25)
LABEL_12:
        LODWORD(v25) = sub_22E509F54(v22);
    }
LABEL_14:
    LODWORD(v200[0]) = v25 ^ 1;
    v26 = sub_22E8900C4(v21, (int *)v200);
    v199[0] = 2;
    sub_22E8900C4(v26, v199);
    sub_22E903BEC((unsigned int *)&v181);
    v17 = v177;
    v18 = v20;
  }
  if ((v16 & 0x71A00) != 0)
    goto LABEL_24;
  v27 = *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((*(_BYTE *)(*((_QWORD *)a1 + 9) + 246) & 6) == 0)
  {
    if ((v27 & 8) != 0)
    {
      v28 = dword_22F49470C[(*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7];
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if ((v27 & 8) == 0 || (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) != 0x10)
  {
LABEL_21:
    v28 = 0;
    goto LABEL_23;
  }
  v28 = 512;
LABEL_23:
  v17 |= v28;
LABEL_24:
  v29 = v17;
  v30 = v17 & 9;
  v31 = *((_QWORD *)a1 + 27);
  v32 = v31 - 48;
  if (v31)
    v33 = v31 - 48;
  else
    v33 = 0;
  v178 = v33;
  if (v31 && (*(_DWORD *)(v33 + 28) & 0x7F) == 0x13)
  {
    v34 = v186;
    if (*(_QWORD *)(v33 + 40) < 8uLL || (*(_QWORD *)(v33 + 40) & 7) != 0)
    {
      v36 = a6[6];
      v37 = a6[7];
      v38 = *a6;
      v193 = a7;
      v39 = *(_QWORD *)(v31 + 56);
      if (!v39)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v31 - 24), 0xC1Du, 0, (uint64_t)&v181);
        v40 = (unsigned int *)&v181;
LABEL_35:
        sub_22E903BEC(v40);
        return 0;
      }
      v172 = v37;
      v173 = v36;
      v174 = v18;
      v176 = v31;
      v175 = (v38 >> 7) & 0x1FFFF;
      v171 = v13;
      if (*(_DWORD *)(a5 + 40))
        v61 = 0;
      else
        v61 = *(_QWORD *)(a5 + 48);
      v170 = v38;
      if (v38 & 0x200000 | v29 & 0x4000)
        v62 = 2;
      else
        v62 = 1;
      v63 = sub_22F3B4908(v39, v61, v62);
      if (!v63)
      {
        v41 = sub_22EC770DC((uint64_t)a1, a2, v32, a3, v13, a5, v193, v173, a8, v172, SHIDWORD(v172), v30 != 1, v167, v29, v175, v34, v174, a9, v176);
        sub_22EC778EC(a1, v41);
        v43 = v29;
        if (!v41)
          return v41;
LABEL_161:
        v44 = v178;
        goto LABEL_41;
      }
      v64 = v63;
      v65 = *(_QWORD *)(v63 + 16);
      v66 = v65 & 0xFFFFFFFFFFFFFFF8;
      if ((v65 & 4) != 0)
        v66 = *(_QWORD *)v66;
      if ((*(_WORD *)(v66 + 8) & 0x7F) == 0x13)
      {
        v67 = v63;
        sub_22E8FCA40(a1, a3, 0xCD3u, 0, (uint64_t)v200);
        sub_22E903BEC((unsigned int *)v200);
        sub_22E8FCA40(a1, *(_DWORD *)(v67 + 24), 0x1780u, 0, (uint64_t)v199);
        v40 = (unsigned int *)v199;
        goto LABEL_35;
      }
      if (v30 == 1 || (v73 = *(_DWORD *)(v63 + 72), (v73 & 1) == 0))
      {
        v80 = 5083;
        if ((v29 & 8) != 0)
        {
          if ((*(_BYTE *)(v63 + 76) & 8) != 0)
            v80 = 5084;
          else
            v80 = 5083;
        }
        v81 = v63;
        sub_22E8FCA40(a1, a3, v80, 0, (uint64_t)v198);
        v192 = *(_QWORD *)(v39 + 40);
        sub_22E894538((uint64_t)v198, &v192);
        sub_22E903BEC((unsigned int *)v198);
        sub_22E8FCA40(a1, *(_DWORD *)(v81 + 24), 0x1780u, 0, (uint64_t)v197);
        v40 = v197;
        goto LABEL_35;
      }
      v74 = *(_QWORD *)(v63 + 80);
      v169 = v63;
      if (v74 == a7)
      {
        v76 = a8;
        v75 = a2;
      }
      else
      {
        v76 = a8;
        v75 = a2;
        if ((v170 & 0x100) != 0)
        {
          sub_22E8FCA40(a1, a3, 0x1B0Eu, 0, (uint64_t)v198);
          v192 = *(_QWORD *)(v169 + 80);
          v85 = sub_22E894538((uint64_t)v198, &v192);
          sub_22E894538(v85, &v193);
          sub_22E903BEC((unsigned int *)v198);
          sub_22E8FCA40(a1, *(_DWORD *)(v169 + 24), 0x1780u, 0, (uint64_t)v196);
          sub_22E903BEC(v196);
          v76 = a8;
          v75 = a2;
          v64 = v169;
          v74 = *(_QWORD *)(v169 + 80);
          v73 = *(_DWORD *)(v169 + 72);
        }
        v193 = v74;
        v29 |= 2u;
      }
      if ((v73 & 0x804) != 0)
        v86 = v73 & 0x630 | 0x804;
      else
        v86 = v73 & 0xE34;
      v87 = v29 & 0xE34;
      v88 = v29;
      if ((v29 & 0x804) != 0)
        v87 = v29 & 0x630 | 0x804;
      if (v86)
      {
        v89 = v176;
        v90 = v175;
        if (v87 == v86)
        {
          v43 = v29;
        }
        else
        {
          if ((v170 & 0x71A00) != 0)
          {
            v91 = v75;
            v92 = v76;
            sub_22E8FCA40(a1, a3, 0x1B09u, 0, (uint64_t)v195);
            sub_22E903BEC(v195);
            sub_22E8FCA40(a1, *(_DWORD *)(v169 + 24), 0x1780u, 0, (uint64_t)v194);
            sub_22E903BEC(v194);
            v76 = v92;
            v75 = v91;
            v64 = v169;
            v89 = v176;
          }
          v43 = v86 | v88 & 0xFFFFF1CB;
        }
      }
      else
      {
        v43 = v29;
        v89 = v176;
        v90 = v175;
      }
      if ((v43 & 0x200) != 0 && (*(_BYTE *)(v64 + 77) & 2) == 0)
      {
        v93 = (uint64_t *)(*(_QWORD *)(v64 + 56) & 0xFFFFFFFFFFFFFFF0);
        v94 = *v93;
        if (*v93 && *(_BYTE *)(v94 + 16) == 32)
        {
LABEL_151:
          v98 = v93[1];
          if ((v98 & 8) == 0 || (*(_WORD *)((v98 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
          {
            v99 = v76;
            sub_22E8FCA40(a1, a3, 0x1B0Cu, 0, (uint64_t)v191);
            sub_22E903BEC((unsigned int *)v191);
            sub_22E8FCA40(a1, *(_DWORD *)(v169 + 24), 0x1780u, 0, (uint64_t)v190);
            sub_22E903BEC(v190);
            v76 = v99;
            v75 = a2;
            v89 = v176;
          }
          goto LABEL_154;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
        {
          v95 = v75;
          v96 = v76;
          v97 = sub_22F10CF48(v94);
          v76 = v96;
          v75 = v95;
          v89 = v176;
          if (v97)
          {
            v93 = (uint64_t *)(*(_QWORD *)(v169 + 56) & 0xFFFFFFFFFFFFFFF0);
            goto LABEL_151;
          }
        }
      }
LABEL_154:
      v100 = sub_22EC770DC((uint64_t)a1, v75, v32, a3, v171, a5, v193, v173, v76, v172, SHIDWORD(v172), 1, v167, v43, v90, v34, v174, a9, v89);
      v101 = v169;
      v41 = v100;
      v102 = *(_QWORD *)((*(_QWORD *)(v169 + 56) & 0xFFFFFFFFFFFFFFF0) + 8);
      v103 = v102 | *(_QWORD *)(v169 + 56) & 7;
      v104 = *(_QWORD *)((*(_QWORD *)(v100 + 56) & 0xFFFFFFFFFFFFFFF0) + 8);
      v105 = v104 | *(_QWORD *)(v100 + 56) & 7;
      if (v103 != v105)
      {
        v189 = 0;
        v192 = 0;
        if (*(_BYTE *)(*(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF0) + 16) != 32
          || *(_BYTE *)(*(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF0) + 16) != 32
          || !sub_22ECFB880((uint64_t)a1, v105, v103, &v192, &v189)
          || v189)
        {
          sub_22E8FCA40(a1, a3, 0x1327u, 0, (uint64_t)v198);
          v188 = *(_QWORD *)(v41 + 56);
          sub_22E8901B8((uint64_t)v198, &v188);
          sub_22E903BEC((unsigned int *)v198);
          sub_22E8FCA40(a1, *(_DWORD *)(v169 + 24), 0x1780u, 0, (uint64_t)v187);
          v40 = (unsigned int *)v187;
          goto LABEL_35;
        }
        v101 = v169;
      }
      sub_22EC78BBC(a1, v101, v41, 1);
      sub_22EC778EC(a1, v41);
      goto LABEL_161;
    }
    v176 = *((_QWORD *)a1 + 27);
  }
  else
  {
    v176 = *((_QWORD *)a1 + 27);
    v34 = v186;
  }
  v42 = v30 != 1;
  v168 = v34;
  v43 = v29;
  v44 = v33;
  v45 = sub_22EC770DC((uint64_t)a1, a2, v33, a3, v13, a5, a7, a6[6], a8, a6[7], 0, v42, v167, v29, (*a6 >> 7) & 0x1FFFF, v168, v18, a9, 0);
  v41 = v45;
  if (a10)
    sub_22EFC80C4(v45, a10);
  if (v41)
  {
LABEL_41:
    v46 = *(_DWORD *)(v44 + 28);
    if ((*(_BYTE *)(v41 + 28) & 0x80) != 0)
      goto LABEL_181;
    v47 = v44;
    if ((~v43 & 9) == 0)
    {
      sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
      v68 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"readonly");
      sub_22F2F30F4(v68, (uint64_t)"readwrite");
      sub_22E903BEC((unsigned int *)&v181);
    }
    v48 = *(_QWORD *)(v41 + 56);
    if ((v43 & 0x630) != 0)
    {
      v49 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
      v50 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 != 10 && v50 != 32 && !sub_22F115064(v49) && !sub_22EC7DBF0(v41))
      {
        sub_22E8FCA40(a1, a3, 0x1010u, 0, (uint64_t)&v181);
        v51 = "copy";
        if ((v43 & 0x20) == 0)
          v51 = "retain (or strong)";
        if ((v43 & 0x200) != 0)
          v51 = "weak";
        v191[0] = (uint64_t)v51;
        sub_22E8AECC4((uint64_t)&v181, v191);
        sub_22E903BEC((unsigned int *)&v181);
        v43 &= 0xFFFFF9CF;
        sub_22EFC77E8(v41, 1);
      }
    }
    v52 = v43;
    if ((v43 & 0x804) == 4)
    {
      v53 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
      v54 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v54 != 10 && v54 != 32)
      {
        if (!sub_22F115064(v53))
          goto LABEL_61;
        v53 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
      }
      if (!sub_22F114FB4(v53))
      {
        sub_22E8FCA40(a1, a3, 0x1AACu, 0, (uint64_t)v200);
        sub_22E903BEC((unsigned int *)v200);
      }
    }
LABEL_61:
    if ((v43 & 4) == 0)
    {
      if ((v43 & 0x800) == 0)
      {
        if ((v43 & 0x20) == 0)
        {
          if ((~v43 & 0x210) != 0)
          {
            if ((~v43 & 0x600) != 0)
              goto LABEL_93;
            sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
            v55 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"strong");
            goto LABEL_89;
          }
          sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
          v82 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"retain");
          sub_22F2F30F4(v82, (uint64_t)"weak");
          sub_22E903BEC((unsigned int *)&v181);
          v43 &= ~0x10u;
LABEL_93:
          if ((v43 & 0x200) != 0)
          {
            for (i = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v107 + 40))
            {
              v107 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
              if (!v107)
                break;
              v106 = *(_DWORD *)(v107 + 16) >> 19;
              if ((v106 - 34) < 3)
                break;
              if (v106 == 33)
              {
                sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
                v166 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"nonnull");
                sub_22F2F30F4(v166, (uint64_t)"weak");
                sub_22E903BEC((unsigned int *)&v181);
                break;
              }
            }
          }
          if ((~v43 & 0x140) == 0)
          {
            sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
            v164 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"atomic");
            sub_22F2F30F4(v164, (uint64_t)"nonatomic");
            sub_22E903BEC((unsigned int *)&v181);
            v43 &= ~0x100u;
          }
          v108 = v43;
          if ((v43 & 0xE34) == 0)
          {
            v120 = v48 & 0xFFFFFFFFFFFFFFF0;
            v121 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
            v122 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v121 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v122 == 10 || v122 == 32)
            {
              if ((v108 & 1) != 0)
                goto LABEL_170;
            }
            else
            {
              v123 = sub_22F115064(v121);
              if ((v108 & 1) != 0 || !v123)
                goto LABEL_170;
            }
            if ((*(_WORD *)(*((_QWORD *)a1 + 9) + 148) & 2) != 0)
            {
              *(_DWORD *)(v41 + 72) |= 0x400u;
              goto LABEL_170;
            }
            v124 = *(_QWORD *)v120;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v120 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
            {
              v125 = v46 & 0x7E;
              if ((*(_BYTE *)(v124 + 16) == 32 || (v124 = sub_22F10CF48(v124)) != 0) && sub_22E509ED0(v124)
                || ((v126 = *(_QWORD *)v120) != 0 && *(_BYTE *)(v126 + 16) == 32
                 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v126 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
                 && (v126 = sub_22F10CF48(v126)) != 0)
                && sub_22E509F54(v126))
              {
                if (v125 != 22)
                  goto LABEL_170;
                v127 = *(_DWORD *)(*((_QWORD *)a1 + 9) + 244);
                v128 = v127 & 0x60000;
                if ((v127 & 0x60000) == 0)
                  goto LABEL_170;
              }
              else
              {
                if (v125 != 22)
                  goto LABEL_170;
                v127 = *(_DWORD *)(*((_QWORD *)a1 + 9) + 244);
                v128 = v127 & 0x60000;
              }
              if (v128 != 0x20000)
              {
                sub_22E8FCA40(a1, a3, 0x1AAFu, 0, (uint64_t)v198);
                sub_22E903BEC((unsigned int *)v198);
                v127 = *(_DWORD *)(*((_QWORD *)a1 + 9) + 244);
              }
              if ((v127 & 0x60000) == 0)
              {
                sub_22E8FCA40(a1, a3, 0x1AAEu, 0, (uint64_t)v197);
                sub_22E903BEC(v197);
              }
            }
          }
LABEL_170:
          if ((v108 & 0x21) == 0
            && (*(_DWORD *)(*((_QWORD *)a1 + 9) + 244) & 0x60000) == 0x20000
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 10)
          {
            v109 = v196;
            v110 = v196;
            v111 = a1;
            v112 = a3;
            v113 = 6829;
          }
          else
          {
            if ((v108 & 0x411) != 0x10
              || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) != 10)
            {
              goto LABEL_178;
            }
            v109 = v195;
            v110 = v195;
            v111 = a1;
            v112 = a3;
            v113 = 6832;
          }
          sub_22E8FCA40(v111, v112, v113, 0, (uint64_t)v110);
          sub_22E903BEC(v109);
LABEL_178:
          if ((~v108 & 0x81) == 0)
          {
            sub_22E8FCA40(a1, a3, 0x1AB1u, 0, (uint64_t)v194);
            sub_22E903BEC(v194);
          }
          v44 = v47;
          goto LABEL_181;
        }
        if ((v43 & 0x10) != 0)
        {
          sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
          v83 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"copy");
          sub_22F2F30F4(v83, (uint64_t)"retain");
          sub_22E903BEC((unsigned int *)&v181);
          v43 &= ~0x10u;
          if ((v52 & 0x400) == 0)
          {
LABEL_87:
            if ((v43 & 0x200) == 0)
              goto LABEL_93;
            goto LABEL_88;
          }
        }
        else if ((v43 & 0x400) == 0)
        {
          goto LABEL_87;
        }
        sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
        v84 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"copy");
        sub_22F2F30F4(v84, (uint64_t)"strong");
        sub_22E903BEC((unsigned int *)&v181);
        v43 &= ~0x400u;
        if ((v43 & 0x200) == 0)
          goto LABEL_93;
LABEL_88:
        sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
        v55 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"copy");
LABEL_89:
        sub_22F2F30F4(v55, (uint64_t)"weak");
        sub_22E903BEC((unsigned int *)&v181);
        v43 &= ~0x200u;
        goto LABEL_93;
      }
      if ((v43 & 0x20) != 0)
      {
        sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
        v77 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"unsafe_unretained");
        sub_22F2F30F4(v77, (uint64_t)"copy");
        sub_22E903BEC((unsigned int *)&v181);
        v43 &= ~0x20u;
        if ((v52 & 0x10) == 0)
        {
LABEL_81:
          if ((v43 & 0x400) == 0)
            goto LABEL_82;
          goto LABEL_118;
        }
      }
      else if ((v43 & 0x10) == 0)
      {
        goto LABEL_81;
      }
      sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
      v78 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"unsafe_unretained");
      sub_22F2F30F4(v78, (uint64_t)"retain");
      sub_22E903BEC((unsigned int *)&v181);
      v43 &= ~0x10u;
      if ((v43 & 0x400) == 0)
      {
LABEL_82:
        if ((v43 & 0x200) == 0)
          goto LABEL_93;
        goto LABEL_83;
      }
LABEL_118:
      sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
      v79 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"unsafe_unretained");
      sub_22F2F30F4(v79, (uint64_t)"strong");
      sub_22E903BEC((unsigned int *)&v181);
      v43 &= ~0x400u;
      if ((v43 & 0x200) == 0)
        goto LABEL_93;
LABEL_83:
      if ((*(_WORD *)(*((_QWORD *)a1 + 9) + 148) & 2) == 0)
        goto LABEL_93;
      sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
      v55 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"unsafe_unretained");
      goto LABEL_89;
    }
    if ((v43 & 0x20) != 0)
    {
      sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
      v70 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"assign");
      sub_22F2F30F4(v70, (uint64_t)"copy");
      sub_22E903BEC((unsigned int *)&v181);
      v43 &= ~0x20u;
      if ((v52 & 0x10) == 0)
      {
LABEL_69:
        if ((v43 & 0x400) == 0)
          goto LABEL_70;
        goto LABEL_108;
      }
    }
    else if ((v43 & 0x10) == 0)
    {
      goto LABEL_69;
    }
    sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
    v71 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"assign");
    sub_22F2F30F4(v71, (uint64_t)"retain");
    sub_22E903BEC((unsigned int *)&v181);
    v43 &= ~0x10u;
    if ((v43 & 0x400) == 0)
    {
LABEL_70:
      if ((v43 & 0x200) == 0)
        goto LABEL_73;
LABEL_71:
      if ((*(_WORD *)(*((_QWORD *)a1 + 9) + 148) & 2) != 0)
      {
        sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
        v69 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"assign");
        sub_22F2F30F4(v69, (uint64_t)"weak");
        sub_22E903BEC((unsigned int *)&v181);
        v43 &= ~0x200u;
      }
LABEL_73:
      if ((*(_BYTE *)(v41 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v41);
        v57 = *((unsigned int *)v56 + 2);
        if ((_DWORD)v57)
        {
          v58 = 8 * v57;
          v59 = *v56;
          while (*(_WORD *)(*(_QWORD *)v59 + 32) != 191)
          {
            v59 += 8;
            v58 -= 8;
            if (!v58)
              goto LABEL_93;
          }
        }
        else
        {
          v59 = *v56;
        }
        if (v59 != *v56 + 8 * v57)
        {
          sub_22E8FCA40(a1, a3, 0x19DDu, 0, (uint64_t)v199);
          sub_22E903BEC((unsigned int *)v199);
        }
      }
      goto LABEL_93;
    }
LABEL_108:
    sub_22E8FCA40(a1, a3, 0x100Fu, 0, (uint64_t)&v181);
    v72 = sub_22F2F30F4((uint64_t)&v181, (uint64_t)"assign");
    sub_22F2F30F4(v72, (uint64_t)"strong");
    sub_22E903BEC((unsigned int *)&v181);
    v43 &= ~0x400u;
    if ((v43 & 0x200) == 0)
      goto LABEL_73;
    goto LABEL_71;
  }
LABEL_181:
  v114 = (uint64_t *)(*(_QWORD *)(v41 + 56) & 0xFFFFFFFFFFFFFFF0);
  v115 = v114[1];
  if ((v115 & 8) != 0)
  {
    v116 = *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    if ((v116 & 0x1C0) != 0 && (*(_BYTE *)(v41 + 28) & 0x80) == 0)
    {
      v117 = *(_DWORD *)(v41 + 72);
      v118 = (v116 >> 6) & 7;
      v199[0] = v118;
      if ((v117 & 0x430) != 0)
      {
        v119 = 2;
        goto LABEL_212;
      }
      if ((v117 & 0x200) != 0)
      {
        v119 = 3;
      }
      else
      {
        if ((v117 & 0x800) != 0)
        {
LABEL_209:
          v119 = 1;
          goto LABEL_212;
        }
        if ((v117 & 4) == 0)
        {
LABEL_260:
          if (v118 == 3)
            v165 = 512;
          else
            v165 = 2048;
          if (v118 == 2)
            v165 = 1024;
          *(_DWORD *)(v41 + 72) = v117 | v165;
          goto LABEL_214;
        }
        v129 = *v114;
        v130 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v114 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v119 = 1;
        if (v130 != 10 && v130 != 32)
        {
          if (sub_22F115064(v129))
            goto LABEL_209;
          v117 = *(_DWORD *)(v41 + 72);
          goto LABEL_260;
        }
      }
LABEL_212:
      v198[0] = v119;
      if (v118 != v119)
      {
        sub_22EFC77E8(v41, 1);
        sub_22E8FCA40(a1, *(_DWORD *)(v41 + 24), 0xA65u, 0, (uint64_t)&v181);
        v200[0] = *(_QWORD *)(v41 + 40);
        v131 = sub_22E894538((uint64_t)&v181, v200);
        v132 = sub_22E8900C4(v131, v198);
        sub_22E8900C4(v132, v199);
        sub_22E903BEC((unsigned int *)&v181);
      }
    }
  }
LABEL_214:
  v181 = v185;
  v182 = v185;
  v183 = 16;
  v184 = 0;
  v133 = *(_DWORD *)(v44 + 28) & 0x7F;
  if (v133 == 22)
    v134 = v44;
  else
    v134 = 0;
  if (v176 && v133 == 22)
  {
    v143 = v134;
    while (1)
    {
      v144 = v143;
      v145 = sub_22F3B46CC(v143);
      if (!v145)
        break;
      v143 = v145;
      v146 = *(_QWORD *)(v41 + 40);
      if ((v146 & 7) != 0)
        v147 = 0;
      else
        v147 = v146 & 0xFFFFFFFFFFFFFFF8;
      v148 = sub_22F3B4790(v145, v147, (*(_DWORD *)(v41 + 72) & 0x4000) == 0);
      if (v148)
      {
        v149 = *(_QWORD *)(v143 + 40);
        if ((v149 & 7) != 0)
          v150 = 0;
        else
          v150 = v149 & 0xFFFFFFFFFFFFFFF8;
        sub_22F33B178(a1, v41, v148, v150, 0);
        v151 = (_QWORD **)sub_22F2590A8(v144);
        v152 = sub_22F25910C(v144);
        if (v151 != (_QWORD **)v152)
        {
          v153 = (_QWORD **)v152;
          do
          {
            v154 = *v151++;
            sub_22EC7780C(a1, v41, v154, (uint64_t)&v181);
          }
          while (v151 != v153);
        }
        goto LABEL_229;
      }
    }
    v160 = (_QWORD **)sub_22F276134(v134);
    v161 = sub_22F2761B0(v134);
    if (v160 != (_QWORD **)v161)
    {
      v162 = (_QWORD **)v161;
      do
      {
        v163 = *v160++;
        sub_22EC7780C(a1, v41, v163, (uint64_t)&v181);
      }
      while (v160 != v162);
    }
  }
  else
  {
    if (v133 == 19)
      v135 = v44;
    else
      v135 = 0;
    if (v176 && v133 == 19)
    {
      v136 = *(_QWORD *)(v135 + 40);
      if (v136 >= 8 && (v136 & 7) == 0)
      {
        v137 = *(_QWORD *)(v135 + 120) & 0xFFFFFFFFFFFFFFF8;
        v138 = *(unsigned int *)(v137 + 24);
        if ((_DWORD)v138)
        {
          v139 = *(_QWORD ***)(v137 + 16);
          v140 = 8 * v138;
          do
          {
            v141 = *v139++;
            sub_22EC7780C(a1, v41, v141, (uint64_t)&v181);
            v140 -= 8;
          }
          while (v140);
        }
      }
    }
    else
    {
      v155 = sub_22F259248(v44);
      if ((_QWORD **)v155 != v156)
      {
        v157 = (_QWORD **)v155;
        v158 = v156;
        do
        {
          v159 = *v157++;
          sub_22EC7780C(a1, v41, v159, (uint64_t)&v181);
        }
        while (v157 != v158);
      }
    }
  }
LABEL_229:
  v200[0] = v41;
  sub_22EA2DB10((unint64_t)a1, (unint64_t *)v200, 1uLL);
  if (v182 != v181)
    free(v182);
  return v41;
}

unint64_t sub_22EC770DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, int a10, int a11, char a12, __int16 a13, unsigned __int16 a14, int a15, unint64_t a16, uint64_t *a17, int a18, uint64_t a19)
{
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BOOL4 v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v63;
  unsigned int v65[24];
  unsigned int v66[24];
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  void *__p;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75[12];
  uint64_t v76;

  v23 = a16;
  if (*(_DWORD *)(a6 + 40))
    v24 = 0;
  else
    v24 = *(_QWORD *)(a6 + 48);
  v76 = v24;
  if ((a14 & 0x804) != 0)
  {
LABEL_8:
    v25 = 1;
    goto LABEL_9;
  }
  v25 = 0;
  if ((a14 & 0xE34) == 0 && a12)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
    {
      v40 = *(_QWORD *)(a16 & 0xFFFFFFFFFFFFFFF0);
      v41 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v42 = 1;
      if (v41 != 10 && v41 != 32)
        v42 = sub_22F115064(v40);
      v25 = !v42;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_9:
  v26 = a17;
  v63 = v25;
  if ((a14 & 4) == 0
    && (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 244) & 0x60000) != 0
    && v25 != 0
    && ((v28 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v28 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v28 = sub_22F10CF48(v28)) != 0))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v29)
      v30 = *(unsigned __int8 *)(v29 + 16) - 35 > 0xFFFFFFFD;
    else
      v30 = 0;
    if (!v30)
      v29 = sub_22F10CF48(v29);
    v31 = sub_22F272660(v29);
    if (v31)
    {
      v32 = v31;
      v33 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "NSCopying", 9uLL);
      v34 = sub_22EC65CE0((_QWORD *)a1, *(_QWORD *)(a1 + 3344), v33, a4, 11, 0);
      if (v34)
      {
        if (sub_22EFDDC98(v32, v34, 1, 0))
        {
          sub_22E8FCA40((_QWORD *)a1, a4, 0x1A04u, 0, (uint64_t)v75);
          sub_22E8BAE44((uint64_t)v75, &v76);
          sub_22E903BEC((unsigned int *)v75);
          v23 = a16;
        }
      }
    }
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 33 > 1)
    goto LABEL_48;
  v75[0] = *v26;
  v75[1] = (uint64_t)(v26 + 1);
  v35 = sub_22F1167E8(v75);
  v36 = sub_22F141A3C(v35, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a6 + 64), 0x127Du, 0, (uint64_t)v75);
  v70 = 0;
  v69 = 0;
  v72 = 0;
  v73 = 0x100000000000000;
  v67 = v36 | ((unint64_t)v36 << 32);
  v68 = 0;
  __p = (void *)42;
  v74 = 0;
  sub_22E890748((uint64_t)v75, &v67);
  if (SHIBYTE(v73) < 0)
    operator delete(__p);
  sub_22E903BEC((unsigned int *)v75);
  a16 = sub_22F36CC4C(*(_QWORD *)(a1 + 88), a16);
  v37 = *v26;
  for (i = *v26; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_41;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 <= 0x39)
        break;
LABEL_36:
      if (sub_22F115668(i))
        v37 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_47;
    }
    if (v39 == 24)
      goto LABEL_46;
    if (v39 == 26)
      break;
    if (((1 << v39) & 0x20000000200003CLL) == 0)
      goto LABEL_36;
LABEL_41:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_41;
LABEL_46:
  v37 = i;
LABEL_47:
  v43 = sub_22F115668(v37);
  v26 = sub_22EF579A8(*(_QWORD *)(a1 + 88), a16, v43);
  v23 = a16;
LABEL_48:
  if (a3)
    v44 = a3 + 48;
  else
    v44 = 0;
  sub_22F3B6F60(*(_QWORD *)(a1 + 88), v44, *(_DWORD *)(a6 + 64), v76, a4, a5, v23, (uint64_t)v26, 0);
  v46 = v45;
  if ((((unsigned __int16)a15 | a14) & 0x4000) != 0)
    v47 = 2;
  else
    v47 = 1;
  v48 = sub_22EFDA4F0(v44, v76, v47);
  if (v48)
  {
    v49 = v48;
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v46 + 24), 0xCD3u, 0, (uint64_t)v66);
    sub_22E903BEC(v66);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v49 + 24), 0x1780u, 0, (uint64_t)v65);
    sub_22E903BEC(v65);
    sub_22EFC77E8(v46, 1);
  }
  else
  {
    v50 = a19;
    sub_22EFCCFA0(v44, v46);
    if (v50)
      sub_22EFC80C4(v46, v50);
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 < 4
    || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 <= 1)
  {
    sub_22E8FCA40((_QWORD *)a1, a4, 0x11DEu, 0, (uint64_t)v75);
    sub_22E8901B8((uint64_t)v75, (uint64_t *)&a16);
    sub_22E903BEC((unsigned int *)v75);
    sub_22EFC77E8(v46, 1);
  }
  *(_QWORD *)(v46 + 80) = a7;
  *(_QWORD *)(v46 + 88) = a9;
  *(_DWORD *)(v46 + 96) = a8;
  *(_DWORD *)(v46 + 100) = a10;
  *(_DWORD *)(v46 + 76) = *(_DWORD *)(v46 + 76) & 0xFFFE0000 | a15 & 0x1CFFF;
  sub_22EA7E768((_QWORD *)a1, a2, v46, a6);
  if ((a14 & 1) != 0)
    *(_DWORD *)(v46 + 72) |= 1u;
  if ((a14 & 2) == 0)
  {
    if ((a14 & 0x80) == 0)
      goto LABEL_65;
LABEL_89:
    *(_DWORD *)(v46 + 72) |= 0x80u;
    if (a12)
      goto LABEL_90;
LABEL_66:
    if ((a14 & 0x10) == 0)
      goto LABEL_67;
LABEL_91:
    *(_DWORD *)(v46 + 72) |= 0x10u;
    if ((a14 & 0x400) != 0)
      goto LABEL_92;
LABEL_68:
    if ((a14 & 0x200) == 0)
      goto LABEL_69;
LABEL_93:
    *(_DWORD *)(v46 + 72) |= 0x200u;
    if ((a14 & 0x20) == 0)
      goto LABEL_71;
LABEL_70:
    *(_DWORD *)(v46 + 72) |= 0x20u;
    goto LABEL_71;
  }
  *(_DWORD *)(v46 + 72) |= 2u;
  if ((a14 & 0x80) != 0)
    goto LABEL_89;
LABEL_65:
  if (!a12)
    goto LABEL_66;
LABEL_90:
  *(_DWORD *)(v46 + 72) |= 8u;
  if ((a14 & 0x10) != 0)
    goto LABEL_91;
LABEL_67:
  if ((a14 & 0x400) == 0)
    goto LABEL_68;
LABEL_92:
  *(_DWORD *)(v46 + 72) |= 0x400u;
  if ((a14 & 0x200) != 0)
    goto LABEL_93;
LABEL_69:
  if ((a14 & 0x20) != 0)
    goto LABEL_70;
LABEL_71:
  v51 = a18;
  v52 = a14 & 0x800;
  if ((a14 & 0x800) != 0)
    *(_DWORD *)(v46 + 72) |= 0x800u;
  v53 = *(_DWORD *)(v46 + 72);
  if (v63)
    v53 |= 4u;
  if ((a14 & 0x40) != 0)
    v54 = 64;
  else
    v54 = 256;
  v55 = v53 | v54;
  v56 = v55 | (v52 >> 9);
  if ((a14 & 0x800) != 0)
    v55 |= v52 >> 9;
  if (v63)
    v57 = v56 | 0x800;
  else
    v57 = v56;
  if (v63)
    v55 = v56 | 0x800;
  *(_DWORD *)(v46 + 72) = v55;
  if (v51 == 21)
  {
    v58 = 0x20000;
LABEL_96:
    *(_DWORD *)(v46 + 76) = *(_DWORD *)(v46 + 76) & 0xFFF9FFFF | v58;
  }
  else if (v51 == 22)
  {
    v58 = 0x40000;
    goto LABEL_96;
  }
  if ((a14 & 0x7000) != 0)
    *(_DWORD *)(v46 + 72) = v57 | a14 & 0x7000;
  if ((a14 & 0x8000) != 0 || sub_22EB0CE48(a3))
  {
    if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x17)
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v46 + 24), 0xFF7u, 0, (uint64_t)v75);
      LOBYTE(v67) = 1;
      sub_22E894E38((uint64_t)v75, (unsigned __int8 *)&v67);
      goto LABEL_106;
    }
    if (((1 << *(_DWORD *)(*(_QWORD *)(a1 + 72) + 400)) & 0x1D) != 0)
    {
      *(_DWORD *)(v46 + 72) |= 0x8000u;
    }
    else
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v46 + 24), 0x1A9Fu, 0, (uint64_t)v75);
      v67 = *(_QWORD *)(v46 + 40);
      sub_22E894538((uint64_t)v75, (uint64_t *)&v67);
LABEL_106:
      sub_22E903BEC((unsigned int *)v75);
    }
  }
  return v46;
}

uint64_t sub_22EC7780C(unsigned int *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  result = sub_22E3BA850(a4, a3);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 40);
    if ((v10 & 7) != 0)
      v11 = 0;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = sub_22F3B4790((uint64_t)a3, v11, (*(_DWORD *)(a2 + 72) & 0x4000) == 0);
    if (v12)
    {
      v17 = a3[5];
      if ((v17 & 7) != 0)
        v18 = 0;
      else
        v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      return sub_22F33B178(a1, a2, v12, v18, 1);
    }
    else
    {
      result = sub_22F259248((uint64_t)a3);
      if ((uint64_t *)result != v13)
      {
        v14 = (uint64_t *)result;
        v15 = v13;
        do
        {
          v16 = *v14++;
          result = sub_22EC7780C(a1, a2, v16, a4);
        }
        while (v14 != v15);
      }
    }
  }
  return result;
}

void sub_22EC778EC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int i;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int ii;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int j;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int *v61;
  _BYTE *v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int k;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int m;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned __int16 v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int n;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  int v151;
  int v152;
  __int16 v153;
  _BYTE v154[96];
  uint64_t v155;
  unsigned int v156[24];
  _BYTE v157[96];
  unsigned int v158[24];
  uint64_t v159;
  BOOL v160;
  BOOL v161;
  __int128 v162;
  uint64_t v163;
  int v164;
  __int16 v165;
  unsigned __int8 v166;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  if (v5)
    v6 = (uint64_t)(v5 - 6);
  else
    v6 = 0;
  if ((*(_BYTE *)(v6 + 28) & 0x80) == 0)
  {
    v7 = *(_DWORD *)(a2 + 72);
    v8 = sub_22EFDA1A0(v6, *(_QWORD *)(a2 + 80), (v7 & 0x4000) == 0, 0);
    if (v8
      || ((v9 = *(_DWORD *)(v6 + 28) & 0x7F, v9 == 19) ? (v10 = v6) : (v10 = 0),
          !v5
       || v9 != 19
       || (*(_QWORD *)(v10 + 40) >= 8uLL ? (v11 = (*(_QWORD *)(v10 + 40) & 7) == 0) : (v11 = 0), v11)))
    {
      if ((v7 & 0x4000) == 0)
        goto LABEL_21;
    }
    else
    {
      v12 = *(_QWORD *)(v10 + 104);
      v13 = *(_QWORD *)(a2 + 80);
      if ((v7 & 0x4000) == 0)
      {
        v8 = sub_22EFDA1A0(v12, v13, 1, 0);
LABEL_21:
        v14 = 1;
LABEL_24:
        v15 = sub_22EFDA1A0(v6, *(_QWORD *)(a2 + 88), v14, 0);
        if (!v15)
        {
          v16 = *(_DWORD *)(v6 + 28) & 0x7F;
          v17 = v16 == 19 ? v6 : 0;
          if (v5 && v16 == 19)
          {
            if (*(_QWORD *)(v17 + 40) >= 8uLL && (*(_QWORD *)(v17 + 40) & 7) == 0)
              v15 = 0;
            else
              v15 = sub_22EFDA1A0(*(_QWORD *)(v17 + 104), *(_QWORD *)(a2 + 88), (v7 & 0x4000) == 0, 0);
          }
        }
        sub_22F33B4E0(a1, a2, v8, *(_DWORD *)(a2 + 24));
        if (v8)
          goto LABEL_98;
        if (!v5)
          goto LABEL_98;
        if ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x13)
          goto LABEL_98;
        v19 = sub_22EFDBA90(*(_QWORD *)(v6 + 104), *(_QWORD *)(a2 + 80), (v7 & 0x4000) == 0, 1, 0, v6);
        if (!v19)
          goto LABEL_98;
        v20 = v19;
        if (sub_22EFDBD9C(v19))
        {
LABEL_41:
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xFF2u, 0, (uint64_t)&v162);
          v21 = 0;
          if ((*(_DWORD *)(a2 + 72) & 0x18000) == 0x8000)
          {
            v22 = a2;
            if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
            {
              v23 = *(_QWORD *)(a2 + 16);
              v24 = v23 & 0xFFFFFFFFFFFFFFF8;
              if ((v23 & 4) != 0)
                v24 = *(_QWORD *)v24;
              for (i = *(_WORD *)(v24 + 8) & 0x7F; i != 83; i = *(_WORD *)(v24 + 8) & 0x7F)
              {
                v26 = -40;
                if (i > 70)
                {
                  if (i == 71)
                  {
                    v26 = -56;
                  }
                  else if (i != 81)
                  {
                    goto LABEL_56;
                  }
                }
                else
                {
                  if (i > 0x18)
                    goto LABEL_55;
                  if (i == 16)
                    goto LABEL_49;
                  if (((1 << i) & 0x1066) != 0)
                    goto LABEL_62;
                  if (i == 24)
                  {
LABEL_49:
                    v26 = -48;
                  }
                  else
                  {
LABEL_55:
                    if (i != 70)
                    {
LABEL_56:
                      v27 = i - 52;
                      if ((i - 33) >= 5)
                        v28 = -48;
                      else
                        v28 = -64;
                      if (v27 >= 6)
                        v26 = v28;
                      else
                        v26 = -72;
                      goto LABEL_62;
                    }
                    v26 = -64;
                  }
                }
LABEL_62:
                v29 = *(_QWORD *)(v24 + v26 + 16);
                v24 = v29 & 0xFFFFFFFFFFFFFFF8;
                if ((v29 & 4) != 0)
                  v24 = *(_QWORD *)v24;
              }
              v22 = v24 - 40;
            }
            v21 = (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 88) + 2000) + 148) & 0x80) == 0;
          }
          v161 = v21;
          v38 = sub_22E894E38((uint64_t)&v162, (unsigned __int8 *)&v161);
          LODWORD(v155) = 1;
          v39 = sub_22E8900C4(v38, (int *)&v155);
          v160 = sub_22EFDBD9C(v20);
          v40 = sub_22E894E38(v39, (unsigned __int8 *)&v160);
          v159 = *(_QWORD *)(v20 + 40);
          sub_22E894538(v40, &v159);
          sub_22E903BEC((unsigned int *)&v162);
          sub_22E8FCA40(a1, *(_DWORD *)(v20 + 24), 0x6Cu, 0, (uint64_t)v158);
          sub_22E903BEC(v158);
LABEL_98:
          v41 = *(_DWORD *)(a2 + 72);
          if ((v41 & 1) == 0 && !v15)
          {
            if (v5)
            {
              if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x13)
              {
                v42 = sub_22EFDBA90(*(_QWORD *)(v6 + 104), *(_QWORD *)(a2 + 88), (v7 & 0x4000) == 0, 1, 0, v6);
                if (v42)
                {
                  v43 = v42;
                  if (sub_22EFDBD9C(v42))
                  {
LABEL_104:
                    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xFF2u, 0, (uint64_t)&v162);
                    v44 = 0;
                    if ((*(_DWORD *)(a2 + 72) & 0x18000) == 0x8000)
                    {
                      v45 = a2;
                      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
                      {
                        v46 = *(_QWORD *)(a2 + 16);
                        v47 = v46 & 0xFFFFFFFFFFFFFFF8;
                        if ((v46 & 4) != 0)
                          v47 = *(_QWORD *)v47;
                        for (j = *(_WORD *)(v47 + 8) & 0x7F; j != 83; j = *(_WORD *)(v47 + 8) & 0x7F)
                        {
                          v49 = -40;
                          if (j > 70)
                          {
                            if (j == 71)
                            {
                              v49 = -56;
                            }
                            else if (j != 81)
                            {
                              goto LABEL_119;
                            }
                          }
                          else
                          {
                            if (j > 0x18)
                              goto LABEL_118;
                            if (j == 16)
                              goto LABEL_112;
                            if (((1 << j) & 0x1066) != 0)
                              goto LABEL_125;
                            if (j == 24)
                            {
LABEL_112:
                              v49 = -48;
                            }
                            else
                            {
LABEL_118:
                              if (j != 70)
                              {
LABEL_119:
                                v50 = j - 52;
                                if ((j - 33) >= 5)
                                  v51 = -48;
                                else
                                  v51 = -64;
                                if (v50 >= 6)
                                  v49 = v51;
                                else
                                  v49 = -72;
                                goto LABEL_125;
                              }
                              v49 = -64;
                            }
                          }
LABEL_125:
                          v52 = *(_QWORD *)(v47 + v49 + 16);
                          v47 = v52 & 0xFFFFFFFFFFFFFFF8;
                          if ((v52 & 4) != 0)
                            v47 = *(_QWORD *)v47;
                        }
                        v45 = v47 - 40;
                      }
                      v44 = (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 2000) + 148) & 0x80) == 0;
                    }
                    v161 = v44;
                    v73 = sub_22E894E38((uint64_t)&v162, (unsigned __int8 *)&v161);
                    LODWORD(v155) = 1;
                    v74 = sub_22E8900C4(v73, (int *)&v155);
                    v160 = sub_22EFDBD9C(v43);
                    v75 = sub_22E894E38(v74, (unsigned __int8 *)&v160);
                    v159 = *(_QWORD *)(v43 + 40);
                    sub_22E894538(v75, &v159);
                    sub_22E903BEC((unsigned int *)&v162);
                    v60 = *(_DWORD *)(v43 + 24);
                    v61 = (unsigned int *)v157;
                    v62 = v157;
                    v63 = a1;
                    v64 = 108;
                    goto LABEL_174;
                  }
                  if ((*(_DWORD *)(a2 + 72) & 0x18000) != 0x8000)
                    goto LABEL_175;
                  v65 = a2;
                  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
                  {
                    v66 = *(_QWORD *)(a2 + 16);
                    v67 = v66 & 0xFFFFFFFFFFFFFFF8;
                    if ((v66 & 4) != 0)
                      v67 = *(_QWORD *)v67;
                    for (k = *(_WORD *)(v67 + 8) & 0x7F; k != 83; k = *(_WORD *)(v67 + 8) & 0x7F)
                    {
                      v69 = -40;
                      if (k > 70)
                      {
                        if (k == 71)
                        {
                          v69 = -56;
                        }
                        else if (k != 81)
                        {
                          goto LABEL_159;
                        }
                      }
                      else
                      {
                        if (k > 0x18)
                          goto LABEL_158;
                        if (k == 16)
                          goto LABEL_152;
                        if (((1 << k) & 0x1066) != 0)
                          goto LABEL_165;
                        if (k == 24)
                        {
LABEL_152:
                          v69 = -48;
                        }
                        else
                        {
LABEL_158:
                          if (k != 70)
                          {
LABEL_159:
                            v70 = k - 52;
                            if ((k - 33) >= 5)
                              v71 = -48;
                            else
                              v71 = -64;
                            if (v70 >= 6)
                              v69 = v71;
                            else
                              v69 = -72;
                            goto LABEL_165;
                          }
                          v69 = -64;
                        }
                      }
LABEL_165:
                      v72 = *(_QWORD *)(v67 + v69 + 16);
                      v67 = v72 & 0xFFFFFFFFFFFFFFF8;
                      if ((v72 & 4) != 0)
                        v67 = *(_QWORD *)v67;
                    }
                    v65 = v67 - 40;
                  }
                  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 88) + 2000) + 148) & 0x80) == 0)
                    goto LABEL_104;
                }
              }
            }
LABEL_175:
            if (v8)
            {
              *(_QWORD *)(v8 + 56) |= 0x80000uLL;
            }
            else
            {
              v76 = *(unsigned int *)(a2 + 24);
              *(_QWORD *)&v162 = *(_QWORD *)(a2 + 56);
              v77 = sub_22F110438((uint64_t *)&v162);
              v78 = v77;
              if ((*(_BYTE *)(a2 + 73) & 0x20) != 0)
              {
                *(_QWORD *)&v162 = v77;
                v79 = sub_22F114F34(&v162);
                if (v79 >= 0x100u && v79 == 2)
                  v78 = sub_22F369798(a1[11], 33, v162, v162);
              }
              if (v5)
                v80 = v6 + 48;
              else
                v80 = 0;
              if ((*(_DWORD *)(a2 + 76) & 0x60000) == 0x40000)
                v81 = 2;
              else
                v81 = 1;
              v8 = sub_22F3B51C0(a1[11], v76, v76, *(_QWORD *)(a2 + 80), v78, 0, v80, (v7 & 0x4000) == 0, 0, 1, 0, 1, 0, v153, v81, SHIWORD(v81), 0);
              sub_22EFCCFA0(v6 + 48, v8);
              sub_22EC7DB30((uint64_t)a1, v8, a2);
              v82 = *(_DWORD *)(a2 + 72) & 0x18000;
              if (v82 == 98304)
              {
                sub_22E8FCA40(a1, v76, 0x1AB9u, 0, (uint64_t)&v162);
                LODWORD(v159) = 1;
                sub_22E8900C4((uint64_t)&v162, (int *)&v159);
                sub_22E903BEC((unsigned int *)&v162);
              }
              else if (v82 == 0x8000)
              {
                v83 = a2;
                if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
                {
                  v84 = *(_QWORD *)(a2 + 16);
                  v85 = v84 & 0xFFFFFFFFFFFFFFF8;
                  if ((v84 & 4) != 0)
                    v85 = *(_QWORD *)v85;
                  for (m = *(_WORD *)(v85 + 8) & 0x7F; m != 83; m = *(_WORD *)(v85 + 8) & 0x7F)
                  {
                    v87 = -40;
                    if (m > 70)
                    {
                      if (m == 71)
                      {
                        v87 = -56;
                      }
                      else if (m != 81)
                      {
                        goto LABEL_202;
                      }
                    }
                    else
                    {
                      if (m > 0x18)
                        goto LABEL_201;
                      if (m == 16)
                        goto LABEL_195;
                      if (((1 << m) & 0x1066) != 0)
                        goto LABEL_208;
                      if (m == 24)
                      {
LABEL_195:
                        v87 = -48;
                      }
                      else
                      {
LABEL_201:
                        if (m != 70)
                        {
LABEL_202:
                          v88 = m - 52;
                          if ((m - 33) >= 5)
                            v89 = -48;
                          else
                            v89 = -64;
                          if (v88 >= 6)
                            v87 = v89;
                          else
                            v87 = -72;
                          goto LABEL_208;
                        }
                        v87 = -64;
                      }
                    }
LABEL_208:
                    v90 = *(_QWORD *)(v85 + v87 + 16);
                    v85 = v90 & 0xFFFFFFFFFFFFFFF8;
                    if ((v90 & 4) != 0)
                      v85 = *(_QWORD *)v85;
                  }
                  v83 = v85 - 40;
                }
                if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 88) + 2000) + 148) & 0x80) == 0)
                {
                  v91 = a1[11];
                  v162 = 0uLL;
                  LODWORD(v163) = v76;
                  HIDWORD(v163) = v76;
                  v164 = 0;
                  v165 = 0;
                  v166 = ((((v166 >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v92 = sub_22F397994(v91, &v162);
                  sub_22EFCA95C(v8, v92);
                }
              }
              if (sub_22F32AD8C(a2))
              {
                v93 = a1[11];
                v162 = 0uLL;
                LODWORD(v163) = v76;
                HIDWORD(v163) = v76;
                v164 = 0;
                v165 = 0;
                v166 = ((((v166 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v94 = sub_22F393330(v93, &v162);
                sub_22EFCA95C(v8, v94);
              }
              if (sub_22E55D5A0(a2))
              {
                v95 = a1[11];
                v162 = 0uLL;
                LODWORD(v163) = v76;
                HIDWORD(v163) = v76;
                v164 = 0;
                v165 = 0;
                v166 = ((((v166 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v96 = sub_22F398E40(v95, &v162);
                sub_22EFCA95C(v8, v96);
              }
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v98 = *(uint64_t **)v97;
                v99 = *(unsigned int *)(v97 + 8);
                v100 = *(uint64_t **)v97;
                if ((_DWORD)v99)
                {
                  v107 = 8 * v99;
                  v100 = *(uint64_t **)v97;
                  while (*(_WORD *)(*v100 + 32) != 305)
                  {
                    ++v100;
                    v107 -= 8;
                    if (!v107)
                      goto LABEL_231;
                  }
                }
                if (v100 != &v98[v99])
                {
                  do
                  {
                    v102 = *v98++;
                    v101 = v102;
                  }
                  while (*(_WORD *)(v102 + 32) != 305);
                  v103 = a1[11];
                  v104 = *(const void **)(v101 + 40);
                  v105 = *(unsigned int *)(v101 + 36);
                  v162 = 0uLL;
                  v163 = v76 | (v76 << 32);
                  v164 = 0;
                  v166 = 0;
                  v165 = 478;
                  v106 = sub_22F39F9D8(v103, v104, v105, &v162);
                  sub_22EFCA95C(v8, v106);
                }
              }
LABEL_231:
              sub_22E9114FC(a1, v8);
              if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
                sub_22EAF318C(a1, v8);
            }
            v108 = a1[11];
            v109 = (uint64_t *)sub_22EFDC9F0(v8);
            sub_22F3B5618(v8, v108, v109);
            *(_QWORD *)(a2 + 104) = v8;
            if ((*(_BYTE *)(a2 + 72) & 1) != 0)
            {
              if ((v7 & 0x4000) == 0)
              {
LABEL_235:
                if (!v8)
                  goto LABEL_309;
                v110 = (uint64_t)a1;
                v111 = (_QWORD *)v8;
                v112 = 1;
                goto LABEL_308;
              }
LABEL_306:
              if (!v8)
                goto LABEL_309;
              v110 = (uint64_t)a1;
              v111 = (_QWORD *)v8;
              v112 = 0;
LABEL_308:
              sub_22EAFAEBC(v110, v111, 0, v112);
LABEL_309:
              if (v15)
                sub_22EAFAEBC((uint64_t)a1, (_QWORD *)v15, 0, (v7 & 0x4000) == 0);
              v147 = *(_DWORD *)(v6 + 28);
              v148 = v147 & 0x7F;
              if (v148 == 22)
                v149 = v6;
              else
                v149 = 0;
              if (v5 && v148 == 22)
                goto LABEL_323;
              if (v5 && v148 == 19)
              {
                v150 = (uint64_t *)(v6 + 104);
              }
              else
              {
                v149 = 0;
                if (!v5 || (v147 & 0x7E) != 0x14)
                  goto LABEL_323;
                v150 = (uint64_t *)(v6 + 88);
              }
              v149 = *v150;
LABEL_323:
              if (v8)
                sub_22EAFDC80((uint64_t)a1, v8, v149, 2);
              if (v15)
                sub_22EAFDC80((uint64_t)a1, v15, v149, 2);
              return;
            }
            if (v15)
            {
              *(_QWORD *)(v15 + 56) |= 0x80000uLL;
              goto LABEL_305;
            }
            v113 = *(unsigned int *)(a2 + 24);
            if (v5)
              v114 = v6 + 48;
            else
              v114 = 0;
            if ((*(_DWORD *)(a2 + 76) & 0x60000) == 0x40000)
              v115 = 2;
            else
              v115 = 1;
            v15 = sub_22F3B51C0(a1[11], v113, v113, *(_QWORD *)(a2 + 88), *(_QWORD *)(a1[11] + 16392), 0, v114, (v7 & 0x4000) == 0, 0, 1, 0, 1, 0, v153, v115, SHIWORD(v115), 0);
            v116 = *(_QWORD *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v116 + 8) & 0xF) != 0)
              v116 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(a2 + 56));
            *(_QWORD *)&v162 = v116 & 0xFFFFFFFFFFFFFFF0;
            v117 = sub_22F110438((uint64_t *)&v162);
            v118 = v117;
            if ((*(_BYTE *)(a2 + 73) & 0x20) != 0)
            {
              *(_QWORD *)&v162 = v117;
              v119 = sub_22F114F34(&v162);
              if (v119 >= 0x100u && v119 == 2)
                v118 = sub_22F369798(a1[11], 35, v162, v162);
            }
            v159 = 0;
            if (v15)
              v120 = v15 + 48;
            else
              v120 = 0;
            v121 = *(_QWORD *)(a2 + 40);
            if ((v121 & 7) != 0)
              v122 = 0;
            else
              v122 = v121 & 0xFFFFFFFFFFFFFFF8;
            v159 = sub_22EFBF080(a1[11], v120, v113, v113, v122, v118, 0, 0, 0);
            sub_22F3B551C(v15, a1[11], &v159, 1uLL, 0, 0);
            sub_22EC7DB30((uint64_t)a1, v15, a2);
            v123 = *(_DWORD *)(a2 + 72) & 0x18000;
            if (v123 == 98304)
            {
              sub_22E8FCA40(a1, v113, 0x1AB9u, 0, (uint64_t)&v162);
              LODWORD(v155) = 2;
              sub_22E8900C4((uint64_t)&v162, (int *)&v155);
              sub_22E903BEC((unsigned int *)&v162);
            }
            else if (v123 == 0x8000)
            {
              v124 = a2;
              if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
              {
                v125 = *(_QWORD *)(a2 + 16);
                v126 = v125 & 0xFFFFFFFFFFFFFFF8;
                if ((v125 & 4) != 0)
                  v126 = *(_QWORD *)v126;
                for (n = *(_WORD *)(v126 + 8) & 0x7F; n != 83; n = *(_WORD *)(v126 + 8) & 0x7F)
                {
                  v128 = -40;
                  if (n > 70)
                  {
                    if (n == 71)
                    {
                      v128 = -56;
                    }
                    else if (n != 81)
                    {
                      goto LABEL_279;
                    }
                  }
                  else
                  {
                    if (n > 0x18)
                      goto LABEL_278;
                    if (n == 16)
                      goto LABEL_272;
                    if (((1 << n) & 0x1066) != 0)
                      goto LABEL_285;
                    if (n == 24)
                    {
LABEL_272:
                      v128 = -48;
                    }
                    else
                    {
LABEL_278:
                      if (n != 70)
                      {
LABEL_279:
                        v129 = n - 52;
                        if ((n - 33) >= 5)
                          v130 = -48;
                        else
                          v130 = -64;
                        if (v129 >= 6)
                          v128 = v130;
                        else
                          v128 = -72;
                        goto LABEL_285;
                      }
                      v128 = -64;
                    }
                  }
LABEL_285:
                  v131 = *(_QWORD *)(v126 + v128 + 16);
                  v126 = v131 & 0xFFFFFFFFFFFFFFF8;
                  if ((v131 & 4) != 0)
                    v126 = *(_QWORD *)v126;
                }
                v124 = v126 - 40;
              }
              if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v124 + 88) + 2000) + 148) & 0x80) == 0)
              {
                v132 = a1[11];
                v162 = 0uLL;
                LODWORD(v163) = v113;
                HIDWORD(v163) = v113;
                v164 = 0;
                v165 = 0;
                v166 = ((((v166 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v133 = sub_22F397994(v132, &v162);
                sub_22EFCA95C(v15, v133);
              }
            }
            sub_22EFCCFA0(v6 + 48, v15);
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v135 = *(uint64_t **)v134;
              v136 = *(unsigned int *)(v134 + 8);
              v137 = *(uint64_t **)v134;
              if ((_DWORD)v136)
              {
                v144 = 8 * v136;
                v137 = *(uint64_t **)v134;
                while (*(_WORD *)(*v137 + 32) != 305)
                {
                  ++v137;
                  v144 -= 8;
                  if (!v144)
                    goto LABEL_303;
                }
              }
              if (v137 != &v135[v136])
              {
                do
                {
                  v139 = *v135++;
                  v138 = v139;
                }
                while (*(_WORD *)(v139 + 32) != 305);
                v140 = a1[11];
                v141 = *(const void **)(v138 + 40);
                v142 = *(unsigned int *)(v138 + 36);
                v162 = 0uLL;
                v163 = v113 | (v113 << 32);
                v164 = 0;
                v166 = 0;
                v165 = 478;
                v143 = sub_22F39F9D8(v140, v141, v142, &v162);
                sub_22EFCA95C(v15, v143);
              }
            }
LABEL_303:
            sub_22E9114FC(a1, v15);
            if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
              sub_22EAF318C(a1, v15);
LABEL_305:
            v145 = a1[11];
            v146 = (uint64_t *)sub_22EFDC9F0(v15);
            sub_22F3B5618(v15, v145, v146);
            *(_QWORD *)(a2 + 112) = v15;
            if ((v7 & 0x4000) == 0)
              goto LABEL_235;
            goto LABEL_306;
          }
          if ((v41 & 1) != 0 || !v15)
            goto LABEL_175;
          if ((*(_QWORD *)(v15 + 80) & 7 | *(_QWORD *)((*(_QWORD *)(v15 + 80) & 0xFFFFFFFFFFFFFFF0) + 8)) != *(_QWORD *)(a1[11] + 16392))
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v15 + 24), 0x1259u, 0, (uint64_t)v156);
            sub_22E903BEC(v156);
          }
          if (*(_DWORD *)(v15 + 104) != 1)
          {
LABEL_143:
            sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1828u, 0, (uint64_t)&v162);
            v159 = *(_QWORD *)(a2 + 40);
            v59 = sub_22E894538((uint64_t)&v162, &v159);
            v155 = *(_QWORD *)(v15 + 40);
            sub_22E894538(v59, &v155);
            sub_22E903BEC((unsigned int *)&v162);
            v60 = *(_DWORD *)(v15 + 24);
            v61 = (unsigned int *)v154;
            v62 = v154;
            v63 = a1;
            v64 = 100;
LABEL_174:
            sub_22E8FCA40(v63, v60, v64, 0, (uint64_t)v62);
            sub_22E903BEC(v61);
            goto LABEL_175;
          }
          v53 = *(_QWORD *)(**(_QWORD **)(v15 + 96) + 48);
          v54 = *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0);
          if (!v54 || (v55 = *(_DWORD *)(v54 + 16), (v55 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
              goto LABEL_139;
            v54 = sub_22F10CF48(v54);
            if (!v54)
              goto LABEL_139;
            v55 = *(_DWORD *)(v54 + 16);
          }
          if ((v55 & 0x100000) != 0)
          {
            do
            {
              v54 = *(_QWORD *)(*(_QWORD *)(v54 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v54)
              {
                v151 = *(_DWORD *)(v54 + 16);
                if ((v151 & 0xFE) == 0x28)
                  continue;
              }
              v54 = sub_22F10CF48(v54);
              v151 = *(_DWORD *)(v54 + 16);
            }
            while ((v151 & 0x100000) != 0);
          }
          v53 = *(_QWORD *)(v54 + 32);
LABEL_139:
          v56 = (uint64_t *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF0);
          v57 = *v56;
          if (!*v56 || (v58 = *(_DWORD *)(v57 + 16), (v58 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
              goto LABEL_142;
            v57 = sub_22F10CF48(v57);
            if (!v57)
              goto LABEL_142;
            v58 = *(_DWORD *)(v57 + 16);
          }
          if ((v58 & 0x100000) != 0)
          {
            do
            {
              v57 = *(_QWORD *)(*(_QWORD *)(v57 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v57)
              {
                v152 = *(_DWORD *)(v57 + 16);
                if ((v152 & 0xFE) == 0x28)
                  continue;
              }
              v57 = sub_22F10CF48(v57);
              v152 = *(_DWORD *)(v57 + 16);
            }
            while ((v152 & 0x100000) != 0);
          }
          v56 = (uint64_t *)(*(_QWORD *)(v57 + 32) & 0xFFFFFFFFFFFFFFF0);
LABEL_142:
          if (*(_QWORD *)(*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v56[1] & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_175;
          goto LABEL_143;
        }
        if ((*(_DWORD *)(a2 + 72) & 0x18000) != 0x8000)
          goto LABEL_98;
        v30 = a2;
        if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
        {
          v31 = *(_QWORD *)(a2 + 16);
          v32 = v31 & 0xFFFFFFFFFFFFFFF8;
          if ((v31 & 4) != 0)
            v32 = *(_QWORD *)v32;
          for (ii = *(_WORD *)(v32 + 8) & 0x7F; ii != 83; ii = *(_WORD *)(v32 + 8) & 0x7F)
          {
            v34 = -40;
            if (ii > 70)
            {
              if (ii == 71)
              {
                v34 = -56;
              }
              else if (ii != 81)
              {
                goto LABEL_83;
              }
            }
            else
            {
              if (ii > 0x18)
                goto LABEL_82;
              if (ii == 16)
                goto LABEL_76;
              if (((1 << ii) & 0x1066) != 0)
                goto LABEL_89;
              if (ii == 24)
              {
LABEL_76:
                v34 = -48;
              }
              else
              {
LABEL_82:
                if (ii != 70)
                {
LABEL_83:
                  v35 = ii - 52;
                  if ((ii - 33) >= 5)
                    v36 = -48;
                  else
                    v36 = -64;
                  if (v35 >= 6)
                    v34 = v36;
                  else
                    v34 = -72;
                  goto LABEL_89;
                }
                v34 = -64;
              }
            }
LABEL_89:
            v37 = *(_QWORD *)(v32 + v34 + 16);
            v32 = v37 & 0xFFFFFFFFFFFFFFF8;
            if ((v37 & 4) != 0)
              v32 = *(_QWORD *)v32;
          }
          v30 = v32 - 40;
        }
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 88) + 2000) + 148) & 0x80) != 0)
          goto LABEL_98;
        goto LABEL_41;
      }
      v8 = sub_22EFDA1A0(v12, v13, 0, 0);
    }
    v14 = 0;
    goto LABEL_24;
  }
}

unsigned int *sub_22EC78BBC(unsigned int *result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17[24];
  uint64_t v18;
  unsigned int v19[24];
  unint64_t v20;

  v4 = *(_DWORD *)(a2 + 72);
  v5 = *(_DWORD *)(a3 + 72);
  if ((v4 & 0x40) != (v5 & 0x40))
  {
    v8 = result;
    if (a4 && (*(_WORD *)(a3 + 76) & 0x140) == 0)
    {
      if ((v4 & 0x40) != 0)
        v16 = 64;
      else
        v16 = 256;
      *(_DWORD *)(a3 + 72) = v16 | v5 & 0xFFFFFEBF;
    }
    else if (((v4 & 0x41) != 1 || (*(_BYTE *)(a2 + 77) & 1) != 0)
           && ((v5 & 0x41) != 1 || (*(_BYTE *)(a3 + 77) & 1) != 0))
    {
      v9 = *(_QWORD *)(a2 + 16);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v10 = *(_QWORD *)v10;
      v11 = v10 - 48;
      if (v10)
      {
        if ((*(_WORD *)(v10 + 8) & 0x7F) == 0x13)
          v11 = *(_QWORD *)(v10 + 56);
      }
      else
      {
        v11 = 0;
      }
      v12 = *(_QWORD *)(v11 + 40);
      if ((v12 & 7) != 0)
        v13 = 0;
      else
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      v20 = v13;
      sub_22E8FCA40(result, *(_DWORD *)(a3 + 24), 0x1B0Au, 0, (uint64_t)v19);
      v18 = *(_QWORD *)(a3 + 40);
      v14 = sub_22E894538((uint64_t)v19, &v18);
      v15 = sub_22F2F30F4(v14, (uint64_t)"atomic");
      sub_22E8BAE44(v15, (uint64_t *)&v20);
      sub_22E903BEC(v19);
      sub_22E8FCA40(v8, *(_DWORD *)(a2 + 24), 0x1780u, 0, (uint64_t)v17);
      return sub_22E903BEC(v17);
    }
  }
  return result;
}

_QWORD *sub_22EC78D1C(_QWORD *a1, uint64_t a2, int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned __int8 a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int *v32;
  _BYTE *v33;
  _QWORD *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unsigned int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  _DWORD *v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t i;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  __int16 v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;
  _DWORD *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  unint64_t v171;
  _DWORD *v172;
  unsigned int v173;
  unint64_t *v174;
  uint64_t v175;
  unint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  int v232;
  BOOL v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  int j;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int *v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned __int8 *v310;
  uint64_t v311;
  uint64_t v312;
  int *v313;
  __int16 v314;
  unsigned int v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  int v323;
  int v324;
  unsigned int v325;
  int v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  int v334;
  uint64_t v335;
  int v336;
  unsigned int *v337;
  uint64_t *v338;
  uint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  int v351;
  char v352;
  unsigned int v353[24];
  char v354;
  unsigned int v355[24];
  char v356;
  unsigned int v357[24];
  unsigned int v358[24];
  unsigned int v359[24];
  _BYTE v360[96];
  _BYTE v361[96];
  unsigned int v362[24];
  char v363;
  char v364;
  uint64_t v365;
  _BYTE v366[96];
  unsigned int v367[24];
  unsigned int v368[24];
  unsigned int v369[24];
  unsigned int v370[24];
  unsigned int v371[24];
  unsigned int v372[24];
  unsigned int v373[24];
  unsigned int v374[24];
  unsigned int v375[24];
  unint64_t v376;
  uint64_t v377;
  _BYTE v378[96];
  _BYTE v379[96];
  _BYTE v380[96];
  _BYTE v381[96];
  unsigned int v382[24];
  _BYTE v383[96];
  _BYTE v384[96];
  uint64_t v385;
  _BYTE v386[96];
  uint64_t v387;
  uint64_t v388;
  uint64_t v389[4];
  _BYTE v390[56];
  uint64_t v391;
  _BYTE v392[36];
  int v393;
  uint64_t v394;
  char v395;
  char v396;
  uint64_t v397;
  int v398;
  void *v399;
  uint64_t v400;
  _QWORD v401[6];
  void *v402;
  uint64_t v403;
  uint64_t v404;
  int *v405;
  uint64_t v406;
  _BYTE v407[64];
  uint64_t v408;
  int64x2_t v409;
  int64x2_t v410;
  int64x2_t v411;
  int64x2_t v412;
  uint64_t v413;

  v9 = a1;
  v413 = *MEMORY[0x24BDAC8D0];
  v388 = a6;
  v387 = a7;
  v10 = a1[27];
  v11 = v10 - 48;
  if (v10)
    v12 = (*(_WORD *)(v10 + 8) & 0x7Fu) - 24 >= 0xFFFFFFFB;
  else
    v12 = 0;
  v13 = !v12;
  if (v13)
    v14 = 0;
  else
    v14 = v10 - 48;
  if (v13)
  {
    sub_22E8FCA40(a1, a3, 0xF58u, 0, (uint64_t)v386);
    v15 = (unsigned int *)v386;
LABEL_58:
    sub_22E903BEC(v15);
    return 0;
  }
  v16 = a7;
  v348 = v14;
  v21 = a9;
  if (a8)
    v22 = a8;
  else
    v22 = a4;
  v349 = v22;
  v23 = a4;
  if (!a4)
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v10 - 48);
  v385 = 0;
  if ((*(_DWORD *)(v10 - 20) & 0x7F) == 0x15)
    v24 = v10 - 48;
  else
    v24 = 0;
  if ((*(_DWORD *)(v10 - 20) & 0x7F) == 0x15)
  {
    v345 = a2;
    v346 = v24;
    v347 = *(_DWORD *)(v10 - 20) & 0x7F;
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_22EFDA7BC(v25, a6, a9);
    v385 = v26;
    if (v26)
    {
      if ((*(_BYTE *)(v26 + 73) & 0x40) != 0 && a5)
      {
        sub_22E8FCA40(v9, a4, 0x129Du, 0, (uint64_t)&v399);
        sub_22E8BAE44((uint64_t)&v399, &v388);
LABEL_31:
        v15 = (unsigned int *)&v399;
        goto LABEL_58;
      }
      v343 = v23;
      v30 = *(_DWORD *)(v26 + 76);
      if ((v30 & 0x140) == 0)
      {
        if (a3)
        {
          v31 = a3;
          v32 = (unsigned int *)v384;
          v33 = v384;
          v34 = v9;
          v35 = 6661;
        }
        else
        {
          v31 = *(_DWORD *)(v10 - 24);
          v32 = (unsigned int *)v383;
          v33 = v383;
          v34 = v9;
          v35 = 6292;
        }
        sub_22E8FCA40(v34, v31, v35, 0, (uint64_t)v33);
        sub_22E903BEC(v32);
        sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v382);
        sub_22E903BEC(v382);
        v26 = v385;
      }
      v338 = (uint64_t *)v25;
      v41 = *(_QWORD *)(v26 + 16);
      v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if ((v41 & 4) != 0)
        v42 = *(_QWORD *)v42;
      if (v42)
        v43 = (*(_WORD *)(v42 + 8) & 0x7F) == 19;
      else
        v43 = 0;
      if (v43 && *(_QWORD *)(v42 - 8) >= 8uLL && (*(_QWORD *)(v42 - 8) & 7) == 0)
      {
        sub_22E8FCA40(v9, a4, 0xBD5u, 0, (uint64_t)&v399);
        *(_QWORD *)v392 = *(_QWORD *)(v42 - 8);
        sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
        sub_22E903BEC((unsigned int *)&v399);
        sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v381);
        v15 = (unsigned int *)v381;
        goto LABEL_58;
      }
      v329 = v10 - 48;
      if ((v30 & 1) != 0 && a5 && sub_22E8A78AC(v26) && !a3)
      {
        v47 = sub_22E496488(v25);
        if (v47 != v48)
        {
          v49 = v47;
          v50 = v48;
          do
          {
            v51 = sub_22EFCE144(v49 + 48, *(_QWORD *)(v385 + 40));
            if (v51)
            {
              while (1)
              {
                v52 = v51 & 0xFFFFFFFFFFFFFFF8;
                if ((v51 & 4) == 0 || !v52)
                  break;
                if (*(_QWORD *)v52)
                  v53 = (*(_DWORD *)(*(_QWORD *)v52 + 28) & 0x7F) == 25;
                else
                  v53 = 0;
                if (v53)
                {
                  v52 = *(_QWORD *)v52;
                  goto LABEL_80;
                }
                v51 = *(_QWORD *)(v52 + 8);
                if (!v51)
                  goto LABEL_81;
              }
              if (!v52 || (*(_DWORD *)(v52 + 28) & 0x7F) != 0x19)
                goto LABEL_81;
LABEL_80:
              if ((*(_BYTE *)(v52 + 76) & 8) != 0)
                goto LABEL_106;
            }
            do
            {
LABEL_81:
              v49 = *(_QWORD *)(v49 + 128);
              if (!v49)
                break;
            }
            while ((*(_BYTE *)(v49 + 28) & 0x80) != 0
                 || *(_QWORD *)(v49 + 40) >= 8uLL && (*(_QWORD *)(v49 + 40) & 7) == 0);
          }
          while (v49 != v50);
        }
        sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1895u, 0, (uint64_t)&v399);
        sub_22E890024((uint64_t)&v399, &v385);
        sub_22E903BEC((unsigned int *)&v399);
        v55 = *(_DWORD *)(v385 + 52);
        if ((v55 & 0x80000000) == 0)
        {
          v56 = v9[11];
          v57 = *(_QWORD **)(v56 + 1992);
          v58 = sub_22E677168((uint64_t)v57, v55);
          v59 = v58;
          sub_22F1E1E78(v57, v58, (uint64_t)&v399);
          if (LOBYTE(v401[0]))
          {
            v60 = (unsigned __int16 *)v399;
            v61 = v400;
            v62 = (unsigned __int16 *)((char *)v399 + HIDWORD(v58));
            v63 = sub_22E49F3DC(v57, v59);
            if (v63)
              v64 = *v63 & 0x7FFFFFFF;
            else
              v64 = 0;
            sub_22F140DA4((uint64_t)&v399, v64, *(_DWORD **)(v56 + 2000), v60, v62, (uint64_t)v60 + v61, 1);
            do
            {
              while (1)
              {
                sub_22F14651C(&v399, (uint64_t)v392);
                if (*(unsigned __int16 *)&v392[16] == 6)
                  break;
                if (*(unsigned __int16 *)&v392[16] == 22)
                {
                  v65 = 0;
                  v66 = 0;
                  goto LABEL_100;
                }
              }
            }
            while (*(_DWORD *)&v392[4] != 8 || **(_QWORD **)&v392[8] != 0x796C6E6F64616572);
            v66 = 1;
            v65 = *(_DWORD *)v392;
LABEL_100:
            v399 = &unk_24FAC8A48;
            sub_22E730D24((uint64_t)&v404);
            if (v402 != &v403)
              free(v402);
            v21 = a9;
            if (v66)
            {
              sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1553u, 0, (uint64_t)&v399);
              v392[20] = 0;
              *(_QWORD *)&v392[12] = 0;
              v392[33] = 0;
              *(_WORD *)&v392[34] = 0;
              v393 = 0;
              v394 = 0x900000000000000;
              v395 = 0;
              *(_QWORD *)v392 = v65 | ((unint64_t)(v65 + 7) << 32);
              v392[8] = 1;
              strcpy(&v392[24], "readwrit");
              sub_22E890748((uint64_t)&v399, v392);
              if (SHIBYTE(v394) < 0)
                operator delete(*(void **)&v392[24]);
              sub_22E903BEC((unsigned int *)&v399);
            }
          }
        }
      }
LABEL_106:
      if ((a5 & 1) != 0)
      {
        v67 = v385;
        v68 = *(_QWORD *)(v385 + 16);
        v69 = v68 & 0xFFFFFFFFFFFFFFF8;
        v70 = v343;
        if ((v68 & 4) != 0)
          v69 = *(_QWORD *)v69;
        v71 = (uint64_t)v338;
        if ((*(_WORD *)(v69 + 8) & 0x7F) != 0x17)
          goto LABEL_200;
        v408 = 1;
        v409 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v410 = v409;
        v411 = v409;
        v412 = v409;
        v405 = (int *)v407;
        v406 = 0x800000000;
        v72 = sub_22F276134((unint64_t)v338);
        v73 = sub_22F2761B0((unint64_t)v338);
        if (v72 != v73)
        {
          v74 = v73;
          do
          {
            v75 = *(_QWORD *)v72;
            v76 = *(_QWORD *)(*(_QWORD *)v72 + 104);
            if (!v76)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v75 + 96) + 88), *(_QWORD *)(v75 + 96));
              v76 = *(_QWORD *)(v75 + 104);
            }
            if (v76 >= 8)
            {
              v77 = *(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF8);
              if (v77)
                sub_22EFDE464(v77, v67, (uint64_t)&v408, (uint64_t)&v405);
            }
            v72 += 8;
          }
          while (v72 != v74);
        }
        v78 = sub_22F3B46CC((unint64_t)v338);
        if (v78)
        {
          v79 = v78;
          do
          {
            v80 = sub_22F276134(v79);
            for (i = sub_22F2761B0(v79); v80 != i; v80 += 8)
            {
              v82 = *(_QWORD *)v80;
              v83 = *(_QWORD *)(*(_QWORD *)v80 + 104);
              if (!v83)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v82 + 96) + 88), *(_QWORD *)(v82 + 96));
                v83 = *(_QWORD *)(v82 + 104);
              }
              if (v83 >= 8)
              {
                v84 = *(_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF8);
                if (v84)
                  sub_22EFDE464(v84, v67, (uint64_t)&v408, (uint64_t)&v405);
              }
            }
            v79 = sub_22F3B46CC(v79);
          }
          while (v79);
        }
        v85 = v405;
        if (!(_DWORD)v406)
        {
          v86 = v67;
          v70 = v343;
          goto LABEL_195;
        }
        v325 = v21;
        v90 = 0;
        v91 = 0;
        v92 = 8 * v406;
        v93 = v92;
        v86 = v67;
        do
        {
          if ((*(_BYTE *)(v86 + 72) & 1) != 0 && (*(_DWORD *)(*(_QWORD *)&v405[2 * v91] + 72) & 1) == 0)
          {
            v90 = v91;
            v86 = *(_QWORD *)&v405[2 * v91];
          }
          ++v91;
          v93 -= 8;
        }
        while (v93);
        v332 = v9;
        v328 = a5;
        if (v86 != v67)
        {
          *(_QWORD *)&v405[2 * v90] = v67;
          v85 = v405;
        }
        v330 = *(_QWORD *)(v86 + 56) & 7 | *(_QWORD *)((*(_QWORD *)(v86 + 56) & 0xFFFFFFFFFFFFFFF0) + 8);
        v94 = *(_DWORD *)(v86 + 76);
        v399 = v401;
        if ((v94 & 0x20) != 0)
          v95 = 1;
        else
          v95 = 2;
        v342 = v95;
        if ((v94 & 0x410) != 0)
          v96 = 1;
        else
          v96 = 2;
        v334 = v96;
        v400 = 0x400000000;
        if ((v94 & 0x100) != 0)
          v97 = 1;
        else
          v97 = 2;
        v336 = v97;
        while (1)
        {
          v98 = *(_QWORD *)v85;
          v99 = *(_DWORD *)(*(_QWORD *)v85 + 76);
          if (((v99 ^ v94) & 0x1FFFF) != 0)
          {
            if ((v99 & 0xE34) != 0)
            {
              if (((v99 ^ v94) & 0x20) != 0)
              {
                *(_QWORD *)v392 = *(_QWORD *)v85;
                *(_DWORD *)&v392[8] = v342;
                *(_QWORD *)&v392[16] = "copy";
                v100 = 4;
                goto LABEL_167;
              }
              if (((v94 & 0x410) != 0) != ((*(_DWORD *)(*(_QWORD *)v85 + 76) & 0x410) != 0))
              {
                *(_QWORD *)v392 = *(_QWORD *)v85;
                *(_DWORD *)&v392[8] = v334;
                *(_QWORD *)&v392[16] = "retain (or strong)";
                v100 = 18;
LABEL_167:
                *(_QWORD *)&v392[24] = v100;
                goto LABEL_168;
              }
            }
            if ((((unsigned __int16)v99 ^ (unsigned __int16)v94) & 0x100) != 0)
            {
              *(_QWORD *)v392 = *(_QWORD *)v85;
              *(_DWORD *)&v392[8] = v336;
              *(_QWORD *)&v392[16] = "atomic";
              v100 = 6;
              goto LABEL_167;
            }
          }
          if (*(_QWORD *)(v86 + 80) == *(_QWORD *)(v98 + 80))
          {
            if ((*(_BYTE *)(v86 + 72) & 1) != 0
              || (*(_BYTE *)(v98 + 72) & 1) != 0
              || *(_QWORD *)(v86 + 88) == *(_QWORD *)(v98 + 88))
            {
              v101 = *(_QWORD *)(v98 + 56) & 7 | *(_QWORD *)((*(_QWORD *)(v98 + 56) & 0xFFFFFFFFFFFFFFF0) + 8);
              if (sub_22F36EDA0(v332[11], v101, v330, 0))
                goto LABEL_169;
              LOBYTE(v377) = 0;
              v389[0] = 0;
              if (sub_22ECFB880((uint64_t)v332, v330, v101, v389, &v377) && v377 == 0)
                goto LABEL_169;
              *(_QWORD *)v392 = v98;
              *(_DWORD *)&v392[8] = 0;
            }
            else
            {
              *(_QWORD *)v392 = *(_QWORD *)v85;
              *(_DWORD *)&v392[8] = 4;
            }
          }
          else
          {
            *(_QWORD *)v392 = *(_QWORD *)v85;
            *(_DWORD *)&v392[8] = 3;
          }
          *(_QWORD *)&v392[16] = "";
          *(_QWORD *)&v392[24] = 0;
LABEL_168:
          sub_22EC7DC50((unint64_t *)&v399, (unint64_t)v392);
LABEL_169:
          v85 += 2;
          v92 -= 8;
          if (!v92)
          {
            v9 = v332;
            a5 = v328;
            if ((_DWORD)v400)
            {
              v103 = 0;
              v104 = 32 * v400;
              v105 = (int *)((char *)v399 + 8);
              do
              {
                v106 = *v105;
                v105 += 8;
                v103 |= v106 != 0;
                v104 -= 32;
              }
              while (v104);
              if ((v86 != v67) | v103 & 1)
                v107 = 4577;
              else
                v107 = 6928;
              sub_22E8FCA40(v332, *(_DWORD *)(v86 + 24), v107, 0, (uint64_t)v392);
              sub_22E8900C4((uint64_t)v392, (int *)v399 + 2);
              switch(*((_DWORD *)v399 + 2))
              {
                case 0:
                  v389[0] = *(_QWORD *)(v86 + 56);
                  sub_22E8901B8((uint64_t)v392, v389);
                  break;
                case 1:
                case 2:
                  sub_22F2F2210((uint64_t)v392, (uint64_t)v399 + 16);
                  break;
                case 3:
                  v108 = *(_QWORD *)(v86 + 80);
                  goto LABEL_188;
                case 4:
                  v108 = *(_QWORD *)(v86 + 88);
LABEL_188:
                  v389[0] = v108;
                  sub_22E894538((uint64_t)v392, v389);
                  break;
                default:
                  break;
              }
              sub_22E903BEC((unsigned int *)v392);
              if ((_DWORD)v400)
              {
                v122 = 32 * v400;
                v123 = (int *)((char *)v399 + 8);
                do
                {
                  sub_22E8FCA40(v332, *(_DWORD *)(*((_QWORD *)v123 - 1) + 24), 0x179Eu, 0, (uint64_t)v389);
                  sub_22E8900C4((uint64_t)v389, v123);
                  *(_OWORD *)v392 = *(_OWORD *)v389;
                  *(_OWORD *)&v392[9] = *(_OWORD *)((char *)&v389[1] + 1);
                  v392[32] = 0;
                  v396 = 0;
                  if (v390[48])
                    sub_22E907424((uint64_t)&v392[32], (uint64_t)v390);
                  v397 = v391;
                  sub_22E903BEC((unsigned int *)v389);
                  switch(*v123)
                  {
                    case 0:
                      v389[0] = *(_QWORD *)(*((_QWORD *)v123 - 1) + 56);
                      sub_22E8901B8((uint64_t)v392, v389);
                      break;
                    case 1:
                    case 2:
                      sub_22F2F2210((uint64_t)v392, (uint64_t)(v123 + 2));
                      break;
                    case 3:
                      v124 = *(_QWORD *)(*((_QWORD *)v123 - 1) + 80);
                      goto LABEL_230;
                    case 4:
                      v124 = *(_QWORD *)(*((_QWORD *)v123 - 1) + 88);
LABEL_230:
                      v389[0] = v124;
                      sub_22E894538((uint64_t)v392, v389);
                      break;
                    default:
                      break;
                  }
                  sub_22E903BEC((unsigned int *)v392);
                  v123 += 8;
                  v122 -= 32;
                }
                while (v122);
              }
              if (a3)
              {
                sub_22E8FCA40(v332, a3, 0x1781u, 0, (uint64_t)v392);
                sub_22E903BEC((unsigned int *)v392);
              }
            }
            v21 = v325;
            v70 = v343;
            if (v399 != v401)
              free(v399);
            v85 = v405;
LABEL_195:
            if (v85 != (int *)v407)
              free(v85);
            if ((v408 & 1) == 0)
              llvm::deallocate_buffer((llvm *)v409.i64[0], (void *)(8 * v409.u32[2]));
            v385 = v86;
            v71 = (uint64_t)v338;
LABEL_200:
            v405 = 0;
            v109 = v387;
            if (!v387)
            {
              v109 = v388;
              v387 = v388;
            }
            v408 = 0;
            v405 = (int *)sub_22EFDB894(v71, v109, &v408);
            v377 = *(_QWORD *)(v385 + 56);
            v110 = *(_QWORD *)(v377 & 0xFFFFFFFFFFFFFFF0);
            if (v110 && (v111 = *(_DWORD *)(v110 + 16), (v111 & 0xFE) == 0x28))
            {
LABEL_563:
              if ((v111 & 0x100000) != 0)
              {
                do
                {
                  v110 = *(_QWORD *)(*(_QWORD *)(v110 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v110)
                  {
                    v323 = *(_DWORD *)(v110 + 16);
                    if ((v323 & 0xFE) == 0x28)
                      continue;
                  }
                  v110 = sub_22F10CF48(v110);
                  v323 = *(_DWORD *)(v110 + 16);
                }
                while ((v323 & 0x100000) != 0);
              }
              v112 = (unint64_t *)(v110 + 32);
            }
            else
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
              {
                v112 = (unint64_t *)&v377;
                goto LABEL_206;
              }
              v110 = sub_22F10CF48(v110);
              if (v110)
              {
                v111 = *(_DWORD *)(v110 + 16);
                goto LABEL_563;
              }
              v112 = (unint64_t *)&v377;
            }
            v70 = v343;
LABEL_206:
            v376 = *v112;
            *(_QWORD *)v392 = *(_QWORD *)(v385 + 40);
            v113 = v70;
            v399 = &unk_24FAB7FC8;
            LODWORD(v400) = 3590;
            v401[0] = v392;
            if (sub_22EE8B0B0((uint64_t)v9, v70, v376))
            {
              sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v375);
              sub_22E903BEC(v375);
              v341 = 1;
            }
            else
            {
              v341 = 0;
            }
            if ((*(_WORD *)(v9[9] + 148) & 2) != 0)
            {
              v114 = v385;
              if ((*(_BYTE *)(v385 + 76) & 1) != 0)
              {
                v115 = *(_QWORD *)(v376 & 0xFFFFFFFFFFFFFFF0);
                v116 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v115 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                if (v116 == 10 || v116 == 32)
                {
LABEL_215:
                  v117 = *(_DWORD *)(v114 + 72);
                  if ((v117 & 0xE30) == 0)
                  {
                    v118 = (uint64_t)v405;
                    if ((v117 & 4) == 0
                      || (v119 = *(_QWORD *)(*(_QWORD *)(v114 + 56) & 0xFFFFFFFFFFFFFFF0),
                          v120 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v119 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
                          v120 != 10)
                      && v120 != 32
                      && !sub_22F115064(v119))
                    {
                      if (!v118)
                        goto LABEL_221;
                      v125 = *(_QWORD *)((*(_QWORD *)(v118 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
                      if ((v125 & 8) == 0)
                        goto LABEL_238;
                      v126 = (*(_DWORD *)((v125 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
                      if (v126 == 2)
                      {
LABEL_221:
                        v121 = 1024;
                      }
                      else
                      {
                        if (v126 != 3)
                          goto LABEL_238;
                        v121 = 512;
                      }
                      *(_DWORD *)(v114 + 72) |= v121;
                    }
                  }
                }
                else if (sub_22F115064(v115))
                {
                  v114 = v385;
                  goto LABEL_215;
                }
              }
            }
LABEL_238:
            v127 = *(_DWORD *)(v385 + 72);
            if ((v127 & 0x200) == 0)
            {
LABEL_239:
              v340 = 0;
              goto LABEL_252;
            }
            v128 = v9[9];
            if ((*(_BYTE *)(v128 + 246) & 6) != 0)
            {
              v131 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v131 & 8) != 0 && (*(_QWORD *)((v131 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) == 0x20)
              {
                sub_22E8FCA40(v9, v113, 0xDC3u, 0, (uint64_t)v374);
                sub_22E903BEC(v374);
                sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v373);
                sub_22E903BEC(v373);
                goto LABEL_239;
              }
              v340 = 0;
              v376 = sub_22F369084(v9[11], v376, 1);
            }
            else
            {
              v129 = *(_WORD *)(v128 + 148);
              if ((v129 & 8) == 0)
              {
                v88 = v343;
                if (!v405)
                {
                  if ((v129 & 4) != 0)
                    v130 = 4767;
                  else
                    v130 = 4768;
                  sub_22E8FCA40(v9, v113, v130, 0, (uint64_t)v372);
                  sub_22E903BEC(v372);
                  sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v371);
                  sub_22E903BEC(v371);
                }
                v340 = 0;
                v341 = 1;
LABEL_253:
                if (!a3)
                {
                  v132 = *(_QWORD *)(v385 + 40);
                  v133 = (v132 & 7) != 0 ? 0 : v132 & 0xFFFFFFFFFFFFFFF8;
                  v134 = sub_22EFDB894((uint64_t)v338, v133, (uint64_t *)v392);
                  if (v134)
                  {
                    v135 = v134;
                    sub_22E8FCA40(v9, v113, 0x189Au, 0, (uint64_t)&v399);
                    v136 = sub_22E8BAE44((uint64_t)&v399, &v388);
                    LOBYTE(v365) = v405 == 0;
                    v137 = sub_22E894E38(v136, (unsigned __int8 *)&v365);
                    v138 = sub_22E8BAE44(v137, &v387);
                    v139 = *(_QWORD *)(v135 + 40);
                    if ((v139 & 7) != 0)
                      v140 = 0;
                    else
                      v140 = v139 & 0xFFFFFFFFFFFFFFF8;
                    v389[0] = v140;
                    sub_22E8BAE44(v138, v389);
                    sub_22E903BEC((unsigned int *)&v399);
                    sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v370);
                    sub_22E903BEC(v370);
                    sub_22E8FCA40(v9, *(_DWORD *)(v135 + 24), 0x163Cu, 0, (uint64_t)v369);
                    sub_22E903BEC(v369);
                  }
                }
                v141 = v9[9];
                if (!v405)
                {
                  if ((((*(_WORD *)(v141 + 148) & 2) == 0) & ~v340) != 0)
                    goto LABEL_340;
                  v142 = v376 & 0xFFFFFFFFFFFFFFF0;
                  v143 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFFF0) + 8);
                  if ((v143 & 8) != 0 && (*(_WORD *)((v143 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0)
                    goto LABEL_340;
                  v144 = *(_QWORD *)v142;
                  v145 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v142 + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16);
                  if (v145 != 10 && v145 != 32 && !sub_22F115064(v144))
                    goto LABEL_340;
                  v146 = v385;
                  if ((*(_WORD *)(v385 + 76) & 0xE34) == 0)
                  {
                    if ((*(_BYTE *)(v385 + 72) & 1) != 0)
                    {
                      LOBYTE(v149) = 0;
                    }
                    else
                    {
                      v147 = *(_QWORD *)(v385 + 16);
                      v148 = v147 & 0xFFFFFFFFFFFFFFF8;
                      if ((v147 & 4) != 0)
                        v148 = *(_QWORD *)v148;
                      LOBYTE(v149) = 0;
                      if (v148)
                      {
                        if ((*(_WORD *)(v148 + 8) & 0x7F) == 0x13
                          && (*(_QWORD *)(v148 - 8) < 8uLL || (v149 = *(_QWORD *)(v148 - 8) & 7) != 0))
                        {
                          v150 = *(_QWORD *)(v148 + 56);
                          v151 = sub_22EFCE144(v150 + 48, *(_QWORD *)(v385 + 40));
                          if (!v151)
                            goto LABEL_312;
                          v152 = v151;
                          while (1)
                          {
                            v153 = v152 & 0xFFFFFFFFFFFFFFF8;
                            if ((v152 & 4) == 0 || !v153)
                              break;
                            if (*(_QWORD *)v153)
                              v154 = (*(_DWORD *)(*(_QWORD *)v153 + 28) & 0x7F) == 25;
                            else
                              v154 = 0;
                            if (v154)
                            {
                              v153 = *(_QWORD *)v153;
                              goto LABEL_321;
                            }
                            v152 = *(_QWORD *)(v153 + 8);
                            if (!v152)
                              goto LABEL_312;
                          }
                          if (v153 && (*(_DWORD *)(v153 + 28) & 0x7F) == 0x19)
                          {
LABEL_321:
                            LOBYTE(v149) = (*(_WORD *)(v153 + 76) & 0xE34) != 0;
                          }
                          else
                          {
LABEL_312:
                            v174 = (unint64_t *)sub_22F276134(v150);
                            v175 = sub_22F2761B0(v150);
                            if (v174 != (unint64_t *)v175)
                            {
                              v176 = (unint64_t *)v175;
                              do
                              {
                                v177 = *(_QWORD *)(v146 + 40);
                                v178 = (v177 & 7) != 0 ? 0 : v177 & 0xFFFFFFFFFFFFFFF8;
                                v153 = sub_22EFDA7BC(*v174, v178, v21);
                                if (v153)
                                  goto LABEL_321;
                                ++v174;
                              }
                              while (v174 != v176);
                            }
                            LOBYTE(v149) = 0;
                          }
                        }
                      }
                    }
                    if ((v127 & 0x400) == 0 && (v149 & 1) == 0)
                    {
                      sub_22E8FCA40(v9, v113, 0xA70u, 0, (uint64_t)v368);
                      sub_22E903BEC(v368);
                      sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v367);
                      sub_22E903BEC(v367);
                      goto LABEL_339;
                    }
                  }
                  v179 = v376;
                  if ((v127 & 0x630) != 0)
                  {
                    v182 = 128;
                    if ((v127 & 0x430) == 0)
                      v182 = 192;
                  }
                  else
                  {
                    if ((v127 & 0x800) != 0)
                    {
                      v182 = 64;
                      goto LABEL_337;
                    }
                    if ((v127 & 4) == 0)
                      goto LABEL_338;
                    v180 = *(_QWORD *)(v376 & 0xFFFFFFFFFFFFFFF0);
                    v181 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v180 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                    v182 = 64;
                    if (v181 != 10 && v181 != 32)
                    {
                      v183 = sub_22F115064(v180);
                      v179 = v376;
                      if (v183)
                      {
                        v182 = 64;
                        goto LABEL_337;
                      }
LABEL_338:
                      v376 = v179;
LABEL_339:
                      v88 = v343;
LABEL_340:
                      v186 = v9[11];
                      v187 = v376;
                      if ((*(_WORD *)(*(_QWORD *)(v186 + 2000) + 16) & 0x20) != 0)
                      {
                        v189 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFFF0) + 8);
                        v188 = v338;
                        if ((v189 & 8) == 0 || (*(_BYTE *)((v189 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) == 0)
                        {
                          v190 = *(_QWORD *)(v376 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
                          v191 = sub_22F36E228(v9[11]);
                          v192 = *(_QWORD *)(v191 + 48);
                          if (v192)
                            v193 = v192 & 0xFFFFFFFFFFFFFFF0;
                          else
                            v193 = sub_22EF6462C(v186, v191);
                          if (v193 == v190)
                          {
                            v194 = v9[11];
                            if ((*(_WORD *)(*(_QWORD *)(v194 + 2000) + 16) & 0x20) != 0)
                              v195 = *(_WORD *)(*(_QWORD *)(v194 + 2000) + 16) & 0xFFCF | (*(unsigned __int8 *)(*(_QWORD *)(v194 + 2000) + 18) << 16) | 0x57C2000Fu;
                            else
                              v195 = 0;
                            v187 = v376;
                            v88 = v343;
                            if ((v195 & 0xC) != 0)
                            {
                              v399 = (void *)(v195 << 32);
                              v196 = sub_22E491354((unsigned int *)&v399, v376);
                              v187 = sub_22EF5DBC4(v194, v196, (uint64_t)v399);
                              v376 = v187;
                            }
                          }
                          else
                          {
                            v187 = v376;
                            v88 = v343;
                          }
                        }
                      }
                      else
                      {
                        v188 = v338;
                      }
                      v197 = sub_22EFDE094(v9[11], v348, v349, v349, v387, v187, 0, 1, 0, 1);
                      v405 = (int *)v197;
                      if (!a3)
                        *(_DWORD *)(v197 + 28) |= 0x200u;
                      *(_DWORD *)v392 = 5;
                      v399 = &unk_24FAB7980;
                      LODWORD(v400) = 2577;
                      v401[0] = v392;
                      if (sub_22EAB2EB4((uint64_t)v9, v349, v376, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))&v399))
                      {
                        sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v366);
                        v198 = (unsigned int *)v366;
                        goto LABEL_358;
                      }
                      if (v341)
                      {
LABEL_364:
                        sub_22EFC77E8((uint64_t)v405, 1);
                      }
                      else
                      {
                        v199 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v376 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                        if (v199
                          && *(_BYTE *)(v199 + 16) == 45
                          && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v199 + 24)) + 74) & 0x80) != 0)
                        {
                          sub_22E8FCA40(v9, v349, 0x129Eu, 0, (uint64_t)&v399);
                          sub_22E8901B8((uint64_t)&v399, (uint64_t *)&v376);
                          v198 = (unsigned int *)&v399;
LABEL_358:
                          sub_22E903BEC(v198);
                          v341 = 1;
                          goto LABEL_364;
                        }
                      }
                      sub_22EFCCFA0(v348 + 48, (unint64_t)v405);
                      sub_22EFCE90C((uint64_t)(v188 + 6), (uint64_t)v405);
                      if (((1 << *(_DWORD *)(v9[9] + 400)) & 0xDD) == 0)
                      {
                        sub_22E8FCA40(v9, v113, 0xF5Au, 0, (uint64_t)&v399);
                        sub_22E8BAE44((uint64_t)&v399, &v388);
                        goto LABEL_367;
                      }
                      goto LABEL_368;
                    }
                  }
LABEL_337:
                  v184 = v9[11];
                  v399 = (void *)v182;
                  v185 = sub_22E491354((unsigned int *)&v399, v179);
                  v179 = sub_22EF5DBC4(v184, v185, (uint64_t)v399);
                  goto LABEL_338;
                }
                if (((1 << *(_DWORD *)(v141 + 400)) & 0xDD) == 0
                  || (v155 = v408, v338)
                  && v408
                  && ((uint64_t *)v408 == v338
                   || (v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v408 + 32))(v408),
                       v156 == (*(uint64_t (**)(uint64_t *))(*v338 + 32))(v338))))
                {
                  v88 = v343;
                }
                else
                {
                  sub_22E8FCA40(v9, v113, 0xE77u, 0, (uint64_t)&v399);
                  *(_QWORD *)v392 = *(_QWORD *)(v385 + 40);
                  v157 = sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
                  v389[0] = *((_QWORD *)v405 + 5);
                  v158 = sub_22E894538(v157, v389);
                  v365 = *(_QWORD *)(v155 + 40);
                  sub_22E894538(v158, &v365);
                  sub_22E903BEC((unsigned int *)&v399);
                  sub_22E8FCA40(v9, v405[6], 0x176Eu, 0, (uint64_t)&v399);
                  v159 = sub_22E890024((uint64_t)&v399, (uint64_t *)&v405);
                  v160 = 0;
                  v161 = *((_QWORD *)v405 + 5);
                  v162 = "";
                  if ((v161 & 7) != 0)
                  {
                    v88 = v343;
                  }
                  else
                  {
                    v163 = v161 & 0xFFFFFFFFFFFFFFF8;
                    v88 = v343;
                    if (v163)
                    {
                      v164 = *(_DWORD **)(v163 + 16);
                      v165 = *v164;
                      v162 = (const char *)(v164 + 4);
                      v160 = v165;
                    }
                  }
                  *(_QWORD *)v392 = v162;
                  *(_QWORD *)&v392[8] = v160;
                  sub_22F2F2210(v159, (uint64_t)v392);
LABEL_367:
                  sub_22E903BEC((unsigned int *)&v399);
                }
LABEL_368:
                v200 = (uint64_t)v405;
                *(_QWORD *)(v385 + 120) = v405;
                v201 = *(_QWORD *)(v200 + 48);
                v202 = *(_QWORD *)((v201 & 0xFFFFFFFFFFFFFFF0) + 8);
                v203 = v201 & 7 | v202;
                v365 = v203;
                v204 = (uint64_t *)(v376 & 0xFFFFFFFFFFFFFFF0);
                if ((v376 & 7 | *(_QWORD *)((v376 & 0xFFFFFFFFFFFFFFF0) + 8)) == (*(_QWORD *)((v202 & 0xFFFFFFFFFFFFFFF0)
                                                                                               + 8) | v201 & 7 | v202 & 7))
                {
                  v205 = a5;
                  v206 = v21;
                  v87 = 1;
                  goto LABEL_395;
                }
                if (*(_BYTE *)(*v204 + 16) == 32
                  && (v207 = *(_QWORD *)(v202 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v207 + 16) == 32))
                {
                  if ((sub_22EF6ED94(v9[11], *v204, v207) & 1) == 0)
                    goto LABEL_373;
LABEL_376:
                  v212 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((v376 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
                  if (v212 != (uint64_t *)(*(_QWORD *)(*(_QWORD *)((v365 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
                    && sub_22F110E9C(*v212))
                  {
                    sub_22E8FCA40(v9, v113, 0x11D7u, 0, (uint64_t)&v399);
                    *(_QWORD *)v392 = *(_QWORD *)(v385 + 40);
                    v213 = sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
                    v214 = sub_22E8901B8(v213, &v377);
                    v389[0] = *((_QWORD *)v405 + 5);
                    v215 = sub_22E894538(v214, v389);
                    sub_22E8901B8(v215, &v365);
                    sub_22E903BEC((unsigned int *)&v399);
                    v87 = 1;
                    v211 = (unsigned int *)&v363;
                    goto LABEL_374;
                  }
                  v87 = 1;
                }
                else
                {
                  if (!sub_22F32EE14((uint64_t)v9, v349, v376, v203))
                    goto LABEL_376;
LABEL_373:
                  sub_22E8FCA40(v9, v113, 0x11D7u, 0, (uint64_t)&v399);
                  *(_QWORD *)v392 = *(_QWORD *)(v385 + 40);
                  v208 = sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
                  v209 = sub_22E8901B8(v208, &v377);
                  v389[0] = *((_QWORD *)v405 + 5);
                  v210 = sub_22E894538(v209, v389);
                  sub_22E8901B8(v210, &v365);
                  sub_22E903BEC((unsigned int *)&v399);
                  v87 = 0;
                  v211 = (unsigned int *)&v364;
LABEL_374:
                  sub_22E8FCA40(v9, v405[6], 0x163Cu, 0, (uint64_t)v211);
                  sub_22E903BEC(v211);
                }
                v216 = *(_QWORD *)((v377 & 0xFFFFFFFFFFFFFFF0) + 8);
                if ((v216 & 8) != 0 && (*(_QWORD *)((v216 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) == 0x10)
                {
                  v217 = *(_QWORD *)((v365 & 0xFFFFFFFFFFFFFFF0) + 8);
                  if (((v217 & 8) == 0 || (*(_QWORD *)((v217 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) != 0x10)
                    && (*(_BYTE *)(v9[9] + 246) & 6) != 0)
                  {
                    sub_22E8FCA40(v9, v113, 0x1423u, 0, (uint64_t)&v399);
                    *(_QWORD *)v392 = *(_QWORD *)(v385 + 40);
                    v218 = sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
                    v389[0] = *((_QWORD *)v405 + 5);
                    sub_22E894538(v218, v389);
                    sub_22E903BEC((unsigned int *)&v399);
                    sub_22E8FCA40(v9, v405[6], 0x163Cu, 0, (uint64_t)v362);
                    sub_22E903BEC(v362);
                  }
                }
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v385 + 56) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16) == 32
                   || (v221 = *(_QWORD *)((v377 & 0xFFFFFFFFFFFFFFF0) + 8), (v221 & 8) != 0)
                   && (*(_QWORD *)((v221 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) == 0x20)
                  && (v219 = *(_QWORD *)((v365 & 0xFFFFFFFFFFFFFFF0) + 8), (v219 & 8) != 0)
                  && (*(_QWORD *)((v219 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x30) == 0x10)
                {
                  v205 = a5;
                  if ((*(_BYTE *)(v9[9] + 246) & 6) != 0)
                  {
                    v206 = v21;
                    sub_22E8FCA40(v9, v113, 0x1288u, 0, (uint64_t)&v399);
                    *(_QWORD *)v392 = *(_QWORD *)(v385 + 40);
                    v220 = sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
                    v389[0] = *((_QWORD *)v405 + 5);
                    sub_22E894538(v220, v389);
                    sub_22E903BEC((unsigned int *)&v399);
                    goto LABEL_395;
                  }
                }
                else
                {
                  v205 = a5;
                }
                v206 = v21;
LABEL_395:
                v222 = (uint64_t)v405;
                if (v340 & 1 | ((unint64_t)*(unsigned __int16 *)(v9[9] + 148) >> 1) & 1
                  || (v227 = *(_QWORD *)((*((_QWORD *)v405 + 6) & 0xFFFFFFFFFFFFFFF0) + 8), (v227 & 8) != 0)
                  && (*(_WORD *)((v227 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0)
                {
                  if ((*(_BYTE *)(v385 + 28) & 0x80) == 0 && (v405[7] & 0x80) == 0)
                  {
                    v333 = v9;
                    v223 = *((_QWORD *)v405 + 6);
                    v224 = (_QWORD *)(v223 & 0xFFFFFFFFFFFFFFF0);
                    v225 = *(_QWORD *)((v223 & 0xFFFFFFFFFFFFFFF0) + 8);
                    if ((v225 & 8) != 0)
                      v226 = (*(_DWORD *)((v225 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
                    else
                      v226 = 0;
                    v398 = v226;
                    v228 = *(_DWORD *)(v385 + 72);
                    v229 = v228 & 0x430;
                    if ((v228 & 0x430) != 0)
                    {
                      v230 = 2u;
                      goto LABEL_415;
                    }
                    if ((v228 & 0x200) != 0)
                    {
                      v230 = 3u;
                      goto LABEL_415;
                    }
                    if ((v228 & 0x800) != 0)
                    {
LABEL_412:
                      v230 = 1;
                      goto LABEL_415;
                    }
                    if ((v228 & 4) == 0)
                    {
LABEL_414:
                      v230 = 0;
                      goto LABEL_415;
                    }
                    v231 = *(_QWORD *)(*(_QWORD *)(v385 + 56) & 0xFFFFFFFFFFFFFFF0);
                    v232 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v231 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                    v230 = 1u;
                    if (v232 == 10)
                    {
                      v229 = 0;
                      goto LABEL_415;
                    }
                    v43 = v232 == 32;
                    v229 = 0;
                    if (!v43)
                    {
                      v233 = sub_22F115064(v231);
                      v229 = 0;
                      if (v233)
                        goto LABEL_412;
                      goto LABEL_414;
                    }
LABEL_415:
                    if (v230 != v226 && v226 != 4)
                    {
                      if (v226)
                      {
                        if (v226 == 1 && v229 && (*(_BYTE *)(v222 + 88) & 7) == 1)
                        {
                          if ((v223 & 8) != 0)
                          {
                            v224 = (_QWORD *)*v224;
                            v234 = *(_QWORD *)((v223 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v223 & 7;
                          }
                          else
                          {
                            v234 = v223 & 7;
                          }
                          if ((v234 & 0x1C0) != 0)
                          {
                            *(_QWORD *)(v222 + 48) = sub_22EF5DBC4(v333[11], (uint64_t)v224, v234 & 0xFFFFFFFFFFFFFE3FLL | 0x80);
                            goto LABEL_429;
                          }
                        }
                      }
                      else if ((*(_WORD *)(v333[9] + 148) & 2) != 0)
                      {
                        goto LABEL_429;
                      }
                      __asm { BR              X10 ; loc_22EC7AAB4 loc_22EC7AB0C loc_22EC7AB58 loc_22EC7ABE4 }
                    }
LABEL_429:
                    v9 = v333;
                    v88 = v343;
                  }
                }
                if ((*(_BYTE *)(v385 + 29) & 1) == 0)
                {
                  v339 = 0;
                  LODWORD(v21) = v206;
                  a5 = v205;
                  goto LABEL_442;
                }
                sub_22EFC8E88(v385);
                v236 = *(uint64_t **)v235;
                v237 = *(unsigned int *)(v235 + 8);
                v238 = *(uint64_t **)v235;
                LODWORD(v21) = v206;
                a5 = v205;
                if ((_DWORD)v237)
                {
                  v242 = 8 * v237;
                  v238 = *(uint64_t **)v235;
                  while (*(_WORD *)(*v238 + 32) != 337)
                  {
                    ++v238;
                    v242 -= 8;
                    if (!v242)
                      goto LABEL_441;
                  }
                }
                if (v238 == &v236[v237])
                  goto LABEL_441;
                do
                {
                  v240 = *v236++;
                  v239 = v240;
                  v241 = *(unsigned __int16 *)(v240 + 32) | (*(unsigned __int8 *)(v240 + 34) << 16);
                }
                while (*(_WORD *)(v240 + 32) != 337);
                if ((v241 & 0x40000) == 0 || *(_DWORD *)(v239 + 48) != 3)
                {
LABEL_441:
                  v339 = 0;
                  goto LABEL_442;
                }
                v89 = (unsigned int *)v360;
                sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1ABEu, 0, (uint64_t)v360);
                v339 = 0;
LABEL_134:
                sub_22E903BEC(v89);
                goto LABEL_442;
              }
              v166 = *(_QWORD *)(v376 & 0xFFFFFFFFFFFFFFF0);
              v88 = v343;
              if ((!v166 || *(_BYTE *)(v166 + 16) != 32)
                && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v166 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
                 || (v166 = sub_22F10CF48(v166)) == 0)
                || (v167 = sub_22F31179C(v166)) == 0
                || !sub_22EFDABBC(v167))
              {
                v340 = 1;
                goto LABEL_253;
              }
              sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0xA7Eu, 0, (uint64_t)&v399);
              sub_22E8901B8((uint64_t)&v399, (uint64_t *)&v376);
              sub_22E903BEC((unsigned int *)&v399);
              sub_22E8FCA40(v9, *(_DWORD *)(v348 + 24), 0x1620u, 0, (uint64_t)&v399);
              v168 = 0;
              v169 = *(_QWORD *)(v348 + 40);
              v170 = "";
              if ((v169 & 7) == 0)
              {
                v171 = v169 & 0xFFFFFFFFFFFFFFF8;
                if (v171)
                {
                  v172 = *(_DWORD **)(v171 + 16);
                  v173 = *v172;
                  v170 = (const char *)(v172 + 4);
                  v168 = v173;
                }
              }
              *(_QWORD *)v392 = v170;
              *(_QWORD *)&v392[8] = v168;
              sub_22F2F2210((uint64_t)&v399, (uint64_t)v392);
              sub_22E903BEC((unsigned int *)&v399);
              v340 = 1;
            }
LABEL_252:
            v88 = v343;
            goto LABEL_253;
          }
        }
      }
      v40 = 0;
      v16 = v387;
      v36 = (unint64_t)v338;
      v11 = v10 - 48;
      goto LABEL_131;
    }
    v27 = a4;
    v28 = v9;
    v29 = 2926;
LABEL_30:
    sub_22E8FCA40(v28, v27, v29, 0, (uint64_t)&v399);
    *(_QWORD *)v392 = *(_QWORD *)(v25 + 40);
    sub_22E894538((uint64_t)&v399, (uint64_t *)v392);
    goto LABEL_31;
  }
  if ((*(_DWORD *)(v10 - 20) & 0x7F) != 0x14)
  {
    sub_22E8FCA40(v9, a3, 0xB6Du, 0, (uint64_t)v378);
    v15 = (unsigned int *)v378;
    goto LABEL_58;
  }
  if (a5)
  {
    sub_22E8FCA40(v9, a3, 0x129Cu, 0, (uint64_t)v380);
    v15 = (unsigned int *)v380;
    goto LABEL_58;
  }
  v343 = v23;
  v36 = *(_QWORD *)(v10 + 40);
  if (!v36)
  {
    sub_22E8FCA40(v9, a3, 0xF59u, 0, (uint64_t)v379);
    v15 = (unsigned int *)v379;
    goto LABEL_58;
  }
  v345 = a2;
  v346 = v24;
  v347 = 20;
  v37 = *(_QWORD *)(v10 - 8);
  if ((v37 & 7) != 0)
    v38 = 0;
  else
    v38 = v37 & 0xFFFFFFFFFFFFFFF8;
  v39 = sub_22EFDD7A0(v36, v38);
  if (!v39)
    return 0;
  v25 = v39;
  v385 = sub_22EFDA7BC(v39, a6, a9);
  v40 = v10 - 48;
  if (!v385)
  {
    v27 = a4;
    v28 = v9;
    v29 = 2900;
    goto LABEL_30;
  }
LABEL_131:
  v338 = (uint64_t *)v36;
  v339 = v40;
  v329 = v11;
  v405 = 0;
  if (v16)
  {
    v88 = v343;
    v89 = (unsigned int *)v361;
    sub_22E8FCA40(v9, v343, 0xCD5u, 0, (uint64_t)v361);
    v341 = 0;
    v87 = 1;
    goto LABEL_134;
  }
  v341 = 0;
  v87 = 1;
  v88 = v343;
LABEL_442:
  v344 = v88;
  v243 = a5;
  v244 = a5 ^ 1u;
  v245 = a3;
  v246 = a3;
  v351 = a4;
  v247 = v244;
  sub_22F3B7074(v9[11], v9[27], v246, a4, v385, v244, (uint64_t)v405, v349);
  v45 = (_QWORD *)v248;
  if ((v341 & 1) != 0 || !v87)
    sub_22EFC77E8(v248, 1);
  v249 = *(_QWORD *)(v385 + 104);
  if (v249)
  {
    sub_22F3B5618(*(_QWORD *)(v385 + 104), v9[11], v338);
    v326 = v21;
    if ((v243 & 1) != 0)
    {
      v279 = sub_22EFDA1A0(v348, *(_QWORD *)(v249 + 40), (*(_QWORD *)(v249 + 56) >> 17) & 1, 0);
      if (!v279)
        v279 = sub_22EC7B8A4(v9[11], v346, v249, v245, v351);
      v45[8] = v279;
      v21 = (uint64_t)(v9 + 9);
      if ((*(_BYTE *)(v9[9] + 1) & 1) != 0)
        v280 = v247;
      else
        v280 = 1;
      if (((v341 | v280) & 1) == 0
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v405 + 6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
      {
        sub_22EAE5FA8((uint64_t)&v399, (uint64_t)v9, v249 + 48);
        v281 = *(_QWORD *)(v249 + 120);
        v282 = sub_22E3CD3D4(v9[11] + 2032, 32, 3);
        v283 = v9[11];
        v284 = *(_QWORD *)(v281 + 48);
        *(_QWORD *)v392 = 0;
        v335 = v281;
        sub_22EFF69F0(v282, v283, v281, 0, v284, 1, v344, v392, 0);
        sub_22EB22288((uint64_t)v9, v282, 0);
        v285 = *(_QWORD *)(v281 + 48);
        v337 = (unsigned int *)sub_22E3CD3D4(v9[11] + 2032, 24, 3);
        sub_22F003694(v337, v285, 4, v282, 0, 0, 0);
        v331 = sub_22E3CD3D4(v9[11] + 2032, 48, 3);
        v286 = (uint64_t)v405;
        sub_22F3B6034((uint64_t)v405, *(_QWORD *)(v335 + 48));
        sub_22F2750A4(v331, v286, v287, v344, v405[6], (uint64_t)v337, 1, 1);
        v288 = *(_QWORD *)(v249 + 80);
        *(_DWORD *)v392 = 3;
        *(_QWORD *)&v392[8] = 0;
        *(_QWORD *)&v392[16] = v288;
        *(_DWORD *)&v392[24] = 0;
        *(_DWORD *)&v392[32] = v344;
        LOBYTE(v393) = 0;
        v289 = sub_22EC45014();
        if ((v289 & 1) == 0)
        {
          if ((v289 & 0xFFFFFFFFFFFFFFFELL) != 0)
            v290 = sub_22EBCCCF0((uint64_t)v9, (int *)(v289 & 0xFFFFFFFFFFFFFFFELL));
          else
            v290 = 0;
          v45[10] = v290;
        }
        sub_22EAE7390((uint64_t)&v399);
      }
    }
    else
    {
      v21 = (uint64_t)(v9 + 9);
    }
    if (sub_22F32AD8C(v385) && !sub_22F32AD8C(v249))
    {
      sub_22E8FCA40(v9, *(_DWORD *)(v249 + 24), 0x1B0Bu, 0, (uint64_t)v359);
      sub_22E903BEC(v359);
      sub_22E8FCA40(v9, *(_DWORD *)(v385 + 24), 0x1780u, 0, (uint64_t)v358);
      sub_22E903BEC(v358);
    }
    v314 = *(_WORD *)(*(_QWORD *)v21 + 148);
    LODWORD(v21) = v326;
    if ((v314 & 2) != 0)
    {
      if (v243)
      {
        v315 = sub_22EFDBF50(v249);
        if (v315 <= 0xB && ((1 << v315) & 0xE40) != 0)
        {
          sub_22E8FCA40(v9, *(_DWORD *)(v249 + 24), 0xA63u, 0, (uint64_t)&v399);
          LODWORD(v389[0]) = 1;
          v316 = sub_22E8900C4((uint64_t)&v399, (int *)v389);
          *(_QWORD *)v392 = *(_QWORD *)(v249 + 40);
          sub_22E894538(v316, (uint64_t *)v392);
          sub_22E903BEC((unsigned int *)&v399);
        }
      }
    }
  }
  v250 = *(_QWORD *)(v385 + 112);
  v251 = v344;
  if (v250)
  {
    sub_22F3B5618(*(_QWORD *)(v385 + 112), v9[11], v338);
    if (!v243)
    {
      v252 = v339;
      if (v347 == 21)
        goto LABEL_454;
LABEL_462:
      v268 = sub_22EFDE638(v252, v388, v21);
      if (v268)
      {
        v260 = v268;
        sub_22E8FCA40(v9, v251, 0x11D5u, 0, (uint64_t)&v399);
        sub_22E8BAE44((uint64_t)&v399, &v388);
        sub_22E903BEC((unsigned int *)&v399);
        v261 = (unsigned int *)&v354;
        goto LABEL_464;
      }
      sub_22EFC80C4((uint64_t)v45, v252 + 48);
      sub_22EFCCFA0(v252 + 48, (unint64_t)v45);
      goto LABEL_473;
    }
    v291 = sub_22EFDA1A0(v348, *(_QWORD *)(v250 + 40), (*(_QWORD *)(v250 + 56) >> 17) & 1, 0);
    if (!v291)
      v291 = sub_22EC7B8A4(v9[11], v346, v250, v245, v351);
    v45[9] = v291;
    v292 = (*(_BYTE *)(v9[9] + 1) & 1) != 0 ? v247 : 1;
    if (((v341 | v292) & 1) == 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v405 + 6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 45)
    {
      v327 = v21;
      sub_22EAE5FA8((uint64_t)v392, (uint64_t)v9, v250 + 48);
      v293 = *(_QWORD *)(v250 + 120);
      v294 = sub_22E3CD3D4(v9[11] + 2032, 32, 3);
      v295 = v9[11];
      v296 = *(_QWORD *)(v293 + 48);
      v399 = 0;
      sub_22EFF69F0(v294, v295, v293, 0, v296, 1, v344, &v399, 0);
      sub_22EB22288((uint64_t)v9, v294, 0);
      v297 = *(_QWORD *)(v293 + 48);
      v298 = (unsigned int *)sub_22E3CD3D4(v9[11] + 2032, 24, 3);
      sub_22F003694(v298, v297, 4, v294, 0, 0, 0);
      v21 = (uint64_t)v9;
      v299 = sub_22E3CD3D4(v9[11] + 2032, 48, 3);
      v300 = (uint64_t)v405;
      sub_22F3B6034((uint64_t)v405, *(_QWORD *)(v293 + 48));
      sub_22F2750A4(v299, v300, v301, v344, v405[6], (uint64_t)v298, 1, 1);
      v302 = **(_QWORD **)(v250 + 96);
      v303 = *(_QWORD *)(v302 + 48);
      v304 = *(_QWORD *)(v303 & 0xFFFFFFFFFFFFFFF0);
      if (!v304 || (v305 = *(_DWORD *)(v304 + 16), (v305 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v304 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v304 = sub_22F10CF48(v304)) == 0)
        {
LABEL_524:
          v306 = sub_22E3CD3D4(*(_QWORD *)(v21 + 88) + 2032, 32, 3);
          v307 = *(_QWORD *)(v21 + 88);
          v399 = 0;
          sub_22EFF69F0(v306, v307, v302, 0, v303, 1, v344, &v399, 0);
          sub_22EB22288(v21, v306, 0);
          v308 = sub_22EB4785C(v21, v345, v344, 21, v299, v306);
          v309 = v385;
          v310 = (unsigned __int8 *)(v308 & 0xFFFFFFFFFFFFFFFELL);
          if ((*(_BYTE *)(v385 + 73) & 1) != 0)
          {
            if (v310)
            {
              if (*v310 == 141)
              {
                v389[0] = 0;
                v311 = sub_22EFFA604(*(unsigned __int8 **)&v310[v310[3]]);
                if (v311)
                {
                  if ((*(_DWORD *)(v311 + 28) & 0x7Eu) - 52 <= 5)
                  {
                    v389[0] = v311;
                    if ((*(_BYTE *)(v311 + 82) & 0x80) == 0
                      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v309 + 56) & 0xFFFFFFFFFFFFFFF0)
                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) & 0xFE) == 0x28)
                    {
                      sub_22E8FCA40((_QWORD *)v21, v344, 0xAD2u, 0, (uint64_t)&v399);
                      v408 = *(_QWORD *)(v385 + 56);
                      sub_22E8901B8((uint64_t)&v399, &v408);
                      sub_22E903BEC((unsigned int *)&v399);
                      v312 = *(_QWORD *)(v389[0] + 56);
                      if ((v312 & 4) != 0 && (v322 = v312 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v322 + 16)))
                        v313 = **(int ***)(v322 + 24);
                      else
                        v313 = (int *)(v389[0] + 64);
                      sub_22E8FCA40((_QWORD *)v21, *v313, 0x155Cu, 0, (uint64_t)&v399);
                      sub_22E890024((uint64_t)&v399, v389);
                      sub_22E903BEC((unsigned int *)&v399);
                    }
                  }
                }
              }
            }
          }
          v45[11] = v310;
          sub_22EAE7390((uint64_t)v392);
          v9 = (_QWORD *)v21;
          LODWORD(v21) = v327;
          v251 = v344;
          goto LABEL_447;
        }
        v305 = *(_DWORD *)(v304 + 16);
      }
      if ((v305 & 0x100000) != 0)
      {
        do
        {
          v304 = *(_QWORD *)(*(_QWORD *)(v304 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v304)
          {
            v324 = *(_DWORD *)(v304 + 16);
            if ((v324 & 0xFE) == 0x28)
              continue;
          }
          v304 = sub_22F10CF48(v304);
          v324 = *(_DWORD *)(v304 + 16);
        }
        while ((v324 & 0x100000) != 0);
      }
      v303 = *(_QWORD *)(v304 + 32);
      goto LABEL_524;
    }
  }
LABEL_447:
  v252 = v339;
  if (v347 != 21)
  {
    if (v243)
    {
      v262 = sub_22EFDE5CC(v339, v387);
      if (v262)
      {
        v263 = v262;
        sub_22E8FCA40(v9, v251, 0xCD0u, 0, (uint64_t)&v399);
        v264 = sub_22E8BAE44((uint64_t)&v399, &v388);
        v265 = *(_QWORD *)(*(_QWORD *)(v263 + 48) + 40);
        if ((v265 & 7) != 0)
          v266 = 0;
        else
          v266 = v265 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v392 = v266;
        v267 = sub_22E8BAE44(v264, (uint64_t *)v392);
        sub_22E8BAE44(v267, &v387);
        sub_22E903BEC((unsigned int *)&v399);
        sub_22E8FCA40(v9, *(_DWORD *)(v263 + 24), 0x6Fu, 0, (uint64_t)v355);
        sub_22E903BEC(v355);
      }
    }
    goto LABEL_462;
  }
  if (v243)
  {
    v253 = sub_22EFDE5CC(v329, v387);
    if (v253)
    {
      v254 = v253;
      sub_22E8FCA40(v9, v351, 0xCD0u, 0, (uint64_t)&v399);
      v255 = sub_22E8BAE44((uint64_t)&v399, &v388);
      v256 = *(_QWORD *)(*(_QWORD *)(v254 + 48) + 40);
      if ((v256 & 7) != 0)
        v257 = 0;
      else
        v257 = v256 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v392 = v257;
      v258 = sub_22E8BAE44(v255, (uint64_t *)v392);
      sub_22E8BAE44(v258, &v387);
      sub_22E903BEC((unsigned int *)&v399);
      sub_22E8FCA40(v9, *(_DWORD *)(v254 + 24), 0x6Fu, 0, (uint64_t)v357);
      sub_22E903BEC(v357);
    }
  }
LABEL_454:
  v259 = sub_22EFDE638(v329, v388, v21);
  if (v259)
  {
    v260 = v259;
    sub_22E8FCA40(v9, v351, 0x11D5u, 0, (uint64_t)&v399);
    sub_22E8BAE44((uint64_t)&v399, &v388);
    sub_22E903BEC((unsigned int *)&v399);
    v261 = (unsigned int *)&v356;
LABEL_464:
    sub_22E8FCA40(v9, *(_DWORD *)(v260 + 24), 0x6Cu, 0, (uint64_t)v261);
    v15 = v261;
    goto LABEL_58;
  }
  sub_22EFC80C4((uint64_t)v45, v10);
  sub_22EFCCFA0(v10, (unint64_t)v45);
  v269 = v9[9];
  if ((*(_BYTE *)(v269 + 1) & 0x80) != 0
    && ((1 << *(_DWORD *)(v269 + 400)) & 0xDD) != 0
    && !sub_22EFDAC68((uint64_t)v338))
  {
    *(_QWORD *)v392 = 0;
    if ((v243 & 1) != 0)
    {
      if (!v387)
        goto LABEL_473;
      v270 = v388;
      if (v387 == v388)
        goto LABEL_473;
    }
    else
    {
      v270 = v388;
    }
    v317 = sub_22EFDB894((uint64_t)v338, v270, (uint64_t *)v392);
    if (v317)
    {
      v318 = v317;
      if ((*(_BYTE *)(v317 + 88) & 8) != 0)
      {
        v319 = *(_QWORD *)(v10 + 40);
        if (v319)
        {
          v320 = *(_QWORD *)v392;
          if (*(_QWORD *)v392)
          {
            if (v319 == *(_QWORD *)v392
              || (v321 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v319 + 32))(v319),
                  v321 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v320 + 32))(v320)))
            {
              sub_22E8FCA40(v9, *(_DWORD *)(v318 + 24), 0x13B9u, 0, (uint64_t)&v399);
              sub_22E8BAE44((uint64_t)&v399, &v388);
              sub_22E903BEC((unsigned int *)&v399);
              sub_22EFC77E8(v318, 1);
            }
          }
        }
      }
    }
  }
LABEL_473:
  if (!v45[7])
  {
    v271 = v45[6];
    if (v271)
    {
      if ((*(_DWORD *)(v271 + 72) & 0x18000) == 0x8000)
      {
        if ((*(_DWORD *)(v271 + 28) & 0x7F) != 0x53)
        {
          v272 = *(_QWORD *)(v271 + 16);
          v273 = v272 & 0xFFFFFFFFFFFFFFF8;
          if ((v272 & 4) != 0)
            v273 = *(_QWORD *)v273;
          for (j = *(_WORD *)(v273 + 8) & 0x7F; j != 83; j = *(_WORD *)(v273 + 8) & 0x7F)
          {
            v275 = -40;
            if (j > 70)
            {
              if (j == 71)
              {
                v275 = -56;
                goto LABEL_496;
              }
              if (j == 81)
                goto LABEL_496;
            }
            else
            {
              if (j <= 0x18)
              {
                if (j == 16)
                  goto LABEL_483;
                if (((1 << j) & 0x1066) != 0)
                  goto LABEL_496;
                if (j == 24)
                {
LABEL_483:
                  v275 = -48;
                  goto LABEL_496;
                }
              }
              if (j == 70)
              {
                v275 = -64;
                goto LABEL_496;
              }
            }
            v276 = j - 52;
            if ((j - 33) >= 5)
              v277 = -48;
            else
              v277 = -64;
            if (v276 >= 6)
              v275 = v277;
            else
              v275 = -72;
LABEL_496:
            v278 = *(_QWORD *)(v273 + v275 + 16);
            v273 = v278 & 0xFFFFFFFFFFFFFFF8;
            if ((v278 & 4) != 0)
              v273 = *(_QWORD *)v273;
          }
          v271 = v273 - 40;
        }
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v271 + 88) + 2000) + 148) & 0x80) != 0)
          return v45;
        sub_22E8FCA40(v9, v351, 0xFF3u, 0, (uint64_t)v353);
        sub_22E903BEC(v353);
        v260 = v45[6];
        v261 = (unsigned int *)&v352;
        goto LABEL_464;
      }
    }
  }
  return v45;
}

uint64_t sub_22EC7B8A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int i;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v5 = a4;
  if (!a4)
    v5 = *(_DWORD *)(a3 + 24);
  if (!a5)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
    if (v9)
    {
      sub_22F0D60E4(v9);
      a5 = v10;
    }
    else
    {
      a5 = *(_DWORD *)(a3 + 108);
    }
  }
  if (a2)
    v12 = a2 + 48;
  else
    v12 = 0;
  v11 = *(_QWORD *)(a3 + 56);
  v13 = sub_22F3B51C0(a1, v5, a5, *(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), v12, (v11 >> 17) & 1, (v11 & 0x40000) != 0, (v11 & 0x80000) != 0, 1, (*(_DWORD *)(a3 + 28) & 0x200) != 0, (v11 & 0x200000) != 0, v24, BYTE3(v11) & 3, (BYTE3(v11) & 3) >> 16, (v11 & 0x200000000) != 0);
  sub_22EFDBF50(v13);
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    if (!v13 || (v15 = v13, (*(_DWORD *)(v13 + 28) & 0x7F) != 0x53))
    {
      v16 = *(_QWORD *)(v13 + 16);
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v17 = *(_QWORD *)v17;
      for (i = *(_WORD *)(v17 + 8) & 0x7F; i != 83; i = *(_WORD *)(v17 + 8) & 0x7F)
      {
        v19 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v19 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_26;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_25;
          if (i == 16)
            goto LABEL_19;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_32;
          if (i == 24)
          {
LABEL_19:
            v19 = -48;
          }
          else
          {
LABEL_25:
            if (i != 70)
            {
LABEL_26:
              v20 = i - 52;
              if ((i - 33) >= 5)
                v21 = -48;
              else
                v21 = -64;
              if (v20 >= 6)
                v19 = v21;
              else
                v19 = -72;
              goto LABEL_32;
            }
            v19 = -64;
          }
        }
LABEL_32:
        v22 = *(_QWORD *)(v17 + v19 + 16);
        v17 = v22 & 0xFFFFFFFFFFFFFFF8;
        if ((v22 & 4) != 0)
          v17 = *(_QWORD *)v17;
      }
      v15 = v17 - 40;
    }
    sub_22EFCA91C(v13, v14, *(_QWORD *)(v15 + 88));
  }
  *(_OWORD *)(v13 + 120) = *(_OWORD *)(a3 + 120);
  v25 = &v27;
  v26 = 0x100000000;
  sub_22F3B5450(a3, (uint64_t)&v25);
  sub_22F3B551C(v13, a1, *(const void **)(a3 + 96), *(unsigned int *)(a3 + 104), (uint64_t)v25, v26);
  sub_22EFC80C4(v13, v12);
  *(_QWORD *)(v13 + 56) &= ~0x200000uLL;
  if (v25 != &v27)
    free(v25);
  return v13;
}

unint64_t sub_22EC7BB24(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 88) & 8) != 0)
  {
    result = sub_22EFDBA90(a2, *(_QWORD *)(a3 + 40), (*(_QWORD *)(a3 + 56) >> 17) & 1, 0, 1, 0);
    if (!result)
      return result;
    v7 = result;
    if ((*(_BYTE *)(result + 58) & 8) != 0)
    {
      v8 = sub_22F318070(a2);
      if (v8 == v9)
      {
LABEL_15:
        v11 = sub_22E496488(a2);
        if (v11 == v12)
          return 0;
        v13 = v11;
        v14 = v12;
        while (1)
        {
          v15 = sub_22F318070(v13);
          if (v15 != v16)
            break;
          do
          {
LABEL_26:
            v13 = *(_QWORD *)(v13 + 128);
            if (!v13)
              break;
          }
          while ((*(_BYTE *)(v13 + 28) & 0x80) != 0
               || *(_QWORD *)(v13 + 40) >= 8uLL && (*(_QWORD *)(v13 + 40) & 7) == 0);
          result = 0;
          if (v13 == v14)
            return result;
        }
        v17 = *(_QWORD *)(v7 + 40);
        while (*(_QWORD *)(v15 + 80) != v17 && *(_QWORD *)(v15 + 88) != v17 || *(_QWORD *)(v15 + 120) != a4)
        {
          do
            v15 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v15 && ((*(_DWORD *)(v15 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v15 + 73) & 0x40) != 0));
          if (v15 == v16)
            goto LABEL_26;
        }
      }
      else
      {
        v10 = *(_QWORD *)(v7 + 40);
        while (*(_QWORD *)(v8 + 80) != v10 && *(_QWORD *)(v8 + 88) != v10 || *(_QWORD *)(v8 + 120) != a4)
        {
          do
            v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v8 && ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v8 + 73) & 0x40) != 0));
          if (v8 == v9)
            goto LABEL_15;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t sub_22EC7BCA4(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  const char *v61;
  unint64_t v62;
  unsigned int v63;
  _DWORD *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  void **v68;
  size_t v69;
  uint64_t v70;
  char v71;
  _BYTE v72[96];
  unsigned int v73[24];
  _BYTE v74[96];
  unsigned int v75[24];
  _BYTE v76[96];
  uint64_t v77[3];
  void *__p;
  __int16 v79;
  char v80;
  void *v81[2];
  char v82;
  unsigned int v83[24];
  uint64_t v84;
  _BYTE v85[96];
  __int128 v86;
  const char *v87;
  __int16 v88;
  unint64_t v89;
  _QWORD v90[2];
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[2];
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v95[0] = 0;
  v95[1] = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)a4 + 104))(a4, v95);
  if (v97 != v98)
  {
    v90[0] = 0;
    v90[1] = 0;
    v91 = 0;
    v93 = 0;
    v94 = 0;
    v92 = 0;
    sub_22EC7C32C(a4, (uint64_t)v90);
    v10 = v97;
    v11 = v98;
    if (v97 == v98)
    {
LABEL_3:
      sub_22E637A14((uint64_t)v90);
      return sub_22E637A14((uint64_t)v95);
    }
    v13 = a5;
    v14 = "";
    while (1)
    {
      v15 = *(_QWORD *)(v10 + 16);
      v89 = v15;
      if ((*(_BYTE *)(v15 + 28) & 0x80) != 0
        || (*(_BYTE *)(v15 + 73) & 0x40) != 0
        || (*(_DWORD *)(v15 + 76) & 0x60000) == 0x40000)
      {
        goto LABEL_25;
      }
      v16 = *(_QWORD *)(v15 + 40);
      v17 = (v16 & 7) != 0 ? 0 : v16 & 0xFFFFFFFFFFFFFFF8;
      if (sub_22EFDE638(a3, v17, 1u))
        goto LABEL_25;
      v18 = sub_22EFDA1A0(a3, *(_QWORD *)(v89 + 80), 1, 0);
      if (v18)
      {
        if (!(*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 64))(v18))
        {
          if ((*(_BYTE *)(v89 + 72) & 1) != 0)
            goto LABEL_25;
          v27 = sub_22EFDA1A0(a3, *(_QWORD *)(v89 + 88), 1, 0);
          if (v27)
          {
            if (!(*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 64))(v27))
              goto LABEL_25;
          }
        }
      }
      v19 = *(_QWORD *)(v89 + 40);
      if ((v19 & 7) != 0)
        v20 = 0;
      else
        v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      v21 = sub_22EFDE5CC(a3, v20);
      if (v21)
      {
        v22 = v21;
        sub_22E8FCA40(a1, *(_DWORD *)(v89 + 24), 0x1A6Cu, 0, (uint64_t)&v86);
        v23 = *(_QWORD *)(v89 + 40);
        if ((v23 & 7) != 0)
          v24 = 0;
        else
          v24 = v23 & 0xFFFFFFFFFFFFFFF8;
        v77[0] = v24;
        sub_22E8BAE44((uint64_t)&v86, v77);
        sub_22E903BEC((unsigned int *)&v86);
        v25 = *(_DWORD *)(v22 + 24);
        if (!v25)
          goto LABEL_25;
        sub_22E8FCA40(a1, v25, 0x1781u, 0, (uint64_t)v85);
        v26 = (unsigned int *)v85;
      }
      else
      {
        v28 = *(_QWORD *)(v89 + 40);
        if ((v28 & 7) != 0)
          v29 = 0;
        else
          v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        v30 = (*(_DWORD *)(v89 + 72) >> 14) & 1;
        *(_QWORD *)&v86 = v29;
        DWORD2(v86) = v30;
        v31 = *(_QWORD *)sub_22F33B750((uint64_t)v90, &v86);
        v84 = 0;
        v32 = v89;
        v33 = *(_QWORD *)(v89 + 16);
        v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 4) != 0)
          v34 = *(_QWORD *)v34;
        if (v34)
          v35 = (*(_WORD *)(v34 + 8) & 0x7F) == 23;
        else
          v35 = 0;
        if (v35)
          v36 = v34 - 48;
        else
          v36 = 0;
        v84 = v36;
        if (v35)
        {
          v70 = v13;
          v48 = *(_DWORD *)(v89 + 72);
          if (sub_22F3B46CC(a4))
          {
            v49 = 0;
            v71 = v48 & 1;
            v50 = a4;
            while (1)
            {
              v51 = sub_22F3B46CC(v50);
              if (v49)
              {
                v52 = v51;
                v53 = 1;
              }
              else
              {
                v52 = v51;
                v53 = sub_22EFDA1A0(v51, *(_QWORD *)(v32 + 80), 1, 0) != 0;
              }
              if ((v71 & 1) != 0)
              {
                v54 = 1;
              }
              else
              {
                v55 = v52;
                v56 = v53;
                v57 = sub_22EFDA1A0(v55, *(_QWORD *)(v32 + 88), 1, 0);
                v53 = v56;
                v54 = v57 != 0;
              }
              if (v53 && v54)
                break;
              v71 = v54;
              v49 = v53;
              v50 = sub_22F3B46CC(v50);
              if (!sub_22F3B46CC(v50))
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            if (!v31)
            {
              sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1897u, 0, (uint64_t)&v86);
              v58 = sub_22E890024((uint64_t)&v86, (uint64_t *)&v89);
              sub_22E890024(v58, &v84);
              sub_22E903BEC((unsigned int *)&v86);
              sub_22E8FCA40(a1, *(_DWORD *)(v89 + 24), 0x1780u, 0, (uint64_t)v83);
              sub_22E903BEC(v83);
              v59 = 0;
              v60 = *(_QWORD *)(v89 + 40);
              v61 = "";
              if ((v60 & 7) != 0)
              {
                v63 = v70;
              }
              else
              {
                v62 = v60 & 0xFFFFFFFFFFFFFFF8;
                v63 = v70;
                if (v62)
                {
                  v64 = *(_DWORD **)(v62 + 16);
                  v65 = *v64;
                  v61 = (const char *)(v64 + 4);
                  v59 = v65;
                }
              }
              v77[0] = (uint64_t)"@synthesize ";
              v77[2] = (uint64_t)v61;
              __p = (void *)v59;
              v79 = 1283;
              *(_QWORD *)&v86 = v77;
              v87 = ";\n\n";
              v88 = 770;
              llvm::Twine::str((llvm::Twine *)&v86);
              sub_22E8FCA40(a1, v63, 0x1525u, 0, (uint64_t)&v86);
              if (v82 >= 0)
                v68 = v81;
              else
                v68 = (void **)v81[0];
              if (v82 >= 0)
                v69 = v82 & 0x7F;
              else
                v69 = (size_t)v81[1];
              sub_22E729148(v68, v69, v63, 0, (uint64_t)v77);
              sub_22E890748((uint64_t)&v86, v77);
              if (v80 < 0)
                operator delete(__p);
              sub_22E903BEC((unsigned int *)&v86);
              if (v82 < 0)
                operator delete(v81[0]);
            }
          }
          v13 = v70;
          v14 = "";
          goto LABEL_25;
        }
        if (v31)
        {
          if ((*(_BYTE *)(v89 + 72) & 8) != 0
            && (*(_BYTE *)(v31 + 72) & 1) != 0
            && (v37 = sub_22EFDA1A0(a3, *(_QWORD *)(v89 + 88), 1, 0), v32 = v89, !v37)
            && (v38 = sub_22EFDA2A8(a4, v89), v32 = v89, (v38 & 1) == 0))
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v89 + 24), 0x1A6Bu, 0, (uint64_t)&v86);
            v66 = *(_QWORD *)(v89 + 40);
            if ((v66 & 7) != 0)
              v67 = 0;
            else
              v67 = v66 & 0xFFFFFFFFFFFFFFF8;
            v77[0] = v67;
            sub_22E8BAE44((uint64_t)&v86, v77);
            sub_22E903BEC((unsigned int *)&v86);
            sub_22E8FCA40(a1, *(_DWORD *)(v31 + 24), 0x1780u, 0, (uint64_t)v76);
            v26 = (unsigned int *)v76;
          }
          else
          {
            sub_22E8FCA40(a1, *(_DWORD *)(v32 + 24), 0x1899u, 0, (uint64_t)&v86);
            v39 = *(_QWORD *)(v89 + 40);
            if ((v39 & 7) != 0)
              v40 = 0;
            else
              v40 = v39 & 0xFFFFFFFFFFFFFFF8;
            v77[0] = v40;
            sub_22E8BAE44((uint64_t)&v86, v77);
            sub_22E903BEC((unsigned int *)&v86);
            sub_22E8FCA40(a1, *(_DWORD *)(v31 + 24), 0x1780u, 0, (uint64_t)v75);
            sub_22E903BEC(v75);
            sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x181Eu, 0, (uint64_t)v74);
            v26 = (unsigned int *)v74;
          }
        }
        else
        {
          v41 = *(_QWORD *)(v89 + 40);
          v42 = v14;
          if ((v41 & 7) != 0)
            v43 = 0;
          else
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
          v44 = sub_22EFDA684(v89, a1[11]);
          if ((*(_DWORD *)(v89 + 72) & 0x4000) != 0)
            v45 = 2;
          else
            v45 = 1;
          v46 = v43;
          v14 = v42;
          v47 = sub_22EC78D1C(a1, a2, 0, 0, 1, v46, v44, *(_DWORD *)(v89 + 24), v45);
          if (!v47 || (*((_DWORD *)v47 + 7) & 0x7F) != 0x4E || sub_22EFCA12C(v89))
            goto LABEL_25;
          sub_22E8FCA40(a1, *(_DWORD *)(v89 + 24), 0x1A59u, 0, (uint64_t)v73);
          sub_22E903BEC(v73);
          sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x181Eu, 0, (uint64_t)v72);
          v26 = (unsigned int *)v72;
        }
      }
      sub_22E903BEC(v26);
LABEL_25:
      v10 += 24;
      if (v10 == v11)
        goto LABEL_3;
    }
  }
  return sub_22E637A14((uint64_t)v95);
}

uint64_t sub_22EC7C32C(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;

  result = sub_22F3B46CC(a1);
  if (result)
  {
    v4 = result;
    do
    {
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2);
      result = sub_22F3B46CC(v4);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_22EC7C378(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[8];
  uint64_t v58;
  llvm *v59[2];
  unsigned int v60;
  _QWORD v61[2];
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v8 = *(_DWORD *)(a4 + 28) & 0x7F;
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  if (!a4 || (v9 = a4, v8 != 22))
  {
    if (v8 != 19 || (v9 = *(_QWORD *)(a4 + 104)) == 0)
    {
      sub_22EC7C834(a4, (uint64_t)v66, (uint64_t)v61, a5, 1);
      goto LABEL_28;
    }
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v9 + 104))(*(_QWORD *)(a4 + 104), v61);
  }
  sub_22EC7C32C(v9, (uint64_t)v61);
  sub_22EC7C834(a4, (uint64_t)v66, (uint64_t)v61, a5, 1);
  v10 = (uint64_t *)sub_22F276134(v9);
  v11 = sub_22F2761B0(v9);
  if (v10 != (uint64_t *)v11)
  {
    v12 = (uint64_t *)v11;
    v13 = 0;
    do
    {
      v14 = *v10;
      if (sub_22F32CAA0(*v10))
      {
        if (!v13)
        {
          v54 = 0uLL;
          LODWORD(v55) = 0;
          v57[0] = 0;
          v57[1] = 0;
          v56 = 0;
          v13 = (_OWORD *)operator new();
          *v13 = 0u;
          v13[1] = 0u;
          v13[2] = 0u;
          sub_22EC7C834(a4, (uint64_t)v13, (uint64_t)&v54, 0, 0);
          sub_22E637A14((uint64_t)&v54);
        }
        v15 = sub_22F256388(v14);
        if (v15 != v16)
        {
          v17 = v15;
          v18 = v16;
          do
          {
            v19 = *(_QWORD *)(v17 + 40);
            if ((v19 & 7) != 0)
              v20 = 0;
            else
              v20 = v19 & 0xFFFFFFFFFFFFFFF8;
            v21 = (*(_DWORD *)(v17 + 72) >> 14) & 1;
            *(_QWORD *)&v54 = v20;
            DWORD2(v54) = v21;
            if (!*(_QWORD *)sub_22F33B750((uint64_t)v13, &v54))
            {
              v22 = *(_QWORD *)(v17 + 40);
              if ((v22 & 7) != 0)
                v23 = 0;
              else
                v23 = v22 & 0xFFFFFFFFFFFFFFF8;
              v24 = (*(_DWORD *)(v17 + 72) >> 14) & 1;
              *(_QWORD *)&v54 = v23;
              DWORD2(v54) = v24;
              *(_QWORD *)sub_22F33B750((uint64_t)v66, &v54) = v17;
            }
            do
              v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v17 && (*(_DWORD *)(v17 + 28) & 0x7F) != 0x19);
          }
          while (v17 != v18);
        }
      }
      ++v10;
    }
    while (v10 != v12);
    if (v13)
    {
      v25 = sub_22E637A14((uint64_t)v13);
      MEMORY[0x2348A0E9C](v25, 0x1020C400B2C5FE4);
    }
  }
LABEL_28:
  if (v68 != v69)
  {
    v59[0] = 0;
    v59[1] = 0;
    v60 = 0;
    v26 = sub_22F276498(a3);
    if (v26 != v27)
    {
      v28 = v26;
      v29 = v27;
      do
      {
        v58 = *(_QWORD *)(v28 + 48);
        sub_22F25884C((uint64_t)&v54, (uint64_t)v59, &v58);
        do
          v28 = *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v28 && (*(_DWORD *)(v28 + 28) & 0x7F) != 0x4E);
      }
      while (v28 != v29);
    }
    *(_QWORD *)&v54 = v57;
    *((_QWORD *)&v54 + 1) = v57;
    v55 = 8;
    LODWORD(v56) = 0;
    v30 = sub_22F2781C0(a3);
    if (v30 != v31)
    {
      v32 = v30;
      v33 = v31;
      do
      {
        sub_22E3BA850((uint64_t)&v54, (const void *)v32);
        do
          v32 = *(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v32 && (*(_DWORD *)(v32 + 28) & 0x7F) != 0x18);
      }
      while (v32 != v33);
    }
    v34 = 0;
    if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x13)
      v35 = a4;
    else
      v35 = 0;
    if (v35)
    {
      if (*(_QWORD *)(v35 + 40) >= 8uLL && (*(_QWORD *)(v35 + 40) & 7) == 0)
      {
        v34 = *(_QWORD *)(v35 + 104);
        if (v34)
        {
          v37 = sub_22F3B4E88(*(_QWORD *)(v35 + 104));
          if (v37)
          {
            v38 = sub_22F2781C0(v37);
            if (v38 != v39)
            {
              v40 = v38;
              v41 = v39;
              do
              {
                sub_22E3BA850((uint64_t)&v54, (const void *)v40);
                do
                  v40 = *(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8;
                while (v40 && (*(_DWORD *)(v40 + 28) & 0x7F) != 0x18);
              }
              while (v40 != v41);
            }
          }
        }
      }
      else
      {
        v34 = 0;
      }
    }
    v42 = v68;
    v43 = v69;
    if (v68 != v69)
    {
      v44 = v59[0];
      v45 = v60;
      v46 = v60 - 1;
      while (1)
      {
        v47 = *(_QWORD *)(v42 + 16);
        if ((*(_BYTE *)(v47 + 28) & 0x80) == 0 && (*(_DWORD *)(v47 + 76) & 0x60000) != 0x40000)
        {
          if (!v45)
            goto LABEL_68;
          v48 = v46 & ((v47 >> 4) ^ (v47 >> 9));
          v49 = *((_QWORD *)v44 + v48);
          if (v47 != v49)
            break;
        }
LABEL_71:
        v42 += 24;
        if (v42 == v43)
          goto LABEL_72;
      }
      v50 = 1;
      while (v49 != -4096)
      {
        v51 = v48 + v50++;
        v48 = v51 & v46;
        v49 = *((_QWORD *)v44 + v48);
        if (v47 == v49)
          goto LABEL_71;
      }
LABEL_68:
      if (!sub_22EFCA12C(*(_QWORD *)(v42 + 16)))
      {
        sub_22EC7CBAC(a1, v34, *(_QWORD *)(v47 + 80), a3, a4, v35, v47, &v54);
        if ((*(_BYTE *)(v47 + 72) & 1) == 0)
          sub_22EC7CBAC(a1, v34, *(_QWORD *)(v47 + 88), a3, a4, v35, v47, &v54);
      }
      goto LABEL_71;
    }
LABEL_72:
    if (*((_QWORD *)&v54 + 1) != (_QWORD)v54)
      free(*((void **)&v54 + 1));
    llvm::deallocate_buffer(v59[0], (void *)(8 * v60));
  }
  sub_22E637A14((uint64_t)v61);
  return sub_22E637A14((uint64_t)v66);
}

uint64_t sub_22EC7C834(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  _QWORD *v54;
  __int128 v55;

  v9 = result;
  if (result && (*(_DWORD *)(result + 28) & 0x7F) == 0x16)
  {
    v11 = sub_22F256388(result);
    if (v11 != v12)
    {
      v13 = v11;
      v14 = v12;
      do
      {
        v15 = *(_DWORD *)(v13 + 72);
        if (!(_DWORD)a4 || (v15 & 0x4000) != 0)
        {
          v16 = *(_QWORD *)(v13 + 40);
          if ((v16 & 7) != 0)
            v17 = 0;
          else
            v17 = v16 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v55 = v17;
          DWORD2(v55) = (v15 >> 14) & 1;
          *(_QWORD *)sub_22F33B750(a2, &v55) = v13;
        }
        do
          v13 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v13 && (*(_DWORD *)(v13 + 28) & 0x7F) != 0x19);
      }
      while (v13 != v14);
    }
    result = sub_22EB0C40C(v9);
    if (result)
    {
      v24 = result;
LABEL_34:
      result = sub_22EC7C834(v24, a2, a3, a4, a5);
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 128);
        if (!v24)
          break;
        if ((*(_BYTE *)(v24 + 28) & 0x80) == 0)
        {
          v25 = *(_QWORD *)(v24 + 40) >= 8uLL && (*(_QWORD *)(v24 + 40) & 7) == 0;
          if (!v25 && (*(_BYTE *)(v24 + 8) & 4) == 0)
            goto LABEL_34;
        }
      }
    }
    if ((a5 & 1) != 0)
    {
      v31 = (uint64_t *)sub_22F276134(v9);
      result = sub_22F2761B0(v9);
      if (v31 != (uint64_t *)result)
      {
        v32 = (uint64_t *)result;
        do
        {
          v33 = *v31++;
          result = sub_22EC7C834(v33, a2, a3, a4, 1);
        }
        while (v31 != v32);
      }
    }
  }
  v10 = *(_DWORD *)(v9 + 28) & 0x7F;
  if (!v9 || v10 != 19)
  {
    if (!v9 || v10 != 23)
      return result;
    v34 = sub_22F256388(v9);
    if (v34 == v35)
    {
LABEL_54:
      result = sub_22F259248(v9);
      if ((uint64_t *)result != v36)
      {
        v37 = (uint64_t *)result;
        v38 = v36;
        do
        {
          v39 = *v37++;
          result = sub_22EC7C834(v39, a2, a3, a4, 1);
        }
        while (v37 != v38);
      }
      return result;
    }
    v40 = v34;
    v41 = v35;
    while (1)
    {
      v42 = *(_DWORD *)(v40 + 72);
      if (!(_DWORD)a4 || (v42 & 0x4000) != 0)
      {
        v43 = *(_QWORD *)(v40 + 40);
        if ((v43 & 7) != 0)
          v44 = 0;
        else
          v44 = v43 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v55 = v44;
        DWORD2(v55) = (v42 >> 14) & 1;
        v45 = sub_22F33B750(a3, &v55);
        v46 = *(_QWORD *)(v40 + 40);
        if (*(_QWORD *)v45)
        {
          v47 = *(_QWORD *)(*(_QWORD *)v45 + 40);
          v48 = v47 & 0xFFFFFFFFFFFFFFF8;
          if ((v47 & 7) != 0)
            v48 = 0;
          v49 = *(_QWORD *)(v40 + 40) & 7;
          v50 = v46 & 0xFFFFFFFFFFFFFFF8;
          if (v49)
            v51 = 0;
          else
            v51 = v50;
          if (v48 == v51)
            goto LABEL_61;
        }
        else
        {
          v49 = *(_QWORD *)(v40 + 40) & 7;
          v50 = v46 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v49)
          v52 = 0;
        else
          v52 = v50;
        v53 = (*(_DWORD *)(v40 + 72) >> 14) & 1;
        *(_QWORD *)&v55 = v52;
        DWORD2(v55) = v53;
        v54 = (_QWORD *)sub_22F33B750(a2, &v55);
        if (!*v54)
          *v54 = v40;
      }
      do
LABEL_61:
        v40 = *(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v40 && (*(_DWORD *)(v40 + 28) & 0x7F) != 0x19);
      if (v40 == v41)
        goto LABEL_54;
    }
  }
  result = sub_22F256388(v9);
  if (result != v18)
  {
    v19 = result;
    v20 = v18;
    do
    {
      v21 = *(_DWORD *)(v19 + 72);
      if (!(_DWORD)a4 || (v21 & 0x4000) != 0)
      {
        v22 = *(_QWORD *)(v19 + 40);
        if ((v22 & 7) != 0)
          v23 = 0;
        else
          v23 = v22 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v55 = v23;
        DWORD2(v55) = (v21 >> 14) & 1;
        result = sub_22F33B750(a2, &v55);
        *(_QWORD *)result = v19;
      }
      do
        v19 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v19 && (*(_DWORD *)(v19 + 28) & 0x7F) != 0x19);
    }
    while (v19 != v20);
  }
  if ((a5 & 1) != 0)
  {
    v26 = *(_QWORD *)(v9 + 120) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(unsigned int *)(v26 + 24);
    if ((_DWORD)v27)
    {
      v28 = *(uint64_t **)(v26 + 16);
      v29 = 8 * v27;
      do
      {
        v30 = *v28++;
        result = sub_22EC7C834(v30, a2, a3, a4, 1);
        v29 -= 8;
      }
      while (v29);
    }
  }
  return result;
}

unsigned int *sub_22EC7CBAC(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26[24];
  unsigned int v27[24];
  uint64_t v28;
  unsigned int v29[24];
  uint64_t v30;

  v11 = result;
  v30 = a3;
  v12 = a8[1];
  if (v12 == *a8)
    v13 = (unsigned int *)a8 + 5;
  else
    v13 = (unsigned int *)(a8 + 2);
  v14 = *v13;
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = (unint64_t *)a8[1];
    while (*v16 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_18;
    }
  }
  else
  {
    v16 = (unint64_t *)a8[1];
  }
  v17 = (unint64_t *)(v12 + 8 * v14);
  if (v16 == v17)
    goto LABEL_18;
  v18 = *v16;
LABEL_12:
  if (*(_QWORD *)(v18 + 40) != a3
    || ((*(unsigned __int8 *)(v18 + 58) >> 1) & 1) == (*(_BYTE *)(a7 + 73) & 0x40) >> 6)
  {
    v19 = v16 + 1;
    while (v19 != v17)
    {
      v20 = *v19++;
      v18 = v20;
      if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v16 = v19 - 1;
        goto LABEL_12;
      }
    }
LABEL_18:
    if (!a2 || (result = (unsigned int *)sub_22EFDBA90(a2, a3, (*(_DWORD *)(a7 + 72) & 0x4000) == 0, 0, 1, a6)) == 0)
    {
      if ((*(_DWORD *)(a7 + 72) & 0x4000) != 0)
        v21 = 6659;
      else
        v21 = 6979;
      if ((*(_DWORD *)(a7 + 72) & 0x4000) != 0)
        v22 = 6658;
      else
        v22 = 6978;
      if ((*(_DWORD *)(a5 + 28) & 0x7F) == 0x13)
        v23 = v21;
      else
        v23 = v22;
      sub_22E8FCA40(v11, *(_DWORD *)(a4 + 24), v23, 0, (uint64_t)v29);
      v28 = *(_QWORD *)(a7 + 40);
      v24 = sub_22E894538((uint64_t)v29, &v28);
      sub_22E894538(v24, &v30);
      sub_22E903BEC(v29);
      sub_22E8FCA40(v11, *(_DWORD *)(a7 + 24), 0x1780u, 0, (uint64_t)v27);
      result = sub_22E903BEC(v27);
      v25 = *((_QWORD *)v11 + 9);
      if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
        && ((1 << *(_DWORD *)(v25 + 400)) & 0xDD) != 0
        && (*(_DWORD *)(a5 + 28) & 0x7F) == 0x16)
      {
        result = (unsigned int *)sub_22EFDAC68(a5);
        if (result)
        {
          sub_22E8FCA40(v11, result[6], 0x17C9u, 0, (uint64_t)v26);
          return sub_22E903BEC(v26);
        }
      }
    }
  }
  return result;
}

unint64_t sub_22EC7CD9C(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[24];

  result = sub_22F276498(a2);
  if (result != v5)
  {
    v6 = result;
    v7 = v5;
    do
    {
      if (*(_QWORD *)(v6 + 56))
      {
        v8 = *(_QWORD *)(v6 + 48);
        if ((*(_BYTE *)(v8 + 73) & 0x20) != 0)
        {
          if (*(_QWORD *)(v8 + 104))
          {
            if (*(_QWORD *)(v8 + 112))
            {
              v9 = *(_QWORD *)(v6 + 64);
              v10 = *(_QWORD *)(v6 + 72);
              if ((!v9 || (*(_BYTE *)(v9 + 58) & 0x10) != 0) && (!v10 || (*(_BYTE *)(v10 + 58) & 0x10) != 0))
              {
                v11 = *(_DWORD *)(v6 + 24);
                if (!v11)
                  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
                sub_22E8FCA40(a1, v11, 0x1A90u, 0, (uint64_t)v15);
                v14 = *(_QWORD *)(v10 + 40);
                v12 = sub_22E894538((uint64_t)v15, &v14);
                v13 = *(_QWORD *)(v8 + 40);
                sub_22E894538(v12, &v13);
                result = (unint64_t)sub_22E903BEC(v15);
              }
            }
          }
        }
      }
      do
        v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) != 0x4E);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_22EC7CEAC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  size_t v58;
  char *v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t i;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65[24];
  _BYTE v66[96];
  unint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  void *__p;
  int v72;
  uint64_t v73;
  int v74;
  char v75;
  unsigned __int8 v76;
  unsigned int v77[24];
  unsigned int v78[25];
  int v79;
  __int128 v80[6];
  _QWORD v81[2];
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if ((*(_BYTE *)(*(_QWORD *)(result + 72) + 246) & 6) == 0)
  {
    v5 = result;
    v81[0] = 0;
    v81[1] = 0;
    v82 = 0;
    v84 = 0;
    v85 = 0;
    v83 = 0;
    v6 = sub_22F256388(a3);
    if (v6 != v7)
    {
      v8 = v6;
      v9 = v7;
      do
      {
        v10 = *(_QWORD *)(v8 + 40);
        if ((v10 & 7) != 0)
          v11 = 0;
        else
          v11 = v10 & 0xFFFFFFFFFFFFFFF8;
        v12 = (*(_DWORD *)(v8 + 72) >> 14) & 1;
        *(_QWORD *)&v80[0] = v11;
        DWORD2(v80[0]) = v12;
        *(_QWORD *)sub_22F33B750((uint64_t)v81, v80) = v8;
        do
          v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v8 && (*(_DWORD *)(v8 + 28) & 0x7F) != 0x19);
      }
      while (v8 != v9);
    }
    v13 = sub_22E496488(a3);
    if (v13 != v14)
    {
      v15 = v13;
      v16 = v14;
      do
      {
        v17 = sub_22F256388(v15);
        if (v17 != v18)
        {
          v19 = v17;
          v20 = v18;
          do
          {
            v21 = *(_QWORD *)(v19 + 40);
            if ((v21 & 7) != 0)
              v22 = 0;
            else
              v22 = v21 & 0xFFFFFFFFFFFFFFF8;
            v23 = (*(_DWORD *)(v19 + 72) >> 14) & 1;
            *(_QWORD *)&v80[0] = v22;
            DWORD2(v80[0]) = v23;
            *(_QWORD *)sub_22F33B750((uint64_t)v81, v80) = v19;
            do
              v19 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v19 && (*(_DWORD *)(v19 + 28) & 0x7F) != 0x19);
          }
          while (v19 != v20);
        }
        do
        {
          v15 = *(_QWORD *)(v15 + 128);
          if (!v15)
            break;
        }
        while ((*(_BYTE *)(v15 + 28) & 0x80) != 0
             || *(_QWORD *)(v15 + 40) >= 8uLL && (*(_QWORD *)(v15 + 40) & 7) == 0);
      }
      while (v15 != v16);
    }
    v25 = v83;
    v26 = v84;
    if (v83 == v84)
      return sub_22E637A14((uint64_t)v81);
    while (1)
    {
      v27 = *(_QWORD *)(v25 + 16);
      v29 = *(_DWORD *)(v27 + 72);
      v28 = *(_DWORD *)(v27 + 76);
      if ((v28 & 0x140) != 0)
        goto LABEL_49;
      v30 = sub_22EFDA1A0(a2, *(_QWORD *)(v27 + 80), (*(_DWORD *)(v27 + 72) & 0x4000) == 0, 0);
      v31 = sub_22EFDA1A0(a2, *(_QWORD *)(v27 + 88), (*(_DWORD *)(v27 + 72) & 0x4000) == 0, 0);
      if (v30)
      {
        if ((*(_BYTE *)(v30 + 58) & 0x10) != 0)
          v32 = 0;
        else
          v32 = v30;
        if (!v31)
        {
LABEL_66:
          v33 = 0;
          if (!v32)
            goto LABEL_44;
LABEL_40:
          sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v32 + 24), 0x194Eu, 0, (uint64_t)v80);
          v34 = *(_QWORD *)(v27 + 40);
          if ((v34 & 7) != 0)
            v35 = 0;
          else
            v35 = v34 & 0xFFFFFFFFFFFFFFF8;
          v67 = v35;
          v36 = sub_22E8BAE44((uint64_t)v80, (uint64_t *)&v67);
          v79 = 0;
          sub_22E8900C4(v36, &v79);
          sub_22E903BEC((unsigned int *)v80);
          sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v27 + 24), 0x1780u, 0, (uint64_t)v78);
          sub_22E903BEC(v78);
          goto LABEL_44;
        }
      }
      else
      {
        v32 = 0;
        if (!v31)
          goto LABEL_66;
      }
      if ((*(_BYTE *)(v31 + 58) & 0x10) != 0)
        v33 = 0;
      else
        v33 = v31;
      if (v32)
        goto LABEL_40;
LABEL_44:
      if (v33)
      {
        sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v33 + 24), 0x194Eu, 0, (uint64_t)v80);
        v37 = *(_QWORD *)(v27 + 40);
        if ((v37 & 7) != 0)
          v38 = 0;
        else
          v38 = v37 & 0xFFFFFFFFFFFFFFF8;
        v67 = v38;
        v39 = sub_22E8BAE44((uint64_t)v80, (uint64_t *)&v67);
        v79 = 1;
        sub_22E8900C4(v39, &v79);
        sub_22E903BEC((unsigned int *)v80);
        sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v27 + 24), 0x1780u, 0, (uint64_t)v77);
        sub_22E903BEC(v77);
      }
LABEL_49:
      if ((v29 & 0x48) != 8)
        goto LABEL_108;
      v40 = *(_QWORD *)(v27 + 40);
      v41 = (v40 & 7) != 0 ? 0 : v40 & 0xFFFFFFFFFFFFFFF8;
      v42 = (*(_DWORD *)(v27 + 72) & 0x4000) != 0 ? 2 : 1;
      v43 = (_QWORD *)sub_22EFDE638(a2, v41, v42);
      if (!v43 || !v43[7])
        goto LABEL_108;
      v44 = v43[8];
      v45 = v43[9];
      if (!v44)
      {
        if (!v45)
          goto LABEL_108;
        v47 = 0;
LABEL_70:
        if ((*(_BYTE *)(v45 + 58) & 0x10) != 0)
          v44 = 0;
        else
          v44 = v43[9];
        v49 = v47 != 0;
        v48 = v44 != 0;
        if (v49 == v48)
          goto LABEL_108;
        if (v47)
          v44 = v47;
        goto LABEL_76;
      }
      v46 = *(_QWORD *)(v44 + 56);
      if ((v46 & 0x100000) != 0)
        v47 = 0;
      else
        v47 = v43[8];
      if (v45)
        goto LABEL_70;
      if ((v46 & 0x100000) != 0)
        goto LABEL_108;
      LOBYTE(v48) = 0;
      LOBYTE(v49) = 1;
LABEL_76:
      v50 = *(_DWORD *)(v44 + 24);
      sub_22E8FCA40((_QWORD *)v5, v50, 0x1858u, 0, (uint64_t)v80);
      v51 = *(_QWORD *)(v27 + 40);
      if ((v51 & 7) != 0)
        v52 = 0;
      else
        v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      v67 = v52;
      v53 = sub_22E8BAE44((uint64_t)v80, (uint64_t *)&v67);
      LOBYTE(v79) = v49;
      v54 = sub_22E894E38(v53, (unsigned __int8 *)&v79);
      v76 = v48;
      sub_22E894E38(v54, &v76);
      sub_22E903BEC((unsigned int *)v80);
      v55 = *(unsigned int *)(v27 + 52);
      if ((v28 & 0x100) == 0 && (_DWORD)v55)
      {
        v56 = v28 & 0x1FFFF;
        v57 = sub_22F141A3C(v55, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
        sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v27 + 24), 0x154Bu, 0, (uint64_t)v80);
        if (v56)
          v58 = 11;
        else
          v58 = 9;
        if (v56)
          v59 = "nonatomic, ";
        else
          v59 = "nonatomic";
        sub_22E729148(v59, v58, v57, 0, (uint64_t)&v67);
        goto LABEL_104;
      }
      if ((_DWORD)v55)
      {
        sub_22E8FCA40((_QWORD *)v5, v50, 0x154Bu, 0, (uint64_t)v66);
        v60 = (unsigned int *)v66;
        goto LABEL_107;
      }
      v61 = **(_QWORD **)(v27 + 64);
      for (i = v61; ; i = sub_22F115B7C(i))
      {
        while (1)
        {
          if ((i & 0xF) != 0)
            goto LABEL_101;
          v63 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v63 <= 0x39)
            break;
LABEL_96:
          if (sub_22F115668(i))
            v61 = i;
          i = sub_22F115B7C(i);
          if (!i)
            goto LABEL_103;
        }
        if (v63 == 24)
          goto LABEL_102;
        if (v63 == 26)
          break;
        if (((1 << v63) & 0x20000000200003CLL) == 0)
          goto LABEL_96;
LABEL_101:
        ;
      }
      if ((*(_BYTE *)(i + 23) & 0x10) == 0)
        goto LABEL_101;
LABEL_102:
      v61 = i;
LABEL_103:
      v64 = sub_22F115668(v61);
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v27 + 24), 0x154Bu, 0, (uint64_t)v80);
      v70 = 0;
      v69 = 0;
      v67 = v64 | ((unint64_t)v64 << 32);
      v68 = 0;
      v74 = 201326592;
      v73 = 0;
      v72 = 539583337;
      __p = *(void **)"(nonatomic) ";
      v75 = 0;
LABEL_104:
      sub_22E890748((uint64_t)v80, &v67);
      if (SHIBYTE(v74) < 0)
        operator delete(__p);
      v60 = (unsigned int *)v80;
LABEL_107:
      sub_22E903BEC(v60);
      sub_22E8FCA40((_QWORD *)v5, *(_DWORD *)(v27 + 24), 0x1780u, 0, (uint64_t)v65);
      sub_22E903BEC(v65);
LABEL_108:
      v25 += 24;
      if (v25 == v26)
        return sub_22E637A14((uint64_t)v81);
    }
  }
  return result;
}

unint64_t sub_22EC7D4CC(unint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v11;
  _BYTE *v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  size_t v34;
  const char *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[5];
  char v40;
  unsigned int v41[8];
  _BYTE v42[56];
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  _BYTE v46[96];
  _BYTE v47[96];
  void *v48;
  __int128 v49;
  _BYTE v50[72];
  unsigned __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(*(_QWORD *)(result + 72) + 244) & 0x60000) != 0x20000)
  {
    v2 = (_QWORD *)result;
    result = sub_22F276498(a2);
    if (result != v3)
    {
      v4 = result;
      v5 = v3;
      v6 = v42;
      while (1)
      {
        v7 = *(_QWORD *)(v4 + 48);
        if (v7)
        {
          result = sub_22F32AD8C(*(_QWORD *)(v4 + 48));
          if ((result & 1) == 0 && (*(_BYTE *)(v7 + 73) & 0x40) == 0)
          {
            v8 = *(_QWORD *)(v4 + 64);
            if (!v8 || (*(_BYTE *)(v8 + 58) & 0x10) != 0)
            {
              v9 = *(_QWORD *)(v7 + 104);
              if (v9)
              {
                result = sub_22EFDBF50(*(_QWORD *)(v7 + 104));
                if (result <= 5 && ((1 << result) & 0x36) != 0)
                  break;
              }
            }
          }
        }
        do
LABEL_6:
          v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v4 && (*(_DWORD *)(v4 + 28) & 0x7F) != 0x4E);
        if (v4 == v5)
          return result;
      }
      v38 = (uint64_t)v6;
      if ((*(_WORD *)(v2[9] + 148) & 2) != 0)
      {
        v11 = (unsigned int *)v47;
        v12 = v47;
        v13 = v2;
        v14 = 3042;
      }
      else
      {
        v11 = (unsigned int *)v46;
        v12 = v46;
        v13 = v2;
        v14 = 6349;
      }
      sub_22E8FCA40(v13, *(_DWORD *)(v7 + 24), v14, 0, (uint64_t)v12);
      sub_22E903BEC(v11);
      v15 = 0;
      v16 = *(_DWORD *)(v7 + 24);
      v17 = v9;
      do
      {
        if ((*(_BYTE *)(v17 + 29) & 2) != 0)
        {
          v22 = *(_QWORD *)v17;
        }
        else
        {
          v18 = *(_QWORD *)(v17 + 16);
          v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
          if ((v18 & 4) != 0)
            v19 = (_QWORD *)*v19;
          v20 = *(_QWORD *)(v7 + 16);
          v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 4) != 0)
            v21 = (_QWORD *)*v21;
          v22 = *(_QWORD *)v17;
          if (v19 == v21)
          {
            v16 = *(_DWORD *)(v17 + 24);
            v15 = (unint64_t)(*(uint64_t (**)(uint64_t))(v22 + 16))(v17) >> 32;
          }
        }
        v23 = (*(uint64_t (**)(uint64_t))(v22 + 40))(v17);
        v17 = v23;
      }
      while (v23 != v9 && v23 != 0);
      v25 = v2[10];
      v51 = 186;
      v52 = 0;
      v53 = 21;
      v54 = 0;
      v55 = 21;
      v56 = 0;
      v26 = sub_22E3CB704((llvm::StringMapImpl *)(v25 + 544), "objc_method_family", 0x12uLL);
      v57 = 5;
      v58 = v26;
      v59 = 21;
      v60 = 0;
      v27 = sub_22E3CB704((llvm::StringMapImpl *)(v25 + 544), "none", 4uLL);
      v61 = 5;
      v62 = v27;
      v63 = 22;
      v64 = 0;
      v65 = 22;
      v66 = 0;
      v67 = 22;
      v68 = 0;
      v44 = "__attribute__((objc_method_family(none)))";
      v45 = 41;
      v28 = sub_22F18DFA4(v25, v16, &v51, 9);
      if (v29)
      {
        v44 = (const char *)v28;
        v45 = v29;
      }
      sub_22E8FCA40(v2, v16, 0x156Au, 0, (uint64_t)&v48);
      v39[0] = *(_QWORD *)(v9 + 40);
      v30 = sub_22E894538((uint64_t)&v48, v39);
      v31 = sub_22F2F2210(v30, (uint64_t)&v44);
      v32 = v31;
      v33 = *(_OWORD *)(v31 + 9);
      *(_OWORD *)v41 = *(_OWORD *)v31;
      *(_OWORD *)((char *)&v41[2] + 1) = v33;
      v42[0] = 0;
      v42[48] = 0;
      v6 = (_BYTE *)v38;
      if (*(_BYTE *)(v31 + 80))
        sub_22E907424(v38, v31 + 32);
      v43 = *(_QWORD *)(v32 + 88);
      sub_22E903BEC((unsigned int *)&v48);
      if (!v15)
      {
LABEL_48:
        result = (unint64_t)sub_22E903BEC(v41);
        goto LABEL_6;
      }
      v48 = v50;
      v50[0] = 32;
      v49 = xmmword_22F494720;
      v35 = v44;
      v34 = v45;
      if ((unint64_t)(v45 + 1) >= 0x41)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v36 = v48;
        v37 = v49;
        if (!v34)
          goto LABEL_44;
      }
      else
      {
        v36 = v50;
        v37 = 1;
        if (!v45)
        {
LABEL_44:
          *(_QWORD *)&v49 = v37 + v34;
          sub_22E729148(v36, v37 + v34, v15, 0, (uint64_t)v39);
          sub_22E890748((uint64_t)v41, v39);
          if (v40 < 0)
            operator delete((void *)v39[3]);
          if (v48 != v50)
            free(v48);
          goto LABEL_48;
        }
      }
      memcpy(&v36[v37], v35, v34);
      v36 = v48;
      v37 = v49;
      goto LABEL_44;
    }
  }
  return result;
}

void sub_22EC7D8BC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21[24];
  uint64_t v22;
  unsigned int v23[24];
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[64];
  char *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F3B46CC(a3);
  if (!v6)
    return;
  v7 = v6;
  v24 = v28;
  v25 = v28;
  v26 = 8;
  v27 = 0;
  v8 = sub_22F276230(a2);
  if (v8 != v9)
  {
    v10 = v8;
    v11 = v9;
    do
    {
      if (sub_22EFDBF50(v10) == 3)
        sub_22E3BA850((uint64_t)&v24, *(const void **)(v10 + 40));
      do
        v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v10 + 58) & 2) == 0));
    }
    while (v10 != v11);
  }
  v29 = (char *)v31;
  v30 = 0x800000000;
  sub_22EFDB278(v7, (uint64_t)&v29);
  v12 = v29;
  if ((_DWORD)v30)
  {
    v13 = &v29[8 * v30];
    while (1)
    {
      v14 = *(_QWORD *)v12;
      v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v24, *(void **)(*(_QWORD *)v12 + 40));
      if (v25 == v24)
        v16 = (uint64_t *)((char *)&v26 + 4);
      else
        v16 = &v26;
      if (v15 != (void **)&v25[8 * *(unsigned int *)v16])
        goto LABEL_32;
      v17 = sub_22EFDA1A0(a3, *(_QWORD *)(v14 + 40), 1, 0);
      if (v17)
        break;
      v18 = sub_22EB0C40C(a3);
      if (v18)
      {
        v19 = v18;
LABEL_22:
        v17 = sub_22EFDA1A0(v19, *(_QWORD *)(v14 + 40), 1, 0);
        if (v17)
          break;
        while (1)
        {
          v19 = *(_QWORD *)(v19 + 128);
          if (!v19)
            break;
          if ((*(_BYTE *)(v19 + 28) & 0x80) == 0)
          {
            v20 = *(_QWORD *)(v19 + 40) >= 8uLL && (*(_QWORD *)(v19 + 40) & 7) == 0;
            if (!v20 && (*(_BYTE *)(v19 + 8) & 4) == 0)
              goto LABEL_22;
          }
        }
      }
LABEL_31:
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1AA0u, 0, (uint64_t)v23);
      v22 = *(_QWORD *)(v14 + 40);
      sub_22E894538((uint64_t)v23, &v22);
      sub_22E903BEC(v23);
      sub_22E8FCA40(a1, *(_DWORD *)(v14 + 24), 0x16EEu, 0, (uint64_t)v21);
      sub_22E903BEC(v21);
LABEL_32:
      v12 += 8;
      if (v12 == v13)
      {
        v12 = v29;
        goto LABEL_34;
      }
    }
    if (sub_22EFCA12C(v17))
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_34:
  if (v12 != (char *)v31)
    free(v12);
  if (v25 != v24)
    free(v25);
}

void sub_22EC7DB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v6 = *v5;
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v8 = *(_QWORD *)v7 + 8 * *(unsigned int *)(v7 + 8);
    }
    else
    {
      v8 = 0;
    }
    while (1)
    {
      if (v6 == (uint64_t *)v8)
        return;
      v9 = *(unsigned __int16 *)(*v6 + 32);
      if (v9 > 0x144)
      {
        if (v9 == 337 || v9 == 325)
        {
LABEL_11:
          v10 = sub_22EF9C5AC(*v6);
          sub_22EFCA95C(a2, v10);
        }
      }
      else if (v9 == 115 || v9 == 160)
      {
        goto LABEL_11;
      }
      ++v6;
    }
  }
}

BOOL sub_22EC7DBF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 262)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

__n128 sub_22EC7DC50(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  __n128 result;
  __int128 v8;
  unint64_t v9;
  unint64_t v11;

  v2 = a2;
  v4 = *((unsigned int *)a1 + 2);
  v5 = *a1;
  if (v4 >= *((_DWORD *)a1 + 3))
  {
    v9 = v5 + 32 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
      v2 = *a1 + v11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
    }
  }
  v6 = (_OWORD *)(v5 + 32 * *((unsigned int *)a1 + 2));
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  *v6 = *(_OWORD *)v2;
  v6[1] = v8;
  ++*((_DWORD *)a1 + 2);
  return result;
}

_OWORD *sub_22EC7DCE8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F33BB2C(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F45F5C0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

double sub_22EC7DDB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  double result;

  v2 = operator new();
  *(_QWORD *)v2 = 1;
  for (i = 8; i != 328; i += 40)
    *(_QWORD *)(v2 + i) = -4096;
  *(_QWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 336) = v2 + 352;
  *(_QWORD *)(v2 + 344) = 0x400000000;
  *(_DWORD *)(v2 + 21440) = 85;
  *(_QWORD *)(v2 + 21448) = a1;
  *(_WORD *)(v2 + 21456) = 0;
  *(_OWORD *)(v2 + 21464) = 0u;
  *(_DWORD *)(v2 + 21480) = 0;
  *(_DWORD *)(v2 + 21484) = 32;
  *(_DWORD *)(v2 + 21496) = 0;
  *(_QWORD *)(v2 + 21504) = v2 + 21520;
  *(_QWORD *)(v2 + 21512) = 0x200000000;
  *(_OWORD *)(v2 + 21536) = 0u;
  *(_OWORD *)(v2 + 21552) = 0u;
  *(_OWORD *)(v2 + 21568) = 0u;
  *(_OWORD *)(v2 + 21584) = 0u;
  *(_OWORD *)(v2 + 21600) = 0u;
  *(_OWORD *)(v2 + 21616) = 0u;
  *(_QWORD *)(v2 + 21632) = 0;
  *(_QWORD *)(v2 + 21640) = v2 + 21656;
  *(_QWORD *)(v2 + 21648) = 0x200000000;
  *(_DWORD *)(v2 + 21664) = 0;
  *(_QWORD *)(v2 + 21672) = v2 + 21688;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v2 + 21680) = 0x800000000;
  *(_QWORD *)(a1 + 12288) = v2;
  return result;
}

uint64_t sub_22EC7DEC0(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unsigned int v47;
  void *v48;
  unint64_t v49;
  uint64_t result;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  int v54;
  char v55;
  char v56;
  char v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[3];

  v60[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1[11];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v9 = *(_QWORD *)(v8 + 48);
  v57 = 0;
  v10 = a1[1536];
  v11 = *(_DWORD *)(v10 + 344);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 336) + 5272 * v11;
    if (*(_QWORD *)(v12 - 8) == *(_QWORD *)(v10 + 328))
    {
      v13 = *(unsigned int *)(v12 - 5264);
      v14 = *(unsigned int *)(v10 + 21496);
      if (v13 > v14 && v13 - v14 > (unint64_t)a3)
      {
        v15 = *(_DWORD *)(*(_QWORD *)(v12 - 5272) + 1312 * a3 + 960) - 56;
        v16 = v15 > 0x2A;
        v17 = (1 << v15) & 0x6000001CF91;
        if (!v16 && v17 != 0)
        {
          v19 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v20 = *(_DWORD *)(v19 + 16);
            if ((v20 & 0xFE) != 0x28)
            {
              v19 = sub_22F10CF48(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
              v20 = *(_DWORD *)(v19 + 16);
            }
            if ((v20 & 0x100000) != 0)
            {
              do
              {
                while (1)
                {
                  v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v19)
                    break;
                  v21 = *(_DWORD *)(v19 + 16);
                  if ((v21 & 0xFE) != 0x28)
                    break;
                  if ((v21 & 0x100000) == 0)
                    goto LABEL_18;
                }
                v19 = sub_22F10CF48(v19);
              }
              while ((*(_DWORD *)(v19 + 16) & 0x100000) != 0);
            }
LABEL_18:
            v9 = *(_QWORD *)(v19 + 32);
            v10 = a1[1536];
          }
          v56 = 0;
          v58 = &v57;
          v59 = (uint64_t)&v56;
          v60[0] = v8;
          sub_22EC7E4F4(v10, v8, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF7284, (uint64_t)&v58);
          if (v57)
          {
            v22 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39
              && v56 != 0)
            {
              goto LABEL_82;
            }
          }
          else
          {
            v22 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
            v38 = *(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
            if (*(_BYTE *)(a1[1536] + 21457))
            {
              v39 = *(unsigned __int8 *)(*(_QWORD *)v38 + 16);
              if (v39 != 39 && v39 != 32)
                goto LABEL_25;
            }
            v40 = *(_QWORD *)v38;
            v41 = *(_DWORD *)(*(_QWORD *)v38 + 16);
            if (v40)
              v42 = v41 == 11;
            else
              v42 = 0;
            if (v42)
            {
              if (((v41 >> 19) & 0x1FF) - 166 >= 0x35)
                goto LABEL_25;
            }
            else if (v40 && v41 == 44)
            {
              v43 = sub_22F114198(*(_QWORD *)(v40 + 24));
              if ((*(_BYTE *)(v43 + 74) & 1) == 0 && *(_QWORD *)(v43 + 128) < 8uLL)
                goto LABEL_25;
            }
            else
            {
              v16 = v41 > 0x27u;
              v44 = (1 << v41) & 0x8180001600;
              if (v16 || v44 == 0)
                goto LABEL_25;
            }
            v46 = a1[1536];
            v47 = sub_22EC7E5E0(*(_QWORD *)(a1[9] + 72), v8);
            if ((v47 & 1) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 336) + 5272 * *(unsigned int *)(v46 + 344) - 5272)
                            + 1312 * a3
                            + 8 * v47
                            + 936) & 0xFFFFFFFC) != 4
              && !sub_22EC7E878(a1[1536], v8, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF731C, (uint64_t)&v58, a3, 0))
            {
              goto LABEL_82;
            }
          }
        }
      }
    }
  }
LABEL_25:
  v22 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (!v24 || (v25 = *(_DWORD *)(v24 + 16), (v25 & 0xFE) != 0x28))
  {
    v26 = v9 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_28;
    v24 = sub_22F10CF48(v24);
    if (!v24)
    {
      v26 = v9 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_28;
    }
    v25 = *(_DWORD *)(v24 + 16);
  }
  if ((v25 & 0x100000) != 0)
  {
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v24)
      {
        v54 = *(_DWORD *)(v24 + 16);
        if ((v54 & 0xFE) == 0x28)
          continue;
      }
      v24 = sub_22F10CF48(v24);
      v54 = *(_DWORD *)(v24 + 16);
    }
    while ((v54 & 0x100000) != 0);
  }
  v26 = *(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_28:
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_DWORD *)(v27 + 16);
  if (v27)
    v29 = v28 == 11;
  else
    v29 = 0;
  if (v29)
  {
    if (((v28 >> 19) & 0x1FF) - 166 >= 0x35)
      return 1;
  }
  else if (v27 && v28 == 44)
  {
    v30 = sub_22F114198(*(_QWORD *)(v27 + 24));
    if ((*(_BYTE *)(v30 + 74) & 1) == 0 && *(_QWORD *)(v30 + 128) < 8uLL)
      return 1;
  }
  else
  {
    v16 = v28 > 0x27u;
    v31 = (1 << v28) & 0x8180001600;
    if (v16 || v31 == 0)
      return 1;
  }
  v33 = a1[1536];
  if (!v57)
  {
LABEL_48:
    if ((sub_22EC7E878(v33, v8, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF732C, (uint64_t)&v56, a3, 1) & 1) != 0
      || (unint64_t)sub_22EC7EA20(a1[1536], v8) >> 32)
    {
      goto LABEL_82;
    }
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  sub_22F421BB4((uint64_t)&v58, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 336) + 5272 * *(unsigned int *)(v33 + 344) - 5272) + 1312 * a3 + 960));
  v34 = *((_DWORD *)v58 + a4);
  if (v58 != v60)
    free(v58);
  if (v34 != 56)
  {
    v33 = a1[1536];
    goto LABEL_48;
  }
LABEL_50:
  if ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x3F || sub_22F281CA0(v8) || (*(_BYTE *)(sub_22EFBC5B4(v8) + 1) & 3) != 0)
  {
    v35 = a1[1536];
    v36 = *(_DWORD *)(v35 + 344);
    if (!v36)
      return 1;
    v37 = *(_QWORD *)(v35 + 336) + 5272 * v36;
    if (*(_QWORD *)(v37 - 8) != *(_QWORD *)(v35 + 328)
      || *(_DWORD *)(v37 - 5264) <= *(_DWORD *)(v35 + 21496)
      || *(_DWORD *)(sub_22ECB1B04(a1[1536]) + 928) != 4
      || sub_22EC7E878(v35, v8, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF7344, (uint64_t)&v55, a3, 0)|| sub_22EC7EABC(a1[1536], v8, a3))
    {
      return 1;
    }
  }
LABEL_82:
  sub_22EF5CCD0(v7, *v22, (uint64_t)&v58);
  v48 = v58;
  v49 = sub_22F36D7FC(v7);
  sub_22EF5CCD0(v7, *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v58);
  if ((uint64_t)v48 > (uint64_t)v58)
    return 1;
  v51 = sub_22EF5B404(v7, v8, 0);
  v52 = sub_22F36D7FC(v7);
  v53 = sub_22EF5D130(v7, v52);
  result = 0;
  if (v51 > v53)
    return 1;
  return result;
}

uint64_t sub_22EC7E4F4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD), uint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v5 = *(_DWORD *)(a1 + 344);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 336) + 5272 * v5;
  if (*(_QWORD *)(v6 - 8) != *(_QWORD *)(a1 + 328))
    return 0;
  v7 = *(unsigned int *)(v6 - 5264);
  v8 = *(unsigned int *)(a1 + 21496);
  if (v7 <= v8)
    return 0;
  if (v7 - v8 <= (unint64_t)a3)
    return 0;
  v11 = *(_QWORD *)(v6 - 5272) + 1312 * a3;
  v12 = sub_22ECB1904(v11 + 704, a2);
  if (*(_QWORD *)(v11 + 704) + 1184 * *(unsigned int *)(v11 + 720) == v12)
    return 0;
  v13 = v12;
  v14 = *(_DWORD *)(v12 + 16);
  if (!v14)
    return 0;
  v15 = *(_QWORD *)(v12 + 8);
  v16 = v15 + 144 * v14;
  do
  {
    result = a4(a5, *(_QWORD *)v15, *(unsigned int *)(v15 + 8), *(unsigned int *)(v13 + 1176));
    if ((result & 1) != 0)
      break;
    v15 += 144;
  }
  while (v15 != v16);
  return result;
}

uint64_t sub_22EC7E5E0(unsigned int a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v3 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)v3;
  v5 = *(_DWORD *)(*(_QWORD *)v3 + 16);
  if (*(_QWORD *)v3)
    v6 = (*(_DWORD *)(*(_QWORD *)v3 + 16) & 0xFE) == 40;
  else
    v6 = 0;
  v7 = !v6;
  if (a1 > 0x2D)
  {
    if (v7)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_13;
      v24 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0;
      v25 = a2;
      v4 = sub_22F10CF48(v4);
      if (!v4)
      {
        v3 = v24;
        a2 = v25;
        goto LABEL_13;
      }
      v5 = *(_DWORD *)(v4 + 16);
      a2 = v25;
    }
    if ((v5 & 0x100000) != 0)
    {
      v26 = a2;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v4 || (v21 = *(_DWORD *)(v4 + 16), (v21 & 0xFE) != 0x28))
        {
          v4 = sub_22F10CF48(v4);
          v21 = *(_DWORD *)(v4 + 16);
        }
        a2 = v26;
      }
      while ((v21 & 0x100000) != 0);
    }
    v3 = *(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_13:
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    result = 2;
    if (v9 == 32 || v9 == 39)
      return result;
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v12 = *v11;
    if (!*v11 || (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      {
LABEL_18:
        v8 = *v11;
        goto LABEL_19;
      }
      v27 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0;
      v12 = sub_22F10CF48(v12);
      if (!v12)
      {
        v11 = (uint64_t *)v27;
        goto LABEL_18;
      }
      v13 = *(_DWORD *)(v12 + 16);
    }
    if ((v13 & 0x100000) != 0)
    {
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v12)
        {
          v22 = *(_DWORD *)(v12 + 16);
          if ((v22 & 0xFE) == 0x28)
            continue;
        }
        v12 = sub_22F10CF48(v12);
        v22 = *(_DWORD *)(v12 + 16);
      }
      while ((v22 & 0x100000) != 0);
    }
    v11 = (uint64_t *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_18;
  }
  if (!v7)
    goto LABEL_36;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v23 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0;
    v4 = sub_22F10CF48(v4);
    if (!v4)
    {
      v3 = v23;
      goto LABEL_10;
    }
    v5 = *(_DWORD *)(v4 + 16);
LABEL_36:
    if ((v5 & 0x100000) != 0)
    {
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v4)
        {
          v20 = *(_DWORD *)(v4 + 16);
          if ((v20 & 0xFE) == 0x28)
            continue;
        }
        v4 = sub_22F10CF48(v4);
        v20 = *(_DWORD *)(v4 + 16);
      }
      while ((v20 & 0x100000) != 0);
    }
    v3 = *(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0;
  }
LABEL_10:
  v8 = *(_QWORD *)v3;
LABEL_19:
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_DWORD *)(v14 + 16);
  if (v14)
    v16 = v15 == 11;
  else
    v16 = 0;
  if (v16)
  {
    LODWORD(v18) = ((v15 >> 19) & 0x1FF) - 166 < 0x35;
  }
  else if (v14 && v15 == 44)
  {
    v17 = sub_22F114198(*(_QWORD *)(v14 + 24));
    LODWORD(v18) = (*(_BYTE *)(v17 + 74) & 1) != 0 || *(_QWORD *)(v17 + 128) > 7uLL;
  }
  else
  {
    v19 = v15 > 0x27u;
    v18 = (0x8180001600uLL >> v15) & 1;
    if (v19)
      LODWORD(v18) = 0;
  }
  return v18 ^ 1;
}

uint64_t sub_22EC7E878(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD), uint64_t a4, unsigned int a5, int a6)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;

  v6 = *(_DWORD *)(a1 + 344);
  if (!v6)
    return 0;
  v8 = *(_QWORD *)(a1 + 336) + 5272 * v6;
  if (*(_QWORD *)(v8 - 8) != *(_QWORD *)(a1 + 328))
    return 0;
  v9 = *(unsigned int *)(v8 - 5264);
  v10 = *(unsigned int *)(a1 + 21496);
  if (v9 <= v10 || v9 - v10 <= (unint64_t)a5)
    return 0;
  v14 = sub_22EC81010(a2);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 5272 * *(unsigned int *)(a1 + 344) - 5272);
  v16 = v15 + 1312 * a5;
  v17 = sub_22ECB19F4(v16, v14);
  v18 = v17;
  v19 = v16 + 8;
  if ((*(_BYTE *)v16 & 1) != 0)
  {
    v20 = 8;
  }
  else
  {
    v19 = *(_QWORD *)(v16 + 8);
    v20 = *(_DWORD *)(v16 + 16);
  }
  if (v19 + 40 * v20 != v17
    && *(_QWORD *)(v17 + 16) >= 4uLL
    && a3(a4, *(unsigned int *)(v17 + 8), *(unsigned __int8 *)(v17 + 32))
    && (!a6 || (*(_BYTE *)(v18 + 16) & 2) == 0))
  {
    return 1;
  }
  v22 = v15 + 1312 * a5;
  v23 = sub_22F3403D8(v22 + 728, v14);
  v24 = (_QWORD *)(v22 + 736);
  if ((*(_BYTE *)(v22 + 728) & 1) != 0)
  {
    v25 = 8;
  }
  else
  {
    v24 = (_QWORD *)*v24;
    v25 = *(_DWORD *)(v15 + 1312 * a5 + 744);
  }
  if (&v24[3 * v25] != (_QWORD *)v23)
    return a3(a4, 63, 0);
  else
    return 0;
}

uint64_t sub_22EC7EA20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = sub_22ECB1B04(a1);
  if (a2)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  else
    v4 = 0;
  v9 = 0;
  if (sub_22ECB1B60(*(_QWORD *)(v3 + 1280), *(_DWORD *)(v3 + 1296), v4, &v9))
  {
    v5 = v9;
    v6 = *(_QWORD *)(v3 + 1280);
    v7 = *(unsigned int *)(v3 + 1296);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 1280);
    v7 = *(unsigned int *)(v3 + 1296);
    v5 = v6 + 16 * v7;
  }
  if (v5 == v6 + 16 * v7)
    return 0;
  else
    return *(unsigned int *)(v5 + 8) | 0x100000000;
}

uint64_t sub_22EC7EABC(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;

  v5 = sub_22EC81010(a2);
  v6 = 1312 * (a3 + 1) - 584;
  while (1)
  {
    v7 = v6 - 1312;
    if (v6 == -584)
      break;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 5272 * *(unsigned int *)(a1 + 344) - 5272) + v6;
    v9 = sub_22F3403D8(v8, v5);
    v10 = (_QWORD *)(v8 + 8);
    if ((*(_BYTE *)v8 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = (_QWORD *)*v10;
      v11 = *(_DWORD *)(v8 + 16);
    }
    v12 = &v10[3 * v11];
    v6 = v7;
    if (v12 != (_QWORD *)v9)
      return *(_QWORD *)(v9 + 8);
  }
  return 0;
}

BOOL sub_22EC7EB80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  char v8;

  v1 = *(_QWORD *)(a1 + 12288);
  v2 = sub_22ECB1B04(v1);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 960) - 56, v4 = v3 > 0x2A, v5 = (1 << v3) & 0x6000001CF91, !v4)
      ? (v6 = v5 == 0)
      : (v6 = 1),
        !v6 && *(_DWORD *)(v1 + 21440) == 85))
  {
    return 1;
  }
  else
  {
    return sub_22EC7EC08(v1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))sub_22ECF7350, (uint64_t)&v8);
  }
}

BOOL sub_22EC7EC08(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, _QWORD), uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v5 = *(_DWORD *)(a1 + 344);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 336) + 5272 * v5;
    v7 = *(_QWORD *)(v6 - 5272);
    v8 = *(_DWORD *)(v6 - 5264);
    v9 = *(unsigned int *)(a1 + 21496);
    v11 = *(_QWORD *)(v6 - 8) == *(_QWORD *)(a1 + 328) && v8 > v9;
    v12 = v7 + 1312 * v8 - 1312 * v9 + 1312 * (v11 << 31 >> 31);
  }
  else
  {
    v12 = 0;
    v7 = 0;
  }
  do
  {
    v13 = v12;
    if (v12 == v7)
      break;
    v14 = a2(a3, *(unsigned int *)(v12 - 352), v12 - 344, *(unsigned int *)(v12 - 304));
    v12 = v13 - 1312;
  }
  while (!v14);
  return v13 != v7;
}

uint64_t sub_22EC7ECC4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  _BOOL4 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  char v45;
  _BYTE v46[4];
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void *v51[2];
  _QWORD v52[4];

  v52[3] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22EC81010(a2);
  v8 = v7;
  if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 60 >= 7)
    v9 = 0;
  else
    v9 = v7;
  if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v9 + 97) & 0x80) != 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 12288);
  if (a3 && (v11 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288))) != 0 && *(_BYTE *)(v11 + 1084))
  {
    v12 = 0;
    ++*(_DWORD *)(v10 + 21496);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    v12 = 1;
    if (!v9)
      goto LABEL_14;
  }
  if (!sub_22E3CB5E0(v9))
  {
    if ((v21 = *(unsigned int *)(a1 + 1904), (_DWORD)v21)
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v21 - 8) + 8) & 7) == 3
      || sub_22F30914C(a1)
      || sub_22E904A34(a1, 0))
    {
      if (sub_22EC7EB80(a1))
      {
        sub_22EC7F2A4(*(_QWORD *)(a1 + 12288), v8, *(_DWORD *)(*(_QWORD *)(a1 + 12288) + 21440) != 85, (uint64_t)v46);
        if (v47 != 85 && v48)
          goto LABEL_54;
        sub_22EF95D10(v9);
        if (v22)
          goto LABEL_53;
        v23 = *(_QWORD *)(a1 + 1896);
        v24 = *(unsigned int *)(a1 + 1904);
        v25 = (a4 + 1) - v24;
        if (!a3)
          v25 = 0;
        if (v23 + 8 * v24 + 8 * v25 != v23)
        {
          v26 = 8 * v25 + 8 * v24;
          v27 = v23 - 8;
          do
          {
            v28 = *(_QWORD *)(v27 + v26);
            if ((*(_DWORD *)(v28 + 8) & 7u) - 1 > 2)
              goto LABEL_53;
            if ((*(_DWORD *)(v28 + 8) & 7) == 3 && *(_WORD *)(v28 + 1456) == 2)
              goto LABEL_46;
            v26 -= 8;
          }
          while (v26);
        }
        v28 = 0;
LABEL_46:
        v51[0] = v52;
        v51[1] = (void *)0x400000000;
        sub_22F421BB4((uint64_t)v51, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)+ 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)- 5272)+ 1312 * *(unsigned __int16 *)(v28 + 1458)+ 960));
        v29 = *((_DWORD *)v51[0] + *(unsigned __int16 *)(v28 + 1460));
        if (v51[0] != v52)
          free(v51[0]);
        if (v29 != 74)
        {
          v8 = v9;
          goto LABEL_54;
        }
      }
      if (*(_DWORD *)(a1 + 12304))
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) <= 0x2Du)
        {
          sub_22EF95D10(v9);
          if (!v30)
            sub_22EC7FD5C(a1, 0, v9, 0);
        }
        goto LABEL_53;
      }
    }
  }
LABEL_14:
  if (a3)
  {
    if (a4 != -1)
    {
      v13 = 8 * (a4 + 1);
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) - 8 + v13);
        if ((*(_DWORD *)(v14 + 8) & 7u) - 1 > 2)
          break;
        if ((*(_DWORD *)(v14 + 8) & 7) == 3 && *(_WORD *)(v14 + 1456) == 2)
          goto LABEL_22;
        v13 -= 8;
        if (!v13)
          goto LABEL_53;
      }
    }
    goto LABEL_53;
  }
LABEL_22:
  v15 = *(_QWORD *)(a1 + 12288);
  v16 = sub_22ECB1B04(v15);
  if (!v16)
    goto LABEL_53;
  if (*(_DWORD *)(v16 + 960) == 89)
    goto LABEL_53;
  if (*(_DWORD *)(v15 + 21440) != 85)
  {
    v17 = sub_22ECB2028(v15);
    if (!v17 || *(_DWORD *)(v17 + 960) == 89)
      goto LABEL_53;
  }
  v18 = sub_22EC80308(v15, v8);
  v20 = v19;
  if (v18)
  {
LABEL_28:
    if (v9)
      v8 = v9;
    else
      v8 = v20;
    goto LABEL_54;
  }
  if (v9)
  {
    v32 = sub_22E3CB5E0(v9);
    v33 = *(_QWORD *)(a1 + 12288);
    if (v32)
    {
      v42 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
      v43 = v42 ? *(_DWORD *)(v42 + 960) : 89;
      if (sub_22F421A78(v43)
        || (v43 - 36) <= 0x3F && ((1 << (v43 - 36)) & 0xC027335CC0000C03) != 0)
      {
        goto LABEL_28;
      }
    }
    if (*(_BYTE *)(v33 + 21456))
      goto LABEL_28;
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 12288);
  }
  sub_22EC7F2A4(v33, v8, *(_DWORD *)(v33 + 21440) != 85, (uint64_t)v46);
  v34 = v47;
  if ((v47 - 29) > 0x30 || ((1 << (v47 - 29)) & 0x100240000C101) == 0)
  {
LABEL_73:
    if ((v34 & 0xFFFFFFBF) == 0xF)
      goto LABEL_53;
    sub_22EC80388((uint64_t)v51, *(_QWORD *)(a1 + 12288), v8, (uint64_t (*)(uint64_t, _QWORD, _QWORD))sub_22ECF7374, (uint64_t)&v45, (uint64_t (*)(uint64_t, _QWORD))sub_22ECF73A0, (uint64_t)&v44, *(_DWORD *)(*(_QWORD *)(a1 + 12288) + 21440) != 85);
    if (!v9)
    {
      if (HIDWORD(v51[0]) != 85)
      {
        v39 = *(_QWORD *)(v52[1] + 16);
        goto LABEL_96;
      }
LABEL_53:
      v8 = 0;
      goto LABEL_54;
    }
    if (sub_22E3CB5E0(v9) || HIDWORD(v51[0]) != 85)
    {
      if (HIDWORD(v51[0]) != 85)
        goto LABEL_95;
      v35 = *(_QWORD *)(a1 + 12288);
      v36 = *(_DWORD *)(v35 + 344);
      if (!v36)
        goto LABEL_53;
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 12288);
      v36 = *(_DWORD *)(v35 + 344);
      if (!v36)
        goto LABEL_82;
      v37 = *(_QWORD *)(v35 + 336) + 5272 * v36;
      if (*(_QWORD *)(v37 - 8) != *(_QWORD *)(v35 + 328) || *(_DWORD *)(v37 - 5264) <= *(_DWORD *)(v35 + 21496))
        goto LABEL_82;
      v38 = *(_DWORD *)(sub_22ECB1B04(v35) + 928);
      if (v38 == 1)
      {
        if (v47 == 73)
        {
LABEL_82:
          v39 = 0;
LABEL_96:
          v8 = v39;
          goto LABEL_54;
        }
      }
      else
      {
        v39 = 0;
        if (v38 != 4 || v47 == 73)
          goto LABEL_96;
      }
    }
    v40 = *(_QWORD *)(v35 + 336) + 5272 * v36;
    if (*(_QWORD *)(v40 - 8) != *(_QWORD *)(v35 + 328) || *(_DWORD *)(v40 - 5264) <= *(_DWORD *)(v35 + 21496))
      goto LABEL_53;
    v41 = *(_DWORD *)(sub_22ECB1B04(v35) + 928);
    if (v41 != 1)
    {
      if (v41 == 4)
        goto LABEL_54;
      goto LABEL_53;
    }
LABEL_95:
    v39 = v8;
    goto LABEL_96;
  }
  if (!v9)
  {
    v8 = *(_QWORD *)(v49 + 16);
    goto LABEL_54;
  }
  if (!sub_22E3CB5E0(v9) && v50)
  {
    v34 = v47;
    goto LABEL_73;
  }
LABEL_54:
  if ((v12 & 1) == 0)
    --*(_DWORD *)(v10 + 21496);
  return v8;
}

double sub_22EC7F2A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  double result;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  _BYTE *v118;
  uint64_t *v119;
  char v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  char v124;

  v7 = sub_22EC81010(a2);
  v8 = v7;
  if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 60 >= 7)
    v9 = 0;
  else
    v9 = v7;
  *(_QWORD *)&v121 = 0;
  v10 = sub_22ECB1A54(a1, v7, &v121);
  v11 = *(_DWORD *)a1;
  if ((v10 & 1) != 0)
  {
    v12 = v121;
    if ((v11 & 1) != 0)
    {
LABEL_6:
      v13 = a1 + 8;
      v14 = 8;
      goto LABEL_12;
    }
  }
  else
  {
    if ((v11 & 1) != 0)
    {
      v15 = a1 + 8;
      v16 = 8;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_DWORD *)(a1 + 16);
    }
    v12 = v15 + 40 * v16;
    if ((v11 & 1) != 0)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_DWORD *)(a1 + 16);
LABEL_12:
  if (v12 != v13 + 40 * v14)
  {
    v17 = *(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    v18 = *(_DWORD *)(v12 + 12);
    *(_QWORD *)&result = 0x4F00000059;
    *(_QWORD *)a4 = 0x4F00000059;
    *(_DWORD *)(a4 + 8) = v18;
    *(_QWORD *)(a4 + 16) = v17;
LABEL_14:
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    *(_BYTE *)(a4 + 36) = 0;
    return result;
  }
  if (!v9)
  {
    v20 = (uint64_t *)(a1 + 21448);
    goto LABEL_17;
  }
  if (sub_22F25B62C(v9))
  {
    v42 = *(_QWORD *)(a1 + 21448);
    v43 = *(_QWORD *)(v8 + 48);
    v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
    if (!v44 || (v45 = *(_DWORD *)(v44 + 16), (v45 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v44 = sub_22F10CF48(v44)) == 0)
      {
LABEL_46:
        sub_22EFC8E88(v9);
        v47 = *v46;
        v48 = *((unsigned int *)v46 + 2);
        if ((_DWORD)v48 && *(_WORD *)(*v47 + 32) != 247)
        {
          v49 = 8 * v48 - 8;
          v50 = *v46;
          do
          {
            v51 = v50[1];
            ++v50;
            v49 -= 8;
          }
          while (*(_WORD *)(v51 + 32) != 247);
        }
        do
        {
          v53 = *v47++;
          v52 = v53;
        }
        while (*(_WORD *)(v53 + 32) != 247);
        v54 = *(_QWORD *)(v52 + 16);
        *(_DWORD *)(v9 + 28) |= 0x800u;
        sub_22EFC9100(v9, *(_QWORD *)(v42 + 88));
        v55 = *(_QWORD *)(v42 + 88);
        v56 = *(_QWORD *)(v9 + 40);
        *(_QWORD *)&v121 = v56;
        DWORD2(v121) = v54;
        goto LABEL_52;
      }
      v45 = *(_DWORD *)(v44 + 16);
    }
    if ((v45 & 0x100000) != 0)
    {
      do
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v44)
        {
          v114 = *(_DWORD *)(v44 + 16);
          if ((v114 & 0xFE) == 0x28)
            continue;
        }
        v44 = sub_22F10CF48(v44);
        v114 = *(_DWORD *)(v44 + 16);
      }
      while ((v114 & 0x100000) != 0);
    }
    v43 = *(_QWORD *)(v44 + 32);
    goto LABEL_46;
  }
  sub_22EFBB794(v9);
  if (v60
    && (!sub_22F25B62C(v9)
     || (v76 = *(_QWORD *)(a1 + 21448), (*(_BYTE *)(*(_QWORD *)(v76 + 72) + 76) & 4) == 0)
     || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v76 + 88) + 15088) + 81))
    || (*(_BYTE *)(v9 + 96) & 7) == 5 && sub_22E3D1740(v9) && (sub_22E3CEC2C(v9) & 1) == 0)
  {
    v77 = *(_QWORD *)(a1 + 21448);
    v43 = *(_QWORD *)(v8 + 48);
    v78 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
    if (!v78 || (v79 = *(_DWORD *)(v78 + 16), (v79 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v78 = sub_22F10CF48(v78)) == 0)
      {
LABEL_88:
        v80 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v9 + 28) |= 0x800u;
        sub_22EFC9100(v9, *(_QWORD *)(v77 + 88));
        v55 = *(_QWORD *)(v77 + 88);
        v56 = *(_QWORD *)(v9 + 40);
        *(_QWORD *)&v121 = v56;
        DWORD2(v121) = v80;
LABEL_52:
        sub_22EFC6D6C((uint64_t)&v122, v56);
        v57 = sub_22E3CD3D4(v55 + 2032, 32, 3);
        sub_22EFF6AE4(v57, v55, 0, 0, 0, v9, 0, (uint64_t)&v121, 0, 0, v43, 1, 0, 0);
        *(_QWORD *)&v121 = sub_22EC81010(v8);
        v58 = sub_22ECB3308((_DWORD *)a1, (uint64_t *)&v121);
        v58[1] = v58[1] & 3 | v57;
        v58[2] = 0;
        *v58 = 79;
        *(_QWORD *)&result = 0x4F00000059;
        *(_QWORD *)a4 = 0x4F00000059;
        *(_DWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = v57;
        goto LABEL_14;
      }
      v79 = *(_DWORD *)(v78 + 16);
    }
    if ((v79 & 0x100000) != 0)
    {
      do
      {
        v78 = *(_QWORD *)(*(_QWORD *)(v78 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v78)
        {
          v115 = *(_DWORD *)(v78 + 16);
          if ((v115 & 0xFE) == 0x28)
            continue;
        }
        v78 = sub_22F10CF48(v78);
        v115 = *(_DWORD *)(v78 + 16);
      }
      while ((v115 & 0x100000) != 0);
    }
    v43 = *(_QWORD *)(v78 + 32);
    goto LABEL_88;
  }
  v20 = (uint64_t *)(a1 + 21448);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 21448) + 72) + 76) & 0x10) != 0
    && ((sub_22E3CEC2C(v9) & 1) != 0 || (*(_DWORD *)(v9 + 28) & 0x7F) == 0x40))
  {
    v61 = *(_DWORD *)(a1 + 344);
    if (v61)
    {
      v62 = *(_QWORD *)(a1 + 336) + 5272 * v61;
      if (*(_QWORD *)(v62 - 8) == *(_QWORD *)(a1 + 328)
        && *(_DWORD *)(v62 - 5264) > *(_DWORD *)(a1 + 21496)
        && !sub_22EC80308(a1, v8))
      {
        v63 = *(_DWORD *)(a1 + 344);
        if (v63)
        {
          v64 = (uint64_t *)(*(_QWORD *)(a1 + 336) + 5272 * v63 - 5272);
          v65 = *v64;
          v66 = *v64
              + 1312 * *(unsigned int *)(*(_QWORD *)(a1 + 336) + 5272 * v63 - 5264)
              - 1312 * *(unsigned int *)(a1 + 21496);
        }
        else
        {
          v66 = 0;
          v65 = 0;
        }
        while (v66 != v65)
        {
          v81 = v66 - 1312;
          v82 = *(_DWORD *)(v66 - 352) - 56;
          v83 = v82 > 0x2A;
          v84 = (1 << v82) & 0x6000001CF91;
          v85 = v83 || v84 == 0;
          v66 = v81;
          if (!v85)
          {
            v65 = v81 + 1312;
            break;
          }
        }
        if (v63)
        {
          v86 = *(_QWORD *)(a1 + 336) + 5272 * v63;
          v87 = *(_QWORD *)(v86 - 5272);
          if (v65 == v87)
            goto LABEL_17;
          v119 = (uint64_t *)(a1 + 21448);
          v88 = v87 + 1312 * *(unsigned int *)(v86 - 5264) - 1312 * *(unsigned int *)(a1 + 21496);
        }
        else
        {
          v119 = (uint64_t *)(a1 + 21448);
          if (!v65)
            goto LABEL_125;
          v88 = 0;
        }
        v118 = (_BYTE *)(v65 - 1312);
        if (v65 - 1312 != v88)
        {
          v89 = v88 + 1312;
          v90 = v88;
          while (!sub_22ECB1BF4(a1, v9, v88, v90))
          {
            v90 -= 1312;
            v89 -= 1312;
            if (v89 == v65)
              goto LABEL_105;
          }
          v94 = *v119;
          v95 = *(_QWORD *)(v8 + 48);
          v96 = *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0);
          if (!v96 || (v97 = *(_DWORD *)(v96 + 16), (v97 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v96 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
              || (v96 = sub_22F10CF48(v96)) == 0)
            {
LABEL_111:
              v98 = *(_DWORD *)(v8 + 24);
              v99 = v94;
              v100 = v9;
              v101 = v95;
LABEL_130:
              v113 = sub_22EC8247C(v99, v100, v101, v98, 0);
              *(_QWORD *)&result = 0x4F00000059;
              *(_QWORD *)a4 = 0x4F00000059;
              *(_DWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = v113;
              goto LABEL_14;
            }
            v97 = *(_DWORD *)(v96 + 16);
          }
          if ((v97 & 0x100000) != 0)
          {
            do
            {
              v96 = *(_QWORD *)(*(_QWORD *)(v96 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v96)
              {
                v116 = *(_DWORD *)(v96 + 16);
                if ((v116 & 0xFE) == 0x28)
                  continue;
              }
              v96 = sub_22F10CF48(v96);
              v116 = *(_DWORD *)(v96 + 16);
            }
            while ((v116 & 0x100000) != 0);
          }
          v95 = *(_QWORD *)(v96 + 32);
          goto LABEL_111;
        }
LABEL_105:
        if (*(_DWORD *)(a1 + 21440) != 85)
        {
          v91 = *(_DWORD *)(a1 + 344);
          if (v91)
          {
            v92 = *(_QWORD *)(a1 + 336) + 5272 * v91 - 5272;
            v93 = *(_QWORD *)v92 + 1312 * *(unsigned int *)(v92 + 8) - 1312 * *(unsigned int *)(a1 + 21496);
          }
          else
          {
            v93 = 0;
          }
          if (v65 == v93)
            goto LABEL_125;
        }
        v102 = sub_22ECB19F4((uint64_t)v118, v8);
        v103 = (_QWORD *)(v65 - 1304);
        if ((*v118 & 1) != 0)
        {
          v104 = 8;
        }
        else
        {
          v103 = (_QWORD *)*v103;
          v104 = *(_DWORD *)(v65 - 1296);
        }
        if (&v103[5 * v104] != (_QWORD *)v102)
        {
          v105 = *(_DWORD *)(v102 + 8) - 29;
          if (v105 <= 0x30 && ((1 << v105) & 0x100240000C101) != 0)
          {
            v106 = *(_QWORD *)(v102 + 16) & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)&result = 0x4F00000059;
            *(_QWORD *)a4 = 0x4F00000059;
            *(_DWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v106;
            goto LABEL_14;
          }
        }
        v107 = *(_DWORD *)(a1 + 344);
        v108 = v107 ? *(_QWORD *)(*(_QWORD *)(a1 + 336) + 5272 * v107 - 5272) : 0;
        if ((sub_22EC7DEC0((_QWORD *)*v119, v8, -1047552999 * ((unint64_t)&v118[-v108] >> 5), 0) & 1) != 0)
        {
LABEL_125:
          v20 = v119;
          goto LABEL_17;
        }
        v109 = *v119;
        v110 = *(_QWORD *)(v8 + 48);
        v111 = *(_QWORD *)(v110 & 0xFFFFFFFFFFFFFFF0);
        if (!v111 || (v112 = *(_DWORD *)(v111 + 16), (v112 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
            || (v111 = sub_22F10CF48(v111)) == 0)
          {
LABEL_129:
            v98 = *(_DWORD *)(v65 - 304);
            v99 = v109;
            v100 = v9;
            v101 = v110;
            goto LABEL_130;
          }
          v112 = *(_DWORD *)(v111 + 16);
        }
        if ((v112 & 0x100000) != 0)
        {
          do
          {
            v111 = *(_QWORD *)(*(_QWORD *)(v111 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v111)
            {
              v117 = *(_DWORD *)(v111 + 16);
              if ((v117 & 0xFE) == 0x28)
                continue;
            }
            v111 = sub_22F10CF48(v111);
            v117 = *(_DWORD *)(v111 + 16);
          }
          while ((v117 & 0x100000) != 0);
        }
        v110 = *(_QWORD *)(v111 + 32);
        goto LABEL_129;
      }
    }
  }
LABEL_17:
  v21 = *(_DWORD *)(a1 + 344);
  if (!v21
    || (v22 = *(_QWORD *)(a1 + 336), v23 = v22 + 5272 * v21, *(_QWORD *)(v23 - 8) != *(_QWORD *)(a1 + 328))
    || (v24 = *(_DWORD *)(v23 - 5264), v25 = *(unsigned int *)(a1 + 21496), v24 <= v25))
  {
LABEL_39:
    *(_QWORD *)&result = 0x5500000059;
LABEL_40:
    *(double *)a4 = result;
    *(_DWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 29) = 0;
    return result;
  }
  if (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) != 0x40)
  {
    v26 = *(_QWORD *)(v9 + 16);
    v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    if ((v26 & 4) != 0)
      v27 = *(_QWORD *)v27;
    if ((*(_WORD *)(v27 + 8) & 0x7Eu) - 34 <= 3)
    {
      v28 = *(_QWORD *)(v23 - 5272);
      v29 = v28 + 1312 * v24 - 1312 * v25;
      if (v29 == v28)
        v30 = 0;
      else
        v30 = a3;
      v31 = v29 + 1312 * (v30 << 31 >> 31);
      if (v31 != v28)
      {
        v32 = sub_22ECB19F4(v31 - 1312, v8);
        v33 = (_QWORD *)(v31 - 1304);
        if ((*(_BYTE *)(v31 - 1312) & 1) != 0)
        {
          v34 = 8;
        }
        else
        {
          v33 = (_QWORD *)*v33;
          v34 = *(_DWORD *)(v31 - 1296);
        }
        if (&v33[5 * v34] != (_QWORD *)v32)
        {
          v72 = *(_QWORD *)(v32 + 24);
          v73 = *(_QWORD *)(v32 + 16) & 0xFFFFFFFFFFFFFFFCLL;
          v74 = *(_DWORD *)(v31 - 380);
          v75 = *(_BYTE *)(v32 + 32);
          *(_DWORD *)a4 = *(_DWORD *)(v31 - 352);
          result = *(double *)(v32 + 8);
          *(double *)(a4 + 4) = result;
          *(_QWORD *)(a4 + 16) = v73;
          *(_QWORD *)(a4 + 24) = v72;
          *(_DWORD *)(a4 + 32) = v74;
          *(_BYTE *)(a4 + 36) = v75;
          return result;
        }
      }
      goto LABEL_81;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*v20 + 72) + 72) & 0xFFFFFFE0) != 0)
    goto LABEL_32;
  if (sub_22ECB1E3C(*v20, *(_QWORD *)(v8 + 48), 1, 0))
  {
    sub_22ECAA9FC((uint64_t)&v121, a1, v8, (unsigned int (*)(uint64_t, _QWORD, _QWORD))sub_22ECB200C, (uint64_t)&v120, (uint64_t (*)(uint64_t, _QWORD))sub_22ECB2020, (uint64_t)&v124, a3);
    if (DWORD1(v121) != 85 && (_QWORD)v122)
    {
      result = *(double *)&v121;
      v59 = v122;
      *(_OWORD *)a4 = v121;
      *(_OWORD *)(a4 + 16) = v59;
      *(_QWORD *)(a4 + 32) = v123;
      return result;
    }
LABEL_81:
    *(_QWORD *)&result = 0x4900000059;
    goto LABEL_40;
  }
  v21 = *(_DWORD *)(a1 + 344);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 336);
    v24 = *(_DWORD *)(v22 + 5272 * v21 - 5264);
    LODWORD(v25) = *(_DWORD *)(a1 + 21496);
LABEL_32:
    v35 = *(_QWORD *)(v22 + 5272 * v21 - 5272);
    v36 = v35 + 1312 * v24 - 1312 * v25;
    goto LABEL_33;
  }
  v36 = 0;
  v35 = 0;
LABEL_33:
  if (v36 == v35)
    v37 = 0;
  else
    v37 = a3;
  v38 = v36 + 1312 * (v37 << 31 >> 31);
  if (v38 == v35)
    goto LABEL_39;
  v39 = sub_22ECB19F4(v38 - 1312, v8);
  v40 = (_QWORD *)(v38 - 1304);
  if ((*(_BYTE *)(v38 - 1312) & 1) != 0)
  {
    v41 = 8;
  }
  else
  {
    v40 = (_QWORD *)*v40;
    v41 = *(_DWORD *)(v38 - 1296);
  }
  if (&v40[5 * v41] == (_QWORD *)v39)
  {
    v68 = 0;
    v67 = 0;
    v69 = 0;
    v71 = 0;
    *(_QWORD *)&result = 85;
    v70 = 89;
  }
  else
  {
    v67 = *(_QWORD *)(v39 + 24);
    v68 = *(_QWORD *)(v39 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    v69 = *(_DWORD *)(v38 - 380);
    v70 = *(_DWORD *)(v38 - 352);
    result = *(double *)(v39 + 8);
    v71 = *(_BYTE *)(v39 + 32);
  }
  *(_DWORD *)a4 = v70;
  *(double *)(a4 + 4) = result;
  *(_QWORD *)(a4 + 16) = v68;
  *(_QWORD *)(a4 + 24) = v67;
  *(_DWORD *)(a4 + 32) = v69;
  *(_BYTE *)(a4 + 36) = v71;
  return result;
}

void sub_22EC7FD5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54[24];
  unsigned int v55[25];
  int v56;
  uint64_t v57[12];
  __int128 v58;
  unint64_t v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;

  if (!a3)
    return;
  v4 = a3;
  v5 = *(_DWORD *)(a3 + 28);
  if ((v5 & 0x80) != 0)
    return;
  if (a2)
  {
    sub_22F0D5A50(a2);
    v10 = v9;
  }
  else
  {
    v10 = *(_DWORD *)(a3 + 24);
  }
  v11 = v5 & 0x7F;
  if ((v11 - 67) < 0xFFFFFFF9)
  {
LABEL_15:
    if ((v5 & 0x7F) == 0x1D)
    {
      v4 = *(_QWORD *)(v4 + 48);
      v5 = *(_DWORD *)(v4 + 28);
    }
    if ((v5 & 0x7Eu) - 52 >= 6)
      v17 = 0;
    else
      v17 = v4;
    v57[0] = v17;
    if (v17)
    {
      v18 = sub_22EF95D10(v17);
      if (v19)
        v20 = *(unsigned int *)(v18 + 36) | 0x100000000;
      else
        v20 = 0;
      if (a4 && (v20 & 0x100000000) != 0 && v20 == 1)
      {
        sub_22E8FCA40((_QWORD *)a1, a4, 0x1086u, 0, (uint64_t)v54);
        sub_22E903BEC(v54);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v17 + 24), 0x15A7u, 0, (uint64_t)&v58);
        sub_22E890024((uint64_t)&v58, v57);
        v21 = (unsigned int *)&v58;
        goto LABEL_27;
      }
      v5 = *(_DWORD *)(v4 + 28);
    }
    v22 = v5 & 0x7F;
    if ((v22 - 75) >= 0xFFFFFFE5)
    {
      if (!a2 && (sub_22F1110EC(*(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
        goto LABEL_92;
      sub_22EF95D10(v4);
      if (!v23)
      {
        v24 = *(_QWORD *)(v4 + 48);
        *(_QWORD *)&v58 = &unk_24FAB6EF8;
        DWORD2(v58) = 3591;
        if ((sub_22EE8B0B0(a1, v10, v24) & 1) != 0)
          return;
      }
      if (!a2)
      {
LABEL_92:
        if (*(_DWORD *)(a1 + 12304))
        {
          v33 = *(_DWORD *)(v4 + 28);
          if ((v33 & 0x7Fu) - 60 < 7 || (v33 & 0x7F) == 0x1D || (v33 & 0x7Eu) - 52 <= 5)
          {
            v34 = sub_22EF95D10(v4);
            v35 = *(_DWORD *)(a1 + 12304);
            if (!v36 || *(_DWORD *)(v34 + 60) < v35)
            {
              v37 = *(_QWORD *)(a1 + 12296) + 56 * v35;
              if (*(_BYTE *)(v37 - 16))
              {
                v38 = *(_QWORD *)(v37 - 24);
                v39 = v38 == 0;
              }
              else
              {
                v38 = 0;
                v39 = 0;
              }
              v49 = *(_QWORD *)(a1 + 88);
              v50 = *(_DWORD *)(v37 - 32);
              v51 = *(unsigned int *)(v37 - 8) | ((unint64_t)*(unsigned int *)(v37 - 8) << 32);
              v58 = 0uLL;
              v59 = v51;
              v60 = 0;
              v62 = 120;
              v61 = 0;
              v52 = sub_22F396338(v49, 0, v50, v38, v39, v35, &v58);
              sub_22EFCA95C(v4, v52);
              v53 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16056);
              if (v53)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 160))(v53, v4, v52);
            }
          }
        }
        return;
      }
      v22 = *(_DWORD *)(v4 + 28) & 0x7F;
    }
    else if (!a2)
    {
      return;
    }
    sub_22EFF605C(a2);
    v26 = v25;
    sub_22F0D4E74(a2);
    v64 = v27;
    if ((v22 - 60) > 6)
      return;
    v28 = v26;
    v63 = v4;
    v29 = sub_22EF95D10(v4);
    if (v30)
      v31 = *(unsigned int *)(v29 + 36) | 0x100000000;
    else
      v31 = 0;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) >= 0x32u
      && (sub_22E904A34(a1, 1)
       || sub_22F30914C(a1)
       || (v48 = *(unsigned int *)(a1 + 1904), (_DWORD)v48)
       && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v48 - 8) + 8) & 7) == 3)
      && !sub_22E3CB5E0(v4))
    {
      if (HIDWORD(v31) && !(_DWORD)v31)
        return;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v4 + 24), 0x10A0u, 0, (uint64_t)&v58);
      sub_22E903BEC((unsigned int *)&v58);
      sub_22E8FCA40((_QWORD *)a1, v28, 0x1817u, 0, (uint64_t)v57);
      v47 = sub_22E890024((uint64_t)v57, &v63);
      v56 = 0;
      v32 = (uint64_t *)sub_22E8900C4(v47, &v56);
    }
    else
    {
      if (HIDWORD(v31))
        return;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v4 + 24), 0x1ACBu, 0, (uint64_t)&v58);
      sub_22E903BEC((unsigned int *)&v58);
      sub_22E8FCA40((_QWORD *)a1, v28, 0x180Cu, 0, (uint64_t)v57);
      v32 = v57;
    }
    sub_22E8906A0((uint64_t)v32, &v64);
    v21 = (unsigned int *)v57;
LABEL_27:
    sub_22E903BEC(v21);
    return;
  }
  if (v11 != 64 && v11 != 62)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v14 = v13[1];
    v15 = *(_WORD *)(sub_22EFCBB30(v14) + 8) & 0x7F;
    if (v15 == 16 || v15 == 83)
      goto LABEL_12;
    if ((v12 & 4) != 0)
      v13 = (_QWORD *)*v13;
    if (((_WORD)v13[1] & 0x7Eu) - 34 < 4)
      goto LABEL_12;
  }
  v40 = *(_BYTE *)(v4 + 96);
  if ((v40 & 7) == 2 || (*(_BYTE *)(v4 + 96) & 7) == 0 && (v40 & 0x18) == 0x10)
  {
    if (v11 == 64 || v11 == 62)
      goto LABEL_12;
    v41 = *(_QWORD *)(v4 + 16);
    v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
    v43 = v41 & 0xFFFFFFFFFFFFFFF8;
    if ((v41 & 4) != 0)
      v43 = v42[1];
    v44 = *(_WORD *)(sub_22EFCBB30(v43) + 8) & 0x7F;
    if (v44 != 16 && v44 != 83)
    {
      if ((v41 & 4) != 0)
        v42 = (_QWORD *)*v42;
      if (((_WORD)v42[1] & 0x7Eu) - 34 > 3)
        goto LABEL_12;
    }
  }
  if (v11 != 64)
  {
    v45 = *(_QWORD *)(v4 + 16);
    v46 = v45 & 0xFFFFFFFFFFFFFFF8;
    if ((v45 & 4) != 0)
      v46 = *(_QWORD *)v46;
    if ((*(_WORD *)(v46 + 8) & 0x7Eu) - 34 <= 3)
    {
LABEL_12:
      sub_22EC7F2A4(*(_QWORD *)(a1 + 12288), v4, 0, (uint64_t)&v58);
      if ((DWORD1(v58) & 0xFFFFFFBF) == 0xF)
      {
        sub_22E8FCA40((_QWORD *)a1, v10, 0x10F9u, 0, (uint64_t)v55);
        sub_22E903BEC(v55);
        v16 = *(_QWORD *)(a1 + 12288);
        sub_22EC7F2A4(v16, v4, 0, (uint64_t)&v58);
        sub_22EC82B14((_QWORD *)a1, v16, v4, (uint64_t)&v58, 0);
        return;
      }
      v5 = *(_DWORD *)(v4 + 28);
      goto LABEL_15;
    }
  }
}

uint64_t sub_22EC80308(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = sub_22EC81010(a2);
  v4 = sub_22ECB1B04(a1);
  v5 = sub_22F3403D8(v4 + 728, v3);
  if ((*(_BYTE *)(v4 + 728) & 1) != 0)
  {
    v6 = v4 + 736;
    v7 = 8;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 736);
    v7 = *(_DWORD *)(v4 + 744);
  }
  if (v6 + 24 * v7 == v5)
    return 0;
  else
    return *(_QWORD *)(v5 + 8);
}

double sub_22EC80388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD), uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD), uint64_t a7, int a8)
{
  unsigned int v9;
  uint64_t v11;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t i;
  double result;
  int v24;
  uint64_t v27;
  uint64_t v28;

  v9 = *(_DWORD *)(a2 + 344);
  if (v9)
  {
    v11 = *(_QWORD *)(a2 + 336) + 5272 * v9;
    if (*(_QWORD *)(v11 - 8) == *(_QWORD *)(a2 + 328) && *(_DWORD *)(v11 - 5264) > *(_DWORD *)(a2 + 21496))
    {
      v16 = sub_22EC81010(a3);
      v17 = *(_DWORD *)(a2 + 344);
      if (v17)
      {
        v18 = *(_QWORD *)(a2 + 336) + 5272 * v17 - 5272;
        v19 = *(_QWORD *)v18;
        v20 = *(_QWORD *)v18 + 1312 * *(unsigned int *)(v18 + 8) - 1312 * *(unsigned int *)(a2 + 21496);
      }
      else
      {
        v20 = 0;
        v19 = 0;
      }
      if (v19 == v20)
        v21 = 0;
      else
        v21 = a8;
      for (i = v20 + 1312 * (v21 << 31 >> 31); i != v19; i -= 1312)
      {
        if ((a6(a7, *(unsigned int *)(i - 352)) & 1) == 0)
        {
          v24 = *(_DWORD *)(i - 352);
          if (!sub_22F421A78(v24)
            && ((v24 - 36) > 0x3F || ((1 << (v24 - 36)) & 0xC027335CC0000C03) == 0))
          {
            continue;
          }
        }
        v27 = v20;
        v28 = i;
        sub_22ECB208C(a1, a2, &v27, v16);
        if (i == v28 && (a4(a5, *(unsigned int *)(a1 + 4), *(unsigned __int8 *)(a1 + 36)) & 1) != 0)
          return result;
      }
    }
  }
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)&result = 0x5500000059;
  *(_QWORD *)a1 = 0x5500000059;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  return result;
}

uint64_t sub_22EC80540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  v1 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
  v2 = v1;
  if (v1)
    v3 = *(_DWORD *)(v1 + 960);
  else
    v3 = 89;
  result = sub_22F4219DC(v3);
  if ((_DWORD)result)
    *(_BYTE *)(v2 + 1083) = 1;
  return result;
}

uint64_t sub_22EC80584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 12288);
  v2 = sub_22ECB1B04(v1);
  v3 = v2;
  if (v2)
    v4 = *(_DWORD *)(v2 + 960);
  else
    v4 = 89;
  result = sub_22F4219DC(v4);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v3 + 1072) = 0;
    result = sub_22ECB1B04(v1);
    *(_BYTE *)(result + 1083) = 0;
  }
  return result;
}

uint64_t sub_22EC805D4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  _BYTE v65[24];
  unint64_t v66[5];
  void *v67[2];
  _QWORD v68[3];

  v5 = a2;
  v68[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 12288);
  v8 = *(_DWORD *)(v7 + 344);
  if (!v8)
    goto LABEL_40;
  v9 = *(_QWORD *)(v7 + 336) + 5272 * v8;
  if (*(_QWORD *)(v9 - 8) != *(_QWORD *)(v7 + 328))
    goto LABEL_40;
  v10 = *(unsigned int *)(v9 - 5264);
  v11 = *(unsigned int *)(v7 + 21496);
  if (v10 <= v11 || v10 - v11 <= (unint64_t)a3)
    goto LABEL_40;
  v13 = *(_DWORD *)(*(_QWORD *)(v9 - 5272) + 1312 * a3 + 960) - 36;
  v14 = v13 > 0x29;
  v15 = (1 << v13) & 0x34000000C03;
  if (v14 || v15 == 0)
    goto LABEL_40;
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  if (!v19 || (v20 = *(_DWORD *)(v19 + 16), (v20 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_12;
    v19 = sub_22F10CF48(v19);
    if (!v19)
      goto LABEL_12;
    v20 = *(_DWORD *)(v19 + 16);
  }
  if ((v20 & 0x100000) != 0)
  {
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
      {
        v62 = *(_DWORD *)(v19 + 16);
        if ((v62 & 0xFE) == 0x28)
          continue;
      }
      v19 = sub_22F10CF48(v19);
      v62 = *(_DWORD *)(v19 + 16);
    }
    while ((v62 & 0x100000) != 0);
  }
  v18 = *(_QWORD *)(v19 + 32);
LABEL_12:
  v66[0] = v18;
  if (!sub_22F111968(v66, *(_QWORD *)(a1 + 88)))
  {
    v26 = 0;
    goto LABEL_23;
  }
  v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
  v22 = *v21;
  if (*v21)
  {
    v23 = *(_DWORD *)(v22 + 16);
    if ((v23 & 0xFE) == 0x28)
      goto LABEL_101;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v22 = sub_22F10CF48(v22);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 + 16);
LABEL_101:
      if ((v23 & 0x100000) != 0)
      {
        do
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v22)
          {
            v63 = *(_DWORD *)(v22 + 16);
            if ((v63 & 0xFE) == 0x28)
              continue;
          }
          v22 = sub_22F10CF48(v22);
          v63 = *(_DWORD *)(v22 + 16);
        }
        while ((v63 & 0x100000) != 0);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  v24 = sub_22F10C2A4(*(_QWORD *)(v21[1] & 0xFFFFFFFFFFFFFFF0));
  if (v24)
  {
    if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 35 >= 3)
      v25 = 0;
    else
      v25 = v24;
  }
  else
  {
    v25 = 0;
  }
  v26 = v25 == 0;
LABEL_23:
  v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)
                              + 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)
                              - 5272)
                  + 1312 * a3
                  + 960);
  v67[0] = v68;
  v67[1] = (void *)0x400000000;
  sub_22F421BB4((uint64_t)v67, v27);
  v28 = *((_DWORD *)v67[0] + a4) - 36;
  v29 = v28 > 0x29 || ((1 << (*((_BYTE *)v67[0] + 4 * a4) - 36)) & 0x34000000C03) == 0;
  if (v29 || !v26 && v28 < 0x2A && ((0x30000000C03uLL >> v28) & 1) != 0)
    goto LABEL_35;
  if ((sub_22EC7E878(*(_QWORD *)(a1 + 12288), v5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF73A8, (uint64_t)v66, a3, 1) & 1) == 0)
  {
    sub_22EC80C88(*(_QWORD *)(a1 + 12288), v5, a3, (uint64_t)v66);
    if (HIDWORD(v66[0]) != 73 && !sub_22EC7EABC(*(_QWORD *)(a1 + 12288), v5, a3) && !v66[2])
    {
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)
                      + 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)
                      - 5272);
      if (v5)
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      else
        v61 = 0;
      v64 = v61;
      sub_22F25884C((uint64_t)v65, v60 + 1312 * a3 + 1184, &v64);
      goto LABEL_31;
    }
LABEL_35:
    v30 = 1;
    goto LABEL_36;
  }
LABEL_31:
  v30 = 0;
LABEL_36:
  if (v67[0] != v68)
    free(v67[0]);
  if (!v30)
    return 29;
  v7 = *(_QWORD *)(a1 + 12288);
LABEL_40:
  v31 = sub_22ECB1B04(v7);
  if (v31)
  {
    v55 = v31;
    if (sub_22F4219DC(*(_DWORD *)(v31 + 960)))
    {
      if (*(_DWORD *)(v55 + 1064) && *(_BYTE *)(v55 + 1083))
      {
        if (v5)
        {
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
          v56 = *(_QWORD *)(a1 + 12288);
        }
        else
        {
          v56 = v7;
        }
        *(_QWORD *)(sub_22ECB1B04(v7) + 1072) = v5;
        *(_BYTE *)(sub_22ECB1B04(v56) + 1083) = 0;
        return 63;
      }
      v57 = *(_QWORD *)(v55 + 1072);
      if ((v57 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5)
         || sub_22EC80308(*(_QWORD *)(a1 + 12288), v5))
        && (sub_22EC7E878(*(_QWORD *)(a1 + 12288), v5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF73B4, (uint64_t)v66, a3, 0) & 1) == 0)
      {
        v58 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
        v59 = v58 ? *(_DWORD *)(v58 + 960) : 89;
        if (!sub_22F421AC0(v59))
          return 63;
      }
    }
  }
  if (v5)
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    {
      sub_22EC7F2A4(*(_QWORD *)(a1 + 12288), v5, 0, (uint64_t)v66);
      if ((HIDWORD(v66[0]) & 0xFFFFFFBF) == 0xF)
      {
        v32 = *(_QWORD *)(a1 + 12288);
        if (*(_BYTE *)(v32 + 21456))
        {
          if ((sub_22EC7E878(v32, v5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF73C0, (uint64_t)v66, a3, 0) & 1) == 0)return 63;
        }
      }
    }
  }
  v33 = *(_QWORD *)(a1 + 12288);
  v34 = *(_DWORD *)(v33 + 344);
  if (v34)
  {
    v35 = *(_QWORD *)(v33 + 336) + 5272 * v34;
    if (*(_QWORD *)(v35 - 8) == *(_QWORD *)(v33 + 328))
    {
      v36 = *(unsigned int *)(v35 - 5264);
      v37 = *(unsigned int *)(v33 + 21496);
      if (v36 > v37 && v36 - v37 > (unint64_t)a3)
      {
        v38 = *(_DWORD *)(*(_QWORD *)(v35 - 5272) + 1312 * a3 + 960) - 56;
        v14 = v38 > 0x2A;
        v39 = (1 << v38) & 0x6000001CF91;
        if (!v14 && v39 != 0)
        {
          v41 = sub_22EC7EA20(v33, v5);
          if (HIDWORD(v41) && v41 == 1)
            return 63;
          v33 = *(_QWORD *)(a1 + 12288);
        }
      }
    }
  }
  if ((sub_22EC7E878(v33, v5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF73CC, (uint64_t)v66, a3, 0) & 1) != 0)
    return 63;
  v42 = *(_QWORD *)(a1 + 12288);
  v43 = v42 + 21440;
  if (*(_DWORD *)(v42 + 21440) == 63)
    return 63;
  v45 = *(_DWORD *)(v42 + 344);
  if (!v45)
    return 85;
  v46 = *(_QWORD *)(v42 + 328);
  v47 = *(_QWORD *)(v42 + 336) + 5272 * v45;
  if (*(_QWORD *)(v47 - 8) != v46)
    return 85;
  v48 = *(unsigned int *)(v47 - 5264);
  v49 = *(unsigned int *)(v43 + 56);
  if (v48 <= v49 || v48 - v49 <= (unint64_t)a3)
    return 85;
  v50 = a3;
  v51 = *(_QWORD *)(v47 - 5272);
  v52 = v51 + 1312 * a3;
  v53 = *(_DWORD *)(v52 + 960);
  if (v53 != 75 && (!sub_22F421A78(*(_DWORD *)(v52 + 960)) && !sub_22F421A30(v53) || sub_22F421AC0(v53)))
    return 85;
  v54 = *(_QWORD *)(v51 + 1312 * v50 + 1104);
  result = 85;
  if (v54)
  {
    if (*(_QWORD *)(v54 + 16) == v5)
      return 63;
    else
      return 85;
  }
  return result;
}

uint64_t sub_22EC80C88@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[2];

  v5 = *(_DWORD *)(result + 344);
  if (v5
    && (v6 = result, v7 = *(_QWORD *)(result + 336) + 5272 * v5, *(_QWORD *)(v7 - 8) == *(_QWORD *)(result + 328))
    && (v8 = *(unsigned int *)(v7 - 5264), v9 = *(unsigned int *)(result + 21496), v8 > v9)
    && v8 - v9 > (unint64_t)a3)
  {
    v10 = a3;
    v11 = sub_22EC81010(a2);
    v12 = *(_DWORD *)(v6 + 344);
    if (v12)
    {
      v13 = *(_QWORD *)(v6 + 336) + 5272 * v12;
      v14 = *(unsigned int *)(v13 - 5264);
      v15 = *(unsigned int *)(v6 + 21496);
      v16 = *(_QWORD *)(v13 - 5272) + 1312 * v14 - 1312 * v15;
      v17 = *(_QWORD *)(v13 - 8);
      if (v14 > v15 && v17 == *(_QWORD *)(v6 + 328))
        v19 = v15 - v14;
      else
        v19 = 0;
    }
    else
    {
      v16 = 0;
      v19 = 0;
    }
    v20[0] = v16;
    v20[1] = v16 + 1312 * (v10 + v19) + 1312;
    return sub_22ECB208C(a4, v6, v20, v11);
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = 0x5500000059;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 29) = 0;
  }
  return result;
}

void sub_22EC80DB0(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  char v36;
  int v37;

  v6 = sub_22EC81010(a3);
  v37 = 85;
  v7 = a1[1536];
  v8 = *(_DWORD *)(v7 + 344);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 336) + 5272 * v8;
    if (*(_QWORD *)(v9 - 8) == *(_QWORD *)(v7 + 328))
    {
      v10 = *(_DWORD *)(v9 - 5264);
      v11 = *(_DWORD *)(v7 + 21496);
      v12 = v10 >= v11 ? v10 - v11 : 0;
      if (v12 > a4)
      {
        v13 = v6;
        if (v10 < v11)
          v11 = v10;
        v14 = ~v11 + v10;
        v15 = 1312 * v14 + 936;
        while (1)
        {
          *(_QWORD *)&v32 = &v37;
          if ((sub_22EC7E878(v7, v13, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_22ECF73D8, (uint64_t)&v32, v14, 0) & 1) != 0)goto LABEL_22;
          if (sub_22EC7E4F4(a1[1536], v13, v14, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF7424, (uint64_t)&v32))
          {
            v24 = 46;
            goto LABEL_33;
          }
          v7 = a1[1536];
          v16 = *(_DWORD *)(v7 + 344);
          if (v16)
          {
            v17 = *(_QWORD *)(v7 + 336) + 5272 * v16;
            if (*(_QWORD *)(v17 - 8) == *(_QWORD *)(v7 + 328))
            {
              v18 = *(unsigned int *)(v17 - 5264);
              v19 = *(unsigned int *)(v7 + 21496);
              if (v18 > v19 && v18 - v19 > v14)
              {
                v20 = *(_DWORD *)(*(_QWORD *)(v17 - 5272) + v15 + 24) - 56;
                v21 = v20 > 0x2A;
                v22 = (1 << v20) & 0x6000001CF91;
                if (!v21 && v22 != 0)
                  break;
              }
            }
          }
          v15 -= 1312;
          --v14;
          if (--v12 <= a4)
            goto LABEL_22;
        }
        v37 = 46;
        v25 = sub_22EC7E5E0(*(_QWORD *)(a1[9] + 72), v13);
        v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 336) + 5272 * *(unsigned int *)(v7 + 344) - 5272)
                        + 8 * v25
                        + v15);
        if (v25 == 1)
        {
          if (v26 != 8)
            goto LABEL_22;
LABEL_31:
          v24 = 29;
LABEL_33:
          v37 = v24;
          goto LABEL_34;
        }
        v21 = v26 > 0xA;
        v27 = (1 << v26) & 0x508;
        if (!v21 && v27 != 0)
          goto LABEL_31;
      }
    }
  }
LABEL_22:
  v24 = v37;
  if (v37 != 85)
  {
LABEL_34:
    v29 = a1[11];
    v32 = 0uLL;
    v34 = 0;
    v33 = 0;
    v36 = 120;
    v35 = 0;
    v30 = sub_22F395CC8(v29, v24, &v32);
    sub_22EFCA95C(a2, v30);
  }
}

unint64_t sub_22EC81010(uint64_t a1)
{
  _DWORD *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v4;

  v1 = (_DWORD *)a1;
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x3F)
    {
      v2 = (unsigned __int8 *)sub_22EFBC5B4(a1);
      v3 = sub_22ECB248C(v2);
      if (*v3 == 188)
        v1 = (_DWORD *)*((_QWORD *)v3 + 3);
    }
  }
  if ((v1[7] & 0x7Fu) - 49 >= 3)
    v4 = 0;
  else
    v4 = (unint64_t)v1;
  if (v1 && (v1[7] & 0x7Fu) - 67 >= 0xFFFFFFF9)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 32))(v1);
  if ((*(_BYTE *)(v4 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(v4);
  return (unint64_t)v1;
}

BOOL sub_22EC810B0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _BOOL8 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  void *v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v19[0] = v20;
  v19[1] = (void *)0x400000000;
  sub_22F421BB4((uint64_t)v19, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)+ 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)- 5272)+ 1312 * a3+ 960));
  v8 = 0;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    if (sub_22E3CB5E0(a2))
      goto LABEL_10;
    v9 = *(_QWORD *)(a1 + 12288);
    v10 = *(_DWORD *)(v9 + 344);
    if (!v10)
      goto LABEL_10;
    v11 = *(_QWORD *)(v9 + 336) + 5272 * v10;
    if (*(_QWORD *)(v11 - 8) != *(_QWORD *)(v9 + 328))
      goto LABEL_10;
    v12 = *(unsigned int *)(v11 - 5264);
    v13 = *(unsigned int *)(v9 + 21496);
    v14 = v12 > v13 && v12 - v13 > (unint64_t)a3;
    if (v14
      && ((v16 = *(_DWORD *)(*(_QWORD *)(v11 - 5272) + 1312 * a3 + 960) - 56,
           v14 = v16 > 0x2A,
           v17 = (1 << v16) & 0x6000001CF91,
           !v14)
        ? (v18 = v17 == 0)
        : (v18 = 1),
          !v18))
    {
      v8 = *((_DWORD *)v19[0] + a4) != 74;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
  }
  if (v19[0] != v20)
    free(v19[0]);
  return v8;
}

BOOL sub_22EC8123C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  _BOOL8 result;
  int v9;
  unsigned int v10;
  _DWORD v12[10];
  _BYTE v13[4];
  int v14;

  result = 1;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    if (sub_22E3CB5E0(a2) || sub_22EC7EB80(a1))
      return 1;
    sub_22EC7F2A4(*(_QWORD *)(a1 + 12288), a2, 0, (uint64_t)v13);
    v9 = sub_22F33BDCC(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)
                                             + 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)
                                             - 5272)
                                 + 1312 * a3
                                 + 960));
    if (a3)
    {
      v10 = a3 - 1;
      do
      {
        sub_22EC80C88(*(_QWORD *)(a1 + 12288), a2, v10, (uint64_t)v12);
        if (v12[1] != 73)
          break;
        --v10;
      }
      while (v10 != -1);
      return 1;
    }
    return v9 == a4 + 1 && v14 != 73;
  }
  return result;
}

void sub_22EC81340(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  void *__p;
  char v6;

  v3 = a1 + 12536;
  v4 = a3;
  sub_22F0C4068(a3, &__p);
  sub_22EC81398(v3, (unint64_t)&v4);
  if (v6 < 0)
    operator delete(__p);
}

__n128 sub_22EC81398(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v5 + 32 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_22F341CFC(a1);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_22F341CFC(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 32 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v6 = *(_QWORD *)v2;
  result = *(__n128 *)(v2 + 8);
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v2 + 24);
  *(__n128 *)(v6 + 8) = result;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22EC81438(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned int *v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 **v49;
  unsigned __int8 *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  _DWORD *v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  _DWORD *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned __int8 **v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  __n128 v121;
  int v123;
  unsigned __int8 *v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t v132;
  _DWORD *v133;
  unsigned int v134;
  char v135;
  int v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  _DWORD *v145;
  int v146;
  uint64_t v147;
  unsigned __int8 **v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  _DWORD *v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172[12];
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  int v175;
  llvm *v176;
  uint64_t v177;
  unsigned int v178[20];
  unsigned int v179[4];
  uint64_t v180;
  unsigned __int8 *v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD v184[12];

  v184[10] = *MEMORY[0x24BDAC8D0];
  if (!a2 || *a2 - 21 > 0x40)
    goto LABEL_232;
  v3 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    v6 = *v3;
    v5 = v3 + 4;
    v4 = v6;
    if (v6)
    {
      v168 = &v5[2 * v4];
      do
      {
        v7 = *(_QWORD *)v5;
        v8 = *(_DWORD *)(*(_QWORD *)v5 + 8);
        if (*(_QWORD *)v5 && v8 == 43)
        {
          v182 = v184;
          v183 = 0x800000000;
          v9 = *(unsigned int *)(v7 + 16);
          if ((_DWORD)v9)
          {
            v166 = v7;
            v167 = v5;
            v10 = 0;
            v11 = (unsigned __int8 **)(v7 + 64);
            v12 = v7 + 64 + 8 * v9;
            v165 = v7 + 64;
            while (1)
            {
              v13 = *v11;
              v14 = *v11;
              if ((*(_DWORD *)*v11 & 0x18000) != 0)
              {
                if (v10 >= HIDWORD(v183))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v10 = v183;
                }
                v182[v10] = 0;
                goto LABEL_48;
              }
              do
              {
                v15 = (uint64_t)v14;
                v16 = *v14;
                if (v16 > 0xD5)
                {
                  if (v16 == 233)
                  {
                    if ((*(_DWORD *)v14 & 0x7C0000) != 0x300000)
                      break;
                    v18 = v14 + 16;
                  }
                  else
                  {
                    if (v16 != 214)
                      break;
                    v18 = v14 + 24;
                  }
                  goto LABEL_28;
                }
                if (v16 == 155)
                {
                  if ((**((_DWORD **)v14 + 2) & 0x18000) != 0)
                    break;
                  if (v14[48])
                    v18 = v14 + 24;
                  else
                    v18 = v14 + 32;
                  goto LABEL_28;
                }
                if (v16 != 176)
                  break;
                v17 = *((unsigned int *)v14 + 5);
                if ((_DWORD)v17 == -1)
                  break;
                v18 = &v14[8 * v17 + 40];
LABEL_28:
                v14 = *(unsigned __int8 **)v18;
              }
              while (*(_QWORD *)v18 != v15);
              v19 = *(_QWORD *)(v15 + 16);
              v20 = *(_QWORD *)(v19 + 48);
              v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
              if (v21 && (v22 = *(_DWORD *)(v21 + 16), (v22 & 0xFE) == 0x28))
              {
LABEL_52:
                if ((v22 & 0x100000) != 0)
                {
                  do
                  {
                    v21 = *(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
                    if (v21)
                    {
                      v43 = *(_DWORD *)(v21 + 16);
                      if ((v43 & 0xFE) == 0x28)
                        continue;
                    }
                    v21 = sub_22F10CF48(v21);
                    v43 = *(_DWORD *)(v21 + 16);
                  }
                  while ((v43 & 0x100000) != 0);
                }
                v20 = *(_QWORD *)(v21 + 32);
              }
              else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                v21 = sub_22F10CF48(v21);
                if (v21)
                {
                  v22 = *(_DWORD *)(v21 + 16);
                  goto LABEL_52;
                }
              }
              sub_22EC7F2A4(a1[1536], v19, 0, (uint64_t)v179);
              if (v179[1] != 43)
                goto LABEL_45;
              sub_22EFF605C((uint64_t)v13);
              v24 = v23;
              v25 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
                v25 = (unint64_t)sub_22F10D2BC(v20);
              v26 = 0;
              v27 = *(_QWORD *)(v19 + 40);
              v28 = "";
              if ((v27 & 7) == 0)
              {
                v29 = v27 & 0xFFFFFFFFFFFFFFF8;
                if (v29)
                {
                  v30 = *(_DWORD **)(v29 + 16);
                  v31 = *v30;
                  v28 = (const char *)(v30 + 4);
                  v26 = v31;
                }
              }
              if ((*(_BYTE *)(v19 + 29) & 1) != 0)
              {
                sub_22EFC8E88(v19);
                v32 = v33;
              }
              else
              {
                v32 = 0;
              }
              v34 = sub_22EC822F4(a1, v24, v25 & 0xFFFFFFFFFFFFFFF0, v28, v26, v32, v15);
              sub_22EA117E4();
              v35 = *(_DWORD *)(v34 + 28);
              if ((v35 & 0x80) != 0)
              {
LABEL_45:
                v42 = v183;
                if (v183 >= (unint64_t)HIDWORD(v183))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v42 = v183;
                }
                v182[v42] = 0;
              }
              else
              {
                v36 = *((_QWORD *)v13 + 1);
                sub_22EFF605C((uint64_t)v13);
                v38 = v37;
                *(_DWORD *)(v34 + 28) = v35 | 0x800;
                sub_22EFC9100(v34, a1[11]);
                v39 = a1[11];
                v176 = *(llvm **)(v34 + 40);
                LODWORD(v177) = v38;
                sub_22EFC6D6C((uint64_t)v178, (uint64_t)v176);
                v40 = sub_22E3CD3D4(v39 + 2032, 32, 3);
                sub_22EFF6AE4(v40, v39, 0, 0, 0, v34, 0, (uint64_t)&v176, 0, 0, v36, 1, 0, 0);
                v41 = v183;
                if (v183 >= (unint64_t)HIDWORD(v183))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v41 = v183;
                }
                v182[v41] = v40;
              }
LABEL_48:
              v10 = v183 + 1;
              LODWORD(v183) = v183 + 1;
              if (++v11 == (unsigned __int8 **)v12)
              {
                v56 = v182;
                if (v10)
                {
                  memmove((void *)(v165 + 8 * *(unsigned int *)(v166 + 16)), v182, 8 * v10);
                  v56 = v182;
                }
                v5 = v167;
                goto LABEL_96;
              }
            }
          }
        }
        else if (v7 && v8 == 53)
        {
          v182 = v184;
          v183 = 0x800000000;
          v44 = *(unsigned int *)(v7 + 16);
          if ((_DWORD)v44)
          {
            v45 = v5;
            v46 = v7;
            v47 = v7 + 24;
            v48 = 8 * v44;
            v49 = (unsigned __int8 **)(v7 + 24);
            do
            {
              v50 = *v49;
              LODWORD(v174) = 0;
              v176 = 0;
              v172[0] = v50;
              v51 = sub_22EC82530(a1, v172, (int *)&v174, (uint64_t *)&v176, 0);
              if ((v52 & 1) != 0)
              {
                v53 = v183;
                if (v183 >= (unint64_t)HIDWORD(v183))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v53 = v183;
                }
                v182[v53] = v50;
                LODWORD(v183) = v183 + 1;
              }
              if (v51)
              {
                sub_22EC7F2A4(a1[1536], v51, 0, (uint64_t)v179);
                if (v181)
                  v54 = v181;
                else
                  v54 = v172[0];
                v55 = v183;
                if (v183 >= (unint64_t)HIDWORD(v183))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v55 = v183;
                }
                v182[v55] = v54;
                LODWORD(v183) = v183 + 1;
              }
              ++v49;
              v48 -= 8;
            }
            while (v48);
            v56 = v182;
            if ((_DWORD)v183)
            {
              memmove((void *)(v47 + 8 * *(unsigned int *)(v46 + 16)), v182, 8 * v183);
              v56 = v182;
            }
            v5 = v45;
LABEL_96:
            if (v56 != v184)
              free(v56);
          }
        }
        else if (v7)
        {
          if (v8 == 91)
          {
            v57 = *(unsigned int *)(v7 + 16);
            if ((_DWORD)v57)
            {
              v58 = 0;
              v59 = v7 + 24;
              v60 = 2 * v57;
              do
              {
                v61 = *(unsigned __int8 **)(v59 + 8 * (v58 & 0xFFFFFFFE));
                v62 = sub_22EFFA6B0(v61);
                if (*v62 == 161)
                {
                  v63 = (_DWORD *)*((_QWORD *)v62 + 2);
                  if (v63)
                  {
                    if ((v63[7] & 0x7Fu) - 60 <= 6)
                    {
                      sub_22EC7F2A4(a1[1536], (uint64_t)v63, 0, (uint64_t)v179);
                      v176 = 0;
                      if (v180
                        || (v64 = a1[1536],
                            v182 = v63,
                            v183 = (uint64_t)&v176,
                            (sub_22EC829E0(v64, (uint64_t)v63, 1u, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF74B0, (uint64_t)&v182) & 1) != 0))
                      {
                        sub_22EFF605C((uint64_t)v61);
                        sub_22E8FCA40(a1, v65, 0x103Du, 0, (uint64_t)&v182);
                        sub_22F0D4E74((uint64_t)v61);
                        v172[0] = v66;
                        sub_22E8906A0((uint64_t)&v182, (uint64_t *)v172);
                        sub_22E903BEC((unsigned int *)&v182);
                        if (v180)
                        {
                          sub_22EC82B14(a1, a1[1536], (uint64_t)v63, (uint64_t)v179, 0);
                        }
                        else
                        {
                          sub_22EFF605C((uint64_t)v176);
                          sub_22E8FCA40(a1, v67, 0x180Cu, 0, (uint64_t)&v182);
                          sub_22F0D4E74((uint64_t)v176);
                          v172[0] = v68;
                          sub_22E8906A0((uint64_t)&v182, (uint64_t *)v172);
                          sub_22E903BEC((unsigned int *)&v182);
                        }
                      }
                    }
                  }
                }
                v58 += 2;
              }
              while (v60 != v58);
            }
          }
        }
        v5 += 2;
      }
      while (v5 != v168);
    }
  }
  if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
    goto LABEL_190;
  v69 = a1[1536];
  v70 = (uint64_t *)*((_QWORD *)a2 + 3);
  v170 = v69;
  if (!v70)
  {
    v73 = 0;
    goto LABEL_115;
  }
  v72 = *(_DWORD *)v70;
  v70 += 2;
  v71 = v72;
  v73 = &v70[v72];
  if (!v72)
  {
LABEL_115:
    v176 = 0;
    v177 = 0;
    v76 = v70;
    v178[0] = 0;
    goto LABEL_116;
  }
  v74 = 8 * v71;
  v75 = v74;
  v76 = v70;
  while (*(_DWORD *)(*v76 + 8) != 6)
  {
    ++v76;
    v75 -= 8;
    if (!v75)
    {
      v76 = v73;
      break;
    }
  }
  v176 = 0;
  v177 = 0;
  v178[0] = 0;
  while (1)
  {
    v77 = *(_DWORD *)(*v70 + 8) - 29;
    v78 = v77 > 0x30;
    v79 = (1 << v77) & 0x100240000C101;
    if (!v78 && v79 != 0)
      break;
    ++v70;
    v74 -= 8;
    if (!v74)
      goto LABEL_145;
  }
LABEL_116:
  if (v70 != v73)
  {
    v81 = *v70;
    v82 = *(_DWORD *)(*v70 + 8);
LABEL_118:
    if (v82 > 62)
    {
      if (v82 == 77)
      {
LABEL_127:
        v83 = v81 + 96;
        goto LABEL_130;
      }
      if (v82 != 66)
      {
        if (v82 == 63)
        {
          v83 = v81 + 24;
          goto LABEL_130;
        }
        goto LABEL_127;
      }
      v83 = v81 + 104;
    }
    else
    {
      if (v82 != 29)
      {
        if (v82 == 43 || v82 == 44)
        {
          v83 = v81 + 64;
          goto LABEL_130;
        }
        goto LABEL_127;
      }
      v83 = v81 + 40;
    }
LABEL_130:
    v84 = *(unsigned int *)(v81 + 16);
    if ((_DWORD)v84)
    {
      v85 = 0;
      v86 = 8 * v84;
      v87 = v83 + 8 * v84;
      do
      {
        if (*(_QWORD *)(v87 + v85))
        {
          v88 = *(unsigned __int8 **)(v83 + v85);
          v175 = 0;
          v172[0] = 0;
          v174 = v88;
          v89 = (unsigned __int8 *)sub_22EC82530(a1, &v174, &v175, (uint64_t *)v172, 1);
          if (v89)
            v89 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v89 + 32))(v89);
          v173 = v89;
          v171 = *(_QWORD *)(*(_QWORD *)(v87 + v85) + 16);
          sub_22F340628((uint64_t)&v182, (uint64_t)&v176, (uint64_t *)&v173, &v171);
        }
        v85 += 8;
      }
      while (v86 != v85);
    }
    v90 = v70 + 1;
    v69 = v170;
    while (v90 != v73)
    {
      v91 = *v90++;
      v81 = v91;
      v82 = *(_DWORD *)(v91 + 8);
      if ((v82 - 29) <= 0x30 && ((1 << (v82 - 29)) & 0x100240000C101) != 0)
      {
        v70 = v90 - 1;
        goto LABEL_118;
      }
    }
  }
LABEL_145:
  if (v76 != v73)
  {
    v169 = (unsigned int *)(v69 + 21512);
    v93 = *v76;
LABEL_147:
    if (*(_DWORD *)(a1[9] + 72) >= 0x32u)
    {
      v94 = *v169;
      if ((_DWORD)v94)
      {
        v95 = *(_QWORD *)(v69 + 21504);
        v96 = v95 + 8 * v94;
        while (1)
        {
          v97 = *(unsigned int **)(*(_QWORD *)v95 + 40);
          v100 = *v97;
          v98 = v97 + 4;
          v99 = v100;
          if (v100)
            break;
LABEL_154:
          v95 += 8;
          if (v95 == v96)
            goto LABEL_155;
        }
        v101 = 8 * v99;
        while (*(_DWORD *)(*(_QWORD *)v98 + 8) != 25)
        {
          v98 += 2;
          v101 -= 8;
          if (!v101)
            goto LABEL_154;
        }
      }
      else
      {
LABEL_155:
        v102 = sub_22ECB1B04(v69);
        if (v102)
        {
          v103 = *(_DWORD *)(v102 + 960) - 56;
          v78 = v103 > 0x2A;
          v104 = (1 << v103) & 0x6000001CF91;
          if (!v78 && v104 != 0)
          {
            v106 = *(_QWORD *)(v93 + 24);
            if (v106)
            {
              v172[0] = (unsigned __int8 *)v69;
              if (sub_22ECB36A8((uint64_t)v172, v106))
              {
                sub_22EFF605C(v106);
                sub_22E8FCA40(a1, v107, 0x103Cu, 0, (uint64_t)&v182);
                sub_22F0D4E74(v106);
                v174 = v108;
                sub_22E8906A0((uint64_t)&v182, (uint64_t *)&v174);
                sub_22E903BEC((unsigned int *)&v182);
              }
            }
          }
        }
      }
    }
    v109 = sub_22EC83E18((uint64_t)a1, v69, *(unsigned __int8 **)(v93 + 24));
    if (v109 == 8)
    {
      v110 = sub_22ECB1B04(v69);
      if (v110)
      {
        v111 = *(_DWORD *)(v110 + 960) - 36;
        v78 = v111 > 0x3E;
        v112 = (1 << v111) & 0x6000035CF9100C03;
        if (!v78 && v112 != 0)
        {
          sub_22EFF605C(*(_QWORD *)(v93 + 24));
          sub_22E8FCA40(a1, v114, 0x1AC1u, 0, (uint64_t)&v182);
          sub_22ECB1B04(v69);
          v172[0] = (unsigned __int8 *)llvm::omp::getOpenMPDirectiveName();
          v172[1] = v115;
          sub_22F2F2210((uint64_t)&v182, (uint64_t)v172);
          sub_22E903BEC((unsigned int *)&v182);
        }
      }
    }
    v116 = *(unsigned int *)(v93 + 16);
    if ((_DWORD)v116)
    {
      v117 = (unsigned __int8 **)(v93 + 40);
      v118 = 8 * v116;
      do
      {
        v119 = *v117;
        LODWORD(v171) = 0;
        v172[0] = 0;
        v174 = v119;
        v120 = sub_22EC82530(a1, &v174, (int *)&v171, (uint64_t *)v172, 0);
        v121.n128_f64[0] = sub_22EC7F2A4(v69, v120, 0, (uint64_t)&v182);
        if ((HIDWORD(v182) - 29) > 0x30 || ((1 << (BYTE4(v182) - 29)) & 0x100240000C101) == 0)
        {
          sub_22EFF605C((uint64_t)v119);
          sub_22E8FCA40(a1, v123, 0x107Cu, 0, (uint64_t)v179);
          sub_22E903BEC(v179);
        }
        else
        {
          if (v120)
            v124 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v120 + 32))(v120, v121);
          else
            v124 = 0;
          v173 = v124;
          v125 = sub_22F24C2B0((uint64_t)&v176, (uint64_t *)&v173)[1];
          if (!sub_22EC83F80(a1, v69, (uint64_t)v119, v125, v109, *(unsigned __int8 **)(v93 + 24)))
          {
            v126 = *(_DWORD **)(v93 + 24);
            sub_22F0D4E74((uint64_t)v119);
            v127 = v126;
            v69 = v170;
            sub_22EC84384((uint64_t)a1, v125, v109, v127, 0, v128);
          }
        }
        ++v117;
        v118 -= 8;
      }
      while (v118);
    }
    v129 = v76 + 1;
    while (v129 != v73)
    {
      v130 = *v129++;
      v93 = v130;
      if (*(_DWORD *)(v130 + 8) == 6)
      {
        v76 = v129 - 1;
        goto LABEL_147;
      }
    }
  }
  llvm::deallocate_buffer(v176, (void *)(16 * v178[0]));
LABEL_190:
  v131 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (!v131)
    goto LABEL_232;
  v134 = *v131;
  v133 = v131 + 4;
  v132 = v134;
  if (!v134)
    goto LABEL_232;
  v135 = 0;
  v136 = 0;
  v137 = a1[1536];
  v138 = v133;
  v139 = &v133[2 * v132];
  do
  {
    while (1)
    {
      v140 = *(_QWORD *)v138;
      if (*(_DWORD *)(*(_QWORD *)v138 + 8) != 66)
        goto LABEL_196;
      v141 = *(_DWORD *)(v140 + 48);
      if (v141 == 2)
        break;
      if (v141 != 1)
        goto LABEL_196;
      v136 = *(_DWORD *)(v140 + 52);
      v138 += 2;
      v135 = 1;
      if (v138 == v139)
        goto LABEL_209;
    }
    v142 = sub_22ECB1B04(v137);
    if (v142)
      v143 = *(_DWORD *)(v142 + 960);
    else
      v143 = 89;
    if (!sub_22F421A78(v143) && !sub_22F421A30(v143) || sub_22F421AC0(v143))
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v140 + 52), 0x10DBu, 0, (uint64_t)&v182);
      sub_22E903BEC((unsigned int *)&v182);
    }
LABEL_196:
    v138 += 2;
  }
  while (v138 != v139);
  if ((v135 & 1) == 0)
    goto LABEL_232;
LABEL_209:
  v144 = v136;
  do
  {
    v145 = *(_DWORD **)v133;
    if (*(_DWORD *)(*(_QWORD *)v133 + 8) == 66)
    {
      v146 = v145[12];
      if (v146 == 1)
      {
        v147 = v145[4];
        if ((_DWORD)v147)
        {
          v148 = (unsigned __int8 **)(v145 + 26);
          v149 = 8 * v147;
          do
          {
            v150 = *v148;
            v175 = 0;
            v173 = v150;
            v174 = 0;
            v151 = sub_22EC82530(a1, &v173, &v175, (uint64_t *)&v174, 1);
            if (v151)
            {
              v152 = sub_22EC81010(v151);
              v153 = sub_22ECB1B04(v137);
              if (!v153)
                goto LABEL_221;
              v156 = v153;
              v157 = v152 ? (*(uint64_t (**)(unint64_t))(*(_QWORD *)v152 + 32))(v152) : 0;
              v172[0] = 0;
              if (sub_22F2588D8(*(_QWORD *)(v156 + 1256), *(_DWORD *)(v156 + 1272), v157, v172))
              {
                v158 = v172[0];
                v159 = *(_QWORD *)(v156 + 1256);
                v160 = *(unsigned int *)(v156 + 1272);
              }
              else
              {
                v159 = *(_QWORD *)(v156 + 1256);
                v160 = *(unsigned int *)(v156 + 1272);
                v158 = (unsigned __int8 *)(v159 + 8 * v160);
              }
              if (v158 == (unsigned __int8 *)(v159 + 8 * v160))
              {
LABEL_221:
                sub_22EFF605C((uint64_t)v150);
                sub_22E8FCA40(a1, v154, 0x10D9u, 0, (uint64_t)v172);
                sub_22F0D4E74((uint64_t)v150);
                v171 = v155;
                sub_22E8906A0((uint64_t)v172, &v171);
                sub_22E903BEC((unsigned int *)v172);
              }
            }
            ++v148;
            v149 -= 8;
          }
          while (v149);
        }
      }
      else
      {
        if (v146 != 3)
          v145 += 13;
        sub_22E8FCA40(a1, *v145, 0x108Cu, 0, (uint64_t)v179);
        sub_22E903BEC(v179);
        sub_22E8FCA40(a1, v144, 0x1714u, 0, (uint64_t)&v176);
        sub_22E903BEC((unsigned int *)&v176);
      }
    }
    v133 += 2;
  }
  while (v133 != v139);
LABEL_232:
  v161 = *(_QWORD *)(a1[1536] + 336) + 5272 * *(unsigned int *)(a1[1536] + 344) - 5272;
  v162 = *(_DWORD *)(*(_QWORD *)(a1[1536] + 336) + 5272 * *(unsigned int *)(a1[1536] + 344) - 5264) - 1;
  *(_DWORD *)(v161 + 8) = v162;
  sub_22ECB1720(*(_QWORD *)v161 + 1312 * v162);
  sub_22EB48DCC((uint64_t)a1);
  return sub_22EB48E64(a1);
}

uint64_t sub_22EC822F4(_QWORD *a1, unsigned int a2, unint64_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  char v29;

  v12 = a1[27];
  v13 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), a4, a5);
  v14 = sub_22EF579A8(a1[11], a3, a2);
  v15 = sub_22EFBB670(a1[11], v12, a2, a2, v13, a3, (uint64_t)v14, 0);
  if (a6)
  {
    v16 = *(uint64_t **)a6;
    v17 = *(_QWORD *)a6 + 8 * *(unsigned int *)(a6 + 8);
    while (1)
    {
      v18 = v16;
      if ((unint64_t)v16 >= v17)
      {
        v19 = (uint64_t *)v17;
        if ((uint64_t *)v17 == v16)
          break;
        while (*(_WORD *)(*v19 + 32) != 98)
        {
          if (++v19 == v16)
            goto LABEL_16;
        }
        v18 = v16;
      }
      else
      {
        while (*(_WORD *)(*v18 + 32) != 98)
        {
          if (++v18 == (uint64_t *)v17)
            goto LABEL_16;
        }
        v19 = (uint64_t *)v17;
      }
      if (v18 == v19)
        break;
      do
      {
        v21 = *v16++;
        v20 = v21;
      }
      while (*(_WORD *)(v21 + 32) != 98);
      sub_22EFCA95C(v15, v20);
    }
  }
LABEL_16:
  *(_DWORD *)(v15 + 28) |= 0x200u;
  if (a7)
  {
    v23 = a1[11];
    v25 = 0uLL;
    v27 = 0;
    v26 = 0;
    v29 = 120;
    v28 = 0;
    v24 = sub_22F396838(v23, a7, &v25);
    sub_22EFCA95C(v15, v24);
  }
  return v15;
}

uint64_t sub_22EC8247C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;

  *(_DWORD *)(a2 + 28) |= 0x800u;
  sub_22EFC9100(a2, *(_QWORD *)(a1 + 88));
  v10 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = a4;
  sub_22EFC6D6C((uint64_t)&v15, v13);
  v11 = sub_22E3CD3D4(v10 + 2032, 32, 3);
  return sub_22EFF6AE4(v11, v10, 0, 0, 0, a2, a5, (uint64_t)&v13, 0, 0, a3, 1, 0, 0);
}

unint64_t sub_22EC82530(_QWORD *a1, unsigned __int8 **a2, int *a3, uint64_t *a4, int a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  unsigned __int8 **v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 **v49;
  unsigned __int8 *v50;
  unsigned int v51[4];
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  char v57;
  uint64_t v58;

  v5 = *a2;
  if ((*(_DWORD *)*a2 & 0x1A000) != 0)
    return 0;
  do
  {
    v12 = v5;
    v13 = *v5;
    if (v13 > 213)
    {
      if (v13 == 233)
      {
        if ((*(_DWORD *)v12 & 0x7C0000) != 0x300000)
          break;
        v15 = (unsigned __int8 **)(v12 + 16);
      }
      else
      {
        if (v13 != 214)
          break;
        v15 = (unsigned __int8 **)(v12 + 24);
      }
      goto LABEL_17;
    }
    if (v13 == 155)
    {
      if ((**((_DWORD **)v12 + 2) & 0x18000) != 0)
        break;
      if (v12[48])
        v15 = (unsigned __int8 **)(v12 + 24);
      else
        v15 = (unsigned __int8 **)(v12 + 32);
      goto LABEL_17;
    }
    if (v13 != 176)
      break;
    v14 = *((unsigned int *)v12 + 5);
    if ((_DWORD)v14 == -1)
      break;
    v15 = (unsigned __int8 **)&v12[8 * v14 + 40];
LABEL_17:
    v5 = *v15;
  }
  while (v5 != v12);
  *a2 = v12;
  if (!a5)
    goto LABEL_39;
  v16 = *v12;
  if (v16 != 107)
  {
    if (v16 == 191)
    {
      do
      {
        v12 = sub_22EFFA6B0(*((unsigned __int8 **)v12 + 2));
        v17 = *v12;
      }
      while (v17 == 191);
      v18 = 1;
      while (2)
      {
        if (v17 != 107)
          goto LABEL_52;
        v19 = (unsigned __int8 **)(v12 + 24);
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v21 = *(_DWORD *)(v20 + 16);
        if (v20)
          v22 = v21 == 11;
        else
          v22 = 0;
        if (v22)
        {
          if (((*(_DWORD *)(v20 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_35;
        }
        else if (v20 && v21 == 44)
        {
          v23 = sub_22F114198(*(_QWORD *)(v20 + 24));
          if ((*(_BYTE *)(v23 + 74) & 1) == 0 && *(_QWORD *)(v23 + 128) <= 7uLL
            || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v20 + 24)) + 72) & 0x8000000000) != 0)
          {
            goto LABEL_36;
          }
LABEL_35:
          v19 = (unsigned __int8 **)(v12 + 16);
        }
        else if (v21 == 9)
        {
          goto LABEL_35;
        }
LABEL_36:
        v12 = sub_22EFFA6B0(*v19);
        v17 = *v12;
        continue;
      }
    }
LABEL_39:
    v18 = -1;
    v24 = 1;
    goto LABEL_53;
  }
  while (2)
  {
    v25 = (unsigned __int8 **)(v12 + 24);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v27 = *(_DWORD *)(v26 + 16);
    if (v26)
      v28 = v27 == 11;
    else
      v28 = 0;
    if (v28)
    {
      if (((*(_DWORD *)(v26 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_49;
    }
    else if (v26 && v27 == 44)
    {
      v29 = sub_22F114198(*(_QWORD *)(v26 + 24));
      if (((*(_BYTE *)(v29 + 74) & 1) != 0 || *(_QWORD *)(v29 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v26 + 24)) + 72) & 0x8000000000) == 0)
      {
LABEL_49:
        v25 = (unsigned __int8 **)(v12 + 16);
      }
    }
    else if (v27 == 9)
    {
      goto LABEL_49;
    }
    v12 = sub_22EFFA6B0(*v25);
    if (*v12 == 107)
      continue;
    break;
  }
  v18 = 0;
LABEL_52:
  v24 = 0;
  *a2 = v12;
LABEL_53:
  sub_22EFF605C((uint64_t)v12);
  *a3 = v30;
  sub_22F0D4E74((uint64_t)v12);
  *a4 = v31;
  v32 = sub_22EFFA6B0(*a2);
  v33 = v32;
  *a2 = v32;
  if (!v32)
  {
    v35 = 0;
LABEL_66:
    v37 = 1;
    goto LABEL_67;
  }
  v34 = *v32;
  if (v34 == 188)
    v35 = v32;
  else
    v35 = 0;
  if (v34 != 161)
  {
    v33 = 0;
    goto LABEL_66;
  }
  v36 = *((_QWORD *)v32 + 2);
  if ((*(_DWORD *)(v36 + 28) & 0x7Fu) - 60 < 7)
    return sub_22EC81010(v36);
  v37 = 0;
LABEL_67:
  v38 = sub_22EBBB18C((uint64_t)a1);
  if (!v35
    || v38 < 0x10
    || *sub_22EFFA6B0(*((unsigned __int8 **)v35 + 2)) != 133
    || (v36 = *((_QWORD *)v35 + 3), (*(_DWORD *)(v36 + 28) & 0x7Fu) - 49 >= 3))
  {
    if ((v24 & 1) != 0)
    {
      if (a5)
        v39 = 4225;
      else
        v39 = 4224;
      sub_22E8FCA40(a1, *a3, v39, 0, (uint64_t)v51);
      LODWORD(v58) = sub_22EBBB18C((uint64_t)a1) > 0xF;
      v40 = (unsigned int *)sub_22E8900C4((uint64_t)v51, (int *)&v58);
      goto LABEL_86;
    }
    sub_22E8FCA40(a1, *a3, 0x1077u, 0, (uint64_t)v51);
    if (v55)
    {
      v41 = v53;
      if (!v53)
      {
        v41 = (unsigned __int8 *)sub_22E3B8AAC(v54);
        v53 = v41;
      }
      v41[*v41 + 1] = 2;
      v42 = v53;
    }
    else
    {
      if (!v57)
        goto LABEL_85;
      v44 = v52;
      v45 = (uint64_t *)(*(_QWORD *)v51 + 12784);
      if (v52)
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
      v58 = v44;
      v46 = sub_22F2F1D6C(v45, &v58);
      v47 = v46[1] + 32 * v56;
      v50 = *(unsigned __int8 **)(v47 + 8);
      v49 = (unsigned __int8 **)(v47 + 8);
      v48 = v50;
      if (!v50)
      {
        v48 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v49[1]);
        *v49 = v48;
      }
      v48[*v48 + 1] = 2;
      v42 = *v49;
    }
    v43 = *v42;
    *v42 = v43 + 1;
    *(_QWORD *)&v42[8 * v43 + 16] = v18;
LABEL_85:
    v40 = v51;
LABEL_86:
    sub_22E8906A0((uint64_t)v40, a4);
    sub_22E903BEC(v51);
    return 0;
  }
  if ((v37 & 1) == 0)
    v36 = *((_QWORD *)v33 + 2);
  return sub_22EC81010(v36);
}

uint64_t sub_22EC829E0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD), uint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v5 = *(_DWORD *)(a1 + 344);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 336) + 5272 * v5;
  if (*(_QWORD *)(v6 - 8) != *(_QWORD *)(a1 + 328))
    return 0;
  v7 = *(_DWORD *)(v6 - 5264);
  v8 = *(unsigned int *)(a1 + 21496);
  if (v7 <= v8)
    return 0;
  v9 = *(_QWORD *)(v6 - 5272);
  v10 = v9 + 1312 * v7 - 1312 * v8;
  if (v10 == v9)
    return 0;
  v11 = v10 - 1312;
  v12 = a3 ? v11 : v9;
  v13 = v11 + 1312 * a3;
  if (v13 == v12)
    return 0;
  while (1)
  {
    v13 -= 1312;
    v17 = sub_22ECB1904(v13 + 704, a2);
    if (*(_QWORD *)(v13 + 704) + 1184 * *(unsigned int *)(v13 + 720) != v17)
    {
      v18 = v17;
      v19 = *(_DWORD *)(v17 + 16);
      if (v19)
        break;
    }
LABEL_14:
    result = 0;
    if (v13 == v12)
      return result;
  }
  v20 = *(_QWORD *)(v17 + 8);
  v21 = v20 + 144 * v19;
  while ((a4(a5, *(_QWORD *)v20, *(unsigned int *)(v20 + 8), *(unsigned int *)(v18 + 1176)) & 1) == 0)
  {
    v20 += 144;
    if (v20 == v21)
      goto LABEL_14;
  }
  return 1;
}

unint64_t sub_22EC82B14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _DWORD *v16;
  char v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t result;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t OpenMPDirectiveName;
  uint64_t v54;
  unsigned int v55[4];
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  char v61;

  v7 = *(_QWORD *)(a4 + 16);
  if (!v7)
  {
    v52 = 0;
    v10 = *(_DWORD *)(a3 + 24);
    if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 >= 7)
      v11 = 0;
    else
      v11 = a3;
    if (a5)
    {
      v38 = *(_DWORD *)(a4 + 4);
      v39 = 3;
      if (v38 == 43)
        v39 = 4;
      if (v38 == 63)
        v22 = 2;
      else
        v22 = v39;
      goto LABEL_61;
    }
    v12 = *(_DWORD *)a4 - 36;
    v13 = v12 > 0x29;
    v14 = (1 << v12) & 0x34000000C03;
    if (v13 || v14 == 0)
    {
      v16 = (_DWORD *)(a4 + 4);
      if (v11)
        goto LABEL_12;
    }
    else
    {
      v16 = (_DWORD *)(a4 + 4);
      if (*(_DWORD *)(a4 + 4) == 29)
      {
        v10 = *(_DWORD *)(a4 + 32);
        v22 = 7;
        goto LABEL_61;
      }
      if (v11)
      {
LABEL_12:
        v17 = *(_BYTE *)(v11 + 96);
        v18 = v17 & 7;
        if (v18 == 2 || ((v19 = v17 & 0x18, !v18) ? (v20 = v19 == 16) : (v20 = 0), v20))
        {
          v21 = *(_DWORD *)(v11 + 28) & 0x7F;
          v22 = 1;
          if (v21 == 64 || v21 == 62)
            goto LABEL_61;
          v23 = *(_QWORD *)(v11 + 16);
          v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
          v25 = v23 & 0xFFFFFFFFFFFFFFF8;
          if ((v23 & 4) != 0)
            v25 = v24[1];
          v26 = *(_WORD *)(sub_22EFCBB30(v25) + 8) & 0x7F;
          if (v26 != 16 && v26 != 83)
          {
            if ((v23 & 4) != 0)
              v24 = (_QWORD *)*v24;
            if (((_WORD)v24[1] & 0x7Eu) - 34 > 3)
            {
              v22 = 1;
              goto LABEL_61;
            }
          }
        }
        v27 = *(_DWORD *)(v11 + 28) & 0x7F;
        if (v27 != 64)
        {
          v30 = *(_QWORD *)(v11 + 16);
          v31 = (unint64_t *)(v30 & 0xFFFFFFFFFFFFFFF8);
          v32 = v30 & 0xFFFFFFFFFFFFFFF8;
          if ((v30 & 4) != 0)
            v32 = *v31;
          if ((*(_WORD *)(v32 + 8) & 0x7Eu) - 34 < 4)
          {
            v22 = 0;
            goto LABEL_61;
          }
          if (v27 != 62)
          {
            v33 = v30 & 0xFFFFFFFFFFFFFFF8;
            if ((v30 & 4) != 0)
              v33 = v31[1];
            v34 = *(_WORD *)(sub_22EFCBB30(v33) + 8) & 0x7F;
            v22 = 6;
            if (v34 == 16 || v34 == 83)
              goto LABEL_61;
            if ((v30 & 4) != 0)
              v31 = (unint64_t *)*v31;
            if ((v31[1] & 0x7E) - 34 < 4)
            {
              v22 = 6;
              goto LABEL_61;
            }
          }
        }
      }
    }
    result = sub_22F10AFE4(*(_QWORD *)(a3 + 48), a1[11]);
    if (v11 && (result & 1) == 0)
    {
      result = sub_22E3CEC2C(v11);
      if ((_DWORD)result && *v16 == 63)
      {
        v52 = 1;
        v22 = 8;
        goto LABEL_61;
      }
      goto LABEL_30;
    }
    if (!(_DWORD)result)
    {
LABEL_30:
      v29 = *(_DWORD *)(a4 + 32);
      if (!v29)
        return result;
      sub_22E8FCA40(a1, v29, 0x1703u, 0, (uint64_t)v55);
      goto LABEL_47;
    }
    v22 = 5;
LABEL_61:
    sub_22E8FCA40(a1, v10, 0x170Fu, 0, (uint64_t)v55);
    if (v59)
    {
      v48 = v57;
      if (!v57)
      {
        v48 = (unsigned __int8 *)sub_22E3B8AAC(v58);
        v57 = v48;
      }
      v48[*v48 + 1] = 2;
      v47 = v57;
    }
    else
    {
      if (!v61)
      {
LABEL_72:
        v50 = sub_22E894E38((uint64_t)v55, &v52);
        sub_22ECB1B04(a2);
        OpenMPDirectiveName = llvm::omp::getOpenMPDirectiveName();
        v54 = v51;
        v37 = (unsigned int *)v50;
        goto LABEL_73;
      }
      v40 = v56;
      v41 = (uint64_t *)(*(_QWORD *)v55 + 12784);
      if (v56)
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
      OpenMPDirectiveName = v40;
      v42 = sub_22F2F1D6C(v41, &OpenMPDirectiveName);
      v43 = v42[1] + 32 * v60;
      v46 = *(unsigned __int8 **)(v43 + 8);
      v45 = (unsigned __int8 **)(v43 + 8);
      v44 = v46;
      if (!v46)
      {
        v44 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v45[1]);
        *v45 = v44;
      }
      v44[*v44 + 1] = 2;
      v47 = *v45;
    }
    v49 = *v47;
    *v47 = v49 + 1;
    *(_QWORD *)&v47[8 * v49 + 16] = v22;
    goto LABEL_72;
  }
  sub_22EFF605C(v7);
  sub_22E8FCA40(a1, v35, 0x1701u, 0, (uint64_t)v55);
LABEL_47:
  OpenMPDirectiveName = llvm::omp::getOpenMPClauseName();
  v54 = v36;
  v37 = v55;
LABEL_73:
  sub_22F2F2210((uint64_t)v37, (uint64_t)&OpenMPDirectiveName);
  return (unint64_t)sub_22E903BEC(v55);
}

uint64_t sub_22EC82EF4(_QWORD *a1, uint64_t *a2, uint64_t a3, __int128 *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  void ***v62;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _BYTE v67[96];
  uint64_t v68;
  void **v69;
  unint64_t v70;
  int v71[20];
  uint64_t (**v72)();
  int v73;
  char v74;
  uint64_t v75;
  _BYTE v76[11];
  _QWORD *v77;
  unint64_t v78;
  uint64_t OpenMPDirectiveName;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _BYTE v87[64];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  int v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v84 = 0;
  v85 = v87;
  v86 = 0x800000000;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = a1;
  v92 = *a4;
  v10 = *((_QWORD *)a4 + 2);
  v94 = 0;
  v95 = 0;
  v93 = v10;
  v96 = 0;
  v97 = 257;
  v98 = 0;
  sub_22EC56024((uint64_t)&v84);
  v11 = 1;
  sub_22EC64BE8((uint64_t)a1, (uint64_t)&v84, (uint64_t)a2, a3, 1, 0);
  if ((_DWORD)v84 != 5)
  {
    v78 = 0;
    if ((_DWORD)v84 == 2)
    {
      v12 = (_DWORD *)(*v85 & 0xFFFFFFFFFFFFFFFCLL);
      v13 = v12[7] & 0x7F;
      if (v13 <= 0x2F && ((1 << v13) & 0xC00000060000) != 0)
      {
        v12 = (_DWORD *)sub_22EFBAEA4((uint64_t)v12);
        v13 = v12[7] & 0x7F;
      }
      if (v13 - 60 >= 7)
        v15 = 0;
      else
        v15 = (unint64_t)v12;
      v78 = v15;
      if (!v15)
      {
        sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), 0x107Eu, 0, (uint64_t)&v69);
        OpenMPDirectiveName = *(_QWORD *)a4;
        sub_22E894538((uint64_t)&v69, &OpenMPDirectiveName);
        sub_22E903BEC((unsigned int *)&v69);
        v16 = *v85 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(v16 + 28) & 0x7Fu) <= 0x2F
          && ((1 << (*(_DWORD *)(v16 + 28) & 0x7F)) & 0xC00000060000) != 0)
        {
          v16 = sub_22EFBAEA4(v16);
        }
        sub_22E8FCA40(a1, *(_DWORD *)(v16 + 24), 0x64u, 0, (uint64_t)v67);
        v17 = (unsigned int *)v67;
        goto LABEL_101;
      }
    }
    else
    {
      v74 = 1;
      v73 = 16843009;
      memset(v76, 0, sizeof(v76));
      v75 = 0;
      v72 = &off_24FAB8D60;
      v77 = a1;
      sub_22EC6AB20((uint64_t)a1, (uint64_t *)a4, 0, a2, 0, (uint64_t)&v72, 1, 0, (uint64_t)&OpenMPDirectiveName, 0, 0, 1u);
      v18 = OpenMPDirectiveName;
      if (OpenMPDirectiveName)
      {
        if ((_DWORD)v86)
          v45 = 4223;
        else
          v45 = 5050;
        v46 = a1[11] + 2128;
        v69 = 0;
        v70 = v46;
        v71[0] = v45;
        v47 = *(_QWORD *)a4;
        v69 = (void **)sub_22E3B8AAC(v46);
        *((_BYTE *)v69 + *(unsigned __int8 *)v69 + 1) = 10;
        v48 = v69;
        v49 = *(unsigned __int8 *)v69;
        *(_BYTE *)v69 = v49 + 1;
        v48[v49 + 2] = (void *)v47;
        sub_22EC6BEF8((uint64_t)a1, (uint64_t)&OpenMPDirectiveName, (uint64_t)&v69, 1);
        if (v69 && v70)
          sub_22E3BB10C(v70, (unint64_t)v69);
        v50 = sub_22F2E6D78((uint64_t)&OpenMPDirectiveName);
        if (v50)
        {
          if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 60 >= 7)
            v51 = 0;
          else
            v51 = v50;
        }
        else
        {
          v51 = 0;
        }
        v78 = v51;
      }
      else
      {
        if ((_DWORD)v86)
          v19 = 4222;
        else
          v19 = 5049;
        sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), v19, 0, (uint64_t)&v69);
        v68 = *(_QWORD *)a4;
        sub_22E894538((uint64_t)&v69, &v68);
        sub_22E903BEC((unsigned int *)&v69);
      }
      v69 = (void **)&v83;
      sub_22E8D19C8(&v69);
      if (v81 != &v82)
        free(v81);
      if (!v18)
        goto LABEL_102;
      v12 = (_DWORD *)v78;
    }
    BYTE1(v97) = 0;
    if (a5 == 87)
    {
      if (sub_22E3CB5E0((uint64_t)v12))
      {
        sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), 0x1087u, 0, (uint64_t)&v69);
        OpenMPDirectiveName = llvm::omp::getOpenMPDirectiveName();
        v80 = v52;
        v53 = sub_22F2F2210((uint64_t)&v69, (uint64_t)&OpenMPDirectiveName);
        v54 = *(_BYTE *)(v78 + 96);
        if ((v54 & 7) == 2 || (*(_BYTE *)(v78 + 96) & 7) == 0 && (v54 & 0x18) == 0x10)
        {
          v55 = 0;
          v56 = *(_DWORD *)(v78 + 28) & 0x7F;
          if (v56 != 64 && v56 != 62)
          {
            v57 = *(_QWORD *)(v78 + 16);
            v58 = (_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8);
            v59 = v57 & 0xFFFFFFFFFFFFFFF8;
            if ((v57 & 4) != 0)
              v59 = v58[1];
            v60 = *(_WORD *)(sub_22EFCBB30(v59) + 8) & 0x7F;
            v55 = 1;
            if (v60 != 16 && v60 != 83)
            {
              if ((v57 & 4) != 0)
                v58 = (_QWORD *)*v58;
              v55 = ((_WORD)v58[1] & 0x7Eu) - 34 < 4;
            }
          }
        }
        else
        {
          v55 = 1;
        }
        LOBYTE(v72) = v55;
        sub_22E894E38(v53, (unsigned __int8 *)&v72);
        goto LABEL_96;
      }
      v12 = (_DWORD *)v78;
    }
    v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12);
    v21 = (_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 16);
    v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 4) != 0)
      v24 = *(_QWORD *)v23;
    if ((*(_WORD *)(v24 + 8) & 0x7F) != 0x53)
      goto LABEL_34;
    v25 = a1[28];
    if (!v25)
      v25 = a1[27];
    if ((*(_WORD *)(v25 + 8) & 0x7F) == 0x53)
    {
LABEL_34:
      v26 = *(_QWORD *)(v20 + 16) & 4;
      if ((*(_DWORD *)(v20 + 28) & 0x7F) == 0x40)
      {
LABEL_43:
        if (!v26)
        {
LABEL_46:
          v30 = 1;
          v31 = v23;
LABEL_47:
          if ((*(_WORD *)(v31 + 8) & 0x7F) != 0x10)
            goto LABEL_61;
          v32 = a1[28];
          v33 = v32;
          if (!v32)
            v33 = a1[27];
          v34 = *(_WORD *)(v33 + 8) & 0x7F;
          if (v34 == 83 || v34 == 16)
          {
            if (!v32)
              v32 = a1[27];
            if ((v30 & 1) == 0)
              v23 = *(_QWORD *)v23;
            if ((sub_22EFCBE78(v32, v23) & 1) != 0)
            {
LABEL_61:
              v35 = sub_22E3CEC2C((uint64_t)v21);
              if (!a2 || !v35)
                goto LABEL_126;
              v36 = a1[28];
              if (!v36)
                v36 = a1[27];
              if ((sub_22E8CE620((uint64_t)(a1 + 415), v21, v36, a2, 0) & 1) != 0)
              {
LABEL_126:
                if (a5 != 87
                  || !sub_22EFC9084(v78, 1)
                  || (sub_22EC7F2A4(a1[1536], v78, 0, (uint64_t)&v69), (HIDWORD(v69) & 0xFFFFFFBF) == 0xF))
                {
                  v37 = *(_QWORD *)(v78 + 48);
                  v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
                  if (!v38 || (v39 = *(_DWORD *)(v38 + 16), (v39 & 0xFE) != 0x28))
                  {
                    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
                      || (v38 = sub_22F10CF48(v38)) == 0)
                    {
LABEL_68:
                      v40 = a1[11];
                      v41 = v78;
                      v42 = *((_DWORD *)a4 + 2);
                      v69 = *(void ***)(v78 + 40);
                      LODWORD(v70) = v42;
                      sub_22EFC6D6C((uint64_t)v71, (uint64_t)v69);
                      v11 = sub_22E3CD3D4(v40 + 2032, 32, 3);
                      sub_22EFF6AE4(v11, v40, 0, 0, 0, v41, 0, (uint64_t)&v69, 0, 0, v37, 1, 0, 0);
                      goto LABEL_103;
                    }
                    v39 = *(_DWORD *)(v38 + 16);
                  }
                  if ((v39 & 0x100000) != 0)
                  {
                    do
                    {
                      v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0);
                      if (v38)
                      {
                        v65 = *(_DWORD *)(v38 + 16);
                        if ((v65 & 0xFE) == 0x28)
                          continue;
                      }
                      v38 = sub_22F10CF48(v38);
                      v65 = *(_DWORD *)(v38 + 16);
                    }
                    while ((v65 & 0x100000) != 0);
                  }
                  v37 = *(_QWORD *)(v38 + 32);
                  goto LABEL_68;
                }
                sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), 0x1109u, 0, (uint64_t)&v69);
                OpenMPDirectiveName = llvm::omp::getOpenMPDirectiveName();
                v80 = v64;
                v62 = (void ***)sub_22F2F2210((uint64_t)&v69, (uint64_t)&OpenMPDirectiveName);
LABEL_100:
                sub_22E890024((uint64_t)v62, (uint64_t *)&v78);
                v17 = (unsigned int *)&v69;
LABEL_101:
                sub_22E903BEC(v17);
LABEL_102:
                v11 = 1;
                goto LABEL_103;
              }
            }
          }
          goto LABEL_69;
        }
        v27 = (unint64_t *)v23;
LABEL_45:
        v30 = 0;
        v31 = *v27;
        v23 = (unint64_t)v27;
        goto LABEL_47;
      }
      if (v26)
      {
        v27 = (unint64_t *)v23;
        v23 = *(_QWORD *)v23;
        if ((*(_WORD *)(v23 + 8) & 0x7Eu) - 34 > 3)
          goto LABEL_45;
      }
      else if ((*(_WORD *)(v23 + 8) & 0x7Eu) - 34 >= 4)
      {
        goto LABEL_46;
      }
      v28 = a1[28];
      if (v28 || (v28 = a1[27]) != 0)
      {
        v29 = sub_22EFCC008(v23);
        if (v29 == sub_22EFCC008(v28))
        {
          v26 = v21[2] & 4;
          v23 = v21[2] & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_43;
        }
      }
    }
LABEL_69:
    sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), 0x1107u, 0, (uint64_t)&v69);
    OpenMPDirectiveName = llvm::omp::getOpenMPDirectiveName();
    v80 = v43;
    v44 = sub_22F2F2210((uint64_t)&v69, (uint64_t)&OpenMPDirectiveName);
    sub_22E890024(v44, (uint64_t *)&v78);
LABEL_96:
    sub_22E903BEC((unsigned int *)&v69);
    if (sub_22EFBBF74(v78, a1[11]))
      v61 = 5543;
    else
      v61 = 6001;
    sub_22E8FCA40(a1, *(_DWORD *)(v78 + 24), v61, 0, (uint64_t)&v69);
    v62 = &v69;
    goto LABEL_100;
  }
LABEL_103:
  if (BYTE1(v97))
  {
    if ((_DWORD)v84 == 5)
    {
      sub_22EC64D18(v91, (uint64_t)&v84);
    }
    else if (v89 && (*(_DWORD *)(v91[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v91, (uint64_t)&v84);
    }
  }
  if (v88)
  {
    v66 = sub_22EC6CBD0(v88);
    MEMORY[0x2348A0E9C](v66, 0x10E0C409F09D3C3);
  }
  if (v85 != (_QWORD *)v87)
    free(v85);
  return v11;
}

uint64_t sub_22EC83760(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *a2;
  if ((v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22ECF752C(a1, (uint64_t)a2);
      default:
        goto LABEL_5;
    }
  }
  if (v2 == 233)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        return sub_22ECF752C(a1, (uint64_t)a2);
      default:
LABEL_5:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X10 }
  return result;
}

BOOL sub_22EC83820()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD v11[10];

  if ((*(_DWORD *)(*(_QWORD *)(v0 + 16) + 28) & 0x7Fu) - 60 >= 7)
    v3 = 0;
  else
    v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v2 - 40) = v3;
  if (!v3)
    return 0;
  result = sub_22E3CB5E0(v3);
  if (result)
  {
    v5 = *v1;
    if ((*(_BYTE *)(v0 + 2) & 4) != 0)
    {
      v11[0] = *(_OWORD *)(v0 + 32);
      v9 = v5;
      v6 = sub_22F0AB0EC((unint64_t *)v11);
      v5 = v9;
    }
    else
    {
      v6 = *(_DWORD *)(v0 + 4);
    }
    sub_22E8FCA40(v5, v6, 0x10A8u, 0, (uint64_t)v11);
    sub_22F0D4E74(v0);
    v10 = v7;
    sub_22E8906A0((uint64_t)v11, &v10);
    sub_22E903BEC((unsigned int *)v11);
    sub_22E8FCA40(*v1, *(_DWORD *)(v3 + 24), 0x15A7u, 0, (uint64_t)v11);
    v8 = sub_22E890024((uint64_t)v11, (uint64_t *)(v2 - 40));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 40) + 16))(*(_QWORD *)(v2 - 40));
    sub_22E8906A0(v8, &v10);
    sub_22E903BEC((unsigned int *)v11);
    return 1;
  }
  return result;
}

uint64_t sub_22EC83920(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, char a7)
{
  _DWORD *v13;
  uint64_t result;
  int v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v22 = sub_22EC81010(a2);
  v13 = (_DWORD *)sub_22ECB1B04(a1);
  result = (uint64_t)sub_22ECB3308(v13, (uint64_t *)&v22);
  *(_DWORD *)(result + 4) = a6;
  v15 = *(_DWORD *)result;
  if (a4 == 43 && v15 == 29)
  {
    *(_QWORD *)(result + 8) |= 2uLL;
  }
  else
  {
    v16 = v15 == 43 || a4 == 43;
    *(_DWORD *)result = a4;
    if (v16)
      v17 = 2;
    else
      v17 = 0;
    *(_QWORD *)(result + 8) = v17 | a3 & 0xFFFFFFFFFFFFFFFDLL;
    *(_QWORD *)(result + 16) = a5;
    *(_BYTE *)(result + 24) = a7;
    if (a5)
    {
      v18 = (_DWORD *)sub_22ECB1B04(a1);
      v19 = *(_QWORD *)(a5 + 16);
      v21 = v19;
      v23 = 0;
      result = sub_22ECB1A54((uint64_t)v18, v19, &v23);
      v20 = v23;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_22ECB337C(v18, &v21, v23);
        v20 = (_QWORD *)result;
        *(_QWORD *)result = v19;
        *(_QWORD *)(result + 32) = 0;
        *(_DWORD *)(result + 8) = 85;
        *(_QWORD *)(result + 20) = 0;
        *(_QWORD *)(result + 12) = 0;
        *(_QWORD *)(result + 25) = 0;
      }
      *((_DWORD *)v20 + 2) = a4;
      *((_DWORD *)v20 + 3) = a6;
      v20[2] = v17 | a5 & 0xFFFFFFFFFFFFFFFDLL;
      v20[3] = 0;
      *((_BYTE *)v20 + 32) = a7;
    }
  }
  return result;
}

unint64_t sub_22EC83A4C(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  _DWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v52;
  int v53[24];
  unint64_t v54;
  unsigned int v55[24];
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[10];

  v8 = a6;
  v58[8] = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v13 = 0;
    v14 = 0;
    v15 = 8 * a6;
    v16 = a5;
    do
    {
      v17 = *(_QWORD *)v16;
      v18 = *(_DWORD *)(*(_QWORD *)v16 + 8);
      if (*(_QWORD *)v16)
        v19 = v18 == 7;
      else
        v19 = 0;
      if (v19)
      {
        v14 = *(unsigned __int8 **)(v17 + 16);
      }
      else
      {
        if (v18 != 4)
          v17 = 0;
        v13 = *(_DWORD **)(v17 + 16);
      }
      v16 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    if ((*(_BYTE *)(a1[9] + 76) & 8) != 0)
    {
      v37 = a1[1536];
      v38 = *(unsigned int *)(v37 + 21512);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v37 + 21504);
        v40 = v39 + 8 * v38;
        while (1)
        {
          v41 = *(unsigned int **)(*(_QWORD *)v39 + 40);
          v44 = *v41;
          v42 = v41 + 4;
          v43 = v44;
          if (v44)
            break;
LABEL_47:
          v39 += 8;
          if (v39 == v40)
            goto LABEL_48;
        }
        v45 = 8 * v43;
        while (*(_DWORD *)(*(_QWORD *)v42 + 8) != 25)
        {
          v42 += 2;
          v45 -= 8;
          if (!v45)
            goto LABEL_47;
        }
      }
      else
      {
LABEL_48:
        sub_22F308EA4(a1, a2, 0xCEDu, 0, (uint64_t)v55);
        sub_22E903BEC(v55);
      }
    }
    v14 = 0;
    v13 = 0;
  }
  v20 = sub_22EC83E18((uint64_t)a1, a1[1536], v14);
  v56 = v58;
  v57 = 0x800000000;
  if (!a4)
    goto LABEL_37;
  v21 = v20;
  v50 = a5;
  v22 = 8 * a4;
  do
  {
    v23 = *a3;
    v54 = *(_QWORD *)(*a3 + 16);
    sub_22EFBB794(v54);
    if (!v24 && !sub_22F25B62C(v54))
    {
      v25 = v54;
      if ((*(_BYTE *)(v54 + 96) & 7) == 5)
      {
        v26 = sub_22E3D1740(v54);
        v25 = v54;
        if (v26)
        {
          if (!sub_22E3CEC2C(v54))
            goto LABEL_18;
          v25 = v54;
        }
      }
      if (!sub_22EC83F80(a1, a1[1536], v23, v25, v21, v14))
      {
        if (v14 && !sub_22E3CB5E0(v54) && v21 == 9)
        {
          sub_22EFF605C((uint64_t)v14);
          sub_22E8FCA40(a1, v27, 0x107Bu, 0, (uint64_t)v53);
          sub_22F0D4E74((uint64_t)v14);
          v52 = v28;
          sub_22E8906A0((uint64_t)v53, &v52);
          sub_22E903BEC((unsigned int *)v53);
          if (sub_22EFBBF74(v54, a1[11]))
            v29 = 5543;
          else
            v29 = 6001;
          sub_22E8FCA40(a1, *(_DWORD *)(v54 + 24), v29, 0, (uint64_t)v53);
          sub_22E890024((uint64_t)v53, (uint64_t *)&v54);
          sub_22E903BEC((unsigned int *)v53);
        }
        else
        {
          v49 = v8;
          v30 = v57;
          v31 = a7;
          if (v57 >= (unint64_t)HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = v57;
          }
          v56[v30] = v23;
          LODWORD(v57) = v57 + 1;
          v32 = v54;
          sub_22F0D4E74(v23);
          sub_22EC84384((uint64_t)a1, v32, v21, v14, v13, v33);
          a7 = v31;
          v8 = v49;
        }
      }
    }
LABEL_18:
    ++a3;
    v22 -= 8;
  }
  while (v22);
  v34 = v57;
  if ((_DWORD)v57)
  {
    if (!a7)
    {
      a7 = a1[28];
      if (!a7)
        a7 = a1[27];
    }
    v46 = a1[11];
    v47 = a7;
    v48 = v56;
    v53[0] = a2;
    v35 = sub_22F3B7984(v46, v47, v50, v8, v57, v53);
    memmove((void *)(*(_QWORD *)(v35 + 40) + 8 * **(unsigned int **)(v35 + 40) + 16), v48, 8 * v34);
    *(_DWORD *)(v35 + 28) &= 0xFFFF9FFF;
    sub_22EFCCFA0(v47, v35);
  }
  else
  {
LABEL_37:
    v35 = 0;
  }
  if (v56 != v58)
    free(v56);
  return v35;
}

uint64_t sub_22EC83E18(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t (**v13)();
  void **v14;
  char v15;
  uint64_t v16;
  void *v17[2];
  _BYTE v18[128];
  void *v19[2];
  _QWORD v20[18];

  v20[16] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  if ((*(_DWORD *)a3 & 0x1E000) != 0)
    return 9;
  v6 = sub_22EFFA6B0(a3);
  v3 = 0;
  v7 = a2 + 21568;
  do
  {
    v8 = *(unsigned __int8 **)(v7 + 8 * v3);
    v19[0] = v20;
    v19[1] = (void *)0x2000000000;
    v17[1] = (void *)0x2000000000;
    v9 = *(_QWORD *)(a1 + 88);
    v15 = 1;
    v13 = &off_24FAC6E70;
    v14 = v19;
    v16 = v9;
    v17[0] = v18;
    sub_22F0E9FEC(&v13, v6);
    v10 = *(_QWORD *)(a1 + 88);
    v15 = 1;
    v13 = &off_24FAC6E70;
    v14 = v17;
    v16 = v10;
    sub_22F0E9FEC(&v13, v8);
    v11 = llvm::FoldingSetNodeID::operator==();
    if (v17[0] != v18)
      free(v17[0]);
    if (v19[0] != v20)
      free(v19[0]);
    if ((v11 & 1) != 0)
      break;
    ++v3;
  }
  while (v3 != 9);
  return v3;
}

BOOL sub_22EC83F80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  BOOL v22;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _BOOL4 v47;
  _QWORD v48[2];
  _BOOL4 v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[64];
  _QWORD *v56;
  _BYTE v57[64];
  _QWORD *v58;
  void *v59;
  __int128 v60;
  _BYTE v61[9];
  void *v62;
  __int128 v63;
  _QWORD v64[34];

  v64[32] = *MEMORY[0x24BDAC8D0];
  result = sub_22F282498(a4);
  if (!result)
    return result;
  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    goto LABEL_11;
  sub_22EFC8E88(a4);
  v14 = *(uint64_t **)v13;
  v15 = *(unsigned int *)(v13 + 8);
  v16 = *(uint64_t **)v13;
  if ((_DWORD)v15)
  {
    v17 = 8 * v15;
    v16 = *(uint64_t **)v13;
    while (*(_WORD *)(*v16 + 32) != 243)
    {
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_11;
    }
  }
  if (v16 == &v14[v15])
  {
LABEL_11:
    v18 = 0;
  }
  else
  {
    do
    {
      v19 = *v14++;
      v18 = v19;
    }
    while (*(_WORD *)(v19 + 32) != 243);
  }
  v20 = *(unsigned __int8 **)(v18 + 40);
  v21 = sub_22EC83E18((uint64_t)a1, a2, v20);
  if (v20)
    v22 = a6 == 0;
  else
    v22 = 1;
  if (!v22 && a5 == 9 && v21 == a5)
  {
    v25 = sub_22EFFA6B0(a6);
    v26 = sub_22EFFA6B0(v20);
    v62 = (char *)&v63 + 8;
    *(_QWORD *)&v63 = 0x2000000000;
    v59 = (char *)&v60 + 8;
    *(_QWORD *)&v60 = 0x2000000000;
    v27 = a1[11];
    v51 = 1;
    *(_QWORD *)&v50 = &off_24FAC6E70;
    *((_QWORD *)&v50 + 1) = &v62;
    v52 = v27;
    sub_22F0E9FEC(&v50, v25);
    v28 = a1[11];
    v51 = 1;
    *(_QWORD *)&v50 = &off_24FAC6E70;
    *((_QWORD *)&v50 + 1) = &v59;
    v52 = v28;
    sub_22F0E9FEC(&v50, v26);
    v29 = llvm::FoldingSetNodeID::operator==();
    if (v59 != (char *)&v60 + 8)
      free(v59);
    if (v62 != (char *)&v63 + 8)
      free(v62);
    if ((v29 & 1) == 0)
      goto LABEL_31;
    return 0;
  }
  if (v21 == a5)
    return 0;
LABEL_31:
  v62 = v64;
  v63 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v57, (uint64_t)&v62);
  if (a6)
  {
    v59 = (void *)sub_22E8FCD8C(a1[11], a1[10]);
    *(_QWORD *)&v60 = v30;
    sub_22F0D9044(a6, (uint64_t)v57, 0, (__int128 *)&v59, 0, "\n", 1uLL, 0);
  }
  v59 = v61;
  v60 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v55, (uint64_t)&v59);
  if (v20)
  {
    *(_QWORD *)&v50 = sub_22E8FCD8C(a1[11], a1[10]);
    *((_QWORD *)&v50 + 1) = v31;
    sub_22F0D9044(v20, (uint64_t)v55, 0, &v50, 0, "\n", 1uLL, 0);
  }
  if (a6)
  {
    sub_22EFF605C((uint64_t)a6);
    v33 = v32;
    v34 = (uint64_t)a6;
  }
  else
  {
    sub_22EFF605C(a3);
    v33 = v35;
    v34 = a3;
  }
  sub_22F0D4E74(v34);
  v54 = v36;
  if (v20)
  {
    sub_22EFF605C((uint64_t)v20);
    LODWORD(v38) = v37;
    sub_22F0D4E74((uint64_t)v20);
  }
  else
  {
    v38 = *(_QWORD *)(v18 + 16);
    v39 = v38;
  }
  v53 = v39;
  sub_22E8FCA40(a1, v33, 0x1ACDu, 0, (uint64_t)&v50);
  v49 = a6 != 0;
  v40 = sub_22E8900C4((uint64_t)&v50, (int *)&v49);
  v41 = v58[1];
  v48[0] = *v58;
  v48[1] = v41;
  v42 = sub_22F2F2210(v40, (uint64_t)v48);
  v47 = v20 != 0;
  v43 = sub_22E8900C4(v42, (int *)&v47);
  v44 = v56[1];
  v46[0] = *v56;
  v46[1] = v44;
  v45 = sub_22F2F2210(v43, (uint64_t)v46);
  sub_22E8906A0(v45, &v54);
  sub_22E903BEC((unsigned int *)&v50);
  sub_22E8FCA40(a1, v38, 0x1710u, 0, (uint64_t)&v50);
  sub_22E8906A0((uint64_t)&v50, &v53);
  sub_22E903BEC((unsigned int *)&v50);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v55);
  if (v59 != v61)
    free(v59);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v57);
  if (v62 != v64)
    free(v62);
  return 1;
}

uint64_t sub_22EC84384(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  char v19;

  result = sub_22F282498(a2);
  if ((result & 1) == 0 && (!a5 || (*a5 & 0x1E000) == 0) && (!a4 || (*a4 & 0x1E000) == 0))
  {
    v13 = *(_QWORD *)(a1 + 88);
    v15 = 0uLL;
    v16 = a6;
    v17 = 0;
    v19 = 120;
    v18 = 0;
    v14 = sub_22F395B80(v13, a3, (uint64_t)a4, (uint64_t)a5, &v15);
    sub_22EFCA95C(a2, v14);
    result = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16056);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 168))(result, a2, v14);
  }
  return result;
}

uint64_t sub_22EC8446C(_QWORD *a1, int a2, int **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int **v7;
  int **v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  char v18;
  int **v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int **v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int *v37;
  uint64_t v39;
  uint64_t OpenMPClauseName;
  uint64_t v43;
  int v44[26];

  v39 = a4;
  v4 = a1[1536];
  v5 = *(unsigned int *)(v4 + 21648);
  v6 = *(_DWORD *)(v4 + 21664);
  if (v5 | v6)
  {
    if (!a4)
      goto LABEL_29;
    v37 = *(int **)(v4 + 21640);
    v7 = a3;
    v8 = &a3[a4];
    do
    {
      v9 = (*v7)[2];
      if ((v9 - 25) > 0x3A || ((1 << (v9 - 25)) & 0x600100000000001) == 0)
      {
        if (v6 && v9 == 9)
        {
          sub_22E8FCA40(a1, a2, 0x1070u, 0, (uint64_t)v44);
          v11 = sub_22F2F30F4((uint64_t)v44, (uint64_t)"atomic");
          OpenMPClauseName = llvm::omp::getOpenMPClauseName();
          v43 = v12;
          sub_22F2F2210(v11, (uint64_t)&OpenMPClauseName);
          sub_22E903BEC((unsigned int *)v44);
          sub_22E8FCA40(a1, v6, 0x171Au, 0, (uint64_t)v44);
          sub_22F2F30F4((uint64_t)v44, (uint64_t)"atomic");
          sub_22E903BEC((unsigned int *)v44);
        }
      }
      else
      {
        sub_22E8FCA40(a1, a2, 0x1070u, 0, (uint64_t)v44);
        v13 = sub_22F2F30F4((uint64_t)v44, (uint64_t)"target");
        OpenMPClauseName = llvm::omp::getOpenMPClauseName();
        v43 = v14;
        sub_22F2F2210(v13, (uint64_t)&OpenMPClauseName);
        sub_22E903BEC((unsigned int *)v44);
        if ((_DWORD)v5)
        {
          v16 = v37;
          v15 = 4 * v5;
          do
          {
            v17 = *v16++;
            sub_22E8FCA40(a1, v17, 0x171Au, 0, (uint64_t)v44);
            sub_22F2F30F4((uint64_t)v44, (uint64_t)"target");
            sub_22E903BEC((unsigned int *)v44);
            v15 -= 4;
          }
          while (v15);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  a4 = v39;
  if (v39)
  {
    v18 = 0;
    v19 = a3;
    v20 = a1[1536];
    do
    {
      v21 = *(unsigned int *)(v20 + 21512);
      if ((_DWORD)v21)
      {
        v22 = *v19;
        v23 = *(_QWORD *)(v20 + 21504);
        v24 = v23 + 8 * v21;
        do
        {
          v25 = *(_DWORD **)(*(_QWORD *)v23 + 40);
          v28 = *v25;
          v27 = (int **)(v25 + 4);
          v26 = v28;
          if (v28)
          {
            v29 = 8 * v26;
            do
            {
              v30 = *v27;
              if (v22[2] == (*v27)[2])
              {
                sub_22E8FCA40(*(_QWORD **)(v20 + 21448), *v22, 0x10E2u, 0, (uint64_t)v44);
                OpenMPClauseName = llvm::omp::getOpenMPClauseName();
                v43 = v31;
                sub_22F2F2210((uint64_t)v44, (uint64_t)&OpenMPClauseName);
                sub_22E903BEC((unsigned int *)v44);
                sub_22E8FCA40(*(_QWORD **)(v20 + 21448), *v30, 0x171Bu, 0, (uint64_t)v44);
                OpenMPClauseName = llvm::omp::getOpenMPClauseName();
                v43 = v32;
                sub_22F2F2210((uint64_t)v44, (uint64_t)&OpenMPClauseName);
                sub_22E903BEC((unsigned int *)v44);
                v18 = 1;
              }
              ++v27;
              v29 -= 8;
            }
            while (v29);
          }
          v23 += 8;
        }
        while (v23 != v24);
      }
      ++v19;
    }
    while (v19 != &a3[v39]);
    a4 = v39;
    if ((v18 & 1) != 0)
      return 0;
  }
LABEL_29:
  v34 = a1[11];
  v35 = a1[28];
  if (!v35)
    v35 = a1[27];
  v44[0] = a2;
  return sub_22F3B7AD4(v34, v35, a3, a4, 0, v44);
}

void sub_22EC84788(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *p_p;
  uint64_t size;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t i;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  _QWORD v59[2];
  std::string __p;
  __int128 v61;
  unint64_t v62;
  int v63;
  __int16 v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((a6 & 1) != 0 || a5)
  {
    v13 = *(_QWORD *)(a1 + 88);
    memset(&__p, 0, sizeof(__p));
    if (a5)
    {
      v15 = 0;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((24 * a5) >> 3) - 1;
      do
      {
        if (*(char *)(a4 + v15 + 23) < 0)
          v17 = *(_QWORD *)(a4 + v15 + 8);
        else
          v17 = *(unsigned __int8 *)(a4 + v15 + 23);
        v16 += v17;
        v15 += 24;
      }
      while (24 * a5 != v15);
      std::string::reserve(&__p, v16);
      v18 = *(_BYTE *)(a4 + 23);
      v19 = v18 < 0;
      if (v18 >= 0)
        v20 = (const std::string::value_type *)a4;
      else
        v20 = *(const std::string::value_type **)a4;
      v21 = v18 & 0x7F;
      if (v19)
        v22 = *(_QWORD *)(a4 + 8);
      else
        v22 = v21;
      std::string::append(&__p, v20, v22);
      if (a5 != 1)
      {
        v23 = a4 + 24;
        v24 = 24 * a5 - 24;
        do
        {
          std::string::append(&__p, ",", 1uLL);
          v25 = *(_BYTE *)(v23 + 23);
          v26 = v25 < 0;
          if (v25 >= 0)
            v27 = (const std::string::value_type *)v23;
          else
            v27 = *(const std::string::value_type **)v23;
          v28 = v25 & 0x7F;
          if (v26)
            v29 = *(_QWORD *)(v23 + 8);
          else
            v29 = v28;
          std::string::append(&__p, v27, v29);
          v23 += 24;
          v24 -= 24;
        }
        while (v24);
      }
      v14 = 0;
    }
    else
    {
      v14 = 1;
    }
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x10B5u, 0, (uint64_t)&v61);
    sub_22E85B42C((uint64_t)&__p);
    v11 = sub_22F2F3734((uint64_t)&v61, (void **)&__p.__r_.__value_.__l.__data_);
    v59[0] = llvm::omp::getOpenMPDirectiveName();
    v59[1] = v12;
    sub_22F2F2210(v11, (uint64_t)v59);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_22E903BEC((unsigned int *)&v61);
    v13 = *(_QWORD *)(a1 + 88);
    memset(&__p, 0, sizeof(__p));
    v14 = 1;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v61 = 0uLL;
  LODWORD(v62) = a2;
  HIDWORD(v62) = a2;
  v63 = 0;
  v65 = 120;
  v64 = 0;
  v32 = sub_22F37F82C(v13, p_p, size, &v61);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a3 == 4)
  {
    v33 = *(_DWORD *)(a1 + 12688);
    if (v33 >= *(_DWORD *)(a1 + 12692))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v33 = *(_DWORD *)(a1 + 12688);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 12680) + 8 * v33) = v32;
    ++*(_DWORD *)(a1 + 12688);
    return;
  }
  if ((v14 & 1) != 0)
    return;
  v34 = *(_DWORD *)(a1 + 12736);
  if (v34 >= *(_DWORD *)(a1 + 12740))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(a1 + 12736);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 12728) + 8 * v34) = v32;
  ++*(_DWORD *)(a1 + 12736);
  *(_QWORD *)&v61 = &v62;
  v35 = (unint64_t *)(a1 + 216);
  *((_QWORD *)&v61 + 1) = 0x800000000;
LABEL_45:
  v36 = *v35;
  while (1)
  {
    v37 = *(_WORD *)(v36 + 8) & 0x7F;
    v38 = -40;
    if (v37 > 0x46)
    {
      if (v37 == 83)
        goto LABEL_63;
      if (v37 == 71)
      {
        v38 = -56;
        goto LABEL_63;
      }
      if (v37 != 81)
        goto LABEL_57;
    }
    else
    {
      if (v37 > 0x18)
        goto LABEL_56;
      if (v37 == 16)
        goto LABEL_49;
      if (((1 << v37) & 0x1066) == 0)
      {
        if (v37 == 24)
        {
LABEL_49:
          v38 = -48;
          goto LABEL_63;
        }
LABEL_56:
        if (v37 == 70)
        {
          v38 = -64;
          goto LABEL_63;
        }
LABEL_57:
        if (v37 - 33 >= 5)
          v39 = -48;
        else
          v39 = -64;
        if (v37 - 52 >= 6)
          v38 = v39;
        else
          v38 = -72;
      }
    }
LABEL_63:
    v40 = *(_QWORD *)(v36 + v38 + 16);
    v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    if ((v40 & 4) != 0)
      v41 = *(_QWORD *)(v41 + 8);
    if (!v41)
      break;
    v42 = -40;
    if ((*(_WORD *)(v36 + 8) & 0x7Fu) > 0x46)
    {
      if (v37 != 83)
      {
        if (v37 == 71)
        {
          v42 = -56;
        }
        else if (v37 != 81)
        {
          goto LABEL_77;
        }
      }
    }
    else
    {
      if (v37 > 0x18)
        goto LABEL_76;
      if (v37 == 16)
        goto LABEL_69;
      if (((1 << v37) & 0x1066) != 0)
        goto LABEL_83;
      if (v37 == 24)
      {
LABEL_69:
        v42 = -48;
      }
      else
      {
LABEL_76:
        if (v37 != 70)
        {
LABEL_77:
          v43 = v37 - 52;
          if (v37 - 33 >= 5)
            v44 = -48;
          else
            v44 = -64;
          if (v43 >= 6)
            v42 = v44;
          else
            v42 = -72;
          goto LABEL_83;
        }
        v42 = -64;
      }
    }
LABEL_83:
    v45 = *(_QWORD *)(v36 + v42 + 16);
    v36 = v45 & 0xFFFFFFFFFFFFFFF8;
    if ((v45 & 4) != 0)
    {
      v35 = (unint64_t *)(v36 + 8);
      goto LABEL_45;
    }
  }
  v62 = v36;
  v46 = 1;
  do
  {
    v47 = *(_QWORD *)(v61 + 8 * v46 - 8);
    DWORD2(v61) = v46 - 1;
    if ((*(_BYTE *)(v47 + 8) & 0x80) != 0)
      sub_22EFCC320(v47);
    for (i = *(_QWORD *)(v47 + 16); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      v49 = *(_DWORD *)(i + 28);
      if ((v49 & 0x80) == 0)
      {
        v50 = v49 & 0x7F;
        if (v50 > 0x39)
          goto LABEL_110;
        if (v50 != 28)
        {
          if (((1 << (v49 & 0x7F)) & 0x3F0003E01011066) != 0)
            goto LABEL_103;
LABEL_110:
          v58 = (v50 - 70) > 0xD || ((1 << ((v49 & 0x7F) - 70)) & 0x2803) == 0;
          if (!v58 || (v50 - 19) <= 4)
          {
LABEL_103:
            v56 = sub_22EFCAE04(i);
            v57 = DWORD2(v61);
            if (DWORD2(v61) >= (unint64_t)HIDWORD(v61))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v57 = DWORD2(v61);
            }
            *(_QWORD *)(v61 + 8 * v57) = v56;
            ++DWORD2(v61);
            v49 = *(_DWORD *)(i + 28);
          }
          if ((v49 & 0x7Eu) - 58 >= 0xFFFFFFFA)
            sub_22EFCA95C(i, v32);
          continue;
        }
        v51 = *(_QWORD *)(i + 48);
        if (v51)
          v52 = v51 + 64;
        else
          v52 = 0;
        v53 = DWORD2(v61);
        if (DWORD2(v61) >= (unint64_t)HIDWORD(v61))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v53 = DWORD2(v61);
        }
        *(_QWORD *)(v61 + 8 * v53) = v52;
        ++DWORD2(v61);
        sub_22EFE95D4(i);
        v54 = *(uint64_t **)(sub_22EFE9368(i) + 32);
        sub_22EFE95D4(i);
        v55 = sub_22EFE9368(i);
        sub_22F341D68((unint64_t)&v61, v54, (uint64_t *)(*(_QWORD *)(v55 + 32) + 8 * *(unsigned int *)(v55 + 40)));
      }
    }
    v46 = DWORD2(v61);
  }
  while (DWORD2(v61));
  if ((unint64_t *)v61 != &v62)
    free((void *)v61);
}

void sub_22EC84DA0(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_22EC84DFC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[376];

  memset(v7, 0, 24);
  v3 = sub_22ECB1B04(*(_QWORD *)(v1 + 12288));
  if (v3)
    v4 = *(_DWORD *)(v3 + 1008);
  else
    v4 = 0;
  sub_22ED379B0(v1, v4, v2, 2, (uint64_t)v7, 1, 0);
  v5 = *(_QWORD *)(v1 + 12288);
  v6 = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(sub_22ECB1B04(v5) + 1000) = v6;
  sub_22EC85CBC(v5, v0, 1);
}

void sub_22EC85CBC(uint64_t a1, int a2, int a3)
{
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD v11[8];
  uint64_t v12;

  v6 = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v7 = a2 - 56;
  if ((a2 - 56) <= 0x2B)
  {
    if (((1 << v7) & 0x6000001CF91) != 0)
    {
      v11[0] = 1;
      v10 = 1;
      if ((a2 - 66) > 0x20)
      {
        v6 = 1;
        goto LABEL_8;
      }
      v8 = 1 << (a2 - 66);
      v9 = 0x1001CC073;
      v6 = 1;
    }
    else
    {
      v8 = 1 << v7;
      v9 = 0x80073000000;
    }
    if ((v8 & v9) != 0)
    {
      v11[v6++] = 2;
      v10 = v6;
    }
  }
LABEL_8:
  if (sub_22F421A78(a2))
  {
    v11[v6++] = 3;
    v10 = v6;
  }
  if (sub_22F421A30(a2))
  {
    if (v6 >= 8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11[v10] = 4;
      v6 = v10;
    }
    else
    {
      v11[v6] = 4;
    }
    v10 = ++v6;
  }
  if (sub_22F421AC0(a2))
  {
    if (v6 >= 8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11[v10] = 5;
      v6 = v10;
    }
    else
    {
      v11[v6] = 5;
    }
    ++v6;
  }
  if (a3)
  {
    sub_22F3340DC(a1 + 21672, v11, &v11[v6]);
  }
  else if (v6)
  {
    *(_DWORD *)(a1 + 21680) -= v6;
  }
}

uint64_t sub_22EC85EE0(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  unint64_t v28;
  llvm *v29[2];
  unsigned int v30;

  result = sub_22EFC7ADC(*(_QWORD *)(a1 + 216));
  if ((result & 1) != 0)
    return result;
  result = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
  if (!result)
    return result;
  v5 = *(_DWORD *)(result + 960) - 56;
  v6 = v5 > 0x2A;
  v7 = (1 << v5) & 0x6000003CF9FLL;
  if (v6 || v7 == 0)
    return result;
  v9 = (uint64_t *)(*(_QWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v9;
  if (*v9)
  {
    v11 = *(_DWORD *)(v10 + 16);
    if ((v11 & 0xFE) == 0x28)
      goto LABEL_38;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v10 = sub_22F10CF48(v10);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 16);
LABEL_38:
      if ((v11 & 0x100000) != 0)
      {
        do
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v10)
          {
            v27 = *(_DWORD *)(v10 + 16);
            if ((v27 & 0xFE) == 0x28)
              continue;
          }
          v10 = sub_22F10CF48(v10);
          v27 = *(_DWORD *)(v10 + 16);
        }
        while ((v27 & 0x100000) != 0);
      }
      v9 = (uint64_t *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  result = sub_22F10C2A4(*v9);
  if (result)
  {
    v12 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 <= 2)
    {
      v13 = *(_QWORD *)(a1 + 12288);
      v14 = *(_BYTE *)(v13 + 21457);
      *(_BYTE *)(v13 + 21457) = 1;
      v15 = *(_QWORD *)(result + 128);
      if (v15 && ((*(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16)) & 0x100000) != 0)
      {
        v29[0] = 0;
        v29[1] = 0;
        v30 = 0;
        v28 = 0;
        sub_22EFD4A20(result, (uint64_t *)v29, &v28);
        v16 = *(_QWORD *)(v12 + 128);
        if (v16)
        {
          if (((*(unsigned __int16 *)(v16 + 8) | (*(unsigned __int8 *)(v16 + 10) << 16)) & 0x100000) != 0)
          {
            v17 = ((unint64_t)*(unsigned int *)(v16 + 104) >> 5) & 0x7FFF;
            if ((_DWORD)v17)
            {
              v18 = v28;
              v19 = (unsigned int *)(*(_QWORD *)(v16 + 128) + 8);
              v20 = 16 * v17;
              do
              {
                v21 = *((_QWORD *)v19 - 1);
                if (v21 >= 4)
                {
                  if ((v21 & 0xFFFFFFFFFFFFFFFCLL) != 4 && (*((_QWORD *)v19 - 1) & 2) == 0)
                  {
                    v24 = v21 & 0xFFFFFFFFFFFFFFF8;
                    v25 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 16);
                    v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
                    if ((v25 & 4) != 0)
                      v26 = (_QWORD *)*v26;
                    if (sub_22EFCBE78((unint64_t)v26, *(_QWORD *)(a1 + 216)))
                      sub_22EB51AEC(a1, *v19, v24, 0, (_DWORD *)(a1 + 8848));
                  }
                  else if ((v21 & 0xFFFFFFFFFFFFFFFELL) == 4)
                  {
                    v23 = sub_22EBBB18C(a1);
                    if (v23 >= 0x10 && sub_22F36EDA0(*(_QWORD *)(a1 + 88), v23, *(_QWORD *)(v18 + 48), 0))
                      sub_22EBBBBEC(a1, *v19, 0, 1, 0, 0);
                  }
                }
                v19 += 4;
                v20 -= 16;
              }
              while (v20);
            }
          }
        }
        result = llvm::deallocate_buffer(v29[0], (void *)(16 * v30));
        v13 = *(_QWORD *)(a1 + 12288);
      }
      *(_BYTE *)(v13 + 21457) = v14;
    }
  }
  return result;
}

unint64_t sub_22EC8617C(_QWORD *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  _DWORD **v43;
  _DWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  int *v58;
  uint64_t v59;
  int **v60;
  int v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int **v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  int v73;
  int v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t *v96;
  _DWORD *v97;
  int v98;
  uint64_t v99;
  _DWORD **v100;
  uint64_t v101;
  _DWORD *v102;
  BOOL v103;
  uint64_t v104;
  _DWORD **v105;
  uint64_t v106;
  _DWORD *v107;
  BOOL v108;
  _QWORD *v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t OpenMPClauseName;
  _QWORD *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  _BYTE v133[32];
  int **v134;
  uint64_t v135;
  _BYTE v136[32];
  char *v137;
  uint64_t v138;
  _QWORD v139[4];

  v139[2] = *MEMORY[0x24BDAC8D0];
  v8 = a1[1536];
  v9 = sub_22ECB1B04(v8);
  if (v9)
    v10 = *(_DWORD *)(v9 + 960);
  else
    v10 = 89;
  sub_22EC85CBC(v8, v10, 0);
  v11 = a1[1536];
  v12 = sub_22ECB1B04(v11);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 960);
    v14 = v13 > 0x34 || ((1 << v13) & 0x10000800000204) == 0;
    if (!v14 || v13 == 95)
      return a2;
  }
  else
  {
    v13 = 89;
  }
  if (a2 < 2)
  {
    a2 = 1;
    goto LABEL_17;
  }
  v110 = v13;
  v137 = (char *)v139;
  v138 = 0x400000000;
  v16 = sub_22ECB1B04(v11);
  if (v16)
    v17 = *(_DWORD *)(v16 + 960);
  else
    v17 = 89;
  v113 = a2;
  sub_22F421BB4((uint64_t)&v137, v17);
  v111 = a3;
  v134 = (int **)v136;
  v135 = 0x400000000;
  v131 = v133;
  v132 = 0x400000000;
  v118 = &a3[a4];
  v112 = a4;
  if (a4)
  {
    v27 = a3;
    v114 = 0;
    v116 = 0;
    while (1)
    {
      v28 = *v27;
      if ((*(_BYTE *)(a1[9] + 76) & 2) == 0)
      {
        v29 = sub_22ECB1B04(a1[1536]);
        if (v29)
        {
          v30 = *(_DWORD *)(v29 + 960) - 36;
          v31 = v30 > 0x29;
          v32 = (1 << v30) & 0x34000000C03;
          if (!v31 && v32 != 0 && *(_DWORD *)(v28 + 8) == 37)
          {
            v34 = *(unsigned int *)(v28 + 16);
            if ((_DWORD)v34)
            {
              v35 = (_DWORD **)(v28 + 8 * v34 + 8 * v34 + 8 * v34 + 8 * v34 + 8 * v34 + 96);
              v36 = 8 * v34;
              do
              {
                v37 = *v35;
                if (*v35)
                {
                  *(_QWORD *)&v122 = a1[11];
                  *((_QWORD *)&v122 + 1) = a1;
                  LOBYTE(v123) = 0;
                  v124 = 0;
                  v125 = 0;
                  sub_22EB88244((uint64_t)&v122, v37);
                }
                ++v35;
                v36 -= 8;
              }
              while (v36);
            }
          }
        }
      }
      v38 = *(_DWORD *)(v28 + 8);
      v39 = (v38 - 14) > 0x3F || ((1 << (v38 - 14)) & 0x8012000060808001) == 0;
      if (v39
        && ((*(_BYTE *)(a1[9] + 76) & 4) == 0
         || (v38 == 15 ? (v46 = *(_BYTE *)(*(_QWORD *)(a1[11] + 15088) + 81) == 0) : (v46 = 1), v46)))
      {
        v47 = sub_22ECB1B04(a1[1536]);
        if ((!v47 || (*(_DWORD *)(v47 + 960) & 0xFFFFFFFD) != 0x58)
          && (v138 > 1 || *(_DWORD *)&v137[4 * v138 - 4] != 89))
        {
          v48 = sub_22F3EA1B4(v28);
          if (v48)
          {
            v49 = v132;
            if (v132 >= (unint64_t)HIDWORD(v132))
            {
              v52 = v48;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v48 = v52;
              v49 = v132;
            }
            *(_QWORD *)&v131[8 * v49] = v48;
            LODWORD(v132) = v132 + 1;
            v38 = *(_DWORD *)(v28 + 8);
          }
          if ((v38 - 37) > 0x28 || ((1 << (v38 - 37)) & 0x100200000C1) == 0)
            goto LABEL_63;
          v51 = *(_DWORD **)(v28 + 40);
          if (v51)
          {
            *(_QWORD *)&v122 = a1[11];
            *((_QWORD *)&v122 + 1) = a1;
            LOBYTE(v123) = 0;
            v124 = 0;
            v125 = 0;
            sub_22EB88244((uint64_t)&v122, v51);
          }
        }
      }
      else
      {
        *(_BYTE *)(a1[1536] + 21456) = v38 == 15;
        sub_22F3E9FA4(v28);
        v119 = v122;
        v40 = v124;
        v120 = v123;
        v41 = v125;
        while (1)
        {
          v42 = v119;
          if (v119 == __PAIR128__(v41, v40))
            break;
          v43 = (_DWORD **)v119;
          if ((BYTE8(v119) & 3) != 0)
          {
            if ((*((_QWORD *)&v119 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v43 = (_DWORD **)((*((_QWORD *)&v119 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v43 = (_DWORD **)sub_22F3AC1A8(*(_QWORD *)v119);
          }
          v44 = *v43;
          if (*v43)
          {
            OpenMPClauseName = a1[11];
            v127 = a1;
            v128 = 0;
            v129 = 0;
            v130 = 0;
            sub_22EB88244((uint64_t)&OpenMPClauseName, v44);
          }
          if ((BYTE8(v42) & 3) != 0)
          {
            if (*((_QWORD *)&v42 + 1) < 4uLL)
              sub_22F3F2FE0((uint64_t)&v119, 1);
            else
              sub_22F0D8720((uint64_t)&v119);
          }
          else
          {
            *(_QWORD *)&v119 = v42 + 8;
          }
        }
        *(_BYTE *)(a1[1536] + 21456) = 0;
      }
      v38 = *(_DWORD *)(v28 + 8);
LABEL_63:
      switch(v38)
      {
        case ',':
          v45 = v135;
          if (v135 >= (unint64_t)HIDWORD(v135))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v45 = v135;
          }
          v134[v45] = (int *)v28;
          LODWORD(v135) = v135 + 1;
          break;
        case 'G':
          v114 = v28;
          break;
        case '<':
          v116 = v28;
          break;
      }
      if (++v27 == v118)
        goto LABEL_24;
    }
  }
  v114 = 0;
  v116 = 0;
LABEL_24:
  v20 = sub_22ECB1B04(a1[1536]);
  v21 = *(unsigned int *)(v20 + 1144);
  if ((_DWORD)v21)
  {
    v22 = *(_DWORD ***)(v20 + 1136);
    v23 = 8 * v21;
    do
    {
      v24 = *v22++;
      *(_QWORD *)&v122 = a1[11];
      *((_QWORD *)&v122 + 1) = a1;
      LOBYTE(v123) = 0;
      v124 = 0;
      v125 = 0;
      sub_22EB88244((uint64_t)&v122, v24);
      v23 -= 8;
    }
    while (v23);
  }
  if (!v114)
    goto LABEL_30;
  v25 = *(_DWORD *)(v114 + 36);
  if (v25 == 7)
  {
    if (!v116)
    {
LABEL_30:
      v26 = 0;
      goto LABEL_98;
    }
  }
  else
  {
    v26 = 0;
    if (*(_DWORD *)(v114 + 40) != 7 || !v116)
      goto LABEL_98;
  }
  v14 = v25 == 7;
  v53 = 48;
  if (v14)
    v53 = 44;
  sub_22E8FCA40(a1, *(_DWORD *)(v114 + v53), 0x10F2u, 0, (uint64_t)&v122);
  OpenMPClauseName = llvm::omp::getOpenMPClauseName();
  v127 = v54;
  v55 = sub_22F2F2210((uint64_t)&v122, (uint64_t)&OpenMPClauseName);
  *(_QWORD *)&v119 = sub_22F42187C((const char *)0x47, 7);
  v56 = sub_22E8AECC4(v55, (uint64_t *)&v119);
  v121 = *(_QWORD *)v116;
  sub_22E8906A0(v56, &v121);
  sub_22E903BEC((unsigned int *)&v122);
  v26 = 1;
LABEL_98:
  if (v112)
  {
    v57 = 0;
    v58 = 0;
    v59 = 8 * v112 - 8;
    v60 = (int **)a3;
    do
    {
      v61 = (*v60)[2];
      if (v61 == 60)
      {
        v57 = *v60;
      }
      else if (v61 == 59)
      {
        if ((*v60)[4])
          v58 = 0;
        else
          v58 = *v60;
      }
      if (v57)
        v62 = v58 == 0;
      else
        v62 = 1;
      v63 = !v62;
      if (!v62)
        break;
      ++v60;
      v64 = v59;
      v59 -= 8;
    }
    while (v64);
    if (v63)
    {
      sub_22E8FCA40(a1, v58[5], 0x10F2u, 0, (uint64_t)&v122);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v127 = v65;
      v66 = sub_22F2F2210((uint64_t)&v122, (uint64_t)&OpenMPClauseName);
      *(_QWORD *)&v119 = sub_22F42187C((const char *)0x3B, 0);
      v67 = sub_22E8AECC4(v66, (uint64_t *)&v119);
      v121 = *(_QWORD *)v58;
      sub_22E8906A0(v67, &v121);
      sub_22E903BEC((unsigned int *)&v122);
      sub_22E8FCA40(a1, *v57, 0x170Du, 0, (uint64_t)&v122);
      LODWORD(v119) = 0;
      v68 = sub_22E8900C4((uint64_t)&v122, (int *)&v119);
      OpenMPClauseName = *(_QWORD *)v57;
      sub_22E8906A0(v68, &OpenMPClauseName);
      sub_22E903BEC((unsigned int *)&v122);
      v26 = 1;
    }
  }
  if ((_DWORD)v135 && v116 && *(_QWORD *)(v116 + 16))
  {
    v69 = v134;
    v70 = 8 * v135;
    do
    {
      v71 = *v69++;
      sub_22E8FCA40(a1, *v71, 0x10A7u, 0, (uint64_t)&v122);
      OpenMPClauseName = *(_QWORD *)v116;
      sub_22E8906A0((uint64_t)&v122, &OpenMPClauseName);
      sub_22E903BEC((unsigned int *)&v122);
      v70 -= 8;
    }
    while (v70);
    v26 = 1;
  }
  v72 = sub_22ECB1B04(a1[1536]);
  if (v72)
  {
    v73 = *(_DWORD *)(v72 + 960);
    if (sub_22F421A30(v73))
      goto LABEL_194;
  }
  else
  {
    v73 = 89;
    if (sub_22F421A30(89))
    {
LABEL_194:
      v108 = !sub_22F421AC0(v73) || v116 == 0;
      if (!v108 && *(_QWORD *)(v116 + 16))
      {
        sub_22E8FCA40(a1, *(_DWORD *)v116, 0x10C3u, 0, (uint64_t)&v122);
        sub_22ECB1B04(a1[1536]);
        OpenMPClauseName = llvm::omp::getOpenMPDirectiveName();
        v127 = v109;
        sub_22F2F2210((uint64_t)&v122, (uint64_t)&OpenMPClauseName);
        sub_22E903BEC((unsigned int *)&v122);
        goto LABEL_128;
      }
    }
  }
  if (v26)
  {
LABEL_128:
    v115 = 0;
    a2 = 1;
    goto LABEL_186;
  }
  v115 = 1;
  if (!(_DWORD)v138)
    goto LABEL_185;
  v74 = 0;
  v75 = v137;
  v76 = &v137[4 * v138];
  v117 = v137;
  do
  {
    v78 = *((_DWORD *)v76 - 1);
    v76 -= 4;
    v77 = v78;
    if (v78 == 89)
      goto LABEL_181;
    if ((_DWORD)v132)
    {
      v79 = v131;
      v80 = &v131[8 * v132];
      do
      {
        v81 = *(_DWORD *)(*(_QWORD *)v79 + 8);
        if (v81 == v77 || v81 == 89)
        {
          v82 = **(_QWORD **)v79;
          if (v82)
          {
            v83 = *(_QWORD *)(v82 + 8);
            if ((v83 & 1) != 0)
            {
              v84 = (uint64_t *)((v83 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v86 = &v84[*(unsigned int *)(v83 & 0xFFFFFFFFFFFFFFFELL)];
            }
            else
            {
              if (v83)
                v84 = (uint64_t *)(v82 + 8);
              else
                v84 = 0;
              v85 = (uint64_t *)(v82 + 16);
              if (v83)
                v86 = v85;
              else
                v86 = 0;
            }
            while (v84 != v86)
            {
              v87 = *v84++;
              sub_22EB51AEC(a1, *(unsigned int *)(v87 + 24), v87, 0, a1 + 1106);
            }
          }
        }
        v79 += 8;
      }
      while (v79 != v80);
    }
    if (v77 == 40)
    {
      v75 = v117;
      if (!v112)
        goto LABEL_181;
      v96 = v111;
      while (1)
      {
        v97 = (_DWORD *)*v96;
        v98 = *(_DWORD *)(*v96 + 8);
        if (!*v96 || v98 != 66)
          goto LABEL_172;
        if (v97[12] == 1)
        {
          v99 = v97[4];
          if ((_DWORD)v99)
            break;
        }
LABEL_180:
        if (++v96 == v118)
          goto LABEL_181;
      }
      v100 = (_DWORD **)&v97[2 * v99 + 26 + 2 * v99 + 2 * v99 + 2 * v99 + 2 * v99 + 2 * v99];
      v101 = 8 * v99;
      do
      {
        v102 = *v100++;
        *(_QWORD *)&v122 = a1[11];
        *((_QWORD *)&v122 + 1) = a1;
        LOBYTE(v123) = 0;
        v124 = 0;
        v125 = 0;
        sub_22EB88244((uint64_t)&v122, v102);
        v101 -= 8;
      }
      while (v101);
      v98 = v97[2];
LABEL_172:
      if (v97)
        v103 = v98 == 5;
      else
        v103 = 0;
      if (v103)
      {
        v104 = v97[4];
        if ((_DWORD)v104)
        {
          v105 = (_DWORD **)(v97 + 6);
          v106 = 8 * v104;
          do
          {
            v107 = *v105++;
            *(_QWORD *)&v122 = a1[11];
            *((_QWORD *)&v122 + 1) = a1;
            LOBYTE(v123) = 0;
            v124 = 0;
            v125 = 0;
            sub_22EB88244((uint64_t)&v122, v107);
            v106 -= 8;
          }
          while (v106);
        }
      }
      goto LABEL_180;
    }
    v88 = v77 != 56 || v112 == 0;
    v75 = v117;
    if (!v88)
    {
      v89 = v111;
      do
      {
        v90 = *v89;
        if (*v89)
        {
          if (*(_DWORD *)(v90 + 8) == 91)
          {
            v91 = *(unsigned int *)(v90 + 16);
            if ((_DWORD)v91)
            {
              v92 = 0;
              v93 = v90 + 24;
              v94 = 2 * v91;
              do
              {
                v95 = *(_DWORD **)(v93 + 8 * (v92 & 0xFFFFFFFE) + 8);
                if (v95)
                {
                  *(_QWORD *)&v122 = a1[11];
                  *((_QWORD *)&v122 + 1) = a1;
                  LOBYTE(v123) = 0;
                  v124 = 0;
                  v125 = 0;
                  sub_22EB88244((uint64_t)&v122, v95);
                }
                v92 += 2;
              }
              while (v94 != v92);
            }
          }
        }
        ++v89;
      }
      while (v89 != v118);
    }
LABEL_181:
    if ((_DWORD)v138 == ++v74)
      *(_BYTE *)(sub_22ECB1B04(a1[1536]) + 1084) = 1;
    v113 = sub_22ED37CF8(a1, v113 & 0xFFFFFFFFFFFFFFFELL);
  }
  while (v76 != v75);
  v115 = 1;
LABEL_185:
  a2 = v113;
LABEL_186:
  if (v131 != v133)
    free(v131);
  if (v134 != (int **)v136)
    free(v134);
  if (v137 != (char *)v139)
    free(v137);
  v13 = v110;
  if ((v115 & 1) == 0)
  {
LABEL_17:
    v18 = sub_22F33BDCC(v13);
    if (v18 >= 1)
    {
      v19 = v18 + 1;
      do
      {
        sub_22F344E80((uint64_t)a1);
        --v19;
      }
      while (v19 > 1);
    }
  }
  return a2;
}

uint64_t sub_22EC86C20(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  const char *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  unint64_t v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v156;
  const char *v157;
  llvm *v158;
  unint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  int v164;
  _BYTE v165[16];
  char *v166;
  uint64_t v167;
  _QWORD v168[9];

  v168[7] = *MEMORY[0x24BDAC8D0];
  if (*a2 == 14)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (*(_BYTE *)v4 == 12)
      v5 = (uint64_t *)(v4 + 8);
    else
      v5 = (uint64_t *)(*(_QWORD *)(v4 + 16) + 16);
    v7 = *v5;
    v8 = (unsigned __int8 **)(a2 + 24);
    v9 = (unsigned __int8 **)(a2 + 32);
    v6 = v7;
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8);
    v8 = (unsigned __int8 **)(a2 + 48);
    v9 = (unsigned __int8 **)(a2 + 56);
  }
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *v9;
  v12 = *(_QWORD *)(v6 + 48);
  v13 = *(_QWORD *)(v7 + 48);
  v14 = sub_22EFFED0C(*v8);
  v149 = v13;
  if ((*v14 & 0xFE) == 0x70)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
    v15 = (unsigned __int8 *)*((_QWORD *)v14 + 3);
    v17 = (*(_DWORD *)v14 >> 18) & 0x3F;
  }
  else
  {
    v21 = (unint64_t)&v14[8 * (((unint64_t)*(unsigned int *)v14 >> 18) & 1)
                               + ((unint64_t)*(unsigned int *)v14 >> 24)];
    v16 = *(unsigned __int8 **)(v21 + 8);
    v15 = *(unsigned __int8 **)(v21 + 16);
    v22 = *((_DWORD *)v14 + 1) & 0x3F;
    if (v22 <= 0x1E)
    {
      if (v22 == 16)
        v17 = 10;
      else
        v17 = 11;
    }
    else if (v22 == 31)
    {
      v17 = 15;
    }
    else if (v22 == 32)
    {
      v17 = 12;
    }
    else
    {
      v17 = 13;
    }
  }
  v18 = sub_22EFFED0C(v16);
  if (*v18 != 161 || *((_QWORD *)v18 + 2) != v6)
    __asm { BR              X10 }
  v19 = v15;
  v20 = v16;
  v152 = v17;
  v148 = sub_22EFFED0C(v16);
  v23 = sub_22F36D838(v10);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_DWORD *)(v24 + 16);
  if (v24)
    v26 = v25 == 11;
  else
    v26 = 0;
  if (v26)
  {
    if (((*(_DWORD *)(v24 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!v24 || v25 != 44)
  {
    if (v25 != 9)
      goto LABEL_31;
LABEL_30:
    v28 = sub_22EF6A330(v10, v12);
    v23 = sub_22EF60A6C(v10, v28, 0);
    goto LABEL_31;
  }
  v27 = sub_22F114198(*(_QWORD *)(v24 + 24));
  if (((*(_BYTE *)(v27 + 74) & 1) != 0 || *(_QWORD *)(v27 + 128) > 7uLL)
    && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v24 + 24)) + 76) & 0x80) == 0)
  {
    goto LABEL_30;
  }
LABEL_31:
  v29 = *v11;
  v150 = v7;
  v151 = a2;
  if (v29 != 233)
  {
    if ((v29 & 0xFE) == 0x70)
    {
      if (((*(_DWORD *)v11 >> 18) & 0x3F) == 0x19)
      {
        v34 = (unsigned __int8 *)*((_QWORD *)v11 + 3);
        goto LABEL_59;
      }
      v37 = *((_QWORD *)v11 + 3);
    }
    else
    {
      v35 = *(_QWORD *)v11;
      v36 = HIDWORD(*(_QWORD *)v11) & 0x3FLL;
      if ((HIDWORD(*(_QWORD *)v11) & 0x3F) > 0x24)
      {
        if ((_DWORD)v36 == 38)
        {
          v38 = sub_22EF6A330(v10, v23);
          LODWORD(v158) = v38;
          if (v38 <= 0x40)
          {
            v33 = (const char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v38);
            if (!v38)
              v33 = 0;
            goto LABEL_36;
          }
        }
        else
        {
          v138 = sub_22EF6A330(v10, v23);
          LODWORD(v158) = v138;
          if (v138 <= 0x40)
          {
            v139 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
            if (!v138)
              LOBYTE(v139) = 0;
            v33 = (const char *)(v139 & 1);
            goto LABEL_36;
          }
        }
LABEL_112:
        llvm::APInt::initSlowCase((llvm::APInt *)&v157);
        goto LABEL_37;
      }
      if ((_DWORD)v36 == 18)
      {
        v34 = *(unsigned __int8 **)&v11[8 * ((v35 >> 18) & 1) + 16 + BYTE3(v35)];
        goto LABEL_59;
      }
      v37 = *(_QWORD *)&v11[8 * ((v35 >> 18) & 1) + 16 + BYTE3(v35)];
    }
    v34 = (unsigned __int8 *)(sub_22EB2941C(a1, 0, 0, 7, v37) & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_59;
  }
  v30 = qword_22F4959B8[((unint64_t)*(unsigned int *)v11 >> 18) & 0x1F];
  v31 = sub_22EF6A330(v10, v23);
  LODWORD(v158) = v31;
  if (v31 > 0x40)
    goto LABEL_112;
  v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
  if (!v31)
    v32 = 0;
  v33 = (const char *)(v32 & v30);
LABEL_36:
  v157 = v33;
LABEL_37:
  v34 = (unsigned __int8 *)sub_22E3CD3D4(v10 + 2032, 32, 3);
  sub_22EFF8F1C((uint64_t)v34, v10, (uint64_t)&v157, v23, 0);
  if (v158 >= 0x41 && v157)
    MEMORY[0x2348A0E84](v157, 0x1000C8000313F17);
LABEL_59:
  v39 = *(_QWORD *)(a1 + 88);
  v144 = sub_22EF579A8(v39, v23, 0);
  v40 = sub_22EF5F8C4(v39, v23, 1);
  v157 = "Distance";
  v158 = (llvm *)8;
  v159 = v40;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  sub_22ED379B0(a1, 0, 0, 0, (uint64_t)&v157, 2, 0);
  sub_22E905168(a1, 0);
  v41 = *(_QWORD *)(a1 + 216);
  if (v41)
    v42 = v41 - 40;
  else
    v42 = 0;
  v43 = *(_QWORD *)(v42 + 88);
  v166 = 0;
  v167 = 0;
  v168[0] = 0;
  v145 = sub_22EB21CE8(a1, v43, v23, 1, (uint64_t)&v166, 0, 0, 0, 0, 0);
  v166 = (char *)v168;
  v44.n128_u64[0] = 0x400000000;
  v167 = 0x400000000;
  v45 = sub_22ECB3850((_QWORD *)a1, (uint64_t)&v166, v20, ".start", 6uLL, v44);
  v47 = sub_22ECB3850((_QWORD *)a1, (uint64_t)&v166, v19, ".stop", 5uLL, v46);
  v49 = sub_22ECB3850((_QWORD *)a1, (uint64_t)&v166, v34, ".step", 5uLL, v48);
  v155 = sub_22EF6A330(v39, v23);
  v146 = (unint64_t)v34;
  if (v155 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v154);
  else
    v154 = 0;
  v50 = sub_22E3CD3D4(v39 + 2032, 32, 3);
  sub_22EFF8F1C(v50, v39, (uint64_t)&v154, v23, 0);
  if (v155 >= 0x41 && v154)
    MEMORY[0x2348A0E84](v154, 0x1000C8000313F17);
  v51 = sub_22EF6A330(v39, v23);
  v155 = v51;
  if (v51 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v154);
  }
  else
  {
    if (v51)
      v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
    else
      LOBYTE(v52) = 0;
    v154 = v52 & 1;
  }
  v53 = sub_22E3CD3D4(v39 + 2032, 32, 3);
  sub_22EFF8F1C(v53, v39, (uint64_t)&v154, v23, 0);
  if (v155 >= 0x41 && v154)
    MEMORY[0x2348A0E84](v154, 0x1000C8000313F17);
  v147 = v23;
  if (v152 == 15)
  {
    v54 = *(_QWORD *)(v49 + 48);
    *(_DWORD *)(v49 + 28) |= 0x800u;
    sub_22EFC9100(v49, *(_QWORD *)(a1 + 88));
    v55 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v49 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v56 = sub_22E3CD3D4(v55 + 2032, 32, 3);
    sub_22EFF6AE4(v56, v55, 0, 0, 0, v49, 0, (uint64_t)&v154, 0, 0, v54, 1, 0, 0);
    v153 = sub_22EB4785C(a1, 0, 0, 10, v56, v50) & 0xFFFFFFFFFFFFFFFELL;
    v57 = *(_QWORD *)(v47 + 48);
    *(_DWORD *)(v47 + 28) |= 0x800u;
    sub_22EFC9100(v47, *(_QWORD *)(a1 + 88));
    v58 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v47 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v59 = sub_22E3CD3D4(v58 + 2032, 32, 3);
    sub_22EFF6AE4(v59, v58, 0, 0, 0, v47, 0, (uint64_t)&v154, 0, 0, v57, 1, 0, 0);
    v60 = *(_QWORD *)(v45 + 48);
    *(_DWORD *)(v45 + 28) |= 0x800u;
    sub_22EFC9100(v45, *(_QWORD *)(a1 + 88));
    v61 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v45 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v62 = sub_22E3CD3D4(v61 + 2032, 32, 3);
    sub_22EFF6AE4(v62, v61, 0, 0, 0, v45, 0, (uint64_t)&v154, 0, 0, v60, 1, 0, 0);
    v63 = sub_22EB4785C(a1, 0, 0, 6, v59, v62);
    v64 = sub_22E95CFA4(a1, 0, v144, 0, v63 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
    v65 = *(_QWORD *)(v49 + 48);
    *(_DWORD *)(v49 + 28) |= 0x800u;
    sub_22EFC9100(v49, *(_QWORD *)(a1 + 88));
    v66 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v49 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v67 = sub_22E3CD3D4(v66 + 2032, 32, 3);
    sub_22EFF6AE4(v67, v66, 0, 0, 0, v49, 0, (uint64_t)&v154, 0, 0, v65, 1, 0, 0);
    v142 = sub_22EB4785C(a1, 0, 0, 3, v64, v67) & 0xFFFFFFFFFFFFFFFELL;
    v68 = *(_QWORD *)(v45 + 48);
    *(_DWORD *)(v45 + 28) |= 0x800u;
    sub_22EFC9100(v45, *(_QWORD *)(a1 + 88));
    v69 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v45 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v70 = sub_22E3CD3D4(v69 + 2032, 32, 3);
    sub_22EFF6AE4(v70, v69, 0, 0, 0, v45, 0, (uint64_t)&v154, 0, 0, v68, 1, 0, 0);
    v71 = *(_QWORD *)(v47 + 48);
    *(_DWORD *)(v47 + 28) |= 0x800u;
    sub_22EFC9100(v47, *(_QWORD *)(a1 + 88));
    v72 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v47 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v73 = sub_22E3CD3D4(v72 + 2032, 32, 3);
    sub_22EFF6AE4(v73, v72, 0, 0, 0, v47, 0, (uint64_t)&v154, 0, 0, v71, 1, 0, 0);
    v74 = sub_22EB4785C(a1, 0, 0, 6, v70, v73);
    v75 = sub_22E95CFA4(a1, 0, v144, 0, v74 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
    v76 = *(_QWORD *)(v49 + 48);
    *(_DWORD *)(v49 + 28) |= 0x800u;
    sub_22EFC9100(v49, *(_QWORD *)(a1 + 88));
    v77 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v49 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v78 = sub_22E3CD3D4(v77 + 2032, 32, 3);
    sub_22EFF6AE4(v78, v77, 0, 0, 0, v49, 0, (uint64_t)&v154, 0, 0, v76, 1, 0, 0);
    v79 = sub_22EB2941C(a1, 0, 0, 7, v78);
    v80 = sub_22EB4785C(a1, 0, 0, 3, v75, v79 & 0xFFFFFFFFFFFFFFFELL);
    v81 = sub_22EB2F86C(a1, 0, 0, v153, v80 & 0xFFFFFFFFFFFFFFFELL, v142);
    v83 = v150;
    v82 = v151;
    v84 = (unint64_t)v148;
    v85 = v145;
  }
  else
  {
    v141 = v50;
    v143 = v53;
    v86 = *(_QWORD *)(v45 + 48);
    *(_DWORD *)(v45 + 28) |= 0x800u;
    sub_22EFC9100(v45, *(_QWORD *)(a1 + 88));
    v87 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v45 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v88 = sub_22E3CD3D4(v87 + 2032, 32, 3);
    sub_22EFF6AE4(v88, v87, 0, 0, 0, v45, 0, (uint64_t)&v154, 0, 0, v86, 1, 0, 0);
    v89 = *(_QWORD *)(v47 + 48);
    *(_DWORD *)(v47 + 28) |= 0x800u;
    sub_22EFC9100(v47, *(_QWORD *)(a1 + 88));
    v90 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v47 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v91 = sub_22E3CD3D4(v90 + 2032, 32, 3);
    sub_22EFF6AE4(v91, v90, 0, 0, 0, v47, 0, (uint64_t)&v154, 0, 0, v89, 1, 0, 0);
    v140 = sub_22EB4785C(a1, 0, 0, v152, v88, v91) & 0xFFFFFFFFFFFFFFFELL;
    if (v152 == 13)
      v92 = v45;
    else
      v92 = v47;
    if (v152 == 13)
      v93 = v47;
    else
      v93 = v45;
    if (v152 == 11)
      v94 = v45;
    else
      v94 = v92;
    if (v152 == 11)
      v95 = v47;
    else
      v95 = v93;
    v96 = *(_QWORD *)(v94 + 48);
    *(_DWORD *)(v94 + 28) |= 0x800u;
    sub_22EFC9100(v94, *(_QWORD *)(a1 + 88));
    v97 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v94 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v98 = sub_22E3CD3D4(v97 + 2032, 32, 3);
    sub_22EFF6AE4(v98, v97, 0, 0, 0, v94, 0, (uint64_t)&v154, 0, 0, v96, 1, 0, 0);
    v99 = *(_QWORD *)(v95 + 48);
    *(_DWORD *)(v95 + 28) |= 0x800u;
    sub_22EFC9100(v95, *(_QWORD *)(a1 + 88));
    v100 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v95 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v101 = sub_22E3CD3D4(v100 + 2032, 32, 3);
    sub_22EFF6AE4(v101, v100, 0, 0, 0, v95, 0, (uint64_t)&v154, 0, 0, v99, 1, 0, 0);
    v102 = sub_22EB4785C(a1, 0, 0, 6, v98, v101);
    v103 = sub_22E95CFA4(a1, 0, v144, 0, v102 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
    if ((v152 & 0x3E) == 0xC)
      v103 = sub_22EB4785C(a1, 0, 0, 5, v103, v53) & 0xFFFFFFFFFFFFFFFELL;
    v104 = *(_QWORD *)(v49 + 48);
    *(_DWORD *)(v49 + 28) |= 0x800u;
    sub_22EFC9100(v49, *(_QWORD *)(a1 + 88));
    v105 = *(_QWORD *)(a1 + 88);
    v154 = *(_QWORD *)(v49 + 40);
    v155 = 0;
    sub_22EFC6D6C((uint64_t)&v156, v154);
    v106 = sub_22E3CD3D4(v105 + 2032, 32, 3);
    sub_22EFF6AE4(v106, v105, 0, 0, 0, v49, 0, (uint64_t)&v154, 0, 0, v104, 1, 0, 0);
    v83 = v150;
    v82 = v151;
    v84 = (unint64_t)v148;
    if (v152 == 13 || v152 == 11)
      v106 = sub_22EB2941C(a1, 0, 0, 7, v106) & 0xFFFFFFFFFFFFFFFELL;
    v85 = v145;
    v107 = sub_22EB4785C(a1, 0, 0, 6, v106, v143);
    v108 = sub_22EB4785C(a1, 0, 0, 5, v103, v107 & 0xFFFFFFFFFFFFFFFELL);
    v109 = sub_22EB4785C(a1, 0, 0, 3, v108 & 0xFFFFFFFFFFFFFFFELL, v106);
    v81 = sub_22EB2F86C(a1, 0, 0, v140, v109 & 0xFFFFFFFFFFFFFFFELL, v141);
  }
  v110 = sub_22EB4785C(a1, *(_QWORD *)(a1 + 12888), 0, 21, v85, v81 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
  v111 = v167;
  if (v167 >= HIDWORD(v167))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v111 = v167;
  }
  *(_QWORD *)&v166[8 * v111] = v110;
  LODWORD(v167) = v167 + 1;
  v112 = (unint64_t)sub_22ED2C004((_QWORD *)a1, 0, 0, (_BYTE **)v166, v167) & 0xFFFFFFFFFFFFFFFELL;
  if (v166 != (char *)v168)
    free(v166);
  v113 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  --*(_QWORD *)(v113 + 360);
  v114 = sub_22ED37CF8((_QWORD *)a1, v112);
  v115 = *v82;
  v116 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), v149, 1);
  v166 = "LoopVar";
  v167 = 7;
  v168[0] = v116;
  v168[1] = "Logical";
  v168[2] = 7;
  v168[3] = v147;
  memset(&v168[4], 0, 24);
  sub_22ED379B0(a1, 0, 0, 0, (uint64_t)&v166, 3, 0);
  v117 = *(_QWORD *)(v84 + 16);
  v157 = 0;
  v154 = 0;
  sub_22EB4EE10(a1, v117, 0, 1, 0, 1, (uint64_t *)&v157, (uint64_t *)&v154, 0);
  sub_22E905168(a1, 0);
  v118 = *(_QWORD *)(a1 + 216);
  if (v118)
    v119 = v118 - 40;
  else
    v119 = 0;
  v120 = *(_QWORD *)(v119 + 88);
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v121 = sub_22EB21CE8(a1, v120, v149, 1, (uint64_t)&v157, 0, 0, 0, 0, 0);
  v122 = *(_QWORD *)(v119 + 96);
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v123 = sub_22EB21CE8(a1, v122, v147, 1, (uint64_t)&v157, 0, 0, 0, 0, 0);
  v158 = 0;
  v159 = 0;
  v157 = (const char *)a1;
  LODWORD(v160) = 0;
  v161 = v165;
  v162 = v165;
  v124.n128_u64[0] = 2;
  v163 = 2;
  v164 = 0;
  sub_22ECB399C(&v157, v84, v124);
  v126 = v125 & 0xFFFFFFFFFFFFFFFELL;
  sub_22ECB399C(&v157, v146, v127);
  v129 = sub_22EB4785C(a1, 0, 0, 2, v128 & 0xFFFFFFFFFFFFFFFELL, v123);
  v130 = sub_22EB4785C(a1, 0, 0, 5, v126, v129 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
  if (v115 == 5)
    v130 = sub_22EB2941C(a1, 0, 0, 5, v130) & 0xFFFFFFFFFFFFFFFELL;
  v131 = sub_22EB4785C(a1, *(_QWORD *)(a1 + 12888), 0, 21, v121, v130);
  if (v162 != v161)
    free(v162);
  llvm::deallocate_buffer(v158, (void *)(16 * v160));
  v132 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  --*(_QWORD *)(v132 + 360);
  v133 = sub_22ED37CF8((_QWORD *)a1, v131 & 0xFFFFFFFFFFFFFFFELL);
  v134 = *(_QWORD *)(v83 + 48);
  v135 = v133 & 0xFFFFFFFFFFFFFFFELL;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v136 = sub_22EB21CE8(a1, v83, v134, 1, (uint64_t)&v157, 0, 0, 0, 0, 0);
  return sub_22F33C9AC(*(_QWORD *)(a1 + 88), (uint64_t)v82, v114 & 0xFFFFFFFFFFFFFFFELL, v135, v136);
}

uint64_t sub_22EC87DEC()
{
  _QWORD *v0;
  unsigned int v1;
  int v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t kk;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  _BOOL4 v33;
  uint64_t v34;
  unsigned int v35;
  std::string::size_type v36;
  void **v37;
  std::string *p_src;
  std::string *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  int v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  llvm *v59;
  char v60;
  int v61;
  char v63;
  _BOOL4 v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  unsigned int v68;
  const void *v69;
  int v70;
  size_t v71;
  uint64_t j;
  std::string::size_type *v73;
  uint64_t k;
  _QWORD *v75;
  uint64_t m;
  _QWORD *v77;
  uint64_t v78;
  _DWORD *v79;
  BOOL v80;
  uint64_t v81;
  std::string *v82;
  void **v83;
  unint64_t n;
  void **v85;
  uint64_t v86;
  void **v87;
  unsigned int v88;
  int v89;
  uint64_t *v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 **v110;
  uint64_t v111;
  unsigned __int8 *v112;
  __int128 *v113;
  _DWORD *v114;
  _DWORD *v115;
  int v116;
  uint64_t v117;
  std::string::size_type *p_size;
  uint64_t v119;
  void **v120;
  void **v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  _DWORD *v129;
  int v130;
  _BOOL4 v131;
  uint64_t ii;
  void **v133;
  uint64_t jj;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  std::string::size_type *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153[4];
  __int128 v154;
  __int128 v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  void *__src;
  size_t __len;
  void *v163[14];
  void *v164;
  uint64_t v165;
  llvm *v166;
  uint64_t v167;
  void *OpenMPDirectiveName;
  uint64_t v169;
  _BYTE v170[64];
  __int128 __dst;
  __int128 v172;
  void *v173;
  uint64_t v174;
  void *v175[2];
  uint64_t v176;
  void **v177;
  void *v178;
  unsigned int v179;
  _BYTE v180[728];
  int v181;
  int v182;
  llvm *v183;
  unsigned int v184;
  char v185;
  llvm *v186;
  unsigned int v187;
  void *__p;
  uint64_t v189;
  int v190;
  std::string v191;
  uint64_t v192;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v6 = v5;
  v151 = v7;
  v8 = v4;
  v10 = v9;
  v11 = v1;
  v12 = v0;
  v192 = *MEMORY[0x24BDAC8D0];
  v13 = &v3[8 * v4];
  v14 = v3;
  if (v4)
  {
    v17 = 8 * v4;
    v14 = v3;
    while (*(_DWORD *)(*(_QWORD *)v14 + 8) != 10)
    {
      v14 += 8;
      v17 -= 8;
      if (!v17)
        goto LABEL_8;
    }
  }
  if (v14 == v13 || (v15 = *(_QWORD *)v14) == 0)
LABEL_8:
    v16 = 3;
  else
    v16 = *(_DWORD *)(v15 + 16);
  v18 = v5;
  if (v1 - 9 >= 0xFFFFFFFE
    && ((v2 - 33) > 0x2A || ((1 << (v2 - 33)) & 0x40000100081) == 0))
  {
    sub_22E8FCA40(v0, v5, 0x110Cu, 0, (uint64_t)v175);
    v191.__r_.__value_.__r.__words[0] = llvm::omp::getOpenMPDirectiveName();
    v191.__r_.__value_.__l.__size_ = v36;
    v37 = v175;
    p_src = &v191;
LABEL_57:
    sub_22F2F2210((uint64_t)v37, (uint64_t)p_src);
LABEL_58:
    v39 = (std::string *)v175;
    goto LABEL_75;
  }
  v147 = v2;
  v150 = v3;
  v19 = v0[1536];
  v20 = sub_22ECB1B04(v19);
  v152 = (uint64_t)v13;
  if (!v20 || !*(_QWORD *)(v20 + 992))
    goto LABEL_14;
  v23 = sub_22ECB2028(v19);
  v144 = v10;
  if (v23)
    v24 = *(_DWORD *)(v23 + 960);
  else
    v24 = 89;
  LODWORD(v165) = v24;
  LOBYTE(__dst) = 1;
  LODWORD(__p) = 0;
  v33 = sub_22F421AC0(v24);
  if (!v33
    || ((v34 = *(_QWORD *)(v12[9] + 72), v11 == 39) || v34 >= 0x2E)
    && (v34 < 0x32 || v11 <= 0x36 && ((1 << v11) & 0x48008000000004) != 0))
  {
    if (v24 == 2)
    {
      sub_22E8FCA40(v12, v6, 0x10D1u, 0, (uint64_t)&v191);
      v39 = &v191;
      goto LABEL_75;
    }
    v146 = v8;
    if (v11 == 52)
    {
      if (v24 != 48 && v24 != 53)
      {
        sub_22E8FCA40(v12, v6, 0x10C6u, 0, (uint64_t)v175);
        LOBYTE(OpenMPDirectiveName) = v24 != 89;
        v48 = sub_22E894E38((uint64_t)v175, (unsigned __int8 *)&OpenMPDirectiveName);
        __src = (void *)llvm::omp::getOpenMPDirectiveName();
        __len = v49;
        p_src = (std::string *)&__src;
LABEL_188:
        v37 = (void **)v48;
        goto LABEL_57;
      }
    }
    else
    {
      LOBYTE(v40) = v24 == 89;
      if (v24 != 89 || v11 - 7 < 2)
      {
LABEL_69:
        if (v11 - 7 <= 1)
        {
          if (v147 <= 52)
          {
            if (v147 == 33)
            {
              if (v24 - 33 > 0x33 || ((1 << (v24 - 33)) & 0x8002040000401) == 0)
              {
                v41 = v24 == 89;
                if (v24 != 19)
                  goto LABEL_168;
                goto LABEL_158;
              }
            }
            else
            {
              if (v147 != 40)
                goto LABEL_168;
              if (v24 != 40)
              {
                v41 = v24 == 89;
                if (v24 != 60)
                  goto LABEL_168;
                goto LABEL_158;
              }
            }
            goto LABEL_154;
          }
          if (v147 == 53)
          {
            if (v24 > 0x35)
              goto LABEL_168;
            v51 = 1 << v24;
            v52 = 0x31000000000000;
          }
          else
          {
            if (v147 != 75)
              goto LABEL_168;
            if (v24 == 74)
            {
LABEL_154:
              v41 = v24 == 89;
              goto LABEL_158;
            }
            if (*(_DWORD *)(v12[9] + 72) < 0x32u || v24 - 36 > 0x28)
              goto LABEL_168;
            v51 = 1 << (v24 - 36);
            v52 = 0x10000000401;
          }
          v41 = v24 == 89;
          if ((v51 & v52) == 0)
            goto LABEL_168;
          goto LABEL_158;
        }
        switch(v11)
        {
          case 9u:
            if (*(_QWORD *)v144)
            {
              LODWORD(OpenMPDirectiveName) = 0;
              *(_OWORD *)v175 = *(_OWORD *)v144;
              v176 = *(_QWORD *)(v144 + 16);
              v177 = &OpenMPDirectiveName;
              if (sub_22EC7EC08(v19, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))sub_22ECCF08C, (uint64_t)v175))
              {
                sub_22E8FCA40(v12, v6, 0x10D2u, 0, (uint64_t)v175);
                __src = *(void **)v144;
                sub_22E894538((uint64_t)v175, (uint64_t *)&__src);
                sub_22E903BEC((unsigned int *)v175);
                if (!(_DWORD)OpenMPDirectiveName)
                  return 1;
                sub_22E8FCA40(v12, (int)OpenMPDirectiveName, 0x1712u, 0, (uint64_t)&v164);
                v39 = (std::string *)&v164;
LABEL_75:
                sub_22E903BEC((unsigned int *)v39);
                return 1;
              }
              goto LABEL_113;
            }
LABEL_88:
            if (sub_22F421A30(v11) && !sub_22F421A78(v11))
            {
              v46 = v11 - 66;
              if (v11 - 66 <= 0x21)
              {
                if (((1 << v46) & 0x100000073) != 0)
                {
                  v41 = 0;
                  goto LABEL_158;
                }
                if (((1 << v46) & 0x2001CC000) != 0)
                  goto LABEL_92;
              }
              if (!sub_22F421A30(v24)
                && (v24 - 74 > 0x19 || ((1 << (v24 - 74)) & 0x3F0000D) == 0)
                && (v24 > 0x2F || ((1 << v24) & 0xE0B800000200) == 0))
              {
                v41 = 0;
                LODWORD(__p) = 1;
                goto LABEL_158;
              }
              v47 = 1;
            }
            else
            {
              v41 = 0;
              v42 = v11 - 39;
              if (v42 > 0x3C)
                goto LABEL_158;
              if (((1 << (v11 - 39)) & 0x1000E60000000000) != 0)
              {
LABEL_92:
                v43 = *(_QWORD *)(v12[9] + 72);
                if (v24 != 56 && v43 <= 0x2D)
                {
                  v44 = 3;
                  goto LABEL_95;
                }
                LODWORD(__p) = 3;
                if (v43 >= 0x32)
                {
                  if (v24 != 56)
                  {
                    v41 = v24 == 89;
                    if (v24 != 89)
                      goto LABEL_168;
                    goto LABEL_158;
                  }
                  goto LABEL_154;
                }
                v41 = v24 == 89;
LABEL_158:
                if (v11 - 56 <= 0x2A && ((1 << (v11 - 56)) & 0x6000001CF91) != 0)
                  goto LABEL_160;
                if (v11 - 57 <= 0x10)
                {
                  v40 = v41;
                  if (((1 << (v11 - 57)) & 0x10007) != 0)
                    goto LABEL_183;
                }
LABEL_114:
                if (v24 == 80 || v24 == 66)
                {
                  if (sub_22F421A78(v11))
                  {
                    LOBYTE(v45) = 0;
                  }
                  else
                  {
                    v45 = sub_22F421B08(v11) ^ 1;
                    if (v11 == 94)
                      LOBYTE(v45) = 0;
                  }
                  LODWORD(__p) = 1;
                  goto LABEL_161;
                }
LABEL_160:
                LOBYTE(v45) = 0;
LABEL_161:
                v40 = v41;
                if (v11 == 94 && (v45 & 1) == 0)
                {
                  LODWORD(__p) = 4;
                  if (!v16 && v24 != 66 && v24 != 80)
                    goto LABEL_168;
                  goto LABEL_196;
                }
                if ((v45 & 1) != 0)
                  goto LABEL_168;
LABEL_183:
                v63 = v11 - 16;
                if (v11 - 16 > 0x39)
                  goto LABEL_195;
                if (((1 << v63) & 0x3CF9F0000000000) != 0)
                {
LABEL_185:
                  v175[0] = &v165;
                  v64 = sub_22EC7EC08(v19, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))sub_22ECCF0BC, (uint64_t)v175);
                  LOBYTE(__dst) = 0;
                  if (v64)
                  {
                    if (v40)
                      goto LABEL_169;
                    break;
                  }
LABEL_196:
                  v8 = v146;
                  goto LABEL_14;
                }
                if (((1 << v63) & 0x39) == 0)
                {
LABEL_195:
                  if (v11 - 97 >= 2)
                    goto LABEL_196;
                  goto LABEL_185;
                }
                LODWORD(__p) = 4;
                if (v24 == 80 || v24 == 66)
                {
                  if (v11 - 57 > 0x10 || ((1 << (v11 - 57)) & 0x10007) == 0)
                    goto LABEL_196;
                  goto LABEL_185;
                }
LABEL_168:
                if (v40)
                  goto LABEL_169;
                break;
              }
              if (v11 != 39)
              {
                if (v42 == 12)
                {
                  if (*(_DWORD *)(v12[9] + 72) >= 0x32u && v24 <= 0x36 && ((1 << v24) & 0x40180600000000) != 0)
                  {
                    LODWORD(__p) = 5;
                    v41 = v24 == 89;
                    goto LABEL_114;
                  }
                  v44 = 5;
LABEL_95:
                  LODWORD(__p) = v44;
                  if (v24 == 89)
                  {
LABEL_169:
                    sub_22E8FCA40(v12, v18, 0x10C5u, 0, (uint64_t)v175);
                    __src = (void *)llvm::omp::getOpenMPDirectiveName();
                    __len = v53;
                    v54 = sub_22F2F2210((uint64_t)v175, (uint64_t)&__src);
                    sub_22E8900C4(v54, (int *)&__p);
                    goto LABEL_58;
                  }
                  break;
                }
                goto LABEL_158;
              }
              if ((v24 - 36 > 0x29 || ((1 << (v24 - 36)) & 0x34000000C03) == 0) && v24 != 9)
              {
                if (v33)
                {
                  v41 = 0;
                  LODWORD(__p) = 2;
                  goto LABEL_114;
                }
                v138 = sub_22ECB2028(v19);
                if (v138)
                {
                  v139 = *(unsigned __int8 *)(v138 + 1056);
                  LODWORD(__p) = 2;
                  if (v139)
                  {
LABEL_113:
                    v41 = 0;
                    goto LABEL_114;
                  }
                  break;
                }
              }
              v47 = 2;
            }
            LODWORD(__p) = v47;
            break;
          case 3u:
            if (!sub_22F421A30(v24) && (v24 - 74 > 0x19 || ((1 << (v24 - 74)) & 0x3F0000D) == 0))
            {
              v41 = 0;
              if (v24 > 0x2F || ((1 << v24) & 0xE0B800000200) == 0)
                goto LABEL_114;
            }
            break;
          case 0x5Fu:
          case 0x23u:
            if (!sub_22F421A30(v24))
            {
              v41 = 0;
              if (v24 - 36 > 0x3F || ((1 << (v24 - 36)) & 0xF400034000000C03) == 0)
                goto LABEL_158;
            }
            break;
          default:
            goto LABEL_88;
        }
        sub_22E8FCA40(v12, v18, 0x10D0u, 0, (uint64_t)v175);
        v65 = sub_22E894E38((uint64_t)v175, (unsigned __int8 *)&__dst);
        __src = (void *)llvm::omp::getOpenMPDirectiveName();
        __len = v66;
        v48 = sub_22F2F2210(v65, (uint64_t)&__src);
        sub_22E8900C4(v48, (int *)&__p);
        OpenMPDirectiveName = (void *)llvm::omp::getOpenMPDirectiveName();
        v169 = v67;
        p_src = (std::string *)&OpenMPDirectiveName;
        goto LABEL_188;
      }
      if (v11 - 51 <= 0x30)
      {
        if (v11 == 51)
          goto LABEL_69;
        if (((1 << (v11 - 51)) & 0x1000E60000000) != 0)
          goto LABEL_88;
      }
    }
    v8 = v146;
    goto LABEL_14;
  }
  if (v11 == 54)
    v35 = 6857;
  else
    v35 = 4307;
  sub_22E8FCA40(v12, v6, v35, 0, (uint64_t)v175);
  LODWORD(__src) = *(_DWORD *)(v12[9] + 72) > 0x31u;
  sub_22E8900C4((uint64_t)v175, (int *)&__src);
  sub_22E903BEC((unsigned int *)v175);
  if (v11 != 54)
    return 1;
LABEL_14:
  OpenMPDirectiveName = v170;
  v169 = 0x800000000;
  v165 = 1;
  for (i = 8; i != 72; i += 16)
    *(uint64_t *)((char *)&v165 + i) = -4096;
  v22 = v150;
  sub_22F2633B0((uint64_t)&OpenMPDirectiveName, v150, v13);
  v149 = v11;
  v145 = v8;
  if (!v151
    || (sub_22EFC7ADC(v12[27]) & 1) != 0
    || v11 <= 0x34 && ((1 << v11) & 0x10000800000204) != 0
    || v11 == 95
    || (v11 & 0xFFFFFFFD) == 0x58)
  {
LABEL_18:
    v158 = &v160;
    v159 = 0x400000000;
    __asm { BR              X10 }
  }
  sub_22EC91C3C((uint64_t)v175, v12[1536], (uint64_t)v12, v151);
  v25 = sub_22F33BDCC(v11);
  v26 = (_DWORD *)v151;
  if (v25 >= 1)
  {
    v27 = v25 + 1;
    v26 = (_DWORD *)v151;
    do
    {
      v26 = *(_DWORD **)&v26[2 * v26[2] + 8];
      --v27;
    }
    while (v27 > 1);
  }
  sub_22EC91D64((uint64_t)v175, v26);
  if (v11 - 36 > 0x29 || ((1 << (v11 - 36)) & 0x36000E00C03) == 0)
  {
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191.__r_.__value_.__r.__words[2];
    v191.__r_.__value_.__l.__size_ = 0x400000000;
    sub_22F421BB4((uint64_t)&v191, v11);
    v50 = v151;
    if (LODWORD(v191.__r_.__value_.__r.__words[1]) >= 2)
    {
      v50 = v151;
      if (*(_DWORD *)v191.__r_.__value_.__l.__data_ == 74)
        v50 = *(_QWORD *)(v151 + 8 * *(unsigned int *)(v151 + 8) + 32);
    }
    sub_22EC92E00((uint64_t)v175, v50);
    if ((std::string::size_type *)v191.__r_.__value_.__l.__data_ != &v191.__r_.__value_.__r.__words[2])
      free(v191.__r_.__value_.__l.__data_);
  }
  v142 = v176;
  if (!(_BYTE)v176)
  {
    v55 = v165;
    if ((v165 & 1) == 0)
    {
      llvm::deallocate_buffer(v166, (void *)(16 * v167));
      v55 = v165;
    }
    v56 = v181;
    if ((v181 & 1) != 0 || (v57 = v184, v184 <= 4))
    {
      v61 = v181 & 1;
      v60 = v55 | 1;
      v59 = v166;
      v58 = 16 * v167;
    }
    else
    {
      LODWORD(v165) = v55 & 0xFFFFFFFE;
      v58 = 16 * v184;
      v59 = (llvm *)MEMORY[0x23489D23C](v58, 8);
      v166 = v59;
      v167 = v57;
      v56 = v181;
      v60 = v165;
      v61 = v181 & 1;
    }
    v68 = v56 & 0xFFFFFFFE;
    if (v61)
      v69 = &v183;
    else
      v69 = v183;
    v70 = v60 & 1;
    LODWORD(v165) = v70 | v68;
    HIDWORD(v165) = v182;
    if (v70)
    {
      v59 = (llvm *)&v166;
      v71 = 64;
    }
    else
    {
      v71 = v58;
    }
    memcpy(v59, v69, v71);
    __p = &v190;
    v189 = 0x400000000;
    sub_22E3D0148((uint64_t)&__p, v178, (_BYTE *)v178 + 8 * v179);
    for (j = 0; j != 72; j += 6)
    {
      v73 = (std::string::size_type *)((char *)&v191 + j * 8);
      *v73 = (std::string::size_type)&v191.__r_.__value_.__r.__words[j + 2];
      v73[1] = 0x400000000;
    }
    for (k = 0; k != 120; k += 40)
    {
      v75 = (void **)((char *)&v164 + k);
      *v75 = (char *)&v164 + k + 16;
      v75[1] = 0x500000000;
    }
    for (m = 0; m != 15; m += 5)
    {
      v77 = (void **)((char *)&__src + m * 8);
      *v77 = &v163[m];
      v77[1] = 0x500000000;
    }
    LODWORD(v174) = 0;
    v173 = 0;
    if (v8)
    {
      v78 = 8 * v8;
      do
      {
        v79 = *(_DWORD **)v22;
        if (*(_QWORD *)v22)
          v80 = *(_DWORD *)(*(_QWORD *)v22 + 8) == 17;
        else
          v80 = 0;
        if (v80 && v79[4] == 11)
          *((_DWORD *)&v173 + v79[6]) = v79[5];
        v22 += 8;
        v78 -= 8;
      }
      while (v78);
    }
    v81 = 0;
    v82 = &v191;
    v83 = v175;
    do
    {
      for (n = 0; n != 24; n += 6)
        sub_22E3D0148((uint64_t)&v82[n / 3], v83[n + 10], (_BYTE *)v83[n + 10] + 8 * LODWORD(v83[n + 11]));
      v85 = &v175[5 * v81];
      v86 = *((unsigned int *)v85 + 166);
      sub_22F3340DC((uint64_t)(&v164 + 5 * v81), v85[82], (_BYTE *)v85[82] + 4 * v86);
      if ((_DWORD)v86)
      {
        v87 = &__src + 5 * v81;
        v88 = *((_DWORD *)v87 + 2);
        v89 = *((_DWORD *)&v173 + v81);
        do
        {
          if (v88 >= *((_DWORD *)v87 + 3))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v88 = *((_DWORD *)v87 + 2);
          }
          *((_DWORD *)*v87 + v88) = v89;
          v88 = *((_DWORD *)v87 + 2) + 1;
          *((_DWORD *)v87 + 2) = v88;
          --v86;
        }
        while (v86);
      }
      ++v81;
      v82 += 8;
      v83 += 24;
    }
    while (v81 != 3);
    v90 = (uint64_t *)v150;
    if (!v145)
    {
LABEL_257:
      if ((_DWORD)v189)
      {
        v102 = sub_22EC92F80();
        if (v102)
        {
          v103 = v102;
          v104 = v169;
          if (v169 >= HIDWORD(v169))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v104 = v169;
          }
          *((_QWORD *)OpenMPDirectiveName + v104) = v103;
          LODWORD(v169) = v169 + 1;
          v105 = v189 != *(_DWORD *)(v103 + 16);
        }
        else
        {
          v105 = 1;
        }
      }
      else
      {
        v105 = 0;
      }
      if (v149 != 56
        && *(_DWORD *)(v12[9] + 72) >= 0x32u
        && v149 - 60 <= 0x26
        && ((1 << (v149 - 60)) & 0x6000001CF9) != 0)
      {
        *(_QWORD *)&__dst = &v172;
        *((_QWORD *)&__dst + 1) = 0x400000000;
        if (v145)
        {
          v106 = 0;
          v107 = v90;
          do
          {
            v108 = *v107;
            if (*v107)
            {
              if (*(_DWORD *)(v108 + 8) == 66)
              {
                v109 = *(unsigned int *)(v108 + 16);
                if ((_DWORD)v109)
                {
                  v110 = (unsigned __int8 **)(v108 + 104);
                  v111 = 8 * v109;
                  do
                  {
                    v112 = *v110;
                    if (*sub_22EFFA6B0(*v110) != 161)
                    {
                      if (v106 >= HIDWORD(__dst))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        *(_QWORD *)(__dst + 8 * DWORD2(__dst)) = v112;
                        v106 = DWORD2(__dst);
                      }
                      else
                      {
                        *(_QWORD *)(__dst + 8 * v106) = v112;
                      }
                      DWORD2(__dst) = ++v106;
                    }
                    ++v110;
                    v111 -= 8;
                  }
                  while (v111);
                }
              }
            }
            ++v107;
          }
          while (v107 != (uint64_t *)v152);
          v113 = (__int128 *)__dst;
          if (v106)
          {
            v155 = 0u;
            v154 = 0u;
            v153[0] = 0;
            LODWORD(v153[1]) = 0;
            v153[2] = 0;
            LODWORD(v157) = 6;
            LODWORD(v156) = 0;
            LODWORD(v159) = 0;
            v158 = 0;
            v114 = sub_22EC94100(v12, (uint64_t)&v157, 1u, (uint64_t)&v156, 1, (uint64_t)&v154, (__int128 *)v153, 3u, 1, v140, 0, v141, __dst, v106, (int *)&v158, 1, 0, 0);
            v115 = v114;
            v116 = v169;
            if (v169 >= HIDWORD(v169))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              *((_QWORD *)OpenMPDirectiveName + v169) = v115;
              v116 = v169;
            }
            else
            {
              *((_QWORD *)OpenMPDirectiveName + v169) = v114;
            }
            LODWORD(v169) = v116 + 1;
            if (HIDWORD(v155))
              free((void *)v155);
            v113 = (__int128 *)__dst;
          }
          if (v113 != &v172)
            free(v113);
        }
      }
      v117 = 0;
      p_size = &v191.__r_.__value_.__l.__size_;
      do
      {
        v119 = 0;
        v148 = v117;
        v120 = &v164 + 5 * v117;
        v121 = &__src + 5 * v117;
        v143 = p_size;
        do
        {
          v122 = *(unsigned int *)p_size;
          if ((_DWORD)v122)
          {
            v123 = *(p_size - 1);
            __dst = 0u;
            v172 = 0u;
            *(_QWORD *)&v154 = 0;
            DWORD2(v154) = 0;
            *(_QWORD *)&v155 = 0;
            v124 = (uint64_t)*v120;
            v125 = *((_DWORD *)v120 + 2);
            v126 = (uint64_t)*v121;
            v127 = *((unsigned int *)v121 + 2);
            LODWORD(v153[1]) = 0;
            v153[0] = 0;
            v128 = sub_22EC94100(v12, v124, v125, v126, v127, (uint64_t)&__dst, &v154, v119, 1, v140, 0, v141, v123, v122, (int *)v153, 0, 0, 0);
            v129 = v128;
            v130 = v169;
            if (v169 >= HIDWORD(v169))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              *((_QWORD *)OpenMPDirectiveName + v169) = v129;
              v130 = v169;
            }
            else
            {
              *((_QWORD *)OpenMPDirectiveName + v169) = v128;
            }
            LODWORD(v169) = v130 + 1;
            v131 = v122 != v129[4];
            if (HIDWORD(v172))
              free((void *)v172);
            v105 = (v105 | v131) & 1;
          }
          ++v119;
          p_size += 6;
        }
        while (v119 != 4);
        v117 = v148 + 1;
        p_size = v143 + 24;
      }
      while (v148 != 2);
      if (*(_DWORD *)(v12[9] + 72) > 0x31u)
        sub_22EC943FC(v12, v12[1536], (uint64_t)&OpenMPDirectiveName);
      for (ii = 0; ii != -15; ii -= 5)
      {
        v133 = (void **)v163[ii + 8];
        if (&v163[ii + 10] != v133)
          free(v133);
      }
      for (jj = 0; jj != -120; jj -= 40)
      {
        v135 = *(char **)((char *)&v164 + jj + 80);
        if ((char *)&v164 + jj + 96 != v135)
          free(v135);
      }
      v136 = 576;
      do
      {
        v137 = *(char **)((char *)&__p + v136);
        if ((char *)&v190 + v136 != v137)
          free(v137);
        v136 -= 48;
      }
      while (v136);
      if (__p != &v190)
        free(__p);
      v11 = v149;
      goto LABEL_31;
    }
    v91 = v150;
    while (1)
    {
      v92 = *(_QWORD *)v91;
      v93 = *(_DWORD *)(*(_QWORD *)v91 + 8);
      if (!*(_QWORD *)v91 || v93 != 37)
        goto LABEL_248;
      v94 = *(unsigned int *)(v92 + 16);
      if ((_DWORD)v94)
        break;
LABEL_256:
      v91 += 8;
      if (v91 == (_BYTE *)v152)
        goto LABEL_257;
    }
    v95 = (uint64_t *)(v92 + 8 * v94 + 8 * v94 + 8 * v94 + 8 * v94 + 8 * v94 + 96);
    v96 = 8 * v94;
    do
    {
      v97 = *v95;
      if (*v95)
      {
        v98 = v189;
        if (v189 >= HIDWORD(v189))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          *((_QWORD *)__p + v189) = v97;
          v98 = v189;
        }
        else
        {
          *((_QWORD *)__p + v189) = v97;
        }
        LODWORD(v189) = v98 + 1;
      }
      ++v95;
      v96 -= 8;
    }
    while (v96);
    v93 = *(_DWORD *)(v92 + 8);
    v90 = (uint64_t *)v150;
LABEL_248:
    if (v92)
      v99 = v93 == 21;
    else
      v99 = 0;
    if (v99)
    {
      v100 = *(_QWORD *)(v92 + 16);
      v101 = v189;
      if (v189 >= (unint64_t)HIDWORD(v189))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v101 = v189;
      }
      *((_QWORD *)__p + v101) = v100;
      LODWORD(v189) = v189 + 1;
    }
    goto LABEL_256;
  }
LABEL_31:
  if ((v185 & 1) == 0)
    llvm::deallocate_buffer(v186, (void *)(8 * v187));
  v28 = v11;
  if ((v181 & 1) == 0)
    llvm::deallocate_buffer(v183, (void *)(16 * v184));
  for (kk = 0; kk != -120; kk -= 40)
  {
    v30 = *(_BYTE **)&v180[kk + 688];
    if (&v180[kk + 704] != v30)
      free(v30);
  }
  v31 = 576;
  do
  {
    v32 = *(void **)((char *)&v178 + v31);
    if (&v180[v31] != v32)
      free(v32);
    v31 -= 48;
  }
  while (v31);
  if (v178 != v180)
    free(v178);
  if (!v142)
  {
    v11 = v28;
    goto LABEL_18;
  }
  if ((v165 & 1) == 0)
    llvm::deallocate_buffer(v166, (void *)(16 * v167));
  if (OpenMPDirectiveName != v170)
    free(OpenMPDirectiveName);
  return 1;
}

uint64_t sub_22EC91C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t j;
  int64x2_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v5 = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  do
  {
    v6 = a1 + v5;
    *(_QWORD *)(v6 + 80) = a1 + v5 + 96;
    *(_QWORD *)(v6 + 88) = 0x400000000;
    v5 += 48;
  }
  while (v5 != 576);
  for (i = 0; i != 120; i += 40)
  {
    v8 = a1 + i;
    *(_QWORD *)(v8 + 656) = a1 + i + 672;
    *(_QWORD *)(v8 + 664) = 0x500000000;
  }
  *(_QWORD *)(a1 + 776) = 1;
  for (j = 784; j != 848; j += 16)
    *(_QWORD *)(a1 + j) = -4096;
  *(_QWORD *)(a1 + 848) = 1;
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 856) = v10;
  *(int64x2_t *)(a1 + 872) = v10;
  v11 = sub_22ECB1B04(a2);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 960) - 56;
    v13 = v12 > 0x2A;
    v14 = (1 << v12) & 0x6000001CF91;
    if (!v13 && v14 != 0)
    {
      v16 = sub_22ECB1B04(*(_QWORD *)a1);
      v17 = *(unsigned int *)(v16 + 1216);
      if ((_DWORD)v17)
      {
        v18 = *(_DWORD ***)(v16 + 1208);
        v19 = 8 * v17;
        do
        {
          v20 = *v18++;
          sub_22EC91D64(a1, v20);
          v19 -= 8;
        }
        while (v19);
      }
    }
  }
  return a1;
}

void sub_22EC91D64(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_6;
    }
  }
  if (!a2 || v2 != 233)
LABEL_6:
    __asm { BR              X10 }
LABEL_7:
  sub_22ECF76B0(a1, (uint64_t)a2);
}

uint64_t sub_22EC92E00(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)result;
    v4 = (_DWORD *)((8 * v2 + 40) + a2 + 8);
    v5 = 16 * v2;
    do
    {
      v6 = *((_QWORD *)v4 - 1);
      if (((v6 >> 1) & 3) - 1 <= 1)
      {
        v7 = v6 & 0xFFFFFFFFFFFFFFF8;
        v8 = *v3;
        v9 = sub_22ECB1B04(*v3);
        if (!v9
          || ((v10 = *(_DWORD *)(v9 + 960) - 56, v11 = v10 > 0x2A, v12 = (1 << v10) & 0x6000001CF91, !v11)
            ? (v13 = v12 == 0)
            : (v13 = 1),
              v13
           || (result = sub_22EC829E0(v8, v7, 1u, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECCF0FC, (uint64_t)&v20), (result & 1) == 0)))
        {
          v14 = v3[1];
          v19 = *(_QWORD *)(v7 + 48);
          v15 = sub_22F1133DC(&v19, *(_QWORD *)(v14 + 88));
          v16 = *v4;
          *(_DWORD *)(v7 + 28) |= 0x800u;
          sub_22EFC9100(v7, *(_QWORD *)(v14 + 88));
          v17 = *(_QWORD *)(v14 + 88);
          v20 = *(_QWORD *)(v7 + 40);
          LODWORD(v21) = v16;
          sub_22EFC6D6C((uint64_t)&v22, v20);
          v18 = sub_22E3CD3D4(v17 + 2032, 32, 3);
          sub_22EFF6AE4(v18, v17, 0, 0, 0, v7, 1, (uint64_t)&v20, 0, 0, v15, 1, 0, 0);
          result = sub_22EC91D64(v3);
        }
      }
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_22EC92F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v39;
  unint64_t v40;
  _DWORD *v42;
  size_t v43;
  const char *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  size_t v54;
  uint64_t v55;
  const char *v56;
  unint64_t v57;
  _DWORD *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned __int8 **v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  BOOL v105;
  int v106;
  unint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v131;
  const void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  _BOOL4 v141;
  int v142;
  uint64_t v143;
  unsigned __int8 **v144;
  unint64_t v145;
  int v146;
  _BYTE v147[96];
  __int128 v148;
  _BYTE v149[24];
  __int16 v150;
  _QWORD v151[2];
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t OpenMPClauseName;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  unsigned int v161;
  __int128 v162;
  _BYTE v163[12369];
  void *v164;
  uint64_t v165;
  _BYTE v166[32];
  void *v167;
  uint64_t v168;
  _BYTE v169[64];
  void *v170;
  uint64_t v171;
  _BYTE v172[64];
  _QWORD *v173;
  uint64_t v174;
  _QWORD v175[11];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v175[8] = *MEMORY[0x24BDAC8D0];
  v173 = v175;
  v174 = 0x800000000;
  v170 = v172;
  v171 = 0x800000000;
  v167 = v169;
  v168 = 0x800000000;
  v164 = v166;
  v165 = 0x400000000;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = (v6 | (unint64_t)v8 | v10) == 0;
  v13 = sub_22ECB1B04(*(_QWORD *)(v0 + 12288));
  if (v13)
  {
    v146 = *(_DWORD *)(v13 + 1008);
    if (!v2)
      goto LABEL_203;
  }
  else
  {
    v146 = 0;
    if (!v2)
      goto LABEL_203;
  }
  v138 = v11;
  v139 = v9;
  v140 = v7;
  v14 = &v4[v2];
  v141 = v12;
  v144 = v14;
  do
  {
    v15 = *v4;
    v161 = 0;
    v159 = v15;
    v160 = 0;
    v16 = sub_22EC82530(v5, &v159, (int *)&v161, &v160, 0);
    if ((v17 & 1) != 0)
    {
      v18 = v174;
      if (v174 >= (unint64_t)HIDWORD(v174))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v174;
      }
      v173[v18] = v15;
      LODWORD(v174) = v174 + 1;
      v19 = v171;
      if (v171 >= (unint64_t)HIDWORD(v171))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v171;
      }
      *((_QWORD *)v170 + v19) = 0;
      LODWORD(v171) = v171 + 1;
      v20 = v168;
      if (v168 >= (unint64_t)HIDWORD(v168))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v168;
      }
      *((_QWORD *)v167 + v20) = 0;
      LODWORD(v168) = v168 + 1;
    }
    v158 = v16;
    if (!v16)
      goto LABEL_124;
    v21 = v12 ? v146 : v161;
    v161 = v21;
    v22 = *(_QWORD *)(v16 + 48);
    v157 = v22;
    v23 = (*(_DWORD *)(v16 + 28) & 0x7Fu) - 60 >= 7 ? 0 : v16;
    *(_QWORD *)&v162 = &unk_24FAB6EF8;
    DWORD2(v162) = 4227;
    if ((sub_22EE8B0B0((uint64_t)v5, v21, v22) & 1) != 0)
      goto LABEL_124;
    v24 = *(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF0);
    if (!v24 || (v25 = *(_DWORD *)(v24 + 16), (v25 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      {
        v26 = &v157;
        goto LABEL_26;
      }
      v24 = sub_22F10CF48(v24);
      if (!v24)
      {
        v26 = &v157;
        v12 = v141;
        goto LABEL_26;
      }
      v25 = *(_DWORD *)(v24 + 16);
      v12 = v141;
    }
    if ((v25 & 0x100000) != 0)
    {
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v24 || (v126 = *(_DWORD *)(v24 + 16), (v126 & 0xFE) != 0x28))
        {
          v24 = sub_22F10CF48(v24);
          v126 = *(_DWORD *)(v24 + 16);
        }
        v12 = v141;
      }
      while ((v126 & 0x100000) != 0);
    }
    v26 = (unint64_t *)(v24 + 32);
LABEL_26:
    v157 = *v26;
    v27 = sub_22EF5BA38(v5[11], v157);
    v28 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
    if (!v28 || (v29 = *(_DWORD *)(v28 + 16), (v29 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_29;
      v28 = sub_22F10CF48(v28);
      if (!v28)
        goto LABEL_29;
      v29 = *(_DWORD *)(v28 + 16);
    }
    if ((v29 & 0x100000) != 0)
    {
      do
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v28 || (v127 = *(_DWORD *)(v28 + 16), (v127 & 0xFE) != 0x28))
        {
          v28 = sub_22F10CF48(v28);
          v127 = *(_DWORD *)(v28 + 16);
        }
        v12 = v141;
      }
      while ((v127 & 0x100000) != 0);
    }
    v27 = *(_QWORD *)(v28 + 32);
LABEL_29:
    if (v12)
    {
      v143 = 0;
      v142 = 85;
    }
    else
    {
      sub_22EC7F2A4(v5[1536], v158, 0, (uint64_t)&v148);
      v96 = DWORD1(v148);
      v97 = *(_QWORD *)&v149[8];
      v98 = sub_22ECB1B04(v5[1536]);
      v143 = v97;
      v142 = v96;
      if (v98)
        v99 = *(_DWORD *)(v98 + 960);
      else
        v99 = 89;
      v103 = sub_22F10AFE4(v27, v5[11]);
      v104 = DWORD1(v148);
      if (DWORD1(v148) != 29 && DWORD1(v148) != 85)
      {
        v106 = sub_22F421B08(v99) ^ 1;
        if (v104 != 43)
          LOBYTE(v106) = 0;
        if ((v106 & 1) == 0 && *(_QWORD *)v149)
          goto LABEL_173;
      }
      if (!v103)
      {
        if (!v23)
          goto LABEL_152;
        if ((*(_DWORD *)(v23 + 28) & 0x7F) == 0x40)
        {
          v105 = 0;
        }
        else
        {
          v111 = *(_QWORD *)(v23 + 16);
          v112 = v111 & 0xFFFFFFFFFFFFFFF8;
          if ((v111 & 4) != 0)
            v112 = *(_QWORD *)v112;
          v105 = (*(_WORD *)(v112 + 8) & 0x7Eu) - 34 < 4;
        }
        if (!v105)
        {
LABEL_152:
          if (!*(_QWORD *)v149 && v104 != 73 && v104 != 85)
          {
LABEL_173:
            sub_22E8FCA40(v5, v21, 0x110Fu, 0, (uint64_t)&v162);
            OpenMPClauseName = llvm::omp::getOpenMPClauseName();
            v156 = v121;
            v115 = sub_22F2F2210((uint64_t)&v162, (uint64_t)&OpenMPClauseName);
            goto LABEL_174;
          }
        }
      }
      if ((sub_22F421A30(v99) || sub_22F421B08(v99))
        && !sub_22F421A78(v99)
        && ((v99 - 66) > 0x21 || ((1 << (v99 - 66)) & 0x3001CC073) == 0))
      {
        sub_22ECAA908((uint64_t)&v162, v5[1536], v158, 1);
        v148 = v162;
        *(_OWORD *)v149 = *(_OWORD *)v163;
        *(_QWORD *)&v149[13] = *(_QWORD *)&v163[13];
        if (DWORD1(v162) != 73)
        {
          v113 = v148;
          if (sub_22F421A78(v148)
            || (v113 - 66) <= 0x21 && ((1 << (v113 - 66)) & 0x3009CC073) != 0)
          {
            sub_22E8FCA40(v5, v21, 0x10E1u, 0, (uint64_t)&v162);
            OpenMPClauseName = llvm::omp::getOpenMPClauseName();
            v156 = v114;
            v115 = sub_22F2F2210((uint64_t)&v162, (uint64_t)&OpenMPClauseName);
LABEL_174:
            v153 = llvm::omp::getOpenMPClauseName();
            v154 = v122;
            sub_22F2F2210(v115, (uint64_t)&v153);
            sub_22E903BEC((unsigned int *)&v162);
            sub_22EC82B14(v5, v5[1536], v158, (uint64_t)&v148, 0);
            v14 = v144;
            goto LABEL_124;
          }
        }
      }
      if ((v99 - 36) <= 0x29 && ((1 << (v99 - 36)) & 0x34000000C03) != 0)
      {
        sub_22ECAA9FC((uint64_t)&v162, v5[1536], v158, (unsigned int (*)(uint64_t, _QWORD, _QWORD))sub_22ECF8264, (uint64_t)&OpenMPClauseName, (uint64_t (*)(uint64_t, _QWORD))sub_22ECF8274, (uint64_t)&v153, 1);
        v148 = v162;
        *(_OWORD *)v149 = *(_OWORD *)v163;
        *(_QWORD *)&v149[13] = *(_QWORD *)&v163[13];
        if (DWORD1(v162) == 66)
        {
          v123 = v148;
          if (sub_22F421A78(v148)
            || sub_22F421A30(v123)
            || (v123 - 66) <= 0x21 && ((1 << (v123 - 66)) & 0x3001CC073) != 0)
          {
            sub_22E8FCA40(v5, v21, 0x10C7u, 0, (uint64_t)&v162);
            OpenMPClauseName = llvm::omp::getOpenMPDirectiveName();
            v156 = v124;
            sub_22F2F2210((uint64_t)&v162, (uint64_t)&OpenMPClauseName);
            sub_22E903BEC((unsigned int *)&v162);
            sub_22EC82B14(v5, v5[1536], v158, (uint64_t)&v148, 0);
            v14 = v144;
            goto LABEL_124;
          }
        }
      }
      if (*(_DWORD *)(v5[9] + 72) > 0x2Du)
      {
        if (v99 == 56)
          goto LABEL_171;
      }
      else if ((v99 - 56) <= 0x2A && ((1 << (v99 - 56)) & 0x6000001CF91) != 0)
      {
LABEL_171:
        v152 = 0;
        v116 = v5[1536];
        *(_QWORD *)&v162 = &v152;
        if (sub_22EC829E0(v116, v23, 1u, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF82D8, (uint64_t)&v162))
        {
          sub_22E8FCA40(v5, v21, 0x110Au, 0, (uint64_t)&v162);
          OpenMPClauseName = llvm::omp::getOpenMPClauseName();
          v156 = v117;
          v118 = sub_22F2F2210((uint64_t)&v162, (uint64_t)&OpenMPClauseName);
          v153 = llvm::omp::getOpenMPClauseName();
          v154 = v119;
          v120 = sub_22F2F2210(v118, (uint64_t)&v153);
          sub_22ECB1B04(v5[1536]);
          v14 = v144;
          v151[0] = llvm::omp::getOpenMPDirectiveName();
          v151[1] = v125;
          sub_22F2F2210(v120, (uint64_t)v151);
          sub_22E903BEC((unsigned int *)&v162);
          sub_22EC82B14(v5, v5[1536], v158, (uint64_t)&v148, 0);
          goto LABEL_124;
        }
      }
    }
    v30 = v157;
    v31 = *(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF0);
    v32 = *(_QWORD *)(v31 + 8);
    v33 = *(unsigned __int8 *)(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v33 != 32 && v33 != 39 && (*(_BYTE *)(v31 + 17) & 8) != 0)
    {
      v34 = sub_22ECB1B04(v5[1536]);
      if (v34)
      {
        v35 = *(_DWORD *)(v34 + 960) - 36;
        v36 = v35 > 0x29;
        v37 = (1 << v35) & 0x34000000C03;
        if (!v36 && v37 != 0)
        {
          sub_22E8FCA40(v5, v21, 0x110Bu, 0, (uint64_t)&v162);
          *(_QWORD *)&v148 = llvm::omp::getOpenMPClauseName();
          *((_QWORD *)&v148 + 1) = v100;
          v101 = sub_22F2F2210((uint64_t)&v162, (uint64_t)&v148);
          v102 = sub_22E8901B8(v101, (uint64_t *)&v157);
          sub_22ECB1B04(v5[1536]);
          v14 = v144;
          OpenMPClauseName = llvm::omp::getOpenMPDirectiveName();
          v156 = v107;
          sub_22F2F2210(v102, (uint64_t)&OpenMPClauseName);
          sub_22E903BEC((unsigned int *)&v162);
          if (v23)
          {
            v108 = sub_22EFBBF74(v23, v5[11]);
            v109 = *(_DWORD *)(v158 + 24);
            if (v108)
            {
              v110 = 5543;
LABEL_145:
              sub_22E8FCA40(v5, v109, v110, 0, (uint64_t)&v162);
              sub_22E890024((uint64_t)&v162, (uint64_t *)&v158);
              v82 = (unsigned int *)&v162;
LABEL_73:
              sub_22E903BEC(v82);
              goto LABEL_124;
            }
          }
          else
          {
            v109 = *(_DWORD *)(v158 + 24);
          }
          v110 = 6001;
          goto LABEL_145;
        }
      }
    }
    if ((v32 & 0xF) != 0)
      v31 = (unint64_t)sub_22F10D2BC(v30);
    v39 = v31 & 0xFFFFFFFFFFFFFFF0;
    v157 = v39;
    v40 = *(_QWORD *)(v158 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v158 + 40) & 7) != 0 || v40 == 0)
    {
      v43 = 0;
      v44 = "";
    }
    else
    {
      v42 = *(_DWORD **)(v40 + 16);
      v45 = *v42;
      v44 = (const char *)(v42 + 4);
      v43 = v45;
    }
    if ((*(_BYTE *)(v158 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v158);
      v46 = v47;
    }
    else
    {
      v46 = 0;
    }
    v48 = v159;
    v145 = v23;
    if (v23)
      v49 = v159;
    else
      v49 = 0;
    v50 = sub_22EC822F4(v5, v21, v39, v44, v43, v46, (uint64_t)v49);
    v51 = v157;
    v52 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) & 0xFE)
        - 2;
    sub_22EFF605C((uint64_t)v15);
    if (v52 > 3)
    {
      v69 = sub_22EC822F4(v5, v53, v51, ".firstprivate.temp", 0x12uLL, 0, 0);
      v70 = *((_QWORD *)v15 + 1);
      sub_22EFF605C((uint64_t)v15);
      v72 = v71;
      *(_DWORD *)(v69 + 28) |= 0x800u;
      sub_22EFC9100(v69, v5[11]);
      v73 = v5[11];
      *(_QWORD *)&v162 = *(_QWORD *)(v69 + 40);
      DWORD2(v162) = v72;
      sub_22EFC6D6C((uint64_t)v163, v162);
      v62 = sub_22E3CD3D4(v73 + 2032, 32, 3);
      sub_22EFF6AE4(v62, v73, 0, 0, 0, v69, 0, (uint64_t)&v162, 0, 0, v70, 1, 0, 0);
      sub_22EB1A358(v5, v62, 0);
      sub_22EA28AD8();
      v12 = v141;
    }
    else
    {
      v54 = 0;
      v55 = *(_QWORD *)(v158 + 40);
      v56 = "";
      if ((v55 & 7) == 0)
      {
        v57 = v55 & 0xFFFFFFFFFFFFFFF8;
        if (v57)
        {
          v58 = *(_DWORD **)(v57 + 16);
          v59 = *v58;
          v56 = (const char *)(v58 + 4);
          v54 = v59;
        }
      }
      v60 = sub_22EC822F4(v5, v53, v27, v56, v54, 0, 0);
      *(_DWORD *)(v60 + 28) |= 0x800u;
      sub_22EFC9100(v60, v5[11]);
      v61 = v5[11];
      *(_QWORD *)&v162 = *(_QWORD *)(v60 + 40);
      DWORD2(v162) = v21;
      sub_22EFC6D6C((uint64_t)v163, v162);
      v62 = sub_22E3CD3D4(v61 + 2032, 32, 3);
      sub_22EFF6AE4(v62, v61, 0, 0, 0, v60, 0, (uint64_t)&v162, 0, 0, v27, 1, 0, 0);
      v153 = 0;
      v153 = sub_22EB1A358(v5, v62, 0) & 0xFFFFFFFFFFFFFFFELL;
      v63 = *(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v63 + 8) & 0xF) != 0)
        v63 = (unint64_t)sub_22F10D2BC(v27);
      v12 = v141;
      v64 = v63 & 0xFFFFFFFFFFFFFFF0;
      sub_22EFF605C((uint64_t)v15);
      v66 = sub_22EC822F4(v5, v65, v64, ".firstprivate.temp", 0x12uLL, 0, 0);
      LODWORD(v148) = 0;
      v67 = *(_QWORD *)(v66 + 48);
      *((_QWORD *)&v148 + 1) = 0;
      *(_QWORD *)v149 = v67;
      *(_DWORD *)&v149[8] = 0;
      *(_QWORD *)&v149[16] = v66;
      v150 = 0;
      OpenMPClauseName = (v21 << 32) | 2;
      v156 = v21 | ((unint64_t)v21 << 32);
      sub_22EC395BC(&v162, v5, &v148, &OpenMPClauseName, &v153, 1, 0, 1);
      v68 = sub_22EC3DF80((int)&v162, (int)v5);
      if ((v68 & 1) != 0)
        sub_22EFC77E8(v50, 1);
      else
        sub_22EFBC9E4(v50, v68 & 0xFFFFFFFFFFFFFFFELL);
      sub_22EC3CE2C((uint64_t)&v162);
    }
    if ((*(_BYTE *)(v50 + 28) & 0x80) != 0)
    {
      v14 = v144;
      if (!v12)
        goto LABEL_124;
      sub_22EFF605C((uint64_t)v15);
      sub_22E8FCA40(v5, v81, 0x171Cu, 0, (uint64_t)v147);
      v82 = (unsigned int *)v147;
      goto LABEL_73;
    }
    sub_22EFCCFA0(v5[27], v50);
    v74 = *(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v74 + 8) & 0xF) != 0)
      v74 = (unint64_t)sub_22F10D2BC(*((_QWORD *)v15 + 1));
    v75 = v74 & 0xFFFFFFFFFFFFFFF0;
    sub_22EFF605C((uint64_t)v15);
    v77 = v76;
    *(_DWORD *)(v50 + 28) |= 0x800u;
    sub_22EFC9100(v50, v5[11]);
    v78 = v5[11];
    *(_QWORD *)&v162 = *(_QWORD *)(v50 + 40);
    DWORD2(v162) = v77;
    sub_22EFC6D6C((uint64_t)v163, v162);
    v79 = sub_22E3CD3D4(v78 + 2032, 32, 3);
    sub_22EFF6AE4(v79, v78, 0, 0, 0, v50, 0, (uint64_t)&v162, 0, 0, v75, 1, 0, 0);
    v80 = 0;
    if (!v145)
    {
      if ((sub_22EFC7ADC(v5[27]) & 1) != 0)
      {
        v80 = 0;
      }
      else
      {
        v80 = v143;
        if (v142 != 43)
        {
          v80 = sub_22EC9B8AC((uint64_t)v5, v158, v48, 1);
          if (!sub_22EC7ECC4((uint64_t)v5, v158, 0, 0))
          {
            v83 = *(_QWORD *)(v80 + 16);
            v84 = v165;
            if (v165 >= (unint64_t)HIDWORD(v165))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v84 = v165;
            }
            *((_QWORD *)v164 + v84) = v83;
            LODWORD(v165) = v165 + 1;
          }
        }
      }
    }
    v14 = v144;
    if (!v12)
    {
      v85 = v15;
      while (1)
      {
        v86 = (uint64_t)v85;
        v87 = *v85;
        if (v87 > 213)
        {
          if (v87 == 233)
          {
            if ((*(_DWORD *)v86 & 0x7C0000) != 0x300000)
              goto LABEL_96;
            v89 = (unsigned __int8 **)(v86 + 16);
          }
          else
          {
            if (v87 != 214)
              goto LABEL_96;
            v89 = (unsigned __int8 **)(v86 + 24);
          }
        }
        else if (v87 == 155)
        {
          if ((**(_DWORD **)(v86 + 16) & 0x18000) != 0)
            goto LABEL_96;
          if (*(_BYTE *)(v86 + 48))
            v89 = (unsigned __int8 **)(v86 + 24);
          else
            v89 = (unsigned __int8 **)(v86 + 32);
        }
        else
        {
          if (v87 != 176 || (v88 = *(unsigned int *)(v86 + 20), (_DWORD)v88 == -1))
          {
LABEL_96:
            sub_22EC83920(v5[1536], v158, v86, 29, v80, 0, 0);
            break;
          }
          v89 = (unsigned __int8 **)(v86 + 8 * v88 + 40);
        }
        v85 = *v89;
        if (v85 == (unsigned __int8 *)v86)
          goto LABEL_96;
      }
    }
    if (v145 || sub_22EFC7ADC(v5[27]))
    {
      if (v15)
      {
        while (1)
        {
          v80 = (uint64_t)v15;
          v90 = *v15;
          if (v90 > 0xD5)
          {
            if (v90 == 233)
            {
              if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
                goto LABEL_117;
              v92 = v15 + 16;
            }
            else
            {
              if (v90 != 214)
                goto LABEL_117;
              v92 = v15 + 24;
            }
          }
          else if (v90 == 155)
          {
            if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
              goto LABEL_117;
            if (v15[48])
              v92 = v15 + 24;
            else
              v92 = v15 + 32;
          }
          else
          {
            if (v90 != 176)
              goto LABEL_117;
            v91 = *((unsigned int *)v15 + 5);
            if ((_DWORD)v91 == -1)
              goto LABEL_117;
            v92 = &v15[8 * v91 + 40];
          }
          v15 = *(unsigned __int8 **)v92;
          if (*(_QWORD *)v92 == v80)
            goto LABEL_117;
        }
      }
      v80 = 0;
    }
LABEL_117:
    v93 = v174;
    if (v174 >= (unint64_t)HIDWORD(v174))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v93 = v174;
    }
    v173[v93] = v80;
    LODWORD(v174) = v174 + 1;
    v94 = v171;
    if (v171 >= (unint64_t)HIDWORD(v171))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v94 = v171;
    }
    *((_QWORD *)v170 + v94) = v79;
    LODWORD(v171) = v171 + 1;
    v95 = v168;
    if (v168 >= (unint64_t)HIDWORD(v168))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v95 = v168;
    }
    *((_QWORD *)v167 + v95) = v62;
    LODWORD(v168) = v168 + 1;
LABEL_124:
    ++v4;
  }
  while (v4 != v14);
  v128 = v174;
  v129 = v164;
  if ((_DWORD)v174)
  {
    v131 = v5[11];
    v132 = v173;
    v133 = v170;
    v134 = v171;
    v135 = v167;
    v136 = v168;
    v137 = sub_22EC9ED7C(v131, (uint64_t *)v164, v165);
    v2 = sub_22F3EA51C(v131, v140, v139, v138, v132, v128, v133, v134, v135, v136, v137);
    v129 = v164;
  }
  else
  {
    v2 = 0;
  }
  if (v129 != v166)
    free(v129);
LABEL_203:
  if (v167 != v169)
    free(v167);
  if (v170 != v172)
    free(v170);
  if (v173 != v175)
    free(v173);
  return v2;
}

_DWORD *sub_22EC94100(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, unsigned int a8, char a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, unint64_t a14, int *a15, char a16, unsigned __int8 **a17, uint64_t a18)
{
  uint64_t v21;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v50;
  uint64_t *v51;
  __int128 *v52;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unsigned int v58[24];
  _BYTE v59[16];
  void *v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  void *v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  int v72;
  __int128 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v73 = xmmword_22F4959A4;
  v74 = 6;
  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  v21 = a3;
  if (a3)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = *(_DWORD *)(a2 + 4 * v24);
      if (v26 == 6)
      {
LABEL_7:
        *((_DWORD *)&v73 + v25) = v26;
        *((_DWORD *)v71 + v25++) = *(_DWORD *)(a4 + 4 * v24);
      }
      else
      {
        v27 = 0;
        while (*(_DWORD *)((char *)&v73 + v27) != v26)
        {
          v27 += 4;
          if (v27 == 20)
            goto LABEL_7;
        }
        sub_22E8FCA40(a1, *(_DWORD *)(a4 + 4 * v24), 0x1072u, 0, (uint64_t)v58);
        sub_22E903BEC(v58);
      }
      ++v24;
    }
    while (v24 != v21);
  }
  sub_22ECAEB18((uint64_t)v59, a13, a14);
  v28 = a1[1536];
  v29 = *a15;
  v56 = *a7;
  v57 = *((_QWORD *)a7 + 2);
  sub_22ECAEBBC(a1, v28, 46, (uint64_t)v59, v29, a6, (uint64_t)&v56, v30, a17, a18, a8, &v73, 5, a9, a16);
  v31 = a1[11];
  v32 = v60;
  v33 = v61;
  v34 = (uint64_t *)v65;
  v35 = v66;
  v36 = (uint64_t *)v63;
  v37 = v64;
  v38 = v68;
  v39 = v69;
  v41 = *(_QWORD *)(a6 + 8);
  v40 = (uint64_t *)(a6 + 8);
  if (v41)
  {
    v44 = v60;
    v45 = v61;
    v51 = (uint64_t *)v65;
    v52 = a7;
    v46 = v66;
    v47 = v63;
    v50 = v64;
    v42 = sub_22F0ABC50(v40, v31);
    v37 = v50;
    v34 = v51;
    v36 = (uint64_t *)v47;
    v35 = v46;
    a7 = v52;
    v33 = v45;
    v32 = v44;
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  v54 = *a7;
  v55 = *((_QWORD *)a7 + 2);
  v48 = sub_22F0C203C(v31, a15, v32, v33, v34, v35, v36, v37, v38, v39, &v73, 5, v71, 5, v42, v43, (uint64_t)&v54, a8, a9,
          a11);
  if (v68 != &v70)
    free(v68);
  if (v65 != &v67)
    free(v65);
  sub_22F340364(&v63);
  if (v60 != &v62)
    free(v60);
  return v48;
}

void sub_22EC943FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _DWORD *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  int v53;
  int v54;
  _BYTE *v55;
  unsigned int v56;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  void *v75[2];
  llvm *v76[2];
  unsigned int v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  void *v81[2];
  void *v82[2];
  _BYTE *v83;
  uint64_t v84;
  _BYTE v85[32];
  _QWORD *v86;
  uint64_t v87;
  _QWORD v88[6];

  v88[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1[9] + 72) >= 0x32u)
  {
    v3 = (_QWORD *)a3;
    v86 = v88;
    v87 = 0x400000000;
    v4 = *(unsigned int *)(a3 + 8);
    if ((int)v4 >= 1)
    {
      v6 = 0;
      v61 = *(unsigned int *)(a3 + 8);
      while (1)
      {
        v7 = *(_QWORD *)(*v3 + 8 * v6);
        if (!v7)
          goto LABEL_86;
        if (*(_DWORD *)(v7 + 8) != 46)
          goto LABEL_86;
        v83 = v85;
        v84 = 0x400000000;
        v8 = *(unsigned int *)(v7 + 16);
        if (!(_DWORD)v8)
          goto LABEL_86;
        v63 = v7;
        v64 = v6;
        v9 = (unsigned __int8 **)(v7 + 136);
        v10 = v7 + 136 + 8 * v8;
        v11 = (_QWORD *)v10;
        do
        {
          if (*v11)
            goto LABEL_72;
          v12 = *v9;
          if ((*(_DWORD *)*v9 & 0x1A000) != 0)
            goto LABEL_72;
          v13 = *(_QWORD *)((*((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v14)
            v15 = (*(_DWORD *)(v14 + 16) & 0xFF800FF) == 139984907;
          else
            v15 = 0;
          if (v15)
          {
            v17 = sub_22EFFA6B0(*v9);
            v18 = sub_22F00338C(*((unsigned __int8 **)v17 + 2)) & 0xFFFFFFFFFFFFFFF0;
            v19 = *(_QWORD *)v18;
            if (*(_QWORD *)v18)
              v20 = (*(_DWORD *)(*(_QWORD *)v18 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
            else
              v20 = 0;
            if (v20)
            {
LABEL_75:
              v16 = *(void **)(v19 + 32);
              goto LABEL_21;
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              v19 = sub_22F10CF48(v19);
              if (v19)
                goto LABEL_75;
              v19 = *(_QWORD *)v18;
            }
            v16 = (void *)sub_22F10ACF8(v19);
          }
          else
          {
            v16 = (void *)(*((_QWORD *)v12 + 1) & 7 | v13);
          }
LABEL_21:
          v81[0] = v82;
          HIDWORD(v81[1]) = 4;
          v65 = (uint64_t)v16;
          v82[0] = v16;
          v82[1] = 0;
          v76[0] = 0;
          v76[1] = 0;
          v77 = 0;
          *(_QWORD *)&v78 = &v79;
          v79 = 0;
          v80 = v67 & 0xFFFFFFFF00000000 | 1;
          v67 = v80;
          v21 = 1;
          *((_QWORD *)&v78 + 1) = 0x400000001;
          do
          {
            v22 = (char *)v81[0] + 16 * v21;
            v24 = *((_QWORD *)v22 - 2);
            v23 = *((_QWORD *)v22 - 1);
            LODWORD(v81[1]) = v21 - 1;
            v25 = DWORD2(v78);
            v26 = *(_DWORD *)(v78 + 16 * DWORD2(v78) - 8);
            if (!v26)
            {
              do
              {
                v25 = (v25 - 1);
                v26 = *(_DWORD *)(v78 - 8 + 16 * v25);
              }
              while (!v26);
              DWORD2(v78) = v25;
            }
            *(_DWORD *)(v78 + 16 * v25 - 8) = v26 - 1;
            if (v24 < 0x10)
              goto LABEL_27;
            v27 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF0);
            v28 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
            if (!v28)
              goto LABEL_27;
            v29 = v28;
            if ((*(_DWORD *)(v28 + 28) & 0x7Eu) - 34 > 3)
              goto LABEL_27;
            if (!v77)
              goto LABEL_33;
            LODWORD(v30) = ((*v27 >> 4) ^ (*v27 >> 9)) & (v77 - 1);
            v31 = (char *)v76[0] + 16 * v30;
            v32 = *(_QWORD *)v31;
            if (*v27 != *(_QWORD *)v31)
            {
              v53 = 1;
              while (v32 != -4096)
              {
                v54 = v30 + v53++;
                v30 = v54 & (v77 - 1);
                v32 = *((_QWORD *)v76[0] + 2 * v30);
                if (*v27 == v32)
                {
                  v31 = (char *)v76[0] + 16 * v30;
                  goto LABEL_32;
                }
              }
LABEL_33:
              v74 = 0u;
              *(_OWORD *)v75 = 0u;
              v73 = 0;
              v71 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "default", 7uLL);
              sub_22EFF605C((uint64_t)v12);
              v72 = v33;
              v34 = sub_22ECB1B04(a2);
              if (v34)
                v35 = *(_QWORD **)(v34 + 992);
              else
                v35 = 0;
              v36 = sub_22ECCF104(a1, v35, (uint64_t)&v74, (uint64_t)&v71, v24, 0);
              if ((v36 & 1) != 0)
              {
                if (HIDWORD(v75[1]))
                  free(v75[0]);
                goto LABEL_27;
              }
              v37 = *v27;
              v68 = v36 & 0xFFFFFFFFFFFFFFFELL;
              v69 = v37;
              sub_22F2543D4((uint64_t)&v70, (uint64_t)v76, &v69, &v68);
              v31 = v70;
              if (HIDWORD(v75[1]))
                free(v75[0]);
              goto LABEL_41;
            }
LABEL_32:
            if ((_DWORD)v30 == v77)
              goto LABEL_33;
LABEL_41:
            if (*((_QWORD *)v31 + 1))
            {
              v38 = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 24, 3);
              sub_22EFF605C((uint64_t)v12);
              sub_22E5BBE34((uint64_t)v38, v39, v65, 1, 0, (uint64_t)v12);
              *v38 |= 0x40000u;
              if (DWORD2(v78))
              {
                v40 = (uint64_t *)v78;
                v41 = 16 * DWORD2(v78);
                do
                {
                  v42 = *v40;
                  if (*v40)
                  {
                    sub_22EFF605C((uint64_t)v12);
                    v43 = ((unint64_t)*(unsigned int *)(v42 + 28) >> 13) & 3 | v42;
                    v74 = 0uLL;
                    v75[0] = 0;
                    v45 = sub_22EC25D24((uint64_t)a1, (uint64_t)v38, 0, v44, 0, 0, 0, v42, v43, 0, &v74, *(_QWORD *)(v42 + 48), 1, 0, 0, 0, 0);
                    v38 = (_DWORD *)(sub_22EB1A358(a1, v45, 0) & 0xFFFFFFFFFFFFFFFELL);
                  }
                  v40 += 2;
                  v41 -= 16;
                }
                while (v41);
              }
              if (v23)
              {
                sub_22EFF605C((uint64_t)v12);
                v46 = v23 | ((unint64_t)*(unsigned int *)(v23 + 28) >> 13) & 3;
                v74 = 0uLL;
                v75[0] = 0;
                v38 = sub_22EC25D24((uint64_t)a1, (uint64_t)v38, 0, v47, 0, 0, 0, v23, v46, 0, &v74, *(_QWORD *)(v23 + 48), 1, 0, 0, 0, 0);
              }
              v48 = v84;
              if (v84 >= (unint64_t)HIDWORD(v84))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v48 = v84;
              }
              *(_QWORD *)&v83[8 * v48] = v38;
              LODWORD(v84) = v84 + 1;
            }
            else
            {
              v49 = sub_22EFC3B90(v29);
              if (v49)
              {
                v50 = v49;
                v51 = 1;
LABEL_54:
                v52 = *(_QWORD *)(v50 + 48);
                if (v52 >= 0x10
                  && ((sub_22F10DF70(*(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
                   || sub_22F10E06C(*(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0))))
                {
                  if ((v51 & 1) != 0)
                    sub_22F33F6D0((uint64_t)&v78, v23, 1u);
                  else
                    ++*(_DWORD *)(v78 + 16 * DWORD2(v78) - 8);
                  sub_22F2599E0((uint64_t)v81, v52, v50);
                  v51 = 0;
                }
                while (1)
                {
                  v50 = *(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8;
                  if (!v50)
                    break;
                  if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 49 < 3)
                    goto LABEL_54;
                }
              }
            }
LABEL_27:
            v21 = v81[1];
          }
          while (LODWORD(v81[1]));
          if ((uint64_t *)v78 != &v79)
            free((void *)v78);
          llvm::deallocate_buffer(v76[0], (void *)(16 * v77));
          if (v81[0] != v82)
            free(v81[0]);
LABEL_72:
          ++v9;
          ++v11;
        }
        while (v9 != (unsigned __int8 **)v10);
        v55 = v83;
        if ((_DWORD)v84)
        {
          *(_OWORD *)v81 = 0u;
          *(_OWORD *)v82 = 0u;
          *(_QWORD *)&v78 = 0;
          DWORD2(v78) = 0;
          v79 = 0;
          v56 = *(_DWORD *)(v63 + 120);
          DWORD2(v74) = 0;
          *(_QWORD *)&v74 = 0;
          v57 = sub_22EC94100(a1, v63 + 80, 5u, v63 + 100, 5, (uint64_t)v81, &v78, v56, 1, v59, 0, v60, (uint64_t)v83, v84, (int *)&v74, 0, 0, 0);
          v4 = v61;
          v3 = (_QWORD *)a3;
          v58 = *(unsigned int *)(a3 + 8);
          v6 = v64;
          if (v58 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v58 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v58) = v57;
          ++*(_DWORD *)(a3 + 8);
          if (HIDWORD(v82[1]))
            free(v82[0]);
          v55 = v83;
        }
        else
        {
          v4 = v61;
          v3 = (_QWORD *)a3;
          v6 = v64;
        }
        if (v55 != v85)
          free(v55);
LABEL_86:
        if (++v6 == v4)
        {
          if (v86 != v88)
            free(v86);
          return;
        }
      }
    }
  }
}

uint64_t sub_22EC94B78(_QWORD *a1, int **a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6)
{
  int *v6;
  uint64_t v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  int **v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unsigned __int8 *v45;
  BOOL v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  int8x16_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  void *v57;
  int v58;
  unsigned __int16 *v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t (**v77)();
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  void *v87;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _QWORD *v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int v120;
  unsigned __int8 *v121;
  char v122;
  int v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  char v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (**v141)();
  int v142;
  _QWORD *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t *v146;
  int v147;
  _BYTE *v148;
  int v149;
  uint64_t v150;
  uint64_t v152;
  int v153;
  uint64_t (**v154)();
  uint64_t v155;
  int v156;
  uint64_t (**v157)();
  void *v158;
  uint64_t *v159;
  _QWORD *v160;
  uint64_t v161;
  unsigned __int8 *v162;
  _QWORD *v163;
  unsigned __int8 *v164;
  _BYTE *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  BOOL v170;
  unsigned __int8 *v171;
  unsigned __int8 **v172;
  int v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unsigned __int8 **v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v182;
  unsigned int v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t v196;
  int v197;
  uint64_t (**v198)();
  uint64_t v199;
  int v200;
  uint64_t (**v201)();
  uint64_t v202;
  int v203;
  unsigned __int8 *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  char v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  uint64_t v213;
  uint64_t v214;
  int8x16_t v215;
  unint64_t v216;
  unsigned int v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  int v222;
  unint64_t v223;
  int v224;
  unsigned __int8 *v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  char v240;
  unsigned __int8 **v241;
  char v242;
  unsigned int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  unsigned __int8 *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int8x16_t v263;
  _QWORD v270[2];
  int8x16_t v271;
  __int128 v272;
  char v273;
  BOOL v274;
  _BYTE v275[40];
  unsigned __int8 v276;
  uint64_t v277;
  char v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  uint64_t (**v282)();
  void **p_OpenMPClauseName;
  char v284;
  uint64_t v285;
  void *OpenMPClauseName;
  __int128 v287;
  __int128 v288;
  char v289;
  uint64_t v290;
  unsigned __int8 *v291;
  char v292;
  void *v293;
  uint64_t v294;
  void *v295;
  int8x16_t v296;
  _BYTE v297[12];
  unsigned __int8 v298;
  char v299;
  unsigned int v300;
  char v301;
  void *v302[2];
  uint64_t v303;
  _QWORD **v304;
  _QWORD *v305[4];

  v305[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v6 = (int *)(a1[1536] + 21664);
  if (!*v6)
    *v6 = a5;
  if (!a4)
    return 1;
  v302[0] = &v303;
  v302[1] = (void *)0x200000000;
  v305[0] = 0;
  v305[1] = 0;
  v304 = v305;
  if (a3)
  {
    v17 = 0;
    v10 = 0;
    v9 = 0;
    v18 = 8 * a3;
    v12 = 85;
    v11 = 85;
    v19 = a2;
    while (1)
    {
      v20 = *v19;
      v21 = (*v19)[2];
      if (v21 <= 34)
        break;
      if ((v21 - 65) <= 0x1C)
      {
        v22 = 1 << (v21 - 65);
        if ((v22 & 0x8C) != 0)
          goto LABEL_22;
        if ((v22 & 0x10400001) != 0)
        {
          v17 = 1;
LABEL_24:
          if (v12 != 85 && (v17 & 1) != 0)
          {
            sub_22E8FCA40(a1, *v20, 0x104Bu, 0, (uint64_t)&v293);
            OpenMPClauseName = *(void **)v20;
            sub_22E8906A0((uint64_t)&v293, (uint64_t *)&OpenMPClauseName);
            sub_22E903BEC((unsigned int *)&v293);
            sub_22E8FCA40(a1, v10, 0x1715u, 0, (uint64_t)&v293);
            OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
            *(_QWORD *)&v287 = v27;
            sub_22F2F2210((uint64_t)&v293, (uint64_t)&OpenMPClauseName);
            sub_22E903BEC((unsigned int *)&v293);
            v17 = 1;
          }
          else
          {
            v10 = *v20;
            LODWORD(v293) = (*v19)[2];
            if ((sub_22E5FF2E4((uint64_t)v302, (int *)&v293) & 0x100000000) == 0)
            {
              sub_22E8FCA40(a1, *v20, 0x104Bu, 0, (uint64_t)&v293);
              OpenMPClauseName = *(void **)v20;
              sub_22E8906A0((uint64_t)&v293, (uint64_t *)&OpenMPClauseName);
              sub_22E903BEC((unsigned int *)&v293);
              sub_22E8FCA40(a1, v10, 0x1715u, 0, (uint64_t)&v293);
              OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
              *(_QWORD *)&v287 = v28;
              sub_22F2F2210((uint64_t)&v293, (uint64_t)&OpenMPClauseName);
              sub_22E903BEC((unsigned int *)&v293);
            }
            v12 = v21;
          }
        }
      }
LABEL_29:
      ++v19;
      v18 -= 8;
      if (!v18)
        goto LABEL_8;
    }
    if (v21 >= 2)
      goto LABEL_24;
LABEL_22:
    if (v11 == 85)
    {
      v9 = *v20;
      v11 = (*v19)[2];
    }
    else
    {
      sub_22E8FCA40(a1, *v20, 0x10EFu, 0, (uint64_t)&v293);
      OpenMPClauseName = (void *)llvm::omp::getOpenMPDirectiveName();
      *(_QWORD *)&v287 = v23;
      v24 = sub_22F2F2210((uint64_t)&v293, (uint64_t)&OpenMPClauseName);
      LODWORD(v282) = 0;
      v25 = sub_22E8900C4(v24, (int *)&v282);
      *(_QWORD *)v275 = *(_QWORD *)v20;
      sub_22E8906A0(v25, (uint64_t *)v275);
      sub_22E903BEC((unsigned int *)&v293);
      sub_22E8FCA40(a1, v9, 0x1715u, 0, (uint64_t)&v293);
      OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
      *(_QWORD *)&v287 = v26;
      sub_22F2F2210((uint64_t)&v293, (uint64_t)&OpenMPClauseName);
      sub_22E903BEC((unsigned int *)&v293);
    }
    goto LABEL_29;
  }
  v9 = 0;
  v10 = 0;
  v11 = 85;
  v12 = 85;
LABEL_8:
  if (sub_22E5FF3F8((uint64_t)v302, &dword_22F49599C) && sub_22E5FF3F8((uint64_t)v302, &dword_22F4959A0))
  {
    v13 = 0;
    v14 = 1;
    v12 = 13;
    v15 = a4;
    v16 = a1;
    goto LABEL_41;
  }
  v13 = 0;
  v15 = a4;
  v16 = a1;
  if (v12 > 86)
  {
    if (v12 != 87 && v12 != 93)
      goto LABEL_40;
    goto LABEL_35;
  }
  if (v12 != 65)
  {
    if (v12 != 85)
      goto LABEL_40;
LABEL_35:
    v13 = 0;
    if (v11 > 1)
    {
LABEL_40:
      v14 = 0;
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  v13 = 1;
  if (v11 && v11 != 68)
  {
    v14 = 0;
    v12 = 65;
    goto LABEL_41;
  }
LABEL_36:
  if (v12 == 85)
    v29 = a5;
  else
    v29 = v10;
  sub_22E8FCA40(a1, v29, 0x1048u, 0, (uint64_t)&v293);
  OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
  *(_QWORD *)&v287 = v30;
  v31 = sub_22F2F2210((uint64_t)&v293, (uint64_t)&OpenMPClauseName);
  LODWORD(v282) = v12 == 85;
  v32 = sub_22E8900C4(v31, (int *)&v282);
  *(_QWORD *)v275 = llvm::omp::getOpenMPClauseName();
  *(_QWORD *)&v275[8] = v33;
  sub_22F2F2210(v32, (uint64_t)v275);
  sub_22E903BEC((unsigned int *)&v293);
  sub_22E8FCA40(a1, v9, 0x1715u, 0, (uint64_t)&v293);
  OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
  *(_QWORD *)&v287 = v34;
  sub_22F2F2210((uint64_t)&v293, (uint64_t)&OpenMPClauseName);
  sub_22E903BEC((unsigned int *)&v293);
  v14 = 0;
LABEL_41:
  v35 = v15;
  if (*v15 == 173)
    v35 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
  if (v13)
  {
    if ((*v35 + 21) < 0x7Bu || !v35)
    {
      sub_22F0D5A50((uint64_t)v35);
      v52 = v55;
      v53 = 0;
      *(_DWORD *)v275 = v55;
      *(_DWORD *)&v275[4] = v55;
      v282 = *(uint64_t (***)())v275;
      v56 = v55;
LABEL_259:
      v142 = v56;
      v143 = v16;
      v144 = 4170;
LABEL_260:
      sub_22E8FCA40(v143, v142, v144, 0, (uint64_t)&v293);
      sub_22E8906A0((uint64_t)&v293, (uint64_t *)v275);
      sub_22E903BEC((unsigned int *)&v293);
      sub_22E8FCA40(v16, v52, 0x16F7u, 0, (uint64_t)&v293);
      if (v299)
      {
        v166 = (unsigned __int8 *)v296.i64[1];
        if (!v296.i64[1])
        {
          v166 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v297);
          v296.i64[1] = (uint64_t)v166;
        }
        v166[*v166 + 1] = 2;
        v165 = (_BYTE *)v296.i64[1];
      }
      else
      {
        if (!v301)
        {
LABEL_271:
          v146 = (uint64_t *)&v282;
          goto LABEL_272;
        }
        v158 = v295;
        v159 = (uint64_t *)((char *)v293 + 12784);
        if (v295)
          v158 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v295 + 32))(v295);
        OpenMPClauseName = v158;
        v160 = sub_22F2F1D6C(v159, (uint64_t *)&OpenMPClauseName);
        v161 = v160[1] + 32 * v300;
        v164 = *(unsigned __int8 **)(v161 + 8);
        v163 = (_QWORD *)(v161 + 8);
        v162 = v164;
        if (!v164)
        {
          v162 = (unsigned __int8 *)sub_22E3B8AAC(v163[1]);
          *v163 = v162;
        }
        v162[*v162 + 1] = 2;
        v165 = (_BYTE *)*v163;
      }
      v167 = *v165;
      *v165 = v167 + 1;
      *(_QWORD *)&v165[8 * v167 + 16] = v53;
      goto LABEL_271;
    }
    v36 = sub_22EFFA6B0(v35);
    v37 = v36;
    if ((*v36 & 0xFE) == 0x70)
      v38 = (uint64_t)v36;
    else
      v38 = 0;
    if (!v38 || (*(_DWORD *)v38 & 0xFC0000) != 0x540000)
    {
      if ((v35[1] & 0x40) == 0)
      {
        sub_22EFF605C((uint64_t)v35);
        v56 = v60;
        sub_22F0D4E74((uint64_t)v35);
        *(_QWORD *)v275 = v61;
        if (v38)
        {
          v52 = *(_DWORD *)(v38 + 4);
          v35 = v37;
        }
        else
        {
          sub_22EFF605C((uint64_t)v35);
          v52 = v62;
        }
        sub_22F0D4E74((uint64_t)v35);
        v282 = v77;
        v53 = 1;
        goto LABEL_259;
      }
      v40 = 0;
      v39 = 0;
      goto LABEL_91;
    }
    v39 = sub_22EFFA6B0(*(unsigned __int8 **)(v38 + 24));
    v40 = sub_22EFFA6B0(*(unsigned __int8 **)(v38 + 16));
    if ((v39[1] & 0x40) == 0)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v39 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v42 = *(_DWORD *)(v41 + 16);
      if (v41)
        v43 = v42 == 11;
      else
        v43 = 0;
      if (v43)
      {
        if (((v42 >> 19) & 0x1FF) - 166 >= 0x35)
          goto LABEL_223;
      }
      else if (v41 && v42 == 44)
      {
        v44 = sub_22F114198(*(_QWORD *)(v41 + 24));
        if ((*(_BYTE *)(v44 + 74) & 1) == 0 && *(_QWORD *)(v44 + 128) < 8uLL)
          goto LABEL_223;
      }
      else
      {
        v129 = v42 > 0x27u;
        v130 = (1 << v42) & 0x8180001600;
        if (v129 || v130 == 0)
          goto LABEL_223;
      }
    }
    if ((v40[1] & 0x40) != 0)
      goto LABEL_250;
    v132 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v40 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v133 = *(_DWORD *)(v132 + 16);
    if (v132)
      v134 = v133 == 11;
    else
      v134 = 0;
    if (v134)
    {
      if (((v133 >> 19) & 0x1FF) - 166 < 0x35)
        goto LABEL_250;
    }
    else
    {
      if (!v132 || v133 != 44)
      {
        v129 = v133 > 0x27u;
        v150 = (1 << v133) & 0x8180001600;
        if (v129 || v150 == 0)
          goto LABEL_223;
        goto LABEL_250;
      }
      v135 = sub_22F114198(*(_QWORD *)(v132 + 24));
      if ((*(_BYTE *)(v135 + 74) & 1) != 0 || *(_QWORD *)(v135 + 128) >= 8uLL)
      {
LABEL_250:
        if ((*(_DWORD *)v39 & 0x300) != 0x100)
        {
          v40 = v39;
LABEL_254:
          v56 = *(_DWORD *)(v38 + 4);
          sub_22F0D4E74(v38);
          *(_QWORD *)v275 = v152;
          sub_22EFF605C((uint64_t)v40);
          v52 = v153;
          sub_22F0D4E74((uint64_t)v40);
          v282 = v154;
          v53 = 3;
          goto LABEL_259;
        }
        if ((*(_DWORD *)v40 & 0x300) != 0x100)
          goto LABEL_254;
LABEL_91:
        v66 = sub_22EFC7ADC(v16[27]);
        v46 = 0;
        v48 = 0;
        if (v66)
          v45 = 0;
        else
          v45 = v40;
        if (v66)
          v49 = 0;
        else
          v49 = (uint64_t)v39;
        goto LABEL_97;
      }
    }
LABEL_223:
    if ((v39[1] & 0x40) == 0)
    {
      v136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v39 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v137 = *(_DWORD *)(v136 + 16);
      if (v136)
        v138 = v137 == 11;
      else
        v138 = 0;
      if (v138)
      {
        v140 = (uint64_t)v39;
        if (((v137 >> 19) & 0x1FF) - 166 >= 0x35)
        {
LABEL_258:
          v56 = *(_DWORD *)(v38 + 4);
          sub_22F0D4E74(v38);
          *(_QWORD *)v275 = v155;
          sub_22EFF605C(v140);
          v52 = v156;
          sub_22F0D4E74(v140);
          v282 = v157;
          v53 = 2;
          goto LABEL_259;
        }
      }
      else if (v136 && v137 == 44)
      {
        v139 = sub_22F114198(*(_QWORD *)(v136 + 24));
        if ((*(_BYTE *)(v139 + 74) & 1) == 0)
        {
          v140 = (uint64_t)v39;
          if (*(_QWORD *)(v139 + 128) < 8uLL)
            goto LABEL_258;
        }
      }
      else
      {
        v129 = v137 > 0x27u;
        v169 = (1 << v137) & 0x8180001600;
        v170 = v129 || v169 == 0;
        v140 = (uint64_t)v39;
        if (v170)
          goto LABEL_258;
      }
      v140 = (uint64_t)v40;
      goto LABEL_258;
    }
    v140 = (uint64_t)v40;
    if ((v40[1] & 0x40) == 0)
      goto LABEL_258;
    goto LABEL_91;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0uLL;
  if (v12 > 84)
  {
    if (v12 == 85 || v12 == 87)
    {
      v293 = v16;
      LODWORD(v294) = 0;
      if (v12 == 87)
        v63 = 4172;
      else
        v63 = 4169;
      v296 = 0uLL;
      v295 = 0;
      v297[0] = 0;
      *(_QWORD *)&v297[4] = 0;
      v298 = 0;
      if ((sub_22EC9E32C((_QWORD **)&v293, v35, v63, 0x16F8u) & 1) != 0)
        goto LABEL_273;
      v64 = sub_22EFC7ADC(v16[27]);
      v46 = 0;
      v45 = 0;
      v49 = (uint64_t)v295;
      v48 = (v297[0] != 0) & ~(_BYTE)v64;
      if (v64)
      {
        v49 = 0;
        v65 = -1;
      }
      else
      {
        v65 = 0;
      }
      v50 = vbicq_s8(v296, (int8x16_t)vdupq_n_s64(v65));
      goto LABEL_98;
    }
    v48 = 0;
    v49 = 0;
    v50 = 0uLL;
    if (v12 == 93)
    {
      if ((*v35 + 21) < 0x7Bu)
      {
        sub_22F0D5A50((uint64_t)v35);
        v52 = v51;
        v53 = 0;
        *(_DWORD *)v275 = v51;
        *(_DWORD *)&v275[4] = v51;
        v282 = *(uint64_t (***)())v275;
        v54 = v51;
LABEL_237:
        v142 = v54;
        v143 = v16;
        v144 = 4173;
        goto LABEL_260;
      }
      v78 = sub_22EFFA6B0(v35);
      v79 = v78;
      if ((*v78 & 0xFE) == 0x70)
        v80 = (uint64_t)v78;
      else
        v80 = 0;
      if (!v80 || (*(_DWORD *)v80 & 0xFC0000) != 0x540000)
      {
        if ((v35[1] & 0x40) == 0)
        {
          sub_22EFF605C((uint64_t)v35);
          v54 = v93;
          sub_22F0D4E74((uint64_t)v35);
          *(_QWORD *)v275 = v94;
          if (v80)
          {
            v52 = *(_DWORD *)(v80 + 4);
            v35 = v79;
          }
          else
          {
            sub_22EFF605C((uint64_t)v35);
            v52 = v95;
          }
          sub_22F0D4E74((uint64_t)v35);
          v282 = v141;
          v53 = 1;
          goto LABEL_237;
        }
        v81 = 0;
        v82 = 0;
        goto LABEL_151;
      }
      v82 = *(_QWORD *)(v80 + 16);
      v81 = *(_QWORD *)(v80 + 24);
      if ((*(_BYTE *)(v82 + 1) & 0x40) == 0)
      {
        v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v84 = *(_DWORD *)(v83 + 16);
        if (v83)
          v85 = v84 == 11;
        else
          v85 = 0;
        if (v85)
        {
          if (((v84 >> 19) & 0x1FF) - 166 >= 0x35)
            goto LABEL_316;
        }
        else if (v83 && v84 == 44)
        {
          v86 = sub_22F114198(*(_QWORD *)(v83 + 24));
          if ((*(_BYTE *)(v86 + 74) & 1) == 0 && *(_QWORD *)(v86 + 128) < 8uLL)
            goto LABEL_316;
        }
        else
        {
          v129 = v84 > 0x27u;
          v180 = (1 << v84) & 0x8180001600;
          if (v129 || v180 == 0)
            goto LABEL_316;
        }
      }
      if ((*(_BYTE *)(v81 + 1) & 0x40) != 0)
        goto LABEL_339;
      v182 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v81 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v183 = *(_DWORD *)(v182 + 16);
      if (v182)
        v184 = v183 == 11;
      else
        v184 = 0;
      if (v184)
      {
        if (((v183 >> 19) & 0x1FF) - 166 < 0x35)
          goto LABEL_339;
      }
      else
      {
        if (!v182 || v183 != 44)
        {
          v129 = v183 > 0x27u;
          v194 = (1 << v183) & 0x8180001600;
          if (v129 || v194 == 0)
            goto LABEL_316;
LABEL_339:
          if ((*(_DWORD *)v82 & 0x300) != 0x100)
          {
            v54 = *(_DWORD *)(v80 + 4);
            sub_22F0D4E74(v80);
            *(_QWORD *)v275 = v196;
            sub_22EFF605C(v82);
            v52 = v197;
            sub_22F0D4E74(v82);
            v282 = v198;
            v53 = 3;
            goto LABEL_237;
          }
          goto LABEL_151;
        }
        v185 = sub_22F114198(*(_QWORD *)(v182 + 24));
        if ((*(_BYTE *)(v185 + 74) & 1) != 0 || *(_QWORD *)(v185 + 128) >= 8uLL)
          goto LABEL_339;
      }
LABEL_316:
      if ((*(_BYTE *)(v82 + 1) & 0x40) == 0)
      {
        v186 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v187 = *(_DWORD *)(v186 + 16);
        if (v186)
          v188 = v187 == 11;
        else
          v188 = 0;
        if (v188)
        {
          v190 = v82;
          if (((v187 >> 19) & 0x1FF) - 166 >= 0x35)
          {
LABEL_343:
            v54 = *(_DWORD *)(v80 + 4);
            sub_22F0D4E74(v80);
            *(_QWORD *)v275 = v199;
            sub_22EFF605C(v190);
            v52 = v200;
            sub_22F0D4E74(v190);
            v282 = v201;
            v53 = 2;
            goto LABEL_237;
          }
        }
        else if (v186 && v187 == 44)
        {
          v189 = sub_22F114198(*(_QWORD *)(v186 + 24));
          v16 = a1;
          if ((*(_BYTE *)(v189 + 74) & 1) == 0)
          {
            v190 = v82;
            if (*(_QWORD *)(v189 + 128) < 8uLL)
              goto LABEL_343;
          }
        }
        else
        {
          v129 = v187 > 0x27u;
          v220 = (1 << v187) & 0x8180001600;
          v221 = v129 || v220 == 0;
          v190 = v82;
          v16 = a1;
          if (v221)
            goto LABEL_343;
        }
        v190 = v81;
        goto LABEL_343;
      }
      v190 = v81;
      if ((*(_BYTE *)(v81 + 1) & 0x40) == 0)
        goto LABEL_343;
LABEL_151:
      v104 = sub_22EFC7ADC(v16[27]);
      v46 = 0;
      v48 = 0;
      v45 = 0;
      if (v104)
        v105 = 0;
      else
        v105 = v81;
      if (v104)
        v49 = 0;
      else
        v49 = v82;
      v47 = 0uLL;
      v50 = (int8x16_t)(unint64_t)v105;
    }
LABEL_99:
    v67 = *((unsigned int *)v16 + 476);
    if ((_DWORD)v67)
    {
      v68 = *(_QWORD *)(v16[237] + 8 * v67 - 8);
      *(_DWORD *)(v68 + 8) |= 8u;
    }
    v69 = v16[11];
    v270[0] = v49;
    v270[1] = v45;
    v271 = v50;
    v272 = v47;
    v273 = v48;
    v274 = v46;
    v7 = sub_22F3F70B4(v69, a5, a6, a2, a3, (uint64_t)v15, (uint64_t)v270);
    goto LABEL_274;
  }
  if (v12 != 11)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0uLL;
    if (v12 != 13)
      goto LABEL_99;
    if (v14)
    {
      memset(&v275[4], 0, 24);
      v57 = (void *)v16[11];
      OpenMPClauseName = v57;
      v287 = 0uLL;
      v288 = 0uLL;
      v289 = 1;
      v290 = 0;
      v291 = 0;
      v292 = 0;
      v58 = *v35;
      if (v58 != 8)
      {
        if (v58 == 16)
        {
          v59 = (unsigned __int16 *)v35;
          goto LABEL_74;
        }
        *(_DWORD *)v275 = 16;
        sub_22F0D5A50((uint64_t)v35);
        *(_DWORD *)&v275[16] = v108;
        *(_DWORD *)&v275[4] = v108;
        goto LABEL_174;
      }
      if (*(_DWORD *)v35 <= 0xFFu)
      {
        *(_DWORD *)&v275[16] = *((_DWORD *)v35 + 1);
        *(_DWORD *)v275 = 0;
        *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
        goto LABEL_174;
      }
      v147 = *(_DWORD *)v35 >> 8;
      if (v147 != 2)
      {
        if (v147 == 1)
        {
          v148 = (_BYTE *)*((_QWORD *)v35 + 2);
          if (*v148 == 16)
          {
            v59 = (unsigned __int16 *)*((_QWORD *)v35 + 2);
LABEL_74:
            if ((sub_22ECD4774((uint64_t)&OpenMPClauseName, v59, (uint64_t)v275) & 1) != 0)
            {
LABEL_75:
              v46 = 0;
              v48 = 0;
              v45 = 0;
              v49 = 0;
LABEL_97:
              v50 = 0uLL;
LABEL_98:
              v47 = 0uLL;
              goto LABEL_99;
            }
            goto LABEL_176;
          }
          *(_DWORD *)v275 = 14;
          if (*(_DWORD *)v35 >= 0x100u)
            v191 = (uint64_t)v148;
          else
            v191 = 0;
          sub_22F0D5A50(v191);
          *(_DWORD *)&v275[16] = v192;
          *(_DWORD *)&v275[4] = v192;
          if (*(_DWORD *)v35 >= 0x100u)
            v109 = (uint64_t)v148;
          else
            v109 = 0;
          goto LABEL_175;
        }
        *(_DWORD *)&v275[16] = *((_DWORD *)v35 + 1);
        *(_DWORD *)v275 = 15;
        *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
LABEL_174:
        v109 = (uint64_t)v35;
LABEL_175:
        sub_22F0D4E74(v109);
        *(_QWORD *)&v275[20] = v110;
        *(_QWORD *)&v275[8] = v110;
LABEL_176:
        v111 = *(_DWORD *)&v275[4];
        v112 = v16;
        v113 = 4167;
LABEL_300:
        sub_22E8FCA40(v112, v111, v113, 0, (uint64_t)&v293);
        sub_22E8906A0((uint64_t)&v293, (uint64_t *)&v275[8]);
        sub_22E903BEC((unsigned int *)&v293);
        sub_22E8FCA40(v16, *(int *)&v275[16], 0x16F6u, 0, (uint64_t)&v293);
        sub_22E8900C4((uint64_t)&v293, (int *)v275);
        v146 = (uint64_t *)&v275[20];
        goto LABEL_272;
      }
      v172 = (unsigned __int8 **)*((_QWORD *)v35 + 2);
      v171 = (unsigned __int8 *)*((_QWORD *)v35 + 3);
      v173 = *(unsigned __int8 *)v172;
      if ((v173 & 0xFE) == 0x70)
      {
        v174 = sub_22EFFEB40(v172[3]);
        v173 = *v171;
        if ((*v174 & 0xFE) == 0x70)
        {
          if (v173 == 16)
          {
            v175 = v171 + 16;
            if ((sub_22ECD4A80((uint64_t)v57, v172[2], *(unsigned __int8 **)&v171[8 * ((*(unsigned __int16 *)v171 >> 13) & 1)+ 16+ 8 * ((*(unsigned __int16 *)v171 >> 12) & 1)]) & 1) == 0)
            {
              *(_DWORD *)v275 = 18;
              sub_22EFF605C(*(_QWORD *)&v175[8 * ((*(unsigned __int16 *)v171 >> 13) & 1)
                                           + 8 * ((*(unsigned __int16 *)v171 >> 12) & 1)]);
              *(_DWORD *)&v275[16] = v229;
              *(_DWORD *)&v275[4] = v229;
              v176 = (unsigned __int8 **)v172[2];
              goto LABEL_442;
            }
            v291 = v172[2];
            v176 = *(unsigned __int8 ***)&v175[8 * ((*(unsigned __int16 *)v171 >> 12) & 1)
                                             + 8
                                             + 8 * ((*(unsigned __int16 *)v171 >> 13) & 1)];
            v177 = *(unsigned __int8 *)v176;
            if (v177 == 8)
            {
              if (*(_DWORD *)v176 <= 0xFFu)
              {
                *(_DWORD *)&v275[16] = *((_DWORD *)v176 + 1);
                *(_DWORD *)v275 = 0;
                *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
LABEL_442:
                sub_22F0D4E74((uint64_t)v176);
                *(_QWORD *)&v275[20] = v254;
                *(_QWORD *)&v275[8] = v254;
                goto LABEL_443;
              }
              if (*(_DWORD *)v176 >= 0x200u)
              {
                *(_DWORD *)&v275[16] = *((_DWORD *)v176 + 1);
                *(_DWORD *)v275 = 1;
                *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
                goto LABEL_442;
              }
              v176 = (unsigned __int8 **)v176[2];
              LOBYTE(v177) = *(_BYTE *)v176;
            }
            if ((v177 & 0xFE) != 0x70)
            {
              *(_DWORD *)&v275[16] = *((_DWORD *)v171 + 1);
              *(_DWORD *)v275 = 2;
              *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
              v176 = (unsigned __int8 **)v171;
              goto LABEL_442;
            }
            if ((*(_DWORD *)v176 & 0xFC0000) != 0x540000)
            {
              v245 = *((_DWORD *)v176 + 1);
              *(_DWORD *)v275 = 2;
              *(_DWORD *)&v275[4] = v245;
              *(_DWORD *)&v275[16] = *((_DWORD *)v176 + 1);
              goto LABEL_442;
            }
            v238 = v176[2];
            v237 = v176[3];
            *(_QWORD *)&v287 = v238;
            *(_QWORD *)&v288 = v237;
            v239 = sub_22EFFEB40(v172[3]);
            v193 = v239;
            if ((*(_DWORD *)v239 & 0xFC0000) != 0x380000)
            {
              v246 = 12;
LABEL_440:
              v253 = *((_DWORD *)v193 + 1);
              *(_DWORD *)v275 = v246;
              *(_DWORD *)&v275[4] = v253;
              *(_DWORD *)&v275[16] = *((_DWORD *)v193 + 1);
              goto LABEL_441;
            }
            *((_QWORD *)&v288 + 1) = v239;
            v240 = sub_22ECD4A80((uint64_t)v57, v238, *((unsigned __int8 **)v239 + 2));
            v241 = (unsigned __int8 **)(v193 + 24);
            if ((v240 & 1) == 0)
            {
              v242 = sub_22ECD4A80((uint64_t)v57, v238, *v241);
              v241 = (unsigned __int8 **)(v193 + 16);
              if ((v242 & 1) == 0)
              {
                v247 = 7;
LABEL_430:
                *(_DWORD *)&v275[16] = *((_DWORD *)v193 + 1);
                *(_DWORD *)v275 = v247;
                *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
                goto LABEL_441;
              }
            }
            *((_QWORD *)&v287 + 1) = *v241;
            v243 = *(unsigned __int16 *)v171;
            if ((v243 & 0x800) == 0
              || (v193 = *(unsigned __int8 **)&v175[8 * ((v243 >> 13) & 1) + 16 + 8 * ((v243 >> 12) & 1)]) == 0)
            {
LABEL_368:
              v15 = a4;
              v16 = a1;
              if ((sub_22ECD4A24((uint64_t *)&OpenMPClauseName, (uint64_t)v275) & 1) != 0)
                goto LABEL_75;
              goto LABEL_176;
            }
            v292 = 1;
            v244 = *v193;
            if (v244 == 8)
            {
              if (*(_DWORD *)v193 <= 0xFFu)
              {
                *(_DWORD *)&v275[16] = *((_DWORD *)v193 + 1);
                *(_DWORD *)v275 = 0;
                *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
LABEL_441:
                v176 = (unsigned __int8 **)v193;
                goto LABEL_442;
              }
              if (*(_DWORD *)v193 >= 0x200u)
              {
                v247 = 1;
                goto LABEL_430;
              }
              v193 = (unsigned __int8 *)*((_QWORD *)v193 + 2);
              LOBYTE(v244) = *v193;
            }
            if ((v244 & 0xFE) == 0x70)
            {
              if ((*(_DWORD *)v193 & 0xFC0000) == 0x540000)
              {
                if ((sub_22ECD4A80((uint64_t)v57, v238, *((unsigned __int8 **)v193 + 3)) & 1) == 0)
                {
                  *(_DWORD *)v275 = 13;
                  v248 = *((_QWORD *)v193 + 3);
                  sub_22EFF605C(v248);
                  *(_DWORD *)&v275[4] = v249;
                  sub_22EFF605C((uint64_t)v238);
                  *(_DWORD *)&v275[16] = v250;
                  sub_22F0D4E74(v248);
                  *(_QWORD *)&v275[8] = v251;
                  v235 = (uint64_t)v238;
                  goto LABEL_405;
                }
LABEL_367:
                v290 = *((_QWORD *)v193 + 2);
                goto LABEL_368;
              }
LABEL_439:
              v246 = 2;
              goto LABEL_440;
            }
            goto LABEL_438;
          }
          v172 = (unsigned __int8 **)v171;
          goto LABEL_388;
        }
        v193 = (unsigned __int8 *)v172;
        v172 = (unsigned __int8 **)v171;
      }
      else
      {
        v193 = v171;
      }
      if (v173 == 16)
      {
        v16 = a1;
        if (!sub_22ECD4B9C((uint64_t)&OpenMPClauseName, (unsigned __int16 *)v172, (uint64_t)v275))
          goto LABEL_176;
        if ((*v193 & 0xFE) == 0x70)
        {
          if ((*(_DWORD *)v193 & 0xFC0000) == 0x540000)
          {
            v219 = v287;
            if ((sub_22ECD4A80((uint64_t)OpenMPClauseName, (unsigned __int8 *)v287, *((unsigned __int8 **)v193 + 3)) & 1) == 0)
            {
              *(_DWORD *)v275 = 13;
              v231 = *((_QWORD *)v193 + 3);
              sub_22EFF605C(v231);
              *(_DWORD *)&v275[4] = v232;
              sub_22EFF605C(v219);
              *(_DWORD *)&v275[16] = v233;
              sub_22F0D4E74(v231);
              *(_QWORD *)&v275[8] = v234;
              v235 = v219;
LABEL_405:
              sub_22F0D4E74(v235);
              *(_QWORD *)&v275[20] = v236;
LABEL_443:
              v16 = a1;
              goto LABEL_176;
            }
            goto LABEL_367;
          }
          goto LABEL_439;
        }
LABEL_438:
        *(_DWORD *)v275 = 2;
        sub_22F0D5A50((uint64_t)v193);
        *(_DWORD *)&v275[16] = v252;
        *(_DWORD *)&v275[4] = v252;
        goto LABEL_441;
      }
LABEL_388:
      *(_DWORD *)v275 = 14;
      sub_22F0D5A50((uint64_t)v172);
      *(_DWORD *)&v275[16] = v224;
      *(_DWORD *)&v275[4] = v224;
      v176 = v172;
      goto LABEL_442;
    }
    memset(&v275[4], 0, 24);
    v87 = (void *)v16[11];
    OpenMPClauseName = v87;
    v287 = 0uLL;
    v288 = 0uLL;
    v289 = 1;
    v88 = *v35;
    if (v88 == 8)
    {
      if (*(_DWORD *)v35 <= 0xFFu)
      {
        *(_DWORD *)&v275[16] = *((_DWORD *)v35 + 1);
        *(_DWORD *)v275 = 0;
        *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
LABEL_296:
        v178 = (uint64_t)v35;
LABEL_297:
        sub_22F0D4E74(v178);
LABEL_298:
        *(_QWORD *)&v275[20] = v179;
        *(_QWORD *)&v275[8] = v179;
        goto LABEL_299;
      }
      if ((*(_DWORD *)v35 & 0xFFFFFF00) != 0x100)
      {
        *(_DWORD *)&v275[16] = *((_DWORD *)v35 + 1);
        *(_DWORD *)v275 = 1;
        *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
        goto LABEL_296;
      }
      v35 = (unsigned __int8 *)*((_QWORD *)v35 + 2);
      v88 = *v35;
    }
    if (v88 == 16)
    {
      if ((sub_22ECD4B9C((uint64_t)&OpenMPClauseName, (unsigned __int16 *)v35, (uint64_t)v275) & 1) == 0)
      {
LABEL_299:
        v111 = *(_DWORD *)&v275[4];
        v112 = v16;
        v113 = 4166;
        goto LABEL_300;
      }
LABEL_184:
      if (sub_22ECD4E88((uint64_t *)&OpenMPClauseName, (uint64_t)v275))
      {
        v46 = 0;
        v45 = 0;
        v49 = v287;
        v47 = v288;
        v48 = v289 != 0;
        v50.i64[0] = *((_QWORD *)&v287 + 1);
        goto LABEL_99;
      }
      goto LABEL_299;
    }
    if ((v88 & 0xFE) == 0x70)
    {
      if ((*(_DWORD *)v35 & 0xFC0000) != 0x540000)
      {
        v168 = *((_DWORD *)v35 + 1);
        *(_DWORD *)v275 = 2;
        *(_DWORD *)&v275[4] = v168;
        *(_DWORD *)&v275[16] = *((_DWORD *)v35 + 1);
        goto LABEL_296;
      }
      v116 = (unsigned __int8 *)*((_QWORD *)v35 + 2);
      v35 = (unsigned __int8 *)*((_QWORD *)v35 + 3);
      *(_QWORD *)&v287 = v116;
      v117 = sub_22EFFA6B0(v35);
      if (*v117 == 103)
      {
        v118 = v117;
        if ((sub_22ECD4A80((uint64_t)v87, v116, *((unsigned __int8 **)v117 + 5)) & 1) == 0)
        {
          *(_DWORD *)v275 = 4;
          v202 = *((_QWORD *)v118 + 5);
          sub_22EFF605C(v202);
          *(_DWORD *)&v275[16] = v203;
          *(_DWORD *)&v275[4] = v203;
          v178 = v202;
          goto LABEL_297;
        }
        v119 = *((_QWORD *)v118 + 3);
        if ((*(_BYTE *)v119 & 0xFE) != 0x70)
        {
          *(_DWORD *)v275 = 5;
          sub_22EFF605C(v119);
          *(_DWORD *)&v275[16] = v222;
          *(_DWORD *)&v275[4] = v222;
LABEL_412:
          sub_22F0D4E74(v119);
          v16 = a1;
          goto LABEL_298;
        }
        v120 = (*(_DWORD *)v119 >> 18) & 0x3F;
        if ((v120 - 10) < 2)
        {
          v121 = sub_22EFFEB40(*((unsigned __int8 **)v118 + 4));
          *((_QWORD *)&v287 + 1) = v121;
          if (sub_22ECD4A80((uint64_t)v87, v116, *(unsigned __int8 **)(v119 + 16))
            && sub_22ECD4A80((uint64_t)v87, v121, *(unsigned __int8 **)(v119 + 24)))
          {
            *((_QWORD *)&v288 + 1) = v119;
LABEL_409:
            v15 = a4;
            v16 = a1;
            goto LABEL_184;
          }
          if (sub_22ECD4A80((uint64_t)v87, v121, *(unsigned __int8 **)(v119 + 16))
            && sub_22ECD4A80((uint64_t)v87, v116, *(unsigned __int8 **)(v119 + 24)))
          {
            *((_QWORD *)&v288 + 1) = v119;
            v289 = 0;
            goto LABEL_409;
          }
          goto LABEL_410;
        }
        if (v120 != 14)
        {
          v230 = 6;
LABEL_411:
          *(_DWORD *)&v275[16] = *(_DWORD *)(v119 + 4);
          *(_DWORD *)v275 = v230;
          *(_DWORD *)&v275[4] = *(_DWORD *)&v275[16];
          goto LABEL_412;
        }
        *((_QWORD *)&v288 + 1) = *((_QWORD *)v118 + 3);
        *(_QWORD *)&v288 = sub_22EFFEB40(*((unsigned __int8 **)v118 + 4));
        if (sub_22ECD4A80((uint64_t)v87, v116, *(unsigned __int8 **)(v119 + 16)))
        {
          v225 = *(unsigned __int8 **)(v119 + 24);
        }
        else
        {
          if (!sub_22ECD4A80((uint64_t)v87, v116, *(unsigned __int8 **)(v119 + 24)))
          {
LABEL_410:
            v230 = 7;
            goto LABEL_411;
          }
          v225 = *(unsigned __int8 **)(v119 + 16);
        }
        *((_QWORD *)&v287 + 1) = sub_22EFFEB40(v225);
        goto LABEL_409;
      }
      *(_DWORD *)v275 = 3;
      sub_22EFF605C((uint64_t)v35);
    }
    else
    {
      *(_DWORD *)v275 = 2;
      sub_22F0D5A50((uint64_t)v35);
    }
    *(_DWORD *)&v275[16] = v149;
    *(_DWORD *)&v275[4] = v149;
    goto LABEL_296;
  }
  v281 = 4;
  v279 = 0;
  v280 = 0;
  v70 = *v35;
  if ((v70 + 21) < 0x7Bu)
  {
    if (v70 == 8)
    {
      if ((*(_DWORD *)v35 & 0xFFFFFF00) == 0x200)
      {
        v71 = (unsigned __int8 *)*((_QWORD *)v35 + 2);
        v72 = *(unsigned __int8 **)&v35[8 * ((*(_DWORD *)v35 >> 8) - 1) + 16];
        if (*v71 == 173)
          v71 = sub_22EFFA6B0(*((unsigned __int8 **)v71 + 2));
        if (*v72 == 173)
          v72 = sub_22EFFA6B0(*((unsigned __int8 **)v72 + 2));
        *(_QWORD *)v275 = v16;
        *(_DWORD *)&v275[8] = 0;
        memset(&v275[16], 0, 24);
        v263 = 0u;
        v276 = 0;
        v277 = 0;
        v278 = 0;
        if ((sub_22EC9E32C((_QWORD **)v275, v72, 0, 0) & 1) == 0
          && (*v71 & 0xFE) == 0x70
          && (*(_DWORD *)v71 & 0xFC0000) == 0x540000)
        {
          if ((sub_22EFC7ADC(v16[27]) & 1) != 0)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v76 = 0;
            v263 = 0u;
            v15 = a4;
            goto LABEL_161;
          }
          v204 = sub_22EFFA6B0(*((unsigned __int8 **)v71 + 3));
          v293 = &v295;
          v294 = 0x2000000000;
          *(_QWORD *)&v287 = 0x2000000000;
          v76 = *(_QWORD *)&v275[16];
          v205 = v16[11];
          v284 = 1;
          v282 = &off_24FAC6E70;
          p_OpenMPClauseName = &v293;
          v285 = v205;
          OpenMPClauseName = (char *)&v287 + 8;
          sub_22F0E9FEC(&v282, *(unsigned __int8 **)&v275[16]);
          v206 = v16[11];
          v284 = 1;
          v282 = &off_24FAC6E70;
          p_OpenMPClauseName = &OpenMPClauseName;
          v285 = v206;
          sub_22F0E9FEC(&v282, v204);
          v207 = llvm::FoldingSetNodeID::operator==();
          v208 = v207;
          if (v207)
          {
            v75 = (unsigned __int8 *)*((_QWORD *)v71 + 2);
            v263 = *(int8x16_t *)&v275[24];
            v261 = 1;
            v209 = v276;
          }
          else
          {
            v261 = 0;
            v209 = 0;
            v75 = 0;
            v76 = 0;
            v263 = 0u;
          }
          if (OpenMPClauseName != (char *)&v287 + 8)
            free(OpenMPClauseName);
          if (v293 != &v295)
            free(v293);
          v15 = a4;
          v16 = a1;
          v74 = v209;
          v73 = v261;
          if ((v208 & 1) != 0)
            goto LABEL_161;
        }
        else
        {
          v76 = 0;
          v75 = 0;
          v74 = 0;
          v73 = 0;
        }
        v122 = sub_22EC9E32C((_QWORD **)v275, v71, 0, 0);
        v123 = *v72;
        if ((v122 & 1) == 0 && (v123 & 0xFE) == 0x70)
        {
          if ((*(_DWORD *)v72 & 0xFC0000) == 0x540000)
          {
            if ((sub_22EFC7ADC(v16[27]) & 1) != 0)
              goto LABEL_161;
            v258 = v74;
            v260 = v73;
            v124 = sub_22EFFA6B0(*((unsigned __int8 **)v72 + 3));
            v293 = &v295;
            v294 = 0x2000000000;
            *(_QWORD *)&v287 = 0x2000000000;
            v125 = v16[11];
            v284 = 1;
            v282 = &off_24FAC6E70;
            p_OpenMPClauseName = &v293;
            v285 = v125;
            OpenMPClauseName = (char *)&v287 + 8;
            v255 = *(_QWORD *)&v275[16];
            sub_22F0E9FEC(&v282, *(unsigned __int8 **)&v275[16]);
            v126 = v16[11];
            v284 = 1;
            v282 = &off_24FAC6E70;
            p_OpenMPClauseName = &OpenMPClauseName;
            v285 = v126;
            sub_22F0E9FEC(&v282, v124);
            v127 = llvm::FoldingSetNodeID::operator==();
            v128 = v127;
            if (v127)
            {
              v75 = (unsigned __int8 *)*((_QWORD *)v72 + 2);
              v263 = *(int8x16_t *)&v275[24];
              v76 = v255;
              v258 = v276;
              v260 = 0;
            }
            if (OpenMPClauseName != (char *)&v287 + 8)
              free(OpenMPClauseName);
            if (v293 != &v295)
              free(v293);
            if ((v128 & 1) != 0)
            {
              v15 = a4;
              v16 = a1;
              v74 = v258;
              v73 = v260;
              goto LABEL_161;
            }
            v123 = *v72;
            v15 = a4;
            v16 = a1;
            v74 = v258;
            v73 = v260;
          }
          else
          {
            v123 = *(_DWORD *)v72;
          }
        }
        v210 = *v71;
        if ((v210 - 102) <= 0x84
          && (v123 - 102) <= 0x84
          && ((v71[1] & 0x40) != 0 || (v72[1] & 0x40) != 0))
        {
LABEL_161:
          v106 = sub_22EFC7ADC(v16[27]);
          if (v106)
            v45 = 0;
          else
            v45 = v75;
          if (v106)
            v49 = 0;
          else
            v49 = v76;
          if (v106)
            v107 = -1;
          else
            v107 = 0;
          v50 = vbicq_s8(v263, (int8x16_t)vdupq_n_s64(v107));
          v47 = 0uLL;
          v46 = v73 != 0;
          v48 = v74 != 0;
          goto LABEL_99;
        }
        if ((v210 & 0xFE) == 0x70)
        {
          if ((*(_DWORD *)v71 & 0xFC0000) == 0x540000)
          {
            v259 = v74;
            v262 = v73;
            if ((v123 & 0xFE) == 0x70)
            {
              v211 = v72;
              if ((*(_DWORD *)v72 & 0xFC0000) == 0x540000)
              {
                v212 = sub_22EFFA6B0(*((unsigned __int8 **)v71 + 3));
                v256 = sub_22EFFA6B0(*((unsigned __int8 **)v72 + 2));
                v293 = &v295;
                v294 = 0x2000000000;
                *(_QWORD *)&v287 = 0x2000000000;
                v213 = a1[11];
                v284 = 1;
                v282 = &off_24FAC6E70;
                p_OpenMPClauseName = &v293;
                v285 = v213;
                OpenMPClauseName = (char *)&v287 + 8;
                sub_22F0E9FEC(&v282, v212);
                v214 = a1[11];
                v284 = 1;
                v282 = &off_24FAC6E70;
                p_OpenMPClauseName = &OpenMPClauseName;
                v285 = v214;
                sub_22F0E9FEC(&v282, v256);
                v257 = llvm::FoldingSetNodeID::operator==();
                if (v257)
                {
                  v114 = 0;
                  v102 = 0;
                  v75 = (unsigned __int8 *)*((_QWORD *)v71 + 2);
                  v76 = *((_QWORD *)v211 + 2);
                  v259 = 0;
                  v262 = 1;
                  v215.i64[0] = *((_QWORD *)v211 + 3);
                  v263 = v215;
                }
                else
                {
                  v281 = 3;
                  v114 = *((_DWORD *)v71 + 1);
                  sub_22F0D4E74((uint64_t)v71);
                  v280 = v226;
                  sub_22EFF605C(*((_QWORD *)v211 + 2));
                  v102 = v227;
                  sub_22F0D4E74(*((_QWORD *)v211 + 3));
                  v279 = v228;
                }
                if (OpenMPClauseName != (char *)&v287 + 8)
                  free(OpenMPClauseName);
                if (v293 != &v295)
                  free(v293);
                v15 = a4;
                v16 = a1;
                v74 = v259;
                v73 = v262;
                if ((v257 & 1) != 0)
                  goto LABEL_161;
                goto LABEL_179;
              }
              v281 = 0;
              v102 = *((_DWORD *)v72 + 1);
              sub_22F0D4E74((uint64_t)v72);
              v217 = v223;
              v216 = HIDWORD(v223);
            }
            else
            {
              v281 = 0;
              sub_22F0D5A50((uint64_t)v72);
              v217 = v216;
              v102 = v216;
            }
            v16 = a1;
          }
          else
          {
            v281 = 0;
            v102 = *((_DWORD *)v71 + 1);
            sub_22F0D4E74((uint64_t)v71);
            v217 = v218;
            v216 = HIDWORD(v218);
          }
        }
        else
        {
          v281 = 0;
          sub_22F0D5A50((uint64_t)v71);
          v217 = v216;
          v102 = v216;
        }
        v279 = v217 | (v216 << 32);
        v280 = v279;
        v114 = v102;
LABEL_179:
        sub_22E8FCA40(v16, v114, 0x1044u, 0, (uint64_t)&v293);
        sub_22E8906A0((uint64_t)&v293, (uint64_t *)&v280);
        sub_22E903BEC((unsigned int *)&v293);
        v115 = v102;
LABEL_240:
        sub_22E8FCA40(v16, v115, 0x16F5u, 0, (uint64_t)&v293);
        sub_22E8900C4((uint64_t)&v293, &v281);
        v146 = (uint64_t *)&v279;
LABEL_272:
        sub_22E8906A0((uint64_t)&v293, v146);
        sub_22E903BEC((unsigned int *)&v293);
        goto LABEL_273;
      }
      sub_22F0D5A50((uint64_t)v35);
      v102 = v101;
      v279 = v101 | ((unint64_t)v101 << 32);
      v280 = v279;
      v103 = 2;
    }
    else
    {
      sub_22F0D5A50((uint64_t)v35);
      v102 = v101;
      v279 = v101 | ((unint64_t)v101 << 32);
      v280 = v279;
      v103 = 1;
    }
    v281 = v103;
    v114 = v101;
    goto LABEL_179;
  }
  v89 = sub_22EFFA6B0(v35);
  v90 = v89;
  if ((*v89 & 0xFE) == 0x70)
    v91 = v89;
  else
    v91 = 0;
  if (!v91 || (*(_DWORD *)v91 & 0xFC0000) != 0x540000)
  {
    if ((v35[1] & 0x40) == 0)
    {
      sub_22EFF605C((uint64_t)v35);
      v97 = v96;
      sub_22F0D4E74((uint64_t)v35);
      v280 = v98;
      if (v91)
      {
        v100 = *((_DWORD *)v91 + 1);
        v35 = v90;
      }
      else
      {
        sub_22EFF605C((uint64_t)v35);
        v100 = v99;
      }
      sub_22F0D4E74((uint64_t)v35);
      v279 = v145;
      v281 = 0;
      sub_22E8FCA40(v16, v97, 0x1045u, 0, (uint64_t)&v293);
      sub_22E8906A0((uint64_t)&v293, (uint64_t *)&v280);
      sub_22E903BEC((unsigned int *)&v293);
      v115 = v100;
      goto LABEL_240;
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v263 = 0u;
LABEL_159:
    if (sub_22EFC7ADC(v16[27]))
    {
      v76 = 0;
      v75 = 0;
      v263 = 0u;
    }
    goto LABEL_161;
  }
  v75 = (unsigned __int8 *)*((_QWORD *)v91 + 2);
  v92 = sub_22EFFA6B0(*((unsigned __int8 **)v91 + 3));
  v293 = v16;
  LODWORD(v294) = 0;
  v296 = 0uLL;
  v295 = 0;
  v297[0] = 0;
  *(_QWORD *)&v297[4] = 0;
  v298 = 0;
  if (!sub_22EC9E32C((_QWORD **)&v293, v92, 0x1045u, 0x16F8u))
  {
    v76 = (uint64_t)v295;
    v263 = v296;
    v74 = v297[0];
    v73 = v298;
    goto LABEL_159;
  }
LABEL_273:
  v7 = 1;
LABEL_274:
  sub_22E3B4AB8((uint64_t)&v304, v305[0]);
  if (v302[0] != &v303)
    free(v302[0]);
  return v7;
}

uint64_t sub_22EC96930(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4, unsigned __int8 **a5, uint64_t a6, unsigned __int8 **a7, uint64_t a8, _DWORD **a9, uint64_t a10, unsigned __int8 **a11, uint64_t a12, int *a13, unsigned int a14, uint64_t *a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v18;
  int v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t i;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t *v59;
  llvm *v60;
  uint64_t v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t j;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  int v98;
  unsigned int v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  llvm *v104;
  unsigned int v105;
  llvm *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm *v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  unsigned __int8 **v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t k;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  BOOL v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  unint64_t v192;
  unsigned __int8 *v193;
  uint64_t *v194;
  llvm *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned __int8 *v198;
  unint64_t v200;
  uint64_t v201;
  _DWORD *v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  _QWORD *v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v223;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  llvm *v230[2];
  unsigned int v231;
  llvm *v232[2];
  unsigned int v233;
  llvm *v234[2];
  unsigned int v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  __int16 v239;
  char v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  _BYTE v244[32];
  _QWORD *OpenMPClauseName;
  uint64_t v246;
  _QWORD v247[6];

  v17 = a2;
  v247[4] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return v17;
  v18 = a1;
  v241 = 0;
  if ((a2 & 1) != 0)
  {
    sub_22E8FCA40(a1, a17, 0x10F4u, 0, (uint64_t)&v236);
    sub_22E8900C4((uint64_t)&v236, &v241);
    sub_22E903BEC((unsigned int *)&v236);
    return v17;
  }
  v20 = *(_DWORD *)(a2 + 28);
  if ((v20 & 0x7F) == 0x1D)
  {
    v21 = *(_QWORD *)(a2 + 48);
    v20 = *(_DWORD *)(v21 + 28);
  }
  else
  {
    v21 = a2;
  }
  if ((v20 & 0x7Eu) - 58 <= 0xFFFFFFF9)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v21 + 24), 0x1085u, 0, (uint64_t)&v236);
    sub_22E8900C4((uint64_t)&v236, &v241);
    sub_22E903BEC((unsigned int *)&v236);
    return 0;
  }
  if (a4)
    v219 = sub_22EC98030(a1, a4, 75, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  else
    v219 = 0;
  v23 = 0;
  v226 = v18;
  v234[0] = 0;
  v234[1] = 0;
  v235 = 0;
  v223 = a6;
  if (!a6)
    goto LABEL_14;
  v23 = 0;
  v26 = a5;
  do
  {
    v27 = sub_22EFFA6B0(*v26);
    v28 = v27;
    OpenMPClauseName = v27;
    v29 = *v27;
    if (v29 != 161)
    {
LABEL_86:
      if (v29 == 133)
      {
        v23 = (uint64_t)v28;
      }
      else
      {
        sub_22EFF605C((uint64_t)v28);
        sub_22E8FCA40(v18, v52, 0x10CAu, 0, (uint64_t)&v236);
        v242 = *(uint64_t **)(v21 + 40);
        v53 = sub_22E894538((uint64_t)&v236, (uint64_t *)&v242);
        LODWORD(v232[0]) = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 < 4;
        sub_22E8900C4(v53, (int *)v232);
        sub_22E903BEC((unsigned int *)&v236);
      }
      goto LABEL_89;
    }
    v30 = *((_QWORD *)v27 + 2);
    if (!v30 || (*(_DWORD *)(v30 + 28) & 0x7F) != 0x40)
      goto LABEL_85;
    v31 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v31)
      v32 = *(_BYTE *)(v31 + 16) == 26;
    else
      v32 = 0;
    if (v32)
      goto LABEL_28;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    {
      v33 = 0;
      v18 = v226;
      goto LABEL_29;
    }
    v31 = sub_22F10CF48(v31);
    v18 = v226;
    if (v31)
LABEL_28:
      v33 = (unsigned __int16)(*(_QWORD *)(v31 + 16) >> 38);
    else
      v33 = 0;
LABEL_29:
    v34 = (*(_DWORD *)(v30 + 96) >> 20);
    if (v34 != 255)
      goto LABEL_56;
    v35 = v30;
    if ((*(_DWORD *)(v30 + 28) & 0x7F) == 0x53)
      goto LABEL_55;
    for (i = *(_QWORD *)(v30 + 16); ; i = *(_QWORD *)(v37 + v39 + 16))
    {
      v37 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) != 0)
        v37 = *(_QWORD *)v37;
      v38 = *(_WORD *)(v37 + 8) & 0x7F;
      if (v38 == 83)
        break;
      v39 = -40;
      if ((*(_WORD *)(v37 + 8) & 0x7Fu) > 0x46)
      {
        if (v38 == 71)
        {
          v39 = -56;
          continue;
        }
        if (v38 != 81)
          goto LABEL_45;
      }
      else
      {
        if (v38 > 0x18)
          goto LABEL_44;
        if (v38 == 16)
          goto LABEL_38;
        if (((1 << v38) & 0x1066) == 0)
        {
          if (v38 == 24)
          {
LABEL_38:
            v39 = -48;
            continue;
          }
LABEL_44:
          if (v38 == 70)
          {
            v39 = -64;
            continue;
          }
LABEL_45:
          v40 = v38 - 52;
          if (v38 - 33 >= 5)
            v41 = -48;
          else
            v41 = -64;
          v100 = v40 >= 6;
          v39 = -72;
          if (v100)
            v39 = v41;
          continue;
        }
      }
    }
    v35 = v37 - 40;
LABEL_55:
    v34 = sub_22F36F2CC(*(_QWORD *)(v35 + 88), v30);
LABEL_56:
    if (v33 <= v34)
      goto LABEL_85;
    v42 = (*(_DWORD *)(v30 + 96) >> 20);
    if (v42 != 255)
      goto LABEL_84;
    v43 = v30;
    if ((*(_DWORD *)(v30 + 28) & 0x7F) == 0x53)
      goto LABEL_83;
    v44 = *(_QWORD *)(v30 + 16);
    while (2)
    {
      v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if ((v44 & 4) != 0)
        v45 = *(_QWORD *)v45;
      v46 = *(_WORD *)(v45 + 8) & 0x7F;
      if (v46 != 83)
      {
        v47 = -40;
        if ((*(_WORD *)(v45 + 8) & 0x7Fu) > 0x46)
        {
          if (v46 == 71)
          {
            v47 = -56;
          }
          else if (v46 != 81)
          {
LABEL_73:
            v48 = v46 - 52;
            if (v46 - 33 >= 5)
              v49 = -48;
            else
              v49 = -64;
            v100 = v48 >= 6;
            v47 = -72;
            if (v100)
              v47 = v49;
          }
        }
        else
        {
          if (v46 > 0x18)
            goto LABEL_72;
          if (v46 == 16)
            goto LABEL_66;
          if (((1 << v46) & 0x1066) == 0)
          {
            if (v46 == 24)
            {
LABEL_66:
              v47 = -48;
            }
            else
            {
LABEL_72:
              if (v46 != 70)
                goto LABEL_73;
              v47 = -64;
            }
          }
        }
        v44 = *(_QWORD *)(v45 + v47 + 16);
        continue;
      }
      break;
    }
    v43 = v45 - 40;
LABEL_83:
    v42 = sub_22F36F2CC(*(_QWORD *)(v43 + 88), v30);
LABEL_84:
    v50 = *(_QWORD *)(*(_QWORD *)(v21 + 120) + 8 * v42);
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    if (v51 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30))
    {
LABEL_85:
      v29 = *v28;
      goto LABEL_86;
    }
    v242 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    sub_22F2543D4((uint64_t)&v236, (uint64_t)v234, (uint64_t *)&v242, &OpenMPClauseName);
LABEL_89:
    ++v26;
  }
  while (v26 != &a5[v223]);
LABEL_14:
  v232[0] = 0;
  v232[1] = 0;
  v233 = 0;
  if (!a8)
    goto LABEL_15;
  v54 = 0;
  v55 = a7;
  do
  {
    v56 = sub_22EFFA6B0(*v55);
    v57 = v56;
    v58 = *v56;
    if (v58 != 161)
      goto LABEL_165;
    if ((*(_DWORD *)(*((_QWORD *)v56 + 2) + 28) & 0x7F) == 0x40)
      v59 = (uint64_t *)*((_QWORD *)v56 + 2);
    else
      v59 = 0;
    v242 = v59;
    if (!v59)
      goto LABEL_164;
    v60 = (llvm *)(*(uint64_t (**)(uint64_t *))(*v59 + 32))(v59);
    v61 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v61)
      v62 = *(_BYTE *)(v61 + 16) == 26;
    else
      v62 = 0;
    if (v62)
      goto LABEL_107;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    {
      v63 = 0;
      v18 = v226;
      goto LABEL_108;
    }
    v61 = sub_22F10CF48(v61);
    v18 = v226;
    if (v61)
LABEL_107:
      v63 = (unsigned __int16)(*(_QWORD *)(v61 + 16) >> 38);
    else
      v63 = 0;
LABEL_108:
    v64 = (*((_DWORD *)v242 + 24) >> 20);
    if (v64 != 255)
      goto LABEL_135;
    v65 = v242;
    if ((*((_DWORD *)v242 + 7) & 0x7F) == 0x53)
      goto LABEL_134;
    for (j = v242[2]; ; j = *(_QWORD *)(v67 + v69 + 16))
    {
      v67 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v67 = *(_QWORD *)v67;
      v68 = *(_WORD *)(v67 + 8) & 0x7F;
      if (v68 == 83)
        break;
      v69 = -40;
      if ((*(_WORD *)(v67 + 8) & 0x7Fu) > 0x46)
      {
        if (v68 == 71)
        {
          v69 = -56;
          continue;
        }
        if (v68 != 81)
          goto LABEL_124;
      }
      else
      {
        if (v68 > 0x18)
          goto LABEL_123;
        if (v68 == 16)
          goto LABEL_117;
        if (((1 << v68) & 0x1066) == 0)
        {
          if (v68 == 24)
          {
LABEL_117:
            v69 = -48;
            continue;
          }
LABEL_123:
          if (v68 == 70)
          {
            v69 = -64;
            continue;
          }
LABEL_124:
          v70 = v68 - 52;
          v100 = v68 - 33 >= 5;
          v71 = -64;
          if (v100)
            v71 = -48;
          v100 = v70 >= 6;
          v69 = -72;
          if (v100)
            v69 = v71;
          continue;
        }
      }
    }
    v65 = (uint64_t *)(v67 - 40);
LABEL_134:
    v64 = sub_22F36F2CC(v65[11], (uint64_t)v242);
LABEL_135:
    if (v63 <= v64)
      goto LABEL_164;
    v72 = (*((_DWORD *)v242 + 24) >> 20);
    if (v72 != 255)
      goto LABEL_163;
    v73 = v242;
    if ((*((_DWORD *)v242 + 7) & 0x7F) == 0x53)
      goto LABEL_162;
    v74 = v242[2];
    while (2)
    {
      v75 = v74 & 0xFFFFFFFFFFFFFFF8;
      if ((v74 & 4) != 0)
        v75 = *(_QWORD *)v75;
      v76 = *(_WORD *)(v75 + 8) & 0x7F;
      if (v76 != 83)
      {
        v77 = -40;
        if ((*(_WORD *)(v75 + 8) & 0x7Fu) > 0x46)
        {
          if (v76 == 71)
          {
            v77 = -56;
          }
          else if (v76 != 81)
          {
            goto LABEL_152;
          }
        }
        else
        {
          if (v76 > 0x18)
            goto LABEL_151;
          if (v76 == 16)
            goto LABEL_145;
          if (((1 << v76) & 0x1066) == 0)
          {
            if (v76 == 24)
            {
LABEL_145:
              v77 = -48;
            }
            else
            {
LABEL_151:
              if (v76 == 70)
              {
                v77 = -64;
              }
              else
              {
LABEL_152:
                v78 = v76 - 52;
                v100 = v76 - 33 >= 5;
                v79 = -64;
                if (v100)
                  v79 = -48;
                v100 = v78 >= 6;
                v77 = -72;
                if (v100)
                  v77 = v79;
              }
            }
          }
        }
        v74 = *(_QWORD *)(v75 + v77 + 16);
        continue;
      }
      break;
    }
    v73 = (uint64_t *)(v75 - 40);
LABEL_162:
    v72 = sub_22F36F2CC(v73[11], (uint64_t)v242);
LABEL_163:
    v80 = *(_QWORD *)(*(_QWORD *)(v21 + 120) + 8 * v72);
    if ((llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80) != v60)
    {
LABEL_164:
      v58 = *v57;
LABEL_165:
      if (v58 == 133)
      {
        if (v54)
        {
          sub_22EFF605C((uint64_t)v57);
          sub_22E8FCA40(v18, v83, 0x1104u, 0, (uint64_t)&v236);
          LODWORD(v230[0]) = 2;
          v84 = sub_22E8900C4((uint64_t)&v236, (int *)v230);
          OpenMPClauseName = (_QWORD *)llvm::omp::getOpenMPClauseName();
          v246 = v85;
          v86 = sub_22F2F2210(v84, (uint64_t)&OpenMPClauseName);
          sub_22F0D4E74((uint64_t)v57);
          v242 = v87;
          sub_22E8906A0(v86, (uint64_t *)&v242);
          sub_22E903BEC((unsigned int *)&v236);
          sub_22EFF605C(v54);
          sub_22E8FCA40(v18, v88, 0x1701u, 0, (uint64_t)&v236);
          OpenMPClauseName = (_QWORD *)llvm::omp::getOpenMPClauseName();
          v246 = v89;
          sub_22F2F2210((uint64_t)&v236, (uint64_t)&OpenMPClauseName);
          sub_22E903BEC((unsigned int *)&v236);
        }
        v54 = (uint64_t)v57;
        goto LABEL_171;
      }
      sub_22EFF605C((uint64_t)v57);
      sub_22E8FCA40(v18, v81, 0x10CAu, 0, (uint64_t)&v236);
      OpenMPClauseName = *(_QWORD **)(v21 + 40);
      v82 = sub_22E894538((uint64_t)&v236, (uint64_t *)&OpenMPClauseName);
      LODWORD(v242) = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 < 4;
      sub_22E8900C4(v82, (int *)&v242);
LABEL_170:
      sub_22E903BEC((unsigned int *)&v236);
      goto LABEL_171;
    }
    if (v233)
    {
      v105 = (v233 - 1) & ((v60 >> 4) ^ (v60 >> 9));
      v106 = (llvm *)*((_QWORD *)v232[0] + 2 * v105);
      if (v60 == v106)
      {
LABEL_188:
        sub_22EFF605C((uint64_t)v57);
        sub_22E8FCA40(v18, v107, 0x1104u, 0, (uint64_t)&v236);
        LODWORD(v228) = 1;
        v108 = sub_22E8900C4((uint64_t)&v236, (int *)&v228);
        OpenMPClauseName = (_QWORD *)llvm::omp::getOpenMPClauseName();
        v246 = v109;
        v110 = sub_22F2F2210(v108, (uint64_t)&OpenMPClauseName);
        sub_22F0D4E74((uint64_t)v57);
        v230[0] = v111;
        sub_22E8906A0(v110, (uint64_t *)v230);
        sub_22E903BEC((unsigned int *)&v236);
        v230[0] = v60;
        v112 = sub_22F24C2B0((uint64_t)v232, (uint64_t *)v230);
        sub_22EFF605C(v112[1]);
        sub_22E8FCA40(v18, v113, 0x1701u, 0, (uint64_t)&v236);
        OpenMPClauseName = (_QWORD *)llvm::omp::getOpenMPClauseName();
        v246 = v114;
        sub_22F2F2210((uint64_t)&v236, (uint64_t)&OpenMPClauseName);
        goto LABEL_170;
      }
      v115 = 1;
      while (v106 != (llvm *)-4096)
      {
        v116 = v105 + v115++;
        v105 = v116 & (v233 - 1);
        v106 = (llvm *)*((_QWORD *)v232[0] + 2 * v105);
        if (v60 == v106)
          goto LABEL_188;
      }
    }
    *(_QWORD *)&v236 = v60;
    sub_22F24C2B0((uint64_t)v232, (uint64_t *)&v236)[1] = v57;
    v90 = v242[6];
    v91 = v90 & 0xFFFFFFFFFFFFFFF0;
    v92 = *(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0);
    if (v92 && (v93 = *(_DWORD *)(v92 + 16), (v93 & 0xFE) == 0x28))
    {
LABEL_195:
      if ((v93 & 0x100000) != 0)
      {
        do
        {
          v92 = *(_QWORD *)(*(_QWORD *)(v92 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v92 || (v117 = *(_DWORD *)(v92 + 16), (v117 & 0xFE) != 0x28))
          {
            v92 = sub_22F10CF48(v92);
            v117 = *(_DWORD *)(v92 + 16);
          }
          v18 = v226;
        }
        while ((v117 & 0x100000) != 0);
      }
      v90 = *(_QWORD *)(v92 + 32);
      v91 = v90 & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_177;
      v92 = sub_22F10CF48(v92);
      if (v92)
      {
        v93 = *(_DWORD *)(v92 + 16);
        v18 = v226;
        goto LABEL_195;
      }
      v18 = v226;
    }
LABEL_177:
    v94 = *(_QWORD *)v91;
    if ((*(_BYTE *)(*(_QWORD *)v91 + 8) & 0xF) != 0)
      v94 = (unint64_t)sub_22F10D2BC(v90);
    v95 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFF0) + 8);
    OpenMPClauseName = (_QWORD *)v95;
    if (v95 < 0x10
      || (v96 = *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF0)) == 0
      || ((v97 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v96 + 8) & 0xFFFFFFFFFFFFFFF0) + 16),
           v98 = v97,
           v99 = (v97 & 0xFE) - 2,
           v98 != 39)
        ? (v100 = v99 >= 4)
        : (v100 = 0),
          v100))
    {
      sub_22EFF605C((uint64_t)v57);
      sub_22E8FCA40(v18, v101, 0x103Bu, 0, (uint64_t)&v236);
      v102 = sub_22E8901B8((uint64_t)&v236, (uint64_t *)&OpenMPClauseName);
      LODWORD(v228) = (*(_DWORD *)v18[9] >> 8) & 1;
      v103 = sub_22E89519C(v102, (unsigned int *)&v228);
      sub_22F0D4E74((uint64_t)v57);
      v230[0] = v104;
      sub_22E8906A0(v103, (uint64_t *)v230);
      sub_22E903BEC((unsigned int *)&v236);
      sub_22E8FCA40(v18, *((_DWORD *)v242 + 6), 0x1771u, 0, (uint64_t)&v236);
      sub_22E890024((uint64_t)&v236, (uint64_t *)&v242);
      goto LABEL_170;
    }
LABEL_171:
    ++v55;
  }
  while (v55 != &a7[a8]);
LABEL_15:
  OpenMPClauseName = v247;
  v246 = 0x400000000;
  if (a10)
  {
    v118 = 0;
    v120 = 8 * a10;
    do
    {
      if (*a9)
      {
        v121 = sub_22EC98030(v18, *a9, 5, 1, 0);
        v118 = v246;
      }
      else
      {
        v121 = 0;
      }
      if (v118 >= HIDWORD(v246))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v118 = v246;
      }
      OpenMPClauseName[v118] = v121 & 0xFFFFFFFFFFFFFFFELL;
      v118 = v246 + 1;
      LODWORD(v246) = v246 + 1;
      ++a9;
      v120 -= 8;
    }
    while (v120);
  }
  v230[0] = 0;
  v230[1] = 0;
  v231 = 0;
  if (!a12)
    goto LABEL_17;
  v122 = a13;
  v123 = a11;
  do
  {
    v125 = *v122++;
    v124 = v125;
    v126 = sub_22EFFA6B0(*v123);
    v127 = v126;
    v128 = *v126;
    if (v128 != 161)
      goto LABEL_283;
    v129 = *((_QWORD *)v126 + 2);
    if (!v129 || (*(_DWORD *)(v129 + 28) & 0x7F) != 0x40)
      goto LABEL_282;
    v130 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v129 + 32))(*((_QWORD *)v126 + 2));
    v131 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
    v132 = v23;
    if (v131)
      v133 = *(_BYTE *)(v131 + 16) == 26;
    else
      v133 = 0;
    if (v133
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v131 = sub_22F10CF48(v131)) != 0)
    {
      v134 = (unsigned __int16)(*(_QWORD *)(v131 + 16) >> 38);
    }
    else
    {
      v134 = 0;
    }
    v135 = (*(_DWORD *)(v129 + 96) >> 20);
    if (v135 != 255)
      goto LABEL_252;
    v136 = v129;
    if ((*(_DWORD *)(v129 + 28) & 0x7F) == 0x53)
      goto LABEL_251;
    for (k = *(_QWORD *)(v129 + 16); ; k = *(_QWORD *)(v138 + v140 + 16))
    {
      v138 = k & 0xFFFFFFFFFFFFFFF8;
      if ((k & 4) != 0)
        v138 = *(_QWORD *)v138;
      v139 = *(_WORD *)(v138 + 8) & 0x7F;
      if (v139 == 83)
        break;
      v140 = -40;
      if ((*(_WORD *)(v138 + 8) & 0x7Fu) > 0x46)
      {
        if (v139 == 71)
        {
          v140 = -56;
          continue;
        }
        if (v139 != 81)
          goto LABEL_241;
      }
      else
      {
        if (v139 > 0x18)
          goto LABEL_240;
        if (v139 == 16)
          goto LABEL_234;
        if (((1 << v139) & 0x1066) == 0)
        {
          if (v139 == 24)
          {
LABEL_234:
            v140 = -48;
            continue;
          }
LABEL_240:
          if (v139 == 70)
          {
            v140 = -64;
            continue;
          }
LABEL_241:
          v141 = v139 - 52;
          v100 = v139 - 33 >= 5;
          v142 = -64;
          if (v100)
            v142 = -48;
          v100 = v141 >= 6;
          v140 = -72;
          if (v100)
            v140 = v142;
          continue;
        }
      }
    }
    v136 = v138 - 40;
LABEL_251:
    v135 = sub_22F36F2CC(*(_QWORD *)(v136 + 88), v129);
LABEL_252:
    v143 = v134 > v135;
    v23 = v132;
    v144 = v130;
    v18 = v226;
    if (!v143)
      goto LABEL_282;
    v145 = (*(_DWORD *)(v129 + 96) >> 20);
    if (v145 != 255)
      goto LABEL_281;
    v146 = v129;
    if ((*(_DWORD *)(v129 + 28) & 0x7F) == 0x53)
      goto LABEL_280;
    v147 = *(_QWORD *)(v129 + 16);
    while (2)
    {
      v148 = v147 & 0xFFFFFFFFFFFFFFF8;
      if ((v147 & 4) != 0)
        v148 = *(_QWORD *)v148;
      v149 = *(_WORD *)(v148 + 8) & 0x7F;
      if (v149 != 83)
      {
        v150 = -40;
        if ((*(_WORD *)(v148 + 8) & 0x7Fu) > 0x46)
        {
          if (v149 == 71)
          {
            v150 = -56;
          }
          else if (v149 != 81)
          {
            goto LABEL_270;
          }
        }
        else
        {
          if (v149 > 0x18)
            goto LABEL_269;
          if (v149 == 16)
            goto LABEL_263;
          if (((1 << v149) & 0x1066) == 0)
          {
            if (v149 == 24)
            {
LABEL_263:
              v150 = -48;
            }
            else
            {
LABEL_269:
              if (v149 == 70)
              {
                v150 = -64;
              }
              else
              {
LABEL_270:
                v151 = v149 - 52;
                v100 = v149 - 33 >= 5;
                v152 = -64;
                if (v100)
                  v152 = -48;
                v100 = v151 >= 6;
                v150 = -72;
                if (v100)
                  v150 = v152;
              }
            }
          }
        }
        v147 = *(_QWORD *)(v148 + v150 + 16);
        continue;
      }
      break;
    }
    v146 = v148 - 40;
LABEL_280:
    v145 = sub_22F36F2CC(*(_QWORD *)(v146 + 88), v129);
LABEL_281:
    v153 = *(_QWORD *)(*(_QWORD *)(v21 + 120) + 8 * v145);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 32))(v153) != v144)
    {
LABEL_282:
      v128 = *v127;
LABEL_283:
      if (v128 == 133)
      {
        if (!v23)
        {
          if ((*(_DWORD *)v127 & 0x1E000) == 0)
          {
            sub_22EFF605C((uint64_t)v127);
            sub_22EC9832C(v18, 0, v154, v124, *((_QWORD *)v127 + 1), 1);
          }
          v23 = (uint64_t)v127;
          goto LABEL_290;
        }
        sub_22EFF605C((uint64_t)v127);
        sub_22E8FCA40(v18, v157, 0x110Fu, 0, (uint64_t)&v236);
        v242 = (uint64_t *)llvm::omp::getOpenMPClauseName();
        v243 = v158;
        v159 = sub_22F2F2210((uint64_t)&v236, (uint64_t)&v242);
        v228 = llvm::omp::getOpenMPClauseName();
        v229 = v160;
        v161 = sub_22F2F2210(v159, (uint64_t)&v228);
        sub_22F0D4E74((uint64_t)v127);
        v227 = v162;
        sub_22E8906A0(v161, &v227);
        sub_22E903BEC((unsigned int *)&v236);
        sub_22EFF605C(v23);
        sub_22E8FCA40(v18, v163, 0x1701u, 0, (uint64_t)&v236);
LABEL_293:
        v242 = (uint64_t *)llvm::omp::getOpenMPClauseName();
        v243 = v164;
        sub_22F2F2210((uint64_t)&v236, (uint64_t)&v242);
      }
      else
      {
        sub_22EFF605C((uint64_t)v127);
        sub_22E8FCA40(v18, v155, 0x10CAu, 0, (uint64_t)&v236);
        v242 = *(uint64_t **)(v21 + 40);
        v156 = sub_22E894538((uint64_t)&v236, (uint64_t *)&v242);
        LODWORD(v228) = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 < 4;
        sub_22E8900C4(v156, (int *)&v228);
      }
      sub_22E903BEC((unsigned int *)&v236);
      goto LABEL_290;
    }
    if (v231)
    {
      v168 = (v231 - 1) & ((v144 >> 4) ^ (v144 >> 9));
      v169 = *((_QWORD *)v230[0] + 2 * v168);
      if (v144 == v169)
      {
LABEL_299:
        sub_22EFF605C((uint64_t)v127);
        sub_22E8FCA40(v226, v170, 0x110Fu, 0, (uint64_t)&v236);
        v242 = (uint64_t *)llvm::omp::getOpenMPClauseName();
        v243 = v171;
        v172 = sub_22F2F2210((uint64_t)&v236, (uint64_t)&v242);
        v228 = llvm::omp::getOpenMPClauseName();
        v229 = v173;
        v174 = sub_22F2F2210(v172, (uint64_t)&v228);
        sub_22F0D4E74((uint64_t)v127);
        v227 = v175;
        sub_22E8906A0(v174, &v227);
        sub_22E903BEC((unsigned int *)&v236);
        v228 = v144;
        v176 = sub_22F24C2B0((uint64_t)v230, (uint64_t *)&v228);
        sub_22EFF605C(v176[1]);
        sub_22E8FCA40(v226, v177, 0x1701u, 0, (uint64_t)&v236);
        goto LABEL_293;
      }
      v188 = 1;
      while (v169 != -4096)
      {
        v189 = v168 + v188++;
        v168 = v189 & (v231 - 1);
        v169 = *((_QWORD *)v230[0] + 2 * v168);
        if (v144 == v169)
          goto LABEL_299;
      }
    }
    if (v235)
    {
      v178 = (v235 - 1) & ((v144 >> 4) ^ (v144 >> 9));
      v179 = *((_QWORD *)v234[0] + 2 * v178);
      if (v144 == v179)
      {
LABEL_301:
        sub_22EFF605C((uint64_t)v127);
        sub_22E8FCA40(v226, v180, 0x110Fu, 0, (uint64_t)&v236);
        v242 = (uint64_t *)llvm::omp::getOpenMPClauseName();
        v243 = v181;
        v182 = sub_22F2F2210((uint64_t)&v236, (uint64_t)&v242);
        v228 = llvm::omp::getOpenMPClauseName();
        v229 = v183;
        v184 = sub_22F2F2210(v182, (uint64_t)&v228);
        sub_22F0D4E74((uint64_t)v127);
        v227 = v185;
        sub_22E8906A0(v184, &v227);
        sub_22E903BEC((unsigned int *)&v236);
        v228 = v144;
        v186 = sub_22F24C2B0((uint64_t)v234, (uint64_t *)&v228);
        sub_22EFF605C(v186[1]);
        sub_22E8FCA40(v226, v187, 0x1701u, 0, (uint64_t)&v236);
        goto LABEL_293;
      }
      v190 = 1;
      while (v179 != -4096)
      {
        v191 = v178 + v190++;
        v178 = v191 & (v235 - 1);
        v179 = *((_QWORD *)v234[0] + 2 * v178);
        if (v144 == v179)
          goto LABEL_301;
      }
    }
    *(_QWORD *)&v236 = v144;
    sub_22F24C2B0((uint64_t)v230, (uint64_t *)&v236)[1] = v127;
    if ((*(_DWORD *)v127 & 0x1E000) == 0)
    {
      sub_22EFF605C((uint64_t)v127);
      v166 = v165;
      v167 = sub_22EFBF144(v129);
      sub_22EC9832C(v226, v144, v166, v124, v167, 1);
    }
LABEL_290:
    ++v123;
  }
  while (v123 != &a11[a12]);
LABEL_17:
  v242 = (uint64_t *)v244;
  v243 = 0x400000000;
  if (!a16)
  {
    v24 = 0;
    v25 = (uint64_t *)v244;
    goto LABEL_353;
  }
  v192 = 0;
  v193 = 0;
  v194 = a15;
  v195 = v234[0];
  v196 = v235;
  v197 = v235 - 1;
  while (2)
  {
    v198 = (unsigned __int8 *)*v194;
    if (v193 == (unsigned __int8 *)*v194 || v198 == 0)
    {
      if (v198)
        v200 = v192;
      else
        v200 = 0;
      v201 = v243;
      if (v243 >= (unint64_t)HIDWORD(v243))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v201 = v243;
      }
      v242[v201] = v200;
      LODWORD(v243) = v243 + 1;
      goto LABEL_344;
    }
    if (*v198 != 161 || (v202 = (_DWORD *)*((_QWORD *)v198 + 2)) == 0 || (v202[7] & 0x7F) != 0x40)
    {
      v192 = *v194;
      if ((*(_DWORD *)v198 & 0x1E000) == 0)
      {
        sub_22EFF605C(*v194);
        WORD4(v236) = 256;
        BYTE10(v236) = 0;
        *(_QWORD *)&v236 = off_24FAB8D98;
        v207 = sub_22ED03140() & 0xFFFFFFFFFFFFFFFELL;
        if (v207)
        {
          BYTE8(v236) = 0;
          *(_QWORD *)&v236 = off_24FAB82C8;
          v192 = sub_22EB4CB24(v18, v207, 0, &v236, 1) & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v192 = 0;
        }
      }
      v208 = v243;
      if (v243 >= (unint64_t)HIDWORD(v243))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v208 = v243;
      }
      v242[v208] = v192;
LABEL_342:
      LODWORD(v243) = v243 + 1;
      goto LABEL_343;
    }
    v203 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v202 + 32))(v202);
    if (!v196)
    {
LABEL_351:
      sub_22EFF605C((uint64_t)v198);
      v210 = v215;
      v211 = v18;
      v212 = 4221;
      goto LABEL_352;
    }
    v204 = ((v203 >> 4) ^ (v203 >> 9)) & v197;
    v205 = *((_QWORD *)v195 + 2 * v204);
    if (v203 != v205)
    {
      v213 = 1;
      while (v205 != -4096)
      {
        v214 = v204 + v213++;
        v204 = v214 & v197;
        v205 = *((_QWORD *)v195 + 2 * v204);
        if (v203 == v205)
          goto LABEL_330;
      }
      goto LABEL_351;
    }
LABEL_330:
    if ((*(_DWORD *)v198 & 0x1E000) != 0
      || sub_22F1105F0(*(_QWORD *)(*(_QWORD *)(v203 + 48) & 0xFFFFFFFFFFFFFFF0)))
    {
      v206 = v243;
      if (v243 >= (unint64_t)HIDWORD(v243))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v206 = v243;
      }
      v242[v206] = (uint64_t)v198;
      goto LABEL_342;
    }
    sub_22EFF605C((uint64_t)v198);
    v210 = v209;
    v211 = v18;
    v212 = 4216;
LABEL_352:
    sub_22E8FCA40(v211, v210, v212, 0, (uint64_t)&v236);
    sub_22F0D4E74((uint64_t)v198);
    v228 = v216;
    sub_22E8906A0((uint64_t)&v236, (uint64_t *)&v228);
    sub_22E903BEC((unsigned int *)&v236);
LABEL_343:
    v193 = v198;
LABEL_344:
    if (++v194 != &a15[a16])
      continue;
    break;
  }
  v25 = v242;
  v24 = v243;
LABEL_353:
  v217 = v18[11];
  v236 = 0uLL;
  v237 = a17;
  v238 = 0;
  v240 = 120;
  v239 = 0;
  v218 = sub_22F395F10(v217, a3, v219, a5, v223, a7, a8, OpenMPClauseName, v246, a11, a12, a13, a14, v25, v24, &v236);
  sub_22EFCA95C(v21, v218);
  v17 = a2;
  if (v242 != (uint64_t *)v244)
    free(v242);
  llvm::deallocate_buffer(v230[0], (void *)(16 * v231));
  if (OpenMPClauseName != v247)
    free(OpenMPClauseName);
  llvm::deallocate_buffer(v232[0], (void *)(16 * v233));
  llvm::deallocate_buffer(v234[0], (void *)(16 * v235));
  return v17;
}

uint64_t sub_22EC98030(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t (**v10)();
  int8x8_t *v11;
  uint8x8_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t (**v32)();
  char v33;
  uint64_t *v34;
  unsigned int v35;
  char v36;

  if (!a2)
    return 1;
  if ((*a2 & 0x1E000) != 0)
    return (uint64_t)a2;
  v35 = 1;
  v34 = 0;
  v36 = 0;
  if (a5)
  {
    v33 = 1;
    v10 = &off_24FAB8E00;
  }
  else
  {
    v33 = 0;
    v10 = off_24FAB82C8;
  }
  v32 = v10;
  v6 = sub_22EB4CB24(a1, a2, &v34, &v32, 1);
  if ((v6 & 1) != 0)
    goto LABEL_21;
  if (a4)
  {
    if ((sub_22E984E5C((uint64_t)&v34) & 1) == 0)
    {
LABEL_43:
      sub_22EFF605C((uint64_t)a2);
      sub_22E8FCA40(a1, v23, 0x10B4u, 0, (uint64_t)&v32);
      v31[0] = llvm::omp::getOpenMPClauseName();
      v31[1] = v24;
      v25 = sub_22F2F2210((uint64_t)&v32, (uint64_t)v31);
      v30 = a4;
      v26 = sub_22E8900C4(v25, &v30);
      sub_22F0D4E74((uint64_t)a2);
      v29 = v27;
      v16 = &v29;
      v15 = (_QWORD *)v26;
      goto LABEL_20;
    }
  }
  else if (!v36)
  {
    v11 = (int8x8_t *)&v34;
    if (v35 >= 0x41)
      v11 = (int8x8_t *)&v34[(v35 - 1) >> 6];
    if (((*(unint64_t *)v11 >> (v35 - 1)) & 1) != 0)
      goto LABEL_43;
  }
  if ((a3 & 0xFFFFFFFE) == 4)
  {
    if (v35 > 0x40)
    {
      if (llvm::APInt::countPopulationSlowCase((llvm::APInt *)&v34) != 1)
        goto LABEL_19;
    }
    else
    {
      v12 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] != 1)
      {
LABEL_19:
        sub_22EFF605C((uint64_t)a2);
        sub_22E8FCA40(a1, v13, 0x1AC0u, 0, (uint64_t)&v32);
        sub_22F0D4E74((uint64_t)a2);
        v31[0] = v14;
        v15 = &v32;
        v16 = v31;
LABEL_20:
        sub_22E8906A0((uint64_t)v15, v16);
        sub_22E903BEC((unsigned int *)&v32);
LABEL_21:
        v6 = 1;
        goto LABEL_22;
      }
    }
  }
  if (a3 == 60)
  {
    v18 = a1[1536];
    if (v36)
    {
      v21 = (uint64_t *)&v34;
      if (v35 >= 0x41)
        v21 = v34;
    }
    else
    {
      if (v35 <= 0x40)
      {
        v22 = (uint64_t)((_QWORD)v34 << -(uint64_t)v35) >> -(uint64_t)v35;
        goto LABEL_41;
      }
      v21 = v34;
    }
    v22 = *v21;
LABEL_41:
    *(_DWORD *)(sub_22ECB1B04(v18) + 1064) = v22;
    if (v22 < 2)
      goto LABEL_22;
LABEL_49:
    *(_BYTE *)(sub_22ECB1B04(v18) + 1068) = 1;
    goto LABEL_22;
  }
  if (a3 == 12)
  {
    v18 = a1[1536];
    v19 = sub_22ECB1B04(v18);
    if (v19)
    {
      if (*(_DWORD *)(v19 + 1064) == 1)
      {
        if (v36)
        {
          v20 = (uint64_t *)&v34;
          if (v35 >= 0x41)
            v20 = v34;
        }
        else
        {
          if (v35 <= 0x40)
          {
            v28 = (uint64_t)((_QWORD)v34 << -(char)v35) >> -(char)v35;
            goto LABEL_48;
          }
          v20 = v34;
        }
        v28 = *v20;
LABEL_48:
        *(_DWORD *)(v19 + 1064) = v28;
        if (v28 < 2)
          goto LABEL_22;
        goto LABEL_49;
      }
    }
  }
LABEL_22:
  if (v35 >= 0x41 && v34)
    MEMORY[0x2348A0E84](v34, 0x1000C8000313F17);
  return v6;
}

uint64_t sub_22EC9832C(_QWORD *a1, unint64_t a2, unsigned int a3, int a4, uint64_t a5, char a6)
{
  uint64_t v7;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v22;
  const char *v23;
  void *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;

  v7 = a5;
  v26 = a2;
  v27 = a5;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 >= 7)
      v11 = 0;
    else
      v11 = a2;
  }
  else
  {
    v11 = 0;
  }
  v24 = &unk_24FAB6EF8;
  v25 = 4262;
  v13 = 1;
  if ((sub_22EE8B0B0((uint64_t)a1, a3, a5) & 1) != 0)
    return v13;
  v14 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((a4 - 1) <= 1
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    sub_22E8FCA40(a1, a3, 0x1113u, 0, (uint64_t)&v24);
    v20 = sub_22E8901B8((uint64_t)&v24, (uint64_t *)&v27);
    v23 = sub_22F42187C((const char *)0x2C, a4);
    sub_22E8AECC4(v20, (uint64_t *)&v23);
    sub_22E903BEC((unsigned int *)&v24);
    return v13;
  }
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 16);
    if ((v15 & 0xFE) == 0x28)
      goto LABEL_34;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v14 = sub_22F10CF48(v14);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 16);
LABEL_34:
      if ((v15 & 0x100000) != 0)
      {
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v14)
          {
            v22 = *(_DWORD *)(v14 + 16);
            if ((v22 & 0xFE) == 0x28)
              continue;
          }
          v14 = sub_22F10CF48(v14);
          v22 = *(_DWORD *)(v14 + 16);
        }
        while ((v22 & 0x100000) != 0);
      }
      v7 = *(_QWORD *)(v14 + 32);
    }
  }
  if ((a6 & 1) != 0 || (v13 = 1, !sub_22ECAA7DC(a1, a2, v7, 44, a3, 1, 0)))
  {
    v16 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
      v16 = (unint64_t)sub_22F10D2BC(v7);
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8);
    v27 = v17;
    if (v17 >= 0x10
      && (v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0)) != 0
      && (a4 == 1
       || (*(_BYTE *)(v18 + 17) & 4) != 0
       || sub_22F110744(v18, a1[11])
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39))
    {
      return 0;
    }
    else
    {
      sub_22E8FCA40(a1, a3, 0x10A5u, 0, (uint64_t)&v24);
      sub_22E8901B8((uint64_t)&v24, (uint64_t *)&v27);
      sub_22E903BEC((unsigned int *)&v24);
      if (a2)
      {
        v19 = 6001;
        if (v11)
        {
          if (sub_22EFBBF74(v11, a1[11]))
            v19 = 5543;
          else
            v19 = 6001;
        }
        sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), v19, 0, (uint64_t)&v24);
        sub_22E890024((uint64_t)&v24, (uint64_t *)&v26);
        sub_22E903BEC((unsigned int *)&v24);
      }
      return 1;
    }
  }
  return v13;
}

void sub_22EC985FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_DWORD *)(a2 + 28) & 0x80) == 0)
  {
    v2 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x1D)
      v2 = *(_QWORD *)(a2 + 48);
    if (*(_DWORD *)(a1 + 10680) <= *(_DWORD *)(a1 + 11956))
    {
      v4 = *(unsigned int *)(a1 + 12688);
      if ((_DWORD)v4)
      {
        v5 = *(uint64_t **)(a1 + 12680);
        v6 = 8 * v4;
        do
        {
          v7 = *v5++;
          sub_22EFCA95C(v2, v7);
          v6 -= 8;
        }
        while (v6);
      }
    }
    v8 = *(unsigned int *)(a1 + 12736);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(a1 + 12728);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        sub_22EFCA95C(v2, v11);
        v10 -= 8;
      }
      while (v10);
    }
  }
}

void sub_22EC98694(uint64_t a1, uint64_t a2, uint64_t a3, int **a4, uint64_t a5, uint64_t a6)
{
  BOOL v6;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t i;
  unint64_t v26;
  int v27;
  uint64_t v29;
  _BOOL4 v31;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  char v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string *v46;
  size_t size;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  std::string v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[64];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  _QWORD v65[3];
  __int16 v66;
  int v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 40))
    v6 = 1;
  else
    v6 = *(_QWORD *)(a3 + 48) == 0;
  if (!v6)
  {
    v13 = *(_QWORD *)(a1 + 12536) + 32 * *(unsigned int *)(a1 + 12544);
    v14 = sub_22E9063DC(*(uint64_t **)(v13 - 32), 44);
    if (!a5 || v14)
    {
      v52 = v13;
      if (*(_DWORD *)(a3 + 40))
        v15 = 0;
      else
        v15 = *(_QWORD *)(a3 + 48);
      v16 = *(_DWORD *)(a3 + 64);
      v55 = 0;
      v56 = v58;
      v57 = 0x800000000;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = (_QWORD *)a1;
      v63 = v15;
      v64 = v16;
      sub_22EFC6D6C((uint64_t)v65, v15);
      v65[1] = 0;
      v65[2] = 0;
      v66 = 0;
      v67 = 257;
      v68 = 0;
      sub_22EC56024((uint64_t)&v55);
      sub_22EC64BE8(a1, (uint64_t)&v55, a2, a3 + 8, 0, 0);
      v51 = a2;
      v22 = sub_22EE8156C(a1, a3, a2, v17, v18, v19, v20, v21);
      if ((_DWORD)v57)
      {
        v53 = *v22;
        v23 = (**(_QWORD **)a3 >> 37) & 3;
        v24 = v56;
        for (i = 8 * v57; i; i -= 8)
        {
          v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          v27 = *(_DWORD *)(v26 + 28);
          if ((v27 & 0x7Fu) <= 0x2F && ((1 << (v27 & 0x7F)) & 0xC00000060000) != 0)
          {
            v26 = sub_22EFBAEA4(*v24 & 0xFFFFFFFFFFFFFFFCLL);
            v27 = *(_DWORD *)(v26 + 28);
          }
          if (a5)
          {
            if ((v27 & 0x7F) == 0x1D && a5 == (*(_DWORD *)(*(_QWORD *)(v26 + 56) + 12) & 0x1FFFFFFF))
            {
              v26 = *(_QWORD *)(v26 + 48);
              if (v26)
              {
LABEL_23:
                v29 = *(_QWORD *)(v26 + 80) & 0xC0000000;
                v31 = v29 != 0x80000000 || (_DWORD)v23 == 2;
                if (((_DWORD)v23 == 1 || v29 == 0) && v31)
                {
                  v34 = *(_QWORD *)(v26 + 48);
                  if ((*(_BYTE *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
                    || sub_22EF71270(*(_QWORD *)(a1 + 88), v53, v34, 0, 0) >= 0x10)
                  {
                    v35 = *(unsigned int *)(a6 + 8);
                    if (v35 >= *(unsigned int *)(a6 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v35 = *(unsigned int *)(a6 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)a6 + 8 * v35) = v26;
                    ++*(_DWORD *)(a6 + 8);
                  }
                }
              }
            }
          }
          else if ((v27 & 0x7Eu) - 52 < 6)
          {
            goto LABEL_23;
          }
          ++v24;
        }
      }
      v36 = sub_22E9063DC(*(uint64_t **)(v52 - 32), 43);
      if (!*(_DWORD *)(a6 + 8) && (v36 & 1) == 0)
      {
        *(_WORD *)(a3 + 1088) &= 0xFFF3u;
        v37 = sub_22EA13184(a1, v51, (uint64_t **)a3, a4, a5);
        v38 = v37;
        v39 = *(_DWORD *)(v37 + 28);
        *(_DWORD *)(v37 + 28) = v39 | 0x200;
        if (v37 && (v39 & 0x7F) == 0x1D)
          v38 = *(_QWORD *)(v37 + 48);
        v40 = *(_DWORD *)(a6 + 8);
        if (v40 >= *(_DWORD *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v40 = *(_DWORD *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
        ++*(_DWORD *)(a6 + 8);
      }
      memset(&v54, 0, sizeof(v54));
      std::string::append(&v54, (const std::string::value_type *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16) + 16), **(unsigned int **)(*(_QWORD *)(a3 + 48) + 16));
      std::string::append(&v54, "$ompvariant", 0xBuLL);
      v41 = *(_BYTE *)(v52 - 1);
      v42 = v41;
      if (v41 >= 0)
        v43 = (const std::string::value_type *)(v52 - 24);
      else
        v43 = *(const std::string::value_type **)(v52 - 24);
      v44 = v41 & 0x7F;
      if (v42 >= 0)
        v45 = v44;
      else
        v45 = *(_QWORD *)(v52 - 16);
      std::string::append(&v54, v43, v45);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v54;
      else
        v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v54.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v54.__r_.__value_.__l.__size_;
      v48 = (_QWORD *)sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), v46, size);
      *v48 |= 0x2000000000uLL;
      v49 = *(_DWORD *)(a3 + 72);
      *(_DWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = v48;
      *(_DWORD *)(a3 + 64) = v49;
      *(_DWORD *)(a3 + 68) = v49;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (BYTE1(v67))
      {
        if ((_DWORD)v55 == 5)
        {
          sub_22EC64D18(v62, (uint64_t)&v55);
        }
        else if (v60 && (*(_DWORD *)(v62[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v62, (uint64_t)&v55);
        }
      }
      if (v59)
      {
        v50 = sub_22EC6CBD0(v59);
        MEMORY[0x2348A0E9C](v50, 0x10E0C409F09D3C3);
      }
      if (v56 != v58)
        free(v56);
    }
  }
}

_QWORD *sub_22EC98B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  int v31;
  int v32;

  v32 = 0;
  *(_QWORD *)&v25 = 0;
  v31 = 3;
  v30 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, &v32, (int *)&v30, (__int16 *)(a1 + 1693), (uint64_t *)&v25, &v31);
  v6 = *(unsigned int *)(a1 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(a1 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v11 - 496));
    if (!a2)
      goto LABEL_8;
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x1D)
    a2 = *(_QWORD *)(a2 + 48);
LABEL_8:
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_DWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v25 = *(_QWORD *)(a2 + 40);
  DWORD2(v25) = v13;
  sub_22EFC6D6C((uint64_t)&v26, v25);
  v15 = sub_22E3CD3D4(v12 + 2032, 32, 3);
  sub_22EFF6AE4(v15, v12, 0, 0, 0, a2, 0, (uint64_t)&v25, 0, 0, v14, 0, 0, 0);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 12536) + 32 * *(unsigned int *)(a1 + 12544) - 32);
  v25 = 0uLL;
  v27 = 0;
  v26 = 0;
  v29 = 120;
  v28 = 0;
  v18 = sub_22F396518(v16, v15, v17, 0, 0, 0, 0, 0, 0, &v25);
  v19 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v19)
  {
    v20 = v18;
    v21 = *(uint64_t **)a3;
    v22 = 8 * v19;
    do
    {
      v23 = *v21++;
      sub_22EFCA95C(v23, v20);
      v22 -= 8;
    }
    while (v22);
  }
  return sub_22EB48E64(a1);
}

unsigned __int8 *sub_22EC98D2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int BestVariantMatchForContext;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  char v42;
  unint64_t v43;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  int v55;
  uint64_t v56;
  int v57;
  void *v58;
  char *v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  void (**v73)(_QWORD *);
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD v94[18];
  _QWORD v95[17];
  void *v96;
  uint64_t v97;
  _BYTE v98[1472];
  void *v99;
  uint64_t v100;
  _BYTE v101[32];
  _QWORD v102[28];
  _QWORD v103[3];
  _QWORD *v104;
  uint64_t v105;

  v8 = a2;
  v105 = *MEMORY[0x24BDAC8D0];
  v9 = (unsigned __int8 *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL) + 113) < 0xFBu)
    return v8;
  v17 = sub_22EFFA604(*(unsigned __int8 **)&v9[v9[3]]);
  if (!v17)
    return v8;
  v18 = v17;
  if ((*(_DWORD *)(v17 + 28) & 0x7Eu) - 52 > 5 || !sub_22F33DC8C(v17))
    return v8;
  v76 = a3;
  v77 = a5;
  v78 = a6;
  v79 = a8;
  v20 = *(_QWORD *)(a1 + 88);
  v84 = (char *)(a1 + 10664);
  v103[0] = &off_24FAB8E70;
  v103[1] = a1;
  v103[2] = v9;
  v104 = v103;
  v21 = sub_22E903070(a1, 0);
  v22 = v21 - 72;
  if (!v21)
    v22 = 0;
  if ((*(_WORD *)(v21 + 8) & 0x7Eu) - 52 >= 6)
    v23 = 0;
  else
    v23 = v22;
  v80 = a1;
  v85 = v20;
  sub_22F0C45F8((uint64_t)v102, v20, (uint64_t)v103, v23, *(unsigned int **)(*(_QWORD *)(a1 + 12288) + 21672), *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 21680));
  v75 = *(_QWORD *)(v18 + 48);
  v99 = v101;
  v100 = 0x400000000;
  v96 = v98;
  v97 = 0x400000000;
  do
  {
    v24 = (uint64_t *)sub_22F255ABC(v18);
    v26 = v25;
    while (1)
    {
      v27 = v24;
      if (v24 >= v26)
      {
        if (v24 == v26)
          break;
        v28 = v26;
        while (*(_WORD *)(*v28 + 32) != 246)
        {
          if (++v28 == v24)
            goto LABEL_33;
        }
        v27 = v24;
      }
      else
      {
        while (*(_WORD *)(*v27 + 32) != 246)
        {
          if (++v27 == v26)
            goto LABEL_33;
        }
        v28 = v26;
      }
      if (v27 == v28)
        break;
      do
      {
        v30 = *v24++;
        v29 = v30;
      }
      while (*(_WORD *)(v30 + 32) != 246);
      v86 = *(_QWORD *)(v29 + 40);
      v88 = &v90;
      v89 = 0x600000000;
      sub_22E47EDD0((uint64_t)&v88, 1uLL, 0);
      v91 = 55;
      v92 = v94;
      v93 = 0x800000000;
      v94[16] = v95;
      v31 = 34;
      v94[17] = 0x800000000;
      v95[4] = 1;
      do
      {
        LODWORD((&v88)[v31]) = -1;
        v31 += 3;
      }
      while (v31 != 46);
      sub_22F0C382C(*(_DWORD **)(v29 + 48), v85, &v88);
      if (llvm::omp::isVariantApplicableInContext())
      {
        v32 = (_DWORD *)sub_22E861A70((uint64_t)&v96, (unint64_t)&v88, 1);
        sub_22F2ED178((uint64_t)v96 + 368 * v97, v32);
        LODWORD(v97) = v97 + 1;
        v33 = v100;
        if (v100 >= (unint64_t)HIDWORD(v100))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v100;
        }
        *((_QWORD *)v99 + v33) = v86;
        LODWORD(v100) = v100 + 1;
      }
      sub_22F2ECBAC((uint64_t)&v88);
    }
LABEL_33:
    if ((*(_BYTE *)(v18 + 104) & 3) != 0)
      break;
    v18 = sub_22E3CD31C((uint64_t *)(v18 + 104), v18);
  }
  while (v18);
  v81 = a7;
  v82 = a4;
  v34 = v80;
  while (1)
  {
    BestVariantMatchForContext = llvm::omp::getBestVariantMatchForContext();
    if ((BestVariantMatchForContext & 0x80000000) != 0)
      break;
    v36 = BestVariantMatchForContext;
    v37 = *((_QWORD *)v99 + BestVariantMatchForContext);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = *(_DWORD *)(v34 + 8456);
    v40 = v84[1288];
    v87 = *v84;
    v41 = *(_DWORD *)(*(_QWORD *)(v34 + 104) + 180);
    sub_22EE03478(v34);
    if (!v42)
      v84[1288] = 1;
    *v84 = 1;
    v83 = v84[1368];
    v84[1368] = 1;
    v43 = *(unsigned int *)(v38 + 28);
    if ((*(_DWORD *)(v38 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC && v38 != 0)
    {
      if (*v9 == 140)
        v45 = v9;
      else
        v45 = 0;
      v46 = sub_22F060ED0((uint64_t)v45);
      v47 = *(_QWORD *)(v85 + 16848);
      v48 = (*v45 >> 8) & 3;
      v49 = (*v45 >> 10) & 7;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      v37 = sub_22EFFAF50(v85, v46, 0, 0, 0, 0, 0, v38, (v43 >> 13) & 3 | v38, (uint64_t)&v88, 0, v47, v48, SHIWORD(v48), v49, SHIWORD(v49), 0);
    }
    LOWORD(v74) = 0;
    v34 = v80;
    v50 = sub_22EB1CFA4(v80, v76, v37, v82, v77, v78, v81, v79, v74);
    v51 = v50;
    if (v50 >= 2 && (*(_BYTE *)(v50 & 0xFFFFFFFFFFFFFFFELL) + 113) >= 0xFBu)
    {
      v66 = sub_22EFFA604(*(unsigned __int8 **)((v50 & 0xFFFFFFFFFFFFFFFELL)
                                              + *(unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFELL) + 3)));
      if ((*(_DWORD *)(v66 + 28) & 0x7Eu) - 52 >= 6)
        v67 = 0;
      else
        v67 = v66;
      v68 = sub_22EF71270(v85, v75, *(_QWORD *)(v67 + 48), 0, 0);
      v52 = 0;
      v53 = v87;
      v54 = v83;
      if (v68 > 0xF)
      {
        v55 = 6;
        goto LABEL_51;
      }
    }
    else
    {
      v52 = v50;
      v53 = v87;
      v54 = v83;
    }
    v55 = 0;
    v51 = v52;
LABEL_51:
    v84[1368] = v54;
    *(_DWORD *)(v80 + 8456) = v39;
    v84[1288] = v40;
    *v84 = v53;
    v56 = *(_QWORD *)(v80 + 104);
    if (*(_DWORD *)(v56 + 180) == 5)
      *(_BYTE *)(v56 + 170) = 1;
    if (v41)
      v57 = 3;
    else
      v57 = 0;
    *(_DWORD *)(v56 + 180) = v57;
    if (!v55)
    {
      v58 = v96;
      v59 = (char *)v96 + 368 * v36;
      v60 = v97;
      if (v59 + 368 != (char *)v96 + 368 * v97)
      {
        v61 = 368 * v97 - 368 * v36 - 368;
        do
        {
          v62 = v59 + 368;
          sub_22F341E04((uint64_t)v59, (uint64_t)(v59 + 368));
          v59 = v62;
          v61 -= 368;
        }
        while (v61);
        v60 = v97;
        v58 = v96;
      }
      LODWORD(v97) = v60 - 1;
      sub_22F2ECBAC((uint64_t)v58 + 368 * (v60 - 1));
      v63 = (char *)v99 + 8 * v36;
      v64 = v100;
      v65 = (char *)v99 + 8 * v100;
      if (v65 != v63 + 8)
      {
        memmove(v63, v63 + 8, v65 - (v63 + 8));
        v64 = v100;
      }
      LODWORD(v100) = v64 - 1;
      if ((_DWORD)v97)
        continue;
    }
    if (v51 >= 2)
    {
      v88 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFELL);
      v8 = sub_22F3C2FFC(v85, (uint64_t)v9, (uint64_t)&v88, 1, 0);
    }
    break;
  }
  v69 = v96;
  if ((_DWORD)v97)
  {
    v70 = 368 * v97;
    v71 = (char *)v96 - 368;
    do
    {
      sub_22F2ECBAC((uint64_t)&v71[v70]);
      v70 -= 368;
    }
    while (v70);
    v69 = v96;
  }
  if (v69 != v98)
    free(v69);
  if (v99 != v101)
    free(v99);
  sub_22F2ECA24(v102);
  v72 = v104;
  if (v104 == v103)
  {
    v73 = (void (**)(_QWORD *))(v103[0] + 32);
    v72 = v103;
LABEL_84:
    (*v73)(v72);
  }
  else if (v104)
  {
    v73 = (void (**)(_QWORD *))(*v104 + 40);
    goto LABEL_84;
  }
  return v8;
}

void sub_22EC993F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v9;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  _QWORD *v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  char v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  void *v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  _BOOL4 v147;
  __int128 v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  void *v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  void *v159;
  unint64_t v160;
  int v161;
  void *v162;
  _BYTE v163[40];
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  int v169;
  _QWORD v170[3];
  __int16 v171;
  int v172;
  char v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v153 = a6;
  if (!a2)
    goto LABEL_16;
  v8 = a6;
  v9 = a2;
  v152 = 1;
  if ((a2 & 1) != 0)
  {
    v15 = a6;
    v16 = 4340;
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 28);
  if ((v14 & 0x7F) == 0x1D)
  {
    v9 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(v9 + 28);
  }
  if ((v14 & 0x7Eu) - 58 <= 0xFFFFFFF9)
  {
    v15 = *(_DWORD *)(v9 + 24);
    v16 = 4229;
LABEL_8:
    sub_22E8FCA40((_QWORD *)a1, v15, v16, 0, (uint64_t)&v158);
    v17 = (uint64_t *)sub_22E8900C4((uint64_t)&v158, &v152);
LABEL_13:
    v21 = &v153;
LABEL_14:
    sub_22E8906A0((uint64_t)v17, v21);
LABEL_15:
    sub_22E903BEC((unsigned int *)&v158);
LABEL_16:
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 16) = 0;
    return;
  }
  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) + 84) & 0x10) != 0
    || sub_22E47DA60(v9))
  {
    v18 = *(_DWORD *)(v9 + 24);
    v19 = (_QWORD *)a1;
    v20 = 4190;
LABEL_12:
    sub_22E8FCA40(v19, v18, v20, 0, (uint64_t)&v158);
    v17 = &v158;
    goto LABEL_13;
  }
  if (sub_22EFC9084(v9, 0))
  {
    sub_22E8FCA40((_QWORD *)a1, v8, 0x1AC4u, 0, (uint64_t)&v158);
    LODWORD(v154) = *(_DWORD *)(v9 + 24);
    sub_22F2F2168((uint64_t)&v158, (unsigned int *)&v154);
    sub_22E903BEC((unsigned int *)&v158);
  }
  v151 = 0;
  if (!sub_22E49F868(v9)
    && sub_22EFBF86C(v9, &v151, 0)
    && ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x40000000000) != 0
     || sub_22EF736B8(*(_QWORD **)(a1 + 88), v151)))
  {
    sub_22E8FCA40((_QWORD *)a1, v153, 0x1AC3u, 0, (uint64_t)&v158);
    LODWORD(v154) = *(_DWORD *)(v9 + 24);
    sub_22F2F2168((uint64_t)&v158, (unsigned int *)&v154);
    sub_22E903BEC((unsigned int *)&v158);
    if (a3)
      goto LABEL_25;
LABEL_59:
    sub_22E8FCA40((_QWORD *)a1, v153, 0x1085u, 0, (uint64_t)&v158);
    sub_22E8900C4((uint64_t)&v158, &v152);
    goto LABEL_15;
  }
  if (!a3)
    goto LABEL_59;
LABEL_25:
  if ((sub_22EFC7ADC(v9 + 72) & 1) != 0 || (*(_DWORD *)a3 & 0x1E000) != 0)
    goto LABEL_27;
  v22 = *((_DWORD *)a4 + 2);
  if (v22)
  {
    v23 = *a4;
    v24 = *a4 + 136 * v22;
    v25 = *a4;
    do
    {
      v26 = *(unsigned int *)(v25 + 16);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD **)(v25 + 8);
        v28 = 56 * v26;
        while (!*v27 || (*(_DWORD *)*v27 & 0x1E000) == 0)
        {
          v27 += 7;
          v28 -= 56;
          if (!v28)
            goto LABEL_35;
        }
        goto LABEL_27;
      }
LABEL_35:
      v25 += 136;
    }
    while (v25 != v24);
    while (1)
    {
      v29 = *(unsigned int *)(v23 + 16);
      if ((_DWORD)v29)
        break;
LABEL_41:
      v23 += 136;
      if (v23 == v24)
        goto LABEL_42;
    }
    v30 = *(_QWORD *)(v23 + 8);
    v31 = 56 * v29;
    while (1)
    {
      if (*(_QWORD *)v30)
      {
        v32 = *(_DWORD *)(v30 + 8);
        if ((sub_22F0085E8(*(_QWORD *)v30, *(_QWORD *)(a1 + 88), 0) & 1) == 0)
          break;
      }
      v30 += 56;
      v31 -= 56;
      if (!v31)
        goto LABEL_41;
    }
    if (v32 == 10)
    {
      sub_22EFF605C(*(_QWORD *)v30);
      sub_22E8FCA40((_QWORD *)a1, v56, 0x1062u, 0, (uint64_t)&v158);
      sub_22F2F37E0((uint64_t)&v158, (uint64_t *)v30);
      goto LABEL_15;
    }
    sub_22EFF605C(*(_QWORD *)v30);
    sub_22E8FCA40((_QWORD *)a1, v71, 0x1AC6u, 0, (uint64_t)&v158);
    sub_22F2F37E0((uint64_t)&v158, (uint64_t *)v30);
    sub_22E903BEC((unsigned int *)&v158);
    *(_QWORD *)v30 = 0;
    goto LABEL_16;
  }
LABEL_42:
  v33 = *(_QWORD *)(v9 + 48);
  if (!a5)
  {
LABEL_43:
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    {
      v34 = a3;
LABEL_45:
      v35 = sub_22EB19A28(a1, (_DWORD *)(a3 & 0xFFFFFFFFFFFFFFFELL));
      if (v35 >= 2)
      {
        v36 = sub_22EFFA6B0((unsigned __int8 *)(v35 & 0xFFFFFFFFFFFFFFFELL));
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v36 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 < 2)
        {
          a3 = (uint64_t)v36;
          if (*v36 == 161)
          {
            v37 = *((_QWORD *)v36 + 2);
            if (v37)
            {
              if ((*(_DWORD *)(v37 + 28) & 0x7Eu) - 52 < 6)
              {
                v38 = v33;
                v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
                if (v39 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37))
                {
                  sub_22EFF605C(v34);
                  sub_22E8FCA40((_QWORD *)a1, v106, 0x1061u, 0, (uint64_t)&v158);
                  sub_22F0D4E74(v34);
                  v154 = v107;
                  v50 = &v158;
                  v46 = (uint64_t *)&v154;
                  goto LABEL_57;
                }
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
                {
                  v40 = sub_22EF71270(*(_QWORD *)(a1 + 88), v38, *(_QWORD *)(v37 + 48), 0, 0);
                  if (v40 < 0x10)
                  {
                    sub_22EFF605C(v34);
                    sub_22E8FCA40((_QWORD *)a1, v41, 0x105Fu, 0, (uint64_t)&v158);
                    v154 = *(void **)(v37 + 48);
                    v42 = sub_22E8901B8((uint64_t)&v158, (uint64_t *)&v154);
                    *(_QWORD *)&v148 = *(_QWORD *)(v9 + 48);
                    v43 = sub_22E8901B8(v42, (uint64_t *)&v148);
                    LODWORD(v146) = a5 != 0;
                    v44 = sub_22E8900C4(v43, (int *)&v146);
                    sub_22F0D4E74(v34);
                    v143 = v45;
                    v46 = (uint64_t *)&v143;
LABEL_56:
                    v50 = (uint64_t *)v44;
LABEL_57:
                    sub_22E8906A0((uint64_t)v50, v46);
                    goto LABEL_15;
                  }
                  v108 = v40;
                  v109 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
                  v110 = v109 && *(_BYTE *)(v109 + 16) == 26;
                  if (v110
                    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v109 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                    && sub_22F10CF48(v109))
                  {
                    v111 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
                    if (v111 && *(_BYTE *)(v111 + 16) == 25
                      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v111 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 25
                      && sub_22F10CF48(v111))
                    {
                      v112 = a1;
                      v113 = v9;
                      v114 = v37;
LABEL_184:
                      sub_22EC9A530(v112, v113, v114, v108);
                      goto LABEL_185;
                    }
                    v116 = *(_QWORD *)(*(_QWORD *)(v37 + 48) & 0xFFFFFFFFFFFFFFF0);
                    if (v116 && *(_BYTE *)(v116 + 16) == 25
                      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 25
                      && sub_22F10CF48(v116))
                    {
                      v112 = a1;
                      v113 = v37;
                      v114 = v9;
                      goto LABEL_184;
                    }
                  }
                }
LABEL_185:
                if ((*(_BYTE *)(v37 + 29) & 1) != 0 && sub_22F33DC8C(v37))
                {
                  sub_22EFF605C(v34);
                  sub_22E8FCA40((_QWORD *)a1, v120, 0x1AC5u, 0, (uint64_t)&v158);
                  sub_22F0D4E74(v34);
                  v154 = v121;
                  sub_22E8906A0((uint64_t)&v158, (uint64_t *)&v154);
                  sub_22E903BEC((unsigned int *)&v158);
                  if ((*(_BYTE *)(v37 + 29) & 1) != 0)
                  {
                    sub_22EFC8E88(v37);
                    v122 = *v133;
                  }
                  else
                  {
                    v122 = 0;
                  }
                  do
                  {
                    v135 = *v122++;
                    v134 = v135;
                  }
                  while (*(_WORD *)(v135 + 32) != 246);
                  v154 = *(void **)(v134 + 16);
                  sub_22E8FCA40((_QWORD *)a1, (int)v154, 0x1708u, 0, (uint64_t)&v158);
                  v17 = &v158;
                  v21 = (uint64_t *)&v154;
                  goto LABEL_14;
                }
                if ((*(_DWORD *)(v9 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
                {
                  v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
                  if ((*(_BYTE *)(v119 + 82) & 0xC) != 0 || sub_22EFD7260(v119))
                  {
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x105Du, 0, (uint64_t)&v158);
                    v118 = 1;
                    goto LABEL_198;
                  }
                  if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x39)
                  {
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x105Du, 0, (uint64_t)&v158);
                    v118 = 4;
                    goto LABEL_198;
                  }
                  if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x37)
                  {
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x105Du, 0, (uint64_t)&v158);
                    v118 = 3;
                    goto LABEL_198;
                  }
                }
                if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) + 82) & 0x40) != 0)
                {
                  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x105Du, 0, (uint64_t)&v158);
                  v118 = 5;
                }
                else
                {
                  v117 = *(_QWORD *)(v9 + 80);
                  if ((v117 & 0x2000000) != 0)
                  {
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x105Du, 0, (uint64_t)&v158);
                    v118 = 6;
                  }
                  else
                  {
                    if ((v117 & 0xC0000000) == 0)
                    {
                      v143 = 0;
                      v144 = 0;
                      v145 = 0;
                      LODWORD(v158) = 0;
                      v159 = 0;
                      v160 = 0;
                      v161 = 0;
                      sub_22EFF605C(v34);
                      v123 = *(_QWORD *)(a1 + 88) + 2128;
                      LODWORD(v154) = v124;
                      v157 = 4189;
                      v155 = 0;
                      v156 = v123;
                      sub_22EFF605C(v34);
                      v126 = v125;
                      v127 = *(unsigned int *)(v9 + 24) | ((unint64_t)*(unsigned int *)(v9 + 24) << 32);
                      v128 = sub_22E3B8AAC(v123);
                      sub_22E4D6448(v128 + 336, v127, 1);
                      LODWORD(v148) = v126;
                      v150 = 4188;
                      *((_QWORD *)&v148 + 1) = 0;
                      v149 = v123;
                      if (v128)
                      {
                        *((_QWORD *)&v148 + 1) = sub_22E3B8AAC(v123);
                        sub_22E78D4E8(*((_OWORD **)&v148 + 1), v128);
                      }
                      v129 = sub_22EA273B0((_QWORD *)a1, v9, v37, (uint64_t)&v143, (int *)&v158, (int *)&v154, (int *)&v148, 1, 0, 1);
                      if (*((_QWORD *)&v148 + 1) && v149)
                      {
                        sub_22E3BB10C(v149, *((unint64_t *)&v148 + 1));
                        *((_QWORD *)&v148 + 1) = 0;
                      }
                      if (v128)
                        sub_22E3BB10C(v123, v128);
                      if (v155 && v156)
                        sub_22E3BB10C(v156, v155);
                      if (v159 && v160)
                        sub_22E3BB10C(v160, (unint64_t)v159);
                      if (v143 && v144)
                        sub_22E3BB10C(v144, v143);
                      if (v129)
                        goto LABEL_16;
LABEL_27:
                      *(_QWORD *)a7 = v9;
                      *(_QWORD *)(a7 + 8) = a3;
                      *(_BYTE *)(a7 + 16) = 1;
                      return;
                    }
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v9 + 24), 0x105Du, 0, (uint64_t)&v158);
                    if ((*(_QWORD *)(v37 + 80) & 0xC0000000) == 0x80000000)
                      v118 = 8;
                    else
                      v118 = 7;
                  }
                }
LABEL_198:
                LODWORD(v154) = v118;
                sub_22E8900C4((uint64_t)&v158, (int *)&v154);
                goto LABEL_15;
              }
            }
          }
        }
      }
      sub_22EFF605C(v34);
      sub_22E8FCA40((_QWORD *)a1, v47, 0x1085u, 0, (uint64_t)&v158);
      v44 = sub_22E8900C4((uint64_t)&v158, &v152);
      v48 = v34;
LABEL_55:
      sub_22F0D4E74(v48);
      v154 = v49;
      v46 = (uint64_t *)&v154;
      goto LABEL_56;
    }
    if ((*(_DWORD *)(v9 + 28) & 0x7Eu) - 54 >= 4)
      v51 = 0;
    else
      v51 = v9;
    if (!v51
      || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51) + 80) & 0xE000) == 0x4000
      || (*(_QWORD *)(v51 + 40) & 7) == 6
      && (*(_DWORD *)(*(_QWORD *)(v51 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
    {
      v52 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v33, 0);
      v53 = a3;
      goto LABEL_129;
    }
    v54 = *(_WORD *)(v51 + 80) & 0x7F;
    v55 = -40;
    if (v54 > 0x46)
    {
      if (v54 != 83)
      {
        if (v54 == 71)
        {
          v55 = -56;
          goto LABEL_112;
        }
        if (v54 == 81)
          goto LABEL_112;
LABEL_107:
        v72 = v54 - 52;
        v73 = v54 - 33 >= 5;
        v74 = -48;
        if (!v73)
          v74 = -64;
        if (v72 >= 6)
          v55 = v74;
        else
          v55 = -72;
      }
    }
    else
    {
      if (v54 > 0x18)
        goto LABEL_106;
      if (v54 != 16)
      {
        if (((1 << v54) & 0x1066) != 0)
          goto LABEL_112;
        if (v54 != 24)
        {
LABEL_106:
          if (v54 == 70)
          {
            v55 = -64;
            goto LABEL_112;
          }
          goto LABEL_107;
        }
      }
      v55 = -48;
    }
LABEL_112:
    v75 = (char *)(a1 + 10664);
    v76 = *(_QWORD *)(a1 + 88);
    v77 = *(_QWORD *)(v51 + 72 + v55 + 16);
    v78 = (_QWORD *)(v77 & 0xFFFFFFFFFFFFFFF8);
    if ((v77 & 4) != 0)
      v78 = (_QWORD *)*v78;
    if (v78)
      v79 = (unint64_t)(v78 - 8);
    else
      v79 = 0;
    v80 = *(_QWORD *)(v79 + 48);
    if (v80)
    {
      v81 = v80 & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v81 = sub_22EF6462C(v76, v79);
      v76 = *(_QWORD *)(a1 + 88);
    }
    v141 = v33;
    v137 = sub_22F36A6C0(v76, v33, *(_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF0));
    v82 = *(_DWORD *)(a1 + 8456);
    v83 = *v75;
    v138 = *(_BYTE *)(a1 + 11952);
    v139 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
    sub_22EE03478(a1);
    if (!v84)
      *(_BYTE *)(a1 + 11952) = 1;
    *v75 = 1;
    v85 = *(_BYTE *)(a1 + 12032);
    *(_BYTE *)(a1 + 12032) = 1;
    sub_22F0D5A50(a3);
    v87 = sub_22EB2EA08(a1, v86, 4, a3);
    *(_BYTE *)(a1 + 12032) = v85;
    *(_DWORD *)(a1 + 8456) = v82;
    *(_BYTE *)(a1 + 11952) = v138;
    *v75 = v83;
    v88 = *(_QWORD *)(a1 + 104);
    if (*(_DWORD *)(v88 + 180) == 5)
      *(_BYTE *)(v88 + 170) = 1;
    if (v139)
      v89 = 3;
    else
      v89 = 0;
    *(_DWORD *)(v88 + 180) = v89;
    v33 = v141;
    if (v87 < 2)
    {
      sub_22EFF605C(a3);
      sub_22E8FCA40((_QWORD *)a1, v103, 0x1085u, 0, (uint64_t)&v158);
      v44 = sub_22E8900C4((uint64_t)&v158, &v152);
      v48 = a3;
      goto LABEL_55;
    }
    v53 = v87 & 0xFFFFFFFFFFFFFFFELL;
    v52 = v137;
LABEL_129:
    v142 = v53;
    v90 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(v53 + 8), 0);
    v91 = *(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v91 + 8) & 0xF) != 0)
      v91 = (unint64_t)sub_22F10D2BC(v90);
    v92 = v52;
    v93 = v52 & 0xFFFFFFFFFFFFFFF0;
    v94 = *(_QWORD *)v93;
    v95 = v92;
    if ((*(_BYTE *)(*(_QWORD *)v93 + 8) & 0xF) != 0)
      v94 = (unint64_t)sub_22F10D2BC(v92);
    if ((v94 ^ v91) < 0x10)
      goto LABEL_134;
    v97 = *(_QWORD *)v93;
    if ((*(_BYTE *)(*(_QWORD *)v93 + 8) & 0xF) != 0)
      v97 = (unint64_t)sub_22F10D2BC(v95);
    sub_22ECFA94C(&v158, a1, v142, v97 & 0xFFFFFFFFFFFFFFF0, 0, 0, 0, 0, 0, 0);
    if ((int)v158 > 1)
    {
      if ((_DWORD)v158 != 4 && (_DWORD)v158 != 2)
      {
LABEL_158:
        v104 = *(_QWORD *)v93;
        if ((*(_BYTE *)(*(_QWORD *)v93 + 8) & 0xF) != 0)
          v104 = (unint64_t)sub_22F10D2BC(v95);
        v105 = sub_22ECFABE8((uint64_t *)a1, (unsigned __int8 *)v142, v104 & 0xFFFFFFFFFFFFFFF0, 3, 0);
        if (v105 >= 2)
        {
          a3 = v105;
          if ((v158 & 0x7FFFFFFF) == 2 && v162 != v163)
            free(v162);
LABEL_134:
          v34 = v142;
          if (v51
            && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51) + 80) & 0xE000) != 0x4000
            && ((*(_QWORD *)(v51 + 40) & 7) != 6
             || (*(_DWORD *)(*(_QWORD *)(v51 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
          {
            v96 = sub_22EFFED0C((unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFFELL));
            if (*v96 == 233)
              a3 = *((_QWORD *)v96 + 2);
          }
          goto LABEL_45;
        }
        goto LABEL_154;
      }
    }
    else if ((_DWORD)v158 != -2147483646 && (_DWORD)v158 != -2147483644)
    {
      goto LABEL_158;
    }
    sub_22EFF605C(v142);
    sub_22E8FCA40((_QWORD *)a1, v98, 0x105Fu, 0, (uint64_t)&v154);
    *(_QWORD *)&v148 = *(_QWORD *)(v142 + 8);
    v99 = sub_22E8901B8((uint64_t)&v154, (uint64_t *)&v148);
    if (!v51
      || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51) + 80) & 0xE000) == 0x4000
      || (*(_QWORD *)(v51 + 40) & 7) == 6
      && (*(_DWORD *)(*(_QWORD *)(v51 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
    {
      v95 = *(_QWORD *)(v9 + 48);
    }
    v143 = v95;
    v100 = sub_22E8901B8(v99, (uint64_t *)&v143);
    v147 = a5 != 0;
    v101 = sub_22E8900C4(v100, (int *)&v147);
    sub_22F0D4E74(v142);
    v146 = v102;
    sub_22E8906A0(v101, &v146);
    sub_22E903BEC((unsigned int *)&v154);
LABEL_154:
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 16) = 0;
    if ((v158 & 0x7FFFFFFF) == 2 && v162 != v163)
      free(v162);
    return;
  }
  v57 = *(_QWORD *)(v9 + 48);
  v58 = sub_22F33DCEC(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0));
  if (!v58)
  {
    v18 = *(_DWORD *)(v9 + 24);
    v19 = (_QWORD *)a1;
    v20 = 4192;
    goto LABEL_12;
  }
  v59 = v58;
  v60 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "omp_interop_t", 0xDuLL);
  v158 = 0;
  v159 = &v161;
  v160 = 0x800000000;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = (_QWORD *)a1;
  v168 = v60;
  v169 = v153;
  sub_22EFC6D6C((uint64_t)v170, v60);
  v170[1] = 0;
  v170[2] = 0;
  v171 = 0;
  v172 = 257;
  v173 = 0;
  sub_22EC56024((uint64_t)&v158);
  if (!sub_22EC63520(a1, &v158, *(_QWORD *)(a1 + 12888), 0, 0))
    goto LABEL_85;
  v61 = *(_QWORD *)v159 & 0xFFFFFFFFFFFFFFFCLL;
  v62 = *(_DWORD *)(v61 + 28) & 0x7F;
  if (v62 <= 0x2F && ((1 << v62) & 0xC00000060000) != 0)
  {
    v64 = sub_22EFBAEA4(*(_QWORD *)v159 & 0xFFFFFFFFFFFFFFFCLL);
    if (!v64)
    {
LABEL_85:
      v67 = v153;
      v68 = (_QWORD *)a1;
      v69 = 4240;
LABEL_86:
      sub_22E8FCA40(v68, v67, v69, 0, (uint64_t)&v154);
      sub_22E8906A0((uint64_t)&v154, &v153);
      sub_22E903BEC((unsigned int *)&v154);
      v70 = 0;
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 16) = 0;
      goto LABEL_87;
    }
    v61 = v64;
    v62 = *(_DWORD *)(v64 + 28) & 0x7F;
  }
  if (v62 - 33 >= 0xA)
    goto LABEL_85;
  v65 = *(_QWORD *)(v61 + 48);
  if (v65)
    v66 = v65 & 0xFFFFFFFFFFFFFFF0;
  else
    v66 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v61);
  v115 = *(_QWORD *)(v59 + 16);
  if ((v115 & 0x800000000000000) != 0)
  {
    v67 = *(_DWORD *)(v9 + 24);
    v68 = (_QWORD *)a1;
    v69 = 4159;
    goto LABEL_86;
  }
  v154 = &v156;
  v155 = 0x800000000;
  sub_22E3D0148((uint64_t)&v154, (_BYTE *)(v59 + 40), (_BYTE *)(v59 + 40 + 8 * (unsigned __int16)(v115 >> 38)));
  sub_22F33DD98((uint64_t)&v154, (uint64_t)v154 + 8 * v155, a5, v66);
  v140 = *(_QWORD *)(a1 + 88);
  v130 = *(_QWORD *)(v59 + 24);
  v131 = (uint64_t *)v154;
  v132 = v155;
  sub_22E4913B4(v59, (uint64_t)&v148);
  v57 = sub_22EF63D8C(v140, v130, v131, v132, &v148, 0);
  if (v154 != &v156)
    free(v154);
  v70 = 1;
LABEL_87:
  if (BYTE1(v172))
  {
    if ((_DWORD)v158 == 5)
    {
      sub_22EC64D18(v167, (uint64_t)&v158);
    }
    else if (v165 && (*(_DWORD *)(v167[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v167, (uint64_t)&v158);
    }
  }
  if (v164)
  {
    v136 = sub_22EC6CBD0(v164);
    MEMORY[0x2348A0E9C](v136, 0x10E0C409F09D3C3);
  }
  if (v159 != &v161)
    free(v159);
  v33 = v57;
  if (v70)
    goto LABEL_43;
}

void sub_22EC9A530(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 48) = a4;
  v26 = 0;
  v6 = *(_QWORD *)(a3 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if ((v8
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v7 = sub_22F10CF48(v7)) != 0)
    && (v9 = *(_QWORD *)(v7 + 16), (v9 & 0x3FFFC000000000) != 0))
  {
    v10 = 8 * (unsigned __int16)(v9 >> 38);
    do
    {
      v11 = sub_22EFBF080(*(_QWORD *)(a1 + 88), a2 + 72, 0, 0, 0, *(_QWORD *)(*(_QWORD *)v6 + 48), 0, 0, 0);
      v12 = v11;
      v13 = v26;
      v14 = *(_DWORD *)(v11 + 96);
      *(_DWORD *)(v11 + 96) = v14 & 0xFFF01FFF;
      if (v26 >= 0xFF)
      {
        sub_22F3AC2B8(v11, v26);
        v13 = v26;
      }
      else
      {
        *(_DWORD *)(v11 + 96) = v14 & 0xF0001FFF | (v26 << 20);
      }
      *(_DWORD *)(v12 + 28) |= 0x200u;
      if (v13 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v26;
      }
      v27[v13] = v12;
      v15 = ++v26;
      v6 += 8;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v15 = 0;
  }
  if (!a2 || (v16 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v17 = *(_QWORD *)(a2 + 16);
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 4) != 0)
      v18 = *(_QWORD *)v18;
    for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
    {
      v20 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v20 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_33;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_32;
        if (i == 16)
          goto LABEL_26;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_39;
        if (i == 24)
        {
LABEL_26:
          v20 = -48;
        }
        else
        {
LABEL_32:
          if (i != 70)
          {
LABEL_33:
            v21 = i - 52;
            if ((i - 33) >= 5)
              v22 = -48;
            else
              v22 = -64;
            if (v21 >= 6)
              v20 = v22;
            else
              v20 = -72;
            goto LABEL_39;
          }
          v20 = -64;
        }
      }
LABEL_39:
      v23 = *(_QWORD *)(v18 + v20 + 16);
      v18 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v18 = *(_QWORD *)v18;
    }
    v16 = v18 - 40;
  }
  if (v15)
  {
    v24 = 8 * v15;
    v25 = (void *)sub_22E3CD3D4(*(_QWORD *)(v16 + 88) + 2032, v24, 3);
    *(_QWORD *)(a2 + 120) = v25;
    memmove(v25, v27, v24);
  }
}

void sub_22EC9A820(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t *__src, uint64_t a6, uint64_t *a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v18;
  unsigned __int8 **v19;
  char *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t j;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v57;
  uint64_t *v58;
  unsigned int v59;
  _QWORD *v61;
  uint64_t OpenMPClauseName;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  int v67;
  _BYTE v68[64];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  __int16 v73;
  char v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD v81[17];
  unsigned __int8 **v82;
  uint64_t v83;
  _QWORD v84[10];

  v84[8] = *MEMORY[0x24BDAC8D0];
  v69 = a2;
  v82 = (unsigned __int8 **)v84;
  v83 = 0x800000000;
  v57 = a6;
  sub_22F247178((unsigned int *)&v82, (uint64_t)v84, __src, &__src[a6]);
  sub_22F247178((unsigned int *)&v82, (uint64_t)&v82[v83], a7, &a7[a8]);
  v61 = a1;
  v59 = a8;
  v58 = a7;
  if ((_DWORD)v83 || a10)
  {
    *(_QWORD *)&v70 = &v71;
    *((_QWORD *)&v70 + 1) = 0x600000000;
    sub_22E47EDD0((uint64_t)&v70, 1uLL, 0);
    v75 = 55;
    v76 = &v78;
    v77 = 0x800000000;
    v79 = (char *)v81;
    v80 = 0x800000000;
    v81[4] = 1;
    for (i = 272; i != 368; i += 24)
      *(_DWORD *)((char *)&v70 + i) = -1;
    sub_22F0C382C(a4, a1[11], &v70);
    if ((_DWORD)v80)
    {
      v53 = 4 * v80;
      v52 = v79;
      while (*(_DWORD *)v52 != 48)
      {
        v52 += 4;
        v53 -= 4;
        if (!v53)
        {
          v52 = &v79[4 * v80];
          break;
        }
      }
    }
    else
    {
      v52 = v79;
    }
    if (v80 == (v52 - v79) >> 2)
    {
      if ((_DWORD)v83)
      {
        sub_22E8FCA40(a1, a11, 0x1052u, 0, (uint64_t)&v64);
        OpenMPClauseName = llvm::omp::getOpenMPClauseName();
        v63 = v54;
        sub_22F2F2210((uint64_t)&v64, (uint64_t)&OpenMPClauseName);
        sub_22E903BEC((unsigned int *)&v64);
      }
      if (a10)
      {
        sub_22E8FCA40(a1, a12, 0x1052u, 0, (uint64_t)&v64);
        OpenMPClauseName = llvm::omp::getOpenMPClauseName();
        v63 = v55;
        sub_22F2F2210((uint64_t)&v64, (uint64_t)&OpenMPClauseName);
        sub_22E903BEC((unsigned int *)&v64);
      }
      sub_22F2ECBAC((uint64_t)&v70);
      goto LABEL_83;
    }
    sub_22F2ECBAC((uint64_t)&v70);
    v18 = v83;
  }
  else
  {
    v18 = 0;
  }
  v64 = v68;
  v65 = v68;
  v66 = 4;
  v67 = 0;
  if (!v18)
    goto LABEL_87;
  v19 = v82;
  v20 = (char *)&v82[v18];
  while (2)
  {
    v21 = sub_22EFFA6B0(*v19);
    v22 = (uint64_t)v21;
    if (*v21 != 161
      || ((v23 = *((_QWORD *)v21 + 2), (*(_DWORD *)(v23 + 28) & 0x7F) != 0x40)
        ? (v24 = 0)
        : (v24 = *((_QWORD *)v21 + 2)),
          (OpenMPClauseName = v24) == 0))
    {
LABEL_79:
      sub_22EFF605C(v22);
      sub_22E8FCA40(v61, v47, 0x10CAu, 0, (uint64_t)&v70);
      v48 = sub_22E890024((uint64_t)&v70, &v69);
      LODWORD(OpenMPClauseName) = 0;
      sub_22E8900C4(v48, (int *)&OpenMPClauseName);
      goto LABEL_80;
    }
    v25 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    v26 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v26)
      v27 = *(_BYTE *)(v26 + 16) == 26;
    else
      v27 = 0;
    if (v27
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v26 = sub_22F10CF48(v26)) != 0)
    {
      v28 = (unsigned __int16)(*(_QWORD *)(v26 + 16) >> 38);
    }
    else
    {
      v28 = 0;
    }
    v29 = (*(_DWORD *)(v24 + 96) >> 20);
    if (v29 != 255)
      goto LABEL_44;
    v30 = v23;
    if ((*(_DWORD *)(v24 + 28) & 0x7F) == 0x53)
      goto LABEL_43;
    for (j = *(_QWORD *)(v24 + 16); ; j = *(_QWORD *)(v32 + v34 + 16))
    {
      v32 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v32 = *(_QWORD *)v32;
      v33 = *(_WORD *)(v32 + 8) & 0x7F;
      if (v33 == 83)
        break;
      v34 = -40;
      if ((*(_WORD *)(v32 + 8) & 0x7Fu) > 0x46)
      {
        if (v33 == 71)
        {
          v34 = -56;
          continue;
        }
        if (v33 != 81)
          goto LABEL_33;
      }
      else
      {
        if (v33 > 0x18)
          goto LABEL_32;
        if (v33 == 16)
          goto LABEL_26;
        if (((1 << v33) & 0x1066) == 0)
        {
          if (v33 == 24)
          {
LABEL_26:
            v34 = -48;
            continue;
          }
LABEL_32:
          if (v33 == 70)
          {
            v34 = -64;
            continue;
          }
LABEL_33:
          v35 = v33 - 52;
          v36 = v33 - 33 >= 5;
          v37 = -64;
          if (v36)
            v37 = -48;
          v36 = v35 >= 6;
          v34 = -72;
          if (v36)
            v34 = v37;
          continue;
        }
      }
    }
    v30 = v32 - 40;
LABEL_43:
    v29 = sub_22F36F2CC(*(_QWORD *)(v30 + 88), v24);
LABEL_44:
    if (v28 <= v29)
      goto LABEL_79;
    v38 = (*(_DWORD *)(v24 + 96) >> 20);
    if (v38 != 255)
      goto LABEL_72;
    if ((*(_DWORD *)(v24 + 28) & 0x7F) == 0x53)
      goto LABEL_71;
    v39 = *(_QWORD *)(v24 + 16);
    while (2)
    {
      v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if ((v39 & 4) != 0)
        v40 = *(_QWORD *)v40;
      v41 = *(_WORD *)(v40 + 8) & 0x7F;
      if (v41 != 83)
      {
        v42 = -40;
        if ((*(_WORD *)(v40 + 8) & 0x7Fu) > 0x46)
        {
          if (v41 == 71)
          {
            v42 = -56;
          }
          else if (v41 != 81)
          {
            goto LABEL_61;
          }
        }
        else
        {
          if (v41 > 0x18)
            goto LABEL_60;
          if (v41 == 16)
            goto LABEL_54;
          if (((1 << v41) & 0x1066) == 0)
          {
            if (v41 == 24)
            {
LABEL_54:
              v42 = -48;
            }
            else
            {
LABEL_60:
              if (v41 == 70)
              {
                v42 = -64;
              }
              else
              {
LABEL_61:
                v43 = v41 - 52;
                v36 = v41 - 33 >= 5;
                v44 = -64;
                if (v36)
                  v44 = -48;
                v36 = v43 >= 6;
                v42 = -72;
                if (v36)
                  v42 = v44;
              }
            }
          }
        }
        v39 = *(_QWORD *)(v40 + v42 + 16);
        continue;
      }
      break;
    }
    v23 = v40 - 40;
LABEL_71:
    v38 = sub_22F36F2CC(*(_QWORD *)(v23 + 88), v24);
LABEL_72:
    v45 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v38);
    if ((const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45) != v25)
      goto LABEL_79;
    sub_22E3BA850((uint64_t)&v64, v25);
    if (v46)
    {
      if (++v19 == (unsigned __int8 **)v20)
      {
LABEL_87:
        v49 = v61[11];
        v70 = 0uLL;
        v71 = a13;
        v72 = 0;
        v74 = 120;
        v73 = 0;
        v50 = sub_22F396518(v49, a3, (uint64_t)a4, __src, v57, v58, v59, a9, a10, &v70);
        sub_22EFCA95C(a2, v50);
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  sub_22E8FCA40(v61, *(_DWORD *)(v22 + 4), 0x103Au, 0, (uint64_t)&v70);
  sub_22E890024((uint64_t)&v70, &OpenMPClauseName);
LABEL_80:
  sub_22E903BEC((unsigned int *)&v70);
LABEL_81:
  if (v65 != v64)
    free(v65);
LABEL_83:
  if (v82 != v84)
    free(v82);
}

uint64_t sub_22EC9AE58(_QWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39[2];
  uint64_t v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v6 = a1[1536];
  result = sub_22ECB1B04(v6);
  if (result)
  {
    v8 = result;
    v9 = *(_DWORD *)(result + 1064);
    if (v9)
    {
      result = sub_22F4219DC(*(_DWORD *)(result + 960));
      if ((_DWORD)result)
      {
        *(_BYTE *)(v8 + 1083) = 0;
        v47 = a1;
        v48 = 1;
        v49 = v6;
        v50 = a2;
        v51 = a2;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        v56 = 0;
        if ((sub_22EC9B2F0(&v47, a3, 0) & 1) != 0)
          goto LABEL_7;
        v10 = *((_QWORD *)&v53 + 1);
        if (!*((_QWORD *)&v53 + 1))
          goto LABEL_7;
        if ((*(_DWORD *)(*((_QWORD *)&v53 + 1) + 28) & 0x7Fu) - 67 > 0xFFFFFFF8)
        {
          v13 = 0;
          v14 = *((_QWORD *)&v53 + 1);
        }
        else
        {
          v12 = sub_22EC7ECC4((uint64_t)a1, *((uint64_t *)&v53 + 1), 0, 0);
          if (v12)
          {
            v14 = v12;
            v13 = 0;
          }
          else
          {
            v13 = sub_22EC9B8AC((uint64_t)a1, v10, (unsigned __int8 *)v54, 0);
            v14 = *(_QWORD *)(v13 + 16);
          }
        }
        v15 = a1[1536];
        v39[0] = sub_22EC81010(v10);
        v16 = sub_22ECB1B04(v15);
        LODWORD(v45) = (*(_DWORD *)(v16 + 728) >> 1) + 1;
        *((_QWORD *)&v45 + 1) = v14;
        sub_22F340838((uint64_t)&v40, v16 + 728, v39, &v45);
        v17 = *(_QWORD *)(sub_22ECB1B04(a1[1536]) + 1072);
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
        v19 = a1[1536];
        if (v17 != v18)
        {
          *(_QWORD *)(sub_22ECB1B04(a1[1536]) + 1072) = 0;
          if (v17)
          {
            v20 = *(_DWORD *)(v17 + 28);
            if ((v20 & 0x7Fu) - 60 <= 6)
            {
              *(_QWORD *)&v45 = *(_QWORD *)(v17 + 48);
              v21 = sub_22F1133DC((uint64_t *)&v45, a1[11]);
              *(_DWORD *)(v17 + 28) = v20 | 0x800;
              sub_22EFC9100(v17, a1[11]);
              v22 = a1[11];
              v40 = *(_QWORD *)(v17 + 40);
              LODWORD(v41) = a2;
              sub_22EFC6D6C((uint64_t)v42, v40);
              v23 = (_DWORD *)sub_22E3CD3D4(v22 + 2032, 32, 3);
              sub_22EFF6AE4((uint64_t)v23, v22, 0, 0, 0, v17, 1, (uint64_t)&v40, 0, 0, v21, 1, 0, 0);
              v40 = a1[11];
              v41 = a1;
              v42[0] = 0;
              v43 = 0;
              v44 = 0;
              sub_22EB88244((uint64_t)&v40, v23);
              v19 = a1[1536];
            }
          }
        }
        v24 = sub_22ECB1B04(v19);
        if (v24)
          v25 = *(_DWORD *)(v24 + 960);
        else
          v25 = 89;
        sub_22EC7F2A4(v19, v10, 0, (uint64_t)&v45);
        v26 = v54;
        v27 = sub_22F421AC0(v25);
        if (v27)
        {
          v28 = sub_22ECB1B04(a1[1536]);
          if (v28)
          {
            if (*(_BYTE *)(v28 + 1068))
              v29 = 43;
            else
              v29 = 44;
          }
          else
          {
            v29 = 44;
          }
          v30 = DWORD1(v45);
          if (DWORD1(v45) != 85
            && DWORD1(v45) != v29
            && v46
            && (*(_DWORD *)(a1[9] + 72) < 0x2Eu || DWORD1(v45) != 63 && DWORD1(v45) != 43))
          {
            goto LABEL_45;
          }
        }
        else
        {
          v29 = 63;
          v30 = DWORD1(v45);
        }
        if (sub_22F421A30(v25)
          || (v25 - 36) <= 0x28 && ((1 << (v25 - 36)) & 0x10000000401) != 0)
        {
          if (v27)
            goto LABEL_40;
        }
        else if (((v27 | sub_22F421B08(v25) ^ 1) & 1) != 0)
        {
          goto LABEL_40;
        }
        if ((v30 - 43) <= 0x2A && ((1 << (v30 - 43)) & 0x40000100001) != 0)
        {
LABEL_40:
          if (v26 && v30 == 85)
            sub_22EC83920(a1[1536], v10, v26, v29, v13, 0, 0);
          goto LABEL_7;
        }
        if (v30 == 63 && !v46)
        {
LABEL_7:
          v11 = a1[1536];
          result = sub_22ECB1B04(v11);
          *(_DWORD *)(result + 1064) = v9 - 1;
          if ((v9 - 1) >= 2)
          {
            result = sub_22ECB1B04(v11);
            *(_BYTE *)(result + 1068) = 1;
          }
          return result;
        }
LABEL_45:
        sub_22F0D5A50((uint64_t)a3);
        sub_22E8FCA40(a1, v31, 0x10AFu, 0, (uint64_t)&v40);
        v39[0] = llvm::omp::getOpenMPClauseName();
        v39[1] = v32;
        v33 = sub_22F2F2210((uint64_t)&v40, (uint64_t)v39);
        v38[0] = llvm::omp::getOpenMPDirectiveName();
        v38[1] = v34;
        v35 = sub_22F2F2210(v33, (uint64_t)v38);
        v37[0] = llvm::omp::getOpenMPClauseName();
        v37[1] = v36;
        sub_22F2F2210(v35, (uint64_t)v37);
        sub_22E903BEC((unsigned int *)&v40);
        if (!v46)
          DWORD1(v45) = v29;
        sub_22EC82B14(a1, a1[1536], v10, (uint64_t)&v45, 1);
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_22EC9B2F0(_QWORD *a1, unsigned int *a2, int a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  int v38;
  char v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48[24];
  _BYTE v49[96];

  if (!a2)
  {
    if (!a3)
      return 1;
    sub_22E8FCA40((_QWORD *)*a1, *((_DWORD *)a1 + 6), 0x10AEu, 0, (uint64_t)v49);
    v14 = (unsigned int *)v49;
LABEL_89:
    sub_22E903BEC(v14);
    return 1;
  }
  v5 = a2;
  if (*(unsigned __int8 *)a2 == 173 && (*((_BYTE *)a2 + 2) & 4) == 0)
    v5 = (unsigned int *)*((_QWORD *)a2 + 2);
  sub_22F0D4E74((uint64_t)v5);
  a1[4] = v6;
  LOBYTE(v7) = *(_BYTE *)v5;
  if ((*(_BYTE *)v5 + 21) >= 0x7Bu)
  {
    while (1)
    {
      if (v7 > 0xD5u)
      {
        if (v7 == 233)
        {
          LODWORD(v7) = *v5;
          if ((*v5 & 0x7C0000) != 0x300000)
            break;
          v12 = v5 + 4;
        }
        else
        {
          if (v7 != 214)
            break;
          v12 = v5 + 6;
          LOBYTE(v7) = -42;
        }
      }
      else if (v7 == 155)
      {
        if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
          goto LABEL_84;
        v12 = v5 + 6;
        if (!*((_BYTE *)v5 + 48))
          v12 = v5 + 8;
        LOBYTE(v7) = -101;
      }
      else
      {
        if (v7 != 176)
          break;
        v7 = v5[5];
        if ((_DWORD)v7 == -1)
          goto LABEL_84;
        v12 = &v5[2 * v7 + 10];
        LOBYTE(v7) = -80;
      }
      v13 = *(unsigned int **)v12;
      if (v13 == v5)
        break;
      LOBYTE(v7) = *(_BYTE *)v13;
      v5 = v13;
    }
  }
  if ((v7 & 0xFE) != 0x70)
  {
    if (v7 == 141)
    {
      v26 = *(_QWORD *)v5;
      if ((*(_QWORD *)v5 & 0x3F00000000) != 0xF00000000)
        goto LABEL_84;
      v27 = (v26 >> 18) & 1;
      v9 = *(unsigned __int8 **)((char *)&v5[2 * v27 + 2] + BYTE3(v26));
      v28 = *v9;
      if (v28 != 188)
      {
        if (v28 != 161)
          goto LABEL_84;
        v29 = BYTE3(v26);
        v30 = *((_QWORD *)v9 + 2);
        if (v30 && (*(_DWORD *)(v30 + 28) & 0x7F) == 0x3F)
        {
          v31 = (unsigned __int8 *)sub_22EFBC5B4(*((_QWORD *)v9 + 2));
          v32 = sub_22ECB248C(v31);
          if (*v32 == 188)
          {
            v33 = (uint64_t)v32;
            v30 = *((_QWORD *)v32 + 3);
            v34 = (unsigned __int8 *)MEMORY[0x18];
LABEL_73:
            v37 = a1;
            return sub_22ECCFEA4(v37, v30, v33, v34, a3);
          }
          v30 = *((_QWORD *)v9 + 2);
          v43 = *v5;
          v29 = v43 >> 24;
          v27 = (v43 >> 18) & 1;
        }
        v34 = *(unsigned __int8 **)((char *)&v5[2 * v27 + 4] + v29);
LABEL_76:
        v37 = a1;
        v33 = (uint64_t)v9;
        return sub_22ECCFEA4(v37, v30, v33, v34, a3);
      }
      if ((v9[2] & 4) != 0 && *sub_22EFFA6B0(*((unsigned __int8 **)v9 + 2)) == 133)
      {
        v30 = *((_QWORD *)v9 + 3);
        v34 = (unsigned __int8 *)MEMORY[0x18];
        goto LABEL_76;
      }
      goto LABEL_84;
    }
    if (v7 != 12)
      goto LABEL_84;
    v15 = *((_QWORD *)v5 + 1);
    if (!v15
      || (v15 & 1) != 0
      || (*(_DWORD *)(v15 + 28) & 0x7Fu) - 60 > 6
      || (*(_DWORD *)(v15 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v15 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
    {
      goto LABEL_84;
    }
    if (*(_QWORD *)(v15 + 88) < 8uLL)
      goto LABEL_84;
    v16 = *(_QWORD *)(v15 + 48);
    v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
      goto LABEL_84;
    if ((*(_BYTE *)(v15 + 96) & 0x60) != 0 && a3)
    {
      v18 = (_QWORD *)*a1;
      sub_22F0D5A50((uint64_t)v5);
      sub_22E8FCA40(v18, v19, 0x14C6u, 0, (uint64_t)v48);
      sub_22F0D4E74((uint64_t)v5);
      v47 = v20;
      sub_22E8906A0((uint64_t)v48, &v47);
      sub_22E903BEC(v48);
      v16 = *(_QWORD *)(v15 + 48);
      v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    }
    v21 = *a1;
    if (v17 && (v22 = *(_DWORD *)(v17 + 16), (v22 & 0xFE) == 0x28))
    {
      v44 = *a1;
      if ((v22 & 0x100000) != 0)
      {
        do
        {
LABEL_98:
          v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v17)
          {
            v45 = *(_DWORD *)(v17 + 16);
            if ((v45 & 0xFE) == 0x28)
              continue;
          }
          v17 = sub_22F10CF48(v17);
          v45 = *(_DWORD *)(v17 + 16);
        }
        while ((v45 & 0x100000) != 0);
      }
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_60;
      v44 = *a1;
      v46 = v16;
      v17 = sub_22F10CF48(v17);
      v16 = v46;
      v21 = v44;
      if (!v17)
        goto LABEL_60;
      if ((*(_DWORD *)(v17 + 16) & 0x100000) != 0)
        goto LABEL_98;
    }
    v16 = *(_QWORD *)(v17 + 32);
    v21 = v44;
LABEL_60:
    v23 = sub_22EC8247C(v21, v15, v16, v5[4], 0);
    v24 = (unsigned __int8 *)sub_22EFBC5B4(v15);
    return sub_22ECCFEA4(a1, v15, v23, v24, a3);
  }
  if ((*v5 & 0xFC0000) != 0x540000)
    goto LABEL_84;
  v8 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_69;
  }
  do
  {
    v9 = v8;
    LODWORD(v10) = *v8;
    if (v10 > 0xD5)
    {
      if ((_DWORD)v10 == 233)
      {
        LODWORD(v10) = *(_DWORD *)v8;
        if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
          goto LABEL_84;
        v11 = v8 + 16;
      }
      else
      {
        if ((_DWORD)v10 != 214)
          break;
        v11 = v8 + 24;
      }
    }
    else if ((_DWORD)v10 == 155)
    {
      if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
        goto LABEL_84;
      v11 = v8 + 24;
      if (!v9[48])
        v11 = v9 + 32;
      LOBYTE(v10) = -101;
    }
    else
    {
      if ((_DWORD)v10 != 176)
        break;
      v10 = *((unsigned int *)v8 + 5);
      if ((_DWORD)v10 == -1)
        goto LABEL_84;
      v11 = &v8[8 * v10 + 40];
      LOBYTE(v10) = -80;
    }
    v8 = *(unsigned __int8 **)v11;
  }
  while (v8 != v9);
  if (v10 != 188)
  {
    if (v10 != 161)
      goto LABEL_84;
LABEL_69:
    v30 = *((_QWORD *)v9 + 2);
    if (v30 && (*(_DWORD *)(v30 + 28) & 0x7F) == 0x3F)
    {
      v35 = (unsigned __int8 *)sub_22EFBC5B4(*((_QWORD *)v9 + 2));
      v36 = sub_22ECB248C(v35);
      if (*v36 == 188)
      {
        v33 = (uint64_t)v36;
        v30 = *((_QWORD *)v36 + 3);
        v34 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
        goto LABEL_73;
      }
      v30 = *((_QWORD *)v9 + 2);
    }
    goto LABEL_75;
  }
  if ((v9[2] & 4) != 0 && *sub_22EFFA6B0(*((unsigned __int8 **)v9 + 2)) == 133)
  {
    v30 = *((_QWORD *)v9 + 3);
LABEL_75:
    v34 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
    goto LABEL_76;
  }
LABEL_84:
  if ((sub_22ECCFF94(a1) & 1) != 0)
    return 0;
  v38 = sub_22EFC7ADC(*(_QWORD *)(*a1 + 216));
  v39 = v38;
  result = v38 ^ 1u;
  if ((v39 & 1) == 0 && a3)
  {
    v40 = (_QWORD *)*a1;
    sub_22F0D5A50((uint64_t)v5);
    sub_22E8FCA40(v40, v41, 0x10AEu, 0, (uint64_t)v48);
    sub_22F0D4E74((uint64_t)v5);
    v47 = v42;
    sub_22E8906A0((uint64_t)v48, &v47);
    v14 = v48;
    goto LABEL_89;
  }
  return result;
}

uint64_t sub_22EC9B8AC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v8 = sub_22EC7ECC4(a1, a2, 0, 0);
  if (!v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    if ((v9 & 7) != 0)
      v10 = 0;
    else
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    v8 = sub_22ECD061C(a1, v10, a3, a4, 0);
  }
  v11 = *(_QWORD *)(v8 + 48);
  v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_9;
    v12 = sub_22F10CF48(v12);
    if (!v12)
      goto LABEL_9;
    v13 = *(_DWORD *)(v12 + 16);
  }
  if ((v13 & 0x100000) != 0)
  {
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v12)
      {
        v19 = *(_DWORD *)(v12 + 16);
        if ((v19 & 0xFE) == 0x28)
          continue;
      }
      v12 = sub_22F10CF48(v12);
      v19 = *(_DWORD *)(v12 + 16);
    }
    while ((v19 & 0x100000) != 0);
  }
  v11 = *(_QWORD *)(v12 + 32);
LABEL_9:
  sub_22EFF605C((uint64_t)a3);
  v15 = v14;
  *(_DWORD *)(v8 + 28) |= 0x800u;
  sub_22EFC9100(v8, *(_QWORD *)(a1 + 88));
  v16 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(v8 + 40);
  v21 = v15;
  sub_22EFC6D6C((uint64_t)&v22, v20);
  v17 = sub_22E3CD3D4(v16 + 2032, 32, 3);
  return sub_22EFF6AE4(v17, v16, 0, 0, 0, v8, 0, (uint64_t)&v20, 0, 0, v11, 1, 0, 0);
}

uint64_t sub_22EC9BA28(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  size_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  BOOL v104;
  unsigned int v105;
  _BOOL4 v106;
  unsigned int v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unsigned int v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char v157;
  char v158;
  int v159;
  int v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  char *v234;
  char *v235;
  unsigned int v236;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unsigned int v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unsigned int v271;
  BOOL v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t *v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  int v282;
  char *v284;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289[2];
  uint64_t **v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t **v299;
  unint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t **v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void **v307;
  uint64_t ***v308;
  uint64_t v309;

  v309 = *MEMORY[0x24BDAC8D0];
  v280 = a1 & 0xFFFFFFFD;
  v15 = (a1 & 0xFFFFFFFD) != 0x58 && *(_DWORD *)(a5[9] + 72) > 0x31u;
  if (a2)
  {
    LOWORD(v296) = 0;
    v297 = 0;
    LODWORD(v298) = 0;
    if ((*(_BYTE *)(a2 + 2) & 1) != 0 || !sub_22F00554C(a2, (uint64_t)&v296, a5[11], 0, 0))
    {
      sub_22F340A90(a8, 1u);
      if (v298 >= 2)
      {
        v21 = &v298;
LABEL_28:
        sub_22EF53BC0(v21);
      }
      return 1;
    }
    v16 = (uint64_t)sub_22E5FA634(&v299, 0xFFFFFFFFFFFFFFFFLL);
    if (v298 >= 2)
      sub_22EF53BC0(&v298);
  }
  else
  {
    v16 = 1;
  }
  if (!a3)
  {
    v17 = 1;
    goto LABEL_11;
  }
  LOWORD(v300) = 0;
  v301 = 0;
  LODWORD(v302) = 0;
  if ((*(_BYTE *)(a3 + 2) & 1) != 0 || !sub_22F00554C(a3, (uint64_t)&v300, a5[11], 0, 0))
  {
    sub_22F340A90(a8, 1u);
    if (v302 >= 2)
    {
      v21 = &v302;
      goto LABEL_28;
    }
    return 1;
  }
  LODWORD(v291) = v304;
  if (v304 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v290, (const llvm::APInt *)&v303);
  else
    v290 = v303;
  BYTE4(v291) = BYTE4(v304);
  if ((unint64_t)sub_22E5FA634(&v290, 0xFFFFFFFFFFFFFFFFLL) < v16)
  {
    sub_22EFF605C(a3);
    sub_22E8FCA40(a5, v35, 0x1114u, 0, (uint64_t)&v296);
    sub_22F0D4E74(a3);
    v289[0] = v36;
    sub_22E8906A0((uint64_t)&v296, v289);
    sub_22E903BEC((unsigned int *)&v296);
    sub_22EFF605C(a2);
    sub_22E8FCA40(a5, v37, 0x156Bu, 0, (uint64_t)&v296);
    sub_22F0D4E74(a2);
    v289[0] = v38;
    sub_22E8906A0((uint64_t)&v296, v289);
    sub_22E903BEC((unsigned int *)&v296);
  }
  v17 = sub_22E5FA634(&v290, 0xFFFFFFFFFFFFFFFFLL);
  if (v291 >= 0x41 && v290)
    MEMORY[0x2348A0E84](v290, 0x1000C8000313F17);
  if (v302 >= 2)
    sub_22EF53BC0(&v302);
LABEL_11:
  if (v17 <= v16)
    v18 = v16;
  else
    v18 = v17;
  v290 = 0;
  v291 = 0;
  v292 = 0;
  v294 = 0;
  v295 = 0;
  v293 = 0;
  v296 = &v298;
  HIDWORD(v297) = 4;
  if (v18 >= 5)
  {
    LODWORD(v297) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = (uint64_t *)v296;
    v20 = 120 * v18;
LABEL_32:
    bzero(v19, v20);
    goto LABEL_33;
  }
  if ((_DWORD)v18)
  {
    v20 = 120 * v18;
    v19 = &v298;
    goto LABEL_32;
  }
LABEL_33:
  LODWORD(v297) = v18;
  v23 = sub_22F3F1924((unsigned __int8 *)a4, v280 != 88);
  LODWORD(v300) = a1;
  v301 = a5;
  v302 = a6;
  v303 = (uint64_t **)__PAIR64__(v16, v18);
  v304 = a2;
  v305 = a3;
  v306 = a7;
  v307 = &v296;
  v308 = &v290;
  v289[0] = (uint64_t)a5;
  v289[1] = (uint64_t)&v290;
  if (!sub_22F0D8EB0(v23, v15, v18, (uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *))sub_22ECD0DE4, (uint64_t)&v300, (void (*)(uint64_t, _DWORD *))sub_22ECD462C, (uint64_t)v289))goto LABEL_150;
  sub_22F340A90(a8, v16);
  if ((sub_22EFC7ADC(a5[27]) & 1) != 0)
  {
    v22 = v16;
    goto LABEL_230;
  }
  v25 = *((_QWORD *)v296 + 1);
  v24 = *((_QWORD *)v296 + 2);
  v26 = sub_22EFFEB40((unsigned __int8 *)v24);
  v27 = sub_22ECFABE8(a5, v26, *(_QWORD *)(v24 + 8), 3, 1);
  v28 = sub_22ECD09AC(32, v27 & 0xFFFFFFFFFFFFFFFELL, a5);
  v29 = sub_22EFFEB40((unsigned __int8 *)v24);
  v30 = sub_22ECFABE8(a5, v29, *(_QWORD *)(v24 + 8), 3, 1);
  v31 = sub_22ECD09AC(64, v30 & 0xFFFFFFFFFFFFFFFELL, a5);
  if (v28 < 2 || (v32 = v31, v31 < 2))
  {
    v22 = v16;
    goto LABEL_230;
  }
  v279 = v16;
  v287 = a5[11];
  v33 = (unint64_t)sub_22EF5CDF0(v287, *(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0)) < 0x20;
  v34 = sub_22ECB1B04(a6);
  if (v34)
    v288 = *(_QWORD *)(v34 + 992);
  else
    v288 = 0;
  v278 = (unint64_t *)a8;
  if (v279 >= 2)
  {
    v39 = 0;
    do
    {
      if (v25 >= 2)
      {
        sub_22EFF605C(v25 & 0xFFFFFFFFFFFFFFFELL);
        v25 = sub_22EB4785C((uint64_t)a5, v288, v40, 19, v25 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((char *)v296 + v39 + 128));
      }
      v41 = *(_QWORD *)((char *)v296 + v39 + 136);
      sub_22EFF605C(v41);
      v43 = v42;
      v44 = (unint64_t)sub_22EF5CDF0(v287, *(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0)) < 0x20;
      if (v28 >= 2)
      {
        v45 = sub_22EFFEB40((unsigned __int8 *)v41);
        v46 = sub_22ECFABE8(a5, v45, *(_QWORD *)(v41 + 8), 3, 1);
        v28 = sub_22EB4785C((uint64_t)a5, v288, v43, 2, v28 & 0xFFFFFFFFFFFFFFFELL, v46 & 0xFFFFFFFFFFFFFFFELL);
      }
      if (v32 >= 2)
      {
        v47 = sub_22EFFEB40((unsigned __int8 *)v41);
        v48 = sub_22ECFABE8(a5, v47, *(_QWORD *)(v41 + 8), 3, 1);
        v32 = sub_22EB4785C((uint64_t)a5, v288, v43, 2, v32 & 0xFFFFFFFFFFFFFFFELL, v48 & 0xFFFFFFFFFFFFFFFELL);
      }
      v33 &= v44;
      v39 += 120;
    }
    while (120 * v279 - 120 != v39);
  }
  if ((*(_WORD *)(a5[9] + 96) & 1) != 0)
    goto LABEL_66;
  if (v28 >= 2
    && sub_22EF5CDF0(v287, *(_QWORD *)(*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)) == 32)
  {
    if ((_DWORD)v279 == 1)
      v49 = 1;
    else
      v49 = v33;
    if ((v49 & 1) != 0)
    {
LABEL_66:
      v32 = v28;
      goto LABEL_67;
    }
    v104 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0));
    if ((v32 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22F00905C(v32 & 0xFFFFFFFFFFFFFFFELL, a5[11], 0, (uint64_t)&v300);
      if ((_BYTE)v302)
      {
        v105 = v301;
        if (v104)
        {
          v106 = v105 - sub_22E99C40C((llvm::APInt *)&v300) + 1 < 0x21;
          if (!(_BYTE)v302)
            goto LABEL_165;
          v105 = v301;
        }
        else
        {
          if (v301 > 0x40)
            v159 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v300);
          else
            v159 = (_DWORD)v301 + __clz(v300) - 64;
          v106 = v105 - v159 < 0x21;
        }
        if (v105 >= 0x41 && v300)
        {
          MEMORY[0x2348A0E84](v300, 0x1000C8000313F17);
          if (!v106)
            goto LABEL_67;
          goto LABEL_66;
        }
LABEL_165:
        if (!v106)
          goto LABEL_67;
        goto LABEL_66;
      }
    }
  }
LABEL_67:
  v50 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v51 = a1 - 36;
  v52 = v50;
  v53 = v50;
  if ((a1 - 36) <= 0x29)
  {
    v52 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v53 = v52;
    if (((1 << v51) & 0x30000000C03) != 0)
    {
      v53 = sub_22EF60A6C(a5[11], 64, 0);
      v52 = sub_22EF60A6C(a5[11], 64, 1);
    }
  }
  if (v32 < 2)
    goto LABEL_229;
  v276 = v53;
  sub_22EFF605C(v32 & 0xFFFFFFFFFFFFFFFELL);
  v55 = v54;
  v56 = sub_22EB25D60((uint64_t)a5, 0, 1);
  v57 = sub_22EB4785C((uint64_t)a5, v288, v55, 6, v32 & 0xFFFFFFFFFFFFFFFELL, v56 & 0xFFFFFFFFFFFFFFFELL);
  if (v57 < 2)
    goto LABEL_229;
  v58 = v57;
  v59 = v57 & 0xFFFFFFFFFFFFFFFELL;
  if ((sub_22F0085E8(v57 & 0xFFFFFFFFFFFFFFFELL, a5[11], 0) & 1) == 0)
  {
    v58 = sub_22ECA02F4((uint64_t)a5, v59, (uint64_t)&v290);
    sub_22EFF605C(v58 & 0xFFFFFFFFFFFFFFFELL);
    v61 = v60;
    v62 = sub_22EB25D60((uint64_t)a5, 0, 1);
    v63 = sub_22EB4785C((uint64_t)a5, v288, v61, 5, v58 & 0xFFFFFFFFFFFFFFFELL, v62 & 0xFFFFFFFFFFFFFFFELL);
    if (v63 < 2)
      goto LABEL_229;
    v32 = v63;
  }
  v263 = v58;
  v64 = *((unsigned int *)v296 + 15);
  v272 = sub_22F421A30(a1);
  v269 = v50;
  v271 = a1 - 36;
  if (v272
    || v51 <= 0x29 && ((1 << v51) & 0x30000000C03) != 0
    || (sub_22F421B08(a1) & 1) != 0
    || (a1 - 96) < 4
    || a1 == 94
    || v280 == 88)
  {
    v65 = sub_22EC822F4(a5, v64, v276, ".omp.lb", 7uLL, 0, 0);
    v268 = sub_22EC8247C((uint64_t)a5, v65, v276, v64, 0);
    sub_22EB25D60((uint64_t)a5, v64, 0);
    sub_22EA28AD8();
    v66 = sub_22EC822F4(a5, v64, v276, ".omp.ub", 7uLL, 0, 0);
    v67 = sub_22EC8247C((uint64_t)a5, v66, v276, v64, 0);
    v68 = v263 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA28AD8();
    v69 = sub_22EF60A6C(a5[11], 32, 1);
    v70 = sub_22EC822F4(a5, v64, v69, ".omp.is_last", 0xCuLL, 0, 0);
    v257 = sub_22EC8247C((uint64_t)a5, v70, v69, v64, 0);
    sub_22EB25D60((uint64_t)a5, v64, 0);
    sub_22EA28AD8();
    v71 = sub_22EC822F4(a5, v64, v52, ".omp.stride", 0xBuLL, 0, 0);
    v259 = sub_22EC8247C((uint64_t)a5, v71, v52, v64, 0);
    sub_22EB25D60((uint64_t)a5, v64, 1);
    sub_22EA28AD8();
    v261 = v67;
    v72 = sub_22EB4785C((uint64_t)a5, v288, v64, 11, v67 & 0xFFFFFFFFFFFFFFFELL, v263 & 0xFFFFFFFFFFFFFFFELL);
    sub_22EFF605C(v263 & 0xFFFFFFFFFFFFFFFELL);
    v74 = sub_22EB2F86C(a5, v73, v64, v72 & 0xFFFFFFFFFFFFFFFELL, v263 & 0xFFFFFFFFFFFFFFFELL, v67 & 0xFFFFFFFFFFFFFFFELL);
    v75 = sub_22EB4785C((uint64_t)a5, v288, v64, 21, v67 & 0xFFFFFFFFFFFFFFFELL, v74 & 0xFFFFFFFFFFFFFFFELL);
    v76 = 0;
    v77 = v75 & 0xFFFFFFFFFFFFFFFELL;
    if ((v75 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v75 & 0xFFFFFFFFFFFFFFFELL);
      v76 = v78;
    }
    v256 = sub_22EBCF22C((uint64_t)a5, v77, v76, 0, 0);
    if (sub_22F421B7C(a1))
    {
      v79 = sub_22EC822F4(a5, v64, v276, ".omp.comb.lb", 0xCuLL, 0, 0);
      v264 = sub_22EC8247C((uint64_t)a5, v79, v276, v64, 0);
      sub_22EB25D60((uint64_t)a5, v64, 0);
      sub_22EA28AD8();
      v80 = sub_22EC822F4(a5, v64, v276, ".omp.comb.ub", 0xCuLL, 0, 0);
      v81 = sub_22EC8247C((uint64_t)a5, v80, v276, v64, 0);
      sub_22EA28AD8();
      v260 = v81;
      v82 = sub_22EB4785C((uint64_t)a5, v288, v64, 11, v81 & 0xFFFFFFFFFFFFFFFELL, v68);
      v83 = sub_22EB2F86C(a5, v64, v64, v82 & 0xFFFFFFFFFFFFFFFELL, v68, v81 & 0xFFFFFFFFFFFFFFFELL);
      v84 = sub_22EB4785C((uint64_t)a5, v288, v64, 21, v81 & 0xFFFFFFFFFFFFFFFELL, v83 & 0xFFFFFFFFFFFFFFFELL);
      v85 = 0;
      v86 = v84 & 0xFFFFFFFFFFFFFFFELL;
      if ((v84 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        sub_22EFF605C(v84 & 0xFFFFFFFFFFFFFFFELL);
        v85 = v87;
      }
      v88 = sub_22EBCF22C((uint64_t)a5, v86, v85, 0, 0);
      v89 = *(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8;
      v90 = *(_QWORD *)(v89 + 112);
      v254 = sub_22EC8247C((uint64_t)a5, *(_QWORD *)(v89 + 104), *(_QWORD *)(*(_QWORD *)(v89 + 104) + 48), v64, 0);
      v258 = sub_22EC8247C((uint64_t)a5, v90, *(_QWORD *)(v90 + 48), v64, 0);
      v91 = v264;
    }
    else
    {
      v88 = 0;
      v258 = 0;
      v254 = 0;
      v260 = 0;
      v91 = 0;
    }
  }
  else
  {
    v88 = 0;
    v258 = 0;
    v259 = 0;
    v254 = 0;
    v260 = 0;
    v261 = 0;
    v91 = 0;
    v256 = 0;
    v257 = 0;
    v268 = 0;
  }
  v92 = sub_22EC822F4(a5, v64, v269, ".omp.iv", 7uLL, 0, 0);
  v93 = sub_22EC8247C((uint64_t)a5, v92, v269, v64, 0);
  v94 = v268;
  if (!v272)
  {
    if (v271 > 0x3F || (v94 = v268, ((1 << v271) & 0xF400030000000C03) == 0))
    {
      v156 = v93;
      v157 = sub_22F421B08(a1);
      v93 = v156;
      v158 = v157;
      v94 = v268;
      if (v280 != 88)
      {
        v94 = v268;
        if ((v158 & 1) == 0)
        {
          v94 = sub_22EB25D60((uint64_t)a5, 0, 0);
          v93 = v156;
        }
      }
    }
  }
  v266 = v93;
  v277 = v93 & 0xFFFFFFFFFFFFFFFELL;
  v95 = sub_22EB4785C((uint64_t)a5, v288, v64, 21, v93 & 0xFFFFFFFFFFFFFFFELL, v94 & 0xFFFFFFFFFFFFFFFELL);
  v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
  if ((v95 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v95 & 0xFFFFFFFFFFFFFFFELL);
    v97 = v98;
  }
  else
  {
    v97 = 0;
  }
  v255 = sub_22EBCF22C((uint64_t)a5, v96, v97, 0, 0);
  v99 = sub_22F421B7C(a1);
  if (v99)
  {
    v100 = v91;
    if (!v272)
    {
      if (v271 > 0x3F || (v100 = v91, ((1 << v271) & 0xF400030000000C03) == 0))
      {
        v161 = sub_22F421B08(a1);
        v100 = v91;
        if ((v161 & 1) == 0)
          v100 = sub_22EB25D60((uint64_t)a5, 0, 0);
      }
    }
    v101 = sub_22EB4785C((uint64_t)a5, v288, v64, 21, v277, v100 & 0xFFFFFFFFFFFFFFFELL);
    v102 = v101 & 0xFFFFFFFFFFFFFFFELL;
    if ((v101 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v101 & 0xFFFFFFFFFFFFFFFELL);
      v103 = v107;
    }
    else
    {
      v103 = 0;
    }
    v253 = sub_22EBCF22C((uint64_t)a5, v102, v103, 0, 0);
  }
  else
  {
    v253 = 0;
  }
  v108 = v277;
  if (sub_22F110D38(*(_QWORD *)(v269 & 0xFFFFFFFFFFFFFFF0)))
  {
    if (!(_DWORD)v297)
    {
LABEL_110:
      sub_22F0D5A50(a4);
      v112 = v111;
      v113 = sub_22EB25D60((uint64_t)a5, 0, 1);
      v270 = v261 & 0xFFFFFFFFFFFFFFFELL;
      v114 = sub_22EB4785C((uint64_t)a5, v288, v112, 5, v261 & 0xFFFFFFFFFFFFFFFELL, v113 & 0xFFFFFFFFFFFFFFFELL);
      v115 = 0;
      v116 = v114 & 0xFFFFFFFFFFFFFFFELL;
      if ((v114 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        sub_22EFF605C(v114 & 0xFFFFFFFFFFFFFFFELL);
        v115 = v117;
      }
      v118 = sub_22EBCF22C((uint64_t)a5, v116, v115, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
      v119 = 1;
      v108 = v277;
      goto LABEL_114;
    }
    v109 = v296;
    v110 = 120 * v297;
    while (*v109)
    {
      v109 += 120;
      v110 -= 120;
      if (!v110)
        goto LABEL_110;
    }
  }
  sub_22F0D5A50(a4);
  v112 = v120;
  v119 = 0;
  v118 = v261 & 0xFFFFFFFFFFFFFFFELL;
  v270 = v261 & 0xFFFFFFFFFFFFFFFELL;
LABEL_114:
  v274 = v119;
  if (v272
    || v271 <= 0x3F && ((1 << v271) & 0xF400030000000C03) != 0
    || (v160 = sub_22F421B08(a1), v119 = v274, v280 == 88)
    || v160)
  {
    if (v119)
      v121 = 10;
    else
      v121 = 12;
    v122 = v112;
    v123 = (uint64_t)a5;
    v124 = v288;
    v125 = v108;
    v126 = v118;
  }
  else
  {
    v126 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v122 = v112;
    v123 = (uint64_t)a5;
    v124 = v288;
    v121 = 10;
    v125 = v108;
  }
  v262 = sub_22EB4785C(v123, v124, v122, v121, v125, v126);
  v265 = v91;
  if (v99)
  {
    v252 = sub_22EB4785C((uint64_t)a5, v288, v112, 10, v108, v32 & 0xFFFFFFFFFFFFFFFELL);
    v127 = v260 & 0xFFFFFFFFFFFFFFFELL;
    if (v274)
    {
      v128 = sub_22EB25D60((uint64_t)a5, 0, 1);
      v129 = sub_22EB4785C((uint64_t)a5, v288, v112, 5, v127, v128 & 0xFFFFFFFFFFFFFFFELL);
      v130 = 0;
      v131 = v129 & 0xFFFFFFFFFFFFFFFELL;
      if ((v129 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        sub_22EFF605C(v129 & 0xFFFFFFFFFFFFFFFELL);
        v130 = v132;
      }
      v127 = sub_22EBCF22C((uint64_t)a5, v131, v130, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
      v133 = 10;
    }
    else
    {
      v133 = 12;
    }
    v134 = v127;
    v108 = v277;
    v251 = sub_22EB4785C((uint64_t)a5, v288, v112, v133, v277, v134);
  }
  else
  {
    v251 = 0;
    v252 = 0;
  }
  sub_22F0D5A50(a4);
  v136 = v135;
  v137 = sub_22EB25D60((uint64_t)a5, v135, 1);
  v138 = sub_22EB4785C((uint64_t)a5, v288, v136, 5, v108, v137 & 0xFFFFFFFFFFFFFFFELL);
  if (v138 < 2)
    goto LABEL_229;
  v139 = sub_22EB4785C((uint64_t)a5, v288, v136, 21, v108, v138 & 0xFFFFFFFFFFFFFFFELL);
  v140 = v139 & 0xFFFFFFFFFFFFFFFELL;
  v246 = v88;
  v249 = v112;
  if ((v139 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v139 & 0xFFFFFFFFFFFFFFFELL);
    v141 = v142;
  }
  else
  {
    v141 = 0;
  }
  v143 = sub_22EBCF22C((uint64_t)a5, v140, v141, 0, 0);
  v22 = 0;
  if (v143 >= 2)
  {
    v144 = v143;
    if (!v272 && (v271 > 0x3F || ((1 << v271) & 0xF400030000000C03) == 0))
    {
      v168 = sub_22F421B08(a1);
      if (v280 != 88 && !v168)
      {
        v245 = v144;
        if (v99)
        {
          v241 = 0;
          v242 = 0;
          v243 = 0;
          v244 = 0;
          v145 = v259 & 0xFFFFFFFFFFFFFFFELL;
LABEL_188:
          sub_22F0D5A50(a4);
          v176 = v175;
          if (v274)
            v177 = 10;
          else
            v177 = 12;
          sub_22EB4785C((uint64_t)a5, v288, v249, v177, v277, v118);
          v178 = v176;
          v179 = sub_22EB4785C((uint64_t)a5, v288, v176, 5, v277, v145);
          v180 = sub_22EB4785C((uint64_t)a5, v288, v176, 21, v277, v179 & 0xFFFFFFFFFFFFFFFELL);
          v181 = v180 & 0xFFFFFFFFFFFFFFFELL;
          if ((v180 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            sub_22EFF605C(v180 & 0xFFFFFFFFFFFFFFFELL);
            v182 = v183;
          }
          else
          {
            v182 = 0;
          }
          v281 = sub_22EBCF22C((uint64_t)a5, v181, v182, 0, 0);
          sub_22F0D5A50(a4);
          LODWORD(v181) = v184;
          v185 = v258 & 0xFFFFFFFFFFFFFFFELL;
          if ((*(_QWORD *)((*(_QWORD *)(v270 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v270 + 8) & 7) == (*(_QWORD *)((*(_QWORD *)((v258 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)((v258 & 0xFFFFFFFFFFFFFFFELL) + 8) & 7))
          {
            v181 = v184;
            v186 = v258 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v187 = sub_22EF579A8(a5[11], *(_QWORD *)(v270 + 8), 0);
            v181 = v181;
            v188 = sub_22E95CFA4(a5, v181, v187, v181, v185);
            if (v188 < 2)
              goto LABEL_229;
            v186 = v188 & 0xFFFFFFFFFFFFFFFELL;
          }
          v189 = sub_22EB4785C((uint64_t)a5, v288, v181, 11, v270, v186);
          v190 = sub_22EB2F86C(a5, v181, v181, v189 & 0xFFFFFFFFFFFFFFFELL, v186, v270);
          v191 = sub_22EB4785C((uint64_t)a5, v288, v178, 21, v270, v190 & 0xFFFFFFFFFFFFFFFELL);
          v192 = v191 & 0xFFFFFFFFFFFFFFFELL;
          if ((v191 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            sub_22EFF605C(v191 & 0xFFFFFFFFFFFFFFFELL);
            v193 = v194;
          }
          else
          {
            v193 = 0;
          }
          v195 = sub_22EBCF22C((uint64_t)a5, v192, v193, 0, 0);
          if (v274)
          {
            v196 = sub_22EB25D60((uint64_t)a5, 0, 1);
            v197 = sub_22EB4785C((uint64_t)a5, v288, v249, 5, v185, v196 & 0xFFFFFFFFFFFFFFFELL);
            v198 = 0;
            v199 = v197 & 0xFFFFFFFFFFFFFFFELL;
            if ((v197 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              sub_22EFF605C(v197 & 0xFFFFFFFFFFFFFFFELL);
              v198 = v200;
            }
            v185 = sub_22EBCF22C((uint64_t)a5, v199, v198, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
          }
          v238 = v195 & 0xFFFFFFFFFFFFFFFELL;
          v239 = v281 & 0xFFFFFFFFFFFFFFFELL;
          v240 = sub_22EB4785C((uint64_t)a5, v288, v249, v177, v277, v185) & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_206;
        }
        v241 = 0;
        v242 = 0;
        v243 = 0;
        v244 = 0;
LABEL_185:
        v238 = 0;
        v239 = 0;
        v240 = 0;
LABEL_206:
        v201 = v278;
        v202 = v279;
        sub_22F24C010((uint64_t)(v278 + 19), v279);
        sub_22F24C010((uint64_t)(v278 + 31), v279);
        sub_22F24C010((uint64_t)(v278 + 37), v279);
        sub_22F24C010((uint64_t)(v278 + 43), v279);
        sub_22F24C010((uint64_t)(v278 + 49), v279);
        sub_22F24C010((uint64_t)(v278 + 55), v279);
        sub_22F24C010((uint64_t)(v278 + 61), v279);
        v203 = v288;
        if (!(_DWORD)v279)
        {
LABEL_207:
          *v201 = v277;
          v201[1] = v263 & 0xFFFFFFFFFFFFFFFELL;
          v201[2] = v32 & 0xFFFFFFFFFFFFFFFELL;
          v201[3] = sub_22EBCF22C((uint64_t)a5, 0, 0, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
          v201[4] = v25 & 0xFFFFFFFFFFFFFFFELL;
          v201[67] = sub_22ECA03E4(v287, (uint64_t)&v290);
          v201[5] = v262 & 0xFFFFFFFFFFFFFFFELL;
          v201[6] = v255 & 0xFFFFFFFFFFFFFFFELL;
          v201[9] = v268 & 0xFFFFFFFFFFFFFFFELL;
          v201[10] = v270;
          v201[7] = v245 & 0xFFFFFFFFFFFFFFFELL;
          v201[8] = v257 & 0xFFFFFFFFFFFFFFFELL;
          v201[11] = v259 & 0xFFFFFFFFFFFFFFFELL;
          v201[12] = v256 & 0xFFFFFFFFFFFFFFFELL;
          v201[13] = v244 & 0xFFFFFFFFFFFFFFFELL;
          v201[14] = v243 & 0xFFFFFFFFFFFFFFFELL;
          v201[15] = v254 & 0xFFFFFFFFFFFFFFFELL;
          v201[16] = v258 & 0xFFFFFFFFFFFFFFFELL;
          v201[17] = v239;
          v201[18] = v238;
          v201[68] = v265 & 0xFFFFFFFFFFFFFFFELL;
          v201[69] = v260 & 0xFFFFFFFFFFFFFFFELL;
          v201[70] = v246 & 0xFFFFFFFFFFFFFFFELL;
          v201[71] = v253 & 0xFFFFFFFFFFFFFFFELL;
          v201[72] = v251 & 0xFFFFFFFFFFFFFFFELL;
          v201[73] = v242 & 0xFFFFFFFFFFFFFFFELL;
          v201[74] = v241 & 0xFFFFFFFFFFFFFFFELL;
          v201[75] = v252 & 0xFFFFFFFFFFFFFFFELL;
          v22 = v279;
          v201[76] = v240;
          goto LABEL_230;
        }
        v204 = 0;
        v205 = v279 - 1;
        v206 = 136;
        while (1)
        {
          v286 = v296;
          v207 = *((_DWORD *)v296 + 30 * v204 + 19);
          v208 = sub_22EB25D60((uint64_t)a5, 0, 1);
          v273 = v204 + 1;
          v275 = v206;
          v282 = v205;
          if (v204 + 1 >= v202)
          {
            if (v266 < 2)
              break;
            v214 = v266 & 0xFFFFFFFFFFFFFFFELL;
            v211 = v266 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v209 = v208 & 0xFFFFFFFFFFFFFFFELL;
            v210 = v205;
            do
            {
              v209 = sub_22EB4785C((uint64_t)a5, v203, v207, 2, v209 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((char *)v296 + v206));
              v206 += 120;
              --v210;
            }
            while (v210);
            v211 = v266 & 0xFFFFFFFFFFFFFFFELL;
            v212 = v209 & 0xFFFFFFFFFFFFFFFELL;
            v213 = sub_22EB4785C((uint64_t)a5, v203, v207, 3, v266 & 0xFFFFFFFFFFFFFFFELL, v209 & 0xFFFFFFFFFFFFFFFELL);
            if (v213 <= 1)
              break;
            v266 = v213;
            v214 = sub_22EB4785C((uint64_t)a5, v203, v207, 2, v213 & 0xFFFFFFFFFFFFFFFELL, v212) & 0xFFFFFFFFFFFFFFFELL;
          }
          v215 = sub_22EB4785C((uint64_t)a5, v203, v207, 6, v211, v214);
          v216 = (char *)&v286[15 * v204];
          v217 = *((_QWORD *)v216 + 3);
          v250 = v216 + 24;
          v218 = *(_QWORD *)(v217 + 8);
          v219 = *(_QWORD *)(v217 + 16);
          sub_22EFF605C(v217);
          v221 = sub_22EC8247C((uint64_t)a5, v219, v218, v220, 1);
          v223 = *((_QWORD *)v216 + 5);
          v222 = v216 + 40;
          v284 = v222 + 64;
          v224 = v223 & 0xFFFFFFFFFFFFFFFELL;
          if (!v222[64])
            v224 = sub_22ECA02F4((uint64_t)a5, v224, (uint64_t)&v290);
          if (v224 < 2)
            break;
          v225 = v224 & 0xFFFFFFFFFFFFFFFELL;
          v248 = v215;
          if ((*(_QWORD *)((*(_QWORD *)((v224 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)((v224 & 0xFFFFFFFFFFFFFFFELL) + 8) & 7) != (*(_QWORD *)((*(_QWORD *)((v221 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)((v221 & 0xFFFFFFFFFFFFFFFELL) + 8) & 7))
          {
            v226 = sub_22ECFABE8(a5, (unsigned __int8 *)(v224 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)((v221 & 0xFFFFFFFFFFFFFFFELL) + 8), 3, 1);
            if (v226 < 2)
              break;
            v225 = v226 & 0xFFFFFFFFFFFFFFFELL;
          }
          v247 = sub_22EB4785C((uint64_t)a5, v203, v207, 21, v221 & 0xFFFFFFFFFFFFFFFELL, v225);
          if (v247 < 2)
            break;
          v227 = v203;
          v228 = (char *)&v286[15 * v204];
          v230 = *((_QWORD *)v228 + 6);
          v229 = v228 + 48;
          v267 = sub_22ECD0A38((uint64_t)a5, v227, v207, v221, *(_QWORD *)v222, v266, v230, v229[8], *v284, (uint64_t)&v290);
          if (v267 < 2)
            break;
          v231 = *(_QWORD *)v229;
          v232 = v229[8];
          v203 = v288;
          v233 = sub_22ECD0A38((uint64_t)a5, v288, v207, v221, *(_QWORD *)v222, v286[15 * v204 + 2], v231, v232, *v284, (uint64_t)&v290);
          if (v233 < 2)
            break;
          v201 = v278;
          *(_QWORD *)(v278[19] + 8 * v204) = *v250;
          v234 = (char *)&v286[15 * v204];
          *(_QWORD *)(v278[25] + 8 * v204) = *((_QWORD *)v234 + 4);
          *(_QWORD *)(v278[31] + 8 * v204) = v247 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)(v278[37] + 8 * v204) = v267 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)(v278[43] + 8 * v204) = v233 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)(v278[49] + 8 * v204) = 0;
          *(_QWORD *)(v278[55] + 8 * v204) = 0;
          *(_QWORD *)(v278[61] + 8 * v204) = 0;
          v202 = v279;
          if (*v284 | v234[105])
          {
            v235 = (char *)&v286[15 * v204];
            v236 = v279 + ~*((_DWORD *)v235 + 27);
            *(_QWORD *)(v278[49] + 8 * v204) = *(_QWORD *)(v278[19] + 8 * v236);
            *(_QWORD *)(v278[55] + 8 * v204) = *(_QWORD *)(v278[31] + 8 * v236);
            *(_QWORD *)(v278[61] + 8 * v204) = *((_QWORD *)v235 + 14);
          }
          v205 = v282 - 1;
          v206 = v275 + 120;
          ++v204;
          v266 = v248;
          if (v273 == v279)
            goto LABEL_207;
        }
LABEL_229:
        v22 = 0;
        goto LABEL_230;
      }
    }
    v145 = v259 & 0xFFFFFFFFFFFFFFFELL;
    v146 = sub_22EB4785C((uint64_t)a5, v288, v136, 5, v268 & 0xFFFFFFFFFFFFFFFELL, v259 & 0xFFFFFFFFFFFFFFFELL);
    if (v146 < 2)
      goto LABEL_229;
    v147 = sub_22EB4785C((uint64_t)a5, v288, v136, 21, v268 & 0xFFFFFFFFFFFFFFFELL, v146 & 0xFFFFFFFFFFFFFFFELL);
    v148 = v147 & 0xFFFFFFFFFFFFFFFELL;
    if ((v147 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v147 & 0xFFFFFFFFFFFFFFFELL);
      v149 = v150;
    }
    else
    {
      v149 = 0;
    }
    v151 = sub_22EBCF22C((uint64_t)a5, v148, v149, 0, 0);
    v22 = 0;
    if (v151 >= 2)
    {
      v244 = v151;
      v245 = v144;
      v152 = sub_22EB4785C((uint64_t)a5, v288, v136, 5, v270, v145);
      if (v152 >= 2)
      {
        v153 = sub_22EB4785C((uint64_t)a5, v288, v136, 21, v270, v152 & 0xFFFFFFFFFFFFFFFELL);
        v154 = v153 & 0xFFFFFFFFFFFFFFFELL;
        if ((v153 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22EFF605C(v153 & 0xFFFFFFFFFFFFFFFELL);
          v155 = v162;
        }
        else
        {
          v155 = 0;
        }
        v163 = sub_22EBCF22C((uint64_t)a5, v154, v155, 0, 0);
        v22 = 0;
        if (v163 >= 2)
        {
          v243 = v163;
          if (!v99)
          {
            v241 = 0;
            v242 = 0;
            goto LABEL_185;
          }
          v164 = sub_22EB4785C((uint64_t)a5, v288, v136, 5, v265 & 0xFFFFFFFFFFFFFFFELL, v145);
          v165 = sub_22EB4785C((uint64_t)a5, v288, v136, 21, v265 & 0xFFFFFFFFFFFFFFFELL, v164 & 0xFFFFFFFFFFFFFFFELL);
          v166 = v165 & 0xFFFFFFFFFFFFFFFELL;
          if ((v165 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            sub_22EFF605C(v165 & 0xFFFFFFFFFFFFFFFELL);
            v167 = v169;
          }
          else
          {
            v167 = 0;
          }
          v22 = 0;
          v242 = sub_22EBCF22C((uint64_t)a5, v166, v167, 0, 0);
          if (v242 >= 2)
          {
            v170 = sub_22EB4785C((uint64_t)a5, v288, v136, 5, v260 & 0xFFFFFFFFFFFFFFFELL, v145);
            if (v170 < 2)
              goto LABEL_229;
            v171 = sub_22EB4785C((uint64_t)a5, v288, v136, 21, v260 & 0xFFFFFFFFFFFFFFFELL, v170 & 0xFFFFFFFFFFFFFFFELL);
            v172 = v171 & 0xFFFFFFFFFFFFFFFELL;
            if ((v171 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              sub_22EFF605C(v171 & 0xFFFFFFFFFFFFFFFELL);
              v173 = v174;
            }
            else
            {
              v173 = 0;
            }
            v22 = 0;
            v241 = sub_22EBCF22C((uint64_t)a5, v172, v173, 0, 0);
            if (v241 > 1)
              goto LABEL_188;
          }
        }
        goto LABEL_230;
      }
LABEL_150:
      v22 = 0;
    }
  }
LABEL_230:
  if (v296 != &v298)
    free(v296);
  sub_22F244D40((uint64_t)&v290);
  return v22;
}

uint64_t sub_22EC9D66C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  char v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  _BYTE *v53;
  unsigned __int8 **v55;
  uint64_t v56;
  unint64_t v58;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t v64;
  unint64_t *v65;
  unsigned int v66[24];
  unsigned __int8 *v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  void *__src;
  uint64_t v73;
  _BYTE v74[64];
  _QWORD *v75;
  uint64_t v76;
  _BYTE v77[64];
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[10];

  v6 = a1;
  v80[8] = *MEMORY[0x24BDAC8D0];
  v78 = v80;
  v79 = 0x800000000;
  v75 = v77;
  v76 = 0x800000000;
  __src = v74;
  v73 = 0x800000000;
  v7 = (unsigned __int8 **)(a1 + 64);
  v8 = *(unsigned int *)(a1 + 16);
  v9 = (unint64_t *)(a1
                          + 64
                          + 8 * v8
                          + 8 * v8
                          + 8 * v8
                          + 8 * v8
                          + 8 * v8);
  v58 = *v9;
  if (*v9)
  {
    v10 = v9[1];
    if (v10)
      v58 = *(_QWORD *)(v10 + 16);
  }
  else
  {
    v58 = sub_22EB25D60((uint64_t)a3, 0, 1) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned int *)(v6 + 16);
  }
  if (!(_DWORD)v8)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_60;
  }
  v12 = 0;
  v13 = (unint64_t *)&v7[v8];
  v55 = v7;
  v56 = v6;
  v62 = *(_DWORD *)(v6 + 48);
  v14 = &v13[v8];
  v15 = 8 * v8;
  do
  {
    v16 = *v7;
    v69 = 0;
    v67 = v16;
    v68 = 0;
    v17 = sub_22EC82530(a3, &v67, &v69, &v68, 0);
    if ((v18 & 1) == 0 && v17)
    {
      v21 = sub_22EC80308(a5, v17);
      v22 = sub_22ECB1B04(a5);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 + 960);
        if (!sub_22F421B08(v23))
          goto LABEL_21;
      }
      else
      {
        v23 = 89;
        if ((sub_22F421B08(89) & 1) == 0)
          goto LABEL_21;
      }
      if (!sub_22F421AC0(v23) || v21)
      {
LABEL_21:
        v24 = v13;
        v64 = *v14;
        v65 = v14;
        v25 = v67;
        v26 = *((_QWORD *)v67 + 2);
        if (v62 == 2)
        {
          v27 = sub_22EFBC5B4(v26);
        }
        else
        {
          v28 = *((_QWORD *)v67 + 1);
          v29 = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0);
          v61 = v21;
          if ((*(_BYTE *)(v29 + 8) & 0xF) != 0)
            v29 = (unint64_t)sub_22F10D2BC(v28);
          v60 = v29 & 0xFFFFFFFFFFFFFFF0;
          sub_22EFF605C((uint64_t)v25);
          v31 = v30;
          *(_DWORD *)(v26 + 28) |= 0x800u;
          sub_22EFC9100(v26, a3[11]);
          v32 = a3[11];
          *(_QWORD *)&v70 = *(_QWORD *)(v26 + 40);
          DWORD2(v70) = v31;
          sub_22EFC6D6C((uint64_t)&v71, v70);
          v27 = sub_22E3CD3D4(v32 + 2032, 32, 3);
          sub_22EFF6AE4(v27, v32, 0, 0, 0, v26, 1, (uint64_t)&v70, 0, 0, v60, 1, 0, 0);
          v21 = v61;
        }
        v33 = (uint64_t *)v24;
        if (v21)
        {
          v34 = *v24;
        }
        else
        {
          sub_22EFF605C((uint64_t)v16);
          v34 = sub_22ECD0A38((uint64_t)a3, a4, v35, *v24, v64, a2, v58, 0, 0, 0);
        }
        if ((v25[2] & 4) != 0)
        {
          v70 = *((_OWORD *)v25 + 2);
          v36 = sub_22F0AB0EC((unint64_t *)&v70);
        }
        else
        {
          v36 = *((_DWORD *)v25 + 1);
        }
        v37 = sub_22EBCF22C((uint64_t)a3, v34 & 0xFFFFFFFFFFFFFFFELL, v36, 0, 0);
        if (v21)
        {
          v38 = *v33;
        }
        else
        {
          sub_22EFF605C((uint64_t)v16);
          v40 = v39;
          v41 = sub_22EB1A358(a3, *v33, 0);
          v38 = sub_22EB4785C((uint64_t)a3, a4, v40, 21, v27, v41 & 0xFFFFFFFFFFFFFFFELL);
        }
        if ((v25[2] & 4) != 0)
        {
          v70 = *((_OWORD *)v25 + 2);
          v42 = sub_22F0AB0EC((unint64_t *)&v70);
        }
        else
        {
          v42 = *((_DWORD *)v25 + 1);
        }
        v43 = sub_22EBCF22C((uint64_t)a3, v38 & 0xFFFFFFFFFFFFFFFELL, v42, 0, 0);
        if (v37 < 2 || (v44 = v43, v43 <= 1))
        {
          v48 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v48 = v79;
          }
          v78[v48] = 0;
          LODWORD(v79) = v79 + 1;
          v49 = v76;
          if (v76 >= (unint64_t)HIDWORD(v76))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v49 = v76;
          }
          v75[v49] = 0;
          LODWORD(v76) = v76 + 1;
          v50 = v73;
          if (v73 >= (unint64_t)HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v50 = v73;
          }
          *((_QWORD *)__src + v50) = 0;
          v12 = 1;
LABEL_53:
          LODWORD(v73) = v73 + 1;
        }
        else
        {
          v45 = v79;
          if (v79 >= (unint64_t)HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v45 = v79;
          }
          v78[v45] = v37 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v79) = v79 + 1;
          v46 = v76;
          if (v76 >= (unint64_t)HIDWORD(v76))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v46 = v76;
          }
          v75[v46] = v44 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v76) = v76 + 1;
          if (!v21)
          {
            v47 = v73;
            if (v73 >= (unint64_t)HIDWORD(v73))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v47 = v73;
            }
            *((_QWORD *)__src + v47) = v25;
            goto LABEL_53;
          }
        }
        v14 = v65 + 1;
        v13 = (unint64_t *)(v33 + 1);
        goto LABEL_15;
      }
      sub_22E8FCA40(a3, v69, 0x10A4u, 0, (uint64_t)v66);
      sub_22E903BEC(v66);
    }
    v19 = v79;
    if (v79 >= (unint64_t)HIDWORD(v79))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v79;
    }
    v78[v19] = 0;
    LODWORD(v79) = v79 + 1;
    v20 = v76;
    if (v76 >= (unint64_t)HIDWORD(v76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = v76;
    }
    v75[v20] = 0;
    LODWORD(v76) = v76 + 1;
    v12 = 1;
LABEL_15:
    ++v7;
    v15 -= 8;
  }
  while (v15);
  v6 = v56;
  v11 = *(_DWORD *)(v56 + 16);
  v7 = v55;
LABEL_60:
  v51 = (&(&(&(&v7[v11])[v11])[v11])[v11])[v11];
  v52 = v73;
  if (v51)
  {
    if (v73 >= HIDWORD(v73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v52 = v73;
    }
    *((_QWORD *)__src + v52) = v51;
    v52 = v73 + 1;
    LODWORD(v73) = v73 + 1;
    v11 = *(_DWORD *)(v6 + 16);
  }
  sub_22F2A3804((uint64_t)&__src, (v11 + 1) - (unint64_t)v52, 0);
  if ((_DWORD)v79)
    memmove(&(&(&v7[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)], v78, 8 * v79);
  if ((_DWORD)v76)
    memmove(&(&(&(&v7[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)], v75, 8 * v76);
  v53 = __src;
  if ((_DWORD)v73)
    memmove(&(&(&(&(&v7[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16)])[*(unsigned int *)(v6 + 16) + 2], __src, 8 * v73);
  if (v53 != v74)
    free(v53);
  if (v75 != (_QWORD *)v77)
    free(v75);
  if (v78 != v80)
    free(v78);
  return v12 & 1;
}

BOOL sub_22EC9DDAC(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  _DWORD *v13;
  _DWORD *v14;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25[24];
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 8 * a3 - 8;
  do
  {
    v8 = *a2++;
    v7 = v8;
    v9 = *(_DWORD *)(v8 + 8);
    if (v9 == 75)
      v10 = v7;
    else
      v10 = v5;
    if (v9 == 70)
      v4 = v7;
    else
      v5 = v10;
    if (v5)
      v11 = v4 == 0;
    else
      v11 = 1;
    v12 = !v11 || v6 == 0;
    v6 -= 8;
  }
  while (!v12);
  if (!v5)
    return 0;
  if (!v4)
    return 0;
  v13 = *(_DWORD **)(v5 + 16);
  if ((*v13 & 0x1E000) != 0)
    return 0;
  v14 = *(_DWORD **)(v4 + 16);
  if ((*v14 & 0x1E000) != 0)
    return 0;
  v38 = 0;
  v39 = 0;
  LODWORD(v40) = 0;
  v32 = 0;
  v33 = 0;
  LODWORD(v34) = 0;
  sub_22F00554C((uint64_t)v13, (uint64_t)&v38, a1[11], 0, 0);
  sub_22F00554C((uint64_t)v14, (uint64_t)&v32, a1[11], 0, 0);
  v30 = v42;
  if (v42 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, (const llvm::APInt *)&v41);
  else
    v29 = v41;
  v16 = v43;
  v31 = v43;
  v27 = v36;
  if (v36 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, (const llvm::APInt *)&v35);
    v16 = v31;
  }
  else
  {
    v26 = v35;
  }
  v28 = v37;
  if (v16)
    v17 = llvm::APInt::compare((llvm::APInt *)&v29, (const llvm::APInt *)&v26);
  else
    v17 = llvm::APInt::compareSigned((llvm::APInt *)&v29, (const llvm::APInt *)&v26);
  v18 = v17;
  if (v17 >= 1)
  {
    sub_22EFF605C((uint64_t)v13);
    sub_22E8FCA40(a1, v19, 0x1115u, 0, (uint64_t)v25);
    sub_22F0D4E74((uint64_t)v13);
    v24 = v20;
    v21 = sub_22E8906A0((uint64_t)v25, &v24);
    sub_22F0D4E74((uint64_t)v14);
    v23 = v22;
    sub_22E8906A0(v21, &v23);
    sub_22E903BEC(v25);
  }
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  if (v30 >= 0x41 && v29)
    MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
  if (v34 >= 2)
    sub_22EF53BC0(&v34);
  if (v40 >= 2)
    sub_22EF53BC0(&v40);
  return v18 > 0;
}

unsigned __int8 *sub_22EC9E044(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;

  v1 = sub_22EFFBBCC(a1);
  v2 = sub_22EFFED0C(v1);
  if ((*v2 + 113) < 0xFBu)
    return 0;
  v3 = v2;
  v4 = sub_22EFFA604(*(unsigned __int8 **)&v2[v2[3]]);
  if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9)
    return 0;
  return v3;
}

uint64_t sub_22EC9E0A8(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  unsigned int v19[24];
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;

  if (a3)
  {
    v6 = a2;
    v8 = 0;
    v9 = &a2[a3];
    do
    {
      v10 = *v6;
      if (*v6)
      {
        if (*(_DWORD *)(v10 + 8) == 43)
        {
          v11 = *(unsigned int *)(v10 + 16);
          if ((_DWORD)v11)
          {
            v12 = (unsigned __int8 **)(v10 + 64);
            v13 = 8 * v11;
            do
            {
              v14 = *v12;
              v22 = 0;
              v20 = v14;
              v21 = 0;
              v15 = sub_22EC82530(a1, &v20, &v22, &v21, 0);
              if (v15 && !sub_22EC80308(a5, v15))
              {
                sub_22E8FCA40(a1, v22, 0x10A3u, 0, (uint64_t)v19);
                v18[0] = llvm::omp::getOpenMPDirectiveName();
                v18[1] = v16;
                sub_22F2F2210((uint64_t)v19, (uint64_t)v18);
                sub_22E903BEC(v19);
                v8 = 1;
              }
              ++v12;
              v13 -= 8;
            }
            while (v13);
          }
        }
      }
      ++v6;
    }
    while (v6 != v9);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_22EC9E1C0(_QWORD *a1, int **a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int **v7;
  int *v9;
  char v10;
  int **v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t OpenMPClauseName;
  uint64_t v24;
  unsigned int v25[24];

  if (a3)
  {
    v7 = a2;
    v9 = 0;
    v10 = 0;
    v11 = &a2[a3];
    v12 = 4 * a5;
    v13 = &a4[a5];
    do
    {
      v14 = (*v7)[2];
      if (a5)
      {
        v15 = v12;
        v16 = a4;
        while (*v16 != v14)
        {
          ++v16;
          v15 -= 4;
          if (!v15)
          {
            v16 = v13;
            break;
          }
        }
      }
      else
      {
        v16 = a4;
      }
      if (a5 != v16 - a4)
      {
        if (v9)
        {
          if (v9[2] != v14)
          {
            sub_22E8FCA40(a1, **v7, 0x1053u, 0, (uint64_t)v25);
            OpenMPClauseName = llvm::omp::getOpenMPClauseName();
            v24 = v17;
            v18 = sub_22F2F2210((uint64_t)v25, (uint64_t)&OpenMPClauseName);
            v22[0] = llvm::omp::getOpenMPClauseName();
            v22[1] = v19;
            sub_22F2F2210(v18, (uint64_t)v22);
            sub_22E903BEC(v25);
            sub_22E8FCA40(a1, *v9, 0x1711u, 0, (uint64_t)v25);
            OpenMPClauseName = llvm::omp::getOpenMPClauseName();
            v24 = v20;
            sub_22F2F2210((uint64_t)v25, (uint64_t)&OpenMPClauseName);
            sub_22E903BEC(v25);
            v10 = 1;
          }
        }
        else
        {
          v9 = *v7;
        }
      }
      ++v7;
    }
    while (v7 != v11);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_22EC9E32C(_QWORD **a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  unsigned __int8 **v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t (**v81)();
  void **v82;
  char v83;
  uint64_t v84;
  void *v85[2];
  _BYTE v86[128];
  void *v87[2];
  _BYTE v88[128];
  void *v89[2];
  _QWORD v90[18];

  v90[16] = *MEMORY[0x24BDAC8D0];
  v77 = 8;
  v75 = 0;
  v76 = 0;
  if ((*a2 + 21) >= 0x7Bu)
  {
    v14 = sub_22EFFA6B0(a2);
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(_DWORD *)(v15 + 16);
    if (v15)
      v17 = v16 == 11;
    else
      v17 = 0;
    if (v17)
    {
      if (((v16 >> 19) & 0x1FF) - 166 < 0x35)
        goto LABEL_26;
    }
    else if (v15 && v16 == 44)
    {
      v18 = sub_22F114198(*(_QWORD *)(v15 + 24));
      if ((*(_BYTE *)(v18 + 74) & 1) != 0 || *(_QWORD *)(v18 + 128) > 7uLL)
        goto LABEL_26;
    }
    else
    {
      v19 = v16 > 0x27u;
      v20 = (1 << v16) & 0x8180001600;
      if (!v19 && v20 != 0)
        goto LABEL_26;
    }
    if ((v14[1] & 0x40) == 0)
    {
      v9 = 3;
      v77 = 3;
      sub_22F0D5A50((uint64_t)v14);
      LODWORD(v8) = v7;
      goto LABEL_3;
    }
LABEL_26:
    v22 = sub_22EFFA6B0(v14);
    v23 = *v22;
    if (v23 == 113)
    {
      v24 = (*(_DWORD *)v22 >> 18) & 0x3F;
      if (v24 <= 0x1C)
        v25 = -20;
      else
        v25 = -13;
      *((_DWORD *)a1 + 11) = v25 + v24;
      *((_DWORD *)a1 + 12) = *((_DWORD *)v22 + 1);
      a1[3] = (_QWORD *)*((_QWORD *)v22 + 3);
      v26 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
      if (v26)
      {
        while (1)
        {
          v27 = v26;
          v28 = *v26;
          if (v28 > 213)
          {
            if (v28 == 233)
            {
              if ((*(_DWORD *)v27 & 0x7C0000) != 0x300000)
                goto LABEL_60;
              v30 = (unsigned __int8 **)(v27 + 16);
            }
            else
            {
              if (v28 != 214)
                goto LABEL_60;
              v30 = (unsigned __int8 **)(v27 + 24);
            }
          }
          else if (v28 == 155)
          {
            if ((**((_DWORD **)v27 + 2) & 0x18000) != 0)
              goto LABEL_60;
            if (v27[48])
              v30 = (unsigned __int8 **)(v27 + 24);
            else
              v30 = (unsigned __int8 **)(v27 + 32);
          }
          else
          {
            if (v28 != 176)
              goto LABEL_60;
            v29 = *((unsigned int *)v27 + 5);
            if ((_DWORD)v29 == -1)
              goto LABEL_60;
            v30 = (unsigned __int8 **)&v27[8 * v29 + 40];
          }
          v26 = *v30;
          if (v26 == v27)
            goto LABEL_60;
        }
      }
      v27 = 0;
LABEL_60:
      a1[2] = v27;
LABEL_61:
      v11 = 0;
      *((_BYTE *)a1 + 40) = 1;
LABEL_62:
      v9 = 8;
      goto LABEL_63;
    }
    if ((v23 & 0xFE) != 0x70)
    {
      if (v23 == 233)
      {
        if ((*(_DWORD *)v22 & 0x700000) != 0)
        {
          v9 = 2;
          v77 = 2;
          v8 = *((unsigned int *)v22 + 1);
          sub_22F0D4E74((uint64_t)v22);
          v76 = v47;
          v10 = v8 | (v8 << 32);
          goto LABEL_4;
        }
        *((_BYTE *)a1 + 52) = (*(_DWORD *)v22 & 0x780000) == 0;
        if ((*(_DWORD *)v22 & 0x740000) != 0)
          v63 = 6;
        else
          v63 = 5;
        *((_DWORD *)a1 + 11) = v63;
        v64 = *((_DWORD *)v22 + 1);
        *((_DWORD *)a1 + 12) = v64;
        v65 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
        if (v65)
        {
          while (1)
          {
            v66 = v65;
            v67 = *v65;
            if (v67 > 213)
            {
              if (v67 == 233)
              {
                if ((*(_DWORD *)v66 & 0x7C0000) != 0x300000)
                  goto LABEL_102;
                v69 = (unsigned __int8 **)(v66 + 16);
              }
              else
              {
                if (v67 != 214)
                  goto LABEL_102;
                v69 = (unsigned __int8 **)(v66 + 24);
              }
            }
            else if (v67 == 155)
            {
              if ((**((_DWORD **)v66 + 2) & 0x18000) != 0)
                goto LABEL_102;
              if (v66[48])
                v69 = (unsigned __int8 **)(v66 + 24);
              else
                v69 = (unsigned __int8 **)(v66 + 32);
            }
            else
            {
              if (v67 != 176)
                goto LABEL_102;
              v68 = *((unsigned int *)v66 + 5);
              if ((_DWORD)v68 == -1)
                goto LABEL_102;
              v69 = (unsigned __int8 **)&v66[8 * v68 + 40];
            }
            v65 = *v69;
            if (v65 == v66)
              goto LABEL_102;
          }
        }
        v66 = 0;
LABEL_102:
        a1[2] = v66;
        a1[3] = (_QWORD *)(sub_22EB25D60((uint64_t)*a1, v64, 1) & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_61;
      }
      if ((v14[1] & 0x40) == 0)
      {
        v9 = 1;
        v77 = 1;
        sub_22EFF605C((uint64_t)v14);
        LODWORD(v8) = v59;
        sub_22F0D4E74((uint64_t)v14);
        v75 = v60;
        v76 = v60;
        goto LABEL_5;
      }
LABEL_117:
      v11 = 0;
      goto LABEL_62;
    }
    v80 = 8;
    v78 = 0;
    v79 = 0;
    if ((*(_DWORD *)v22 & 0xFC0000) == 0x540000)
    {
      v31 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
      a1[2] = v31;
      v32 = (unsigned __int8 *)*((_QWORD *)v22 + 3);
      v33 = sub_22EFFA6B0(v32);
      if ((*v33 & 0xFE) == 0x70)
      {
        v34 = (uint64_t)v33;
        v35 = (*(_DWORD *)v33 >> 18) & 0x3F;
        if (v35 <= 0x12 && ((1 << ((*(_DWORD *)v33 >> 18) & 0x3F)) & 0x701FC) != 0)
        {
          *((_DWORD *)a1 + 11) = v35;
          *((_DWORD *)a1 + 12) = *((_DWORD *)v33 + 1);
          v38 = (unsigned __int8 *)*((_QWORD *)v33 + 2);
          v37 = (unsigned __int8 *)*((_QWORD *)v33 + 3);
          v89[0] = v90;
          v89[1] = (void *)0x2000000000;
          v87[0] = v88;
          v87[1] = (void *)0x2000000000;
          v85[0] = v86;
          v85[1] = (void *)0x2000000000;
          v39 = sub_22EFFA6B0(v31);
          v40 = (*a1)[11];
          v83 = 1;
          v81 = &off_24FAC6E70;
          v82 = v89;
          v84 = v40;
          sub_22F0E9FEC(&v81, v39);
          v41 = sub_22EFFA6B0(v38);
          v42 = (*a1)[11];
          v83 = 1;
          v81 = &off_24FAC6E70;
          v82 = v87;
          v84 = v42;
          sub_22F0E9FEC(&v81, v41);
          v43 = sub_22EFFA6B0(v37);
          v44 = (*a1)[11];
          v83 = 1;
          v81 = &off_24FAC6E70;
          v82 = v85;
          v84 = v44;
          sub_22F0E9FEC(&v81, v43);
          if (llvm::FoldingSetNodeID::operator==())
          {
            LODWORD(v45) = 0;
            LODWORD(v46) = 0;
            a1[3] = v37;
            *((_BYTE *)a1 + 40) = 1;
          }
          else
          {
            if (!llvm::FoldingSetNodeID::operator==())
            {
              LODWORD(v46) = *(_DWORD *)(v34 + 4);
              sub_22F0D4E74(v34);
              v79 = v70;
              v71 = (uint64_t)a1[2];
              sub_22EFF605C(v71);
              LODWORD(v45) = v72;
              sub_22F0D4E74(v71);
              v78 = v73;
              v58 = 7;
              v80 = 7;
              goto LABEL_104;
            }
            LODWORD(v45) = 0;
            LODWORD(v46) = 0;
            a1[3] = v38;
            *((_BYTE *)a1 + 40) = 0;
          }
          v58 = 8;
LABEL_104:
          if (v85[0] != v86)
            free(v85[0]);
          if (v87[0] != v88)
            free(v87[0]);
          if (v89[0] != v90)
            free(v89[0]);
          goto LABEL_110;
        }
        v45 = *((unsigned int *)v33 + 1);
        sub_22F0D4E74((uint64_t)v33);
        v78 = v45 | (v45 << 32);
        v79 = v74;
        v58 = 6;
      }
      else
      {
        sub_22EFF605C((uint64_t)v32);
        LODWORD(v45) = v61;
        sub_22F0D4E74((uint64_t)v32);
        v78 = v62;
        v79 = v62;
        v58 = 5;
      }
      v80 = v58;
      LODWORD(v46) = v45;
    }
    else
    {
      v46 = *((unsigned int *)v22 + 1);
      sub_22F0D4E74((uint64_t)v22);
      v78 = v46 | (v46 << 32);
      v79 = v57;
      v58 = 4;
      v80 = 4;
      LODWORD(v45) = v46;
    }
LABEL_110:
    if (a4 && a3 && v58 != 8)
    {
      sub_22E8FCA40(*a1, v46, a3, 0, (uint64_t)v89);
      sub_22E8906A0((uint64_t)v89, &v79);
      sub_22E903BEC((unsigned int *)v89);
      sub_22E8FCA40(*a1, v45, a4, 0, (uint64_t)v89);
      v12 = sub_22E8900C4((uint64_t)v89, &v80);
      v13 = &v78;
      goto LABEL_8;
    }
    if (sub_22EFC7ADC((*a1)[27]))
    {
      a1[2] = 0;
      a1[3] = 0;
      a1[4] = 0;
    }
    if (v58 != 8)
      return 1;
    goto LABEL_117;
  }
  v77 = 0;
  sub_22F0D5A50((uint64_t)a2);
  LODWORD(v8) = v7;
  v9 = 0;
LABEL_3:
  v10 = v7 | ((unint64_t)v7 << 32);
  v76 = v10;
LABEL_4:
  v75 = v10;
LABEL_5:
  v11 = 1;
  if (a3 && a4)
  {
    sub_22E8FCA40(*a1, v8, a3, 0, (uint64_t)v89);
    sub_22E8906A0((uint64_t)v89, (uint64_t *)&v76);
    sub_22E903BEC((unsigned int *)v89);
    sub_22E8FCA40(*a1, v8, a4, 0, (uint64_t)v89);
    v12 = sub_22E8900C4((uint64_t)v89, &v77);
    v13 = (uint64_t *)&v75;
LABEL_8:
    sub_22E8906A0(v12, v13);
    sub_22E903BEC((unsigned int *)v89);
    return 1;
  }
LABEL_63:
  if (sub_22EFC7ADC((*a1)[27]))
  {
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = 0;
  }
  if (v9 == 8)
  {
    if (!a1[3] || !a1[2])
      return 0;
    v48 = sub_22E3CD3D4((*a1)[11] + 2032, 24, 3);
    v49 = (uint64_t)a1[2];
    sub_22EFF605C(v49);
    sub_22E5BBE34(v48, v50, *(_QWORD *)(v49 + 8), 0, 0, 0);
    v51 = sub_22E3CD3D4((*a1)[11] + 2032, 24, 3);
    v52 = (uint64_t)a1[3];
    sub_22EFF605C(v52);
    sub_22E5BBE34(v51, v53, *(_QWORD *)(v52 + 8), 0, 0, 0);
    v54 = sub_22EB2D0B8();
    if ((v54 & 1) == 0)
    {
      v55 = sub_22ECFABE8(*a1, (unsigned __int8 *)(v54 & 0xFFFFFFFFFFFFFFFELL), a1[2][1], 6, 0);
      if ((v55 & 1) == 0)
      {
        v11 = 0;
        a1[4] = (_QWORD *)(v55 & 0xFFFFFFFFFFFFFFFELL);
        return v11;
      }
    }
    return 1;
  }
  return v11;
}

uint64_t sub_22EC9EB88(_QWORD *a1, int **a2, uint64_t a3)
{
  int *v3;
  uint64_t *v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11[24];

  if (!a3)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 8 * a3;
  while (1)
  {
    v6 = *a2;
    v7 = (*a2)[2];
    if (v7 != 50)
    {
      if (v7 == 66)
      {
        if (v4)
          goto LABEL_14;
      }
      else
      {
        v6 = v3;
      }
      goto LABEL_10;
    }
    v4 = (uint64_t *)*a2;
    if (v3)
      break;
    v6 = 0;
LABEL_10:
    ++a2;
    v3 = v6;
    v5 -= 8;
    if (!v5)
      goto LABEL_14;
  }
  v6 = v3;
LABEL_14:
  v8 = 0;
  if (v6 && v4)
  {
    sub_22E8FCA40(a1, *v6, 0x10DDu, 0, (uint64_t)v11);
    v10 = *v4;
    sub_22E8906A0((uint64_t)v11, &v10);
    sub_22E903BEC(v11);
    return 1;
  }
  return v8;
}

uint64_t sub_22EC9EC50(uint64_t a1, int a2, _DWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _DWORD *v11;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _DWORD **v17;
  uint64_t v18;
  unsigned int v19;
  void **v20;
  uint64_t v22;
  _QWORD v23[4];
  int v24;

  v11 = a3;
  v14 = *(unsigned int *)(a7 + 8);
  if (v14 >= *(_DWORD *)(a7 + 12))
  {
    sub_22F341F44(a7);
    if (v11)
    {
      do
      {
LABEL_3:
        v16 = *(unsigned __int8 *)v11;
        if (v16 == 8)
        {
          if ((*v11 & 0xFFFFFF00) != 0x100)
            break;
          v17 = (_DWORD **)(v11 + 4);
        }
        else
        {
          if (v16 != 101)
            break;
          v17 = (_DWORD **)(v11 + 2);
        }
        v11 = *v17;
      }
      while (*v17);
    }
  }
  else
  {
    v15 = (_QWORD *)(*(_QWORD *)a7 + 16 * v14);
    *v15 = v15 + 2;
    v15[1] = 0;
    ++*(_DWORD *)(a7 + 8);
    if (a3)
      goto LABEL_3;
  }
  v23[0] = a1;
  v23[1] = a5;
  v23[2] = a6;
  v23[3] = a7;
  v24 = a2;
  v22 = a7;
  v18 = sub_22F0D8EB0(v11, 0, a4, (uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *))sub_22ECF7F28, (uint64_t)v23, (void (*)(uint64_t, _DWORD *))sub_22ECF80F8, (uint64_t)&v22);
  v19 = *(_DWORD *)(a7 + 8) - 1;
  *(_DWORD *)(a7 + 8) = v19;
  v20 = (void **)(*(_QWORD *)a7 + 16 * v19);
  if (*v20 != v20 + 2)
    free(*v20);
  return v18;
}

uint64_t sub_22EC9ED7C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;

  if (!a3)
    return 0;
  v3 = a3;
  v6 = sub_22E3CD3D4(a1 + 2032, 24, 3);
  if (v3)
  {
    if (v3 == 1)
      v7 = *a2;
    else
      v7 = (unint64_t)sub_22EFDA148(a1, a2, v3) | 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)v6 = 12;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(12);
    ++*((_DWORD *)v8 + 2);
  }
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = 0;
  return v6;
}

uint64_t sub_22EC9EE2C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (unint64_t)a2;
  if ((*(_DWORD *)a2 & 0x1E000) != 0)
    goto LABEL_2;
  v13 = sub_22EB52F30(a1, a3, a2, 0);
  if ((v13 & 1) != 0)
    return 0;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v13 & 0xFFFFFFFFFFFFFFFELL);
    v16 = v15;
  }
  else
  {
    v16 = 0;
  }
  v8 = sub_22EBCF22C(a1, v14, v16, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
  v17 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
  if (v17 && (*(_DWORD *)(v17 + 960) & 0xFFFFFFFE) == 0x2E)
  {
    if ((sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      if (v8)
      {
        sub_22EFF605C(v8);
        v18 = v19;
      }
      else
      {
        v18 = 0;
      }
      v20 = sub_22EBCF22C(a1, v8, v18, 0, 0);
      v21[0] = 0;
      v21[1] = 0;
      v22 = 0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      v8 = sub_22ECA02F4(a1, v20 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v21) & 0xFFFFFFFFFFFFFFFELL;
      v10 = sub_22ECA03E4(*(_QWORD *)(a1 + 88), (uint64_t)v21);
      sub_22F244D40((uint64_t)v21);
    }
    v11 = 40;
  }
  else
  {
LABEL_2:
    v10 = 0;
    v11 = 89;
  }
  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 28;
  *(_QWORD *)(result + 32) = v8;
  *(_QWORD *)(result + 16) = v10;
  *(_DWORD *)(result + 24) = v11;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9EFAC(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v9 = sub_22ECA04F4(&v25, a1, 58, 1, 0, 89, 0, 0);
  result = 0;
  if (v9)
  {
    v11 = sub_22ECB1B04(a1[1536]);
    if (v11)
      v12 = *(unsigned int *)(v11 + 960);
    else
      v12 = 89;
    v13 = sub_22ECA001C(v12, 58);
    if (v13 == 89)
    {
      v14 = 0;
      v15 = v25;
    }
    else
    {
      v16 = sub_22EFC7ADC(a1[27]);
      v15 = v25;
      if ((v16 & 1) != 0)
      {
        v14 = 0;
      }
      else
      {
        if (v25)
        {
          sub_22EFF605C(v25);
          v17 = v18;
        }
        else
        {
          v17 = 0;
        }
        v19 = sub_22EBCF22C((uint64_t)a1, v15, v17, 0, 0);
        v20[0] = 0;
        v20[1] = 0;
        v21 = 0;
        v23 = 0;
        v24 = 0;
        v22 = 0;
        v15 = sub_22ECA02F4((uint64_t)a1, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v20) & 0xFFFFFFFFFFFFFFFELL;
        v14 = sub_22ECA03E4(a1[11], (uint64_t)v20);
        sub_22F244D40((uint64_t)v20);
      }
    }
    result = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    *(_DWORD *)result = a3;
    *(_DWORD *)(result + 4) = a5;
    *(_DWORD *)(result + 8) = 58;
    *(_QWORD *)(result + 32) = v15;
    *(_QWORD *)(result + 16) = v14;
    *(_DWORD *)(result + 24) = v13;
    *(_DWORD *)(result + 28) = a4;
  }
  return result;
}

uint64_t sub_22EC9F118(_QWORD *a1, int a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a5 || !a4)
  {
    v12 = 0;
    v13 = 0;
    v14 = a1[11];
LABEL_11:
    v10 = sub_22F3EA23C(v14, v12, v13, a2, a4, a3);
    v16 = sub_22ECB1B04(a1[1536]);
    *(_QWORD *)(v16 + 1040) = v12;
    *(_QWORD *)(v16 + 1048) = v10;
    *(_BYTE *)(v16 + 1056) = 1;
    return v10;
  }
  v9 = sub_22EC98030(a1, a5, 60, 1, 0);
  if ((v9 & 1) == 0)
  {
    v14 = a1[11];
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v15 = sub_22ECB1B04(a1[1536])) != 0)
      v13 = *(_DWORD *)(v15 + 1064);
    else
      v13 = 0;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_22EC9F1E8(_QWORD *a1, unint64_t a2, int a3, int a4, int a5)
{
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v23 = a2;
  v9 = sub_22ECA04F4((uint64_t *)&v23, a1, 57, 1, 0, 89, 0, 0);
  result = 0;
  if (v9)
  {
    v11 = 89;
    v12 = 0;
    if (((1 << (*(_DWORD *)(sub_22ECB1B04(a1[1536]) + 960) - 66)) & 0x100000073) != 0)
    {
      if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
      {
        v12 = 0;
      }
      else
      {
        v14 = v23;
        if (v23)
        {
          sub_22EFF605C(v23);
          v15 = v16;
        }
        else
        {
          v15 = 0;
        }
        v17 = sub_22EBCF22C((uint64_t)a1, v14, v15, 0, 0);
        v18[0] = 0;
        v18[1] = 0;
        v19 = 0;
        v21 = 0;
        v22 = 0;
        v20 = 0;
        v23 = sub_22ECA02F4((uint64_t)a1, v17 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v18) & 0xFFFFFFFFFFFFFFFELL;
        v12 = sub_22ECA03E4(a1[11], (uint64_t)v18);
        sub_22F244D40((uint64_t)v18);
      }
      v11 = 56;
    }
    result = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    v13 = v23;
    *(_DWORD *)result = a3;
    *(_DWORD *)(result + 4) = a5;
    *(_DWORD *)(result + 8) = 57;
    *(_QWORD *)(result + 32) = v13;
    *(_QWORD *)(result + 16) = v12;
    *(_DWORD *)(result + 24) = v11;
    *(_DWORD *)(result + 28) = a4;
  }
  return result;
}

uint64_t sub_22EC9F344(_QWORD *a1, unint64_t a2, int a3, int a4, int a5)
{
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v23 = a2;
  v9 = sub_22ECA04F4((uint64_t *)&v23, a1, 78, 1, 0, 89, 0, 0);
  result = 0;
  if (v9)
  {
    v11 = 89;
    v12 = 0;
    if (((1 << (*(_DWORD *)(sub_22ECB1B04(a1[1536]) + 960) - 66)) & 0x100000073) != 0)
    {
      if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
      {
        v12 = 0;
      }
      else
      {
        v14 = v23;
        if (v23)
        {
          sub_22EFF605C(v23);
          v15 = v16;
        }
        else
        {
          v15 = 0;
        }
        v17 = sub_22EBCF22C((uint64_t)a1, v14, v15, 0, 0);
        v18[0] = 0;
        v18[1] = 0;
        v19 = 0;
        v21 = 0;
        v22 = 0;
        v20 = 0;
        v23 = sub_22ECA02F4((uint64_t)a1, v17 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v18) & 0xFFFFFFFFFFFFFFFELL;
        v12 = sub_22ECA03E4(a1[11], (uint64_t)v18);
        sub_22F244D40((uint64_t)v18);
      }
      v11 = 56;
    }
    result = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    v13 = v23;
    *(_DWORD *)result = a3;
    *(_DWORD *)(result + 4) = a5;
    *(_DWORD *)(result + 8) = 78;
    *(_QWORD *)(result + 32) = v13;
    *(_QWORD *)(result + 16) = v12;
    *(_DWORD *)(result + 24) = v11;
    *(_DWORD *)(result + 28) = a4;
  }
  return result;
}

uint64_t sub_22EC9F4A0(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = a2;
  v9 = 89;
  v15 = 89;
  v10 = sub_22ECB1B04(a1[1536]);
  if (v10)
    v9 = *(unsigned int *)(v10 + 960);
  if (!sub_22ECA04F4(&v17, a1, 62, 0, 1, v9, &v15, &v16))
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  v13 = v16;
  v12 = v17;
  v14 = v15;
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 62;
  *(_QWORD *)(result + 32) = v12;
  *(_QWORD *)(result + 16) = v13;
  *(_DWORD *)(result + 24) = v14;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9F560(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = a2;
  v9 = 89;
  v15 = 89;
  v10 = sub_22ECB1B04(a1[1536]);
  if (v10)
    v9 = *(unsigned int *)(v10 + 960);
  if (!sub_22ECA04F4(&v17, a1, 33, 1, 1, v9, &v15, &v16))
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  v13 = v16;
  v12 = v17;
  v14 = v15;
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 33;
  *(_QWORD *)(result + 32) = v12;
  *(_QWORD *)(result + 16) = v13;
  *(_DWORD *)(result + 24) = v14;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9F620(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = a2;
  v9 = 89;
  v15 = 89;
  v10 = sub_22ECB1B04(a1[1536]);
  if (v10)
    v9 = *(unsigned int *)(v10 + 960);
  if (!sub_22ECA04F4(&v17, a1, 56, 1, 1, v9, &v15, &v16))
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  v13 = v16;
  v12 = v17;
  v14 = v15;
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 56;
  *(_QWORD *)(result + 32) = v12;
  *(_QWORD *)(result + 16) = v13;
  *(_DWORD *)(result + 24) = v14;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9F6E0(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23[24];

  if (!a2)
    return 0;
  v10 = sub_22ECAE974((uint64_t)a1, a3, a1[1536], 1);
  if ((*(_DWORD *)a2 & 0x1C000) == 0)
  {
    v11 = (*(_DWORD *)a2 & 0x2000) != 0 ? 0 : v10;
    if (v11 == 1 && !sub_22F36EDA0(a1[11], *(_QWORD *)(a1[1536] + 21544), *(_QWORD *)(a2 + 8), 1))
    {
      sub_22EFF605C(a2);
      sub_22E8FCA40(a1, v16, 0x107Au, 0, (uint64_t)v23);
      v22 = 0;
      v17 = sub_22E8900C4((uint64_t)v23, &v22);
      v21 = *(_QWORD *)(a2 + 8);
      v18 = sub_22E8901B8(v17, &v21);
      sub_22F0D4E74(a2);
      v20 = v19;
      sub_22E8906A0(v18, &v20);
      sub_22E903BEC(v23);
    }
  }
  if ((*(_DWORD *)a2 & 0x300) != 0x100)
  {
    sub_22EFF605C(a2);
    sub_22E8FCA40(a1, v12, 0x107Au, 0, (uint64_t)v23);
    LODWORD(v20) = 1;
    v13 = sub_22E8900C4((uint64_t)v23, (int *)&v20);
    sub_22F0D4E74(a2);
    v21 = v14;
    sub_22E8906A0(v13, &v21);
    sub_22E903BEC(v23);
  }
  result = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 19;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_22EC9F86C(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint64_t v34[5];
  unsigned int v35[24];

  if ((*(_DWORD *)a2 & 0x1E000) != 0)
    goto LABEL_2;
  v11 = *(_QWORD *)(a1 + 12288);
  if (*(_QWORD *)(v11 + 21552) <= 0xFuLL)
  {
    sub_22EFF605C((uint64_t)a2);
    v13 = v12;
    v14 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "omp_event_handle_t", 0x12uLL);
    v15 = sub_22EA003D8((_QWORD *)a1, v14, v13, *(uint64_t **)(a1 + 12888), 0, 0, 0, 0, 0, 0, 1u, 0);
    if (v15 <= 0xF)
    {
      sub_22E8FCA40((_QWORD *)a1, v13, 0x1089u, 0, (uint64_t)v35);
      sub_22F2F30F4((uint64_t)v35, (uint64_t)"omp_event_handle_t");
      goto LABEL_19;
    }
    *(_QWORD *)(v11 + 21552) = v15;
  }
  v16 = sub_22EFFA6B0(a2);
  if (*v16 != 161 || (v17 = *((_QWORD *)v16 + 2)) == 0 || (*(_DWORD *)(v17 + 28) & 0x7Fu) - 60 >= 7)
  {
    sub_22EFF605C((uint64_t)a2);
    sub_22E8FCA40((_QWORD *)a1, v23, 0x1106u, 0, (uint64_t)v35);
    v24 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"omp_event_handle_t");
    LODWORD(v33[0]) = 0;
    v25 = sub_22E8900C4(v24, (int *)v33);
    sub_22F0D4E74((uint64_t)a2);
    v34[0] = v26;
    v27 = v34;
LABEL_18:
    sub_22E8906A0(v25, v27);
LABEL_19:
    sub_22E903BEC(v35);
    return 0;
  }
  v18 = *(_QWORD *)(v17 + 48);
  if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 21552) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
    || sub_22F10AFE4(v18, *(_QWORD *)(a1 + 88)))
  {
    sub_22EFF605C((uint64_t)a2);
    sub_22E8FCA40((_QWORD *)a1, v28, 0x1106u, 0, (uint64_t)v35);
    v29 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"omp_event_handle_t");
    LODWORD(v32[0]) = 1;
    v30 = sub_22E8900C4(v29, (int *)v32);
    v34[0] = *(_QWORD *)(v17 + 48);
    v25 = sub_22E8901B8(v30, v34);
    sub_22F0D4E74((uint64_t)a2);
    v33[0] = v31;
    v27 = v33;
    goto LABEL_18;
  }
  sub_22EC7F2A4(*(_QWORD *)(a1 + 12288), v17, 0, (uint64_t)v34);
  if (v34[2] && HIDWORD(v34[0]) != 85 && HIDWORD(v34[0]) != 29)
  {
    sub_22EFF605C((uint64_t)a2);
    sub_22E8FCA40((_QWORD *)a1, v19, 0x110Fu, 0, (uint64_t)v35);
    v33[0] = llvm::omp::getOpenMPClauseName();
    v33[1] = v20;
    v21 = sub_22F2F2210((uint64_t)v35, (uint64_t)v33);
    v32[0] = llvm::omp::getOpenMPClauseName();
    v32[1] = v22;
    sub_22F2F2210(v21, (uint64_t)v32);
    sub_22E903BEC(v35);
    sub_22EC82B14((_QWORD *)a1, *(_QWORD *)(a1 + 12288), v17, (uint64_t)v34, 0);
    return 0;
  }
LABEL_2:
  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 21;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_22EC9FB70(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = (unint64_t)a2;
  if ((*(_DWORD *)a2 & 0x1E000) != 0)
  {
    v10 = 0;
    v11 = 89;
  }
  else
  {
    v12 = sub_22EB52F30(a1, a3, a2, 0);
    if ((v12 & 1) != 0)
      return 0;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if ((v12 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v12 & 0xFFFFFFFFFFFFFFFELL);
      v15 = v14;
    }
    else
    {
      v15 = 0;
    }
    v8 = sub_22EBCF22C(a1, v13, v15, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
    if ((sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      if (v8)
      {
        sub_22EFF605C(v8);
        v17 = v18;
      }
      else
      {
        v17 = 0;
      }
      v19 = sub_22EBCF22C(a1, v8, v17, 0, 0);
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v8 = sub_22ECA02F4(a1, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v20) & 0xFFFFFFFFFFFFFFFELL;
      v10 = sub_22ECA03E4(*(_QWORD *)(a1 + 88), (uint64_t)v20);
      sub_22F244D40((uint64_t)v20);
    }
    v11 = 74;
  }
  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 55;
  *(_QWORD *)(result + 32) = v8;
  *(_QWORD *)(result + 16) = v10;
  *(_DWORD *)(result + 24) = v11;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9FCD4(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = (unint64_t)a2;
  if ((*(_DWORD *)a2 & 0x1E000) != 0)
  {
    v10 = 0;
    v11 = 89;
  }
  else
  {
    v12 = sub_22EB52F30(a1, a3, a2, 0);
    if ((v12 & 1) != 0)
      return 0;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if ((v12 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v12 & 0xFFFFFFFFFFFFFFFELL);
      v15 = v14;
    }
    else
    {
      v15 = 0;
    }
    v8 = sub_22EBCF22C(a1, v13, v15, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
    if ((sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      if (v8)
      {
        sub_22EFF605C(v8);
        v17 = v18;
      }
      else
      {
        v17 = 0;
      }
      v19 = sub_22EBCF22C(a1, v8, v17, 0, 0);
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v8 = sub_22ECA02F4(a1, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v20) & 0xFFFFFFFFFFFFFFFELL;
      v10 = sub_22ECA03E4(*(_QWORD *)(a1 + 88), (uint64_t)v20);
      sub_22F244D40((uint64_t)v20);
    }
    v11 = 74;
  }
  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 52;
  *(_QWORD *)(result + 32) = v8;
  *(_QWORD *)(result + 16) = v10;
  *(_DWORD *)(result + 24) = v11;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9FE38(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t result;

  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

uint64_t sub_22EC9FE98(uint64_t a1, int a2, unsigned __int8 *a3, int a4, int a5, int a6, int a7, int a8)
{
  unint64_t v13;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v13 = (unint64_t)a3;
  if ((*(_DWORD *)a3 & 0x1E000) != 0)
  {
    v16 = 0;
    v17 = 89;
  }
  else
  {
    v18 = sub_22EB52F30(a1, a4, a3, 0);
    if ((v18 & 1) != 0)
      return 0;
    v13 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v19 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
    if (v19)
      v20 = *(unsigned int *)(v19 + 960);
    else
      v20 = 89;
    v17 = sub_22ECA001C(v20, 36);
    if (v17 == 89 || (sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) != 0)
    {
      v16 = 0;
    }
    else
    {
      if (v13)
      {
        sub_22EFF605C(v13);
        v22 = v23;
      }
      else
      {
        v22 = 0;
      }
      v24 = sub_22EBCF22C(a1, v13, v22, 0, 0);
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v13 = sub_22ECA02F4(a1, v24 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v25) & 0xFFFFFFFFFFFFFFFELL;
      v16 = sub_22ECA03E4(*(_QWORD *)(a1 + 88), (uint64_t)v25);
      sub_22F244D40((uint64_t)v25);
    }
  }
  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 56, 3);
  *(_DWORD *)result = a4;
  *(_DWORD *)(result + 4) = a8;
  *(_DWORD *)(result + 8) = 36;
  *(_QWORD *)(result + 32) = v13;
  *(_DWORD *)(result + 40) = a7;
  *(_DWORD *)(result + 44) = a2;
  *(_DWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 16) = v16;
  *(_DWORD *)(result + 24) = v17;
  *(_DWORD *)(result + 28) = a5;
  return result;
}

uint64_t sub_22ECA001C(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;

  v2 = result;
  if (a2 <= 51)
    return ((uint64_t (*)(uint64_t))((char *)&loc_22ECA0074 + 4 * byte_22F494C42[a2 - 22]))(89);
  switch(a2)
  {
    case '4':
    case '7':
      result = 74;
      break;
    case '5':
    case '6':
    case ';':
    case '<':
    case '=':
      __break(1u);
      break;
    case '8':
    case '>':
      if ((result & 0xFFFFFFFE) == 0x2E)
        result = 40;
      else
        result = 89;
      break;
    case '9':
      goto LABEL_13;
    case ':':
      result = 89;
      v3 = v2 - 40;
      if (v3 <= 0x39 && ((1 << v3) & 0x1000000000001F9) == 0)
      {
        if (((1 << v3) & 0x3000C0000000) != 0)
        {
          result = 80;
        }
        else if (((1 << v3) & 0x200000001900000) != 0)
        {
          result = 56;
        }
      }
      break;
    default:
      if (a2 == 71)
      {
        if ((result - 33) >= 2)
          result = 40;
        else
          result = 89;
      }
      else
      {
LABEL_13:
        if (((1 << (result - 66)) & 0x100000073) != 0)
          result = 56;
        else
          result = 89;
      }
      break;
  }
  return result;
}

uint64_t sub_22ECA0134@<X0>(int a1@<W8>)
{
  return dword_22F4959D8[a1 - 56];
}

uint64_t sub_22ECA019C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))((char *)&loc_22ECA004C + 4 * byte_22F494C5C[a1 - 7]))();
}

void sub_22ECA01B8()
{
  JUMPOUT(0x22ECA0084);
}

uint64_t sub_22ECA01CC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;

  if (a4 == 54 || a4 == 89)
    v5 = 40;
  else
    v5 = 89;
  if (a3 >= 0x2E)
    return v5;
  else
    return 89;
}

uint64_t sub_22ECA02F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = a2;
  v11 = a2;
  if ((sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) == 0 && (*(_BYTE *)(v4 + 2) & 2) == 0)
  {
    if (sub_22F007CB0((unsigned __int8 *)v4, *(_QWORD *)(a1 + 88), 2))
    {
      v6 = sub_22EFFEB40((unsigned __int8 *)v4);
      return sub_22ECFABE8((uint64_t *)a1, v6, *(_QWORD *)(v4 + 8), 3, 1);
    }
    v8 = sub_22F34111C(a3, &v11);
    if (*(_QWORD *)(a3 + 32) == v8)
    {
      v10 = 0;
      v4 = sub_22ECD5090(a1, v11, &v10);
      v9 = v10;
      *(_QWORD *)sub_22F340BE8(a3, (unint64_t *)&v11) = v9;
    }
    else
    {
      return sub_22ECD5090(a1, v11, (unint64_t *)(v8 + 8));
    }
  }
  return v4;
}

uint64_t sub_22ECA03E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v9;
  uint64_t v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  if (v2 == v3)
    return 0;
  LODWORD(v5) = 0;
  v9 = 0;
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
    if (v5 >= 0x10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v5) = v9;
    }
    v10[v5] = v6;
    v5 = ++v9;
    v2 += 16;
  }
  while (v2 != v3);
  return sub_22EC9ED7C(a1, v10, v5);
}

uint64_t sub_22ECA04F4(uint64_t *a1, _QWORD *a2, int a3, int a4, int a5, uint64_t a6, _DWORD *a7, uint64_t *a8)
{
  _DWORD *v8;
  uint64_t result;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD v35[2];
  uint64_t (**v36)();
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  unsigned __int8 v45;

  v8 = (_DWORD *)*a1;
  if ((*(_DWORD *)*a1 & 0x1C000) != 0)
    return 1;
  sub_22EFF605C(*a1);
  v19 = v18;
  LOWORD(v37) = 256;
  BYTE2(v37) = 0;
  v36 = off_24FAB8D98;
  v20 = sub_22ED03140(a2, v18, v8, &v36);
  result = 0;
  if ((v20 & 1) == 0)
  {
    *a1 = v20 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F00905C(v20 & 0xFFFFFFFFFFFFFFFELL, a2[11], 0, (uint64_t)&v42);
    v21 = v45;
    if (!v45 || v44)
    {
LABEL_10:
      if (v21 && v43 >= 0x41)
      {
        v22 = v42;
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    if ((a4 & 1) != 0)
    {
      if (sub_22E984E5C((uint64_t)&v42))
      {
        v21 = v45;
        goto LABEL_10;
      }
    }
    else
    {
      v22 = v42;
      v23 = (uint64_t *)(v42 + 8 * ((v43 - 1) >> 6));
      if (v43 < 0x41)
        v23 = &v42;
      if ((((unint64_t)*v23 >> (v43 - 1)) & 1) == 0)
      {
        if (v43 >= 0x41)
        {
LABEL_17:
          if (v22)
            MEMORY[0x2348A0E84](v22, 0x1000C8000313F17);
        }
LABEL_19:
        if (a5)
        {
          v24 = sub_22ECA001C(a6, a3);
          *a7 = v24;
          if (v24 != 89 && (sub_22EFC7ADC(a2[27]) & 1) == 0)
          {
            v25 = *a1;
            if (*a1)
            {
              sub_22EFF605C(*a1);
              v26 = v31;
            }
            else
            {
              v26 = 0;
            }
            v32 = sub_22EBCF22C((uint64_t)a2, v25, v26, 0, 0);
            *a1 = v32 & 0xFFFFFFFFFFFFFFFELL;
            v36 = 0;
            v37 = 0;
            v38 = 0;
            v40 = 0;
            v41 = 0;
            v39 = 0;
            *a1 = sub_22ECA02F4((uint64_t)a2, v32 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v36) & 0xFFFFFFFFFFFFFFFELL;
            *a8 = sub_22ECA03E4(a2[11], (uint64_t)&v36);
            sub_22F244D40((uint64_t)&v36);
          }
        }
        return 1;
      }
    }
    sub_22E8FCA40(a2, v19, 0x10B4u, 0, (uint64_t)&v36);
    v35[0] = llvm::omp::getOpenMPClauseName();
    v35[1] = v27;
    v28 = sub_22F2F2210((uint64_t)&v36, (uint64_t)v35);
    v34 = a4;
    v29 = sub_22E8900C4(v28, &v34);
    sub_22F0D4E74(*a1);
    v33 = v30;
    sub_22E8906A0(v29, &v33);
    sub_22E903BEC((unsigned int *)&v36);
    if (v45 && v43 >= 0x41 && v42)
      MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
    return 0;
  }
  return result;
}

BOOL sub_22ECA0798(_QWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  BOOL v7;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17[12];

  v3 = *(_QWORD *)(a3 + 21536);
  if (v3 > 0xF)
  {
    return 1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v9 = a3 + 21568;
    while (1)
    {
      v10 = strlen(off_24FAB8EA8[v6]);
      v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), off_24FAB8EA8[v6], v10);
      v12 = sub_22EC65CE0(a1, a1[418], v11, a2, 15, 0);
      if (!v12)
        break;
      v13 = v12;
      if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 48 > 0x1A)
        break;
      v17[0] = *(_QWORD *)(v12 + 48);
      v14 = sub_22F1133DC(v17, a1[11]);
      v15 = sub_22F32D524((uint64_t)a1, v13, v14, 1, a2, 0);
      if (v15 < 2)
        break;
      if (v3 < 0x10)
        v3 = v14;
      if ((*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 8) | v3 & 7) != (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) | v14 & 7))
        break;
      *(_QWORD *)(v9 + 8 * v6) = v15 & 0xFFFFFFFFFFFFFFFELL;
      v7 = v6++ > 7;
      if (v6 == 9)
      {
        *(_QWORD *)(a3 + 21536) = v3 | 1;
        return 1;
      }
    }
    sub_22E8FCA40(a1, a2, 0x1089u, 0, (uint64_t)v17);
    sub_22F2F30F4((uint64_t)v17, (uint64_t)"omp_allocator_handle_t");
    sub_22E903BEC((unsigned int *)v17);
  }
  return v7;
}

void sub_22ECA0930(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

_DWORD *sub_22ECA0984()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *result;

  v6 = *(_QWORD *)(v5 + 12288);
  *(_DWORD *)(sub_22ECB1B04(v6) + 928) = 2;
  *(_DWORD *)(sub_22ECB1B04(v6) + 932) = v0;
  result = (_DWORD *)sub_22E3CD3D4(*(_QWORD *)(v5 + 88) + 2032, 24, 3);
  *result = v4;
  result[1] = v3;
  result[2] = 16;
  result[3] = v1;
  result[4] = v2;
  result[5] = v0;
  return result;
}

void sub_22ECA09EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t OpenMPClauseName, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned int a18)
{
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  sub_22E8FCA40(v19, v18, 0x10FEu, 0, (uint64_t)&a18);
  sub_22ECA1038(0x10u, 0, 3, 0, 0, &__p);
  v20 = sub_22F2F3734((uint64_t)&a18, &__p);
  OpenMPClauseName = llvm::omp::getOpenMPClauseName();
  a11 = v21;
  sub_22F2F2210(v20, (uint64_t)&OpenMPClauseName);
  if (a17 < 0)
    operator delete(__p);
  sub_22E903BEC(&a18);
  JUMPOUT(0x22ECA09D0);
}

_DWORD *sub_22ECA0A68(_QWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpenMPClauseName;
  uint64_t v19;
  void *__p[2];
  char v21;
  unsigned int v22[24];

  if (a2 == 5)
  {
    if (*(_DWORD *)(a1[9] + 72) <= 0x32u)
    {
      sub_22E8FCA40(a1, a3, 0x10FEu, 0, (uint64_t)v22);
      sub_22ECA1038(0x40u, 2u, 5, 0, 0, __p);
      v16 = sub_22F2F3734((uint64_t)v22, __p);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v19 = v17;
      sub_22F2F2210(v16, (uint64_t)&OpenMPClauseName);
      if (v21 < 0)
        operator delete(__p[0]);
      sub_22E903BEC(v22);
    }
    goto LABEL_10;
  }
  if (a2 != 7)
  {
LABEL_10:
    result = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 24, 3);
    *result = a4;
    result[1] = a6;
    result[2] = 64;
    result[3] = a5;
    result[4] = a2;
    result[5] = a3;
    return result;
  }
  sub_22E8FCA40(a1, a3, 0x10FEu, 0, (uint64_t)v22);
  if (*(_DWORD *)(a1[9] + 72) <= 0x32u)
    v12 = 5;
  else
    v12 = 6;
  sub_22ECA1038(0x40u, 2u, v12, 0, 0, __p);
  v13 = sub_22F2F3734((uint64_t)v22, __p);
  OpenMPClauseName = llvm::omp::getOpenMPClauseName();
  v19 = v14;
  sub_22F2F2210(v13, (uint64_t)&OpenMPClauseName);
  if (v21 < 0)
    operator delete(__p[0]);
  sub_22E903BEC(v22);
  return 0;
}

_DWORD *sub_22ECA0C00(_QWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  void *__p[2];
  char v16;
  unsigned int v17[24];

  if (a2 == 3)
  {
    sub_22E8FCA40(a1, a3, 0x10FEu, 0, (uint64_t)v17);
    sub_22ECA1038(9u, 0, 3, 0, 0, __p);
    v12 = sub_22F2F3734((uint64_t)v17, __p);
    v14[0] = llvm::omp::getOpenMPClauseName();
    v14[1] = v13;
    sub_22F2F2210(v12, (uint64_t)v14);
    if (v16 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v17);
    return 0;
  }
  else
  {
    result = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 24, 3);
    *result = a4;
    result[1] = a6;
    result[2] = 9;
    result[3] = a5;
    result[4] = a2;
    result[5] = a3;
  }
  return result;
}

_DWORD *sub_22ECA0CE8(_QWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  void *__p[2];
  char v16;
  unsigned int v17[24];

  if (a2 == 1)
  {
    sub_22E8FCA40(a1, a3, 0x10FEu, 0, (uint64_t)v17);
    sub_22ECA1038(0x3Bu, 0, 1, 0, 0, __p);
    v12 = sub_22F2F3734((uint64_t)v17, __p);
    v14[0] = llvm::omp::getOpenMPClauseName();
    v14[1] = v13;
    sub_22F2F2210(v12, (uint64_t)v14);
    if (v16 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v17);
    return 0;
  }
  else
  {
    result = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 24, 3);
    *result = a4;
    result[1] = a6;
    result[2] = 59;
    result[3] = a5;
    result[4] = a2;
    result[5] = a3;
  }
  return result;
}

uint64_t sub_22ECA0DD0(_QWORD *a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  void *__p[2];
  char v16;
  unsigned int v17[24];
  __int32 *v18;
  __int128 v19;
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 8 && ((1 << a2) & 0x170) != 0)
  {
    v18 = (__int32 *)&v19 + 2;
    v20 = 4;
    v19 = xmmword_22F495C60;
    if (*(_DWORD *)(a1[9] + 72) <= 0x32u)
    {
      v21 = 7;
      LODWORD(v19) = 4;
    }
    sub_22E8FCA40(a1, a3, 0x10FEu, 0, (uint64_t)v17);
    sub_22ECA1038(0x12u, 0, 8, v18, v19, __p);
    v12 = sub_22F2F3734((uint64_t)v17, __p);
    v14[0] = llvm::omp::getOpenMPClauseName();
    v14[1] = v13;
    sub_22F2F2210(v12, (uint64_t)v14);
    if (v16 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v17);
    if (v18 != (__int32 *)((char *)&v19 + 8))
      free(v18);
    return 0;
  }
  else
  {
    result = sub_22E3CD3D4(a1[11] + 2032, 28, 2);
    *(_DWORD *)result = a4;
    *(_DWORD *)(result + 4) = a6;
    *(_DWORD *)(result + 8) = 87;
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 16) = a5;
    *(_DWORD *)(result + 20) = a3;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

_DWORD *sub_22ECA0F50(_QWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  void *__p[2];
  char v16;
  unsigned int v17[24];

  if (a2 == 3)
  {
    sub_22E8FCA40(a1, a3, 0x10FEu, 0, (uint64_t)v17);
    sub_22ECA1038(0xAu, 0, 3, 0, 0, __p);
    v12 = sub_22F2F3734((uint64_t)v17, __p);
    v14[0] = llvm::omp::getOpenMPClauseName();
    v14[1] = v13;
    sub_22F2F2210(v12, (uint64_t)v14);
    if (v16 < 0)
      operator delete(__p[0]);
    sub_22E903BEC(v17);
    return 0;
  }
  else
  {
    result = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 24, 3);
    *result = a4;
    result[1] = a6;
    result[2] = 10;
    result[3] = a5;
    result[4] = a2;
    result[5] = a3;
  }
  return result;
}

void sub_22ECA1038(unsigned int a1@<W0>, unsigned __int32 a2@<W1>, uint64_t a3@<X2>, __int32 *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int32 *v10;
  size_t v11;
  const char *v12;
  int v13;
  __int32 *v14;
  __int32 *v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  size_t v23;
  void *v24;
  _BYTE *v25;
  unsigned __int32 v26;
  size_t v27;
  const void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  __int32 *v34;
  int v35;
  _BYTE v37[24];
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  _QWORD v43[34];

  v43[32] = *MEMORY[0x24BDAC8D0];
  v41 = v43;
  v42 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v37, (uint64_t)&v41);
  if (a2 < a3)
  {
    v10 = &a4[a5];
    v11 = (4 * a5) >> 2;
    v35 = -(int)a3;
    v12 = "'";
    v13 = a5;
    v34 = v10;
    do
    {
      v14 = wmemchr(a4, a2, v11);
      if (v14)
        v15 = v14;
      else
        v15 = v10;
      if (a5 == v15 - a4)
      {
        v16 = a3;
        v17 = v11;
        v18 = a5;
        if (v38 == v39)
        {
          v19 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v37, v12);
        }
        else
        {
          *v39++ = 39;
          v19 = (llvm::raw_ostream *)v37;
        }
        v20 = v12;
        v21 = sub_22F42187C((const char *)a1, a2);
        if (v21)
        {
          v22 = v21;
          v23 = strlen(v21);
          v24 = (void *)*((_QWORD *)v19 + 4);
          if (v23 <= *((_QWORD *)v19 + 3) - (_QWORD)v24)
          {
            if (v23)
            {
              memcpy(v24, v22, v23);
              *((_QWORD *)v19 + 4) += v23;
            }
          }
          else
          {
            v19 = (llvm::raw_ostream *)llvm::raw_ostream::write(v19, v22);
          }
        }
        v25 = (_BYTE *)*((_QWORD *)v19 + 4);
        v12 = v20;
        if (*((_BYTE **)v19 + 3) == v25)
        {
          llvm::raw_ostream::write(v19, v20);
        }
        else
        {
          *v25 = 39;
          ++*((_QWORD *)v19 + 4);
        }
        a5 = v18;
        v26 = v35 + v13 + a2;
        v11 = v17;
        if (v26 == -2)
        {
          a3 = v16;
          if ((unint64_t)(v38 - v39) > 3)
          {
            *(_DWORD *)v39 = 544370464;
            v39 += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v37, " or ");
          }
        }
        else
        {
          a3 = v16;
          if (v26 != -1)
          {
            v10 = v34;
            if ((unint64_t)(v38 - v39) > 1)
            {
              *(_WORD *)v39 = 8236;
              v39 += 2;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v37, ", ");
            }
            goto LABEL_27;
          }
        }
        v10 = v34;
      }
      else
      {
        --v13;
      }
LABEL_27:
      ++a2;
    }
    while ((_DWORD)a3 != a2);
  }
  v27 = *(_QWORD *)(v40 + 8);
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v28 = *(const void **)v40;
  v29 = a6;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v32 = operator new(v30 + 1);
    a6[1] = v27;
    a6[2] = v31 | 0x8000000000000000;
    *a6 = v32;
    v29 = v32;
    goto LABEL_37;
  }
  *((_BYTE *)a6 + 23) = v27;
  if (v27)
LABEL_37:
    memmove(v29, v28, v27);
  *((_BYTE *)v29 + v27) = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v37);
  if (v41 != v43)
    free(v41);
}

_DWORD *sub_22ECA137C(_QWORD *a1, _DWORD **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;

  if (a3)
  {
    v12 = 8 * a3;
    v13 = a2;
    while ((unint64_t)sub_22EC98030(a1, *v13, 76, 1, 0) > 1)
    {
      ++v13;
      v12 -= 8;
      if (!v12)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    v14 = a1[1536];
    *(_DWORD *)(sub_22ECB1B04(v14) + 1064) = a3;
    if (a3 >= 2)
      *(_BYTE *)(sub_22ECB1B04(v14) + 1068) = 1;
    return sub_22F3EB78C(a1[11], a4, a5, a6, a2, a3);
  }
}

uint64_t sub_22ECA1458(_QWORD *a1, int a2, int a3, int a4, _DWORD *a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15)
{
  uint64_t v23;
  unsigned int *v24;
  uint64_t result;
  BOOL v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  char v32;
  int v33;
  __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  _BYTE v49[96];
  uint64_t v50[2];
  void *__p;
  unsigned int v52;
  char v53;
  char v54;
  char v55;
  uint64_t (**v56)();
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (sub_22ECA21B0(a1, a2, a3, a8) || sub_22ECA21B0(a1, a3, a2, a9))
    return 0;
  if (a2 != 5 && a2 == a3 || a2 == 6 && a3 == 7 || a2 == 7 && a3 == 6)
  {
    sub_22E8FCA40(a1, a9, 0x10FFu, 0, (uint64_t)&v56);
    __p = (void *)sub_22F42187C((const char *)0x47, a3);
    v23 = sub_22E8AECC4((uint64_t)&v56, (uint64_t *)&__p);
    v50[0] = (uint64_t)sub_22F42187C((const char *)0x47, a2);
    sub_22E8AECC4(v23, v50);
    v24 = (unsigned int *)&v56;
LABEL_10:
    sub_22E903BEC(v24);
    return 0;
  }
  if (a4 == 5)
  {
    if (a8 | a9)
    {
      v35 = 5;
      v34 = 0;
      v36 = 0;
    }
    else
    {
      LODWORD(v56) = 5;
      v34 = (__int32 *)&v56;
      v35 = 9;
      v36 = 1;
    }
    sub_22ECA1038(0x47u, 0, v35, v34, v36, &__p);
    sub_22E8FCA40(a1, a11, 0x10FEu, 0, (uint64_t)&v56);
    v38 = sub_22E90749C((uint64_t)&v56, &__p);
    v50[0] = llvm::omp::getOpenMPClauseName();
    v50[1] = v39;
    sub_22F2F2210(v38, (uint64_t)v50);
    sub_22E903BEC((unsigned int *)&v56);
    if (v55 < 0)
      operator delete(__p);
    return 0;
  }
  if (*(_DWORD *)(a1[9] + 72) <= 0x31u)
  {
    v26 = a3 == 7 || a2 == 7;
    if (v26 && (a4 - 3) <= 0xFFFFFFFD)
    {
      if (a2 == 7)
        v27 = a8;
      else
        v27 = a9;
      sub_22E8FCA40(a1, v27, 0x10E5u, 0, (uint64_t)v49);
      v24 = (unsigned int *)v49;
      goto LABEL_10;
    }
  }
  if (!a5 || (*a5 & 0x1E000) != 0)
  {
    v28 = 0;
    goto LABEL_27;
  }
  sub_22F0D5A50((uint64_t)a5);
  LOWORD(v57) = 256;
  BYTE2(v57) = 0;
  v56 = off_24FAB8D98;
  v30 = v29;
  v31 = sub_22ED03140(a1, v29, a5, &v56);
  if ((v31 & 1) != 0)
    return 0;
  v46 = v31 & 0xFFFFFFFFFFFFFFFELL;
  sub_22F00905C(v31 & 0xFFFFFFFFFFFFFFFELL, a1[11], 0, (uint64_t)&__p);
  if (v54)
  {
    if (!v53)
    {
      v32 = sub_22E984E5C((uint64_t)&__p);
      v33 = 1;
      if ((v32 & 1) == 0)
      {
        sub_22E8FCA40(a1, v30, 0x10B4u, 0, (uint64_t)&v56);
        v41 = sub_22F2F30F4((uint64_t)&v56, (uint64_t)"schedule");
        v48 = 1;
        v42 = sub_22E8900C4(v41, &v48);
        sub_22F0D4E74((uint64_t)a5);
        v50[0] = v43;
        sub_22E8906A0(v42, v50);
        sub_22E903BEC((unsigned int *)&v56);
        v33 = 0;
      }
      v28 = 0;
      goto LABEL_40;
    }
LABEL_39:
    v28 = 0;
    v33 = 1;
LABEL_40:
    a5 = (_DWORD *)v46;
    goto LABEL_41;
  }
  v37 = sub_22ECB1B04(a1[1536]);
  if (v37 && (*(_DWORD *)(v37 + 960) - 33) < 2 || (sub_22EFC7ADC(a1[27]) & 1) != 0)
    goto LABEL_39;
  if (v46)
  {
    sub_22EFF605C(v46);
    v40 = v44;
  }
  else
  {
    v40 = 0;
  }
  v45 = sub_22EBCF22C((uint64_t)a1, v46, v40, 0, 0);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  a5 = (_DWORD *)(sub_22ECA02F4((uint64_t)a1, v45 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v56) & 0xFFFFFFFFFFFFFFFELL);
  v28 = sub_22ECA03E4(a1[11], (uint64_t)&v56);
  sub_22F244D40((uint64_t)&v56);
  v33 = 1;
LABEL_41:
  if (v54 && v52 >= 0x41)
  {
    if (__p)
    {
      v47 = v33;
      MEMORY[0x2348A0E84](__p, 0x1000C8000313F17);
      v33 = v47;
    }
  }
  if (!v33)
    return 0;
LABEL_27:
  result = sub_22E3CD3D4(a1[11] + 2032, 72, 3);
  *(_DWORD *)result = a6;
  *(_DWORD *)(result + 4) = a15;
  *(_DWORD *)(result + 8) = 71;
  *(_QWORD *)(result + 64) = a5;
  *(_QWORD *)(result + 16) = v28;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = a7;
  *(_DWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 36) = a2;
  *(_DWORD *)(result + 40) = a3;
  *(_DWORD *)(result + 44) = a8;
  *(_DWORD *)(result + 52) = a11;
  *(_DWORD *)(result + 56) = a13;
  *(_DWORD *)(result + 48) = a9;
  return result;
}

uint64_t sub_22ECA18BC(_QWORD *a1, int a2, _DWORD *a3, int a4, int a5, int a6, int a7, int a8)
{
  unint64_t v14;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34[2];
  uint64_t (**v35)();
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string v41;

  if (a2 == 1)
  {
    memset(&v41, 0, sizeof(v41));
    std::string::append(&v41, "'");
    v23 = sub_22F42187C((const char *)0x18, 0);
    std::string::append(&v41, v23);
    std::string::append(&v41, "'");
    sub_22E8FCA40(a1, a6, 0x10FEu, 0, (uint64_t)&v35);
    v24 = sub_22E90749C((uint64_t)&v35, &v41);
    v34[0] = llvm::omp::getOpenMPClauseName();
    v34[1] = v25;
    sub_22F2F2210(v24, (uint64_t)v34);
    sub_22E903BEC((unsigned int *)&v35);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    return 0;
  }
  v14 = (unint64_t)a3;
  if (!a3 || (*a3 & 0x1E000) != 0)
  {
    v16 = 0;
LABEL_5:
    result = sub_22E3CD3D4(a1[11] + 2032, 56, 3);
    *(_DWORD *)result = a4;
    *(_DWORD *)(result + 4) = a8;
    *(_DWORD *)(result + 8) = 24;
    *(_DWORD *)(result + 32) = a2;
    *(_DWORD *)(result + 36) = a6;
    *(_DWORD *)(result + 40) = a7;
    *(_QWORD *)(result + 48) = v14;
    *(_QWORD *)(result + 16) = v16;
    *(_DWORD *)(result + 24) = 89;
    *(_DWORD *)(result + 28) = a5;
    return result;
  }
  sub_22F0D5A50((uint64_t)a3);
  v19 = v18;
  LOWORD(v36) = 256;
  BYTE2(v36) = 0;
  v35 = off_24FAB8D98;
  v20 = sub_22ED03140(a1, v18, v14, &v35);
  if ((v20 & 1) == 0)
  {
    v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F00905C(v20 & 0xFFFFFFFFFFFFFFFELL, a1[11], 0, (uint64_t)&v41);
    if (v41.__r_.__value_.__s.__data_[16])
    {
      if (!v41.__r_.__value_.__s.__data_[12])
      {
        v33 = v21;
        if ((sub_22E984E5C((uint64_t)&v41) & 1) != 0)
        {
          v16 = 0;
          v22 = 1;
        }
        else
        {
          sub_22E8FCA40(a1, v19, 0x10B4u, 0, (uint64_t)&v35);
          v28 = sub_22F2F30F4((uint64_t)&v35, (uint64_t)"dist_schedule");
          sub_22F0D4E74(v14);
          v34[0] = v29;
          sub_22E8906A0(v28, v34);
          sub_22E903BEC((unsigned int *)&v35);
          v22 = 0;
          v16 = 0;
        }
        v14 = v33;
        goto LABEL_21;
      }
    }
    else
    {
      v26 = sub_22ECB1B04(a1[1536]);
      if (v26)
        v27 = *(unsigned int *)(v26 + 960);
      else
        v27 = 89;
      if (sub_22ECA001C(v27, 24) != 89 && (sub_22EFC7ADC(a1[27]) & 1) == 0)
      {
        if (v21)
        {
          sub_22EFF605C(v21);
          v30 = v31;
        }
        else
        {
          v30 = 0;
        }
        v32 = sub_22EBCF22C((uint64_t)a1, v21, v30, 0, 0);
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v39 = 0;
        v40 = 0;
        v38 = 0;
        v14 = sub_22ECA02F4((uint64_t)a1, v32 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v35) & 0xFFFFFFFFFFFFFFFELL;
        v16 = sub_22ECA03E4(a1[11], (uint64_t)&v35);
        sub_22F244D40((uint64_t)&v35);
        goto LABEL_20;
      }
    }
    v16 = 0;
    v14 = v21;
LABEL_20:
    v22 = 1;
LABEL_21:
    if (v41.__r_.__value_.__s.__data_[16] && LODWORD(v41.__r_.__value_.__r.__words[1]) >= 0x41)
    {
      if (v41.__r_.__value_.__r.__words[0])
        MEMORY[0x2348A0E84](v41.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
    }
    if (v22)
      goto LABEL_5;
  }
  return 0;
}

_DWORD *sub_22ECA1BE0(_QWORD *a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v9;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *result;
  unsigned int *v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const char *v32;
  uint64_t v33;
  char v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[96];
  uint64_t OpenMPClauseName;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45[24];
  std::string v46;

  v9 = a7;
  if (*(_QWORD *)(a1[9] + 72) > 0x31)
  {
    if (a3 == 3)
    {
      v18 = a7 == 0;
      if (a2 != 3 && !a7)
      {
        v19 = a1[1536];
        v20 = (_DWORD *)sub_22ECB1B04(v19);
        if (v20[236] == 3 && v20[234] == 3 && v20[238] == 3)
        {
          v20[236] = a2;
          v20[237] = a4;
          v21 = sub_22ECB1B04(v19);
          *(_DWORD *)(v21 + 936) = a2;
          *(_DWORD *)(v21 + 940) = a4;
          v22 = sub_22ECB1B04(v19);
          *(_DWORD *)(v22 + 952) = a2;
          *(_DWORD *)(v22 + 956) = a4;
LABEL_16:
          result = (_DWORD *)sub_22E3CD3D4(a1[11] + 2032, 32, 3);
          *result = a4;
          result[1] = a8;
          result[2] = 17;
          result[3] = a5;
          result[4] = a2;
          result[5] = a6;
          result[6] = a3;
          result[7] = v9;
          return result;
        }
LABEL_17:
        sub_22E8FCA40(a1, a4, 0x10C0u, 0, (uint64_t)v40);
        v25 = (unsigned int *)v40;
LABEL_18:
        sub_22E903BEC(v25);
        return 0;
      }
    }
    else
    {
      if (a2 != 3)
      {
        v17 = a1[1536];
        if (*(_DWORD *)(sub_22ECB1B04(v17) + 8 * a3 + 936) == 3)
        {
          v16 = a3;
          goto LABEL_15;
        }
        goto LABEL_17;
      }
      v18 = 1;
    }
    v30 = *(_QWORD *)(a1[9] + 72);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"'scalar', 'aggregate', 'pointer'";
    v46.__r_.__value_.__l.__size_ = 32;
    v31 = a2 == 3 || v18;
    if (v30 == 50)
    {
      v32 = "'alloc', 'from', 'to', 'tofrom', 'firstprivate', 'none', 'default'";
      v33 = 66;
    }
    else
    {
      v32 = "'alloc', 'from', 'to', 'tofrom', 'firstprivate', 'none', 'default', 'present'";
      v33 = 77;
    }
    v43 = (uint64_t)v32;
    v44 = v33;
    if ((v31 & 1) != 0)
    {
      v34 = !v18;
      if (a2 != 3)
        v34 = 1;
      if ((v34 & 1) == 0)
      {
        sub_22E8FCA40(a1, a6, 0x10FEu, 0, (uint64_t)v45);
        v35 = (std::string *)&v43;
LABEL_41:
        v38 = sub_22F2F2210((uint64_t)v45, (uint64_t)v35);
        OpenMPClauseName = llvm::omp::getOpenMPClauseName();
        v42 = v39;
        sub_22F2F2210(v38, (uint64_t)&OpenMPClauseName);
        v25 = v45;
        goto LABEL_18;
      }
      sub_22E8FCA40(a1, a6, 0x10FEu, 0, (uint64_t)v45);
      v36 = sub_22F2F2210((uint64_t)v45, (uint64_t)&v43);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v42 = v37;
      sub_22F2F2210(v36, (uint64_t)&OpenMPClauseName);
      sub_22E903BEC(v45);
    }
    sub_22E8FCA40(a1, v9, 0x10FEu, 0, (uint64_t)v45);
    v35 = &v46;
    goto LABEL_41;
  }
  if (a2 == 7 && !a3)
  {
    v16 = 0;
    v17 = a1[1536];
LABEL_15:
    v23 = sub_22ECB1B04(v17) + 8 * v16;
    *(_DWORD *)(v23 + 936) = a2;
    *(_DWORD *)(v23 + 940) = a4;
    goto LABEL_16;
  }
  memset(&v46, 0, sizeof(v46));
  std::string::append(&v46, "'");
  if (a2 == 7)
    v26 = 0;
  else
    v26 = 7;
  if (a2 != 7)
    v9 = a6;
  v27 = sub_22F42187C((const char *)0x11, v26);
  std::string::append(&v46, v27);
  std::string::append(&v46, "'");
  sub_22E8FCA40(a1, v9, 0x10FEu, 0, (uint64_t)v45);
  v28 = sub_22E90749C((uint64_t)v45, &v46);
  v43 = llvm::omp::getOpenMPClauseName();
  v44 = v29;
  sub_22F2F2210(v28, (uint64_t)&v43);
  sub_22E903BEC(v45);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t sub_22ECA1F20(_QWORD *a1, int a2, void *a3, int a4, int a5, int a6, int a7)
{
  BOOL v14;
  int v15;
  int v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36[24];
  _QWORD v37[2];
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  char v44;

  v14 = a2 != 2 || a6 == 0;
  v15 = !v14;
  if (!v14)
  {
    sub_22ECA1038(0x16u, 0, 2, 0, 0, v43);
    sub_22E8FCA40(a1, a6, 0x10FEu, 0, (uint64_t)v38);
    v30 = sub_22E90749C((uint64_t)v38, v43);
    v37[0] = llvm::omp::getOpenMPClauseName();
    v37[1] = v31;
    sub_22F2F2210(v30, (uint64_t)v37);
    sub_22E903BEC((unsigned int *)v38);
    if (v44 < 0)
      operator delete(v43[0]);
  }
  v43[0] = a3;
  v16 = sub_22ECA04F4((uint64_t *)v43, a1, 22, 0, 0, 89, 0, 0);
  result = 0;
  if (((v15 | v16 ^ 1) & 1) == 0)
  {
    if (!a2)
    {
      v21 = a1[1536];
      v22 = *(unsigned int *)(v21 + 21512);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v21 + 21504);
        v24 = v23 + 8 * v22;
        while (1)
        {
          v25 = *(unsigned int **)(*(_QWORD *)v23 + 40);
          v28 = *v25;
          v26 = v25 + 4;
          v27 = v28;
          if (v28)
            break;
LABEL_23:
          v23 += 8;
          if (v23 == v24)
            goto LABEL_24;
        }
        v29 = 8 * v27;
        while (*(_DWORD *)(*(_QWORD *)v26 + 8) != 69)
        {
          v26 += 2;
          v29 -= 8;
          if (!v29)
            goto LABEL_23;
        }
      }
      else
      {
LABEL_24:
        sub_22F308EA4(a1, a4, 0x106Eu, 0, (uint64_t)v36);
        sub_22E903BEC(v36);
      }
    }
    v18 = 89;
    v19 = 0;
    if (((1 << (*(_DWORD *)(sub_22ECB1B04(a1[1536]) + 960) - 56)) & 0x6100003CF9DLL) != 0)
    {
      if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
      {
        v19 = 0;
      }
      else
      {
        v32 = v43[0];
        if (v43[0])
        {
          sub_22EFF605C((uint64_t)v43[0]);
          v33 = v34;
        }
        else
        {
          v33 = 0;
        }
        v35 = sub_22EBCF22C((uint64_t)a1, (unint64_t)v32, v33, 0, 0);
        v38[0] = 0;
        v38[1] = 0;
        v39 = 0;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        v43[0] = (void *)(sub_22ECA02F4((uint64_t)a1, v35 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v38) & 0xFFFFFFFFFFFFFFFELL);
        v19 = sub_22ECA03E4(a1[11], (uint64_t)v38);
        sub_22F244D40((uint64_t)v38);
      }
      v18 = 74;
    }
    result = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
    v20 = v43[0];
    *(_DWORD *)result = a4;
    *(_DWORD *)(result + 4) = a7;
    *(_DWORD *)(result + 8) = 22;
    *(_DWORD *)(result + 32) = a2;
    *(_DWORD *)(result + 36) = a6;
    *(_QWORD *)(result + 40) = v20;
    *(_QWORD *)(result + 16) = v19;
    *(_DWORD *)(result + 24) = v18;
    *(_DWORD *)(result + 28) = a5;
  }
  return result;
}

BOOL sub_22ECA21B0(_QWORD *a1, int a2, int a3, int a4)
{
  _BOOL8 v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  void *__p[2];
  char v11;
  unsigned int v12[24];
  __int32 *v13;
  uint64_t v14;
  _DWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a4)
    v4 = a2 == 5;
  else
    v4 = 0;
  if (!v4)
    return v4;
  v13 = v15;
  v14 = 0x200000000;
  if (a3 != 5)
  {
    v15[0] = a3;
    LODWORD(v14) = 1;
    if (a3 == 7)
    {
      v6 = 6;
      goto LABEL_11;
    }
    if (a3 == 6)
    {
      v6 = 7;
LABEL_11:
      v15[1] = v6;
      LODWORD(v14) = 2;
    }
  }
  sub_22E8FCA40(a1, a4, 0x10FEu, 0, (uint64_t)v12);
  sub_22ECA1038(0x47u, 6u, 9, v13, v14, __p);
  v7 = sub_22F2F3734((uint64_t)v12, __p);
  v9[0] = llvm::omp::getOpenMPClauseName();
  v9[1] = v8;
  sub_22F2F2210(v7, (uint64_t)v9);
  if (v11 < 0)
    operator delete(__p[0]);
  sub_22E903BEC(v12);
  if (v13 != v15)
    free(v13);
  return v4;
}

uint64_t sub_22ECA22F4(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  _BYTE v21[96];
  int v22[24];
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  __int16 v34;
  int v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a2 & 0x1E000) != 0)
    return 1;
  if (*(_DWORD *)a2 != 161 || (*(_DWORD *)(*(_QWORD *)(a2 + 16) + 28) & 0x7Fu) - 60 >= 7)
  {
    sub_22E8FCA40(a1, a3, 0x1092u, 0, (uint64_t)&v23);
    v22[0] = 0;
    sub_22E8900C4((uint64_t)&v23, v22);
    sub_22E903BEC((unsigned int *)&v23);
    return 0;
  }
  v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "omp_interop_t", 0xDuLL);
  v10 = a3;
  v23 = 0;
  v24 = v26;
  v25 = 0x800000000;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = a1;
  v31 = v9;
  v32 = a3;
  sub_22EFC6D6C((uint64_t)v33, v9);
  v33[1] = 0;
  v33[2] = 0;
  v34 = 0;
  v35 = 257;
  v36 = 0;
  sub_22EC56024((uint64_t)&v23);
  if (!sub_22EC63520(a1, &v23, a1[1611], 0, 0))
    goto LABEL_21;
  v11 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_DWORD *)(v11 + 28) & 0x7F;
  if (v12 <= 0x2F && ((1 << v12) & 0xC00000060000) != 0)
  {
    v11 = sub_22EFBAEA4(v11);
    v12 = *(_DWORD *)(v11 + 28) & 0x7F;
  }
  if (v12 - 43 < 0xFFFFFFF6)
  {
LABEL_21:
    sub_22E8FCA40(a1, a3, 0x1089u, 0, (uint64_t)v22);
    sub_22F2F30F4((uint64_t)v22, (uint64_t)"omp_interop_t");
    goto LABEL_22;
  }
  v14 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFF0;
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
    v15 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(a2 + 8));
  if (*(_QWORD *)(v14 + 8) != *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8))
  {
    sub_22E8FCA40(a1, v10, 0x1093u, 0, (uint64_t)v21);
    v16 = (unsigned int *)v21;
LABEL_23:
    sub_22E903BEC(v16);
    v4 = 0;
    goto LABEL_24;
  }
  if (a4 != 41 && a4 != 20)
  {
    v4 = 1;
    goto LABEL_24;
  }
  v17 = *(_QWORD *)(a2 + 8);
  v4 = 1;
  if (sub_22ECB1E3C((uint64_t)a1, v17, 1, 0))
  {
    sub_22E8FCA40(a1, v10, 0x1092u, 0, (uint64_t)v22);
    v20 = 1;
    sub_22E8900C4((uint64_t)v22, &v20);
LABEL_22:
    v16 = (unsigned int *)v22;
    goto LABEL_23;
  }
LABEL_24:
  if (BYTE1(v35))
  {
    if ((_DWORD)v23 == 5)
    {
      sub_22EC64D18(v30, (uint64_t)&v23);
    }
    else if (v28 && (*(_DWORD *)(v30[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v30, (uint64_t)&v23);
    }
  }
  if (v27)
  {
    v19 = sub_22EC6CBD0(v27);
    MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
  }
  if (v24 != (_QWORD *)v26)
    free(v24);
  return v4;
}

_DWORD *sub_22ECA2624(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned __int8 **v6;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int8 **v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _BYTE *v72;
  _DWORD *v73;
  _QWORD v78[2];
  int v79;
  uint64_t OpenMPDirectiveName;
  uint64_t v81;
  uint64_t OpenMPClauseName;
  uint64_t v83;
  int *v84;
  int v85;
  uint64_t v86;
  _BYTE v87[4];
  int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  _BYTE v96[64];
  _QWORD *v97;
  uint64_t v98;
  _QWORD v99[10];

  v99[8] = *MEMORY[0x24BDAC8D0];
  v97 = v99;
  v98 = 0x800000000;
  v94 = v96;
  v95 = 0x800000000;
  if (!a3)
  {
    v73 = 0;
    goto LABEL_119;
  }
  v6 = a2;
  v8 = &a2[a3];
  do
  {
    v9 = *v6;
    v93 = 0;
    v91 = v9;
    v92 = 0;
    v10 = sub_22EC82530(a1, &v91, (int *)&v93, &v92, 0);
    if ((v11 & 1) != 0)
    {
      v12 = v98;
      if (v98 >= (unint64_t)HIDWORD(v98))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v98;
      }
      v97[v12] = v9;
      LODWORD(v98) = v98 + 1;
      v13 = v95;
      if (v95 >= (unint64_t)HIDWORD(v95))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v95;
      }
      v94[v13] = 0;
      LODWORD(v95) = v95 + 1;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_92;
    v14 = *(_QWORD *)(v10 + 48);
    v89 = v14;
    v15 = (*(_DWORD *)(v10 + 28) & 0x7Fu) - 60 >= 7 ? 0 : v10;
    v16 = v93;
    v84 = (int *)&unk_24FAB6EF8;
    v85 = 4303;
    if ((sub_22EE8B0B0((uint64_t)a1, v93, v14) & 1) != 0)
      goto LABEL_92;
    v17 = *(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF0);
    if (!v17 || (v18 = *(_DWORD *)(v17 + 16), (v18 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      {
        v19 = &v89;
        goto LABEL_18;
      }
      v17 = sub_22F10CF48(v17);
      if (!v17)
      {
        v19 = &v89;
        goto LABEL_18;
      }
      v18 = *(_DWORD *)(v17 + 16);
    }
    if ((v18 & 0x100000) != 0)
    {
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v17)
        {
          v71 = *(_DWORD *)(v17 + 16);
          if ((v71 & 0xFE) == 0x28)
            continue;
        }
        v17 = sub_22F10CF48(v17);
        v71 = *(_DWORD *)(v17 + 16);
      }
      while ((v71 & 0x100000) != 0);
    }
    v19 = (unint64_t *)(v17 + 32);
LABEL_18:
    v89 = *v19;
    if (sub_22ECAA7DC(a1, v90, v89, 63, v16, 1, 0))
      goto LABEL_92;
    sub_22EC7F2A4(a1[1536], v90, 0, (uint64_t)v87);
    if (v88 != 63 && v88 != 85)
    {
      sub_22E8FCA40(a1, v16, 0x110Fu, 0, (uint64_t)&v84);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v83 = v69;
      v66 = sub_22F2F2210((uint64_t)&v84, (uint64_t)&OpenMPClauseName);
      OpenMPDirectiveName = llvm::omp::getOpenMPClauseName();
      v81 = v70;
      v68 = &OpenMPDirectiveName;
      goto LABEL_99;
    }
    v20 = a1[1536];
    v21 = sub_22ECB1B04(v20);
    if (v21)
      v22 = *(_DWORD *)(v21 + 960);
    else
      v22 = 89;
    v23 = v89;
    v24 = (unint64_t *)(v89 & 0xFFFFFFFFFFFFFFF0);
    v25 = *(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF0);
    v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v26 != 32
      && v26 != 39
      && (*(_BYTE *)(v25 + 17) & 8) != 0
      && (v22 - 36) <= 0x29
      && ((1 << (v22 - 36)) & 0x34000000C03) != 0)
    {
      sub_22E8FCA40(a1, v16, 0x110Bu, 0, (uint64_t)&v84);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v83 = v56;
      v57 = sub_22F2F2210((uint64_t)&v84, (uint64_t)&OpenMPClauseName);
      v58 = sub_22E8901B8(v57, (uint64_t *)&v89);
      OpenMPDirectiveName = llvm::omp::getOpenMPDirectiveName();
      v81 = v59;
      sub_22F2F2210(v58, (uint64_t)&OpenMPDirectiveName);
      sub_22E903BEC((unsigned int *)&v84);
      if (v15)
      {
        v60 = sub_22EFBBF74(v15, a1[11]);
        v61 = *(_DWORD *)(v90 + 24);
        if (v60)
        {
          v62 = 5543;
LABEL_102:
          sub_22E8FCA40(a1, v61, v62, 0, (uint64_t)&v84);
          sub_22E890024((uint64_t)&v84, (uint64_t *)&v90);
          sub_22E903BEC((unsigned int *)&v84);
          goto LABEL_92;
        }
      }
      else
      {
        v61 = *(_DWORD *)(v90 + 24);
      }
      v62 = 6001;
      goto LABEL_102;
    }
    if (*(_DWORD *)(a1[9] + 72) <= 0x2Du)
    {
      if ((v22 - 56) > 0x2A || ((1 << (v22 - 56)) & 0x6000001CF91) == 0)
        goto LABEL_36;
LABEL_34:
      v79 = 0;
      v84 = &v79;
      if (!sub_22EC829E0(v20, v15, 1u, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF8254, (uint64_t)&v84))
      {
        v23 = v89;
        v24 = (unint64_t *)(v89 & 0xFFFFFFFFFFFFFFF0);
        goto LABEL_36;
      }
      sub_22E8FCA40(a1, v16, 0x110Au, 0, (uint64_t)&v84);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v83 = v63;
      v64 = sub_22F2F2210((uint64_t)&v84, (uint64_t)&OpenMPClauseName);
      OpenMPDirectiveName = llvm::omp::getOpenMPClauseName();
      v81 = v65;
      v66 = sub_22F2F2210(v64, (uint64_t)&OpenMPDirectiveName);
      v78[0] = llvm::omp::getOpenMPDirectiveName();
      v78[1] = v67;
      v68 = v78;
LABEL_99:
      sub_22F2F2210(v66, (uint64_t)v68);
      sub_22E903BEC((unsigned int *)&v84);
      sub_22EC82B14(a1, a1[1536], v90, (uint64_t)v87, 0);
      goto LABEL_92;
    }
    if (v22 == 56)
      goto LABEL_34;
LABEL_36:
    v27 = *v24;
    if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
      v27 = (unint64_t)sub_22F10D2BC(v23);
    v28 = 0;
    v29 = v27 & 0xFFFFFFFFFFFFFFF0;
    v89 = v27 & 0xFFFFFFFFFFFFFFF0;
    v30 = *(_QWORD *)(v90 + 40);
    v31 = "";
    if ((v30 & 7) == 0)
    {
      v32 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (v32)
      {
        v33 = *(_DWORD **)(v32 + 16);
        v34 = *v33;
        v31 = (const char *)(v33 + 4);
        v28 = v34;
      }
    }
    if ((*(_BYTE *)(v90 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v90);
      v35 = v36;
    }
    else
    {
      v35 = 0;
    }
    v37 = v91;
    if (v15)
      v38 = v91;
    else
      v38 = 0;
    v39 = sub_22EC822F4(a1, v16, v29, v31, v28, v35, (uint64_t)v38);
    sub_22EA117E4();
    v40 = *(_DWORD *)(v39 + 28);
    if ((v40 & 0x80) != 0)
      goto LABEL_92;
    v41 = *(_QWORD *)(*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v41 + 8) & 0xF) != 0)
    {
      v41 = (unint64_t)sub_22F10D2BC(*((_QWORD *)v9 + 1));
      v40 = *(_DWORD *)(v39 + 28);
    }
    v42 = v41 & 0xFFFFFFFFFFFFFFF0;
    *(_DWORD *)(v39 + 28) = v40 | 0x800;
    sub_22EFC9100(v39, a1[11]);
    v43 = a1[11];
    v84 = *(int **)(v39 + 40);
    v85 = v16;
    sub_22EFC6D6C((uint64_t)&v86, (uint64_t)v84);
    v44 = sub_22E3CD3D4(v43 + 2032, 32, 3);
    sub_22EFF6AE4(v44, v43, 0, 0, 0, v39, 0, (uint64_t)&v84, 0, 0, v42, 1, 0, 0);
    v45 = 0;
    if (!v15)
    {
      if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
        v45 = 0;
      else
        v45 = sub_22EC9B8AC((uint64_t)a1, v90, v37, 0);
    }
    v46 = v9;
    do
    {
      v47 = (uint64_t)v46;
      v48 = *v46;
      if (v48 > 213)
      {
        if (v48 == 233)
        {
          if ((*(_DWORD *)v47 & 0x7C0000) != 0x300000)
            break;
          v50 = (unsigned __int8 **)(v47 + 16);
        }
        else
        {
          if (v48 != 214)
            break;
          v50 = (unsigned __int8 **)(v47 + 24);
        }
        goto LABEL_69;
      }
      if (v48 == 155)
      {
        if ((**(_DWORD **)(v47 + 16) & 0x18000) != 0)
          break;
        if (*(_BYTE *)(v47 + 48))
          v50 = (unsigned __int8 **)(v47 + 24);
        else
          v50 = (unsigned __int8 **)(v47 + 32);
        goto LABEL_69;
      }
      if (v48 != 176)
        break;
      v49 = *(unsigned int *)(v47 + 20);
      if ((_DWORD)v49 == -1)
        break;
      v50 = (unsigned __int8 **)(v47 + 8 * v49 + 40);
LABEL_69:
      v46 = *v50;
    }
    while (v46 != (unsigned __int8 *)v47);
    sub_22EC83920(a1[1536], v90, v47, 63, v45, 0, 0);
    if (v15 || sub_22EFC7ADC(a1[27]))
    {
      do
      {
        v45 = (uint64_t)v9;
        v51 = *v9;
        if (v51 > 0xD5)
        {
          if (v51 == 233)
          {
            if ((*(_DWORD *)v9 & 0x7C0000) != 0x300000)
              break;
            v53 = v9 + 16;
          }
          else
          {
            if (v51 != 214)
              break;
            v53 = v9 + 24;
          }
        }
        else if (v51 == 155)
        {
          if ((**((_DWORD **)v9 + 2) & 0x18000) != 0)
            break;
          if (v9[48])
            v53 = v9 + 24;
          else
            v53 = v9 + 32;
        }
        else
        {
          if (v51 != 176)
            break;
          v52 = *((unsigned int *)v9 + 5);
          if ((_DWORD)v52 == -1)
            break;
          v53 = &v9[8 * v52 + 40];
        }
        v9 = *(unsigned __int8 **)v53;
      }
      while (*(_QWORD *)v53 != v45);
    }
    v54 = v98;
    if (v98 >= (unint64_t)HIDWORD(v98))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v54 = v98;
    }
    v97[v54] = v45;
    LODWORD(v98) = v98 + 1;
    v55 = v95;
    if (v95 >= (unint64_t)HIDWORD(v95))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v55 = v95;
    }
    v94[v55] = v44;
    LODWORD(v95) = v95 + 1;
LABEL_92:
    ++v6;
  }
  while (v6 != v8);
  v72 = v94;
  if ((_DWORD)v98)
  {
    v73 = sub_22F3EA3F8(a1[11], a4, a5, a6, v97, v98, v94, v95);
    v72 = v94;
  }
  else
  {
    v73 = 0;
  }
  if (v72 != v96)
    free(v72);
LABEL_119:
  if (v97 != v99)
    free(v97);
  return v73;
}

uint64_t sub_22ECA2F18(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, int a7, int a8, int a9)
{
  unsigned __int8 **v9;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  _BYTE *v101;
  uint64_t v102;
  void *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  const void *v122;
  uint64_t v124;
  unsigned __int8 **v125;
  void *v126;
  _QWORD v127[2];
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  _BYTE v131[21];
  unsigned int v132[24];
  unint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  unsigned int v136;
  __int128 v137;
  _BYTE v138[63];
  void *v139;
  uint64_t v140;
  _BYTE v141[32];
  void *v142;
  uint64_t v143;
  _BYTE v144[32];
  void *v145;
  uint64_t v146;
  _BYTE v147[64];
  void *v148;
  uint64_t v149;
  _BYTE v150[64];
  void *OpenMPClauseName;
  uint64_t v152;
  _BYTE v153[64];
  _BYTE *v154;
  uint64_t v155;
  _BYTE v156[64];
  uint64_t v157;

  v9 = a2;
  v157 = *MEMORY[0x24BDAC8D0];
  if (a4 == 1 && a5)
  {
    sub_22E8FCA40(a1, a5, 0x10FEu, 0, (uint64_t)&v137);
    sub_22ECA1038(0x2Bu, 0, 1, 0, 0, &v154);
    v97 = sub_22F2F3734((uint64_t)&v137, (void **)&v154);
    OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
    v152 = v98;
    sub_22F2F2210(v97, (uint64_t)&OpenMPClauseName);
    if ((v156[7] & 0x80000000) != 0)
      operator delete(v154);
    sub_22E903BEC((unsigned int *)&v137);
    return 0;
  }
  v11 = v156;
  v154 = v156;
  v155 = 0x800000000;
  v12 = v153;
  OpenMPClauseName = v153;
  v152 = 0x800000000;
  v148 = v150;
  v149 = 0x800000000;
  v13 = v147;
  v145 = v147;
  v146 = 0x800000000;
  v142 = v144;
  v143 = 0x400000000;
  v139 = v141;
  v140 = 0x400000000;
  if (!a3)
  {
    v95 = 0;
    goto LABEL_169;
  }
  v117 = a5;
  v125 = &a2[a3];
  do
  {
    v14 = *v9;
    v136 = 0;
    v134 = v14;
    v135 = 0;
    v15 = sub_22EC82530(a1, &v134, (int *)&v136, &v135, 0);
    if ((v16 & 1) != 0)
    {
      v17 = v155;
      if (v155 >= (unint64_t)HIDWORD(v155))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v155;
      }
      *(_QWORD *)&v154[8 * v17] = v14;
      LODWORD(v155) = v155 + 1;
      v18 = v152;
      if (v152 >= (unint64_t)HIDWORD(v152))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v152;
      }
      *((_QWORD *)OpenMPClauseName + v18) = 0;
      LODWORD(v152) = v152 + 1;
      v19 = v149;
      if (v149 >= (unint64_t)HIDWORD(v149))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v149;
      }
      *((_QWORD *)v148 + v19) = 0;
      LODWORD(v149) = v149 + 1;
      v20 = v146;
      if (v146 >= (unint64_t)HIDWORD(v146))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v146;
      }
      *((_QWORD *)v145 + v20) = 0;
      LODWORD(v146) = v146 + 1;
    }
    v133 = v15;
    if (v15)
    {
      v21 = *(_QWORD *)(v15 + 48);
      v22 = (*(_DWORD *)(v15 + 28) & 0x7Fu) - 60 >= 7 ? 0 : v15;
      v23 = v136;
      *(_QWORD *)&v137 = &unk_24FAB6EF8;
      DWORD2(v137) = 4258;
      if ((sub_22EE8B0B0((uint64_t)a1, v136, v21) & 1) == 0)
      {
        v24 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
        if (!v24 || (v25 = *(_DWORD *)(v24 + 16), (v25 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            goto LABEL_23;
          v24 = sub_22F10CF48(v24);
          if (!v24)
            goto LABEL_23;
          v25 = *(_DWORD *)(v24 + 16);
        }
        if ((v25 & 0x100000) != 0)
        {
          do
          {
            v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v24)
            {
              v92 = *(_DWORD *)(v24 + 16);
              if ((v92 & 0xFE) == 0x28)
                continue;
            }
            v24 = sub_22F10CF48(v24);
            v92 = *(_DWORD *)(v24 + 16);
          }
          while ((v92 & 0x100000) != 0);
        }
        v21 = *(_QWORD *)(v24 + 32);
LABEL_23:
        if (sub_22ECAA7DC(a1, v133, v21, 43, v23, 1, 0))
          goto LABEL_41;
        if (!a4)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v27 = *(_DWORD *)(v26 + 16);
          if (v26)
            v28 = v27 == 11;
          else
            v28 = 0;
          if (v28)
          {
            if (((v27 >> 19) & 0x1FF) - 166 >= 0x35)
              goto LABEL_35;
          }
          else if (v26 && v27 == 44)
          {
            v29 = sub_22F114198(*(_QWORD *)(v26 + 24));
            if ((*(_BYTE *)(v29 + 74) & 1) == 0 && *(_QWORD *)(v29 + 128) <= 7uLL)
              goto LABEL_35;
          }
          else
          {
            v33 = v27 > 0x27u;
            v34 = (1 << v27) & 0x8180001600;
            if (v33 || v34 == 0)
            {
LABEL_35:
              sub_22E8FCA40(a1, v23, 0x10A1u, 0, (uint64_t)v132);
              sub_22E903BEC(v132);
              if (v22)
              {
                v30 = sub_22EFBBF74(v22, a1[11]);
                v31 = *(_DWORD *)(v133 + 24);
                if (v30)
                {
                  v32 = 5543;
LABEL_40:
                  sub_22E8FCA40(a1, v31, v32, 0, (uint64_t)&v137);
                  sub_22E890024((uint64_t)&v137, (uint64_t *)&v133);
                  sub_22E903BEC((unsigned int *)&v137);
                  goto LABEL_41;
                }
              }
              else
              {
                v31 = *(_DWORD *)(v133 + 24);
              }
              v32 = 6001;
              goto LABEL_40;
            }
          }
        }
        v120 = v13;
        v36 = a1[1536];
        v37 = sub_22ECB1B04(v36);
        if (v37)
          v38 = *(_DWORD *)(v37 + 960);
        else
          v38 = 89;
        sub_22EC7F2A4(v36, v133, 0, (uint64_t)&v130);
        v39 = DWORD1(v130);
        if (DWORD1(v130) != 43 && DWORD1(v130) != 85)
        {
          v40 = sub_22F421B08(v38);
          if ((v39 != 29 || v40) && (v39 != 63 || *(_QWORD *)v131))
          {
            sub_22E8FCA40(a1, v23, 0x110Fu, 0, (uint64_t)&v137);
            v128 = llvm::omp::getOpenMPClauseName();
            v129 = v79;
            v80 = sub_22F2F2210((uint64_t)&v137, (uint64_t)&v128);
LABEL_124:
            v127[0] = llvm::omp::getOpenMPClauseName();
            v127[1] = v81;
            sub_22F2F2210(v80, (uint64_t)v127);
            sub_22E903BEC((unsigned int *)&v137);
            sub_22EC82B14(a1, a1[1536], v133, (uint64_t)&v130, 0);
LABEL_125:
            v13 = v120;
            goto LABEL_41;
          }
        }
        v112 = v39;
        v110 = *(_QWORD *)&v131[8];
        if (sub_22F421A30(v38)
          && !sub_22F421A78(v38)
          && ((v38 - 66) > 0x21 || ((1 << (v38 - 66)) & 0x3001CC073) == 0))
        {
          sub_22ECAA908((uint64_t)&v137, a1[1536], v133, 1);
          v130 = v137;
          *(_OWORD *)v131 = *(_OWORD *)v138;
          *(_QWORD *)&v131[13] = *(_QWORD *)&v138[13];
          if (DWORD1(v137) != 73)
          {
            sub_22E8FCA40(a1, v23, 0x10E1u, 0, (uint64_t)&v137);
            v128 = llvm::omp::getOpenMPClauseName();
            v129 = v82;
            v80 = sub_22F2F2210((uint64_t)&v137, (uint64_t)&v128);
            goto LABEL_124;
          }
        }
        v118 = v11;
        v41 = sub_22EF5BA38(a1[11], v21);
        v42 = v41 & 0xFFFFFFFFFFFFFFF0;
        v43 = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0);
        if (!v43 || (v44 = *(_DWORD *)(v43 + 16), (v44 & 0xFE) != 0x28))
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            goto LABEL_60;
          v43 = sub_22F10CF48(v43);
          if (!v43)
            goto LABEL_60;
          v44 = *(_DWORD *)(v43 + 16);
        }
        if ((v44 & 0x100000) != 0)
        {
          do
          {
            v43 = *(_QWORD *)(*(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v43)
            {
              v93 = *(_DWORD *)(v43 + 16);
              if ((v93 & 0xFE) == 0x28)
                continue;
            }
            v43 = sub_22F10CF48(v43);
            v93 = *(_DWORD *)(v43 + 16);
          }
          while ((v93 & 0x100000) != 0);
        }
        v41 = *(_QWORD *)(v43 + 32);
        v42 = v41 & 0xFFFFFFFFFFFFFFF0;
LABEL_60:
        v45 = v135;
        v46 = *(_QWORD *)v42;
        if ((*(_BYTE *)(*(_QWORD *)v42 + 8) & 0xF) != 0)
          v46 = (unint64_t)sub_22F10D2BC(v41);
        if ((*(_BYTE *)(v133 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v133);
          v47 = v48;
        }
        else
        {
          v47 = 0;
        }
        v49 = sub_22EC822F4(a1, v45, v46 & 0xFFFFFFFFFFFFFFF0, ".lastprivate.src", 0x10uLL, v47, 0);
        v50 = *(_QWORD *)v42;
        v51 = v12;
        if ((*(_BYTE *)(*(_QWORD *)v42 + 8) & 0xF) != 0)
          v50 = (unint64_t)sub_22F10D2BC(v41);
        v52 = v50 & 0xFFFFFFFFFFFFFFF0;
        *(_DWORD *)(v49 + 28) |= 0x800u;
        sub_22EFC9100(v49, a1[11]);
        v53 = a1[11];
        *(_QWORD *)&v137 = *(_QWORD *)(v49 + 40);
        DWORD2(v137) = v23;
        sub_22EFC6D6C((uint64_t)v138, v137);
        v121 = sub_22E3CD3D4(v53 + 2032, 32, 3);
        sub_22EFF6AE4(v121, v53, 0, 0, 0, v49, 0, (uint64_t)&v137, 0, 0, v52, 1, 0, 0);
        v54 = 0;
        v55 = v135;
        if ((*(_BYTE *)(v133 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v133);
          v54 = v56;
        }
        v57 = sub_22EC822F4(a1, v55, v41, ".lastprivate.dst", 0x10uLL, v54, 0);
        *(_DWORD *)(v57 + 28) |= 0x800u;
        sub_22EFC9100(v57, a1[11]);
        v58 = a1[11];
        *(_QWORD *)&v137 = *(_QWORD *)(v57 + 40);
        DWORD2(v137) = v23;
        sub_22EFC6D6C((uint64_t)v138, v137);
        v59 = sub_22E3CD3D4(v58 + 2032, 32, 3);
        sub_22EFF6AE4(v59, v58, 0, 0, 0, v57, 0, (uint64_t)&v137, 0, 0, v41, 1, 0, 0);
        v60 = sub_22EB4785C((uint64_t)a1, 0, v23, 21, v59, v121);
        v11 = v118;
        v12 = v51;
        if ((v60 & 1) != 0)
          goto LABEL_125;
        v61 = sub_22EBCF22C((uint64_t)a1, v60 & 0xFFFFFFFFFFFFFFFELL, v23, 0, 0);
        if ((v61 & 1) != 0)
          goto LABEL_125;
        v62 = v61;
        if (v22 || (sub_22EFC7ADC(a1[27]) & 1) != 0)
        {
          v63 = 0;
          goto LABEL_74;
        }
        if (v112 == 29)
        {
          v63 = v110;
          if (!v110)
          {
LABEL_133:
            v111 = v63;
            v83 = sub_22EB1A358(a1, v63, 0);
            if (v83 < 2)
              goto LABEL_125;
            v84 = v83;
            v85 = sub_22ECB1B04(a1[1536]);
            v86 = v85 ? *(_QWORD *)(v85 + 992) : 0;
            v89 = sub_22EB4785C((uint64_t)a1, v86, v23, 21, (uint64_t)v134, v84 & 0xFFFFFFFFFFFFFFFELL);
            if (v89 < 2)
              goto LABEL_125;
            v90 = sub_22EBCEBF8((uint64_t)a1, (unsigned __int8 *)(v89 & 0xFFFFFFFFFFFFFFFELL));
            v91 = v140;
            if (v140 >= (unint64_t)HIDWORD(v140))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v91 = v140;
            }
            *((_QWORD *)v139 + v91) = v90 & 0xFFFFFFFFFFFFFFFELL;
            LODWORD(v140) = v140 + 1;
            v63 = v111;
LABEL_74:
            v64 = a1[1536];
            if (v14)
            {
              v65 = v14;
              while (1)
              {
                v66 = (uint64_t)v65;
                v67 = *v65;
                if (v67 > 213)
                {
                  if (v67 == 233)
                  {
                    if ((*(_DWORD *)v66 & 0x7C0000) != 0x300000)
                      goto LABEL_91;
                    v69 = (unsigned __int8 **)(v66 + 16);
                  }
                  else
                  {
                    if (v67 != 214)
                      goto LABEL_91;
                    v69 = (unsigned __int8 **)(v66 + 24);
                  }
                }
                else if (v67 == 155)
                {
                  if ((**(_DWORD **)(v66 + 16) & 0x18000) != 0)
                    goto LABEL_91;
                  if (*(_BYTE *)(v66 + 48))
                    v69 = (unsigned __int8 **)(v66 + 24);
                  else
                    v69 = (unsigned __int8 **)(v66 + 32);
                }
                else
                {
                  if (v67 != 176 || (v68 = *(unsigned int *)(v66 + 20), (_DWORD)v68 == -1))
                  {
LABEL_91:
                    sub_22EC83920(v64, v133, v66, 43, v63, 0, 0);
                    if (v22)
                      goto LABEL_99;
                    goto LABEL_94;
                  }
                  v69 = (unsigned __int8 **)(v66 + 8 * v68 + 40);
                }
                v65 = *v69;
                if (v65 == (unsigned __int8 *)v66)
                  goto LABEL_91;
              }
            }
            sub_22EC83920(v64, v133, 0, 43, v63, 0, 0);
            v70 = 0;
            if (!v22)
            {
LABEL_94:
              v71 = sub_22EFC7ADC(a1[27]);
              if (v71)
                v70 = 0;
              else
                v70 = (unsigned __int8 *)v63;
              if (v14 && (v71 & 1) != 0)
              {
                do
                {
LABEL_99:
                  v70 = v14;
                  v72 = *v14;
                  if (v72 > 0xD5)
                  {
                    if (v72 == 233)
                    {
                      if ((*(_DWORD *)v14 & 0x7C0000) != 0x300000)
                        break;
                      v74 = v14 + 16;
                    }
                    else
                    {
                      if (v72 != 214)
                        break;
                      v74 = v14 + 24;
                    }
                  }
                  else if (v72 == 155)
                  {
                    if ((**((_DWORD **)v14 + 2) & 0x18000) != 0)
                      break;
                    if (v14[48])
                      v74 = v14 + 24;
                    else
                      v74 = v14 + 32;
                  }
                  else
                  {
                    if (v72 != 176)
                      break;
                    v73 = *((unsigned int *)v14 + 5);
                    if ((_DWORD)v73 == -1)
                      break;
                    v74 = &v14[8 * v73 + 40];
                  }
                  v14 = *(unsigned __int8 **)v74;
                }
                while (*(unsigned __int8 **)v74 != v70);
              }
            }
            v75 = v155;
            if (v155 >= (unint64_t)HIDWORD(v155))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v75 = v155;
            }
            *(_QWORD *)&v154[8 * v75] = v70;
            LODWORD(v155) = v155 + 1;
            v76 = v152;
            if (v152 >= (unint64_t)HIDWORD(v152))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v76 = v152;
            }
            *((_QWORD *)OpenMPClauseName + v76) = v121;
            LODWORD(v152) = v152 + 1;
            v77 = v149;
            if (v149 >= (unint64_t)HIDWORD(v149))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v77 = v149;
            }
            *((_QWORD *)v148 + v77) = v59;
            LODWORD(v149) = v149 + 1;
            v78 = v146;
            if (v146 >= (unint64_t)HIDWORD(v146))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v78 = v146;
            }
            *((_QWORD *)v145 + v78) = v62 & 0xFFFFFFFFFFFFFFFELL;
            LODWORD(v146) = v146 + 1;
            goto LABEL_125;
          }
        }
        else
        {
          v63 = sub_22EC9B8AC((uint64_t)a1, v133, v134, 0);
          if (!sub_22EC7ECC4((uint64_t)a1, v133, 0, 0))
          {
            v87 = *(_QWORD *)(v63 + 16);
            v88 = v143;
            if (v143 >= (unint64_t)HIDWORD(v143))
            {
              v113 = *(_QWORD *)(v63 + 16);
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v87 = v113;
              v88 = v143;
            }
            *((_QWORD *)v142 + v88) = v87;
            LODWORD(v143) = v143 + 1;
          }
        }
        if (sub_22EC7ECC4((uint64_t)a1, v133, 0, 0) || !sub_22F281CA0(*(_QWORD *)(v63 + 16)))
          goto LABEL_74;
        goto LABEL_133;
      }
    }
LABEL_41:
    ++v9;
  }
  while (v9 != v125);
  v94 = v155;
  if ((_DWORD)v155)
  {
    v99 = a1[11];
    v122 = v154;
    v119 = v11;
    v124 = v152;
    v126 = OpenMPClauseName;
    v100 = v148;
    v101 = v12;
    v102 = v149;
    v103 = v145;
    v104 = v13;
    v105 = v146;
    v106 = sub_22EC9ED7C(v99, (uint64_t *)v142, v143);
    v107 = sub_22ECAAB84((uint64_t)a1, (uint64_t *)v139, v140);
    v109 = v105;
    v13 = v104;
    v108 = v102;
    v12 = v101;
    v11 = v119;
    v95 = sub_22F3EA6DC(v99, a7, a8, a9, v122, v94, v126, v124, v100, v108, v103, v109, a4, v117, a6, v106, v107);
  }
  else
  {
    v95 = 0;
  }
LABEL_169:
  if (v139 != v141)
    free(v139);
  if (v142 != v144)
    free(v142);
  if (v145 != v13)
    free(v145);
  if (v148 != v150)
    free(v148);
  if (OpenMPClauseName != v12)
    free(OpenMPClauseName);
  if (v154 != v11)
    free(v154);
  return v95;
}

_DWORD *sub_22ECA3D84(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned __int8 **v8;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  _QWORD v38[2];
  _QWORD v39[2];
  unsigned int v40[24];
  _BYTE v41[4];
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[10];

  v49[8] = *MEMORY[0x24BDAC8D0];
  v47 = v49;
  v48 = 0x800000000;
  if (!a3)
    return 0;
  v8 = a2;
  v10 = &a2[a3];
  do
  {
    v11 = *v8;
    v46 = 0;
    v44 = v11;
    v45 = 0;
    v12 = sub_22EC82530(a1, &v44, &v46, &v45, 0);
    if ((v13 & 1) != 0)
    {
      v14 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v48;
      }
      v47[v14] = v11;
      LODWORD(v48) = v48 + 1;
    }
    if (v12)
    {
      v15 = *(_DWORD *)(v12 + 28);
      sub_22EC7F2A4(a1[1536], v12, 0, (uint64_t)v41);
      if (!v43 || v42 == 73 || v42 == 85)
      {
        v16 = (v15 & 0x7F) - 67;
        if (v16 <= 0xFFFFFFF8 && sub_22EC7ECC4((uint64_t)a1, v12, 0, 0) && (sub_22EFC7ADC(a1[27]) & 1) == 0)
          v17 = sub_22EC9B8AC((uint64_t)a1, v12, v44, 1);
        else
          v17 = 0;
        v18 = a1[1536];
        if (v11)
        {
          v19 = v11;
          while (1)
          {
            v20 = (uint64_t)v19;
            v21 = *v19;
            if (v21 > 213)
            {
              if (v21 == 233)
              {
                if ((*(_DWORD *)v20 & 0x7C0000) != 0x300000)
                  goto LABEL_32;
                v23 = (unsigned __int8 **)(v20 + 16);
              }
              else
              {
                if (v21 != 214)
                  goto LABEL_32;
                v23 = (unsigned __int8 **)(v20 + 24);
              }
            }
            else if (v21 == 155)
            {
              if ((**(_DWORD **)(v20 + 16) & 0x18000) != 0)
                goto LABEL_32;
              if (*(_BYTE *)(v20 + 48))
                v23 = (unsigned __int8 **)(v20 + 24);
              else
                v23 = (unsigned __int8 **)(v20 + 32);
            }
            else
            {
              if (v21 != 176 || (v22 = *(unsigned int *)(v20 + 20), (_DWORD)v22 == -1))
              {
LABEL_32:
                sub_22EC83920(v18, v12, v20, 73, v17, 0, 0);
                if (v16 > 0xFFFFFFF8 || !v17)
                  goto LABEL_44;
                goto LABEL_39;
              }
              v23 = (unsigned __int8 **)(v20 + 8 * v22 + 40);
            }
            v19 = *v23;
            if (v19 == (unsigned __int8 *)v20)
              goto LABEL_32;
          }
        }
        sub_22EC83920(v18, v12, 0, 73, v17, 0, 0);
        v24 = 0;
        if (v16 <= 0xFFFFFFF8 && v17 != 0)
        {
LABEL_39:
          v26 = sub_22EFC7ADC(a1[27]);
          if (v26)
            v24 = 0;
          else
            v24 = (unsigned __int8 *)v17;
          if (v11 && (v26 & 1) != 0)
          {
            do
            {
LABEL_44:
              v24 = v11;
              v27 = *v11;
              if (v27 > 0xD5)
              {
                if (v27 == 233)
                {
                  if ((*(_DWORD *)v11 & 0x7C0000) != 0x300000)
                    break;
                  v29 = v11 + 16;
                }
                else
                {
                  if (v27 != 214)
                    break;
                  v29 = v11 + 24;
                }
              }
              else if (v27 == 155)
              {
                if ((**((_DWORD **)v11 + 2) & 0x18000) != 0)
                  break;
                if (v11[48])
                  v29 = v11 + 24;
                else
                  v29 = v11 + 32;
              }
              else
              {
                if (v27 != 176)
                  break;
                v28 = *((unsigned int *)v11 + 5);
                if ((_DWORD)v28 == -1)
                  break;
                v29 = &v11[8 * v28 + 40];
              }
              v11 = *(unsigned __int8 **)v29;
            }
            while (*(unsigned __int8 **)v29 != v24);
          }
        }
        v30 = v48;
        if (v48 >= (unint64_t)HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v30 = v48;
        }
        v47[v30] = v24;
        LODWORD(v48) = v48 + 1;
      }
      else
      {
        sub_22E8FCA40(a1, v46, 0x110Fu, 0, (uint64_t)v40);
        v39[0] = llvm::omp::getOpenMPClauseName();
        v39[1] = v31;
        v32 = sub_22F2F2210((uint64_t)v40, (uint64_t)v39);
        v38[0] = llvm::omp::getOpenMPClauseName();
        v38[1] = v33;
        sub_22F2F2210(v32, (uint64_t)v38);
        sub_22E903BEC(v40);
        sub_22EC82B14(a1, a1[1536], v12, (uint64_t)v41, 0);
      }
    }
    ++v8;
  }
  while (v8 != v10);
  v34 = v47;
  if ((_DWORD)v48)
  {
    v35 = sub_22F3EA87C(a1[11], a4, a5, a6, v47, v48);
    v34 = v47;
  }
  else
  {
    v35 = 0;
  }
  if (v34 != v49)
    free(v34);
  return v35;
}

uint64_t sub_22ECA41D4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *__src;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _BYTE v57[96];
  _QWORD v58[2];
  void *__p[2];
  char v60;
  void *v61;
  unsigned int v62;
  void *v63;
  unsigned int v64;
  void *v65;
  unsigned int v66;
  void *v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  void *v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  void *v75;
  unsigned int v76;
  uint64_t *v77;
  unsigned int v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (a4 == 3 && a7)
  {
    sub_22E8FCA40(a1, a6, 0x10FEu, 0, (uint64_t)&v61);
    sub_22ECA1038(0x42u, 0, 3, 0, 0, __p);
    v38 = sub_22F2F3734((uint64_t)&v61, __p);
    v58[0] = llvm::omp::getOpenMPClauseName();
    v58[1] = v39;
    sub_22F2F2210(v38, (uint64_t)v58);
    if (v60 < 0)
      operator delete(__p[0]);
    v25 = (unsigned int *)&v61;
    goto LABEL_20;
  }
  if (a4 == 1)
  {
    v19 = sub_22ECB1B04(a1[1536]);
    if (!v19
      || ((v20 = *(_DWORD *)(v19 + 960), v21 = v20 > 0x36, v22 = (1 << v20) & 0x40180600000000, !v21)
        ? (v23 = v22 == 0)
        : (v23 = 1),
          v23))
    {
      sub_22E8FCA40(a1, a7, 0x1111u, 0, (uint64_t)v57);
      v25 = (unsigned int *)v57;
LABEL_20:
      sub_22E903BEC(v25);
      return 0;
    }
  }
  v56 = a7;
  sub_22ECAAC58((uint64_t)&v61, a3, a4);
  if ((sub_22ECAAED0(a1, a1[1536], 66, a2, a3, a10, a11) & 1) != 0)
  {
    v24 = 0;
  }
  else
  {
    v53 = a8;
    v54 = a6;
    v55 = a5;
    v50 = v62;
    __src = v61;
    v52 = a1[11];
    if (*(_QWORD *)(a10 + 8))
    {
      v26 = sub_22F0ABC50((uint64_t *)(a10 + 8), a1[11]);
      v48 = v27;
      v49 = v26;
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v46 = v64;
    v47 = v63;
    v44 = v66;
    v45 = v65;
    v42 = v68;
    v43 = v67;
    v41 = v69;
    v28 = v70;
    v29 = v71;
    v30 = v72;
    v31 = v73;
    v32 = v74;
    v33 = v75;
    v34 = v76;
    v35 = sub_22EC9ED7C(a1[11], v77, v78);
    v36 = sub_22ECAAB84((uint64_t)a1, v79, v80);
    v24 = sub_22F3EB030(v52, v55, v54, v56, v53, a9, a4, v37, __src, v50, v49, v48, a11, v47, v46, v45, v44, v43, v42,
            v41,
            v28,
            v29,
            v30,
            v31,
            v32,
            v33,
            v34,
            v35,
            v36);
  }
  sub_22ECAE7FC((uint64_t)&v61);
  return v24;
}

uint64_t sub_22ECA44D0(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, _DWORD *a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  int v15;
  unsigned __int8 *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  unsigned __int8 *v105;
  unint64_t v106;
  int v107;
  unsigned __int8 **v108;
  uint64_t *__src;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  _QWORD v113[2];
  uint64_t (**v114)();
  unsigned int v115;
  _BYTE v116[80];
  uint64_t v117;
  unsigned int v118;
  char v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unsigned int v123;
  void *v124;
  uint64_t v125;
  _BYTE v126[32];
  void *v127;
  uint64_t v128;
  _BYTE v129[32];
  void *v130;
  uint64_t v131;
  _BYTE v132[64];
  _QWORD *v133;
  uint64_t v134;
  _BYTE v135[64];
  uint64_t *v136;
  uint64_t v137;
  _QWORD v138[10];

  v138[8] = *MEMORY[0x24BDAC8D0];
  v136 = v138;
  v137 = 0x800000000;
  v133 = v135;
  v134 = 0x800000000;
  v130 = v132;
  v131 = 0x800000000;
  v127 = v129;
  v128 = 0x400000000;
  v124 = v126;
  v125 = 0x400000000;
  if (sub_22ECAE8F8(a1, a7, a8))
    v15 = 0;
  else
    v15 = a7;
  v107 = v15;
  if (a3)
  {
    v108 = &a2[a3];
    while (1)
    {
      v16 = *a2;
      v123 = 0;
      v121 = v16;
      v122 = 0;
      v17 = sub_22EC82530(a1, &v121, (int *)&v123, &v122, 0);
      if ((v18 & 1) != 0)
      {
        v19 = v137;
        if (v137 >= (unint64_t)HIDWORD(v137))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = v137;
        }
        v136[v19] = (uint64_t)v16;
        LODWORD(v137) = v137 + 1;
        v20 = v134;
        if (v134 >= (unint64_t)HIDWORD(v134))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = v134;
        }
        v133[v20] = 0;
        LODWORD(v134) = v134 + 1;
        v21 = v131;
        if (v131 >= (unint64_t)HIDWORD(v131))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = v131;
        }
        *((_QWORD *)v130 + v21) = 0;
        LODWORD(v131) = v131 + 1;
      }
      if (!v17)
        goto LABEL_90;
      v22 = *(_QWORD *)(v17 + 48);
      if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 60 >= 7)
        v23 = 0;
      else
        v23 = v17;
      v110 = v23;
      sub_22EC7F2A4(a1[1536], v17, 0, (uint64_t)&v117);
      if (v120)
      {
        sub_22E8FCA40(a1, v123, 0x110Fu, 0, (uint64_t)&v114);
        v113[0] = llvm::omp::getOpenMPClauseName();
        v113[1] = v61;
        v62 = sub_22F2F2210((uint64_t)&v114, (uint64_t)v113);
        v112[0] = llvm::omp::getOpenMPClauseName();
        v112[1] = v63;
        sub_22F2F2210(v62, (uint64_t)v112);
        sub_22E903BEC((unsigned int *)&v114);
        sub_22EC82B14(a1, a1[1536], v17, (uint64_t)&v117, 0);
        goto LABEL_90;
      }
      v24 = v123;
      if ((sub_22EC9832C(a1, v17, v123, v107, v22, 0) & 1) == 0)
        break;
LABEL_90:
      if (++a2 == v108)
        goto LABEL_113;
    }
    v25 = v22 & 0xFFFFFFFFFFFFFFF0;
    v26 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
    if (!v26 || (v27 = *(_DWORD *)(v26 + 16), (v27 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v26 = sub_22F10CF48(v26)) == 0)
      {
LABEL_23:
        v28 = *(_QWORD *)v25;
        if ((*(_BYTE *)(*(_QWORD *)v25 + 8) & 0xF) != 0)
          v28 = (unint64_t)sub_22F10D2BC(v22);
        v29 = 0;
        v106 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 8);
        v30 = *(_QWORD *)(v17 + 40);
        v31 = "";
        if ((v30 & 7) == 0)
        {
          v32 = v30 & 0xFFFFFFFFFFFFFFF8;
          if (v32)
          {
            v33 = *(_DWORD **)(v32 + 16);
            v34 = *v33;
            v31 = (const char *)(v33 + 4);
            v29 = v34;
          }
        }
        if ((*(_BYTE *)(v17 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v17);
          v35 = v36;
        }
        else
        {
          v35 = 0;
        }
        v105 = v121;
        if (v110)
          v37 = v121;
        else
          v37 = 0;
        v38 = sub_22EC822F4(a1, v24, v106, v31, v29, v35, (uint64_t)v37);
        *(_DWORD *)(v38 + 28) |= 0x800u;
        sub_22EFC9100(v38, a1[11]);
        v39 = a1[11];
        v114 = *(uint64_t (***)())(v38 + 40);
        v115 = v24;
        sub_22EFC6D6C((uint64_t)v116, (uint64_t)v114);
        v40 = sub_22E3CD3D4(v39 + 2032, 32, 3);
        sub_22EFF6AE4(v40, v39, 0, 0, 0, v38, 0, (uint64_t)&v114, 0, 0, v106, 1, 0, 0);
        v41 = sub_22EC822F4(a1, v24, v106, ".linear.start", 0xDuLL, 0, 0);
        if (v110)
        {
          if (v107 != 2)
          {
            v44 = 0;
            v43 = (uint64_t)v105;
            goto LABEL_42;
          }
          v42 = sub_22EFBC5B4(v110);
          v43 = 0;
          goto LABEL_43;
        }
        if ((sub_22EFC7ADC(a1[27]) & 1) != 0)
        {
          v43 = 0;
          v42 = (unint64_t)v105;
          goto LABEL_41;
        }
        v42 = (unint64_t)v105;
        v43 = sub_22EC9B8AC((uint64_t)a1, v17, v105, 0);
        if (sub_22EC7ECC4((uint64_t)a1, v17, 0, 0))
          goto LABEL_41;
        v64 = *(_QWORD *)(v43 + 16);
        v65 = v128;
        if (v128 >= (unint64_t)HIDWORD(v128))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v65 = v128;
        }
        *((_QWORD *)v127 + v65) = v64;
        LODWORD(v128) = v128 + 1;
        if (!sub_22F281CA0(*(_QWORD *)(v43 + 16)))
          goto LABEL_41;
        v66 = sub_22EB1A358(a1, v43, 0);
        if (v66 >= 2)
        {
          v67 = v66;
          v68 = sub_22ECB1B04(a1[1536]);
          v69 = v68 ? *(_QWORD *)(v68 + 992) : 0;
          v70 = sub_22EB4785C((uint64_t)a1, v69, v24, 21, (uint64_t)v105, v67 & 0xFFFFFFFFFFFFFFFELL);
          if (v70 >= 2)
          {
            v71 = sub_22EBCEBF8((uint64_t)a1, (unsigned __int8 *)(v70 & 0xFFFFFFFFFFFFFFFELL));
            v72 = v125;
            if (v125 >= (unint64_t)HIDWORD(v125))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v72 = v125;
            }
            *((_QWORD *)v124 + v72) = v71 & 0xFFFFFFFFFFFFFFFELL;
            LODWORD(v125) = v125 + 1;
LABEL_41:
            v44 = v43;
            if (v107 != 2)
            {
LABEL_42:
              v42 = v43;
              v43 = v44;
            }
LABEL_43:
            sub_22EB1A358(a1, v42, 0);
            sub_22EA28AD8();
            *(_DWORD *)(v41 + 28) |= 0x800u;
            sub_22EFC9100(v41, a1[11]);
            v45 = a1[11];
            v114 = *(uint64_t (***)())(v41 + 40);
            v115 = v24;
            sub_22EFC6D6C((uint64_t)v116, (uint64_t)v114);
            v46 = sub_22E3CD3D4(v45 + 2032, 32, 3);
            sub_22EFF6AE4(v46, v45, 0, 0, 0, v41, 0, (uint64_t)&v114, 0, 0, v106, 1, 0, 0);
            v47 = a1[1536];
            if (v16)
            {
              v48 = v16;
              while (1)
              {
                v49 = (uint64_t)v48;
                v50 = *v48;
                if (v50 > 213)
                {
                  if (v50 == 233)
                  {
                    if ((*(_DWORD *)v49 & 0x7C0000) != 0x300000)
                      goto LABEL_60;
                    v52 = (unsigned __int8 **)(v49 + 16);
                  }
                  else
                  {
                    if (v50 != 214)
                      goto LABEL_60;
                    v52 = (unsigned __int8 **)(v49 + 24);
                  }
                }
                else if (v50 == 155)
                {
                  if ((**(_DWORD **)(v49 + 16) & 0x18000) != 0)
                    goto LABEL_60;
                  if (*(_BYTE *)(v49 + 48))
                    v52 = (unsigned __int8 **)(v49 + 24);
                  else
                    v52 = (unsigned __int8 **)(v49 + 32);
                }
                else
                {
                  if (v50 != 176 || (v51 = *(unsigned int *)(v49 + 20), (_DWORD)v51 == -1))
                  {
LABEL_60:
                    sub_22EC83920(v47, v17, v49, 44, v43, 0, 0);
                    if (v110)
                      goto LABEL_68;
                    goto LABEL_63;
                  }
                  v52 = (unsigned __int8 **)(v49 + 8 * v51 + 40);
                }
                v48 = *v52;
                if (v48 == (unsigned __int8 *)v49)
                  goto LABEL_60;
              }
            }
            sub_22EC83920(v47, v17, 0, 44, v43, 0, 0);
            v53 = 0;
            if (!v110)
            {
LABEL_63:
              v54 = sub_22EFC7ADC(a1[27]);
              if (v54)
                v53 = 0;
              else
                v53 = (unsigned __int8 *)v43;
              if (v16 && (v54 & 1) != 0)
              {
                do
                {
LABEL_68:
                  v53 = v16;
                  v55 = *v16;
                  if (v55 > 0xD5)
                  {
                    if (v55 == 233)
                    {
                      if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
                        break;
                      v57 = v16 + 16;
                    }
                    else
                    {
                      if (v55 != 214)
                        break;
                      v57 = v16 + 24;
                    }
                  }
                  else if (v55 == 155)
                  {
                    if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
                      break;
                    if (v16[48])
                      v57 = v16 + 24;
                    else
                      v57 = v16 + 32;
                  }
                  else
                  {
                    if (v55 != 176)
                      break;
                    v56 = *((unsigned int *)v16 + 5);
                    if ((_DWORD)v56 == -1)
                      break;
                    v57 = &v16[8 * v56 + 40];
                  }
                  v16 = *(unsigned __int8 **)v57;
                }
                while (*(unsigned __int8 **)v57 != v53);
              }
            }
            v58 = v137;
            if (v137 >= (unint64_t)HIDWORD(v137))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v58 = v137;
            }
            v136[v58] = (uint64_t)v53;
            LODWORD(v137) = v137 + 1;
            v59 = v134;
            if (v134 >= (unint64_t)HIDWORD(v134))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v59 = v134;
            }
            v133[v59] = v40;
            LODWORD(v134) = v134 + 1;
            v60 = v131;
            if (v131 >= (unint64_t)HIDWORD(v131))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = v131;
            }
            *((_QWORD *)v130 + v60) = v46;
            LODWORD(v131) = v131 + 1;
            goto LABEL_90;
          }
        }
        goto LABEL_90;
      }
      v27 = *(_DWORD *)(v26 + 16);
    }
    if ((v27 & 0x100000) != 0)
    {
      do
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v26)
        {
          v73 = *(_DWORD *)(v26 + 16);
          if ((v73 & 0xFE) == 0x28)
            continue;
        }
        v26 = sub_22F10CF48(v26);
        v73 = *(_DWORD *)(v26 + 16);
      }
      while ((v73 & 0x100000) != 0);
    }
    v22 = *(_QWORD *)(v26 + 32);
    v25 = v22 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_23;
  }
LABEL_113:
  v74 = v137;
  if (!(_DWORD)v137)
    goto LABEL_121;
  if (!a4)
  {
    v111 = 0;
    a4 = 0;
    goto LABEL_139;
  }
  if ((*a4 & 0x1E000) == 0)
  {
    sub_22F0D5A50((uint64_t)a4);
    v76 = v75;
    LOWORD(v115) = 256;
    BYTE2(v115) = 0;
    v114 = off_24FAB8D98;
    v77 = sub_22ED03140(a1, v75, a4, &v114);
    if ((v77 & 1) == 0)
    {
      v78 = v77 & 0xFFFFFFFFFFFFFFFELL;
      v79 = sub_22EC822F4(a1, v76, *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFFFELL) + 8), ".linear.step", 0xCuLL, 0, 0);
      v80 = sub_22EC8247C((uint64_t)a1, v79, *(_QWORD *)(v78 + 8), v76, 0);
      v81 = sub_22EB4785C((uint64_t)a1, a1[1611], v76, 21, v80 & 0xFFFFFFFFFFFFFFFELL, v78);
      v82 = v81 & 0xFFFFFFFFFFFFFFFELL;
      if ((v81 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        sub_22EFF605C(v81 & 0xFFFFFFFFFFFFFFFELL);
        v84 = v83;
      }
      else
      {
        v84 = 0;
      }
      v86 = sub_22EBCF22C((uint64_t)a1, v82, v84, 0, 0);
      sub_22F00905C(v78, a1[11], 0, (uint64_t)&v117);
      if ((_BYTE)v120)
      {
        if (v119)
          goto LABEL_125;
        v89 = v118 - 1;
        v90 = &v117;
        if (v118 >= 0x41)
          v90 = (uint64_t *)(v117 + 8 * (v89 >> 6));
        if ((((unint64_t)*v90 >> v89) & 1) == 0)
        {
LABEL_125:
          if ((sub_22E984E5C((uint64_t)&v117) & 1) == 0)
          {
            sub_22E8FCA40(a1, v76, 0x1AC7u, 0, (uint64_t)&v114);
            v87 = sub_22F2F37E0((uint64_t)&v114, v136);
            LOBYTE(v113[0]) = v137 > 1;
            sub_22E894E38(v87, (unsigned __int8 *)v113);
            sub_22E903BEC((unsigned int *)&v114);
          }
        }
        v88 = 0;
      }
      else
      {
        if (v86 < 2)
        {
          v88 = 0;
LABEL_138:
          v111 = v88;
          v74 = v137;
          a4 = (_DWORD *)v78;
          goto LABEL_139;
        }
        v88 = v86 & 0xFFFFFFFFFFFFFFFELL;
      }
      if ((_BYTE)v120 && v118 >= 0x41 && v117)
        MEMORY[0x2348A0E84](v117, 0x1000C8000313F17);
      goto LABEL_138;
    }
LABEL_121:
    v85 = 0;
    goto LABEL_140;
  }
  v111 = 0;
LABEL_139:
  v91 = a1[11];
  __src = v136;
  v92 = v74;
  v93 = v133;
  v94 = v134;
  v95 = v130;
  v96 = v131;
  v97 = sub_22EC9ED7C(v91, (uint64_t *)v127, v128);
  v98 = sub_22ECAAB84((uint64_t)a1, (uint64_t *)v124, v125);
  v85 = sub_22F3EA96C(v91, a5, a6, v107, a8, a9, a11, v99, __src, v92, v93, v94, v95, v96, (uint64_t)a4, v111, v97, v98);
LABEL_140:
  if (v124 != v126)
    free(v124);
  if (v127 != v129)
    free(v127);
  if (v130 != v132)
    free(v130);
  if (v133 != (_QWORD *)v135)
    free(v133);
  if (v136 != v138)
    free(v136);
  return v85;
}

_DWORD *sub_22ECA5100(uint64_t a1, unsigned __int8 **a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  unsigned __int8 *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t OpenMPClauseName;
  uint64_t v70;
  int v71;
  uint64_t v72[12];
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[10];

  v80[8] = *MEMORY[0x24BDAC8D0];
  v13 = v80;
  v78 = v80;
  v79 = 0x800000000;
  if (a3)
  {
    v14 = a2;
    v15 = &a2[a3];
    do
    {
      v16 = *v14;
      v77 = 0;
      v75 = v16;
      v76 = 0;
      v17 = sub_22EC82530((_QWORD *)a1, &v75, &v77, &v76, 0);
      if ((v18 & 1) != 0)
      {
        v19 = v79;
        if (v79 >= (unint64_t)HIDWORD(v79))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = v79;
        }
        v78[v19] = v16;
        LODWORD(v79) = v79 + 1;
      }
      v74 = v17;
      if (!v17)
        goto LABEL_29;
      v20 = *(_QWORD *)(v17 + 48);
      v73 = v20;
      if ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 60 >= 7)
        v17 = 0;
      v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
      if (!v21 || (v22 = *(_DWORD *)(v21 + 16), (v22 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v21 = sub_22F10CF48(v21)) == 0)
        {
          v23 = (uint64_t *)&v73;
          goto LABEL_14;
        }
        v22 = *(_DWORD *)(v21 + 16);
      }
      if ((v22 & 0x100000) != 0)
      {
        do
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v21)
          {
            v59 = *(_DWORD *)(v21 + 16);
            if ((v59 & 0xFE) == 0x28)
              continue;
          }
          v21 = sub_22F10CF48(v21);
          v59 = *(_DWORD *)(v21 + 16);
        }
        while ((v59 & 0x100000) != 0);
      }
      v23 = (uint64_t *)(v21 + 32);
LABEL_14:
      v24 = *v23;
      v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
        v25 = (unint64_t)sub_22F10D2BC(v24);
      v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 8);
      v73 = v26;
      if (v26 >= 0x10)
      {
        v27 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0);
        if (v27)
        {
          v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          v29 = v28;
          v30 = (v28 & 0xFE) - 2;
          if (v29 == 39 || v30 < 4)
          {
            v66 = a8;
            v67 = a5;
            v65 = v13;
            v37 = a6;
            v38 = a7;
            v39 = *(_QWORD *)(a1 + 12288);
            v64 = v75;
            v40 = sub_22EC81010(v74);
            v72[0] = v40;
            v41 = sub_22ECB1B04(v39);
            v42 = (_DWORD *)(v41 + 432);
            v43 = sub_22F29FE80(v41 + 432, v40);
            if ((*(_BYTE *)(v41 + 432) & 1) != 0)
            {
              v44 = v41 + 440;
              v45 = 8;
            }
            else
            {
              v44 = *(_QWORD *)(v41 + 440);
              v45 = *(unsigned int *)(v41 + 448);
            }
            a7 = v38;
            a6 = v37;
            a5 = v67;
            if (v44 + 16 * v45 != v43)
            {
              v46 = *(_QWORD *)(v43 + 8);
              v13 = v65;
              if (v46)
              {
                sub_22E8FCA40((_QWORD *)a1, v77, 0x1104u, 0, (uint64_t)v72);
                v71 = 0;
                v53 = sub_22E8900C4((uint64_t)v72, &v71);
                OpenMPClauseName = llvm::omp::getOpenMPClauseName();
                v70 = v54;
                v55 = v53;
                a5 = v67;
                v56 = sub_22F2F2210(v55, (uint64_t)&OpenMPClauseName);
                sub_22E8906A0(v56, &v76);
                sub_22E903BEC((unsigned int *)v72);
                sub_22EFF605C(v46);
                sub_22E8FCA40((_QWORD *)a1, v57, 0x1701u, 0, (uint64_t)v72);
                OpenMPClauseName = llvm::omp::getOpenMPClauseName();
                v70 = v58;
                sub_22F2F2210((uint64_t)v72, (uint64_t)&OpenMPClauseName);
                sub_22E903BEC((unsigned int *)v72);
              }
              else
              {
                if (v17)
                  goto LABEL_37;
LABEL_56:
                if (sub_22EC7ECC4(a1, v74, 0, 0))
                {
                  v47 = (unsigned __int8 *)sub_22EC9B8AC(a1, v74, v64, 1);
                  goto LABEL_58;
                }
LABEL_37:
                if (v16)
                {
                  while (1)
                  {
                    v47 = v16;
                    v48 = *v16;
                    if (v48 > 0xD5)
                    {
                      if (v48 == 233)
                      {
                        if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
                          goto LABEL_58;
                        v50 = v16 + 16;
                      }
                      else
                      {
                        if (v48 != 214)
                          goto LABEL_58;
                        v50 = v16 + 24;
                      }
                    }
                    else if (v48 == 155)
                    {
                      if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
                        goto LABEL_58;
                      if (v16[48])
                        v50 = v16 + 24;
                      else
                        v50 = v16 + 32;
                    }
                    else
                    {
                      if (v48 != 176)
                        goto LABEL_58;
                      v49 = *((unsigned int *)v16 + 5);
                      if ((_DWORD)v49 == -1)
                        goto LABEL_58;
                      v50 = &v16[8 * v49 + 40];
                    }
                    v16 = *(unsigned __int8 **)v50;
                    if (*(unsigned __int8 **)v50 == v47)
                      goto LABEL_58;
                  }
                }
                v47 = 0;
LABEL_58:
                v51 = sub_22EB1922C(a1, v47);
                v52 = v79;
                if (v79 >= (unint64_t)HIDWORD(v79))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v52 = v79;
                }
                v78[v52] = v51 & 0xFFFFFFFFFFFFFFFELL;
                LODWORD(v79) = v79 + 1;
              }
              a8 = v66;
              goto LABEL_29;
            }
            v13 = v65;
            sub_22F341310(v42, v72)[1] = v64;
            if (!v17)
              goto LABEL_56;
            goto LABEL_37;
          }
        }
      }
      sub_22E8FCA40((_QWORD *)a1, v77, 0x103Bu, 0, (uint64_t)v72);
      v32 = sub_22E8901B8((uint64_t)v72, (uint64_t *)&v73);
      LODWORD(OpenMPClauseName) = (**(_DWORD **)(a1 + 72) >> 8) & 1;
      v33 = sub_22E89519C(v32, (unsigned int *)&OpenMPClauseName);
      sub_22E8906A0(v33, &v76);
      sub_22E903BEC((unsigned int *)v72);
      if (!v17)
      {
        v35 = *(_DWORD *)(v74 + 24);
LABEL_27:
        v36 = 6001;
        goto LABEL_28;
      }
      v34 = sub_22EFBBF74(v17, *(_QWORD *)(a1 + 88));
      v35 = *(_DWORD *)(v74 + 24);
      if (!v34)
        goto LABEL_27;
      v36 = 5543;
LABEL_28:
      sub_22E8FCA40((_QWORD *)a1, v35, v36, 0, (uint64_t)v72);
      sub_22E890024((uint64_t)v72, &v74);
      sub_22E903BEC((unsigned int *)v72);
LABEL_29:
      ++v14;
    }
    while (v14 != v15);
  }
  if (a4)
  {
    v60 = sub_22EC98030((_QWORD *)a1, a4, 5, 1, 0);
    if ((v60 & 1) != 0)
    {
LABEL_77:
      v62 = 0;
      goto LABEL_78;
    }
    v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v61 = 0;
  }
  if (!(_DWORD)v79)
    goto LABEL_77;
  v62 = sub_22F3EAB34(*(_QWORD *)(a1 + 88), a5, a6, a7, a8, v78, v79, v61);
LABEL_78:
  if (v78 != v13)
    free(v78);
  return v62;
}

_DWORD *sub_22ECA56B0(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _BYTE *v57;
  _DWORD *v58;
  _QWORD v63[2];
  uint64_t v64[2];
  __int128 v65;
  _BYTE v66[80];
  void *v67;
  uint64_t v68;
  _BYTE v69[64];
  void *__src;
  uint64_t v71;
  _BYTE v72[64];
  _QWORD *v73;
  uint64_t v74;
  _BYTE v75[64];
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[10];

  v78[8] = *MEMORY[0x24BDAC8D0];
  v76 = v78;
  v77 = 0x800000000;
  v73 = v75;
  v74 = 0x800000000;
  __src = v72;
  v71 = 0x800000000;
  v67 = v69;
  v68 = 0x800000000;
  if (!a3)
  {
    v58 = 0;
    goto LABEL_68;
  }
  v6 = a2;
  v8 = &a2[a3];
  do
  {
    v9 = *v6;
    v10 = *(unsigned __int8 *)*v6;
    if (v10 == 163)
    {
LABEL_4:
      v11 = v77;
      if (v77 >= (unint64_t)HIDWORD(v77))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v77;
      }
      v76[v11] = v9;
      LODWORD(v77) = v77 + 1;
      v12 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v74;
      }
      v73[v12] = 0;
      LODWORD(v74) = v74 + 1;
      v13 = v71;
      if (v71 >= (unint64_t)HIDWORD(v71))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v71;
      }
      *((_QWORD *)__src + v13) = 0;
      LODWORD(v71) = v71 + 1;
      v14 = v68;
      if (v68 >= (unint64_t)HIDWORD(v68))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v68;
      }
      *((_QWORD *)v67 + v14) = 0;
LABEL_13:
      LODWORD(v68) = v68 + 1;
      goto LABEL_29;
    }
    sub_22EFF605C(*v6);
    v16 = v15;
    if (v10 != 161 || (v17 = *(_QWORD *)(v9 + 16), (*(_DWORD *)(v17 + 28) & 0x7Fu) - 60 >= 7))
    {
      sub_22E8FCA40(a1, v15, 0x1080u, 0, (uint64_t)&v65);
      LODWORD(v63[0]) = 0;
      v26 = sub_22E8900C4((uint64_t)&v65, (int *)v63);
      sub_22F0D4E74(v9);
      v64[0] = v27;
      sub_22E8906A0(v26, v64);
LABEL_28:
      sub_22E903BEC((unsigned int *)&v65);
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(v17 + 48);
    if ((*(_BYTE *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 17) & 6) != 0)
      goto LABEL_4;
    sub_22EC7F2A4(a1[1536], *(_QWORD *)(v9 + 16), 0, (uint64_t)&v65);
    if ((DWORD1(v65) & 0xFFFFFFBF) != 0xF)
    {
      sub_22E8FCA40(a1, v16, 0x10E1u, 0, (uint64_t)&v65);
      v64[0] = llvm::omp::getOpenMPClauseName();
      v64[1] = v53;
      v54 = sub_22F2F2210((uint64_t)&v65, (uint64_t)v64);
      v63[0] = llvm::omp::getOpenMPDirectiveName();
      v63[1] = v55;
      sub_22F2F2210(v54, (uint64_t)v63);
      goto LABEL_28;
    }
    v19 = sub_22EF5BA38(a1[11], v18);
    v20 = v19 & 0xFFFFFFFFFFFFFFF0;
    v21 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if (!v21 || (v22 = *(_DWORD *)(v21 + 16), (v22 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_21;
      v21 = sub_22F10CF48(v21);
      if (!v21)
        goto LABEL_21;
      v22 = *(_DWORD *)(v21 + 16);
    }
    if ((v22 & 0x100000) != 0)
    {
      do
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v21)
        {
          v56 = *(_DWORD *)(v21 + 16);
          if ((v56 & 0xFE) == 0x28)
            continue;
        }
        v21 = sub_22F10CF48(v21);
        v56 = *(_DWORD *)(v21 + 16);
      }
      while ((v56 & 0x100000) != 0);
    }
    v19 = *(_QWORD *)(v21 + 32);
    v20 = v19 & 0xFFFFFFFFFFFFFFF0;
LABEL_21:
    if ((*(_BYTE *)(v9 + 2) & 4) != 0)
    {
      v65 = *(_OWORD *)(v9 + 32);
      v23 = sub_22F0AB0EC((unint64_t *)&v65);
    }
    else
    {
      v23 = *(_DWORD *)(v9 + 4);
    }
    v24 = *(_QWORD *)v20;
    if ((*(_BYTE *)(*(_QWORD *)v20 + 8) & 0xF) != 0)
      v24 = (unint64_t)sub_22F10D2BC(v19);
    if ((*(_BYTE *)(v17 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v17);
      v25 = v28;
    }
    else
    {
      v25 = 0;
    }
    v29 = sub_22EC822F4(a1, v23, v24 & 0xFFFFFFFFFFFFFFF0, ".copyin.src", 0xBuLL, v25, 0);
    v30 = *(_QWORD *)v20;
    if ((*(_BYTE *)(*(_QWORD *)v20 + 8) & 0xF) != 0)
      v30 = (unint64_t)sub_22F10D2BC(v19);
    v31 = v30 & 0xFFFFFFFFFFFFFFF0;
    sub_22EFF605C(v9);
    v33 = v32;
    *(_DWORD *)(v29 + 28) |= 0x800u;
    sub_22EFC9100(v29, a1[11]);
    v34 = a1[11];
    *(_QWORD *)&v65 = *(_QWORD *)(v29 + 40);
    DWORD2(v65) = v33;
    sub_22EFC6D6C((uint64_t)v66, v65);
    v35 = sub_22E3CD3D4(v34 + 2032, 32, 3);
    sub_22EFF6AE4(v35, v34, 0, 0, 0, v29, 0, (uint64_t)&v65, 0, 0, v31, 1, 0, 0);
    if ((*(_BYTE *)(v9 + 2) & 4) != 0)
    {
      v65 = *(_OWORD *)(v9 + 32);
      v36 = sub_22F0AB0EC((unint64_t *)&v65);
    }
    else
    {
      v36 = *(_DWORD *)(v9 + 4);
    }
    if ((*(_BYTE *)(v17 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v17);
      v37 = v38;
    }
    else
    {
      v37 = 0;
    }
    v39 = sub_22EC822F4(a1, v36, v19, ".copyin.dst", 0xBuLL, v37, 0);
    sub_22EFF605C(v9);
    v41 = v40;
    *(_DWORD *)(v39 + 28) |= 0x800u;
    sub_22EFC9100(v39, a1[11]);
    v42 = a1[11];
    *(_QWORD *)&v65 = *(_QWORD *)(v39 + 40);
    DWORD2(v65) = v41;
    sub_22EFC6D6C((uint64_t)v66, v65);
    v43 = sub_22E3CD3D4(v42 + 2032, 32, 3);
    sub_22EFF6AE4(v43, v42, 0, 0, 0, v39, 0, (uint64_t)&v65, 0, 0, v19, 1, 0, 0);
    sub_22EFF605C(v9);
    v45 = sub_22EB4785C((uint64_t)a1, 0, v44, 21, v43, v35);
    if ((v45 & 1) == 0)
    {
      v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
      sub_22EFF605C(v9);
      v48 = sub_22EBCF22C((uint64_t)a1, v46, v47, 0, 0);
      if ((v48 & 1) == 0)
      {
        sub_22EC83920(a1[1536], v17, v9, 15, 0, 0, 0);
        v49 = v77;
        if (v77 >= (unint64_t)HIDWORD(v77))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v49 = v77;
        }
        v76[v49] = v9;
        LODWORD(v77) = v77 + 1;
        v50 = v74;
        if (v74 >= (unint64_t)HIDWORD(v74))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v50 = v74;
        }
        v73[v50] = v35;
        LODWORD(v74) = v74 + 1;
        v51 = v71;
        if (v71 >= (unint64_t)HIDWORD(v71))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v51 = v71;
        }
        *((_QWORD *)__src + v51) = v43;
        LODWORD(v71) = v71 + 1;
        v52 = v68;
        if (v68 >= (unint64_t)HIDWORD(v68))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v52 = v68;
        }
        *((_QWORD *)v67 + v52) = v48 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_13;
      }
    }
LABEL_29:
    ++v6;
  }
  while (v6 != v8);
  v57 = v67;
  if ((_DWORD)v77)
  {
    v58 = sub_22F3EACA8(a1[11], a4, a5, a6, v76, v77, v73, v74, __src, v71, v67, v68);
    v57 = v67;
  }
  else
  {
    v58 = 0;
  }
  if (v57 != v69)
    free(v57);
LABEL_68:
  if (__src != v72)
    free(__src);
  if (v73 != (_QWORD *)v75)
    free(v73);
  if (v76 != v78)
    free(v76);
  return v58;
}

_DWORD *sub_22ECA5E4C(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned __int8 **v6;
  unsigned __int8 *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  _BYTE *v67;
  _DWORD *v68;
  unsigned __int8 **v73;
  _QWORD v74[2];
  uint64_t OpenMPClauseName;
  uint64_t v76;
  __int128 v77;
  _BYTE v78[63];
  __int128 v79;
  _BYTE v80[21];
  unint64_t v81;
  unint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  _BYTE v88[64];
  void *__src;
  uint64_t v90;
  _BYTE v91[64];
  _QWORD *v92;
  uint64_t v93;
  _BYTE v94[64];
  _QWORD *v95;
  uint64_t v96;
  _QWORD v97[10];

  v97[8] = *MEMORY[0x24BDAC8D0];
  v95 = v97;
  v96 = 0x800000000;
  v92 = v94;
  v93 = 0x800000000;
  __src = v91;
  v90 = 0x800000000;
  v86 = v88;
  v87 = 0x800000000;
  if (!a3)
  {
    v68 = 0;
    goto LABEL_97;
  }
  v6 = a2;
  v73 = &a2[a3];
  do
  {
    v8 = *v6;
    v85 = 0;
    v83 = v8;
    v84 = 0;
    v9 = sub_22EC82530(a1, &v83, (int *)&v85, &v84, 0);
    if ((v10 & 1) != 0)
    {
      v11 = v96;
      if (v96 >= (unint64_t)HIDWORD(v96))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v96;
      }
      v95[v11] = v8;
      LODWORD(v96) = v96 + 1;
      v12 = v93;
      if (v93 >= (unint64_t)HIDWORD(v93))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v93;
      }
      v92[v12] = 0;
      LODWORD(v93) = v93 + 1;
      v13 = v90;
      if (v90 >= (unint64_t)HIDWORD(v90))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v90;
      }
      *((_QWORD *)__src + v13) = 0;
      LODWORD(v90) = v90 + 1;
      v14 = v87;
      if (v87 >= (unint64_t)HIDWORD(v87))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v87;
      }
      *((_QWORD *)v86 + v14) = 0;
      LODWORD(v87) = v87 + 1;
    }
    v82 = v9;
    if (!v9)
      goto LABEL_73;
    v81 = *(_QWORD *)(v9 + 48);
    if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 60 >= 7)
      v15 = 0;
    else
      v15 = v9;
    if (v15)
    {
      sub_22EC7F2A4(a1[1536], v15, 0, (uint64_t)&v77);
      if ((DWORD1(v77) & 0xFFFFFFBF) == 0xF)
        goto LABEL_26;
      v9 = v82;
    }
    sub_22EC7F2A4(a1[1536], v9, 0, (uint64_t)&v79);
    if (*(_QWORD *)v80)
    {
      if (DWORD1(v79) == 14)
        goto LABEL_26;
      if (DWORD1(v79) != 85)
      {
        sub_22E8FCA40(a1, v85, 0x110Fu, 0, (uint64_t)&v77);
        OpenMPClauseName = llvm::omp::getOpenMPClauseName();
        v76 = v16;
        v17 = sub_22F2F2210((uint64_t)&v77, (uint64_t)&OpenMPClauseName);
        v74[0] = llvm::omp::getOpenMPClauseName();
        v74[1] = v18;
        sub_22F2F2210(v17, (uint64_t)v74);
LABEL_76:
        sub_22E903BEC((unsigned int *)&v77);
        sub_22EC82B14(a1, a1[1536], v82, (uint64_t)&v79, 0);
        goto LABEL_73;
      }
    }
    else if (DWORD1(v79) != 85)
    {
      goto LABEL_26;
    }
    sub_22ECAA908((uint64_t)&v77, a1[1536], v82, 0);
    v79 = v77;
    *(_OWORD *)v80 = *(_OWORD *)v78;
    *(_QWORD *)&v80[13] = *(_QWORD *)&v78[13];
    if (DWORD1(v77) == 73)
    {
      sub_22E8FCA40(a1, v85, 0x10E1u, 0, (uint64_t)&v77);
      OpenMPClauseName = llvm::omp::getOpenMPClauseName();
      v76 = v57;
      v58 = sub_22F2F2210((uint64_t)&v77, (uint64_t)&OpenMPClauseName);
      sub_22F2F30F4(v58, (uint64_t)"threadprivate or private in the enclosing context");
      goto LABEL_76;
    }
LABEL_26:
    v19 = *(_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v20 != 32 && v20 != 39 && (*(_BYTE *)(v19 + 17) & 8) != 0)
    {
      sub_22E8FCA40(a1, v85, 0x110Bu, 0, (uint64_t)&v77);
      *(_QWORD *)&v79 = llvm::omp::getOpenMPClauseName();
      *((_QWORD *)&v79 + 1) = v59;
      v60 = sub_22F2F2210((uint64_t)&v77, (uint64_t)&v79);
      v61 = sub_22E8901B8(v60, (uint64_t *)&v81);
      sub_22ECB1B04(a1[1536]);
      OpenMPClauseName = llvm::omp::getOpenMPDirectiveName();
      v76 = v62;
      sub_22F2F2210(v61, (uint64_t)&OpenMPClauseName);
      sub_22E903BEC((unsigned int *)&v77);
      if (v15)
      {
        v63 = sub_22EFBBF74(v15, a1[11]);
        v64 = *(_DWORD *)(v82 + 24);
        if (v63)
        {
          v65 = 5543;
LABEL_82:
          sub_22E8FCA40(a1, v64, v65, 0, (uint64_t)&v77);
          sub_22E890024((uint64_t)&v77, (uint64_t *)&v82);
          sub_22E903BEC((unsigned int *)&v77);
          goto LABEL_73;
        }
      }
      else
      {
        v64 = *(_DWORD *)(v82 + 24);
      }
      v65 = 6001;
      goto LABEL_82;
    }
    v21 = a1[11];
    v22 = *(_DWORD *)(v19 + 16);
    if ((v22 & 0xFE) != 0x28)
    {
      if ((v20 & 0xFE) != 0x28 || (v19 = sub_22F10CF48(v19)) == 0)
      {
        v23 = &v81;
        goto LABEL_32;
      }
      v22 = *(_DWORD *)(v19 + 16);
    }
    if ((v22 & 0x100000) != 0)
    {
      do
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v19)
        {
          v66 = *(_DWORD *)(v19 + 16);
          if ((v66 & 0xFE) == 0x28)
            continue;
        }
        v19 = sub_22F10CF48(v19);
        v66 = *(_DWORD *)(v19 + 16);
      }
      while ((v66 & 0x100000) != 0);
    }
    v23 = (unint64_t *)(v19 + 32);
LABEL_32:
    v24 = sub_22EF5BA38(v21, *v23);
    v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
      v25 = (unint64_t)sub_22F10D2BC(v24);
    v26 = v25 & 0xFFFFFFFFFFFFFFF0;
    v81 = v25 & 0xFFFFFFFFFFFFFFF0;
    sub_22F0D5A50((uint64_t)v8);
    v28 = v27;
    if ((*(_BYTE *)(v82 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v82);
      v29 = v30;
    }
    else
    {
      v29 = 0;
    }
    v31 = sub_22EC822F4(a1, v28, v26, ".copyprivate.src", 0x10uLL, v29, 0);
    v32 = v81;
    v33 = v85;
    *(_DWORD *)(v31 + 28) |= 0x800u;
    sub_22EFC9100(v31, a1[11]);
    v34 = a1[11];
    *(_QWORD *)&v77 = *(_QWORD *)(v31 + 40);
    DWORD2(v77) = v33;
    sub_22EFC6D6C((uint64_t)v78, v77);
    v35 = sub_22E3CD3D4(v34 + 2032, 32, 3);
    sub_22EFF6AE4(v35, v34, 0, 0, 0, v31, 0, (uint64_t)&v77, 0, 0, v32, 1, 0, 0);
    sub_22F0D5A50((uint64_t)v8);
    v37 = v36;
    v38 = 0;
    v39 = v81;
    if ((*(_BYTE *)(v82 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v82);
      v38 = v40;
    }
    v41 = sub_22EC822F4(a1, v37, v39, ".copyprivate.dst", 0x10uLL, v38, 0);
    v42 = v81;
    *(_DWORD *)(v41 + 28) |= 0x800u;
    sub_22EFC9100(v41, a1[11]);
    v43 = a1[11];
    *(_QWORD *)&v77 = *(_QWORD *)(v41 + 40);
    DWORD2(v77) = v33;
    sub_22EFC6D6C((uint64_t)v78, v77);
    v44 = sub_22E3CD3D4(v43 + 2032, 32, 3);
    sub_22EFF6AE4(v44, v43, 0, 0, 0, v41, 0, (uint64_t)&v77, 0, 0, v42, 1, 0, 0);
    v45 = sub_22ECB1B04(a1[1536]);
    if (v45)
      v46 = *(_QWORD *)(v45 + 992);
    else
      v46 = 0;
    v47 = sub_22EB4785C((uint64_t)a1, v46, v33, 21, v44, v35);
    if ((v47 & 1) == 0)
    {
      v48 = sub_22EBCF22C((uint64_t)a1, v47 & 0xFFFFFFFFFFFFFFFELL, v33, 0, 0);
      if ((v48 & 1) == 0)
      {
        if (v15)
        {
          if (v8)
          {
            while (1)
            {
              v49 = (uint64_t)v8;
              v50 = *v8;
              if (v50 > 0xD5)
              {
                if (v50 == 233)
                {
                  if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
                    goto LABEL_64;
                  v52 = v8 + 16;
                }
                else
                {
                  if (v50 != 214)
                    goto LABEL_64;
                  v52 = v8 + 24;
                }
              }
              else if (v50 == 155)
              {
                if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
                  goto LABEL_64;
                if (v8[48])
                  v52 = v8 + 24;
                else
                  v52 = v8 + 32;
              }
              else
              {
                if (v50 != 176)
                  goto LABEL_64;
                v51 = *((unsigned int *)v8 + 5);
                if ((_DWORD)v51 == -1)
                  goto LABEL_64;
                v52 = &v8[8 * v51 + 40];
              }
              v8 = *(unsigned __int8 **)v52;
              if (*(_QWORD *)v52 == v49)
                goto LABEL_64;
            }
          }
          v49 = 0;
        }
        else
        {
          v49 = sub_22EC9B8AC((uint64_t)a1, v82, v83, 0);
        }
LABEL_64:
        v53 = v96;
        if (v96 >= (unint64_t)HIDWORD(v96))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v53 = v96;
        }
        v95[v53] = v49;
        LODWORD(v96) = v96 + 1;
        v54 = v93;
        if (v93 >= (unint64_t)HIDWORD(v93))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v54 = v93;
        }
        v92[v54] = v35;
        LODWORD(v93) = v93 + 1;
        v55 = v90;
        if (v90 >= (unint64_t)HIDWORD(v90))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v55 = v90;
        }
        *((_QWORD *)__src + v55) = v44;
        LODWORD(v90) = v90 + 1;
        v56 = v87;
        if (v87 >= (unint64_t)HIDWORD(v87))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v56 = v87;
        }
        *((_QWORD *)v86 + v56) = v48 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v87) = v87 + 1;
      }
    }
LABEL_73:
    ++v6;
  }
  while (v6 != v73);
  v67 = v86;
  if ((_DWORD)v96)
  {
    v68 = sub_22F3EADE0(a1[11], a4, a5, a6, v95, v96, v92, v93, __src, v90, v86, v87);
    v67 = v86;
  }
  else
  {
    v68 = 0;
  }
  if (v67 != v88)
    free(v67);
LABEL_97:
  if (__src != v91)
    free(__src);
  if (v92 != (_QWORD *)v94)
    free(v92);
  if (v95 != v97)
    free(v95);
  return v68;
}

unsigned __int8 *sub_22ECA67B4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t *a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int *v19;
  unsigned __int8 *v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *p_OpenMPClauseName;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned __int8 **v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  int v90;
  unsigned __int8 *v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unsigned int *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  char v100;
  char v101;
  int v102;
  char v103;
  char v104;
  unsigned __int8 *v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  int v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v138;
  uint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  int v144;
  uint64_t v145;
  std::string::value_type *p_src;
  const std::string::value_type *v147;
  std::string::size_type v148;
  std::string *v149;
  std::string::size_type v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  _BOOL4 v157;
  int v158;
  BOOL v159;
  char *v161;
  uint64_t *v165;
  unsigned int v166;
  unsigned __int8 *v167;
  int v168;
  uint64_t v169;
  _BYTE v170[96];
  uint64_t v171;
  int v172;
  _BYTE v173[96];
  unsigned int v174[24];
  _BYTE v175[96];
  uint64_t v176;
  uint64_t v177;
  std::string v178;
  _BYTE v179[96];
  uint64_t v180;
  int v181;
  unsigned __int8 *OpenMPClauseName;
  __int128 v183;
  uint64_t v184;
  unsigned int v185;
  __int128 v186;
  _QWORD v187[9];
  std::string::value_type *__src;
  _OWORD v189[4];
  uint64_t v190;

  v190 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 12288);
  v16 = sub_22ECB1B04(v15);
  if (!v16)
  {
    v18 = a3 - 7 < 0xFFFFFFFE;
    goto LABEL_14;
  }
  v17 = *(_DWORD *)(v16 + 960);
  v18 = a3 - 7 < 0xFFFFFFFE;
  if (a3 - 7 <= 0xFFFFFFFD && v17 == 39)
  {
    sub_22E8FCA40((_QWORD *)a1, a4, 0x10FEu, 0, (uint64_t)&v180);
    v153 = sub_22F2F30F4((uint64_t)&v180, (uint64_t)"'source' or 'sink'");
    OpenMPClauseName = (unsigned __int8 *)llvm::omp::getOpenMPClauseName();
    *(_QWORD *)&v183 = v154;
    sub_22F2F2210(v153, (uint64_t)&OpenMPClauseName);
    v19 = (unsigned int *)&v180;
    goto LABEL_7;
  }
  if (a3 == 3 && v17 == 78)
  {
    sub_22E8FCA40((_QWORD *)a1, a4, 0x10F7u, 0, (uint64_t)v179);
    v19 = (unsigned int *)v179;
LABEL_7:
    sub_22E903BEC(v19);
    return 0;
  }
  if (v17 != 39)
  {
LABEL_14:
    if (a3 > 8 || ((1 << a3) & 0x160) == 0)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) < 0x32u)
      {
        if (a3 == 4)
          goto LABEL_274;
LABEL_22:
        v21 = 0;
        v22 = a2;
        goto LABEL_23;
      }
      if (!v16 || a3 != 4 || *(_DWORD *)(v16 + 960) != 15)
        goto LABEL_22;
    }
LABEL_274:
    OpenMPClauseName = (unsigned __int8 *)&v183 + 8;
    v183 = xmmword_22F495C70;
    v138 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72);
    if (v138 <= 0x31)
    {
      LODWORD(v184) = 4;
      LODWORD(v183) = 3;
      v139 = a2;
LABEL_276:
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v140 = OpenMPClauseName;
      v141 = v183;
LABEL_283:
      *(_DWORD *)&v140[4 * v141] = 7;
      LODWORD(v183) = v183 + 1;
      v138 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72);
      goto LABEL_284;
    }
    v142 = sub_22ECB1B04(v15);
    if (v142 && *(_DWORD *)(v142 + 960) == 15)
    {
      LODWORD(v184) = 4;
      LODWORD(v183) = 3;
      v139 = a2;
      if (v138 <= 0x32)
        goto LABEL_276;
    }
    else
    {
      v139 = a2;
      if (v138 < 0x33)
      {
        v141 = 2;
        v140 = (unsigned __int8 *)&v183 + 8;
        goto LABEL_283;
      }
    }
LABEL_284:
    if (v139)
      v143 = 0;
    else
      v143 = v138 >= 0x32;
    v144 = !v143;
    if (v144)
      v145 = 0;
    else
      v145 = 29;
    if ((v144 & 1) != 0)
    {
      HIBYTE(v189[0]) = 0;
      p_src = (std::string::value_type *)&__src;
    }
    else
    {
      p_src = (std::string::value_type *)operator new(0x20uLL);
      __src = p_src;
      v189[0] = xmmword_22F45ADD0;
      qmemcpy(p_src, "depend modifier(iterator) or ", 29);
    }
    p_src[v145] = 0;
    sub_22E8FCA40((_QWORD *)a1, a4, 0x10FEu, 0, (uint64_t)&v180);
    sub_22ECA1038(0x12u, 0, 8, (__int32 *)OpenMPClauseName, v183, &v178);
    if (v189[0] >= 0)
      v147 = (const std::string::value_type *)&__src;
    else
      v147 = __src;
    if (v189[0] >= 0)
      v148 = HIBYTE(v189[0]) & 0x7F;
    else
      v148 = *(_QWORD *)&v189[0];
    v149 = std::string::insert(&v178, 0, v147, v148);
    v150 = v149->__r_.__value_.__r.__words[2];
    v186 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
    v187[0] = v150;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    v151 = sub_22F2F3734((uint64_t)&v180, (void **)&v186);
    v176 = llvm::omp::getOpenMPClauseName();
    v177 = v152;
    sub_22F2F2210(v151, (uint64_t)&v176);
    if (SHIBYTE(v187[0]) < 0)
      operator delete((void *)v186);
    if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v178.__r_.__value_.__l.__data_);
    sub_22E903BEC((unsigned int *)&v180);
    if (SHIBYTE(v189[0]) < 0)
      operator delete(__src);
    if (OpenMPClauseName != (unsigned __int8 *)((char *)&v183 + 8))
      free(OpenMPClauseName);
    return 0;
  }
  v21 = a3 - 5 < 2;
  v22 = a2;
  if (a2 && a3 - 5 <= 1)
  {
    sub_22EFF605C(a2);
    sub_22E8FCA40((_QWORD *)a1, v23, 0x1069u, 0, (uint64_t)v175);
    v19 = (unsigned int *)v175;
    goto LABEL_7;
  }
LABEL_23:
  if (v22)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v25 = v24 && (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 141033483;
    if (!v25)
    {
      v26 = v18;
      sub_22EFF605C(v22);
      sub_22E8FCA40((_QWORD *)a1, v27, 0x1065u, 0, (uint64_t)v174);
      sub_22E903BEC(v174);
      v18 = v26;
    }
  }
  v159 = v18;
  __src = (char *)v189 + 8;
  *(_QWORD *)&v189[0] = 0x800000000;
  *(_QWORD *)&v186 = v187;
  *((_QWORD *)&v186 + 1) = 0x400000000;
  LODWORD(v178.__r_.__value_.__r.__words[1]) = 32;
  v178.__r_.__value_.__r.__words[0] = 0;
  v178.__r_.__value_.__s.__data_[12] = 1;
  LODWORD(v177) = 32;
  v176 = 0;
  BYTE4(v177) = 1;
  if (v21)
  {
    v28 = sub_22ECB2028(*(_QWORD *)(a1 + 12288));
    if (v28)
    {
      if (*(_BYTE *)(v28 + 1056))
      {
        v29 = *(unsigned __int8 **)(v28 + 1040);
        if (v29)
        {
          sub_22F007D7C(v29, *(_QWORD *)(a1 + 88), 0, (uint64_t)&v180);
          if (v177 >= 0x41 && v176)
            MEMORY[0x2348A0E84](v176, 0x1000C8000313F17);
          v176 = v180;
          LODWORD(v177) = v181;
          BYTE4(v177) = 1;
        }
      }
    }
  }
  v157 = v21;
  v158 = a4;
  if (a7)
  {
    v161 = (char *)(a1 + 10664);
    v30 = &a6[a7];
    v166 = a3;
    v165 = v30;
    do
    {
      v31 = *a6;
      if (*(unsigned __int8 *)*a6 != 163)
      {
        sub_22EFF605C(*a6);
        v34 = v33;
        v35 = sub_22EFFBBCC((unsigned __int8 *)v31);
        if (a3 != 6)
        {
          if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) < 0x32u)
            v36 = 0;
          else
            v36 = sub_22ECAE974(a1, a8, *(_QWORD *)(a1 + 12288), a3 == 4);
          if (a3 == 4)
          {
            if ((*(_DWORD *)v31 & 0x1C000) == 0)
            {
              v39 = (*(_DWORD *)v31 & 0x2000) != 0 ? 0 : v36;
              if (v39 == 1
                && *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 21544) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
              {
                sub_22E8FCA40((_QWORD *)a1, v34, 0x107Au, 0, (uint64_t)&v180);
                LODWORD(v169) = 0;
LABEL_98:
                v59 = sub_22E8900C4((uint64_t)&v180, (int *)&v169);
                OpenMPClauseName = *(unsigned __int8 **)(v31 + 8);
                v60 = sub_22E8901B8(v59, (uint64_t *)&OpenMPClauseName);
                sub_22F0D4E74(v31);
                v171 = v61;
                p_OpenMPClauseName = &v171;
                goto LABEL_183;
              }
            }
            if ((*(_DWORD *)v31 & 0x300) != 0x100)
            {
              sub_22E8FCA40((_QWORD *)a1, v34, 0x107Au, 0, (uint64_t)&v180);
              LODWORD(v169) = 1;
              goto LABEL_98;
            }
            goto LABEL_177;
          }
          v40 = *(_QWORD *)(v31 + 8);
          v41 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
          v167 = v35;
          if (v41 && (v42 = *(_DWORD *)(v41 + 16), (v42 & 0xFE) == 0x28))
          {
LABEL_215:
            if ((v42 & 0x100000) != 0)
            {
              do
              {
                v41 = *(_QWORD *)(*(_QWORD *)(v41 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v41 || (v126 = *(_DWORD *)(v41 + 16), (v126 & 0xFE) != 0x28))
                {
                  v41 = sub_22F10CF48(v41);
                  v126 = *(_DWORD *)(v41 + 16);
                }
                v30 = v165;
                v35 = v167;
              }
              while ((v126 & 0x100000) != 0);
            }
            v40 = *(_QWORD *)(v41 + 32);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v41 = sub_22F10CF48(v41);
            if (v41)
            {
              v42 = *(_DWORD *)(v41 + 16);
              goto LABEL_215;
            }
          }
          if (*v35 == 191)
          {
            v43 = sub_22F00338C(*((unsigned __int8 **)v35 + 2)) & 0xFFFFFFFFFFFFFFF0;
            v44 = *(_QWORD *)v43;
            if (*(_QWORD *)v43)
              v45 = (*(_DWORD *)(*(_QWORD *)v43 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
            else
              v45 = 0;
            if (v45)
              goto LABEL_211;
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
              goto LABEL_73;
            v44 = sub_22F10CF48(v44);
            if (v44)
            {
LABEL_211:
              v40 = *(_QWORD *)(v44 + 32);
            }
            else
            {
              v44 = *(_QWORD *)v43;
LABEL_73:
              v40 = sub_22F10ACF8(v44);
            }
            v35 = v167;
            v46 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
            if (v46 && (v47 = *(_DWORD *)(v46 + 16), (v47 & 0xFE) == 0x28))
            {
LABEL_219:
              if ((v47 & 0x100000) != 0)
              {
                do
                {
                  v46 = *(_QWORD *)(*(_QWORD *)(v46 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v46 || (v127 = *(_DWORD *)(v46 + 16), (v127 & 0xFE) != 0x28))
                  {
                    v46 = sub_22F10CF48(v46);
                    v127 = *(_DWORD *)(v46 + 16);
                  }
                  v30 = v165;
                  v35 = v167;
                }
                while ((v127 & 0x100000) != 0);
              }
              v40 = *(_QWORD *)(v46 + 32);
            }
            else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
            {
              v46 = sub_22F10CF48(v46);
              if (v46)
              {
                v47 = *(_DWORD *)(v46 + 16);
                goto LABEL_219;
              }
            }
            v48 = *((_QWORD *)v35 + 4);
            LOWORD(OpenMPClauseName) = 0;
            *(_QWORD *)&v183 = 0;
            DWORD2(v183) = 0;
            if (v48)
            {
              if ((*(_BYTE *)(v48 + 2) & 1) == 0
                && sub_22F00554C(v48, (uint64_t)&OpenMPClauseName, *(_QWORD *)(a1 + 88), 0, 0))
              {
                v49 = v185;
                if (v185 > 0x40)
                {
                  v25 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v184) == v49;
                  v35 = v167;
                  if (v25)
                  {
LABEL_192:
                    sub_22E8FCA40((_QWORD *)a1, v34, 0x106Bu, 0, (uint64_t)&v180);
                    sub_22F0D4E74((uint64_t)v35);
                    v171 = v118;
                    sub_22E8906A0((uint64_t)&v180, &v171);
                    sub_22E903BEC((unsigned int *)&v180);
                    if (DWORD2(v183) >= 2)
                      sub_22EF53BC0((uint64_t *)&v183 + 1);
                    goto LABEL_181;
                  }
                }
                else
                {
                  v35 = v167;
                  if (!v184)
                    goto LABEL_192;
                }
              }
              if (DWORD2(v183) > 1)
                sub_22EF53BC0((uint64_t *)&v183 + 1);
            }
          }
          if ((*(_DWORD *)v31 & 0x1E000) == 0
            && ((*(_DWORD *)sub_22EFFA6B0((unsigned __int8 *)v31) & 0x300) != 0x100
             || v36
             && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 21544) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0)))
          {
LABEL_180:
            sub_22E8FCA40((_QWORD *)a1, v34, 0x1075u, 0, (uint64_t)&v180);
            LODWORD(v171) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) > 0x31u;
            v111 = sub_22E8900C4((uint64_t)&v180, (int *)&v171);
            LODWORD(v169) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) > 0x31u;
            v112 = sub_22E8900C4(v111, (int *)&v169);
            sub_22F0D4E74(v31);
            OpenMPClauseName = v113;
            sub_22E8906A0(v112, (uint64_t *)&OpenMPClauseName);
            sub_22E903BEC((unsigned int *)&v180);
LABEL_181:
            a3 = v166;
            goto LABEL_44;
          }
          if (*v35 != 107)
            goto LABEL_168;
          v50 = v35 + 24;
          v51 = v35;
          v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v53 = *(_DWORD *)(v52 + 16);
          if (v52)
            v54 = v53 == 11;
          else
            v54 = 0;
          if (v54)
          {
            v57 = v51 + 16;
            v58 = v50;
            if (((*(_DWORD *)(v52 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
              goto LABEL_117;
          }
          else if (v52 && v53 == 44)
          {
            v55 = sub_22F114198(*(_QWORD *)(v52 + 24));
            if ((*(_BYTE *)(v55 + 74) & 1) == 0 && *(_QWORD *)(v55 + 128) <= 7uLL)
            {
              v57 = v167 + 16;
              v58 = v50;
              goto LABEL_117;
            }
            v56 = sub_22F114198(*(_QWORD *)(v52 + 24));
            v57 = v167 + 16;
            v58 = v50;
            if ((*(_QWORD *)(v56 + 72) & 0x8000000000) != 0)
            {
LABEL_117:
              if ((*(_BYTE *)(*(_QWORD *)v58 + 1) & 0x80) != 0)
                goto LABEL_168;
              v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              v73 = *(_DWORD *)(v72 + 16);
              if (v72)
                v74 = v73 == 11;
              else
                v74 = 0;
              if (v74)
              {
                v77 = v50;
                if (((*(_DWORD *)(v72 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                  goto LABEL_130;
              }
              else if (v72 && v73 == 44)
              {
                v75 = v57;
                v76 = sub_22F114198(*(_QWORD *)(v72 + 24));
                if ((*(_BYTE *)(v76 + 74) & 1) == 0 && (v57 = v75, v77 = v50, *(_QWORD *)(v76 + 128) <= 7uLL)
                  || (v78 = sub_22F114198(*(_QWORD *)(v72 + 24)),
                      v57 = v75,
                      v77 = v50,
                      (*(_QWORD *)(v78 + 72) & 0x8000000000) != 0))
                {
LABEL_130:
                  v79 = *(_QWORD *)(*(_QWORD *)v77 + 8) & 0xFFFFFFFFFFFFFFF0;
                  v80 = *(_QWORD *)v79;
                  if (*(_QWORD *)v79 && (v81 = *(_DWORD *)(v80 + 16), (v81 & 0xFE) == 0x28))
                  {
LABEL_233:
                    if ((v81 & 0x100000) != 0)
                    {
                      do
                      {
                        v129 = v57;
                        v80 = *(_QWORD *)(*(_QWORD *)(v80 + 32) & 0xFFFFFFFFFFFFFFF0);
                        if (!v80 || (v130 = *(_DWORD *)(v80 + 16), (v130 & 0xFE) != 0x28))
                        {
                          v80 = sub_22F10CF48(v80);
                          v130 = *(_DWORD *)(v80 + 16);
                        }
                        v30 = v165;
                        v57 = v129;
                      }
                      while ((v130 & 0x100000) != 0);
                    }
                    v79 = *(_QWORD *)(v80 + 32) & 0xFFFFFFFFFFFFFFF0;
                  }
                  else
                  {
                    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                      goto LABEL_133;
                    v128 = v57;
                    v80 = sub_22F10CF48(v80);
                    if (v80)
                    {
                      v81 = *(_DWORD *)(v80 + 16);
                      v30 = v165;
                      v57 = v128;
                      goto LABEL_233;
                    }
                    v30 = v165;
                    v57 = v128;
                  }
LABEL_133:
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v79 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
                  {
                    v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v50 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0);
                    v83 = *(_DWORD *)(v82 + 16);
                    if (v82)
                      v84 = v83 == 11;
                    else
                      v84 = 0;
                    if (v84)
                    {
                      if (((*(_DWORD *)(v82 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                        goto LABEL_164;
                    }
                    else if (v82 && v83 == 44)
                    {
                      v85 = v57;
                      v86 = sub_22F114198(*(_QWORD *)(v82 + 24));
                      if ((*(_BYTE *)(v86 + 74) & 1) == 0 && *(_QWORD *)(v86 + 128) <= 7uLL
                        || (v87 = sub_22F114198(*(_QWORD *)(v82 + 24)),
                            v57 = v85,
                            (*(_QWORD *)(v87 + 72) & 0x8000000000) != 0))
                      {
LABEL_164:
                        v96 = *(_QWORD *)(*(_QWORD *)v50 + 8) & 0xFFFFFFFFFFFFFFF0;
                        v97 = *(_QWORD *)v96;
                        if (!*(_QWORD *)v96 || (v98 = *(_DWORD *)(v97 + 16), (v98 & 0xFE) != 0x28))
                        {
                          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                          {
LABEL_167:
                            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v96 + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16) & 0xFEu)
                               - 2 >= 4)
                              goto LABEL_180;
                            goto LABEL_168;
                          }
                          v97 = sub_22F10CF48(v97);
                          if (!v97)
                          {
                            v30 = v165;
                            goto LABEL_167;
                          }
                          v98 = *(_DWORD *)(v97 + 16);
                          v30 = v165;
                        }
                        if ((v98 & 0x100000) != 0)
                        {
                          do
                          {
                            v97 = *(_QWORD *)(*(_QWORD *)(v97 + 32) & 0xFFFFFFFFFFFFFFF0);
                            if (!v97 || (v131 = *(_DWORD *)(v97 + 16), (v131 & 0xFE) != 0x28))
                            {
                              v97 = sub_22F10CF48(v97);
                              v131 = *(_DWORD *)(v97 + 16);
                            }
                            v30 = v165;
                          }
                          while ((v131 & 0x100000) != 0);
                        }
                        v96 = *(_QWORD *)(v97 + 32) & 0xFFFFFFFFFFFFFFF0;
                        goto LABEL_167;
                      }
                    }
                    else if (v83 != 9)
                    {
                      goto LABEL_164;
                    }
                    v50 = v57;
                    goto LABEL_164;
                  }
LABEL_168:
                  v99 = *(_DWORD *)(a1 + 8456);
                  v100 = *(_BYTE *)(a1 + 11952);
                  v101 = *v161;
                  v102 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
                  sub_22EE03478(a1);
                  if (!v103)
                    *(_BYTE *)(a1 + 11952) = 1;
                  *v161 = 1;
                  v104 = *(_BYTE *)(a1 + 12032);
                  *(_BYTE *)(a1 + 12032) = 1;
                  v105 = sub_22EFFA6B0((unsigned __int8 *)v31);
                  v106 = sub_22EB2EA08(a1, v34, 4, (uint64_t)v105);
                  *(_BYTE *)(a1 + 12032) = v104;
                  *(_DWORD *)(a1 + 8456) = v99;
                  *(_BYTE *)(a1 + 11952) = v100;
                  *v161 = v101;
                  v107 = *(_QWORD *)(a1 + 104);
                  if (*(_DWORD *)(v107 + 180) == 5)
                    *(_BYTE *)(v107 + 170) = 1;
                  if (v102)
                    v108 = 3;
                  else
                    v108 = 0;
                  *(_DWORD *)(v107 + 180) = v108;
                  a3 = v166;
                  v30 = v165;
                  if (v106 <= 1 && (*v167 + 65) >= 2u)
                  {
                    sub_22E8FCA40((_QWORD *)a1, v34, 0x1075u, 0, (uint64_t)&v180);
                    LODWORD(v171) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) > 0x31u;
                    v114 = sub_22E8900C4((uint64_t)&v180, (int *)&v171);
                    LODWORD(v169) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) > 0x31u;
                    v60 = sub_22E8900C4(v114, (int *)&v169);
                    sub_22F0D4E74(v31);
                    OpenMPClauseName = v115;
                    p_OpenMPClauseName = (uint64_t *)&OpenMPClauseName;
LABEL_183:
                    sub_22E8906A0(v60, p_OpenMPClauseName);
                    v38 = (unsigned int *)&v180;
LABEL_184:
                    sub_22E903BEC(v38);
                    goto LABEL_44;
                  }
                  goto LABEL_177;
                }
              }
              else
              {
                v77 = v50;
                if (v73 != 9)
                  goto LABEL_130;
              }
              v77 = v57;
              goto LABEL_130;
            }
          }
          else
          {
            v57 = v167 + 16;
            v58 = v50;
            if (v53 != 9)
              goto LABEL_117;
          }
          v58 = v57;
          goto LABEL_117;
        }
        v37 = sub_22ECB2028(*(_QWORD *)(a1 + 12288));
        if (v37 && *(_BYTE *)(v37 + 1056) && *(_QWORD *)(v37 + 1040))
        {
          if (v178.__r_.__value_.__s.__data_[12])
          {
            if ((llvm::APInt::compare((llvm::APInt *)&v178, (const llvm::APInt *)&v176) & 0x80000000) == 0)
              goto LABEL_54;
          }
          else if ((llvm::APInt::compareSigned((llvm::APInt *)&v178, (const llvm::APInt *)&v176) & 0x80000000) == 0)
          {
LABEL_54:
            sub_22E8FCA40((_QWORD *)a1, v34, 0x106Au, 0, (uint64_t)v173);
            v38 = (unsigned int *)v173;
            goto LABEL_184;
          }
        }
        llvm::APInt::operator++();
        if (!sub_22EFC7ADC(*(_QWORD *)(a1 + 216)))
        {
          v63 = sub_22EFFED0C(v35);
          v64 = v63;
          OpenMPClauseName = v63;
          v65 = *v63;
          if ((v65 & 0xFE) == 0x70)
          {
            v66 = *((_DWORD *)v63 + 1);
            LODWORD(v67) = dword_22F4A2BC4[((unint64_t)*(unsigned int *)v63 >> 18) & 0x3F];
            OpenMPClauseName = sub_22EFFA6B0(*((unsigned __int8 **)v63 + 2));
            v68 = (unsigned __int8 **)(v64 + 24);
            goto LABEL_146;
          }
          if (v65 == 140)
          {
            v70 = *(_QWORD *)(sub_22F060FB4((uint64_t)v63) + 40);
            if ((v70 & 7) == 6)
              LODWORD(v67) = *(_DWORD *)(v70 & 0xFFFFFFFFFFFFFFF8);
            else
              LODWORD(v67) = 0;
            v88 = *(unsigned int *)v64;
            v89 = (uint64_t *)&v64[v88 >> 24];
            sub_22EFF605C(*v89);
            v66 = v90;
            v91 = (unsigned __int8 *)sub_22F060ED0((uint64_t)v64);
            OpenMPClauseName = sub_22EFFA6B0(v91);
            v68 = (unsigned __int8 **)&v89[((v88 >> 18) & 1) + 1];
LABEL_146:
            v71 = sub_22EFFA6B0(*v68);
          }
          else
          {
            if (v65 == 141)
            {
              v67 = HIDWORD(*(_QWORD *)v63) & 0x3FLL;
              v66 = *((_DWORD *)v63 + 5);
              v69 = (uint64_t)&v63[8 * ((*(_QWORD *)v63 >> 18) & 1) + BYTE3(*(_QWORD *)v63)];
              OpenMPClauseName = sub_22EFFA6B0(*(unsigned __int8 **)(v69 + 8));
              v68 = (unsigned __int8 **)(v69 + 16);
              goto LABEL_146;
            }
            LODWORD(v67) = 0;
            v71 = 0;
            v66 = 0;
          }
          v172 = 0;
          v171 = 0;
          v92 = sub_22EC82530((_QWORD *)a1, &OpenMPClauseName, &v172, &v171, 0);
          if ((v93 & 1) != 0)
          {
            v94 = LODWORD(v189[0]);
            if (LODWORD(v189[0]) >= (unint64_t)DWORD1(v189[0]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v94 = LODWORD(v189[0]);
            }
            *(_QWORD *)&__src[8 * v94] = v31;
            ++LODWORD(v189[0]);
          }
          if (!v92)
            goto LABEL_159;
          if ((v67 - 7) > 0xFFFFFFFD)
          {
            if (v71 && (sub_22EC98030((_QWORD *)a1, v71, 18, 0, 0) & 1) != 0)
              goto LABEL_159;
          }
          else if ((_DWORD)v67 || v71)
          {
            sub_22E8FCA40((_QWORD *)a1, v66, 0x1067u, 0, (uint64_t)v170);
            v95 = (unsigned int *)v170;
LABEL_156:
            sub_22E903BEC(v95);
LABEL_159:
            a3 = v166;
            v30 = v165;
            goto LABEL_44;
          }
          if ((sub_22EFC7ADC(*(_QWORD *)(a1 + 216)) & 1) == 0)
          {
            v116 = sub_22ECB2028(*(_QWORD *)(a1 + 12288));
            if (v116)
            {
              v117 = v116;
              if (*(_BYTE *)(v116 + 1056))
              {
                if (*(_QWORD *)(v116 + 1040))
                {
                  v119 = sub_22EC81010(v92);
                  v120 = sub_22F3403D8(v117 + 728, v119);
                  if ((*(_BYTE *)(v117 + 728) & 1) != 0)
                  {
                    v121 = v117 + 736;
                    v122 = 8;
                  }
                  else
                  {
                    v121 = *(_QWORD *)(v117 + 736);
                    v122 = *(_DWORD *)(v117 + 744);
                  }
                  v123 = v121 + 24 * v122 == v120 ? 0 : *(unsigned int *)(v120 + 8);
                  if (sub_22E508590((uint64_t)&v178, v123))
                  {
                    v169 = 0;
                    v124 = (unsigned int *)&v178;
                    if (LODWORD(v178.__r_.__value_.__r.__words[1]) >= 0x41)
                      v124 = (unsigned int *)v178.__r_.__value_.__r.__words[0];
                    v169 = sub_22ECAEA60(*(_QWORD *)(a1 + 12288), *v124);
                    if (v169)
                    {
                      sub_22E8FCA40((_QWORD *)a1, v172, 0x1066u, 0, (uint64_t)&v180);
                      v168 = 1;
                      v125 = sub_22E8900C4((uint64_t)&v180, &v168);
                      sub_22E890024(v125, &v169);
                    }
                    else
                    {
                      sub_22E8FCA40((_QWORD *)a1, v172, 0x1066u, 0, (uint64_t)&v180);
                      v168 = 0;
                      sub_22E8900C4((uint64_t)&v180, &v168);
                    }
                    v95 = (unsigned int *)&v180;
                    goto LABEL_156;
                  }
                }
              }
            }
          }
          sub_22F33F6D0((uint64_t)&v186, (uint64_t)v71, v67);
          a3 = v166;
          v30 = v165;
LABEL_177:
          v109 = sub_22EFFA6B0((unsigned __int8 *)v31);
          v110 = LODWORD(v189[0]);
          if (LODWORD(v189[0]) >= (unint64_t)DWORD1(v189[0]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v110 = LODWORD(v189[0]);
          }
          *(_QWORD *)&__src[8 * v110] = v109;
          goto LABEL_43;
        }
      }
      v32 = LODWORD(v189[0]);
      if (LODWORD(v189[0]) >= (unint64_t)DWORD1(v189[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = LODWORD(v189[0]);
      }
      *(_QWORD *)&__src[8 * v32] = v31;
LABEL_43:
      ++LODWORD(v189[0]);
LABEL_44:
      ++a6;
    }
    while (a6 != v30);
  }
  v132 = sub_22EFC7ADC(*(_QWORD *)(a1 + 216));
  if (a3 == 6 && (v132 & 1) == 0 && sub_22E42E8B8((uint64_t)&v176, a7))
  {
    v133 = *(_QWORD *)(a1 + 12288);
    v134 = sub_22ECB2028(v133);
    if (v134)
    {
      if (*(_BYTE *)(v134 + 1056) && *(_QWORD *)(v134 + 1040) && sub_22ECAEA60(v133, (int)a7 + 1))
      {
        sub_22E8FCA40((_QWORD *)a1, a11, 0x1066u, 0, (uint64_t)&v180);
        LODWORD(v171) = 1;
        v135 = sub_22E8900C4((uint64_t)&v180, (int *)&v171);
        OpenMPClauseName = (unsigned __int8 *)sub_22ECAEA60(*(_QWORD *)(a1 + 12288), (int)a7 + 1);
        sub_22E890024(v135, (uint64_t *)&OpenMPClauseName);
        sub_22E903BEC((unsigned int *)&v180);
      }
    }
  }
  v136 = v159;
  if (LODWORD(v189[0]))
    v136 = 0;
  if (v136)
  {
    v20 = 0;
  }
  else
  {
    v155 = &v176;
    if (v177 >= 0x41)
      v155 = (uint64_t *)v176;
    v20 = (unsigned __int8 *)sub_22F3EBAC8(*(_QWORD *)(a1 + 88), a8, a9, a11, a2, a3, v158, a5, __src, LODWORD(v189[0]), *v155);
    if (v157)
    {
      v156 = sub_22ECB2028(*(_QWORD *)(a1 + 12288));
      if (v156)
      {
        if (*(_BYTE *)(v156 + 1056))
        {
          OpenMPClauseName = v20;
          sub_22F341574((uint64_t)&v180, v156 + 1016, (uint64_t *)&OpenMPClauseName, (uint64_t)&v186);
        }
      }
    }
  }
  if (v177 >= 0x41 && v176)
    MEMORY[0x2348A0E84](v176, 0x1000C8000313F17);
  if (LODWORD(v178.__r_.__value_.__r.__words[1]) >= 0x41 && v178.__r_.__value_.__r.__words[0])
    MEMORY[0x2348A0E84](v178.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  if ((_QWORD *)v186 != v187)
    free((void *)v186);
  if (__src != (char *)v189 + 8)
    free(__src);
  return v20;
}

_DWORD *sub_22ECA7CAC(_QWORD *a1, int *a2, unsigned int a3, int *a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, unint64_t a10, int *a11, unsigned __int8 **a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unsigned int v47[24];
  _BYTE v48[16];
  void *v49;
  int v50;
  uint64_t v51;
  int v52[2];
  int v53;
  void *v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];

  v61[1] = *MEMORY[0x24BDAC8D0];
  v60 = 0;
  v61[0] = 0x200000002;
  v16 = a3;
  if (a3)
  {
    v19 = 0;
    do
    {
      v21 = *a2++;
      v20 = v21;
      if (v21 != 2 && (LODWORD(v61[0]) != v20 ? (v22 = HIDWORD(v61[0]) == v20) : (v22 = 1), v22))
      {
        sub_22E8FCA40(a1, *a4, 0x1073u, 0, (uint64_t)v47);
        sub_22E903BEC(v47);
      }
      else
      {
        *((_DWORD *)v61 + v19) = v20;
        *((_DWORD *)&v61[-1] + v19++) = *a4;
      }
      ++a4;
      --v16;
    }
    while (v16);
  }
  sub_22ECAEB18((uint64_t)v48, a9, a10);
  v23 = a1[1536];
  v24 = *a11;
  v45 = *a7;
  v46 = *((_QWORD *)a7 + 2);
  sub_22ECAEBBC(a1, v23, 81, (uint64_t)v48, v24, a6, (uint64_t)&v45, v25, a12, a13, 6u, 0, 0, 0, 0);
  v26 = 0;
  v27 = v50;
  if (v50)
  {
    v28 = a1[11];
    v29 = (uint64_t *)v54;
    v30 = v55;
    v31 = v49;
    v32 = *(uint64_t **)v52;
    v33 = v53;
    v34 = v57;
    v35 = v58;
    v37 = *(_QWORD *)(a6 + 8);
    v36 = (uint64_t *)(a6 + 8);
    if (v37)
    {
      v40 = v36;
      v41 = (uint64_t *)v54;
      v38 = sub_22F0ABC50(v40, v28);
      v29 = v41;
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v43 = *a7;
    v44 = *((_QWORD *)a7 + 2);
    v26 = sub_22F0C23E0(v28, a11, v31, v27, v29, v30, v32, v33, v34, v35, v61, 2, &v60, 2, v38, v39, (uint64_t)&v43);
  }
  if (v57 != &v59)
    free(v57);
  if (v54 != &v56)
    free(v54);
  sub_22F340364((char **)v52);
  if (v49 != &v51)
    free(v49);
  return v26;
}

_DWORD *sub_22ECA7F24(_QWORD *a1, int *a2, unsigned int a3, int *a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, unint64_t a10, int *a11, unsigned __int8 **a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unsigned int v47[24];
  _BYTE v48[16];
  void *v49;
  int v50;
  uint64_t v51;
  int v52[2];
  int v53;
  void *v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];

  v61[1] = *MEMORY[0x24BDAC8D0];
  v60 = 0;
  v61[0] = 0x200000002;
  v16 = a3;
  if (a3)
  {
    v19 = 0;
    do
    {
      v21 = *a2++;
      v20 = v21;
      if (v21 != 2 && (LODWORD(v61[0]) != v20 ? (v22 = HIDWORD(v61[0]) == v20) : (v22 = 1), v22))
      {
        sub_22E8FCA40(a1, *a4, 0x1073u, 0, (uint64_t)v47);
        sub_22E903BEC(v47);
      }
      else
      {
        *((_DWORD *)v61 + v19) = v20;
        *((_DWORD *)&v61[-1] + v19++) = *a4;
      }
      ++a4;
      --v16;
    }
    while (v16);
  }
  sub_22ECAEB18((uint64_t)v48, a9, a10);
  v23 = a1[1536];
  v24 = *a11;
  v45 = *a7;
  v46 = *((_QWORD *)a7 + 2);
  sub_22ECAEBBC(a1, v23, 31, (uint64_t)v48, v24, a6, (uint64_t)&v45, v25, a12, a13, 6u, 0, 0, 0, 0);
  v26 = 0;
  v27 = v50;
  if (v50)
  {
    v28 = a1[11];
    v29 = (uint64_t *)v54;
    v30 = v55;
    v31 = v49;
    v32 = *(uint64_t **)v52;
    v33 = v53;
    v34 = v57;
    v35 = v58;
    v37 = *(_QWORD *)(a6 + 8);
    v36 = (uint64_t *)(a6 + 8);
    if (v37)
    {
      v40 = v36;
      v41 = (uint64_t *)v54;
      v38 = sub_22F0ABC50(v40, v28);
      v29 = v41;
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    v43 = *a7;
    v44 = *((_QWORD *)a7 + 2);
    v26 = sub_22F0C2758(v28, a11, v31, v27, v29, v30, v32, v33, v34, v35, v61, 2, &v60, 2, v38, v39, (uint64_t)&v43);
  }
  if (v57 != &v59)
    free(v57);
  if (v54 != &v56)
    free(v54);
  sub_22F340364((char **)v52);
  if (v49 != &v51)
    free(v49);
  return v26;
}

_DWORD *sub_22ECA819C(_QWORD *a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unsigned __int8 **v6;
  _BYTE *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  const char *v27;
  size_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  unsigned __int8 **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  _BYTE v72[80];
  unint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned int v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE v79[64];
  void *v80;
  uint64_t v81;
  _BYTE v82[64];
  char v83[16];
  void *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  unsigned int v89;
  void *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  void *v94;
  _QWORD v95[18];

  v6 = (unsigned __int8 **)a2;
  v95[16] = *MEMORY[0x24BDAC8D0];
  sub_22ECAEB18((uint64_t)v83, a2, a3);
  v80 = v82;
  v81 = 0x800000000;
  v77 = v79;
  v78 = 0x800000000;
  if (!a3)
  {
    v8 = v79;
    goto LABEL_91;
  }
  v65 = a4;
  v9 = &v6[a3];
  do
  {
    v10 = *v6;
    v76 = 0;
    v74 = v10;
    v75 = 0;
    v11 = sub_22EC82530(a1, &v74, (int *)&v76, &v75, 0);
    if ((v12 & 1) != 0)
    {
      v13 = v85;
      if (v85 >= (unint64_t)v86)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v85;
      }
      *((_QWORD *)v84 + v13) = v10;
      ++v85;
      v14 = v81;
      if (v81 >= (unint64_t)HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v81;
      }
      *((_QWORD *)v80 + v14) = 0;
      LODWORD(v81) = v81 + 1;
      v15 = v78;
      if (v78 >= (unint64_t)HIDWORD(v78))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v78;
      }
      *(_QWORD *)&v77[8 * v15] = 0;
      LODWORD(v78) = v78 + 1;
    }
    v73 = v11;
    if (!v11)
      goto LABEL_33;
    v16 = *(_QWORD *)(v11 + 48);
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
    v18 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    if (!v18 || (v19 = *(_DWORD *)(v18 + 16), (v19 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_16;
      v18 = sub_22F10CF48(v18);
      if (!v18)
        goto LABEL_16;
      v19 = *(_DWORD *)(v18 + 16);
    }
    if ((v19 & 0x100000) != 0)
    {
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v18)
        {
          v62 = *(_DWORD *)(v18 + 16);
          if ((v62 & 0xFE) == 0x28)
            continue;
        }
        v18 = sub_22F10CF48(v18);
        v62 = *(_DWORD *)(v18 + 16);
      }
      while ((v62 & 0x100000) != 0);
    }
    v16 = *(_QWORD *)(v18 + 32);
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
LABEL_16:
    v20 = *(_QWORD *)v17;
    if ((*(_BYTE *)(*(_QWORD *)v17 + 8) & 0xF) != 0)
      v20 = (unint64_t)sub_22F10D2BC(v16);
    v21 = v20 & 0xFFFFFFFFFFFFFFF0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      sub_22E8FCA40(a1, v76, 0x1105u, 0, (uint64_t)&v70);
      v69 = 0;
      v24 = sub_22E8900C4((uint64_t)&v70, &v69);
      sub_22F0D4E74((uint64_t)v10);
      v68 = v25;
      sub_22E8906A0(v24, &v68);
      sub_22E903BEC((unsigned int *)&v70);
      goto LABEL_33;
    }
    v22 = *(_QWORD *)(v73 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v73 + 40) & 7) != 0 || v22 == 0)
    {
      v28 = 0;
      v27 = "";
    }
    else
    {
      v26 = *(_DWORD **)(v22 + 16);
      v29 = *v26;
      v27 = (const char *)(v26 + 4);
      v28 = v29;
    }
    v30 = *(_DWORD *)(v73 + 28);
    v31 = v76;
    if ((v30 & 0x100) != 0)
    {
      sub_22EFC8E88(v73);
      v32 = v33;
    }
    else
    {
      v32 = 0;
    }
    v34 = (v30 & 0x7F) - 67;
    if (v34 >= 0xFFFFFFF9)
      v35 = v74;
    else
      v35 = 0;
    v36 = sub_22EC822F4(a1, v31, v21, v27, v28, v32, (uint64_t)v35);
    if ((*(_BYTE *)(v36 + 28) & 0x80) == 0)
    {
      v37 = v36;
      sub_22EFCCFA0(a1[27], v36);
      v38 = *(_QWORD *)(*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v38 + 8) & 0xF) != 0)
        v38 = (unint64_t)sub_22F10D2BC(*((_QWORD *)v10 + 1));
      v39 = v38 & 0xFFFFFFFFFFFFFFF0;
      *(_DWORD *)(v37 + 28) |= 0x800u;
      sub_22EFC9100(v37, a1[11]);
      v40 = a1[11];
      v70 = *(_QWORD *)(v37 + 40);
      v71 = v31;
      sub_22EFC6D6C((uint64_t)v72, v70);
      v67 = sub_22E3CD3D4(v40 + 2032, 32, 3);
      sub_22EFF6AE4(v67, v40, 0, 0, 0, v37, 0, (uint64_t)&v70, 0, 0, v39, 1, 0, 0);
      sub_22EFF605C((uint64_t)v10);
      v42 = sub_22EC822F4(a1, v41, v21, ".devptr.temp", 0xCuLL, 0, 0);
      v66 = *((_QWORD *)v10 + 1);
      sub_22EFF605C((uint64_t)v10);
      v44 = v43;
      *(_DWORD *)(v42 + 28) |= 0x800u;
      sub_22EFC9100(v42, a1[11]);
      v45 = a1[11];
      v70 = *(_QWORD *)(v42 + 40);
      v71 = v44;
      sub_22EFC6D6C((uint64_t)v72, v70);
      v46 = sub_22E3CD3D4(v45 + 2032, 32, 3);
      sub_22EFF6AE4(v46, v45, 0, 0, 0, v42, 0, (uint64_t)&v70, 0, 0, v66, 1, 0, 0);
      sub_22EB1A358(a1, v46, 0);
      sub_22EA28AD8();
      v47 = v10;
      if (v34 < 0xFFFFFFF9)
      {
        v48 = sub_22EC9B8AC((uint64_t)a1, v73, v74, 1);
        v49 = (unsigned __int8 *)v48;
        goto LABEL_55;
      }
      while (1)
      {
        v49 = v47;
        v50 = *v47;
        if (v50 > 213)
        {
          if (v50 == 233)
          {
            if ((*(_DWORD *)v49 & 0x7C0000) != 0x300000)
              goto LABEL_54;
            v52 = (unsigned __int8 **)(v49 + 16);
          }
          else
          {
            if (v50 != 214)
              goto LABEL_54;
            v52 = (unsigned __int8 **)(v49 + 24);
          }
        }
        else if (v50 == 155)
        {
          if ((**((_DWORD **)v49 + 2) & 0x18000) != 0)
            goto LABEL_54;
          if (v49[48])
            v52 = (unsigned __int8 **)(v49 + 24);
          else
            v52 = (unsigned __int8 **)(v49 + 32);
        }
        else
        {
          if (v50 != 176 || (v51 = *((unsigned int *)v49 + 5), (_DWORD)v51 == -1))
          {
LABEL_54:
            v48 = 0;
LABEL_55:
            v53 = v85;
            if (v85 >= (unint64_t)v86)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v53 = v85;
            }
            *((_QWORD *)v84 + v53) = v49;
            ++v85;
            v54 = v81;
            if (v81 >= (unint64_t)HIDWORD(v81))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v54 = v81;
            }
            *((_QWORD *)v80 + v54) = v67;
            LODWORD(v81) = v81 + 1;
            v55 = v78;
            if (v78 >= (unint64_t)HIDWORD(v78))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v55 = v78;
            }
            *(_QWORD *)&v77[8 * v55] = v46;
            LODWORD(v78) = v78 + 1;
            if (v10)
            {
              while (1)
              {
                v56 = (uint64_t)v10;
                v57 = *v10;
                if (v57 > 0xD5)
                {
                  if (v57 == 233)
                  {
                    if ((*(_DWORD *)v10 & 0x7C0000) != 0x300000)
                      goto LABEL_79;
                    v59 = v10 + 16;
                  }
                  else
                  {
                    if (v57 != 214)
                      goto LABEL_79;
                    v59 = v10 + 24;
                  }
                }
                else if (v57 == 155)
                {
                  if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
                    goto LABEL_79;
                  if (v10[48])
                    v59 = v10 + 24;
                  else
                    v59 = v10 + 32;
                }
                else
                {
                  if (v57 != 176)
                    goto LABEL_79;
                  v58 = *((unsigned int *)v10 + 5);
                  if ((_DWORD)v58 == -1)
                    goto LABEL_79;
                  v59 = &v10[8 * v58 + 40];
                }
                v10 = *(unsigned __int8 **)v59;
                if (*(_QWORD *)v59 == v56)
                  goto LABEL_79;
              }
            }
            v56 = 0;
LABEL_79:
            sub_22EC83920(a1[1536], v73, v56, 29, v48, 0, 0);
            v60 = v73;
            v61 = v91;
            if (v91 >= (unint64_t)v92)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v61 = v91;
            }
            *((_QWORD *)v90 + v61) = v60;
            ++v91;
            sub_22F341C20((uint64_t)&v88, v89 + 1);
            LOBYTE(v70) = 0;
            sub_22F2B8C7C((uint64_t)&v88[144 * v89 - 144], (uint64_t *)&v74, (uint64_t *)&v73, (unsigned __int8 *)&v70);
            break;
          }
          v52 = (unsigned __int8 **)&v49[8 * v51 + 40];
        }
        v47 = *v52;
        if (v47 == v49)
          goto LABEL_54;
      }
    }
LABEL_33:
    ++v6;
  }
  while (v6 != v9);
  v8 = v77;
  a4 = v65;
LABEL_91:
  if (v85)
  {
    v63 = sub_22F3EBD90(a1[11], a4, v84, v85, v80, v81, v8, v78, (uint64_t *)v90, v91, (uint64_t)v88, v89);
    v8 = v77;
  }
  else
  {
    v63 = 0;
  }
  if (v8 != v79)
    free(v8);
  if (v80 != v82)
    free(v80);
  if (v94 != v95)
    free(v94);
  if (v90 != &v93)
    free(v90);
  sub_22F340364(&v88);
  if (v84 != &v87)
    free(v84);
  return v63;
}

unsigned int *sub_22ECA8A30(_QWORD *a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unsigned __int8 **v6;
  unsigned int *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  char v39[16];
  void *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[18];

  v6 = (unsigned __int8 **)a2;
  v52[16] = *MEMORY[0x24BDAC8D0];
  sub_22ECAEB18((uint64_t)v39, a2, a3);
  if (a3)
  {
    v9 = &v6[a3];
    do
    {
      v10 = *v6;
      v38 = 0;
      v36 = v10;
      v37 = 0;
      v11 = sub_22EC82530(a1, &v36, &v38, &v37, 1);
      if ((v12 & 1) != 0)
      {
        v13 = v41;
        if (v41 >= (unint64_t)v42)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v41;
        }
        *((_QWORD *)v40 + v13) = v10;
        ++v41;
      }
      v35 = v11;
      if (v11)
      {
        v14 = (*(_DWORD *)(v11 + 28) & 0x7F) - 67;
        if (v14 <= 0xFFFFFFF8)
        {
          v15 = sub_22EC9B8AC((uint64_t)a1, v11, v36, 1);
          v16 = (unsigned __int8 *)v15;
          goto LABEL_33;
        }
        if (v10)
        {
          v17 = v10;
          while (1)
          {
            v16 = v17;
            v18 = *v17;
            if (v18 > 213)
            {
              if (v18 == 233)
              {
                if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
                  goto LABEL_31;
                v20 = (unsigned __int8 **)(v16 + 16);
              }
              else
              {
                if (v18 != 214)
                  goto LABEL_31;
                v20 = (unsigned __int8 **)(v16 + 24);
              }
            }
            else if (v18 == 155)
            {
              if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
                goto LABEL_31;
              if (v16[48])
                v20 = (unsigned __int8 **)(v16 + 24);
              else
                v20 = (unsigned __int8 **)(v16 + 32);
            }
            else
            {
              if (v18 != 176 || (v19 = *((unsigned int *)v16 + 5), (_DWORD)v19 == -1))
              {
LABEL_31:
                v15 = 0;
                goto LABEL_33;
              }
              v20 = (unsigned __int8 **)&v16[8 * v19 + 40];
            }
            v17 = *v20;
            if (v17 == v16)
              goto LABEL_31;
          }
        }
        v15 = 0;
        v16 = 0;
LABEL_33:
        v21 = v41;
        if (v41 >= (unint64_t)v42)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = v41;
        }
        *((_QWORD *)v40 + v21) = v16;
        ++v41;
        if (v10)
        {
          v22 = v10;
          while (1)
          {
            v23 = (uint64_t)v22;
            v24 = *v22;
            if (v24 > 213)
            {
              if (v24 == 233)
              {
                if ((*(_DWORD *)v23 & 0x7C0000) != 0x300000)
                  goto LABEL_54;
                v26 = (unsigned __int8 **)(v23 + 16);
              }
              else
              {
                if (v24 != 214)
                  goto LABEL_54;
                v26 = (unsigned __int8 **)(v23 + 24);
              }
            }
            else if (v24 == 155)
            {
              if ((**(_DWORD **)(v23 + 16) & 0x18000) != 0)
                goto LABEL_54;
              if (*(_BYTE *)(v23 + 48))
                v26 = (unsigned __int8 **)(v23 + 24);
              else
                v26 = (unsigned __int8 **)(v23 + 32);
            }
            else
            {
              if (v24 != 176)
                goto LABEL_54;
              v25 = *(unsigned int *)(v23 + 20);
              if ((_DWORD)v25 == -1)
                goto LABEL_54;
              v26 = (unsigned __int8 **)(v23 + 8 * v25 + 40);
            }
            v22 = *v26;
            if (v22 == (unsigned __int8 *)v23)
              goto LABEL_54;
          }
        }
        v23 = 0;
LABEL_54:
        sub_22EC83920(a1[1536], v35, v23, 29, v15, 0, 0);
        v27 = v35;
        v28 = v48;
        if (v48 >= (unint64_t)v49)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v48;
        }
        v47[v28] = v27;
        ++v48;
        if (v45 >= v46)
        {
          sub_22F342668((uint64_t)&v44);
        }
        else
        {
          v29 = &v44[144 * v45];
          *(_QWORD *)v29 = v29 + 16;
          *((_QWORD *)v29 + 1) = 0x800000000;
          ++v45;
        }
        v30 = v36;
        v34 = v36;
        if (v14 >= 0xFFFFFFF9)
        {
          v31 = *sub_22EFFA6B0(v10);
          if (v31 == 191 || v31 == 107)
            v34 = (unsigned __int8 *)(sub_22EB1B954((uint64_t)a1, v30) & 0xFFFFFFFFFFFFFFFELL);
        }
        v33 = 0;
        sub_22F2B8C7C((uint64_t)&v44[144 * v45 - 144], (uint64_t *)&v34, (uint64_t *)&v35, &v33);
      }
      ++v6;
    }
    while (v6 != v9);
  }
  if (v41)
    v8 = sub_22F3EBF90(a1[11], a4, v40, v41, v47, v48, (uint64_t *)v44, v45);
  else
    v8 = 0;
  if (v51 != v52)
    free(v51);
  if (v47 != &v50)
    free(v47);
  sub_22F340364(&v44);
  if (v40 != &v43)
    free(v40);
  return v8;
}

unsigned int *sub_22ECA8EC4(_QWORD *a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unsigned __int8 **v5;
  unsigned int *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  unint64_t v39;
  int v40;
  int v41;
  __int128 v43;
  _QWORD v45[2];
  uint64_t v46[2];
  uint64_t v47[2];
  _QWORD v48[5];
  _OWORD v49[6];
  unint64_t v50;
  uint64_t v51;
  int v52;
  _BYTE v53[16];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[18];

  v5 = (unsigned __int8 **)a2;
  v65[16] = *MEMORY[0x24BDAC8D0];
  sub_22ECAEB18((uint64_t)v53, a2, a3);
  if (a3)
  {
    v8 = &v5[a3];
    do
    {
      v9 = *v5;
      v52 = 0;
      v50 = (unint64_t)v9;
      v51 = 0;
      v10 = (_QWORD *)sub_22EC82530(a1, (unsigned __int8 **)&v50, &v52, &v51, 0);
      if ((v11 & 1) != 0)
      {
        v12 = v55;
        if (v55 >= (unint64_t)v56)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v55;
        }
        *((_QWORD *)v54 + v12) = v9;
        ++v55;
      }
      if (!v10)
        goto LABEL_25;
      v13 = v10[6] & 0xFFFFFFFFFFFFFFF0;
      v14 = *(_QWORD *)v13;
      if (!*(_QWORD *)v13 || (v15 = *(_DWORD *)(v14 + 16), (v15 & 0xFE) != 0x28))
      {
        v16 = v10[6] & 0xFFFFFFFFFFFFFFF0;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_13;
        v14 = sub_22F10CF48(v14);
        if (!v14)
        {
          v16 = v13;
          goto LABEL_13;
        }
        v15 = *(_DWORD *)(v14 + 16);
      }
      if ((v15 & 0x100000) != 0)
      {
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v14)
          {
            v40 = *(_DWORD *)(v14 + 16);
            if ((v40 & 0xFE) == 0x28)
              continue;
          }
          v14 = sub_22F10CF48(v14);
          v40 = *(_DWORD *)(v14 + 16);
        }
        while ((v40 & 0x100000) != 0);
      }
      v16 = *(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_13:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        goto LABEL_18;
      v17 = *(_QWORD *)v13;
      if (!*(_QWORD *)v13 || (v18 = *(_DWORD *)(v17 + 16), (v18 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_17;
        v17 = sub_22F10CF48(v17);
        if (!v17)
          goto LABEL_17;
        v18 = *(_DWORD *)(v17 + 16);
      }
      if ((v18 & 0x100000) != 0)
      {
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v17)
          {
            v41 = *(_DWORD *)(v17 + 16);
            if ((v41 & 0xFE) == 0x28)
              continue;
          }
          v17 = sub_22F10CF48(v17);
          v41 = *(_DWORD *)(v17 + 16);
        }
        while ((v41 & 0x100000) != 0);
      }
      v13 = *(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_17:
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 >= 4)
      {
        sub_22E8FCA40(a1, v52, 0x1040u, 0, (uint64_t)v49);
        LODWORD(v47[0]) = 0;
        v25 = sub_22E8900C4((uint64_t)v49, (int *)v47);
        sub_22F0D4E74((uint64_t)v9);
        v48[0] = v26;
        v24 = v48;
        v23 = (_OWORD *)v25;
        goto LABEL_23;
      }
LABEL_18:
      sub_22EC7F2A4(a1[1536], (uint64_t)v10, 0, (uint64_t)v48);
      if ((HIDWORD(v48[0]) - 29) <= 0x30 && ((1 << (BYTE4(v48[0]) - 29)) & 0x100240000C101) != 0)
      {
        sub_22E8FCA40(a1, v52, 0x110Au, 0, (uint64_t)v49);
        v47[0] = llvm::omp::getOpenMPClauseName();
        v47[1] = v27;
        v28 = sub_22F2F2210((uint64_t)v49, (uint64_t)v47);
        v46[0] = llvm::omp::getOpenMPClauseName();
        v46[1] = v29;
        v30 = sub_22F2F2210(v28, (uint64_t)v46);
        sub_22ECB1B04(a1[1536]);
        v45[0] = llvm::omp::getOpenMPDirectiveName();
        v45[1] = v31;
        sub_22F2F2210(v30, (uint64_t)v45);
        sub_22E903BEC((unsigned int *)v49);
        sub_22EC82B14(a1, a1[1536], (uint64_t)v10, (uint64_t)v48, 0);
        goto LABEL_25;
      }
      v47[0] = 0;
      v19 = a1[1536];
      *(_QWORD *)&v49[0] = v47;
      if (!sub_22EC829E0(v19, (uint64_t)v10, 1u, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF84CC, (uint64_t)v49))
      {
        v32 = (unsigned __int8 *)v50;
        *(_QWORD *)&v49[0] = v50 & 0xFFFFFFFFFFFFFFFDLL;
        *((_QWORD *)&v49[0] + 1) = (*(uint64_t (**)(_QWORD *))(*v10 + 32))(v10);
        sub_22ECB0DE4(a1[1536], (uint64_t)v10, v49, 1, 42);
        v33 = v55;
        if (v55 >= (unint64_t)v56)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = v55;
        }
        *((_QWORD *)v54 + v33) = v32;
        v34 = v61;
        ++v55;
        v35 = *v32;
        if (v61 >= (unint64_t)v62)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v61;
        }
        if (v35 == 161)
          v36 = v10;
        else
          v36 = 0;
        *((_QWORD *)v60 + v34) = v36;
        ++v61;
        sub_22F341C20((uint64_t)&v58, v59 + 1);
        v37 = &v58[144 * v59];
        v38 = v49[0];
        v39 = *((unsigned int *)v37 - 34);
        if (v39 >= *((unsigned int *)v37 - 33))
        {
          v43 = v49[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = v43;
          v39 = *((unsigned int *)v37 - 34);
        }
        *(_OWORD *)(*((_QWORD *)v37 - 18) + 16 * v39) = v38;
        ++*((_DWORD *)v37 - 34);
        goto LABEL_25;
      }
      sub_22E8FCA40(a1, v52, 0x10B1u, 0, (uint64_t)v49);
      sub_22F0D4E74((uint64_t)v9);
      v46[0] = v20;
      sub_22E8906A0((uint64_t)v49, v46);
      sub_22E903BEC((unsigned int *)v49);
      sub_22EFF605C(v47[0]);
      sub_22E8FCA40(a1, v21, 0x180Cu, 0, (uint64_t)v49);
      sub_22F0D4E74(v47[0]);
      v46[0] = v22;
      v23 = v49;
      v24 = v46;
LABEL_23:
      sub_22E8906A0((uint64_t)v23, v24);
      sub_22E903BEC((unsigned int *)v49);
LABEL_25:
      ++v5;
    }
    while (v5 != v8);
  }
  if (v55)
    v7 = sub_22F3EC138(a1[11], a4, v54, v55, (uint64_t *)v60, v61, (uint64_t *)v58, v59);
  else
    v7 = 0;
  if (v64 != v65)
    free(v64);
  if (v60 != &v63)
    free(v60);
  sub_22F340364(&v58);
  if (v54 != &v57)
    free(v54);
  return v7;
}

unsigned int *sub_22ECA94BC(_QWORD *a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unsigned __int8 **v5;
  unsigned int *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  _DWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  unsigned __int8 *v37;
  __int128 v38;
  _QWORD v39[2];
  uint64_t v40[2];
  uint64_t v41[2];
  _OWORD v42[6];
  _BYTE v43[4];
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  char v48[16];
  void *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  _QWORD v60[18];

  v5 = (unsigned __int8 **)a2;
  v60[16] = *MEMORY[0x24BDAC8D0];
  sub_22ECAEB18((uint64_t)v48, a2, a3);
  if (a3)
  {
    v8 = &v5[a3];
    do
    {
      v9 = *v5;
      v47 = 0;
      v45 = (unint64_t)v9;
      v46 = 0;
      v10 = (_DWORD *)sub_22EC82530(a1, (unsigned __int8 **)&v45, &v47, &v46, 1);
      if ((v11 & 1) != 0)
      {
        v12 = v50;
        if (v50 >= (unint64_t)v51)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v50;
        }
        *((_QWORD *)v49 + v12) = v9;
        ++v50;
      }
      if (v10)
      {
        sub_22EC7F2A4(a1[1536], (uint64_t)v10, 0, (uint64_t)v43);
        if ((v44 - 29) > 0x30 || ((1 << (v44 - 29)) & 0x100240000C101) == 0)
        {
          v41[0] = 0;
          v14 = a1[1536];
          *(_QWORD *)&v42[0] = v41;
          if (sub_22EC829E0(v14, (uint64_t)v10, 1u, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_22ECF84E4, (uint64_t)v42))
          {
            sub_22E8FCA40(a1, v47, 0x10B1u, 0, (uint64_t)v42);
            sub_22F0D4E74((uint64_t)v9);
            v40[0] = v15;
            sub_22E8906A0((uint64_t)v42, v40);
            sub_22E903BEC((unsigned int *)v42);
            sub_22EFF605C(v41[0]);
            sub_22E8FCA40(a1, v16, 0x180Cu, 0, (uint64_t)v42);
            sub_22F0D4E74(v41[0]);
            v40[0] = v17;
            sub_22E8906A0((uint64_t)v42, v40);
            sub_22E903BEC((unsigned int *)v42);
          }
          else
          {
            v23 = (unsigned __int8 *)v45;
            *(_QWORD *)&v42[0] = v45 & 0xFFFFFFFFFFFFFFFDLL;
            *((_QWORD *)&v42[0] + 1) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10);
            sub_22ECB0DE4(a1[1536], (uint64_t)v10, v42, 1, 34);
            v37 = v23;
            if ((v10[7] & 0x7Fu) - 67 > 0xFFFFFFF8 || (sub_22EFC7ADC(a1[27]) & 1) != 0)
            {
              if (v9)
              {
                while (1)
                {
                  v24 = (uint64_t)v9;
                  v25 = *v9;
                  if (v25 > 0xD5)
                  {
                    if (v25 == 233)
                    {
                      if ((*(_DWORD *)v9 & 0x7C0000) != 0x300000)
                        goto LABEL_40;
                      v27 = v9 + 16;
                    }
                    else
                    {
                      if (v25 != 214)
                        goto LABEL_40;
                      v27 = v9 + 24;
                    }
                  }
                  else if (v25 == 155)
                  {
                    if ((**((_DWORD **)v9 + 2) & 0x18000) != 0)
                      goto LABEL_40;
                    if (v9[48])
                      v27 = v9 + 24;
                    else
                      v27 = v9 + 32;
                  }
                  else
                  {
                    if (v25 != 176)
                      goto LABEL_40;
                    v26 = *((unsigned int *)v9 + 5);
                    if ((_DWORD)v26 == -1)
                      goto LABEL_40;
                    v27 = &v9[8 * v26 + 40];
                  }
                  v9 = *(unsigned __int8 **)v27;
                  if (*(_QWORD *)v27 == v24)
                    goto LABEL_40;
                }
              }
              v24 = 0;
            }
            else
            {
              v24 = sub_22EC9B8AC((uint64_t)a1, (uint64_t)v10, v23, 1);
            }
LABEL_40:
            v28 = v50;
            if (v50 >= (unint64_t)v51)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v28 = v50;
            }
            *((_QWORD *)v49 + v28) = v24;
            v29 = v56;
            ++v50;
            v30 = *v37;
            if (v56 >= (unint64_t)v57)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = v56;
            }
            if (v30 == 161)
              v31 = v10;
            else
              v31 = 0;
            *((_QWORD *)v55 + v29) = v31;
            ++v56;
            sub_22F341C20((uint64_t)&v53, v54 + 1);
            v32 = &v53[144 * v54];
            v33 = v42[0];
            v34 = *((unsigned int *)v32 - 34);
            if (v34 >= *((unsigned int *)v32 - 33))
            {
              v38 = v42[0];
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v33 = v38;
              v34 = *((unsigned int *)v32 - 34);
            }
            *(_OWORD *)(*((_QWORD *)v32 - 18) + 16 * v34) = v33;
            ++*((_DWORD *)v32 - 34);
          }
        }
        else
        {
          sub_22E8FCA40(a1, v47, 0x110Au, 0, (uint64_t)v42);
          v41[0] = llvm::omp::getOpenMPClauseName();
          v41[1] = v18;
          v19 = sub_22F2F2210((uint64_t)v42, (uint64_t)v41);
          v40[0] = llvm::omp::getOpenMPClauseName();
          v40[1] = v20;
          v21 = sub_22F2F2210(v19, (uint64_t)v40);
          sub_22ECB1B04(a1[1536]);
          v39[0] = llvm::omp::getOpenMPDirectiveName();
          v39[1] = v22;
          sub_22F2F2210(v21, (uint64_t)v39);
          sub_22E903BEC((unsigned int *)v42);
          sub_22EC82B14(a1, a1[1536], (uint64_t)v10, (uint64_t)v43, 0);
        }
      }
      ++v5;
    }
    while (v5 != v8);
  }
  if (v50)
    v7 = sub_22F3EC2E0(a1[11], a4, v49, v50, (uint64_t *)v55, v56, (uint64_t *)v53, v54);
  else
    v7 = 0;
  if (v59 != v60)
    free(v59);
  if (v55 != &v58)
    free(v55);
  sub_22F340364(&v53);
  if (v49 != &v52)
    free(v49);
  return v7;
}

uint64_t sub_22ECA9A04(uint64_t *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  unsigned int v48[24];
  void *v49;
  uint64_t v50;
  _QWORD v51[10];

  v51[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    sub_22EFF605C(a2);
    if (!sub_22ECA0798(a1, v16, a1[1536]))
      return 0;
    v17 = sub_22EB1A358(a1, a2, 0);
    if ((v17 & 1) != 0)
      return 0;
    v18 = sub_22ECFABE8(a1, (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(a1[1536] + 21536), 4, 1);
    if ((v18 & 1) != 0)
      return 0;
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    if ((*(_BYTE *)(a1[9] + 76) & 8) != 0)
    {
      v33 = a1[1536];
      v34 = *(unsigned int *)(v33 + 21512);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v33 + 21504);
        v36 = v35 + 8 * v34;
        while (1)
        {
          v37 = *(unsigned int **)(*(_QWORD *)v35 + 40);
          v40 = *v37;
          v38 = v37 + 4;
          v39 = v40;
          if (v40)
            break;
LABEL_54:
          v35 += 8;
          if (v35 == v36)
            goto LABEL_55;
        }
        v41 = 8 * v39;
        while (*(_DWORD *)(*(_QWORD *)v38 + 8) != 25)
        {
          v38 += 2;
          v41 -= 8;
          if (!v41)
            goto LABEL_54;
        }
      }
      else
      {
LABEL_55:
        sub_22F308EA4(a1, a5, 0xCEEu, 0, (uint64_t)v48);
        sub_22E903BEC(v48);
      }
    }
    v19 = 0;
  }
  v49 = v51;
  v50 = 0x800000000;
  if (!a4)
    goto LABEL_44;
  v44 = v19;
  v21 = &a3[a4];
  do
  {
    v22 = *a3;
    v47 = 0;
    v45 = v22;
    v46 = 0;
    v23 = sub_22EC82530(a1, &v45, &v47, &v46, 0);
    if ((v24 & 1) != 0)
    {
      v25 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v50;
      }
      *((_QWORD *)v49 + v25) = v22;
      LODWORD(v50) = v50 + 1;
    }
    if (v23)
    {
      if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8
        || ((sub_22EFC7ADC(a1[27]) & 1) == 0 ? (v26 = sub_22EC9B8AC((uint64_t)a1, v23, v45, 0)) : (v26 = 0),
            sub_22EFC7ADC(a1[27])))
      {
        if (v22)
        {
          while (1)
          {
            v26 = (uint64_t)v22;
            v27 = *v22;
            if (v27 > 0xD5)
            {
              if (v27 == 233)
              {
                if ((*(_DWORD *)v22 & 0x7C0000) != 0x300000)
                  goto LABEL_39;
                v29 = v22 + 16;
              }
              else
              {
                if (v27 != 214)
                  goto LABEL_39;
                v29 = v22 + 24;
              }
            }
            else if (v27 == 155)
            {
              if ((**((_DWORD **)v22 + 2) & 0x18000) != 0)
                goto LABEL_39;
              if (v22[48])
                v29 = v22 + 24;
              else
                v29 = v22 + 32;
            }
            else
            {
              if (v27 != 176)
                goto LABEL_39;
              v28 = *((unsigned int *)v22 + 5);
              if ((_DWORD)v28 == -1)
                goto LABEL_39;
              v29 = &v22[8 * v28 + 40];
            }
            v22 = *(unsigned __int8 **)v29;
            if (*(_QWORD *)v29 == v26)
              goto LABEL_39;
          }
        }
        v26 = 0;
      }
LABEL_39:
      v30 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v30 = v50;
      }
      *((_QWORD *)v49 + v30) = v26;
      LODWORD(v50) = v50 + 1;
    }
    ++a3;
  }
  while (a3 != v21);
  v31 = v50;
  if ((_DWORD)v50)
  {
    if (v44)
    {
      v42 = sub_22ECB1B04(a1[1536]);
      v43 = *(_DWORD *)(v42 + 1144);
      if (v43 >= *(_DWORD *)(v42 + 1148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v43 = *(_DWORD *)(v42 + 1144);
      }
      *(_QWORD *)(*(_QWORD *)(v42 + 1136) + 8 * v43) = v44;
      ++*(_DWORD *)(v42 + 1144);
      v31 = v50;
    }
    v20 = sub_22F3EB8F0(a1[11], a5, a7, v44, a6, a8, v49, v31);
  }
  else
  {
LABEL_44:
    v20 = 0;
  }
  if (v49 != v51)
    free(v49);
  return v20;
}

_DWORD *sub_22ECA9DF0(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t OpenMPClauseName;
  uint64_t v34;
  int v35;
  uint64_t v36[12];
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v40 = v42;
  v41 = 0x800000000;
  if (!a3)
    return 0;
  v9 = 8 * a3;
  do
  {
    v10 = *a2;
    v39 = 0;
    v37 = v10;
    v38 = 0;
    v11 = sub_22EC82530(a1, &v37, &v39, &v38, 0);
    if ((v12 & 1) != 0)
    {
      v13 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v41;
      }
      *((_QWORD *)v40 + v13) = v10;
      LODWORD(v41) = v41 + 1;
    }
    if (v11)
    {
      v14 = a1[1536];
      v15 = v37;
      v16 = sub_22EC81010(v11);
      v36[0] = v16;
      v17 = sub_22ECB1B04(v14);
      v18 = sub_22F29FE80(v17 + 568, v16);
      if ((*(_BYTE *)(v17 + 568) & 1) != 0)
      {
        v19 = v17 + 576;
        v20 = 8;
      }
      else
      {
        v19 = *(_QWORD *)(v17 + 576);
        v20 = *(unsigned int *)(v17 + 584);
      }
      if (v19 + 16 * v20 == v18)
      {
        sub_22F341310((_DWORD *)(v17 + 568), v36)[1] = v15;
      }
      else
      {
        v21 = *(_QWORD *)(v18 + 8);
        if (v21)
        {
          sub_22E8FCA40(a1, v39, 0x1104u, 0, (uint64_t)v36);
          v35 = 0;
          v23 = sub_22E8900C4((uint64_t)v36, &v35);
          OpenMPClauseName = llvm::omp::getOpenMPClauseName();
          v34 = v24;
          v25 = sub_22F2F2210(v23, (uint64_t)&OpenMPClauseName);
          sub_22E8906A0(v25, &v38);
          sub_22E903BEC((unsigned int *)v36);
          sub_22EFF605C(v21);
          sub_22E8FCA40(a1, v26, 0x1701u, 0, (uint64_t)v36);
          OpenMPClauseName = llvm::omp::getOpenMPClauseName();
          v34 = v27;
          sub_22F2F2210((uint64_t)v36, (uint64_t)&OpenMPClauseName);
          sub_22E903BEC((unsigned int *)v36);
          goto LABEL_8;
        }
      }
      v22 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = v41;
      }
      *((_QWORD *)v40 + v22) = v10;
      LODWORD(v41) = v41 + 1;
    }
LABEL_8:
    ++a2;
    v9 -= 8;
  }
  while (v9);
  v28 = v40;
  if ((_DWORD)v41)
  {
    v29 = sub_22F3EC488(a1[11], a4, a5, a6, v40, v41);
    v28 = v40;
  }
  else
  {
    v29 = 0;
  }
  if (v28 != v42)
    free(v28);
  return v29;
}

_DWORD *sub_22ECAA0AC(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  uint64_t v24;
  unsigned int v25[24];
  _BYTE v26[4];
  int v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[10];

  v34[8] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v33 = 0x800000000;
  if (!a3)
    return 0;
  v11 = 8 * a3;
  do
  {
    v12 = *a2;
    v31 = 0;
    v29 = v12;
    v30 = 0;
    v13 = sub_22EC82530(a1, &v29, &v31, &v30, 1);
    if ((v14 & 1) != 0)
    {
      v15 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v33;
      }
      *((_QWORD *)v32 + v15) = v12;
      LODWORD(v33) = v33 + 1;
    }
    if (v13)
    {
      sub_22EC7F2A4(a1[1536], v13, 1, (uint64_t)v26);
      if (v27 != 66 || v28 != 1)
      {
        sub_22E8FCA40(a1, v31, 0x108Au, 0, (uint64_t)v25);
        sub_22F0D4E74((uint64_t)v12);
        v24 = v17;
        sub_22E8906A0((uint64_t)v25, &v24);
        sub_22E903BEC(v25);
      }
      v18 = a1[1536];
      v19 = sub_22ECB2028(v18);
      if (v19 && *(_DWORD *)(v19 + 960) != 89)
        sub_22ECB0F38(v18, v13);
      v20 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v33;
      }
      *((_QWORD *)v32 + v20) = v12;
      LODWORD(v33) = v33 + 1;
    }
    ++a2;
    v11 -= 8;
  }
  while (v11);
  v21 = v32;
  if ((_DWORD)v33)
  {
    v22 = sub_22F3EC548(a1[11], a4, a5, a6, v32, v33);
    v21 = v32;
  }
  else
  {
    v22 = 0;
  }
  if (v21 != v34)
    free(v21);
  return v22;
}

_DWORD *sub_22ECAA2D4(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v23;
  unsigned int v24[24];
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[10];

  v30[8] = *MEMORY[0x24BDAC8D0];
  v28 = v30;
  v29 = 0x800000000;
  if (!a3)
    return 0;
  v11 = 8 * a3;
  do
  {
    v12 = *a2;
    v27 = 0;
    v25 = v12;
    v26 = 0;
    v13 = sub_22EC82530(a1, &v25, &v27, &v26, 1);
    if ((v14 & 1) != 0)
    {
      v15 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v29;
      }
      *((_QWORD *)v28 + v15) = v12;
      LODWORD(v29) = v29 + 1;
    }
    if (v13)
    {
      v16 = a1[1536];
      v17 = sub_22ECB2028(v16);
      if (v17
        && *(_DWORD *)(v17 + 960) != 89
        && (sub_22EC7F2A4(v16, v13, 1, (uint64_t)v24), v24[1] == 66)
        && v24[2] == 1)
      {
        sub_22ECB0F38(a1[1536], v13);
      }
      else
      {
        sub_22E8FCA40(a1, v27, 0x108Au, 0, (uint64_t)v24);
        sub_22F0D4E74((uint64_t)v12);
        v23 = v18;
        sub_22E8906A0((uint64_t)v24, &v23);
        sub_22E903BEC(v24);
      }
      v19 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v29;
      }
      *((_QWORD *)v28 + v19) = v12;
      LODWORD(v29) = v29 + 1;
    }
    ++a2;
    v11 -= 8;
  }
  while (v11);
  v20 = v28;
  if ((_DWORD)v29)
  {
    v21 = sub_22F3EC60C(a1[11], a4, a5, a6, v28, v29);
    v20 = v28;
  }
  else
  {
    v21 = 0;
  }
  if (v20 != v30)
    free(v20);
  return v21;
}

uint64_t sub_22ECAA508(uint64_t a1, int a2, int a3, unsigned int a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  _QWORD *v9;
  char *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  char v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44[24];
  void *v45;
  uint64_t v46;
  _QWORD v47[10];

  v47[8] = *MEMORY[0x24BDAC8D0];
  v45 = v47;
  v46 = 0x800000000;
  if (!a8)
  {
    v9 = v47;
    goto LABEL_28;
  }
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v38 = a6;
  v11 = (char *)(a1 + 10664);
  v12 = 8 * a8;
  do
  {
    v13 = (unsigned __int8 *)*a7;
    if (*(unsigned __int8 *)*a7 == 163 || (v13[1] & 0x80) != 0)
    {
      v26 = v46;
      if (v46 >= (unint64_t)HIDWORD(v46))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = v46;
      }
      *((_QWORD *)v45 + v26) = v13;
      goto LABEL_22;
    }
    sub_22EFF605C(*a7);
    v15 = v14;
    v16 = sub_22EFFA6B0(v13);
    if ((*(_DWORD *)v16 & 0x300) == 0x100)
    {
      v17 = v16;
      v18 = *(_DWORD *)(a1 + 8456);
      v19 = *v11;
      v39 = *(_BYTE *)(a1 + 11952);
      v40 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
      sub_22EE03478(a1);
      if (!v20)
        *(_BYTE *)(a1 + 11952) = 1;
      *v11 = 1;
      v21 = *(_BYTE *)(a1 + 12032);
      *(_BYTE *)(a1 + 12032) = 1;
      v22 = sub_22EB2EA08(a1, v15, 4, (uint64_t)v17);
      *(_BYTE *)(a1 + 12032) = v21;
      *(_DWORD *)(a1 + 8456) = v18;
      *(_BYTE *)(a1 + 11952) = v39;
      *v11 = v19;
      v23 = *(_QWORD *)(a1 + 104);
      if (*(_DWORD *)(v23 + 180) == 5)
        *(_BYTE *)(v23 + 170) = 1;
      if (v40)
        v24 = 3;
      else
        v24 = 0;
      *(_DWORD *)(v23 + 180) = v24;
      if (v22 > 1 || (*v17 + 65) < 2u)
      {
        v25 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = v46;
        }
        *((_QWORD *)v45 + v25) = v17;
LABEL_22:
        LODWORD(v46) = v46 + 1;
        goto LABEL_23;
      }
      v28 = (_QWORD *)a1;
      v27 = v15;
    }
    else
    {
      v27 = v15;
      v28 = (_QWORD *)a1;
    }
    sub_22E8FCA40(v28, v27, 0x1075u, 0, (uint64_t)v44);
    v43 = 1;
    v29 = sub_22E8900C4((uint64_t)v44, &v43);
    v42 = 0;
    v30 = sub_22E8900C4(v29, &v42);
    sub_22F0D4E74((uint64_t)v13);
    v41 = v31;
    sub_22E8906A0(v30, &v41);
    sub_22E903BEC(v44);
LABEL_23:
    ++a7;
    v12 -= 8;
  }
  while (v12);
  v9 = v45;
  a8 = v46;
  a6 = v38;
  a4 = v36;
  a5 = v37;
  a2 = v34;
  a3 = v35;
LABEL_28:
  v32 = sub_22F3EC82C(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, v9, a8);
  if (v45 != v47)
    free(v45);
  return v32;
}

BOOL sub_22ECAA7DC(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v11;
  _BOOL8 v12;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD v18[2];
  unsigned int v19[25];
  BOOL v20;
  unint64_t v21;

  v21 = a2;
  v11 = a1[11];
  v20 = 0;
  v12 = sub_22ECB1E3C((uint64_t)a1, a3, a6, &v20);
  if (v12)
  {
    v14 = v20 ? 4181 : 4182;
    v15 = a7 ? 4180 : v14;
    sub_22E8FCA40(a1, a5, v15, 0, (uint64_t)v19);
    v18[0] = llvm::omp::getOpenMPClauseName();
    v18[1] = v16;
    sub_22F2F2210((uint64_t)v19, (uint64_t)v18);
    sub_22E903BEC(v19);
    if (a2)
    {
      if ((a7 & 1) == 0)
      {
        v17 = 6001;
        if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
        {
          if (sub_22EFBBF74(a2, v11))
            v17 = 5543;
          else
            v17 = 6001;
        }
        sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), v17, 0, (uint64_t)v19);
        sub_22E890024((uint64_t)v19, (uint64_t *)&v21);
        sub_22E903BEC(v19);
      }
    }
  }
  return v12;
}

uint64_t sub_22ECAA908(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a3;
  v8 = *(_DWORD *)(a2 + 344);
  if (v8
    && (v9 = *(_QWORD *)(a2 + 336) + 5272 * v8, *(_QWORD *)(v9 - 8) == *(_QWORD *)(a2 + 328))
    && *(_DWORD *)(v9 - 5264) > *(_DWORD *)(a2 + 21496))
  {
    v5 = sub_22EC81010(a3);
    v10 = *(_DWORD *)(a2 + 344);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 336) + 5272 * v10 - 5272;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)v11 + 1312 * *(unsigned int *)(v11 + 8) - 1312 * *(unsigned int *)(a2 + 21496);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    if (v12 == v13)
      v15 = 0;
    else
      v15 = a4;
    v16 = v13;
    v17 = v13 + 1312 * (v15 << 31 >> 31);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  return sub_22ECB208C(a1, a2, &v16, v5);
}

double sub_22ECAA9FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, _QWORD, _QWORD), uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD), uint64_t a7, int a8)
{
  unsigned int v9;
  uint64_t v11;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double result;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = *(_DWORD *)(a2 + 344);
  if (!v9)
    goto LABEL_15;
  v11 = *(_QWORD *)(a2 + 336) + 5272 * v9;
  if (*(_QWORD *)(v11 - 8) != *(_QWORD *)(a2 + 328) || *(_DWORD *)(v11 - 5264) <= *(_DWORD *)(a2 + 21496))
    goto LABEL_15;
  v17 = sub_22EC81010(a3);
  v18 = *(_DWORD *)(a2 + 344);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 336) + 5272 * v18 - 5272;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)v19 + 1312 * *(unsigned int *)(v19 + 8) - 1312 * *(unsigned int *)(a2 + 21496);
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  v22 = v20 == v21 ? 0 : a8;
  v23 = v21 + 1312 * (v22 << 31 >> 31);
  if (v23 != v20
    && (a6(a7, *(unsigned int *)(v23 - 352)) & 1) != 0
    && (v28 = v21, v29 = v23, sub_22ECB208C((uint64_t)v26, a2, &v28, v17), v29 == v23)
    && a4(a5, DWORD1(v26[0]), BYTE4(v27)))
  {
    result = *(double *)v26;
    v25 = v26[1];
    *(_OWORD *)a1 = v26[0];
    *(_OWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 32) = v27;
  }
  else
  {
LABEL_15:
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)&result = 0x5500000059;
    *(_QWORD *)a1 = 0x5500000059;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 29) = 0;
  }
  return result;
}

unint64_t sub_22ECAAB84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;

  if (!a3)
    return 0;
  v5 = 0;
  v6 = 8 * a3;
  do
  {
    v7 = *a2;
    sub_22EFF605C(*a2);
    v9 = v8;
    v10 = sub_22EF579A8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 0);
    sub_22EFF605C(v7);
    v12 = sub_22E95CFA4(a1, v9, v10, v11, v7);
    if (v5)
    {
      sub_22EFF605C(v12 & 0xFFFFFFFFFFFFFFFELL);
      v5 = sub_22EB2D0B8() & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v5 = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    ++a2;
    v6 -= 8;
  }
  while (v6);
  return v5;
}

uint64_t sub_22ECAAC58(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v5;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x800000000;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0x800000000;
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_QWORD *)(a1 + 248) = 0x800000000;
  *(_QWORD *)(a1 + 320) = a1 + 336;
  *(_QWORD *)(a1 + 328) = 0x800000000;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 0x800000000;
  *(_QWORD *)(a1 + 480) = a1 + 496;
  *(_QWORD *)(a1 + 488) = 0x800000000;
  *(_QWORD *)(a1 + 560) = a1 + 576;
  *(_QWORD *)(a1 + 568) = 0x800000000;
  *(_QWORD *)(a1 + 640) = a1 + 656;
  *(_QWORD *)(a1 + 648) = 0x800000000;
  *(_QWORD *)(a1 + 720) = a1 + 736;
  *(_QWORD *)(a1 + 728) = 0x400000000;
  *(_QWORD *)(a1 + 768) = a1 + 784;
  *(_DWORD *)(a1 + 816) = a3;
  *(_QWORD *)(a1 + 776) = 0x400000000;
  if (a2 < 9)
  {
    v5 = 8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 92);
  }
  if (v5 < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a1 + 172) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a1 + 252) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a1 + 332) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a1 + 816) == 1)
  {
    if (*(_DWORD *)(a1 + 412) < a2)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    if (*(_DWORD *)(a1 + 492) < a2)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    if (*(_DWORD *)(a1 + 572) < a2)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (*(_DWORD *)(a1 + 652) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a1 + 732) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a1 + 780) < a2)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  return a1;
}

BOOL sub_22ECAAED0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 **a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  int v26;
  char v27;
  unsigned __int8 **v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 **v47;
  int v48;
  _BOOL4 v49;
  unsigned __int8 **v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  int v78;
  _BOOL4 v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  uint64_t i;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  unint64_t v114;
  uint64_t v115;
  const char *v116;
  unint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v125;
  size_t v126;
  const char *v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  BOOL v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL4 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  llvm::APFloatBase *v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t (**v187)();
  uint64_t v188;
  _BOOL4 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  unint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  unsigned int v212;
  uint64_t v213;
  int v214;
  _BOOL4 v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unsigned int v222;
  llvm::APFloatBase *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  BOOL v228;
  int v229;
  uint64_t v230;
  int v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  int v238;
  uint64_t v239;
  unint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unsigned int v264;
  unsigned int v265;
  int v266;
  char v267;
  char v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _DWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  int v291;
  uint64_t v292;
  int v293;
  size_t v294;
  uint64_t v295;
  const char *v296;
  unint64_t v297;
  _DWORD *v298;
  unsigned int v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  BOOL v304;
  unsigned int v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unsigned int v310;
  unsigned int v311;
  _DWORD *v312;
  uint64_t v313;
  unint64_t v314;
  size_t v315;
  uint64_t v316;
  const char *v317;
  unint64_t v318;
  _DWORD *v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  unsigned __int8 *v327;
  unsigned __int8 *v328;
  unsigned __int8 *v329;
  int v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t (**v333)();
  int v334;
  uint64_t v335;
  unsigned __int8 **v336;
  uint64_t v337;
  int v338;
  BOOL v339;
  uint64_t v340;
  unint64_t v341;
  const llvm::APInt *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v354;
  unsigned __int8 *v355;
  unint64_t v356;
  int v357;
  unint64_t v358;
  int v359;
  _BOOL4 v361;
  BOOL v362;
  int v363;
  unsigned __int8 *v364;
  unint64_t v365;
  int v366;
  uint64_t v367;
  unsigned __int8 **v368;
  uint64_t v369;
  __n128 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _BYTE *v376;
  unint64_t v377;
  unsigned __int8 *j;
  int v379;
  uint64_t v380;
  unsigned __int8 **v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  BOOL v386;
  int v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  unsigned __int8 *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _DWORD *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unsigned int v428;
  int v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  int v433;
  int v434;
  int v435;
  unint64_t v436;
  unint64_t v437;
  int v438;
  int v439;
  int v440;
  uint64_t v442;
  unint64_t v443;
  _DWORD *v444;
  unint64_t v445;
  unint64_t v446;
  int v447;
  unsigned int *v448;
  char *v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  _DWORD *v453;
  unsigned __int8 v454;
  unsigned __int8 v455;
  uint64_t v456;
  int v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  char v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  _BOOL4 v469;
  uint64_t v470;
  unint64_t v471;
  int v472;
  unint64_t v473;
  unint64_t v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  char v481;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v488;
  unsigned __int8 **v489;
  uint64_t v491;
  unsigned int v492[24];
  _BYTE v493[96];
  unsigned int v494[10];
  unint64_t v495;
  unint64_t v496;
  unsigned __int8 *v497;
  uint64_t v498;
  unsigned int v499;
  uint64_t v500;
  __int128 v501;
  _BYTE v502[126];
  _BYTE v503[40];
  __int128 v504;
  __int128 v505;
  int v506;
  unint64_t v507;
  uint64_t v508;
  _DWORD *OpenMPClauseName;
  uint64_t v510;
  _BYTE v511[32];
  uint64_t (**v512)();
  __int128 *v513;
  char v514;
  uint64_t v515;
  uint64_t v516;

  v13 = a1;
  v516 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)a7;
  v15 = *(_QWORD *)a7 & 7;
  if (v15 == 6)
  {
    v16 = *(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    v17 = *(_QWORD *)(a1 + 88);
    v468 = (uint64_t *)(a1 + 88);
    v18 = 32;
    switch(v16)
    {
      case 5:
      case 6:
        v18 = 5;
        break;
      case 7:
        v18 = 2;
        break;
      case 8:
      case 9:
        break;
      case 10:
        v18 = 17;
        break;
      case 11:
        v18 = 16;
        break;
      case 12:
        v18 = 18;
        break;
      default:
        if (v16 == 36)
          v23 = 20;
        else
          v23 = 32;
        if (v16 == 35)
          v18 = 19;
        else
          v18 = v23;
        break;
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 88);
    v468 = (uint64_t *)(a1 + 88);
    v19 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
      v20 = 1;
    else
      v20 = v19 == 0;
    if (v20 || (v21 = *(_QWORD *)(v19 + 16), *(_DWORD *)v21 != 3))
    {
      v18 = 32;
    }
    else if (*(_WORD *)(v21 + 16) == 24941 && *(_BYTE *)(v21 + 18) == 120)
    {
      v18 = 11;
    }
    else if (*(unsigned __int16 *)(v21 + 16) ^ 0x696D | *(unsigned __int8 *)(v21 + 18) ^ 0x6E)
    {
      v18 = 32;
    }
    else
    {
      v18 = 10;
    }
  }
  v480 = v18;
  if (*(_QWORD *)(a6 + 8))
    v24 = (_DWORD *)a6;
  else
    v24 = (_DWORD *)(a7 + 8);
  LODWORD(v500) = *v24;
  sub_22EFC70E8((_QWORD *)a7);
  v26 = *(_DWORD *)(a7 + 8);
  if (v25)
    v26 = v25;
  HIDWORD(v500) = v26;
  if (a5)
  {
    v27 = 0;
    v449 = (char *)(v13 + 10664);
    v28 = a9;
    v29 = &a9[a10];
    v489 = &a4[a5];
    v448 = (unsigned int *)(a2 + 21496);
    v455 = a11 + 64;
    v456 = v17 + 2032;
    v454 = a11 + 64;
    v485 = v13;
    v488 = v17;
    while (1)
    {
      v30 = *a4;
      v499 = 0;
      v28 += v27 & (v28 != v29);
      v498 = 0;
      v497 = v30;
      v31 = sub_22EC82530((_QWORD *)v13, &v497, (int *)&v499, &v498, 1);
      if ((v32 & 1) != 0)
      {
        v33 = *(_QWORD *)(v17 + 16832);
        *(_QWORD *)v503 = &v503[16];
        *(_QWORD *)&v503[8] = 0x400000000;
        v34 = v499;
        v35 = v498;
        v36 = sub_22ECB1B04(a2);
        if (v36)
          v37 = *(_QWORD **)(v36 + 992);
        else
          v37 = 0;
        if (v28 == v29)
          v38 = 0;
        else
          v38 = *v28;
        v39 = v35;
        v13 = v485;
        v40 = sub_22ECD569C((_QWORD *)v485, v34, v39, v37, a6, a7, v33, (uint64_t)v503, v38);
        if (sub_22EFC7ADC(*(_QWORD *)(v485 + 216)))
        {
          v41 = (unsigned __int8 *)(v40 & 0xFFFFFFFFFFFFFFFELL);
          v42 = a11;
          if (v40 && *v41 != 211)
            v41 = 0;
        }
        else
        {
          v41 = 0;
          v42 = a11;
        }
        sub_22ECD6290(v42, (uint64_t)v30, (uint64_t)v41);
        if (*(_BYTE **)v503 != &v503[16])
          free(*(void **)v503);
      }
      v496 = v31;
      if (v31)
        break;
LABEL_98:
      ++a4;
      v27 = 1;
      if (a4 == v489)
        return *(_DWORD *)(a11 + 8) == 0;
    }
    v495 = 0;
    v43 = v30;
    do
    {
      v44 = v43;
      v45 = *v43;
      if (v45 > 0xD5)
      {
        if (v45 == 233)
        {
          v48 = *(_DWORD *)v43;
          if ((v48 & 0x7C0000) != 0x300000)
            goto LABEL_87;
          v45 = v48;
          v47 = (unsigned __int8 **)(v44 + 16);
        }
        else
        {
          if (v45 != 214)
            break;
          v47 = (unsigned __int8 **)(v43 + 24);
        }
      }
      else if (v45 == 155)
      {
        if ((**((_DWORD **)v43 + 2) & 0x18000) != 0)
          goto LABEL_87;
        if (v43[48])
          v47 = (unsigned __int8 **)(v43 + 24);
        else
          v47 = (unsigned __int8 **)(v43 + 32);
        v45 = 155;
      }
      else
      {
        if (v45 != 176)
          break;
        v46 = *((unsigned int *)v43 + 5);
        if ((_DWORD)v46 == -1)
          goto LABEL_87;
        v47 = (unsigned __int8 **)&v44[8 * v46 + 40];
        v45 = 176;
      }
      v43 = *v47;
    }
    while (v43 != v44);
    v49 = v45 == 191;
    if (v45 == 191)
      v50 = (unsigned __int8 **)v44;
    else
      v50 = 0;
    if (v45 == 107)
    {
      v51 = *((_QWORD *)v44 + 1);
      v52 = *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0);
      if (!v52 || (v53 = *(_DWORD *)(v52 + 16), (v53 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v52 = sub_22F10CF48(v52)) == 0)
        {
LABEL_74:
          v495 = v51;
          v45 = 107;
          v54 = 1;
LABEL_91:
          v66 = v496;
          if ((*(_DWORD *)(v496 + 28) & 0x7Fu) - 60 >= 7)
            v67 = 0;
          else
            v67 = v496;
          v483 = v67;
          v68 = v499;
          v69 = *(_QWORD *)(v496 + 48);
          *(_QWORD *)v503 = &unk_24FAB6EF8;
          *(_DWORD *)&v503[8] = 4311;
          if ((sub_22EE8B0B0(v13, v499, v69) & 1) != 0
            || (v70 = v49 | v54, sub_22ECAA7DC((_QWORD *)v13, v496, v495, a3, v68, 0, v70)))
          {
LABEL_96:
            v17 = v488;
            goto LABEL_97;
          }
          v481 = v70;
          v71 = sub_22ECB1B04(a2);
          if (v71)
            v72 = *(_DWORD *)(v71 + 960);
          else
            v72 = 89;
          if (v45 == 107 || v45 == 191)
          {
            sub_22EC7F2A4(a2, v496, 0, (uint64_t)&v501);
            if (DWORD1(v501) == 79)
              goto LABEL_142;
            goto LABEL_106;
          }
          if (!v483)
            goto LABEL_138;
          OpenMPClauseName = 0;
          v457 = v72;
          if ((*(_DWORD *)(v483 + 28) & 0x7F) == 0x53)
            goto LABEL_171;
          for (i = *(_QWORD *)(v483 + 16); ; i = *(_QWORD *)(v93 + v95 + 16))
          {
            v93 = i & 0xFFFFFFFFFFFFFFF8;
            if ((i & 4) != 0)
              v93 = *(_QWORD *)v93;
            v94 = *(_WORD *)(v93 + 8) & 0x7F;
            if (v94 == 83)
              break;
            v95 = -40;
            if ((*(_WORD *)(v93 + 8) & 0x7Fu) > 0x46)
            {
              if (v94 == 71)
              {
                v95 = -56;
                continue;
              }
              if (v94 != 81)
                goto LABEL_161;
            }
            else
            {
              if (v94 > 0x18)
                goto LABEL_160;
              if (v94 == 16)
                goto LABEL_154;
              if (((1 << v94) & 0x1066) == 0)
              {
                if (v94 == 24)
                {
LABEL_154:
                  v95 = -48;
                  continue;
                }
LABEL_160:
                if (v94 == 70)
                {
                  v95 = -64;
                  continue;
                }
LABEL_161:
                v96 = v94 - 52;
                v97 = v94 - 33 >= 5;
                v98 = -64;
                if (v97)
                  v98 = -48;
                v97 = v96 >= 6;
                v95 = -72;
                if (v97)
                  v95 = v98;
                continue;
              }
            }
          }
          v66 = v93 - 40;
LABEL_171:
          v99 = *(_QWORD *)(v483 + 80);
          if (v99)
          {
            v475 = 0;
            v100 = *(_QWORD *)(v66 + 88);
            v101 = *(_QWORD *)(v483 + 80);
            while (sub_22EFBBF74(v101, v100) != 2)
            {
              if ((*(_BYTE *)(v101 + 72) & 3) != 0)
              {
                if (v475)
                  goto LABEL_746;
                v475 = 1;
              }
              v101 = sub_22E3CD31C((uint64_t *)(v101 + 72), v101);
              v102 = 0;
              if (v101 == v99 || !v101)
                goto LABEL_181;
            }
            v102 = v101;
          }
          else
          {
LABEL_746:
            v102 = 0;
          }
LABEL_181:
          OpenMPClauseName = (_DWORD *)v102;
          v13 = v485;
          v72 = v457;
          if (v102
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v483 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) & 0xFE) == 0x28
            && ((*(_DWORD *)(v102 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v102 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
            && *(_QWORD *)(v102 + 88) >= 8uLL)
          {
            v512 = (uint64_t (**)())a2;
            v103 = (unsigned __int8 *)sub_22EFBC5B4(v102);
            if ((sub_22ECD6434((uint64_t)&v512, v103) & 1) != 0)
            {
              sub_22E8FCA40((_QWORD *)v485, v68, 0x10DAu, 0, (uint64_t)v503);
              *(_QWORD *)&v501 = llvm::omp::getOpenMPClauseName();
              *((_QWORD *)&v501 + 1) = v104;
              v105 = sub_22F2F2210((uint64_t)v503, (uint64_t)&v501);
              sub_22E8906A0(v105, &v498);
              sub_22E903BEC((unsigned int *)v503);
              sub_22E8FCA40((_QWORD *)v485, OpenMPClauseName[6], 0x15A7u, 0, (uint64_t)v503);
              sub_22E890024((uint64_t)v503, (uint64_t *)&OpenMPClauseName);
              sub_22E903BEC((unsigned int *)v503);
              goto LABEL_96;
            }
          }
LABEL_138:
          sub_22EC7F2A4(a2, v496, 0, (uint64_t)&v501);
          if (DWORD1(v501) != 85)
          {
            if (DWORD1(v501) == 66)
            {
              sub_22E8FCA40((_QWORD *)v13, v68, 0x10BEu, 0, (uint64_t)v503);
              OpenMPClauseName = (_DWORD *)llvm::omp::getOpenMPClauseName();
              v510 = v87;
              sub_22F2F2210((uint64_t)v503, (uint64_t)&OpenMPClauseName);
              sub_22E903BEC((unsigned int *)v503);
              v17 = v488;
              v29 = &a9[a10];
              if (*(_QWORD *)v502)
              {
                sub_22EFF605C(*(uint64_t *)v502);
                sub_22E8FCA40((_QWORD *)v13, v88, 0x1719u, 0, (uint64_t)v494);
                sub_22E903BEC(v494);
              }
              goto LABEL_98;
            }
LABEL_142:
            sub_22E8FCA40((_QWORD *)v13, v68, 0x110Fu, 0, (uint64_t)v503);
            OpenMPClauseName = (_DWORD *)llvm::omp::getOpenMPClauseName();
            v510 = v89;
            v90 = sub_22F2F2210((uint64_t)v503, (uint64_t)&OpenMPClauseName);
LABEL_143:
            v512 = (uint64_t (**)())llvm::omp::getOpenMPClauseName();
            v513 = v91;
            sub_22F2F2210(v90, (uint64_t)&v512);
            sub_22E903BEC((unsigned int *)v503);
            sub_22EC82B14((_QWORD *)v13, a2, v496, (uint64_t)&v501, 0);
            goto LABEL_96;
          }
          if (sub_22F421A30(v72)
            && !sub_22F421A78(v72)
            && ((v72 - 66) > 0x21 || ((1 << (v72 - 66)) & 0x3001CC073) == 0))
          {
            sub_22ECAA908((uint64_t)v503, a2, v496, 1);
            v501 = *(_OWORD *)v503;
            *(_OWORD *)v502 = *(_OWORD *)&v503[16];
            *(_QWORD *)&v502[13] = *(_QWORD *)&v503[29];
            if (*(_DWORD *)&v503[4] != 73)
            {
              sub_22E8FCA40((_QWORD *)v13, v68, 0x10E1u, 0, (uint64_t)v503);
              OpenMPClauseName = (_DWORD *)llvm::omp::getOpenMPClauseName();
              v510 = v169;
              v90 = sub_22F2F2210((uint64_t)v503, (uint64_t)&OpenMPClauseName);
              goto LABEL_143;
            }
          }
LABEL_106:
          OpenMPClauseName = v511;
          v510 = 0x400000000;
          v73 = v498;
          v74 = sub_22ECB1B04(a2);
          if (v74)
            v75 = *(_QWORD **)(v74 + 992);
          else
            v75 = 0;
          if (v28 == &a9[a10])
            v76 = 0;
          else
            v76 = *v28;
          v77 = sub_22ECD569C((_QWORD *)v13, v68, v73, v75, a6, a7, v495, (uint64_t)&OpenMPClauseName, v76);
          if ((v77 & 1) != 0)
            goto LABEL_122;
          v78 = sub_22EFC7ADC(*(_QWORD *)(v13 + 216));
          v79 = v77 == 0;
          if (v78)
          {
            v80 = (unsigned __int8 *)(v77 & 0xFFFFFFFFFFFFFFFELL);
            if (!v77 || *v80 == 211)
            {
              sub_22ECD6290(a11, (uint64_t)v30, (uint64_t)v80);
              goto LABEL_122;
            }
            v79 = 0;
LABEL_193:
            v469 = v79;
            v107 = sub_22F1133DC((uint64_t *)&v495, v488);
            v108 = *(_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF0);
            v474 = v77;
            if ((*(_BYTE *)(v108 + 8) & 0xF) != 0)
              v108 = (unint64_t)sub_22F10D2BC(v107);
            v109 = v108 & 0xFFFFFFFFFFFFFFF0;
            v495 = v108 & 0xFFFFFFFFFFFFFFF0;
            if ((*(_BYTE *)(v496 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v496);
              v110 = v111;
            }
            else
            {
              v110 = 0;
            }
            v458 = v72;
            v112 = sub_22EC822F4((_QWORD *)v13, v68, v109, ".reduction.lhs", 0xEuLL, v110, 0);
            v113 = 0;
            v114 = v495;
            v115 = *(_QWORD *)(v496 + 40);
            v116 = "";
            if ((v115 & 7) == 0)
            {
              v117 = v115 & 0xFFFFFFFFFFFFFFF8;
              if (v117)
              {
                v118 = *(_DWORD **)(v117 + 16);
                v119 = *v118;
                v116 = (const char *)(v118 + 4);
                v113 = v119;
              }
            }
            v463 = v112;
            if ((*(_BYTE *)(v496 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v496);
              v120 = v121;
            }
            else
            {
              v120 = 0;
            }
            v476 = sub_22EC822F4((_QWORD *)v485, v68, v114, v116, v113, v120, 0);
            v122 = v495;
            if (!v49)
            {
              v13 = v485;
              goto LABEL_206;
            }
            v451 = v495;
            *(_QWORD *)&v501 = v502;
            *((_QWORD *)&v501 + 1) = 0x400000000;
            v167 = *((_QWORD *)v44 + 4);
            if (!v167)
            {
              if (!*((_DWORD *)v44 + 12))
              {
                *(_DWORD *)&v503[8] = 64;
                *(_QWORD *)v503 = 1;
                v503[12] = 0;
                sub_22ECD7170((uint64_t)&v501, (unint64_t)v503);
                if (*(_DWORD *)&v503[8] >= 0x41u && *(_QWORD *)v503)
                  MEMORY[0x2348A0E84](*(_QWORD *)v503, 0x1000C8000313F17);
                v168 = 1;
                goto LABEL_522;
              }
LABEL_330:
              sub_22F34128C((char **)&v501);
              v13 = v485;
LABEL_331:
              v195 = v488;
              if (*(_BYTE *)(*(_QWORD *)(v488 + 15088) + 82))
              {
LABEL_332:
                v196 = v495;
                v197 = (_DWORD *)sub_22E3CD3D4(v456, 24, 3);
                v198 = sub_22EF67C8C(v195);
                sub_22E5BBE34((uint64_t)v197, v68, v198, 0, 0, 0);
                v122 = sub_22EF60740(v195, v196, v197, 0, 0, 0);
                v17 = v195;
                goto LABEL_209;
              }
              v199 = sub_22ECB1B04(a2);
              if (!v199
                || ((v200 = *(_DWORD *)(v199 + 960) - 56, v57 = v200 > 0x2A,
                                                          v201 = (1 << v200) & 0x6000001CF91,
                                                          !v57)
                  ? (v202 = v201 == 0)
                  : (v202 = 1),
                    v202))
              {
                sub_22F308EA4((_QWORD *)v13, v68, 0x10DCu, 0, (uint64_t)v503);
                LOBYTE(v501) = v49;
                sub_22E894E38((uint64_t)v503, (unsigned __int8 *)&v501);
                sub_22E903BEC((unsigned int *)v503);
                sub_22F308EA4((_QWORD *)v13, v68, 0x181Cu, 0, (uint64_t)v492);
                sub_22E903BEC(v492);
                v195 = v488;
                goto LABEL_332;
              }
              sub_22E8FCA40((_QWORD *)v13, v68, 0x10DCu, 0, (uint64_t)v503);
              LOBYTE(v501) = v49;
              sub_22E894E38((uint64_t)v503, (unsigned __int8 *)&v501);
              sub_22E903BEC((unsigned int *)v503);
              sub_22E8FCA40((_QWORD *)v13, v68, 0x181Cu, 0, (uint64_t)v493);
              v82 = (unsigned int *)v493;
LABEL_121:
              sub_22E903BEC(v82);
LABEL_122:
              v17 = v488;
LABEL_123:
              if (OpenMPClauseName != (_DWORD *)v511)
                free(OpenMPClauseName);
LABEL_97:
              v29 = &a9[a10];
              goto LABEL_98;
            }
            *(_WORD *)v503 = 0;
            *(_QWORD *)&v503[8] = 0;
            *(_DWORD *)&v503[16] = 0;
            if (!sub_22F00554C(v167, (uint64_t)v503, v488, 0, 0))
            {
              if (*(_DWORD *)&v503[16] >= 2u)
                sub_22EF53BC0((uint64_t *)&v503[16]);
              goto LABEL_330;
            }
            v186 = v503[32];
            LODWORD(v513) = *(_DWORD *)&v503[32];
            if (*(_DWORD *)&v503[32] <= 0x40u)
            {
              v187 = *(uint64_t (***)())&v503[24];
              v512 = *(uint64_t (***)())&v503[24];
              BYTE4(v513) = v503[36];
              goto LABEL_358;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v512, (const llvm::APInt *)&v503[24]);
            v186 = (char)v513;
            BYTE4(v513) = v503[36];
            if (v513 > 0x40)
            {
              v213 = (uint64_t)*v512;
            }
            else
            {
              v187 = v512;
LABEL_358:
              v213 = (uint64_t)((_QWORD)v187 << -v186) >> -v186;
            }
            v168 = v213 == 1;
            sub_22ECD720C((uint64_t)&v501, (llvm::APInt *)&v512);
            if (v513 >= 0x41 && v512)
              MEMORY[0x2348A0E84](v512, 0x1000C8000313F17);
            if (*(_DWORD *)&v503[16] >= 2u)
              sub_22EF53BC0((uint64_t *)&v503[16]);
LABEL_522:
            v327 = (unsigned __int8 *)*((_QWORD *)v44 + 2);
            while (2)
            {
              v328 = sub_22EFFA6B0(v327);
              v329 = v328;
              v330 = *v328;
              if (v330 == 191)
              {
                v331 = *((_QWORD *)v328 + 4);
                if (v331)
                {
                  *(_WORD *)v503 = 0;
                  *(_QWORD *)&v503[8] = 0;
                  *(_DWORD *)&v503[16] = 0;
                  if (sub_22F00554C(v331, (uint64_t)v503, v488, 0, 0))
                  {
                    v332 = *(_DWORD *)&v503[32];
                    LODWORD(v513) = *(_DWORD *)&v503[32];
                    if (*(_DWORD *)&v503[32] <= 0x40u)
                    {
                      v333 = *(uint64_t (***)())&v503[24];
                      v512 = *(uint64_t (***)())&v503[24];
                      BYTE4(v513) = v503[36];
                      goto LABEL_535;
                    }
                    llvm::APInt::initSlowCase((llvm::APInt *)&v512, (const llvm::APInt *)&v503[24]);
                    v332 = v513;
                    BYTE4(v513) = v503[36];
                    if (v513 > 0x40)
                    {
                      v335 = (uint64_t)*v512;
                    }
                    else
                    {
                      v333 = v512;
LABEL_535:
                      v335 = (uint64_t)((_QWORD)v333 << -(char)v332) >> -(char)v332;
                    }
                    if (v335 == 1)
                    {
                      sub_22ECD720C((uint64_t)&v501, (llvm::APInt *)&v512);
                      v334 = 0;
                      v332 = v513;
                    }
                    else
                    {
                      v334 = 1;
                    }
                    if (v332 >= 0x41 && v512)
                      MEMORY[0x2348A0E84](v512, 0x1000C8000313F17);
                  }
                  else
                  {
                    v334 = 1;
                  }
                  if (*(_DWORD *)&v503[16] >= 2u)
                    sub_22EF53BC0((uint64_t *)&v503[16]);
                  if (v334)
                    goto LABEL_330;
                }
                else
                {
                  if (*((_DWORD *)v44 + 12))
                    goto LABEL_330;
                  *(_DWORD *)&v503[8] = 64;
                  *(_QWORD *)v503 = 1;
                  v503[12] = 0;
                  sub_22ECD7170((uint64_t)&v501, (unint64_t)v503);
                  if (*(_DWORD *)&v503[8] >= 0x41u && *(_QWORD *)v503)
                    MEMORY[0x2348A0E84](*(_QWORD *)v503, 0x1000C8000313F17);
                }
                v327 = (unsigned __int8 *)*((_QWORD *)v329 + 2);
                continue;
              }
              break;
            }
            if (v168)
            {
              sub_22F34128C((char **)&v501);
              v13 = v485;
              v122 = v451;
              goto LABEL_206;
            }
            while (2)
            {
              v13 = v485;
              if (v330 == 107)
              {
                *(_DWORD *)&v503[8] = 64;
                *(_QWORD *)v503 = 1;
                v503[12] = 0;
                sub_22ECD7170((uint64_t)&v501, (unint64_t)v503);
                if (*(_DWORD *)&v503[8] >= 0x41u && *(_QWORD *)v503)
                  MEMORY[0x2348A0E84](*(_QWORD *)v503, 0x1000C8000313F17);
                v336 = (unsigned __int8 **)(v329 + 24);
                v337 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v329 + 3) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0);
                v338 = *(_DWORD *)(v337 + 16);
                if (v337)
                  v339 = v338 == 11;
                else
                  v339 = 0;
                if (v339)
                {
                  if (((*(_DWORD *)(v337 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                    goto LABEL_563;
                }
                else if (v337 && v338 == 44)
                {
                  v340 = sub_22F114198(*(_QWORD *)(v337 + 24));
                  if ((*(_BYTE *)(v340 + 74) & 1) == 0 && *(_QWORD *)(v340 + 128) <= 7uLL
                    || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v337 + 24)) + 72) & 0x8000000000) != 0)
                  {
                    goto LABEL_564;
                  }
LABEL_563:
                  v336 = (unsigned __int8 **)(v329 + 16);
                }
                else if (v338 == 9)
                {
                  goto LABEL_563;
                }
LABEL_564:
                v329 = sub_22EFFA6B0(*v336);
                v330 = *v329;
                continue;
              }
              break;
            }
            if (DWORD2(v501))
            {
              v342 = (const llvm::APInt *)v501;
              v343 = 16 * DWORD2(v501);
              v341 = v451;
              do
              {
                v341 = sub_22EF5FE30(v488, v341, v342, 0, 0, 0);
                v342 = (const llvm::APInt *)((char *)v342 + 16);
                v343 -= 16;
              }
              while (v343);
            }
            else
            {
              v341 = v451;
            }
            v344 = v341;
            sub_22F34128C((char **)&v501);
            v122 = v344;
LABEL_206:
            if (v45 == 107 || v45 == 191)
            {
              v17 = v488;
              goto LABEL_209;
            }
            v144 = *(_QWORD *)(v496 + 48) & 0xFFFFFFFFFFFFFFF0;
            v145 = *(_QWORD *)v144;
            if (*(_QWORD *)v144 && (v146 = *(_DWORD *)(v145 + 16), (v146 & 0xFE) == 0x28))
            {
LABEL_806:
              if ((v146 & 0x100000) != 0)
              {
                do
                {
                  v437 = v122;
                  v145 = *(_QWORD *)(*(_QWORD *)(v145 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v145 || (v438 = *(_DWORD *)(v145 + 16), (v438 & 0xFE) != 0x28))
                  {
                    v145 = sub_22F10CF48(v145);
                    v438 = *(_DWORD *)(v145 + 16);
                  }
                  v13 = v485;
                  v122 = v437;
                }
                while ((v438 & 0x100000) != 0);
              }
              v144 = *(_QWORD *)(v145 + 32) & 0xFFFFFFFFFFFFFFF0;
            }
            else
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                goto LABEL_237;
              v436 = v122;
              v145 = sub_22F10CF48(v145);
              if (v145)
              {
                v146 = *(_DWORD *)(v145 + 16);
                v13 = v485;
                v122 = v436;
                goto LABEL_806;
              }
              v13 = v485;
              v122 = v436;
            }
LABEL_237:
            if ((*(_BYTE *)(*(_QWORD *)v144 + 17) & 8) != 0)
              goto LABEL_331;
            v17 = v488;
            v147 = *(_QWORD *)(v496 + 48);
            v148 = *(_QWORD *)(v147 & 0xFFFFFFFFFFFFFFF0);
            if (v148 && (v149 = *(_DWORD *)(v148 + 16), (v149 & 0xFE) == 0x28))
            {
LABEL_815:
              v150 = v122;
              if ((v149 & 0x100000) != 0)
              {
                do
                {
                  v148 = *(_QWORD *)(*(_QWORD *)(v148 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v148 || (v439 = *(_DWORD *)(v148 + 16), (v439 & 0xFE) != 0x28))
                  {
                    v148 = sub_22F10CF48(v148);
                    v439 = *(_DWORD *)(v148 + 16);
                  }
                  v17 = v488;
                }
                while ((v439 & 0x100000) != 0);
              }
              v147 = *(_QWORD *)(v148 + 32);
            }
            else
            {
              v150 = v122;
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                v148 = sub_22F10CF48(v148);
                if (v148)
                {
                  v149 = *(_DWORD *)(v148 + 16);
                  v122 = v150;
                  goto LABEL_815;
                }
              }
            }
            v151 = sub_22EF5C728(v17, v147);
            v122 = v150;
            if (v151)
            {
              v122 = *(_QWORD *)(v496 + 48);
              v152 = *(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0);
              if (!v152 || (v153 = *(_DWORD *)(v152 + 16), (v153 & 0xFE) != 0x28))
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
                  goto LABEL_209;
                v154 = *(_QWORD *)(v496 + 48);
                v152 = sub_22F10CF48(v152);
                v122 = v154;
                if (!v152)
                  goto LABEL_209;
                v153 = *(_DWORD *)(v152 + 16);
              }
              if ((v153 & 0x100000) != 0)
              {
                do
                {
                  v152 = *(_QWORD *)(*(_QWORD *)(v152 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v152 || (v440 = *(_DWORD *)(v152 + 16), (v440 & 0xFE) != 0x28))
                  {
                    v152 = sub_22F10CF48(v152);
                    v440 = *(_DWORD *)(v152 + 16);
                  }
                  v17 = v488;
                }
                while ((v440 & 0x100000) != 0);
              }
              v122 = *(_QWORD *)(v152 + 32);
            }
LABEL_209:
            v123 = *(_QWORD *)(v496 + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(v496 + 40) & 7) != 0 || v123 == 0)
            {
              v126 = 0;
              v127 = "";
            }
            else
            {
              v125 = *(_DWORD **)(v123 + 16);
              v128 = *v125;
              v127 = (const char *)(v125 + 4);
              v126 = v128;
            }
            if ((*(_BYTE *)(v496 + 29) & 1) != 0)
            {
              v130 = v122;
              sub_22EFC8E88(v496);
              v122 = v130;
              v129 = v131;
            }
            else
            {
              v129 = 0;
            }
            if (v483)
              v132 = v497;
            else
              v132 = 0;
            v450 = v122;
            v133 = v127;
            v13 = v485;
            v459 = sub_22EC822F4((_QWORD *)v485, v68, v122, v133, v126, v129, (uint64_t)v132);
            v134 = v495;
            *(_DWORD *)(v463 + 28) |= 0x800u;
            sub_22EFC9100(v463, *(_QWORD *)(v485 + 88));
            v135 = *(_QWORD *)(v485 + 88);
            *(_QWORD *)v503 = *(_QWORD *)(v463 + 40);
            *(_DWORD *)&v503[8] = v68;
            sub_22EFC6D6C((uint64_t)&v503[16], *(uint64_t *)v503);
            v453 = (_DWORD *)sub_22E3CD3D4(v135 + 2032, 32, 3);
            sub_22EFF6AE4((uint64_t)v453, v135, 0, 0, 0, v463, 0, (uint64_t)v503, 0, 0, v134, 1, 0, 0);
            v136 = v495;
            *(_DWORD *)(v476 + 28) |= 0x800u;
            sub_22EFC9100(v476, *(_QWORD *)(v485 + 88));
            v137 = *(_QWORD *)(v485 + 88);
            *(_QWORD *)v503 = *(_QWORD *)(v476 + 40);
            *(_DWORD *)&v503[8] = v68;
            sub_22EFC6D6C((uint64_t)&v503[16], *(uint64_t *)v503);
            v138 = sub_22E3CD3D4(v137 + 2032, 32, 3);
            sub_22EFF6AE4(v138, v137, 0, 0, 0, v476, 0, (uint64_t)v503, 0, 0, v136, 1, 0, 0);
            if (v474 >= 2)
            {
              if (*(_QWORD *)(*(_QWORD *)((v474 & 0xFFFFFFFFFFFFFFFELL) + 16) + 96))
              {
                sub_22EFBC9E4(v476, v474 & 0xFFFFFFFFFFFFFFFELL);
                *(_BYTE *)(v476 + 96) = *(_BYTE *)(v476 + 96) & 0x9F | 0x20;
LABEL_317:
                v190 = v469;
                v191 = v476;
                if (!v469)
                  goto LABEL_382;
                sub_22EA28AD8();
LABEL_381:
                v227 = sub_22EFBC5B4(v191);
                sub_22EFBC9E4(v459, v227);
                *(_BYTE *)(v459 + 96) = *(_BYTE *)(v459 + 96) & 0x9F | *(_BYTE *)(v191 + 96) & 0x60;
                v190 = v469;
LABEL_382:
                if ((*(_DWORD *)(v191 + 28) & 0x80) != 0)
                  goto LABEL_123;
                v228 = ((*(_DWORD *)(v191 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v191 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
                    && *(_QWORD *)(v191 + 88) > 7uLL;
                v229 = !v190;
                if (!v228 && (v229 & 1) == 0)
                {
                  sub_22E8FCA40((_QWORD *)v13, v499, 0x10D4u, 0, (uint64_t)v503);
                  v230 = sub_22E8901B8((uint64_t)v503, (uint64_t *)&v495);
                  sub_22E8906A0(v230, &v500);
                  sub_22E903BEC((unsigned int *)v503);
                  goto LABEL_390;
                }
                v234 = v138;
                v447 = v229;
                v235 = v499;
                *(_DWORD *)(v459 + 28) |= 0x800u;
                sub_22EFC9100(v459, *v468);
                v236 = *v468;
                *(_QWORD *)v503 = *(_QWORD *)(v459 + 40);
                *(_DWORD *)&v503[8] = v235;
                sub_22EFC6D6C((uint64_t)&v503[16], *(uint64_t *)v503);
                v467 = sub_22E3CD3D4(v236 + 2032, 32, 3);
                sub_22EFF6AE4(v467, v236, 0, 0, 0, v459, 0, (uint64_t)v503, 0, 0, v450, 1, 0, 0);
                v477 = v235;
                if (v474 >= 2)
                {
                  v446 = v446 & 0xFFFFFFFF00000000 | v455 & 0xE0;
                  v240 = sub_22EF5B848(v17, *(_QWORD *)((v474 & 0xFFFFFFFFFFFFFFFELL) + 8), v455 & 0xE0);
                  v470 = sub_22EB2EA08(v13, v235, 4, (uint64_t)v453);
                  v241 = v235;
                  v237 = (_DWORD *)v234;
                  v242 = sub_22EB2EA08(v13, v241, 4, v234);
                  if ((_DWORD)v510)
                  {
                    v243 = sub_22EB1A358(v13, v470 & 0xFFFFFFFFFFFFFFFELL, 0);
                    v244 = sub_22EB1A358(v13, v242 & 0xFFFFFFFFFFFFFFFELL, 0);
                    v470 = (uint64_t)sub_22EFFB64C(v17, v240, 8, v243 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&OpenMPClauseName, BYTE1(*(_DWORD *)(v243 & 0xFFFFFFFFFFFFFFFELL)) & 3, 0);
                    v242 = (uint64_t)sub_22EFFB64C(v17, v240, 8, v244 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&OpenMPClauseName, BYTE1(*(_DWORD *)(v244 & 0xFFFFFFFFFFFFFFFELL)) & 3, 0);
                  }
                  *(_WORD *)v503 = 0;
                  v503[2] &= 0xFCu;
                  *(_OWORD *)&v503[4] = 0uLL;
                  *(_OWORD *)&v503[24] = 0u;
                  v504 = 0u;
                  v505 = 0u;
                  v506 = 0;
                  *(_QWORD *)&v501 = v240;
                  *((_QWORD *)&v501 + 1) = v240;
                  v245 = sub_22EF63D8C(v17, *(_QWORD *)(v17 + 16392), (uint64_t *)&v501, 2uLL, (__int128 *)v503, 0);
                  v246 = sub_22E3CD3D4(v456, 24, 3);
                  v445 = v445 & 0xFFFFFFFF00000000 | v454 & 0xE0;
                  v247 = sub_22EF5B848(v17, v245, v454 & 0xE0);
                  v248 = sub_22EB1A358(v13, v474 & 0xFFFFFFFFFFFFFFFELL, 0);
                  sub_22E5BBE34(v246, v477, v247, 0, 0, v248 & 0xFFFFFFFFFFFFFFFELL);
                  v512 = (uint64_t (**)())(v470 & 0xFFFFFFFFFFFFFFFELL);
                  v513 = (__int128 *)(v242 & 0xFFFFFFFFFFFFFFFELL);
                  if (*(_QWORD *)(v13 + 1296) == *(_QWORD *)(v13 + 1288))
                    v249 = 0;
                  else
                    v249 = *(_QWORD *)(v13 + 1296);
                  v238 = v458;
                  v455 &= 0xE0u;
                  v454 &= 0xE0u;
                  v250 = (unint64_t)sub_22EFFA488(v17, v246, (uint64_t)&v512, 2, *(_QWORD *)(v17 + 16392), 0, v477, v249, 0, 0);
                  goto LABEL_408;
                }
                if ((int)v480 <= 15)
                {
                  v237 = (_DWORD *)v234;
                  if ((_DWORD)v480 != 2)
                  {
                    v238 = v458;
                    if ((_DWORD)v480 == 5)
                    {
                      v239 = 25;
                      goto LABEL_429;
                    }
LABEL_428:
                    v239 = v480;
LABEL_429:
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) != 45
                      || (_DWORD)v239 == (_DWORD)v480)
                    {
                      goto LABEL_838;
                    }
                    v266 = *(_DWORD *)(v13 + 8456);
                    v267 = v449[1288];
                    v461 = *v449;
                    v472 = *(_DWORD *)(*(_QWORD *)(v13 + 104) + 180);
                    sub_22EE03478(v13);
                    if (!v268)
                      v449[1288] = 1;
                    *v449 = 1;
                    v269 = v449[1368];
                    v449[1368] = 1;
                    v270 = sub_22ECB1B04(a2);
                    if (v270)
                      v271 = *(_QWORD *)(v270 + 992);
                    else
                      v271 = 0;
                    v13 = v485;
                    v272 = sub_22EB4785C(v485, v271, *(_DWORD *)(a7 + 8), v239, (uint64_t)v453, (uint64_t)v237);
                    v449[1368] = v269;
                    *(_DWORD *)(v485 + 8456) = v266;
                    v449[1288] = v267;
                    *v449 = v461;
                    v273 = *(_QWORD *)(v485 + 104);
                    if (*(_DWORD *)(v273 + 180) == 5)
                      *(_BYTE *)(v273 + 170) = 1;
                    v274 = v472 ? 3 : 0;
                    *(_DWORD *)(v273 + 180) = v274;
                    v17 = v488;
                    v238 = v458;
                    if (v272 <= 1)
                    {
LABEL_838:
                      v275 = sub_22ECB1B04(a2);
                      v276 = v275 ? *(_QWORD *)(v275 + 992) : 0;
                      v277 = sub_22EB4785C(v13, v276, *(_DWORD *)(a7 + 8), v480, (uint64_t)v453, (uint64_t)v237);
                      if (v277 < 2)
                        goto LABEL_123;
                      v278 = v277;
                      if ((v480 - 12) > 0xFFFFFFFD)
                      {
                        v281 = (_DWORD *)(v277 & 0xFFFFFFFFFFFFFFFELL);
                        v282 = v495;
                        v283 = sub_22E3CD3D4(v456, 48, 3);
                        sub_22F0038A4(v283, v281, v477, v453, v477, v237, v282, 1, 0, 0);
                        v284 = sub_22ECB1B04(a2);
                        v280 = v284 ? *(_QWORD *)(v284 + 992) : 0;
                        v238 = v458;
                        v305 = *(_DWORD *)(a7 + 8);
                        v307 = v13;
                        v308 = (uint64_t)v453;
                        v306 = v283;
                      }
                      else
                      {
                        v279 = sub_22ECB1B04(a2);
                        v280 = v279 ? *(_QWORD *)(v279 + 992) : 0;
                        v305 = *(_DWORD *)(a7 + 8);
                        v306 = v278 & 0xFFFFFFFFFFFFFFFELL;
                        v307 = v13;
                        v308 = (uint64_t)v453;
                      }
                      v272 = sub_22EB4785C(v307, v280, v305, 21, v308, v306);
                      if (v272 < 2)
                        goto LABEL_123;
                    }
                    v309 = v272 & 0xFFFFFFFFFFFFFFFELL;
                    if ((v272 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      sub_22EFF605C(v272 & 0xFFFFFFFFFFFFFFFELL);
                      v311 = v310;
                    }
                    else
                    {
                      v311 = 0;
                    }
                    v250 = sub_22EBCF22C(v13, v309, v311, 0, 0);
                    if (v250 < 2)
                      goto LABEL_123;
LABEL_408:
                    v251 = a11;
                    if (a3 == 66 && *(_DWORD *)(a11 + 816) == 1)
                    {
                      v252 = sub_22EB1A358(v13, v237, 0);
                      v253 = sub_22ECB1B04(a2);
                      if (v253)
                        v254 = *(_QWORD *)(v253 + 992);
                      else
                        v254 = 0;
                      v262 = sub_22EB4785C(v13, v254, v477, 21, (uint64_t)v453, v252 & 0xFFFFFFFFFFFFFFFELL);
                      if (v262 < 2)
                        goto LABEL_123;
                      v263 = v262 & 0xFFFFFFFFFFFFFFFELL;
                      if ((v262 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        sub_22EFF605C(v262 & 0xFFFFFFFFFFFFFFFELL);
                        v265 = v264;
                      }
                      else
                      {
                        v265 = 0;
                      }
                      v471 = sub_22EBCF22C(v13, v263, v265, 1, 0);
                      if (v471 < 2)
                        goto LABEL_123;
                      v292 = sub_22ECB1B04(a2);
                      if (v292)
                      {
                        v293 = *(_DWORD *)(v292 + 960);
                        if (v293 == 54)
                          goto LABEL_481;
                        if ((*(_BYTE *)(*(_QWORD *)(v13 + 72) + 76) & 2) == 0)
                        {
LABEL_507:
                          v300 = v250;
                          v312 = (_DWORD *)sub_22E3CD3D4(*v468 + 2032, 24, 3);
                          v313 = sub_22EF67C8C(*v468);
                          sub_22E5BBE34((uint64_t)v312, v477, v313, 0, 0, 0);
                          v314 = sub_22EF60740(*v468, v450, v312, 0, 0, v477 | (v477 << 32));
                          v315 = 0;
                          v316 = *(_QWORD *)(v496 + 40);
                          v317 = "";
                          if ((v316 & 7) == 0)
                          {
                            v318 = v316 & 0xFFFFFFFFFFFFFFF8;
                            if (v318)
                            {
                              v319 = *(_DWORD **)(v318 + 16);
                              v320 = *v319;
                              v317 = (const char *)(v319 + 4);
                              v315 = v320;
                            }
                          }
                          if ((*(_BYTE *)(v496 + 29) & 1) != 0)
                          {
                            sub_22EFC8E88(v496);
                            v321 = v322;
                          }
                          else
                          {
                            v321 = 0;
                          }
                          v323 = sub_22EC822F4((_QWORD *)v13, v477, v314, v317, v315, v321, 0);
                          sub_22EA117E4();
                          v460 = sub_22EC8247C(v13, v323, v314, v477, 0);
                          v324 = sub_22EB1B954(v13, (void *)(v460 & 0xFFFFFFFFFFFFFFFELL));
                          v325 = (void *)sub_22E3CD3D4(*(_QWORD *)(v13 + 88) + 2032, 24, 3);
                          v326 = sub_22EF67C8C(*(_QWORD *)(v13 + 88));
                          sub_22E5BBE34((uint64_t)v325, v477, v326, 0, 0, 0);
                          v478 = sub_22EB2AFE4(v13, (uint64_t (**)())(v324 & 0xFFFFFFFFFFFFFFFELL), v477, v325, v477);
                          goto LABEL_575;
                        }
                      }
                      else
                      {
                        if ((*(_BYTE *)(*(_QWORD *)(v13 + 72) + 76) & 2) == 0)
                          goto LABEL_507;
                        v293 = 89;
                      }
                      if (sub_22F421AC0(v293))
                      {
LABEL_481:
                        v294 = 0;
                        v295 = *(_QWORD *)(v496 + 40);
                        v296 = "";
                        if ((v295 & 7) == 0)
                        {
                          v297 = v295 & 0xFFFFFFFFFFFFFFF8;
                          if (v297)
                          {
                            v298 = *(_DWORD **)(v297 + 16);
                            v299 = *v298;
                            v296 = (const char *)(v298 + 4);
                            v294 = v299;
                          }
                        }
                        v300 = v250;
                        if ((*(_BYTE *)(v496 + 29) & 1) != 0)
                        {
                          sub_22EFC8E88(v496);
                          v301 = v345;
                        }
                        else
                        {
                          v301 = 0;
                        }
                        v346 = sub_22EC822F4((_QWORD *)v13, v477, v450, v296, v294, v301, 0);
                        sub_22EA117E4();
                        v460 = sub_22EC8247C(v13, v346, v450, v477, 0);
                        v478 = 0;
LABEL_575:
                        v261 = 0;
                        v251 = a11;
                        v238 = v458;
                        v250 = v300;
                        goto LABEL_620;
                      }
                      goto LABEL_507;
                    }
                    if (a3 != 37)
                    {
                      v471 = 0;
                      v460 = 0;
                      v478 = 0;
                      v261 = 0;
                      goto LABEL_620;
                    }
                    v491 = 0;
                    v255 = sub_22EC81010(v496);
                    v256 = *(_DWORD *)(a2 + 344);
                    if (v256)
                    {
                      v257 = *(_QWORD *)(a2 + 336) + 5272 * v256 - 5272;
                      v258 = *(_QWORD *)v257;
                      v259 = *(_QWORD *)v257 + 1312 * *(unsigned int *)(v257 + 8) - 1312 * *v448 - 1312;
                      if (v259 == v258)
                      {
                        v452 = 0;
                        LODWORD(v473) = 0;
                        v479 = 0;
                        v291 = 89;
                        goto LABEL_578;
                      }
                      v260 = v250;
                    }
                    else
                    {
                      v260 = v250;
                      v258 = 0;
                      v259 = -1312;
                    }
                    v289 = v259 - 1312;
                    while (1)
                    {
                      *(_QWORD *)v503 = 0;
                      if ((sub_22ECB1A54(v289, v255, v503) & 1) != 0
                        && *(_DWORD *)(*(_QWORD *)v503 + 8) == 66
                        && *(_DWORD *)(*(_QWORD *)v503 + 12) == 2)
                      {
                        break;
                      }
                      v20 = v289 == v258;
                      v289 -= 1312;
                      if (v20)
                      {
                        v452 = 0;
                        LODWORD(v473) = 0;
                        v479 = 0;
                        v291 = 89;
                        goto LABEL_577;
                      }
                    }
                    v302 = *(_QWORD *)(*(_QWORD *)v503 + 16);
                    *(_QWORD *)v503 = 0;
                    if ((sub_22ECD72C4(v289 + 328, v255, v503) & 1) == 0
                      || ((v303 = *(_QWORD *)(*(_QWORD *)v503 + 16), v303 >= 4)
                        ? (v304 = (*(_QWORD *)(*(_QWORD *)v503 + 16) & 2) == 0)
                        : (v304 = 1),
                          v304))
                    {
                      v452 = 0;
                      LODWORD(v473) = 0;
                      v479 = 0;
                      v291 = 89;
                    }
                    else
                    {
                      v491 = *(_QWORD *)(*(_QWORD *)v503 + 8);
                      v473 = HIWORD(v303);
                      v452 = *(_QWORD *)(v289 + 1104);
                      v291 = *(_DWORD *)(v289 + 960);
                      v479 = v302 & 0xFFFFFFFFFFFFFFFCLL;
                    }
                    v13 = v485;
LABEL_577:
                    v250 = v260;
LABEL_578:
                    v444 = v237;
                    v347 = sub_22EC81010(v496);
                    v348 = *(_DWORD *)(a2 + 344);
                    v443 = v250;
                    if (v348)
                    {
                      v349 = *(_QWORD *)(a2 + 336) + 5272 * v348 - 5272;
                      v350 = *(_QWORD *)v349;
                      v351 = *(_QWORD *)v349 + 1312 * *(unsigned int *)(v349 + 8) - 1312 * *v448 - 1312;
                      if (v351 == v350)
                      {
LABEL_590:
                        v354 = 0;
                        v355 = 0;
                        v356 = 0;
                        v357 = 89;
                        goto LABEL_591;
                      }
                    }
                    else
                    {
                      v350 = 0;
                      v351 = -1312;
                    }
                    v352 = v351 - 1312;
                    while (1)
                    {
                      *(_QWORD *)v503 = 0;
                      if ((sub_22ECB1A54(v352, v347, v503) & 1) != 0
                        && *(_DWORD *)(*(_QWORD *)v503 + 8) == 66
                        && *(_DWORD *)(*(_QWORD *)v503 + 12) == 2)
                      {
                        break;
                      }
                      v20 = v352 == v350;
                      v352 -= 1312;
                      if (v20)
                        goto LABEL_590;
                    }
                    v384 = *(_QWORD *)(*(_QWORD *)v503 + 16);
                    *(_QWORD *)v503 = 0;
                    if ((sub_22ECD72C4(v352 + 328, v347, v503) & 1) != 0)
                    {
                      v385 = *(_QWORD *)(*(_QWORD *)v503 + 16);
                      v386 = v385 >= 4 && (*(_QWORD *)(*(_QWORD *)v503 + 16) & 2) == 0;
                      v358 = v474;
                      v237 = v444;
                      if (v386)
                      {
                        v491 = *(_QWORD *)(*(_QWORD *)v503 + 8);
                        v355 = (unsigned __int8 *)(v385 & 0xFFFFFFFFFFFFFFFCLL);
                        v354 = *(_QWORD *)(v352 + 1104);
                        v357 = *(_DWORD *)(v352 + 960);
                        v356 = v384 & 0xFFFFFFFFFFFFFFFCLL;
                      }
                      else
                      {
                        v354 = 0;
                        v355 = 0;
                        v356 = 0;
                        v357 = 89;
                      }
                      v13 = v485;
LABEL_592:
                      if (v357 == 89)
                        v359 = 1;
                      else
                        v359 = v447;
                      v361 = v358 < 2 || v291 == 89;
                      if (v359 != 1
                        || !v361
                        || ((_DWORD)v480 != (_DWORD)v473 ? (v362 = v291 == 89) : (v362 = 1), !v362 || v357 != 89))
                      {
                        if (v474 < 2 || v357 == 89)
                          goto LABEL_643;
                        v462 = v354;
                        *(_QWORD *)v503 = &v503[16];
                        *(_QWORD *)&v503[8] = 0x2000000000;
                        *(_QWORD *)&v501 = v502;
                        *((_QWORD *)&v501 + 1) = 0x2000000000;
                        v514 = 1;
                        v512 = &off_24FAC6E70;
                        v513 = &v501;
                        v515 = v488;
                        sub_22F0E9FEC(&v512, v355);
                        v514 = 1;
                        v512 = &off_24FAC6E70;
                        v513 = (__int128 *)v503;
                        v515 = v488;
                        sub_22F0E9FEC(&v512, (unsigned __int8 *)(v474 & 0xFFFFFFFFFFFFFFFELL));
                        v363 = llvm::FoldingSetNodeID::operator==();
                        if ((_BYTE *)v501 != v502)
                          free((void *)v501);
                        if (*(_BYTE **)v503 != &v503[16])
                          free(*(void **)v503);
                        v237 = v444;
                        v354 = v462;
                        if (!v363)
                        {
LABEL_643:
                          sub_22E8FCA40((_QWORD *)v13, *(_DWORD *)(a7 + 8), 0x10D5u, 0, (uint64_t)v503);
                          v371 = sub_22E8906A0((uint64_t)v503, &v500);
                          sub_22F0D4E74((uint64_t)v30);
                          *(_QWORD *)&v501 = v372;
                          sub_22E8906A0(v371, (uint64_t *)&v501);
                          sub_22E903BEC((unsigned int *)v503);
                          sub_22E8FCA40((_QWORD *)v13, v491, 0x1717u, 0, (uint64_t)v503);
                          v373 = sub_22E8906A0((uint64_t)v503, &v491);
                          if (v291 == 89)
                            v374 = v356;
                          else
                            v374 = v479;
                          sub_22F0D4E74(v374);
                          *(_QWORD *)&v501 = v375;
                          v376 = (_BYTE *)v373;
                          goto LABEL_647;
                        }
                      }
                      v471 = 0;
                      v460 = 0;
                      v478 = 0;
                      if (v291 == 89)
                        v261 = v354;
                      else
                        v261 = v452;
                      v251 = a11;
                      v238 = v458;
                      v250 = v443;
LABEL_620:
                      if (v30)
                      {
                        v364 = v30;
                        while (1)
                        {
                          v365 = (unint64_t)v364;
                          v366 = *v364;
                          if (v366 > 213)
                          {
                            if (v366 == 233)
                            {
                              if ((*(_DWORD *)v365 & 0x7C0000) != 0x300000)
                                goto LABEL_639;
                              v368 = (unsigned __int8 **)(v365 + 16);
                            }
                            else
                            {
                              if (v366 != 214)
                                goto LABEL_639;
                              v368 = (unsigned __int8 **)(v365 + 24);
                            }
                          }
                          else if (v366 == 155)
                          {
                            if ((**(_DWORD **)(v365 + 16) & 0x18000) != 0)
                              goto LABEL_639;
                            if (*(_BYTE *)(v365 + 48))
                              v368 = (unsigned __int8 **)(v365 + 24);
                            else
                              v368 = (unsigned __int8 **)(v365 + 32);
                          }
                          else
                          {
                            if (v366 != 176)
                              goto LABEL_639;
                            v367 = *(unsigned int *)(v365 + 20);
                            if ((_DWORD)v367 == -1)
                              goto LABEL_639;
                            v368 = (unsigned __int8 **)(v365 + 8 * v367 + 40);
                          }
                          v364 = *v368;
                          if (v364 == (unsigned __int8 *)v365)
                            goto LABEL_639;
                        }
                      }
                      v365 = 0;
LABEL_639:
                      if (v483)
                      {
                        v369 = 0;
LABEL_680:
                        if (v238 == 75 && a3 == 77)
                          v388 = 2;
                        else
                          v388 = *(_DWORD *)(v251 + 816);
                        if (v30)
                        {
                          while (1)
                          {
                            v389 = (uint64_t)v30;
                            v390 = *v30;
                            if (v390 > 0xD5)
                            {
                              if (v390 == 233)
                              {
                                if ((*(_DWORD *)v30 & 0x7C0000) != 0x300000)
                                  goto LABEL_704;
                                v392 = v30 + 16;
                              }
                              else
                              {
                                if (v390 != 214)
                                  goto LABEL_704;
                                v392 = v30 + 24;
                              }
                            }
                            else if (v390 == 155)
                            {
                              if ((**((_DWORD **)v30 + 2) & 0x18000) != 0)
                                goto LABEL_704;
                              if (v30[48])
                                v392 = v30 + 24;
                              else
                                v392 = v30 + 32;
                            }
                            else
                            {
                              if (v390 != 176)
                                goto LABEL_704;
                              v391 = *((unsigned int *)v30 + 5);
                              if ((_DWORD)v391 == -1)
                                goto LABEL_704;
                              v392 = &v30[8 * v391 + 40];
                            }
                            v30 = *(unsigned __int8 **)v392;
                            if (*(_QWORD *)v392 == v389)
                              goto LABEL_704;
                          }
                        }
                        v389 = 0;
LABEL_704:
                        sub_22EC83920(a2, v496, v389, 66, v369, v388, v481);
                        if (v388 == 2
                          && (v458 == 75 || (sub_22F421A78(v458) || sub_22F421A30(v458)) && !sub_22F421AC0(v458)))
                        {
                          v393 = v500;
                          *(_QWORD *)&v501 = sub_22EC81010(v496);
                          v394 = sub_22ECB1B04(a2);
                          v395 = sub_22ECF4748((_DWORD *)(v394 + 328), (uint64_t *)&v501);
                          if (v474 >= 2)
                          {
                            v396 = v474 & 0xFFFFFFFFFFFFFFFCLL;
                            *v395 = v393;
                          }
                          else
                          {
                            *v395 = v393;
                            v396 = (v480 << 48) | 2;
                          }
                          v395[1] = v396;
                          v397 = sub_22ECB1B04(a2);
                          if (!*(_QWORD *)(v397 + 1104))
                          {
                            v398 = v397;
                            v484 = v261;
                            v399 = v250;
                            v400 = sub_22EC822F4(*(_QWORD **)(a2 + 21448), v393, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 21448) + 88) + 16816), ".task_red.", 0xAuLL, 0, 0);
                            v401 = *(_QWORD *)(a2 + 21448);
                            v402 = v237;
                            v403 = *(_QWORD *)(*(_QWORD *)(v401 + 88) + 16816);
                            *(_DWORD *)(v400 + 28) |= 0x800u;
                            sub_22EFC9100(v400, *(_QWORD *)(v401 + 88));
                            v404 = *(_QWORD *)(v401 + 88);
                            *(_QWORD *)v503 = *(_QWORD *)(v400 + 40);
                            *(_DWORD *)&v503[8] = v393;
                            sub_22EFC6D6C((uint64_t)&v503[16], *(uint64_t *)v503);
                            v405 = sub_22E3CD3D4(v404 + 2032, 32, 3);
                            v442 = v403;
                            v237 = v402;
                            v406 = v404;
                            v250 = v399;
                            v261 = v484;
                            *(_QWORD *)(v398 + 1104) = sub_22EFF6AE4(v405, v406, 0, 0, 0, v400, 0, (uint64_t)v503, 0, 0, v442, 1, 0, 0);
                          }
                        }
                        v407 = a11;
                        v408 = *(unsigned int *)(a11 + 8);
                        if (v408 >= *(_DWORD *)(a11 + 12))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v407 = a11;
                          *(_QWORD *)(*(_QWORD *)a11 + 8 * *(unsigned int *)(a11 + 8)) = v365;
                          LODWORD(v408) = *(_DWORD *)(a11 + 8);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)a11 + 8 * v408) = v365;
                        }
                        *(_DWORD *)(v407 + 8) = v408 + 1;
                        v409 = *(unsigned int *)(v407 + 88);
                        v17 = v488;
                        if (v409 >= *(_DWORD *)(v407 + 92))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v407 = a11;
                          *(_QWORD *)(*(_QWORD *)(a11 + 80) + 8 * *(unsigned int *)(a11 + 88)) = v467;
                          LODWORD(v409) = *(_DWORD *)(a11 + 88);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(a11 + 80) + 8 * v409) = v467;
                        }
                        *(_DWORD *)(v407 + 88) = v409 + 1;
                        v410 = *(unsigned int *)(v407 + 168);
                        if (v410 >= *(_DWORD *)(v407 + 172))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v407 = a11;
                          *(_QWORD *)(*(_QWORD *)(a11 + 160) + 8 * *(unsigned int *)(a11 + 168)) = v453;
                          LODWORD(v410) = *(_DWORD *)(a11 + 168);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(a11 + 160) + 8 * v410) = v453;
                        }
                        *(_DWORD *)(v407 + 168) = v410 + 1;
                        v411 = *(unsigned int *)(v407 + 248);
                        if (v411 >= *(_DWORD *)(v407 + 252))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v407 = a11;
                          *(_QWORD *)(*(_QWORD *)(a11 + 240) + 8 * *(unsigned int *)(a11 + 248)) = v237;
                          LODWORD(v411) = *(_DWORD *)(a11 + 248);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(a11 + 240) + 8 * v411) = v237;
                        }
                        v412 = v250 & 0xFFFFFFFFFFFFFFFELL;
                        *(_DWORD *)(v407 + 248) = v411 + 1;
                        v413 = *(unsigned int *)(v407 + 328);
                        if (v413 >= *(_DWORD *)(v407 + 332))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v407 = a11;
                          *(_QWORD *)(*(_QWORD *)(a11 + 320) + 8 * *(unsigned int *)(a11 + 328)) = v412;
                          LODWORD(v413) = *(_DWORD *)(a11 + 328);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(a11 + 320) + 8 * v413) = v412;
                        }
                        *(_DWORD *)(v407 + 328) = v413 + 1;
                        v414 = *(unsigned int *)(v407 + 648);
                        if (v414 >= *(_DWORD *)(v407 + 652))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v407 = a11;
                          *(_QWORD *)(*(_QWORD *)(a11 + 640) + 8 * *(unsigned int *)(a11 + 648)) = v261;
                          LODWORD(v414) = *(_DWORD *)(a11 + 648);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(a11 + 640) + 8 * v414) = v261;
                        }
                        *(_DWORD *)(v407 + 648) = v414 + 1;
                        v13 = v485;
                        if (*(_DWORD *)(v407 + 816) == 1)
                        {
                          v415 = *(unsigned int *)(v407 + 408);
                          if (v415 >= *(unsigned int *)(v407 + 412))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v407 = a11;
                            v415 = *(unsigned int *)(a11 + 408);
                          }
                          *(_QWORD *)(*(_QWORD *)(v407 + 400) + 8 * v415) = v471 & 0xFFFFFFFFFFFFFFFELL;
                          ++*(_DWORD *)(v407 + 408);
                          v416 = *(unsigned int *)(v407 + 488);
                          if (v416 >= *(unsigned int *)(v407 + 492))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v407 = a11;
                            v416 = *(unsigned int *)(a11 + 488);
                          }
                          *(_QWORD *)(*(_QWORD *)(v407 + 480) + 8 * v416) = v460 & 0xFFFFFFFFFFFFFFFELL;
                          ++*(_DWORD *)(v407 + 488);
                          v417 = *(unsigned int *)(v407 + 568);
                          if (v417 >= *(unsigned int *)(v407 + 572))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v407 = a11;
                            v417 = *(unsigned int *)(a11 + 568);
                          }
                          *(_QWORD *)(*(_QWORD *)(v407 + 560) + 8 * v417) = v478 & 0xFFFFFFFFFFFFFFFELL;
                          ++*(_DWORD *)(v407 + 568);
                        }
                        goto LABEL_123;
                      }
                      if ((sub_22EFC7ADC(*(_QWORD *)(v485 + 216)) & 1) != 0)
                      {
                        v369 = 0;
LABEL_679:
                        v251 = a11;
                        goto LABEL_680;
                      }
                      if (v45 == 191 || v45 == 107)
                      {
                        v377 = 0;
                        memset(&v503[8], 0, 20);
                        *(_QWORD *)v503 = v485;
                        *(_QWORD *)&v503[32] = (char *)&v505 + 8;
                        *(_QWORD *)&v504 = (char *)&v505 + 8;
                        *((_QWORD *)&v504 + 1) = 2;
                        LODWORD(v505) = 0;
                        v507 = v496;
                        v508 = 0;
                        if (v30)
                        {
                          for (j = v30; j != (unsigned __int8 *)v377; j = *v381)
                          {
                            v377 = (unint64_t)j;
                            v379 = *j;
                            if (v379 > 213)
                            {
                              if (v379 == 233)
                              {
                                if ((*(_DWORD *)v377 & 0x7C0000) != 0x300000)
                                  break;
                                v381 = (unsigned __int8 **)(v377 + 16);
                              }
                              else
                              {
                                if (v379 != 214)
                                  break;
                                v381 = (unsigned __int8 **)(v377 + 24);
                              }
                            }
                            else if (v379 == 155)
                            {
                              if ((**(_DWORD **)(v377 + 16) & 0x18000) != 0)
                                break;
                              if (*(_BYTE *)(v377 + 48))
                                v381 = (unsigned __int8 **)(v377 + 24);
                              else
                                v381 = (unsigned __int8 **)(v377 + 32);
                            }
                            else
                            {
                              if (v379 != 176)
                                break;
                              v380 = *(unsigned int *)(v377 + 20);
                              if ((_DWORD)v380 == -1)
                                break;
                              v381 = (unsigned __int8 **)(v377 + 8 * v380 + 40);
                            }
                          }
                        }
                        sub_22ECD6590((uint64_t *)v503, v377, v370);
                        v383 = v382;
                        v369 = v508;
                        if ((_QWORD)v504 != *(_QWORD *)&v503[32])
                          free((void *)v504);
                        v365 = v383 & 0xFFFFFFFFFFFFFFFELL;
                        llvm::deallocate_buffer(*(llvm **)&v503[8], (void *)(16 * *(unsigned int *)&v503[24]));
                        v238 = v458;
                      }
                      else
                      {
                        v369 = sub_22EC9B8AC(v485, v496, v497, 0);
                        v365 = v369;
                      }
                      if (sub_22EC7ECC4(v485, v496, 0, 0))
                        goto LABEL_679;
                      v418 = *(_QWORD *)(v369 + 16);
                      v419 = a11;
                      v420 = *(unsigned int *)(a11 + 728);
                      if (v420 >= *(_DWORD *)(a11 + 732))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v419 = a11;
                        *(_QWORD *)(*(_QWORD *)(a11 + 720) + 8 * *(unsigned int *)(a11 + 728)) = v418;
                        LODWORD(v420) = *(_DWORD *)(a11 + 728);
                      }
                      else
                      {
                        *(_QWORD *)(*(_QWORD *)(a11 + 720) + 8 * v420) = v418;
                      }
                      *(_DWORD *)(v419 + 728) = v420 + 1;
                      if (sub_22F281CA0(*(_QWORD *)(v369 + 16)))
                      {
                        v421 = sub_22EB1A358(v485, v369, 0);
                        if (v421 < 2
                          || ((v422 = v421, (v423 = sub_22ECB1B04(a2)) == 0)
                            ? (v424 = 0)
                            : (v424 = *(_QWORD *)(v423 + 992)),
                              v425 = sub_22EB4785C(v485, v424, v499, 21, (uint64_t)v497, v422 & 0xFFFFFFFFFFFFFFFELL),
                              v425 < 2))
                        {
                          v13 = v485;
                          goto LABEL_122;
                        }
                        v426 = v425;
                        v427 = sub_22ECB1B04(a2);
                        if (v427)
                        {
                          v428 = *(_DWORD *)(v427 + 960) - 36;
                          if (v428 <= 0x29 && ((1 << v428) & 0x3C000000C03) != 0)
                          {
                            sub_22EFF605C((uint64_t)v30);
                            v13 = v485;
                            sub_22E8FCA40((_QWORD *)v485, v429, 0x10D8u, 0, (uint64_t)v503);
                            sub_22F0D4E74((uint64_t)v30);
                            *(_QWORD *)&v501 = v430;
                            v376 = v503;
LABEL_647:
                            sub_22E8906A0((uint64_t)v376, (uint64_t *)&v501);
                            goto LABEL_120;
                          }
                        }
                        v431 = sub_22EBCEBF8(v485, (unsigned __int8 *)(v426 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
                        v432 = *(unsigned int *)(a11 + 776);
                        if (v432 >= *(_DWORD *)(a11 + 780))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          *(_QWORD *)(*(_QWORD *)(a11 + 768) + 8 * *(unsigned int *)(a11 + 776)) = v431;
                          LODWORD(v432) = *(_DWORD *)(a11 + 776);
                        }
                        else
                        {
                          *(_QWORD *)(*(_QWORD *)(a11 + 768) + 8 * v432) = v431;
                        }
                        v251 = a11;
                        *(_DWORD *)(a11 + 776) = v432 + 1;
                      }
                      else
                      {
                        v251 = a11;
                      }
                      v238 = v458;
                      goto LABEL_680;
                    }
                    v354 = 0;
                    v355 = 0;
                    v356 = 0;
                    v357 = 89;
                    v13 = v485;
LABEL_591:
                    v358 = v474;
                    v237 = v444;
                    goto LABEL_592;
                  }
                  v239 = 22;
                }
                else
                {
                  v237 = (_DWORD *)v234;
                  if ((_DWORD)v480 != 16)
                  {
                    v238 = v458;
                    if ((_DWORD)v480 == 17)
                    {
                      v239 = 30;
                      goto LABEL_429;
                    }
                    if ((_DWORD)v480 == 18)
                    {
                      v239 = 31;
                      goto LABEL_429;
                    }
                    goto LABEL_428;
                  }
                  v239 = 29;
                }
                v238 = v458;
                goto LABEL_429;
              }
LABEL_380:
              v191 = v476;
              sub_22EA117E4();
              goto LABEL_381;
            }
            switch((int)v480)
            {
              case 2:
              case 19:
                v155 = *(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
                v156 = *(_QWORD *)v155;
                v157 = *(_DWORD *)(*(_QWORD *)v155 + 16);
                if (*(_QWORD *)v155)
                  v158 = v157 == 11;
                else
                  v158 = 0;
                if (v158)
                {
                  if (((v157 >> 19) & 0x1FF) - 166 < 0x35)
                    goto LABEL_314;
                }
                else if (v156 && v157 == 44)
                {
                  v159 = sub_22F114198(*(_QWORD *)(v156 + 24));
                  if ((*(_BYTE *)(v159 + 74) & 1) != 0 || *(_QWORD *)(v159 + 128) > 7uLL)
                    goto LABEL_314;
                  v155 = *(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
                }
                else
                {
                  v57 = v157 > 0x27u;
                  v188 = (1 << v157) & 0x8180001600;
                  if (!v57 && v188 != 0)
                    goto LABEL_314;
                }
                if (*(_BYTE *)(*(_QWORD *)v155 + 16) != 12)
                  goto LABEL_380;
LABEL_314:
                v172 = v485;
                v173 = v68;
                v174 = 1;
                goto LABEL_315;
              case 5:
              case 17:
              case 18:
              case 20:
                v139 = *(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
                v140 = *(_QWORD *)v139;
                v141 = *(_DWORD *)(*(_QWORD *)v139 + 16);
                if (*(_QWORD *)v139)
                  v142 = v141 == 11;
                else
                  v142 = 0;
                if (v142)
                {
                  if (((v141 >> 19) & 0x1FF) - 166 < 0x35)
                    goto LABEL_292;
                }
                else if (v140 && v141 == 44)
                {
                  v143 = sub_22F114198(*(_QWORD *)(v140 + 24));
                  if ((*(_BYTE *)(v143 + 74) & 1) != 0 || *(_QWORD *)(v143 + 128) > 7uLL)
                    goto LABEL_292;
                  v139 = *(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
                }
                else
                {
                  v57 = v141 > 0x27u;
                  v170 = (1 << v141) & 0x8180001600;
                  if (!v57 && v170 != 0)
                    goto LABEL_292;
                }
                if (*(_BYTE *)(*(_QWORD *)v139 + 16) != 12)
                  goto LABEL_380;
LABEL_292:
                v172 = v485;
                v173 = v68;
                v174 = 0;
LABEL_315:
                v182 = sub_22EB25D60(v172, v173, v174) & 0xFFFFFFFFFFFFFFFELL;
                goto LABEL_316;
              case 10:
              case 11:
                v160 = v495;
                v161 = *(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0);
                v162 = *(_QWORD *)(*(_QWORD *)(v161 + 8) & 0xFFFFFFFFFFFFFFF0);
                v163 = *(_DWORD *)(v162 + 16);
                if (v162)
                  v164 = v163 == 11;
                else
                  v164 = 0;
                if (v164)
                {
                  if (((*(_DWORD *)(v162 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                    goto LABEL_362;
                }
                else if (v162 && v163 == 44)
                {
                  v165 = sub_22F114198(*(_QWORD *)(v162 + 24));
                  if ((*(_BYTE *)(v165 + 74) & 1) != 0 || *(_QWORD *)(v165 + 128) > 7uLL)
                  {
                    v166 = sub_22F114198(*(_QWORD *)(v162 + 24));
                    v160 = v495;
                    if ((*(_BYTE *)(v166 + 76) & 0x80) == 0)
                    {
                      v161 = *(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0);
                      goto LABEL_362;
                    }
                  }
                  else
                  {
                    v160 = v495;
                  }
                }
                else if (v163 == 9)
                {
                  goto LABEL_362;
                }
                v161 = *(_QWORD *)(v160 & 0xFFFFFFFFFFFFFFF0);
                v214 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v161 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                if (v214 == 11)
                {
                  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v161 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FEu)
                     - 210 > 7)
                    goto LABEL_380;
                  v223 = (llvm::APFloatBase *)sub_22EF5B2E0(v17, v160);
                  v224 = llvm::APFloatBase::PPCDoubleDouble(v223);
                  if ((llvm::APFloatBase *)v224 == v223)
                    llvm::detail::DoubleAPFloat::DoubleAPFloat();
                  else
                    llvm::detail::IEEEFloat::IEEEFloat();
                  sub_22E54C37C(v503);
                  v225 = v495;
                  v226 = sub_22E3CD3D4(v456, 32, 3);
                  sub_22EFF9470(v226, v17, (uint64_t)v503, 1, v225, v68);
                  if (v224 == *(_QWORD *)&v503[8])
                    sub_22E463170((llvm::APFloatBase *)&v503[16]);
                  else
                    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v503[8]);
                  v13 = v485;
                  goto LABEL_317;
                }
                if (v214 != 39)
                  goto LABEL_380;
LABEL_362:
                v215 = sub_22F110B20(v161);
                v216 = sub_22EF5CDF0(v17, *(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0));
                v217 = v216;
                v218 = sub_22EF60A6C(v17, v216, v215);
                *(_DWORD *)&v503[8] = v217;
                v466 = v218;
                if ((_DWORD)v480 == 10)
                {
                  if (v215)
                  {
                    if (v217 > 0x40)
                    {
                      v220 = (uint64_t *)v503;
                      llvm::APInt::initSlowCase((llvm::APInt *)v503);
                      LODWORD(v219) = v217 - 1;
                      if (*(_DWORD *)&v503[8] >= 0x41u)
                        v220 = (uint64_t *)(*(_QWORD *)v503 + 8 * (v219 >> 6));
                      v13 = v485;
                      v17 = v488;
                    }
                    else
                    {
                      if (v217)
                        v219 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v217;
                      else
                        v219 = 0;
                      *(_QWORD *)v503 = v219;
                      LOBYTE(v219) = v217 - 1;
                      v220 = (uint64_t *)v503;
                    }
                    v221 = *v220 & ~(1 << v219);
LABEL_373:
                    *v220 = v221;
                    goto LABEL_457;
                  }
                  if (v217 <= 0x40)
                  {
                    if (v217)
                      v285 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v217;
                    else
                      v285 = 0;
                    *(_QWORD *)v503 = v285;
LABEL_457:
                    v182 = sub_22E3CD3D4(v456, 32, 3);
                    sub_22EFF8F1C(v182, v17, (uint64_t)v503, v466, v68);
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) == 39)
                    {
                      v286 = sub_22EF579A8(v17, v495, v68);
                      v287 = sub_22E95CFA4(v13, v68, v286, v68, v182);
                      if ((v287 & 1) != 0)
                      {
                        v288 = 4 * (v287 & 1);
                        goto LABEL_462;
                      }
                      v182 = v287 & 0xFFFFFFFFFFFFFFFELL;
                    }
                    v288 = 0;
LABEL_462:
                    if (*(_DWORD *)&v503[8] >= 0x41u && *(_QWORD *)v503)
                      MEMORY[0x2348A0E84](*(_QWORD *)v503, 0x1000C8000313F17);
                    if (v288)
                      goto LABEL_123;
                    goto LABEL_316;
                  }
                }
                else
                {
                  if (v215)
                  {
                    if (v217 > 0x40)
                    {
                      v220 = (uint64_t *)v503;
                      llvm::APInt::initSlowCase((llvm::APInt *)v503);
                      v222 = v217 - 1;
                      if (*(_DWORD *)&v503[8] >= 0x41u)
                        v220 = (uint64_t *)(*(_QWORD *)v503 + 8 * (v222 >> 6));
                      v13 = v485;
                      v17 = v488;
                    }
                    else
                    {
                      *(_QWORD *)v503 = 0;
                      LOBYTE(v222) = v217 - 1;
                      v220 = (uint64_t *)v503;
                    }
                    v221 = (1 << v222) | *v220;
                    goto LABEL_373;
                  }
                  if (v217 <= 0x40)
                  {
                    *(_QWORD *)v503 = 0;
                    goto LABEL_457;
                  }
                }
                llvm::APInt::initSlowCase((llvm::APInt *)v503);
                goto LABEL_457;
              case 16:
                v175 = v495;
                v176 = v495 & 0xFFFFFFFFFFFFFFF0;
                v177 = *(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0);
                if (v177 && *(_BYTE *)(v177 + 16) == 12)
                  goto LABEL_297;
                v178 = v495;
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v177 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
                {
                  v177 = sub_22F10CF48(v177);
                  if (v177)
                  {
LABEL_297:
                    v178 = *(_QWORD *)(v177 + 32);
                    v495 = v178;
                  }
                  else
                  {
                    v178 = v495;
                  }
                }
                v179 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v178 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                v180 = *(_DWORD *)(v179 + 16);
                if (v179 && v180 == 11 && ((v180 >> 19) & 0x1FE) - 210 <= 7)
                {
                  v464 = v176;
                  sub_22EF5B2E0(v488, v178);
                  llvm::APFloat::getAllOnesValue();
                  v181 = v495;
                  v182 = sub_22E3CD3D4(v456, 32, 3);
                  v183 = (llvm::APFloatBase *)sub_22EFF9470(v182, v488, (uint64_t)v503, 1, v181, v68);
                  v184 = *(_QWORD *)&v503[8];
                  if (llvm::APFloatBase::PPCDoubleDouble(v183) == v184)
                    sub_22E463170((llvm::APFloatBase *)&v503[16]);
                  else
                    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v503[8]);
                  v185 = v464;
                  goto LABEL_351;
                }
                if (v180 == 11)
                {
                  if (((v180 >> 19) & 0x1FF) - 166 >= 0x35)
                  {
LABEL_306:
                    v182 = 0;
                    goto LABEL_355;
                  }
                }
                else if (v180 == 44)
                {
                  v194 = sub_22F114198(*(_QWORD *)(v179 + 24));
                  if ((*(_BYTE *)(v194 + 74) & 1) == 0 && *(_QWORD *)(v194 + 128) < 8uLL)
                    goto LABEL_306;
                }
                else
                {
                  v57 = v180 > 0x27u;
                  v203 = (1 << v180) & 0x8180001600;
                  if (v57 || v203 == 0)
                    goto LABEL_306;
                }
                v465 = v175;
                v205 = v176;
                v206 = sub_22EF5CDF0(v488, *(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0));
                v207 = v206;
                v208 = sub_22EF60A6C(v488, v206, 0);
                *(_DWORD *)&v503[8] = v207;
                if (v207 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)v503);
                }
                else
                {
                  v209 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v207;
                  if (!v207)
                    v209 = 0;
                  *(_QWORD *)v503 = v209;
                }
                v185 = v205;
                v182 = sub_22E3CD3D4(v456, 32, 3);
                sub_22EFF8F1C(v182, v488, (uint64_t)v503, v208, v68);
                v175 = v465;
                if (*(_DWORD *)&v503[8] >= 0x41u && *(_QWORD *)v503)
                  MEMORY[0x2348A0E84](*(_QWORD *)v503, 0x1000C8000313F17);
                v13 = v485;
LABEL_351:
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v185 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
                {
                  v210 = sub_22E3CD3D4(v456, 24, 3);
                  *(_BYTE *)v210 = -78;
                  if (byte_255E04EB3)
                  {
                    v211 = sub_22F0D3748(178);
                    ++*((_DWORD *)v211 + 2);
                  }
                  v212 = *(_DWORD *)v210 & 0xFFFC00FF;
                  *(_QWORD *)(v210 + 8) = v175;
                  *(_QWORD *)(v210 + 16) = v182;
                  *(_DWORD *)v210 = v212;
                  v182 = sub_22EB2D0B8() & 0xFFFFFFFFFFFFFFFELL;
                }
LABEL_355:
                v495 = v175;
                v17 = v488;
LABEL_316:
                if (v182)
                  goto LABEL_317;
                goto LABEL_380;
              default:
                goto LABEL_380;
            }
          }
          if ((_DWORD)v480 == 32 && !v77)
          {
            sub_22E8FCA40((_QWORD *)v13, *(_DWORD *)(a7 + 8), 0x1101u, 0, (uint64_t)v503);
            v81 = sub_22E8901B8((uint64_t)v503, (uint64_t *)&v495);
            sub_22E8906A0(v81, &v500);
LABEL_120:
            v82 = (unsigned int *)v503;
            goto LABEL_121;
          }
          if (v77 || (v480 & 0x3E) != 0xA)
            goto LABEL_193;
          v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v84 = *(_DWORD *)(v83 + 16);
          if (v83)
            v85 = v84 == 11;
          else
            v85 = 0;
          if (v85)
          {
            if (((v84 >> 19) & 0x1FF) - 166 < 0x35)
              goto LABEL_192;
          }
          else if (v83 && v84 == 44)
          {
            v86 = sub_22F114198(*(_QWORD *)(v83 + 24));
            if ((*(_BYTE *)(v86 + 74) & 1) != 0 || *(_QWORD *)(v86 + 128) > 7uLL)
              goto LABEL_192;
          }
          else
          {
            v106 = v84 - 9;
            if (v106 < 0x1Fu && ((0x40C0000Bu >> v106) & 1) != 0)
              goto LABEL_192;
          }
          if ((*(_BYTE *)(*(_QWORD *)(v13 + 72) + 1) & 1) == 0
            || !sub_22F110E9C(*(_QWORD *)(v495 & 0xFFFFFFFFFFFFFFF0)))
          {
            sub_22E8FCA40((_QWORD *)v13, v68, 0x1051u, 0, (uint64_t)v503);
            *(_QWORD *)&v501 = llvm::omp::getOpenMPClauseName();
            *((_QWORD *)&v501 + 1) = v192;
            v193 = sub_22F2F2210((uint64_t)v503, (uint64_t)&v501);
            LODWORD(v512) = (**(_DWORD **)(v13 + 72) >> 8) & 1;
            sub_22E89519C(v193, (unsigned int *)&v512);
            sub_22E903BEC((unsigned int *)v503);
            if (v45 == 107)
              goto LABEL_122;
            v17 = v488;
            if (v45 == 191)
              goto LABEL_123;
LABEL_390:
            if (v483)
            {
              v231 = sub_22EFBBF74(v483, v17);
              v232 = *(_DWORD *)(v496 + 24);
              if (v231)
              {
                v233 = 5543;
LABEL_405:
                sub_22E8FCA40((_QWORD *)v13, v232, v233, 0, (uint64_t)v503);
                sub_22E890024((uint64_t)v503, (uint64_t *)&v496);
                sub_22E903BEC((unsigned int *)v503);
                goto LABEL_123;
              }
            }
            else
            {
              v232 = *(_DWORD *)(v496 + 24);
            }
            v233 = 6001;
            goto LABEL_405;
          }
LABEL_192:
          v79 = 1;
          goto LABEL_193;
        }
        v53 = *(_DWORD *)(v52 + 16);
      }
      if ((v53 & 0x100000) != 0)
      {
        do
        {
          v52 = *(_QWORD *)(*(_QWORD *)(v52 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v52 || (v434 = *(_DWORD *)(v52 + 16), (v434 & 0xFE) != 0x28))
          {
            v52 = sub_22F10CF48(v52);
            v434 = *(_DWORD *)(v52 + 16);
          }
          v13 = v485;
        }
        while ((v434 & 0x100000) != 0);
      }
      v51 = *(_QWORD *)(v52 + 32);
      goto LABEL_74;
    }
    v17 = v488;
    if (v45 == 191)
    {
      v55 = sub_22F00338C(v50[2]) & 0xFFFFFFFFFFFFFFF0;
      v56 = *(_QWORD *)v55;
      if (*(_QWORD *)v55)
        v57 = (*(_DWORD *)(*(_QWORD *)v55 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v57 = 0;
      if (!v57)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        {
LABEL_81:
          v58 = sub_22F10ACF8(v56);
LABEL_82:
          v495 = v58;
          v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
          if (!v59 || (v60 = *(_DWORD *)(v59 + 16), (v60 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
            {
              v61 = &v495;
LABEL_86:
              v54 = 0;
              v495 = *v61;
              v45 = 191;
              v49 = 1;
              goto LABEL_91;
            }
            v59 = sub_22F10CF48(v59);
            if (!v59)
            {
              v61 = &v495;
              v13 = v485;
              goto LABEL_86;
            }
            v60 = *(_DWORD *)(v59 + 16);
            v13 = v485;
          }
          if ((v60 & 0x100000) != 0)
          {
            do
            {
              v59 = *(_QWORD *)(*(_QWORD *)(v59 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v59 || (v435 = *(_DWORD *)(v59 + 16), (v435 & 0xFE) != 0x28))
              {
                v59 = sub_22F10CF48(v59);
                v435 = *(_DWORD *)(v59 + 16);
              }
              v13 = v485;
            }
            while ((v435 & 0x100000) != 0);
          }
          v61 = (unint64_t *)(v59 + 32);
          goto LABEL_86;
        }
        v56 = sub_22F10CF48(v56);
        if (!v56)
        {
          v56 = *(_QWORD *)v55;
          goto LABEL_81;
        }
      }
      v58 = *(_QWORD *)(v56 + 32);
      goto LABEL_82;
    }
LABEL_87:
    v62 = *(_QWORD *)(v31 + 48);
    v63 = *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0);
    if (!v63 || (v64 = *(_DWORD *)(v63 + 16), (v64 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v63 = sub_22F10CF48(v63)) == 0)
      {
LABEL_90:
        v65 = sub_22EF5BA38(v17, v62);
        v49 = 0;
        v54 = 0;
        v495 = v65;
        goto LABEL_91;
      }
      v64 = *(_DWORD *)(v63 + 16);
    }
    if ((v64 & 0x100000) != 0)
    {
      do
      {
        v63 = *(_QWORD *)(*(_QWORD *)(v63 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v63 || (v433 = *(_DWORD *)(v63 + 16), (v433 & 0xFE) != 0x28))
        {
          v63 = sub_22F10CF48(v63);
          v433 = *(_DWORD *)(v63 + 16);
        }
        v13 = v485;
        v17 = v488;
      }
      while ((v433 & 0x100000) != 0);
    }
    v62 = *(_QWORD *)(v63 + 32);
    goto LABEL_90;
  }
  return *(_DWORD *)(a11 + 8) == 0;
}

uint64_t sub_22ECAE7FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)(a1 + 768);
  if (v2 != (void *)(a1 + 784))
    free(v2);
  v3 = *(void **)(a1 + 720);
  if (v3 != (void *)(a1 + 736))
    free(v3);
  v4 = *(void **)(a1 + 640);
  if (v4 != (void *)(a1 + 656))
    free(v4);
  v5 = *(void **)(a1 + 560);
  if (v5 != (void *)(a1 + 576))
    free(v5);
  v6 = *(void **)(a1 + 480);
  if (v6 != (void *)(a1 + 496))
    free(v6);
  v7 = *(void **)(a1 + 400);
  if (v7 != (void *)(a1 + 416))
    free(v7);
  v8 = *(void **)(a1 + 320);
  if (v8 != (void *)(a1 + 336))
    free(v8);
  v9 = *(void **)(a1 + 240);
  if (v9 != (void *)(a1 + 256))
    free(v9);
  v10 = *(void **)(a1 + 160);
  if (v10 != (void *)(a1 + 176))
    free(v10);
  v11 = *(void **)(a1 + 80);
  if (v11 != (void *)(a1 + 96))
    free(v11);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22ECAE8F8(_QWORD *a1, int a2, int a3)
{
  BOOL v4;
  uint64_t v5;
  int v8;
  unsigned int v9[24];

  v4 = (*(_BYTE *)(a1[9] + 1) & 1) == 0 && a2 != 0 || a2 == 3;
  v5 = v4;
  if (v4)
  {
    sub_22E8FCA40(a1, a3, 0x1112u, 0, (uint64_t)v9);
    v8 = (*(_DWORD *)a1[9] >> 8) & 1;
    sub_22E89519C((uint64_t)v9, (unsigned int *)&v8);
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22ECAE974(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unsigned int v12[24];

  v4 = 1;
  if (*(_QWORD *)(a3 + 21544) <= 0xFuLL)
  {
    v9 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "omp_depend_t", 0xCuLL);
    v10 = sub_22EA003D8((_QWORD *)a1, v9, a2, *(uint64_t **)(a1 + 12888), 0, 0, 0, 0, 0, 0, 1u, 0);
    if (v10 > 0xF)
    {
      *(_QWORD *)(a3 + 21544) = v10;
    }
    else
    {
      if (a4)
      {
        sub_22E8FCA40((_QWORD *)a1, a2, 0x1089u, 0, (uint64_t)v12);
        sub_22F2F30F4((uint64_t)v12, (uint64_t)"omp_depend_t");
        sub_22E903BEC(v12);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t sub_22ECAEA60(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  int *v12;

  v3 = sub_22ECB2028(a1);
  v4 = *(_DWORD *)(v3 + 728);
  if (a2 > v4 >> 1)
    return 0;
  v7 = v3;
  v8 = sub_22F3414F4((int *)(v3 + 728));
  if ((v4 & 1) != 0)
  {
    v10 = v7 + 736;
    v11 = 8;
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 736);
    v11 = *(_DWORD *)(v7 + 744);
  }
  v12 = (int *)(v10 + 24 * v11);
  if (v12 == v8)
    return 0;
  while (v8[2] != a2)
  {
    while (1)
    {
      v8 += 6;
      if (v8 == v9)
        break;
      if ((*(_QWORD *)v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_13;
    }
    v8 = v9;
LABEL_13:
    v5 = 0;
    if (v8 == v12)
      return v5;
  }
  return *(_QWORD *)v8;
}

uint64_t sub_22ECAEB18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x1000000000;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  v4 = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0x800000000;
  *(_QWORD *)(a1 + 1328) = a1 + 1344;
  *(_QWORD *)(a1 + 1336) = 0x1000000000;
  *(_QWORD *)(a1 + 1472) = a1 + 1488;
  *(_QWORD *)(a1 + 1480) = 0x1000000000;
  if (a3 >= 9)
  {
    sub_22F341810(v4);
    if (a3 > *(unsigned int *)(a1 + 1340))
      llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a1;
}

void sub_22ECAEBBC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 **a9, uint64_t a10, unsigned int a11, _DWORD *a12, uint64_t a13, unsigned __int8 a14, char a15)
{
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 **v22;
  uint64_t *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void **v39;
  uint64_t *p_OpenMPClauseName;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v110;
  unsigned __int8 *v112;
  _QWORD v113[2];
  _QWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117[5];
  void *OpenMPClauseName;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _QWORD v122[18];

  v122[16] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a7)
  {
    *(_QWORD *)a7 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "default", 7uLL);
    *(_DWORD *)(a7 + 8) = a5;
  }
  if (a13)
  {
    v18 = 4 * a13;
    v19 = a12;
    while (*v19 != 11)
    {
      ++v19;
      v18 -= 4;
      if (!v18)
      {
        v19 = &a12[a13];
        break;
      }
    }
  }
  else
  {
    v19 = a12;
  }
  v20 = *(_QWORD *)(a4 + 8);
  if (v20)
  {
    v21 = 0;
    v112 = 0;
    v22 = a9;
    v23 = *(uint64_t **)a4;
    v101 = a4 + 160;
    v102 = v19 - a12;
    v24 = &a9[a10];
    v110 = *(_QWORD *)a4 + 8 * v20;
    v106 = a2;
    while (1)
    {
      v25 = (unsigned __int8 *)*v23;
      sub_22EFF605C(*v23);
      v27 = v26;
      v22 += v21 & (v22 != v24);
      if (v22 != v24)
        v112 = *v22;
      v28 = sub_22EFFF0D0(v25);
      if ((*(_DWORD *)v28 & 0x1E000) != 0)
      {
        v29 = sub_22ECB1B04(a2);
        if (v29)
          v30 = *(_QWORD **)(v29 + 992);
        else
          v30 = 0;
        v35 = sub_22ECCF104(a1, v30, a6, a7, *((_QWORD *)v28 + 1) & 7 | *(_QWORD *)((*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF0) + 8), v112);
        if ((v35 & 1) == 0)
        {
          v36 = *(unsigned int *)(a4 + 1480);
          if (v36 >= *(unsigned int *)(a4 + 1484))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = *(unsigned int *)(a4 + 1480);
          }
          *(_QWORD *)(*(_QWORD *)(a4 + 1472) + 8 * v36) = v35 & 0xFFFFFFFFFFFFFFFELL;
          ++*(_DWORD *)(a4 + 1480);
          v37 = *(unsigned int *)(a4 + 24);
          if (v37 >= *(unsigned int *)(a4 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v37 = *(unsigned int *)(a4 + 24);
          }
          *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v37) = v25;
          ++*(_DWORD *)(a4 + 24);
        }
        goto LABEL_141;
      }
      v31 = sub_22EFFBBCC(v25);
      if ((*(_DWORD *)v25 & 0x300) != 0x100)
      {
        if (*(_DWORD *)(a1[9] + 72) > 0x31u)
        {
          sub_22E8FCA40(a1, v27, 0x10B8u, 0, (uint64_t)&v120);
          OpenMPClauseName = (void *)llvm::omp::getOpenMPClauseName();
          v119 = v56;
          v57 = sub_22F2F2210((uint64_t)&v120, (uint64_t)&OpenMPClauseName);
          sub_22F0D4E74((uint64_t)v25);
          v117[0] = v58;
          p_OpenMPClauseName = v117;
          v39 = (void **)v57;
        }
        else
        {
          sub_22E8FCA40(a1, v27, 0x1079u, 0, (uint64_t)&v120);
          sub_22F0D4E74((uint64_t)v25);
          OpenMPClauseName = v38;
          v39 = (void **)&v120;
          p_OpenMPClauseName = (uint64_t *)&OpenMPClauseName;
        }
        sub_22E8906A0((uint64_t)v39, p_OpenMPClauseName);
        sub_22E903BEC((unsigned int *)&v120);
        goto LABEL_141;
      }
      v32 = (uint64_t)v31;
      v120 = v122;
      v121 = 0x800000000;
      v33 = sub_22ECB1B04(a2);
      if (v33)
        v34 = *(_DWORD *)(v33 + 960);
      else
        v34 = 89;
      v41 = (unsigned __int8 *)sub_22ECF4F24(a1, v32, (uint64_t *)&v120, a3, v34, a15);
      if (!v41)
        goto LABEL_38;
      if (*v41 == 133)
      {
        v117[0] = *((_QWORD *)v41 + 1);
        v64 = sub_22ECB1B04(a2);
        sub_22F341934(v64 + 1112, v117, (uint64_t)&OpenMPClauseName);
        v65 = sub_22ECB1B04(a2);
        if (v65)
          v66 = *(_QWORD **)(v65 + 992);
        else
          v66 = 0;
        v76 = sub_22ECCF104(a1, v66, a6, a7, *((_QWORD *)v28 + 1) & 7 | *(_QWORD *)((*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF0) + 8), v112);
        if ((v76 & 1) == 0)
        {
          v77 = *(unsigned int *)(a4 + 1480);
          if (v77 >= *(unsigned int *)(a4 + 1484))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v77 = *(unsigned int *)(a4 + 1480);
          }
          *(_QWORD *)(*(_QWORD *)(a4 + 1472) + 8 * v77) = v76 & 0xFFFFFFFFFFFFFFFELL;
          ++*(_DWORD *)(a4 + 1480);
          v78 = *(unsigned int *)(a4 + 24);
          if (v78 >= *(unsigned int *)(a4 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v78 = *(unsigned int *)(a4 + 24);
          }
          *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v78) = v25;
          ++*(_DWORD *)(a4 + 24);
          sub_22F341C20(v101, *(unsigned int *)(a4 + 168) + 1);
          sub_22F29D690(*(_QWORD *)(a4 + 160) + 144 * *(unsigned int *)(a4 + 168) - 144, v120, &v120[16 * v121]);
          v79 = *(unsigned int *)(a4 + 1336);
          if (v79 >= *(unsigned int *)(a4 + 1340))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v79 = *(unsigned int *)(a4 + 1336);
          }
          *(_QWORD *)(*(_QWORD *)(a4 + 1328) + 8 * v79) = 0;
          ++*(_DWORD *)(a4 + 1336);
        }
        goto LABEL_38;
      }
      v42 = (uint64_t)v120;
      v43 = v121;
      v107 = *(_QWORD *)&v120[16 * v121 - 8];
      if ((*(_DWORD *)(v107 + 28) & 0x7Fu) - 60 >= 7)
        v44 = 0;
      else
        v44 = *(_QWORD *)&v120[16 * v121 - 8];
      v103 = v41;
      v104 = v44;
      if (v44)
      {
        sub_22EC7F2A4(a2, v44, 0, (uint64_t)&OpenMPClauseName);
        if ((HIDWORD(OpenMPClauseName) & 0xFFFFFFBF) == 0xF)
        {
          if ((a15 & 1) == 0)
          {
            sub_22EC7F2A4(a2, v104, 0, (uint64_t)v117);
            sub_22E8FCA40(a1, v27, 0x10F8u, 0, (uint64_t)&OpenMPClauseName);
            v115 = llvm::omp::getOpenMPClauseName();
            v116 = v83;
            sub_22F2F2210((uint64_t)&OpenMPClauseName, (uint64_t)&v115);
            sub_22E903BEC((unsigned int *)&OpenMPClauseName);
            v84 = a1;
            v85 = a2;
            v86 = v104;
            goto LABEL_154;
          }
          goto LABEL_38;
        }
        v42 = (uint64_t)v120;
        v43 = v121;
      }
      if ((sub_22ECF50FC(a1, a2, v107, v32, 1u, v42, v43, a3) & 1) != 0)
      {
        v45 = 2;
        goto LABEL_136;
      }
      a2 = v106;
      if (a3 == 46
        && (*(_DWORD *)(a1[9] + 72) < 0x2Eu || a5)
        && (sub_22ECF50FC(a1, v106, v107, v32, 0, (uint64_t)v120, v121, 46) & 1) != 0)
      {
        v45 = 2;
        goto LABEL_137;
      }
      v46 = v28;
      do
      {
        v47 = v46;
        LODWORD(v48) = *v46;
        if (v48 > 0xD5)
        {
          if ((_DWORD)v48 == 233)
          {
            LODWORD(v48) = *(_DWORD *)v46;
            if ((*(_DWORD *)v46 & 0x7C0000) != 0x300000)
              goto LABEL_94;
            v49 = v46 + 16;
          }
          else
          {
            if ((_DWORD)v48 != 214)
              break;
            v49 = v46 + 24;
          }
        }
        else if ((_DWORD)v48 == 155)
        {
          if ((**((_DWORD **)v46 + 2) & 0x18000) != 0)
            goto LABEL_94;
          v49 = v46 + 24;
          if (!v47[48])
            v49 = v47 + 32;
          LOBYTE(v48) = -101;
        }
        else
        {
          if ((_DWORD)v48 != 176)
            break;
          v48 = *((unsigned int *)v46 + 5);
          if ((_DWORD)v48 == -1)
            goto LABEL_94;
          v49 = &v46[8 * v48 + 40];
          LOBYTE(v48) = -80;
        }
        v46 = *(unsigned __int8 **)v49;
      }
      while (v46 != v47);
      v50 = v48;
      v51 = v48 == 191 ? v47 : 0;
      v52 = v48 == 192 ? v47 : 0;
      if (v50 != 107)
        break;
      v53 = *((_QWORD *)v47 + 1);
      v54 = *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0);
      if (!v54 || (v55 = *(_DWORD *)(v54 + 16), (v55 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_95;
        v54 = sub_22F10CF48(v54);
        if (!v54)
          goto LABEL_95;
        v55 = *(_DWORD *)(v54 + 16);
      }
      if ((v55 & 0x100000) != 0)
      {
        do
        {
          v54 = *(_QWORD *)(*(_QWORD *)(v54 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v54)
          {
            v100 = *(_DWORD *)(v54 + 16);
            if ((v100 & 0xFE) == 0x28)
              continue;
          }
          v54 = sub_22F10CF48(v54);
          v100 = *(_DWORD *)(v54 + 16);
        }
        while ((v100 & 0x100000) != 0);
      }
LABEL_76:
      v53 = *(_QWORD *)(v54 + 32);
LABEL_95:
      sub_22EFF605C((uint64_t)v28);
      v68 = v67;
      sub_22F0D4E74((uint64_t)v28);
      v117[0] = v69;
      v115 = v53;
      OpenMPClauseName = &unk_24FAB6EF8;
      LODWORD(v119) = 3591;
      if ((sub_22EE8B0B0((uint64_t)a1, v68, v53) & 1) != 0)
        goto LABEL_135;
      if ((sub_22EFC7ADC(a1[27]) & 1) == 0 && (sub_22F111968((unint64_t *)&v115, a1[11]) & 1) == 0)
      {
        sub_22E8FCA40(a1, v68, 0x1ACAu, 0, (uint64_t)&OpenMPClauseName);
        v70 = sub_22E8901B8((uint64_t)&OpenMPClauseName, &v115);
        sub_22E8906A0(v70, v117);
        sub_22E903BEC((unsigned int *)&OpenMPClauseName);
      }
      if (a3 != 46)
        goto LABEL_131;
      v71 = sub_22ECB1B04(v106);
      if (v71)
      {
        v72 = *(_DWORD *)(v71 + 960);
        if (a11 >= 2 && v72 == 58 || v72 == 59 && (a11 > 5 || ((1 << a11) & 0x34) == 0))
        {
          sub_22E8FCA40(a1, a5, 0x1095u, 0, (uint64_t)&OpenMPClauseName);
          LODWORD(v114[0]) = a14;
          v97 = sub_22E8900C4((uint64_t)&OpenMPClauseName, (int *)v114);
          v115 = (uint64_t)sub_22F42187C((const char *)0x2E, a11);
          v98 = sub_22E8AECC4(v97, &v115);
LABEL_161:
          v117[0] = llvm::omp::getOpenMPDirectiveName();
          v117[1] = v99;
          sub_22F2F2210(v98, (uint64_t)v117);
          sub_22E903BEC((unsigned int *)&OpenMPClauseName);
LABEL_135:
          v45 = 3;
LABEL_136:
          a2 = v106;
          goto LABEL_137;
        }
        if ((v72 & 0xFFFFFFFE) == 0x3A && v102 != a13)
        {
          sub_22E8FCA40(a1, a5, 0x1096u, 0, (uint64_t)&OpenMPClauseName);
          v115 = (uint64_t)sub_22F42187C((const char *)0x2E, 11);
          v75 = &OpenMPClauseName;
          goto LABEL_160;
        }
        v73 = (v72 - 56);
        if (v73 > 0x2A)
          goto LABEL_114;
        if (((1 << (v72 - 56)) & 0x6000001CF91) != 0)
        {
          if (a11 != 1)
            goto LABEL_111;
        }
        else if (v73 == 1)
        {
          if (a11 != 1)
          {
LABEL_111:
            if (a11 > 3)
            {
              sub_22E8FCA40(a1, a5, 0x1095u, 0, (uint64_t)&OpenMPClauseName);
              LODWORD(v114[0]) = a14;
              v74 = sub_22E8900C4((uint64_t)&OpenMPClauseName, (int *)v114);
              v115 = (uint64_t)sub_22F42187C((const char *)0x2E, a11);
              v75 = (void **)v74;
LABEL_160:
              v98 = sub_22E8AECC4((uint64_t)v75, &v115);
              goto LABEL_161;
            }
            goto LABEL_114;
          }
          v72 = 57;
        }
      }
      else
      {
        v72 = 89;
      }
LABEL_114:
      if (!v104)
        goto LABEL_131;
      if (*(_DWORD *)(a1[9] + 72) > 0x2Du)
      {
        if (v72 != 56)
          goto LABEL_131;
      }
      else if ((v72 - 56) > 0x2A || ((1 << (v72 - 56)) & 0x6000001CF91) == 0)
      {
        goto LABEL_131;
      }
      sub_22EC7F2A4(v106, v104, 0, (uint64_t)v117);
      if ((HIDWORD(v117[0]) - 29) <= 0x30 && ((1 << (BYTE4(v117[0]) - 29)) & 0x100240000C101) != 0)
      {
        sub_22E8FCA40(a1, v27, 0x110Au, 0, (uint64_t)&OpenMPClauseName);
        v115 = llvm::omp::getOpenMPClauseName();
        v116 = v87;
        v88 = sub_22F2F2210((uint64_t)&OpenMPClauseName, (uint64_t)&v115);
        v114[0] = llvm::omp::getOpenMPClauseName();
        v114[1] = v89;
        v90 = sub_22F2F2210(v88, (uint64_t)v114);
        a2 = v106;
        sub_22ECB1B04(v106);
        v113[0] = llvm::omp::getOpenMPDirectiveName();
        v113[1] = v96;
        sub_22F2F2210(v90, (uint64_t)v113);
        sub_22E903BEC((unsigned int *)&OpenMPClauseName);
        v84 = a1;
        v85 = v106;
        v86 = v107;
LABEL_154:
        sub_22EC82B14(v84, v85, v86, (uint64_t)v117, 0);
LABEL_38:
        v45 = 3;
        goto LABEL_137;
      }
LABEL_131:
      v80 = sub_22ECB1B04(v106);
      if (v80)
        v81 = *(_QWORD **)(v80 + 992);
      else
        v81 = 0;
      v82 = sub_22ECCF104(a1, v81, a6, a7, *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF0) + 8) | v53 & 7, v112);
      if ((v82 & 1) != 0)
        goto LABEL_135;
      v91 = *(unsigned int *)(a4 + 1480);
      a2 = v106;
      if (v91 >= *(unsigned int *)(a4 + 1484))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v91 = *(unsigned int *)(a4 + 1480);
      }
      *(_QWORD *)(*(_QWORD *)(a4 + 1472) + 8 * v91) = v82 & 0xFFFFFFFFFFFFFFFELL;
      ++*(_DWORD *)(a4 + 1480);
      v92 = *(unsigned int *)(a4 + 24);
      if (v92 >= *(unsigned int *)(a4 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v92 = *(unsigned int *)(a4 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v92) = v25;
      ++*(_DWORD *)(a4 + 24);
      sub_22ECB0DE4(v106, v107, v120, v121, 46);
      sub_22F341C20(v101, *(unsigned int *)(a4 + 168) + 1);
      sub_22F29D690(*(_QWORD *)(a4 + 160) + 144 * *(unsigned int *)(a4 + 168) - 144, v120, &v120[16 * v121]);
      v93 = *v103;
      v94 = *(unsigned int *)(a4 + 1336);
      if (v94 >= *(unsigned int *)(a4 + 1340))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v94 = *(unsigned int *)(a4 + 1336);
      }
      v45 = 0;
      v95 = v107;
      if (v93 == 188)
        v95 = 0;
      *(_QWORD *)(*(_QWORD *)(a4 + 1328) + 8 * v94) = v95;
      ++*(_DWORD *)(a4 + 1336);
LABEL_137:
      if (v120 != (_BYTE *)v122)
        free(v120);
      if (v45 != 3 && v45)
        return;
LABEL_141:
      ++v23;
      v21 = 1;
      if (v23 == (uint64_t *)v110)
        return;
    }
    if (!v51)
    {
      if (v52)
        v53 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v52[8 * *((unsigned int *)v52 + 6) + 32] + 8) & 0xFFFFFFFFFFFFFFF0));
      else
LABEL_94:
        v53 = *((_QWORD *)v28 + 1);
      goto LABEL_95;
    }
    v59 = sub_22F00338C(*((unsigned __int8 **)v51 + 2)) & 0xFFFFFFFFFFFFFFF0;
    v60 = *(_QWORD *)v59;
    if (*(_QWORD *)v59)
      v61 = (*(_DWORD *)(*(_QWORD *)v59 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v61 = 0;
    if (!v61)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      {
LABEL_84:
        v62 = sub_22F10ACF8(v60);
        goto LABEL_85;
      }
      v60 = sub_22F10CF48(v60);
      if (!v60)
      {
        v60 = *(_QWORD *)v59;
        goto LABEL_84;
      }
    }
    v62 = *(_QWORD *)(v60 + 32);
LABEL_85:
    v53 = v62;
    v54 = *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0);
    if (v54)
    {
      v63 = *(_DWORD *)(v54 + 16);
      if ((v63 & 0xFE) == 0x28)
      {
        do
        {
LABEL_172:
          if ((v63 & 0x100000) == 0)
            goto LABEL_76;
          v54 = *(_QWORD *)(*(_QWORD *)(v54 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v54)
            break;
          v63 = *(_DWORD *)(v54 + 16);
        }
        while ((v63 & 0xFE) == 0x28);
        v54 = sub_22F10CF48(v54);
LABEL_171:
        v63 = *(_DWORD *)(v54 + 16);
        goto LABEL_172;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v54 = sub_22F10CF48(v54);
      if (v54)
        goto LABEL_171;
    }
    goto LABEL_95;
  }
}

unint64_t sub_22ECAF9F4(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  llvm *v30;
  llvm *v31;
  uint64_t v32;
  llvm *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  llvm *v37;
  llvm *v38;
  uint64_t v39;
  unint64_t v40;
  llvm *v41;
  llvm *v42;
  uint64_t v43;
  llvm *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v52;
  unsigned int v55[24];
  llvm *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  llvm *v61[2];
  unsigned int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[64];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  _BYTE v73[27];
  int v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD v77[10];

  v77[8] = *MEMORY[0x24BDAC8D0];
  v75 = v77;
  v76 = 0x800000000;
  if (a6 >= 9)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v14 = *(_QWORD *)(a1 + 216);
  v15 = *(_WORD *)(v14 + 8) & 0x7F;
  v16 = -40;
  if (v15 > 0x46)
  {
    if (v15 == 83)
      goto LABEL_19;
    if (v15 == 71)
    {
      v16 = -56;
      goto LABEL_19;
    }
    if (v15 != 81)
    {
LABEL_14:
      if (v15 - 52 < 6)
      {
        v16 = -72;
      }
      else
      {
        v16 = -48;
        if (v15 - 33 < 5)
          v16 = -64;
      }
    }
  }
  else
  {
    if (v15 > 0x18)
      goto LABEL_13;
    if (v15 == 16)
    {
LABEL_6:
      v16 = -48;
      goto LABEL_19;
    }
    if (((1 << v15) & 0x1066) == 0)
    {
      if (v15 == 24)
        goto LABEL_6;
LABEL_13:
      if (v15 == 70)
      {
        v16 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  v17 = sub_22EFB9D84(v14 + v16) == 0;
  v63 = 0;
  v64 = v66;
  v65 = 0x800000000;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = (_QWORD *)a1;
  v71 = a4;
  v72 = 0;
  sub_22EFC6D6C((uint64_t)v73, a4);
  *(_OWORD *)&v73[8] = xmmword_22F495C80;
  v73[24] = 1;
  v73[25] = v17;
  v73[26] = 1;
  v74 = 0;
  sub_22EC56024((uint64_t)&v63);
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  if (a2)
  {
    v18 = *(_DWORD *)(a1 + 1904);
    if (v18)
    {
      v19 = v18 - 1;
      while ((v19 & 0x80000000) == 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v19--);
        if ((*(_DWORD *)(v20 + 8) & 7) != 1)
        {
          v21 = *(_QWORD *)(v20 + 360) != 0;
          goto LABEL_26;
        }
      }
    }
    v21 = 0;
LABEL_26:
    sub_22EC63520(a1, (uint64_t)&v63, a2, 0, 0);
    sub_22EA04CD4(a1, (uint64_t)&v63, a3, a2, 0, 0);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    if ((_DWORD)v65)
    {
      v22 = (uint64_t *)v64;
      while (1)
      {
        v23 = *v22++;
        v24 = v23 & 0xFFFFFFFFFFFFFFFCLL;
        v60 = v23 & 0xFFFFFFFFFFFFFFFCLL;
        if (v21)
          break;
LABEL_35:
        v27 = *(_DWORD *)(v24 + 24);
        v59 = *(_QWORD *)(v24 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
        *((_DWORD *)sub_22F342408((uint64_t)v61, &v59) + 2) = v27;
        if (v22 == (uint64_t *)((char *)v64 + 8 * v65))
          goto LABEL_41;
      }
      if (v58)
      {
        v25 = (v58 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        v26 = *((_QWORD *)v56 + 2 * v25);
        if (v26 == v24)
        {
LABEL_31:
          if (v25 != v58)
            goto LABEL_33;
        }
        else
        {
          v28 = 1;
          while (v26 != -4096)
          {
            v29 = v25 + v28++;
            v25 = v29 & (v58 - 1);
            v26 = *((_QWORD *)v56 + 2 * v25);
            if (v26 == v24)
              goto LABEL_31;
          }
        }
      }
      *((_BYTE *)sub_22F309434((uint64_t)&v56, (uint64_t *)&v60) + 8) = 0;
LABEL_33:
      v59 = sub_22F3B7D68(v24);
      if (v59)
        *((_BYTE *)sub_22F309434((uint64_t)&v56, (uint64_t *)&v59) + 8) = 1;
      goto LABEL_35;
    }
LABEL_41:
    if (v21)
    {
      v30 = v56;
      v31 = (llvm *)((char *)v56 + 16 * v58);
      if ((_DWORD)v57)
      {
        if (v58)
        {
          v32 = 16 * v58;
          v33 = v56;
          while ((*(_QWORD *)v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v33 = (llvm *)((char *)v33 + 16);
            v32 -= 16;
            if (!v32)
              goto LABEL_47;
          }
        }
        else
        {
          v33 = v56;
        }
      }
      else
      {
LABEL_47:
        v33 = (llvm *)((char *)v56 + 16 * v58);
      }
      v36 = v58;
      v37 = (llvm *)((char *)v56 + 16 * v58);
      if (v33 == v37)
      {
        a8 = 0;
      }
      else
      {
        a8 = 0;
        while (*((_BYTE *)v33 + 8))
        {
          v38 = (llvm *)((char *)v33 + 16);
          v33 = (llvm *)((char *)v56 + 16 * v58);
          if (v38 != v31)
          {
            v33 = v38;
            while ((*(_QWORD *)v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v33 = (llvm *)((char *)v33 + 16);
              if (v33 == v31)
              {
                v33 = (llvm *)((char *)v56 + 16 * v58);
                break;
              }
            }
          }
          if (v33 == v37)
            goto LABEL_67;
        }
        a8 = *(_QWORD *)v33;
      }
    }
    else
    {
      a8 = 0;
      v36 = v58;
      v30 = v56;
    }
LABEL_67:
    llvm::deallocate_buffer(v30, (void *)(16 * v36));
    if (a6)
      goto LABEL_68;
  }
  else
  {
    if (a8)
    {
      v34 = a8;
      do
      {
        v35 = *(_DWORD *)(v34 + 24);
        v56 = (llvm *)(*(_QWORD *)(v34 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v34 + 48) & 0xFFFFFFFFFFFFFFF0) + 8));
        *((_DWORD *)sub_22F342408((uint64_t)v61, (unint64_t *)&v56) + 2) = v35;
        v34 = sub_22F3B7D68(v34);
      }
      while (v34);
    }
    if (a6)
    {
LABEL_68:
      v39 = a5 + 16 * a6;
      do
      {
        v40 = *(_QWORD *)((*(_QWORD *)a5 & 0xFFFFFFFFFFFFFFF0) + 8);
        v41 = (llvm *)(*(_QWORD *)a5 & 7 | v40);
        if (v62)
        {
          v42 = v61[0];
          v43 = (v62 - 1) & ((v40 >> 9) ^ v41);
          v44 = (llvm *)*((_QWORD *)v61[0] + 2 * v43);
          if (v41 == v44)
          {
LABEL_71:
            if ((_DWORD)v43 != v62)
            {
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5 + 8), 0x105Au, 0, (uint64_t)&v56);
              sub_22E8901B8((uint64_t)&v56, (uint64_t *)a5);
              sub_22E903BEC((unsigned int *)&v56);
              sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v42 + 4 * v43 + 2), 0x6Du, 0, (uint64_t)v55);
              sub_22E903BEC(v55);
              v45 = 0;
              v41 = (llvm *)(*(_QWORD *)((*(_QWORD *)a5 & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)a5 & 7);
              goto LABEL_74;
            }
          }
          else
          {
            v48 = 1;
            while (v44)
            {
              v49 = v43 + v48++;
              v43 = v49 & (v62 - 1);
              v44 = (llvm *)*((_QWORD *)v61[0] + 2 * v43);
              if (v41 == v44)
                goto LABEL_71;
            }
          }
        }
        v45 = 1;
LABEL_74:
        v56 = v41;
        *((_DWORD *)sub_22F342408((uint64_t)v61, (unint64_t *)&v56) + 2) = *(_DWORD *)(a5 + 8);
        v46 = sub_22F3B7C24(*(_QWORD *)(a1 + 88), a3, *(_DWORD *)(a5 + 8), a4, *(_QWORD *)a5, a8);
        sub_22EFCCFA0(a3, v46);
        *(_DWORD *)(v46 + 28) = *(_DWORD *)(v46 + 28) & 0xFFFF9FFF | ((a7 & 3) << 13);
        v47 = v76;
        if (v76 >= (unint64_t)HIDWORD(v76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v47 = v76;
        }
        v75[v47] = v46;
        LODWORD(v76) = v76 + 1;
        if ((v45 & 1) != 0)
          a8 = v46;
        else
          sub_22EFC77E8(v46, 1);
        a5 += 16;
      }
      while (a5 != v39);
    }
  }
  v50 = v76;
  if ((_DWORD)v76)
  {
    if ((_DWORD)v76 == 1)
      v50 = *v75;
    else
      v50 = (unint64_t)sub_22EFDA148(*(_QWORD *)(a1 + 88), v75, v76) | 1;
  }
  llvm::deallocate_buffer(v61[0], (void *)(16 * v62));
  if ((_BYTE)v74)
  {
    if ((_DWORD)v63 == 5)
    {
      sub_22EC64D18(v70, (uint64_t)&v63);
    }
    else if (v68 && (*(_DWORD *)(v70[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v70, (uint64_t)&v63);
    }
  }
  if (v67)
  {
    v52 = sub_22EC6CBD0(v67);
    MEMORY[0x2348A0E9C](v52, 0x10E0C409F09D3C3);
  }
  if (v64 != v66)
    free(v64);
  if (v75 != v77)
    free(v75);
  return v50;
}

_QWORD *sub_22ECB0100(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8, uint64_t a9, _BYTE *a10, uint64_t a11, unint64_t a12)
{
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  int v24;
  int v25;
  char v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v29;
  llvm *v30;
  llvm *v31;
  llvm *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  llvm *v42;
  llvm *v43;
  unint64_t v44;
  uint64_t v45;
  llvm *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v61[24];
  unint64_t v62;
  unint64_t v63;
  llvm *v64[2];
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  llvm *v68;
  uint64_t v69;
  _DWORD v70[20];
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[64];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  _BYTE v81[27];
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v66 = a5;
  v67 = a4;
  v17 = *(_QWORD *)(a1 + 216);
  v18 = *(_WORD *)(v17 + 8) & 0x7F;
  v19 = -40;
  if (v18 > 0x46)
  {
    if (v18 == 83)
      goto LABEL_17;
    if (v18 == 71)
    {
      v19 = -56;
      goto LABEL_17;
    }
    if (v18 != 81)
    {
LABEL_12:
      if (v18 - 52 < 6)
      {
        v19 = -72;
      }
      else
      {
        v19 = -48;
        if (v18 - 33 < 5)
          v19 = -64;
      }
    }
  }
  else
  {
    if (v18 > 0x18)
      goto LABEL_11;
    if (v18 == 16)
    {
LABEL_4:
      v19 = -48;
      goto LABEL_17;
    }
    if (((1 << v18) & 0x1066) == 0)
    {
      if (v18 == 24)
        goto LABEL_4;
LABEL_11:
      if (v18 == 70)
      {
        v19 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v20 = sub_22EFB9D84(v17 + v19) == 0;
  v71 = 0;
  v72 = v74;
  v73 = 0x800000000;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = (_QWORD *)a1;
  v79 = a4;
  v80 = 0;
  sub_22EFC6D6C((uint64_t)v81, a4);
  *(_OWORD *)&v81[8] = xmmword_22F495C90;
  v81[24] = 1;
  v81[25] = v20;
  v81[26] = 1;
  v82 = 0;
  sub_22EC56024((uint64_t)&v71);
  v64[0] = 0;
  v64[1] = 0;
  v65 = 0;
  if (a2)
  {
    v25 = *(_DWORD *)(a1 + 1904);
    if (v25)
    {
      v28 = v25 - 1;
      while ((v28 & 0x80000000) == 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v28--);
        if ((*(_DWORD *)(v29 + 8) & 7) != 1)
        {
          v26 = a8;
          v27 = *(_QWORD *)(v29 + 360) != 0;
          goto LABEL_28;
        }
      }
    }
    v26 = a8;
    v27 = 0;
LABEL_28:
    sub_22EC63520(a1, (uint64_t)&v71, a2, 0, 0);
    sub_22EA04CD4(a1, (uint64_t)&v71, a3, a2, 0, 0);
    v68 = 0;
    v69 = 0;
    v70[0] = 0;
    if (!(_DWORD)v73)
    {
LABEL_29:
      if (v27)
      {
        v30 = v68;
        v31 = (llvm *)((char *)v68 + 16 * v70[0]);
        if ((_DWORD)v69)
        {
          a8 = v26;
          if (v70[0])
          {
            v54 = 16 * v70[0];
            v32 = v68;
            while ((*(_QWORD *)v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v32 = (llvm *)((char *)v32 + 16);
              v54 -= 16;
              if (!v54)
              {
                v32 = (llvm *)((char *)v68 + 16 * v70[0]);
                break;
              }
            }
          }
          else
          {
            v32 = v68;
          }
        }
        else
        {
          v32 = (llvm *)((char *)v68 + 16 * v70[0]);
          a8 = v26;
        }
        v41 = v70[0];
        v42 = (llvm *)((char *)v68 + 16 * v70[0]);
        if (v32 == v42)
        {
          v21 = 0;
        }
        else
        {
          v21 = 0;
          while (*((_BYTE *)v32 + 8))
          {
            v43 = (llvm *)((char *)v32 + 16);
            v32 = (llvm *)((char *)v68 + 16 * v70[0]);
            if (v43 != v31)
            {
              v32 = v43;
              while ((*(_QWORD *)v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v32 = (llvm *)((char *)v32 + 16);
                if (v32 == v31)
                {
                  v32 = (llvm *)((char *)v68 + 16 * v70[0]);
                  break;
                }
              }
            }
            if (v32 == v42)
              goto LABEL_60;
          }
          v21 = *(_QWORD *)v32;
        }
      }
      else
      {
        v21 = 0;
        v41 = v70[0];
        v30 = v68;
        a8 = v26;
      }
LABEL_60:
      llvm::deallocate_buffer(v30, (void *)(16 * v41));
      goto LABEL_61;
    }
    v33 = (uint64_t *)v72;
    while (1)
    {
      v34 = *v33++;
      v35 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v63 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      if (v27)
        break;
LABEL_40:
      v38 = *(_DWORD *)(v35 + 24);
      v62 = *(_QWORD *)(v35 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      *((_DWORD *)sub_22F342408((uint64_t)v64, &v62) + 2) = v38;
      if (v33 == (uint64_t *)((char *)v72 + 8 * v73))
        goto LABEL_29;
    }
    if (v70[0])
    {
      v36 = (v70[0] - 1) & ((v35 >> 4) ^ (v35 >> 9));
      v37 = *((_QWORD *)v68 + 2 * v36);
      if (v37 == v35)
      {
LABEL_36:
        if (v36 != v70[0])
          goto LABEL_38;
      }
      else
      {
        v39 = 1;
        while (v37 != -4096)
        {
          v40 = v36 + v39++;
          v36 = v40 & (v70[0] - 1);
          v37 = *((_QWORD *)v68 + 2 * v36);
          if (v37 == v35)
            goto LABEL_36;
        }
      }
    }
    *((_BYTE *)sub_22F309434((uint64_t)&v68, (uint64_t *)&v63) + 8) = 0;
LABEL_38:
    v62 = sub_22F3B8034(v35);
    if (v62)
      *((_BYTE *)sub_22F309434((uint64_t)&v68, (uint64_t *)&v62) + 8) = 1;
    goto LABEL_40;
  }
  v21 = a12;
  if (a12)
  {
    v22 = a8;
    v23 = a12;
    do
    {
      v24 = *(_DWORD *)(v23 + 24);
      v68 = (llvm *)(*(_QWORD *)(v23 + 48) & 7 | *(_QWORD *)((*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0) + 8));
      *((_DWORD *)sub_22F342408((uint64_t)v64, (unint64_t *)&v68) + 2) = v24;
      v23 = sub_22F3B8034(v23);
    }
    while (v23);
    a8 = v22;
  }
LABEL_61:
  if (!v65)
    goto LABEL_64;
  v44 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF0) + 8);
  v45 = v44 | a5 & 7;
  v46 = v64[0];
  v47 = (v65 - 1) & ((v44 >> 9) ^ v45);
  v48 = *((_QWORD *)v64[0] + 2 * v47);
  if (v45 != v48)
  {
    v55 = 1;
    while (v48)
    {
      v56 = v47 + v55++;
      v47 = v56 & (v65 - 1);
      v48 = *((_QWORD *)v64[0] + 2 * v47);
      if (v45 == v48)
        goto LABEL_63;
    }
    goto LABEL_64;
  }
LABEL_63:
  if ((_DWORD)v47 == v65)
  {
LABEL_64:
    v49 = 1;
    goto LABEL_66;
  }
  sub_22E8FCA40((_QWORD *)a1, a6, 0x1058u, 0, (uint64_t)&v68);
  v50 = sub_22E8901B8((uint64_t)&v68, &v66);
  sub_22E894538(v50, &v67);
  sub_22E903BEC((unsigned int *)&v68);
  sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v46 + 4 * v47 + 2), 0x6Du, 0, (uint64_t)v61);
  sub_22E903BEC(v61);
  v49 = 0;
LABEL_66:
  v68 = (llvm *)v70;
  v69 = 0x400000000;
  sub_22F2633B0((uint64_t)&v68, a10, &a10[8 * a11]);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) >= 0x32u)
    sub_22EC943FC((_QWORD *)a1, *(_QWORD *)(a1 + 12288), (uint64_t)&v68);
  v51 = sub_22F3B7DB4(*(_QWORD *)(a1 + 88), a3, a6, v67, v66, a7, v68, v69, v21);
  if (a2)
    sub_22EA0483C(a1, (unint64_t)v51, a2, 1);
  else
    sub_22EFCCFA0(a3, (unint64_t)v51);
  *((_DWORD *)v51 + 7) = *((_DWORD *)v51 + 7) & 0xFFFF9FFF | ((a8 & 3) << 13);
  if ((v49 & 1) == 0)
    sub_22EFC77E8((uint64_t)v51, 1);
  v52 = *(_QWORD *)(a9 + 16);
  *(_QWORD *)(v52 + 16) = (unint64_t)(v51 + 8) & 0xFFFFFFFFFFFFFFFBLL;
  sub_22EFC80C4(v52, (uint64_t)(v51 + 8));
  sub_22EFCCFA0((uint64_t)(v51 + 8), v52);
  *(_QWORD *)(v51[7] + 8 * *(unsigned int *)v51[7] + 16) = a9;
  if (v68 != (llvm *)v70)
    free(v68);
  llvm::deallocate_buffer(v64[0], (void *)(16 * v65));
  if ((_BYTE)v82)
  {
    if ((_DWORD)v71 == 5)
    {
      sub_22EC64D18(v78, (uint64_t)&v71);
    }
    else if (v76 && (*(_DWORD *)(v78[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v78, (uint64_t)&v71);
    }
  }
  if (v75)
  {
    v57 = sub_22EC6CBD0(v75);
    MEMORY[0x2348A0E9C](v57, 0x10E0C409F09D3C3);
  }
  if (v72 != v74)
    free(v72);
  return v51;
}

uint64_t sub_22ECB07F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
  if (v4
    && (v5 = *(_QWORD *)(v4 + 1304)) != 0
    && (v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2),
        v6 != (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 32))(*(_QWORD *)(v5 + 16))))
  {
    return sub_22EFBCBC4(a2, *(_QWORD *)(a1 + 88));
  }
  else
  {
    return 1;
  }
}

uint64_t sub_22ECB0878(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  __int16 v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v14[24];

  v4 = *(_QWORD *)(a1 + 224);
  if (!v4)
    v4 = *(_QWORD *)(a1 + 216);
  v5 = *(_WORD *)(v4 + 8);
  v6 = v5 & 0x7F;
  if (v6 == 16
    || v6 == 83
    || sub_22EFCBD94(v4, 1)
    || sub_22EFCBD94(v4, 2)
    || ((v5 & 0x7E) != 0x24 ? (v7 = v6 == 28) : (v7 = 1), !v7 ? (v8 = (v6 - 35) >= 3) : (v8 = 0), !v8))
  {
    v9 = 1;
    v10 = sub_22ECF83A4(a1 + 12296, a2, 1);
    v11 = *(_QWORD *)(a1 + 12296) + 56 * *(unsigned int *)(a1 + 12304);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    sub_22E5D08E0(v11, v10);
    v12 = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v11 + 36) = *(_OWORD *)(v10 + 36);
    *(_OWORD *)(v11 + 24) = v12;
    ++*(_DWORD *)(a1 + 12304);
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 48), 0x10E0u, 0, (uint64_t)v14);
    sub_22E903BEC(v14);
    return 0;
  }
  return v9;
}

void sub_22ECB0994(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a2 + 16);
  v5 = *(_QWORD *)a2 + 16 * v4;
  if (*(_DWORD *)(a2 + 8))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(_QWORD *)a2;
      while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 16;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(_QWORD *)a2;
    }
  }
  else
  {
LABEL_6:
    v7 = *(_QWORD *)a2 + 16 * v4;
  }
  v8 = *(_QWORD *)a2 + 16 * v4;
LABEL_9:
  while (v7 != v8)
  {
    sub_22F340100(a1, *(_QWORD *)v7, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 8), a2);
    v9 = v7 + 16;
    v7 = v5;
    if (v9 != v5)
    {
      v7 = v9;
      while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 16;
        if (v7 == v5)
        {
          v7 = v5;
          goto LABEL_9;
        }
      }
    }
  }
}

unint64_t sub_22ECB0A64(_QWORD *a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t *v15;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  int v24;
  uint64_t (**v25)();
  int v26;
  char v27;
  uint64_t v28;
  _BYTE v29[19];
  unsigned int v30[4];
  void *v31;
  _BYTE v32[32];
  _BYTE v33[32];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[64];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v35 = v37;
  v36 = 0x800000000;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = a1;
  v42 = *a4;
  v8 = *((_QWORD *)a4 + 2);
  v44 = 0;
  v45 = 0;
  v43 = v8;
  v46 = 0;
  v47 = 257;
  v48 = 0;
  sub_22EC56024((uint64_t)&v34);
  sub_22EC64BE8((uint64_t)a1, (uint64_t)&v34, (uint64_t)a2, a3, 1, 0);
  v9 = 0;
  if ((_DWORD)v34 == 5)
    goto LABEL_21;
  BYTE1(v47) = 0;
  if ((_DWORD)v34 != 2)
  {
    v27 = 1;
    v26 = 16843009;
    *(_QWORD *)v29 = 0;
    v28 = 0;
    *(_DWORD *)&v29[7] = 0;
    v25 = &off_24FAB8E38;
    *(_QWORD *)&v29[11] = a1;
    sub_22EC6AB20((uint64_t)a1, (uint64_t *)a4, 0, a2, 0, (uint64_t)&v25, 1, 0, (uint64_t)v30, 0, 0, 1u);
    if (*(_QWORD *)v30)
    {
      v23 = a1[11] + 2128;
      v24 = 5050;
      v17 = *(_QWORD *)a4;
      v18 = (void **)sub_22E3B8AAC(v23);
      v22 = v18;
      v19 = *(unsigned __int8 *)v18;
      *((_BYTE *)v18 + v19 + 1) = 10;
      *(_BYTE *)v18 = v19 + 1;
      v18[v19 + 2] = (void *)v17;
      sub_22EC6BEF8((uint64_t)a1, (uint64_t)v30, (uint64_t)&v22, 1);
      if (v22 && v23)
        sub_22E3BB10C(v23, (unint64_t)v22);
      v20 = sub_22F2E6D78((uint64_t)v30);
      sub_22EC7FD5C((uint64_t)a1, 0, v20, 0);
      v22 = (void **)v33;
      sub_22E8D19C8(&v22);
      if (v31 != v32)
        free(v31);
      goto LABEL_20;
    }
    v22 = (void **)v33;
    sub_22E8D19C8(&v22);
    if (v31 != v32)
      free(v31);
    sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), 0x13B9u, 0, (uint64_t)v30);
    v22 = *(void ***)a4;
    v15 = (uint64_t *)&v22;
LABEL_19:
    sub_22E894538((uint64_t)v30, v15);
    sub_22E903BEC(v30);
LABEL_20:
    v9 = 0;
    goto LABEL_21;
  }
  v9 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = *(_DWORD *)(v9 + 28);
  v11 = v10 & 0x7F;
  if (v11 <= 0x2F && ((1 << (v10 & 0x7F)) & 0xC00000060000) != 0)
  {
    v9 = sub_22EFBAEA4(*(_QWORD *)v35 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = *(_DWORD *)(v9 + 28);
    v11 = v10 & 0x7F;
  }
  if (v11 - 60 >= 7)
  {
    v13 = (v10 & 0x7E) - 52;
    if (v11 != 29 && v13 >= 6)
    {
      sub_22E8FCA40(a1, *((_DWORD *)a4 + 2), 0x1099u, 0, (uint64_t)v30);
      v25 = *(uint64_t (***)())a4;
      v15 = (uint64_t *)&v25;
      goto LABEL_19;
    }
  }
LABEL_21:
  if (BYTE1(v47))
  {
    if ((_DWORD)v34 == 5)
    {
      sub_22EC64D18(v41, (uint64_t)&v34);
    }
    else if (v39 && (*(_DWORD *)(v41[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v41, (uint64_t)&v34);
    }
  }
  if (v38)
  {
    v21 = sub_22EC6CBD0(v38);
    MEMORY[0x2348A0E9C](v21, 0x10E0C409F09D3C3);
  }
  if (v35 != v37)
    free(v35);
  return v9;
}

uint64_t sub_22ECB0DE4(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;

  v9 = sub_22ECB1B04(a1);
  v16 = 0;
  v10 = sub_22ECB195C(*(_QWORD *)(v9 + 704), *(_DWORD *)(v9 + 720), a2, &v16);
  v11 = v16;
  if (v10)
  {
    v12 = *(unsigned int *)(v16 + 16) + 1;
    goto LABEL_8;
  }
  v13 = *(_DWORD *)(v9 + 712);
  v14 = *(_DWORD *)(v9 + 720);
  if (4 * v13 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_10;
  }
  if (v14 + ~v13 - *(_DWORD *)(v9 + 716) <= v14 >> 3)
  {
LABEL_10:
    sub_22ECF6EB0(v9 + 704, v14);
    v16 = 0;
    sub_22ECB195C(*(_QWORD *)(v9 + 704), *(_DWORD *)(v9 + 720), a2, &v16);
    v11 = v16;
  }
  ++*(_DWORD *)(v9 + 712);
  if (*(_QWORD *)v11 != -4096)
    --*(_DWORD *)(v9 + 716);
  *(_QWORD *)v11 = a2;
  bzero((void *)(v11 + 24), 0x488uLL);
  *(_QWORD *)(v11 + 8) = v11 + 24;
  *(_QWORD *)(v11 + 16) = 0x800000000;
  *(_DWORD *)(v11 + 1176) = 85;
  v12 = 1;
LABEL_8:
  sub_22F341C20(v11 + 8, v12);
  result = sub_22F29D690(*(_QWORD *)(v11 + 8) + 144 * *(unsigned int *)(v11 + 16) - 144, a3, &a3[16 * a4]);
  *(_DWORD *)(v11 + 1176) = a5;
  return result;
}

uint64_t sub_22ECB0F38(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  result = sub_22ECB2028(a1);
  if (result)
  {
    v4 = result + 1256;
    if (a2)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    else
      v5 = 0;
    v6 = v5;
    return sub_22F25884C((uint64_t)v7, v4, &v6);
  }
  return result;
}

_DWORD *sub_22ECB0F9C(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void **v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void **v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  unsigned int *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  _DWORD *v56;
  uint64_t v57;
  const char *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _BYTE v68[96];
  uint64_t v69[2];
  uint64_t v70;
  _BOOL4 v71;
  unsigned int v72[24];
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[32];
  _QWORD *v78;
  uint64_t v79;
  _QWORD v80[14];

  v80[12] = *MEMORY[0x24BDAC8D0];
  if (!sub_22ECA0798((_QWORD *)a1, a2, *(_QWORD *)(a1 + 12288)))
    return 0;
  if (a6)
  {
    v14 = (_QWORD *)(a5 + 8);
    v15 = 24 * a6;
    while (!*v14)
    {
      v14 += 3;
      v15 -= 24;
      if (!v15)
        goto LABEL_13;
    }
    v16 = *(_QWORD *)(a1 + 12288);
    if (*(_QWORD *)(v16 + 21560) <= 0xFuLL)
    {
      v17 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "omp_alloctrait_t", 0x10uLL);
      v18 = sub_22EA003D8((_QWORD *)a1, v17, a2, *(uint64_t **)(a1 + 12888), 0, 0, 0, 0, 0, 0, 1u, 0);
      if (v18 <= 0xF)
      {
        sub_22E8FCA40((_QWORD *)a1, a2, 0x1089u, 0, (uint64_t)&v78);
        sub_22F2F30F4((uint64_t)&v78, (uint64_t)"omp_alloctrait_t");
        sub_22E903BEC((unsigned int *)&v78);
        return 0;
      }
      *(_QWORD *)(v16 + 21560) = v18;
    }
  }
LABEL_13:
  v19 = 0;
  v73 = v77;
  v74 = v77;
  v75 = 4;
  v76 = 0;
  do
  {
    v20 = strlen(off_24FAB8EA8[v19]);
    v21 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), off_24FAB8EA8[v19], v20);
    v22 = sub_22EC65CE0((_QWORD *)a1, *(_QWORD *)(a1 + 3344), v21, a2, 15, 0);
    if (v22)
      v23 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v22 + 32))(v22);
    else
      v23 = 0;
    sub_22E3BA850((uint64_t)&v73, v23);
    ++v19;
  }
  while ((_DWORD)(v19 * 8) != 72);
  v78 = v80;
  v79 = 0x400000000;
  if (!a6)
  {
    v24 = 0;
    v25 = v80;
    goto LABEL_71;
  }
  v66 = a3;
  v67 = a4;
  v26 = 24 * a6;
  do
  {
    v27 = *(_QWORD *)a5;
    if ((*(_BYTE *)(*(_QWORD *)a5 + 1) & 0x80) == 0)
    {
      v28 = sub_22EFFA6B0(*(unsigned __int8 **)a5);
      v29 = v28;
      v30 = *v28;
      if (v30 != 161)
        goto LABEL_51;
      v31 = *((_QWORD *)v28 + 2);
      v32 = v31 ? (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31) : 0;
      v33 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v73, v32);
      v34 = v74;
      v35 = v74 == v73 ? (uint64_t *)((char *)&v75 + 4) : &v75;
      v36 = *(unsigned int *)v35;
      v37 = *((_QWORD *)v29 + 1);
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 12288) + 21536);
      if (*(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
        && !sub_22F36EDA0(*(_QWORD *)(a1 + 88), v37, v38, 1))
      {
LABEL_51:
        sub_22EFF605C(*(_QWORD *)a5);
        sub_22E8FCA40((_QWORD *)a1, v47, 0x1106u, 0, (uint64_t)v72);
        v48 = sub_22F2F30F4((uint64_t)v72, (uint64_t)"omp_allocator_handle_t");
        v71 = v30 == 161;
        v49 = sub_22E8900C4(v48, (int *)&v71);
        v69[0] = *((_QWORD *)v29 + 1);
        v50 = sub_22E8901B8(v49, v69);
LABEL_59:
        v60 = v50;
        sub_22F0D4E74(*(_QWORD *)a5);
        v70 = v61;
        sub_22E8906A0(v60, &v70);
        goto LABEL_45;
      }
      v39 = (void **)&v34[8 * v36];
      if (v33 == v39)
      {
        if (sub_22F10AFE4(*((_QWORD *)v29 + 1), *(_QWORD *)(a1 + 88)) || (*(_DWORD *)v29 & 0x300) != 0x100)
          goto LABEL_51;
        v27 = (unint64_t)v29;
        if (!*(_QWORD *)(a5 + 8))
        {
          sub_22EFF605C(*(_QWORD *)a5);
          sub_22E8FCA40((_QWORD *)a1, v46, 0x10BAu, 0, (uint64_t)v68);
          v45 = (unsigned int *)v68;
          goto LABEL_46;
        }
      }
      else
      {
        v40 = *(_QWORD *)(a5 + 8);
        if (v40)
        {
          sub_22EFF605C(v40);
          sub_22E8FCA40((_QWORD *)a1, v51, 0x10CEu, 0, (uint64_t)v72);
          sub_22F0D4E74(*(_QWORD *)(a5 + 8));
          v69[0] = v52;
          sub_22E8906A0((uint64_t)v72, v69);
          sub_22E903BEC(v72);
          sub_22EFF605C(*(_QWORD *)a5);
          sub_22E8FCA40((_QWORD *)a1, v53, 0x170Eu, 0, (uint64_t)v72);
          v54 = *(_QWORD *)(*((_QWORD *)v29 + 2) + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(*((_QWORD *)v29 + 2) + 40) & 7) != 0 || v54 == 0)
          {
            v57 = 0;
            v58 = "";
          }
          else
          {
            v56 = *(_DWORD **)(v54 + 16);
            v59 = *v56;
            v58 = (const char *)(v56 + 4);
            v57 = v59;
          }
          v69[0] = (uint64_t)v58;
          v69[1] = v57;
          v50 = sub_22F2F2210((uint64_t)v72, (uint64_t)v69);
          goto LABEL_59;
        }
        v27 = sub_22EB1A358(a1, v29, 0) & 0xFFFFFFFFFFFFFFFELL;
      }
      sub_22ECB15C4(*(_QWORD *)(a1 + 12288), *((_QWORD *)v29 + 2), v33 == v39);
    }
    v41 = *(unsigned __int8 **)(a5 + 8);
    if (v41 && (v41[1] & 0x80) == 0)
    {
      v41 = sub_22EFFA6B0(*(unsigned __int8 **)(a5 + 8));
      v42 = *(_QWORD *)(*((_QWORD *)v41 + 1) & 0xFFFFFFFFFFFFFFF0);
      if (v42)
        v43 = (*(_DWORD *)(v42 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v43 = 0;
      if (v43)
      {
        v62 = *(_DWORD *)(v42 + 16);
      }
      else
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
          || (v42 = sub_22F10CF48(v42)) == 0)
        {
LABEL_44:
          sub_22EFF605C(*(_QWORD *)(a5 + 8));
          sub_22E8FCA40((_QWORD *)a1, v44, 0x1076u, 0, (uint64_t)v72);
          v69[0] = *((_QWORD *)v41 + 1);
          sub_22E8901B8((uint64_t)v72, v69);
LABEL_45:
          v45 = v72;
LABEL_46:
          sub_22E903BEC(v45);
          goto LABEL_47;
        }
        v62 = *(unsigned __int8 *)(v42 + 16);
      }
      if (v62 != 2)
        goto LABEL_44;
      v63 = *(_QWORD *)(v42 + 32);
      if (v63 < 0x10)
        goto LABEL_44;
      v64 = *(_QWORD *)(*(_QWORD *)(a1 + 12288) + 21560);
      if (*(_QWORD *)(*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
        && !sub_22F36EDA0(*(_QWORD *)(a1 + 88), v63, v64, 1))
      {
        goto LABEL_44;
      }
      if (*v41 == 161)
        sub_22ECB15C4(*(_QWORD *)(a1 + 12288), *((_QWORD *)v41 + 2), 2);
    }
    v65 = sub_22F2BAB24((uint64_t)&v78);
    *(_QWORD *)v65 = v27;
    *(_QWORD *)(v65 + 8) = v41;
    *(_DWORD *)(v65 + 16) = *(_DWORD *)(a5 + 16);
    *(_DWORD *)(v65 + 20) = *(_DWORD *)(a5 + 20);
LABEL_47:
    a5 += 24;
    v26 -= 24;
  }
  while (v26);
  v25 = v78;
  v24 = v79;
  a3 = v66;
  a4 = v67;
LABEL_71:
  v12 = sub_22F3EC72C(*(_QWORD *)(a1 + 88), a2, a3, a4, (uint64_t)v25, v24);
  if (v78 != v80)
    free(v78);
  if (v74 != v73)
    free(v74);
  return v12;
}

uint64_t sub_22ECB15C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v5 = sub_22ECB1B04(a1);
  if (a2)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v10 = 0;
  result = sub_22ECB1B60(*(_QWORD *)(v5 + 1280), *(_DWORD *)(v5 + 1296), a2, &v10);
  if ((result & 1) == 0)
  {
    result = v5 + 1280;
    v7 = *(_DWORD *)(v5 + 1288);
    v8 = *(_DWORD *)(v5 + 1296);
    if (4 * v7 + 4 >= 3 * v8)
    {
      v8 *= 2;
    }
    else if (v8 + ~v7 - *(_DWORD *)(v5 + 1292) > v8 >> 3)
    {
LABEL_6:
      v9 = v10;
      ++*(_DWORD *)(v5 + 1288);
      if (*(_QWORD *)v9 != -4096)
        --*(_DWORD *)(v5 + 1292);
      *(_QWORD *)v9 = a2;
      *(_DWORD *)(v9 + 8) = a3;
      return result;
    }
    sub_22ECF7140(result, v8);
    v10 = 0;
    result = sub_22ECB1B60(*(_QWORD *)(v5 + 1280), *(_DWORD *)(v5 + 1296), a2, &v10);
    goto LABEL_6;
  }
  return result;
}

char **sub_22ECB16BC(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 1312 * v3;
    v5 = v2 - 1312;
    do
    {
      sub_22ECB1720((uint64_t)&v5[v4]);
      v4 -= 1312;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22ECB1720(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  llvm *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;

  llvm::deallocate_buffer(*(llvm **)(a1 + 1280), (void *)(16 * *(unsigned int *)(a1 + 1296)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1256), (void *)(8 * *(unsigned int *)(a1 + 1272)));
  v2 = *(void **)(a1 + 1208);
  if (v2 != (void *)(a1 + 1224))
    free(v2);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1184), (void *)(8 * *(unsigned int *)(a1 + 1200)));
  v3 = *(void **)(a1 + 1136);
  if (v3 != (void *)(a1 + 1152))
    free(v3);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1112), (void *)(8 * *(unsigned int *)(a1 + 1128)));
  if (*(_BYTE *)(a1 + 1056))
    *(_BYTE *)(a1 + 1056) = 0;
  sub_22F340300(a1 + 1016);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1016), (void *)(88 * *(unsigned int *)(a1 + 1032)));
  sub_22F24BE18(a1 + 728);
  v4 = *(_DWORD *)(a1 + 720);
  v5 = *(llvm **)(a1 + 704);
  if (v4)
  {
    v6 = 1184 * v4;
    v7 = (char **)((char *)v5 + 8);
    do
    {
      if (((unint64_t)*(v7 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v7 = sub_22F340364(v7);
      v7 += 148;
      v6 -= 1184;
    }
    while (v6);
    v5 = *(llvm **)(a1 + 704);
    v8 = 1184 * *(unsigned int *)(a1 + 720);
  }
  else
  {
    v8 = 0;
  }
  llvm::deallocate_buffer(v5, (void *)v8);
  if ((*(_BYTE *)(a1 + 568) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 576), (void *)(16 * *(unsigned int *)(a1 + 584)));
  if ((*(_BYTE *)(a1 + 432) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 440), (void *)(16 * *(unsigned int *)(a1 + 448)));
  if ((*(_BYTE *)(a1 + 328) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 336), (void *)(24 * *(unsigned int *)(a1 + 344)));
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(40 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22ECB18C4(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(40 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22ECB1904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_22ECB195C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 1184 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_22ECB195C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 1184 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 1184 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_22ECB19F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if (sub_22ECB1A54(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 40 * v5;
}

uint64_t sub_22ECB1A54(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 40 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 40 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_22ECB1B04(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 344);
  if (v1
    && (v2 = *(_QWORD *)(a1 + 336) + 5272 * v1, *(_QWORD *)(v2 - 8) == *(_QWORD *)(a1 + 328))
    && (v3 = *(unsigned int *)(v2 - 5264), v4 = *(unsigned int *)(a1 + 21496), v3 > v4))
  {
    return *(_QWORD *)(v2 - 5272) + 1312 * (~v4 + v3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22ECB1B60(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

BOOL sub_22ECB1BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 result;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v7 = *(_DWORD *)(a1 + 344);
  if (v7)
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 5272 * v7 - 5272);
  else
    v8 = 0;
  v9 = a4 - 320;
  do
  {
    v10 = v9;
    v11 = v9 + 320;
    if (v11 == v8)
      return 0;
    v12 = *(_DWORD *)(v11 - 352);
    if (sub_22F421A78(v12))
      break;
    if ((v12 - 36) <= 0x3F && ((1 << (v12 - 36)) & 0xC027335CC0000C03) != 0)
      break;
    v9 = v10 - 1312;
  }
  while ((v12 - 56) > 0x29 || ((1 << (v12 - 56)) & 0x20000000391) == 0);
  if (!*(_QWORD *)v10)
  {
    v21 = v6[2];
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    if ((v21 & 4) != 0)
      v22 = *(_QWORD *)v22;
    if (!v22)
      return 0;
    v23 = *(_QWORD *)(v10 + 8);
    while (1)
    {
      result = v23 == v22;
      if (v23 == v22)
        return result;
      v25 = *(_WORD *)(v22 + 8) & 0x7F;
      v26 = -40;
      if (v25 > 0x46)
      {
        if (v25 != 83)
        {
          if (v25 == 71)
          {
            v26 = -56;
          }
          else if (v25 != 81)
          {
            goto LABEL_43;
          }
        }
      }
      else
      {
        if (v25 > 0x18)
          goto LABEL_42;
        if (v25 == 16)
          goto LABEL_35;
        if (((1 << v25) & 0x1066) != 0)
          goto LABEL_49;
        if (v25 == 24)
        {
LABEL_35:
          v26 = -48;
        }
        else
        {
LABEL_42:
          if (v25 != 70)
          {
LABEL_43:
            v27 = v25 - 52;
            if (v25 - 33 >= 5)
              v28 = -48;
            else
              v28 = -64;
            if (v27 >= 6)
              v26 = v28;
            else
              v26 = -72;
            goto LABEL_49;
          }
          v26 = -64;
        }
      }
LABEL_49:
      v29 = *(_QWORD *)(v22 + v26 + 16);
      v22 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 4) != 0)
        v22 = *(_QWORD *)v22;
      if (!v22)
        return result;
    }
  }
  v15 = **(_QWORD ***)v10;
  v16 = sub_22ECB1B04(a1);
  if (v16)
  {
    v17 = *(_QWORD **)(v16 + 992);
    if (v17 && v17 != v15)
    {
      do
      {
        v18 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v17 + 9), v6);
        v19 = v17[10];
        if (v19 == v17[9])
          v20 = 92;
        else
          v20 = 88;
        if (v18 != (void **)(v19 + 8 * *(unsigned int *)((char *)v17 + v20)))
          break;
        v17 = (_QWORD *)*v17;
        if (!v17)
          break;
      }
      while (v17 != v15);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 != v15;
}

BOOL sub_22ECB1E3C(uint64_t a1, uint64_t a2, int a3, BOOL *a4)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  LOBYTE(v6) = a2;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v10 || (v11 = *(_DWORD *)(v10 + 16), (v11 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v10 = sub_22F10CF48(v10);
    if (!v10)
      goto LABEL_4;
    v11 = *(_DWORD *)(v10 + 16);
  }
  if ((v11 & 0x100000) != 0)
  {
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v10)
      {
        v22 = *(_DWORD *)(v10 + 16);
        if ((v22 & 0xFE) == 0x28)
          continue;
      }
      v10 = sub_22F10CF48(v10);
      v22 = *(_DWORD *)(v10 + 16);
    }
    while ((v22 & 0x100000) != 0);
  }
  v6 = *(_QWORD *)(v10 + 32);
  v9 = v6 & 0xFFFFFFFFFFFFFFF0;
LABEL_4:
  v12 = v6 & 7 | *(_QWORD *)(v9 + 8);
  v13 = sub_22F10AFE4(v12, v8);
  v14 = sub_22EF5BA38(v8, v12);
  if (!a3 || (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    goto LABEL_6;
  v17 = sub_22F10C2A4(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
  v15 = v17;
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 28);
    if ((v18 & 0x7Fu) - 35 > 2)
    {
LABEL_6:
      v15 = 0;
      goto LABEL_7;
    }
    if ((v18 & 0x7E) == 0x24)
    {
      v19 = *(_QWORD *)(v17 + 152);
      v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
      if ((v19 & 4) != 0 && v20)
      {
        do
        {
          v21 = *(_QWORD *)(*v20 + 152);
          v20 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v21 & 4) != 0 && v20);
      }
      if (v20)
        v15 = v20[6];
    }
  }
LABEL_7:
  if (a4)
    *a4 = v15 != 0;
  if (!v13)
    return 0;
  result = 1;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0 && v15)
  {
    if (*(_QWORD *)(v15 + 128)
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104)), *(_QWORD *)(v15 + 128)))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
      return (**(_QWORD **)(v15 + 128) & 0x80000) == 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_22ECB200C(uint64_t a1, int a2)
{
  return a2 == 29 || a2 == 73;
}

uint64_t sub_22ECB2020()
{
  return 1;
}

uint64_t sub_22ECB2028(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(a1 + 344);
  if (v1
    && (v2 = *(_QWORD *)(a1 + 336) + 5272 * v1, *(_QWORD *)(v2 - 8) == *(_QWORD *)(a1 + 328))
    && (v3 = *(unsigned int *)(v2 - 5264), v4 = *(unsigned int *)(a1 + 21496), v3 > v4)
    && (v5 = v3 - v4, v5 >= 2))
  {
    return *(_QWORD *)(v2 - 5272) + 1312 * v5 - 2624;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22ECB208C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v34;
  int v35;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  _QWORD v42[5];
  __int128 v43;

  while (1)
  {
    result = sub_22EC81010(a4);
    a4 = result;
    v9 = (*(_DWORD *)(result + 28) & 0x7Fu) - 60 >= 7 ? 0 : result;
    v10 = *(_DWORD *)(a2 + 344);
    v11 = v10 ? *(_QWORD *)(*(_QWORD *)(a2 + 336) + 5272 * v10 - 5272) : 0;
    v12 = a3[1];
    if (v12 == v11)
      break;
    if (v9)
    {
      if (sub_22ECB1BF4(a2, v9, *a3, v12))
      {
        result = sub_22E3CEC2C(v9);
        if ((_DWORD)result)
        {
          if ((*(_BYTE *)(v9 + 96) & 3 | 4) == 4)
          {
            *(_QWORD *)a1 = 0x3F00000059;
            goto LABEL_37;
          }
        }
      }
    }
    v13 = a3[1];
    v14 = *(_DWORD *)(v13 - 352);
    result = sub_22ECB1A54(v13 - 1312, a4, v42);
    v15 = a3[1];
    if ((_DWORD)result)
    {
      v42[0] = 0;
      result = sub_22ECB1A54(v15 - 1312, a4, v42);
      if ((_DWORD)result)
      {
        v22 = *(_QWORD *)(v42[0] + 8);
        v23 = *(_QWORD *)(v42[0] + 24);
        v24 = *(_BYTE *)(v42[0] + 32);
        v25 = *(_QWORD *)(v42[0] + 16) & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        v25 = 0;
        v23 = 0;
        v24 = 0;
        v22 = 85;
      }
      v29 = *(_DWORD *)(a3[1] - 380);
      *(_DWORD *)a1 = v14;
      *(_QWORD *)(a1 + 4) = v22;
      *(_QWORD *)(a1 + 16) = v25;
      *(_QWORD *)(a1 + 24) = v23;
      *(_DWORD *)(a1 + 32) = v29;
      *(_BYTE *)(a1 + 36) = v24;
      return result;
    }
    switch(*(_DWORD *)(v15 - 384))
    {
      case 0:
        v16 = *(_DWORD *)(v15 - 380);
        result = sub_22F421A78(v14);
        v17 = v14 - 36;
        if ((_DWORD)result)
        {
          v39 = v17 > 0x29;
          v40 = (1 << v17) & 0x30000000C03;
          if (v39 || v40 == 0)
          {
LABEL_70:
            *(_DWORD *)a1 = v14;
            *(_QWORD *)(a1 + 4) = 73;
          }
          else
          {
LABEL_19:
            v43 = *(_OWORD *)a3;
            v18 = *(_DWORD *)(a2 + 344);
            if (v18)
              v19 = *(_QWORD *)(*(_QWORD *)(a2 + 336) + 5272 * v18 - 5272);
            else
              v19 = 0;
            v34 = *((_QWORD *)&v43 + 1);
            while (1)
            {
              *((_QWORD *)&v43 + 1) = v34 - 1312;
              result = sub_22ECB208C(v42, a2, &v43, a4);
              if (HIDWORD(v42[0]) != 73)
                break;
              v34 = *((_QWORD *)&v43 + 1);
              if (*((_QWORD *)&v43 + 1) != v19)
              {
                v35 = *(_DWORD *)(*((_QWORD *)&v43 + 1) - 352);
                result = sub_22F421A78(v35);
                if ((result & 1) == 0
                  && ((v35 - 66) > 0x21 || ((1 << (v35 - 66)) & 0x3001CC073) == 0))
                {
                  continue;
                }
              }
              v37 = 73;
              goto LABEL_57;
            }
            v37 = 29;
LABEL_57:
            *(_DWORD *)a1 = v14;
            *(_DWORD *)(a1 + 4) = v37;
            *(_DWORD *)(a1 + 8) = 0;
          }
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 32) = v16;
LABEL_72:
          *(_BYTE *)(a1 + 36) = 0;
          return result;
        }
        if (v17 <= 0x3F)
        {
          if (((1 << v17) & 0xC007301CC0000000) != 0)
            goto LABEL_70;
          if (((1 << v17) & 0x34000000C03) != 0)
            goto LABEL_19;
        }
LABEL_14:
        a3[1] = v15 - 1312;
        break;
      case 1:
        *(_DWORD *)a1 = v14;
        *(_QWORD *)(a1 + 4) = 85;
        goto LABEL_38;
      case 2:
        v26 = *(_DWORD *)(v15 - 380);
        *(_DWORD *)a1 = v14;
        *(_QWORD *)(a1 + 4) = 73;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = v26;
        goto LABEL_72;
      case 4:
        result = sub_22E3CB5E0(v9);
        if ((result & 1) != 0 || (*(_BYTE *)(v9 + 96) & 0x18) != 0)
        {
          v27 = 29;
        }
        else
        {
          v30 = *(_QWORD *)(v9 + 16);
          v31 = v30 & 0xFFFFFFFFFFFFFFF8;
          if ((v30 & 4) != 0)
            v31 = *(_QWORD *)v31;
          v32 = *(_WORD *)(v31 + 8) & 0x7F;
          if (v32 == 16 || v32 == 83)
            v27 = 85;
          else
            v27 = 29;
        }
        v28 = *(_DWORD *)(a3[1] - 380);
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 4) = v27;
        *(_DWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = v28;
        goto LABEL_72;
      default:
        goto LABEL_14;
    }
  }
  v20 = (*(_DWORD *)(result + 28) & 0x7F) - 52;
  if (v9)
  {
    v38 = 85;
    if (!sub_22F3404EC(v9))
    {
      if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x40)
        v38 = 85;
      else
        v38 = 73;
    }
    result = sub_22E3CB5E0(v9);
    if ((_DWORD)result)
      v21 = v38;
    else
      v21 = 73;
  }
  else
  {
    v21 = 85;
  }
  if (v20 >= 0xFFFFFFFD)
    v21 = 73;
  *(_DWORD *)a1 = 89;
  *(_DWORD *)(a1 + 4) = v21;
LABEL_37:
  *(_DWORD *)(a1 + 8) = 0;
LABEL_38:
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  return result;
}

unsigned __int8 *sub_22ECB248C(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v1 = *a1;
  if ((v1 & 0xFE) == 0xAC)
  {
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
    v1 = *a1;
  }
  if (v1 == 186)
  {
    v2 = *((_QWORD *)a1 + 2);
    a1 = (unsigned __int8 *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 4) != 0)
      a1 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  }
  while (1)
  {
    v3 = *a1;
    if (v3 != 116)
      break;
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  }
  if (v3 != 153 || (a1 = sub_22EFFB374(a1)) != 0)
  {
    while (1)
    {
      v4 = a1;
      v5 = *a1;
      if (v5 > 0xD5)
      {
        if (v5 == 233)
        {
          if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
            return v4;
          v7 = a1 + 16;
        }
        else
        {
          if (v5 != 214)
            return v4;
          v7 = a1 + 24;
        }
      }
      else if (v5 == 155)
      {
        if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
          return v4;
        if (a1[48])
          v7 = a1 + 24;
        else
          v7 = a1 + 32;
      }
      else
      {
        if (v5 != 176)
          return v4;
        v6 = *((unsigned int *)a1 + 5);
        if ((_DWORD)v6 == -1)
          return v4;
        v7 = &a1[8 * v6 + 40];
      }
      a1 = *(unsigned __int8 **)v7;
      if (*(unsigned __int8 **)v7 == v4)
        return v4;
    }
  }
  return 0;
}

uint64_t sub_22ECB2594(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (unsigned int *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 == a2 + 16)
      {
        v8 = v3;
        v9 = *(_DWORD *)(a2 + 8);
        if (v5 >= 5)
        {
          v8 = (unsigned int *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
          sub_22ECB3050(a1, v8);
          if (*(unsigned int **)a1 != v3)
            free(*(void **)a1);
          *(_QWORD *)a1 = v8;
          *(_DWORD *)(a1 + 12) = 0;
          v6 = *(_QWORD *)a2;
          v9 = *(_DWORD *)(a2 + 8);
        }
        sub_22ECB26B8(v6, v6 + 1312 * v9, v8);
        *(_DWORD *)(a1 + 8) = v5;
        v10 = *(_DWORD *)(a2 + 8);
        if (v10)
        {
          v11 = 1312 * v10;
          v12 = *(_QWORD *)a2 - 1312;
          do
          {
            sub_22ECB1720(v12 + v11);
            v11 -= 1312;
          }
          while (v11);
        }
      }
      else
      {
        v7 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)a1 = v6;
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  return a1;
}

uint64_t sub_22ECB26B8(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  __int128 v27;
  int *v28;
  int *v29;
  __int128 v30;
  uint64_t j;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  __int128 *v47;
  int *v48;
  int *v49;
  uint64_t k;
  uint64_t m;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t n;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  int *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  unsigned int v81;
  __int128 v82;
  __int128 v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  __int128 v92;
  _BYTE v93[25];
  __int128 v94;
  __int128 v95;

  if (result != a2)
  {
    v5 = result;
    while (1)
    {
      *(_QWORD *)a3 = 1;
      v6 = (uint64_t)(a3 + 82);
      for (i = 2; i != 82; i += 10)
        *(_QWORD *)&a3[i] = -4096;
      v8 = *(_DWORD *)v5;
      *(_DWORD *)v5 = *a3 & 0xFFFFFFFE | *(_DWORD *)v5 & 1;
      v9 = a3[1];
      *a3 = v8 & 0xFFFFFFFE | *a3 & 1;
      a3[1] = *(_DWORD *)(v5 + 4);
      *(_DWORD *)(v5 + 4) = v9;
      v10 = *a3;
      v11 = *(_DWORD *)v5;
      if ((*a3 & 1) != 0)
        break;
      v12 = (uint64_t)a3;
      v13 = v5;
      if ((v11 & 1) == 0)
      {
        v14 = *((_QWORD *)a3 + 1);
        *((_QWORD *)a3 + 1) = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = v14;
        LODWORD(v14) = a3[4];
        a3[4] = *(_DWORD *)(v5 + 16);
        *(_DWORD *)(v5 + 16) = v14;
        goto LABEL_26;
      }
LABEL_9:
      v15 = 0;
      v92 = *(_OWORD *)(v12 + 8);
      *(_DWORD *)v12 = v10 | 1;
      do
      {
        v16 = v12 + v15;
        v17 = v13 + v15;
        v18 = *(_QWORD *)(v13 + v15 + 8);
        *(_QWORD *)(v12 + v15 + 8) = v18;
        if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = *(_OWORD *)(v17 + 32);
          *(_OWORD *)(v16 + 16) = *(_OWORD *)(v17 + 16);
          *(_OWORD *)(v16 + 32) = v19;
        }
        v15 += 40;
      }
      while (v15 != 320);
      *(_DWORD *)v13 &= ~1u;
      *(_OWORD *)(v13 + 8) = v92;
LABEL_26:
      *((_QWORD *)a3 + 41) = 1;
      for (j = 84; j != 108; j += 6)
        *(_QWORD *)&a3[j] = -4096;
      v32 = *(_DWORD *)(v5 + 328);
      *(_DWORD *)(v5 + 328) = a3[82] & 0xFFFFFFFE | v32 & 1;
      a3[82] = v32 & 0xFFFFFFFE | a3[82] & 1;
      v33 = a3[83];
      a3[83] = *(_DWORD *)(v5 + 332);
      *(_DWORD *)(v5 + 332) = v33;
      v34 = a3[82];
      v35 = *(_DWORD *)(v5 + 328);
      if ((v34 & 1) != 0)
      {
        v34 = *(_DWORD *)(v5 + 328);
        v36 = v5 + 328;
        if ((v35 & 1) == 0)
          goto LABEL_32;
        v40 = 0;
        while (2)
        {
          v41 = (int *)&a3[v40];
          v42 = v5 + v40 * 4;
          v43 = *(_QWORD *)&a3[v40 + 84];
          v44 = *(_QWORD *)(v5 + v40 * 4 + 336);
          if (v43 != -4096 && v43 != -8192 && v44 != -4096 && v44 != -8192)
          {
            v45 = (__int128 *)&a3[v40 + 86];
            v46 = *v45;
            *((_QWORD *)v41 + 42) = v44;
            v47 = (__int128 *)(v5 + v40 * 4 + 344);
            *v45 = *v47;
            *(_QWORD *)(v42 + 336) = v43;
            *v47 = v46;
            goto LABEL_48;
          }
          *((_QWORD *)v41 + 42) = v44;
          *(_QWORD *)(v42 + 336) = v43;
          if ((v43 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if ((v44 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v48 = (int *)&a3[v40 + 86];
              v49 = (int *)(v5 + v40 * 4);
              goto LABEL_47;
            }
          }
          else
          {
            v48 = (int *)(v5 + v40 * 4 + 344);
            v49 = (int *)&a3[v40];
LABEL_47:
            *(_OWORD *)v48 = *(_OWORD *)(v49 + 86);
          }
LABEL_48:
          v40 += 6;
          if (v40 == 24)
            goto LABEL_49;
          continue;
        }
      }
      v36 = (uint64_t)(a3 + 82);
      v6 = v5 + 328;
      if ((v35 & 1) == 0)
      {
        v37 = *((_QWORD *)a3 + 42);
        *((_QWORD *)a3 + 42) = *(_QWORD *)(v5 + 336);
        *(_QWORD *)(v5 + 336) = v37;
        LODWORD(v37) = a3[86];
        a3[86] = *(_DWORD *)(v5 + 344);
        *(_DWORD *)(v5 + 344) = v37;
        goto LABEL_49;
      }
LABEL_32:
      v38 = 0;
      v94 = *(_OWORD *)(v36 + 8);
      *(_DWORD *)v36 = v34 | 1;
      do
      {
        v39 = *(_QWORD *)(v6 + v38 + 8);
        *(_QWORD *)(v36 + v38 + 8) = v39;
        if ((v39 | 0x1000) != 0xFFFFFFFFFFFFF000)
          *(_OWORD *)(v36 + v38 + 16) = *(_OWORD *)(v6 + v38 + 16);
        v38 += 24;
      }
      while (v38 != 96);
      *(_DWORD *)v6 &= ~1u;
      *(_OWORD *)(v6 + 8) = v94;
LABEL_49:
      *((_QWORD *)a3 + 54) = 1;
      for (k = 110; k != 142; k += 4)
        *(_QWORD *)&a3[k] = -4096;
      sub_22ECB2ED0(a3 + 108, (unsigned int *)(v5 + 432));
      *((_QWORD *)a3 + 71) = 1;
      for (m = 144; m != 176; m += 4)
        *(_QWORD *)&a3[m] = -4096;
      result = (uint64_t)sub_22ECB2ED0(a3 + 142, (unsigned int *)(v5 + 568));
      *((_QWORD *)a3 + 88) = 0;
      *((_QWORD *)a3 + 89) = 0;
      a3[180] = 0;
      *((_QWORD *)a3 + 88) = *(_QWORD *)(v5 + 704);
      *(_QWORD *)(v5 + 704) = 0;
      a3[178] = *(_DWORD *)(v5 + 712);
      *(_DWORD *)(v5 + 712) = 0;
      v52 = a3[179];
      a3[179] = *(_DWORD *)(v5 + 716);
      *(_DWORD *)(v5 + 716) = v52;
      v53 = a3[180];
      a3[180] = *(_DWORD *)(v5 + 720);
      *(_DWORD *)(v5 + 720) = v53;
      v54 = (uint64_t)(a3 + 182);
      *((_QWORD *)a3 + 91) = 1;
      for (n = 184; n != 232; n += 6)
        *(_QWORD *)&a3[n] = -4096;
      v56 = *(_DWORD *)(v5 + 728);
      *(_DWORD *)(v5 + 728) = a3[182] & 0xFFFFFFFE | v56 & 1;
      a3[182] = v56 & 0xFFFFFFFE | a3[182] & 1;
      v57 = a3[183];
      a3[183] = *(_DWORD *)(v5 + 732);
      *(_DWORD *)(v5 + 732) = v57;
      v58 = a3[182];
      v59 = *(_DWORD *)(v5 + 728);
      v60 = 0uLL;
      if ((v58 & 1) != 0)
      {
        v58 = *(_DWORD *)(v5 + 728);
        v61 = v5 + 728;
        if ((v59 & 1) == 0)
        {
LABEL_59:
          v63 = 0;
          v95 = *(_OWORD *)(v61 + 8);
          *(_DWORD *)v61 = v58 | 1;
          do
          {
            v64 = *(_QWORD *)(v54 + v63 + 8);
            *(_QWORD *)(v61 + v63 + 8) = v64;
            if ((v64 | 0x1000) != 0xFFFFFFFFFFFFF000)
              *(_OWORD *)(v61 + v63 + 16) = *(_OWORD *)(v54 + v63 + 16);
            v63 += 24;
          }
          while (v63 != 192);
          *(_DWORD *)v54 &= ~1u;
          *(_OWORD *)(v54 + 8) = v95;
          goto LABEL_76;
        }
        v65 = 0;
        while (2)
        {
          v66 = (int *)&a3[v65];
          v67 = v5 + v65 * 4;
          v68 = *(_QWORD *)&a3[v65 + 184];
          v69 = *(_QWORD *)(v5 + v65 * 4 + 736);
          if (v68 != -4096 && v68 != -8192 && v69 != -4096 && v69 != -8192)
          {
            v70 = (int *)&a3[v65];
            v71 = a3[v65 + 186];
            v72 = *(_QWORD *)&a3[v65 + 188];
            *((_QWORD *)v66 + 92) = v69;
            v73 = v5 + v65 * 4;
            v70[186] = *(_DWORD *)(v5 + v65 * 4 + 744);
            *((_QWORD *)v70 + 94) = *(_QWORD *)(v5 + v65 * 4 + 752);
            *(_QWORD *)(v67 + 736) = v68;
            *(_DWORD *)(v73 + 744) = v71;
            *(_QWORD *)(v73 + 752) = v72;
            goto LABEL_75;
          }
          *((_QWORD *)v66 + 92) = v69;
          *(_QWORD *)(v67 + 736) = v68;
          if ((v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if ((v69 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v74 = (int *)&a3[v65 + 186];
              v75 = (int *)(v5 + v65 * 4);
              goto LABEL_74;
            }
          }
          else
          {
            v74 = (int *)(v5 + v65 * 4 + 744);
            v75 = (int *)&a3[v65];
LABEL_74:
            *(_OWORD *)v74 = *(_OWORD *)(v75 + 186);
          }
LABEL_75:
          v65 += 6;
          if (v65 == 48)
            goto LABEL_76;
          continue;
        }
      }
      v61 = (uint64_t)(a3 + 182);
      v54 = v5 + 728;
      if ((v59 & 1) != 0)
        goto LABEL_59;
      v62 = *((_QWORD *)a3 + 92);
      *((_QWORD *)a3 + 92) = *(_QWORD *)(v5 + 736);
      *(_QWORD *)(v5 + 736) = v62;
      LODWORD(v62) = a3[186];
      a3[186] = *(_DWORD *)(v5 + 744);
      *(_DWORD *)(v5 + 744) = v62;
LABEL_76:
      v76 = *(_OWORD *)(v5 + 944);
      *((_OWORD *)a3 + 58) = *(_OWORD *)(v5 + 928);
      *((_OWORD *)a3 + 59) = v76;
      v77 = *(_OWORD *)(v5 + 960);
      v78 = *(_OWORD *)(v5 + 976);
      v79 = *(_OWORD *)(v5 + 992);
      a3[252] = *(_DWORD *)(v5 + 1008);
      *((_OWORD *)a3 + 61) = v78;
      *((_OWORD *)a3 + 62) = v79;
      *((_OWORD *)a3 + 60) = v77;
      *(_OWORD *)(a3 + 254) = 0uLL;
      a3[258] = 0;
      *((_QWORD *)a3 + 127) = *(_QWORD *)(v5 + 1016);
      *(_QWORD *)(v5 + 1016) = 0;
      a3[256] = *(_DWORD *)(v5 + 1024);
      *(_DWORD *)(v5 + 1024) = 0;
      v80 = a3[257];
      a3[257] = *(_DWORD *)(v5 + 1028);
      *(_DWORD *)(v5 + 1028) = v80;
      v81 = a3[258];
      a3[258] = *(_DWORD *)(v5 + 1032);
      *(_DWORD *)(v5 + 1032) = v81;
      *((_BYTE *)a3 + 1040) = 0;
      *((_BYTE *)a3 + 1056) = 0;
      if (*(_BYTE *)(v5 + 1056))
      {
        *((_OWORD *)a3 + 65) = *(_OWORD *)(v5 + 1040);
        *((_BYTE *)a3 + 1056) = 1;
      }
      v82 = *(_OWORD *)(v5 + 1064);
      v83 = *(_OWORD *)(v5 + 1096);
      *(_OWORD *)(a3 + 270) = *(_OWORD *)(v5 + 1080);
      *(_OWORD *)(a3 + 274) = v83;
      *(_OWORD *)(a3 + 266) = v82;
      *(_OWORD *)(a3 + 278) = 0uLL;
      a3[282] = 0;
      *((_QWORD *)a3 + 139) = *(_QWORD *)(v5 + 1112);
      *(_QWORD *)(v5 + 1112) = 0;
      a3[280] = *(_DWORD *)(v5 + 1120);
      *(_DWORD *)(v5 + 1120) = 0;
      v84 = a3[281];
      a3[281] = *(_DWORD *)(v5 + 1124);
      *(_DWORD *)(v5 + 1124) = v84;
      v85 = a3[282];
      a3[282] = *(_DWORD *)(v5 + 1128);
      *(_DWORD *)(v5 + 1128) = v85;
      *((_QWORD *)a3 + 142) = a3 + 288;
      *((_QWORD *)a3 + 143) = 0x400000000;
      if (*(_DWORD *)(v5 + 1144))
      {
        result = sub_22F309A2C((uint64_t)(a3 + 284), v5 + 1136);
        v60 = 0uLL;
      }
      a3[300] = 0;
      *((_OWORD *)a3 + 74) = v60;
      *((_QWORD *)a3 + 148) = *(_QWORD *)(v5 + 1184);
      *(_QWORD *)(v5 + 1184) = 0;
      a3[298] = *(_DWORD *)(v5 + 1192);
      *(_DWORD *)(v5 + 1192) = 0;
      v86 = a3[299];
      a3[299] = *(_DWORD *)(v5 + 1196);
      *(_DWORD *)(v5 + 1196) = v86;
      v87 = a3[300];
      a3[300] = *(_DWORD *)(v5 + 1200);
      *(_DWORD *)(v5 + 1200) = v87;
      *((_QWORD *)a3 + 151) = a3 + 306;
      *((_QWORD *)a3 + 152) = 0x400000000;
      if (*(_DWORD *)(v5 + 1216))
      {
        result = sub_22F24C77C((uint64_t)(a3 + 302), v5 + 1208);
        v60 = 0uLL;
      }
      a3[318] = 0;
      *(_OWORD *)(a3 + 314) = v60;
      *((_QWORD *)a3 + 157) = *(_QWORD *)(v5 + 1256);
      *(_QWORD *)(v5 + 1256) = 0;
      a3[316] = *(_DWORD *)(v5 + 1264);
      *(_DWORD *)(v5 + 1264) = 0;
      v88 = a3[317];
      a3[317] = *(_DWORD *)(v5 + 1268);
      *(_DWORD *)(v5 + 1268) = v88;
      v89 = a3[318];
      a3[318] = *(_DWORD *)(v5 + 1272);
      *(_DWORD *)(v5 + 1272) = v89;
      a3[324] = 0;
      *((_OWORD *)a3 + 80) = v60;
      *((_QWORD *)a3 + 160) = *(_QWORD *)(v5 + 1280);
      *(_QWORD *)(v5 + 1280) = 0;
      a3[322] = *(_DWORD *)(v5 + 1288);
      *(_DWORD *)(v5 + 1288) = 0;
      v90 = a3[323];
      a3[323] = *(_DWORD *)(v5 + 1292);
      *(_DWORD *)(v5 + 1292) = v90;
      v91 = a3[324];
      a3[324] = *(_DWORD *)(v5 + 1296);
      *(_DWORD *)(v5 + 1296) = v91;
      *((_QWORD *)a3 + 163) = *(_QWORD *)(v5 + 1304);
      v5 += 1312;
      a3 += 328;
      if (v5 == a2)
        return result;
    }
    v10 = *(_DWORD *)v5;
    v12 = v5;
    v13 = (uint64_t)a3;
    if ((v11 & 1) == 0)
      goto LABEL_9;
    v20 = 0;
    while (1)
    {
      v21 = (int *)&a3[v20];
      v22 = v5 + v20 * 4;
      v23 = *(_QWORD *)&a3[v20 + 2];
      v24 = *(_QWORD *)(v5 + v20 * 4 + 8);
      if (v23 == -4096 || v23 == -8192 || v24 == -4096 || v24 == -8192)
      {
        *((_QWORD *)v21 + 1) = v24;
        *(_QWORD *)(v22 + 8) = v23;
        if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = (int *)(v5 + v20 * 4);
          v29 = (int *)&a3[v20];
          goto LABEL_24;
        }
        if ((v24 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v28 = (int *)&a3[v20];
          v29 = (int *)(v5 + v20 * 4);
LABEL_24:
          v30 = *((_OWORD *)v29 + 2);
          *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
          *((_OWORD *)v28 + 2) = v30;
        }
      }
      else
      {
        v25 = (int *)&a3[v20];
        *(_OWORD *)v93 = *(_OWORD *)&a3[v20 + 4];
        *(_OWORD *)&v93[9] = *(_OWORD *)((char *)&a3[v20 + 6] + 1);
        *((_QWORD *)v21 + 1) = v24;
        v26 = v5 + v20 * 4;
        v27 = *(_OWORD *)(v5 + v20 * 4 + 16);
        *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)(v5 + v20 * 4 + 25);
        *((_OWORD *)v25 + 1) = v27;
        *(_QWORD *)(v22 + 8) = v23;
        *(_OWORD *)(v26 + 25) = *(_OWORD *)&v93[9];
        *(_OWORD *)(v26 + 16) = *(_OWORD *)v93;
      }
      v20 += 10;
      if (v20 == 80)
        goto LABEL_26;
    }
  }
  return result;
}

unsigned int *sub_22ECB2ED0(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  __int128 v17;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = *(_QWORD *)&result[v9 + 2];
      v13 = *(_QWORD *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&a2[v9];
          v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&result[v9];
          v16 = (int *)&a2[v9];
LABEL_22:
          *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
        }
      }
      else
      {
        v14 = *(_QWORD *)&result[v9 + 4];
        *((_QWORD *)v10 + 1) = v13;
        *(_QWORD *)&result[v9 + 4] = *(_QWORD *)&a2[v9 + 4];
        *((_QWORD *)v11 + 1) = v12;
        *(_QWORD *)&a2[v9 + 4] = v14;
      }
      v9 += 4;
      if (v9 == 32)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v17 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = *(_QWORD *)&result[v7 + 2];
    *(_QWORD *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *(_QWORD *)&v6[v7 + 4] = *(_QWORD *)&result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 32);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

uint64_t sub_22ECB3050(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_22ECB26B8(*(_QWORD *)a1, *(_QWORD *)a1 + 1312 * *(unsigned int *)(a1 + 8), a2);
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    v6 = 1312 * v4;
    v7 = v5 - 1312;
    do
    {
      result = sub_22ECB1720(v7 + v6);
      v6 -= 1312;
    }
    while (v6);
  }
  return result;
}

double sub_22ECB30AC(uint64_t a1, int a2, __int128 *a3, uint64_t a4, int a5)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v9;
  uint64_t n;
  __int128 v11;
  double result;

  *(_QWORD *)a1 = 1;
  for (i = 8; i != 328; i += 40)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 328) = 1;
  for (j = 336; j != 432; j += 24)
    *(_QWORD *)(a1 + j) = -4096;
  *(_QWORD *)(a1 + 432) = 1;
  for (k = 440; k != 568; k += 16)
    *(_QWORD *)(a1 + k) = -4096;
  *(_QWORD *)(a1 + 568) = 1;
  for (m = 576; m != 704; m += 16)
    *(_QWORD *)(a1 + m) = -4096;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  v9 = 736;
  *(_QWORD *)(a1 + 728) = 1;
  do
  {
    *(_QWORD *)(a1 + v9) = -4096;
    v9 += 24;
  }
  while (v9 != 928);
  *(_QWORD *)(a1 + 928) = 0;
  for (n = 936; n != 960; n += 8)
    *(_QWORD *)(a1 + n) = 3;
  *(_DWORD *)(a1 + 960) = a2;
  v11 = *a3;
  *(_QWORD *)(a1 + 984) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 968) = v11;
  *(_QWORD *)(a1 + 992) = a4;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 1008) = a5;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1064) = 1;
  *(_BYTE *)(a1 + 1068) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1077) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)(a1 + 1136) = a1 + 1152;
  *(_QWORD *)(a1 + 1144) = 0x400000000;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_QWORD *)(a1 + 1216) = 0x400000000;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_DWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  return result;
}

void sub_22ECB3220()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22ECB3234(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;

  v3 = sub_22F2E6D78(a2);
  if (!v3)
    return 0;
  v4 = (_QWORD *)v3;
  if ((*(_DWORD *)(v3 + 28) & 0x7Fu) - 60 > 6 || sub_22E3CB5E0(v3))
    return 0;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 224);
  if (!v7)
    v7 = *(_QWORD *)(v6 + 216);
  return sub_22E8CE620(v6 + 3320, v4, v7, *(uint64_t **)(v6 + 12888), 0);
}

__n128 sub_22ECB32B0@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24FAB8D60;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

_QWORD *sub_22ECB3308(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22ECB1A54((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22ECB337C(a1, a2, v7);
    *v5 = *a2;
    v5[4] = 0;
    *((_DWORD *)v5 + 2) = 85;
    *(_QWORD *)((char *)v5 + 12) = 0;
    *(_QWORD *)((char *)v5 + 20) = 0;
    *(_QWORD *)((char *)v5 + 25) = 0;
  }
  return v5 + 1;
}

_QWORD *sub_22ECB337C(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22ECB3438((uint64_t)a1, v6);
  v8 = 0;
  sub_22ECB1A54((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22ECB3438(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[320];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v17;
    do
    {
      v10 = a1 + v8;
      v11 = *(_QWORD *)(a1 + v8 + 8);
      if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v11;
        v12 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v9 + 8) = v12;
        v9 += 40;
      }
      v8 += 40;
    }
    while (v8 != 320);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](40 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22ECB35DC(a1, (uint64_t)v17, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](40 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v16 = 5 * v7;
    sub_22ECB35DC(a1, (uint64_t)v6, (uint64_t)v6 + 8 * v16);
    return llvm::deallocate_buffer(v6, (void *)(8 * v16));
  }
}

uint64_t sub_22ECB35DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 328);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[5 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 5;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_22ECB1A54((uint64_t)v5, v10, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      v12 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v11 + 3) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v11 + 1) = v12;
      *v5 += 2;
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_22ECB36A8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = *(unsigned __int8 *)a2;
  if ((v2 & 0xFE) == 0x70)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22ECB3764(a1, a2);
      default:
        goto LABEL_5;
    }
  }
  if (v2 == 233)
  {
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        return sub_22ECB3764(a1, a2);
      default:
LABEL_5:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X10 }
  return result;
}

BOOL sub_22ECB3740(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_22EC7EA20(*a1, *(_QWORD *)(a2 + 16));
  return !HIDWORD(v2) || (_DWORD)v2 == 2;
}

uint64_t sub_22ECB3764(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  sub_22F0D492C(a2);
  v10 = v12;
  v3 = v14;
  v11 = v13;
  v4 = v15;
  v6 = *((_QWORD *)&v12 + 1);
  v5 = (uint64_t *)v12;
  if ((_QWORD)v12 == v14 && *((_QWORD *)&v12 + 1) == v15)
    return 0;
  while (1)
  {
    v8 = v5;
    if ((v6 & 3) != 0)
    {
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v8 = (_QWORD *)sub_22F3AC1A8(*v5);
    }
    if (*v8 && (sub_22ECB36A8(a1) & 1) != 0)
      break;
    if ((v6 & 3) != 0)
    {
      if (v6 >= 4)
        sub_22F0D8720((uint64_t)&v10);
      else
        sub_22F3F2FE0((uint64_t)&v10, 1);
    }
    else
    {
      *(_QWORD *)&v10 = v5 + 1;
    }
    v6 = *((_QWORD *)&v10 + 1);
    v5 = (uint64_t *)v10;
    if (v10 == __PAIR128__(v4, v3))
      return 0;
  }
  return 1;
}

uint64_t sub_22ECB3850(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, const void *a4, size_t a5, __n128 a6)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v20;
  llvm *v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[16];

  v21 = 0;
  v22 = 0;
  v20 = a1;
  v23 = 0;
  v24 = v28;
  v25 = v28;
  a6.n128_u64[0] = 2;
  v26 = 2;
  v27 = 0;
  sub_22ECB399C(&v20, (unint64_t)a3, a6);
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v25 != v24)
    free(v25);
  llvm::deallocate_buffer(v21, (void *)(16 * v23));
  v13 = *(_QWORD *)(v12 + 8);
  v14 = sub_22EFFED0C(a3);
  if (*v14 == 161)
    v15 = (uint64_t)v14;
  else
    v15 = 0;
  v16 = sub_22EC822F4(a1, 0, v13, a4, a5, 0, v15);
  v17 = sub_22ED2B2F8((uint64_t)a1, v16, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
  sub_22EA28AD8();
  v18 = *(_DWORD *)(a2 + 8);
  if (v18 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v17;
  ++*(_DWORD *)(a2 + 8);
  return v16;
}

void sub_22ECB399C(_QWORD *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22ECB3C28(a1, a2);
        break;
      case 0x67:
        sub_22ECB3C98(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22ECB3D1C(a1, a2);
        break;
      case 0x6C:
        sub_22ECB3DAC((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22ECB3F2C((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22ECB3F94((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22ECB3F9C(a1, a2);
        break;
      case 0x70:
        sub_22ECB4094(a1, (int *)a2);
        break;
      case 0x71:
        sub_22ECB41F4(a1, (int *)a2, a3);
        break;
      case 0x72:
        sub_22ECB42C4(a1, a2);
        break;
      case 0x73:
        sub_22ECB453C((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22ECB4624(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22ECB4680(a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22ECB4B5C((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EB8A634((uint64_t)a1, a2);
        break;
      case 0x79:
        sub_22EB8A6DC(a1, a2);
        break;
      case 0x7A:
        sub_22ECB4E38((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22ECB4ED8((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0x7C:
        sub_22ECB51AC(a1, a2);
        break;
      case 0x7D:
        sub_22ECB53AC((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22ECB547C((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0x7F:
        sub_22ECB5760(a1, a2);
        break;
      case 0x81:
        sub_22ECB58B8((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22ECB5DF8((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22ECB6044((_QWORD **)a1, a2);
        break;
      case 0x85:
        sub_22F2F5688(a1, (_DWORD *)a2);
        break;
      case 0x86:
        sub_22ECB60CC(a1, a2);
        break;
      case 0x87:
        sub_22ECB6118(a1, a2);
        break;
      case 0x88:
        sub_22ECB6254(a1, a2);
        break;
      case 0x89:
        sub_22ECB64C4((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22ECB6660(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22ECB6810(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22ECB6944(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22ECB6948(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22ECB6FF0(a1, a2);
        break;
      case 0x90:
        sub_22ECB705C((_QWORD **)a1, a2);
        break;
      case 0x91:
        sub_22ECB70D0(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22ECB7158();
        break;
      case 0x98:
        sub_22ECB715C(a1, a2);
        break;
      case 0x99:
        sub_22ECB71D4((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22ECB7200(a1, a2);
        break;
      case 0x9C:
        sub_22ECB7284((_QWORD **)a1, a2);
        break;
      case 0x9D:
        sub_22ECB7314(a1, a2);
        break;
      case 0x9E:
        sub_22ECB7438((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22ECB74A4(a1, a2);
        break;
      case 0xA0:
        sub_22ECB74F8(a1, a2);
        break;
      case 0xA1:
        sub_22ECB7544(a1, (unsigned int *)a2);
        break;
      case 0xA2:
        sub_22ECB77D4(a1, a2);
        break;
      case 0xA3:
        sub_22ECB7844(a1, (unsigned int *)a2);
        break;
      case 0xA4:
        sub_22ECB7850((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22ECB7BE0(a1, a2);
        break;
      case 0xA7:
        sub_22ECB7D40((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22ECB7E44((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22ECB7E70((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22ECB7F04(a1, a2);
        break;
      case 0xB1:
        sub_22ECB812C((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22ECB81F4((uint64_t)a1, *(_QWORD *)(a2 + 8));
        break;
      case 0xB4:
        sub_22ECB8248(a1, a2);
        break;
      case 0xB6:
        sub_22ECB8460(a1, a2);
        break;
      case 0xB7:
        sub_22ECB995C((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22ECB9A68(a1, a2);
        break;
      case 0xB9:
        sub_22ECB9AE8((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22ECB9BD4((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22ECB9BE8((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22ECB9C6C(a1, (unsigned int *)a2);
        break;
      case 0xBD:
        sub_22ECBA190(a1, a2);
        break;
      case 0xBF:
        sub_22ECBA45C((_QWORD **)a1, a2);
        break;
      case 0xC0:
        sub_22ECBA53C((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22ECBA6C8(a1, a2);
        break;
      case 0xC4:
        sub_22ECBAA14(a1, a2);
        break;
      case 0xC6:
        sub_22ECBAA5C((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22ECBAB34((_QWORD **)a1, a2);
        break;
      case 0xC8:
        sub_22ECBAC14(a1, a2);
        break;
      case 0xC9:
        sub_22ECBAF68(a1, a2);
        break;
      case 0xCA:
        sub_22ECBB030((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22ECBB078(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22ECBB31C((_QWORD **)a1, a2);
        break;
      case 0xD0:
        sub_22ECBB440(a1, a2);
        break;
      case 0xD1:
        sub_22ECBB4B0(a1, a2);
        break;
      case 0xD2:
        sub_22ECBB678((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22ECBB6DC(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22ECBBAA4((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22ECBBEB0(a1, a2);
        break;
      case 0xD6:
        sub_22ECBBF0C(a1, a2);
        break;
      case 0xD7:
        sub_22ECBBF54(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22ECBC050(a1, a2);
        break;
      case 0xDA:
        sub_22ECBC0C8(a1, a2);
        break;
      case 0xDB:
        sub_22ECBC1FC(a1, a2);
        break;
      case 0xDC:
        sub_22ECBC79C((_QWORD **)a1, a2);
        break;
      case 0xDD:
        sub_22ECBC7F8(a1, a2);
        break;
      case 0xDE:
        sub_22ECBCA48(a1, a2);
        break;
      case 0xDF:
        sub_22ECBCF34(*a1, a2);
        break;
      case 0xE0:
        sub_22ECBCF50(a1, a2);
        break;
      case 0xE4:
        sub_22ECBD0C0((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22ECBD180((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22ECBD234(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22ECBD878(a1, a2);
        break;
      case 0xE9:
        sub_22ECBD9FC(a1, a2);
        break;
      case 0xEA:
        sub_22ECBDA80((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22ECB3C28(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22EB2F86C(*a1, *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECB3C98(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB2F86C(*a1, *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECB3D1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v9;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  sub_22F0D5A50(*(_QWORD *)(a2 + 16));
  v6 = *(unsigned int *)(a2 + 4);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EB296C0(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, v7, &v9, 1, v6);
}

uint64_t sub_22ECB3DAC(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v15[3];
  int v16;
  uint64_t v17;
  int v18;

  v4 = sub_22ECBDAF0(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  v18 = 0;
  v17 = 0;
  v16 = 3;
  *(_QWORD *)v15 = *((unsigned int *)v6 + 426);
  sub_22EB4DDB8((uint64_t)(v6 + 461), &v18, v15, (__int16 *)((char *)v6 + 1693), &v17, &v16);
  v7 = *((unsigned int *)v6 + 924);
  v8 = v7 - 2;
  v9 = v6[461];
  v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
  if (v10 == 5)
  {
    *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
    v11 = 1;
  }
  else if (v10 == 2)
  {
    *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
    v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
  }
  v12 = v9 + 576 * v7;
  *(_BYTE *)(v12 - 3) = v11;
  *(_WORD *)((char *)v6 + 1693) = 0;
  if (*((_DWORD *)v6 + 462))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
    sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
  }
  v13 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  sub_22EB48E64(v6);
  if ((v13 & 1) != 0)
    return 1;
  else
    return sub_22EBC8B4C(*a1, *(_BYTE *)(a2 + 16) & 3, *(_DWORD *)(a2 + 40), v5, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 44));
}

uint64_t sub_22ECB3F2C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22ECC1D24((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22ECB3F94(uint64_t a1, uint64_t a2)
{
  return sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22ECB3F9C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 72);
  }
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)(a2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 80);
    v7 = *(unsigned int *)(a2 + 76) | (unint64_t)(v6 << 32);
    v5 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(a2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v5;
}

__n128 sub_22ECB4094(uint64_t *a1, int *a2)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  int v17;

  v4 = sub_22ECB399C(a1, *((_QWORD *)a2 + 2));
  if ((v4 & 1) == 0)
  {
    v6 = sub_22ECB399C(a1, *((_QWORD *)a2 + 3));
    v7 = v6;
    if ((v6 & 1) == 0)
    {
      v8 = *a2;
      if (((*a2 >> 18) & 0x3E) - 22 > 9)
      {
        v9 = *a1;
        v10 = *(_DWORD *)(*a1 + 56);
        v11 = *(_QWORD *)(*a1 + 1296);
        result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
        v16 = result;
        if ((v8 & 0x1000000) != 0)
        {
          v13 = 8;
          if (*a2 == 113)
            v13 = 12;
          v12 = *(_QWORD *)&a2[v13];
        }
        else
        {
          v12 = 0;
        }
        sub_22E51A8D0(&v17, *(_QWORD *)(v9 + 72));
        v14 = *a1;
        *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
        *(_QWORD *)(v14 + 1296) = v12;
        sub_22EB4785C(*a1, 0, a2[1], (*a2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL);
        *(_DWORD *)(v9 + 56) = v10;
        *(_QWORD *)(v9 + 1296) = v11;
        v15 = *(_QWORD *)(v9 + 80);
        result = v16;
        *(_QWORD *)(v15 + 520) = v16.n128_u64[0];
        *(_DWORD *)(v15 + 528) = v16.n128_u32[0];
      }
      else
      {
        sub_22EB4785C(*a1, 0, a2[1], (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
  }
  return result;
}

__n128 sub_22ECB41F4(uint64_t *a1, int *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22ECB4094(a1, a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22ECB42C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22ECC3D60(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22ECC1D24((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22ECC5410(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22ECB453C(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22ECB4624(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22ECB4680(uint64_t *a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  unsigned __int8 **v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  void *v50[2];
  _BYTE v51[64];
  void *v52;
  uint64_t v53;
  _QWORD v54[10];

  v54[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *a2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = a2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(a2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)a2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)a2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = a2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(a2 + 40);
        return sub_22ECC4EF4(a1, *v17, 0);
      }
    }
  }
  v19 = sub_22ECC1D24((uint64_t)a1, *((_QWORD *)a2 + 1));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = (void *)*((_QWORD *)a2 + 2);
  v50[0] = v21;
  v52 = 0;
  if (sub_22E793870(a1 + 1, v50, &v52) && v52 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v21 = (void *)*((_QWORD *)v52 + 1);
  if (!v21)
    return 1;
  v46 = 0;
  v50[0] = v51;
  v50[1] = (void *)0x800000000;
  v22 = *a1;
  v23 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v26 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v26 <= 3)
      ? (v27 = v26 == 2)
      : (v27 = 1),
        v27))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v52 = 0;
      v48 = 3;
      v49 = 1;
      v47 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v49, (int *)&v47, (__int16 *)(v22 + 1693), (uint64_t *)&v52, &v48);
      v28 = *(unsigned int *)(v22 + 3696);
      v29 = v28 - 2;
      v30 = *(_QWORD *)(v22 + 3688);
      v31 = *(_DWORD *)(v30 + 576 * (v28 - 2));
      if (v31 == 5)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = *(_BYTE *)(v30 + 576 * v29 + 572);
        v32 = 1;
      }
      else if (v31 == 2)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = 1;
        v32 = *(_BYTE *)(v30 + 576 * v29 + 573) != 0;
      }
      else
      {
        v32 = 0;
        *(_BYTE *)(v30 + 576 * v28 - 4) = 0;
      }
      v33 = v30 + 576 * v28;
      *(_BYTE *)(v33 - 3) = v32;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v33 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v33 - 496));
      }
      v24 = 0;
      v23 = *a2;
    }
  }
  v34 = v23 == 119;
  if (v23 == 119)
    v35 = a2;
  else
    v35 = 0;
  v36 = (unsigned __int8 **)(v35 + 48);
  if (v34)
    v37 = v36;
  else
    v37 = (unsigned __int8 **)(a2 + 40);
  if (sub_22ECC4C60(a1, v37, *((_DWORD *)a2 + 8), 1, (uint64_t)v50, &v46))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v25 = 1;
    goto LABEL_60;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  if (*a2 != 119)
  {
    v38 = *((_DWORD *)a2 + 1);
    goto LABEL_55;
  }
  v42 = **((_QWORD **)a2 + 5);
  for (i = v42; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_74;
      v44 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v44 <= 0x39)
        break;
LABEL_69:
      if (sub_22F115668(i))
        v42 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_78;
    }
    if (v44 == 24)
      goto LABEL_77;
    if (v44 == 26)
      break;
    if (((1 << v44) & 0x20000000200003CLL) == 0)
      goto LABEL_69;
LABEL_74:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_74;
LABEL_77:
  v42 = i;
LABEL_78:
  v38 = sub_22F115668(v42);
LABEL_55:
  v39 = v38;
  v40 = *(_DWORD *)a2;
  v41 = *((_QWORD *)a2 + 3);
  v52 = v54;
  v53 = 0x800000000;
  if ((sub_22EACCC94(*a1) & 1) != 0)
    v25 = 1;
  else
    v25 = sub_22EACC4D8(*a1, v39, v20, (uint64_t)v21, (v40 >> 18) & 1, (uint64_t *)v52, v53, (v40 & 0x80000) != 0, (v40 & 0x100000) != 0, (v40 & 0x200000) != 0, (v40 & 0x400000) != 0, v45, (v40 >> 23) & 7, v41);
  if (v52 != v54)
    free(v52);
LABEL_60:
  if (v50[0] != v51)
    free(v50[0]);
  return v25;
}

uint64_t sub_22ECB4B5C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v31[2];
  _QWORD v32[9];

  v32[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22ECCE764((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v26[0] = v7;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v26, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v31[0] + 1);
  }
  if (!v7)
    return 1;
  v27 = 0;
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v26[0] = 0;
      v29 = 3;
      v30 = 1;
      v28 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v30, (int *)&v28, (__int16 *)(v8 + 1693), v26, &v29);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22ECC4C60((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v31, &v27);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v26[0] = *v6;
    v26[1] = (uint64_t)(v6 + 1);
    sub_22F1167E8(v26);
    sub_22F3C57CC(a2);
    v11 = sub_22EBBC368();
  }
  if (v31[0] != v32)
    free(v31[0]);
  return v11;
}

uint64_t sub_22ECB4E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 16)
    && (v6 = *(_QWORD *)(a2 + 16), v7 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7))
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
    && !*(_QWORD *)(v7 + 8))
  {
    return 1;
  }
  else
  {
    return sub_22EBC2B50(*(_QWORD *)a1, *(_DWORD *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 1, (*(_DWORD *)a2 >> 19) & 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
}

uint64_t sub_22ECB4ED8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v28;
  void *v29[2];
  _DWORD v30[66];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 2)) & 1) == 0)
  {
    v13 = sub_22ECB399C(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v29[0] = 0;
    v28.n128_u8[0] = 0;
    v14 = (*a2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, a2[1], v14, (unint64_t *)v29, &v28);
    if ((v15 & 1) != 0)
      return 1;
    v8 = v29[0];
    v7 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22ECC1D24(a1, *((_QWORD *)a2 + 3));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *a2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = a2 + 18;
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = a2[21];
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v28.n128_u64[0] = v10;
  v29[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v28, v29)
    && v29[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v29[0] + 1);
  }
  v16 = *((_QWORD *)a2 + 4);
  if (v16)
  {
    v17 = sub_22ECC1D78((uint64_t *)a1, v16, *((void **)a2 + 5), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*((_BYTE *)a2 + 2) & 8) != 0)
    v21 = a2[20];
  else
    v21 = 0;
  sub_22ECC9CB0(&v28, (uint64_t *)a1, (__n128 *)a2 + 3);
  if (!v28.n128_u64[0])
    return 1;
  v22 = *a2;
  if ((v22 & 0x80000) == 0)
    return sub_22F3012E8((_QWORD **)a1, v7, v5, (v22 >> 18) & 1, a2[1], v19, v20, v21, v10, (uint64_t)&v28, 0);
  v23 = a2[18];
  if (!v23)
    return sub_22F3012E8((_QWORD **)a1, v7, v5, (v22 >> 18) & 1, a2[1], v19, v20, v21, v10, (uint64_t)&v28, 0);
  v24 = a2[19];
  v29[0] = v30;
  v29[1] = (void *)0x800000000;
  v30[64] = v23;
  v30[65] = v24;
  v25 = (uint64_t)&a2[4 * ((v22 >> 19) & 1) + 18];
  if ((sub_22ECCEA54(a1, v25, v25 + 32 * a2[21]) & 1) != 0)
    v26 = 1;
  else
    v26 = sub_22F3012E8((_QWORD **)a1, v7, v5, (*a2 >> 18) & 1, a2[1], v19, v20, v21, v10, (uint64_t)&v28, (uint64_t)v29);
  if (v29[0] != v30)
    free(v29[0]);
  return v26;
}

uint64_t sub_22ECB51AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22ECB399C(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(a2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(a2 + 40);
  if (v16)
  {
    v17 = sub_22ECB399C(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v19 = *(_QWORD *)(a2 + 48);
  if (!v19)
  {
    v20 = 0;
    goto LABEL_23;
  }
  v20 = sub_22ECB399C(a1, v19);
  if ((v20 & 1) == 0)
  {
LABEL_23:
    v22 = *(_DWORD *)(a2 + 16);
    if (!v22)
    {
      v23 = *(_QWORD *)(a2 + 40);
      if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
      {
        sub_22F0D5A50(v23);
        v22 = v24;
      }
      else
      {
        v22 = *(_DWORD *)(a2 + 20);
      }
    }
    v25 = v13 | (v10 << 32);
    v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v27 = *(_DWORD *)(a2 + 56);
    v28 = v20 & 0xFFFFFFFFFFFFFFFELL;
    v30 = *(_DWORD *)(a2 + 20);
    v29 = *(_DWORD *)(a2 + 24);
    if (!v29)
    {
      v31 = *(_QWORD *)(a2 + 40);
      if (!v31 || (v29 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
      {
        v32 = *(_QWORD *)(a2 + 48);
        v33 = v22;
        v34 = v27;
        sub_22F0D60E4(v32);
        v27 = v34;
        v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
        v22 = v33;
      }
    }
    v18 = sub_22F34AF2C(*a1, v6, v22, v26, v27, v30, v28, v29, v25);
    goto LABEL_19;
  }
LABEL_18:
  v18 = 1;
LABEL_19:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v18;
}

uint64_t sub_22ECB53AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_22ECC1D24(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14))
  {
    if (v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 28);
  v10 = v9 & 1;
  v11 = (v9 >> 1) & 1;
  v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
  return sub_22F2F3990(v12, v8, v5, v6, v10, v11);
}

uint64_t sub_22ECB547C(uint64_t a1, unsigned int *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[10];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECCE764((uint64_t *)a1, *((uint64_t **)a2 + 4));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    v9 = *((_QWORD *)a2 + 7);
    if (!v9)
    {
      v7 = 0;
      v8 = 1;
      goto LABEL_9;
    }
    v10 = sub_22ECB399C(a1, v9);
    if ((v10 & 1) == 0)
    {
      v11 = *a2;
      v7 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v8 = 1;
      goto LABEL_10;
    }
    return 1;
  }
  v7 = 0;
  v8 = 0;
LABEL_9:
  v11 = *a2;
LABEL_10:
  v32 = 0;
  v35 = v37;
  v36 = 0x800000000;
  v13 = a2 + 14;
  if ((v11 & 0x1800000) != 0)
    v14 = ((v11 >> 19) & 1) + 1;
  else
    v14 = (v11 >> 19) & 1;
  v12 = 1;
  if ((sub_22ECC4C60((uint64_t *)a1, (unsigned __int8 **)&v13[2 * v14], a2[1], 1, (uint64_t)&v35, &v32) & 1) != 0)
    goto LABEL_41;
  v15 = *a2;
  if ((v15 & 0x1800000) == 0 || (v16 = *(unsigned __int8 **)&v13[2 * ((v15 >> 19) & 1)]) == 0)
  {
    v17 = 0;
LABEL_19:
    if (*((_QWORD *)a2 + 2)
      && (v33 = *((_QWORD *)a2 + 2), v34 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v33, &v34))
      && v34 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
      && !*(_QWORD *)(v34 + 8)
      || *((_QWORD *)a2 + 3)
      && (v33 = *((_QWORD *)a2 + 3), v34 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v33, &v34))
      && v34 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
      && !*(_QWORD *)(v34 + 8))
    {
      v12 = 1;
      goto LABEL_41;
    }
    v18 = *v5;
    if ((v6 & 0x80000) == 0)
    {
      v19 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), *v5);
      if (v19)
      {
        v20 = v19;
        v21 = *(unsigned __int8 *)(v19 + 16);
        if (v21 == 3)
        {
          v26 = *(_QWORD *)(v19 + 48);
          if (v26)
            goto LABEL_34;
        }
        else if (v21 == 2)
        {
          v22 = *(_QWORD *)(*(_QWORD *)a1 + 88);
          v31 = v19 + 40;
          v23 = sub_22EF67C8C(v22);
          v24 = a2[10];
          v25 = sub_22E3CD3D4(v22 + 2032, 32, 3);
          v26 = sub_22EFF8F1C(v25, v22, v31, v23, v24);
LABEL_34:
          v18 = *(_QWORD *)(v20 + 32);
          v8 = 1;
          v7 = v26;
        }
      }
    }
    v27 = *a2;
    if ((*a2 & 0x2000000) != 0)
    {
      v29 = (v27 >> 19) & 1;
      if ((v27 & 0x1800000) != 0)
        ++v29;
      v28 = *(_QWORD *)&v13[2 * v29 + 2 * a2[1]];
    }
    else
    {
      v28 = 0;
    }
    v12 = sub_22EBBD504(*(_QWORD *)a1, a2[10] | ((unint64_t)a2[10] << 32), (v27 >> 18) & 1, a2[10], (uint64_t)v35, v36, a2[10], v28, v18, v5, v7, v8, *((_QWORD *)a2 + 6), (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL));
    goto LABEL_41;
  }
  v12 = 1;
  v17 = sub_22ECC4EF4((uint64_t *)a1, v16, 1);
  if ((v17 & 1) == 0)
    goto LABEL_19;
LABEL_41:
  if (v35 != v37)
    free(v35);
  return v12;
}

uint64_t sub_22ECB5760(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
    v12 = 1;
  else
    v12 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v11 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(*(_QWORD *)(a2 + 24)));
  sub_22EB48E64(v4);
  return v12;
}

uint64_t sub_22ECB58B8(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22ECC1D78((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22ECC2C50((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22ECC2C50((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22ECB5DF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[2];
  void *v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0u;
  v21 = 0u;
  sub_22F05FD5C(a2, &v20);
  v4 = sub_22ECB399C(a1, *((_QWORD *)&v20 + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, v21);
  if ((v5 & 1) != 0)
    return 1;
  v6 = 0;
  v7 = 0;
  v25 = v27;
  v26 = 0x200000000;
  v24[0] = a2[2];
  v24[1] = *((_QWORD *)&v21 + 1);
  v8 = 1;
  do
  {
    v9 = v6;
    v10 = sub_22EFFED0C((unsigned __int8 *)v24[v7]);
    if (*v10 == 141)
    {
      v11 = sub_22EFFED0C(*(unsigned __int8 **)&v10[v10[3]]);
      if (*v11 == 161)
      {
        v12 = v11;
        v13 = v11 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v11 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v23);
          v14 = *(unsigned int *)v12;
          if ((v14 & 0x100000) != 0)
            v15 = (unsigned int *)&v12[16 * ((v14 >> 18) & 1) + 32];
          else
            v15 = (unsigned int *)v13;
          v16 = *(_QWORD *)v15;
          v22 = *(_QWORD *)v15;
          v23[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v22, v23)
            && v23[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v16 = *(_QWORD *)(v23[0] + 8);
          }
          if (!v16)
            goto LABEL_21;
          v17 = v26;
          if (v26 >= (unint64_t)HIDWORD(v26))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = v26;
          }
          *((_QWORD *)v25 + v17) = v16 | 3;
          LODWORD(v26) = v26 + 1;
        }
      }
    }
    v6 = 1;
    v7 = 1;
  }
  while ((v9 & 1) == 0);
  sub_22F05FD5C(a2, v23);
  sub_22EFF605C(v23[3]);
  v8 = sub_22ED1767C(*(_QWORD *)a1, v19, v20, (uint64_t)&v25, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, 0, 1, 0);
LABEL_21:
  if (v25 != v27)
    free(v25);
  return v8;
}

uint64_t sub_22ECB6044(_QWORD **a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v4[2];

  v2 = sub_22ECBDAF0(a1, *(uint64_t **)(a2 + 16));
  if (!v2)
    return 1;
  v4[0] = *v2;
  v4[1] = (uint64_t)(v2 + 1);
  sub_22F1167E8(v4);
  return sub_22EBBC368();
}

uint64_t sub_22ECB60CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EBBA860(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22ECB6118(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) != 0)
    {
      v6 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      {
LABEL_11:
        v12 = *a1;
        sub_22EB4DECC(*a1, v6, 0, 3);
        v13 = sub_22ECB399C(a1, v5);
        if ((v13 & 1) != 0)
          v11 = 1;
        else
          v11 = sub_22EBB98E0(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFFELL), *(unsigned int *)(a2 + 28), v14, v15, v16);
        sub_22EB48E64(v12);
        return v11;
      }
      v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
      if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
        goto LABEL_11;
      }
    }
    v6 = 0;
    goto LABEL_11;
  }
  v9 = (uint64_t *)sub_22ECBDAF0((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (v9)
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), v9, *(unsigned int *)(a2 + 28));
  return 1;
}

uint64_t sub_22ECB6254(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17[3];
  int v18;
  uint64_t v19;
  int v20;
  void *v21[2];
  _QWORD v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  if (!sub_22ECCE764(a1, *(uint64_t **)(a2 + 16)))
    return 1;
  v16 = 0;
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a2 + 24)
    || ((v6 = *a1, v7 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576), v7 <= 3)
      ? (v8 = v7 == 2)
      : (v8 = 1),
        v8 || (*(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) & 2) == 0))
  {
    v4 = 1;
    if ((sub_22ECC4C60(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v21, &v16) & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v20 = 1;
    v19 = 0;
    v18 = 3;
    *(_QWORD *)v17 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v20, v17, (__int16 *)(v6 + 1693), &v19, &v18);
    v9 = *(unsigned int *)(v6 + 3696);
    v10 = v9 - 2;
    v11 = *(_QWORD *)(v6 + 3688);
    v12 = *(_DWORD *)(v11 + 576 * (v9 - 2));
    if (v12 == 5)
    {
      *(_BYTE *)(v11 + 576 * v9 - 4) = *(_BYTE *)(v11 + 576 * v10 + 572);
      v13 = 1;
    }
    else if (v12 == 2)
    {
      *(_BYTE *)(v11 + 576 * v9 - 4) = 1;
      v13 = *(_BYTE *)(v11 + 576 * v10 + 573) != 0;
    }
    else
    {
      v13 = 0;
      *(_BYTE *)(v11 + 576 * v9 - 4) = 0;
    }
    v14 = v11 + 576 * v9;
    *(_BYTE *)(v14 - 3) = v13;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v14 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v14 - 496));
    }
    v4 = 1;
    v15 = sub_22ECC4C60(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v21, &v16);
    sub_22EB48E64(v6);
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  v4 = sub_22EBBC368();
LABEL_7:
  if (v21[0] != v22)
    free(v21[0]);
  return v4;
}

uint64_t sub_22ECB64C4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22ECBDAF0(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
      return sub_22EBBA098(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 32), v14, *(_DWORD *)(a2 + 36));
    return 1;
  }
  else
  {
    v5 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v19, v16, (__int16 *)((char *)v5 + 1693), &v18, &v17);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
      v13 = 1;
    else
      v13 = sub_22EBBA3E8(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 32), v12 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    sub_22EB48E64(v5);
  }
  return v13;
}

uint64_t sub_22ECB6660(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECB399C(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v19 = 0;
  v21 = v23;
  v22 = 0x800000000;
  v5 = 1;
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v21, &v19) & 1) == 0)
  {
    v6 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = v7;
    v9 = *a1;
    v10 = *(_DWORD *)(*a1 + 56);
    v11 = *(_QWORD *)(*a1 + 1296);
    v18 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    v12 = *a2;
    v13 = *a1;
    if ((v12 & 0x100000) != 0)
    {
      v14 = *(_QWORD *)((char *)&a2[2 * ((v12 >> 18) & 1) + 2 + 2 * a2[4]] + (v12 >> 24));
      sub_22E51A8D0(&v20, *(_QWORD *)(v9 + 72));
      v15 = *a1;
      *(_DWORD *)(v15 + 56) = v20 & ~HIDWORD(v14) | HIDWORD(v14) & v14;
      *(_QWORD *)(v15 + 1296) = v14;
      v13 = *a1;
    }
    v5 = sub_22EB33018(v13, 0, v6, v8, (uint64_t)v21, v22, a2[5], 0);
    *(_DWORD *)(v9 + 56) = v10;
    *(_QWORD *)(v9 + 1296) = v11;
    v16 = *(_QWORD *)(v9 + 80);
    *(_QWORD *)(v16 + 520) = v18;
    *(_DWORD *)(v16 + 528) = v18;
  }
  if (v21 != v23)
    free(v21);
  return v5;
}

uint64_t sub_22ECB6810(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECB399C(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB6660(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v6 = 1;
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v10, &v9) & 1) == 0)
  {
    sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
    v6 = sub_22EB33018(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, (uint64_t)v10, v11, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v10 != v12)
    free(v10);
  return v6;
}

uint64_t sub_22ECB6948(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[18];

  v58[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) != 0x2A00000000)
  {
    v14 = sub_22ECB399C(a1, *v4);
    if ((v14 & 1) != 0)
      return 1;
    v15 = *(unsigned int **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
    if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *(unsigned __int8 *)v15 == 163)
      v16 = sub_22ECCECF4(a1, v15, 1, 0);
    else
      v16 = sub_22ECB399C(a1, v15);
    v17 = v16;
    if ((v16 & 1) != 0)
      return 1;
    if (a2[4] == 2)
    {
      v18 = sub_22ECB399C(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
      if ((v18 & 1) != 0)
        return 1;
    }
    else
    {
      v18 = 0;
    }
    v20 = *a1;
    v21 = *a2;
    if ((v21 & 0x100000) != 0)
      v22 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v22 = 0;
    v23 = *(_DWORD *)(v20 + 56);
    v24 = *(_QWORD *)(v20 + 1296);
    v55 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    sub_22E51A8D0(&v56, *(_QWORD *)(v20 + 72));
    v25 = *a1;
    *(_DWORD *)(v25 + 56) = v56 & ~HIDWORD(v22) | HIDWORD(v22) & v22;
    *(_QWORD *)(v25 + 1296) = v22;
    v26 = a2[1] & 0x3F;
    v27 = a2[5];
    v28 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v29 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v30 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v31 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v32 = sub_22EFFBBCC(v28);
    if ((v26 - 37) >= 2)
      v31 = 0;
    if ((*(_DWORD *)v29 & 0x1C00) == 0xC00)
    {
      v33 = sub_22EFFBA54(v26);
      v34 = (_QWORD *)*a1;
      if ((v33 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v34, 0, v27, v33, v29, (uint64_t)v30);
LABEL_74:
        *(_DWORD *)(v20 + 56) = v23;
        *(_QWORD *)(v20 + 1296) = v24;
        v52 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v52 + 520) = v55;
        *(_DWORD *)(v52 + 528) = v55;
        return v10;
      }
      v35 = sub_22EB19A28(v34);
      if ((v35 & 1) != 0)
        goto LABEL_44;
      v29 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v30 || (*(_DWORD *)v30 & 0x1C00) != 0xC00)
    {
LABEL_35:
      if (v26 == 43)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v37 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v38 = *(_QWORD *)(v30[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v38 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v39 = *a1;
            sub_22F0D5A50((uint64_t)v32);
            v41 = sub_22EB2AFE4(v39, (uint64_t (**)())v29, v40, v30, v27);
LABEL_51:
            v10 = v41;
            goto LABEL_74;
          }
        }
      }
      else
      {
        if (v26 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_74;
          }
          v41 = sub_22ED1C570();
          goto LABEL_51;
        }
        v42 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0);
        v43 = *(_DWORD *)(v42 + 16);
        if (((v30 != 0) & ~v31) != 0)
        {
          if ((v43 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v45 = *(_QWORD *)(v30[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v45 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v26);
              v53 = sub_22EB2D0B8();
              if ((v53 & 1) != 0)
                v10 = 1;
              else
                v10 = v53;
              goto LABEL_74;
            }
          }
        }
        else if ((v43 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v26 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v29))
        {
          v44 = sub_22EFFA13C(v26, v31);
          v41 = sub_22EB2EA08(*a1, v27, v44, v29);
          goto LABEL_51;
        }
      }
      v56 = v58;
      v57 = 0x1000000000;
      v46 = *v32;
      v54 = v23;
      if (v46 == 211)
      {
        sub_22E3D0148((uint64_t)&v56, v32 + 64, &v32[8 * *((unsigned int *)v32 + 1) + 64]);
        v47 = (*(_DWORD *)v32 >> 19) & 1;
        v46 = *(_DWORD *)v32;
      }
      else
      {
        v48 = *((_QWORD *)v32 + 2);
        v47 = 0;
        if ((*(_DWORD *)(v48 + 28) & 0x7Eu) - 54 >= 4)
        {
          v58[0] = v48 | 3;
          LODWORD(v57) = 1;
        }
      }
      if (((v30 != 0) & ~v31) != 0)
      {
        if (v26 == 43)
        {
          if (v46 != 161)
            sub_22F0D5A50((uint64_t)v32);
          v23 = v54;
          v10 = sub_22ED18C00();
          goto LABEL_72;
        }
        v50 = sub_22EFFBA54(v26);
        v51 = sub_22ED1767C(*a1, v27, v50, (uint64_t)&v56, v29, (uint64_t)v30, v47, 1, 0);
        if ((v51 & 1) != 0)
          v10 = 1;
        else
          v10 = v51;
      }
      else
      {
        v49 = sub_22EFFA13C(v26, v31);
        v10 = sub_22ED1677C(*a1, v27, v49, &v56, v29, v47);
      }
      v23 = v54;
LABEL_72:
      if (v56 != v58)
        free(v56);
      goto LABEL_74;
    }
    v36 = sub_22EB19A28(*a1);
    if ((v36 & 1) == 0)
    {
      v30 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_35;
    }
LABEL_44:
    v10 = 1;
    goto LABEL_74;
  }
  v5 = sub_22ECB399C(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
  v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
  v56 = v58;
  v57 = 0x800000000;
  v10 = 1;
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v56, 0) & 1) == 0)
  {
    v11 = a2[7];
    v12 = *a1;
    if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
      v13 = sub_22EB296C0(v12, 0, v7, v9, v56, v57, v11);
    else
      v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v56, v57, v11, 0);
    v10 = v13;
  }
  if (v56 != v58)
    free(v56);
  return v10;
}

uint64_t sub_22ECB6FF0(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22ECBDAF0((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22ECB705C(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = sub_22ECBDAF0(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)a2);
  v7 = sub_22ECB399C(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22E95CFA4(*a1, *(unsigned int *)(a2 + 32), v5, *(unsigned int *)(a2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECB70D0(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;

  if (!sub_22ECCE764(a1, *(uint64_t **)(a2 + 24)))
    return 1;
  v4 = sub_22EFFB374((unsigned __int8 *)a2);
  if ((sub_22ECB399C(a1, v4) & 1) != 0)
    return 1;
  else
    return sub_22EBBC368();
}

uint64_t sub_22ECB715C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22ECBDAF0((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EC33F14(*a1, *(_DWORD *)(a2 + 32), *(_BYTE *)(a2 + 40) & 3, *(_DWORD *)(a2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECB71D4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22ECB399C(a1, v3);
}

uint64_t sub_22ECB7200(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB4A774(*a1, *(_DWORD *)(a2 + 40), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 44));
}

uint64_t sub_22ECB7284(_QWORD **a1, uint64_t a2)
{
  if (!sub_22ECBDAF0(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
    || (sub_22ECB399C(a1, *(_QWORD *)(a2 + 32)) & 1) != 0)
  {
    return 1;
  }
  sub_22F0D60E4(*(_QWORD *)(a2 + 32));
  return sub_22EB34874();
}

uint64_t sub_22ECB7314(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22ECCEA54((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22ECB7438(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22ECBDAF0(a1, *(uint64_t **)(a2 + 24));
  if (!v5)
    return 1;
  else
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 36));
}

uint64_t sub_22ECB74A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC4EF4(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22ECB74F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECC4EF4(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22ECB7544(uint64_t *a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __n128 v22;
  uint64_t v23;
  __int128 v24;
  void *v25[2];
  void *v26[2];
  _QWORD v27[32];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 2) & 4) != 0 && (v4 = *((_QWORD *)a2 + 4)) != 0)
  {
    v5 = sub_22ECC1D78(a1, v4, *((void **)a2 + 5), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v24 = v9;
  v26[0] = 0;
  if (sub_22E793870(a1 + 1, &v24, v26) && v26[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v26[0] + 1);
  if (!v9)
    return 1;
  v10 = *a2;
  if ((v10 & 0x100000) != 0)
    v11 = &a2[4 * ((v10 >> 18) & 1) + 8];
  else
    v11 = a2 + 4;
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 == *((_QWORD *)a2 + 2))
  {
    v13 = *(_QWORD *)v11;
    v12 = v9;
  }
  else
  {
    *(_QWORD *)&v24 = *(_QWORD *)v11;
    v26[0] = 0;
    if (sub_22E793870(a1 + 1, &v24, v26) && v26[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v12 = *((_QWORD *)v26[0] + 1);
    if (!v12)
      return 1;
    v13 = *((_QWORD *)a2 + 2);
  }
  v14 = a2[1];
  v15 = *((_QWORD *)a2 + 3);
  v22.n128_u64[0] = *(_QWORD *)(v13 + 40);
  v22.n128_u32[2] = v14;
  v23 = v15;
  if (v22.n128_u64[0])
  {
    sub_22ECC9CB0((__n128 *)v26, a1, &v22);
    v22 = *(__n128 *)v26;
    v23 = v27[0];
    if (!v26[0])
      return 1;
  }
  v26[0] = v27;
  v26[1] = (void *)0x800000000;
  v28 = 0;
  v16 = *a2;
  if ((v16 & 0x80000) == 0 || (v17 = &a2[4 * ((v16 >> 18) & 1) + 8 + 2 * ((v16 >> 20) & 1)], !*v17))
  {
    v19 = 0;
LABEL_28:
    v24 = 0u;
    *(_OWORD *)v25 = 0u;
    sub_22E8ACE30((uint64_t)&v24, v7, v8);
    v20 = sub_22EB24A3C(*a1, &v24, &v22, v9, v12, v19, 0);
    if (HIDWORD(v25[1]))
      free(v25[0]);
    goto LABEL_30;
  }
  v28 = *(_QWORD *)v17;
  v18 = (uint64_t)&v17[4 * ((v16 >> 19) & 1)];
  v19 = v26;
  if ((sub_22ECCEA54((uint64_t)a1, v18, v18 + 32 * v17[3]) & 1) == 0)
    goto LABEL_28;
  v20 = 1;
LABEL_30:
  if (v26[0] != v27)
    free(v26[0]);
  return v20;
}

uint64_t sub_22ECB77D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECC4EF4(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECBB6DC(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECB7844(uint64_t *a1, unsigned int *a2)
{
  return sub_22ECCECF4(a1, a2, 0, 0);
}

uint64_t sub_22ECB7850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  char *v58;
  uint64_t v59;
  _QWORD v60[12];

  v60[10] = *MEMORY[0x24BDAC8D0];
  v58 = (char *)v60;
  v59 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22ECB399C(a1, v4);
  if ((v5 & 1) != 0)
  {
    v10 = 1;
    goto LABEL_35;
  }
  v55 = v57;
  v56 = 0x400000000;
  v6 = *(_DWORD *)(a2 + 20);
  if (!((unsigned __int16)v6 >> 1))
    goto LABEL_30;
  v40 = v5;
  v7 = a2 + 32;
  v8 = *(_QWORD *)(a2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)v6 >> 1);
  v10 = 1;
  do
  {
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v18 = sub_22ECB399C(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v18 & 1) != 0)
        goto LABEL_33;
      v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_DWORD *)(v8 + 4);
      v48 = 1;
      v49 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v50 = v20;
      v51 = 0;
      v21 = sub_22E84B46C((uint64_t)&v58, (unint64_t)&v48, 1);
      v22 = &v58[40 * v59];
      v23 = *(_QWORD *)(v21 + 32);
      v24 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v22 = *(_OWORD *)v21;
      *((_OWORD *)v22 + 1) = v24;
      *((_QWORD *)v22 + 4) = v23;
      LODWORD(v59) = v59 + 1;
      v25 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v56;
      }
      *((_QWORD *)v55 + v25) = v19;
LABEL_22:
      LODWORD(v56) = v56 + 1;
      goto LABEL_23;
    }
    if (v11)
    {
      v26 = sub_22ECB399C(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v26 & 1) != 0)
        goto LABEL_33;
      v27 = sub_22ECB399C(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
      if ((v27 & 1) != 0)
        goto LABEL_33;
      v28 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
      v43 = 2;
      v30 = *(_QWORD *)(v8 + 4);
      v44 = v28;
      v45 = v27 & 0xFFFFFFFFFFFFFFFELL;
      v46 = v30;
      v47 = 0;
      v31 = sub_22E84B46C((uint64_t)&v58, (unint64_t)&v43, 1);
      v32 = &v58[40 * v59];
      v33 = *(_QWORD *)(v31 + 32);
      v34 = *(_OWORD *)(v31 + 16);
      *(_OWORD *)v32 = *(_OWORD *)v31;
      *((_OWORD *)v32 + 1) = v34;
      *((_QWORD *)v32 + 4) = v33;
      LODWORD(v59) = v59 + 1;
      v35 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = v56;
      }
      *((_QWORD *)v55 + v35) = v28;
      v36 = v56 + 1;
      LODWORD(v56) = v36;
      if (v36 >= HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v56;
      }
      *((_QWORD *)v55 + v36) = v29;
      goto LABEL_22;
    }
    v12 = *(_QWORD *)v8;
    if ((*(_QWORD *)v8 & 1) != 0)
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v37 = *(_QWORD *)(v12 + 40);
      if ((v37 & 7) != 0)
        v13 = 0;
      else
        v13 = v37 & 0xFFFFFFFFFFFFFFF8;
    }
    v52 = 0;
    v53 = v13;
    v54 = *(_QWORD *)(v8 + 8);
    v14 = sub_22E84B46C((uint64_t)&v58, (unint64_t)&v52, 1);
    v15 = &v58[40 * v59];
    v16 = *(_QWORD *)(v14 + 32);
    v17 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v14;
    *((_OWORD *)v15 + 1) = v17;
    *((_QWORD *)v15 + 4) = v16;
    LODWORD(v59) = v59 + 1;
    if (*(_QWORD *)v8 && (*(_QWORD *)v8 & 1) == 0)
    {
      v41 = *(_QWORD *)v8;
      v42 = 0;
      sub_22E793870((uint64_t *)(a1 + 8), &v41, &v42);
    }
LABEL_23:
    v8 += 24;
    v9 -= 24;
  }
  while (v9);
  v6 = *(_DWORD *)(a2 + 20);
  v5 = v40;
LABEL_30:
  v38 = sub_22EC38374(*(_QWORD **)a1, (uint64_t *)&v58, *(_DWORD *)(a2 + 16), v6 & 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  if ((v38 & 1) != 0)
    v10 = 1;
  else
    v10 = v38;
LABEL_33:
  if (v55 != v57)
    free(v55);
LABEL_35:
  if (v58 != (char *)v60)
    free(v58);
  return v10;
}

uint64_t sub_22ECB7BE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v13[3];
  int v14;
  uint64_t v15;
  int v16;

  v4 = *a1;
  v16 = 0;
  v15 = 0;
  v14 = 3;
  *(_QWORD *)v13 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v16, v13, (__int16 *)(v4 + 1693), &v15, &v14);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  sub_22EB48E64(v4);
  if ((v11 & 1) != 0)
    return 1;
  else
    return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v11 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24));
}

uint64_t sub_22ECB7D40(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  void *v18[2];

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v7 = sub_22F141A3C(v6, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39;
  v10 = *(_DWORD *)(a2 + 32);
  v11 = v7;
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v14 = v8;
  v15 = v10;
  sub_22EFC6D6C((uint64_t)&v16, v8);
  v12 = sub_22EC225CC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8), v11, v9, (uint64_t)&v17, 0, 0, (uint64_t)&v14, 0, 0, 0);
  if (HIDWORD(v18[1]))
    free(v18[0]);
  return v12;
}

uint64_t sub_22ECB7E44(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22ECB399C(a1, v3);
}

uint64_t sub_22ECB7E70(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22ECB399C(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22ECB7F04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22ECBDAF0((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22ECB399C(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22ECB812C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22ECB81F4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_22ECC1D24(a1, a2);
  if (v3 < 0x10)
    return 1;
  v5 = v3;
  v6 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
  return sub_22E5018F0(v6, v5);
}

uint64_t sub_22ECB8248(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22ECC4C60(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22ECB8460(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  size_t v54;
  unsigned __int32 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned __int8 *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unsigned __int8 v187[24];
  char v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  char v193;
  uint64_t v194;
  _DWORD *v195;
  void *v196;
  uint64_t v197;
  int v198[12];
  unsigned __int8 *v199;
  void *v200[2];
  _BYTE v201[32];
  unint64_t v202;
  int64x2_t v203;
  _QWORD v204[5];
  void *v205;
  uint64_t v206;
  _BYTE v207[352];
  unsigned __int8 *v208;
  __int128 v209;
  _BYTE v210[16];
  char v211;
  void *v212[2];
  _BYTE v213[32];
  unint64_t *v214;
  uint64_t v215;
  _QWORD v216[6];

  v2 = a2;
  v216[4] = *MEMORY[0x24BDAC8D0];
  v205 = v207;
  v206 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v206)
    {
      if (v6 <= HIDWORD(v206))
      {
        v10 = (char *)v205;
      }
      else
      {
        v196 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v205 != v207)
          free(v205);
        v205 = v10;
        HIDWORD(v206) = (_DWORD)v196;
        v7 = v206;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v205 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v206) = (unint64_t)v5 >> 4;
  }
  v214 = 0;
  v214 = (unint64_t *)sub_22F3C64D0(v2);
  v12 = (unint64_t *)sub_22F3C650C(v2);
  v13 = v214;
  if (v214 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v214;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v205 + 88 * (((uint64_t)v15 - v16) >> 4);
        v212[0] = 0;
        v18 = (_QWORD *)(*v214 & 0xFFFFFFFFFFFFFFF8);
        v212[0] = v18;
        v202 = (unint64_t)a1;
        v203.i64[0] = (uint64_t)v212;
        v203.i64[1] = (uint64_t)v17;
        v204[0] = &v214;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v196 = v198;
          v197 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v191 = 7;
          v192 = v22;
          sub_22EE7377C(v21, (uint64_t)&v191, (uint64_t)&v196);
          sub_22ECCEF1C((uint64_t)&v202);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v196 != v198)
            free(v196);
        }
        else
        {
          sub_22ECCEF1C((uint64_t)&v202);
        }
      }
      v13 = v214 + 2;
      v214 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v189 = *a1;
  LOBYTE(v190) = 1;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v186 = v23;
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v202 = (unint64_t)v204;
  v203 = vdupq_n_s64(0x20uLL);
  v204[4] = 0;
  v200[0] = v201;
  v200[1] = (void *)0x400000000;
  v194 = v29;
  v195 = v30;
  v214 = v216;
  v215 = 0x400000000;
  v212[0] = v213;
  v212[1] = (void *)0x400000000;
  v208 = v210;
  v209 = xmmword_22F44E350;
  v211 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v37 = v29;
    v38 = v29;
    while (1)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_52;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v38))
          v37 = v38;
        v38 = sub_22F115B7C(v38);
        if (!v38)
          goto LABEL_66;
      }
      else
      {
        if (v39 == 24)
          goto LABEL_65;
        if (v39 == 26)
        {
          if ((*(_BYTE *)(v38 + 23) & 0x10) != 0)
          {
LABEL_65:
            v37 = v38;
LABEL_66:
            sub_22F115668(v37);
            if (*(_BYTE *)(v194 + 16) == 25)
              v44 = 0;
            else
              v44 = (unsigned __int16)(*(_QWORD *)(v194 + 16) >> 38);
            v45 = (uint64_t)(v195 + 4);
            v46 = v194 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v47 = sub_22E47E270(v29);
            else
              v47 = 0;
            if ((sub_22ECC3D60(a1, v45, v44, v46, v47, (uint64_t)&v214, (uint64_t)v212, (uint64_t)&v208) & 1) != 0)
            {
              v36 = 0;
              goto LABEL_76;
            }
            v48 = *(_QWORD *)(v194 + 24);
            v49 = sub_22E47EE80(&v194);
            v40 = sub_22ECBDD18((_QWORD **)a1, (uint64_t)&v202, v48, v49, v50, v51);
            if (v40 >= 0x10)
              goto LABEL_216;
LABEL_75:
            v36 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v39) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v38 = sub_22F115B7C(v38);
      }
    }
  }
  v31 = *(_QWORD *)(v29 + 24);
  v32 = sub_22E47EE80(&v194);
  v35 = sub_22ECBDD18((_QWORD **)a1, (uint64_t)&v202, v31, v32, v33, v34);
  if (v35 < 0x10)
  {
    v36 = 0;
    goto LABEL_76;
  }
  v40 = v35;
  v41 = v194;
  for (i = v194; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v43 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v43 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v41 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_209;
    }
    if (v43 == 24)
      goto LABEL_208;
    if (v43 == 26)
      break;
    if (((1 << v43) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_208:
  v41 = i;
LABEL_209:
  sub_22F115668(v41);
  if (*(_BYTE *)(v194 + 16) == 25)
    v152 = 0;
  else
    v152 = (unsigned __int16)(*(_QWORD *)(v194 + 16) >> 38);
  v153 = (uint64_t)(v195 + 4);
  v154 = v194 + 40;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v155 = sub_22E47E270(v29);
  else
    v155 = 0;
  if ((sub_22ECC3D60(a1, v153, v152, v154, v155, (uint64_t)&v214, (uint64_t)v212, (uint64_t)&v208) & 1) != 0)
    goto LABEL_75;
LABEL_216:
  sub_22E4913B4(v29, (uint64_t)&v196);
  v156 = v29;
  while (2)
  {
    while (2)
    {
      if ((v156 & 0xF) != 0)
        goto LABEL_227;
      v157 = *(unsigned __int8 *)(*(_QWORD *)(v156 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v157 > 0x39)
      {
LABEL_222:
        if (sub_22F115668(v156))
          v29 = v156;
        v156 = sub_22F115B7C(v156);
        if (!v156)
          goto LABEL_229;
        continue;
      }
      break;
    }
    if (v157 == 24)
      break;
    if (v157 != 26)
    {
      if (((1 << v157) & 0x20000000200003CLL) != 0)
        goto LABEL_227;
      goto LABEL_222;
    }
    if ((*(_BYTE *)(v156 + 23) & 0x10) == 0)
    {
LABEL_227:
      v156 = sub_22F115B7C(v156);
      continue;
    }
    break;
  }
  v29 = v156;
LABEL_229:
  v158 = sub_22F115668(v29);
  if ((sub_22ECC4744(a1, v158, v198, (uint64_t)v200, &v193) & 1) != 0)
  {
    v36 = 0;
    goto LABEL_76;
  }
  if (!v211 || (sub_22F24FB88(&v208, v215), !v208))
  {
    if (v199)
      v199 = 0;
    goto LABEL_238;
  }
  v159 = v199;
  if (v199)
  {
    if (*(_BYTE *)(v194 + 16) == 25)
    {
      if ((_DWORD)v215)
        goto LABEL_236;
    }
    else
    {
      v175 = (unsigned __int16)(*(_QWORD *)(v194 + 16) >> 38);
      if (v175 != v215)
        goto LABEL_236;
      if ((unsigned __int16)(*(_QWORD *)(v194 + 16) >> 38))
      {
        v176 = v208;
        while (*v159 == *v176)
        {
          ++v159;
          ++v176;
          if (!--v175)
            goto LABEL_237;
        }
        goto LABEL_236;
      }
    }
  }
  else
  {
LABEL_236:
    v193 = 1;
  }
LABEL_237:
  v199 = v208;
LABEL_238:
  v160 = sub_22EE80544((_QWORD *)*a1, v40, v214, v215, 0, 0, (uint64_t)&v196);
  v36 = 0;
  if (v160 >= 0x10)
  {
    v161 = v160;
    v162 = sub_22E8BB094((uint64_t)&v202, v160);
    v164 = 0;
    v165 = v195;
    *v163 = *v195;
    v163[1] = v165[1];
    v163[2] = v165[2];
    if (v194)
    {
      v166 = 0;
      if (*(_BYTE *)(v194 + 16) == 26)
      {
        v167 = *(_QWORD *)(v194 + 16);
        if ((v167 & 0x3C0000000000000) != 0)
        {
          v168 = (unsigned __int16)(v167 >> 38);
          if (*(_QWORD *)(v194 + 16) == 25)
            v168 = 0;
          v166 = *(_QWORD *)&v165[2 * v168 + 4];
          v164 = v166 & 0xFFFFFFFF00000000;
          v166 = v166;
        }
        else
        {
          v164 = 0;
          v166 = 0;
        }
      }
    }
    else
    {
      v166 = 0;
    }
    if (v162)
    {
      if (*(_BYTE *)(v162 + 16) == 26)
      {
        v169 = *(_QWORD *)(v162 + 16);
        if ((v169 & 0x3C0000000000000) != 0)
        {
          v170 = v166 | v164;
          if (*(_QWORD *)(v162 + 16) == 25)
            v171 = 0;
          else
            v171 = (unsigned __int16)(v169 >> 38);
          *(_QWORD *)&v163[2 * v171 + 4] = v170;
          v165 = v195;
        }
      }
    }
    v163[3] = v165[3];
    if (*(_BYTE *)(v162 + 16) != 25)
    {
      v172 = *(_QWORD *)(v162 + 16);
      if ((v172 & 0x3FFFC000000000) != 0)
      {
        v173 = 0;
        v174 = (unsigned __int16)(v172 >> 38);
        do
        {
          *(_QWORD *)&v163[2 * v173 + 4] = *((_QWORD *)v212[0] + v173);
          ++v173;
        }
        while (v174 != v173);
      }
    }
    v36 = v161;
  }
LABEL_76:
  if (v208 != v210)
    free(v208);
  if (v212[0] != v213)
    free(v212[0]);
  if (v214 != v216)
    free(v214);
  if (v36 >= 0x10)
  {
    v53 = *(_QWORD *)(*a1 + 88);
    v54 = v203.i64[0] - v203.i64[1];
    v55 = v203.i32[0] - v203.i32[2];
    if (v203.i32[0] == v203.i32[2])
      v55 = sub_22F11598C(v36);
    v52 = (unint64_t *)sub_22E3CD3D4(v53 + 2032, v55 + 8, 3);
    *v52 = v36;
    memcpy(v52 + 1, (const void *)(v202 + v203.i64[1]), v54);
  }
  else
  {
    v52 = 0;
  }
  if (v200[0] != v201)
    free(v200[0]);
  if ((_QWORD *)v202 != v204 && v202)
    MEMORY[0x2348A0E84]();
  if (v36 < 0x10)
  {
    v56 = 1;
    goto LABEL_199;
  }
  v57 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v57 & 4) != 0 && (v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v184 = sub_22ECB399C(a1, v58);
  else
    v184 = 0;
  v59 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v59 > 3 || v59 == 2)
    goto LABEL_122;
  v61 = *(_QWORD *)(*a1 + 216);
  v62 = *(_WORD *)(v61 + 8) & 0x7F;
  if (v62 == 16 || v62 == 83)
    goto LABEL_123;
  v63 = -40;
  if ((*(_WORD *)(v61 + 8) & 0x7Fu) > 0x46)
  {
    if (v62 == 71)
    {
      v63 = -56;
    }
    else if (v62 != 81)
    {
LABEL_114:
      if (v62 - 52 < 6)
      {
        v63 = -72;
      }
      else
      {
        v63 = -48;
        if (v62 - 33 < 5)
          v63 = -64;
      }
    }
  }
  else
  {
    if (v62 > 0x18)
      goto LABEL_113;
    if (((1 << v62) & 0x1066) == 0)
    {
      if (v62 == 24)
      {
        v63 = -48;
      }
      else
      {
LABEL_113:
        if (v62 != 70)
          goto LABEL_114;
        v63 = -64;
      }
    }
  }
  v64 = *(_QWORD *)(v61 + v63 + 16);
  v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
  if ((v64 & 4) != 0)
    v65 = (_QWORD *)*v65;
  if ((sub_22EFC7ADC((unint64_t)v65) & 1) == 0)
LABEL_123:
    v66 = 2;
  else
LABEL_122:
    v66 = 0;
  v67 = (void *)sub_22F3C61E8(v2);
  v68 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v52, v66, (*(_DWORD *)v2 >> 18) & 3);
  v196 = v67;
  sub_22F25E108(a1 + 1, &v196)[1] = v68;
  v69 = *a1;
  v70 = *(_QWORD *)(v2 + 16);
  v71 = sub_22F3C6220(v2);
  v72 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 16))(v71) >> 32;
  if (*(_BYTE *)(*v52 + 16) == 25)
    v73 = 0;
  else
    v73 = (unsigned __int16)(*(_QWORD *)(*v52 + 16) >> 38);
  v74 = sub_22F3C6220(v2);
  v75 = sub_22F3366E8(v69, (uint64_t)v68, v70, v52, v72, v52 + 3, v73, *(_DWORD *)(v74 + 80) >> 30, v184 & 0xFFFFFFFFFFFFFFFELL);
  v76 = v186;
  *(_QWORD *)(v186 + 1488) = v75;
  sub_22F3C6220(v2);
  v196 = (void *)sub_22F3C6220(v2);
  v185 = a1 + 1;
  sub_22F25E108(a1 + 1, &v196)[1] = v75;
  v77 = *a1;
  v187[0] = 0;
  v188 = 0;
  v183 = v75;
  sub_22EC52964(v77, v68, v75, v187);
  if (v188)
    v188 = 0;
  v78 = *a1;
  v79 = v75;
  v80 = v75 + 72;
  if (!v75)
    v80 = 0;
  v182 = *(_QWORD *)(v78 + 216);
  v81 = *(_QWORD *)(v78 + 3200);
  *(_QWORD *)(v78 + 3200) = 0;
  v178 = *(_QWORD *)(v78 + 10288);
  v179 = v81;
  v180 = *(_DWORD *)(v78 + 1944);
  v181 = *(_DWORD *)(v78 + 2192);
  *(_QWORD *)(v78 + 216) = v80;
  *(_DWORD *)(v78 + 1944) = *(_DWORD *)(v78 + 1904);
  *(_DWORD *)(v78 + 2192) = *(_DWORD *)(v78 + 1960);
  v82 = *(_QWORD *)(v2 + 16);
  v83 = (*(_DWORD *)v2 >> 18) & 3;
  v84 = *(_DWORD *)(v2 + 24);
  v85 = (*(_DWORD *)v2 >> 20) & 1;
  v86 = (*(_DWORD *)v2 >> 21) & 1;
  v87 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v78, v186, v79, v82, v83, v84, v85, v86, v87);
  v88 = sub_22F3C64D0(v2);
  v89 = sub_22F3C650C(v2);
  if (v88 == v89)
  {
    *(_DWORD *)(v186 + 1508) = *(_DWORD *)(v186 + 1272);
    v90 = *a1;
    LODWORD(v214) = 6;
    v196 = 0;
    LODWORD(v212[0]) = 3;
    v202 = *(unsigned int *)(v90 + 1704);
    sub_22EB4DDB8(v90 + 3688, (int *)&v214, (int *)&v202, (__int16 *)(v90 + 1693), (uint64_t *)&v196, (int *)v212);
    v91 = *(unsigned int *)(v90 + 3696);
    v92 = v91 - 2;
    v93 = *(_QWORD *)(v90 + 3688);
    v94 = *(_DWORD *)(v93 + 576 * (v91 - 2));
    if (v94 == 5)
    {
      *(_BYTE *)(v93 + 576 * v91 - 4) = *(_BYTE *)(v93 + 576 * v92 + 572);
      v96 = 1;
      v95 = v182;
    }
    else
    {
      v95 = v182;
      if (v94 == 2)
      {
        *(_BYTE *)(v93 + 576 * v91 - 4) = 1;
        v96 = *(_BYTE *)(v93 + 576 * v92 + 573) != 0;
      }
      else
      {
        v96 = 0;
        *(_BYTE *)(v93 + 576 * v91 - 4) = 0;
      }
    }
    v97 = v93 + 576 * v91;
    *(_BYTE *)(v97 - 3) = v96;
    *(_WORD *)(v90 + 1693) = 0;
    if (*(_DWORD *)(v90 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v90 + 1776), (llvm::SmallPtrSetImplBase *)(v97 - 560));
      sub_22EAEAE08(v90 + 1840, (uint64_t *)(v97 - 496));
    }
  }
  else
  {
    v98 = v89;
    v99 = 0;
    do
    {
      v100 = *(_QWORD *)v88;
      if ((*(_QWORD *)v88 & 1) != 0)
        break;
      if ((v100 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v88 + 8), 1, 1, 0, (v100 >> 1) & 1);
      }
      else if (v100 >= 4)
      {
        v101 = v99;
        if (sub_22F3C6428(v2, (_QWORD *)v88))
        {
          v108 = sub_22F3C64D0(v2);
          v109 = (char *)v205 + 88 * ((v88 - v108) >> 4);
          v110 = *(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8;
          v196 = v198;
          v197 = 0x400000000;
          v111 = *((unsigned int *)v109 + 4);
          if ((_DWORD)v111)
          {
            v115 = (_QWORD *)*((_QWORD *)v109 + 1);
            v177 = &v115[2 * v111];
            while ((*v115 & 1) == 0)
            {
              v116 = v115[1];
              if (v116 < 0x10)
                break;
              v117 = *(_QWORD *)(v110 + 40);
              v118 = (v117 & 7) != 0 ? 0 : v117 & 0xFFFFFFFFFFFFFFF8;
              v119 = sub_22EC5313C(*a1, *(_DWORD *)(v110 + 24), v116, *(_DWORD *)v109, v118, (*(_BYTE *)(v110 + 96) >> 5) & 3, *v115 & 0xFFFFFFFFFFFFFFFELL);
              if (!v119)
                break;
              v120 = v119;
              v121 = v197;
              if (v197 >= (unint64_t)HIDWORD(v197))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v121 = v197;
              }
              *((_QWORD *)v196 + v121) = v120;
              LODWORD(v197) = v197 + 1;
              sub_22F336D2C(*a1, v186, v120);
              v115 += 2;
              if (v115 == v177)
                goto LABEL_163;
            }
LABEL_188:
            if (v196 != v198)
              free(v196);
            *(_DWORD *)(v186 + 1508) = *(_DWORD *)(v186 + 1272);
            v140 = *a1;
            LODWORD(v214) = 6;
            v196 = 0;
            LODWORD(v212[0]) = 3;
            v202 = *(unsigned int *)(v140 + 1704);
            sub_22EB4DDB8(v140 + 3688, (int *)&v214, (int *)&v202, (__int16 *)(v140 + 1693), (uint64_t *)&v196, (int *)v212);
            v141 = *(unsigned int *)(v140 + 3696);
            v142 = v141 - 2;
            v143 = *(_QWORD *)(v140 + 3688);
            v144 = *(_DWORD *)(v143 + 576 * (v141 - 2));
            v95 = v182;
            if (v144 == 5)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = *(_BYTE *)(v143 + 576 * v142 + 572);
              v145 = 1;
            }
            else if (v144 == 2)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = 1;
              v145 = *(_BYTE *)(v143 + 576 * v142 + 573) != 0;
            }
            else
            {
              v145 = 0;
              *(_BYTE *)(v143 + 576 * v141 - 4) = 0;
            }
            v146 = v143 + 576 * v141;
            *(_BYTE *)(v146 - 3) = v145;
            *(_WORD *)(v140 + 1693) = 0;
            if (*(_DWORD *)(v140 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v140 + 1776), (llvm::SmallPtrSetImplBase *)(v146 - 560));
              sub_22EAEAE08(v140 + 1840, (uint64_t *)(v146 - 496));
            }
            goto LABEL_195;
          }
LABEL_163:
          if ((v101 & 1) != 0)
            goto LABEL_188;
          v112 = a1;
          v113 = v2;
          v202 = v110;
          v114 = *(_QWORD *)v196;
          sub_22F25E108(v185, &v202)[1] = v114;
          if (v196 != v198)
            free(v196);
          v99 = 0;
          v2 = v113;
          a1 = v112;
          v76 = v186;
        }
        else
        {
          v102 = *(_QWORD *)v88;
          if ((*(_QWORD *)v88 & 2) != 0)
            v103 = 1;
          else
            v103 = 2;
          if ((*(_QWORD *)v88 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v104 = 2;
          else
            v104 = v103;
          if (v102 < 4)
            v104 = 2;
          if ((v102 & 1) != 0)
            v105 = 0;
          else
            v105 = v104;
          v106 = *(_DWORD *)(v88 + 12);
          v107 = v102 & 0xFFFFFFFFFFFFFFF8;
          v202 = v102 & 0xFFFFFFFFFFFFFFF8;
          v196 = 0;
          if (sub_22E793870(v185, &v202, &v196)
            && v196 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v107 = *((_QWORD *)v196 + 1);
          }
          if (v107 && (*(_BYTE *)(v107 + 28) & 0x80) == 0)
          {
            sub_22F32FC30(*a1, v107, *(_DWORD *)(v88 + 8), v105, v106);
            v99 = v101;
          }
          else
          {
            v99 = 1;
          }
        }
      }
      v88 += 16;
    }
    while (v88 != v98);
    *(_DWORD *)(v76 + 1508) = *(_DWORD *)(v76 + 1272);
    v122 = *a1;
    LODWORD(v214) = 6;
    v196 = 0;
    LODWORD(v212[0]) = 3;
    v202 = *(unsigned int *)(v122 + 1704);
    sub_22EB4DDB8(v122 + 3688, (int *)&v214, (int *)&v202, (__int16 *)(v122 + 1693), (uint64_t *)&v196, (int *)v212);
    v123 = *(unsigned int *)(v122 + 3696);
    v124 = v123 - 2;
    v125 = *(_QWORD *)(v122 + 3688);
    v126 = *(_DWORD *)(v125 + 576 * (v123 - 2));
    if (v126 == 5)
    {
      *(_BYTE *)(v125 + 576 * v123 - 4) = *(_BYTE *)(v125 + 576 * v124 + 572);
      v127 = 1;
      v95 = v182;
    }
    else
    {
      v95 = v182;
      if (v126 == 2)
      {
        *(_BYTE *)(v125 + 576 * v123 - 4) = 1;
        v127 = *(_BYTE *)(v125 + 576 * v124 + 573) != 0;
      }
      else
      {
        v127 = 0;
        *(_BYTE *)(v125 + 576 * v123 - 4) = 0;
      }
    }
    v128 = v125 + 576 * v123;
    *(_BYTE *)(v128 - 3) = v127;
    *(_WORD *)(v122 + 1693) = 0;
    if (!*(_DWORD *)(v122 + 1848))
    {
      if ((v99 & 1) == 0)
        goto LABEL_184;
      goto LABEL_195;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v122 + 1776), (llvm::SmallPtrSetImplBase *)(v128 - 560));
    sub_22EAEAE08(v122 + 1840, (uint64_t *)(v128 - 496));
    if ((v99 & 1) != 0)
    {
LABEL_195:
      LOBYTE(v190) = 0;
      goto LABEL_196;
    }
  }
LABEL_184:
  sub_22F3C638C(v2);
  v134 = sub_22ECC5410(a1, *(__n128 **)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32), 0, v129, v130, v131, v132, v133);
  LOBYTE(v190) = 0;
  if ((v134 & 1) != 0)
  {
LABEL_196:
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v179;
      *(_QWORD *)(v78 + 10288) = v178;
      *(_DWORD *)(v78 + 1944) = v180;
      *(_DWORD *)(v78 + 2192) = v181;
    }
    v147 = *(unsigned int *)(v2 + 16);
    v56 = 1;
    sub_22F336DD4(*a1, v147, 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v196, v186);
    v135 = v134 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v183, v135, 1);
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v179;
      *(_QWORD *)(v78 + 10288) = v178;
      *(_DWORD *)(v78 + 1944) = v180;
      *(_DWORD *)(v78 + 2192) = v181;
    }
    v136 = *a1;
    v137 = *(unsigned int *)(v2 + 16);
    sub_22F0D60E4(v135);
    sub_22EC54548(v136, v137, v138, (uint64_t)&v196);
    v56 = v139;
    sub_22F2F43D0((uint64_t)&v196);
  }
LABEL_199:
  sub_22F2F446C((uint64_t)&v189);
  v148 = (char *)v205;
  if ((_DWORD)v206)
  {
    v149 = 88 * v206;
    do
    {
      v150 = *(char **)&v148[v149 - 80];
      if (&v148[v149 - 64] != v150)
        free(v150);
      v149 -= 88;
    }
    while (v149);
    v148 = (char *)v205;
  }
  if (v148 != v207)
    free(v148);
  return v56;
}

uint64_t sub_22ECB995C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22ECC1D78((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22ECB9A68(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(unsigned int *)(a2 + 32);
  v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EB296C0(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, 0, &v8, 1, v6);
}

uint64_t sub_22ECB9AE8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22ECB9BD4(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22ECB399C(a1, v3);
}

uint64_t sub_22ECB9BE8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB2AC58(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22ECB9C6C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  unsigned __int32 v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  __int128 v42;
  void *v43[2];
  void *v44[2];
  _BYTE v45[129];
  uint64_t v46;
  void *v47[2];
  void *v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  __n128 v53;
  void *v54;
  __int128 v55;
  int v56;
  __int16 v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECB399C(a1, *((_QWORD *)a2 + 2));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a2;
  if ((*a2 & 0x80000) != 0 && (v6 = *((_QWORD *)a2 + 6)) != 0)
  {
    v7 = sub_22ECC1D78(a1, v6, *((void **)a2 + 7), 0, 0);
    if (!v7)
      return 1;
    v9 = v7;
    v10 = v8;
    v5 = *a2;
    if ((*a2 & 0x100000) != 0)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
    {
LABEL_6:
      v11 = a2[6 * ((v5 >> 19) & 1) + 14];
      goto LABEL_9;
    }
  }
  v11 = 0;
LABEL_9:
  v12 = (_QWORD *)*((_QWORD *)a2 + 3);
  v47[0] = v12;
  v44[0] = 0;
  if (sub_22E793870(a1 + 1, v47, v44) && v44[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v44[0] + 1);
  if (!v12)
    return 1;
  v13 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    v15 = *((_QWORD *)a2 + 8);
    v14 = *((_QWORD *)a2 + 3);
  }
  else
  {
    v14 = *((_QWORD *)a2 + 3);
    v15 = v14;
  }
  v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (v14 == (v15 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v16 = (unint64_t)v12;
    goto LABEL_25;
  }
  v47[0] = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
  v44[0] = 0;
  if (sub_22E793870(a1 + 1, v47, v44) && v44[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v16 = *((_QWORD *)v44[0] + 1);
  if (!v16)
    return 1;
  v13 = *a2;
LABEL_25:
  v44[0] = v45;
  v44[1] = (void *)0x800000000;
  v46 = 0;
  if ((v13 & 0x100000) != 0)
  {
    v19 = &a2[6 * ((v13 >> 19) & 1)];
    v22 = v19[12];
    v20 = v19 + 12;
    v21 = v22;
    if (v22)
    {
      LODWORD(v46) = v21;
      HIDWORD(v46) = v20[1];
      v23 = (uint64_t)&v20[4 * ((v13 >> 20) & 1)];
      if ((sub_22ECCEA54((uint64_t)a1, v23, v23 + 32 * v20[3]) & 1) != 0)
        goto LABEL_32;
    }
  }
  v24 = *a1;
  sub_22F0D4E74(*((_QWORD *)a2 + 2));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v24 + 112), *(_DWORD **)(v24 + 72));
  v27 = (void *)*((_QWORD *)a2 + 4);
  v28 = a2[10];
  v40.n128_u64[0] = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
  v40.n128_u32[2] = v28;
  v41 = v27;
  if (!v40.n128_u64[0])
    goto LABEL_30;
  sub_22ECC9CB0((__n128 *)v47, a1, &v40);
  v40 = *(__n128 *)v47;
  v41 = v48[0];
  if (!v47[0])
  {
LABEL_32:
    v17 = 1;
  }
  else
  {
LABEL_30:
    v29 = *a2;
    if ((v29 & 0x100000) != 0)
    {
      if (a2[6 * ((v29 >> 19) & 1) + 12])
        v30 = v44;
      else
        v30 = 0;
    }
    else
    {
      v30 = 0;
    }
    v31 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v29 >> 18) & 1);
    if (v12[5])
    {
      v42 = 0u;
      *(_OWORD *)v43 = 0u;
      sub_22E8ACE30((uint64_t)&v42, v9, v10);
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
      v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if ((v29 & 0x40000) != 0
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 39)
      {
        v17 = 1;
      }
      else
      {
        v34 = (_QWORD *)*a1;
        v35 = v11;
        v47[0] = 0;
        v47[1] = &v48[1];
        v48[0] = (void *)0x800000000;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = v34;
        v53 = v40;
        v54 = v41;
        v55 = xmmword_22F463A40;
        v56 = 16842752;
        v57 = 0;
        v58 = 0;
        sub_22EC56024((uint64_t)v47);
        v36 = *(unsigned int *)(v16 + 28);
        v37 = v48[0];
        if (LODWORD(v48[0]) >= HIDWORD(v48[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v37 = v48[0];
        }
        *((_QWORD *)v47[1] + v37) = (v36 >> 13) & 3 | v16;
        ++LODWORD(v48[0]);
        LODWORD(v47[0]) = 2;
        sub_22EC561E4((uint64_t)v47);
        v17 = sub_22EC24AB8(*a1, v32, v33, v26, (v29 >> 18) & 1, (uint64_t *)&v42, v35, 0, (uint64_t)v47, (uint64_t)v30, 0, 0, 0);
        if (HIBYTE(v56))
        {
          if (LODWORD(v47[0]) == 5)
          {
            sub_22EC64D18(v52, (uint64_t)v47);
          }
          else if (v50 && (*(_DWORD *)(v52[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v52, (uint64_t)v47);
          }
        }
        if (v49)
        {
          v39 = sub_22EC6CBD0(v49);
          MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
        }
        if (v47[1] != &v48[1])
          free(v47[1]);
      }
      if (HIDWORD(v43[1]))
        free(v43[0]);
    }
    else
    {
      v38 = (unint64_t)sub_22EB24398(*a1, v31 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
      if ((v38 & 1) != 0)
      {
        v17 = 1;
      }
      else
      {
        *(_OWORD *)v47 = 0u;
        *(_OWORD *)v48 = 0u;
        v17 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v29 >> 18) & 1, v26, v47, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v40);
        if (HIDWORD(v48[1]))
          free(v48[0]);
      }
    }
  }
  if (v44[0] != v45)
    free(v44[0]);
  return v17;
}

uint64_t sub_22ECBA190(uint64_t *a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22ECB399C(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22ECBDAF0((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22ECC4C60(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
    {
LABEL_25:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_21;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_21:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_25;
  }
  return 1;
}

uint64_t sub_22ECBA45C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = sub_22ECB399C(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = sub_22ECB399C(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
    v10 = sub_22ECB399C(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22EB29E14(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v12, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 56));
}

uint64_t sub_22ECBA53C(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22ECB399C(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22ECBA6C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char v45;
  __int128 v46[4];
  void *v47;
  uint64_t v48;
  _QWORD v49[34];

  v2 = a2;
  v49[32] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a2 + 28);
  memset(v46, 0, sizeof(v46));
  v47 = v49;
  v48 = 0x400000000;
  sub_22E8BB974((uint64_t)&v47, v3, v46);
  if ((_DWORD)v3)
  {
    v4 = 0;
    LOBYTE(v5) = 0;
    v6 = v2 + 32;
    v42 = v2 + 32;
    while (1)
    {
      v45 = v5;
      v7 = *(_QWORD *)(v6 + 8 * v4);
      v8 = *(_QWORD *)(v7 + 40);
      v9 = (v8 & 7) != 0 ? 0 : v8 & 0xFFFFFFFFFFFFFFF8;
      v10 = (char *)v47 + 64 * v4;
      *(_QWORD *)v10 = v9;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v7 + 24);
      v11 = *(_DWORD *)(v7 + 24);
      v12 = *(_QWORD *)(v7 + 56);
      if ((v12 & 4) == 0)
        break;
      v33 = v12 & 0xFFFFFFFFFFFFFFF8;
      v13 = v3;
      if (*(_DWORD *)(v33 + 16))
        v34 = ***(_DWORD ***)(v33 + 24);
      else
        v34 = *(_DWORD *)(v7 + 64);
      if (v11 != v34)
      {
        v14 = *(uint64_t **)(v33 + 32);
LABEL_9:
        v15 = sub_22ECBDAF0((_QWORD **)a1, v14);
        v16 = sub_22ECC1D24((uint64_t)a1, *(_QWORD *)(v7 + 48));
        v17 = sub_22EE7D030(*a1, v16, (uint64_t)v15);
        *((_QWORD *)v47 + 8 * v4 + 2) = v17;
      }
LABEL_10:
      v18 = v2;
      v19 = v6 + 8 * *(unsigned int *)(v2 + 28);
      v20 = (3 * v4);
      v21 = (v20 + 1);
      v22 = *(_QWORD *)(v19 + 8 * v21);
      v43 = (v20 + 2);
      v23 = *(_QWORD *)(v19 + 8 * v43);
      v24 = sub_22ECB399C(a1, *(_QWORD *)(v19 + 8 * v20));
      v25 = sub_22ECB399C(a1, v22);
      v26 = sub_22ECB399C(a1, v23);
      v3 = v13;
      if ((v45 & 1) != 0)
        goto LABEL_21;
      v27 = *(_QWORD *)(v7 + 56);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)(v28 + 32);
      if (v28)
      {
        if (*((_QWORD *)v47 + 8 * v4 + 2) < 0x10uLL || (v24 & 1) != 0)
          goto LABEL_21;
LABEL_20:
        if (((v25 | v26) & 1) != 0)
          goto LABEL_21;
        LOBYTE(v5) = 0;
        v30 = v47;
        v31 = (char *)v47 + 64 * v4;
        *((_QWORD *)v31 + 3) = v24 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v31 + 4) = v25 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v31 + 5) = v26 & 0xFFFFFFFFFFFFFFFELL;
        v6 = v42;
        *((_DWORD *)v31 + 12) = *(_DWORD *)(v42
                                          + 8 * *(unsigned int *)(v18 + 28)
                                          + 8 * (3 * *(_DWORD *)(v18 + 28))
                                          + 4 * v20);
        v32 = *(_DWORD *)(v42
                        + 8 * *(unsigned int *)(v18 + 28)
                        + 8 * (3 * *(_DWORD *)(v18 + 28))
                        + 4 * v21);
        v2 = v18;
        *((_DWORD *)v31 + 13) = v32;
        *((_DWORD *)v31 + 14) = *(_DWORD *)(v42
                                          + 8 * *(unsigned int *)(v18 + 28)
                                          + 8 * (3 * *(_DWORD *)(v18 + 28))
                                          + 4 * v43);
        if (++v4 == v13)
          goto LABEL_31;
      }
      else
      {
        if ((v24 & 1) == 0)
          goto LABEL_20;
LABEL_21:
        ++v4;
        v5 = 1;
        v2 = v18;
        v6 = v42;
        if (v4 == v13)
          goto LABEL_35;
      }
    }
    v13 = v3;
    if (v11 == *(_DWORD *)(v7 + 64))
      goto LABEL_10;
    v14 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  v30 = v47;
LABEL_31:
  v35 = sub_22EB2C3A8((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v30, v48);
  v5 = v35;
  if (v35 >= 2 && (_DWORD)v3)
  {
    v36 = (uint64_t *)(v2 + 32);
    v37 = (uint64_t *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v39 = *v36++;
      v38 = v39;
      v40 = *v37++;
      *(_QWORD *)&v46[0] = v38;
      sub_22F25E108(a1 + 1, v46)[1] = v40;
      --v3;
    }
    while (v3);
  }
LABEL_35:
  if (v47 != v49)
    free(v47);
  return v5;
}

uint64_t sub_22ECBAA14(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_22ECBDAF0((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v4)
    return sub_22EC2A5E0(*a1, *(_DWORD *)(a2 + 24), v4, *(_DWORD *)(a2 + 28));
  else
    return 1;
}

uint64_t sub_22ECBAA5C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v8 = *(unsigned __int8 *)(a2 + 32);
  v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v11 = sub_22E3CB704(*(llvm::StringMapImpl **)((*a1)[11] + 15192), "isa", 3uLL);
  v12 = v7;
  sub_22EFC6D6C((uint64_t)&v13, v11);
  v9 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v6, v8, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
  if (HIDWORD(v15[1]))
    free(v15[0]);
  return v9;
}

uint64_t sub_22ECBAB34(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v12 = *(_QWORD *)(v6 + 40);
  v13 = v7;
  sub_22EFC6D6C((uint64_t)&v14, v12);
  v9 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v7, v8 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
  v10 = v9;
  if ((v8 & 2) != 0 && v9 >= 2)
    *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
  if (HIDWORD(v16[1]))
    free(v16[0]);
  return v10;
}

uint64_t sub_22ECBAC14(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  void *v37;
  uint64_t v38;
  _QWORD v39[10];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v37 = v39;
  v38 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v37, &v33) & 1) != 0)
    goto LABEL_20;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 < 2)
  {
    if ((v5 & 0x1000000) != 0)
    {
      v6 = (uint64_t *)(a2 + 16);
      if (*(_QWORD *)(a2 + 16))
      {
        v34 = v36;
        v35 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v34);
        v7 = *(_DWORD *)(a2 + 24);
        if ((v7 & 0xFE0000) == 0x20000)
          v8 = *(unsigned int *)(a2 + 28);
        else
          v8 = 0;
        v21 = (uint64_t *)(a2 + 16);
        if ((v7 & 0x1000000) != 0)
          v21 = (uint64_t *)(*v6 + 40);
        v22 = *v21;
        v23 = (int *)v34;
        v24 = v35;
        v25 = sub_22F3C7A10(a2);
        if ((v7 & 0x1000000) != 0)
          v27 = *v6;
        else
          v27 = 0;
        v30 = *(unsigned int *)(a2 + 32);
        v31 = (_QWORD *)*a1;
        if ((*(_BYTE *)(v27 + 58) & 2) != 0)
          v32 = sub_22EC2DA20(v31, 0, v25, v8, v22, v27, v30);
        else
          v32 = sub_22EC2F730(v31, 0, v25, v8, v22, v27, v30, v26, v23, v24, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v37, v38, 0, 0);
        v15 = v32;
        v29 = v34;
        if (v34 != v36)
          goto LABEL_42;
        goto LABEL_21;
      }
    }
LABEL_20:
    v15 = 1;
    goto LABEL_21;
  }
  if (BYTE2(v5))
  {
    if ((v5 & 0xFF0000) == 0x10000)
      v10 = *(_QWORD *)(a2 + 40);
    else
      v10 = 0;
    v11 = sub_22ECB399C(a1, v10);
    if ((v11 & 1) != 0)
      goto LABEL_20;
    v34 = v36;
    v35 = 0x1000000000;
    sub_22F3C78D4(a2, (uint64_t)&v34);
    v12 = (_QWORD *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 27) & 1) != 0)
    {
      v13 = *v12;
      v12 = (_QWORD *)(*v12 + 40);
    }
    else
    {
      v13 = 0;
    }
    v28 = sub_22EC2DA20(*a1, v11 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8), 0, *v12, v13, *(unsigned int *)(a2 + 32));
  }
  else
  {
    if ((v5 & 0xFF0000) != 0)
      v9 = 0;
    else
      v9 = *(uint64_t **)(a2 + 40);
    v14 = sub_22ECBDAF0((_QWORD **)a1, v9);
    if (!v14)
      goto LABEL_20;
    v17 = (uint64_t *)v14;
    v34 = v36;
    v35 = 0x1000000000;
    sub_22F3C78D4(a2, (uint64_t)&v34);
    v19 = (uint64_t *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 27) & 1) != 0)
    {
      v20 = *v19;
      v19 = (uint64_t *)(*v19 + 40);
    }
    else
    {
      v20 = 0;
    }
    v28 = sub_22EC2F730((_QWORD *)*a1, v17, *v17, 0, *v19, v20, *(_DWORD *)(a2 + 32), v18, (int *)v34, v35, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v37, v38, 0, 0);
  }
  v15 = v28;
  v29 = v34;
  if (v34 != v36)
LABEL_42:
    free(v29);
LABEL_21:
  if (v37 != v39)
    free(v37);
  return v15;
}

uint64_t sub_22ECBAF68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = 0x800000000;
  v6 = 0;
  if ((sub_22ECC4C60(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v7, &v6) & 1) != 0)
    v4 = 1;
  else
    v4 = sub_22EC28BF4((_QWORD *)*a1, *(_QWORD *)(a2 + 20), (uint64_t *)v7, v8);
  if (v7 != v9)
    free(v7);
  return v4;
}

uint64_t sub_22ECBB030(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EC27DFC(*a1, *(_QWORD *)(a2 + 32), (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22ECBB078(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v36[2];
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  int v45;
  char v46;
  char v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[34];

  v2 = a2;
  v50[32] = *MEMORY[0x24BDAC8D0];
  v48 = v50;
  v49 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v6 = (uint64_t *)(a2 + 48);
    v7 = (unint64_t)&loc_22F44E000;
    v8 = a2;
    while (1)
    {
      v10 = *(v6 - 1);
      v9 = *v6;
      v11 = v7 & 0xFFFFFF00FFFFFF00;
      v12 = *(_DWORD *)(v2 + 16);
      if ((v12 & 0x80000000) == 0)
        goto LABEL_4;
      v18 = v8 + 16 * (v12 & 0x7FFFFFFF);
      v19 = *(_DWORD *)(v18 + 40);
      LODWORD(v18) = *(_DWORD *)(v18 + 44);
      v20 = v7 & 0xFFFFFF0000000000 | (v18 - 1) | 0x100000000;
      if ((_DWORD)v18)
        v11 = v20;
      if (v19)
      {
        v43 = &v45;
        v44 = 0x200000000;
        v21 = *a1;
        v41 = 7;
        v42 = v10;
        sub_22EE7377C(v21, (uint64_t)&v41, (uint64_t)&v43);
        v22 = *a1;
        v39 = 7;
        v40 = v9;
        sub_22EE7377C(v22, (uint64_t)&v39, (uint64_t)&v43);
        v23 = *a1;
        v24 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v25 = sub_22ECB399C(a1, v10);
        if ((v25 & 1) != 0 || (v26 = sub_22ECB399C(a1, v9), (v26 & 1) != 0))
        {
          v27 = 0;
        }
        else
        {
          v36[0] = v25 & 0xFFFFFFFFFFFFFFFELL;
          v36[1] = v26 & 0xFFFFFFFFFFFFFFFELL;
          v37 = v19;
          v38 = v11;
          v27 = 1;
          v28 = (_OWORD *)sub_22E78DF7C((uint64_t)&v48, (unint64_t)v36, 1);
          v29 = (char *)v48 + 32 * v49;
          v30 = v28[1];
          *v29 = *v28;
          v29[1] = v30;
          LODWORD(v49) = v49 + 1;
        }
        *(_DWORD *)(v23 + 11992) = v24;
        if (v43 != &v45)
          free(v43);
        v2 = a2;
        if (!v27)
        {
LABEL_19:
          v33 = 1;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_4:
        v13 = sub_22ECB399C(a1, *(v6 - 1));
        if ((v13 & 1) != 0)
          goto LABEL_19;
        v14 = sub_22ECB399C(a1, v9);
        if ((v14 & 1) != 0)
          goto LABEL_19;
        v43 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
        v44 = v14 & 0xFFFFFFFFFFFFFFFELL;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v15 = (_OWORD *)sub_22E78DF7C((uint64_t)&v48, (unint64_t)&v43, 1);
        v16 = (char *)v48 + 32 * v49;
        v17 = v15[1];
        *v16 = *v15;
        v16[1] = v17;
        LODWORD(v49) = v49 + 1;
      }
      v8 += 8;
      v6 += 2;
      v7 = v11;
      if (!--v5)
      {
        v31 = v48;
        v32 = v49;
        goto LABEL_21;
      }
    }
  }
  v32 = 0;
  v31 = v50;
LABEL_21:
  v33 = sub_22EC297B0((_QWORD *)*a1, *(_QWORD *)(v2 + 20), (uint64_t)v31, v32);
LABEL_22:
  if (v48 != v50)
    free(v48);
  return v33;
}

uint64_t sub_22ECBB31C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22ECB399C(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 16);
      v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if ((v6 & 4) != 0)
      {
        v10 = (*a1)[11];
        v11 = *(_QWORD *)(v10 + 16872);
        v12 = v6 & 0xFFFFFFFFFFFFFFF8;
        v13 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
        v14 = *(_DWORD *)(v2 + 32);
        v2 = sub_22E3CD3D4(v10 + 2032, 48, 3);
        sub_22F2F4590(v2, v12, v13, v11, 1, 3, v14, v7);
      }
      else
      {
        v8 = *(_DWORD *)(v2 + 32);
        v18 = 0u;
        *(_OWORD *)v19 = 0u;
        v15 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 40);
        v16 = v8;
        sub_22EFC6D6C((uint64_t)&v17, v15);
        v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v8, 0, (uint64_t)&v18, 0, 0, (uint64_t)&v15, 0, 0, 0);
        if (HIDWORD(v19[1]))
          free(v19[0]);
      }
    }
  }
  return v2;
}

uint64_t sub_22ECBB440(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3341E8(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
}

uint64_t sub_22ECBB4B0(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[13];

  v27[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22ECBDAF0((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v25 = v27;
  v26 = 0x400000000;
  v6 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (unint64_t *)(a2 + 48);
    while (1)
    {
      v23 = 1;
      v22 = *(v8 - 1);
      v9 = *v8;
      v10 = *v8 & 3;
      if ((v10 - 1) >= 2)
      {
        if ((_DWORD)v10 != 3)
        {
          v14 = sub_22ECB399C(a1, *(_QWORD *)(a2 + 40 + 16 * *(unsigned int *)(a2 + 32) + 8 * (v9 >> 2)));
          if ((v14 & 1) != 0)
          {
            v20 = 1;
            goto LABEL_19;
          }
          v23 = 1;
          v24 = v14 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v23 = 0;
        v11 = v9 & 3;
        v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        if (v11 != 1)
          goto LABEL_8;
        v13 = *(_QWORD *)(v12 + 40);
        if ((v13 & 7) == 0)
        {
          v12 = v13 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v24 = v12;
          if (!v12)
            goto LABEL_14;
LABEL_13:
          v15 = sub_22E4EF088((uint64_t)&v25, (unint64_t)&v22, 1);
          v16 = (char *)v25 + 24 * v26;
          v17 = *(_OWORD *)v15;
          *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v16 = v17;
          v7 = v26 + 1;
          LODWORD(v26) = v26 + 1;
        }
      }
LABEL_14:
      v8 += 2;
      if (!--v6)
      {
        v18 = (unsigned int *)v25;
        v19 = v7;
        goto LABEL_18;
      }
    }
  }
  v19 = 0;
  v18 = (unsigned int *)v27;
LABEL_18:
  v20 = sub_22EB49A78(*a1, *(_DWORD *)(a2 + 16), v5, v18, v19, *(_DWORD *)(a2 + 20));
LABEL_19:
  if (v25 != v27)
    free(v25);
  return v20;
}

uint64_t sub_22ECBB678(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22ECB399C(a1, a2[2]);
}

uint64_t sub_22ECBB6DC(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22ECC1D78(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22ECCEA54((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

