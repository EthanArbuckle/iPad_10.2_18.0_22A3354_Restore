uint64_t sub_22EDC2728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  BOOL v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 0;
  v7 = a4;
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)a3;
  v13 = *v6;
  if (*v6)
  {
    v14 = *(_DWORD *)(v13 + 16);
    if ((v14 & 0xFE) == 0x28)
    {
      if ((v14 & 0x100000) != 0)
      {
        do
        {
LABEL_5:
          while (1)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v13)
              break;
            v15 = *(_DWORD *)(v13 + 16);
            if ((v15 & 0xFE) != 0x28)
              break;
            if ((v15 & 0x100000) == 0)
              goto LABEL_14;
          }
          v13 = sub_22F10CF48(v13);
        }
        while ((*(_DWORD *)(v13 + 16) & 0x100000) != 0);
      }
      goto LABEL_14;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v13 = sub_22F10CF48(v13);
    if (v13)
    {
      if ((*(_DWORD *)(v13 + 16) & 0x100000) != 0)
        goto LABEL_5;
LABEL_14:
      v7 = *(_QWORD *)(v13 + 32);
    }
  }
  v16 = *v5;
  if (*v5)
  {
    v17 = *(_DWORD *)(v16 + 16);
    if ((v17 & 0xFE) == 0x28)
    {
      if ((v17 & 0x100000) != 0)
      {
        do
        {
LABEL_18:
          while (1)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v16)
              break;
            v18 = *(_DWORD *)(v16 + 16);
            if ((v18 & 0xFE) != 0x28)
              break;
            if ((v18 & 0x100000) == 0)
              goto LABEL_27;
          }
          v16 = sub_22F10CF48(v16);
        }
        while ((*(_DWORD *)(v16 + 16) & 0x100000) != 0);
      }
      goto LABEL_27;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v16 = sub_22F10CF48(v16);
    if (v16)
    {
      if ((*(_DWORD *)(v16 + 16) & 0x100000) != 0)
        goto LABEL_18;
LABEL_27:
      v4 = *(_QWORD *)(v16 + 32);
    }
  }
  v19 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (v19 && (v20 = *(_DWORD *)(v19 + 16), (v20 & 0xFE) == 0x28))
  {
    if ((v20 & 0x100000) != 0)
    {
      do
      {
LABEL_31:
        while (1)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v19)
            break;
          v21 = *(_DWORD *)(v19 + 16);
          if ((v21 & 0xFE) != 0x28)
            break;
          if ((v21 & 0x100000) == 0)
            goto LABEL_40;
        }
        v19 = sub_22F10CF48(v19);
      }
      while ((*(_DWORD *)(v19 + 16) & 0x100000) != 0);
    }
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_62;
    v19 = sub_22F10CF48(v19);
    if (!v19)
      goto LABEL_62;
    if ((*(_DWORD *)(v19 + 16) & 0x100000) != 0)
      goto LABEL_31;
  }
LABEL_40:
  v12 = *(_QWORD *)(v19 + 32);
  v48 = 0;
  v22 = v4 & 0xFFFFFFFFFFFFFFF0;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1
    && sub_22ECFAE0C(a1, v4, v7, &v48))
  {
    return 0;
  }
  v23 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v23 & 8) != 0)
  {
    v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v26 = v25 | (v23 | v4) & 7;
  v27 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v27 & 8) != 0)
  {
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  v30 = v29 | (v27 | v7) & 7;
  v47 = v30 | v28;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
  {
    if ((v30 & 0x1C0) == 0x80)
    {
      if ((v26 & 0x1C0) == 0)
        goto LABEL_53;
    }
    else if ((v30 & 0x1C1) == 0x41)
    {
LABEL_53:
      v26 = v30 & 0x1C0 | v26 & 0xFFFFFE3F;
    }
  }
  if (v26 != (_DWORD)v30 || HIDWORD(v24) != HIDWORD(v28))
  {
    if (!sub_22E95F24C((unsigned int *)&v47, v24 | v26))
      goto LABEL_89;
    v31 = *(_QWORD *)v22;
    if ((*(_BYTE *)(*(_QWORD *)v22 + 8) & 0xF) != 0)
      v31 = (unint64_t)sub_22F10D2BC(v4);
    v32 = v31 & 0xFFFFFFFFFFFFFFF0;
    if ((v47 & 0xCFFFFFFF8) != 0)
    {
      v49 = v47;
      v33 = sub_22E491354((unsigned int *)&v49, v32);
      v4 = sub_22EF5DBC4(v11, v33, v49);
    }
    else
    {
      v4 = v47 & 7 | v32;
    }
  }
LABEL_62:
  v49 = 0;
  v34 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v35 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  v36 = v35 > 0x27;
  v37 = (1 << v35) & 0x8180000000;
  if (!v36 && v37 != 0)
  {
    v39 = sub_22ECFD738(a1, v4, v7, 0, &v48);
    result = 0;
    if (v39)
      return result;
    if ((sub_22ECFAE0C(a1, v4, v7, &v49) & 1) != 0)
      return 0;
  }
  v41 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if ((v41 && *(_BYTE *)(v41 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v41 = sub_22F10CF48(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && ((v42 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v42 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v42 = sub_22F10CF48(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0))) != 0))
  {
    v43 = *v34;
    if (*v34 && *(_BYTE *)(v43 + 16) == 39)
    {
      v44 = *v34;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
        goto LABEL_84;
      v45 = sub_22F10CF48(v43);
      if (!v45)
        goto LABEL_84;
      v44 = v45;
      v43 = *v34;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(v43) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 45)
    {
      v12 = *(_QWORD *)(v41 + 32);
      v7 = *(_QWORD *)(v42 + 32);
      v4 = *(_QWORD *)(v44 + 32);
      v34 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
    }
  }
LABEL_84:
  if (*(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
    && sub_22EDCCBC4(v12)
    && (sub_22EAAB1B8(a1, *(unsigned int *)(a2 + 8), v4, v7) & 1) != 0)
  {
    return 0;
  }
LABEL_89:
  *(_DWORD *)(a2 + 176) = 1;
  *(_QWORD *)(a2 + 184) = v7;
  v46 = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 200) = 1;
  *(_QWORD *)(a2 + 208) = v46;
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a3 + 12);
  if (*(_BYTE *)(a3 + 8))
    return 9;
  else
    return 8;
}

uint64_t sub_22EDC2CBC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void **a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t i;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  void **v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  _QWORD v75[8];
  int v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  uint64_t v83;
  unint64_t v84;
  _QWORD v85[2];
  int v86;
  unsigned int *v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t *v90;
  void **v91;
  void **v92;
  char *v93;
  void **v94;
  char *v95;
  uint64_t *v96;
  _QWORD *v97;
  void **v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE v101[64];
  _BYTE *v102;
  uint64_t v103;
  _BYTE v104[192];
  _QWORD *v105;
  uint64_t v106;
  _BYTE v107[64];
  _BYTE *v108;
  uint64_t v109;
  _BYTE v110[128];
  _QWORD *v111;
  uint64_t v112;
  llvm *v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t vars0;

  v121 = *MEMORY[0x24BDAC8D0];
  v83 = a4;
  v84 = a5;
  v82[0] = a9;
  v82[1] = a10;
  v81 = a2;
  v80 = a3;
  v79 = a8;
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return 1;
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(_BYTE *)(v18 + 16) == 26;
  else
    v19 = 0;
  if (v19
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v18 = sub_22F10CF48(v18)) != 0)
  {
    v20 = (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38);
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
  v22 = *(_QWORD *)(a2 + 48);
  if (v22 && (*(_DWORD *)(v22 + 28) & 0x27F) == 0x235)
    v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v22 + 40) & 0xFFFFFFFFFFFFFFF8) + 16) + 56) + 12) & 0x1FFFFFFF;
  v78 = v21;
  if (a5 < sub_22EFC0EB8(v17) && !a8)
    return 12;
  if (a5)
    v26 = a8;
  else
    v26 = 0;
  if (a5 + v26 > v20)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = *(_BYTE *)(v27 + 16) == 26;
    else
      v28 = 0;
    if (!v28)
      v27 = sub_22F10CF48(v27);
    v29 = *(_QWORD *)(v27 + 16);
    v30 = 8 * (unsigned __int16)(v29 >> 38);
    while (v30)
    {
      v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v27 + 32 + v30) & 0xFFFFFFFFFFFFFFF0) + 16);
      v30 -= 8;
      if (v31 == 36)
        goto LABEL_31;
    }
    if ((v29 & 0x800000000000000) == 0)
      return 11;
  }
LABEL_31:
  v111 = a1;
  v112 = 1;
  for (i = 2; i != 10; i += 2)
    (&v111)[i] = (_QWORD *)-4096;
  v115 = (char *)&v117;
  v116 = 0x100000000;
  v118 = a1[1503];
  v119 = 0;
  v120 = 0;
  a1[1503] = &v111;
  v77 = *(_QWORD *)(a2 + 56);
  v108 = v110;
  v109 = 0x400000000;
  v105 = v107;
  v106 = 0x800000000;
  v76 = 0;
  if (a3)
  {
    LODWORD(v75[0]) = 0;
    v33 = *(_DWORD *)(a7 + 8);
    v87 = (unsigned int *)v75;
    v88 = a1;
    v89 = &v81;
    v90 = &v80;
    v91 = (void **)&v108;
    v92 = (void **)&v105;
    v93 = (char *)a7;
    LODWORD(v99) = v33;
    v102 = a1;
    v103 = (uint64_t)&v99;
    v34 = *(_QWORD *)off_255E04E38(&off_255E04E38, v23);
    if (!v34)
      goto LABEL_38;
    v35 = (uint64_t)&vars0 - v34;
    if (v35 < 0)
      v35 = -v35;
    if ((unint64_t)(v35 - 8126464) < 0x40001)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v102, (uint64_t)sub_22EDFF9F8, (uint64_t)&v87);
    else
LABEL_38:
      sub_22EDFF9F8((uint64_t)&v87);
    v24 = LODWORD(v75[0]);
    if (LODWORD(v75[0]))
      goto LABEL_107;
    v70 = a6;
    v76 = v109;
  }
  else
  {
    v70 = a6;
    if (v20)
    {
      v36 = 0;
      v37 = 0;
      do
      {
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 120) + v36) + 48);
        if (v37 >= HIDWORD(v106))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v37 = v106;
        }
        v105[v37] = v38;
        v37 = v106 + 1;
        LODWORD(v106) = v106 + 1;
        v36 += 8;
      }
      while (8 * v20 != v36);
    }
  }
  v102 = v104;
  v103 = 0x800000000;
  v75[0] = a1;
  v75[1] = &v81;
  v75[2] = &v77;
  v75[3] = &v78;
  v75[4] = &v83;
  v75[5] = a7;
  v75[6] = &v108;
  v75[7] = &v102;
  sub_22EDFD35C((uint64_t)&v108, *(_DWORD *)(v77 + 12) & 0x1FFFFFFF);
  v99 = v101;
  v100 = 0x800000000;
  v40 = v106;
  if ((_DWORD)v106)
  {
    v41 = 0;
    v42 = 0;
    LODWORD(v24) = 11;
    while (1)
    {
      v43 = v105[v41];
      v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
      if (v44)
      {
        if (*(_BYTE *)(v44 + 16) == 36)
          break;
      }
      if (v84 <= v42)
        goto LABEL_97;
      v53 = v100;
      if (v100 >= (unint64_t)HIDWORD(v100))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v53 = v100;
      }
      v99[v53] = v43;
      LODWORD(v100) = v100 + 1;
      v54 = sub_22EDC3520((uint64_t)v75, v43, v42);
      if ((_DWORD)v54)
      {
        v24 = v54;
        goto LABEL_103;
      }
      v42 = (v42 + 1);
      ++v41;
LABEL_94:
      if (v41 == v40)
        goto LABEL_97;
    }
    v45 = *(_QWORD *)(v44 + 32);
    v73 = 1;
    v74 = v45;
    sub_22EDC36A0((uint64_t)&v87, (uint64_t)a1, v77, (uint64_t)&v108, a7, (uint64_t)&v73);
    if (++v41 == v40 || BYTE4(v92))
    {
      if (v84 > v42)
      {
        while (!BYTE4(v92) || v92 > v91)
        {
          v56 = v100;
          if (v100 >= (unint64_t)HIDWORD(v100))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v56 = v100;
          }
          v99[v56] = v45;
          LODWORD(v100) = v100 + 1;
          v57 = sub_22EDC3520((uint64_t)v75, v45, v42);
          if ((_DWORD)v57)
          {
            v59 = 1;
            v24 = v57;
            goto LABEL_90;
          }
          sub_22EDC3850((unint64_t)&v87);
          v42 = (v42 + 1);
          v50 = v42;
          if (v84 <= v42)
            goto LABEL_86;
        }
      }
    }
    else
    {
      v46 = *(_DWORD *)(v44 + 20);
      if (v46)
        v47 = BYTE4(v91) == 0;
      else
        v47 = 0;
      if (v47 && v46 >= 2 && v84 > v42)
      {
        v49 = ~(v46 != 0) + v46;
        LODWORD(v50) = v42;
        do
        {
          v51 = v100;
          if (v100 >= (unint64_t)HIDWORD(v100))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v51 = v100;
          }
          v99[v51] = v45;
          LODWORD(v100) = v100 + 1;
          sub_22EDC3850((unint64_t)&v87);
          v50 = (v50 + 1);
          v52 = v49-- != 0;
        }
        while (v52 && v84 > v50);
        goto LABEL_86;
      }
    }
    v50 = v42;
LABEL_86:
    v58 = sub_22EDC39BC((uint64_t)&v87);
    v59 = v58 != 0;
    if (v58)
      v24 = v58;
    else
      v24 = v24;
    v42 = v50;
LABEL_90:
    if ((_DWORD)v94)
    {
      v60 = v93;
      v61 = 224 * v94;
      do
      {
        v62 = *((_QWORD *)v60 + 27);
        v63 = *(_DWORD *)v60;
        v60 += 224;
        *(_QWORD *)(v90[29] + 8 * v63) = v62;
        v61 -= 224;
      }
      while (v61);
    }
    sub_22EDCD438(&v93);
    if (v59)
      goto LABEL_103;
    goto LABEL_94;
  }
LABEL_97:
  v72 = a1[27];
  v71 = 0;
  v64 = *(_DWORD *)(a7 + 8);
  v87 = &v71;
  v88 = a1;
  v89 = &v81;
  v90 = (uint64_t *)&v108;
  v91 = (void **)&v76;
  v92 = v70;
  v93 = (char *)a7;
  v94 = (void **)&v102;
  v95 = &v79;
  v96 = &v72;
  v97 = v82;
  v98 = (void **)&v99;
  v86 = v64;
  v85[0] = a1;
  v85[1] = &v86;
  v65 = *(_QWORD *)off_255E04E38(&off_255E04E38, v39);
  if (!v65)
    goto LABEL_101;
  v66 = (uint64_t)&vars0 - v65;
  if (v66 < 0)
    v66 = -v66;
  if ((unint64_t)(v66 - 8126464) < 0x40001)
    sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v85, (uint64_t)sub_22EDFFA3C, (uint64_t)&v87);
  else
LABEL_101:
    sub_22EDFFA3C((uint64_t)&v87);
  v24 = v71;
LABEL_103:
  if (v99 != (_QWORD *)v101)
    free(v99);
  if (v102 != v104)
    free(v102);
LABEL_107:
  if (v105 != (_QWORD *)v107)
    free(v105);
  if (v108 != v110)
    free(v108);
  if (!(_BYTE)v119)
  {
    if ((_DWORD)v116)
    {
      v67 = 0;
      v68 = 8 * v116;
      do
      {
        v69 = *(void ***)&v115[v67];
        if (v69)
        {
          if (*v69 != v69 + 2)
            free(*v69);
          MEMORY[0x2348A0E9C](v69, 0x1080C40ED926357);
        }
        v67 += 8;
      }
      while (v68 != v67);
    }
    v111[1503] = v118;
    LOBYTE(v119) = 1;
  }
  if (v115 != (char *)&v117)
    free(v115);
  if ((v112 & 1) == 0)
    llvm::deallocate_buffer(v113, (void *)(16 * v114));
  return v24;
}

uint64_t sub_22EDC3520(uint64_t a1, unint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;

  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    return 0;
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 56);
  v8 = *(_DWORD *)(v7 + 12);
  v9 = v8 & 0x1FFFFFFF;
  if ((v8 & 0x1FFFFFFF) > 0x39)
  {
    v10 = operator new();
    *(_QWORD *)v10 = v10 + 16;
    *(_QWORD *)(v10 + 8) = 0x600000000;
    sub_22E47EDD0(v10, (v9 + 63) >> 6, 0);
    *(_DWORD *)(v10 + 64) = v9;
  }
  else
  {
    v10 = ((unint64_t)v8 << 58) | 1;
  }
  v18 = v10;
  v11 = v6[11];
  v12 = sub_22EFE90A8(v7);
  sub_22EDCB2BC(v11, a2, 1, v12, &v18);
  if ((v18 & 1) == 0)
  {
    v13 = *(unsigned int *)(v18 + 8);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)v18;
      v15 = 8 * v13;
      while (!*v14)
      {
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_9;
      }
      sub_22E54C5D0((void ***)&v18);
      return sub_22EDC83BC(v6, **(_QWORD **)(a1 + 16), **(_DWORD **)(a1 + 24), a2, *(unsigned __int8 **)(**(_QWORD **)(a1 + 32) + 8 * a3), *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 56), 0, a3);
    }
LABEL_9:
    sub_22E54C5D0((void ***)&v18);
    return 0;
  }
  v16 = (v18 >> 1) & ~(-1 << (v18 >> 58));
  sub_22E54C5D0((void ***)&v18);
  if (!v16)
    return 0;
  return sub_22EDC83BC(v6, **(_QWORD **)(a1 + 16), **(_DWORD **)(a1 + 24), a2, *(unsigned __int8 **)(**(_QWORD **)(a1 + 32) + 8 * a3), *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 48), *(_QWORD *)(a1 + 56), 0, a3);
}

uint64_t sub_22EDC36A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int i;
  char *v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];
  void **v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[13];

  v25[12] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  v14 = *(_OWORD *)a6;
  v15 = *(_QWORD *)(a6 + 16);
  v7 = *(_DWORD *)(a3 + 12);
  v8 = v7 & 0x1FFFFFFF;
  if ((v7 & 0x1FFFFFFF) > 0x39)
  {
    v9 = operator new();
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 0x600000000;
    sub_22E47EDD0(v9, (v8 + 63) >> 6, 0);
    *(_DWORD *)(v9 + 64) = v8;
  }
  else
  {
    v9 = ((unint64_t)v7 << 58) | 1;
  }
  v22 = (void **)v9;
  v23 = v25;
  v24 = 0x400000000;
  v21[0] = &v22;
  v21[1] = a1;
  v21[2] = &v23;
  v20[0] = a1;
  v20[1] = v21;
  v18 = v14;
  v19 = v15;
  sub_22EDCCED0((uint64_t)v20, &v18);
  v10 = *(_DWORD *)(a1 + 56);
  for (i = v24; (_DWORD)v24; i = v24)
  {
    v12 = (char *)v23 + 24 * i;
    v16 = *(_OWORD *)(v12 - 24);
    v17 = *((_QWORD *)v12 - 1);
    LODWORD(v24) = i - 1;
    sub_22EDCCED0((uint64_t)v20, &v16);
  }
  if (v23 != v25)
    free(v23);
  sub_22E54C5D0(&v22);
  sub_22EDCCC30(a1, v10);
  return a1;
}

unint64_t sub_22EDC3850(unint64_t result)
{
  unint64_t v1;
  int v2;
  unsigned int *v3;
  unsigned int *v4;
  __int128 v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  unsigned int v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _OWORD v22[2];

  v1 = result;
  v2 = *(_DWORD *)(result + 56);
  if (v2)
  {
    v3 = *(unsigned int **)(result + 48);
    v4 = &v3[56 * v2];
    v5 = 0uLL;
    do
    {
      v6 = **(_QWORD **)(v1 + 16) + 32 * *v3;
      v7 = v3[20];
      if (v7 || *(_DWORD *)v6)
      {
        while (1)
        {
          v8 = *(_DWORD *)(v1 + 32);
          if (v7 >= v8)
            break;
          v22[0] = v5;
          v22[1] = v5;
          result = sub_22E5C425C((uint64_t)(v3 + 18), (unint64_t)v22);
          v5 = 0uLL;
          v9 = (_OWORD *)(*((_QWORD *)v3 + 9) + 32 * v3[20]);
          v10 = *(_OWORD *)(result + 16);
          *v9 = *(_OWORD *)result;
          v9[1] = v10;
          v7 = v3[20] + 1;
          v3[20] = v7;
        }
        if (v7 == v8)
        {
          result = sub_22E5C425C((uint64_t)(v3 + 18), v6);
          v5 = 0uLL;
          v11 = (_OWORD *)(*((_QWORD *)v3 + 9) + 32 * v3[20]);
          v12 = *(_OWORD *)(result + 16);
          *v11 = *(_OWORD *)result;
          v11[1] = v12;
          v13 = v3[20] + 1;
          v3[20] = v13;
        }
        else
        {
          v14 = (_OWORD *)(*((_QWORD *)v3 + 9) + 32 * v8);
          v15 = *(_OWORD *)v6;
          *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)(v6 + 9);
          *v14 = v15;
          v13 = v3[20];
        }
        v16 = (*(_DWORD *)(v1 + 32) + 1);
        if (v13 <= v16)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v18 = 0;
        }
        else
        {
          v17 = *((_QWORD *)v3 + 9) + 32 * v16;
          v18 = *(_QWORD *)v17;
          v19 = *(_QWORD *)(v17 + 8);
          v20 = *(_QWORD *)(v17 + 16);
          v21 = *(_BYTE *)(v17 + 24);
        }
        *(_QWORD *)v6 = v18;
        *(_QWORD *)(v6 + 8) = v19;
        *(_QWORD *)(v6 + 16) = v20;
        *(_BYTE *)(v6 + 24) = v21;
      }
      v3 += 56;
    }
    while (v3 != v4);
  }
  ++*(_DWORD *)(v1 + 32);
  return result;
}

uint64_t sub_22EDC39BC(uint64_t a1)
{
  int v1;
  unsigned int *v3;
  unsigned int *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  _BYTE v34[25];
  _BYTE v35[32];
  _BYTE v36[25];

  v1 = *(_DWORD *)(a1 + 56);
  if (!v1)
    return 0;
  v3 = *(unsigned int **)(a1 + 48);
  v4 = &v3[56 * v1];
  while (1)
  {
    v5 = (_OWORD *)(**(_QWORD **)(a1 + 16) + 32 * *v3);
    v6 = *(_OWORD *)(v3 + 2);
    *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)v3 + 17);
    *v5 = v6;
    sub_22EDFD35C((uint64_t)(v3 + 18), *(unsigned int *)(a1 + 32));
    *(_DWORD *)v36 = 0;
    *(_QWORD *)&v36[8] = 0;
    v36[24] = 0;
    v7 = v3[20];
    if ((_DWORD)v7)
    {
      v8 = 3 * v7;
      v9 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 24 * v7, 3);
      v10 = v9;
      do
      {
        *(_DWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        v10 += 24;
      }
      while (v10 != v9 + 8 * v8);
      v7 = *((_QWORD *)v3 + 9);
      v11 = v3[20];
      if ((_DWORD)v11)
      {
        v12 = 32 * v11;
        v13 = v9;
        do
        {
          v14 = *(_OWORD *)v7;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v13 = v14;
          v13 += 24;
          v7 += 32;
          v12 -= 32;
        }
        while (v12);
        LODWORD(v11) = v3[20];
        v7 = *((_QWORD *)v3 + 9);
      }
      LOBYTE(v7) = *(_BYTE *)(v7 + 24);
    }
    else
    {
      LODWORD(v11) = 0;
      v9 = 0;
    }
    *(_DWORD *)v36 = 8;
    *(_DWORD *)&v36[4] = v11;
    *(_QWORD *)&v36[8] = v9;
    v36[24] = v7;
    v15 = *((_QWORD *)v3 + 27);
    if (!v15)
      break;
    v17 = *(_DWORD *)(v15 + 40);
    v16 = (_OWORD *)(v15 + 40);
    if (v17)
      goto LABEL_16;
    *v16 = *(_OWORD *)v36;
    v18 = *(_OWORD *)&v36[9];
LABEL_33:
    *(_OWORD *)((char *)v16 + 9) = v18;
    v3 += 56;
    if (v3 == v4)
      return 0;
  }
  v16 = (_OWORD *)(**(_QWORD **)(a1 + 16) + 32 * *v3);
LABEL_16:
  v19 = v16[1];
  *(_OWORD *)v35 = *v16;
  *(_OWORD *)&v35[16] = v19;
  sub_22EDCC2FC(v34, *(_QWORD *)(*(_QWORD *)a1 + 88), (__int128 *)v35, (__int128 *)v36);
  if (!*(_DWORD *)v34)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *v3 + 16);
LABEL_36:
    if ((*(_DWORD *)(v20 + 28) & 0x7F) == 0x26)
      v24 = v20;
    else
      v24 = 0;
    if (v24)
    {
      v25 = v24 & 0xFFFFFFFFFFFFFFF9;
    }
    else
    {
      if ((*(_DWORD *)(v20 + 28) & 0x7F) == 0x3B)
        v26 = v20;
      else
        v26 = 0;
      if (v26)
        v25 = v26 & 0xFFFFFFFFFFFFFFF9 | 2;
      else
        v25 = v20 & 0xFFFFFFFFFFFFFFF9 | 4;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168) = v25;
    v29 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(v29 + 176) = *(_OWORD *)v35;
    *(_QWORD *)(v29 + 192) = *(_QWORD *)&v35[16];
    v30 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(v30 + 200) = *(_OWORD *)v36;
    *(_QWORD *)(v30 + 216) = *(_QWORD *)&v36[16];
    return 5;
  }
  if (v3[10])
  {
    *(_OWORD *)v35 = *(_OWORD *)v34;
    *(_OWORD *)&v35[9] = *(_OWORD *)&v34[9];
    *(_OWORD *)v36 = *(_OWORD *)(v3 + 10);
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v3 + 49);
    sub_22EDCC2FC(v33, *(_QWORD *)(*(_QWORD *)a1 + 88), (__int128 *)v35, (__int128 *)v36);
    *(_OWORD *)v34 = v33[0];
    *(_OWORD *)&v34[9] = *(_OWORD *)((char *)v33 + 9);
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *v3 + 16);
    if (!LODWORD(v33[0]))
      goto LABEL_36;
  }
  else
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *v3 + 16);
  }
  v21 = *(_DWORD *)(v20 + 28) & 0x7F;
  if (v20 && v21 == 38)
  {
    if ((*(_BYTE *)(v20 + 60) & 8) == 0)
    {
LABEL_32:
      *v16 = *(_OWORD *)v34;
      v18 = *(_OWORD *)&v34[9];
      goto LABEL_33;
    }
    v22 = (_DWORD *)(v20 + 64);
  }
  else
  {
    if ((!v20 || v21 != 59) && (!v20 || v21 != 32) || !*(_BYTE *)(v20 + 81))
      goto LABEL_32;
    v22 = (_DWORD *)(v20 + 84);
  }
  if (*(_DWORD *)(a1 + 32) == *v22)
    goto LABEL_32;
  if (v21 == 38)
    v27 = v20;
  else
    v27 = 0;
  if (v27)
  {
    v28 = v27 & 0xFFFFFFFFFFFFFFF9;
  }
  else
  {
    if (v21 == 59)
      v31 = v20;
    else
      v31 = 0;
    if (v31)
      v28 = v31 & 0xFFFFFFFFFFFFFFF9 | 2;
    else
      v28 = v20 & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168) = v28;
  v32 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(v32 + 176) = *(_OWORD *)v34;
  *(_QWORD *)(v32 + 192) = *(_QWORD *)&v34[16];
  return 4;
}

unint64_t sub_22EDC3D00(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  __int16 v13;
  int v14;
  _BOOL4 v15;
  _OWORD v17[5];
  __int128 v18[5];

  v4 = a2;
  if (a2 >= 0x10)
  {
    v7 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v7)
      v8 = *(_BYTE *)(v7 + 16) == 26;
    else
      v8 = 0;
    if (!v8)
      v7 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    v9 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if (v9)
      v10 = *(_BYTE *)(v9 + 16) == 26;
    else
      v10 = 0;
    if (!v10)
      v9 = sub_22F10CF48(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0));
    sub_22E4913B4(v9, (uint64_t)v18);
    v11 = *(_QWORD *)(v7 + 16);
    v12 = (v11 >> 19) & 0x1F;
    v13 = v18[0];
    v14 = v18[0] & 0x1F;
    v8 = v12 == v14;
    v15 = v12 != v14;
    if (!v8)
    {
      v13 = v18[0] & 0xFFE0 | v12;
      LOWORD(v18[0]) = v13;
    }
    if (((v11 >> 24) & 1) != (v13 & 0x20) >> 5)
    {
      LOWORD(v18[0]) = v13 & 0xFFDF | ((v11 & 0x1000000) >> 19);
      v15 = 1;
    }
    if (a4 && ((v11 & 0x3C0000000000000) != 0 || (*(_WORD *)(v9 + 22) & 0x3C0) != 0))
    {
      sub_22E4913B4(v7, (uint64_t)v17);
      v18[1] = v17[1];
      v18[2] = v17[2];
      v18[3] = v17[3];
      return sub_22EF63D8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(v9 + 24), (uint64_t *)(v9 + 40), (unsigned __int16)(*(_QWORD *)(v9 + 16) >> 38), v18, 0);
    }
    if (v15)
      return sub_22EF63D8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(v9 + 24), (uint64_t *)(v9 + 40), (unsigned __int16)(*(_QWORD *)(v9 + 16) >> 38), v18, 0);
  }
  return v4;
}

uint64_t sub_22EDC3E48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void **a5, uint64_t a6, int a7)
{
  int v7;
  void **v9;
  unint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  char *v16;
  char *v17;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  int v66[2];
  uint64_t v67;
  uint64_t v68;
  llvm *v69;
  void *v70;
  int *v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];
  __int16 v77;
  unsigned int v78;
  uint64_t v79;
  int *v80;
  int v81;
  void *v82[2];
  _BYTE v83[32];
  _BYTE *v84;
  uint64_t v85;
  _BYTE v86[128];
  uint64_t v87;
  uint64_t v88;
  llvm *v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t vars0;

  v97 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v66 = a3;
  v67 = a2;
  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return 1;
  v7 = a7;
  v9 = a5;
  v10 = a4;
  v12 = (char *)(a1 + 10664);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v65 = *(_QWORD *)(v13 + 48);
  v87 = a1;
  v88 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v87 + i) = -4096;
  v16 = (char *)&v93;
  v91 = (char *)&v93;
  v92 = 0x100000000;
  v94 = *(_QWORD *)(a1 + 12024);
  v95 = 0;
  v96 = 0;
  *(_QWORD *)(a1 + 12024) = &v87;
  v63 = v86;
  v84 = v86;
  v85 = 0x400000000;
  HIDWORD(v64) = 0;
  v62 = v83;
  v82[0] = v83;
  v82[1] = (void *)0x400000000;
  if (a3)
  {
    v60 = v13;
    v17 = (char *)(a1 + 10664);
    v78 = 0;
    v21 = *(_DWORD *)(a6 + 8);
    v68 = (uint64_t)&v78;
    v69 = (llvm *)a1;
    v70 = &v67;
    v71 = v66;
    v72 = (uint64_t)&v84;
    v73 = v82;
    v74 = (uint64_t)&v65;
    v75 = a6;
    v81 = v21;
    v79 = a1;
    v80 = &v81;
    v22 = *(_QWORD *)off_255E04E38(&off_255E04E38, a2);
    if (!v22)
      goto LABEL_9;
    v25 = (uint64_t)&vars0 - v22;
    if (v25 < 0)
      v25 = -v25;
    if (v25 + v24 < v23)
    {
      v26 = v14;
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v79, (uint64_t)sub_22EDFFB38, (uint64_t)&v68);
    }
    else
    {
LABEL_9:
      v26 = v14;
      sub_22EDFFB38((uint64_t)&v68);
    }
    v27 = v78;
    if (v78)
      goto LABEL_70;
    HIDWORD(v64) = v85;
    v14 = v26;
    v9 = a5;
    v7 = a7;
    v10 = a4;
    v12 = v17;
    v13 = v60;
  }
  if ((v7 & 1) == 0)
    v10 = sub_22EDC3D00(a1, v10, v65, 0);
  v81 = 0;
  v68 = 0;
  v78 = 3;
  v79 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, &v81, (int *)&v79, (__int16 *)(a1 + 1693), &v68, (int *)&v78);
  v28 = *(unsigned int *)(a1 + 3696);
  v29 = v28 - 2;
  v30 = *(_QWORD *)(a1 + 3688);
  v31 = *(_DWORD *)(v30 + 576 * (v28 - 2));
  v61 = (char *)&v93;
  if (v31 == 5)
  {
    *(_BYTE *)(v30 + 576 * v28 - 4) = *(_BYTE *)(v30 + 576 * v29 + 572);
    v32 = 1;
  }
  else if (v31 == 2)
  {
    *(_BYTE *)(v30 + 576 * v28 - 4) = 1;
    v32 = *(_BYTE *)(v30 + 576 * v29 + 573) != 0;
  }
  else
  {
    v32 = 0;
    *(_BYTE *)(v30 + 576 * v28 - 4) = 0;
  }
  v33 = v30 + 576 * v28;
  *(_BYTE *)(v33 - 3) = v32;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v33 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v33 - 496));
  }
  LODWORD(v59) = v12[1288];
  HIDWORD(v59) = *(_DWORD *)(a1 + 8456);
  v58 = *v12;
  LODWORD(v60) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v34)
    v12[1288] = 1;
  *v12 = 0;
  sub_22EDFD35C((uint64_t)&v84, *(_DWORD *)(v14 + 12) & 0x1FFFFFFF);
  v36 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 4) != 0 && v7)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || *(unsigned __int8 *)(v37 + 16) - 27 <= 0xFFFFFFFD)
      v37 = sub_22F10CF48(v37);
    v38 = *(_QWORD *)(*(_QWORD *)(v37 + 24) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v68) = 0;
    v39 = sub_22F110500((uint64_t)&v68, v38);
    if (v39 && *(_BYTE *)(v39 + 16) == 14)
    {
      v40 = v14;
      v69 = 0;
      v70 = 0;
      v68 = a1;
      LODWORD(v71) = 0;
      v72 = (uint64_t)v76;
      v73 = (void **)v76;
      v74 = 2;
      LODWORD(v75) = 0;
      v76[2] = 0;
      v77 = 256;
      v41 = sub_22EDC913C((_QWORD **)&v68, v65);
      if (v73 != (void **)v72)
        free(v73);
      llvm::deallocate_buffer(v69, (void *)(16 * v71));
      v65 = v41;
      v36 = 1;
      v14 = v40;
    }
    else
    {
      v36 = 0;
    }
  }
  if (v10 < 0x10
    || (unint64_t)v65 < 0x10
    || (v27 = sub_22EDC45FC(a1, v14, v65, v10, a6, &v84, 48, 0, 0, v57, v59, v60, (uint64_t)&v93, (uint64_t)v83, (uint64_t)v86, v64, v65, v66[0], v66[1],
                v67,
                v68,
                (char)v69,
                v70,
                (uint64_t)v71,
                v72,
                (uint64_t)v73),
        !(_DWORD)v27))
  {
    v78 = 0;
    v42 = *(_DWORD *)(a6 + 8);
    v68 = (uint64_t)&v78;
    v69 = (llvm *)a1;
    v70 = &v67;
    v71 = (int *)&v84;
    v72 = (uint64_t)&v64 + 4;
    v73 = v9;
    v74 = a6;
    v81 = v42;
    v79 = a1;
    v80 = &v81;
    v43 = *(_QWORD *)off_255E04E38(&off_255E04E38, v35);
    if (!v43)
      goto LABEL_40;
    v44 = (uint64_t)&vars0 - v43;
    if (v44 < 0)
      v44 = -v44;
    if ((unint64_t)(v44 - 8126464) < 0x40001)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v79, (uint64_t)sub_22EDFFB7C, (uint64_t)&v68);
    else
LABEL_40:
      sub_22EDFFB7C((uint64_t)&v68);
    v27 = v78;
    if (!v78)
    {
      if (!v36)
        goto LABEL_95;
      v45 = *(_QWORD *)(*((_QWORD *)*v9 + 6) & 0xFFFFFFFFFFFFFFF0);
      if (!v45 || *(unsigned __int8 *)(v45 + 16) - 27 <= 0xFFFFFFFD)
        v45 = sub_22F10CF48(v45);
      v46 = *(_QWORD *)(*(_QWORD *)(v45 + 24) & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v68) = 0;
      v47 = sub_22F110500((uint64_t)&v68, v46);
      if (!v47
        || *(_QWORD *)(v47 + 24) > 0xFuLL
        || (*(_BYTE *)(v47 + 17) & 4) != 0
        || (sub_22EDC6650(a1, *v9, *(unsigned int *)(a6 + 8), 0) & 1) == 0)
      {
LABEL_95:
        v48 = *(_QWORD *)(*((_QWORD *)*v9 + 6) & 0xFFFFFFFFFFFFFFF0);
        if (!v48 || *(_BYTE *)(v48 + 16) != 26)
          v48 = sub_22F10CF48(v48);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) == 0
          || ((*(_QWORD *)(v48 + 16) >> 54) & 0xF) - 9 > 1
          || sub_22EB14850(a1, *(unsigned int *)(a6 + 8)))
        {
          v49 = *((_QWORD *)*v9 + 6);
          if (v7)
          {
            if (v10 < 0x10
              || sub_22EDBFFC8(a1, *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 8) | v49 & 7, *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) | v10 & 7))
            {
LABEL_63:
              v27 = 0;
              goto LABEL_64;
            }
          }
          else
          {
            v50 = sub_22EDC3D00(a1, v10, v49, 1);
            if (v50 < 0x10
              || (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 8) | v49 & 7) == (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) | v50 & 7))
            {
              goto LABEL_63;
            }
          }
        }
      }
      v27 = 16;
    }
  }
LABEL_64:
  *(_DWORD *)(a1 + 8456) = HIDWORD(v59);
  v12[1288] = v59;
  *v12 = v58;
  v51 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v51 + 180) == 5)
    *(_BYTE *)(v51 + 170) = 1;
  if ((_DWORD)v60)
    v52 = 3;
  else
    v52 = 0;
  *(_DWORD *)(v51 + 180) = v52;
  sub_22EB48E64(a1);
  v16 = v61;
LABEL_70:
  if (v82[0] != v62)
    free(v82[0]);
  if (v84 != v63)
    free(v84);
  if (!(_BYTE)v95)
  {
    if ((_DWORD)v92)
    {
      v54 = 0;
      v55 = 8 * v92;
      do
      {
        v56 = *(void ***)&v91[v54];
        if (v56)
        {
          if (*v56 != v56 + 2)
            free(*v56);
          MEMORY[0x2348A0E9C](v56, 0x1080C40ED926357);
        }
        v54 += 8;
      }
      while (v55 != v54);
    }
    *(_QWORD *)(v87 + 12024) = v94;
    LOBYTE(v95) = 1;
  }
  if (v91 != v16)
    free(v91);
  if ((v88 & 1) == 0)
    llvm::deallocate_buffer(v89, (void *)(16 * v90));
  return v27;
}

uint64_t sub_22EDC45FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, char a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *i;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v122;
  unsigned int v123;
  int v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  _BYTE v129[25];
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  uint64_t v134;

  v26 = a7;
  v27 = a6;
  v29 = a4;
  v30 = a3;
  v31 = a1;
  v134 = *MEMORY[0x24BDAC8D0];
  v130 = a2;
  v32 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v32 && *(_BYTE *)(v32 + 16) == 36)
    v29 = *(_QWORD *)(v32 + 32);
  if (a8)
  {
    v33 = a6;
    v35 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (!v35 || (v36 = *(_DWORD *)(v35 + 16), (v36 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      {
        v40 = 0;
        v35 = 0;
        goto LABEL_34;
      }
      v37 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
      v35 = v37;
      if (!v37)
      {
        v40 = 0;
        goto LABEL_34;
      }
      v36 = *(_DWORD *)(v37 + 16);
    }
    v38 = v35;
    if ((v36 & 0x100000) != 0)
    {
      v38 = v35;
      do
      {
        while (1)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v38)
            break;
          v39 = *(_DWORD *)(v38 + 16);
          if ((v39 & 0xFE) != 0x28)
            break;
          if ((v39 & 0x100000) == 0)
            goto LABEL_17;
        }
        v38 = sub_22F10CF48(v38);
      }
      while ((*(_DWORD *)(v38 + 16) & 0x100000) != 0);
    }
LABEL_17:
    v30 = *(_QWORD *)(v38 + 32);
    v40 = 1;
LABEL_34:
    v46 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
    if (v46 && (*(_DWORD *)(v46 + 16) & 0xFE) == 0x28)
    {
      v47 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v48 = sub_22F10CF48(v46)) == 0)
      {
LABEL_42:
        *(_QWORD *)&v131 = 0;
        v31 = a1;
        v30 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v30, &v131);
        v29 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v29, &v131);
        v27 = v33;
        goto LABEL_43;
      }
      v47 = v48;
      v46 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
    }
    v49 = sub_22F10ACF8(v46);
    v29 = v49;
    if (v40)
    {
      v50 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
      v51 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFF0) + 8);
      if (*(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0))
      {
        v126 = v33;
        if ((v50 & 8) != 0)
        {
          v68 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v67 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v67 = 0;
          v68 = 0;
        }
        v127 = a5;
        v69 = v67 | v68 | (v50 | v30) & 7;
        *(_QWORD *)&v131 = v67 | v68 | (v50 | v30) & 7;
        v125 = HIDWORD(v67);
        if ((v51 & 8) != 0)
        {
          v71 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v70 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 40
          || (v72 = v70 | (v51 | v49) & 7 | v71,
              (sub_22F10AB88((unsigned int *)&v131, v72) & 1) != 0)
          || (v68 & 0x180) != 0
          && (v71 & 0x1C0) == 0x40
          && (((v69 ^ v72) & 0xFFFFFE3F) == 0 ? (v73 = v125 == HIDWORD(v70)) : (v73 = 0), v73))
        {
          *(_DWORD *)(v127 + 176) = 1;
          *(_QWORD *)(v127 + 184) = v30;
          *(_DWORD *)(v127 + 200) = 1;
          *(_QWORD *)(v127 + 208) = v29;
          return 10;
        }
        v33 = v126;
        a5 = v127;
      }
    }
    goto LABEL_42;
  }
  if ((a7 & 1) == 0)
  {
LABEL_25:
    if ((v26 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_26;
  }
  *(_QWORD *)v129 = 0;
  v41 = sub_22EF67F34(*(_QWORD *)(a1 + 88), a3, v129);
  v42 = 0;
  v43 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v43 & 8) != 0)
    v42 = (*(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3;
  if (v42 >= ((*(_DWORD *)v129 >> 9) & 3u))
    LOBYTE(v42) = (*(_DWORD *)v129 >> 9) & 3;
  *(_DWORD *)v129 = *(_DWORD *)v129 & (v43 | v29 | 0xFFFFF9F8) & 0xFFFFF9FF | ((v42 & 3) << 9);
  if ((*(_QWORD *)v129 & 0xCFFFFFFF8) != 0)
  {
    v44 = *(_QWORD *)(v31 + 88);
    *(_QWORD *)&v131 = *(_QWORD *)v129;
    v45 = sub_22E491354((unsigned int *)&v131, v41);
    v30 = sub_22EF5DBC4(v44, v45, v131);
    goto LABEL_25;
  }
  v30 = v129[0] & 7 | v41;
  if ((v26 & 0x10) == 0)
    goto LABEL_43;
LABEL_26:
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 >= 2)
  {
    v26 &= ~0x10u;
    if (sub_22EDCD4B4(v30, 0))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 40)
        v30 = sub_22F10ACF8(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0));
    }
  }
LABEL_43:
  v52 = v30 & 0xFFFFFFFFFFFFFFF0;
  v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v53 || *(_BYTE *)(v53 + 16) != 47)
  {
    *(_DWORD *)(a5 + 176) = 1;
    *(_QWORD *)(a5 + 184) = v30;
    *(_DWORD *)(a5 + 200) = 1;
    *(_QWORD *)(a5 + 208) = v29;
    v63 = *(_QWORD *)v52;
    if (*(_QWORD *)v52 && *(_BYTE *)(v63 + 16) == 42
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 42 && sub_22F10CF48(v63))
    {
      return 0;
    }
    if ((v26 & 2) == 0)
    {
      if ((v26 & 1) != 0)
      {
        if (sub_22EDCD63C(v30, v29))
          return 10;
      }
      else if ((v26 & 0x40) != 0)
      {
        v74 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v74 & 8) != 0)
        {
          v76 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v75 = 0;
          v76 = 0;
        }
        *(_QWORD *)&v131 = v75 | v76 | (v74 | v29) & 7;
        v109 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v109 & 8) != 0)
        {
          v111 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v110 = 0;
          v111 = 0;
        }
        if (!sub_22E95F24C((unsigned int *)&v131, v110 | v111 | (v109 | v30) & 7))return 10;
        *(_QWORD *)v129 = 0;
        v112 = sub_22EF67F34(*(_QWORD *)(v31 + 88), v29, v129);
        v113 = *(_QWORD *)(v31 + 88);
        v114 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v114 & 8) != 0)
        {
          v116 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v115 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v115 = 0;
          v116 = 0;
        }
        v117 = v116 | (v114 | v30) & 7;
        if (((v117 | v115) & 0xCFFFFFFF8) != 0)
        {
          *(_QWORD *)&v131 = v117 | v115;
          v118 = sub_22E491354((unsigned int *)&v131, v112);
          v29 = sub_22EF5DBC4(v113, v118, v131);
        }
        else
        {
          v29 = v117 & 7 | v112;
        }
      }
      else
      {
        for (i = (_QWORD *)(*(_QWORD *)v52 + 8); ; i = (_QWORD *)(v65 + 32))
        {
          v65 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
          v66 = *(unsigned __int8 *)(v65 + 16);
          if (v66 - 2 >= 4)
            break;
        }
        v77 = v66 > 0x34;
        v78 = (1 << v66) & 0x13800000042000;
        if (v77 || v78 == 0)
        {
          v80 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
          v81 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((((v81 | v29) ^ (v80 | v30)) & 7) != 0)
            return 10;
          v82 = (v80 & 8) != 0 ? (*(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3 : 0;
          v124 = (v81 & 8) != 0 ? (*(_DWORD *)((v81 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 9) & 3 : 0;
          if (v82 != v124)
            return 10;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)v52 + 17) & 4) == 0)
    {
      if ((v26 & 8) != 0)
        return 0;
      v119 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v26 & 2) == 0)
      {
        if ((v119 | v30 & 7) != (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8) | v29 & 7))
        {
          v120 = v31;
          v86 = 10;
          if ((v26 & 0x20) != 0)
          {
            if (sub_22EDBFFC8(v120, v30, v29))
              return 0;
            else
              return 10;
          }
          return v86;
        }
        return 0;
      }
      if (*(_QWORD *)(v119 & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
        || (v26 & 0x20) != 0 && sub_22EDBFFC8(v31, v30, v29))
      {
        return 0;
      }
    }
    __asm { BR              X13 }
  }
  v54 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v54 + 16) & 0xFE00000u) >= 0x8180001 && v54 != 0 && *(_DWORD *)(v54 + 16) == 11)
    return 0;
  v57 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 32);
  if (*(_DWORD *)(a5 + 16) != (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 32) & 0x7FFF))
    return 0;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    *(_QWORD *)v129 = 0;
    v58 = sub_22EF67F34(*(_QWORD *)(v31 + 88), v29, v129);
    v29 = v58;
    if (*(_DWORD *)v129 | v129[4] & 0xC)
    {
      if ((*(_QWORD *)v129 & 0xCFFFFFFF8) != 0)
      {
        v59 = v31;
        v60 = *(_QWORD *)(v31 + 88);
        *(_QWORD *)&v131 = *(_QWORD *)v129;
        v61 = sub_22E491354((unsigned int *)&v131, v58);
        v62 = v60;
        v31 = v59;
        v29 = sub_22EF5DBC4(v62, v61, v131);
      }
      else
      {
        v29 = v129[0] & 7 | v58;
      }
    }
  }
  v83 = v31;
  v84 = v57 >> 16;
  if ((v26 & 2) == 0 && sub_22EDCD63C(v30, v29))
  {
    v85 = a2 + 8 * v84;
LABEL_100:
    *(_QWORD *)(a5 + 168) = *(_QWORD *)(v85 + 16) & 0xFFFFFFFFFFFFFFF9;
    *(_DWORD *)(a5 + 176) = 1;
    *(_QWORD *)(a5 + 184) = v30;
    *(_DWORD *)(a5 + 200) = 1;
    *(_QWORD *)(a5 + 208) = v29;
    return 6;
  }
  v87 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFF0);
  v88 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v88 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1
    && ((v30 & 0xF) != 0 || (*(_BYTE *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0))
  {
    return 10;
  }
  v89 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v89 & 8) != 0)
  {
    v91 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v90 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v90 = 0;
    v91 = 0;
  }
  v92 = v91 | (v89 | v29) & 7;
  v93 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8);
  v94 = v27;
  if ((v93 & 8) != 0)
    v95 = *(_DWORD *)((v93 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v95 = 0;
  v96 = v95 | (v93 | v30) & 7;
  v97 = (~(_BYTE)v96 | 0xFFFFFFF8) & v92;
  if ((v96 & 0x30) != 0)
    v97 &= 0xFFFFFFCF;
  if (v96 > 0x7FF)
    v97 &= 0x7FFu;
  if ((v96 & 0x1C0) != 0)
    v97 &= 0xFFFFFE3F;
  if ((((unsigned __int16)v97 ^ (unsigned __int16)v96) & 0x600) != 0)
    v98 = v97;
  else
    v98 = v97 & 0xFFFFF9FF;
  if ((v96 & 0x1C0) != 0 && !sub_22F40ACB8(v88) && (*(_BYTE *)(*v87 + 17) & 4) == 0)
  {
    v85 = a2 + 8 * v84;
    goto LABEL_100;
  }
  if ((*(_WORD *)(*(_QWORD *)(v83 + 72) + 148) & 2) != 0)
  {
    v122 = sub_22F40ACB8(*v87);
    v123 = (v98 & 0x1C0) != 0 ? v98 : v98 & 0xFFFFFE3F | 0x80;
    if (v122)
      v98 = v123;
  }
  v99 = v83;
  v100 = *(_QWORD *)(v83 + 88);
  v101 = *v87;
  if ((*(_BYTE *)(*v87 + 8) & 0xF) != 0)
    v101 = (uint64_t)sub_22F10D2BC(v29);
  v102 = v101 & 0xFFFFFFFFFFFFFFF0;
  if (((v90 | v98) & 0xCFFFFFFF8) != 0)
  {
    *(_QWORD *)&v131 = v90 | v98;
    v103 = sub_22E491354((unsigned int *)&v131, v102);
    v104 = sub_22EF5DBC4(v100, v103, v131);
  }
  else
  {
    v104 = v102 | v98 & 7;
  }
  LODWORD(v131) = 1;
  *((_QWORD *)&v131 + 1) = v104;
  v133 = a9;
  v105 = v84;
  sub_22EDCC2FC(v129, *(_QWORD *)(v99 + 88), (__int128 *)(*v94 + 32 * v84), &v131);
  if (*(_DWORD *)v129)
  {
    v86 = 0;
    v106 = (_OWORD *)(*v94 + 32 * v105);
    *v106 = *(_OWORD *)v129;
    *(_OWORD *)((char *)v106 + 9) = *(_OWORD *)&v129[9];
  }
  else
  {
    *(_QWORD *)(a5 + 168) = *(_QWORD *)(a2 + 8 * v84 + 16) & 0xFFFFFFFFFFFFFFF9;
    v107 = *v94 + 32 * v84;
    v108 = *(_OWORD *)v107;
    *(_QWORD *)(a5 + 192) = *(_QWORD *)(v107 + 16);
    *(_OWORD *)(a5 + 176) = v108;
    *(_OWORD *)(a5 + 200) = v131;
    *(_QWORD *)(a5 + 216) = v132;
    return 5;
  }
  return v86;
}

uint64_t sub_22EDC6650(_QWORD *a1, unint64_t a2, int a3, int a4)
{
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  int *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t vars0;

  v6 = a2;
  v52 = a3;
  v51 = a2;
  if (sub_22F344434(a2))
  {
    v8 = *(_WORD *)(v6 + 80) & 0x7F;
    v9 = -40;
    if (v8 > 0x46)
    {
      if (v8 != 83)
      {
        if (v8 == 71)
        {
          v9 = -56;
          goto LABEL_36;
        }
        if (v8 == 81)
          goto LABEL_36;
LABEL_31:
        v18 = v8 - 52;
        v19 = v8 - 33 >= 5;
        v20 = -48;
        if (!v19)
          v20 = -64;
        if (v18 >= 6)
          v9 = v20;
        else
          v9 = -72;
      }
    }
    else
    {
      if (v8 > 0x18)
        goto LABEL_30;
      if (v8 != 16)
      {
        if (((1 << v8) & 0x1066) != 0)
          goto LABEL_36;
        if (v8 != 24)
        {
LABEL_30:
          if (v8 == 70)
          {
            v9 = -64;
            goto LABEL_36;
          }
          goto LABEL_31;
        }
      }
      v9 = -48;
    }
LABEL_36:
    v21 = *(_QWORD *)(v6 + 72 + v9 + 16);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 4) != 0)
      v22 = (_QWORD *)*v22;
    if (v22)
      v23 = (unint64_t)(v22 - 8);
    else
      v23 = 0;
    v24 = sub_22EFD462C(v23);
    v25 = v24;
    if (v24 && (*(_DWORD *)(v24 + 28) & 0x7F) == 0x1D)
      v25 = *(_QWORD *)(v24 + 48);
    v50 = v25;
    if ((*(_QWORD *)(v6 + 144) & 6) == 4)
    {
      v26 = *(_QWORD *)(v6 + 144) & 0xFFFFFFFFFFFFFFF8;
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 24);
        if (v27)
        {
          v28 = *(_QWORD *)(v25 + 144);
          if ((v28 & 6) != 0)
            v29 = 0;
          else
            v29 = v28 & 0xFFFFFFFFFFFFFFF8;
          v30 = sub_22F34A594((uint64_t)a1, v29, v27, a3);
          v50 = v30;
          if (!v30)
            return 1;
          v25 = v30;
          if ((*(_BYTE *)(v30 + 28) & 0x80) != 0)
            return 1;
          v31 = *(_QWORD *)(*(_QWORD *)(v30 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v31)
            v32 = *(unsigned __int8 *)(v31 + 16) - 27 > 0xFFFFFFFD;
          else
            v32 = 0;
          if (!v32)
            v31 = sub_22F10CF48(v31);
          v33 = *(_QWORD *)(*(_QWORD *)(v31 + 24) & 0xFFFFFFFFFFFFFFF0);
          LOBYTE(v47) = 0;
          v34 = sub_22F110500((uint64_t)&v47, v33);
          if (v34 && *(_QWORD *)(v34 + 24) <= 0xFuLL && (*(_BYTE *)(v34 + 17) & 4) == 0)
          {
            v47 = a1;
            v48 = &v52;
            v49 = &v50;
            v53 = a3;
            v54 = a1;
            v55 = (uint64_t *)&v53;
            v36 = *(_QWORD *)off_255E04E38(&off_255E04E38, v35);
            if (!v36)
              goto LABEL_64;
            v37 = (uint64_t)&vars0 - v36;
            if (v37 < 0)
              v37 = -v37;
            if ((unint64_t)(v37 - 8126464) <= 0x40000)
              sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v54, (uint64_t)sub_22EDFFC40, (uint64_t)&v47);
            else
LABEL_64:
              sub_22EE44C50((unint64_t)a1, a3, v25, 0, 0, 0);
            v25 = v50;
          }
        }
      }
    }
    if ((*(_BYTE *)(v25 + 28) & 0x80) != 0)
      return 1;
    v38 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v38 || *(unsigned __int8 *)(v38 + 16) - 27 <= 0xFFFFFFFD)
      v38 = sub_22F10CF48(v38);
    v39 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v38 + 24) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
    if (v39)
      v40 = *(unsigned __int8 *)(v39 + 16) - 27 > 0xFFFFFFFD;
    else
      v40 = 0;
    if (!v40)
      v39 = sub_22F10CF48(v39);
    v41 = (*(_DWORD *)(v39 + 16) >> 19) & 0x1F;
    v42 = *(_QWORD *)(*(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v42 || *(_BYTE *)(v42 + 16) != 26)
      v42 = sub_22F10CF48(v42);
    v43 = sub_22F336F24((uint64_t)a1, (_QWORD *)v42, v41);
    v44 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v44 || *(unsigned __int8 *)(v44 + 16) - 27 <= 0xFFFFFFFD)
      v44 = sub_22F10CF48(v44);
    v45 = *(_QWORD *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFF0);
    if (v45 && *(_BYTE *)(v45 + 16) == 39
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && sub_22F10CF48(v45))
    {
      v46 = sub_22EF5B848(a1[11], v43, 0);
    }
    else
    {
      v46 = sub_22F36A4F8(a1[11], v43);
    }
    sub_22F369B34(a1[11], v6, v46);
    return 0;
  }
  if (sub_22EFC20FC(v6, 1))
  {
    v47 = a1;
    v48 = &v52;
    v49 = (uint64_t *)&v51;
    LODWORD(v50) = a3;
    v54 = a1;
    v55 = &v50;
    v11 = *(_QWORD *)off_255E04E38(&off_255E04E38, v10);
    if (!v11)
      goto LABEL_11;
    v12 = (uint64_t)&vars0 - v11;
    if (v12 < 0)
      v12 = -v12;
    if ((unint64_t)(v12 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v54, (uint64_t)sub_22EDFFC64, (uint64_t)&v47);
    else
LABEL_11:
      sub_22EE44C50((unint64_t)a1, a3, v6, 0, 0, 0);
    v6 = v51;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 27 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v47) = 0;
  result = sub_22F110500((uint64_t)&v47, v15);
  if (result)
  {
    if (*(_QWORD *)(result + 24) > 0xFuLL)
      return 0;
    v17 = *(_DWORD *)(result + 16);
    result = (v17 & 0x400) == 0;
    if ((v17 & 0x400) == 0 && a4)
    {
      if ((*(_BYTE *)(v51 + 28) & 0x80) == 0)
      {
        sub_22E8FCA40(a1, v52, 0xB40u, 0, (uint64_t)&v47);
        sub_22E890024((uint64_t)&v47, (uint64_t *)&v51);
        sub_22E903BEC((unsigned int *)&v47);
        sub_22E8FCA40(a1, *(_DWORD *)(v51 + 24), 0x155Cu, 0, (uint64_t)&v47);
        sub_22E890024((uint64_t)&v47, (uint64_t *)&v51);
        sub_22E903BEC((unsigned int *)&v47);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EDC6B5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  char v58;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  void **v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm *v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  void *v87[2];
  _QWORD v88[18];
  uint64_t vars0;

  v88[16] = *MEMORY[0x24BDAC8D0];
  v73 = a2;
  if ((*((_BYTE *)a2 + 28) & 0x80) != 0)
    return 1;
  v9 = *(_QWORD *)(*(_QWORD *)(a2[6] + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) - 27 > 0xFFFFFFFD;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  v61 = a3 & 0xFFFFFFFFFFFFFFF0;
  v63 = a5;
  v14 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 16);
    if ((v16 & 0xFE) == 0x28)
    {
      if ((v16 & 0x100000) != 0)
      {
        do
        {
LABEL_10:
          while (1)
          {
            v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v15)
              break;
            v17 = *(_DWORD *)(v15 + 16);
            if ((v17 & 0xFE) != 0x28)
              break;
            if ((v17 & 0x100000) == 0)
              goto LABEL_20;
          }
          v15 = sub_22F10CF48(v15);
        }
        while ((*(_DWORD *)(v15 + 16) & 0x100000) != 0);
      }
      goto LABEL_20;
    }
  }
  v19 = v11 & 7 | v13;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v15 = sub_22F10CF48(v15);
    if (v15)
    {
      if ((*(_DWORD *)(v15 + 16) & 0x100000) != 0)
        goto LABEL_10;
LABEL_20:
      v19 = *(_QWORD *)(v15 + 32);
    }
  }
  v20 = v14 & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 + 16);
    if ((v22 & 0xFE) == 0x28)
    {
      if ((v22 & 0x100000) != 0)
      {
        do
        {
LABEL_24:
          while (1)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v21)
              break;
            v23 = *(_DWORD *)(v21 + 16);
            if ((v23 & 0xFE) != 0x28)
              break;
            if ((v23 & 0x100000) == 0)
              goto LABEL_33;
          }
          v21 = sub_22F10CF48(v21);
        }
        while ((*(_DWORD *)(v21 + 16) & 0x100000) != 0);
      }
      goto LABEL_33;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v21 = sub_22F10CF48(v21);
    if (v21)
    {
      if ((*(_DWORD *)(v21 + 16) & 0x100000) != 0)
        goto LABEL_24;
LABEL_33:
      v24 = *(_QWORD *)(v21 + 32);
      v25 = *v12;
      if ((!*v12 || (*(_DWORD *)(v25 + 16) & 0xFE) != 0x28)
        && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
         || !sub_22F10CF48(v25)))
      {
        v26 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v26 + 8) & 0xF) != 0)
          v26 = (unint64_t)sub_22F10D2BC(v24);
        v24 = v26 & 0xFFFFFFFFFFFFFFF0;
        v27 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
          v27 = (unint64_t)sub_22F10D2BC(v19);
        v19 = v27 & 0xFFFFFFFFFFFFFFF0;
      }
      goto LABEL_53;
    }
  }
  v28 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v28 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
  {
    if (*(_DWORD *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
    {
      if ((v29 & 0xF) != 0)
        v28 = (unint64_t)sub_22F10D2BC(v19);
      v19 = v28 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_50;
    }
    v30 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v19, 0);
  }
  else
  {
    v30 = sub_22EF5F824(*(_QWORD *)(a1 + 88), v19);
  }
  v19 = v30;
LABEL_50:
  v31 = *(_QWORD *)v20;
  if ((*(_BYTE *)(*(_QWORD *)v20 + 8) & 0xF) != 0)
    v31 = (unint64_t)sub_22F10D2BC(v14 | a3 & 7);
  v24 = v31 & 0xFFFFFFFFFFFFFFF0;
LABEL_53:
  v32 = (char *)(a1 + 10664);
  LODWORD(v65) = 0;
  v87[0] = 0;
  LODWORD(v74) = 3;
  v77 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v65, (int *)&v77, (__int16 *)(a1 + 1693), (uint64_t *)v87, (int *)&v74);
  v33 = *(unsigned int *)(a1 + 3696);
  v34 = v33 - 2;
  v35 = *(_QWORD *)(a1 + 3688);
  v36 = *(_DWORD *)(v35 + 576 * (v33 - 2));
  if (v36 == 5)
  {
    *(_BYTE *)(v35 + 576 * v33 - 4) = *(_BYTE *)(v35 + 576 * v34 + 572);
    v37 = 1;
  }
  else if (v36 == 2)
  {
    *(_BYTE *)(v35 + 576 * v33 - 4) = 1;
    v37 = *(_BYTE *)(v35 + 576 * v34 + 573) != 0;
  }
  else
  {
    v37 = 0;
    *(_BYTE *)(v35 + 576 * v33 - 4) = 0;
  }
  v38 = v35 + 576 * v33;
  *(_BYTE *)(v38 - 3) = v37;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v38 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v38 - 496));
  }
  v39 = *(_DWORD *)(a1 + 8456);
  v40 = *(_BYTE *)(a1 + 11952);
  v41 = *v32;
  v42 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v43)
    *(_BYTE *)(a1 + 11952) = 1;
  *v32 = 0;
  v44 = a2[7];
  v87[0] = v88;
  v87[1] = (void *)0x400000000;
  sub_22EDFD35C((uint64_t)v87, *(_DWORD *)(v44 + 12) & 0x1FFFFFFF);
  v45 = ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 40) << 6;
  v46 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  if (v46 == 31)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
      goto LABEL_64;
  }
  else if (v46 != 39
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) != 39)
  {
    goto LABEL_64;
  }
  v45 |= 2u;
LABEL_64:
  v47 = v19;
  v48 = v63;
  v18 = sub_22EDC45FC(a1, v44, v47, v24, v63, v87, v45, 0, 0, v58, a4, v61, v63, v65, v66, (uint64_t)v67, (uint64_t)v68, (int)v69, SBYTE4(v69),
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76);
  if (!(_DWORD)v18)
  {
    v77 = a1;
    v78 = 1;
    for (i = 16; i != 80; i += 16)
      *(uint64_t *)((char *)&v77 + i) = -4096;
    v81 = &v83;
    v82 = 0x100000000;
    v84 = *(_QWORD *)(a1 + 12024);
    v85 = 0;
    v86 = 0;
    *(_QWORD *)(a1 + 12024) = &v77;
    v72 = 0;
    HIDWORD(v71) = 0;
    v51 = *(_DWORD *)(v48 + 8);
    v65 = (uint64_t)&v71 + 4;
    v66 = a1;
    v67 = &v73;
    v68 = v87;
    v69 = &v72;
    v70 = v48;
    HIDWORD(v76) = v51;
    v74 = a1;
    v75 = (uint64_t)&v76 + 4;
    v52 = *(_QWORD *)off_255E04E38(&off_255E04E38, v49);
    if (!v52)
      goto LABEL_71;
    v53 = (uint64_t)&vars0 - v52;
    if (v53 < 0)
      v53 = -v53;
    if ((unint64_t)(v53 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v74, (uint64_t)sub_22EDFFBE4, (uint64_t)&v65);
    else
LABEL_71:
      sub_22EDFFBE4((uint64_t)&v65);
    *v60 = v72;
    v18 = HIDWORD(v71);
    if (!(_BYTE)v85)
    {
      if ((_DWORD)v82)
      {
        v57 = 0;
        v62 = 8 * v82;
        do
        {
          v64 = *(void ***)((char *)v81 + v57);
          if (v64)
          {
            if (*v64 != v64 + 2)
              free(*v64);
            MEMORY[0x2348A0E9C](v64, 0x1080C40ED926357);
          }
          v57 += 8;
        }
        while (v62 != v57);
      }
      *(_QWORD *)(v77 + 12024) = v84;
      LOBYTE(v85) = 1;
    }
    if (v81 != &v83)
      free(v81);
    if ((v78 & 1) == 0)
      llvm::deallocate_buffer(v79, (void *)(16 * v80));
  }
  if (v87[0] != v88)
    free(v87[0]);
  *(_DWORD *)(a1 + 8456) = v39;
  *(_BYTE *)(a1 + 11952) = v40;
  *v32 = v41;
  v54 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v54 + 180) == 5)
    *(_BYTE *)(v54 + 170) = 1;
  if (v42)
    v55 = 3;
  else
    v55 = 0;
  *(_DWORD *)(v54 + 180) = v55;
  sub_22EB48E64(a1);
  return v18;
}

uint64_t sub_22EDC7260(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, char a7)
{
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v13;
  uint64_t v15;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  int v36;
  uint64_t i;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  unsigned __int8 **v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  int v58;
  unint64_t v59;
  void *v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  llvm *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  int v80;
  int v81;
  uint64_t *v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  unsigned int v87[24];
  _QWORD v88[6];
  uint64_t v89;
  _BYTE v90[96];
  _BYTE v91[103];
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[96];
  _QWORD *v98;
  llvm *v99;
  uint64_t v100;
  void **v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  int v105;
  _BYTE v106[16];
  unint64_t v107;
  __int16 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  void *v115;
  uint64_t v116;
  _QWORD v117[10];
  void *v118;
  uint64_t v119;
  _BYTE v120[104];
  void *v121;
  uint64_t v122;
  _BYTE v123[64];
  void *v124[2];
  _BYTE v125[32];
  _DWORD *v126;
  int v127[6];
  _QWORD *v128;
  uint64_t v129;
  llvm *v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  _QWORD *v138;
  llvm *v139;
  uint64_t v140;
  unsigned int v141;
  _BYTE *v142;
  _BYTE *v143;
  uint64_t v144;
  int v145;
  _BYTE v146[16];
  void *v147;
  __int16 v148;
  uint64_t v149;

  v7 = a2;
  v149 = *MEMORY[0x24BDAC8D0];
  v93 = a2;
  v94 = a3;
  v8 = (unsigned __int8 *)*a4;
  if ((*(_BYTE *)(*a4 + 2) & 2) != 0)
    return 2;
  v13 = a3;
  v15 = *(_QWORD *)(*((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v15 + 16) & 0xFF80000u) >= 0x8200001 && v15 != 0 && *(_DWORD *)(v15 + 16) == 11)
  {
    v18 = sub_22EB19A28(a1);
    if ((v18 & 1) != 0)
      return 2;
    v8 = (unsigned __int8 *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    *a4 = v18 & 0xFFFFFFFFFFFFFFFELL;
  }
  v19 = v7 & 0xFFFFFFFFFFFFFFF0;
  if ((v7 & 0xF) != 0)
  {
    v20 = 0;
  }
  else if (*(_BYTE *)(*(_QWORD *)v19 + 16) == 36)
  {
    v20 = v7;
  }
  else
  {
    v20 = 0;
  }
  v21 = v20 != 0;
  v92 = v21;
  v22 = *(_QWORD *)v19;
  v23 = *(_DWORD *)(*(_QWORD *)v19 + 16);
  if ((a6 & 0xFF00000000) == 0)
  {
    if ((v23 & 0x400) != 0 || (v8[1] & 0xA0) != 0)
    {
      v100 = 0;
      v98 = a1;
      v99 = 0;
      LODWORD(v101) = 0;
      v102 = (uint64_t)v106;
      v103 = v106;
      v104 = 2;
      v105 = 0;
      v107 = 0;
      LOBYTE(v108) = v21;
      HIBYTE(v108) = 1;
      *a5 = sub_22EDC7E54((uint64_t)&v98, v7, v13);
      if (v103 != (void *)v102)
        free(v103);
      llvm::deallocate_buffer(v99, (void *)(16 * v101));
      return 0;
    }
    LODWORD(a6) = 0;
  }
  if (v23 != 14)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 14)
      goto LABEL_46;
    v24 = sub_22F10CF48(v22);
    if (!v24)
    {
      v8 = (unsigned __int8 *)*a4;
      goto LABEL_46;
    }
    v22 = v24;
    v23 = *(_DWORD *)(v24 + 16);
  }
  if ((v23 & 0x180000) != 0x80000)
  {
    v8 = (unsigned __int8 *)*a4;
    if ((*(_BYTE *)(a1[9] + 1) & 1) == 0 && *v8 == 180)
    {
      sub_22F0D5A50(*a4);
      sub_22E8FCA40(a1, v28, 0xB43u, 0, (uint64_t)v90);
      v26 = (unsigned int *)v90;
      goto LABEL_33;
    }
LABEL_46:
    v83 = a7;
    sub_22EFF605C((uint64_t)v8);
    v36 = v35;
    v128 = a1;
    v129 = 1;
    for (i = 2; i != 10; i += 2)
      (&v128)[i] = (_QWORD *)-4096;
    v132 = &v134;
    v133 = 0x100000000;
    v135 = a1[1503];
    v136 = 0;
    v137 = 0;
    a1[1503] = &v128;
    v38 = v35;
    v39 = sub_22EFEAF4C(a1[11], 0, 0, v35, a6, 0, 0, 0, 0, 0, 0);
    v40 = *(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0;
    v89 = v39;
    v126 = sub_22EFE8D6C(v127, v41, v36, v36, (uint64_t)&v89, 1, v36, 0);
    v100 = 0;
    v98 = a1;
    v99 = 0;
    LODWORD(v101) = 0;
    v102 = (uint64_t)v106;
    v103 = v106;
    v104 = 2;
    v105 = 0;
    v84 = v40;
    v107 = v40;
    v108 = 256;
    v42 = sub_22EDC7E54((uint64_t)&v98, v93, v94);
    if (v103 != (void *)v102)
      free(v103);
    llvm::deallocate_buffer(v99, (void *)(16 * v101));
    v124[0] = v125;
    v124[1] = (void *)0x100000000;
    sub_22EDFD35C((uint64_t)v124, 1uLL);
    v98 = 0;
    LODWORD(v99) = v36;
    BYTE4(v99) = 0;
    v100 = a6;
    v101 = &v103;
    v102 = 0x400000000;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = v117;
    v116 = 0x800000000;
    v117[9] = 0;
    v117[8] = 0;
    v118 = v120;
    v119 = 0x400000000;
    v120[96] = 0;
    v121 = v123;
    v122 = 0x400000000;
    v88[0] = a4;
    v88[1] = a5;
    v88[2] = a1;
    v88[3] = &v92;
    v88[4] = &v93;
    v88[5] = &v98;
    v95 = v97;
    v96 = 0x400000000;
    v43 = *a4;
    v44 = *(unsigned __int8 *)*a4;
    if (v44 != 180)
    {
      if ((*(_BYTE *)(a1[9] + 1) & 1) == 0 && (*(_DWORD *)v43 & 0x1C00) == 0x400)
      {
        sub_22E8FCA40(a1, v38, 0xB35u, 0, (uint64_t)v87);
        sub_22E903BEC(v87);
LABEL_107:
        v27 = 2;
        goto LABEL_108;
      }
      v61 = sub_22EDC83BC(a1, (uint64_t)v126, 0, v42, (unsigned __int8 *)v43, (uint64_t)&v98, v124, (uint64_t)&v95, 0, 0);
      if (v61)
      {
        v62 = v61;
LABEL_80:
        v27 = sub_22EDC9004((uint64_t)v88, v62, 0, 0);
LABEL_108:
        if (v95 != v97)
          free(v95);
        if (v121 != v123)
          free(v121);
        if (v118 != v120)
          free(v118);
        if (v115 != v117)
          free(v115);
        sub_22E89277C((char **)&v101);
        if (v124[0] != v125)
          free(v124[0]);
        if (!(_BYTE)v136)
        {
          if ((_DWORD)v133)
          {
            v77 = 0;
            v78 = 8 * v133;
            do
            {
              v79 = *(void ***)((char *)v132 + v77);
              if (v79)
              {
                if (*v79 != v79 + 2)
                  free(*v79);
                MEMORY[0x2348A0E9C](v79, 0x1080C40ED926357);
              }
              v77 += 8;
            }
            while (v78 != v77);
          }
          v128[1503] = v135;
          LOBYTE(v136) = 1;
        }
        if (v132 != &v134)
          free(v132);
        if ((v129 & 1) == 0)
          llvm::deallocate_buffer(v130, (void *)(16 * v131));
        return v27;
      }
      v82 = a5;
      if (*(_DWORD *)v124[0] == 1)
      {
        v60 = (void *)*((_QWORD *)v124[0] + 1);
        goto LABEL_84;
      }
LABEL_91:
      v27 = 1;
      if ((*(_BYTE *)(*a4 + 1) & 0x80) == 0)
        goto LABEL_108;
      v139 = 0;
      v140 = 0;
      v138 = a1;
      v141 = 0;
      v142 = v146;
      v143 = v146;
      v144 = 2;
      v145 = 0;
      v147 = 0;
      LOBYTE(v148) = v92;
      HIBYTE(v148) = 1;
      *v82 = sub_22EDC7E54((uint64_t)&v138, v93, v94);
      if (v143 != v142)
        free(v143);
      llvm::deallocate_buffer(v139, (void *)(16 * v141));
      goto LABEL_95;
    }
    v45 = v93 & 0xFFFFFFFFFFFFFFF0;
    v46 = *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0);
    if (!v46 || (v47 = *(_DWORD *)(v46 + 16), (v47 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_54;
      v46 = sub_22F10CF48(v46);
      if (!v46)
        goto LABEL_54;
      v47 = *(_DWORD *)(v46 + 16);
    }
    if ((v47 & 0x100000) != 0)
    {
      do
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v46 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v46)
        {
          v80 = *(_DWORD *)(v46 + 16);
          if ((v80 & 0xFE) == 0x28)
            continue;
        }
        v46 = sub_22F10CF48(v46);
        v80 = *(_DWORD *)(v46 + 16);
      }
      while ((v80 & 0x100000) != 0);
    }
    v45 = *(_QWORD *)(v46 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_54:
    v48 = *(_QWORD *)v45;
    if (*(_QWORD *)v45)
      v49 = *(_BYTE *)(*(_QWORD *)v45 + 16) == 14;
    else
      v49 = 0;
    if (!v49
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 14 || !sub_22F10CF48(v48)))
    {
LABEL_81:
      v27 = 1;
      goto LABEL_108;
    }
    v50 = *(unsigned __int8 ***)(v43 + 16);
    v51 = *(_QWORD *)(v43 + 24) - (_QWORD)v50;
    v52 = (v51 >> 3);
    if ((v51 >> 3))
    {
      v53 = 8 * v52;
      while (**v50 != 164)
      {
        ++v50;
        v53 -= 8;
        if (!v53)
          goto LABEL_64;
      }
      goto LABEL_81;
    }
LABEL_64:
    v82 = a5;
    if ((v51 & 0x7FFFFFFF8) != 0)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      while (1)
      {
        v57 = *(unsigned __int8 **)(*(_QWORD *)(v43 + 16) + 8 * v54);
        v58 = sub_22EDC83BC(a1, (uint64_t)v126, 0, v84, v57, (uint64_t)&v98, v124, (uint64_t)&v95, 1, 0);
        if (v58)
          break;
        if ((!v56 || !(_DWORD)v55) && *(_DWORD *)v124[0])
        {
          sub_22F0D4E74((uint64_t)v57);
          v56 = v59;
          v55 = HIDWORD(v59);
        }
        if (v52 == ++v54)
          goto LABEL_72;
      }
      v69 = v58;
      v138 = (_QWORD *)(v56 | (v55 << 32));
      sub_22F0D4E74((uint64_t)v57);
      v139 = v70;
      v27 = sub_22EDC9004((uint64_t)v88, v69, (uint64_t *)&v138, 2);
      goto LABEL_108;
    }
LABEL_72:
    v44 = 180;
    if (*(_DWORD *)v124[0] == 1)
    {
      v60 = (void *)sub_22F32851C(a1, *((_QWORD *)v124[0] + 1), v38);
      if ((unint64_t)v60 < 0x10)
        goto LABEL_107;
LABEL_84:
      v63 = v93 & 0xFFFFFFFFFFFFFFF0;
      v64 = *(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0);
      if (!v64 || (v65 = *(_DWORD *)(v64 + 16), (v65 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_87;
        v64 = sub_22F10CF48(v64);
        if (!v64)
          goto LABEL_87;
        v65 = *(_DWORD *)(v64 + 16);
      }
      if ((v65 & 0x100000) != 0)
      {
        do
        {
          v64 = *(_QWORD *)(*(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v64)
          {
            v81 = *(_DWORD *)(v64 + 16);
            if ((v81 & 0xFE) == 0x28)
              continue;
          }
          v64 = sub_22F10CF48(v64);
          v81 = *(_DWORD *)(v64 + 16);
        }
        while ((v81 & 0x100000) != 0);
      }
      v63 = *(_QWORD *)(v64 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_87:
      v66 = *(_QWORD *)v63;
      v67 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v63 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v67 == 39)
      {
        v68 = v83;
        do
        {
          v66 = *(_QWORD *)(sub_22F10ACF8(v66) & 0xFFFFFFFFFFFFFFF0);
          v67 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        while (v67 == 39);
      }
      else
      {
        v68 = v83;
      }
      if (*(_BYTE *)(v66 + 16) == 14 || v67 == 14 && (v66 = sub_22F10CF48(v66)) != 0)
      {
        if (*(_QWORD *)(v66 + 40))
        {
          if ((v68 & 1) == 0)
          {
            sub_22F116CD8((uint64_t *)&v93);
            v27 = sub_22EDC7F30(a1, v66, v71, v72, v60);
            if ((_DWORD)v27)
              goto LABEL_108;
          }
        }
      }
      v139 = 0;
      v140 = 0;
      v138 = a1;
      v141 = 0;
      v142 = v146;
      v143 = v146;
      v144 = 2;
      v145 = 0;
      v147 = v60;
      v148 = 256;
      *v82 = sub_22EDC7E54((uint64_t)&v138, v93, v94);
      if (v143 != v142)
        free(v143);
      llvm::deallocate_buffer(v139, (void *)(16 * v141));
      v73 = *v82;
      if ((unint64_t)*v82 < 0x10)
        goto LABEL_107;
      if (v44 == 180)
        v73 = *((_QWORD *)v124[0] + 1);
      if ((_DWORD)v96)
      {
        v74 = v95;
        v75 = 24 * v96;
        v27 = 0;
        while (1)
        {
          v85 = *(_OWORD *)v74;
          v86 = v74[2];
          v76 = sub_22EDC2728((uint64_t)a1, (uint64_t)&v98, (uint64_t)&v85, v73);
          if (v76)
            break;
          v74 += 3;
          v75 -= 24;
          if (!v75)
            goto LABEL_108;
        }
        v62 = v76;
        *v82 = 0;
        goto LABEL_80;
      }
LABEL_95:
      v27 = 0;
      goto LABEL_108;
    }
    goto LABEL_91;
  }
  if (*(unsigned __int8 *)*a4 == 180)
  {
    sub_22F0D5A50(*a4);
    sub_22E8FCA40(a1, v25, 0xC56u, 0, (uint64_t)v91);
    v26 = (unsigned int *)v91;
LABEL_33:
    sub_22E903BEC(v26);
    return 2;
  }
  v29 = sub_22EB19A28(a1);
  if ((v29 & 1) != 0)
    return 2;
  v30 = (void *)sub_22EE8C654((uint64_t)a1, v29 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_QWORD *)(v22 + 40) && (a7 & 1) == 0)
  {
    v31 = a5;
    sub_22F116CD8((uint64_t *)&v93);
    v27 = sub_22EDC7F30(a1, v22, v32, v33, v30);
    if ((_DWORD)v27)
      return v27;
    v7 = v93;
    v13 = v94;
    a5 = v31;
  }
  v100 = 0;
  v98 = a1;
  v99 = 0;
  LODWORD(v101) = 0;
  v102 = (uint64_t)v106;
  v103 = v106;
  v104 = 2;
  v105 = 0;
  v107 = (unint64_t)v30;
  v108 = 256;
  *a5 = sub_22EDC7E54((uint64_t)&v98, v7, v13);
  if (v103 != (void *)v102)
    free(v103);
  llvm::deallocate_buffer(v99, (void *)(16 * v101));
  return 2 * ((unint64_t)*a5 < 0x10);
}

uint64_t sub_22EDC7E54(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v10;
  int64x2_t v11;
  _BYTE v12[32];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t)v12;
  v11 = vdupq_n_s64(0x20uLL);
  v13 = 0;
  v6 = sub_22F11598C(a2);
  if (v11.i64[0] < (unint64_t)v6)
    sub_22EEB52C0(&v10, v6);
  v7 = sub_22EDCEAC4(a1, &v10, a2, a3);
  if ((_BYTE *)v10 != v12 && v10 != 0)
    MEMORY[0x2348A0E84]();
  return v7;
}

uint64_t sub_22EDC7F30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  llvm::raw_ostream *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  const void *v33;
  size_t v34;
  unsigned int v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  int v53;
  void **v54;
  void *__p[2];
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[12];
  void *v61[2];
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[33];
  _QWORD v67[2];
  void *v68;
  uint64_t v69;
  _BYTE v70[96];
  char v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[10];

  v74[8] = *MEMORY[0x24BDAC8D0];
  v58 = a3;
  v59 = a4;
  v57 = a5;
  v67[1] = 0;
  v67[0] = 0;
  v68 = v70;
  v69 = 0x400000000;
  v71 = 0;
  v72 = v74;
  v73 = 0x400000000;
  v10 = *(_QWORD *)(a2 + 40);
  v64 = v66;
  v11 = *(_QWORD *)(a4 + 40);
  v65 = 0x800000000;
  v66[32] = v11;
  v12 = (unint64_t)sub_22EF579A8(a1[11], (unint64_t)a5, *(_DWORD *)a4);
  LODWORD(v61[0]) = 1;
  v61[1] = a5;
  v63 = v12 & 0xFFFFFFFFFFFFFFFCLL | 2;
  v13 = (_OWORD *)sub_22E78DF7C((uint64_t)&v64, (unint64_t)v61, 1);
  v14 = (char *)v64 + 32 * v65;
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  LODWORD(v65) = v65 + 1;
  v16 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v16)
  {
    v17 = a3 + 48;
    v18 = (unint64_t *)(a4 + 56);
    do
    {
      v19 = *v18++;
      v20 = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v61 = *(_OWORD *)v17;
      v62 = v20;
      v63 = v19;
      v21 = (_OWORD *)sub_22E78DF7C((uint64_t)&v64, (unint64_t)v61, 1);
      v22 = (char *)v64 + 32 * v65;
      v23 = v21[1];
      *v22 = *v21;
      v22[1] = v23;
      LODWORD(v65) = v65 + 1;
      v17 += 24;
      --v16;
    }
    while (v16);
  }
  v61[0] = &v62;
  v61[1] = (void *)0x400000000;
  if ((sub_22ED61988(a1, v10, 0, &v64, 0, v61, 1, 0) & 1) != 0)
    goto LABEL_6;
  v60[0] = *(_QWORD *)(v10 + 64);
  v24 = v61[0];
  v25 = LODWORD(v61[1]);
  v26 = sub_22EDEA14C(&v58);
  if ((sub_22E9F3578(a1, v10, v60, 1, v24, v25, v26, v67) & 1) != 0)
    goto LABEL_6;
  if (!v71)
  {
    __p[0] = 0;
    __p[1] = 0;
    v56 = 0;
    v47 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 1;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v46 = MEMORY[0x24BED83D8] + 16;
    v54 = __p;
    llvm::raw_ostream::SetBufferAndMode();
    v29 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "'");
    v30 = *(_QWORD *)(v10 + 40);
    if ((v30 & 7) == 0)
    {
      v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (v31)
      {
        v32 = *(unsigned int **)(v31 + 16);
        v35 = *v32;
        v33 = v32 + 4;
        v34 = v35;
        v36 = (void *)*((_QWORD *)v29 + 4);
        if ((unint64_t)v35 <= *((_QWORD *)v29 + 3) - (_QWORD)v36)
        {
          if (v34)
          {
            memcpy(v36, v33, v34);
            *((_QWORD *)v29 + 4) += v34;
          }
        }
        else
        {
          llvm::raw_ostream::write(v29, (const char *)v33);
        }
      }
    }
    if (*(_DWORD *)(v59 + 40))
    {
      v37 = *(unsigned int *)(a2 + 20);
      v60[0] = sub_22E8FCD8C(a1[11], a1[10]);
      v60[1] = v38;
      sub_22F117B8C((llvm::raw_ostream *)&v46, a2 + 48, v37, (uint64_t)v60, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56), 0, 0);
    }
    if (v49 == v50)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "'");
      v39 = v50;
    }
    else
    {
      *v50 = 39;
      v39 = ++v50;
    }
    if (v39 != v48)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v46);
    sub_22E8FCA40(a1, *(_DWORD *)(v59 + 28), 0x11A6u, 0, (uint64_t)v60);
    v40 = sub_22E8901B8((uint64_t)v60, (uint64_t *)&v57);
    v41 = sub_22E90749C(v40, __p);
    v45 = sub_22EDEA14C(&v58);
    sub_22E8906A0(v41, (uint64_t *)&v45);
    sub_22E903BEC((unsigned int *)v60);
    if ((_DWORD)v73)
    {
      v42 = 16 * v73;
      v43 = (char *)v72 + 8;
      v44 = 1;
      do
      {
        sub_22E9F4654(a1, v43, v44 & 1);
        v44 = 0;
        v43 += 2;
        v42 -= 16;
      }
      while (v42);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v46);
    if (SHIBYTE(v56) < 0)
      operator delete(__p[0]);
LABEL_6:
    v27 = 2;
    goto LABEL_7;
  }
  v27 = 0;
LABEL_7:
  if (v61[0] != &v62)
    free(v61[0]);
  if (v64 != v66)
    free(v64);
  if (v72 != v74)
    free(v72);
  if (v68 != v70)
    free(v68);
  return v27;
}

uint64_t sub_22EDC83BC(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, _QWORD *a7, uint64_t a8, char a9, int a10)
{
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int *v32;
  BOOL v33;
  unsigned int *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _OWORD *v48;
  _OWORD *v49;
  unsigned int v50;
  int v51;
  _BOOL4 v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  unsigned int *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  unint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  BOOL v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108[2];
  uint64_t v109;
  uint64_t v110;
  char v111[8];
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  int v117;
  _QWORD *v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  unsigned int v124;
  int v125;
  _BYTE v126[256];
  uint64_t v127;
  unsigned int v128;
  int v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  _BYTE v133[128];
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  void *v140;
  uint64_t v141;
  _BYTE v142[64];
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[96];
  char v148;
  void *v149;
  uint64_t v150;
  _BYTE v151[64];
  void *v152;
  uint64_t v153;
  _QWORD v154[35];

  v13 = a5;
  v14 = a4;
  v154[33] = *MEMORY[0x24BDAC8D0];
  v17 = *((_QWORD *)a5 + 1);
  v18 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((a4 & 0xF) != 0 || (*(_BYTE *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
  {
    v19 = *(_QWORD *)v18;
    if ((*(_BYTE *)(*(_QWORD *)v18 + 8) & 0xF) != 0)
      v19 = (unint64_t)sub_22F10D2BC(a4);
    v18 = v19 & 0xFFFFFFFFFFFFFFF0;
    v20 = v19 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v20 = a4;
  }
  v21 = *(_QWORD *)v18;
  if (!*(_QWORD *)v18 || (v22 = *(_DWORD *)(v21 + 16), (v22 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
    {
      v117 = 0;
      v21 = 0;
      goto LABEL_22;
    }
    v23 = sub_22F10CF48(v21);
    v21 = v23;
    if (!v23)
    {
      v117 = 0;
      goto LABEL_22;
    }
    v22 = *(_DWORD *)(v23 + 16);
  }
  v24 = v21;
  if ((v22 & 0x100000) != 0)
  {
    v24 = v21;
    do
    {
      while (1)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v24)
          break;
        v25 = *(_DWORD *)(v24 + 16);
        if ((v25 & 0xFE) != 0x28)
          break;
        if ((v25 & 0x100000) == 0)
          goto LABEL_18;
      }
      v24 = sub_22F10CF48(v24);
    }
    while ((*(_DWORD *)(v24 + 16) & 0x100000) != 0);
  }
LABEL_18:
  v20 = *(_QWORD *)(v24 + 32);
  v117 = 1;
LABEL_22:
  v119 = a1;
  if (v17 == *(_QWORD *)(a1[11] + 16840))
  {
    *(_QWORD *)v111 = v21;
    v26 = (unsigned int *)sub_22E9058F0(v13);
    v120 = v26;
    v121 = v27;
    v28 = v117 | 2;
    if (!(_BYTE)v27)
      v28 = v117;
    HIDWORD(v113) = v28;
    v112 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v29 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v30 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((v30 - 25) < 2)
      goto LABEL_28;
    if ((*(_BYTE *)(v29 + 16) == 39 || v30 == 39 && (v29 = sub_22F10CF48(v29)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 < 2)
    {
      goto LABEL_28;
    }
    v56 = *v112;
    v57 = *v112 && *(_BYTE *)(*v112 + 16) == 31;
    if ((v57
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31
       && (v56 = sub_22F10CF48(v56)) != 0)
      && sub_22F28C8B4(v56))
    {
LABEL_28:
      v104 = v154;
      v152 = v154;
      v153 = 0x800000000;
      v154[32] = 0;
      v31 = *v26;
      v110 = (uint64_t)a7;
      if ((*v26 & 0x40000) != 0)
      {
        v32 = v26 + 16;
        if (v31 != 211)
          v32 = v26 + 20;
        if (v32[2 * v26[1]])
        {
          sub_22E9C442C(v26, (uint64_t)&v152);
          v31 = *(unsigned __int8 *)v26;
        }
      }
      HIDWORD(v105) = a3;
      v106 = v14;
      v107 = (uint64_t)v13;
      v114 = v20;
      *(_QWORD *)v108 = a8;
      v109 = a6;
      v33 = v31 == 211;
      if (v31 == 211)
        v34 = v26;
      else
        v34 = 0;
      v35 = v34 + 16;
      if (v33)
        v36 = v35;
      else
        v36 = v26 + 20;
      v37 = v26[1];
      if ((_DWORD)v37)
      {
        v17 = 0;
        v115 = (uint64_t)(v26 + 16);
        v103 = (uint64_t)&loc_22F44E000;
        v116 = &v36[v37];
        while (1)
        {
          v38 = *v36 & 0xFFFFFFFFFFFFFFFCLL;
          v39 = *(_DWORD *)(v38 + 28);
          if ((v39 & 0x7Fu) <= 0x2F && ((1 << (v39 & 0x7F)) & 0xC00000060000) != 0)
          {
            v38 = sub_22EFBAEA4(*v36 & 0xFFFFFFFFFFFFFFFCLL);
            v39 = *(_DWORD *)(v38 + 28);
          }
          if ((v39 & 0x7F) != 0x1D)
            goto LABEL_58;
          if ((*v26 & 0x40000) == 0)
            break;
          v41 = v26 + 20;
          if (*v26 == 211)
            v41 = (unsigned int *)v115;
          if (!v41[2 * v26[1]])
            break;
          v123 = 0;
          v42 = v26[6];
          v127 = 0;
          v128 = v42;
          LOBYTE(v129) = 0;
          v130 = 0;
          v131 = v133;
          v132 = 0x400000000;
          v134 = 0;
          v135 = 0;
          v136 = 0;
          v137 = 0;
          v138 = 0;
          v139 = 0;
          v140 = v142;
          v141 = 0x800000000;
          v143 = 0;
          v144 = 0;
          v145 = v147;
          v146 = 0x400000000;
          v148 = 0;
          v149 = v151;
          v150 = 0x400000000;
          v43 = sub_22EDC3E48(a1, v38, &v152, 0, &v123, &v127, 0);
          v38 = (uint64_t)v123;
          if (v149 != v151)
            free(v149);
          if (v145 != v147)
            free(v145);
          if (v140 != v142)
            free(v140);
          sub_22E89277C(&v131);
          if (!v43)
          {
LABEL_58:
            v44 = sub_22EDEA1C4((uint64_t)a1, (uint64_t)&v120, v38);
            if (v44 >= 0x10)
            {
              v45 = v44;
              if ((v117 & 1) == 0
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v112 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
                && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16)
                 - 25 <= 1)
              {
                v102 = v102 & 0xFFFFFFFF00000000 | v103 & 0xE0;
                v45 = sub_22EF5B848(a1[11], v44, v103 & 0xE0);
                v103 = v103 & 0xFFFFFFE0;
              }
              v46 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
              v47 = v46;
              v123 = v126;
              v125 = 8;
              if (v46 < 9)
              {
                if ((_DWORD)v46)
                {
                  v49 = v126;
                  do
                  {
                    *v49 = 0uLL;
                    v49[1] = 0uLL;
                    v49 += 2;
                    --v46;
                  }
                  while (v46);
                }
              }
              else
              {
                v124 = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v48 = v123;
                do
                {
                  *v48 = 0uLL;
                  v48[1] = 0uLL;
                  v48 += 2;
                  --v46;
                }
                while (v46);
              }
              v124 = v47;
              v50 = v26[6];
              v127 = 0;
              v128 = v50;
              LOBYTE(v129) = 0;
              v130 = 0;
              v131 = v133;
              v132 = 0x400000000;
              v134 = 0;
              v135 = 0;
              v136 = 0;
              v137 = 0;
              v138 = 0;
              v139 = 0;
              v140 = v142;
              v141 = 0x800000000;
              v143 = 0;
              v144 = 0;
              v145 = v147;
              v146 = 0x400000000;
              v148 = 0;
              v149 = v151;
              v150 = 0x400000000;
              v51 = sub_22EDC45FC((uint64_t)v119, a2, v114, v45, (uint64_t)&v127, &v123, SBYTE4(v113), 0, 0, SBYTE1(v100), v101, v102, v103, (uint64_t)v104, v105, v106, v107, v108[0], v108[1],
                      v109,
                      v110,
                      v111[0],
                      v112,
                      v113,
                      v114,
                      v115);
              v52 = v17 > 0xF;
              if (v17 <= 0xF)
                v53 = v45;
              else
                v53 = v17;
              if (v51)
              {
                v54 = 4;
              }
              else
              {
                v17 = v53;
                v54 = v52;
              }
              if (v149 != v151)
                free(v149);
              if (v145 != v147)
                free(v145);
              if (v140 != v142)
                free(v140);
              sub_22E89277C(&v131);
              if (v123 != v126)
                free(v123);
              v55 = v54 | 4;
              a1 = v119;
              if (v55 != 4)
                break;
            }
          }
          if (++v36 == v116)
            goto LABEL_88;
        }
      }
      v17 = 0;
LABEL_88:
      if (v152 != v104)
        free(v152);
      a6 = v109;
      a7 = (_QWORD *)v110;
      v13 = (unsigned __int8 *)v107;
      a8 = *(_QWORD *)v108;
      v20 = v114;
      v14 = v106;
      a3 = HIDWORD(v105);
    }
    else if ((*v26 & 0x40000) != 0
           && (*v26 != 211 ? (v58 = v26 + 20) : (v58 = v26 + 16),
               v58[2 * v26[1]] && (v59 = sub_22ED14F7C(a1, v26, 0, 0)) != 0)
           || (v59 = sub_22ED14440(a1, v13, &v127)) != 0)
    {
      v17 = sub_22EDEA1C4((uint64_t)a1, (uint64_t)&v120, v59);
    }
    else
    {
      v17 = 0;
    }
    v21 = *(_QWORD *)v111;
    if (v17 < 0x10)
      return 0;
  }
  v60 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  v61 = *(_QWORD *)(v60 + 8);
  v62 = *(unsigned __int8 *)(*(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v117)
  {
    if (v62 == 4)
      v17 = sub_22EE8B05C((uint64_t)a1, (uint64_t)v13);
    if (sub_22EDCD4B4(v21 & 0xFFFFFFFFFFFFFFF0, a3) && (*(_DWORD *)v13 & 0x300) == 0x100)
    {
      if ((*(_DWORD *)(a1[9] + 52) & 0x40000000) != 0)
      {
        v63 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v63 & 8) == 0 || (*(_DWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0)
        {
          v64 = a1[11];
          if ((*(_QWORD *)(*(_QWORD *)(v64 + 2000) + 64) & 0x100000000) != 0)
            v65 = 5;
          else
            v65 = 4;
          v17 = sub_22EF5DD84(v64, v17, v65);
        }
      }
      v17 = sub_22EF5F8C4(a1[11], v17, 1);
    }
    v66 = 9;
    goto LABEL_130;
  }
  if ((v62 & 0xFEu) - 2 > 3)
  {
    if ((v62 - 25) > 1)
    {
      if ((v61 & 0xF) != 0)
        v60 = (unint64_t)sub_22F10D2BC(v17);
      v17 = v60 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_129;
    }
    v67 = sub_22EF5B848(a1[11], v17, 0);
  }
  else
  {
    v67 = sub_22EF5F824(a1[11], v17);
  }
  v17 = v67;
LABEL_129:
  v66 = 8;
LABEL_130:
  v68 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  v69 = v68 > 0x27;
  v70 = (1 << v68) & 0x8180000000;
  if (!v69 && v70 != 0)
    v66 |= 2u;
  if (sub_22EDCCBC4(v20)
    || (v72 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v72 + 16) == 39)
    && sub_22EDCCBC4(*(_QWORD *)(v72 + 32)))
  {
    v66 |= 4u;
  }
  if (*v13 != 180)
  {
    v127 = v14;
    LOBYTE(v128) = a9;
    v129 = a10;
    v130 = v17;
    v75 = *(_DWORD *)(a8 + 8);
    v76 = *(_QWORD *)a8;
    v77 = (char *)&v127;
    if (v75 >= *(_DWORD *)(a8 + 12))
    {
      v98 = v76 + 24 * v75 > (unint64_t)&v127;
      v78 = (uint64_t)v119;
      if (v76 <= (unint64_t)&v127 && v98)
      {
        v99 = (char *)&v127 - v76;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v76 = *(_QWORD *)a8;
        v77 = &v99[*(_QWORD *)a8];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v76 = *(_QWORD *)a8;
        v77 = (char *)&v127;
      }
    }
    else
    {
      v78 = (uint64_t)v119;
    }
    v79 = v76 + 24 * *(unsigned int *)(a8 + 8);
    v80 = *(_OWORD *)v77;
    *(_QWORD *)(v79 + 16) = *((_QWORD *)v77 + 2);
    *(_OWORD *)v79 = v80;
    ++*(_DWORD *)(a8 + 8);
    return sub_22EDC45FC(v78, a2, v20, v17, a6, a7, v66, 0, 0, SBYTE1(v100), v101, v102, v103, (uint64_t)v104, v105, v106, v107, v108[0], v108[1],
             v109,
             v110,
             v111[0],
             v112,
             v113,
             v114,
             v115);
  }
  if (((*((_QWORD *)v13 + 3) - *((_QWORD *)v13 + 2)) & 0x7FFFFFFF8) == 0)
    return 0;
  v122 = 0;
  v73 = sub_22EF5C728(v119[11], v20);
  v74 = v73;
  if (v73)
  {
    v122 = *(_QWORD *)(v73 + 32);
  }
  else if ((sub_22EAC21FC(v119, v20, &v122) & 1) == 0)
  {
    return 0;
  }
  v83 = (_QWORD *)*((_QWORD *)v13 + 2);
  v84 = ((*((_QWORD *)v13 + 3) - (_QWORD)v83) >> 3);
  if (((*((_QWORD *)v13 + 3) - (_QWORD)v83) >> 3))
  {
    v85 = 8 * v84;
    v86 = (unsigned __int8 **)*((_QWORD *)v13 + 2);
    while (**v86 != 164)
    {
      ++v86;
      v85 -= 8;
      if (!v85)
        goto LABEL_152;
    }
    return 0;
  }
LABEL_152:
  v87 = v13;
  if (((*((_QWORD *)v13 + 3) - (_QWORD)v83) >> 3)
    && (*(_DWORD *)(*(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x400) != 0)
  {
    v88 = 8 * v84;
    do
    {
      HIDWORD(v100) = a10;
      LOBYTE(v100) = 1;
      v81 = sub_22EDC83BC(v119, a2, 0, v122, *v83, a6, a7, a8, v100);
      if ((_DWORD)v81)
        return v81;
      ++v83;
      v88 -= 8;
    }
    while (v88);
  }
  if (!v74)
    return 0;
  if (*(_BYTE *)(v74 + 16) != 3)
    return 0;
  v89 = sub_22EDCC8AC(*(unsigned __int8 **)(v74 + 48), *(_DWORD *)(a6 + 16));
  if (!v89)
    return 0;
  v90 = v89;
  v91 = v119[11];
  v92 = sub_22EF67C8C(v91);
  v93 = sub_22EF6A330(v91, v92);
  v94 = ((*((_QWORD *)v87 + 3) - *((_QWORD *)v87 + 2)) >> 3);
  LODWORD(v153) = v93;
  if (v93 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v152);
    v93 = v153;
    LODWORD(v121) = v153;
    if (v153 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v120, (const llvm::APInt *)&v152);
      v93 = v121;
      v96 = v120;
      goto LABEL_165;
    }
    v96 = v152;
  }
  else
  {
    if (v93)
      v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
    else
      v95 = 0;
    v96 = (void *)(v95 & v94);
    v152 = v96;
    LODWORD(v121) = v93;
  }
  v120 = (unsigned int *)v96;
LABEL_165:
  v124 = v93;
  v123 = v96;
  LODWORD(v121) = 0;
  LOBYTE(v125) = 1;
  sub_22F0EEA4C((uint64_t)&v127, v119[11], &v123, v92);
  LOBYTE(v131) = 1;
  v82 = sub_22EDCC94C((uint64_t)v119, a2, v90, (uint64_t)&v127, v92, a6, a7);
  if (v124 >= 0x41 && v123)
    MEMORY[0x2348A0E84](v123, 0x1000C8000313F17);
  if (v121 >= 0x41 && v120)
    MEMORY[0x2348A0E84](v120, 0x1000C8000313F17);
  if (v153 >= 0x41 && v152)
    MEMORY[0x2348A0E84](v152, 0x1000C8000313F17);
  if (!(_DWORD)v82)
    return 0;
  return v82;
}

uint64_t sub_22EDC9004(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  llvm *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  char v25;
  char v26;

  v5 = *(_QWORD **)(a1 + 16);
  if ((*(_BYTE *)(**(_QWORD **)a1 + 1) & 0x80) != 0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = **(_BYTE **)(a1 + 24);
    v20 = v24;
    v21 = v24;
    v17 = 0;
    v18 = 0;
    v16 = v5;
    v19 = 0;
    v22 = 2;
    v23 = 0;
    v24[2] = 0;
    v25 = v8 & 1;
    v26 = 1;
    **(_QWORD **)(a1 + 8) = sub_22EDC7E54((uint64_t)&v16, *(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    if (v21 != v20)
      free(v21);
    llvm::deallocate_buffer(v17, (void *)(16 * v19));
    return 0;
  }
  else if (a2 == 5)
  {
    v11 = *(_QWORD *)(a1 + 40);
    sub_22E8FCA40(v5, *(_DWORD *)(v11 + 8), 0xB42u, 0, (uint64_t)&v16);
    v12 = sub_22F31ABB4((uint64_t)&v16, v11 + 176);
    sub_22F31ABB4(v12, v11 + 200);
    if (a4)
    {
      v13 = 8 * a4;
      do
      {
        v14 = *a3++;
        v15 = v14;
        sub_22E8906A0((uint64_t)&v16, &v15);
        v13 -= 8;
      }
      while (v13);
    }
    sub_22E903BEC((unsigned int *)&v16);
    return 2;
  }
  else
  {
    return 1;
  }
}

unint64_t sub_22EDC913C(_QWORD **a1, unint64_t a2)
{
  uint64_t *v3;
  unint64_t *v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8((*a1)[11], a2, 0);
    v4 = sub_22EDC9190(a1, v3);
    if (v4)
      return *v4;
    else
      return 0;
  }
  return a2;
}

unint64_t *sub_22EDC9190(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned __int32 v15;
  uint64_t v17;
  int64x2_t v18;
  _BYTE v19[32];
  uint64_t v20;
  uint64_t v21;

  v2 = (unint64_t *)a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v17 = (uint64_t)v19;
    v18 = vdupq_n_s64(0x20uLL);
    v20 = 0;
    v9 = sub_22F11598C(v8);
    if (v18.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v17, v9);
    v10 = sub_22EDCEAC4(a1, (uint64_t)&v17, v8, v4);
    if (v10 > 0xF)
    {
      v12 = v10;
      v13 = (*a1)[11];
      v14 = v18.i64[0] - v18.i64[1];
      v15 = v18.i32[0] - v18.i32[2];
      if (v18.i32[0] == v18.i32[2])
        v15 = sub_22F11598C(v12);
      v2 = (unint64_t *)sub_22E3CD3D4(v13 + 2032, v15 + 8, 3);
      *v2 = v12;
      v11 = (_BYTE *)v17;
      memcpy(v2 + 1, (const void *)(v17 + v18.i64[1]), v14);
    }
    else
    {
      v2 = 0;
      v11 = (_BYTE *)v17;
    }
    if (v11 != v19 && v11)
      MEMORY[0x2348A0E84](v11, 0x1000C8077774924);
  }
  return v2;
}

uint64_t sub_22EDC93B8(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8)
{
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v18[3];
  uint64_t v19;
  uint64_t v20;

  v19 = a3;
  v20 = a2;
  v18[0] = &v20;
  v18[1] = &v19;
  v18[2] = a1;
  v13 = sub_22EDC94AC((uint64_t)a1, a4, a2, a3, a5, a6, a8);
  v14 = sub_22EDC94AC((uint64_t)a1, a4, v19, v20, a5, a7, a8);
  if (v13 != v14)
  {
    if (v13)
      v15 = &v20;
    else
      v15 = &v19;
    return *v15;
  }
  if (((v13 | v14) & 1) != 0)
  {
    v16 = sub_22EDC9DA8(v20);
    if (v16 != sub_22EDC9DA8(v19))
    {
      v15 = &v20;
      if (v16)
        v15 = &v19;
      return *v15;
    }
  }
  return sub_22EDC9B6C(v18);
}

uint64_t sub_22EDC94AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  unsigned int v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  char *v71[2];
  _QWORD v72[17];
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  void *v78;
  uint64_t v79;
  _QWORD v80[10];
  void *v81;
  uint64_t v82;
  _BYTE v83[104];
  void *v84;
  uint64_t v85;
  _BYTE v86[64];
  int *v87;
  uint64_t v88;
  _QWORD v89[18];

  v57 = a1;
  v89[16] = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a3 + 48);
  v13 = *(_QWORD *)(a4 + 48);
  v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 26;
  else
    v15 = 0;
  if (!v15)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v14 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0));
    else
      v14 = 0;
  }
  v16 = (uint64_t *)(v13 + 48);
  v17 = *(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
    v18 = *(_BYTE *)(v17 + 16) == 26;
  else
    v18 = 0;
  if (!v18)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v17 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0));
    else
      v17 = 0;
  }
  v19 = *(_QWORD *)(a4 + 56);
  v56 = (int *)v89;
  v87 = (int *)v89;
  v88 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v87, *(_DWORD *)(v19 + 12) & 0x1FFFFFFF);
  v67 = 0;
  v68 = a2;
  v69 = 0;
  v70 = 0;
  v71[0] = (char *)v72;
  v71[1] = (char *)0x400000000;
  v72[16] = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = v80;
  v79 = 0x800000000;
  v80[8] = 0;
  v80[9] = 0;
  v55 = v83;
  v81 = v83;
  v82 = 0x400000000;
  v83[96] = 0;
  v54 = v86;
  v84 = v86;
  v85 = 0x400000000;
  v64 = v66;
  v65 = 0x400000000;
  switch(a5)
  {
    case 2:
      v21 = *v16;
      v22 = *(_QWORD *)(v12 + 48);
LABEL_31:
      v23 = 0;
      if (sub_22EDC45FC(v57, v19, v21, v22, (uint64_t)&v67, &v87, 0, 1, 0, SBYTE1(v50), v51, v52, v53, (uint64_t)v86, (uint64_t)v83, (uint64_t)v89, v57, (int)v58, SBYTE4(v58),
                           v59,
                           v60,
                           v61,
                           v62,
                           v63,
                           (uint64_t)v64,
                           v65))
        goto LABEL_81;
      break;
    case 1:
      v21 = *(_QWORD *)(v17 + 24);
      v22 = *(_QWORD *)(v14 + 24);
      goto LABEL_31;
    case 0:
      if ((*(_DWORD *)(v12 + 28) & 0x7Eu) - 54 >= 4)
        v12 = 0;
      v20 = (*(_DWORD *)(v13 + 28) & 0x7Eu) - 54 >= 4 ? 0 : (_QWORD *)v13;
      v58 = &v60;
      v59 = 0x400000000;
      if (v20 || !v12)
      {
        if (v12 || !v20)
        {
          if (v12 && v20 && a7)
          {
            sub_22EDEA480(*(_QWORD *)(v57 + 88), v12, (uint64_t)&v58);
            sub_22EDEA480(*(_QWORD *)(v57 + 88), (uint64_t)v20, (uint64_t)&v64);
            ++a6;
          }
        }
        else if ((*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v20 + 32))(v20) + 80) & 0xE000) != 0x4000
               && ((v20[5] & 7) != 6 || (*(_DWORD *)(v20[5] & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
        {
          sub_22EDEA480(*(_QWORD *)(v57 + 88), (uint64_t)v20, (uint64_t)&v64);
        }
      }
      else if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) + 80) & 0xE000) != 0x4000
             && ((*(_QWORD *)(v12 + 40) & 7) != 6
              || (*(_DWORD *)(*(_QWORD *)(v12 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
      {
        sub_22EDEA480(*(_QWORD *)(v57 + 88), v12, (uint64_t)&v58);
        ++a6;
      }
      sub_22EDEA668((unsigned int *)&v58, (uint64_t)v58 + 8 * v59, (uint64_t *)(v14 + 40), (uint64_t *)(v14 + 40 + 8 * (unsigned __int16)(*(_QWORD *)(v14 + 16) >> 38)));
      sub_22EDEA668((unsigned int *)&v64, (uint64_t)v64 + 8 * v65, (uint64_t *)(v17 + 40), (uint64_t *)(v17 + 40 + 8 * (unsigned __int16)(*(_QWORD *)(v17 + 16) >> 38)));
      if (v59 > a6)
        sub_22E50D8F0((uint64_t)&v58, a6);
      v24 = v65;
      if (v65 > a6)
      {
        sub_22E50D8F0((uint64_t)&v64, a6);
        v24 = v65;
      }
      v25 = v64;
      if (a7)
      {
        if (v24)
        {
          v26 = (char *)v64 + 8 * v24 - 8;
          if (v64 < v26)
          {
            v27 = (char *)v64 + 8;
            do
            {
              v28 = *((_QWORD *)v27 - 1);
              *((_QWORD *)v27 - 1) = *(_QWORD *)v26;
              *(_QWORD *)v26 = v28;
              v26 -= 8;
              v29 = v27 >= v26;
              v27 += 8;
            }
            while (!v29);
          }
        }
      }
      BYTE4(v50) = 1;
      LODWORD(v50) = 0;
      v30 = sub_22EDCD718(v57, v19, (uint64_t)v25, v24, (uint64_t)v58, v59, (uint64_t)&v67, (uint64_t)&v87, v50);
      if (v58 != &v60)
        free(v58);
      if (v30)
      {
        v23 = 0;
        goto LABEL_81;
      }
      break;
  }
  v31 = v88;
  if (!(_DWORD)v88)
  {
LABEL_61:
    v23 = 1;
    goto LABEL_81;
  }
  v32 = 0;
  v33 = v87;
  while (1)
  {
    v34 = *v33;
    v33 += 8;
    if (!v34)
      break;
    if (v88 == ++v32)
      goto LABEL_61;
  }
  v35 = *(_DWORD *)(v19 + 12);
  v36 = v35 & 0x1FFFFFFF;
  if ((v35 & 0x1FFFFFFF) > 0x39)
  {
    v37 = (_QWORD *)operator new();
    *v37 = v37 + 2;
    v37[1] = 0x600000000;
    sub_22E47EDD0((uint64_t)v37, (v36 + 63) >> 6, 0);
    *((_DWORD *)v37 + 16) = v36;
  }
  else
  {
    v37 = (_QWORD *)(((unint64_t)v35 << 58) | 1);
  }
  v58 = v37;
  if (a5 != 2)
  {
    if (a5 != 1)
    {
      if (!a5 && (_DWORD)v65)
      {
        v38 = 0;
        v39 = 8 * v65;
        do
        {
          v40 = *(_QWORD *)(v57 + 88);
          v41 = *(_QWORD *)((char *)v64 + v38);
          v42 = sub_22EFE90A8(v19);
          sub_22EDCB2BC(v40, v41, 0, v42, (unint64_t *)&v58);
          v38 += 8;
        }
        while (v39 != v38);
      }
      goto LABEL_73;
    }
    v16 = (uint64_t *)(v17 + 24);
  }
  v43 = *(_QWORD *)(v57 + 88);
  v44 = *v16;
  v45 = sub_22EFE90A8(v19);
  sub_22EDCB2BC(v43, v44, 0, v45, (unint64_t *)&v58);
LABEL_73:
  if (v31 == (_DWORD)v32)
  {
LABEL_79:
    v23 = 1;
  }
  else
  {
    while (1)
    {
      v46 = v32;
      if (!v87[8 * v32])
      {
        v47 = v32;
        v48 = ((unint64_t)v58 >> 1) & ~(-1 << ((unint64_t)v58 >> 58));
        if ((v58 & 1) == 0)
        {
          v47 = v32 & 0x3F;
          v48 = *(_QWORD *)(*(_QWORD *)v58 + 8 * (v32 >> 6));
        }
        if (((v48 >> v47) & 1) != 0)
          break;
      }
      LODWORD(v32) = v32 + 1;
      if (v31 == v46 + 1)
        goto LABEL_79;
    }
    v23 = 0;
  }
  sub_22E54C5D0((void ***)&v58);
LABEL_81:
  if (v64 != v66)
    free(v64);
  if (v84 != v54)
    free(v84);
  if (v81 != v55)
    free(v81);
  if (v78 != v80)
    free(v78);
  sub_22E89277C(v71);
  if (v87 != v56)
    free(v87);
  return v23;
}

uint64_t sub_22EDC9B6C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[24];
  void *v20;
  uint64_t v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v2 = a1[2];
  v20 = v22;
  v21 = 0x300000000;
  v17 = v19;
  v18 = 0x300000000;
  v3 = **a1;
  sub_22EFE9164(*(_QWORD *)(v3 + 56), (uint64_t)&v20);
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 52 <= 5)
    {
      v10 = *(_QWORD *)(v4 + 56);
      if ((v10 & 4) != 0)
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 40);
        if (v11)
        {
          v12 = v21;
          if (v21 >= HIDWORD(v21))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v12 = v21;
          }
          *((_QWORD *)v20 + v12) = v11;
          LODWORD(v21) = v21 + 1;
        }
      }
    }
  }
  v5 = a1[1];
  v6 = *v5;
  sub_22EFE9164(*(_QWORD *)(*v5 + 56), (uint64_t)&v17);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7)
  {
    if ((*(_DWORD *)(v7 + 28) & 0x7Eu) - 52 <= 5)
    {
      v13 = *(_QWORD *)(v7 + 56);
      if ((v13 & 4) != 0)
      {
        v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 40);
        if (v14)
        {
          v15 = v18;
          if (v18 >= HIDWORD(v18))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v18;
          }
          *((_QWORD *)v17 + v15) = v14;
          LODWORD(v18) = v18 + 1;
        }
      }
    }
  }
  v16 = 0;
  if ((sub_22E9F4DA0(v2, **a1, v20, v21, *a1[1], v17, v18, (char *)&v16 + 1) & 1) != 0
    || (sub_22E9F4DA0(v2, *a1[1], v17, v18, **a1, v20, v21, &v16) & 1) != 0
    || HIBYTE(v16) == v16)
  {
    v8 = 0;
  }
  else
  {
    v8 = *a1[HIBYTE(v16) == 0];
  }
  if (v17 != v19)
    free(v17);
  if (v20 != v22)
    free(v20);
  return v8;
}

uint64_t sub_22EDC9DA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  BOOL v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 48);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v3 = *(_BYTE *)(result + 16) == 26;
  else
    v3 = 0;
  if (!v3)
  {
    v7 = v1;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = sub_22F10CF48(result);
    v1 = v7;
    if (!result)
      return result;
  }
  v4 = (unsigned __int16)(*(_QWORD *)(result + 16) >> 38);
  if (!(unsigned __int16)(*(_QWORD *)(result + 16) >> 38))
    return 0;
  v5 = *(_QWORD *)(v1 + 120);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8 * (v4 - 1)) + 48) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 36)
    return 0;
  do
  {
    result = v4 == 1;
    if (v4 == 1)
      break;
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8 * (v4 - 2)) + 48) & 0xFFFFFFFFFFFFFFF0)
                            + 16);
    --v4;
  }
  while (v6 != 36);
  return result;
}

_QWORD *sub_22EDC9E74(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8, char a9, unint64_t a10)
{
  _QWORD *v10;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v18;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  void **v37;
  size_t v38;
  unsigned int v42[24];
  void *__p[2];
  char v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unsigned int v47[24];
  unsigned int v48[26];

  v10 = a3;
  if (a2 == a3)
  {
    if (a9)
    {
      sub_22E90379C(a1, a5, a6, 0, (uint64_t)v48);
      sub_22E903BEC(v48);
      sub_22ED13154(a4, (uint64_t)a1, a5);
    }
  }
  else
  {
    v12 = a2;
    v13 = a2 + 1;
    if (a2 + 1 == a3)
    {
      return a2;
    }
    else
    {
      v14 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFCLL) + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFCLL) + 144) & 6) != 4 || v14 == 0)
        v18 = 0;
      else
        v18 = *(_QWORD *)(v14 + 16) & 0xFFFFFFFFFFFFFFF8;
      v20 = a2;
      do
      {
        v21 = *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFFCLL) + 144) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFFCLL) + 144) & 6) != 4 || v21 == 0)
          v23 = 0;
        else
          v23 = *(_QWORD *)(v21 + 16) & 0xFFFFFFFFFFFFFFF8;
        v24 = sub_22EDC93B8(a1, v18, v23, a5, 2, 0, 0, 0);
        if (v24 == v23
          || v23
          && v24
          && (v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24),
              v25 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23)))
        {
          v20 = v13;
          v18 = v23;
        }
        ++v13;
      }
      while (v13 != v10);
      v26 = v12;
      while (1)
      {
        if (v26 != v20)
        {
          v27 = *(_QWORD *)((*v26 & 0xFFFFFFFFFFFFFFFCLL) + 144) & 0xFFFFFFFFFFFFFFF8;
          v28 = (*(_QWORD *)((*v26 & 0xFFFFFFFFFFFFFFFCLL) + 144) & 6) != 4 || v27 == 0;
          v29 = v28 ? 0 : *(_QWORD *)(v27 + 16) & 0xFFFFFFFFFFFFFFF8;
          v30 = sub_22EDC93B8(a1, v18, v29, a5, 2, 0, 0, 0);
          if (v30 != v18)
          {
            if (!v18)
              break;
            if (!v30)
              break;
            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
            if (v31 != (*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 32))(v18))
              break;
          }
        }
        if (++v26 == v10)
          return v20;
      }
      v20 = v10;
      if (a9)
      {
        sub_22E90379C(a1, a5, a7, 0, (uint64_t)v47);
        sub_22E903BEC(v47);
        do
        {
          sub_22E78D434((uint64_t)&v45, a8);
          v32 = *v12;
          v33 = v45;
          if (!v45)
          {
            v33 = (unsigned __int8 *)sub_22E3B8AAC(v46);
            v45 = v33;
          }
          v34 = v32 & 0xFFFFFFFFFFFFFFFCLL;
          v33[*v33 + 1] = 11;
          v35 = v45;
          v36 = *v45;
          *v45 = v36 + 1;
          *(_QWORD *)&v35[8 * v36 + 16] = v34;
          sub_22ED730EC((uint64_t)a1, *(_QWORD *)((*(_QWORD *)((*(_QWORD *)(v34 + 144) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF8) + 56), **(_QWORD **)((*(_QWORD *)(v34 + 144) & 0xFFFFFFFFFFFFFFF8) + 24), *(_DWORD *)(*(_QWORD *)((*(_QWORD *)(v34 + 144) & 0xFFFFFFFFFFFFFFF8) + 24) + 8), __p);
          if (v44 >= 0)
            v37 = __p;
          else
            v37 = (void **)__p[0];
          if (v44 >= 0)
            v38 = v44 & 0x7F;
          else
            v38 = (size_t)__p[1];
          sub_22E3B89A8(&v45, v37, v38);
          if (v44 < 0)
            operator delete(__p[0]);
          if (a10 >= 0x10)
            sub_22ECFC6F4((uint64_t)a1, &v45, *(_QWORD *)(v34 + 48), a10);
          sub_22E90379C(a1, *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFFCLL) + 24), (uint64_t)&v45, 0, (uint64_t)v42);
          sub_22E903BEC(v42);
          if (v45 && v46)
            sub_22E3BB10C(v46, (unint64_t)v45);
          ++v12;
        }
        while (v12 != v10);
        return v10;
      }
      return v20;
    }
  }
  return v10;
}

BOOL sub_22EDCA1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[96];
  __int128 *v39;
  uint64_t v40;
  _QWORD v41[17];
  uint64_t vars0;

  v41[16] = *MEMORY[0x24BDAC8D0];
  v32 = a4;
  v39 = (__int128 *)v41;
  v40 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v39, *(_DWORD *)(*(_QWORD *)(a4 + 184) + 12) & 0x1FFFFFFF);
  v10 = sub_22EDC45FC(a1, *(_QWORD *)(a4 + 184), a3, a2, a5, &v39, 0, 1, 0, v19, v20, v21, v22, v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26, v27, SBYTE4(v27),
          v28,
          v29,
          v30.i8[0],
          v31,
          v32,
          v33,
          (uint64_t)v34);
  v11 = 0;
  if (!v10)
  {
    v36 = v38;
    v37 = 0x400000000;
    sub_22EDFD3D4((uint64_t)&v36, v39, &v39[2 * v40]);
    sub_22EE00E90(&v30, a1, 4, *(_DWORD *)(a5 + 8), 0, a4, 0, v12, (uint64_t)v36, v37, a5);
    if ((_BYTE)v31)
    {
      v11 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || *(_BYTE *)(v14 + 16) != 46)
        v14 = sub_22F10CF48(v14);
      v29 = v14;
      HIBYTE(v28) = 0;
      v15 = *(_DWORD *)(a5 + 8);
      v22 = (uint64_t)&v28 + 7;
      v23 = a1;
      v24 = &v32;
      v25 = &v29;
      v26 = (void **)&v39;
      v27 = a5;
      v35 = v15;
      v33 = a1;
      v34 = &v35;
      v16 = *(_QWORD *)off_255E04E38(&off_255E04E38, v13);
      if (!v16)
        goto LABEL_11;
      v17 = (uint64_t)&vars0 - v16;
      if (v17 < 0)
        v17 = -v17;
      if ((unint64_t)(v17 - 8126464) <= 0x40000)
        sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v33, (uint64_t)sub_22EDFFC88, (uint64_t)&v22);
      else
LABEL_11:
        sub_22EDFFC88((uint64_t)&v22);
      v11 = HIBYTE(v28) != 0;
    }
    sub_22EE014E4(&v30);
    if (v36 != v38)
      free(v36);
  }
  if (v39 != (__int128 *)v41)
    free(v39);
  return v11;
}

uint64_t sub_22EDCA418(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int32x2_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[96];
  void *v50;
  uint64_t v51;
  _QWORD v52[17];
  uint64_t vars0;

  v52[16] = *MEMORY[0x24BDAC8D0];
  v6 = a2[19];
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0 && v7)
  {
    do
    {
      v8 = *(_QWORD *)(*v7 + 152);
      v7 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v8 & 4) != 0 && v7);
  }
  v9 = sub_22EFEAD74((uint64_t)v7);
  v10 = *(_QWORD *)(a2[6] + 32);
  v43 = (uint64_t)v7;
  v50 = v52;
  v51 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v50, *(_DWORD *)(v7[7] + 12) & 0x1FFFFFFF);
  v11 = 0;
  if (!sub_22EDC45FC(a1, v7[7], v9, v10, a3, &v50, 0, 1, 0, v30, v31, v32, v33, v34, (uint64_t)v35, (uint64_t)v36, (uint64_t)v37, v38, SBYTE4(v38),
                        v39,
                        v40,
                        v41.i8[0],
                        v42,
                        (uint64_t)v7,
                        v44,
                        (uint64_t)v45))
  {
    v47 = v49;
    v48 = 0x400000000;
    sub_22EDFD3D4((uint64_t)&v47, (__int128 *)v50, (__int128 *)v50 + 2 * v51);
    sub_22EE00E90(&v41, a1, 4, *(_DWORD *)(a3 + 8), 0, (uint64_t)v7, 0, v12, (uint64_t)v47, v48, a3);
    if ((_BYTE)v42)
    {
      v11 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || *(_BYTE *)(v14 + 16) != 46)
        v14 = sub_22F10CF48(v14);
      v40 = v14;
      HIBYTE(v39) = 0;
      v15 = *(_DWORD *)(a3 + 8);
      v33 = (uint64_t)&v39 + 7;
      v34 = a1;
      v35 = &v43;
      v36 = &v40;
      v37 = &v50;
      v38 = a3;
      v46 = v15;
      v44 = a1;
      v45 = &v46;
      v16 = *(_QWORD *)off_255E04E38(&off_255E04E38, v13);
      if (!v16)
        goto LABEL_15;
      v17 = (uint64_t)&vars0 - v16;
      if (v17 < 0)
        v17 = -v17;
      if ((unint64_t)(v17 - 8126464) <= 0x40000)
        sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v44, (uint64_t)sub_22EDFFCF0, (uint64_t)&v33);
      else
LABEL_15:
        sub_22EDFFCF0((uint64_t)&v33);
      v11 = HIBYTE(v39) != 0;
    }
    sub_22EE014E4(&v41);
    if (v47 != v49)
      free(v47);
  }
  if (v50 != v52)
    free(v50);
  if (!v11)
    return 0;
  if (!sub_22EDCA1F8(a1, v9, v10, (uint64_t)a2, a3))
    return 1;
  v18 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)(a3 + 24);
    v20 = 32 * v18;
    do
    {
      v21 = v19 + v20;
      v22 = *(_QWORD *)(v19 + v20 - 24);
      if (v22)
      {
        v23 = *(_QWORD *)(v21 - 16);
        if (v23)
        {
          sub_22E3BB10C(v23, v22);
          *(_QWORD *)(v21 - 24) = 0;
        }
      }
      v20 -= 32;
    }
    while (v20);
  }
  *(_DWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  v50 = v52;
  v51 = 0x300000000;
  v47 = v49;
  v48 = 0x300000000;
  sub_22EFE9164(v7[7], (uint64_t)&v50);
  v24 = v7[6];
  if (v24)
  {
    if ((*(_DWORD *)(v24 + 28) & 0x7Eu) - 52 <= 5)
    {
      v27 = *(_QWORD *)(v24 + 56);
      if ((v27 & 4) != 0)
      {
        v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 40);
        if (v28)
        {
          v29 = v51;
          if (v51 >= HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v51;
          }
          *((_QWORD *)v50 + v29) = v28;
          LODWORD(v51) = v51 + 1;
        }
      }
    }
  }
  sub_22EFE9164(a2[23], (uint64_t)&v47);
  LOBYTE(v33) = 0;
  LOBYTE(v44) = 0;
  v25 = 0;
  if ((sub_22E9F4DA0(a1, (uint64_t)a2, (unsigned __int8 **)v47, v48, (uint64_t)v7, (unsigned __int8 **)v50, v51, (char *)&v44) & 1) == 0&& (_BYTE)v44)
  {
    v25 = (sub_22E9F4DA0(a1, (uint64_t)v7, (unsigned __int8 **)v50, v51, (uint64_t)a2, (unsigned __int8 **)v47, v48, (char *)&v33) & 1) == 0&& (_BYTE)v33 == 0;
  }
  if (v47 != v49)
    free(v47);
  if (v50 != v52)
    free(v50);
  return v25;
}

BOOL sub_22EDCA828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[96];
  __int128 *v39;
  uint64_t v40;
  _QWORD v41[17];
  uint64_t vars0;

  v41[16] = *MEMORY[0x24BDAC8D0];
  v32 = a4;
  v39 = (__int128 *)v41;
  v40 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v39, *(_DWORD *)(*(_QWORD *)(a4 + 424) + 12) & 0x1FFFFFFF);
  v10 = sub_22EDC45FC(a1, *(_QWORD *)(a4 + 424), a3, a2, a5, &v39, 0, 1, 0, v19, v20, v21, v22, v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26, v27, SBYTE4(v27),
          v28,
          v29,
          v30.i8[0],
          v31,
          v32,
          v33,
          (uint64_t)v34);
  v11 = 0;
  if (!v10)
  {
    v36 = v38;
    v37 = 0x400000000;
    sub_22EDFD3D4((uint64_t)&v36, v39, &v39[2 * v40]);
    sub_22EE00E90(&v30, a1, 4, *(_DWORD *)(a5 + 8), 0, a4, 0, v12, (uint64_t)v36, v37, a5);
    if ((_BYTE)v31)
    {
      v11 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || *(_BYTE *)(v14 + 16) != 46)
        v14 = sub_22F10CF48(v14);
      v29 = v14;
      HIBYTE(v28) = 0;
      v15 = *(_DWORD *)(a5 + 8);
      v22 = (uint64_t)&v28 + 7;
      v23 = a1;
      v24 = &v32;
      v25 = &v29;
      v26 = (void **)&v39;
      v27 = a5;
      v35 = v15;
      v33 = a1;
      v34 = &v35;
      v16 = *(_QWORD *)off_255E04E38(&off_255E04E38, v13);
      if (!v16)
        goto LABEL_11;
      v17 = (uint64_t)&vars0 - v16;
      if (v17 < 0)
        v17 = -v17;
      if ((unint64_t)(v17 - 8126464) <= 0x40000)
        sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v33, (uint64_t)sub_22EE00700, (uint64_t)&v22);
      else
LABEL_11:
        sub_22EE00700((uint64_t)&v22);
      v11 = HIBYTE(v28) != 0;
    }
    sub_22EE014E4(&v30);
    if (v36 != v38)
      free(v36);
  }
  if (v39 != (__int128 *)v41)
    free(v39);
  return v11;
}

BOOL sub_22EDCAA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[24];
  void *v30;
  uint64_t v31;
  _BYTE v32[24];
  void *v33;
  uint64_t v34;
  _QWORD v35[25];

  v35[24] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 112);
  v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0 && v7)
  {
    do
    {
      v25 = *(_QWORD *)(*v7 + 112);
      v7 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v25 & 4) != 0 && v7);
  }
  v33 = v35;
  v34 = 0x800000000;
  sub_22EF66594(*(_QWORD *)(a1 + 88), v7[7], (uint64_t)&v33);
  v8 = *(_QWORD *)(a1 + 88);
  v30 = v7;
  sub_22EF65464(v8, &v30);
  v10 = v9;
  v11 = sub_22EF6512C(*(_QWORD *)(a1 + 88), v9, (uint64_t)v33, v34, 0);
  v12 = sub_22EF6512C(*(_QWORD *)(a1 + 88), v10, **(_QWORD **)(a2 + 128), *(unsigned int *)(*(_QWORD *)(a2 + 128) + 8), 0);
  if (sub_22EDCAD3C(a1, v12, v11, (uint64_t)v7, a3))
  {
    if (sub_22EDCA828(a1, v11, v12, a2, a3))
    {
      v13 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(a3 + 24);
        v15 = 32 * v13;
        do
        {
          v16 = v14 + v15;
          v17 = *(_QWORD *)(v14 + v15 - 24);
          if (v17)
          {
            v18 = *(_QWORD *)(v16 - 16);
            if (v18)
            {
              sub_22E3BB10C(v18, v17);
              *(_QWORD *)(v16 - 24) = 0;
            }
          }
          v15 -= 32;
        }
        while (v15);
      }
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 12) = 0;
      v30 = v32;
      v31 = 0x300000000;
      v27 = v29;
      v28 = 0x300000000;
      sub_22EFE9164(v7[7], (uint64_t)&v30);
      v19 = v7[6];
      if (v19)
      {
        if ((*(_DWORD *)(v19 + 28) & 0x7Eu) - 52 <= 5)
        {
          v22 = *(_QWORD *)(v19 + 56);
          if ((v22 & 4) != 0)
          {
            v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 40);
            if (v23)
            {
              v24 = v31;
              if (v31 >= HIDWORD(v31))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v24 = v31;
              }
              *((_QWORD *)v30 + v24) = v23;
              LODWORD(v31) = v31 + 1;
            }
          }
        }
      }
      sub_22EFE9164(*(_QWORD *)(a2 + 424), (uint64_t)&v27);
      v26 = 0;
      v20 = 0;
      if ((sub_22E9F4DA0(a1, a2, v27, v28, v7, v30, v31, &v26) & 1) == 0 && (_BYTE)v26)
        v20 = (sub_22E9F4DA0(a1, v7, v30, v31, a2, v27, v28, (char *)&v26 + 1) & 1) == 0
           && HIBYTE(v26) == 0;
      if (v27 != v29)
        free(v27);
      if (v30 != v32)
        free(v30);
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  if (v33 != v35)
    free(v33);
  return v20;
}

BOOL sub_22EDCAD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[96];
  __int128 *v39;
  uint64_t v40;
  _QWORD v41[17];
  uint64_t vars0;

  v41[16] = *MEMORY[0x24BDAC8D0];
  v32 = a4;
  v39 = (__int128 *)v41;
  v40 = 0x400000000;
  sub_22EDFD35C((uint64_t)&v39, *(_DWORD *)(*(_QWORD *)(a4 + 56) + 12) & 0x1FFFFFFF);
  v10 = sub_22EDC45FC(a1, *(_QWORD *)(a4 + 56), a3, a2, a5, &v39, 0, 1, 0, v19, v20, v21, v22, v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26, v27, SBYTE4(v27),
          v28,
          v29,
          v30.i8[0],
          v31,
          v32,
          v33,
          (uint64_t)v34);
  v11 = 0;
  if (!v10)
  {
    v36 = v38;
    v37 = 0x400000000;
    sub_22EDFD3D4((uint64_t)&v36, v39, &v39[2 * v40]);
    sub_22EE00E90(&v30, a1, 4, *(_DWORD *)(a5 + 8), 0, a4, 0, v12, (uint64_t)v36, v37, a5);
    if ((_BYTE)v31)
    {
      v11 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || *(_BYTE *)(v14 + 16) != 46)
        v14 = sub_22F10CF48(v14);
      v29 = v14;
      HIBYTE(v28) = 0;
      v15 = *(_DWORD *)(a5 + 8);
      v22 = (uint64_t)&v28 + 7;
      v23 = a1;
      v24 = &v32;
      v25 = &v29;
      v26 = (void **)&v39;
      v27 = a5;
      v35 = v15;
      v33 = a1;
      v34 = &v35;
      v16 = *(_QWORD *)off_255E04E38(&off_255E04E38, v13);
      if (!v16)
        goto LABEL_11;
      v17 = (uint64_t)&vars0 - v16;
      if (v17 < 0)
        v17 = -v17;
      if ((unint64_t)(v17 - 8126464) <= 0x40000)
        sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v33, (uint64_t)sub_22EE00768, (uint64_t)&v22);
      else
LABEL_11:
        sub_22EE00768((uint64_t)&v22);
      v11 = HIBYTE(v28) != 0;
    }
    sub_22EE014E4(&v30);
    if (v36 != v38)
      free(v36);
  }
  if (v39 != (__int128 *)v41)
    free(v39);
  return v11;
}

uint64_t sub_22EDCAF5C(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  int v12;

  if ((a3 & 1) != 0)
  {
    if (*a2 == 213)
      a2 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
    result = sub_22EDCC8AC(a2, a4);
    if (result)
    {
      v9 = result;
      v10 = *(_DWORD *)(result + 68);
      if ((v10 & 0xFFFFF) == (_DWORD)a4)
        result = (uint64_t)sub_22E54C570(a5, v10 >> 20);
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 8) != 0)
        return sub_22EDCB2BC(a1, *(_QWORD *)(v9 + 48), 1, a4, a5);
    }
  }
  else
  {
    v11 = a5;
    v12 = a4;
    return sub_22EDEA804((uint64_t)&v11, (uint64_t)a2, 0);
  }
  return result;
}

uint64_t sub_22EDCB01C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if ((a3 & 1) != 0)
  {
    v10 = *(_DWORD *)(a2 + 8);
    result = sub_22EDCB0B8(*(unsigned int **)a2, v10);
    if ((result & 1) != 0)
      return result;
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 8);
  }
  if (v10)
  {
    v11 = 0;
    v12 = 24 * v10;
    do
    {
      result = sub_22EDCB150(*(_QWORD *)(v9 + 88), *(_QWORD *)a2 + v11, a3, a4, a5);
      v11 += 24;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t sub_22EDCB0B8(unsigned int *a1, uint64_t a2)
{
  if (a2)
    return ((uint64_t (*)(void))((char *)&loc_22EDCB0E8 + 4 * byte_22F498256[*a1]))();
  else
    return 0;
}

void sub_22EDCB140()
{
  JUMPOUT(0x22EDCB148);
}

uint64_t sub_22EDCB150(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = result;
  switch(*(_DWORD *)a2)
  {
    case 1:
    case 3:
      result = sub_22EDCB2BC(result, *(_QWORD *)(a2 + 8), a3, a4, a5);
      break;
    case 5:
    case 6:
      result = (uint64_t)sub_22EDFD200(result, *(_QWORD *)(a2 + 8), a3, a4, a5);
      break;
    case 7:
      result = sub_22EDCAF5C(result, *(unsigned __int8 **)(a2 + 8), a3, a4, a5);
      break;
    case 8:
      v9 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        v11 = 24 * v9;
        do
        {
          result = sub_22EDCB150(v8, v10, a3, a4, a5);
          v10 += 24;
          v11 -= 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

void ***sub_22EDCB260(void ***result)
{
  void ***v1;
  void **v2;

  v1 = result;
  v2 = *result;
  if ((*result & 1) == 0 && v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    result = (void ***)MEMORY[0x2348A0E9C](v2, 0x1080C40EF38A13ELL);
  }
  *v1 = (void **)1;
  return result;
}

uint64_t sub_22EDCB2BC(uint64_t result, unint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;

  if (a2 >= 0x10)
  {
    v8 = result;
    while (2)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
      {
        v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
        v10 = *(_QWORD *)v9;
        v11 = *(_DWORD *)(*(_QWORD *)v9 + 16);
        switch((char)v11)
        {
          case 2:
          case 4:
          case 10:
          case 29:
          case 36:
          case 39:
          case 55:
          case 56:
            goto LABEL_14;
          case 3:
            result = sub_22EDCAF5C(v8, *(unsigned __int8 **)(v10 + 48), a3 & 1, a4, a5);
            v10 = *(_QWORD *)v9;
            goto LABEL_14;
          case 6:
          case 12:
          case 51:
            if ((a3 & 1) != 0)
              return result;
            a3 = 0;
            goto LABEL_14;
          case 13:
          case 48:
            if ((a3 & 1) == 0)
            {
              v14 = *(_QWORD *)(v10 + 24);
              v28 = a5;
              LODWORD(v29) = a4;
              return sub_22EDEA804((uint64_t)&v28, v14, 0);
            }
            return result;
          case 14:
          case 15:
            goto LABEL_20;
          case 16:
          case 19:
            v12 = a3 & 1;
            sub_22EDCB2BC(v8, *(_QWORD *)(v10 + 48), v12, a4, a5);
            v13 = *(unsigned __int8 **)(v10 + 40);
            goto LABEL_39;
          case 17:
            v13 = (unsigned __int8 *)(*(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFFFFCLL);
            goto LABEL_25;
          case 18:
            if ((a3 & 1) == 0)
              return sub_22EDFD2E4(v8, *(_QWORD *)(v10 + 32), 0, a4, (uint64_t)a5);
            return result;
          case 20:
            if ((a3 & 1) == 0)
            {
              result = sub_22EDFD2E4(v8, *(_QWORD *)(v10 + 32), 0, a4, (uint64_t)a5);
              v17 = *(unsigned int *)(v10 + 20);
              if ((_DWORD)v17)
              {
                v18 = v10 + 48;
                do
                {
                  result = sub_22EDCB150(v8, v18, 0, a4, a5);
                  v18 += 24;
                  --v17;
                }
                while (v17);
              }
            }
            return result;
          case 21:
            v12 = a3 & 1;
            sub_22EDCB2BC(v8, *(_QWORD *)(v10 + 40), v12, a4, a5);
            v13 = *(unsigned __int8 **)(v10 + 48);
            goto LABEL_39;
          case 26:
            sub_22EDCB2BC(v8, *(_QWORD *)(v10 + 24), a3 & 1, a4, a5);
            v24 = *(_QWORD *)(v10 + 16);
            if ((v24 & 0x3FFFC000000000) != 0)
            {
              v25 = (_QWORD *)(v10 + 40);
              v26 = (unsigned __int16)(v24 >> 38);
              do
              {
                if (v26 == 1
                  || (a3 & 1) == 0
                  || ((v27 = *(_QWORD *)(*v25 & 0xFFFFFFFFFFFFFFF0)) == 0 || *(_BYTE *)(v27 + 16) != 36)
                  && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36
                   || !sub_22F10CF48(v27)))
                {
                  sub_22EDCB2BC(v8, *v25, a3 & 1, a4, a5);
                }
                ++v25;
                --v26;
              }
              while (v26);
            }
            result = sub_22F257D3C(v10);
            if (!result)
              return result;
            v13 = (unsigned __int8 *)result;
LABEL_25:
            v15 = a3 & 1;
            v16 = v8;
            return sub_22EDCAF5C(v16, v13, v15, a4, a5);
          case 27:
            v9 = *(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0;
            goto LABEL_35;
          case 30:
            v12 = a3 & 1;
            sub_22EDCB2BC(v8, *(_QWORD *)(v10 + 32), v12, a4, a5);
            sub_22EDCAF5C(v8, *(unsigned __int8 **)(v10 + 48), v12, a4, a5);
            v13 = *(unsigned __int8 **)(v10 + 56);
LABEL_39:
            v16 = v8;
            v15 = v12;
            return sub_22EDCAF5C(v16, v13, v15, a4, a5);
          case 31:
            result = sub_22EDCB2BC(v8, *(_QWORD *)(v10 + 32), a3 & 1, a4, a5);
            a2 = *(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFFFF0;
            goto LABEL_15;
          case 40:
          case 41:
            while ((v11 & 0x100000) != 0)
            {
              v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v10)
              {
                v11 = *(_DWORD *)(v10 + 16);
                if ((v11 & 0xFE) == 0x28)
                  continue;
              }
              result = sub_22F10CF48(v10);
              v10 = result;
              v11 = *(_DWORD *)(result + 16);
            }
LABEL_14:
            a2 = *(_QWORD *)(v10 + 32);
            goto LABEL_15;
          case 42:
            v21 = a3 & 1;
            sub_22EDCB2BC(v8, *(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0, v21, a4, a5);
            v22 = *(_DWORD *)(v10 + 20);
            v29 = *(_QWORD *)(v10 + 40);
            LODWORD(v28) = 8;
            HIDWORD(v28) = v22;
            return sub_22EDCB150(v8, (uint64_t)&v28, v21, a4, a5);
          case 46:
LABEL_35:
            v19 = *(_QWORD *)v9;
            result = (uint64_t)sub_22EDFD200(v8, *(_QWORD *)(*(_QWORD *)v9 + 32), a3 & 1, a4, a5);
            if ((a3 & 1) != 0)
            {
              LODWORD(v20) = *(_DWORD *)(v19 + 20);
              result = sub_22EDCB0B8((unsigned int *)(v19 + 40), v20);
              if ((result & 1) != 0)
                return result;
            }
            else
            {
              LODWORD(v20) = *(_DWORD *)(v19 + 20);
            }
            if ((_DWORD)v20)
            {
              v23 = v19 + 40;
              v20 = v20;
              do
              {
                result = sub_22EDCB150(v8, v23, a3 & 1, a4, a5);
                v23 += 24;
                --v20;
              }
              while (v20);
            }
            break;
          case 47:
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 32) & 0x7FFF) == (_DWORD)a4)
              return (uint64_t)sub_22E54C570(a5, HIWORD(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 32)));
            return result;
          case 49:
            if ((a3 & 1) != 0)
              return result;
            a3 = 0;
LABEL_20:
            a2 = *(_QWORD *)(v10 + 24);
LABEL_15:
            if (a2 < 0x10)
              return result;
            continue;
          default:
            return result;
        }
      }
      break;
    }
  }
  return result;
}

uint64_t sub_22EDCB720(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  uint64_t v32;
  int *v33;
  BOOL v34;
  int *v35;
  __int128 v36;
  uint64_t v37;
  _BOOL4 v39;
  uint64_t v40;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[24];
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;

  v13 = a4;
  v14 = a3;
  v59 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  if ((sub_22EDCB0B8(a3, a4) & 1) == 0 && v13)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = &v14[6 * v16];
      if (*v19 == 8)
      {
        v17 = 0;
        v13 = v19[1];
        if (!(_DWORD)v13)
          return 0;
        v14 = (unsigned int *)*((_QWORD *)v19 + 1);
      }
      v20 = (uint64_t)&v14[6 * v17];
      v21 = *(_DWORD *)v20;
      if (*(_DWORD *)v20 == 1)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
          goto LABEL_18;
      }
      else if (v21 == 7)
      {
        if (**(unsigned __int8 **)(v20 + 8) == 213)
          goto LABEL_18;
      }
      else if (((1 << v21) & 0x13D) == 0)
      {
LABEL_18:
        sub_22F401DC4((int *)&v14[6 * v17], (uint64_t)&v48);
        v46 = v48;
        v47 = v49;
        v40 = a8;
        sub_22EDC36A0((uint64_t)v52, a1, a2, a8, a7, (uint64_t)&v46);
        if (a6 != v18)
        {
          v25 = v18;
          while (1)
          {
            v33 = &a5[6 * v25];
            a8 = v40;
            if (*v33 == 8)
            {
              v18 = 0;
              a5 = (int *)*((_QWORD *)v33 + 1);
              a6 = v33[1];
              if (!(_DWORD)a6)
                break;
            }
            if (v56)
              v34 = v55 > v54;
            else
              v34 = 1;
            if (!v34)
              goto LABEL_19;
            v35 = &a5[6 * v18];
            v36 = *(_OWORD *)v35;
            v45 = *((_QWORD *)v35 + 2);
            v44 = v36;
            sub_22EDCBAB4(a1, a2, (uint64_t)&v48, (uint64_t)&v44);
            if ((_DWORD)v37)
            {
              v15 = v37;
              v39 = 1;
              goto LABEL_24;
            }
            sub_22EDC3850((unint64_t)v52);
            v25 = (v18 + 1);
            v18 = v25;
            if (a6 == v25)
              goto LABEL_20;
          }
          a6 = 0;
        }
LABEL_19:
        v25 = v18;
LABEL_20:
        v26 = sub_22EDC39BC((uint64_t)v52);
        v39 = v26 != 0;
        if (v26)
          v15 = v26;
        else
          v15 = v9;
        v18 = v25;
        a8 = v40;
LABEL_24:
        if (v58)
        {
          v27 = v57;
          v28 = 224 * v58;
          do
          {
            v29 = *((_QWORD *)v27 + 27);
            v30 = *(_DWORD *)v27;
            v27 += 224;
            *(_QWORD *)(*(_QWORD *)(v53 + 232) + 8 * v30) = v29;
            v28 -= 224;
          }
          while (v28);
        }
        sub_22EDCD438(&v57);
        if (v39)
          return v15;
        goto LABEL_36;
      }
      if (a6 == v18)
        goto LABEL_55;
      v22 = &a5[6 * v18];
      v23 = *v22;
      if (*v22 == 8)
      {
        a6 = v22[1];
        if (!(_DWORD)a6)
        {
LABEL_55:
          if (a9)
            return 16;
          else
            return 0;
        }
        LODWORD(v18) = 0;
        a5 = (int *)*((_QWORD *)v22 + 1);
        v23 = *a5;
      }
      v24 = &a5[6 * v18];
      if (v23 == 1)
      {
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v24 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
          return 16;
      }
      else
      {
        v15 = 16;
        if (v23 == 7)
        {
          if (**((unsigned __int8 **)v24 + 1) == 213)
            return v15;
        }
        else if (((1 << v23) & 0x13D) == 0)
        {
          return v15;
        }
      }
      v31 = *(_OWORD *)v24;
      v51 = *((_QWORD *)v24 + 2);
      v50 = v31;
      sub_22EDCBAB4(a1, a2, v20, (uint64_t)&v50);
      if ((_DWORD)v32)
        v18 = v18;
      else
        v18 = (v18 + 1);
      if ((_DWORD)v32)
        return v32;
      v15 = v9;
LABEL_36:
      v9 = v15;
      v16 = ++v17;
      if (v13 == v17)
        return 0;
    }
  }
  return v15;
}

void sub_22EDCBAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  __int128 v7;
  uint64_t v8;

  v6 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      goto LABEL_3;
  }
  else if (v6 == 7)
  {
    if (**(unsigned __int8 **)(a4 + 8) != 213)
      goto LABEL_3;
  }
  else if (((1 << v6) & 0x13D) != 0)
  {
LABEL_3:
    __asm { BR              X10 }
  }
  sub_22F401DC4((int *)a4, (uint64_t)&v7);
  *(_OWORD *)a4 = v7;
  *(_QWORD *)(a4 + 16) = v8;
  goto LABEL_3;
}

unint64_t sub_22EDCBF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a3;
  v25 = a2;
  result = sub_22F0F08CC(&v25);
  if (result)
  {
    v9 = result;
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x20)
    {
      if ((*(_DWORD *)(result + 64) & 0xFFFFF) == *(_DWORD *)(a4 + 16))
      {
        sub_22EF65464(*(_QWORD *)(a1 + 88), &v24);
        *(_QWORD *)&v21 = 5;
        *((_QWORD *)&v21 + 1) = v10;
        v23 = 0;
        sub_22EDCC2FC(v20, *(_QWORD *)(a1 + 88), (__int128 *)(*a5 + (((unint64_t)*(unsigned int *)(v9 + 64) >> 15) & 0x1FFE0)), &v21);
        if (LODWORD(v20[0]))
        {
          result = 0;
          v11 = (_OWORD *)(*a5 + (((unint64_t)*(unsigned int *)(v9 + 64) >> 15) & 0x1FFE0));
          *v11 = v20[0];
          *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v20 + 9);
        }
        else
        {
          *(_QWORD *)(a4 + 168) = v9 & 0xFFFFFFFFFFFFFFF9 | 4;
          v18 = *a5 + (((unint64_t)*(unsigned int *)(v9 + 64) >> 15) & 0x1FFE0);
          v19 = *(_OWORD *)v18;
          *(_QWORD *)(a4 + 192) = *(_QWORD *)(v18 + 16);
          *(_OWORD *)(a4 + 176) = v19;
          *(_OWORD *)(a4 + 200) = v21;
          *(_QWORD *)(a4 + 216) = v22;
          return 5;
        }
        return result;
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 88);
      sub_22EF65464(v12, &v25);
      v14 = v13;
      sub_22EF65464(v12, &v24);
      if (v14 != v15)
      {
        v16 = v25;
        *(_QWORD *)(a4 + 176) = 5;
        *(_QWORD *)(a4 + 184) = v16;
        v17 = v24;
        *(_QWORD *)(a4 + 200) = 5;
        *(_QWORD *)(a4 + 208) = v17;
        return 10;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_22EDCC094(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;

  v3 = a1;
  if (a1)
  {
    v4 = *(_DWORD *)(a1 + 28) & 0x7F;
    if (v4 - 75 >= 0xFFFFFFC2)
    {
      v5 = v4 > 0x2F;
      v6 = (1 << v4) & 0xC00000060000;
      if (!v5 && v6 != 0)
        v3 = sub_22EFBAEA4(a1);
    }
  }
  if (a2)
  {
    v8 = a2[7] & 0x7F;
    if (v8 - 75 >= 0xFFFFFFC2)
    {
      v5 = v8 > 0x2F;
      v9 = (1 << v8) & 0xC00000060000;
      if (!v5 && v9 != 0)
        a2 = (_DWORD *)sub_22EFBAEA4((uint64_t)a2);
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  return v11 == (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t sub_22EDCC160(llvm::APInt *this, llvm::APInt *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  llvm::APInt *v9;
  unsigned int v10;
  unsigned int v11;
  llvm::APInt *v12;
  uint64_t v13;
  int v14;
  char v15;

  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)this + 2);
  if (v4 <= v5)
  {
    if (v4 < v5)
    {
      sub_22E46361C(a2, (uint64_t)&v13);
      if (*((_DWORD *)a2 + 2) >= 0x41u && *(_QWORD *)a2)
        MEMORY[0x2348A0E84](*(_QWORD *)a2, 0x1000C8000313F17);
      *(_QWORD *)a2 = v13;
      *((_DWORD *)a2 + 2) = v14;
      *((_BYTE *)a2 + 12) = v15;
    }
  }
  else
  {
    sub_22E46361C(this, (uint64_t)&v13);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x2348A0E84](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v13;
    *((_DWORD *)this + 2) = v14;
    *((_BYTE *)this + 12) = v15;
  }
  if ((*((_BYTE *)this + 12) == 0) != (*((_BYTE *)a2 + 12) == 0))
  {
    if (!*((_BYTE *)a2 + 12))
    {
      v7 = *((_DWORD *)a2 + 2);
      v8 = v7 - 1;
      v9 = a2;
      if (v7 >= 0x41)
        v9 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * (v8 >> 6));
      if (((*(_QWORD *)v9 >> v8) & 1) != 0)
        return 0;
    }
    if (!*((_BYTE *)this + 12))
    {
      v10 = *((_DWORD *)this + 2);
      v11 = v10 - 1;
      v12 = this;
      if (v10 >= 0x41)
        v12 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v11 >> 6));
      if (((*(_QWORD *)v12 >> v11) & 1) != 0)
        return 0;
    }
    *((_BYTE *)a2 + 12) = 0;
    *((_BYTE *)this + 12) = 0;
  }
  if (*((_DWORD *)this + 2) > 0x40u)
    return llvm::APInt::equalSlowCase(this, a2);
  else
    return *(_QWORD *)this == *(_QWORD *)a2;
}

void sub_22EDCC2FC(_OWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  BOOL v7;
  int *v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t (**v20)();
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  _QWORD v25[24];
  void *v26[2];
  _QWORD v27[19];

  v27[16] = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)a3 == 0;
  do
  {
    v8 = (int *)a4;
    if (v7)
    {
      v18 = *a4;
      v19 = a4[1];
LABEL_28:
      a1[1] = v19;
      goto LABEL_29;
    }
    a4 = a3;
    v9 = *v8;
    if (!*v8)
    {
      v18 = *a3;
      v19 = a3[1];
      goto LABEL_28;
    }
    if (*((_BYTE *)a3 + 24))
      v10 = 0;
    else
      v10 = *((_BYTE *)v8 + 24) == 0;
    if (v10)
    {
      v11 = sub_22F0EECF4();
      if (v11 >= 0x10)
      {
        v12 = v11;
        v13 = sub_22F0EECF4();
        if (v13 < 0x10
          || (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) | v12 & 7) != (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) | v13 & 7))
        {
          v18 = 0uLL;
          a1[1] = 0u;
LABEL_29:
          *a1 = v18;
          return;
        }
      }
    }
    if (*(_DWORD *)a4 != 7)
      __asm { BR              X10 }
    v7 = 0;
    a3 = (__int128 *)v8;
  }
  while (v9 != 7);
  v24[0] = v25;
  v24[1] = (void *)0x2000000000;
  v26[0] = v27;
  v26[1] = (void *)0x2000000000;
  v14 = (unsigned __int8 *)*((_QWORD *)a4 + 1);
  LOBYTE(v22) = 1;
  v20 = &off_24FAC6E70;
  v21 = v24;
  v23 = a2;
  sub_22F0E9FEC(&v20, v14);
  v15 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
  LOBYTE(v22) = 1;
  v20 = &off_24FAC6E70;
  v21 = v26;
  v23 = a2;
  sub_22F0E9FEC(&v20, v15);
  if (llvm::FoldingSetNodeID::operator==())
  {
    if (*((_BYTE *)a4 + 24))
      v16 = (__int128 *)v8;
    else
      v16 = a4;
    v17 = *v16;
    a1[1] = v16[1];
  }
  else
  {
    v17 = 0uLL;
    a1[1] = 0u;
  }
  *a1 = v17;
  if (v26[0] != v27)
    free(v26[0]);
  if (v24[0] != v25)
    free(v24[0]);
}

uint64_t sub_22EDCC8AC(unsigned __int8 *a1, int a2)
{
  int v2;
  unsigned __int8 **v3;
  BOOL v4;
  unsigned __int8 *v5;
  uint64_t result;

  while (1)
  {
    v2 = *a1;
    if (v2 == 226)
    {
      v3 = (unsigned __int8 **)(a1 + 24);
      goto LABEL_14;
    }
    if (v2 == 172 || v2 == 153)
    {
      v3 = (unsigned __int8 **)(a1 + 16);
      goto LABEL_14;
    }
    if ((v2 & 0xFE) != 0x76)
      break;
    if (HIDWORD(*((_QWORD *)a1 + 3)) && *((_QWORD *)a1 + 3))
      return 0;
    v4 = v2 == 119;
    if (v2 == 119)
      v5 = a1;
    else
      v5 = 0;
    v3 = (unsigned __int8 **)(v5 + 48);
    if (!v4)
      v3 = (unsigned __int8 **)(a1 + 40);
LABEL_14:
    a1 = *v3;
  }
  if (v2 != 161)
    return 0;
  result = *((_QWORD *)a1 + 2);
  if (!result || (*(_DWORD *)(result + 28) & 0x7F) != 0x3B || (*(_DWORD *)(result + 68) & 0xFFFFF) != a2)
    return 0;
  return result;
}

uint64_t sub_22EDCC94C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _OWORD *v14;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _BYTE v28[5];
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  int v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t vars0;
  uint64_t vars8;

  sub_22EDCC2FC(v30, *(_QWORD *)(a1 + 88), (__int128 *)(*a7 + (((unint64_t)*(unsigned int *)(a3 + 68) >> 15) & 0x1FFE0)), (__int128 *)a4);
  if (!LODWORD(v30[0]))
  {
    *(_QWORD *)(a6 + 168) = a3 & 0xFFFFFFFFFFFFFFF9 | 2;
    v16 = *a7 + (((unint64_t)*(unsigned int *)(a3 + 68) >> 15) & 0x1FFE0);
    v17 = *(_OWORD *)v16;
    *(_QWORD *)(a6 + 192) = *(_QWORD *)(v16 + 16);
    *(_OWORD *)(a6 + 176) = v17;
    v18 = *(_OWORD *)a4;
    *(_QWORD *)(a6 + 216) = *(_QWORD *)(a4 + 16);
    *(_OWORD *)(a6 + 200) = v18;
    return 5;
  }
  v14 = (_OWORD *)(*a7 + (((unint64_t)*(unsigned int *)(a3 + 68) >> 15) & 0x1FFE0));
  *v14 = v30[0];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)v30 + 9);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 8) == 0 || *(_BYTE *)(a3 + 81))
    return 0;
  v19 = sub_22EF69F90(*(_QWORD *)(a1 + 88), *(_QWORD *)(a3 + 48));
  v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  if (v20 && *(_BYTE *)(v20 + 16) == 36)
    v19 = *(_QWORD *)(v20 + 32);
  v21 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
  if (!v21 || (v22 = *(_DWORD *)(v21 + 16), (v22 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_12;
    v21 = sub_22F10CF48(v21);
    if (!v21)
      goto LABEL_12;
    v22 = *(_DWORD *)(v21 + 16);
  }
  if ((v22 & 0x100000) != 0)
  {
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v21)
      {
        v27 = *(_DWORD *)(v21 + 16);
        if ((v27 & 0xFE) == 0x28)
          continue;
      }
      v21 = sub_22F10CF48(v21);
      v27 = *(_DWORD *)(v21 + 16);
    }
    while ((v27 & 0x100000) != 0);
  }
  a5 = *(_QWORD *)(v21 + 32);
LABEL_12:
  v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
    v25 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
      LODWORD(v25) = sub_22F10D2BC(a5);
    LODWORD(a5) = v25 & 0xFFFFFFF0;
    goto LABEL_21;
  }
  v24 = *(_DWORD *)(v23 + 16);
  if ((v24 & 0xFE) == 0x28)
    goto LABEL_16;
  v23 = sub_22F10CF48(v23);
  if (v23)
  {
    v24 = *(_DWORD *)(v23 + 16);
LABEL_16:
    if ((v24 & 0x100000) != 0)
    {
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v23)
        {
          v26 = *(_DWORD *)(v23 + 16);
          if ((v26 & 0xFE) == 0x28)
            continue;
        }
        v23 = sub_22F10CF48(v23);
        v26 = *(_DWORD *)(v23 + 16);
      }
      while ((v26 & 0x100000) != 0);
    }
    v19 = *(_QWORD *)(v23 + 32);
  }
LABEL_21:
  v28[0] = *(_BYTE *)(a4 + 24);
  return sub_22EDC45FC(a1, a2, v19, a5, a6, (int)a7, 8, 0, *(int *)v28, v28[4], v29, *(uint64_t *)&v30[0], *((uint64_t *)&v30[0] + 1), *(uint64_t *)&v30[1], *((uint64_t *)&v30[1] + 1), v31, v32, v33[0], v33[1],
           v34,
           v35,
           v36,
           v37,
           v38,
           vars0,
           vars8);
}

BOOL sub_22EDCCBC4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = a1 & 0xFFFFFFFFFFFFFFF0;
  v2 = sub_22F10D628(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (v2)
  {
    v6 = *(_QWORD *)(v2 + 32);
    return sub_22F0F08CC(&v6) != 0;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFF0);
    return v4 && *(_BYTE *)(v4 + 16) == 27;
  }
}

void sub_22EDCCC30(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  __int128 *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v30;
  _OWORD *v31;
  __int128 v32;
  unsigned int v33;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 12024);
  if (v3)
  {
    v4 = 0;
    v5 = -1;
    v6 = -1;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 120);
      if (v7)
        break;
      v8 = *(unsigned __int8 *)(v3 + 113);
      if (!*(_BYTE *)(v3 + 113))
      {
        v4 = 0;
        goto LABEL_9;
      }
      v8 = 0;
      v3 = *(_QWORD *)(v3 + 104);
      if (!v3)
        goto LABEL_10;
    }
    v4 = *(__int128 **)(v3 + 128);
    v8 = *(_DWORD *)(v3 + 136);
    if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x3B)
    {
      v33 = *(_DWORD *)(v7 + 68);
    }
    else
    {
      if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x26)
      {
        v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 48)
                                                                                               + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                       + 8) & 0xFFFFFFFFFFFFFFF0)
                                               + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 32) & 0x7FFF;
        v6 = HIWORD(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 32));
        goto LABEL_10;
      }
      v33 = *(_DWORD *)(v7 + 64);
    }
    v5 = v33 & 0xFFFFF;
    v6 = v33 >> 20;
  }
  else
  {
    v4 = 0;
    v8 = 0;
LABEL_9:
    v5 = -1;
    v6 = -1;
  }
LABEL_10:
  if (a2)
  {
    v9 = *(unsigned int **)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_DWORD *)(v10 + 20);
    v12 = (_BYTE *)(a1 + 36);
    v13 = a2;
    while (1)
    {
      v15 = *v9;
      v9 += 56;
      v14 = v15;
      if (v15 >= v11)
        break;
      if (v5 == *(_DWORD *)(v10 + 16) && v6 == v14)
        *v12 = 1;
      if (!--v13)
        goto LABEL_20;
    }
    *v12 = 0;
  }
  else
  {
LABEL_20:
    v12 = (_BYTE *)(a1 + 36);
    if (*(_BYTE *)(a1 + 36))
      v17 = *(_DWORD *)(a1 + 32) + v8;
    else
      v17 = *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 32) = v17;
  }
  v18 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v18)
  {
    v19 = *(unsigned int **)(a1 + 48);
    v20 = (__int128 *)((char *)v4 + 24 * v8);
    v21 = 224 * v18;
    do
    {
      v22 = *(_QWORD *)(a1 + 24);
      v23 = (uint64_t *)(v22 + 232);
      v24 = *(_DWORD *)(v22 + 240);
      v25 = *v19;
      if (v24 <= v25)
      {
        v28 = (v25 + 1);
        if (v24 != (_DWORD)v28)
        {
          if (v24 <= v28)
          {
            if (*(_DWORD *)(v22 + 244) < v28)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v23 = (uint64_t *)(v22 + 232);
              v24 = *(_DWORD *)(v22 + 240);
            }
            if (v24 != (_DWORD)v28)
              bzero((void *)(*v23 + 8 * v24), 8 * (v28 - v24));
          }
          *(_DWORD *)(v22 + 240) = v28;
          v22 = *(_QWORD *)(a1 + 24);
          LODWORD(v25) = *v19;
        }
        v26 = *(_QWORD *)(v22 + 232);
        v27 = v25;
      }
      else
      {
        v26 = *v23;
        *((_QWORD *)v19 + 27) = *(_QWORD *)(v26 + 8 * v25);
        v27 = v25;
      }
      *(_QWORD *)(v26 + 8 * v27) = v19;
      if (v5 == *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) && v6 == (_DWORD)v25)
      {
        sub_22F348120((uint64_t)(v19 + 18), v4, v20);
        if (!*v12)
        {
          v30 = (__int128 *)(*((_QWORD *)v19 + 9) + 32 * *(unsigned int *)(a1 + 32));
          v31 = (_OWORD *)(**(_QWORD **)(a1 + 16) + 32 * *v19);
          v32 = *v30;
          *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)v30 + 9);
          *v31 = v32;
        }
      }
      v19 += 56;
      v21 -= 224;
    }
    while (v21);
  }
}

void sub_22EDCCED0(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  unsigned int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)a1;
  v29 = v31;
  v30 = 0x200000000;
  v4 = *v3;
  v26 = *((_QWORD *)a2 + 2);
  v25 = *a2;
  sub_22EE7377C(v4, (uint64_t)&v25, (uint64_t)&v29);
  if ((_DWORD)v30)
  {
    v5 = 0;
    v6 = 16 * v30;
    while (1)
    {
      v7 = *(_QWORD *)((char *)v29 + v5);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) == 0 && v8)
        goto LABEL_5;
      v23 = *(_DWORD *)(v8 + 28) & 0x7F;
      if (v8)
      {
        if (v23 == 38)
          break;
      }
      if (v8 && v23 == 59)
        v24 = *(_DWORD *)(v8 + 68);
      else
        v24 = *(_DWORD *)(v8 + 64);
      v10 = v24 & 0xFFFFF;
      v11 = v24 >> 20;
LABEL_6:
      if (*(_DWORD *)(v3[3] + 16) == v10)
      {
        v12 = v11;
        v13 = *(_QWORD *)(a1 + 8);
        v14 = **(_QWORD **)v13;
        if ((v14 & 1) != 0)
        {
          if (((1 << v11) & (v14 >> 1) & ~(-1 << (v14 >> 58))) == 0)
          {
LABEL_11:
            v15 = *(_QWORD *)(v13 + 8);
            sub_22E54C570(*(unint64_t **)v13, v11);
            sub_22EDCD13C(v15, v12);
            v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v12 + 16);
            if (v16)
            {
              if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x3B && !*(_BYTE *)(v16 + 81))
              {
                v17 = *(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v17)
                {
                  if (*(_BYTE *)(v17 + 16) == 36)
                  {
                    v18 = *(_QWORD *)(v13 + 16);
                    v19 = *(_QWORD *)(v17 + 32);
                    v27 = 1;
                    v28 = v19;
                    v20 = sub_22E4EF088(v18, (unint64_t)&v27, 1);
                    v21 = *(_QWORD *)v18 + 24 * *(unsigned int *)(v18 + 8);
                    v22 = *(_OWORD *)v20;
                    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
                    *(_OWORD *)v21 = v22;
                    ++*(_DWORD *)(v18 + 8);
                  }
                }
              }
            }
          }
        }
        else if ((*(_QWORD *)(*(_QWORD *)v14 + (((unint64_t)v11 >> 3) & 0x1FF8)) & (1 << v11)) == 0)
        {
          goto LABEL_11;
        }
      }
      v5 += 16;
      if (v6 == v5)
        goto LABEL_27;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8) & 0xFFFFFFFFFFFFFFF0);
LABEL_5:
    v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 32);
    v10 = v9 & 0x7FFF;
    v11 = HIWORD(v9);
    goto LABEL_6;
  }
LABEL_27:
  if (v29 != v31)
    free(v29);
}

void sub_22EDCD13C(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  BOOL v20;
  _BYTE *v21;
  int *v22;
  unint64_t v23;
  unsigned int v24;
  _BYTE v25[25];
  int v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[18];

  v31[17] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  *(_DWORD *)v25 = 0;
  *(_QWORD *)&v25[8] = 0;
  v25[24] = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v31;
  v30 = 0x400000000;
  v31[16] = 0;
  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_OWORD *)(*v3 + 32 * a2);
  v5 = *(_OWORD *)((char *)v4 + 9);
  *(_OWORD *)v25 = *v4;
  *(_OWORD *)&v25[9] = v5;
  v6 = *v3 + 32 * a2;
  *(_DWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2 + 16);
  v8 = *(_DWORD *)(v7 + 28) & 0x7F;
  if (v7 && v8 == 38)
  {
    if ((*(_BYTE *)(v7 + 60) & 8) == 0)
      goto LABEL_12;
    v9 = (unsigned int *)(v7 + 64);
    goto LABEL_11;
  }
  if ((v7 && v8 == 59 || v7 && v8 == 32) && *(_BYTE *)(v7 + 81))
  {
    v9 = (unsigned int *)(v7 + 84);
LABEL_11:
    *(_QWORD *)(a1 + 40) = *v9 | 0x100000000;
  }
LABEL_12:
  v11 = (unint64_t *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 48);
  v12 = *(_DWORD *)(a1 + 56);
  v13 = (int *)&v24;
  if (v12 >= *(_DWORD *)(a1 + 60))
  {
    v20 = v10 + 224 * v12 > (unint64_t)&v24;
    if (v10 <= (unint64_t)&v24 && v20)
    {
      v21 = &v25[-v10];
      sub_22F347EA8(a1 + 48);
      v10 = *v11;
      v13 = (int *)&v21[*v11];
    }
    else
    {
      sub_22F347EA8(a1 + 48);
      v10 = *v11;
      v13 = (int *)&v24;
    }
  }
  v14 = *(_DWORD *)(a1 + 56);
  v15 = v10 + 224 * v14;
  v16 = *((_OWORD *)v13 + 1);
  v17 = *((_OWORD *)v13 + 2);
  v18 = *((_OWORD *)v13 + 3);
  *(_BYTE *)(v15 + 64) = *((_BYTE *)v13 + 64);
  *(_OWORD *)(v15 + 32) = v17;
  *(_OWORD *)(v15 + 48) = v18;
  *(_OWORD *)v15 = *(_OWORD *)v13;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 80) = 0x400000000;
  *(_QWORD *)(v15 + 72) = v15 + 88;
  v19 = v15 + 72;
  if (v13[20])
  {
    v22 = v13;
    v23 = v10;
    sub_22EDCD354(v19, (uint64_t)(v13 + 18));
    v13 = v22;
    v10 = v23;
  }
  *(_QWORD *)(v10 + 224 * v14 + 216) = *((_QWORD *)v13 + 27);
  ++*(_DWORD *)(a1 + 56);
  if (v29 != v31)
    free(v29);
}

uint64_t sub_22EDCD354(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v8;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 32 * v3 - 7);
LABEL_5:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 12) >= v3)
    {
      if (v4)
      {
        memmove(*(void **)a1, *(const void **)a2, 32 * v8 - 7);
LABEL_10:
        v6 = *(unsigned int *)(a2 + 8);
        if (v8 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v8), (const void *)(*(_QWORD *)a2 + 32 * v8), *(_QWORD *)a2 + 32 * v6 - (*(_QWORD *)a2 + 32 * v8));
        goto LABEL_5;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v8 = 0;
    goto LABEL_10;
  }
  return a1;
}

char **sub_22EDCD438(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 224 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 152];
      if (&v2[v4 - 136] != v5)
        free(v5);
      v4 -= 224;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22EDCD4B4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (!v3 || (v4 = *(_DWORD *)(v3 + 16), v4 != 41))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 41)
      return 0;
    result = sub_22F10CF48(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      return result;
    v3 = result;
    v4 = *(_DWORD *)(result + 16);
  }
  v6 = v3;
  if ((v4 & 0x100000) != 0)
  {
    v6 = v3;
    do
    {
      while (1)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v6)
          break;
        v7 = *(_DWORD *)(v6 + 16);
        if ((v7 & 0xFE) != 0x28)
          break;
        if ((v7 & 0x100000) == 0)
          goto LABEL_13;
      }
      v6 = sub_22F10CF48(v6);
    }
    while ((*(_DWORD *)(v6 + 16) & 0x100000) != 0);
  }
LABEL_13:
  v8 = *(_QWORD *)(v6 + 32);
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v9 & 8) != 0)
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v10 = (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xC00000000) != 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  result = 0;
  if (!(v11 | (v9 | v8) & 7) && !v10)
  {
    if ((*(_BYTE *)(v3 + 18) & 0x10) != 0)
    {
      do
      {
        while (1)
        {
          v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v3)
            break;
          v12 = *(_DWORD *)(v3 + 16);
          if ((v12 & 0xFE) != 0x28)
            break;
          if ((v12 & 0x100000) == 0)
            goto LABEL_24;
        }
        v3 = sub_22F10CF48(v3);
      }
      while ((*(_DWORD *)(v3 + 16) & 0x100000) != 0);
    }
LABEL_24:
    result = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 16) == 47)
        return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 34) >= a2;
    }
  }
  return result;
}

BOOL sub_22EDCD63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v11;
  BOOL v12;

  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v2 & 8) != 0)
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v3 = HIDWORD(*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF0) + 0x18));
  }
  else
  {
    LODWORD(v3) = 0;
    v4 = 0;
  }
  v5 = v4 | (v2 | a1) & 7;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0)
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v7 = HIDWORD(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18));
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = v8 | (v6 | a2) & 7;
  if (v5 == v9 && (_DWORD)v3 == (_DWORD)v7)
    return 0;
  v11 = v9 ^ v5;
  v12 = ((v9 ^ v5) & 0x30) == 0 || (v5 & 0x30) == 0;
  return !v12
      || v5 >= 0x800 && v11 > 0x7FF
      || ((v5 >> 9) & 3) > ((v9 >> 9) & 3)
      || (v11 & 0x1C0) != 0 && (v5 & 0x1C0) != 0
      || (v5 & ~(_BYTE)v9 & 7) != 0;
}

uint64_t sub_22EDCD718(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _BOOL4 v33;
  int v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  _BYTE v41[5];
  uint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49[2];
  uint64_t v50;
  uint64_t v51;
  char v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  char v60;
  int *v61;
  unsigned int v62;
  uint64_t v63;

  *(_QWORD *)v49 = a5;
  v63 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v12 = a3;
    v15 = 0;
    LODWORD(v16) = 0;
    HIDWORD(v48) = BYTE4(a9);
    LODWORD(v48) = a9;
    v43 = a3;
    v44 = (char **)&v61;
    v46 = a6;
    v47 = a4;
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v12 + 8 * v15) & 0xFFFFFFFFFFFFFFF0);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 16) == 36)
          break;
      }
      if (v16 >= a6
        || (v24 = *(_QWORD *)(*(_QWORD *)v49 + 8 * v16),
            v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0),
            *(_BYTE *)(v25 + 16) == 36))
      {
        v39 = 16;
        goto LABEL_57;
      }
      if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
      {
        LODWORD(v17) = sub_22F10D2BC(*(_QWORD *)(v12 + 8 * v15));
        v24 = *(_QWORD *)(*(_QWORD *)v49 + 8 * v16);
        v25 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
      }
      if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
        LODWORD(v25) = sub_22F10D2BC(v24);
      v41[0] = 0;
      v26 = sub_22EDC45FC(a1, a2, v17 & 0xFFFFFFF0, v25 & 0xFFFFFFF0, a7, a8, v48, SHIDWORD(v48), *(int *)v41, v41[4], v42, v43, (uint64_t)v44, v45, v46, v47, v48, v49[0], v49[1],
              v50,
              v51,
              v52,
              v53,
              v54,
              v55,
              v56);
      if (v26)
      {
        HIDWORD(v45) = v26;
        return HIDWORD(v45);
      }
      LODWORD(v16) = v16 + 1;
      ++v15;
LABEL_51:
      if (v15 == v47)
        goto LABEL_55;
    }
    v18 = *(_QWORD *)(v17 + 32);
    LODWORD(v50) = 1;
    v51 = v18;
    sub_22EDC36A0((uint64_t)&v53, a1, a2, a8, a7, (uint64_t)&v50);
    if (++v15 == v47 || v60)
    {
      if (v16 < a6)
      {
        v27 = v18 & 0xFFFFFFFFFFFFFFF0;
        v16 = v16;
        while (!v60 || v59 > v57)
        {
          v29 = *(_QWORD *)v27;
          if ((*(_BYTE *)(*(_QWORD *)v27 + 8) & 0xF) != 0)
            LODWORD(v29) = sub_22F10D2BC(v18);
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 8 * v16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v30 + 8) & 0xF) != 0)
            LODWORD(v30) = sub_22F10D2BC(*(_QWORD *)(*(_QWORD *)v49 + 8 * v16));
          v41[0] = 0;
          v31 = sub_22EDC45FC(a1, a2, v29 & 0xFFFFFFF0, v30 & 0xFFFFFFF0, a7, a8, v48, SHIDWORD(v48), *(int *)v41, v41[4], v42, v43, (uint64_t)v44, v45, v46, v47, v48, v49[0], v49[1],
                  v50,
                  v51,
                  v52,
                  v53,
                  v54,
                  v55,
                  v56);
          if (v31)
          {
            v33 = 1;
            v34 = v31;
            v12 = v43;
            goto LABEL_47;
          }
          sub_22EDC3850((unint64_t)&v53);
          if (v46 == ++v16)
          {
            LODWORD(v16) = v46;
            break;
          }
        }
      }
    }
    else
    {
      v19 = *(_DWORD *)(v17 + 20);
      if (v19)
        v20 = v58 == 0;
      else
        v20 = 0;
      v21 = v20 && v19 >= 2;
      if (v21 && v16 < a6)
      {
        v23 = ~(v19 != 0) + v19;
        v12 = v43;
        do
        {
          sub_22EDC3850((unint64_t)&v53);
          LODWORD(v16) = v16 + 1;
          v21 = v23-- != 0;
        }
        while (v21 && v16 < a6);
LABEL_45:
        v32 = sub_22EDC39BC((uint64_t)&v53);
        v33 = v32 != 0;
        v34 = HIDWORD(v45);
        if (v32)
          v34 = v32;
LABEL_47:
        HIDWORD(v45) = v34;
        if (v62)
        {
          v35 = v61;
          v36 = 224 * v62;
          do
          {
            v37 = *((_QWORD *)v35 + 27);
            v38 = *v35;
            v35 += 56;
            *(_QWORD *)(*(_QWORD *)(v56 + 232) + 8 * v38) = v37;
            v36 -= 224;
          }
          while (v36);
        }
        sub_22EDCD438(v44);
        if (v33)
          return HIDWORD(v45);
        goto LABEL_51;
      }
    }
    v12 = v43;
    goto LABEL_45;
  }
  LODWORD(v16) = 0;
LABEL_55:
  v39 = 16 * (v16 < a6);
LABEL_57:
  HIDWORD(v45) = v39;
  return HIDWORD(v45);
}

unint64_t sub_22EDCDA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v12 = a3 & 0xFFFFFFFFFFFFFFF0;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(_BYTE *)(v13 + 16) == 27;
  else
    v14 = 0;
  if (v14)
    v12 = *(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0;
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v15 || *(_BYTE *)(v15 + 16) != 46)
    v15 = sub_22F10CF48(v15);
  v16 = *(unsigned int *)(v15 + 20);
  v17 = (_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(_BYTE *)(v18 + 16) == 27;
  else
    v19 = 0;
  if (v19)
    v17 = (_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v17[1] & 0xFFFFFFFFFFFFFFF0);
  if (v20 && *(_BYTE *)(v20 + 16) == 46)
  {
    result = sub_22EDCBF14(a1, *(_QWORD *)(v15 + 32), *(_QWORD *)(v20 + 32), a5, a6);
    if (!(_DWORD)result)
      return sub_22EDCB720(a1, a2, (unsigned int *)(v15 + 40), v16, (int *)(v20 + 40), *(unsigned int *)(v20 + 20), a5, (uint64_t)a6, 0);
  }
  else
  {
    v22 = *(_QWORD *)(*(_QWORD *)(*v17 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v22
      && *(_BYTE *)(v22 + 16) == 45
      && (v23 = sub_22F114198(*(_QWORD *)(v22 + 24)), (*(_DWORD *)(v23 + 28) & 0x7E) == 0x24))
    {
      v24 = v23;
      v25 = *(_QWORD *)(v23 + 152);
      v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) != 0 && v26)
      {
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)v26 + 152);
          v26 = v27 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v27 & 4) != 0 && v26);
      }
      result = sub_22EDCBF14(a1, *(_QWORD *)(v15 + 32), v26, a5, a6);
      if (!(_DWORD)result)
        return sub_22EDCB720(a1, a2, (unsigned int *)(v15 + 40), v16, **(int ***)(v24 + 168), *(unsigned int *)(*(_QWORD *)(v24 + 168) + 8), a5, (uint64_t)a6, 1);
    }
    else
    {
      *(_DWORD *)(a5 + 176) = 1;
      *(_QWORD *)(a5 + 184) = a3;
      *(_DWORD *)(a5 + 200) = 1;
      *(_QWORD *)(a5 + 208) = a4;
      return 10;
    }
  }
  return result;
}

uint64_t sub_22EDCDC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  llvm *v38;
  uint64_t v39;
  llvm *v40;
  llvm *v41;
  unint64_t v42;
  unint64_t v43;
  llvm *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t *v56;
  void *v57;
  uint64_t *v58;
  uint64_t v63[2];
  llvm *v64;
  int32x2_t v65;
  unsigned int v66;
  void *__p;
  uint64_t *v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[64];
  uint64_t v75;
  void *v76[2];
  _BYTE v77[256];
  _BYTE v78[32];
  uint64_t v79;
  _QWORD v80[17];
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  void *v86;
  uint64_t v87;
  _QWORD v88[10];
  void *v89;
  uint64_t v90;
  _BYTE v91[104];
  void *v92;
  uint64_t v93;
  _BYTE v94[72];
  void *v95;
  uint64_t v96;
  _BYTE v97[256];
  _QWORD *v98;
  uint64_t v99;
  _QWORD v100[11];

  v100[8] = *MEMORY[0x24BDAC8D0];
  v70 = v74;
  v71 = v74;
  v72 = 8;
  v73 = 0;
  v98 = v100;
  v99 = 0x800000000;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v68 = 0;
  v69 = 0;
  __p = 0;
  v63[0] = (uint64_t)&v70;
  v63[1] = (uint64_t)&v98;
  sub_22EDCE820(v63, a2);
  v8 = v99;
  if ((_DWORD)v99)
  {
    do
    {
      v9 = v98[v8 - 1];
      LODWORD(v99) = v8 - 1;
      v10 = (_BYTE *)*a6;
      v11 = a6;
      v12 = (_BYTE *)(*a6 + 32 * *((unsigned int *)a6 + 2));
      v95 = v97;
      v96 = 0x800000000;
      sub_22EDCE794((uint64_t)&v95, v10, v12);
      *(_QWORD *)v78 = *(_QWORD *)a5;
      *(_DWORD *)&v78[8] = *(_DWORD *)(a5 + 8);
      v78[12] = 0;
      *(_QWORD *)&v78[16] = *(_QWORD *)(a5 + 16);
      *(_QWORD *)&v78[24] = v80;
      v79 = 0x400000000;
      v80[16] = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = v88;
      v87 = 0x800000000;
      v88[8] = 0;
      v88[9] = 0;
      v89 = v91;
      v90 = 0x400000000;
      v91[96] = 0;
      v92 = v94;
      v93 = 0x400000000;
      v13 = sub_22EDCDA6C(a1, a3, a4, v9, (uint64_t)v78, &v95);
      v14 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      if (v13)
      {
        sub_22EDCE820(v63, v15);
        a6 = v11;
      }
      else
      {
        v75 = v15;
        v76[0] = v77;
        v76[1] = (void *)0x800000000;
        if ((_DWORD)v96)
          sub_22EDCD354((uint64_t)v76, (uint64_t)&v95);
        sub_22F3481F0((uint64_t)&v64, &v75);
        a6 = v11;
        if (v76[0] != v77)
          free(v76[0]);
      }
      if (v92 != v94)
        free(v92);
      if (v89 != v91)
        free(v89);
      if (v86 != v88)
        free(v86);
      sub_22E89277C((char **)&v78[24]);
      if (v95 != v97)
        free(v95);
      v8 = v99;
    }
    while ((_DWORD)v99);
    v17 = (uint64_t *)__p;
    v16 = v68;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  if (0xAF8AF8AF8AF8AF8BLL * (v16 - v17) >= 2)
  {
    if (v71 != v70)
    {
      if (v72 >= 0x21 && 4 * (HIDWORD(v72) - v73) < v72)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)&v70);
LABEL_22:
        v17 = (uint64_t *)__p;
        v18 = v68;
        if (__p == v68)
        {
          v16 = (uint64_t *)__p;
        }
        else
        {
          do
          {
            sub_22EDCE820(v63, *v17);
            v17 += 35;
          }
          while (v17 != v18);
          v17 = (uint64_t *)__p;
          v16 = v68;
        }
        v19 = v99;
        if (0xAF8AF8AF8AF8AF8BLL * (v16 - v17) >= 2 && (_DWORD)v99 != 0)
        {
          do
          {
            v26 = v98[v19 - 1];
            LODWORD(v99) = v19 - 1;
            v27 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 24));
            v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
            v29 = (uint64_t *)sub_22F348360((uint64_t)&v64, v28);
            if (v68 != v29)
            {
              v31 = (char *)v29;
              *(_QWORD *)v78 = 0;
              if (sub_22F246C54((uint64_t *)&v64, v29, v78))
              {
                **(_QWORD **)v78 = -8192;
                v65 = vadd_s32(v65, (int32x2_t)0x1FFFFFFFFLL);
              }
              v32 = (char *)v68;
              if (v31 + 280 == (char *)v68)
              {
                v36 = v31;
              }
              else
              {
                v33 = (char *)__p + 8 * ((v31 - (_BYTE *)__p) >> 3) + 288;
                do
                {
                  *((_QWORD *)v33 - 36) = *((_QWORD *)v33 - 1);
                  sub_22F348004((uint64_t)(v33 - 280), (uint64_t)v33);
                  v34 = v33 + 280;
                  v35 = v33 + 272;
                  v33 += 280;
                }
                while (v35 != v32);
                v32 = (char *)v68;
                v36 = v34 - 288;
              }
              while (v32 != v36)
              {
                v37 = (char *)*((_QWORD *)v32 - 34);
                if (v32 - 256 != v37)
                  free(v37);
                v32 -= 280;
              }
              v68 = (uint64_t *)v36;
              if (v36 != v31)
              {
                v38 = (llvm *)((char *)v64 + 16 * v66);
                if (v65.i32[0])
                {
                  if (v66)
                  {
                    v39 = 16 * v66;
                    v40 = v64;
                    while ((*(_QWORD *)v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v40 = (llvm *)((char *)v40 + 16);
                      v39 -= 16;
                      if (!v39)
                        goto LABEL_63;
                    }
                  }
                  else
                  {
                    v40 = v64;
                  }
                }
                else
                {
LABEL_63:
                  v40 = (llvm *)((char *)v64 + 16 * v66);
                }
                v41 = (llvm *)((char *)v64 + 16 * v66);
                if (v40 != v41)
                {
                  v42 = 0xAF8AF8AF8AF8AF8BLL * ((v31 - (_BYTE *)__p) >> 3);
                  do
                  {
                    v43 = *((unsigned int *)v40 + 2);
                    if (v42 < v43)
                      *((_DWORD *)v40 + 2) = v43 - 1;
                    v44 = (llvm *)((char *)v40 + 16);
                    v40 = v38;
                    if (v44 != v38)
                    {
                      v40 = v44;
                      while ((*(_QWORD *)v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v40 = (llvm *)((char *)v40 + 16);
                        if (v40 == v38)
                        {
                          v40 = v38;
                          break;
                        }
                      }
                    }
                  }
                  while (v40 != v41);
                }
              }
            }
            sub_22EDCE820(v63, v28);
            v17 = (uint64_t *)__p;
            v16 = v68;
            v19 = v99;
          }
          while (0xAF8AF8AF8AF8AF8BLL * (((char *)v68 - (_BYTE *)__p) >> 3) >= 2 && (_DWORD)v99 != 0);
        }
        goto LABEL_31;
      }
      memset(v71, 255, 8 * v72);
    }
    HIDWORD(v72) = 0;
    v73 = 0;
    goto LABEL_22;
  }
LABEL_31:
  if (v17 == v16)
  {
    v21 = 1;
    goto LABEL_99;
  }
  if (0xAF8AF8AF8AF8AF8BLL * (v16 - v17) > 1)
  {
    v21 = 16;
    goto LABEL_99;
  }
  v22 = v17 + 1;
  if (v17 + 1 == a6)
    goto LABEL_98;
  v23 = (uint64_t *)v17[1];
  if (v23 != v17 + 3 && (uint64_t *)*a6 != a6 + 2)
  {
    v21 = 0;
    v17[1] = *a6;
    *a6 = (uint64_t)v23;
    v24 = *((_DWORD *)v17 + 4);
    *((_DWORD *)v17 + 4) = *((_DWORD *)a6 + 2);
    *((_DWORD *)a6 + 2) = v24;
    v25 = *((_DWORD *)v17 + 5);
    *((_DWORD *)v17 + 5) = *((_DWORD *)a6 + 3);
    *((_DWORD *)a6 + 3) = v25;
    goto LABEL_99;
  }
  if (*((_DWORD *)v17 + 5) < *((_DWORD *)a6 + 2))
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v45 = *((_DWORD *)v17 + 4);
  if (*((_DWORD *)a6 + 3) < v45)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v45 = *((_DWORD *)v17 + 4);
  }
  v46 = *((_DWORD *)a6 + 2);
  if (v45 >= v46)
    v47 = v46;
  else
    v47 = v45;
  if ((_DWORD)v47)
  {
    v48 = 0;
    do
    {
      v49 = (_OWORD *)(*v22 + v48);
      v50 = (_OWORD *)(*a6 + v48);
      *(_OWORD *)v78 = *v49;
      v51 = *(_OWORD *)v78;
      *(_OWORD *)&v78[16] = v49[1];
      v52 = *(_OWORD *)((char *)v50 + 9);
      *v49 = *v50;
      *(_OWORD *)((char *)v49 + 9) = v52;
      *v50 = v51;
      *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v78[9];
      v48 += 32;
    }
    while (32 * v47 != v48);
    v45 = *((_DWORD *)v17 + 4);
    v46 = *((_DWORD *)a6 + 2);
  }
  v53 = v45 - v46;
  if (v45 > v46)
  {
    if ((_DWORD)v47 != v45)
    {
      memcpy((void *)(*a6 + 32 * v46), (const void *)(*v22 + 32 * v47), *v22 + 32 * v45 - (*v22 + 32 * v47));
      v46 = *((_DWORD *)a6 + 2);
    }
    v21 = 0;
    *((_DWORD *)a6 + 2) = v53 + v46;
    *((_DWORD *)v17 + 4) = v47;
    goto LABEL_99;
  }
  v54 = v46 - v45;
  if (v46 <= v45)
  {
LABEL_98:
    v21 = 0;
    goto LABEL_99;
  }
  if ((_DWORD)v47 != v46)
  {
    memcpy((void *)(v17[1] + 32 * v45), (const void *)(*a6 + 32 * v47), *a6 + 32 * v46 - (*a6 + 32 * v47));
    v45 = *((_DWORD *)v17 + 4);
  }
  v21 = 0;
  *((_DWORD *)v17 + 4) = v54 + v45;
  *((_DWORD *)a6 + 2) = v47;
LABEL_99:
  v55 = (uint64_t *)__p;
  if (__p)
  {
    v56 = v68;
    v57 = __p;
    if (v68 != __p)
    {
      do
      {
        v58 = (uint64_t *)*(v56 - 34);
        if (v56 - 32 != v58)
          free(v58);
        v56 -= 35;
      }
      while (v56 != v55);
      v57 = __p;
    }
    v68 = v55;
    operator delete(v57);
  }
  llvm::deallocate_buffer(v64, (void *)(16 * v66));
  if (v98 != v100)
    free(v98);
  if (v71 != v70)
    free(v71);
  return v21;
}

uint64_t sub_22EDCE45C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5, uint64_t (*a6)(_QWORD *), uint64_t a7)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v42;
  unsigned int v43;
  char v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char v49;

  v12 = *(unsigned __int8 *)(a3 + 16);
  if (v12 == 29)
    v13 = a3;
  else
    v13 = 0;
  if (v12 == 30)
    v14 = a3;
  else
    v14 = 0;
  if ((a2[2] & 1) != 0)
  {
    v19 = sub_22EDCC8AC(a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16));
    if (!v19)
      return 0;
    v20 = v19;
    if (!v13)
    {
      v29 = *(_QWORD *)a1;
      v30 = **(_QWORD **)(a1 + 24);
      v31 = (_QWORD *)(v14 + (a7 >> 1));
      if ((a7 & 1) != 0)
        a6 = *(uint64_t (**)(_QWORD *))(*v31 + a6);
      v32 = a6(v31);
      v33 = *(_QWORD *)(a1 + 8);
      v34 = *(_QWORD **)(a1 + 16);
      LODWORD(v46) = 7;
      v47 = v32;
      v49 = 0;
      return sub_22EDCC94C(v29, v30, v20, (uint64_t)&v46, *(_QWORD *)(v32 + 8), v33, v34);
    }
    v21 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v22 = sub_22EF67C8C(v21);
    v43 = sub_22EF5CDF0(v21, *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
    if (v43 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v42);
    else
      v42 = 0;
    v44 = 1;
    v23 = (_QWORD *)(v13 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *))(*v23 + a4);
    v24 = a4(v23);
    v25 = v43;
    if (v43 > 0x40)
    {
      *v42 = v24;
      bzero(v42 + 1, (((unint64_t)(v25 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v43)
        v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v43;
      else
        LODWORD(v26) = 0;
      v42 = (_QWORD *)(v26 & v24);
    }
    v35 = *(_QWORD *)a1;
    v36 = **(_QWORD **)(a1 + 24);
    v37 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v38 = sub_22EF67C8C(v37);
    v40 = *(_QWORD *)(a1 + 8);
    v39 = *(_QWORD **)(a1 + 16);
    sub_22F0EEA4C((uint64_t)&v46, v37, &v42, v38);
    v49 = 1;
    v17 = sub_22EDCC94C(v35, v36, v20, (uint64_t)&v46, v38, v40, v39);
    if (v43 < 0x41)
      return v17;
    v18 = v42;
    if (!v42)
      return v17;
LABEL_45:
    MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
    return v17;
  }
  sub_22F00905C((uint64_t)a2, *(_QWORD *)(*(_QWORD *)a1 + 88), 0, (uint64_t)&v46);
  if (!v48)
    return 10;
  if (v13)
  {
    v15 = (_QWORD *)(v13 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *))(*v15 + a4);
    v16 = a4(v15);
    if (sub_22E42E5EC((uint64_t)&v46, v16))
      v17 = 0;
    else
      v17 = 10;
  }
  else
  {
    v27 = (_QWORD *)(v14 + (a7 >> 1));
    if ((a7 & 1) != 0)
      a6 = *(uint64_t (**)(_QWORD *))(*v27 + a6);
    v28 = a6(v27);
    sub_22F00905C(v28, *(_QWORD *)(*(_QWORD *)a1 + 88), 0, (uint64_t)&v42);
    if (v45)
    {
      if (v43 > 0x40)
      {
        if (llvm::APInt::equalSlowCase((llvm::APInt *)&v42, (const llvm::APInt *)&v46))
          v17 = 0;
        else
          v17 = 10;
        if (v42)
          MEMORY[0x2348A0E84](v42, 0x1000C8000313F17);
      }
      else if (v42 == v46)
      {
        v17 = 0;
      }
      else
      {
        v17 = 10;
      }
    }
    else
    {
      v17 = 10;
    }
  }
  if (v48)
  {
    if (v47 >= 0x41)
    {
      v18 = v46;
      if (v46)
        goto LABEL_45;
    }
  }
  return v17;
}

uint64_t sub_22EDCE794(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  v3 = result;
  v4 = a3 - a2;
  v5 = *(unsigned int *)(result + 8);
  if (v5 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v6 = a3;
    v7 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v6;
    a2 = v7;
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  if (a2 != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v3 + 32 * v5), a2, v4);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v5 + (v4 >> 5);
  return result;
}

unint64_t sub_22EDCE820(uint64_t *a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;

  result = sub_22E46A3A0(a2);
  if (result != v4)
  {
    v5 = result;
    v6 = v4;
    do
    {
      v7 = *(_QWORD *)(**(_QWORD **)(v5 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
        v7 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v5 + 16));
      v8 = v7 & 0xFFFFFFFFFFFFFFF0;
      v9 = *a1;
      v10 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      result = sub_22E3BA850(v9, v11);
      if (v12)
      {
        v13 = a1[1];
        v14 = *(unsigned int *)(v13 + 8);
        if (v14 >= *(unsigned int *)(v13 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = *(unsigned int *)(v13 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v8;
        ++*(_DWORD *)(v13 + 8);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_22EDCE918(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0xEA0EA0EA0EA0EALL)
      abort();
    v8 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x75075075075075)
      v10 = 0xEA0EA0EA0EA0EALL;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0xEA0EA0EA0EA0EALL)
      sub_22E3B3F8C();
    v11 = 280 * v10;
    v12 = (char *)operator new(280 * v10);
    v13 = &v12[280 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_22F348004((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 280;
    sub_22F348278(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 280)
    {
      v16 = (char *)*((_QWORD *)i - 34);
      if (i - 256 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x800000000;
    if (*(_DWORD *)(a2 + 16))
      sub_22F348004((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 35;
  }
  a1[1] = (uint64_t)v6;
}

unint64_t sub_22EDCEAC4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
    v7 = *(_QWORD *)((char *)&unk_22F498EB8
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v7 = 1;
  v8 = sub_22EDCEAC4(a1, a2, v6, (a4 + v7 - 1) & -v7);
  v9 = 0;
  if (v8 >= 0x10)
  {
    v10 = sub_22E8C1750(a1, v8, a3);
    if (v10 >= 0x10)
      return v10;
    else
      return 0;
  }
  return v9;
}

void sub_22EDD2F80(uint64_t *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22EDD3204(a1, a2);
        break;
      case 0x67:
        sub_22EDD32A4(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22EDD3368(a1, a2);
        break;
      case 0x6C:
        sub_22EDD3420((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22EDD35E8((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22EDD3650((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22EDD3658(a1, a2);
        break;
      case 0x70:
        sub_22EDD3764(a1, a2);
        break;
      case 0x71:
        sub_22EDD38F8(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22EDD39C8(a1, a2);
        break;
      case 0x73:
        sub_22EDD3C40((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22EDD3D28(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22EDD3D84((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22EDD4388((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22EDD46C8((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22EDD4848((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22EDD4BB0(a1, a2);
        break;
      case 0x7D:
        sub_22EDD4DDC(a1, a2);
        break;
      case 0x7E:
        sub_22EDD4EEC(a1, a2);
        break;
      case 0x7F:
        sub_22EDD5378(a1, a2);
        break;
      case 0x81:
        sub_22EDD54EC((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22EDD5A2C((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22EDD5D08((uint64_t)a1, a2);
        break;
      case 0x85:
        sub_22ECD9F20(a1, a2);
        break;
      case 0x86:
        sub_22EDD5DB0(a1, a2);
        break;
      case 0x87:
        sub_22EDD5E1C(a1, a2);
        break;
      case 0x88:
        sub_22EDD5F94(a1, a2);
        break;
      case 0x89:
        sub_22EDD622C((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22EDD6404(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22EDD65EC(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22EDD6758(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22EDD675C(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22EDD6E9C(a1, a2);
        break;
      case 0x90:
        sub_22EDD6F08(a1, a2);
        break;
      case 0x91:
        sub_22EDD6FAC(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22EDD7068();
        break;
      case 0x98:
        sub_22EDD706C(a1, a2);
        break;
      case 0x99:
        sub_22EDD7110((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22EDD713C(a1, a2);
        break;
      case 0x9C:
        sub_22EDD7200(a1, a2);
        break;
      case 0x9D:
        sub_22EDD72CC(a1, a2);
        break;
      case 0x9E:
        sub_22EDD73F0((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22EDD7488(a1, a2);
        break;
      case 0xA0:
        sub_22EDD74DC(a1, a2);
        break;
      case 0xA1:
        sub_22EDD7528(a1, a2);
        break;
      case 0xA2:
        sub_22EDD7848(a1, a2);
        break;
      case 0xA3:
        sub_22EDD78B8(a1, a2);
        break;
      case 0xA4:
        sub_22EDD78C4((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22EDD7D28(a1, a2);
        break;
      case 0xA7:
        sub_22EDD7EB0((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22EDD7FC4((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22EDD7FF0((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22EDD8084(a1, a2);
        break;
      case 0xB1:
        sub_22EDD82AC((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22EDD8374((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22EDD83F8(a1, a2);
        break;
      case 0xB7:
        sub_22EDD8610((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22EDD871C(a1, a2);
        break;
      case 0xB9:
        sub_22EDD87D0((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22EDD88BC((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22EDD88D0((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22EDD8994(a1, a2);
        break;
      case 0xBD:
        sub_22EDD8F58(a1, a2);
        break;
      case 0xBF:
        sub_22EDD9250(a1, a2);
        break;
      case 0xC0:
        sub_22EDD9370((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22EDD94FC(a1, a2);
        break;
      case 0xC4:
        sub_22EDD9918(a1, a2);
        break;
      case 0xC6:
        sub_22EDD997C((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22EDD9A6C(a1, a2);
        break;
      case 0xC8:
        sub_22EDD9B68(a1, a2);
        break;
      case 0xC9:
        sub_22EDD9F38(a1, a2);
        break;
      case 0xCA:
        sub_22EDDA020((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22EDDA088(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22EDDA384((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22EDDA4C4(a1, a2);
        break;
      case 0xD1:
        sub_22EDDA564(a1, a2);
        break;
      case 0xD2:
        sub_22EDDA768((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22EDDA7CC(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22EDDAB94((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22EDDAFA0(a1, a2);
        break;
      case 0xD6:
        sub_22EDDB01C(a1, a2);
        break;
      case 0xD7:
        sub_22EDDB084(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22EDDB180(a1, a2);
        break;
      case 0xDA:
        sub_22EDDB1F8(a1, a2);
        break;
      case 0xDB:
        sub_22EDDB35C(a1, a2);
        break;
      case 0xDC:
        sub_22EDDB930((uint64_t)a1, a2);
        break;
      case 0xDD:
        sub_22EDDB9A4(a1, a2);
        break;
      case 0xDE:
        sub_22EDDBC08(a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22EDDC0F4(a1, a2);
        break;
      case 0xE4:
        sub_22EDDC2A0((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22EDDC360((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22EDDC414(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22EDDCA6C(a1, a2);
        break;
      case 0xE9:
        sub_22EDDCC44(a1, a2);
        break;
      case 0xEA:
        sub_22EDDCCE8((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22EDD3204(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDD32A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDD3368(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(unsigned int *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, &v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EDD3420(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 48));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(_QWORD *)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v19, v16, (__int16 *)(v6 + 1693), &v18, &v17);
    v7 = *(unsigned int *)(v6 + 3696);
    v8 = v7 - 2;
    v9 = *(_QWORD *)(v6 + 3688);
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EDD35E8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EDC913C(a1);
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EDD3650(uint64_t a1, uint64_t a2)
{
  return sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EDD3658(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22EDD3764(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22EDD38F8(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EDD3764(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EDD39C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EDDD53C(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22EDC913C(a1);
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22EDDDA04(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22EDD3C40(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EDD3D28(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EDD3D84(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EDDD020((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22EDC913C(a1);
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22EDDCD8C((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22EDD4388(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EDE919C((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EDDCD8C((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22EDD46C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EDD4848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22EDD2F80(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v30.n128_u8[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EDC913C(a1);
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22EDE2CE4((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EDE3490(&v30, a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EDE9AB4(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22EDD4BB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EDD2F80(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22EDD2F80(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22EDD2F80(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22EDD4DDC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_22EDC913C(a1);
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870(a1 + 1, &v13, &v14) && v14 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v6 = *(_QWORD *)(v14 + 8);
  if (!v6)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(a2 + 8) && v6 == *(_QWORD *)(a2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(a2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(a2 + 24);
    v10 = *(unsigned __int8 *)(a2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    a2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(a2, v9, v5, v6, v11, v12);
  }
  return a2;
}

uint64_t sub_22EDD4EEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDE919C(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EDD2F80(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22EDDD020(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EDD5378(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EDD54EC(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EDE2CE4((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22EDE3698((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22EDE3698((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22EDD5A2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22EDD2F80(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22EDD5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = (uint64_t *)sub_22EDC9190(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EDD5DB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EDD5E1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22EDD2F80(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22EDC9190(a1, v4 & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EDD5F94(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDE919C(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EDDCD8C(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EDD622C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22EDC9190(a1, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = (uint64_t)*a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v5 + 1704);
    sub_22EB4DDB8(v5 + 3688, &v19, v16, (__int16 *)(v5 + 1693), &v18, &v17);
    v6 = *(unsigned int *)(v5 + 3696);
    v7 = v6 - 2;
    v8 = *(_QWORD *)(v5 + 3688);
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)(v5 + 1693) = 0;
    if (*(_DWORD *)(v5 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08(v5 + 1840, (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EDD6404(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDD2F80(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22EDD65EC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDD2F80(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD6404(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22EDD675C(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EDD2F80(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v61 = v63;
      v62 = 0x800000000;
      v10 = 1;
      if ((sub_22EDDCD8C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v61, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, v61, v62, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v61, v62, v11, 0);
        v10 = v13;
      }
      if (v61 != v63)
        free(v61);
      return v10;
    }
    return 1;
  }
  v14 = sub_22EDD2F80(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EDE9D54(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22EDD2F80(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22EDD2F80(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v60 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v61, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v61 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v60;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v57 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v57 + 520) = v46;
        *(_DWORD *)(v57 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28(v38);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v60;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v58 = sub_22EB2D0B8();
              if ((v58 & 1) != 0)
                v10 = 1;
              else
                v10 = v58;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v61 = v63;
      v62 = 0x1000000000;
      v51 = *v36;
      v59 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v61, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v63[0] = v53 | 3;
          LODWORD(v62) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v59;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v55 = sub_22EFFBA54(v30);
        v56 = sub_22ED1767C(*a1, v31, v55, (uint64_t)&v61, v33, (uint64_t)v34, v52, 1, 0);
        if ((v56 & 1) != 0)
          v10 = 1;
        else
          v10 = v56;
      }
      else
      {
        v54 = sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C(*a1, v31, v54, &v61, v33, v52);
      }
      v27 = v59;
LABEL_79:
      if (v61 != v63)
        free(v61);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EDD6E9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EDD6F08(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EDD2F80(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDD6FAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EDE919C(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EDD2F80(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EDD706C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22EDD7110(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EDD2F80(a1, v3);
}

uint64_t sub_22EDD713C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EDD7200(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_22EDC9190(a1, v4);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *(_DWORD *)(v8 + 11992) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0(v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EDD72CC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EDE9AB4((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EDD73F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EDC9190(a1, *(_QWORD *)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EDD7488(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDDD020(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EDD74DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDDD020(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDD7528(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22EDE2CE4(a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v31[0] + 1);
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v14 = *((_QWORD *)v31[0] + 1);
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  v27.n128_u64[0] = *(_QWORD *)(v15 + 40);
  v27.n128_u32[2] = v16;
  v28 = v17;
  if (v27.n128_u64[0])
  {
    sub_22EDE3490((__n128 *)v31, (uint64_t)a1, &v27);
    v27 = *(__n128 *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v29, &v27, v9, v14, v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22EDE9AB4((uint64_t)a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22EDD7848(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EDDD020(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDDA7CC(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EDD78B8(uint64_t *a1, uint64_t a2)
{
  return sub_22EDE9D54(a1, a2, 0, 0);
}

uint64_t sub_22EDD78C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EDD2F80(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22EDD2F80(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22EDD2F80(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22EDD2F80(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EDD7D28(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EDD7EB0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EDD7FC4(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EDD2F80(a1, v3);
}

uint64_t sub_22EDD7FF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EDD2F80(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EDD8084(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(_QWORD *)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EDC9190(a1, v12);
        if (!v13)
          break;
        v14 = (void *)v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EDD2F80(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EDD82AC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EDD8374(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = sub_22EDC913C(a1);
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(a2 + 8))
  {
    a2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(a2, v5);
  }
  return a2;
}

uint64_t sub_22EDD83F8(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EDDCD8C(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EDD8610(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EDE2CE4((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EDD871C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(unsigned int *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, &v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EDD87D0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EDD88BC(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EDD2F80(a1, v3);
}

uint64_t sub_22EDD88D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EDD8994(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22EDE2CE4(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EDE9AB4((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22EDE3490((__n128 *)v51, (uint64_t)a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22EDD8F58(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EDD2F80(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 16));
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EDDCD8C(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(_QWORD **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EDD9250(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EDD2F80(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22EDD2F80(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22EDD2F80(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EDD9370(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EDD2F80(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EDD94FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = (_QWORD *)*a1;
  v6 = *(_DWORD *)(*a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(_QWORD *)(v41 + 32);
LABEL_9:
        v20 = sub_22EDC9190(v59, v19);
        v21 = sub_22EDC913C(v59);
        v22 = sub_22EE7D030(*v59, v21, v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22EDD2F80(v59, v56);
      v55 = v25;
      v28 = sub_22EDD2F80(v59, v25);
      v29 = v26;
      v30 = sub_22EDD2F80(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = (_QWORD *)*v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108(v59 + 1, v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22EDD9918(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22EDC9190(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EDD997C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EDD9A6C(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EDD9B68(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v40, &v36) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22EDD2F80(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v36))
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v22 = (_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v23 = *v22;
          v22 = (_QWORD *)(*v22 + 40);
        }
        else
        {
          v23 = 0;
        }
        v24 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v22, v23, *(unsigned int *)(a2 + 32));
LABEL_52:
        v20 = v24;
        v35 = v37;
        if (v37 == v39)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(_QWORD *)(a2 + 40);
      v15 = sub_22EDC9190(a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v36)
      {
        v37 = v39;
        v38 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v37);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v24 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v37, v38, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (uint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v37 = v39;
  v38 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v37);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v25 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v25 = (uint64_t *)(*v6 + 40);
  v26 = *v25;
  v27 = (int *)v37;
  v28 = v38;
  v29 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v31 = *v6;
  else
    v31 = 0;
  v32 = *(unsigned int *)(a2 + 32);
  v33 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v31 + 58) & 2) != 0)
    v34 = sub_22EC2DA20(v33, 0, v29, v8, v26, v31, v32);
  else
    v34 = sub_22EC2F730(v33, 0, v29, v8, v26, v31, v32, v30, v27, v28, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v40, v41, 0, 0);
  v20 = v34;
  v35 = v37;
  if (v37 != v39)
LABEL_53:
    free(v35);
LABEL_28:
  if (v40 != v42)
    free(v40);
  return v20;
}

uint64_t sub_22EDD9F38(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EDDA020(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EDDA088(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22EDD2F80(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22EDD2F80(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22EDD2F80(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22EDD2F80(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EDDA384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EDD2F80(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EDDA4C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EDDA564(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EDD2F80(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EDDA768(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EDD2F80(a1, a2[2]);
}

uint64_t sub_22EDDA7CC(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EDE2CE4(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EDE9AB4((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EDDAB94(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EDD2F80(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EDC913C(a1);
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EDE2CE4((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EDE9AB4(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EDDAFA0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

uint64_t sub_22EDDB01C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EDDB084(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EDDCD8C(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EDDB180(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EDD2F80(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EDDB1F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22EDD2F80(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EDDB35C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  __int128 v68;
  _BYTE v69[24];
  void *v70[2];
  _BYTE v71[32];
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v67 = v69;
  v68 = xmmword_22F44E350;
  v69[16] = 0;
  v4 = *a1;
  v64 = 0;
  v62 = 3;
  v63 = 0;
  v60 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v63, (int *)&v60, (__int16 *)(v4 + 1693), (uint64_t *)&v64, &v62);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v58 = *(_QWORD *)(v16 + 10288);
  v59 = v19;
  v56 = *(_DWORD *)(v16 + 2192);
  v57 = *(_DWORD *)(v16 + 1944);
  v55 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EDDD53C(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v70, (uint64_t)&v72, (uint64_t)&v67) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_64;
  }
  if ((_DWORD)v73)
  {
    v21 = v72;
    v22 = 8 * v73;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v64 = v66;
  v65 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v54 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v37 = sub_22EDD2F80(a1, v34);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*a1);
            }
            if ((v37 & 1) != 0)
            {
LABEL_61:
              v18 = v54;
              goto LABEL_62;
            }
            v35 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v60) = 0;
          v61 = 0;
          v41 = *((_QWORD *)v28 + 3);
          if (v41 > 7)
          {
            v43 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v43 | 4;
              v60 = v43 | 4;
            }
            else
            {
              if (!v43)
              {
                v28 = 0;
                goto LABEL_53;
              }
              sub_22F31A5DC((unint64_t *)&v60, v43);
              v42 = v60;
            }
          }
          else
          {
            v42 = 0;
            v60 = 0;
          }
          v61 = 1;
          v44 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v45 = *v28;
          v46 = v28[4];
          v47 = *a1;
          if ((v35 & 2) != 0 || !v44)
            v32 = sub_22F332740(v47, v44, v45 == 1, v46, v42);
          else
            v32 = sub_22EBCF54C(v47, v44, v45 == 1, v46, v42);
          goto LABEL_52;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22EDD2F80(a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
            goto LABEL_61;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_52:
          v28 = (int *)v32;
LABEL_53:
          if (!v28)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332940(*a1, v30 & 0xFFFFFFFFFFFFFFFCLL);
          goto LABEL_28;
        }
      }
      else
      {
        if (v28[4] != 1)
        {
          v36 = sub_22EDC9190(a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          if (!v36)
            goto LABEL_61;
          v33 = sub_22F3325E4(*a1, v36);
LABEL_28:
          v28 = (int *)v33;
LABEL_54:
          LODWORD(v25) = v65;
          goto LABEL_55;
        }
        if (*(_DWORD *)(*a1 + 11992) != -1)
        {
          v33 = sub_22F332794(*a1, *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_28;
        }
      }
LABEL_55:
      if (v25 >= HIDWORD(v65))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v65;
      }
      *((_QWORD *)v64 + v25) = v28;
      v25 = (v65 + 1);
      LODWORD(v65) = v65 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v49 = (char *)v64;
        if ((_DWORD)v25)
        {
          v50 = 0;
          v18 = v54;
          do
          {
            v51 = *(_QWORD *)&v49[v50];
            if ((*(_DWORD *)v51 - 3) >= 0xFFFFFFFE)
            {
              v52 = *(_QWORD *)(v51 + 24);
              if (v52 >= 8 && (v52 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v55 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v50 += 8;
          }
          while (8 * v25 != v50);
        }
        else
        {
          v25 = 0;
          v18 = v54;
        }
        goto LABEL_74;
      }
    }
  }
  v25 = 0;
  v49 = v66;
LABEL_74:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v72, v73, v49, v25, *(_DWORD *)(a2 + 32));
LABEL_62:
  if (v64 != v66)
    free(v64);
LABEL_64:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v59;
    *(_QWORD *)(v16 + 10288) = v58;
    *(_DWORD *)(v16 + 1944) = v57;
    *(_DWORD *)(v16 + 2192) = v56;
  }
  sub_22EB48E64(v4);
  if (v67 != v69)
    free(v67);
  if (v70[0] != v71)
    free(v70[0]);
  if (v72 != v74)
    free(v72);
  return v20;
}

uint64_t sub_22EDDB930(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 32));
    if (v4)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 32) != v4)
        return sub_22F3C109C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EDDB9A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EDDCD8C(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EDDBC08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EDE417C(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EDE3E98((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EDDC0F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EDE2978(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22EDDC2A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EDD2F80(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EDDC360(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22EDD2F80(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EDDC414(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  unsigned __int32 v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  size_t v40;
  unsigned __int32 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53[2];
  void *v54[2];
  _BYTE v55[32];
  uint64_t v56;
  int64x2_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD v62[6];

  v2 = a1;
  v62[4] = *MEMORY[0x24BDAC8D0];
  v60 = v62;
  v61 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v49 = vdupq_n_s64(0x20uLL);
  v50 = (uint64_t)(a2 + 6);
  v51 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v56 = (uint64_t)v58;
      v57 = vdupq_n_s64(0x20uLL);
      v59 = 0;
      v10 = sub_22F11598C(v9);
      if (v57.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v56, v10);
      v11 = sub_22EDCEAC4(v2, &v56, v9, v8);
      if (v11 >= 0x10)
      {
        v13 = v11;
        if (v11 == *v7)
        {
          v14 = v61;
          v15 = HIDWORD(v61);
        }
        else
        {
          v23 = *(_QWORD *)(*v2 + 88);
          v24 = v57.i64[0] - v57.i64[1];
          v25 = v57.i32[0] - v57.i32[2];
          if (v57.i32[0] == v57.i32[2])
            v25 = sub_22F11598C(v13);
          v7 = (unint64_t *)sub_22E3CD3D4(v23 + 2032, v25 + 8, 3);
          *v7 = v13;
          memcpy(v7 + 1, (const void *)(v56 + v57.i64[1]), v24);
          v14 = v61;
          v15 = HIDWORD(v61);
          v5 = 1;
        }
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v61;
        }
        v60[v14] = (uint64_t)v7;
        LODWORD(v61) = v61 + 1;
        v12 = 4;
      }
      else
      {
        v12 = 1;
      }
      if ((_BYTE *)v56 != v58 && v56)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v16 = *(_QWORD *)(v9 + 32);
    if (v16 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v33 = *(_QWORD *)((char *)&unk_22F498EB8
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v33 = 1;
    v18 = ((unint64_t)v8 + v33 + 3) & -v33;
    v53[0] = *(_QWORD *)(v9 + 32);
    v53[1] = v18;
    v54[0] = v55;
    v54[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v16, v18, (uint64_t)v54);
    v47 = *(_DWORD *)(v9 + 20);
    LODWORD(v19) = v47 - 1;
    if (v47)
      v19 = v19;
    else
      v19 = 0;
    v48 = v19;
    v20 = v16;
    for (i = v16; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v22 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v22 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v20 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v22 == 24)
        goto LABEL_42;
      if (v22 == 26)
        break;
      if (((1 << v22) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v20 = i;
LABEL_43:
    sub_22F115668(v20);
    sub_22F1167E8(v53);
    v2 = a1;
    v26 = *a1;
    v27 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v56 = (uint64_t)v58;
    v57 = v49;
    v59 = 0;
    v28 = sub_22F11598C(*v7);
    if (v57.i64[0] < (unint64_t)v28)
      sub_22EEB52C0(&v56, v28);
    v29 = sub_22EDCEAC4(a1, &v56, v16, v18);
    if (v29 < 0x10)
    {
LABEL_46:
      v12 = 1;
      goto LABEL_47;
    }
    v30 = v29;
    v31 = v16;
    while (2)
    {
      while (2)
      {
        if ((v31 & 0xF) != 0)
          goto LABEL_67;
        v32 = *(unsigned __int8 *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v32 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v31))
            v16 = v31;
          v31 = sub_22F115B7C(v31);
          if (!v31)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v32 == 24)
        break;
      if (v32 != 26)
      {
        if (((1 << v32) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v31 + 23) & 0x10) == 0)
      {
LABEL_67:
        v31 = sub_22F115B7C(v31);
        continue;
      }
      break;
    }
    v16 = v31;
LABEL_69:
    v34 = sub_22F115668(v16);
    v35 = sub_22F1167E8(v53);
    v2 = a1;
    v36 = sub_22F34AE9C((_QWORD *)*a1, v30, v34 | ((unint64_t)v35 << 32), *v8, v48 | ((unint64_t)(v47 != 0) << 32));
    if (v36 < 0x10)
      goto LABEL_46;
    v37 = v36;
    sub_22EEB5360((uint64_t)&v56, v36, 4uLL, 4);
    *v38 = *v8;
    v39 = *(_QWORD *)(*a1 + 88);
    v40 = v57.i64[0] - v57.i64[1];
    v41 = v57.i32[0] - v57.i32[2];
    if (v57.i32[0] == v57.i32[2])
      v41 = sub_22F11598C(v37);
    v42 = (_QWORD *)sub_22E3CD3D4(v39 + 2032, v41 + 8, 3);
    *v42 = v37;
    memcpy(v42 + 1, (const void *)(v56 + v57.i64[1]), v40);
    v43 = v61;
    if (v61 >= (unint64_t)HIDWORD(v61))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v43 = v61;
    }
    v60[v43] = (uint64_t)v42;
    LODWORD(v61) = v61 + 1;
    v12 = 4;
LABEL_47:
    if ((_BYTE *)v56 != v58 && v56)
      MEMORY[0x2348A0E84]();
    *(_DWORD *)(v26 + 11992) = v27;
    if (v54[0] != v55)
      free(v54[0]);
    v5 = 1;
    v6 = (_DWORD *)v50;
    v3 = v51;
LABEL_53:
    if (v12 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v44 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v60, v61, a2[5]);
        else
          v44 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v44 = 1;
LABEL_81:
  if (v60 != v62)
    free(v60);
  return v44;
}

uint64_t sub_22EDDCA6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = sub_22EDC9190(a1, v9);
    if (v10)
    {
      v11 = (unint64_t *)v10;
      v12 = *a1;
      if (v9 != v10 || *(_DWORD *)(v12 + 11992) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = *a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EDE9D54(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20(*a1, *((unsigned int *)v5 + 4), *((unsigned int *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EDDCC44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22EDE9D54(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22EDD2F80(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C(*a1, 0, *(unsigned int *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22EDDCCE8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EDC9190(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EDDCD8C(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EDD2F80(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EDD2F80(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EDDD020(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EDDD020(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EDD2F80(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EDD2F80(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EDDCD8C(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EDDD53C(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v52;
  unsigned int v54;
  void **v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD v59[6];

  v59[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v54 = 0;
  v52 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(*(_QWORD *)(a4 + 8 * v14) & 0xFFFFFFFFFFFFFFF0);
    if (v30 && *(_BYTE *)(v30 + 16) == 36)
    {
      v31 = *(_QWORD *)(v30 + 32);
      v57 = v59;
      v58 = 0x200000000;
      v55 = &v57;
      LOBYTE(v56) = 0;
      HIDWORD(v56) = -1;
      sub_22EE72E1C((uint64_t)&v55, v31);
      v32 = v13;
      v33 = *v13;
      v34 = *(_DWORD *)(v33 + 11992);
      *(_DWORD *)(v33 + 11992) = -1;
      v35 = sub_22EDC913C(v32);
      *(_DWORD *)(v33 + 11992) = v34;
      if (v57 != v59)
        free(v57);
      if (v35 < 0x10)
        return 1;
      v13 = a1;
      v36 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v35, 0);
      v8 = v52;
    }
    else
    {
      v36 = sub_22EDC913C(v13);
      if (v36 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v38 = *(unsigned int *)(a6 + 8);
    if (v38 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v38) = v36;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v39 = *(unsigned int *)(a7 + 8);
      if (v39 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v39 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v39) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v37 = sub_22EDDE100(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v37)
      goto LABEL_52;
    return 1;
  }
  v57 = v59;
  v58 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v40 = *(_QWORD *)((char *)&unk_22F498EB8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v40 = 1;
  v55 = (void **)v21;
  v56 = ((unint64_t)v18 + v40 + 3) & -v40;
  sub_22EE73804(*v13, v21, v56, (uint64_t)&v57);
  if (!(_DWORD)v58)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v54 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v55);
LABEL_49:
  v41 = *a1;
  v42 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v43 = v27 | (v54 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v37 = sub_22EDDE100(a1, v15, v43);
  *(_DWORD *)(v41 + 11992) = v42;
  v12 = a2;
  v11 = a5;
  if (v57 != v59)
    free(v57);
  v8 = v52;
  if (v37)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v44 = *(_QWORD *)(v37 + 48);
    v45 = *(unsigned int *)(a6 + 8);
    if (v45 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v45 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v45) = v44;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v46 = *(unsigned int *)(a7 + 8);
      if (v46 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v46) = v37;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

uint64_t sub_22EDDDA04(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EDDE61C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EDDEB4C(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EDDED48(a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EDDEE70(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EDDF134(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EDDF2BC(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EDDF4D4(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22EDDF4DC(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EDDF530(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EDDF818(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EDDF8C0(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EDDFA94((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EDDFDBC(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EDDFE34(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EDE0058((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22EDE0064(a1, a2);
      break;
    case 0x16u:
      result = sub_22EDE00D0(a1, a2);
      break;
    case 0x17u:
      result = sub_22EDE013C(a1, a2);
      break;
    case 0x18u:
      result = sub_22EDE01A8(a1, a2);
      break;
    case 0x19u:
      result = sub_22EDE0214(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EDE0284(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EDE02F0(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EDE035C(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EDE03C8(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EDE0434(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EDE04A0(a1, a2);
      break;
    case 0x20u:
      result = sub_22EDE050C(a1, a2);
      break;
    case 0x21u:
      result = sub_22EDE0578(a1, a2);
      break;
    case 0x22u:
      result = sub_22EDE05E4(a1, a2);
      break;
    case 0x23u:
      result = sub_22EDE0650(a1, a2);
      break;
    case 0x24u:
      result = sub_22EDE06BC(a1, a2);
      break;
    case 0x25u:
      result = sub_22EDE0728(a1, a2);
      break;
    case 0x26u:
      result = sub_22EDE0794(a1, a2);
      break;
    case 0x27u:
      result = sub_22EDE0800(a1, a2);
      break;
    case 0x28u:
      result = sub_22EDE086C(a1, a2);
      break;
    case 0x29u:
      result = sub_22EDE08D8(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EDE0944(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EDE09B0(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EDE0A1C(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EDE0A88(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EDE0AF4(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EDE0B60(a1, a2);
      break;
    case 0x30u:
      result = sub_22EDE0BCC(a1, a2);
      break;
    case 0x31u:
      result = sub_22EDE0C38(a1, a2);
      break;
    case 0x32u:
      result = sub_22EDE0CA4(a1, a2);
      break;
    case 0x33u:
      result = sub_22EDE0D10(a1, a2);
      break;
    case 0x34u:
      result = sub_22EDE0D7C(a1, a2);
      break;
    case 0x35u:
      result = sub_22EDE0DE8(a1, a2);
      break;
    case 0x36u:
      result = sub_22EDE0E54(a1, a2);
      break;
    case 0x37u:
      result = sub_22EDE0EC0(a1, a2);
      break;
    case 0x38u:
      result = sub_22EDE0F2C(a1, a2);
      break;
    case 0x39u:
      result = sub_22EDE0F98(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EDE1004(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EDE1070(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EDE10DC(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EDE1148(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EDE11B4(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EDE1220(a1, a2);
      break;
    case 0x42u:
      result = sub_22EDE128C(a1, a2);
      break;
    case 0x43u:
      result = sub_22EDE12F8(a1, a2);
      break;
    case 0x44u:
      result = sub_22EDE1364(a1, a2);
      break;
    case 0x45u:
      result = sub_22EDE13D0(a1, a2);
      break;
    case 0x46u:
      result = sub_22EDE143C(a1, a2);
      break;
    case 0x47u:
      result = sub_22EDE14A8(a1, a2);
      break;
    case 0x48u:
      result = sub_22EDE1514(a1, a2);
      break;
    case 0x49u:
      result = sub_22EDE1580(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EDE15EC(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EDE1658(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EDE16C4(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EDE1730(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EDE179C(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EDE1808(a1, a2);
      break;
    case 0x50u:
      result = sub_22EDE1874(a1, a2);
      break;
    case 0x51u:
      result = sub_22EDE18E0(a1, a2);
      break;
    case 0x52u:
      result = sub_22EDE194C(a1, a2);
      break;
    case 0x53u:
      result = sub_22EDE19B8(a1, a2);
      break;
    case 0x54u:
      result = sub_22EDE1A24(a1, a2);
      break;
    case 0x55u:
      result = sub_22EDE1A90(a1, a2);
      break;
    case 0x56u:
      result = sub_22EDE1AFC(a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EDE1BE8(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EDE1C54((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EDE1D08((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EDE1D80(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EDE1FA8(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EDE2014(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EDE2108(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EDE2158(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EDE21C4(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EDE220C(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EDE22C0(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EDE24D0(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EDE2520(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EDE2648(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EDD2F80(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EDE27A0((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22EDE284C((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

unint64_t sub_22EDDE100(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int i;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  size_t v51;
  unsigned __int32 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];
  char v56[8];
  int64x2_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v15 = (uint64_t *)sub_22EDC9190(a1, v7);
    if (v15)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v56 = v58;
  v57 = vdupq_n_s64(0x20uLL);
  v59 = 0;
  v9 = sub_22F11598C(v8);
  if (v57.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v56, v9);
  v10 = (int *)(v7 + 1);
  v11 = *(_QWORD *)(v8 + 32);
  if (v11 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v44 = *(_QWORD *)((char *)&unk_22F498EB8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v44 = 1;
  v13 = sub_22EDCEAC4(a1, v56, v11, ((unint64_t)v7 + v44 + 11) & -v44);
  if (v13 < 0x10)
  {
LABEL_14:
    v14 = 0;
    v15 = 0;
    goto LABEL_15;
  }
  v34 = v13;
  v35 = *(_QWORD *)(v8 + 32);
  v54 = v35;
  if (v35 >= 0x10 && (v35 & 0xF) == 0)
    v53 = *(_QWORD *)((char *)&unk_22F498EB8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v53 = 1;
  v37 = *(_QWORD *)(v8 + 32);
  v55[0] = v37;
  v55[1] = ((unint64_t)v7 + v53 + 11) & -v53;
  while (1)
  {
    while (1)
    {
      if ((v37 & 0xF) != 0)
        goto LABEL_77;
      v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v38 <= 0x39)
        break;
LABEL_72:
      v39 = v37;
      v40 = sub_22F115668(v37);
      v41 = v54;
      if (v40)
        v41 = v39;
      v54 = v41;
      v37 = sub_22F115B7C(v39);
      if (!v37)
        goto LABEL_85;
    }
    if (v38 == 24)
      goto LABEL_84;
    if (v38 == 26)
      break;
    if (((1 << v38) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v37 = sub_22F115B7C(v37);
  }
  if ((*(_BYTE *)(v37 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v54 = v37;
LABEL_85:
  v45 = sub_22F115668(v54);
  v46 = sub_22F1167E8(v55);
  v47 = sub_22F34AE9C((_QWORD *)*a1, v34, v45 | ((unint64_t)v46 << 32), *v10, a3);
  if (v47 < 0x10)
    goto LABEL_14;
  v48 = v47;
  sub_22EEB5360((uint64_t)v56, v47, 4uLL, 4);
  *v49 = *v10;
  v50 = *(_QWORD *)(*a1 + 88);
  v51 = v57.i64[0] - v57.i64[1];
  v52 = v57.i32[0] - v57.i32[2];
  if (v57.i32[0] == v57.i32[2])
    v52 = sub_22F11598C(v48);
  v15 = (uint64_t *)sub_22E3CD3D4(v50 + 2032, v52 + 8, 3);
  *v15 = v48;
  memcpy(v15 + 1, (const void *)(*(_QWORD *)v56 + v57.i64[1]), v51);
  v14 = 1;
LABEL_15:
  if (*(_BYTE **)v56 != v58 && *(_QWORD *)v56)
    MEMORY[0x2348A0E84]();
  if ((v14 & 1) == 0 || !v15)
    return 0;
LABEL_20:
  if (v15 != (uint64_t *)v7)
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0)
      v19 = (_QWORD *)*v19;
    v20 = *(_QWORD *)(a2 + 40);
    if ((v20 & 7) != 0)
      v21 = 0;
    else
      v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    v22 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v19, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v21, *v15, (uint64_t)v15, *(_BYTE *)(a2 + 96) & 7, 0);
    v16 = v22;
    v23 = *(_DWORD *)(a2 + 96);
    if ((v23 & 0x1000) != 0)
      v24 = 0;
    else
      v24 = v23 & 0xFE000;
    v25 = (v23 >> 20);
    if (v25 == 255)
    {
      v26 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v27 = *(_QWORD *)(a2 + 16);
        v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((v27 & 4) != 0)
          v28 = *(_QWORD *)v28;
        for (i = *(_WORD *)(v28 + 8) & 0x7F; i != 83; i = *(_WORD *)(v28 + 8) & 0x7F)
        {
          v30 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v30 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v30 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v30 = -64;
              goto LABEL_54;
            }
          }
          v31 = i - 52;
          if ((i - 33) >= 5)
            v32 = -48;
          else
            v32 = -64;
          if (v31 >= 6)
            v30 = v32;
          else
            v30 = -72;
LABEL_54:
          v33 = *(_QWORD *)(v28 + v30 + 16);
          v28 = v33 & 0xFFFFFFFFFFFFFFF8;
          if ((v33 & 4) != 0)
            v28 = *(_QWORD *)v28;
        }
        v26 = v28 - 40;
      }
      v25 = sub_22F36F2CC(*(_QWORD *)(v26 + 88), a2);
      v42 = (unsigned int *)(v16 + 96);
      v43 = *(_DWORD *)(v16 + 96) & 0xFFF01FFF | v24;
      *(_DWORD *)(v16 + 96) = v43;
      if (v25 >= 0xFF)
      {
        sub_22F3AC2B8(v16, v25);
LABEL_83:
        *(_QWORD *)v56 = a2;
        sub_22F25E108(a1 + 1, v56)[1] = v16;
        return v16;
      }
    }
    else
    {
      v42 = (unsigned int *)(v22 + 96);
      v43 = *(_DWORD *)(v22 + 96) & 0xFFF01FFF | v24;
    }
    *v42 = v43 & 0xF00FFFFF | (v25 << 20);
    goto LABEL_83;
  }
  return a2;
}

uint64_t sub_22EDDE61C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EDD2F80(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EDD2F80(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22EDD2F80(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EDDEB4C(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22EDD2F80(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EDDED48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 32);
    if (!sub_22EDC9190(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0(*(_QWORD *)(*a1 + 216), v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *(_DWORD *)(v9 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v9 + 88) + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22EDDEE70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EDDDA04(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EDDF134(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EDDF4D4(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EDDED48(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EDDF2BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EDC913C(a1);
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EDDDA04(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EDDF4D4(uint64_t *a1, uint64_t a2)
{
  return sub_22EDE2978(a1, a2, 0);
}

uint64_t sub_22EDDF4DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDDD020(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EDDF530(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EDDD020(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EDDDA04(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EDDDA04(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EDDDA04(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EDDDA04(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EDDF818(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EDDF8C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EDE2BE0((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EDDFA94(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EDDDA04(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EDE2BE0((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EDDDA04(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EDDDA04(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EDDFDBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EDDFE34(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EDE2CE4(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22EDE3490((__n128 *)&v19, (uint64_t)a1, (__n128 *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22EDDF4D4(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22EDE0058(uint64_t a1, uint64_t a2)
{
  return sub_22EDDDA04(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EDE0064(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE00D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE013C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE01A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0214(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0284(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE02F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE035C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE03C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0434(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE04A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE050C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0578(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE05E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0650(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE06BC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0728(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0794(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0800(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE086C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE08D8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0944(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE09B0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0A1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0A88(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0AF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0B60(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0BCC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0C38(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0CA4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0D10(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0D7C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0DE8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0E54(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0EC0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0F2C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE0F98(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1004(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1070(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE10DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1148(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE11B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1220(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE128C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE12F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1364(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE13D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE143C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE14A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1514(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1580(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE15EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1658(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE16C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1730(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE179C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1808(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1874(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE18E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE194C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE19B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1A24(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1A90(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EDE48B8(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EDE1AFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
LABEL_6:
      v7 = (uint64_t *)sub_22EDC9190(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EDC913C(a1);
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8((_QWORD *)*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8(*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EDE1BE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EDE1C54(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EDDDA04(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EDE1D08(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EDD2F80(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EDE1D80(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EDDDA04(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EDDDA04(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EDE1FA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EDE2014(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EDE2108(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDDD020(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EDE2158(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EDDF4D4(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDE21C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDDF4D4(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDE220C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EDDF4D4(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EDE21C4(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EDE2158(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EDE22C0(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EDD2F80(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EDD2F80(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EDDDA04(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EDE24D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDE2520(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EDDDA04(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EDE2BE0((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EDDDA04(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EDE2648(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EDDDA04(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EDE27A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EDDDA04(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EDE284C(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EDE2BE0((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EDDDA04(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EDE2978(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EDDDA04(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22EDE2BE0(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EDD2F80(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

unint64_t sub_22EDE2CE4(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  unsigned int v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v6 = a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v73 = v75;
  v74 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v74;
    }
    v12 = (unint64_t *)&v73[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v70 = 0u;
  v71 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v63 = a1 + 1;
  do
  {
    LODWORD(v74) = v10 - 1;
    v13 = v73[v10 - 1];
    v69 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v69);
      sub_22F0AB958((uint64_t)&v70 + 8, v37, v38);
      *(_QWORD *)&v70 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v72 = v46;
          v65[0] = 0;
          if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v65[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v69);
          sub_22F3E8E2C((uint64_t *)&v70 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v70 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v69);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v69);
          v41 = sub_22F0AB364((uint64_t *)&v69);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v70 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v70)
            LODWORD(v70) = v40;
          DWORD1(v70) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v69);
      v45 = sub_22F0AB364((uint64_t *)&v69);
      v65[0] = a4;
      v65[1] = v43;
      v66 = v44;
      v67 = HIDWORD(v45);
      LOBYTE(v62) = 0;
      if ((sub_22E958D90(*a1, 0, v65, 0, &v70, a5, 0, 0, v62) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v69);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22EDE3698(a1, v19, v18, a4, (uint64_t)&v70);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v65);
              v72 = v19;
              v61 = sub_22E8901B8((uint64_t)v65, (uint64_t *)&v72);
              v64 = v70;
              sub_22E8906A0(v61, &v64);
              sub_22E903BEC((unsigned int *)v65);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v68);
    sub_22E903BEC(v68);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v69);
    sub_22E8ACD1C((uint64_t)&v70, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v74;
  }
  while ((_DWORD)v74);
  v49 = *((_QWORD *)&v70 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v71);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v71) != v51 || memcmp((const void *)v71, __s2, DWORD2(v71)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v71))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v71, DWORD2(v71));
        v49 = *((_QWORD *)&v70 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v71))
    free((void *)v71);
  if (v73 != (_OWORD *)v75)
    free(v73);
  return v6;
}

__n128 sub_22EDE3490(__n128 *a1, uint64_t a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_25;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v17 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v17 >= 3)
      v17 = 3;
    if (v17)
LABEL_18:
      v18 = 0;
    else
      v18 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v22 = v18;
    v23 = 0;
    if (sub_22E793870((uint64_t *)(a2 + 8), &v22, &v23)
      && v23 != *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
    {
      v18 = *(_QWORD *)(v23 + 8);
    }
    if (v18)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 88) + 15224), v18);
      return result;
    }
    goto LABEL_25;
  }
  if ((v7 - 3) > 2 || (v12 = a3[1].n128_i64[0]) == 0)
  {
    v19 = sub_22EDC913C(a2);
    if (v19 > 0xF)
    {
      v15 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8) | v19 & 7;
      v16 = *(_QWORD *)(*(_QWORD *)a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v20 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v20 >= 3)
          v20 = 3;
        v7 = v20 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_31;
    }
LABEL_25:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = (_QWORD *)sub_22EDC9190(a2, v12);
  if (!v13)
    goto LABEL_25;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 88);
LABEL_31:
  v21 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v21;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

_QWORD *sub_22EDE3698(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EDE45D0((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EDE3A64((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EDCEAC4(a1, &v41, a2, a3);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EDE3A64(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EDE3E98(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EDE417C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EDC9190(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EDC913C(a1);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EDE2CE4((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EDD2F80(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

uint64_t sub_22EDE45D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EDE48B8(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EDE5010(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EDE5194((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EDE51E0(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EDE5358((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EDE54DC((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EDE5528((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EDE5574((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EDE56C0((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EDE580C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EDE59A0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EDE59EC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EDE5A44(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EDE5A9C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EDE5AEC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EDE5B3C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EDE5C88((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EDE5D0C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EDE5D58((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EDE5EA4((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EDE5FF8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EDE6474((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EDE64C0((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EDE6618((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EDE6664(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EDE66B8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EDE6AF4((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EDE6C40((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EDE6DD4((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EDE6F2C((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EDE7084((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EDE7214(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EDE76EC(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EDE7738((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EDE7884(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EDE78D0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EDE791C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EDE7968((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EDE79B4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EDE7A0C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EDE7A74((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EDE7AC0((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EDE7C0C(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EDE8050((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EDE809C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EDE8100((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EDE824C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EDE8298((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EDE8430(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EDE886C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EDE88B8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EDE8D34((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EDE8D80((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EDE8ED8((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EDE9030(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EDDDA04(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EDE3490(&v26, (uint64_t)a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EDE5010(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EDD2F80(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EDD2F80(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EDE5194(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE51E0(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EDD2F80(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EDE5358(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EDD2F80(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EDD2F80(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EDE54DC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE5528(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE5574(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EDE56C0(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EDE580C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EDD2F80(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EDD2F80(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE59A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE59EC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EDD2F80(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE5A44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EDD2F80(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE5A9C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE5AEC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE5B3C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDE5C88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EDD2F80(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EDE5D0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE5D58(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EDD2F80(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EDE5EA4(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EDE5FF8(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EDD2F80(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EDE2CE4(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EDE3490(&v51, (uint64_t)a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EDE6474(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EDE64C0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EDE6618(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE6664(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE66B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0]
      || (sub_22EDE3490((__n128 *)v42, (uint64_t)a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EDE6AF4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDE6C40(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EDD2F80(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EDE6DD4(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EDE6F2C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDE7084(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EDD2F80(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EDE7214(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EDD2F80(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EDE2CE4(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EDE3490((__n128 *)&v57, (uint64_t)a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EDE76EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE7738(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDE7884(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE78D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE791C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE7968(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE79B4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EDD2F80(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EDE7A0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EDE7A74(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE7AC0(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDE7C0C(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0]
      && (sub_22EDE3490((__n128 *)v40, (uint64_t)a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36)
                  && v36 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
                {
                  v20 = v36[1];
                }
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EDE8050(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EDE809C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE8100(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EDE824C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EDE8298(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22EDD2F80(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EDE8430(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0]
      || (sub_22EDE3490((__n128 *)v40, (uint64_t)a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EDE886C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EDE88B8(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EDD2F80(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EDE2CE4(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EDE3490(&v51, (uint64_t)a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EDE8D34(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EDD2F80(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EDE8D80(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EDE8ED8(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EDD2F80(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EDE9030(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EDD2F80(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EDD2F80(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_22EDE919C(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EDC9190(a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F498EB8
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EDE948C(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return (uint64_t)v2;
}

unint64_t sub_22EDE948C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EDE2CE4(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EDE9AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EDE9D54(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EDE2CE4(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EDE3490(&v18, (uint64_t)a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EDE9AB4((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EDE9F28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EDC9190((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22EDD2F80(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EDE9FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EDE9FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EDEA004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EDEA010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EDEA01C()
{
  JUMPOUT(0x22EDEA024);
}

unint64_t sub_22EDEA038(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  v5 = a3;
  v8 = *(_QWORD *)(a3 + 32);
  if (v8 >= 0x10 && (v8 & 0xF) == 0)
    v14 = *(_QWORD *)((char *)&unk_22F498EB8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v14 = 1;
  v10 = sub_22EDCEAC4(a1, a2, v8, ((unint64_t)a4 + v14 + 3) & -v14);
  result = 0;
  if (v10 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v10 == *(_QWORD *)(v5 + 32)
      || (v5 = sub_22EE7E490(*a1, v10, (*(_DWORD *)(v5 + 16) >> 19) & 1, *a4), result = 0, v5 >= 0x10))
    {
      v12 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
      if (!v12 || (*(_DWORD *)(v12 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v12);
      sub_22EEB5360(a2, v5, 4uLL, 4);
      *v13 = *a4;
      return v5;
    }
  }
  return result;
}

unint64_t sub_22EDEA14C(_QWORD *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t *v5;
  uint64_t v6;

  v2 = *a1;
  v1 = (unint64_t *)a1[1];
  if (*(_QWORD *)(*a1 + 40))
  {
    v5 = (unint64_t *)a1[1];
    v6 = *a1;
    if (v1[1])
    {
      v3 = sub_22F0AB0EC(v1 + 1);
      v1 = v5;
      v2 = v6;
    }
    else
    {
      v1 = (unint64_t *)a1[1];
      v3 = *((_DWORD *)v5 + 6);
      if (!v3)
        v3 = *((_DWORD *)v5 + 7);
    }
  }
  else
  {
    v3 = *(_DWORD *)v1;
  }
  if ((*(_DWORD *)(v2 + 16) & 0x180000) == 0x80000)
    v1 += 6;
  return v3 | ((unint64_t)*(unsigned int *)v1 << 32);
}

unint64_t sub_22EDEA1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char v24;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 4) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) - 27 > 0xFFFFFFFD;
    else
      v7 = 0;
    if (!v7)
      v6 = sub_22F10CF48(v6);
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0);
    v24 = 0;
    v9 = sub_22F110500((uint64_t)&v24, v8);
    if (v9)
    {
      if (*(_QWORD *)(v9 + 24) <= 0xFuLL && (*(_BYTE *)(v9 + 17) & 4) == 0)
      {
        sub_22EFF605C(*(_QWORD *)a2);
        if ((sub_22EDC6650(a1, a3, v10, 0) & 1) != 0)
          return 0;
      }
    }
  }
  if (!a3
    || (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC
    || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(a3 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
  {
    if (*(_BYTE *)(a2 + 8))
      return sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(a3 + 48), 0);
    else
      return *(_QWORD *)(a3 + 48);
  }
  if (!*(_BYTE *)(a2 + 9))
    return 0;
  v12 = a3 + 72;
  v13 = *(_WORD *)(a3 + 80) & 0x7F;
  v14 = -40;
  if (v13 > 0x46)
  {
    if (v13 != 83)
    {
      if (v13 == 71)
      {
        v14 = -56;
        goto LABEL_37;
      }
      if (v13 == 81)
        goto LABEL_37;
LABEL_32:
      v15 = v13 - 52;
      v16 = v13 - 33 >= 5;
      v17 = -48;
      if (!v16)
        v17 = -64;
      if (v15 >= 6)
        v14 = v17;
      else
        v14 = -72;
    }
  }
  else
  {
    if (v13 > 0x18)
      goto LABEL_31;
    if (v13 != 16)
    {
      if (((1 << v13) & 0x1066) != 0)
        goto LABEL_37;
      if (v13 != 24)
      {
LABEL_31:
        if (v13 == 70)
        {
          v14 = -64;
          goto LABEL_37;
        }
        goto LABEL_32;
      }
    }
    v14 = -48;
  }
LABEL_37:
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a3 + 48);
  v20 = *(_QWORD *)(v12 + v14 + 16);
  v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 4) != 0)
    v21 = (_QWORD *)*v21;
  if (v21)
    v22 = (unint64_t)(v21 - 8);
  else
    v22 = 0;
  v23 = *(_QWORD *)(v22 + 48);
  if (!v23)
    v23 = sub_22EF6462C(v18, v22);
  return sub_22F36A6C0(v18, v19, *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22EDEA410(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 448);
  if (v2 != (void *)(a1 + 464))
    free(v2);
  v3 = *(void **)(a1 + 328);
  if (v3 != (void *)(a1 + 344))
    free(v3);
  v4 = *(void **)(a1 + 232);
  if (v4 != (void *)(a1 + 248))
    free(v4);
  sub_22E89277C((char **)(a1 + 24));
  return a1;
}

unint64_t sub_22EDEA480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t result;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v6 = *(_WORD *)(a2 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 0x46)
  {
    if (v6 == 83)
      goto LABEL_17;
    if (v6 == 71)
    {
      v7 = -56;
      goto LABEL_17;
    }
    if (v6 != 81)
    {
LABEL_12:
      v8 = v6 - 52;
      v9 = v6 - 33 >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v7 = v10;
      else
        v7 = -72;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_11;
    if (v6 == 16)
    {
LABEL_4:
      v7 = -48;
      goto LABEL_17;
    }
    if (((1 << v6) & 0x1066) == 0)
    {
      if (v6 == 24)
        goto LABEL_4;
LABEL_11:
      if (v6 == 70)
      {
        v7 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v11 = *(_QWORD *)(a2 + 72 + v7 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
    v13 = (unint64_t)(v12 - 8);
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 48);
  if (v14)
    v15 = v14 & 0xFFFFFFFFFFFFFFF0;
  else
    v15 = sub_22EF6462C(a1, v13);
  v16 = sub_22E46BB88(a2);
  if ((v16 & 0xCFFFFFFF8) != 0)
  {
    v24 = v16;
    v17 = sub_22E491354((unsigned int *)&v24, v15);
    v18 = sub_22EF5DBC4(a1, v17, v24);
  }
  else
  {
    v18 = v16 & 7 | v15;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v19)
    v20 = *(_BYTE *)(v19 + 16) == 26;
  else
    v20 = 0;
  if (!v20)
    v19 = sub_22F10CF48(v19);
  if ((*(_QWORD *)(v19 + 16) & 0x300000000) == 0x200000000)
    result = sub_22EF5FB8C(a1, v18);
  else
    result = sub_22EF5F8C4(a1, v18, 1);
  v22 = result;
  v23 = *(_DWORD *)(a3 + 8);
  if (v23 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v22;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

unsigned int *sub_22EDEA668(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v8;
  unint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  _BYTE *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *__srca;

  v4 = *(_QWORD *)result;
  v5 = result[2];
  if (*(_QWORD *)result + 8 * v5 == a2)
    return (unsigned int *)sub_22E3D0148((uint64_t)result, __src, a4);
  v6 = (a2 - v4) >> 3;
  __srca = __src;
  v8 = (char *)a4 - (char *)__src;
  v9 = a4 - __src;
  v10 = result;
  if (v5 + v9 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_QWORD *)v10;
    v5 = v10[2];
  }
  v11 = (_QWORD *)(v4 + 8 * v6);
  v12 = (_BYTE *)(v4 + 8 * v5);
  v13 = (v12 - (_BYTE *)v11) >> 3;
  if (v13 >= v9)
  {
    result = (unsigned int *)sub_22F246808((uint64_t)v10, &v12[-8 * v9], (char *)(v4 + 8 * v5));
    if (&v12[-8 * v9] != (_BYTE *)v11)
      result = (unsigned int *)memmove(&v11[v9], v11, &v12[-8 * v9] - (_BYTE *)v11);
    if (__srca != a4)
      return (unsigned int *)memmove(v11, __srca, v8);
  }
  else
  {
    v14 = v5 + (v8 >> 3);
    v10[2] = v14;
    if (v6 != v5)
    {
      result = (unsigned int *)memcpy((void *)(v4 + 8 * v14 - 8 * v13), v11, v12 - (_BYTE *)v11);
      do
      {
        v15 = *__srca++;
        *v11++ = v15;
        --v13;
      }
      while (v13);
    }
    if (__srca != a4)
      return (unsigned int *)memcpy(v12, __srca, (char *)a4 - (char *)__srca);
  }
  return result;
}

uint64_t sub_22EDEA804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22EDF615C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22EDF9FE4(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22EDFB43C(a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22EDFA44C(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EDEA804(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22EDEA804(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22EDFB43C(a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22EDFB43C(a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22EDFB28C(a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22EDFB3A0(a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22EDFB43C(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22EDFB43C(a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EDFB3A0(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22EDFB43C(a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EDFB3A0(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22EDFB43C(a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22EDFB43C(a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22EDFA44C(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EDF615C(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22EDFB3A0(a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22EDFB43C(a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22EDFA44C(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EDF615C(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22EDF615C(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22EDFB3A0(a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22EDFB43C(a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22EDFB43C(a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22EDFA02C(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EDFB3A0(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22EDFB43C(a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EDFA314(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22EDFA39C(a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22EDFB3A0(a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22EDFB43C(a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22EDFB43C(a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22EDFB43C(a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EDFB3A0(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22EDFB43C(a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EDFA314(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22EDFB43C(a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22EDFB43C(a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22EDFA144(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22EDFB3A0(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22EDFB43C(a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EDFB3A0(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22EDFB43C(a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EDFB3A0(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22EDFB43C(a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22EDFA144(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22EDFA44C(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22EDFB3A0(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22EDFB43C(a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22EDFB3A0(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22EDFB43C(a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22EDFA44C(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22EDF615C(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EDEA804(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22EDFB43C(a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22EDFA44C(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EDFABE4(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22EDFB43C(a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22EDFB43C(a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22EDFB3A0(a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22EDFB43C(a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22EDFB3A0(a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22EDFB43C(a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22EDFB3A0(a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22EDFB43C(a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22EDFB3A0(a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22EDFB43C(a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22EDFB3A0(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22EDFB43C(a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22EDFB28C(a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EDFB9D8(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22EDFB3A0(a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22EDFB43C(a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22EDFB9D8(a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22EDFA314(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22EDFA44C(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EDFB3A0(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22EDFB43C(a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EDFBA78(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDFB3A0(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22EDFB43C(a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EDFBAEC(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDFB3A0(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22EDFB43C(a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22EDFA44C(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22EDFA314(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EDFB3A0(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22EDFB43C(a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22EDF615C(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22EDFB28C(a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22EDFBAEC(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EDFB3A0(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22EDFB43C(a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22EDFABE4(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EDF9FE4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22EDFA44C(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22EDFB3A0(a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22EDFB43C(a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22EDFA144(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22EDFA44C(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22EDFB3A0(a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22EDFB43C(a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22EDFA44C(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22EDFB3A0(a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22EDFB43C(a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EDFA314(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22EDFB43C(a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22EDFB43C(a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EDFA314(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22EDFB43C(a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22EDFB43C(a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22EDFB43C(a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22EDFB43C(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22EDFB43C(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EDFBB64(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22EDEA804(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22EDEA804(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22EDFB3A0(a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22EDFB43C(a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EDFBB64(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22EDEA804(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22EDFB3A0(a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22EDFB43C(a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EDFBB64(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22EDEA804(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22EDFB3A0(a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22EDFB43C(a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EDFBC30(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22EDFB43C(a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EDFBC30(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22EDFB43C(a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EDFBC30(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22EDFB43C(a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EDFBC30(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22EDFB43C(a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EDFBC30(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22EDFB43C(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EDFBC30(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22EDFB43C(a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EDFBB64(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22EDFB43C(a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EDFBB64(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22EDEA804(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22EDFB3A0(a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22EDFB43C(a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EDFBFF4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22EDFB43C(a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EDFBFF4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22EDF615C(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22EDFB3A0(a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22EDFB43C(a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EDFBFF4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22EDFB43C(a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EDFBFF4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22EDFB43C(a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EDFBFF4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22EDEA804(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22EDFB3A0(a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22EDFB43C(a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22EDFA44C(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22EDFA314(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22EDFB3A0(a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22EDFB43C(a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22EDF615C(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22EDFB28C(a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22EDFBFF4(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22EDFB3A0(a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22EDFB43C(a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EDFB3A0(a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22EDFB43C(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22EDFB43C(a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22EDFB43C(a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22EDFABE4(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22EDFC054(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22EDFABE4(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22EDFABE4(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EDEA804(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22EDFABE4(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22EDFB43C(a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22EDFB43C(a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EDFA314(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22EDFA39C(a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22EDFB3A0(a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22EDFB43C(a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22EDEA804(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22EDFC054(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22EDFB3A0(a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22EDFB43C(a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22EDFC054(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22EDFB3A0(a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22EDFB43C(a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22EDEA804(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22EDFB3A0(a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22EDFB43C(a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22EDFB43C(a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22EDFB43C(a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EDFB3A0(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22EDFB43C(a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22EDFB3A0(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22EDFB43C(a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22EDFB3A0(a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22EDFB3A0(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22EDF615C(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22EDFB43C(a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22EDFB43C(a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22EDF9FE4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EDEA804(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EDFA274(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EDFA02C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EDFB3A0(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22EDFB43C(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22EDFA144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EDFA44C(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22EDFB3A0(a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22EDFB43C(a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22EDFA274(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EDFA314(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EDFA39C(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EDFB28C(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EDFA314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EDFA314(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22EDFA44C(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EDFA39C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) >= 3)
  {
    if (v4 == 8)
    {
      if ((~(_BYTE)v2 & 7) != 0)
        goto LABEL_15;
      v8 = v2 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 >= 3u)
        v9 = 3;
      if (v9)
LABEL_15:
        v10 = 0;
      else
        v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
      sub_22EDFB184(a1, v10);
    }
    return 1;
  }
  if ((v3 - 3) > 2)
    return 1;
  v6 = (_QWORD *)a2[2];
  if (!v6)
    return 1;
  result = sub_22EDFA44C(a1, *v6, v6 + 1);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EDFA44C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F498EB8
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22EDFA44C(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22EDEA804(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22EDEA804(a1, v23, 0);
          case 0xE:
            result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22EDFA314(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6D6C((uint64_t)&v76, v74);
            result = sub_22EDFA39C(a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22EDFB28C(a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            sub_22EDFB184(a1, *(_QWORD *)(v4 + 40));
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22EDFABE4(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_95;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22EDEA804(a1, v23, 0);
          case 0x12:
            return sub_22EDFA314(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_96;
LABEL_95:
            result = sub_22EDEA804(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_96:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22EDFABE4(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22EDFA314(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22EDFB28C(a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22EDEA804(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22EDFABE4(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22EDFA314(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22EDFA44C(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22EDFA44C(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_125;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22EDF615C(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22EDFABE4(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_125:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = (unint64_t *)(v52 + 2);
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22EDFABE4(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_130;
                }
                return 0;
              }
            }
LABEL_130:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22EDEA804(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22EDEA804(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22EDEA804(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22EDFABE4(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22EDFA44C(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F498EB8
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F498EB8
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22EDFA44C(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22EDFA44C(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22EDFB0BC(a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22EDFABE4(a1, v24);
          case 0x2E:
            sub_22EDFB184(a1, *(_QWORD *)(v4 + 32));
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22EDFB28C(a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x2F:
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 32) & 0x7FFF) != *(_DWORD *)(a1 + 8))
              return result;
            sub_22E54C570(*(unint64_t **)a1, HIWORD(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 32)));
            return 1;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22EDFABE4(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _DWORD v45[2];
  uint64_t v46;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22EDEA804(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22EDEA804(a1, v13, 0);
      case 14:
        result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        result = sub_22EDF615C(a1);
        if (!(_DWORD)result)
          return result;
        v15 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v15)
          return 1;
        v16 = v4 + 48;
        v17 = v15 - 1;
        do
        {
          result = sub_22EDFB0BC(a1, v16);
          v18 = v17-- != 0;
          v19 = v18;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while ((v19 & 1) != 0);
        return result;
      case 15:
        sub_22EDFB184(a1, *(_QWORD *)(v4 + 40));
        goto LABEL_19;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22EDEA804(a1, v13, 0);
      case 18:
        return sub_22EDFB228(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22EDEA804(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22EDFB228(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v20 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v20)
          return 1;
        v21 = v4 + 48;
        v22 = v20 - 1;
        do
        {
          result = sub_22EDFB0BC(a1, v21);
          v18 = v22-- != 0;
          v23 = v18;
          if (!(_DWORD)result)
            break;
          v21 += 24;
        }
        while ((v23 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22EDEA804(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22EDFB228(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22EDFABE4(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v24 = *(_QWORD *)(v4 + 16);
        v25 = (unsigned __int16)(v24 >> 38);
        if (!(unsigned __int16)(v24 >> 38))
          goto LABEL_82;
        v26 = 8 * v25;
        v27 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22EDEA804(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22EDEA804(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v34 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22EDFABE4(a1, v34);
          if (!(_DWORD)result)
            return result;
        }
        v35 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v35)
          return 1;
        v36 = (uint64_t *)(v4 + 48);
        v37 = 8 * v35 - 8;
        do
        {
          v38 = *v36++;
          result = sub_22EDFABE4(a1, v38);
          if ((_DWORD)result)
            v39 = v37 == 0;
          else
            v39 = 1;
          v37 -= 8;
        }
        while (!v39);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v40 = *(_DWORD *)(v4 + 20);
        v46 = *(_QWORD *)(v4 + 40);
        v45[0] = 8;
        v45[1] = v40;
        return sub_22EDFB0BC(a1, (uint64_t)v45);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        sub_22EDFB184(a1, *(_QWORD *)(v4 + 32));
        v41 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v41)
          return 1;
        v42 = v4 + 40;
        v43 = v41 - 1;
        do
        {
          result = sub_22EDFB0BC(a1, v42);
          v18 = v43-- != 0;
          v44 = v18;
          if (!(_DWORD)result)
            break;
          v42 += 24;
        }
        while ((v44 & 1) != 0);
        return result;
      case 47:
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 32) & 0x7FFF) != *(_DWORD *)(a1 + 8))
          return result;
        sub_22E54C570(*(unint64_t **)a1, HIWORD(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 32)));
        return 1;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22EDFABE4(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22EDFABE4(a1, *v27) & 1) == 0)
      return 0;
    ++v27;
    v26 -= 8;
  }
  while (v26);
  v24 = *(_QWORD *)(v4 + 16);
  v25 = (unsigned __int16)(v24 >> 38);
LABEL_82:
  if ((v24 & 0x3C0000000000000) == 0x80000000000000)
  {
    v28 = (_DWORD *)((v4 + 40 + 8 * v25 + 4 * ((v24 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v28;
    v30 = v28 + 2;
    v29 = v31;
    if (v31)
    {
      v32 = 8 * v29;
      while ((sub_22EDFABE4(a1, *v30) & 1) != 0)
      {
        ++v30;
        v32 -= 8;
        if (!v32)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v33 = sub_22F257D3C(v4);
  if (!v33)
    return 1;
  v14 = v33;
LABEL_49:
  result = sub_22EDEA804(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EDFB0BC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EDFABE4(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      sub_22EDFB184(a1, *(_QWORD *)(a2 + 8));
      result = 1;
      break;
    case 7:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22EDFB0BC(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EDFB184(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = a2;
  result = sub_22F0F08CC(&v7);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x20)
    {
      v5 = *(_DWORD *)(result + 64);
      if ((v5 & 0xFFFFF) == *(_DWORD *)(a1 + 8))
        result = (uint64_t)sub_22E54C570(*(unint64_t **)a1, v5 >> 20);
    }
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) == 6 && v6 || (a2 & 6) == 4 && v6)
    return sub_22EDFB228(a1, *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

uint64_t sub_22EDFB228(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EDFB228(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EDFABE4(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EDFB28C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22EDFA44C(a1, *v6, v6 + 1);
      else
        result = sub_22EDFABE4(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22EDFA314(a1, *v5, v5[1]), (_DWORD)result))
      {
        sub_22EDFB184(a1, *(_QWORD *)(a2 + 8));
        result = 1;
      }
      break;
    case 7:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22EDFB0BC(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EDFB3A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22EDF615C(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EDFB43C(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EDFB4C0()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EDEA804(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22EDFB47CLL);
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EDEA804(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EDFB4ACLL);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EDEA804(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB64C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EDEA804(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EDFB4ACLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22EDEA804(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EDEA804(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EDFB60CLL);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EDFB4ACLL);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EDEA804(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EDEA804(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EDFB4ACLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EDEA804(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EDFB4ACLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EDEA804(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EDFB4B0);
}

void sub_22EDFB8C4()
{
  JUMPOUT(0x22EDFB498);
}

void sub_22EDFB8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22EDEA804(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EDEA804(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EDFB60CLL);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EDEA804(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EDEA804(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EDEA804(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EDFB4ACLL);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EDEA804(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EDFB4B0);
}

uint64_t sub_22EDFB9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22EDF615C(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22EDEA804(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EDFBA78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EDFB9D8(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EDFA314(a1, v7, v8);
}

uint64_t sub_22EDFBAEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22EDFBA78(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EDFA44C(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22EDFBB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EDFB9D8(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EDFA314(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22EDFA44C(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22EDFA44C(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22EDFABE4(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EDFBC30(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EDFB9D8(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EDFA314(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22EDFA39C(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22EDFB28C(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22EDFA44C(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EDEA804(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22EDFA44C(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22EDEA804(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EDEA804(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22EDF615C(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22EDFBFF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22EDFBB64(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22EDEA804(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EDFC054(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EDEA804(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EDEA804(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EDEA804(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EDEA804(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EDEA804(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EDEA804(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EDEA804(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EDEA804(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EDEA804(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EDEA804(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EDEA804(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EDEA804(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EDEA804(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EDEA804(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EDEA804(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EDEA804(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EDEA804(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EDEA804(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EDEA804(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EDEA804(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EDEA804(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EDEA804(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EDEA804(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EDEA804(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EDFA314(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EDFA39C(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EDEA804(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EDEA804(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EDEA804(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EDEA804(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EDEA804(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EDEA804(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EDEA804(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EDEA804(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EDEA804(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EDEA804(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EDEA804(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EDEA804(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EDEA804(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EDEA804(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EDEA804(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EDEA804(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EDEA804(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EDEA804(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EDEA804(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EDEA804(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EDEA804(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EDEA804(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EDEA804(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EDEA804(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EDEA804(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EDEA804(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EDFA314(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EDFA39C(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EDEA804(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EDEA804(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EDEA804(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EDEA804(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EDEA804(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EDEA804(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EDEA804(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EDEA804(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EDEA804(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EDEA804(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EDEA804(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EDEA804(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EDFA314(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EDFA39C(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EDEA804(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EDEA804(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EDEA804(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EDEA804(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EDEA804(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EDEA804(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EDEA804(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EDEA804(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EDEA804(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EDEA804(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EDEA804(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22EDEA804(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EDFD108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22EDEA804(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22EDEA804(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

unint64_t *sub_22EDFD200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t *result;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;

  v13 = a2;
  result = (unint64_t *)sub_22F0F08CC(&v13);
  if (result)
  {
    if ((*((_DWORD *)result + 7) & 0x7F) == 0x20)
    {
      v11 = *((_DWORD *)result + 16);
      if ((v11 & 0xFFFFF) == (_DWORD)a4)
        return sub_22E54C570(a5, v11 >> 20);
    }
  }
  else
  {
    v12 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 6) == 4 && v12 || (a2 & 6) == 6 && v12)
      return (unint64_t *)sub_22EDFD2E4(a1, *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8, a3, a4, (uint64_t)a5);
  }
  return result;
}

uint64_t sub_22EDFD2E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;

  if (a2)
  {
    v9 = result;
    sub_22EDFD2E4(result, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_BYTE *)(a2 + 8) & 4) != 0)
      v10 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0;
    else
      v10 = 0;
    return sub_22EDCB2BC(v9, v10, a3, a4, a5);
  }
  return result;
}

void sub_22EDFD35C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 32 * v2), 32 * a2 - 32 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22EDFD3D4(uint64_t result, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = a2;
  v5 = result;
  v6 = (char *)a3 - (char *)a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + (((char *)a3 - (char *)a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)v5 + 24 * v7;
    do
    {
      v9 = *v4;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)v8 = v9;
      v8 += 24;
      v4 += 2;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 5);
  return result;
}

uint64_t sub_22EDFD46C(uint64_t a1)
{
  uint64_t result;

  result = sub_22EDFD4A8(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), 0, *(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t sub_22EDFD4A8(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t i;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  _BYTE *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int128 *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  void **v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char **v122;
  void *v123;
  _BYTE *v124;
  char v125[8];
  uint64_t v126;
  void *v127;
  uint64_t v128;
  unsigned int v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  void *v133[2];
  _OWORD v134[4];
  int v135;
  char v136;
  __int128 v137;
  llvm *v138[2];
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[96];
  void *v148[2];
  __int128 v149;
  int v150;
  char v151;
  char v152;
  char v153;
  char *v154;
  uint64_t v155;
  _QWORD v156[56];
  __int128 v157;
  _QWORD v158[6];

  v158[4] = *MEMORY[0x24BDAC8D0];
  v12 = (unsigned __int8 *)(a1 + 10664);
  LODWORD(v145) = 0;
  v148[0] = 0;
  LODWORD(v133[0]) = 3;
  *(_QWORD *)&v137 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v145, (int *)&v137, (__int16 *)(a1 + 1693), (uint64_t *)v148, (int *)v133);
  v13 = *(unsigned int *)(a1 + 3696);
  v14 = v13 - 2;
  v15 = *(_QWORD *)(a1 + 3688);
  v16 = *(_DWORD *)(v15 + 576 * (v13 - 2));
  if (v16 == 5)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = *(_BYTE *)(v15 + 576 * v14 + 572);
    v17 = 1;
  }
  else if (v16 == 2)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = 1;
    v17 = *(_BYTE *)(v15 + 576 * v14 + 573) != 0;
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(v15 + 576 * v13 - 4) = 0;
  }
  v18 = v15 + 576 * v13;
  *(_BYTE *)(v18 - 3) = v17;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v18 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v18 - 496));
  }
  v129 = *(_DWORD *)(a1 + 8456);
  HIDWORD(v126) = *v12;
  LODWORD(v127) = v12[1288];
  HIDWORD(v127) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v19)
    v12[1288] = 1;
  *v12 = 0;
  v20 = sub_22EDFE09C(a2);
  *(_QWORD *)v125 = *(_QWORD *)(a1 + 216);
  v21 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v119 = *(_QWORD *)(a1 + 10288);
  v120 = v21;
  LODWORD(v118) = *(_DWORD *)(a1 + 2192);
  HIDWORD(v118) = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = v20;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v22 = (__n128 *)v147;
  v145 = v147;
  v146 = 0x400000000;
  v23 = *(_QWORD *)(a2 + 184);
  v24 = *(_DWORD *)(v23 + 12);
  v25 = v24 & 0x1FFFFFFF;
  v128 = (uint64_t)v12;
  v124 = v147;
  if ((v24 & 0x1FFFFFFF) != 0)
  {
    *((_QWORD *)&v117 + 1) = a4;
    v26 = 0;
    v123 = *(void **)(a2 + 184);
    v27 = v23 + 16;
    v121 = v156;
    v122 = &v154;
    while (1)
    {
      v28 = *(_QWORD *)(v27 + 8 * v26);
      if (!*(_DWORD *)(*a5 + 32 * v26) && sub_22EFC7864(*(_QWORD *)(v27 + 8 * v26)))
      {
        v148[0] = (void *)a1;
        v148[1] = v123;
        *(_QWORD *)&v149 = a5;
        *((_QWORD *)&v149 + 1) = a6;
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = (char *)v156;
        v155 = 0x200000000;
        sub_22EDCD13C((uint64_t)v148, v26);
        sub_22EDCCC30((uint64_t)v148, 1u);
        v29 = sub_22EDC39BC((uint64_t)v148);
        if ((_DWORD)v155)
        {
          v30 = v154;
          v31 = 224 * v155;
          do
          {
            v32 = *((_QWORD *)v30 + 27);
            v33 = *(_DWORD *)v30;
            v30 += 224;
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v149 + 1) + 232) + 8 * v33) = v32;
            v31 -= 224;
          }
          while (v31);
        }
        sub_22EDCD438(&v154);
        if ((_DWORD)v29)
          goto LABEL_110;
      }
      v34 = *a5 + 32 * v26;
      if (!*(_DWORD *)v34)
        break;
      v35 = *(_OWORD *)(v34 + 16);
      v137 = *(_OWORD *)v34;
      *(_OWORD *)v138 = v35;
      if (sub_22EDFE4E4((_QWORD *)a1, v28, (uint64_t)&v137, (unsigned int *)a2, a6, a3, (uint64_t)&v145))
      {
        if ((*(_DWORD *)(v28 + 28) & 0x7F) == 0x26)
          v87 = v28;
        else
          v87 = 0;
        if ((*(_DWORD *)(v28 + 28) & 0x7F) == 0x3B)
          v88 = v28;
        else
          v88 = 0;
        if (v88)
          v89 = v88 & 0xFFFFFFFFFFFFFFF9 | 2;
        else
          v89 = v28 & 0xFFFFFFFFFFFFFFF9 | 4;
        if (v87)
          v89 = v87 & 0xFFFFFFFFFFFFFFF9;
        *(_QWORD *)(a6 + 168) = v89;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v145, v146);
        *(_QWORD *)a6 = v90;
        v29 = 7;
        goto LABEL_110;
      }
LABEL_59:
      if (++v26 == v25)
      {
        v22 = (__n128 *)v145;
        v52 = v146;
        a4 = (_QWORD *)*((_QWORD *)&v117 + 1);
        goto LABEL_64;
      }
    }
    v132 = 0;
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 33 <= 0xFFFFFFF8)
    {
      v29 = 3;
LABEL_110:
      v73 = (_BYTE *)v128;
      v91 = HIDWORD(v127);
      goto LABEL_165;
    }
    LODWORD(v148[0]) = 0;
    v148[1] = 0;
    *((_QWORD *)&v149 + 1) = 0;
    v36 = *(_QWORD *)(a2 + 16);
    v37 = v36 & 0xFFFFFFFFFFFFFFF8;
    if ((v36 & 4) != 0)
      v37 = *(_QWORD *)v37;
    LODWORD(v38) = 0;
    if (!v37)
      goto LABEL_37;
    v39 = 0;
    v40 = 0;
    if ((*(_WORD *)(v37 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD)
    {
LABEL_55:
      sub_22EBBBB24((uint64_t)&v157, a1, v40, v39 | v38, (**(_QWORD **)(a1 + 72) >> 11) & 1);
      v48 = *(_DWORD *)(a2 + 24);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      sub_22ED66E64(a1, a2, v48, HIDWORD(v49), v28, (uint64_t)&v145, &v132, (uint64_t)v133);
      *(_OWORD *)v148 = *(_OWORD *)v133;
      v149 = v134[0];
      if (LOBYTE(v158[0]))
        *(_QWORD *)(v157 + 10288) = *((_QWORD *)&v157 + 1);
      if (!LODWORD(v148[0]))
      {
        v92 = *(_QWORD *)(v27 + 8 * v26);
        if ((*(_DWORD *)(v92 + 28) & 0x7F) == 0x26)
          v93 = *(_QWORD *)(v27 + 8 * v26);
        else
          v93 = 0;
        if (v93)
        {
          v94 = v93 & 0xFFFFFFFFFFFFFFF9;
          v73 = (_BYTE *)v128;
          v91 = HIDWORD(v127);
        }
        else
        {
          if ((*(_DWORD *)(v92 + 28) & 0x7F) == 0x3B)
            v103 = *(_QWORD *)(v27 + 8 * v26);
          else
            v103 = 0;
          v73 = (_BYTE *)v128;
          v91 = HIDWORD(v127);
          if (v103)
            v94 = v103 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v94 = v92 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a6 + 168) = v94;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v145, v146);
        *(_QWORD *)a6 = v107;
        if (v132)
          v29 = 7;
        else
          v29 = 3;
        goto LABEL_165;
      }
      v50 = *(_DWORD *)(a2 + 24);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      if (sub_22ED678A8(a1, v28, (uint64_t)v148, a2, v50, HIDWORD(v51), 0, (uint64_t)&v145, 0))
      {
        v95 = *(_QWORD *)(v27 + 8 * v26);
        if ((*(_DWORD *)(v95 + 28) & 0x7F) == 0x26)
          v96 = *(_QWORD *)(v27 + 8 * v26);
        else
          v96 = 0;
        if (v96)
        {
          v97 = v96 & 0xFFFFFFFFFFFFFFF9;
          v73 = (_BYTE *)v128;
          v91 = HIDWORD(v127);
        }
        else
        {
          if ((*(_DWORD *)(v95 + 28) & 0x7F) == 0x3B)
            v104 = *(_QWORD *)(v27 + 8 * v26);
          else
            v104 = 0;
          v73 = (_BYTE *)v128;
          v91 = HIDWORD(v127);
          if (v104)
            v97 = v104 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v97 = v95 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a6 + 168) = v97;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v145, v146);
        *(_QWORD *)a6 = v108;
        v29 = 7;
        goto LABEL_165;
      }
      goto LABEL_59;
    }
    v39 = *(_QWORD *)(v37 + 64);
    if (!v39)
    {
      LODWORD(v38) = 0;
      goto LABEL_28;
    }
    if (((*(unsigned __int16 *)(v39 + 8) | (*(unsigned __int8 *)(v39 + 10) << 16)) & 0x100000) == 0)
    {
      LODWORD(v38) = 0;
      v39 = 0;
LABEL_28:
      v40 = 0;
      goto LABEL_55;
    }
    v41 = *(_QWORD *)(v37 - 48);
    v42 = v41 & 0xFFFFFFFFFFFFFFF8;
    if ((v41 & 4) != 0)
      v42 = *(_QWORD *)v42;
    LODWORD(v38) = 0;
    if (!v42)
    {
LABEL_37:
      v39 = 0;
      v40 = 0;
      goto LABEL_55;
    }
    v43 = *(_WORD *)(v42 + 8);
    v39 = 0;
    v40 = 0;
    if ((v43 & 0x7Eu) - 58 < 0xFFFFFFFC)
      goto LABEL_55;
    v44 = v43 & 0x7F;
    v45 = -40;
    if (v44 > 70)
    {
      if (v44 != 83)
      {
        if (v44 == 71)
        {
          v45 = -56;
          goto LABEL_49;
        }
        if (v44 == 81)
          goto LABEL_49;
LABEL_45:
        if ((v44 - 52) < 6)
        {
          v45 = -72;
        }
        else
        {
          v45 = -64;
          if ((v44 - 33) >= 5)
            v45 = -48;
        }
      }
    }
    else
    {
      if (v44 > 0x18)
        goto LABEL_44;
      if (v44 != 16)
      {
        if (((1 << v44) & 0x1066) != 0)
          goto LABEL_49;
        if (v44 != 24)
        {
LABEL_44:
          if (v44 == 70)
          {
            v45 = -64;
            goto LABEL_49;
          }
          goto LABEL_45;
        }
      }
      v45 = -48;
    }
LABEL_49:
    v46 = *(_QWORD *)(v42 + v45 + 16);
    v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
    if ((v46 & 4) != 0)
      v47 = (_QWORD *)*v47;
    if (v47)
      v40 = (uint64_t)(v47 - 8);
    else
      v40 = 0;
    v38 = sub_22E46BB88(v42 - 72);
    v39 = v38 & 0xFFFFFFFF00000000;
    goto LABEL_55;
  }
  v52 = 0;
LABEL_64:
  sub_22EFEB554(*(_QWORD *)(a1 + 88), v22, v52);
  *(_QWORD *)a6 = v53;
  *(_QWORD *)&v137 = a1;
  *((_QWORD *)&v137 + 1) = 1;
  for (i = 2; i != 10; i += 2)
    v138[i - 2] = (llvm *)-4096;
  v139 = &v141;
  v140 = 0x100000000;
  v142 = *(_QWORD *)(a1 + 12024);
  v143 = 0;
  v144 = 0;
  *(_QWORD *)(a1 + 12024) = &v137;
  v55 = *(_QWORD *)(a2 + 152);
  v56 = (int *)(v55 & 0xFFFFFFFFFFFFFFF8);
  if ((v55 & 4) != 0 && v56)
  {
    do
    {
      v57 = *(_QWORD *)(*(_QWORD *)v56 + 152);
      v56 = (int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v57 & 4) != 0 && v56);
  }
  v58 = *(uint64_t **)(a2 + 192);
  v148[0] = &v149;
  v59 = *v58;
  v148[1] = (void *)0x800000000;
  v156[26] = v59;
  v60 = (uint64_t)(v58 + 2);
  v61 = *((unsigned int *)v58 + 2);
  v133[0] = v134;
  v133[1] = (void *)0x400000000;
  v135 = 0;
  v136 = 0;
  sub_22E9F7044((uint64_t)v133, v53);
  v62 = sub_22EE09D78(a1, v60, v61, (uint64_t)v133);
  if (v133[0] != v134)
    free(v133[0]);
  if (!v62)
  {
    v132 = 0;
    v133[0] = v134;
    v133[1] = (void *)0x400000000;
    if (sub_22ED61988((_QWORD *)a1, v56, *(_DWORD *)(a2 + 24), (uint64_t)v148, 0, (uint64_t)v133, 1, &v132))
    {
      if (v132)
        v29 = 15;
      else
        v29 = 7;
    }
    else
    {
      v78 = *((_QWORD *)v56 + 7);
      v79 = *(_DWORD *)(v78 + 12) & 0x1FFFFFFF;
      if ((_DWORD)v79)
      {
        v80 = 0;
        v81 = (uint64_t *)(v78 + 16);
        v82 = 24 * v79;
        while (1)
        {
          v83 = *(_QWORD *)((char *)v133[0] + v80 + 16);
          v157 = *(_OWORD *)((char *)v133[0] + v80);
          v158[0] = v83;
          v84 = *(_QWORD *)(a1 + 88);
          v85 = (__int128 *)(*a4 + v80);
          v86 = *((_QWORD *)v85 + 2);
          v130 = *v85;
          v131 = v86;
          if ((sub_22EDFE10C(v84, (uint64_t)&v130, (int *)&v157, 0, v74, v75, v76, v77, v117, v118, v119, v120, (uint64_t)v121, (int)v122, (uint64_t)v123, (uint64_t)v124, v125[0], v126, v127,
                  v128) & 1) == 0)
            break;
          v80 += 24;
          ++v81;
          if (v82 == v80)
            goto LABEL_95;
        }
        v100 = *v81;
        if ((*(_DWORD *)(*v81 + 28) & 0x7F) == 0x26)
          v101 = *v81;
        else
          v101 = 0;
        if (v101)
        {
          v102 = v101 & 0xFFFFFFFFFFFFFFF9;
          v73 = (_BYTE *)v128;
        }
        else
        {
          if ((*(_DWORD *)(*v81 + 28) & 0x7F) == 0x3B)
            v106 = *v81;
          else
            v106 = 0;
          v73 = (_BYTE *)v128;
          if (v106)
            v102 = v106 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v102 = v100 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a6 + 168) = v102;
        v112 = (__int128 *)(*a4 + v80);
        v113 = *v112;
        *(_QWORD *)(a6 + 192) = *((_QWORD *)v112 + 2);
        *(_OWORD *)(a6 + 176) = v113;
        *(_OWORD *)(a6 + 200) = v157;
        *(_QWORD *)(a6 + 216) = v158[0];
        v29 = 10;
        goto LABEL_143;
      }
LABEL_95:
      if (*(_DWORD *)(a1 + 8456) <= v129)
      {
        v98 = (__n128 *)v145;
        v99 = v146;
        *(_QWORD *)&v157 = v158;
        *((_QWORD *)&v157 + 1) = 0x300000000;
        sub_22EFE9164(*(_QWORD *)(a2 + 184), (uint64_t)&v157);
        if ((sub_22E9F3578(a1, a2, (unsigned __int8 **)v157, DWORD2(v157), v98, v99, *(unsigned int *)(a6 + 8) | ((unint64_t)*(unsigned int *)(a6 + 8) << 32), a6 + 312) & 1) != 0|| !*(_BYTE *)(a6 + 440))
        {
          sub_22EFEB554(*(_QWORD *)(a1 + 88), v98, v99);
          *(_QWORD *)a6 = v105;
          v29 = 15;
        }
        else
        {
          v29 = 0;
        }
        if ((_QWORD *)v157 != v158)
          free((void *)v157);
      }
      else
      {
        v29 = 7;
      }
    }
    v73 = (_BYTE *)v128;
LABEL_143:
    if (v133[0] != v134)
      free(v133[0]);
    goto LABEL_145;
  }
  v63 = LODWORD(v148[1]);
  v64 = *(_QWORD *)(a2 + 184);
  v65 = *(_DWORD *)(v64 + 12) & 0x1FFFFFFF;
  if (LODWORD(v148[1]) >= v65)
    v66 = v65 - 1;
  else
    v66 = v148[1];
  v67 = *(_QWORD *)(v64 + 8 * v66 + 16);
  if ((*(_DWORD *)(v67 + 28) & 0x7F) == 0x26)
    v68 = v67;
  else
    v68 = 0;
  if ((*(_DWORD *)(v67 + 28) & 0x7F) == 0x3B)
    v69 = v67;
  else
    v69 = 0;
  v70 = v67 & 0xFFFFFFFFFFFFFFF9 | 4;
  if (v69)
    v70 = v69 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v68)
    v70 = v68 & 0xFFFFFFFFFFFFFFF9;
  *(_QWORD *)(a6 + 168) = v70;
  v71 = v60 + 32 * v63;
  v72 = *(_OWORD *)v71;
  *(_QWORD *)(a6 + 192) = *(_QWORD *)(v71 + 16);
  *(_OWORD *)(a6 + 176) = v72;
  v29 = 7;
  v73 = (_BYTE *)v128;
LABEL_145:
  if (v148[0] != &v149)
    free(v148[0]);
  if (!(_BYTE)v143)
  {
    if ((_DWORD)v140)
    {
      v114 = 0;
      v115 = 8 * v140;
      v73 = (_BYTE *)v128;
      do
      {
        v116 = *(void ***)((char *)v139 + v114);
        if (v116)
        {
          if (*v116 != v116 + 2)
            free(*v116);
          MEMORY[0x2348A0E9C](v116, 0x1080C40ED926357);
        }
        v114 += 8;
      }
      while (v115 != v114);
    }
    *(_QWORD *)(v137 + 12024) = v142;
    LOBYTE(v143) = 1;
  }
  if (v139 != &v141)
    free(v139);
  v91 = HIDWORD(v127);
  if ((BYTE8(v137) & 1) == 0)
    llvm::deallocate_buffer(v138[0], (void *)(16 * LODWORD(v138[1])));
LABEL_165:
  if (v145 != v124)
    free(v145);
  if (*(_QWORD *)v125)
  {
    *(_QWORD *)(a1 + 216) = *(_QWORD *)v125;
    *(_QWORD *)(a1 + 3200) = v120;
    *(_QWORD *)(a1 + 10288) = v119;
    *(_DWORD *)(a1 + 1944) = HIDWORD(v118);
    *(_DWORD *)(a1 + 2192) = v118;
  }
  *(_DWORD *)(a1 + 8456) = v129;
  v73[1288] = (_BYTE)v127;
  *v73 = BYTE4(v126);
  v109 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v109 + 180) == 5)
    *(_BYTE *)(v109 + 170) = 1;
  if (v91)
    v110 = 3;
  else
    v110 = 0;
  *(_DWORD *)(v109 + 180) = v110;
  sub_22EB48E64(a1);
  return v29;
}

unint64_t sub_22EDFE09C(uint64_t a1)
{
  unsigned int v1;
  unint64_t result;
  BOOL v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v1 <= 0x39 && ((1 << v1) & 0x3F0003E01011066) != 0)
    return sub_22EFCAE04(a1);
  v4 = v1 - 70 > 0xD || ((1 << (v1 - 70)) & 0x2803) == 0;
  if (!v4 || v1 - 19 <= 4)
    return sub_22EFCAE04(a1);
  v5 = *(_QWORD *)(a1 + 16);
  result = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_22EDFE10C(int a1, uint64_t a2, int *a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20)
{
  int v22;
  int v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v22 = *(_DWORD *)a2;
  if (a4)
  {
    if (v22 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      {
        v22 = 1;
        goto LABEL_14;
      }
    }
    else if (v22 == 7)
    {
      if (**(unsigned __int8 **)(a2 + 8) != 213)
      {
        v22 = 7;
        goto LABEL_14;
      }
    }
    else if (((1 << v22) & 0x13D) != 0)
    {
      goto LABEL_14;
    }
    v23 = *a3;
    if (*a3 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        goto LABEL_14;
      goto LABEL_12;
    }
    if (v23 == 7)
    {
      if (**((unsigned __int8 **)a3 + 1) == 213)
        goto LABEL_14;
      goto LABEL_12;
    }
    if (((1 << v23) & 0x13D) != 0)
    {
LABEL_12:
      sub_22F401DC4((int *)a2, (uint64_t)&v25);
      *(_OWORD *)a2 = v25;
      *(_QWORD *)(a2 + 16) = v26;
      v22 = *(_DWORD *)a2;
    }
  }
LABEL_14:
  if (v22 == *a3)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_22EDFE4E4(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  llvm *v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  __int128 v64;
  __int128 v65;
  int32x2_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  void *v72[2];
  _QWORD v73[8];
  int v74;
  char v75;
  __int128 v76;
  llvm *v77;
  unsigned int v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD v87[8];

  v13 = a1;
  v87[6] = *MEMORY[0x24BDAC8D0];
  v71 = a2;
  if (*(_DWORD *)a3 == 8)
  {
    v85 = (char *)v87;
    v86 = 0x200000000;
    v14 = *(unsigned int *)(a3 + 4);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = *(__int128 **)(a3 + 8);
      v17 = 24 * v14;
      v18 = 1;
      do
      {
        if (!*(_DWORD *)v16)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x12B0u, 0, (uint64_t)&v76);
          sub_22F3483C8((uint64_t)&v76, a3);
          sub_22E890024((uint64_t)&v76, &v71);
          sub_22E903BEC((unsigned int *)&v76);
          v18 = 1;
          goto LABEL_56;
        }
        v19 = *(_BYTE *)(a3 + 24);
        v20 = *((_QWORD *)v16 + 2);
        v68 = *v16;
        v69 = v20;
        v70 = v19;
        v21 = sub_22EDC0108((uint64_t)a1, (uint64_t)&v68, *(_DWORD *)(a5 + 8), (uint64_t)&v76);
        v22 = a4[6];
        v23 = (*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)a4 + 16))(a4, v21);
        if (v70)
          v24 = 2;
        else
          v24 = 1;
        if (!a6)
          v24 = 0;
        if ((sub_22ED678A8(a1, a2, &v76, a4, v22, HIDWORD(v23), v15, a7, v24) & 1) != 0)
          goto LABEL_56;
        v25 = *(_DWORD *)(a7 + 8);
        v26 = *(_QWORD *)a7 + 24 * v25;
        v27 = *(llvm **)(v26 - 8);
        v76 = *(_OWORD *)(v26 - 24);
        v77 = v27;
        *(_DWORD *)(a7 + 8) = v25 - 1;
        v28 = sub_22E4EF088((uint64_t)&v85, (unint64_t)&v76, 1);
        v29 = &v85[24 * v86];
        v30 = *(_OWORD *)v28;
        *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + 16);
        *(_OWORD *)v29 = v30;
        v15 = (v86 + 1);
        LODWORD(v86) = v86 + 1;
        v16 = (__int128 *)((char *)v16 + 24);
        v17 -= 24;
      }
      while (v17);
      v13 = a1;
      if ((_DWORD)v15)
        goto LABEL_51;
    }
    *(_QWORD *)&v76 = v13;
    *((_QWORD *)&v76 + 1) = 1;
    for (i = 16; i != 80; i += 16)
      *(_QWORD *)((char *)&v76 + i) = -4096;
    v79 = &v81;
    v80 = 0x100000000;
    v82 = v13[1503];
    v83 = 0;
    v84 = 0;
    v13[1503] = &v76;
    v32 = *(_QWORD *)a7;
    v33 = *(unsigned int *)(a7 + 8);
    v72[0] = v73;
    v74 = 0;
    v75 = 0;
    v73[0] = v32;
    v73[1] = v33;
    v34 = *(_DWORD *)(a2 + 28) & 0x7F;
    v72[1] = (void *)0x400000001;
    if (a2 && v34 == 59)
    {
      v35 = a4[6];
      v36 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 16))(a4);
      sub_22EE00E90(&v66, (uint64_t)a1, 5, v35, v36, a2, (uint64_t)a4, v37, v32, v33, 0);
      if (!v67
        && (unint64_t)sub_22EE08D2C(a1, *(_QWORD *)(a2 + 48), v72, *(unsigned int *)(a2 + 24), *(_QWORD *)(a2 + 40)) >= 0x10)
      {
        goto LABEL_40;
      }
    }
    else
    {
      if (!a2 || v34 != 32)
        goto LABEL_41;
      v43 = a4[6];
      v44 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 16))(a4);
      sub_22EE00E90(&v66, (uint64_t)a1, 5, v43, v44, a2, (uint64_t)a4, v45, v32, v33, 0);
      if (!v67 && sub_22EE43BF4(a1, a2, a1[27], v72))
      {
LABEL_40:
        sub_22EE014E4(&v66);
LABEL_41:
        if (v72[0] != v73)
          free(v72[0]);
        if (!(_BYTE)v83)
        {
          if ((_DWORD)v80)
          {
            v58 = 0;
            v59 = 8 * v80;
            do
            {
              v60 = *(void ***)((char *)v79 + v58);
              if (v60)
              {
                if (*v60 != v60 + 2)
                  free(*v60);
                MEMORY[0x2348A0E9C](v60, 0x1080C40ED926357);
              }
              v58 += 8;
            }
            while (v59 != v58);
          }
          *(_QWORD *)(v76 + 12024) = v82;
          LOBYTE(v83) = 1;
        }
        if (v79 != &v81)
          free(v79);
        v13 = a1;
        if ((BYTE8(v76) & 1) == 0)
          llvm::deallocate_buffer(v77, (void *)(16 * v78));
        LODWORD(v15) = v86;
        if ((_DWORD)v86)
        {
LABEL_51:
          v46 = v85;
          v47 = sub_22E3CD3D4(v13[11] + 2032, 24 * v15, 3);
          v48 = 0;
          do
          {
            v49 = v47 + v48;
            v50 = *(_OWORD *)&v46[v48];
            *(_QWORD *)(v49 + 16) = *(_QWORD *)&v46[v48 + 16];
            *(_OWORD *)v49 = v50;
            v48 += 24;
          }
          while (24 * v15 != v48);
        }
        else
        {
          v47 = 0;
        }
        *((_QWORD *)&v76 + 1) = v47;
        LODWORD(v76) = 8;
        DWORD1(v76) = v15;
        v51 = sub_22E4EF088(a7, (unint64_t)&v76, 1);
        v18 = 0;
        v52 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 8);
        v53 = *(_OWORD *)v51;
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(v51 + 16);
        *(_OWORD *)v52 = v53;
        ++*(_DWORD *)(a7 + 8);
        goto LABEL_56;
      }
    }
    sub_22EE014E4(&v66);
    if (v72[0] != v73)
      free(v72[0]);
    if (!(_BYTE)v83)
    {
      if ((_DWORD)v80)
      {
        v55 = 0;
        v56 = 8 * v80;
        do
        {
          v57 = *(void ***)((char *)v79 + v55);
          if (v57)
          {
            if (*v57 != v57 + 2)
              free(*v57);
            MEMORY[0x2348A0E9C](v57, 0x1080C40ED926357);
          }
          v55 += 8;
        }
        while (v56 != v55);
      }
      *(_QWORD *)(v76 + 12024) = v82;
      LOBYTE(v83) = 1;
    }
    if (v79 != &v81)
      free(v79);
    if ((BYTE8(v76) & 1) == 0)
      llvm::deallocate_buffer(v77, (void *)(16 * v78));
    v18 = 1;
LABEL_56:
    if (v85 != (char *)v87)
      free(v85);
    return v18;
  }
  v38 = *(_OWORD *)(a3 + 16);
  v64 = *(_OWORD *)a3;
  v65 = v38;
  v39 = sub_22EDC0108((uint64_t)a1, (uint64_t)&v64, *(_DWORD *)(a5 + 8), (uint64_t)&v76);
  v40 = a4[6];
  v41 = (*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)a4 + 16))(a4, v39);
  if (BYTE8(v65))
    v42 = 2;
  else
    v42 = 1;
  if (!a6)
    v42 = 0;
  return sub_22ED678A8(v13, a2, &v76, a4, v40, HIDWORD(v41), 0, a7, v42);
}

uint64_t sub_22EDFEB50(uint64_t a1)
{
  uint64_t result;

  result = sub_22EDFEB8C(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), 0, *(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t sub_22EDFEB8C(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t i;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 *v70;
  __int128 v71;
  _BYTE *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  __n128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  __int128 *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char **v122;
  void *v123;
  _BYTE *v124;
  char v125[8];
  uint64_t v126;
  void *v127;
  uint64_t v128;
  unsigned int v129;
  __int128 v130;
  uint64_t v131;
  char v132;
  void *v133[2];
  _OWORD v134[4];
  int v135;
  char v136;
  __int128 v137;
  llvm *v138[2];
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[96];
  void *v148[2];
  __int128 v149;
  int v150;
  char v151;
  char v152;
  char v153;
  char *v154;
  uint64_t v155;
  _QWORD v156[56];
  __int128 v157;
  _QWORD v158[6];

  v158[4] = *MEMORY[0x24BDAC8D0];
  v12 = (unsigned __int8 *)(a1 + 10664);
  LODWORD(v145) = 0;
  v148[0] = 0;
  LODWORD(v133[0]) = 3;
  *(_QWORD *)&v137 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v145, (int *)&v137, (__int16 *)(a1 + 1693), (uint64_t *)v148, (int *)v133);
  v13 = *(unsigned int *)(a1 + 3696);
  v14 = v13 - 2;
  v15 = *(_QWORD *)(a1 + 3688);
  v16 = *(_DWORD *)(v15 + 576 * (v13 - 2));
  if (v16 == 5)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = *(_BYTE *)(v15 + 576 * v14 + 572);
    v17 = 1;
  }
  else if (v16 == 2)
  {
    *(_BYTE *)(v15 + 576 * v13 - 4) = 1;
    v17 = *(_BYTE *)(v15 + 576 * v14 + 573) != 0;
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(v15 + 576 * v13 - 4) = 0;
  }
  v18 = v15 + 576 * v13;
  *(_BYTE *)(v18 - 3) = v17;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v18 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v18 - 496));
  }
  v129 = *(_DWORD *)(a1 + 8456);
  HIDWORD(v126) = *v12;
  LODWORD(v127) = v12[1288];
  HIDWORD(v127) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v19)
    v12[1288] = 1;
  *v12 = 0;
  v20 = sub_22EDFE09C(a2);
  *(_QWORD *)v125 = *(_QWORD *)(a1 + 216);
  v21 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v119 = *(_QWORD *)(a1 + 10288);
  v120 = v21;
  LODWORD(v118) = *(_DWORD *)(a1 + 2192);
  HIDWORD(v118) = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = v20;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v22 = (__n128 *)v147;
  v145 = v147;
  v146 = 0x400000000;
  v23 = *(_QWORD *)(a2 + 424);
  v24 = *(_DWORD *)(v23 + 12);
  v25 = v24 & 0x1FFFFFFF;
  v128 = (uint64_t)v12;
  v124 = v147;
  if ((v24 & 0x1FFFFFFF) != 0)
  {
    *((_QWORD *)&v117 + 1) = a4;
    v26 = 0;
    v123 = *(void **)(a2 + 424);
    v27 = v23 + 16;
    v121 = v156;
    v122 = &v154;
    while (1)
    {
      v28 = *(_QWORD *)(v27 + 8 * v26);
      if (!*(_DWORD *)(*a5 + 32 * v26) && sub_22EFC7864(*(_QWORD *)(v27 + 8 * v26)))
      {
        v148[0] = (void *)a1;
        v148[1] = v123;
        *(_QWORD *)&v149 = a5;
        *((_QWORD *)&v149 + 1) = a6;
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = (char *)v156;
        v155 = 0x200000000;
        sub_22EDCD13C((uint64_t)v148, v26);
        sub_22EDCCC30((uint64_t)v148, 1u);
        v29 = sub_22EDC39BC((uint64_t)v148);
        if ((_DWORD)v155)
        {
          v30 = v154;
          v31 = 224 * v155;
          do
          {
            v32 = *((_QWORD *)v30 + 27);
            v33 = *(_DWORD *)v30;
            v30 += 224;
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v149 + 1) + 232) + 8 * v33) = v32;
            v31 -= 224;
          }
          while (v31);
        }
        sub_22EDCD438(&v154);
        if ((_DWORD)v29)
          goto LABEL_108;
      }
      v34 = *a5 + 32 * v26;
      if (!*(_DWORD *)v34)
        break;
      v35 = *(_OWORD *)(v34 + 16);
      v137 = *(_OWORD *)v34;
      *(_OWORD *)v138 = v35;
      if (sub_22EDFE4E4((_QWORD *)a1, v28, (uint64_t)&v137, (unsigned int *)a2, a6, a3, (uint64_t)&v145))
      {
        if ((*(_DWORD *)(v28 + 28) & 0x7F) == 0x26)
          v86 = v28;
        else
          v86 = 0;
        if ((*(_DWORD *)(v28 + 28) & 0x7F) == 0x3B)
          v87 = v28;
        else
          v87 = 0;
        if (v87)
          v88 = v87 & 0xFFFFFFFFFFFFFFF9 | 2;
        else
          v88 = v28 & 0xFFFFFFFFFFFFFFF9 | 4;
        if (v86)
          v88 = v86 & 0xFFFFFFFFFFFFFFF9;
        *(_QWORD *)(a6 + 168) = v88;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v145, v146);
        *(_QWORD *)a6 = v89;
        v29 = 7;
        goto LABEL_108;
      }
LABEL_59:
      if (++v26 == v25)
      {
        v22 = (__n128 *)v145;
        v52 = v146;
        a4 = (_QWORD *)*((_QWORD *)&v117 + 1);
        goto LABEL_64;
      }
    }
    v132 = 0;
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 33 <= 0xFFFFFFF8)
    {
      v29 = 3;
LABEL_108:
      v72 = (_BYTE *)v128;
      v90 = HIDWORD(v127);
      goto LABEL_163;
    }
    LODWORD(v148[0]) = 0;
    v148[1] = 0;
    *((_QWORD *)&v149 + 1) = 0;
    v36 = *(_QWORD *)(a2 + 16);
    v37 = v36 & 0xFFFFFFFFFFFFFFF8;
    if ((v36 & 4) != 0)
      v37 = *(_QWORD *)v37;
    LODWORD(v38) = 0;
    if (!v37)
      goto LABEL_37;
    v39 = 0;
    v40 = 0;
    if ((*(_WORD *)(v37 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD)
    {
LABEL_55:
      sub_22EBBBB24((uint64_t)&v157, a1, v40, v39 | v38, (**(_QWORD **)(a1 + 72) >> 11) & 1);
      v48 = *(_DWORD *)(a2 + 24);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      sub_22ED66E64(a1, a2, v48, HIDWORD(v49), v28, (uint64_t)&v145, &v132, (uint64_t)v133);
      *(_OWORD *)v148 = *(_OWORD *)v133;
      v149 = v134[0];
      if (LOBYTE(v158[0]))
        *(_QWORD *)(v157 + 10288) = *((_QWORD *)&v157 + 1);
      if (!LODWORD(v148[0]))
      {
        v91 = *(_QWORD *)(v27 + 8 * v26);
        if ((*(_DWORD *)(v91 + 28) & 0x7F) == 0x26)
          v92 = *(_QWORD *)(v27 + 8 * v26);
        else
          v92 = 0;
        if (v92)
        {
          v93 = v92 & 0xFFFFFFFFFFFFFFF9;
          v72 = (_BYTE *)v128;
          v90 = HIDWORD(v127);
        }
        else
        {
          if ((*(_DWORD *)(v91 + 28) & 0x7F) == 0x3B)
            v102 = *(_QWORD *)(v27 + 8 * v26);
          else
            v102 = 0;
          v72 = (_BYTE *)v128;
          v90 = HIDWORD(v127);
          if (v102)
            v93 = v102 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v93 = v91 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a6 + 168) = v93;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v145, v146);
        *(_QWORD *)a6 = v106;
        if (v132)
          v29 = 7;
        else
          v29 = 3;
        goto LABEL_163;
      }
      v50 = *(_DWORD *)(a2 + 24);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      if (sub_22ED678A8(a1, v28, (uint64_t)v148, a2, v50, HIDWORD(v51), 0, (uint64_t)&v145, 0))
      {
        v94 = *(_QWORD *)(v27 + 8 * v26);
        if ((*(_DWORD *)(v94 + 28) & 0x7F) == 0x26)
          v95 = *(_QWORD *)(v27 + 8 * v26);
        else
          v95 = 0;
        if (v95)
        {
          v96 = v95 & 0xFFFFFFFFFFFFFFF9;
          v72 = (_BYTE *)v128;
          v90 = HIDWORD(v127);
        }
        else
        {
          if ((*(_DWORD *)(v94 + 28) & 0x7F) == 0x3B)
            v103 = *(_QWORD *)(v27 + 8 * v26);
          else
            v103 = 0;
          v72 = (_BYTE *)v128;
          v90 = HIDWORD(v127);
          if (v103)
            v96 = v103 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v96 = v94 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a6 + 168) = v96;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v145, v146);
        *(_QWORD *)a6 = v107;
        v29 = 7;
        goto LABEL_163;
      }
      goto LABEL_59;
    }
    v39 = *(_QWORD *)(v37 + 64);
    if (!v39)
    {
      LODWORD(v38) = 0;
      goto LABEL_28;
    }
    if (((*(unsigned __int16 *)(v39 + 8) | (*(unsigned __int8 *)(v39 + 10) << 16)) & 0x100000) == 0)
    {
      LODWORD(v38) = 0;
      v39 = 0;
LABEL_28:
      v40 = 0;
      goto LABEL_55;
    }
    v41 = *(_QWORD *)(v37 - 48);
    v42 = v41 & 0xFFFFFFFFFFFFFFF8;
    if ((v41 & 4) != 0)
      v42 = *(_QWORD *)v42;
    LODWORD(v38) = 0;
    if (!v42)
    {
LABEL_37:
      v39 = 0;
      v40 = 0;
      goto LABEL_55;
    }
    v43 = *(_WORD *)(v42 + 8);
    v39 = 0;
    v40 = 0;
    if ((v43 & 0x7Eu) - 58 < 0xFFFFFFFC)
      goto LABEL_55;
    v44 = v43 & 0x7F;
    v45 = -40;
    if (v44 > 70)
    {
      if (v44 != 83)
      {
        if (v44 == 71)
        {
          v45 = -56;
          goto LABEL_49;
        }
        if (v44 == 81)
          goto LABEL_49;
LABEL_45:
        if ((v44 - 52) < 6)
        {
          v45 = -72;
        }
        else
        {
          v45 = -64;
          if ((v44 - 33) >= 5)
            v45 = -48;
        }
      }
    }
    else
    {
      if (v44 > 0x18)
        goto LABEL_44;
      if (v44 != 16)
      {
        if (((1 << v44) & 0x1066) != 0)
          goto LABEL_49;
        if (v44 != 24)
        {
LABEL_44:
          if (v44 == 70)
          {
            v45 = -64;
            goto LABEL_49;
          }
          goto LABEL_45;
        }
      }
      v45 = -48;
    }
LABEL_49:
    v46 = *(_QWORD *)(v42 + v45 + 16);
    v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
    if ((v46 & 4) != 0)
      v47 = (_QWORD *)*v47;
    if (v47)
      v40 = (uint64_t)(v47 - 8);
    else
      v40 = 0;
    v38 = sub_22E46BB88(v42 - 72);
    v39 = v38 & 0xFFFFFFFF00000000;
    goto LABEL_55;
  }
  v52 = 0;
LABEL_64:
  sub_22EFEB554(*(_QWORD *)(a1 + 88), v22, v52);
  *(_QWORD *)a6 = v53;
  *(_QWORD *)&v137 = a1;
  *((_QWORD *)&v137 + 1) = 1;
  for (i = 2; i != 10; i += 2)
    v138[i - 2] = (llvm *)-4096;
  v139 = &v141;
  v140 = 0x100000000;
  v142 = *(_QWORD *)(a1 + 12024);
  v143 = 0;
  v144 = 0;
  *(_QWORD *)(a1 + 12024) = &v137;
  v55 = *(_QWORD *)(a2 + 112);
  v56 = (_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8);
  if ((v55 & 4) != 0 && v56)
  {
    do
    {
      v116 = *(_QWORD *)(*v56 + 112);
      v56 = (_QWORD *)(v116 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v116 & 4) != 0 && v56);
  }
  v57 = *(uint64_t **)(a2 + 432);
  v148[0] = &v149;
  v58 = *v57;
  v148[1] = (void *)0x800000000;
  v156[26] = v58;
  v59 = v57 + 2;
  v60 = *((unsigned int *)v57 + 2);
  v133[0] = v134;
  v133[1] = (void *)0x400000000;
  v135 = 0;
  v136 = 0;
  sub_22E9F7044((uint64_t)v133, v53);
  v61 = sub_22EE09D78(a1, v59, v60, v133, v148);
  if (v133[0] != v134)
    free(v133[0]);
  if (!v61)
  {
    v132 = 0;
    v133[0] = v134;
    v133[1] = (void *)0x400000000;
    if (sub_22ED61988(a1, v56, *(unsigned int *)(a2 + 24), v148, 0, v133, 1, &v132))
    {
      if (v132)
        v29 = 15;
      else
        v29 = 7;
    }
    else
    {
      v77 = v56[7];
      v78 = *(_DWORD *)(v77 + 12) & 0x1FFFFFFF;
      if ((_DWORD)v78)
      {
        v79 = 0;
        v80 = (uint64_t *)(v77 + 16);
        v81 = 24 * v78;
        while (1)
        {
          v82 = *(_QWORD *)((char *)v133[0] + v79 + 16);
          v157 = *(_OWORD *)((char *)v133[0] + v79);
          v158[0] = v82;
          v83 = *(_QWORD *)(a1 + 88);
          v84 = (__int128 *)(*a4 + v79);
          v85 = *((_QWORD *)v84 + 2);
          v130 = *v84;
          v131 = v85;
          if ((sub_22EDFE10C(v83, (uint64_t)&v130, (int *)&v157, 0, v73, v74, v75, v76, v117, v118, v119, v120, (uint64_t)v121, (int)v122, (uint64_t)v123, (uint64_t)v124, v125[0], v126, v127,
                  v128) & 1) == 0)
            break;
          v79 += 24;
          ++v80;
          if (v81 == v79)
            goto LABEL_93;
        }
        v99 = *v80;
        if ((*(_DWORD *)(*v80 + 28) & 0x7F) == 0x26)
          v100 = *v80;
        else
          v100 = 0;
        if (v100)
        {
          v101 = v100 & 0xFFFFFFFFFFFFFFF9;
          v72 = (_BYTE *)v128;
        }
        else
        {
          if ((*(_DWORD *)(*v80 + 28) & 0x7F) == 0x3B)
            v105 = *v80;
          else
            v105 = 0;
          v72 = (_BYTE *)v128;
          if (v105)
            v101 = v105 & 0xFFFFFFFFFFFFFFF9 | 2;
          else
            v101 = v99 & 0xFFFFFFFFFFFFFFF9 | 4;
        }
        *(_QWORD *)(a6 + 168) = v101;
        v111 = (__int128 *)(*a4 + v79);
        v112 = *v111;
        *(_QWORD *)(a6 + 192) = *((_QWORD *)v111 + 2);
        *(_OWORD *)(a6 + 176) = v112;
        *(_OWORD *)(a6 + 200) = v157;
        *(_QWORD *)(a6 + 216) = v158[0];
        v29 = 10;
        goto LABEL_141;
      }
LABEL_93:
      if (*(_DWORD *)(a1 + 8456) <= v129)
      {
        v97 = (__n128 *)v145;
        v98 = v146;
        *(_QWORD *)&v157 = v158;
        *((_QWORD *)&v157 + 1) = 0x300000000;
        sub_22EFE9164(*(_QWORD *)(a2 + 424), (uint64_t)&v157);
        if ((sub_22E9F3578(a1, a2, v157, DWORD2(v157), v97, v98, *(unsigned int *)(a6 + 8) | ((unint64_t)*(unsigned int *)(a6 + 8) << 32), a6 + 312) & 1) != 0|| !*(_BYTE *)(a6 + 440))
        {
          sub_22EFEB554(*(_QWORD *)(a1 + 88), v97, v98);
          *(_QWORD *)a6 = v104;
          v29 = 15;
        }
        else
        {
          v29 = 0;
        }
        if ((_QWORD *)v157 != v158)
          free((void *)v157);
      }
      else
      {
        v29 = 7;
      }
    }
    v72 = (_BYTE *)v128;
LABEL_141:
    if (v133[0] != v134)
      free(v133[0]);
    goto LABEL_143;
  }
  v62 = LODWORD(v148[1]);
  v63 = *(_QWORD *)(a2 + 424);
  v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
  if (LODWORD(v148[1]) >= v64)
    v65 = v64 - 1;
  else
    v65 = v148[1];
  v66 = *(_QWORD *)(v63 + 8 * v65 + 16);
  if ((*(_DWORD *)(v66 + 28) & 0x7F) == 0x26)
    v67 = v66;
  else
    v67 = 0;
  if ((*(_DWORD *)(v66 + 28) & 0x7F) == 0x3B)
    v68 = v66;
  else
    v68 = 0;
  v69 = v66 & 0xFFFFFFFFFFFFFFF9 | 4;
  if (v68)
    v69 = v68 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v67)
    v69 = v67 & 0xFFFFFFFFFFFFFFF9;
  *(_QWORD *)(a6 + 168) = v69;
  v70 = (__int128 *)&v59[4 * v62];
  v71 = *v70;
  *(_QWORD *)(a6 + 192) = *((_QWORD *)v70 + 2);
  *(_OWORD *)(a6 + 176) = v71;
  v29 = 7;
  v72 = (_BYTE *)v128;
LABEL_143:
  if (v148[0] != &v149)
    free(v148[0]);
  if (!(_BYTE)v143)
  {
    if ((_DWORD)v140)
    {
      v113 = 0;
      v114 = 8 * v140;
      do
      {
        v115 = *(void ***)((char *)v139 + v113);
        if (v115)
        {
          if (*v115 != v115 + 2)
            free(*v115);
          MEMORY[0x2348A0E9C](v115, 0x1080C40ED926357);
        }
        v113 += 8;
      }
      while (v114 != v113);
    }
    *(_QWORD *)(v137 + 12024) = v142;
    LOBYTE(v143) = 1;
  }
  if (v139 != &v141)
    free(v139);
  v90 = HIDWORD(v127);
  if ((BYTE8(v137) & 1) == 0)
    llvm::deallocate_buffer(v138[0], (void *)(16 * LODWORD(v138[1])));
LABEL_163:
  if (v145 != v124)
    free(v145);
  if (*(_QWORD *)v125)
  {
    *(_QWORD *)(a1 + 216) = *(_QWORD *)v125;
    *(_QWORD *)(a1 + 3200) = v120;
    *(_QWORD *)(a1 + 10288) = v119;
    *(_DWORD *)(a1 + 1944) = HIDWORD(v118);
    *(_DWORD *)(a1 + 2192) = v118;
  }
  *(_DWORD *)(a1 + 8456) = v129;
  v72[1288] = (_BYTE)v127;
  *v72 = BYTE4(v126);
  v108 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v108 + 180) == 5)
    *(_BYTE *)(v108 + 170) = 1;
  if (v90)
    v109 = 3;
  else
    v109 = 0;
  *(_DWORD *)(v108 + 180) = v109;
  sub_22EB48E64(a1);
  return v29;
}

uint64_t sub_22EDFF780(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[96];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v18;
    do
    {
      v10 = *(_DWORD *)(a1 + v8 + 8);
      v11 = *(_QWORD *)(a1 + v8 + 16);
      if ((v10 != -1 || v11 != 0) && (v10 != -2 || v11 != -1))
      {
        *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
        *((_QWORD *)v9 + 2) = *(_QWORD *)(a1 + v8 + 24);
        v9 += 24;
      }
      v8 += 24;
    }
    while (v8 != 96);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v14 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v14;
    }
    return sub_22F348698(a1, (uint64_t)v18, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](24 * a2, 8);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    v17 = 3 * v7;
    sub_22F348698(a1, (uint64_t)v6, (uint64_t)v6 + 8 * v17);
    return llvm::deallocate_buffer(v6, (void *)(8 * v17));
  }
}

_QWORD *sub_22EDFF92C(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v12 = 56 * v3;
    sub_22F3488A8((char **)a1, (uint64_t)v4, (uint64_t)&v4[v12]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EDFF9F8(uint64_t a1)
{
  uint64_t result;

  result = sub_22EDC0C88(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t sub_22EDFFA3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  _QWORD v11[2];
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = **(_QWORD **)(a1 + 16);
  v5 = *(uint64_t **)(a1 + 40);
  v6 = **(_DWORD **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = **(unsigned __int8 **)(a1 + 64);
  v11[0] = **(_QWORD **)(a1 + 72);
  v11[1] = v2;
  v12 = *(_OWORD *)(a1 + 80);
  result = sub_22EDC19B4(v2, v4, v3, v6, v5, v7, v8, v9, (uint64_t (*)(uint64_t))sub_22EDFFAB0, (uint64_t)v11);
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t sub_22EDFFAB0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 216);
  v4 = *(_QWORD *)(v2 + 3200);
  *(_QWORD *)(v2 + 3200) = 0;
  v5 = *(_QWORD *)(v2 + 10288);
  v6 = *(_DWORD *)(v2 + 1944);
  v7 = *(_DWORD *)(v2 + 2192);
  *(_QWORD *)(v2 + 216) = v1;
  *(_QWORD *)(v2 + 10288) = 0;
  *(_DWORD *)(v2 + 1944) = *(_DWORD *)(v2 + 1904);
  *(_DWORD *)(v2 + 2192) = *(_DWORD *)(v2 + 1960);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a1[2])(*(_QWORD *)(a1[2] + 8), *(_QWORD *)a1[3], *(unsigned int *)(a1[3] + 8));
  if (v3)
  {
    *(_QWORD *)(v2 + 216) = v3;
    *(_QWORD *)(v2 + 3200) = v4;
    *(_QWORD *)(v2 + 10288) = v5;
    *(_DWORD *)(v2 + 1944) = v6;
    *(_DWORD *)(v2 + 2192) = v7;
  }
  return result;
}

uint64_t sub_22EDFFB38(uint64_t a1)
{
  uint64_t result;

  result = sub_22EDC0C88(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unint64_t **)(a1 + 48), *(_QWORD *)(a1 + 56));
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t sub_22EDFFB7C(uint64_t a1)
{
  uint64_t result;
  char v3;

  result = sub_22EDC19B4(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), **(_DWORD **)(a1 + 32), *(uint64_t **)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 0, (uint64_t (*)(uint64_t))sub_22EDFFBDC, (uint64_t)&v3);
  **(_DWORD **)a1 = result;
  return result;
}

uint64_t sub_22EDFFBDC()
{
  return 0;
}

uint64_t sub_22EDFFBE4(uint64_t a1)
{
  uint64_t result;
  char v3;

  result = sub_22EDC19B4(*(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 0, *(uint64_t **)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 0, (uint64_t (*)(uint64_t))sub_22EDFFBDC, (uint64_t)&v3);
  **(_DWORD **)a1 = result;
  return result;
}

void sub_22EDFFC40(uint64_t a1)
{
  sub_22EE44C50(*(_QWORD *)a1, **(_DWORD **)(a1 + 8), **(_QWORD **)(a1 + 16), 0, 0, 0);
}

void sub_22EDFFC64(uint64_t a1)
{
  sub_22EE44C50(*(_QWORD *)a1, **(_DWORD **)(a1 + 8), **(_QWORD **)(a1 + 16), 0, 0, 0);
}

uint64_t sub_22EDFFC88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  v6 = v5 + 40;
  LODWORD(v5) = *(_DWORD *)(v5 + 20);
  v8 = v6;
  v9 = v5;
  result = sub_22EDFD4A8(v2, v3, 1, &v8, v4, *(_QWORD *)(a1 + 40));
  **(_BYTE **)a1 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_22EDFFCF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  v6 = v5 + 40;
  LODWORD(v5) = *(_DWORD *)(v5 + 20);
  v8 = v6;
  v9 = v5;
  result = sub_22EDFFD54(v2, v3, &v8, v4, *(_QWORD **)(a1 + 40));
  **(_BYTE **)a1 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_22EDFFD54(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  char v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int16 v46;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char **v108;
  _QWORD *v109;
  uint64_t v110[2];
  uint64_t v111;
  _OWORD v112[2];
  _QWORD v113[2];
  char v114;
  char v115;
  _OWORD v116[2];
  void *v117;
  uint64_t v118;
  _BYTE v119[96];
  void *v120[2];
  __int128 v121;
  int v122;
  char v123;
  char v124;
  char v125;
  char *v126;
  uint64_t v127;
  _QWORD v128[58];

  v109 = a3;
  v128[56] = *MEMORY[0x24BDAC8D0];
  v9 = (unsigned __int8 *)(a1 + 10664);
  LODWORD(v116[0]) = 0;
  v120[0] = 0;
  LODWORD(v112[0]) = 3;
  v117 = (void *)*(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)v116, (int *)&v117, (__int16 *)(a1 + 1693), (uint64_t *)v120, (int *)v112);
  v10 = *(unsigned int *)(a1 + 3696);
  v11 = v10 - 2;
  v12 = *(_QWORD *)(a1 + 3688);
  v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
  if (v13 == 5)
  {
    *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
    v14 = 1;
  }
  else if (v13 == 2)
  {
    *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
    v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
  }
  else
  {
    v14 = 0;
    *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
  }
  v15 = v12 + 576 * v10;
  *(_BYTE *)(v15 - 3) = v14;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v15 - 496));
  }
  LODWORD(v106) = v9[1288];
  HIDWORD(v106) = *(_DWORD *)(a1 + 8456);
  HIDWORD(v105) = *v9;
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v17)
    v9[1288] = 1;
  *v9 = 0;
  v18 = sub_22EDFE09C(a2);
  v23 = *(_QWORD *)(a1 + 216);
  v24 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v101 = *(_QWORD *)(a1 + 10288);
  v102 = v24;
  LODWORD(v100) = *(_DWORD *)(a1 + 2192);
  HIDWORD(v100) = *(_DWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 216) = v18;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v103 = v119;
  v104 = v23;
  v117 = v119;
  v118 = 0x400000000;
  v25 = *(_DWORD **)(a2 + 56);
  v26 = v25[3];
  v27 = v26 & 0x1FFFFFFF;
  if ((v26 & 0x1FFFFFFF) == 0)
  {
LABEL_64:
    v56 = v25[3] & 0x1FFFFFFF;
    v57 = HIDWORD(v106);
    if ((_DWORD)v56)
    {
      v58 = 0;
      v59 = v25 + 4;
      v60 = 24 * v56;
      while (1)
      {
        v61 = *(_QWORD *)((char *)v117 + v58 + 16);
        *(_OWORD *)v120 = *(_OWORD *)((char *)v117 + v58);
        *(_QWORD *)&v121 = v61;
        v62 = *(_QWORD *)(a1 + 88);
        v63 = *v109 + v58;
        v64 = *(_QWORD *)(v63 + 16);
        *(_OWORD *)v110 = *(_OWORD *)v63;
        v111 = v64;
        if ((sub_22EDFE10C(v62, (uint64_t)v110, (int *)v120, 1, v19, v20, v21, v22, v99, v100, v101, v102, (uint64_t)v103, v104, v105, v106, (char)v107, (uint64_t)v108, v109,
                v110[0]) & 1) == 0)
          break;
        v58 += 24;
        v59 += 2;
        if (v60 == v58)
          goto LABEL_68;
      }
      v68 = *(_QWORD *)v59;
      if ((*(_DWORD *)(*(_QWORD *)v59 + 28) & 0x7F) == 0x26)
        v69 = *(_QWORD *)v59;
      else
        v69 = 0;
      if (v69)
      {
        v70 = v69 & 0xFFFFFFFFFFFFFFF9;
        v72 = BYTE4(v105);
        v71 = v106;
        v73 = v104;
      }
      else
      {
        if ((*(_DWORD *)(*(_QWORD *)v59 + 28) & 0x7F) == 0x3B)
          v86 = *(_QWORD *)v59;
        else
          v86 = 0;
        v72 = BYTE4(v105);
        v71 = v106;
        v73 = v104;
        if (v86)
          v70 = v86 & 0xFFFFFFFFFFFFFFF9 | 2;
        else
          v70 = v68 & 0xFFFFFFFFFFFFFFF9 | 4;
      }
      a5[21] = v70;
      v92 = (__int128 *)(*v109 + v58);
      v93 = *v92;
      a5[24] = *((_QWORD *)v92 + 2);
      *((_OWORD *)a5 + 11) = v93;
      *(_OWORD *)(a5 + 25) = *(_OWORD *)v120;
      a5[27] = v121;
      v32 = 10;
      v78 = v103;
    }
    else
    {
LABEL_68:
      if (*(_DWORD *)(a1 + 8456) <= v57)
      {
        v65 = (__n128 *)v117;
        v66 = v118;
        v120[0] = &v121;
        v120[1] = (void *)0x300000000;
        sub_22EFE9164(*(_QWORD *)(a2 + 56), (uint64_t)v120);
        v67 = *(_QWORD *)(a2 + 48);
        if (v67)
        {
          if ((*(_DWORD *)(v67 + 28) & 0x7Eu) - 52 <= 5)
          {
            v87 = *(_QWORD *)(v67 + 56);
            if ((v87 & 4) != 0)
            {
              v88 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 40);
              if (v88)
              {
                v89 = v120[1];
                if (LODWORD(v120[1]) >= HIDWORD(v120[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v89 = v120[1];
                }
                *((_QWORD *)v120[0] + v89) = v88;
                ++LODWORD(v120[1]);
                v57 = HIDWORD(v106);
              }
            }
          }
        }
        if ((sub_22E9F3578(a1, a2, v120[0], LODWORD(v120[1]), v65, v66, *((unsigned int *)a5 + 2) | ((unint64_t)*((unsigned int *)a5 + 2) << 32), a5 + 39) & 1) != 0|| !*((_BYTE *)a5 + 440))
        {
          sub_22EFEB554(*(_QWORD *)(a1 + 88), v65, v66);
          *a5 = v79;
          v32 = 15;
        }
        else
        {
          v32 = 0;
        }
        v72 = BYTE4(v105);
        v71 = v106;
        v78 = v103;
        v73 = v104;
        if (v120[0] != &v121)
          free(v120[0]);
      }
      else
      {
        v32 = 7;
LABEL_93:
        v72 = BYTE4(v105);
        v71 = v106;
        v78 = v103;
        v73 = v104;
      }
    }
    goto LABEL_137;
  }
  DWORD1(v99) = v16;
  v28 = a5;
  *((_QWORD *)&v99 + 1) = v9;
  v29 = 0;
  v30 = v25 + 4;
  v107 = v128;
  v108 = &v126;
  while (1)
  {
    v31 = *(_QWORD *)&v30[2 * v29];
    if (!*(_DWORD *)(*a4 + 32 * v29) && sub_22EFC7864(*(_QWORD *)&v30[2 * v29]))
    {
      v120[0] = (void *)a1;
      v120[1] = v25;
      *(_QWORD *)&v121 = a4;
      *((_QWORD *)&v121 + 1) = v28;
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v126 = (char *)v128;
      v127 = 0x200000000;
      sub_22EDCD13C((uint64_t)v120, v29);
      sub_22EDCCC30((uint64_t)v120, 1u);
      v32 = sub_22EDC39BC((uint64_t)v120);
      if ((_DWORD)v127)
      {
        v33 = v126;
        v34 = 224 * v127;
        do
        {
          v35 = *((_QWORD *)v33 + 27);
          v36 = *(_DWORD *)v33;
          v33 += 224;
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v121 + 1) + 232) + 8 * v36) = v35;
          v34 -= 224;
        }
        while (v34);
      }
      sub_22EDCD438(&v126);
      if ((_DWORD)v32)
        goto LABEL_92;
    }
    v37 = (_OWORD *)(*a4 + 32 * v29);
    if (*(_DWORD *)v37)
    {
      v38 = v37[1];
      v116[0] = *v37;
      v116[1] = v38;
      if (sub_22EDFE4E4((_QWORD *)a1, v31, (uint64_t)v116, (unsigned int *)a2, (uint64_t)v28, 1, (uint64_t)&v117))
      {
        if ((*(_DWORD *)(v31 + 28) & 0x7F) == 0x26)
          v74 = v31;
        else
          v74 = 0;
        if ((*(_DWORD *)(v31 + 28) & 0x7F) == 0x3B)
          v75 = v31;
        else
          v75 = 0;
        if (v75)
          v76 = v75 & 0xFFFFFFFFFFFFFFF9 | 2;
        else
          v76 = v31 & 0xFFFFFFFFFFFFFFF9 | 4;
        if (v74)
          v76 = v74 & 0xFFFFFFFFFFFFFFF9;
        v28[21] = v76;
        sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v117, v118);
        *v28 = v77;
        v32 = 7;
LABEL_92:
        v9 = (unsigned __int8 *)*((_QWORD *)&v99 + 1);
        v16 = DWORD1(v99);
        v57 = HIDWORD(v106);
        goto LABEL_93;
      }
      goto LABEL_39;
    }
    v115 = 0;
    LODWORD(v120[0]) = 0;
    v120[1] = 0;
    *((_QWORD *)&v121 + 1) = 0;
    v39 = *(_QWORD *)(a2 + 16);
    v40 = v39 & 0xFFFFFFFFFFFFFFF8;
    if ((v39 & 4) != 0)
      v40 = *(_QWORD *)v40;
    LODWORD(v41) = 0;
    if (!v40)
    {
      v42 = 0;
      v43 = 0;
      goto LABEL_35;
    }
    v42 = 0;
    v43 = 0;
    if ((*(_WORD *)(v40 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD)
      goto LABEL_35;
    v42 = *(_QWORD *)(v40 + 64);
    if (!v42)
    {
      LODWORD(v41) = 0;
      goto LABEL_34;
    }
    if (((*(unsigned __int16 *)(v42 + 8) | (*(unsigned __int8 *)(v42 + 10) << 16)) & 0x100000) == 0)
      goto LABEL_31;
    v44 = *(_QWORD *)(v40 - 48);
    v45 = v44 & 0xFFFFFFFFFFFFFFF8;
    if ((v44 & 4) != 0)
      v45 = *(_QWORD *)v45;
    v46 = *(_WORD *)(v45 + 8);
    if (!v45 || (v46 & 0x7Eu) - 58 < 0xFFFFFFFC)
    {
LABEL_31:
      LODWORD(v41) = 0;
      v42 = 0;
LABEL_34:
      v43 = 0;
      goto LABEL_35;
    }
    v52 = v46 & 0x7F;
    v53 = -40;
    if (v52 > 70)
    {
      if (v52 != 83)
      {
        if (v52 == 71)
        {
          v53 = -56;
        }
        else if (v52 != 81)
        {
          goto LABEL_52;
        }
      }
    }
    else
    {
      if (v52 > 0x18)
        goto LABEL_151;
      if (v52 == 16)
        goto LABEL_44;
      if (((1 << v52) & 0x1066) != 0)
        goto LABEL_56;
      if (v52 == 24)
      {
LABEL_44:
        v53 = -48;
      }
      else
      {
LABEL_151:
        if (v52 != 70)
        {
LABEL_52:
          if ((v52 - 52) < 6)
          {
            v53 = -72;
          }
          else
          {
            v53 = -64;
            if ((v52 - 33) >= 5)
              v53 = -48;
          }
          goto LABEL_56;
        }
        v53 = -64;
      }
    }
LABEL_56:
    v54 = *(_QWORD *)(v45 + v53 + 16);
    v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8);
    if ((v54 & 4) != 0)
      v55 = (_QWORD *)*v55;
    v43 = v55 ? (uint64_t)(v55 - 8) : 0;
    v41 = sub_22E46BB88(v45 - 72);
    v42 = v41 & 0xFFFFFFFF00000000;
LABEL_35:
    sub_22EBBBB24((uint64_t)v113, a1, v43, v42 | v41, (**(_QWORD **)(a1 + 72) >> 11) & 1);
    v48 = *(_DWORD *)(a2 + 24);
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22ED66E64(a1, a2, v48, HIDWORD(v49), v31, (uint64_t)&v117, &v115, (uint64_t)v112);
    *(_OWORD *)v120 = v112[0];
    v121 = v112[1];
    if (v114)
      *(_QWORD *)(v113[0] + 10288) = v113[1];
    if (!LODWORD(v120[0]))
      break;
    v50 = *(unsigned int *)(a2 + 24);
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    if (sub_22ED678A8(a1, v31, v120, a2, v50, HIDWORD(v51), 0, &v117, 0))
    {
      v83 = *(_QWORD *)&v30[2 * v29];
      if ((*(_DWORD *)(v83 + 28) & 0x7F) == 0x26)
        v84 = *(_QWORD *)&v30[2 * v29];
      else
        v84 = 0;
      if (v84)
      {
        v85 = v84 & 0xFFFFFFFFFFFFFFF9;
        v9 = (unsigned __int8 *)*((_QWORD *)&v99 + 1);
        v71 = v106;
        v57 = HIDWORD(v106);
        v72 = BYTE4(v105);
        v78 = v119;
        v73 = v104;
      }
      else
      {
        if ((*(_DWORD *)(v83 + 28) & 0x7F) == 0x3B)
          v91 = *(_QWORD *)&v30[2 * v29];
        else
          v91 = 0;
        v9 = (unsigned __int8 *)*((_QWORD *)&v99 + 1);
        v71 = v106;
        v57 = HIDWORD(v106);
        v72 = BYTE4(v105);
        v78 = v119;
        v73 = v104;
        if (v91)
          v85 = v91 & 0xFFFFFFFFFFFFFFF9 | 2;
        else
          v85 = v83 & 0xFFFFFFFFFFFFFFF9 | 4;
      }
      v28[21] = v85;
      sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v117, v118);
      *v28 = v95;
      v32 = 7;
      goto LABEL_136;
    }
LABEL_39:
    if (++v29 == v27)
    {
      v25 = *(_DWORD **)(a2 + 56);
      v9 = (unsigned __int8 *)*((_QWORD *)&v99 + 1);
      a5 = v28;
      v16 = DWORD1(v99);
      goto LABEL_64;
    }
  }
  v80 = *(_QWORD *)&v30[2 * v29];
  if ((*(_DWORD *)(v80 + 28) & 0x7F) == 0x26)
    v81 = *(_QWORD *)&v30[2 * v29];
  else
    v81 = 0;
  if (v81)
  {
    v82 = v81 & 0xFFFFFFFFFFFFFFF9;
    v9 = (unsigned __int8 *)*((_QWORD *)&v99 + 1);
    v71 = v106;
    v57 = HIDWORD(v106);
    v72 = BYTE4(v105);
    v78 = v119;
    v73 = v104;
  }
  else
  {
    if ((*(_DWORD *)(v80 + 28) & 0x7F) == 0x3B)
      v90 = *(_QWORD *)&v30[2 * v29];
    else
      v90 = 0;
    v9 = (unsigned __int8 *)*((_QWORD *)&v99 + 1);
    v71 = v106;
    v57 = HIDWORD(v106);
    v72 = BYTE4(v105);
    v78 = v119;
    v73 = v104;
    if (v90)
      v82 = v90 & 0xFFFFFFFFFFFFFFF9 | 2;
    else
      v82 = v80 & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  v28[21] = v82;
  sub_22EFEB554(*(_QWORD *)(a1 + 88), (__n128 *)v117, v118);
  *v28 = v94;
  if (v115)
    v32 = 7;
  else
    v32 = 3;
LABEL_136:
  v16 = DWORD1(v99);
LABEL_137:
  if (v117 != v78)
    free(v117);
  if (v73)
  {
    *(_QWORD *)(a1 + 216) = v73;
    *(_QWORD *)(a1 + 3200) = v102;
    *(_QWORD *)(a1 + 10288) = v101;
    *(_DWORD *)(a1 + 1944) = HIDWORD(v100);
    *(_DWORD *)(a1 + 2192) = v100;
  }
  *(_DWORD *)(a1 + 8456) = v57;
  v9[1288] = v71;
  *v9 = v72;
  v96 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v96 + 180) == 5)
    *(_BYTE *)(v96 + 170) = 1;
  if (v16)
    v97 = 3;
  else
    v97 = 0;
  *(_DWORD *)(v96 + 180) = v97;
  sub_22EB48E64(a1);
  return v32;
}

uint64_t sub_22EE00700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  v6 = v5 + 40;
  LODWORD(v5) = *(_DWORD *)(v5 + 20);
  v8 = v6;
  v9 = v5;
  result = sub_22EDFEB8C(v2, v3, 1, &v8, v4, *(_QWORD *)(a1 + 40));
  **(_BYTE **)a1 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_22EE00768(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(_QWORD **)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  v6 = v5 + 40;
  LODWORD(v5) = *(_DWORD *)(v5 + 20);
  v8 = v6;
  v9 = v5;
  result = sub_22EDFFD54(v2, v3, &v8, v4, *(_QWORD **)(a1 + 40));
  **(_BYTE **)a1 = (_DWORD)result == 0;
  return result;
}

void sub_22EE007CC(uint64_t a1@<X1>, uint64_t *a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  __int16 v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t **v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t *v55;
  unsigned int v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  BOOL v60;
  uint64_t **v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;

  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x400000000;
  *(_DWORD *)(a5 + 80) = 0;
  *(_BYTE *)(a5 + 84) = 0;
  if (a2)
    sub_22E9F7044(a5, a2);
  v9 = *(_DWORD *)(a1 + 28) & 0x7F;
  v10 = v9 > 0x39 || ((1 << v9) & 0x3F0003E01011066) == 0;
  if (!v10 || (v9 - 70 <= 0xD ? (v53 = ((1 << (v9 - 70)) & 0x2803) == 0) : (v53 = 1), !v53 || v9 - 19 <= 4))
  {
    v11 = sub_22EFCAE04(a1);
    goto LABEL_8;
  }
  v54 = *(_QWORD *)(a1 + 16);
  v55 = (unint64_t *)(v54 & 0xFFFFFFFFFFFFFFF8);
  v11 = v54 & 0xFFFFFFFFFFFFFFF8;
  if ((v54 & 4) != 0)
    v11 = *v55;
  if (v9 - 67 >= 0xFFFFFFFE)
  {
    if ((*(_BYTE *)(a1 + 420) & 7) == 2)
    {
      if ((v54 & 4) != 0)
        v55 = (unint64_t *)v55[1];
      if ((v55[1] & 0x7F) - 35 < 3)
        goto LABEL_144;
      if (v9 != 66)
        return;
    }
    v59 = *(_QWORD *)(a1 + 112) & 0xFFFFFFFFFFFFFFF8;
    if (v59)
      v60 = (*(_QWORD *)(a1 + 112) & 4) == 0;
    else
      v60 = 1;
    v61 = (uint64_t **)(v59 + 8);
    if (v60)
      v61 = (uint64_t **)(a1 + 128);
    sub_22E9F7044(a5, *v61);
    v62 = *(_QWORD *)(a1 + 112);
    v63 = v62 & 0xFFFFFFFFFFFFFFF8;
    if ((v62 & 4) != 0 && v63)
      v63 = *(_QWORD *)v63 | 4;
    v64 = v63 & 0xFFFFFFFFFFFFFFF8;
    if ((v63 & 4) != 0 && v64)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v64 + 80) + 440) & 4) != 0)
        return;
    }
    else if ((*(_BYTE *)sub_22EFE9368(v64) & 4) != 0)
    {
      return;
    }
  }
LABEL_144:
  if ((*(_WORD *)(v11 + 8) & 0x7F) != 0x53 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x20)
  {
    while (1)
    {
      while (1)
      {
LABEL_8:
        v12 = *(_WORD *)(v11 + 8);
        v13 = v12 & 0x7F;
        if (v13 == 16 || v13 == 83)
          return;
        v14 = v12 & 0x7E;
        if (v14 != 36)
          break;
        if ((*(_BYTE *)(v11 + 116) & 7) == 2)
        {
          v15 = *(_QWORD *)(v11 - 48);
          v16 = v15 & 0xFFFFFFFFFFFFFFF8;
          if ((v15 & 4) != 0)
            v16 = *(_QWORD *)(v16 + 8);
          if ((*(_WORD *)(v16 + 8) & 0x7Fu) - 35 < 3)
          {
LABEL_26:
            if ((v13 - 38) < 0xFFFFFFFD)
              goto LABEL_30;
            v22 = *(_QWORD *)(v11 + 72);
            if ((v22 & 4) != 0)
              goto LABEL_30;
            v21 = v22 & 0xFFFFFFFFFFFFFFF8;
            if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0)
              goto LABEL_30;
            goto LABEL_29;
          }
          if ((*(_DWORD *)(v11 - 36) & 0x7F) != 0x25)
            return;
        }
        v17 = *(_QWORD *)(v11 + 88) & 0xFFFFFFFFFFFFFFF8;
        if (v17)
          v18 = (*(_QWORD *)(v11 + 88) & 4) == 0;
        else
          v18 = 1;
        v19 = (uint64_t **)(v17 + 8);
        if (v18)
          v19 = (uint64_t **)(v11 + 104);
        sub_22E9F7044(a5, *v19);
        for (i = *(_QWORD *)(v11 + 88); ; i = *(_QWORD *)(*(_QWORD *)v21 + 152))
        {
          v21 = i & 0xFFFFFFFFFFFFFFF8;
          if ((i & 4) == 0 || !v21)
            break;
        }
LABEL_29:
        if ((*(_BYTE *)sub_22EFE9368(v21) & 4) != 0)
          return;
LABEL_30:
        v23 = *(_WORD *)(v11 + 8) & 0x7F;
        v24 = -40;
        if (v23 > 0x46)
        {
          if (v23 != 83)
          {
            if (v23 == 71)
            {
              v24 = -56;
            }
            else if (v23 != 81)
            {
              goto LABEL_49;
            }
          }
        }
        else
        {
          if (v23 > 0x18)
            goto LABEL_48;
          if (v23 == 16)
            goto LABEL_33;
          if (((1 << v23) & 0x1066) != 0)
            goto LABEL_55;
          if (v23 == 24)
          {
LABEL_33:
            v24 = -48;
          }
          else
          {
LABEL_48:
            if (v23 != 70)
            {
LABEL_49:
              v28 = v23 - 52;
              if (v23 - 33 >= 5)
                v29 = -48;
              else
                v29 = -64;
              if (v28 >= 6)
                v24 = v29;
              else
                v24 = -72;
              goto LABEL_55;
            }
            v24 = -64;
          }
        }
LABEL_55:
        a3 = 0;
        v30 = *(_QWORD *)(v11 + v24 + 16);
        v11 = v30 & 0xFFFFFFFFFFFFFFF8;
        if ((v30 & 4) != 0)
          goto LABEL_56;
      }
      if ((v14 - 58) < 0xFFFFFFFA)
        goto LABEL_26;
      if ((a3 & 1) != 0)
      {
        v25 = *(_QWORD *)(v11 + 72);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        if (sub_22EFC20A4(v11 - 72) == 2)
          return;
        v25 = *(_QWORD *)(v11 + 72);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 6) == 4 && v26)
        {
          v27 = (_QWORD *)(v26 + 16);
        }
        else
        {
          if ((v25 & 6) != 2 || !v26)
            goto LABEL_59;
          v27 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
        }
        if ((*v27 & 6) == 2)
          goto LABEL_87;
      }
LABEL_59:
      if ((v25 & 6) == 4)
      {
        if (v26)
        {
          v31 = *(uint64_t **)(v26 + 24);
          if (v31)
          {
            sub_22E9F7044(a5, v31);
            v32 = 0;
            if ((*(_QWORD *)(v11 + 72) & 6) == 4)
            {
              v33 = *(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFFFF8;
              if (v33)
                v32 = *(_QWORD *)(v33 + 16) & 0xFFFFFFFFFFFFFFF8;
            }
            if ((*(_BYTE *)sub_22EFE9368(v32) & 4) != 0)
              return;
            v34 = *(_WORD *)(v11 + 8);
            if ((v34 & 0x7Eu) - 58 >= 0xFFFFFFFC)
            {
              v35 = v34 & 0x7F;
              v36 = -40;
              if (v35 > 70)
              {
                if (v35 != 83)
                {
                  if (v35 == 71)
                  {
                    v36 = -56;
                  }
                  else if (v35 != 81)
                  {
                    goto LABEL_78;
                  }
                }
              }
              else
              {
                if (v35 > 0x18)
                  goto LABEL_77;
                if (v35 == 16)
                  goto LABEL_70;
                if (((1 << v35) & 0x1066) == 0)
                {
                  if (v35 == 24)
                    goto LABEL_70;
LABEL_77:
                  if (v35 == 70)
                    goto LABEL_80;
LABEL_78:
                  if ((v35 - 52) >= 6)
                  {
                    if ((v35 - 33) < 5)
                    {
LABEL_80:
                      v36 = -64;
                      goto LABEL_82;
                    }
LABEL_70:
                    v36 = -48;
                    goto LABEL_82;
                  }
                  v36 = -72;
                }
              }
LABEL_82:
              v37 = *(_QWORD *)(v11 + v36 + 16);
              v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
              if ((v37 & 4) != 0)
                v38 = (_QWORD *)*v38;
              if (!v38)
                goto LABEL_87;
              v39 = v38[8];
              if (!v39
                || ((*(unsigned __int16 *)(v39 + 8) | (*(unsigned __int8 *)(v39 + 10) << 16)) & 0x100000) == 0
                || (*(_BYTE *)(v39 + 104) & 4) == 0)
              {
                goto LABEL_87;
              }
              v48 = -40;
              if (v35 > 70)
              {
                if (v35 != 83)
                {
                  if (v35 == 71)
                  {
                    v48 = -56;
                  }
                  else if (v35 != 81)
                  {
                    goto LABEL_117;
                  }
                }
              }
              else
              {
                if (v35 > 0x18)
                  goto LABEL_116;
                if (v35 == 16)
                  goto LABEL_108;
                if (((1 << v35) & 0x1066) == 0)
                {
                  if (v35 == 24)
                    goto LABEL_108;
LABEL_116:
                  if (v35 == 70)
                    goto LABEL_119;
LABEL_117:
                  if ((v35 - 52) >= 6)
                  {
                    if ((v35 - 33) < 5)
                    {
LABEL_119:
                      v48 = -64;
                      goto LABEL_121;
                    }
LABEL_108:
                    v48 = -48;
                    goto LABEL_121;
                  }
                  v48 = -72;
                }
              }
LABEL_121:
              v49 = *(_QWORD *)(v11 + v48 + 16);
              v50 = (_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8);
              if ((v49 & 4) != 0)
                v50 = (_QWORD *)*v50;
              if ((v50
                 && (v51 = v50[8]) != 0
                 && ((*(unsigned __int16 *)(v51 + 8) | (*(unsigned __int8 *)(v51 + 10) << 16)) & 0x100000) != 0
                 && (*(_QWORD *)(v11 - 32) & 7) == 6
                 && *(_DWORD *)(*(_QWORD *)(v11 - 32) & 0xFFFFFFFFFFFFFFF8) == 42
                 || sub_22EFD799C(v11 - 72))
                && (*(_QWORD *)(v11 + 72) & 6) == 4)
              {
                v52 = *(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFFFF8;
                if (v52)
                {
                  if (*(_QWORD *)(v52 + 16) > 7uLL)
                    return;
                }
              }
            }
          }
        }
      }
LABEL_87:
      if ((*(_WORD *)(v11 - 42) & 0x180) == 0)
        goto LABEL_30;
      v40 = *(_QWORD *)(v11 - 56);
      v41 = (unint64_t *)(v40 & 0xFFFFFFFFFFFFFFF8);
      v42 = v40 & 0xFFFFFFFFFFFFFFF8;
      if ((v40 & 4) != 0)
        v42 = *v41;
      v43 = *(_WORD *)(v42 + 8) & 0x7F;
      if (v43 != 83 && v43 != 16)
        goto LABEL_30;
      if (a4)
      {
        v45 = *(_QWORD *)(a4 + 16);
        v46 = v45 & 0xFFFFFFFFFFFFFFF8;
        if ((v45 & 4) != 0)
          v46 = *(_QWORD *)(v46 + 8);
        v47 = *(_WORD *)(v46 + 8) & 0x7F;
        if (v47 == 16 || v47 == 83)
          goto LABEL_30;
      }
      a3 = 0;
      v11 = v40 & 0xFFFFFFFFFFFFFFF8;
      if ((v40 & 4) != 0)
      {
        v11 = (unint64_t)(v41 + 1);
LABEL_56:
        a3 = 0;
        v11 = *(_QWORD *)v11;
      }
    }
  }
  v56 = *(_DWORD *)(a5 + 8);
  v57 = (*(_DWORD *)(a1 + 64) & 0xFFFFF) + 1;
  do
  {
    if (v56 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v56 = *(_DWORD *)(a5 + 8);
    }
    v58 = (_QWORD *)(*(_QWORD *)a5 + 16 * v56);
    *v58 = 0;
    v58[1] = 0;
    v56 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v56;
    --v57;
  }
  while (v57);
}

_BYTE *sub_22EE00E90(_BYTE *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  char v34;
  uint64_t v35;
  int v36;
  _QWORD *v38;
  _QWORD *v39;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  int v53;
  BOOL v54;
  unsigned int v56;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _OWORD v65[4];
  unsigned int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  *(_QWORD *)a1 = a2;
  v15 = a2;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 104) + 170))
  {
    v62 = a7;
    v64 = a4;
    v61 = a5;
    if ((sub_22E9038B8(a2) & 1) != 0)
    {
LABEL_71:
      a1[8] = 1;
      return a1;
    }
    v15 = *(_QWORD *)a1;
    a5 = v61;
    a7 = v62;
    a4 = v64;
  }
  v71 = a5;
  if (*(unsigned int *)(v15 + 10680) - (unint64_t)*(unsigned int *)(v15 + 11956) > *(unsigned int *)(*(_QWORD *)(v15 + 72) + 168))
  {
    v59 = a4;
    sub_22E8FCA40((_QWORD *)v15, a4, 0x12F1u, 0, (uint64_t)&v67);
    v66 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 168);
    v60 = sub_22E89519C((uint64_t)&v67, &v66);
    sub_22E8906A0(v60, &v71);
    sub_22E903BEC((unsigned int *)&v67);
    sub_22E8FCA40(*(_QWORD **)a1, v59, 0x17E8u, 0, (uint64_t)&v67);
    v66 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 168);
    sub_22E89519C((uint64_t)&v67, &v66);
    sub_22E903BEC((unsigned int *)&v67);
    goto LABEL_71;
  }
  a1[8] = 0;
  BYTE4(v67) = 0;
  LODWORD(v67) = a3;
  DWORD2(v67) = a4;
  *(_QWORD *)&v68 = a6;
  *((_QWORD *)&v68 + 1) = a7;
  *(_QWORD *)&v69 = a9;
  DWORD2(v69) = a10;
  *(_QWORD *)&v70 = a11;
  *((_QWORD *)&v70 + 1) = a5;
  v65[0] = v67;
  v65[1] = v68;
  v65[2] = v69;
  v65[3] = v70;
  sub_22EE012D0(a2, (unint64_t)v65);
  if (a6)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 32))(a6);
    v17 = *(_DWORD *)(a2 + 11728);
    v18 = v16 >> 4;
    if (!v17)
    {
      v35 = 0;
LABEL_29:
      v36 = *(_DWORD *)(a2 + 11720);
      if (4 * v36 + 4 >= 3 * v17)
      {
        v58 = v16;
        sub_22EE136EC(a2 + 11712, 2 * v17);
        v71 = 0;
        sub_22EE13610(*(_QWORD *)(a2 + 11712), *(_DWORD *)(a2 + 11728), v58, a3, &v71);
        v16 = v58;
        v35 = v71;
      }
      else if (v17 + ~v36 - *(_DWORD *)(a2 + 11724) <= v17 >> 3)
      {
        v63 = v16;
        sub_22EE136EC(a2 + 11712, v17);
        v41 = *(_DWORD *)(a2 + 11728);
        if (v41)
        {
          v42 = *(_QWORD *)(a2 + 11712);
          v16 = v63;
          v43 = ~((unint64_t)(37 * a3) << 32)
              + (37 * a3)
              + ((unint64_t)(v18 ^ (v63 >> 9)) << 32);
          v44 = (v43 ^ (v43 >> 22)) + ~((v43 ^ (v43 >> 22)) << 13);
          v45 = (9 * (v44 ^ (v44 >> 8))) ^ ((9 * (v44 ^ (v44 >> 8))) >> 15);
          v46 = ((v45 + ~(v45 << 27)) >> 31) ^ (v45 + ~((_DWORD)v45 << 27));
          v47 = v41 - 1;
          v48 = (v41 - 1) & v46;
          v35 = v42 + 16 * v48;
          v49 = *(_QWORD *)v35;
          v50 = *(_DWORD *)(v35 + 8);
          if (v63 != *(_QWORD *)v35 || v50 != a3)
          {
            v52 = 0;
            v53 = 1;
            while (v49 != -4096 || v50 != -1)
            {
              if (v52)
                v54 = 0;
              else
                v54 = v50 == -2;
              if (v54 && v49 == -8192)
                v52 = v35;
              v56 = v48 + v53++;
              v48 = v56 & v47;
              v35 = v42 + 16 * (v56 & v47);
              v49 = *(_QWORD *)v35;
              v50 = *(_DWORD *)(v35 + 8);
              if (v63 == *(_QWORD *)v35 && v50 == a3)
                goto LABEL_31;
            }
            if (v52)
              v35 = v52;
          }
        }
        else
        {
          v35 = 0;
          v16 = v63;
        }
      }
LABEL_31:
      ++*(_DWORD *)(a2 + 11720);
      if (*(_QWORD *)v35 != -4096 || *(_DWORD *)(v35 + 8) != -1)
        --*(_DWORD *)(a2 + 11724);
      v34 = 0;
      *(_QWORD *)v35 = v16;
      *(_DWORD *)(v35 + 8) = a3;
      goto LABEL_37;
    }
    v19 = *(_QWORD *)(a2 + 11712);
    v20 = ~((unint64_t)(37 * a3) << 32)
        + (37 * a3)
        + ((unint64_t)(v18 ^ (v16 >> 9)) << 32);
    v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
    v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
    v23 = (v17 - 1) & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
    v24 = v19 + 16 * v23;
    v25 = *(_QWORD *)v24;
    v26 = *(_DWORD *)(v24 + 8);
    if (v16 != *(_QWORD *)v24 || v26 != a3)
    {
      v28 = 0;
      v29 = 1;
      while (v25 != -4096 || v26 != -1)
      {
        if (v28)
          v30 = 0;
        else
          v30 = v26 == -2;
        if (v30 && v25 == -8192)
          v28 = v24;
        v32 = v23 + v29++;
        v23 = v32 & (v17 - 1);
        v24 = v19 + 16 * v23;
        v25 = *(_QWORD *)v24;
        v26 = *(_DWORD *)(v24 + 8);
        if (v16 == *(_QWORD *)v24 && v26 == a3)
          goto LABEL_25;
      }
      if (v28)
        v35 = v28;
      else
        v35 = v24;
      goto LABEL_29;
    }
LABEL_25:
    v34 = 1;
  }
  else
  {
    v34 = 0;
  }
LABEL_37:
  a1[9] = v34;
  v38 = *(_QWORD **)(a2 + 11968);
  v39 = *(_QWORD **)(a2 + 11976);
  while (v38 != v39)
  {
    if (*v38)
      (*(void (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*v38 + 32))(*v38, a2, &v67);
    ++v38;
  }
  return a1;
}

unsigned int *sub_22EE012D0(uint64_t a1, unint64_t a2)
{
  __int128 *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int *result;
  char *v10;
  uint64_t vars0;

  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 11952);
  *(_BYTE *)(a1 + 11952) = 0;
  v4 = (__int128 *)sub_22ED23700(a1 + 10672, a2, 1);
  v5 = (_OWORD *)(*(_QWORD *)(a1 + 10672) + ((unint64_t)*(unsigned int *)(a1 + 10680) << 6));
  v6 = *v4;
  v7 = v4[1];
  v8 = v4[3];
  v5[2] = v4[2];
  v5[3] = v8;
  *v5 = v6;
  v5[1] = v7;
  ++*(_DWORD *)(a1 + 10680);
  if (*(_DWORD *)a2 >= 6u && ((1 << *(_DWORD *)a2) & 0x1FBAC0) != 0)
    ++*(_DWORD *)(a1 + 11956);
  result = (unsigned int *)off_255E04E38();
  if (*(_QWORD *)result)
  {
    v10 = (char *)&vars0 - *(_QWORD *)result;
    if ((uint64_t)v10 < 0)
      v10 = (char *)(*(_QWORD *)result - (_QWORD)&vars0);
    if ((unint64_t)(v10 - 8126464) <= 0x40000)
      return sub_22F308988((unsigned int *)a1, *(_DWORD *)(a2 + 8));
  }
  return result;
}

_BYTE *sub_22EE013A8(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  return sub_22EE00E90(a1, a2, a7, a3, a9, a4, 0, a8, a5, a6, a8);
}

int32x2_t *sub_22EE013E8(int32x2_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int32x2_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = result[1335].u32[0];
  v2 = *(_QWORD *)&result[1334] + (v1 << 6);
  v3 = *(_DWORD *)(v2 - 64);
  if (v3 >= 6 && ((1 << v3) & 0x1FBAC0) != 0)
    --result[1494].i32[1];
  result[1494].i8[0] = *(_BYTE *)(v2 - 60);
  if ((_DWORD)v1 == result[1471].i32[0])
  {
    v4 = result;
    v5 = *(_QWORD *)(*(_QWORD *)&result[1470] + 8 * v1 - 8);
    if (v5)
    {
      v6 = 0;
      if (sub_22F29D274((uint64_t *)&result[1488], &v5, &v6))
      {
        *v6 = -8192;
        v4[1489] = vadd_s32(v4[1489], (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    result = v4;
    --v4[1471].i32[0];
    LODWORD(v1) = v4[1335].i32[0];
  }
  if ((_DWORD)v1 == result[1495].i32[0])
    result[1495].i32[0] = 0;
  result[1335].i32[0] = v1 - 1;
  return result;
}

int32x2_t *sub_22EE014E4(int32x2_t *result)
{
  int32x2_t *v1;
  int32x2_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  int v7;
  int32x2_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int32 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  unsigned int v19;
  int32x2_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  int32x2_t v25;

  if (!result[1].i8[0])
  {
    v1 = result;
    if (!result[1].i8[1])
    {
      v2 = (int32x2_t *)*result;
      v3 = *(_QWORD *)(*(_QWORD *)result + 10672)
         + ((unint64_t)*(unsigned int *)(*(_QWORD *)result + 10680) << 6);
      v4 = *(_QWORD *)(v3 - 48);
      if (v4)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
        v6 = v2[1466].i32[0];
        if (v6)
        {
          v7 = *(_DWORD *)(v3 - 64);
          v8 = v2[1464];
          v9 = ~((unint64_t)(37 * v7) << 32)
             + (37 * v7)
             + ((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
          v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
          v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
          v12 = v6 - 1;
          v13 = v12 & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~((_DWORD)v11 << 27)));
          v14 = *(_QWORD *)&v8 + 16 * v13;
          v15 = *(_QWORD *)v14;
          v16 = *(_DWORD *)(v14 + 8);
          if (v5 == *(_QWORD *)v14 && v7 == v16)
          {
LABEL_17:
            *(_QWORD *)v14 = -8192;
            *(_DWORD *)(v14 + 8) = -2;
            v2[1465] = vadd_s32(v2[1465], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v18 = 1;
            while (v15 != -4096 || v16 != -1)
            {
              v19 = v13 + v18++;
              v13 = v19 & v12;
              v14 = *(_QWORD *)&v8 + 16 * v13;
              v15 = *(_QWORD *)v14;
              v16 = *(_DWORD *)(v14 + 8);
              if (v5 == *(_QWORD *)v14 && v7 == v16)
                goto LABEL_17;
            }
          }
        }
      }
    }
    v21 = (int32x2_t *)*v1;
    v22 = *(_QWORD **)(*(_QWORD *)v1 + 11968);
    v23 = *(_QWORD **)(*(_QWORD *)v1 + 11976);
    if (v22 != v23)
    {
      v25 = *v1;
      v24 = *(_QWORD *)&v21[1334] + ((unint64_t)v21[1335].u32[0] << 6) - 64;
      do
      {
        if (*v22)
          (*(void (**)(_QWORD, int32x2_t, unint64_t))(*(_QWORD *)*v22 + 40))(*v22, v25, v24);
        ++v22;
      }
      while (v22 != v23);
      v21 = (int32x2_t *)*v1;
    }
    result = sub_22EE013E8(v21);
    v1[1].i8[0] = 1;
  }
  return result;
}

void sub_22EE01684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  std::string::size_type v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  uint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  _BOOL8 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unsigned int *v43;
  size_t v44;
  const void *v45;
  unsigned int v46;
  void **p_dst;
  std::string::size_type v48;
  std::string::size_type v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  uint64_t v56;
  BOOL v57;
  unsigned __int16 v58;
  uint64_t v59;
  unsigned int v60;
  std::string::size_type v61;
  int v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _DWORD *v69;
  char *v70;
  size_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::string::size_type v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  char v117;
  std::string::size_type v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::string::size_type v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  std::string::size_type v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::string::size_type v151;
  uint64_t v152;
  void *p_p;
  size_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const std::string::value_type *v160;
  std::string::size_type v161;
  std::string *v162;
  std::string::size_type v163;
  std::string *v164;
  void *v165;
  char v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  std::string::size_type v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  std::string::size_type v178;
  uint64_t v179;
  void *v180;
  size_t v181;
  std::string *v182;
  size_t size;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  std::string::size_type v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL8 v192;
  uint64_t v193;
  uint64_t v194;
  std::string::size_type v195;
  uint64_t v196;
  std::string::size_type v197;
  uint64_t v198;
  unsigned __int8 v199;
  uint64_t v200;
  std::string::size_type v201;
  uint64_t v202;
  void *v203;
  size_t v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  std::string::size_type v215;
  uint64_t v216;
  unsigned __int8 *v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  std::string::size_type v229;
  std::string::size_type v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  std::string::size_type v234;
  int v235;
  int v236;
  int v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  std::string::size_type v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int8 *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  std::string::size_type v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v283;
  _QWORD v284[3];
  __int16 v285;
  _QWORD v286[3];
  __int16 v287;
  void **__dst;
  std::string::size_type v289;
  uint64_t v290;
  std::string v291;
  __int16 v292;
  void *__p;
  __int128 v294;
  uint64_t v295;
  _QWORD v296[2];
  std::string v297;
  _WORD v298[64];
  uint64_t v299;

  v299 = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned int *)(a1 + 10680);
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 104) + 24);
  v3 = v2 != 0;
  v4 = v1 > v2;
  v5 = !v3 || !v4;
  if (v3 && v4)
    v6 = v2 >> 1;
  else
    v6 = 0;
  if (v5)
    v7 = *(_DWORD *)(a1 + 10680);
  else
    v7 = (v2 & 1) + (v2 >> 1);
  if ((_DWORD)v1)
  {
    v9 = 0;
    v10 = v1 - v6;
    v283 = *(_QWORD *)(a1 + 10672);
    v11 = v283 + (v1 << 6);
    v282 = v1 - v6;
    while (v9 >= v7 && v9 < v10)
    {
      if (v9 == v7)
      {
        v12 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v12 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v12 + 316) = 5687;
        if (*(char *)(v12 + 311) < 0)
        {
          **(_BYTE **)(v12 + 288) = 0;
          *(_QWORD *)(v12 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v12 + 288) = 0;
          *(_BYTE *)(v12 + 311) = 0;
        }
        v19 = (unsigned __int8 *)(v12 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v12 + 320;
        v297.__r_.__value_.__r.__words[2] = v12;
        v298[0] = 1;
        *(_BYTE *)(v12 + 320) = 0;
        *(_DWORD *)(v12 + 664) = 0;
        v20 = *(unsigned int *)(v12 + 776);
        if ((_DWORD)v20)
        {
          v21 = *(_QWORD *)(v12 + 768);
          v22 = 56 * v20;
          do
          {
            if (*(char *)(v21 + v22 - 9) < 0)
              operator delete(*(void **)(v21 + v22 - 32));
            v22 -= 56;
          }
          while (v22);
          v19 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v12 + 776) = 0;
          v23 = *(_DWORD *)(a1 + 10680);
          if (!v19)
          {
            v19 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          }
        }
        else
        {
          *(_DWORD *)(v12 + 776) = 0;
          v23 = *(_DWORD *)(a1 + 10680);
        }
        v19[*v19 + 1] = 3;
        v24 = v297.__r_.__value_.__r.__words[0];
        v25 = *v297.__r_.__value_.__l.__data_;
        *v297.__r_.__value_.__l.__data_ = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25 + 16) = (v23 - v2);
LABEL_514:
        v100 = &v297;
LABEL_515:
        sub_22E3BB0B8((uint64_t)v100);
      }
LABEL_516:
      v11 -= 64;
      ++v9;
      if (v11 == v283)
        return;
    }
    switch(*(_DWORD *)(v11 - 64))
    {
      case 0:
        v13 = *(_QWORD *)(v11 - 48);
        v14 = *(_DWORD *)(v13 + 28) & 0x7F;
        v15 = *(_DWORD *)(v13 + 28) & 0x7E;
        if (v13)
          v16 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
        else
          v16 = 0;
        if (v16)
        {
          if (v15 == 36)
            v62 = 6100;
          else
            v62 = 6108;
          v63 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v63 + 316) = v62;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          v108 = (unsigned __int8 *)(v63 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v63 + 320;
          v297.__r_.__value_.__r.__words[2] = v63;
          v298[0] = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v145 = *(unsigned int *)(v63 + 776);
          if (!(_DWORD)v145)
            goto LABEL_511;
          v146 = *(_QWORD *)(v63 + 768);
          v147 = 56 * v145;
          do
          {
            if (*(char *)(v146 + v147 - 9) < 0)
              operator delete(*(void **)(v146 + v147 - 32));
            v147 -= 56;
          }
          while (v147);
        }
        else if (v13 && (v15 - 58) >= 0xFFFFFFFA)
        {
          v17 = *(_QWORD *)(v13 + 144) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v13 + 144) & 6) != 4 || v17 == 0)
            v205 = 0;
          else
            v205 = *(_QWORD *)(v17 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v205)
            v206 = 5650;
          else
            v206 = 6109;
          v63 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v63 + 316) = v206;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          v108 = (unsigned __int8 *)(v63 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v63 + 320;
          v297.__r_.__value_.__r.__words[2] = v63;
          v298[0] = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v207 = *(unsigned int *)(v63 + 776);
          if (!(_DWORD)v207)
            goto LABEL_511;
          v208 = *(_QWORD *)(v63 + 768);
          v209 = 56 * v207;
          do
          {
            if (*(char *)(v208 + v209 - 9) < 0)
              operator delete(*(void **)(v208 + v209 - 32));
            v209 -= 56;
          }
          while (v209);
        }
        else if (v13 && (v14 - 67) >= 0xFFFFFFF9)
        {
          if (v14 == 64)
          {
            v143 = 6125;
          }
          else
          {
            v222 = *(_QWORD *)(v13 + 16);
            v223 = v222 & 0xFFFFFFFFFFFFFFF8;
            if ((v222 & 4) != 0)
              v223 = *(_QWORD *)v223;
            if ((*(_WORD *)(v223 + 8) & 0x7Eu) - 34 >= 4)
              v143 = 6125;
            else
              v143 = 6122;
          }
          v63 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v63 + 316) = v143;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          v108 = (unsigned __int8 *)(v63 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v63 + 320;
          v297.__r_.__value_.__r.__words[2] = v63;
          v298[0] = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v242 = *(unsigned int *)(v63 + 776);
          if (!(_DWORD)v242)
          {
LABEL_511:
            *(_DWORD *)(v63 + 776) = 0;
            goto LABEL_512;
          }
          v243 = *(_QWORD *)(v63 + 768);
          v244 = 56 * v242;
          do
          {
            if (*(char *)(v243 + v244 - 9) < 0)
              operator delete(*(void **)(v243 + v244 - 32));
            v244 -= 56;
          }
          while (v244);
        }
        else if (v13 && v14 == 33)
        {
          v63 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v63 + 316) = 6105;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          v108 = (unsigned __int8 *)(v63 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v63 + 320;
          v297.__r_.__value_.__r.__words[2] = v63;
          v298[0] = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v253 = *(unsigned int *)(v63 + 776);
          if (!(_DWORD)v253)
            goto LABEL_511;
          v254 = *(_QWORD *)(v63 + 768);
          v255 = 56 * v253;
          do
          {
            if (*(char *)(v254 + v255 - 9) < 0)
              operator delete(*(void **)(v254 + v255 - 32));
            v255 -= 56;
          }
          while (v255);
        }
        else if (v13 && (v14 - 52) >= 0xFFFFFFFD)
        {
          v63 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v63 + 316) = 6112;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          v108 = (unsigned __int8 *)(v63 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v63 + 320;
          v297.__r_.__value_.__r.__words[2] = v63;
          v298[0] = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v275 = *(unsigned int *)(v63 + 776);
          if (!(_DWORD)v275)
            goto LABEL_511;
          v276 = *(_QWORD *)(v63 + 768);
          v277 = 56 * v275;
          do
          {
            if (*(char *)(v276 + v277 - 9) < 0)
              operator delete(*(void **)(v276 + v277 - 32));
            v277 -= 56;
          }
          while (v277);
        }
        else
        {
          v63 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v63 + 316) = 6123;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          v108 = (unsigned __int8 *)(v63 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v63 + 320;
          v297.__r_.__value_.__r.__words[2] = v63;
          v298[0] = 1;
          *(_BYTE *)(v63 + 320) = 0;
          *(_DWORD *)(v63 + 664) = 0;
          v272 = *(unsigned int *)(v63 + 776);
          if (!(_DWORD)v272)
            goto LABEL_511;
          v273 = *(_QWORD *)(v63 + 768);
          v274 = 56 * v272;
          do
          {
            if (*(char *)(v273 + v274 - 9) < 0)
              operator delete(*(void **)(v273 + v274 - 32));
            v274 -= 56;
          }
          while (v274);
        }
        v108 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v63 + 776) = 0;
        v10 = v282;
        if (v108)
          goto LABEL_512;
LABEL_510:
        v108 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
        v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
LABEL_512:
        v108[*v108 + 1] = 11;
        v278 = v297.__r_.__value_.__r.__words[0];
        v279 = *v297.__r_.__value_.__l.__data_;
        *v297.__r_.__value_.__l.__data_ = v279 + 1;
        *(_QWORD *)(v278 + 8 * v279 + 16) = v13;
        v142 = *(_QWORD *)(v11 - 8);
        v141 = v278 + 336;
LABEL_513:
        sub_22E4D6448(v141, v142, 1);
        goto LABEL_514;
      case 1:
        v231 = *(_QWORD *)(v11 - 40);
        v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
        *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F44E310;
        sub_22F242C48((uint64_t)&__p, (uint64_t)&v297);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v231 + 88))(v231, &__p);
        v232 = *(_QWORD *)(v11 - 32);
        v233 = *(unsigned int *)(v11 - 24);
        v291.__r_.__value_.__r.__words[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
        v291.__r_.__value_.__l.__size_ = v234;
        sub_22F117B8C((llvm::raw_ostream *)&__p, v232, v233, (uint64_t)&v291, 0, 0, 0);
        v230 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v230 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v230 + 316) = 5525;
        if (*(char *)(v230 + 311) < 0)
        {
          **(_BYTE **)(v230 + 288) = 0;
          *(_QWORD *)(v230 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v230 + 288) = 0;
          *(_BYTE *)(v230 + 311) = 0;
        }
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v230 + 320;
        v291.__r_.__value_.__r.__words[2] = v230;
        v292 = 1;
        *(_BYTE *)(v230 + 320) = 0;
        *(_DWORD *)(v230 + 664) = 0;
        v259 = *(unsigned int *)(v230 + 776);
        if ((_DWORD)v259)
        {
          v260 = *(_QWORD *)(v230 + 768);
          v261 = 56 * v259;
          do
          {
            if (*(char *)(v260 + v261 - 9) < 0)
              operator delete(*(void **)(v260 + v261 - 32));
            v261 -= 56;
          }
          while (v261);
        }
        goto LABEL_475;
      case 2:
        v224 = *(_QWORD *)(*(_QWORD *)(v11 - 48) + 16);
        v225 = (_QWORD *)(v224 & 0xFFFFFFFFFFFFFFF8);
        if ((v224 & 4) != 0)
          v225 = (_QWORD *)*v225;
        if (v225)
          v226 = v225 - 9;
        else
          v226 = 0;
        v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
        *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F44E310;
        sub_22F242C48((uint64_t)&__p, (uint64_t)&v297);
        (*(void (**)(_QWORD *, void **))(*v226 + 88))(v226, &__p);
        v227 = *(_QWORD *)(v11 - 32);
        v228 = *(unsigned int *)(v11 - 24);
        v291.__r_.__value_.__r.__words[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
        v291.__r_.__value_.__l.__size_ = v229;
        sub_22F117B8C((llvm::raw_ostream *)&__p, v227, v228, (uint64_t)&v291, 0, 0, 0);
        v230 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v230 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v230 + 316) = 5527;
        if (*(char *)(v230 + 311) < 0)
        {
          **(_BYTE **)(v230 + 288) = 0;
          *(_QWORD *)(v230 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v230 + 288) = 0;
          *(_BYTE *)(v230 + 311) = 0;
        }
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v230 + 320;
        v291.__r_.__value_.__r.__words[2] = v230;
        v292 = 1;
        *(_BYTE *)(v230 + 320) = 0;
        *(_DWORD *)(v230 + 664) = 0;
        v256 = *(unsigned int *)(v230 + 776);
        if ((_DWORD)v256)
        {
          v257 = *(_QWORD *)(v230 + 768);
          v258 = 56 * v256;
          do
          {
            if (*(char *)(v257 + v258 - 9) < 0)
              operator delete(*(void **)(v257 + v258 - 32));
            v258 -= 56;
          }
          while (v258);
        }
        goto LABEL_475;
      case 3:
        v29 = *(_QWORD *)(v11 - 48);
        v30 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v30 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v30 + 316) = 5609;
        if (*(char *)(v30 + 311) < 0)
        {
          **(_BYTE **)(v30 + 288) = 0;
          *(_QWORD *)(v30 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v30 + 288) = 0;
          *(_BYTE *)(v30 + 311) = 0;
        }
        v93 = (unsigned __int8 *)(v30 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v30 + 320;
        v297.__r_.__value_.__r.__words[2] = v30;
        v298[0] = 1;
        *(_BYTE *)(v30 + 320) = 0;
        *(_DWORD *)(v30 + 664) = 0;
        v94 = *(unsigned int *)(v30 + 776);
        if (!(_DWORD)v94)
          goto LABEL_271;
        v95 = *(_QWORD *)(v30 + 768);
        v96 = 56 * v94;
        do
        {
          if (*(char *)(v95 + v96 - 9) < 0)
            operator delete(*(void **)(v95 + v96 - 32));
          v96 -= 56;
        }
        while (v96);
        goto LABEL_269;
      case 4:
        v29 = *(_QWORD *)(v11 - 48);
        v33 = *(_DWORD *)(v29 + 28) & 0x7F;
        if (v29)
          v34 = v33 == 29;
        else
          v34 = 0;
        if (v34)
        {
          v30 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v30 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v30 + 316) = 5649;
          if (*(char *)(v30 + 311) < 0)
          {
            **(_BYTE **)(v30 + 288) = 0;
            *(_QWORD *)(v30 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v30 + 288) = 0;
            *(_BYTE *)(v30 + 311) = 0;
          }
          v93 = (unsigned __int8 *)(v30 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v30 + 320;
          v297.__r_.__value_.__r.__words[2] = v30;
          v298[0] = 1;
          *(_BYTE *)(v30 + 320) = 0;
          *(_DWORD *)(v30 + 664) = 0;
          v148 = *(unsigned int *)(v30 + 776);
          if ((_DWORD)v148)
          {
            v149 = *(_QWORD *)(v30 + 768);
            v150 = 56 * v148;
            do
            {
              if (*(char *)(v149 + v150 - 9) < 0)
                operator delete(*(void **)(v149 + v150 - 32));
              v150 -= 56;
            }
            while (v150);
LABEL_269:
            v93 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
            *(_DWORD *)(v30 + 776) = 0;
            v10 = v282;
            if (!v93)
            {
              v93 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
              v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
            }
          }
          else
          {
LABEL_271:
            *(_DWORD *)(v30 + 776) = 0;
          }
          v93[*v93 + 1] = 11;
          v151 = v297.__r_.__value_.__r.__words[0];
          v152 = *v297.__r_.__value_.__l.__data_;
          *v297.__r_.__value_.__l.__data_ = v152 + 1;
          *(_QWORD *)(v151 + 8 * v152 + 16) = v29;
          sub_22ED730EC(a1, *(_QWORD *)(v29 + 56), *(_QWORD *)(v11 - 32), *(_DWORD *)(v11 - 24), &__p);
          if (v294 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v294 >= 0)
            v154 = HIBYTE(v294) & 0x7F;
          else
            v154 = v294;
          sub_22E3B89A8((unsigned __int8 **)&v297, p_p, v154);
          v155 = *(_QWORD *)(v11 - 8);
          v156 = v297.__r_.__value_.__r.__words[0];
          if (!v297.__r_.__value_.__r.__words[0])
          {
LABEL_279:
            v156 = sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = v156;
          }
        }
        else
        {
          v36 = v33 == 31 || (v33 - 65) < 2;
          if (v29 && (v33 - 33) >= 0xFFFFFFF9)
          {
            v37 = (uint64_t *)(v29 + 56);
            v38 = 1;
          }
          else if (v29 && v33 == 37)
          {
            v38 = 0;
            v37 = (uint64_t *)(v29 + 184);
          }
          else
          {
            v38 = 0;
            if (v33 == 66)
              v186 = *(_QWORD *)(v11 - 48);
            else
              v186 = 0;
            v37 = (uint64_t *)(v186 + 424);
          }
          v187 = *v37;
          v188 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v188 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v188 + 316) = 5522;
          v280 = v2;
          if (*(char *)(v188 + 311) < 0)
          {
            **(_BYTE **)(v188 + 288) = 0;
            *(_QWORD *)(v188 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v188 + 288) = 0;
            *(_BYTE *)(v188 + 311) = 0;
          }
          v189 = (unsigned __int8 *)(v188 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v188 + 320;
          v297.__r_.__value_.__r.__words[2] = v188;
          v298[0] = 1;
          *(_BYTE *)(v188 + 320) = 0;
          *(_DWORD *)(v188 + 664) = 0;
          v190 = *(unsigned int *)(v188 + 776);
          if ((_DWORD)v190)
          {
            v191 = v38;
            v192 = v36;
            v193 = *(_QWORD *)(v188 + 768);
            v194 = 56 * v190;
            do
            {
              if (*(char *)(v193 + v194 - 9) < 0)
                operator delete(*(void **)(v193 + v194 - 32));
              v194 -= 56;
            }
            while (v194);
            v189 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
            *(_DWORD *)(v188 + 776) = 0;
            v36 = v192;
            v38 = v191;
            if (!v189)
            {
              v189 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
              v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
            }
          }
          else
          {
            *(_DWORD *)(v188 + 776) = 0;
          }
          v189[*v189 + 1] = 2;
          v195 = v297.__r_.__value_.__r.__words[0];
          v196 = *v297.__r_.__value_.__l.__data_;
          *v297.__r_.__value_.__l.__data_ = v196 + 1;
          *(_QWORD *)(v195 + 8 * v196 + 16) = v36;
          *(_BYTE *)(v195 + (v196 + 1) + 1) = 2;
          v197 = v297.__r_.__value_.__r.__words[0];
          v198 = *v297.__r_.__value_.__l.__data_;
          v199 = v198 + 1;
          *v297.__r_.__value_.__l.__data_ = v198 + 1;
          *(_QWORD *)(v197 + 8 * v198 + 16) = v38;
          v200 = *(_QWORD *)(v11 - 48);
          *(_BYTE *)(v197 + v199 + 1) = 11;
          v201 = v297.__r_.__value_.__r.__words[0];
          v202 = *v297.__r_.__value_.__l.__data_;
          *v297.__r_.__value_.__l.__data_ = v202 + 1;
          *(_QWORD *)(v201 + 8 * v202 + 16) = v200;
          sub_22ED730EC(a1, v187, *(_QWORD *)(v11 - 32), *(_DWORD *)(v11 - 24), &__p);
          if (v294 >= 0)
            v203 = &__p;
          else
            v203 = __p;
          if (v294 >= 0)
            v204 = HIBYTE(v294) & 0x7F;
          else
            v204 = v294;
          sub_22E3B89A8((unsigned __int8 **)&v297, v203, v204);
          v155 = *(_QWORD *)(v11 - 8);
          v156 = v297.__r_.__value_.__r.__words[0];
          v10 = v282;
          v2 = v280;
          if (!v297.__r_.__value_.__r.__words[0])
            goto LABEL_279;
        }
        sub_22E4D6448(v156 + 336, v155, 1);
        if (SHIBYTE(v294) < 0)
LABEL_281:
          operator delete(__p);
        goto LABEL_514;
      case 5:
        v40 = *(_QWORD *)(v11 - 48);
        __p = 0;
        v294 = 0uLL;
        v41 = *(_QWORD *)(v40 + 40) & 0xFFFFFFFFFFFFFFF8;
        v42 = (*(_QWORD *)(v40 + 40) & 7) != 0 || v41 == 0;
        if (v42 || !**(_DWORD **)(v41 + 16))
          goto LABEL_301;
        *((_BYTE *)&v291.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v291, " '");
        v43 = *(unsigned int **)(v41 + 16);
        v46 = *v43;
        v45 = v43 + 4;
        v44 = v46;
        if (v46 >= 0x17uLL)
        {
          v157 = v2;
          if ((v44 | 7) == 0x17)
            v158 = (v44 & 0xFFFFFFF8) + 8;
          else
            v158 = v44 | 7;
          p_dst = (void **)operator new(v158 + 1);
          v159 = v158 - 0x7FFFFFFFFFFFFFFFLL;
          v2 = v157;
          v289 = v44;
          v290 = v159;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v290) = v44;
          p_dst = (void **)&__dst;
          if (!v44)
            goto LABEL_287;
        }
        memmove(p_dst, v45, v44);
LABEL_287:
        *((_BYTE *)p_dst + v44) = 0;
        if (v290 >= 0)
          v160 = (const std::string::value_type *)&__dst;
        else
          v160 = (const std::string::value_type *)__dst;
        if (v290 >= 0)
          v161 = HIBYTE(v290) & 0x7F;
        else
          v161 = v289;
        v162 = std::string::append(&v291, v160, v161);
        v163 = v162->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
        v297.__r_.__value_.__r.__words[2] = v163;
        v162->__r_.__value_.__l.__size_ = 0;
        v162->__r_.__value_.__r.__words[2] = 0;
        v162->__r_.__value_.__r.__words[0] = 0;
        v164 = std::string::append(&v297, "'");
        v165 = (void *)v164->__r_.__value_.__r.__words[0];
        v296[0] = v164->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v296 + 7) = *(std::string::size_type *)((char *)&v164->__r_.__value_.__r.__words[1] + 7);
        v166 = HIBYTE(v164->__r_.__value_.__r.__words[2]);
        v164->__r_.__value_.__l.__size_ = 0;
        v164->__r_.__value_.__r.__words[2] = 0;
        v164->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v294) < 0)
          operator delete(__p);
        __p = v165;
        *(_QWORD *)&v294 = v296[0];
        *(_QWORD *)((char *)&v294 + 7) = *(_QWORD *)((char *)v296 + 7);
        HIBYTE(v294) = v166;
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v297.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290) < 0)
          operator delete(__dst);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
LABEL_301:
        v167 = *(_QWORD *)(v11 - 40);
        v168 = (*(_DWORD *)(v167 + 28) & 0x7Fu) - 33 < 0xFFFFFFF9 || v167 == 0;
        v169 = 56;
        if (v168)
          v169 = 184;
        v170 = *(_QWORD *)(v167 + v169);
        v171 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v171 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v171 + 316) = 6012;
        if (*(char *)(v171 + 311) < 0)
        {
          **(_BYTE **)(v171 + 288) = 0;
          *(_QWORD *)(v171 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v171 + 288) = 0;
          *(_BYTE *)(v171 + 311) = 0;
        }
        v172 = (unsigned __int8 *)(v171 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v171 + 320;
        v297.__r_.__value_.__r.__words[2] = v171;
        v298[0] = 1;
        *(_BYTE *)(v171 + 320) = 0;
        *(_DWORD *)(v171 + 664) = 0;
        v173 = *(unsigned int *)(v171 + 776);
        if ((_DWORD)v173)
        {
          v174 = v2;
          v175 = *(_QWORD *)(v171 + 768);
          v176 = 56 * v173;
          do
          {
            if (*(char *)(v175 + v176 - 9) < 0)
              operator delete(*(void **)(v175 + v176 - 32));
            v176 -= 56;
          }
          while (v176);
          v172 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v171 + 776) = 0;
          v177 = *(_DWORD *)(v40 + 28);
          v2 = v174;
          if (!v172)
          {
            v172 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
          }
        }
        else
        {
          *(_DWORD *)(v171 + 776) = 0;
          v177 = *(_DWORD *)(v40 + 28);
        }
        v10 = v282;
        v172[*v172 + 1] = 2;
        v178 = v297.__r_.__value_.__r.__words[0];
        v179 = *v297.__r_.__value_.__l.__data_;
        *v297.__r_.__value_.__l.__data_ = v179 + 1;
        *(_QWORD *)(v178 + 8 * v179 + 16) = (v177 & 0x7F) == 32;
        if (v294 >= 0)
          v180 = &__p;
        else
          v180 = __p;
        if (v294 >= 0)
          v181 = HIBYTE(v294) & 0x7F;
        else
          v181 = v294;
        sub_22E3B89A8((unsigned __int8 **)&v297, v180, v181);
        sub_22ED730EC(a1, v170, *(_QWORD *)(v11 - 32), *(_DWORD *)(v11 - 24), &v291);
        if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v182 = &v291;
        else
          v182 = (std::string *)v291.__r_.__value_.__r.__words[0];
        if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v291.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v291.__r_.__value_.__l.__size_;
        sub_22E3B89A8((unsigned __int8 **)&v297, v182, size);
        v184 = *(_QWORD *)(v11 - 8);
        v185 = v297.__r_.__value_.__r.__words[0];
        if (!v297.__r_.__value_.__r.__words[0])
        {
          v185 = sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
          v297.__r_.__value_.__r.__words[0] = v185;
        }
        sub_22E4D6448(v185 + 336, v184, 1);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
        sub_22E3BB0B8((uint64_t)&v297);
        if (SHIBYTE(v294) < 0)
          operator delete(__p);
        goto LABEL_516;
      case 6:
        v50 = *(_QWORD *)(v11 - 40);
        v51 = (*(_DWORD *)(v50 + 28) & 0x7Fu) - 33 < 0xFFFFFFF9 || v50 == 0;
        v52 = 56;
        if (v51)
          v52 = 184;
        v53 = *(_QWORD *)(v50 + v52);
        v54 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v54 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v54 + 316) = 6104;
        if (*(char *)(v54 + 311) < 0)
        {
          **(_BYTE **)(v54 + 288) = 0;
          *(_QWORD *)(v54 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v54 + 288) = 0;
          *(_BYTE *)(v54 + 311) = 0;
        }
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v54 + 320;
        v297.__r_.__value_.__r.__words[2] = v54;
        v298[0] = 1;
        *(_BYTE *)(v54 + 320) = 0;
        *(_DWORD *)(v54 + 664) = 0;
        v120 = *(unsigned int *)(v54 + 776);
        if ((_DWORD)v120)
        {
          v121 = *(_QWORD *)(v54 + 768);
          v122 = 56 * v120;
          do
          {
            if (*(char *)(v121 + v122 - 9) < 0)
              operator delete(*(void **)(v121 + v122 - 32));
            v122 -= 56;
          }
          while (v122);
        }
        *(_DWORD *)(v54 + 776) = 0;
        sub_22ED730EC(a1, v53, *(_QWORD *)(v11 - 32), *(_DWORD *)(v11 - 24), &__p);
        if (v294 >= 0)
          v123 = &__p;
        else
          v123 = __p;
        if (v294 >= 0)
          v124 = HIBYTE(v294) & 0x7F;
        else
          v124 = v294;
        sub_22E3B89A8((unsigned __int8 **)&v297, v123, v124);
        v125 = *(_QWORD *)(v11 - 8);
        v126 = v297.__r_.__value_.__r.__words[0];
        if (!v297.__r_.__value_.__r.__words[0])
        {
          v126 = sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
          v297.__r_.__value_.__r.__words[0] = v126;
        }
        sub_22E4D6448(v126 + 336, v125, 1);
        v10 = v282;
        if ((SHIBYTE(v294) & 0x80000000) == 0)
          goto LABEL_514;
        goto LABEL_281;
      case 7:
        v48 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v48 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v48 + 316) = 5583;
        if (*(char *)(v48 + 311) < 0)
        {
          **(_BYTE **)(v48 + 288) = 0;
          *(_QWORD *)(v48 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v48 + 288) = 0;
          *(_BYTE *)(v48 + 311) = 0;
        }
        v104 = (unsigned __int8 *)(v48 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v48 + 320;
        v297.__r_.__value_.__r.__words[2] = v48;
        v298[0] = 1;
        *(_BYTE *)(v48 + 320) = 0;
        *(_DWORD *)(v48 + 664) = 0;
        v112 = *(unsigned int *)(v48 + 776);
        if (!(_DWORD)v112)
          goto LABEL_200;
        v113 = *(_QWORD *)(v48 + 768);
        v114 = 56 * v112;
        do
        {
          if (*(char *)(v113 + v114 - 9) < 0)
            operator delete(*(void **)(v113 + v114 - 32));
          v114 -= 56;
        }
        while (v114);
        goto LABEL_198;
      case 8:
        v49 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v49 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v49 + 316) = 6106;
        if (*(char *)(v49 + 311) < 0)
        {
          **(_BYTE **)(v49 + 288) = 0;
          *(_QWORD *)(v49 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v49 + 288) = 0;
          *(_BYTE *)(v49 + 311) = 0;
        }
        v108 = (unsigned __int8 *)(v49 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v49 + 320;
        v297.__r_.__value_.__r.__words[2] = v49;
        v298[0] = 1;
        *(_BYTE *)(v49 + 320) = 0;
        *(_DWORD *)(v49 + 664) = 0;
        v109 = *(unsigned int *)(v49 + 776);
        if (!(_DWORD)v109)
        {
          *(_DWORD *)(v49 + 776) = 0;
          v13 = *(_QWORD *)(v11 - 48);
          goto LABEL_512;
        }
        v110 = *(_QWORD *)(v49 + 768);
        v111 = 56 * v109;
        do
        {
          if (*(char *)(v110 + v111 - 9) < 0)
            operator delete(*(void **)(v110 + v111 - 32));
          v111 -= 56;
        }
        while (v111);
        v108 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v49 + 776) = 0;
        v13 = *(_QWORD *)(v11 - 48);
        if (!v108)
          goto LABEL_510;
        goto LABEL_512;
      case 9:
        v27 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v27 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v27 + 316) = 6121;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v74 = v27 + 320;
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v27 + 320;
        v297.__r_.__value_.__r.__words[2] = v27;
        v298[0] = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v90 = *(unsigned int *)(v27 + 776);
        if (!(_DWORD)v90)
          goto LABEL_245;
        v91 = *(_QWORD *)(v27 + 768);
        v92 = 56 * v90;
        do
        {
          if (*(char *)(v91 + v92 - 9) < 0)
            operator delete(*(void **)(v91 + v92 - 32));
          v92 -= 56;
        }
        while (v92);
        goto LABEL_243;
      case 0xA:
        v27 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v27 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v27 + 316) = 5826;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v74 = v27 + 320;
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v27 + 320;
        v297.__r_.__value_.__r.__words[2] = v27;
        v298[0] = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v87 = *(unsigned int *)(v27 + 776);
        if (!(_DWORD)v87)
          goto LABEL_245;
        v88 = *(_QWORD *)(v27 + 768);
        v89 = 56 * v87;
        do
        {
          if (*(char *)(v88 + v89 - 9) < 0)
            operator delete(*(void **)(v88 + v89 - 32));
          v89 -= 56;
        }
        while (v89);
        goto LABEL_243;
      case 0xB:
        v28 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v28 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v28 + 316) = 5672;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        v78 = (unsigned __int8 *)(v28 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v28 + 320;
        v297.__r_.__value_.__r.__words[2] = v28;
        v298[0] = 1;
        *(_BYTE *)(v28 + 320) = 0;
        *(_DWORD *)(v28 + 664) = 0;
        v79 = *(unsigned int *)(v28 + 776);
        if ((_DWORD)v79)
        {
          v80 = *(_QWORD *)(v28 + 768);
          v81 = 56 * v79;
          do
          {
            if (*(char *)(v80 + v81 - 9) < 0)
              operator delete(*(void **)(v80 + v81 - 32));
            v81 -= 56;
          }
          while (v81);
          v78 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v28 + 776) = 0;
          v82 = *(_QWORD *)(v11 - 48);
          if (!v78)
          {
            v78 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          }
        }
        else
        {
          *(_DWORD *)(v28 + 776) = 0;
          v82 = *(_QWORD *)(v11 - 48);
        }
        v78[*v78 + 1] = 11;
        v83 = v297.__r_.__value_.__r.__words[0];
        v84 = *v297.__r_.__value_.__l.__data_;
        v85 = v84 + 1;
        *v297.__r_.__value_.__l.__data_ = v84 + 1;
        *(_QWORD *)(v83 + 8 * v84 + 16) = v82;
        v86 = *(int *)(v11 - 24);
        goto LABEL_229;
      case 0xC:
        v31 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v31 + 312) = *(_DWORD *)(*(_QWORD *)(v11 - 48) + 24);
        *(_DWORD *)(v31 + 316) = 5671;
        if (*(char *)(v31 + 311) < 0)
        {
          **(_BYTE **)(v31 + 288) = 0;
          *(_QWORD *)(v31 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v31 + 288) = 0;
          *(_BYTE *)(v31 + 311) = 0;
        }
        v286[0] = v31 + 320;
        v286[1] = 0;
        v286[2] = v31;
        v287 = 1;
        *(_BYTE *)(v31 + 320) = 0;
        *(_DWORD *)(v31 + 664) = 0;
        v97 = *(unsigned int *)(v31 + 776);
        if ((_DWORD)v97)
        {
          v98 = *(_QWORD *)(v31 + 768);
          v99 = 56 * v97;
          do
          {
            if (*(char *)(v98 + v99 - 9) < 0)
              operator delete(*(void **)(v98 + v99 - 32));
            v99 -= 56;
          }
          while (v99);
        }
        *(_DWORD *)(v31 + 776) = 0;
        v100 = (std::string *)v286;
        goto LABEL_515;
      case 0xD:
        v56 = *(_QWORD *)(v11 - 48);
        if (v56)
          v57 = (*(_DWORD *)(v56 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
        else
          v57 = 0;
        if (!v57)
          goto LABEL_516;
        v58 = sub_22EAB3978(a1, *(_QWORD *)(v11 - 48));
        v59 = v58;
        if (v58 != 6)
        {
          v144 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v144 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v144 + 316) = 5719;
          if (*(char *)(v144 + 311) < 0)
          {
            **(_BYTE **)(v144 + 288) = 0;
            *(_QWORD *)(v144 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v144 + 288) = 0;
            *(_BYTE *)(v144 + 311) = 0;
          }
          v210 = (unsigned __int8 *)(v144 + 320);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v144 + 320;
          v297.__r_.__value_.__r.__words[2] = v144;
          v298[0] = 1;
          *(_BYTE *)(v144 + 320) = 0;
          *(_DWORD *)(v144 + 664) = 0;
          v211 = *(unsigned int *)(v144 + 776);
          if ((_DWORD)v211)
          {
            v281 = v2;
            v212 = *(_QWORD *)(v144 + 768);
            v213 = 56 * v211;
            do
            {
              if (*(char *)(v212 + v213 - 9) < 0)
                operator delete(*(void **)(v212 + v213 - 32));
              v213 -= 56;
            }
            while (v213);
            v210 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
            *(_DWORD *)(v144 + 776) = 0;
            v214 = *(_QWORD *)(v56 + 80);
            if (!v210)
            {
              v210 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
              v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
            }
            v2 = v281;
            v10 = v282;
          }
          else
          {
            *(_DWORD *)(v144 + 776) = 0;
            v214 = *(_QWORD *)(v56 + 80);
          }
          v210[*v210 + 1] = 2;
          v215 = v297.__r_.__value_.__r.__words[0];
          v216 = *v297.__r_.__value_.__l.__data_;
          *v297.__r_.__value_.__l.__data_ = v216 + 1;
          *(_QWORD *)(v215 + 8 * v216 + 16) = (v214 >> 26) & 1;
          *(_BYTE *)(v215 + (v216 + 1) + 1) = 2;
          v217 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          v218 = *v297.__r_.__value_.__l.__data_;
          *v297.__r_.__value_.__l.__data_ = v218 + 1;
          *(_QWORD *)&v217[8 * v218 + 16] = v59;
          v219 = *(_QWORD *)(a1 + 88);
          v220 = *(_WORD *)(v56 + 80) & 0x7F;
          v221 = -40;
          if (v220 > 0x46)
          {
            if (v220 != 83)
            {
              if (v220 == 71)
              {
                v221 = -56;
              }
              else if (v220 != 81)
              {
                goto LABEL_482;
              }
            }
          }
          else
          {
            if (v220 > 0x18)
              goto LABEL_481;
            if (v220 == 16)
              goto LABEL_388;
            if (((1 << v220) & 0x1066) == 0)
            {
              if (v220 == 24)
              {
LABEL_388:
                v221 = -48;
              }
              else
              {
LABEL_481:
                if (v220 == 70)
                {
                  v221 = -64;
                }
                else
                {
LABEL_482:
                  v267 = v220 - 52;
                  v16 = v220 - 33 >= 5;
                  v268 = -64;
                  if (v16)
                    v268 = -48;
                  v16 = v267 >= 6;
                  v221 = -72;
                  if (v16)
                    v221 = v268;
                }
              }
            }
          }
          v269 = *(_QWORD *)(v56 + 72 + v221 + 16);
          v252 = (_QWORD *)(v269 & 0xFFFFFFFFFFFFFFF8);
          if ((v269 & 4) != 0)
            v252 = (_QWORD *)*v252;
          goto LABEL_490;
        }
        v60 = v58;
        if (v58 < 0x100u)
          goto LABEL_516;
        v61 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v61 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v61 + 316) = 5484;
        if (*(char *)(v61 + 311) < 0)
        {
          **(_BYTE **)(v61 + 288) = 0;
          *(_QWORD *)(v61 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v61 + 288) = 0;
          *(_BYTE *)(v61 + 311) = 0;
        }
        v245 = (unsigned __int8 *)(v61 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v61 + 320;
        v297.__r_.__value_.__r.__words[2] = v61;
        v298[0] = 1;
        *(_BYTE *)(v61 + 320) = 0;
        *(_DWORD *)(v61 + 664) = 0;
        v246 = *(unsigned int *)(v61 + 776);
        if ((_DWORD)v246)
        {
          v247 = v2;
          v248 = *(_QWORD *)(v61 + 768);
          v249 = 56 * v246;
          do
          {
            if (*(char *)(v248 + v249 - 9) < 0)
              operator delete(*(void **)(v248 + v249 - 32));
            v249 -= 56;
          }
          while (v249);
          v245 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v61 + 776) = 0;
          v2 = v247;
          v10 = v282;
          if (!v245)
          {
            v245 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
          }
        }
        else
        {
          *(_DWORD *)(v61 + 776) = 0;
        }
        v245[*v245 + 1] = 2;
        v217 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
        v250 = *v297.__r_.__value_.__l.__data_;
        *v297.__r_.__value_.__l.__data_ = v250 + 1;
        *(_QWORD *)&v217[8 * v250 + 16] = v60 >> 8;
        v219 = *(_QWORD *)(a1 + 88);
        v251 = *(_QWORD *)(v56 + 16);
        v252 = (_QWORD *)(v251 & 0xFFFFFFFFFFFFFFF8);
        if ((v251 & 4) != 0)
          v252 = (_QWORD *)v252[1];
LABEL_490:
        if (v252)
          v270 = (unint64_t)(v252 - 8);
        else
          v270 = 0;
        v271 = *(_QWORD *)(v270 + 48);
        if (v271)
        {
          v115 = v271 & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          v115 = sub_22EF6462C(v219, v270);
          v217 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          if (!v297.__r_.__value_.__r.__words[0])
          {
            v217 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
          }
          v10 = v282;
        }
        v116 = &v217[*v217];
        v117 = 9;
LABEL_202:
        v116[1] = v117;
        v118 = v297.__r_.__value_.__r.__words[0];
        v119 = *v297.__r_.__value_.__l.__data_;
        *v297.__r_.__value_.__l.__data_ = v119 + 1;
        *(_QWORD *)(v118 + 8 * v119 + 16) = v115;
        break;
      case 0xE:
        v32 = *(_QWORD *)(v11 - 48);
        if (v32)
        {
          v235 = *(_DWORD *)(v32 + 28) & 0x7F;
          if (v235 == 37)
            v236 = 5477;
          else
            v236 = 5478;
          if (v235 == 66)
            v236 = 5480;
          if ((v235 - 26) >= 7)
            v237 = v236;
          else
            v237 = 5479;
          if (v235 == 27)
            v238 = 5488;
          else
            v238 = v237;
          v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
          *(_OWORD *)&v297.__r_.__value_.__r.__words[1] = xmmword_22F44E310;
          sub_22F242C48((uint64_t)&__p, (uint64_t)&v297);
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 - 48) + 88))(*(_QWORD *)(v11 - 48), &__p);
          if ((*(_DWORD *)(*(_QWORD *)(v11 - 48) + 28) & 0x7Eu) - 52 >= 6)
          {
            v239 = *(_QWORD *)(v11 - 32);
            v240 = *(unsigned int *)(v11 - 24);
            v291.__r_.__value_.__r.__words[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
            v291.__r_.__value_.__l.__size_ = v241;
            sub_22F117B8C((llvm::raw_ostream *)&__p, v239, v240, (uint64_t)&v291, 0, 0, 0);
          }
          v230 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)(v230 + 312) = *(_DWORD *)(v11 - 56);
          *(_DWORD *)(v230 + 316) = v238;
          if (*(char *)(v230 + 311) < 0)
          {
            **(_BYTE **)(v230 + 288) = 0;
            *(_QWORD *)(v230 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v230 + 288) = 0;
            *(_BYTE *)(v230 + 311) = 0;
          }
          *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v230 + 320;
          v291.__r_.__value_.__r.__words[2] = v230;
          v292 = 1;
          *(_BYTE *)(v230 + 320) = 0;
          *(_DWORD *)(v230 + 664) = 0;
          v262 = *(unsigned int *)(v230 + 776);
          if ((_DWORD)v262)
          {
            v263 = *(_QWORD *)(v230 + 768);
            v264 = 56 * v262;
            do
            {
              if (*(char *)(v263 + v264 - 9) < 0)
                operator delete(*(void **)(v263 + v264 - 32));
              v264 -= 56;
            }
            while (v264);
          }
LABEL_475:
          *(_DWORD *)(v230 + 776) = 0;
          sub_22E3B89A8((unsigned __int8 **)&v291, *(void **)v295, *(_QWORD *)(v295 + 8));
          v265 = *(_QWORD *)(v11 - 8);
          v266 = v291.__r_.__value_.__r.__words[0];
          if (!v291.__r_.__value_.__r.__words[0])
          {
            v266 = sub_22E3B8AAC(v291.__r_.__value_.__l.__size_);
            v291.__r_.__value_.__r.__words[0] = v266;
          }
          sub_22E4D6448(v266 + 336, v265, 1);
          sub_22E3BB0B8((uint64_t)&v291);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
          if (v297.__r_.__value_.__l.__data_ != (std::string::pointer)v298)
            free(v297.__r_.__value_.__l.__data_);
          goto LABEL_516;
        }
        v27 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v27 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v27 + 316) = 5826;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v74 = v27 + 320;
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v27 + 320;
        v297.__r_.__value_.__r.__words[2] = v27;
        v298[0] = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v138 = *(unsigned int *)(v27 + 776);
        if ((_DWORD)v138)
        {
          v139 = *(_QWORD *)(v27 + 768);
          v140 = 56 * v138;
          do
          {
            if (*(char *)(v139 + v140 - 9) < 0)
              operator delete(*(void **)(v139 + v140 - 32));
            v140 -= 56;
          }
          while (v140);
LABEL_243:
          v74 = v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v27 + 776) = 0;
          v73 = *(_QWORD *)(v11 - 8);
          if (!v74)
          {
LABEL_244:
            v74 = sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = v74;
          }
        }
        else
        {
LABEL_245:
          *(_DWORD *)(v27 + 776) = 0;
          v73 = *(_QWORD *)(v11 - 8);
        }
LABEL_246:
        v141 = v74 + 336;
        v142 = v73;
        goto LABEL_513;
      case 0xF:
        v27 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v27 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v27 + 316) = 5501;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v74 = v27 + 320;
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v27 + 320;
        v297.__r_.__value_.__r.__words[2] = v27;
        v298[0] = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v75 = *(unsigned int *)(v27 + 776);
        if (!(_DWORD)v75)
          goto LABEL_245;
        v76 = *(_QWORD *)(v27 + 768);
        v77 = 56 * v75;
        do
        {
          if (*(char *)(v76 + v77 - 9) < 0)
            operator delete(*(void **)(v76 + v77 - 32));
          v77 -= 56;
        }
        while (v77);
        goto LABEL_243;
      case 0x10:
        v26 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v26 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v26 + 316) = 5500;
        if (*(char *)(v26 + 311) < 0)
        {
          **(_BYTE **)(v26 + 288) = 0;
          *(_QWORD *)(v26 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v26 + 288) = 0;
          *(_BYTE *)(v26 + 311) = 0;
        }
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v26 + 320;
        v297.__r_.__value_.__r.__words[2] = v26;
        v298[0] = 1;
        *(_BYTE *)(v26 + 320) = 0;
        *(_DWORD *)(v26 + 664) = 0;
        v64 = *(unsigned int *)(v26 + 776);
        if ((_DWORD)v64)
        {
          v65 = *(_QWORD *)(v26 + 768);
          v66 = 56 * v64;
          do
          {
            if (*(char *)(v65 + v66 - 9) < 0)
              operator delete(*(void **)(v65 + v66 - 32));
            v66 -= 56;
          }
          while (v66);
        }
        *(_DWORD *)(v26 + 776) = 0;
        v67 = *(_QWORD *)(*(_QWORD *)(v11 - 48) + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)(v11 - 48) + 40) & 7) != 0 || v67 == 0)
        {
          v71 = 0;
          v70 = "";
        }
        else
        {
          v69 = *(_DWORD **)(v67 + 16);
          v72 = *v69;
          v70 = (char *)(v69 + 4);
          v71 = v72;
        }
        sub_22E3B89A8((unsigned __int8 **)&v297, v70, v71);
        v73 = *(_QWORD *)(v11 - 8);
        v74 = v297.__r_.__value_.__r.__words[0];
        if (!v297.__r_.__value_.__r.__words[0])
          goto LABEL_244;
        goto LABEL_246;
      case 0x11:
        v27 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v27 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v27 + 316) = 5976;
        if (*(char *)(v27 + 311) < 0)
        {
          **(_BYTE **)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v27 + 288) = 0;
          *(_BYTE *)(v27 + 311) = 0;
        }
        v74 = v27 + 320;
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v27 + 320;
        v297.__r_.__value_.__r.__words[2] = v27;
        v298[0] = 1;
        *(_BYTE *)(v27 + 320) = 0;
        *(_DWORD *)(v27 + 664) = 0;
        v135 = *(unsigned int *)(v27 + 776);
        if (!(_DWORD)v135)
          goto LABEL_245;
        v136 = *(_QWORD *)(v27 + 768);
        v137 = 56 * v135;
        do
        {
          if (*(char *)(v136 + v137 - 9) < 0)
            operator delete(*(void **)(v136 + v137 - 32));
          v137 -= 56;
        }
        while (v137);
        goto LABEL_243;
      case 0x12:
        v39 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v39 + 312) = *(_DWORD *)(*(_QWORD *)(v11 - 48) + 24);
        *(_DWORD *)(v39 + 316) = 6074;
        if (*(char *)(v39 + 311) < 0)
        {
          **(_BYTE **)(v39 + 288) = 0;
          *(_QWORD *)(v39 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v39 + 288) = 0;
          *(_BYTE *)(v39 + 311) = 0;
        }
        v284[0] = v39 + 320;
        v284[1] = 0;
        v284[2] = v39;
        v285 = 1;
        *(_BYTE *)(v39 + 320) = 0;
        *(_DWORD *)(v39 + 664) = 0;
        v101 = *(unsigned int *)(v39 + 776);
        if ((_DWORD)v101)
        {
          v102 = *(_QWORD *)(v39 + 768);
          v103 = 56 * v101;
          do
          {
            if (*(char *)(v102 + v103 - 9) < 0)
              operator delete(*(void **)(v102 + v103 - 32));
            v103 -= 56;
          }
          while (v103);
        }
        *(_DWORD *)(v39 + 776) = 0;
        v100 = (std::string *)v284;
        goto LABEL_515;
      case 0x13:
        v48 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v48 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v48 + 316) = 5669;
        if (*(char *)(v48 + 311) < 0)
        {
          **(_BYTE **)(v48 + 288) = 0;
          *(_QWORD *)(v48 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v48 + 288) = 0;
          *(_BYTE *)(v48 + 311) = 0;
        }
        v104 = (unsigned __int8 *)(v48 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v48 + 320;
        v297.__r_.__value_.__r.__words[2] = v48;
        v298[0] = 1;
        *(_BYTE *)(v48 + 320) = 0;
        *(_DWORD *)(v48 + 664) = 0;
        v105 = *(unsigned int *)(v48 + 776);
        if ((_DWORD)v105)
        {
          v106 = *(_QWORD *)(v48 + 768);
          v107 = 56 * v105;
          do
          {
            if (*(char *)(v106 + v107 - 9) < 0)
              operator delete(*(void **)(v106 + v107 - 32));
            v107 -= 56;
          }
          while (v107);
LABEL_198:
          v104 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v48 + 776) = 0;
          v115 = *(_QWORD *)(v11 - 48);
          if (!v104)
          {
            v104 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
          }
        }
        else
        {
LABEL_200:
          *(_DWORD *)(v48 + 776) = 0;
          v115 = *(_QWORD *)(v11 - 48);
        }
        v116 = &v104[*v104];
        v117 = 11;
        goto LABEL_202;
      case 0x14:
        v55 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)(v55 + 312) = *(_DWORD *)(v11 - 56);
        *(_DWORD *)(v55 + 316) = 5563;
        if (*(char *)(v55 + 311) < 0)
        {
          **(_BYTE **)(v55 + 288) = 0;
          *(_QWORD *)(v55 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v55 + 288) = 0;
          *(_BYTE *)(v55 + 311) = 0;
        }
        v127 = (unsigned __int8 *)(v55 + 320);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v55 + 320;
        v297.__r_.__value_.__r.__words[2] = v55;
        v298[0] = 1;
        *(_BYTE *)(v55 + 320) = 0;
        *(_DWORD *)(v55 + 664) = 0;
        v128 = *(unsigned int *)(v55 + 776);
        if ((_DWORD)v128)
        {
          v129 = *(_QWORD *)(v55 + 768);
          v130 = 56 * v128;
          do
          {
            if (*(char *)(v129 + v130 - 9) < 0)
              operator delete(*(void **)(v129 + v130 - 32));
            v130 -= 56;
          }
          while (v130);
          v127 = (unsigned __int8 *)v297.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v55 + 776) = 0;
          v131 = *(_QWORD *)(v11 - 48);
          if (!v127)
          {
            v127 = (unsigned __int8 *)sub_22E3B8AAC(v297.__r_.__value_.__l.__size_);
            v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
          }
        }
        else
        {
          *(_DWORD *)(v55 + 776) = 0;
          v131 = *(_QWORD *)(v11 - 48);
        }
        v127[*v127 + 1] = 11;
        v83 = v297.__r_.__value_.__r.__words[0];
        v132 = *v297.__r_.__value_.__l.__data_;
        v85 = v132 + 1;
        *v297.__r_.__value_.__l.__data_ = v132 + 1;
        *(_QWORD *)(v83 + 8 * v132 + 16) = v131;
        v86 = (**(_DWORD **)(a1 + 72) & 0x200) == 0;
LABEL_229:
        *(_BYTE *)(v83 + v85 + 1) = 2;
        v133 = v297.__r_.__value_.__r.__words[0];
        v134 = *v297.__r_.__value_.__l.__data_;
        *v297.__r_.__value_.__l.__data_ = v134 + 1;
        *(_QWORD *)(v133 + 8 * v134 + 16) = v86;
        goto LABEL_514;
      default:
        goto LABEL_516;
    }
    goto LABEL_514;
  }
}

uint64_t sub_22EE03478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int v6;
  int v7;
  int v8;

  if (*(_BYTE *)(a1 + 11952))
    return 0;
  v2 = *(_QWORD *)(a1 + 10672);
  v3 = *(unsigned int *)(a1 + 10680);
  v4 = v2 + (v3 << 6);
  for (i = v3 << 6; ; i -= 64)
  {
    if (!i)
      return 0;
    v6 = *(_DWORD *)(v4 - 64);
    if (v6 <= 0x14)
    {
      if (!v6)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v2 + i - 48) + 28) & 0x7F) != 0x1E)
          return 0;
        goto LABEL_11;
      }
      v7 = 1 << v6;
      if ((v7 & 0x1B7D04) != 0)
        return 0;
      if ((v7 & 0x8218) != 0)
        break;
    }
LABEL_11:
    v8 = *(unsigned __int8 *)(v4 - 60);
    v4 -= 64;
    if (v8)
      return 0;
  }
  return *(_QWORD *)(v2 + i - 16);
}

uint64_t sub_22EE03524(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  llvm *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;

  v6 = (uint64_t)a2;
  if ((*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
  {
    v10 = 0;
    v11 = 0;
    v9 = a1;
    v12 = 0;
    v13 = v17;
    v14 = v17;
    v15 = 2;
    v16 = 0;
    v17[2] = a3;
    v18 = a4;
    v19 = a5;
    if (a6)
      v7 = sub_22EE035DC((uint64_t)&v9, a2);
    else
      v7 = sub_22EE0391C(&v9);
    v6 = v7;
    if (v14 != v13)
      free(v14);
    llvm::deallocate_buffer(v10, (void *)(16 * v12));
  }
  return v6;
}

uint64_t sub_22EE035DC(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  unsigned __int32 v23;
  _QWORD *v24;
  int64x2_t v25;
  _QWORD v26[6];

  v2 = (unint64_t *)a2;
  v26[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EE0391C(a1);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  v9 = sub_22F115668(v4);
  v10 = *(_DWORD *)(a1 + 88);
  v11 = v10;
  if (v9)
  {
    *(_DWORD *)(a1 + 88) = v9;
    v11 = v9;
  }
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *v2;
  if (*v2 >= 0x10)
  {
    v14 = (unint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
    {
      v24 = v26;
      v25 = vdupq_n_s64(0x20uLL);
      v26[4] = 0;
      v15 = sub_22F11598C(v13);
      if (v25.i64[0] < (unint64_t)v15)
        sub_22EEB52C0((uint64_t *)&v24, v15);
      v16 = v13 & 0xF;
      if ((v13 & 0xF) != 0)
        v17 = v13;
      else
        v17 = 0;
      if ((v13 & 0xF) != 0)
      {
        v13 = *v14;
        if ((*v14 & 0xFFFFFFFFFFFFFFF0) != 0)
          v18 = *(_QWORD *)((char *)&unk_22F4995E8
                          + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF0)
                                                                         + 16) << 56) >> 53));
        else
          v18 = 1;
        v5 = (v5 + v18 - 1) & -v18;
      }
      v19 = sub_22EE23460((uint64_t *)a1, (uint64_t)&v24, v13, v5, 1);
      if (v19 < 0x10 || (v20 = v19, v16) && (v20 = sub_22E8C1750((_QWORD **)a1, v19, v17), v20 < 0x10))
      {
        v2 = 0;
      }
      else
      {
        v21 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        v22 = v25.i64[0] - v25.i64[1];
        v23 = v25.i32[0] - v25.i32[2];
        if (v25.i32[0] == v25.i32[2])
          v23 = sub_22F11598C(v20);
        v2 = (unint64_t *)sub_22E3CD3D4(v21 + 2032, v23 + 8, 3);
        *v2 = v20;
        memcpy(v2 + 1, (char *)v24 + v25.i64[1], v22);
      }
      if (v24 != v26)
      {
        if (v24)
          MEMORY[0x2348A0E84]();
      }
    }
    else
    {
      v24 = *(_QWORD **)a1;
      v25.i32[0] = v11;
      sub_22EB522D8((uint64_t)&v24, v13);
    }
  }
  *(_DWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v12;
  return (uint64_t)v2;
}

unint64_t *sub_22EE0391C(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int32 v19;
  uint64_t v21;
  int64x2_t v22;
  _BYTE v23[32];
  uint64_t v24;
  uint64_t v25;

  v2 = (unint64_t *)a2;
  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  v8 = sub_22F115668(v5);
  v9 = *(_DWORD *)(a1 + 88);
  v10 = v9;
  if (v8)
  {
    *(_DWORD *)(a1 + 88) = v8;
    v10 = v8;
  }
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *v2;
  if (*v2 >= 0x10)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
    {
      v21 = (uint64_t)v23;
      v22 = vdupq_n_s64(0x20uLL);
      v24 = 0;
      v13 = sub_22F11598C(v12);
      if (v22.i64[0] < (unint64_t)v13)
        sub_22EEB52C0(&v21, v13);
      v14 = sub_22EE03DE8((_QWORD **)a1, (uint64_t)&v21, v12, v4);
      if (v14 > 0xF)
      {
        v16 = v14;
        v17 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        v18 = v22.i64[0] - v22.i64[1];
        v19 = v22.i32[0] - v22.i32[2];
        if (v22.i32[0] == v22.i32[2])
          v19 = sub_22F11598C(v16);
        v2 = (unint64_t *)sub_22E3CD3D4(v17 + 2032, v19 + 8, 3);
        *v2 = v16;
        v15 = (_BYTE *)v21;
        memcpy(v2 + 1, (const void *)(v21 + v22.i64[1]), v18);
      }
      else
      {
        v2 = 0;
        v15 = (_BYTE *)v21;
      }
      if (v15 != v23 && v15)
        MEMORY[0x2348A0E84](v15, 0x1000C8077774924);
    }
    else
    {
      v21 = *(_QWORD *)a1;
      v22.i32[0] = v10;
      sub_22EB522D8((uint64_t)&v21, v12);
    }
  }
  *(_DWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v11;
  return v2;
}

_QWORD *sub_22EE03B98(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int32 v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v18;
  uint64_t *v19;
  uint64_t v20;
  int64x2_t v21;
  _QWORD v22[5];
  uint64_t *v23;
  llvm *v24[2];
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0x10)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
  {
    v24[0] = 0;
    v24[1] = 0;
    v22[4] = 0;
    v23 = a1;
    LODWORD(v25) = 0;
    v26 = (uint64_t)v30;
    v27 = v30;
    v28 = 2;
    LODWORD(v29) = 0;
    v31 = a4;
    LODWORD(v32) = a5;
    v33 = a6;
    v20 = (uint64_t)v22;
    v21 = vdupq_n_s64(0x20uLL);
    v9 = sub_22F11598C(a2);
    if (v21.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v20, v9);
    v10 = sub_22EE03DE8(&v23, &v20, a2, a3);
    if (v10 <= 0xF)
    {
      v15 = 0;
      v16 = (_QWORD *)v20;
    }
    else
    {
      v11 = v10;
      v12 = a1[11];
      v13 = v21.i64[0] - v21.i64[1];
      v14 = v21.i32[0] - v21.i32[2];
      if (v21.i32[0] == v21.i32[2])
        v14 = sub_22F11598C(v11);
      v15 = (_QWORD *)sub_22E3CD3D4(v12 + 2032, v14 + 8, 3);
      *v15 = v11;
      v16 = (_QWORD *)v20;
      memcpy(v15 + 1, (const void *)(v20 + v21.i64[1]), v13);
    }
    if (v16 != v22 && v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8077774924);
    if (v27 != (_BYTE *)v26)
      free(v27);
    llvm::deallocate_buffer(v24[0], (void *)(16 * v25));
  }
  else
  {
    v23 = &v25;
    *(int64x2_t *)v24 = vdupq_n_s64(0x20uLL);
    v29 = 0;
    sub_22EEB4368((uint64_t)&v23, a2, a3);
    v18 = v24[0] - v24[1];
    v15 = sub_22EF5DB78(a1[11], a2, LODWORD(v24[0]) - LODWORD(v24[1]));
    v19 = v23;
    memcpy(v15 + 1, (char *)v23 + (unint64_t)v24[1], v18);
    if (v19 != &v25 && v19)
      MEMORY[0x2348A0E84](v19, 0x1000C8077774924);
  }
  return v15;
}

unint64_t sub_22EE03DE8(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
    v7 = *(_QWORD *)((char *)&unk_22F4995E8
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v7 = 1;
  v8 = sub_22EE03DE8(a1, a2, v6, (a4 + v7 - 1) & -v7);
  v9 = 0;
  if (v8 >= 0x10)
  {
    v10 = sub_22E8C1750(a1, v8, a3);
    if (v10 >= 0x10)
      return v10;
    else
      return 0;
  }
  return v9;
}

void sub_22EE08D04()
{
  JUMPOUT(0x22EE087DCLL);
}

void sub_22EE08D18()
{
  JUMPOUT(0x22EE087DCLL);
}

unint64_t sub_22EE08D2C(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;

  v5 = a2;
  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
  {
    v8 = 0;
    v9 = 0;
    v7 = a1;
    v10 = 0;
    v11 = v15;
    v12 = v15;
    v13 = 2;
    v14 = 0;
    v15[2] = a3;
    v16 = a4;
    v17 = a5;
    v5 = sub_22EE08DD4((unsigned int *)&v7, a2);
    if (v12 != v11)
      free(v12);
    llvm::deallocate_buffer(v8, (void *)(16 * v10));
  }
  return v5;
}

unint64_t sub_22EE08DD4(unsigned int *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v4;
  unint64_t *v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;

  v2 = a2;
  if (a2 >= 0x10)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
    {
      v4 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, a1[22]);
      v5 = sub_22EE0391C((uint64_t)a1, v4);
      if (v5)
        return *v5;
      else
        return 0;
    }
    else
    {
      v6 = a1[22];
      v8 = *(_QWORD *)a1;
      v9 = v6;
      sub_22EB522D8((uint64_t)&v8, a2);
    }
  }
  return v2;
}

_QWORD *sub_22EE08E6C(uint64_t a1, unint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  size_t v25;
  unsigned __int32 v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  uint64_t v88;
  llvm *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[16];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[2];
  char v101;
  unsigned __int8 *v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  int64x2_t v106;
  _BYTE v107[32];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  llvm *v111;
  unsigned int v112;
  void *v113;
  int v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  __int128 v120;
  _BYTE v121[16];
  char v122;
  void *v123[2];
  _BYTE v124[32];
  unint64_t *v125;
  uint64_t v126;
  _QWORD v127[6];

  v12 = a2;
  v127[4] = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  v15 = *a2 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(*(_QWORD *)v15 + 16) & 0xA00) == 0)
  {
    v20 = (uint64_t)(a2 + 1);
    if ((v14 & 0xF) != 0 || *(_DWORD *)(*(_QWORD *)v15 + 16) != 37)
      v21 = v14;
    else
      v21 = sub_22F1169C8(v14, v20);
    if ((v21 & 0xF) != 0)
      return v12;
    if (!v21)
      return v12;
    if (*(_BYTE *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return v12;
    if (*(_BYTE *)(v21 + 16) == 25)
      return v12;
    v39 = *(_QWORD *)(v21 + 16);
    v40 = (unsigned __int16)(v39 >> 38);
    if (!(unsigned __int16)(v39 >> 38))
      return v12;
    v41 = (_QWORD *)(v20 + 16);
    v42 = 8 * v40;
    while (!*v41)
    {
      ++v41;
      v42 -= 8;
      if (!v42)
        return v12;
    }
  }
  v89 = 0;
  v90 = 0;
  v88 = a1;
  LODWORD(v91) = 0;
  v92 = (uint64_t)v96;
  v93 = v96;
  v94 = 2;
  LODWORD(v95) = 0;
  v97 = a3;
  LODWORD(v98) = a4;
  v99 = a5;
  v105 = (uint64_t)v107;
  v106 = vdupq_n_s64(0x20uLL);
  v108 = 0;
  v16 = (uint64_t)(v12 + 1);
  v17 = sub_22F11598C(v14);
  if (v106.i64[0] < (unint64_t)v17)
    sub_22EEB52C0(&v105, v17);
  if ((v14 & 0xF) != 0)
  {
    v18 = v14;
    v19 = v16;
  }
  else
  {
    v18 = v14;
    v19 = v16;
    if (*(_BYTE *)(*(_QWORD *)v15 + 16) == 37)
      v18 = sub_22F1169C8(v14, v16);
  }
  if ((v18 & 0xF) != 0
    || ((v27 = *(unsigned __int8 *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16), v27 == 26)
      ? (v28 = (_DWORD *)v19)
      : (v28 = 0),
        !v18 || v27 != 26))
  {
    v22 = sub_22EE03DE8(&v88, &v105, v14, v16);
    goto LABEL_13;
  }
  v29 = v88;
  v109 = v88;
  v110 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v109 + i) = -4096;
  v113 = &v115;
  *(_QWORD *)v114 = 0x100000000;
  v116 = *(_QWORD *)(v29 + 12024);
  LOWORD(v117) = 256;
  v118 = 0;
  *(_QWORD *)(v29 + 12024) = &v109;
  v103 = v18;
  v104 = v28;
  v125 = v127;
  v126 = 0x400000000;
  v123[0] = v124;
  v123[1] = (void *)0x400000000;
  v119 = v121;
  v120 = xmmword_22F44E350;
  v122 = 0;
  if ((*(_BYTE *)(v18 + 23) & 0x10) != 0)
  {
    v43 = v18;
    v44 = v18;
    while (1)
    {
      if ((v44 & 0xF) != 0)
        goto LABEL_67;
      v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v45 > 0x39)
      {
LABEL_62:
        if (sub_22F115668(v44))
          v43 = v44;
        v44 = sub_22F115B7C(v44);
        if (!v44)
          goto LABEL_69;
      }
      else
      {
        if (v45 == 24)
          goto LABEL_68;
        if (v45 == 26)
        {
          if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
          {
LABEL_68:
            v43 = v44;
LABEL_69:
            v46 = sub_22F115668(v43);
            if (*(_BYTE *)(v103 + 16) == 25)
              v47 = 0;
            else
              v47 = (unsigned __int16)(*(_QWORD *)(v103 + 16) >> 38);
            v48 = (uint64_t)(v104 + 4);
            v49 = v103 + 40;
            if ((*(_BYTE *)(v18 + 23) & 4) != 0)
              v50 = sub_22E47E270(v18);
            else
              v50 = 0;
            if ((sub_22EE0A8F4(&v88, v46, v48, v47, v49, v50, (uint64_t)&v125, (uint64_t)v123, (uint64_t)&v119) & 1) != 0)
            {
              v22 = 0;
              goto LABEL_103;
            }
            sub_22EBBBB24((uint64_t)v100, v88, a6, a7, 1);
            v51 = *(_QWORD *)(v103 + 24);
            v52 = sub_22E47EE80(&v103);
            v53 = sub_22EE03DE8(&v88, &v105, v51, v52);
            v34 = v53;
            if (v101)
              *(_QWORD *)(v100[0] + 10288) = v100[1];
            if (v53 >= 0x10)
              goto LABEL_89;
LABEL_102:
            v22 = 0;
            goto LABEL_103;
          }
        }
        else if (((1 << v45) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_62;
        }
LABEL_67:
        v44 = sub_22F115B7C(v44);
      }
    }
  }
  v31 = *(_QWORD *)(v18 + 24);
  v32 = sub_22E47EE80(&v103);
  v33 = sub_22EE03DE8(&v88, &v105, v31, v32);
  if (v33 < 0x10)
    goto LABEL_102;
  v34 = v33;
  v35 = v103;
  for (j = v103; ; j = sub_22F115B7C(j))
  {
    while (1)
    {
      if ((j & 0xF) != 0)
        goto LABEL_44;
      v37 = *(unsigned __int8 *)(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v37 <= 0x39)
        break;
LABEL_39:
      if (sub_22F115668(j))
        v35 = j;
      j = sub_22F115B7C(j);
      if (!j)
        goto LABEL_82;
    }
    if (v37 == 24)
      goto LABEL_81;
    if (v37 == 26)
      break;
    if (((1 << v37) & 0x20000000200003CLL) == 0)
      goto LABEL_39;
LABEL_44:
    ;
  }
  if ((*(_BYTE *)(j + 23) & 0x10) == 0)
    goto LABEL_44;
LABEL_81:
  v35 = j;
LABEL_82:
  v54 = sub_22F115668(v35);
  if (*(_BYTE *)(v103 + 16) == 25)
    v55 = 0;
  else
    v55 = (unsigned __int16)(*(_QWORD *)(v103 + 16) >> 38);
  v56 = (uint64_t)(v104 + 4);
  v57 = v103 + 40;
  if ((*(_BYTE *)(v18 + 23) & 4) != 0)
    v58 = sub_22E47E270(v18);
  else
    v58 = 0;
  if ((sub_22EE0A8F4(&v88, v54, v56, v55, v57, v58, (uint64_t)&v125, (uint64_t)v123, (uint64_t)&v119) & 1) != 0)
    goto LABEL_102;
LABEL_89:
  sub_22E4913B4(v18, (uint64_t)v100);
  if (v122 && (sub_22F24FB88(&v119, v126), v119))
  {
    v78 = v102;
    if (!v102)
      goto LABEL_149;
    if (*(_BYTE *)(v103 + 16) == 25)
    {
      LODWORD(v59) = v126 != 0;
      goto LABEL_150;
    }
    v59 = (unsigned __int16)(*(_QWORD *)(v103 + 16) >> 38);
    if (v59 == v126)
    {
      if ((unsigned __int16)(*(_QWORD *)(v103 + 16) >> 38))
      {
        v79 = v59 - 1;
        v80 = v119;
        do
        {
          v82 = *v78++;
          v81 = v82;
          v83 = *v80++;
          v84 = v81 == v83;
          LODWORD(v59) = v81 != v83;
          v84 = !v84 || v79-- == 0;
        }
        while (!v84);
      }
    }
    else
    {
LABEL_149:
      LODWORD(v59) = 1;
    }
LABEL_150:
    v102 = v119;
  }
  else
  {
    LODWORD(v59) = (_DWORD)v102;
    if (v102)
    {
      v102 = 0;
      LODWORD(v59) = 1;
    }
  }
  if (*(_DWORD *)(v88 + 11992) != -1)
  {
    v60 = v126;
    goto LABEL_101;
  }
  v60 = v126;
  if (v34 != *(_QWORD *)(v18 + 24)
    || (v61 = (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38), v61 != v126))
  {
LABEL_101:
    v22 = sub_22EE80544((_QWORD *)v88, v34, v125, v60, v98, v99, (uint64_t)v100);
    if (v22 >= 0x10)
      goto LABEL_116;
    goto LABEL_102;
  }
  v22 = v103;
  if ((unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38))
  {
    v62 = (_QWORD *)(v18 + 40);
    v63 = v125;
    v64 = 8 * v61;
    while (*v62 == *v63)
    {
      ++v62;
      ++v63;
      v64 -= 8;
      if (!v64)
        goto LABEL_100;
    }
    goto LABEL_101;
  }
LABEL_100:
  if ((_DWORD)v59)
    goto LABEL_101;
LABEL_116:
  v65 = sub_22E8BB094((uint64_t)&v105, v22);
  v67 = 0;
  v68 = v104;
  *v66 = *v104;
  v66[1] = v68[1];
  v66[2] = v68[2];
  if (v103)
  {
    v69 = 0;
    if (*(_BYTE *)(v103 + 16) == 26)
    {
      v70 = *(_QWORD *)(v103 + 16);
      if ((v70 & 0x3C0000000000000) != 0)
      {
        v71 = (unsigned __int16)(v70 >> 38);
        if (*(_QWORD *)(v103 + 16) == 25)
          v71 = 0;
        v69 = *(_QWORD *)&v68[2 * v71 + 4];
        v67 = v69 & 0xFFFFFFFF00000000;
        v69 = v69;
      }
      else
      {
        v67 = 0;
        v69 = 0;
      }
    }
  }
  else
  {
    v69 = 0;
  }
  if (v65)
  {
    if (*(_BYTE *)(v65 + 16) == 26)
    {
      v72 = *(_QWORD *)(v65 + 16);
      if ((v72 & 0x3C0000000000000) != 0)
      {
        v73 = v69 | v67;
        if (*(_QWORD *)(v65 + 16) == 25)
          v74 = 0;
        else
          v74 = (unsigned __int16)(v72 >> 38);
        *(_QWORD *)&v66[2 * v74 + 4] = v73;
        v68 = v104;
      }
    }
  }
  v66[3] = v68[3];
  if (*(_BYTE *)(v65 + 16) != 25)
  {
    v75 = *(_QWORD *)(v65 + 16);
    if ((v75 & 0x3FFFC000000000) != 0)
    {
      v76 = 0;
      v77 = (unsigned __int16)(v75 >> 38);
      do
      {
        *(_QWORD *)&v66[2 * v76 + 4] = *((_QWORD *)v123[0] + v76);
        ++v76;
      }
      while (v77 != v76);
    }
  }
LABEL_103:
  if (v119 != v121)
    free(v119);
  if (v123[0] != v124)
    free(v123[0]);
  if (v125 != v127)
    free(v125);
  if (!(_BYTE)v117)
  {
    if (v114[0])
    {
      v85 = 0;
      v86 = 8 * v114[0];
      do
      {
        v87 = *(void ***)((char *)v113 + v85);
        if (v87)
        {
          if (*v87 != v87 + 2)
            free(*v87);
          MEMORY[0x2348A0E9C](v87, 0x1080C40ED926357);
        }
        v85 += 8;
      }
      while (v86 != v85);
    }
    *(_QWORD *)(v109 + 12024) = v116;
    LOBYTE(v117) = 1;
  }
  if (v113 != &v115)
    free(v113);
  if ((v110 & 1) == 0)
    llvm::deallocate_buffer(v111, (void *)(16 * v112));
LABEL_13:
  if (v22 > 0xF)
  {
    v24 = *(_QWORD *)(a1 + 88);
    v25 = v106.i64[0] - v106.i64[1];
    v26 = v106.i32[0] - v106.i32[2];
    if (v106.i32[0] == v106.i32[2])
      v26 = sub_22F11598C(v22);
    v12 = (_QWORD *)sub_22E3CD3D4(v24 + 2032, v26 + 8, 3);
    *v12 = v22;
    v23 = (_BYTE *)v105;
    memcpy(v12 + 1, (const void *)(v105 + v106.i64[1]), v25);
  }
  else
  {
    v12 = 0;
    v23 = (_BYTE *)v105;
  }
  if (v23 != v107 && v23)
    MEMORY[0x2348A0E84](v23, 0x1000C8077774924);
  if (v93 != (_BYTE *)v92)
    free(v93);
  llvm::deallocate_buffer(v89, (void *)(16 * v91));
  return v12;
}

uint64_t sub_22EE09844(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  void **v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  int *v45;
  uint64_t v47;
  void **v48;
  unint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  char v53;
  int v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[6];

  v57[4] = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v10 = *a1;
    LODWORD(v49) = 4;
    v55 = 0;
    v51 = 3;
    v52 = *(unsigned int *)(v10 + 1704);
    sub_22EB4DDB8(v10 + 3688, (int *)&v49, (int *)&v52, (__int16 *)(v10 + 1693), (uint64_t *)&v55, &v51);
    v11 = *(unsigned int *)(v10 + 3696);
    v12 = v11 - 2;
    v13 = *(_QWORD *)(v10 + 3688);
    v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
    if (v14 == 5)
    {
      *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
      v15 = 1;
    }
    else if (v14 == 2)
    {
      *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
      v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
    }
    else
    {
      v15 = 0;
      *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
    }
    v16 = v13 + 576 * v11;
    *(_BYTE *)(v16 - 3) = v15;
    *(_WORD *)(v10 + 1693) = 0;
    if (*(_DWORD *)(v10 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v10 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
      sub_22EAEAE08(v10 + 1840, (uint64_t *)(v16 - 496));
    }
    v17 = sub_22EE0ED40(a1, *((_QWORD *)a3 + 3));
    if ((v17 & 1) != 0
      || (LODWORD(v55) = *a3, v18 = sub_22EB14270(*a1, v17 & 0xFFFFFFFFFFFFFFFELL, &v55), (v18 & 1) != 0))
    {
      sub_22EB48E64(v10);
      return 1;
    }
    v19 = (int)v55;
    if (*((_QWORD *)a3 + 3) != (v18 & 0xFFFFFFFFFFFFFFFELL) || (_DWORD)v55 != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = v18 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v19;
    sub_22EB48E64(v10);
    v9 = *a3;
  }
  if (v9 != 2)
    return 0;
  v45 = a3;
  v20 = *((_QWORD *)a3 + 2);
  v21 = a5;
  if (v20)
  {
    v22 = (void **)*((_QWORD *)v45 + 1);
    v47 = a2;
    v48 = &v22[v20];
    v23 = a2 | ((unint64_t)a2 << 32);
    do
    {
      v24 = *v22;
      v25 = *(_QWORD *)((unint64_t)*v22 & 0xFFFFFFFFFFFFFFF0);
      if ((!v25 || *(_BYTE *)(v25 + 16) != 36)
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36
         || (v25 = sub_22F10CF48(v25)) == 0))
      {
        v55 = (void *)sub_22EE08DD4(a1, v24);
        if ((unint64_t)v55 < 0x10 || (sub_22EB14454(*a1, (unint64_t *)&v55, v23) & 1) != 0)
          return 1;
        v36 = v55;
        if (v24 != v55)
          *v21 = 1;
        v37 = *(unsigned int *)(a4 + 8);
        if (v37 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v37 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v37) = v36;
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_52;
      }
      v26 = 1;
      *v21 = 1;
      v55 = v57;
      v56 = 0x200000000;
      v27 = *(_QWORD *)(v25 + 32);
      v52 = (uint64_t)&v55;
      v53 = 0;
      v54 = -1;
      sub_22EE72E1C((uint64_t)&v52, v27);
      LOBYTE(v51) = 0;
      v50 = 0;
      LODWORD(v30) = *(_DWORD *)(v25 + 20);
      v28 = (_DWORD)v30 != 0;
      v29 = (_DWORD)v30 != 0;
      LODWORD(v30) = v30 - 1;
      if (v29)
        v30 = v30;
      else
        v30 = 0;
      v52 = v30 | (v28 << 32);
      if ((sub_22EE73A98((_QWORD *)*a1, v47, 0, (uint64_t)v55, v56, (uint64_t *)a1[10], &v51, &v50, (uint64_t)&v52) & 1) == 0)
      {
        if ((_BYTE)v51)
        {
          if (!(_DWORD)v52)
          {
            v26 = 0;
            goto LABEL_48;
          }
          v31 = 0;
          while (1)
          {
            v32 = *a1;
            v33 = *(_DWORD *)(*a1 + 11992);
            *(_DWORD *)(*a1 + 11992) = v31;
            v49 = sub_22EE08DD4(a1, *(_QWORD *)(v25 + 32));
            if (v49 < 0x10 || (sub_22EB14454(*a1, &v49, v23) & 1) != 0)
              break;
            v34 = v49;
            v35 = *(unsigned int *)(a4 + 8);
            if (v35 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v35 = *(unsigned int *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v35) = v34;
            ++*(_DWORD *)(a4 + 8);
            *(_DWORD *)(v32 + 11992) = v33;
            if (++v31 == (_DWORD)v52)
            {
              v26 = 0;
              goto LABEL_47;
            }
          }
          *(_DWORD *)(v32 + 11992) = v33;
          v26 = 1;
        }
        else
        {
          v38 = *a1;
          v39 = *(_DWORD *)(*a1 + 11992);
          *(_DWORD *)(*a1 + 11992) = -1;
          v40 = sub_22EE08DD4(a1, *(_QWORD *)(v25 + 32));
          if (v40 >= 0x10)
          {
            v41 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v40, v52);
            v42 = *(unsigned int *)(a4 + 8);
            if (v42 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v42 = *(unsigned int *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v42) = v41;
            ++*(_DWORD *)(a4 + 8);
            v26 = 3;
          }
          *(_DWORD *)(v38 + 11992) = v39;
        }
LABEL_47:
        v21 = a5;
      }
LABEL_48:
      if (v55 != v57)
        free(v55);
      if (v26 && v26 != 3)
        return 1;
LABEL_52:
      ++v22;
    }
    while (v22 != v48);
  }
  v44 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v45 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v45 + 2) = v44;
  if ((_DWORD)v44)
    return 0;
  result = 0;
  *v45 = 1;
  return result;
}

uint64_t sub_22EE09D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];
  int v15;
  uint64_t v16;

  v7 = 0;
  v8 = 0;
  v6 = a1;
  v9 = 0;
  v10 = v14;
  v11 = v14;
  v12 = 2;
  v13 = 0;
  v14[2] = a4;
  v15 = 0;
  v16 = 0;
  v4 = sub_22EE0E8DC((uint64_t)&v6, a2, a2 + 32 * a3);
  if (v11 != v10)
    free(v11);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
  return v4;
}

unint64_t sub_22EE09E08(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  unint64_t *v40;
  unsigned int *v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int i;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  _BYTE v67[96];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm *v72;
  unsigned int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v69 = a2;
  v12 = *(_QWORD *)(a2 + 56);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)v13[4];
  v14 = *v13;
  if ((*v13 & 0xFLL) == 0 && v14 && *(_BYTE *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
  {
    v37 = (int *)(v13 + 1);
    v38 = *(_QWORD *)(v14 + 32);
    if (v38 >= 0x10 && (*(_QWORD *)(v14 + 32) & 0xFLL) == 0)
      v56 = *(_QWORD *)((char *)&unk_22F4995E8
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v56 = 1;
    v40 = sub_22EE03B98((uint64_t *)a1, v38, ((unint64_t)v37 + v56 + 3) & -v56, a3, *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40));
    v16 = (unint64_t)v40;
    if (!v40)
      return v16;
    v17 = *v40 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_BYTE *)(*(_QWORD *)v17 + 17) & 1) == 0)
    {
      if (a6)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0xDBEu, 0, (uint64_t)&v70);
        v68 = *(_QWORD *)v16;
        sub_22E8901B8((uint64_t)&v70, &v68);
        v41 = (unsigned int *)&v70;
LABEL_58:
        sub_22E903BEC(v41);
        return 0;
      }
      goto LABEL_7;
    }
    v15 = sub_22F34AD38((_QWORD *)a1, v40, *v37, a5);
  }
  else
  {
    v15 = (_QWORD *)sub_22EE03524(a1, v13, a3, *(unsigned int *)(a2 + 24), *(_QWORD *)(a2 + 40), 0);
  }
  v16 = (unint64_t)v15;
  if (!v15)
    return v16;
  v17 = *v15 & 0xFFFFFFFFFFFFFFF0;
LABEL_7:
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 86507531;
  else
    v19 = 0;
  if (v19)
  {
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x119Du, 0, (uint64_t)v67);
    v41 = (unsigned int *)v67;
    goto LABEL_58;
  }
  if (*v13 >= 0x10uLL)
    __asm { BR              X11 }
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v21 = sub_22E3CD31C((uint64_t *)(v20 + 72), v20);
  if (v21)
    v22 = v21 + 40;
  else
    v22 = 0;
  v23 = *(_QWORD *)(a2 + 40);
  if ((v23 & 7) != 0)
    v24 = 0;
  else
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
  v25 = sub_22EA2E3A8(a1, v22, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v24, *(_QWORD *)v16, (uint64_t *)v16, *(_BYTE *)(a2 + 96) & 7);
  v16 = v25;
  if (!v25)
    return v16;
  if ((*(_DWORD *)(a2 + 96) & 0x600) == 0x400)
  {
    v42 = *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(v25 + 96) = *(_DWORD *)(v25 + 96) & 0xFFFFF9FF | 0x400;
LABEL_62:
    *(_QWORD *)(v16 + 88) = v42;
    goto LABEL_63;
  }
  if ((*(_DWORD *)(a2 + 96) & 0x600) != 0x200)
  {
    v26 = sub_22EFBC5B4(a2);
    if (!v26)
      goto LABEL_63;
    v27 = v26;
    if ((*(_BYTE *)v26 & 0xFE) == 0xAC)
    {
      v27 = *(_QWORD *)(v26 + 16);
      if (!v27)
        goto LABEL_63;
    }
    v28 = *(_QWORD *)(a2 + 16);
    v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
    if ((v28 & 4) != 0)
      v29 = (_QWORD *)*v29;
    if (v29)
      v30 = (uint64_t)(v29 - 9);
    else
      v30 = 0;
    if (sub_22EFC8324(v30))
    {
      v31 = v30 + 72;
      v32 = *(_QWORD *)(a1 + 216);
      if (!v29)
        v31 = 0;
      v66 = *(_QWORD *)(a1 + 3200);
      *(_QWORD *)(a1 + 3200) = 0;
      v33 = *(_QWORD *)(a1 + 10288);
      v64 = *(_DWORD *)(a1 + 2192);
      v65 = *(_DWORD *)(a1 + 1944);
      *(_QWORD *)(a1 + 216) = v31;
      *(_QWORD *)(a1 + 10288) = 0;
      *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
      *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
      v70 = a1;
      v34 = 16;
      v71 = 1;
      do
      {
        *(uint64_t *)((char *)&v70 + v34) = -4096;
        v34 += 16;
      }
      while (v34 != 80);
      v74 = &v76;
      v75 = 0x100000000;
      v77 = *(_QWORD *)(a1 + 12024);
      v78 = 256;
      v79 = 0;
      *(_QWORD *)(a1 + 12024) = &v70;
      v35 = sub_22EE0A68C(a1, v27, a3);
      if (v35 >= 2)
      {
        sub_22F0D5A50(v35 & 0xFFFFFFFFFFFFFFFELL);
        v36 = sub_22EAA3F3C();
        if ((v36 & 1) != 0)
        {
          if (!(_BYTE)v78)
          {
            if ((_DWORD)v75)
            {
              v60 = 0;
              v61 = 8 * v75;
              do
              {
                v62 = *(void ***)((char *)v74 + v60);
                if (v62)
                {
                  if (*v62 != v62 + 2)
                    free(*v62);
                  MEMORY[0x2348A0E9C](v62, 0x1080C40ED926357);
                }
                v60 += 8;
              }
              while (v61 != v60);
            }
            *(_QWORD *)(v70 + 12024) = v77;
            LOBYTE(v78) = 1;
          }
          if (v74 != &v76)
            free(v74);
          if ((v71 & 1) == 0)
            llvm::deallocate_buffer(v72, (void *)(16 * v73));
          if (v32)
          {
            v16 = 0;
            *(_QWORD *)(a1 + 216) = v32;
            *(_QWORD *)(a1 + 3200) = v66;
            *(_QWORD *)(a1 + 10288) = v33;
            *(_DWORD *)(a1 + 1944) = v65;
            *(_DWORD *)(a1 + 2192) = v64;
            return v16;
          }
          return 0;
        }
        sub_22EAA40A4(a1, v16, v36 & 0xFFFFFFFFFFFFFFFELL);
      }
      if (!(_BYTE)v78)
      {
        if ((_DWORD)v75)
        {
          v58 = 0;
          v63 = 8 * v75;
          do
          {
            v59 = *(void ***)((char *)v74 + v58);
            if (v59)
            {
              if (*v59 != v59 + 2)
                free(*v59);
              MEMORY[0x2348A0E9C](v59, 0x1080C40ED926357);
            }
            v58 += 8;
          }
          while (v63 != v58);
        }
        *(_QWORD *)(v70 + 12024) = v77;
        LOBYTE(v78) = 1;
      }
      if (v74 != &v76)
        free(v74);
      if ((v71 & 1) == 0)
        llvm::deallocate_buffer(v72, (void *)(16 * v73));
      if (v32)
      {
        *(_QWORD *)(a1 + 216) = v32;
        *(_QWORD *)(a1 + 3200) = v66;
        *(_QWORD *)(a1 + 10288) = v33;
        *(_DWORD *)(a1 + 1944) = v65;
        *(_DWORD *)(a1 + 2192) = v64;
      }
      goto LABEL_63;
    }
    *(_DWORD *)(v16 + 96) = *(_DWORD *)(v16 + 96) & 0xFFFFF9FF | 0x400;
    v42 = v27 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_62;
  }
  *(_DWORD *)(v25 + 96) = *(_DWORD *)(v25 + 96) & 0xFFFFF9FF | 0x200;
  v57 = sub_22F348F18(a1 + 8464, &v69);
  sub_22F2998B8((uint64_t)(v57 + 1), v16);
LABEL_63:
  *(_DWORD *)(v16 + 96) = *(_DWORD *)(v16 + 96) & 0xFFFFFEFF | (((*(_DWORD *)(a2 + 96) >> 8) & 1) << 8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    sub_22EE0A720(*(_QWORD *)(a1 + 12024), a2, v16);
  }
  else
  {
    sub_22EE0A7A4(*(_QWORD *)(a1 + 12024), a2, v16);
  }
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFBLL;
  v43 = *(_DWORD *)(a2 + 96);
  if ((v43 & 0x1000) != 0)
    v44 = 0;
  else
    v44 = v43 & 0xFE000;
  v45 = (v43 >> 20);
  if (v45 == 255)
  {
    v46 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
    {
      v47 = *(_QWORD *)(a2 + 16);
      v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if ((v47 & 4) != 0)
        v48 = *(_QWORD *)v48;
      for (i = *(_WORD *)(v48 + 8) & 0x7F; i != 83; i = *(_WORD *)(v48 + 8) & 0x7F)
      {
        v50 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v50 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_85;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_84;
          if (i == 16)
            goto LABEL_78;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_91;
          if (i == 24)
          {
LABEL_78:
            v50 = -48;
          }
          else
          {
LABEL_84:
            if (i != 70)
            {
LABEL_85:
              v51 = i - 52;
              if ((i - 33) >= 5)
                v52 = -48;
              else
                v52 = -64;
              if (v51 >= 6)
                v50 = v52;
              else
                v50 = -72;
              goto LABEL_91;
            }
            v50 = -64;
          }
        }
LABEL_91:
        v53 = *(_QWORD *)(v48 + v50 + 16);
        v48 = v53 & 0xFFFFFFFFFFFFFFF8;
        if ((v53 & 4) != 0)
          v48 = *(_QWORD *)v48;
      }
      v46 = v48 - 40;
    }
    v45 = sub_22F36F2CC(*(_QWORD *)(v46 + 88), a2);
  }
  v54 = *(_DWORD *)(v16 + 96) & 0xFFF01FFF | v44;
  *(_DWORD *)(v16 + 96) = v54;
  if ((v45 + a4) >= 0xFF)
    sub_22F3AC2B8(v16, v45 + a4);
  else
    *(_DWORD *)(v16 + 96) = v54 & 0xF00FFFFF | ((v45 + a4) << 20);
  sub_22EE33A90(a1, a3, a2, v16, 0, 0);
  return v16;
}

uint64_t sub_22EE0A68C(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;

  if (!a2)
    return 0;
  v8 = 0;
  v9 = 0;
  v7 = a1;
  v10 = 0;
  v11 = v15;
  v12 = v15;
  a4.n128_u64[0] = 2;
  v13 = 2;
  v14 = 0;
  v15[2] = a3;
  v16 = 0;
  v17 = 0;
  sub_22EE0ED40(&v7, a2, a4);
  v5 = v4;
  if (v12 != v11)
    free(v12);
  llvm::deallocate_buffer(v8, (void *)(16 * v10));
  return v5;
}

uint64_t sub_22EE0A720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = sub_22EE12CF0(a2);
  result = (uint64_t)sub_22EE1320C((_DWORD *)(a1 + 8), &v8);
  v6 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a3;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22EE0A7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v10 = sub_22EE12CF0(a2);
  result = (uint64_t)sub_22EE1320C((_DWORD *)(a1 + 8), &v10);
  v6 = *(_QWORD *)(result + 8);
  if (v6 > 7)
  {
    if ((v6 & 4) != 0)
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v8 = v6 & 0xFFFFFFFFFFFFFFF8;
        v9 = *(_DWORD *)(v7 + 8);
        if (v9 >= *(_DWORD *)(v7 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a3;
        ++*(_DWORD *)(v8 + 8);
      }
    }
  }
  else
  {
    *(_QWORD *)(result + 8) = a3 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

uint64_t sub_22EE0A854(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD v19[3];
  unsigned int v20;
  uint64_t v21;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = v19;
  v16 = v19;
  v17 = 2;
  v18 = 0;
  v19[2] = a6;
  v20 = a2;
  v21 = 0;
  v11 = a1;
  v9 = sub_22EE0A8F4(&v11, a2, a3, a4, 0, a5, a7, a8, a9);
  if (v16 != v15)
    free(v16);
  llvm::deallocate_buffer(v12, (void *)(16 * v14));
  return v9;
}

uint64_t sub_22EE0A8F4(uint64_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v87;
  int v89;
  void **v90;
  char v91;
  int v92;
  __int16 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD v99[6];

  v99[4] = *MEMORY[0x24BDAC8D0];
  v87 = a4;
  if (!a4)
    return 0;
  v11 = a6;
  v12 = a3;
  v13 = a1;
  v14 = 0;
  v89 = 0;
  v80 = a2;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v31 = *(_QWORD *)(a5 + 8 * v14);
    LOBYTE(v94) = 0;
    BYTE4(v94) = 0;
    v32 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
    if (v32 && *(_BYTE *)(v32 + 16) == 36)
    {
      v33 = *(_QWORD *)(v32 + 32);
      v97 = v99;
      v98 = 0x200000000;
      v90 = (void **)&v97;
      v91 = 0;
      v92 = -1;
      sub_22EE72E1C((uint64_t)&v90, v33);
      LOBYTE(v96) = 0;
      HIBYTE(v93) = 0;
      if ((sub_22EE73A98((_QWORD *)*v13, v80, 0, (uint64_t)v97, v98, (uint64_t *)v13[10], &v96, (_BYTE *)&v93 + 1, (uint64_t)&v94) & 1) != 0)goto LABEL_32;
      if ((_BYTE)v96)
      {
        if ((_DWORD)v94)
        {
          v39 = 0;
          while (1)
          {
            v40 = *v13;
            v41 = *(_DWORD *)(*v13 + 11992);
            *(_DWORD *)(*v13 + 11992) = v39;
            v42 = sub_22EE08DD4(v13, v33);
            if (v42 < 0x10)
              break;
            v43 = v42;
            if ((*(_BYTE *)(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
            {
              v43 = sub_22EF663B4(*(_QWORD *)(*v13 + 88), v42, 0);
              if (v43 < 0x10)
                break;
            }
            if (v11)
              sub_22F2F3918(a9, *(_DWORD *)(a7 + 8), *(_BYTE *)(v11 + v14));
            v44 = *(unsigned int *)(a7 + 8);
            if (v44 >= *(unsigned int *)(a7 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v44 = *(unsigned int *)(a7 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a7 + 8 * v44) = v43;
            ++*(_DWORD *)(a7 + 8);
            if (a8)
            {
              v45 = *(unsigned int *)(a8 + 8);
              if (v45 >= *(unsigned int *)(a8 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v45 = *(unsigned int *)(a8 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a8 + 8 * v45) = 0;
              ++*(_DWORD *)(a8 + 8);
            }
            *(_DWORD *)(v40 + 11992) = v41;
            if (++v39 == (_DWORD)v94)
            {
              v34 = 0;
              v35 = 0;
              v36 = 1;
              goto LABEL_57;
            }
          }
          v34 = 0;
          v35 = 0;
          v36 = 0;
          *(_DWORD *)(v40 + 11992) = v41;
LABEL_57:
          v12 = a3;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 1;
        }
        goto LABEL_68;
      }
      if (HIBYTE(v93))
      {
        sub_22EE1D76C((uint64_t)&v90, v13);
        v46 = sub_22EE08DD4(v13, v33);
        if (v46 < 0x10)
        {
          sub_22EE1D880((uint64_t)&v90);
LABEL_32:
          v34 = 0;
          v35 = 0;
          v36 = 0;
LABEL_68:
          if (v97 != v99)
            free(v97);
          if (!v35)
          {
            v13 = a1;
            if (v36)
              goto LABEL_116;
            return 1;
          }
          v13 = a1;
          if (v34 < 0x10)
            return 1;
          v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v34, v94);
          goto LABEL_73;
        }
        v47 = v46;
        if (v11)
          sub_22F2F3918(a9, *(_DWORD *)(a7 + 8), *(_BYTE *)(v11 + v14));
        v48 = *(unsigned int *)(a7 + 8);
        if (v48 >= *(unsigned int *)(a7 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v48 = *(unsigned int *)(a7 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v47;
        ++*(_DWORD *)(a7 + 8);
        if (a8)
        {
          v49 = *(unsigned int *)(a8 + 8);
          if (v49 >= *(unsigned int *)(a8 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v49 = *(unsigned int *)(a8 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a8 + 8 * v49) = 0;
          ++*(_DWORD *)(a8 + 8);
        }
        sub_22EE1D880((uint64_t)&v90);
      }
      v50 = *(_QWORD *)(v32 + 32);
      v51 = v13;
      v52 = *v13;
      v53 = *(_DWORD *)(v52 + 11992);
      *(_DWORD *)(v52 + 11992) = -1;
      v34 = sub_22EE08DD4(v51, v50);
      v36 = 0;
      *(_DWORD *)(v52 + 11992) = v53;
      v35 = 1;
      goto LABEL_68;
    }
    v38 = sub_22EE08DD4(v13, v31);
    if (v38 <= 0xF)
      return 1;
LABEL_73:
    v54 = *(_DWORD *)(a7 + 8);
    if (v11)
    {
      sub_22F2F3918(a9, v54, *(_BYTE *)(v11 + v14));
      v54 = *(_DWORD *)(a7 + 8);
    }
    if (v54 >= *(_DWORD *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v54 = *(_DWORD *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v54) = v38;
    ++*(_DWORD *)(a7 + 8);
    if (a8)
    {
      v55 = *(unsigned int *)(a8 + 8);
      if (v55 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v55 = *(unsigned int *)(a8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v55) = 0;
LABEL_114:
      ++*(_DWORD *)(a8 + 8);
    }
LABEL_116:
    if (++v14 == v87)
      return 0;
  }
  LOBYTE(v96) = 0;
  BYTE4(v96) = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v37 = sub_22EE23CFC(v13, v15, v89, 0, 0);
    goto LABEL_105;
  }
  v97 = v99;
  v98 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)v17[4];
  v20 = *v17;
  v18 = (unsigned int *)(v17 + 1);
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v56 = *(_QWORD *)((char *)&unk_22F4995E8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v56 = 1;
  v94 = v21;
  v95 = ((unint64_t)v18 + v56 + 3) & -v56;
  sub_22EE73804(*v13, v21, v95, (uint64_t)&v97);
  v93 = 0;
  if (!(_DWORD)v98)
    goto LABEL_100;
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v82 = v27;
  v83 = v24 << 32;
  v81 = v27 & 0xFFFFFF00;
  v96 = v27 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v24 & 1) << 32);
  v28 = *v18;
  v29 = v21;
  while (1)
  {
LABEL_18:
    if ((v29 & 0xF) != 0)
      goto LABEL_28;
    v30 = *(unsigned __int8 *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v30 <= 0x39)
      break;
LABEL_23:
    if (sub_22F115668(v29))
      v21 = v29;
    v29 = sub_22F115B7C(v29);
    if (!v29)
      goto LABEL_84;
  }
  if (v30 == 24)
    goto LABEL_83;
  if (v30 != 26)
  {
    if (((1 << v30) & 0x20000000200003CLL) != 0)
      goto LABEL_28;
    goto LABEL_23;
  }
  if ((*(_BYTE *)(v29 + 23) & 0x10) == 0)
  {
LABEL_28:
    v29 = sub_22F115B7C(v29);
    goto LABEL_18;
  }
LABEL_83:
  v21 = v29;
LABEL_84:
  v57 = sub_22F115668(v21);
  v58 = sub_22F1167E8((uint64_t *)&v94);
  if ((sub_22EE73A98((_QWORD *)*v13, v28, v57 | ((unint64_t)v58 << 32), (uint64_t)v97, v98, (uint64_t *)v13[10], (_BYTE *)&v93 + 1, &v93, (uint64_t)&v96) & 1) != 0)
  {
    v37 = 0;
    LOBYTE(v59) = 0;
    LOBYTE(v60) = 0;
    goto LABEL_101;
  }
  if (!HIBYTE(v93))
  {
LABEL_100:
    v68 = *v13;
    v69 = v13;
    v70 = *(_DWORD *)(*v13 + 11992);
    *(_DWORD *)(v68 + 11992) = -1;
    LOBYTE(v59) = 1;
    v37 = sub_22EE23CFC(v69, v15, v89, v96, 1);
    LOBYTE(v60) = 0;
    *(_DWORD *)(v68 + 11992) = v70;
    goto LABEL_101;
  }
  sub_22EE12F6C(*(_QWORD *)(*v13 + 12024), v15);
  if (!(_DWORD)v96)
  {
    v74 = v89;
LABEL_120:
    v11 = a6;
    v12 = a3;
    if ((_BYTE)v93)
    {
      sub_22EE1D76C((uint64_t)&v90, v13);
      v89 = v74 + 1;
      v59 = sub_22EE23CFC(v13, v15, v74, v83 | v81 | v82, 0);
      if (!v59)
      {
        sub_22EE1D880((uint64_t)&v90);
        v37 = 0;
        LOBYTE(v60) = 0;
        goto LABEL_102;
      }
      if (a6)
        sub_22F2F3918(a9, *(_DWORD *)(a7 + 8), *(_BYTE *)(a6 + v14));
      v75 = *(_QWORD *)(v59 + 48);
      v76 = *(unsigned int *)(a7 + 8);
      if (v76 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v76 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v76) = v75;
      ++*(_DWORD *)(a7 + 8);
      if (a8)
      {
        v77 = *(unsigned int *)(a8 + 8);
        if (v77 >= *(unsigned int *)(a8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v77 = *(unsigned int *)(a8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a8 + 8 * v77) = v59;
        ++*(_DWORD *)(a8 + 8);
      }
      sub_22EE1D880((uint64_t)&v90);
      v78 = v89;
    }
    else
    {
      v78 = v74;
    }
    v37 = 0;
    LOBYTE(v59) = 0;
    v89 = v78 - 1;
    LOBYTE(v60) = 1;
    goto LABEL_102;
  }
  v61 = 0;
  while (1)
  {
    v62 = *v13;
    v63 = v13;
    v64 = *(_DWORD *)(*v13 + 11992);
    *(_DWORD *)(v62 + 11992) = v61;
    v60 = sub_22EE23CFC(v63, v15, v89 + v61, v83 | v81 | v82, 0);
    if (!v60)
      break;
    if (a6)
      sub_22F2F3918(a9, *(_DWORD *)(a7 + 8), *(_BYTE *)(a6 + v14));
    v65 = *(_QWORD *)(v60 + 48);
    v66 = *(unsigned int *)(a7 + 8);
    if (v66 >= *(unsigned int *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v66 = *(unsigned int *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v66) = v65;
    ++*(_DWORD *)(a7 + 8);
    if (a8)
    {
      v67 = *(unsigned int *)(a8 + 8);
      if (v67 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v67 = *(unsigned int *)(a8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v67) = v60;
      ++*(_DWORD *)(a8 + 8);
    }
    *(_DWORD *)(v62 + 11992) = v64;
    ++v61;
    v13 = a1;
    if (v61 == (_DWORD)v96)
    {
      v74 = v89 + v61;
      goto LABEL_120;
    }
  }
  v37 = 0;
  LOBYTE(v59) = 0;
  *(_DWORD *)(v62 + 11992) = v64;
  v89 += v61 + 1;
LABEL_101:
  v11 = a6;
  v12 = a3;
LABEL_102:
  if (v97 != v99)
    free(v97);
  v13 = a1;
  if ((v59 & 1) != 0)
  {
LABEL_105:
    if (v37)
    {
      v71 = *(_DWORD *)(a7 + 8);
      if (v11)
      {
        sub_22F2F3918(a9, v71, *(_BYTE *)(v11 + v14));
        v71 = *(_DWORD *)(a7 + 8);
      }
      v72 = *(_QWORD *)(v37 + 48);
      if (v71 >= *(_DWORD *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v71 = *(_DWORD *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v71) = v72;
      ++*(_DWORD *)(a7 + 8);
      if (a8)
      {
        v73 = *(unsigned int *)(a8 + 8);
        if (v73 >= *(unsigned int *)(a8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v73 = *(unsigned int *)(a8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a8 + 8 * v73) = v37;
        goto LABEL_114;
      }
      goto LABEL_116;
    }
  }
  else if ((v60 & 1) != 0)
  {
    goto LABEL_116;
  }
  return 1;
}

uint64_t sub_22EE0B368(unint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6, int a7)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t i;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t *v54;
  char v55;
  int v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  void ***v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void **v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int32x2_t *v116;
  llvm *TimeTraceProfilerInstance;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  void **v122;
  void ***v123;
  uint64_t v124;
  int v125;
  char v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD v139[5];
  int v140;
  const char *v141;
  int32x2_t v142;
  char v143;
  uint64_t *v144;
  char v145;
  void *v146;
  uint64_t v147;
  _BYTE v148[384];
  void *v149;
  uint64_t v150;
  _BYTE v151[32];
  void *v152;
  uint64_t v153;
  int v154;
  uint64_t *v155;
  uint64_t *v156;
  void **v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  _BYTE v161[64];
  void *v162;
  uint64_t v163;
  _BYTE v164[64];
  unint64_t v165;
  void *v166[2];
  _BYTE v167[32];
  void *v168[2];
  _BYTE v169[32];
  unint64_t v170;
  uint64_t v171;
  llvm *v172;
  unsigned int v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x24BDAC8D0];
  v144 = a3;
  v14 = *(_QWORD *)(a4 + 128);
  if (v14
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a4 + 104) + 96), *(_QWORD *)(a4 + 104)),
        (v14 = *(_QWORD *)(a4 + 128)) != 0))
  {
    v15 = *(_QWORD *)(v14 + 88);
  }
  else
  {
    v15 = 0;
  }
  v16 = 0;
  v17 = a3[17];
  if ((v17 & 4) != 0)
  {
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if (v18)
      v16 = *v18 & 0xFFFFFFFFFFFFFFF8;
  }
  v19 = sub_22ED57F34((_QWORD *)a1, a2, (uint64_t)a3, v16 != 0, a4, v15, a6, a7);
  if ((v19 & 1) != 0)
    return 1;
  v146 = &v144;
  v147 = a1;
  if (llvm::getTimeTraceProfilerInstance((llvm *)v19))
    llvm::timeTraceProfilerBegin();
  v22 = v144;
  v23 = v144[17];
  if ((v23 & 4) != 0 && (v24 = v23 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    *(_QWORD *)v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF9 | (2 * (a6 - 1));
    *(_DWORD *)(v24 + 8) = a2;
  }
  else if ((*((_DWORD *)v144 + 7) & 0x7E) == 0x24)
  {
    sub_22EFD57A8((uint64_t)v144, a6);
    *((_DWORD *)v22 + 44) = a2;
    v22 = v144;
  }
  sub_22EE00E90(&v142, a1, 0, a2, 0, (uint64_t)v22, 0, v21, 0, 0, 0);
  if (v143)
  {
    v20 = 1;
    goto LABEL_205;
  }
  v135 = v15;
  v127 = a2;
  v125 = a7;
  v25 = *(_QWORD *)(a1 + 88);
  v26 = v144;
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v139[0] = &unk_24FAC2E78;
  v139[3] = v25;
  v139[4] = v26;
  v140 = 0;
  v141 = "instantiating class definition";
  if (v144)
    v27 = v144 + 8;
  else
    v27 = 0;
  v28 = *(_QWORD *)(a1 + 216);
  v29 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v30 = *(_QWORD *)(a1 + 10288);
  v31 = *(_DWORD *)(a1 + 1944);
  v32 = *(_DWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 216) = v27;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  LODWORD(v170) = 6;
  LODWORD(v165) = 3;
  v152 = (void *)*(unsigned int *)(a1 + 1704);
  v146 = 0;
  sub_22EB4DDB8(a1 + 3688, (int *)&v170, (int *)&v152, (__int16 *)(a1 + 1693), (uint64_t *)&v146, (int *)&v165);
  v33 = *(unsigned int *)(a1 + 3696);
  v34 = v33 - 2;
  v35 = *(_QWORD *)(a1 + 3688);
  v36 = *(_DWORD *)(v35 + 576 * (v33 - 2));
  if (v36 == 5)
  {
    *(_BYTE *)(v35 + 576 * v33 - 4) = *(_BYTE *)(v35 + 576 * v34 + 572);
    v37 = 1;
  }
  else if (v36 == 2)
  {
    *(_BYTE *)(v35 + 576 * v33 - 4) = 1;
    v37 = *(_BYTE *)(v35 + 576 * v34 + 573) != 0;
  }
  else
  {
    v37 = 0;
    *(_BYTE *)(v35 + 576 * v33 - 4) = 0;
  }
  v38 = v35 + 576 * v33;
  *(_BYTE *)(v38 - 3) = v37;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v38 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v38 - 496));
  }
  v131 = v31;
  v132 = v30;
  v133 = v29;
  v39 = sub_22EFC8010((uint64_t)v144);
  v170 = a1;
  v171 = 1;
  for (i = 16; i != 80; i += 16)
    *(unint64_t *)((char *)&v170 + i) = -4096;
  v128 = a2;
  v134 = a6;
  v130 = v32;
  v129 = v28;
  v174 = (char *)&v176;
  v175 = 0x100000000;
  v177 = *(_QWORD *)(a1 + 12024);
  v178 = 0;
  v179 = v39 != 0;
  v180 = 0;
  *(_QWORD *)(a1 + 12024) = &v170;
  v165 = a1;
  v166[0] = v167;
  v166[1] = (void *)0x200000000;
  v168[0] = v169;
  v168[1] = (void *)0x200000000;
  sub_22EAE9BA0((uint64_t)v166, a1 + 3000);
  sub_22EAE9BA0((uint64_t)v168, v165 + 3048);
  sub_22EE33A90(a1, (uint64_t)a5, v135, (unint64_t)v144, 0, 0);
  sub_22EFC3340((unint64_t)v144);
  v41 = v144;
  v42 = v144[1];
  if ((v42 & 4) != 0)
    v144[1] = v42 & 0xFFFFFFFFFFFFFFF9 | 2;
  *((_DWORD *)v41 + 18) = v41[9] & 0xFFFF1FFF | (HIBYTE(*(_WORD *)(v135 + 72)) >> 5 << 13);
  v146 = v148;
  v147 = 0x400000000;
  v43 = sub_22E46A3A0(v135);
  if (v43 == v44)
    goto LABEL_73;
  v45 = v43;
  v46 = v44;
  v47 = 0;
  do
  {
    v48 = *(_QWORD *)(**(_QWORD **)(v45 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v48 + 8) & 0xF) != 0)
      v48 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v45 + 16));
    if ((*(_BYTE *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    {
      v49 = *(_QWORD *)(**(_QWORD **)(v45 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v49 + 8) & 0xF) != 0)
        v49 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v45 + 16));
      v50 = sub_22F10C2A4(*(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0));
      if (v50 && (*(_DWORD *)(v50 + 28) & 0x80) != 0 && (*(_DWORD *)(v50 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
        sub_22EFC77E8((uint64_t)v41, 1);
      v51 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
      v52 = *(_OWORD *)v45;
      *(_QWORD *)(v51 + 16) = *(_QWORD *)(v45 + 16);
      *(_OWORD *)v51 = v52;
      goto LABEL_64;
    }
    if (!*(_DWORD *)(v45 + 8))
    {
      v54 = (uint64_t *)sub_22EE03524(a1, *(uint64_t **)(v45 + 16), (uint64_t)a5, *(_DWORD *)v45, 0, 0);
      v53 = 0;
LABEL_61:
      if (!v54
        || (v63 = sub_22EAA9880((_QWORD *)a1, (unint64_t)v41, *(_QWORD *)v45, *(_BYTE *)(v45 + 12) & 1, (*(_BYTE *)(v45 + 12) >> 2) & 3, v54, v53)) == 0)
      {
        v47 = 1;
        goto LABEL_68;
      }
      v51 = v63;
LABEL_64:
      v64 = v147;
      if (v147 >= (unint64_t)HIDWORD(v147))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v64 = v147;
      }
      *((_QWORD *)v146 + v64) = v51;
      LODWORD(v147) = v147 + 1;
      goto LABEL_68;
    }
    v152 = &v154;
    v153 = 0x200000000;
    sub_22EE73804(a1, **(_QWORD **)(v45 + 16), *(_QWORD *)(v45 + 16) + 8, (uint64_t)&v152);
    LOBYTE(v136) = 0;
    v145 = 0;
    LOBYTE(v149) = 0;
    BYTE4(v149) = 0;
    if ((sub_22EE73A98((_QWORD *)a1, *(unsigned int *)(v45 + 8), *(_QWORD *)v45, (uint64_t)v152, v153, a5, &v136, &v145, (uint64_t)&v149) & 1) != 0)
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v47 = 1;
    }
    else if ((_BYTE)v136)
    {
      if ((_DWORD)v149)
      {
        v56 = 0;
        v57 = *(_DWORD *)(a1 + 11992);
        do
        {
          *(_DWORD *)(a1 + 11992) = v56;
          v58 = (uint64_t *)sub_22EE03524(a1, *(uint64_t **)(v45 + 16), (uint64_t)a5, *(_DWORD *)v45, 0, 0);
          if (v58
            && (v59 = sub_22EAA9880((_QWORD *)a1, (unint64_t)v41, *(_QWORD *)v45, *(_BYTE *)(v45 + 12) & 1, (*(_BYTE *)(v45 + 12) >> 2) & 3, v58, 0)) != 0)
          {
            v60 = v59;
            v61 = v147;
            if (v147 >= (unint64_t)HIDWORD(v147))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v61 = v147;
            }
            *((_QWORD *)v146 + v61) = v60;
            LODWORD(v147) = v147 + 1;
          }
          else
          {
            v47 = 1;
          }
          *(_DWORD *)(a1 + 11992) = v57;
          ++v56;
        }
        while (v56 != (_DWORD)v149);
      }
      v53 = 0;
      v54 = 0;
      v55 = 0;
    }
    else
    {
      v53 = *(_DWORD *)(v45 + 8);
      v62 = *(_DWORD *)(a1 + 11992);
      *(_DWORD *)(a1 + 11992) = -1;
      v54 = (uint64_t *)sub_22EE03524(a1, *(uint64_t **)(v45 + 16), (uint64_t)a5, *(_DWORD *)v45, 0, 0);
      *(_DWORD *)(a1 + 11992) = v62;
      v55 = 1;
    }
    if (v152 != &v154)
      free(v152);
    if ((v55 & 1) != 0)
      goto LABEL_61;
LABEL_68:
    v45 += 24;
  }
  while (v45 != v46);
  if ((v47 & 1) != 0)
  {
    v65 = 1;
    goto LABEL_74;
  }
LABEL_73:
  v65 = sub_22EAAA8A8((_QWORD *)a1, (unint64_t)v41, (uint64_t)v146, v147);
LABEL_74:
  if (v146 != v148)
    free(v146);
  if (v65)
    sub_22EFC77E8((uint64_t)v144, 1);
  if (v144)
    v66 = v144 + 8;
  else
    v66 = 0;
  v67 = *(_DWORD *)(a1 + 11992);
  v152 = (void *)a1;
  v153 = a1;
  v154 = v67;
  v155 = v66;
  v156 = a5;
  v159 = v161;
  v160 = 0x400000000;
  v162 = v164;
  v163 = 0x400000000;
  v149 = v151;
  v150 = 0x400000000;
  v146 = v148;
  v147 = 0x1000000000;
  v68 = *(_QWORD *)(a1 + 12024);
  v157 = &v146;
  v158 = v68;
  v69 = v135 + 64;
  if ((*(_WORD *)(v135 + 72) & 0x80) != 0)
    sub_22EFCC320(v135 + 64);
  v70 = *(_QWORD *)(v135 + 80);
  if (v70)
  {
    v71 = 0;
    while (1)
    {
      v72 = *(_QWORD *)(v70 + 16);
      v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
      if ((v72 & 4) != 0)
        v73 = (_QWORD *)*v73;
      if (v73 == (_QWORD *)v69)
      {
        v74 = *(_DWORD *)(v70 + 28);
        if ((v74 & 0x7F) != 1
          && ((v74 & 0x7Fu) - 35 > 2
           || (v75 = *(_QWORD *)(v70 + 128)) == 0
           || ((*(unsigned __int16 *)(v75 + 8) | (*(unsigned __int8 *)(v75 + 10) << 16)) & 0x100000) == 0))
        {
          if ((v74 & 0x80) != 0)
            goto LABEL_112;
          v76 = sub_22EE0C33C((uint64_t *)&v152, v70);
          if (v76)
          {
            v77 = v76;
            v78 = *(_DWORD *)(v76 + 28);
            v79 = v78 & 0x7F;
            if ((v79 - 52) >= 0xFFFFFFFD)
            {
              v81 = v150;
              if (v150 >= (unint64_t)HIDWORD(v150))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v81 = v150;
              }
              *((_QWORD *)v149 + v81) = v77;
              LODWORD(v150) = v150 + 1;
            }
            else if (v79 == 82)
            {
              if ((*(_BYTE *)(v76 + 40) & 2) != 0)
              {
                sub_22EFC77E8((uint64_t)v144, 1);
                goto LABEL_116;
              }
            }
            else if (v79 == 33)
            {
              if (v134 == 1 && (*(_QWORD *)(v76 + 72) & 0x8000010000) == 0x10000)
              {
                v80 = *(_QWORD *)(v76 + 144);
                *(_QWORD *)v80 &= 0xFFFFFFFFFFFFFFF9;
                *(_DWORD *)(v80 + 8) = v128;
              }
            }
            else if ((v78 & 0x7Eu) - 58 >= 0xFFFFFFFC && (v78 & 0x1800000) == 0)
            {
              v82 = *(_QWORD *)(v76 + 80);
              if ((v82 & 0xC0000000) != 0)
              {
                if ((v82 & 0x40000) != 0
                  || (v83 = v144, sub_22E3CD31C((uint64_t *)(v144[13] + 96), v144[13]), *(_DWORD *)(v83[16] + 16)))
                {
                  v71 = 1;
                }
              }
            }
            if ((*(_BYTE *)(v77 + 28) & 0x80) != 0)
LABEL_112:
              sub_22EFC77E8((uint64_t)v144, 1);
          }
        }
      }
      v70 = *(_QWORD *)(v70 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v70)
        goto LABEL_116;
    }
  }
  v71 = 0;
LABEL_116:
  v126 = v71;
  v84 = *((_DWORD *)v144 + 6);
  v136 = 0;
  v137 = 0;
  sub_22EA39224(a1, 0, v84, (unint64_t)v144, (uint64_t *)v149, v150, 0, 0, (uint64_t)&v136);
  sub_22E80F94C(&v137);
  sub_22EAB3AC0(a1, 0, v144);
  if (!*(_DWORD *)(a1 + 13064))
    sub_22EAC8B1C(a1);
  v85 = &v157;
  if ((_DWORD)v147)
  {
    v86 = (uint64_t *)v146;
    v87 = (uint64_t *)((char *)v146 + 24 * v147);
    do
    {
      *(_QWORD *)(a1 + 12024) = v86[1];
      v88 = v86[2];
      v89 = *(_QWORD *)(v88 + 16);
      v90 = v89 & 0xFFFFFFFFFFFFFFF8;
      if ((v89 & 4) != 0)
        v90 = *(_QWORD *)v90;
      if (v90)
      {
        v91 = (*(_WORD *)(v90 + 8) & 0x7F) - 35;
        v92 = v90 - 64;
        if (v91 >= 3)
          v93 = 0;
        else
          v93 = v92;
      }
      else
      {
        v93 = 0;
      }
      v94 = sub_22EFBAEF8(v88);
      sub_22EBBBB24((uint64_t)&v136, a1, v93, 0, v94);
      sub_22EE2CEE8(*v86);
      if (v95)
        sub_22EFCA95C(v86[2], v95);
      v96 = v86[1];
      if (v96)
      {
        v97 = v158;
        if (v96 != v158)
        {
          do
          {
            v98 = *(_QWORD *)(v96 + 104);
            if (!*(_BYTE *)(v96 + 112))
            {
              v99 = *(unsigned int *)(v96 + 88);
              v100 = *(_QWORD *)(v96 + 104);
              if ((_DWORD)v99)
              {
                v123 = v85;
                v102 = 0;
                v124 = 8 * v99;
                do
                {
                  v103 = *(void ***)(*(_QWORD *)(v96 + 80) + v102);
                  if (v103)
                  {
                    if (*v103 != v103 + 2)
                    {
                      v122 = *(void ***)(*(_QWORD *)(v96 + 80) + v102);
                      free(*v103);
                      v103 = v122;
                    }
                    MEMORY[0x2348A0E9C](v103, 0x1080C40ED926357);
                  }
                  v102 += 8;
                }
                while (v124 != v102);
                v100 = *(_QWORD *)(v96 + 104);
                v85 = v123;
              }
              *(_QWORD *)(*(_QWORD *)v96 + 12024) = v100;
              *(_BYTE *)(v96 + 112) = 1;
            }
            v101 = *(void **)(v96 + 80);
            if (v101 != (void *)(v96 + 96))
              free(v101);
            if ((*(_BYTE *)(v96 + 8) & 1) == 0)
              llvm::deallocate_buffer(*(llvm **)(v96 + 16), (void *)(16 * *(unsigned int *)(v96 + 24)));
            MEMORY[0x2348A0E9C](v96, 0x10E0C404F285500);
            if (!v98)
              break;
            v96 = v98;
          }
          while (v98 != v97);
        }
      }
      if (v138)
        *(_QWORD *)(v136 + 10288) = v137;
      v86 += 3;
    }
    while (v86 != v87);
  }
  *v85 = 0;
  v85[1] = 0;
  LODWORD(v147) = 0;
  sub_22EABB2E0(a1);
  v104 = v144;
  if (v134 == 1)
  {
    *((_DWORD *)v144 + 6) = *(_DWORD *)(v135 + 24);
    *((_DWORD *)v104 + 14) = *(_DWORD *)(v135 + 56);
    v104[14] = *(_QWORD *)(v135 + 112);
  }
  v105 = v130;
  v106 = v129;
  if ((*((_BYTE *)v104 + 28) & 0x80) == 0)
  {
    if (sub_22EFC7ADC(v69))
    {
      if (v135)
        v107 = v135 + 64;
      else
        v107 = 0;
      sub_22EE46108(a1, v107, (uint64_t)a5);
    }
    if ((_DWORD)v160)
    {
      v108 = (char *)v159;
      v109 = (char *)v159 + 16 * v160;
      while (sub_22EE3B810((unsigned int **)&v152, *(_QWORD *)v108, *((_QWORD *)v108 + 1)))
      {
        v108 += 16;
        if (v108 == v109)
          goto LABEL_165;
      }
      sub_22EFC77E8((uint64_t)v144, 1);
    }
LABEL_165:
    if ((_DWORD)v163)
    {
      v110 = (char *)v162;
      v111 = (char *)v162 + 16 * v163;
      while (sub_22EE3C0B4((uint64_t *)&v152, *(_QWORD *)v110, *((_QWORD *)v110 + 1)))
      {
        v110 += 16;
        if (v110 == v111)
          goto LABEL_171;
      }
      sub_22EFC77E8((uint64_t)v144, 1);
    }
  }
LABEL_171:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 104) & 0x20) != 0
    && (*((_BYTE *)v144 + 28) & 0x80) == 0
    && (v112 = sub_22EF6477C(*(_QWORD *)(a1 + 88), (uint64_t)v144),
        sub_22F10C780(*(_QWORD *)(v112 & 0xFFFFFFFFFFFFFFF0)))
    && !sub_22EA5357C((_QWORD *)a1, v112, v127, 0, v125))
  {
    v20 = 1;
    v114 = v132;
    v113 = v133;
    v115 = v131;
  }
  else
  {
    v114 = v132;
    v113 = v133;
    v115 = v131;
    if (v129)
    {
      *(_QWORD *)(a1 + 216) = v129;
      *(_QWORD *)(a1 + 3200) = v133;
      *(_QWORD *)(a1 + 10288) = v132;
      *(_DWORD *)(a1 + 1944) = v131;
      *(_DWORD *)(a1 + 2192) = v130;
    }
    if ((*((_BYTE *)v144 + 28) & 0x80) == 0)
    {
      if (v134 == 4)
      {
        sub_22EAB631C(a1, v127, (uint64_t)v144, 1u);
      }
      else if ((v126 & 1) != 0)
      {
        sub_22EAD17EC(a1, v127, (uint64_t)v144, 1);
      }
    }
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), v144);
    v106 = 0;
    v20 = *((unsigned __int8 *)v144 + 28) >> 7;
  }
  if (v146 != v148)
    free(v146);
  if (v149 != v151)
    free(v149);
  if (v162 != v164)
    free(v162);
  if (v159 != v161)
    free(v159);
  *(_DWORD *)(v153 + 11992) = v154;
  sub_22EAE9BA0((uint64_t)v166, v165 + 3000);
  sub_22EAE9BA0((uint64_t)v168, v165 + 3048);
  if (v168[0] != v169)
    free(v168[0]);
  if (v166[0] != v167)
    free(v166[0]);
  if (!v178)
  {
    if ((_DWORD)v175)
    {
      v119 = 0;
      v120 = 8 * v175;
      v114 = v132;
      v105 = v130;
      v115 = v131;
      do
      {
        v121 = *(void ***)&v174[v119];
        if (v121)
        {
          if (*v121 != v121 + 2)
            free(*v121);
          MEMORY[0x2348A0E9C](v121, 0x1080C40ED926357);
        }
        v119 += 8;
        v113 = v133;
      }
      while (v120 != v119);
    }
    *(_QWORD *)(v170 + 12024) = v177;
    v178 = 1;
  }
  if (v174 != (char *)&v176)
    free(v174);
  if ((v171 & 1) == 0)
    llvm::deallocate_buffer(v172, (void *)(16 * v173));
  sub_22EB48E64(a1);
  if (v106)
  {
    *(_QWORD *)(a1 + 216) = v106;
    *(_QWORD *)(a1 + 3200) = v113;
    *(_QWORD *)(a1 + 10288) = v114;
    *(_DWORD *)(a1 + 1944) = v115;
    *(_DWORD *)(a1 + 2192) = v105;
  }
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v139);
LABEL_205:
  v116 = sub_22EE014E4(&v142);
  TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance((llvm *)v116);
  if (TimeTraceProfilerInstance)
    llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
  return v20;
}

unint64_t sub_22EE0C33C(uint64_t *a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x38)
    return sub_22EE3C878(a1, a2, 0, 0, 0, 0);
  else
    return ((uint64_t (*)(void))((char *)&loc_22EE0C34C + 4 * word_22F4991C8[*(_DWORD *)(a2 + 28) & 0x7F]))();
}

uint64_t sub_22EE0C378(uint64_t *a1, uint64_t a2)
{
  return sub_22EE38DB8(a1, a2, 0, 0);
}

unint64_t sub_22EE0C390(uint64_t *a1, uint64_t a2)
{
  return sub_22EE3DF6C(a1, a2, 0, 0);
}

uint64_t sub_22EE0C484(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  _QWORD v37[5];
  int v38;
  const char *v39;
  int32x2_t v40;
  char v41;
  char v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  void *v55;
  uint64_t v56;
  _BYTE v57[64];
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  unsigned int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v12 = sub_22EFC3500(a4);
  v13 = *(_QWORD **)(a3 + 144);
  if (v13)
    v13 = (_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF8);
  v14 = 1;
  if ((sub_22ED57F34((_QWORD *)a1, a2, a3, v13 != 0, a4, v12, a6, 1) & 1) == 0)
  {
    v16 = *(_QWORD *)(a3 + 144);
    if (v16)
    {
      *(_QWORD *)v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (a6 - 1));
      *(_DWORD *)(v16 + 8) = a2;
    }
    sub_22EE00E90(&v40, a1, 0, a2, 0, a3, 0, v15, 0, 0, 0);
    if (!v41)
    {
      if (v42)
      {
        v14 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 88);
        llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
        v37[0] = &unk_24FAC2E78;
        v37[3] = v17;
        v37[4] = a3;
        v38 = 0;
        v39 = "instantiating enum definition";
        v18 = *(_QWORD *)(a3 + 8);
        if ((v18 & 4) != 0)
          *(_QWORD *)(a3 + 8) = v18 & 0xFFFFFFFFFFFFFFF9 | 2;
        v19 = *(_QWORD *)(a1 + 216);
        v36 = *(_QWORD *)(a1 + 3200);
        *(_QWORD *)(a1 + 3200) = 0;
        v20 = *(_QWORD *)(a1 + 10288);
        v21 = *(_DWORD *)(a1 + 1944);
        v22 = *(_DWORD *)(a1 + 2192);
        *(_QWORD *)(a1 + 216) = a3 + 64;
        *(_QWORD *)(a1 + 10288) = 0;
        *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
        *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
        v43 = 3;
        v44 = 6;
        v58 = *(unsigned int *)(a1 + 1704);
        v45 = 0;
        sub_22EB4DDB8(a1 + 3688, &v44, (int *)&v58, (__int16 *)(a1 + 1693), &v45, &v43);
        v23 = *(unsigned int *)(a1 + 3696);
        v24 = v23 - 2;
        v25 = *(_QWORD *)(a1 + 3688);
        v26 = *(_DWORD *)(v25 + 576 * (v23 - 2));
        if (v26 == 5)
        {
          *(_BYTE *)(v25 + 576 * v23 - 4) = *(_BYTE *)(v25 + 576 * v24 + 572);
          v27 = 1;
        }
        else if (v26 == 2)
        {
          *(_BYTE *)(v25 + 576 * v23 - 4) = 1;
          v27 = *(_BYTE *)(v25 + 576 * v24 + 573) != 0;
        }
        else
        {
          v27 = 0;
          *(_BYTE *)(v25 + 576 * v23 - 4) = 0;
        }
        v28 = v25 + 576 * v23;
        *(_BYTE *)(v28 - 3) = v27;
        *(_WORD *)(a1 + 1693) = 0;
        if (*(_DWORD *)(a1 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v28 - 560));
          sub_22EAEAE08(a1 + 1840, (uint64_t *)(v28 - 496));
        }
        v58 = a1;
        v59 = 1;
        for (i = 16; i != 80; i += 16)
          *(uint64_t *)((char *)&v58 + i) = -4096;
        v62 = (char *)&v64;
        v63 = 0x100000000;
        v65 = *(_QWORD *)(a1 + 12024);
        v66 = 256;
        v67 = 0;
        *(_QWORD *)(a1 + 12024) = &v58;
        sub_22EE33A90(a1, a5, v12, a3, 0, 0);
        v30 = *(_DWORD *)(a1 + 11992);
        v45 = a1;
        v46 = a1;
        v47 = v30;
        v48 = a3 + 64;
        v49 = a5;
        v50 = 0;
        v51 = 0;
        v52 = v54;
        v53 = 0x400000000;
        v55 = v57;
        v56 = 0x400000000;
        sub_22EE3A9F4(&v45, a3, v12);
        if (v19)
        {
          *(_QWORD *)(a1 + 216) = v19;
          *(_QWORD *)(a1 + 3200) = v36;
          *(_QWORD *)(a1 + 10288) = v20;
          *(_DWORD *)(a1 + 1944) = v21;
          *(_DWORD *)(a1 + 2192) = v22;
        }
        v31 = *(unsigned __int8 *)(a3 + 28);
        if (v55 != v57)
          free(v55);
        if (v52 != v54)
          free(v52);
        *(_DWORD *)(v46 + 11992) = v47;
        if (!(_BYTE)v66)
        {
          if ((_DWORD)v63)
          {
            v33 = 0;
            v34 = 8 * v63;
            do
            {
              v35 = *(void ***)&v62[v33];
              if (v35)
              {
                if (*v35 != v35 + 2)
                  free(*v35);
                MEMORY[0x2348A0E9C](v35, 0x1080C40ED926357);
              }
              v33 += 8;
            }
            while (v34 != v33);
          }
          *(_QWORD *)(v58 + 12024) = v65;
          LOBYTE(v66) = 1;
        }
        if (v62 != (char *)&v64)
          free(v62);
        v14 = v31 >> 7;
        if ((v59 & 1) == 0)
          llvm::deallocate_buffer(v60, (void *)(16 * v61));
        sub_22EB48E64(a1);
        llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v37);
      }
    }
    sub_22EE014E4(&v40);
  }
  return v14;
}

BOOL sub_22EE0C8F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  _BOOL8 v10;
  unsigned __int8 *v15;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  _QWORD v58[2];
  char v59;
  _QWORD v60[5];
  int v61;
  const char *v62;
  int32x2_t v63;
  char v64;
  char v65;
  unsigned int v66[24];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  llvm *v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  _QWORD v77[3];
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  llvm *v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v67 = a4;
  v68 = a3;
  v8 = *(_QWORD *)(a4 + 72) & 3;
  if ((_DWORD)v8)
    v9 = (_DWORD)v8 == 3;
  else
    v9 = 1;
  if (v9)
    return 0;
  v15 = (unsigned __int8 *)(*(_QWORD *)(a4 + 72) & 0xFFFFFFFFFFFFFFFCLL);
  if ((*(_BYTE *)(a4 + 68) & 1) != 0)
    v15 = *(unsigned __int8 **)v15;
  if (v15)
  {
    sub_22EE00E90(&v63, a1, 0, a2, 0, a3, 0, a8, 0, 0, 0);
    if (!v64)
    {
      if (!v65)
      {
        v18 = *(_QWORD *)(a1 + 88);
        llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
        v60[0] = &unk_24FAC2E78;
        v60[3] = v18;
        v60[4] = a3;
        v61 = 0;
        v62 = "instantiating default member init";
        v19 = *(_QWORD *)(a3 + 16);
        v20 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0)
          v20 = *(_QWORD *)v20;
        v21 = v20 - 64;
        v22 = *(_QWORD *)(a1 + 216);
        if (v20)
          v23 = (*(_WORD *)(v20 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC;
        else
          v23 = 0;
        v24 = *(_QWORD *)(a1 + 3200);
        v25 = !v23;
        v26 = v25 == 0;
        *(_QWORD *)(a1 + 3200) = 0;
        if (v25)
          v27 = 0;
        else
          v27 = v21;
        v28 = v27 + 64;
        v29 = *(_QWORD *)(a1 + 10288);
        if (!v26)
          v28 = 0;
        v30 = *(_DWORD *)(a1 + 1944);
        v31 = *(_DWORD *)(a1 + 2192);
        *(_QWORD *)(a1 + 216) = v28;
        *(_QWORD *)(a1 + 10288) = 0;
        *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
        *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
        LODWORD(v58[0]) = 6;
        v81 = 0;
        v80 = 3;
        v69 = *(unsigned int *)(a1 + 1704);
        sub_22EB4DDB8(a1 + 3688, (int *)v58, (int *)&v69, (__int16 *)(a1 + 1693), &v81, &v80);
        v32 = *(unsigned int *)(a1 + 3696);
        v33 = v32 - 2;
        v34 = *(_QWORD *)(a1 + 3688);
        v35 = *(_DWORD *)(v34 + 576 * (v32 - 2));
        if (v35 == 5)
        {
          *(_BYTE *)(v34 + 576 * v32 - 4) = *(_BYTE *)(v34 + 576 * v33 + 572);
          v36 = 1;
        }
        else if (v35 == 2)
        {
          *(_BYTE *)(v34 + 576 * v32 - 4) = 1;
          v36 = *(_BYTE *)(v34 + 576 * v33 + 573) != 0;
        }
        else
        {
          v36 = 0;
          *(_BYTE *)(v34 + 576 * v32 - 4) = 0;
        }
        v37 = v34 + 576 * v32;
        *(_BYTE *)(v37 - 3) = v36;
        *(_WORD *)(a1 + 1693) = 0;
        if (*(_DWORD *)(a1 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v37 - 560));
          sub_22EAEAE08(a1 + 1840, (uint64_t *)(v37 - 496));
        }
        v81 = a1;
        v82 = 1;
        for (i = 16; i != 80; i += 16)
          *(uint64_t *)((char *)&v81 + i) = -4096;
        v85 = (char *)&v87;
        v86 = 0x100000000;
        v88 = *(_QWORD *)(a1 + 12024);
        v89 = 256;
        v90 = 0;
        *(_QWORD *)(a1 + 12024) = &v81;
        sub_22E904974(a1);
        v39 = *(_QWORD *)(a3 + 16);
        v40 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 4) != 0)
          v40 = *(_QWORD *)v40;
        v41 = (*(_WORD *)(v40 + 8) & 0x7E) - 34;
        if (v40)
          v42 = v40 - 64;
        else
          v42 = 0;
        if (v41 >= 4)
          v43 = 0;
        else
          v43 = v42;
        sub_22EBBBB24((uint64_t)v58, a1, v43, 0, 1);
        v70 = 0;
        v71 = 0;
        v69 = a1;
        v72 = 0;
        v73 = v77;
        v74 = v77;
        v75 = 2;
        v76 = 0;
        v77[2] = a5;
        v78 = 0;
        v79 = 0;
        v44 = sub_22EE11308((uint64_t *)&v69, v15, 0);
        if (v74 != v73)
          free(v74);
        llvm::deallocate_buffer(v70, (void *)(16 * v72));
        v45 = v68;
        v46 = v44 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
          sub_22F0D5A50(v46);
        sub_22EAADC1C();
        v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 136))(*(_QWORD *)(a1 + 96));
        if (v53)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 128))(v53, v45);
        v54 = 0;
        if ((*(_DWORD *)(v45 + 72) & 3) != 0 && (*(_DWORD *)(v45 + 72) & 3) != 3)
        {
          v54 = (_QWORD *)(*(_QWORD *)(v45 + 72) & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_BYTE *)(v45 + 68) & 1) != 0)
            v54 = (_QWORD *)*v54;
        }
        v10 = v54 == 0;
        if (v59)
          *(_QWORD *)(v58[0] + 10288) = v58[1];
        if (!(_BYTE)v89)
        {
          if ((_DWORD)v86)
          {
            v55 = 0;
            v57 = 8 * v86;
            do
            {
              v56 = *(void ***)&v85[v55];
              if (v56)
              {
                if (*v56 != v56 + 2)
                  free(*v56);
                MEMORY[0x2348A0E9C](v56, 0x1080C40ED926357);
              }
              v55 += 8;
            }
            while (v57 != v55);
          }
          *(_QWORD *)(v81 + 12024) = v88;
          LOBYTE(v89) = 1;
        }
        if (v85 != (char *)&v87)
          free(v85);
        if ((v82 & 1) == 0)
          llvm::deallocate_buffer(v83, (void *)(16 * v84));
        sub_22EB48E64(a1);
        if (v22)
        {
          *(_QWORD *)(a1 + 216) = v22;
          *(_QWORD *)(a1 + 3200) = v24;
          *(_QWORD *)(a1 + 10288) = v29;
          *(_DWORD *)(a1 + 1944) = v30;
          *(_DWORD *)(a1 + 2192) = v31;
        }
        llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v60);
        goto LABEL_14;
      }
      sub_22E8FCA40((_QWORD *)a1, a2, 0xC84u, 0, (uint64_t)&v81);
      sub_22E890024((uint64_t)&v81, &v68);
      sub_22E903BEC((unsigned int *)&v81);
    }
    v10 = 1;
LABEL_14:
    sub_22EE014E4(&v63);
    return v10;
  }
  v47 = *(_QWORD *)(a4 + 16);
  v48 = v47 & 0xFFFFFFFFFFFFFFF8;
  if ((v47 & 4) != 0)
    v48 = *(_QWORD *)v48;
  v49 = (*(_WORD *)(v48 + 8) & 0x7E) - 34;
  if (v48)
    v50 = v48 - 64;
  else
    v50 = 0;
  if (v49 >= 4)
    v50 = 0;
  v69 = sub_22F3B16FC(v50 + 64);
  sub_22E8FCA40((_QWORD *)a1, a2, 0xC85u, 0, (uint64_t)&v81);
  v51 = sub_22E890024((uint64_t)&v81, (uint64_t *)&v69);
  sub_22E890024(v51, &v67);
  sub_22E903BEC((unsigned int *)&v81);
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
  sub_22E8FCA40((_QWORD *)a1, SHIDWORD(v52), 0x1598u, 0, (uint64_t)v66);
  sub_22E903BEC(v66);
  v10 = 1;
  sub_22EFC77E8(a3, 1);
  return v10;
}

uint64_t sub_22EE0CEDC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  llvm *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];
  int v15;
  uint64_t v16;

  v7 = 0;
  v8 = 0;
  v6 = a1;
  v9 = 0;
  v10 = v14;
  v11 = v14;
  v12 = 2;
  v13 = 0;
  v14[2] = a3;
  v15 = 0;
  v16 = 0;
  v4 = sub_22EE11308(&v6, a2, a4);
  if (v11 != v10)
    free(v11);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
  return v4;
}

uint64_t sub_22EE0CF68(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char *v20[2];
  _QWORD v21[17];
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[10];
  void *v30;
  uint64_t v31;
  _BYTE v32[104];
  void *v33;
  uint64_t v34;
  _BYTE v35[64];
  char *v36;
  uint64_t v37;
  _QWORD v38[6];

  v3 = a3;
  v38[4] = *MEMORY[0x24BDAC8D0];
  if (sub_22EFD5760(a3) == 2)
    return 1;
  v36 = (char *)v38;
  v37 = 0x400000000;
  v5 = *(_QWORD *)(v3 + 152);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0 && v6)
  {
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 152);
      v6 = v7 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v7 & 4) != 0 && v6);
  }
  sub_22EFEAC54(v6, (uint64_t)&v36);
  if ((_DWORD)v37)
  {
    v8 = 0;
    v9 = 8 * v37 - 8;
    do
    {
      v16 = 0;
      v17 = a2;
      v18 = 0;
      v19 = 0;
      v20[0] = (char *)v21;
      v20[1] = (char *)0x400000000;
      v21[16] = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = v29;
      v28 = 0x800000000;
      v29[8] = 0;
      v29[9] = 0;
      v30 = v32;
      v31 = 0x400000000;
      v32[96] = 0;
      v33 = v35;
      v34 = 0x400000000;
      v10 = v3;
      v11 = sub_22EDC0338(a1, *(_QWORD *)&v36[v8], *(_QWORD *)(v3 + 168), &v16);
      v4 = v11 == 0;
      if (v33 != v35)
        free(v33);
      if (v30 != v32)
        free(v30);
      if (v27 != v29)
        free(v27);
      sub_22E89277C(v20);
      if (!v11)
        break;
      v12 = v9 == v8;
      v8 += 8;
      v3 = v10;
    }
    while (!v12);
  }
  else
  {
    v4 = 0;
  }
  if (v36 != (char *)v38)
    free(v36);
  return v4;
}

uint64_t sub_22EE0D174(_QWORD *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  int v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int i;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t **v62;
  _BYTE *v63;
  unint64_t v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  __int128 v72;
  void *__p[2];
  char v74;
  int32x2_t v75;
  char v76;
  char v77;
  uint64_t v78;
  _OWORD v79[3];
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  char *v84[2];
  _QWORD v85[17];
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  void *v91;
  uint64_t v92;
  _QWORD v93[10];
  void *v94;
  uint64_t v95;
  _BYTE v96[104];
  void *v97;
  uint64_t v98;
  _BYTE v99[64];
  void *v100;
  uint64_t v101;
  _BYTE v102[1024];
  int v103;
  char v104;
  char *v105;
  uint64_t v106;
  _BYTE v107[32];
  uint64_t *v108;
  uint64_t v109;
  _QWORD v110[10];

  v110[8] = *MEMORY[0x24BDAC8D0];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if ((*(_BYTE *)(v9 + 28) & 0x80) != 0)
    return 1;
  v11 = v9;
  v12 = a2;
  v78 = v9;
  sub_22EE00E90(&v75, (uint64_t)a1, 0, a2, 0, v9, 0, v10, 0, 0, 0);
  if (v76)
  {
LABEL_3:
    v13 = 1;
LABEL_7:
    sub_22EE014E4(&v75);
    return v13;
  }
  if (v77)
  {
    v13 = 0;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v11 + 152);
  v16 = v15 & 4;
  if (v15 < 8 || v16 == 0)
  {
    v18 = v15 & 0xFFFFFFFFFFFFFFF8;
    v19 = (v15 & 4) == 0 || v18 == 0;
    v68 = a2;
    if (!v19)
    {
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)v18 + 152);
        v18 = v20 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v20 & 4) != 0 && v18);
    }
    v66 = a4;
    v67 = a5;
    v108 = v110;
    v109 = 0x400000000;
    v105 = v107;
    v106 = 0x400000000;
    v69 = v18;
    sub_22EFEAC54(v18, (uint64_t)&v105);
    v100 = v102;
    v101 = 0x1000000000;
    v103 = a2;
    v104 = 0;
    if ((_DWORD)v106)
    {
      v21 = 0;
      v70 = 8 * v106;
      v71 = a1;
      do
      {
        v22 = *(_QWORD *)&v105[v21];
        v80 = 0;
        v81 = v103;
        v82 = 0;
        v83 = 0;
        v84[0] = (char *)v85;
        v84[1] = (char *)0x400000000;
        v85[16] = 0;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = v93;
        v92 = 0x800000000;
        v93[8] = 0;
        v93[9] = 0;
        v94 = v96;
        v95 = 0x400000000;
        v96[96] = 0;
        v97 = v99;
        v98 = 0x400000000;
        v23 = sub_22EDC0338((uint64_t)a1, v22, *(_QWORD *)(v11 + 168), (uint64_t)&v80);
        if (v23)
        {
          v24 = a1;
          v25 = v23;
          sub_22ED23640((uint64_t)&v100);
          v26 = (char *)v100 + 64 * (unint64_t)v101;
          sub_22ECF93D4(v24[11], v25, (unint64_t)&v80, (uint64_t)v79);
          *((_QWORD *)v26 - 8) = v69;
          *((_QWORD *)v26 - 7) = v22;
          v27 = v79[0];
          v28 = v79[2];
          *((_OWORD *)v26 - 2) = v79[1];
          *((_OWORD *)v26 - 1) = v28;
          *((_OWORD *)v26 - 3) = v27;
        }
        else
        {
          v29 = v109;
          if (v109 >= (unint64_t)HIDWORD(v109))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v109;
          }
          v30 = (char *)&v108[2 * v29];
          *(_QWORD *)v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
          LODWORD(v109) = v109 + 1;
          v31 = (char *)&v108[2 * v109];
          *((_QWORD *)v31 - 2) = v22;
          v32 = v80;
          v80 = 0;
          *((_QWORD *)v31 - 1) = v32;
        }
        if (v97 != v99)
          free(v97);
        a1 = v71;
        if (v94 != v96)
          free(v94);
        if (v91 != v93)
          free(v91);
        sub_22E89277C(v84);
        v21 += 8;
      }
      while (v70 != v21);
    }
    v12 = v68;
    if ((_DWORD)v109)
    {
      v33 = v108;
      if ((_DWORD)v109 != 1)
      {
        v34 = v108 + 2;
        v35 = 16 * v109 - 16;
        v36 = v108 + 2;
        do
        {
          v37 = sub_22F34756C((uint64_t)a1, *v34, *v33, v68);
          v38 = *v36;
          v36 += 2;
          if (v37 == v38)
            v33 = v34;
          v34 = v36;
          v35 -= 16;
        }
        while (v35);
        if ((_DWORD)v109)
        {
          v39 = v108;
          v40 = 16 * v109;
          while (v39 == v33 || sub_22F34756C((uint64_t)a1, *v39, *v33, v68) == *v33)
          {
            v39 += 2;
            v40 -= 16;
            if (!v40)
              goto LABEL_45;
          }
          sub_22EE014E4(&v75);
          sub_22EFC77E8(v11, 1);
          sub_22E8FCA40(a1, v68, 0x11A3u, 0, (uint64_t)&v80);
          sub_22E890024((uint64_t)&v80, &v78);
          sub_22E903BEC((unsigned int *)&v80);
          if ((_DWORD)v109)
          {
            v61 = (uint64_t **)v108;
            v62 = (uint64_t **)&v108[2 * v109];
            do
            {
              sub_22E8FCA40(a1, *((_DWORD *)*v61 + 6), 0x175Du, 0, (uint64_t)&v80);
              sub_22ED730EC((uint64_t)a1, (*v61)[23], *v61[1], *((_DWORD *)v61[1] + 2), __p);
              sub_22F2F3734((uint64_t)&v80, __p);
              if (v74 < 0)
                operator delete(__p[0]);
              sub_22E903BEC((unsigned int *)&v80);
              v61 += 2;
            }
            while (v61 != v62);
          }
          v63 = v100;
          if ((_DWORD)v101)
          {
            v64 = (unint64_t)v101 << 6;
            v65 = (char *)v100 + 16;
            do
            {
              sub_22ECF95E4((unint64_t)v65);
              v65 += 64;
              v64 -= 64;
            }
            while (v64);
            v63 = v100;
          }
          if (v63 != v102)
            free(v63);
          if (v105 != v107)
            free(v105);
          if (v108 != v110)
            free(v108);
          goto LABEL_3;
        }
      }
LABEL_45:
      v72 = *(_OWORD *)v33;
      if (!v11 || (v41 = v11, (*(_DWORD *)(v11 + 28) & 0x7F) != 0x53))
      {
        v42 = *(_QWORD *)(v11 + 16);
        v43 = v42 & 0xFFFFFFFFFFFFFFF8;
        if ((v42 & 4) != 0)
          v43 = *(_QWORD *)v43;
        for (i = *(_WORD *)(v43 + 8) & 0x7F; i != 83; i = *(_WORD *)(v43 + 8) & 0x7F)
        {
          v45 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v45 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_60;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_59;
            if (i == 16)
              goto LABEL_53;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_66;
            if (i == 24)
            {
LABEL_53:
              v45 = -48;
            }
            else
            {
LABEL_59:
              if (i != 70)
              {
LABEL_60:
                v46 = i - 52;
                if ((i - 33) >= 5)
                  v47 = -48;
                else
                  v47 = -64;
                if (v46 >= 6)
                  v45 = v47;
                else
                  v45 = -72;
                goto LABEL_66;
              }
              v45 = -64;
            }
          }
LABEL_66:
          v48 = *(_QWORD *)(v43 + v45 + 16);
          v43 = v48 & 0xFFFFFFFFFFFFFFF8;
          if ((v48 & 4) != 0)
            v43 = *(_QWORD *)v43;
        }
        v41 = v43 - 40;
      }
      v49 = sub_22E3CD3D4(*(_QWORD *)(v41 + 88) + 2032, 16, 3);
      *(_OWORD *)v49 = v72;
      *(_QWORD *)(v11 + 152) = v49 | 4;
    }
    v50 = v100;
    if ((_DWORD)v101)
    {
      v51 = (unint64_t)v101 << 6;
      v52 = (char *)v100 + 16;
      do
      {
        sub_22ECF95E4((unint64_t)v52);
        v52 += 64;
        v51 -= 64;
      }
      while (v51);
      v50 = v100;
      v12 = v68;
    }
    a4 = v66;
    a5 = v67;
    if (v50 != v102)
      free(v50);
    if (v105 != v107)
      free(v105);
    if (v108 != v110)
      free(v108);
    v15 = *(_QWORD *)(v11 + 152);
    v16 = v15 & 4;
  }
  v53 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  v54 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v16)
  {
    v54 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (v53)
      v54 = *v53 | 4;
  }
  if ((v54 & 4) != 0 && (v55 = v54 & 0xFFFFFFFFFFFFFFF8, (v54 & 0xFFFFFFFFFFFFFFF8) != 0))
  {
    do
    {
      v56 = v55;
      v57 = *(_QWORD *)(*(_QWORD *)(v55 + 104) + 200);
      v55 = v57 & 0xFFFFFFFFFFFFFFF8;
      v58 = v57 & 4;
      if (v55)
        v59 = v58 == 0;
      else
        v59 = 0;
    }
    while (v59);
    sub_22EE014E4(&v75);
  }
  else
  {
    if ((v15 & 4) != 0 && v53)
    {
      do
      {
        v60 = *(_QWORD *)(*v53 + 152);
        v53 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8);
      }
      while ((v60 & 4) != 0 && v53);
    }
    while (*(_QWORD *)sub_22EFE9368((uint64_t)v53) >= 8uLL && (*(_BYTE *)sub_22EFE9368((uint64_t)v53) & 4) == 0)
      v53 = (_QWORD *)(*(_QWORD *)sub_22EFE9368((uint64_t)v53) & 0xFFFFFFFFFFFFFFF8);
    v56 = v53[6];
    sub_22EE014E4(&v75);
    if (!v56)
      return 0;
  }
  sub_22EE007CC(v11, 0, 0, 0, (uint64_t)&v100);
  v13 = sub_22EE0B368((unint64_t)a1, v12, (uint64_t *)v11, v56, (uint64_t *)&v100, a4, a5);
  if (v100 != v102)
    free(v100);
  return v13;
}

void sub_22EE0D944(unint64_t a1, unsigned __int32 a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  char v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t i;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  char v70;
  __n128 v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[96];
  char v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[10];

  v78[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a3 + 72) & 0x80) != 0)
    sub_22EFCC320(a3 + 64);
  v8 = *(_QWORD *)(a3 + 80);
  if (v8)
  {
    while (1)
    {
      v70 = 0;
      v9 = *(_DWORD *)(v8 + 28);
      if ((v9 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v16 = sub_22EFBF824(v8);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)(v8 + 56);
          if ((v18 & 4) == 0 || !*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 40))
            goto LABEL_26;
          v71 = 0uLL;
          v72 = v74;
          v73 = 0x400000000;
          v75 = 0;
          v76 = v78;
          v77 = 0x400000000;
          v19 = sub_22E9F3C18(a1, v8, (uint64_t)&v71, 0);
          if (v75)
            v20 = v19;
          else
            v20 = 1;
          if (v76 != v78)
            free(v76);
          if (v72 != v74)
            free(v72);
          if ((v20 & 1) == 0)
          {
LABEL_26:
            if (!sub_22F308C14(v8))
            {
              v21 = *(_QWORD *)(v8 + 144) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)(v8 + 144) & 6) != 2 || !v21)
                v21 = *(_QWORD *)(v21 + 48);
              v22 = (*(_DWORD *)v21 >> 1) & 3;
              if (v22 != 1)
              {
                sub_22ED6C90C(a1, a2, a5, v8, (v22 + 1), *(unsigned int *)(v21 + 8), &v70);
                if ((v23 & 1) == 0 && !v70 && ((_DWORD)a5 != 4 || sub_22EFBF86C(v17, v71.n128_u64, 0)))
                {
                  sub_22EFC2530(v8, a5, a2);
                  if (sub_22EFBF86C(v8, v71.n128_u64, 0))
                  {
                    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v8);
                  }
                  else if ((_DWORD)a5 == 4)
                  {
                    sub_22EE44C50(a1, a2, v8, 0, 0, 0);
                  }
                  else if ((_DWORD)a5 == 1)
                  {
                    v71.n128_u64[0] = v8;
                    v71.n128_u32[2] = a2;
                    sub_22EB87D64((_QWORD *)(a1 + 12240), &v71);
                  }
                }
              }
            }
          }
        }
        goto LABEL_41;
      }
      v10 = v9 & 0x7F;
      if ((v10 - 67) >= 0xFFFFFFF9)
        break;
      if ((v10 - 38) >= 0xFFFFFFFD)
      {
        if (sub_22F308C14(v8)
          || sub_22EFC3A88(v8)
          || (*(_BYTE *)(v8 + 96) & 3) == 0 && sub_22E3CD31C((uint64_t *)(v8 + 96), v8))
        {
          goto LABEL_41;
        }
        v34 = *(_QWORD *)(v8 + 128);
        if (v34)
        {
          if (((*(unsigned __int16 *)(v34 + 8) | (*(unsigned __int8 *)(v34 + 10) << 16)) & 0x100000) != 0)
            goto LABEL_41;
        }
        v35 = (_DWORD *)(*(_QWORD *)(v8 + 136) & ((uint64_t)(*(_QWORD *)(v8 + 136) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
        v36 = (*v35 >> 1) & 3;
        if (v36 == 1 || (_DWORD)a5 == 3 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 68) == 15)
          goto LABEL_41;
        sub_22ED6C90C(a1, a2, a5, v8, (v36 + 1), *(unsigned int *)((*(_QWORD *)(v8 + 136) & ((uint64_t)(*(_QWORD *)(v8 + 136) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)+ 8), &v70);
        if ((v37 & 1) != 0 || v70)
          goto LABEL_41;
        v38 = 0;
        v39 = *(_QWORD *)(v8 + 136);
        if ((v39 & 4) != 0)
        {
          v40 = (_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
          if (v40)
            v38 = *v40 & 0xFFFFFFFFFFFFFFF8;
        }
        v41 = *(_QWORD *)(v8 + 128);
        if ((v41
           || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104)),
               (v41 = *(_QWORD *)(v8 + 128)) != 0))
          && *(_QWORD *)(v41 + 88))
        {
          if ((_DWORD)a5 == 4 && sub_22EFD5760(v8) == 3)
          {
            sub_22EFD57A8(v8, 4);
            sub_22EAB631C(a1, a2, v8, 1u);
          }
        }
        else
        {
          v63 = *(_QWORD *)(v38 + 128);
          if (!v63
            && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v38 + 104) + 96), *(_QWORD *)(v38 + 104)),
                (v63 = *(_QWORD *)(v38 + 128)) == 0)
            || !*(_QWORD *)(v63 + 88))
          {
            if ((_DWORD)a5 == 3)
            {
              *(_QWORD *)v35 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF9 | 4;
              v35[2] = a2;
            }
            goto LABEL_41;
          }
          sub_22EE0B368(a1, a2, (uint64_t *)v8, v38, a4, a5, 1);
        }
        v64 = *(_QWORD *)(v8 + 128);
        if (v64
          || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104)),
              (v64 = *(_QWORD *)(v8 + 128)) != 0))
        {
          v65 = *(_QWORD *)(v64 + 88);
          if (v65)
            sub_22EE0D944(a1, a2, v65, a4, a5);
        }
        goto LABEL_41;
      }
      if (v10 == 33)
      {
        v11 = *(_DWORD **)(v8 + 144);
        v12 = (*v11 >> 1) & 3;
        if (v12 != 1)
        {
          sub_22ED6C90C(a1, a2, a5, v8, (v12 + 1), v11[2], &v70);
          if ((v13 & 1) == 0 && !v70 && !sub_22EFC3500(v8))
          {
            v14 = sub_22EFC3A1C(v8);
            if ((_DWORD)a5 == 4)
            {
              v15 = v14;
              if (sub_22EFC3500(v14))
                sub_22EE0C484(a1, a2, v8, v15, (uint64_t)a4, 4);
            }
            else
            {
              *(_QWORD *)v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF9 | (2 * (a5 - 1));
              v11[2] = a2;
            }
          }
        }
      }
      else if ((_DWORD)a5 == 1
             && (v10 - 49) <= 2
             && (*(_DWORD *)(v8 + 72) & 3) != 0
             && (*(_DWORD *)(v8 + 72) & 3) != 3)
      {
        v26 = sub_22EFD57F4(a3);
        v27 = sub_22EFCE144(v26 + 64, *(_QWORD *)(v8 + 40));
        if (v27)
        {
          while (1)
          {
            v31 = v27 & 0xFFFFFFFFFFFFFFF8;
            if ((v27 & 4) == 0 || !v31)
              break;
            v32 = *(_QWORD *)v31;
            if (*(_QWORD *)v31)
              v33 = (*(_DWORD *)(*(_QWORD *)v31 + 28) & 0x7Fu) - 52 > 0xFFFFFFFC;
            else
              v33 = 0;
            if (v33)
              goto LABEL_113;
            v27 = *(_QWORD *)(v31 + 8);
            if (!v27)
              goto LABEL_55;
          }
          if ((*(_DWORD *)(v31 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD || v31 == 0)
            v32 = 0;
          else
            v32 = v27 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
LABEL_55:
          v32 = 0;
        }
LABEL_113:
        sub_22EE0C8F0(a1, a2, v8, v32, (uint64_t)a4, v28, v29, v30);
      }
LABEL_41:
      v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v8)
        return;
    }
    if ((v10 - 64) < 3)
      goto LABEL_41;
    v24 = *(_QWORD *)(v8 + 16);
    v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    if ((v24 & 4) != 0)
      v25 = *(_QWORD *)v25;
    if ((*(_WORD *)(v25 + 8) & 0x7Eu) - 34 > 3)
      goto LABEL_41;
    if (sub_22F308C14(v8))
      goto LABEL_41;
    v42 = (_DWORD *)sub_22EFBE104(v8);
    v43 = (*v42 >> 1) & 3;
    if (v43 == 1)
      goto LABEL_41;
    sub_22ED6C90C(a1, a2, a5, v8, (v43 + 1), v42[2], &v70);
    if ((v44 & 1) != 0 || v70)
      goto LABEL_41;
    if ((_DWORD)a5 != 4)
    {
      sub_22EFBEC04(v8, a5, a2);
      goto LABEL_41;
    }
    v45 = (_QWORD *)sub_22EFBE104(v8);
    if (v45)
    {
      v46 = *v45 & 0xFFFFFFFFFFFFFFF8;
      if (v46)
      {
        v47 = *v45 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(v46 + 28) & 0x7F) == 0x53)
          goto LABEL_122;
      }
    }
    else
    {
      v46 = 0;
    }
    for (i = *(_QWORD *)(v46 + 16); ; i = *(_QWORD *)(v49 + v51 + 16))
    {
      v49 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) != 0)
        v49 = *(_QWORD *)v49;
      v50 = *(_WORD *)(v49 + 8) & 0x7F;
      if (v50 == 83)
      {
        v47 = v49 - 40;
LABEL_122:
        v56 = *(_QWORD *)(v46 + 80);
        if (v56)
        {
          v67 = 0;
          v57 = *(_QWORD *)(v47 + 88);
          v58 = v56;
          v66 = v56;
          while (1)
          {
            v59 = v58;
            if (sub_22EFBBF74(v58, v57) == 2)
              break;
            v60 = v59;
            v62 = *(_BYTE *)(v59 + 72);
            v61 = (uint64_t *)(v59 + 72);
            if ((v62 & 3) != 0)
            {
              if (v67)
                goto LABEL_41;
              v67 = 1;
            }
            v58 = sub_22E3CD31C(v61, v60);
            if (v58 == v66 || !v58)
              goto LABEL_41;
          }
          sub_22EFBEC04(v8, 4, a2);
          sub_22EE46380(a1, a2, v8, 0, 0, 0);
        }
        goto LABEL_41;
      }
      v51 = -40;
      if ((*(_WORD *)(v49 + 8) & 0x7Fu) > 0x46)
      {
        if (v50 == 71)
        {
          v51 = -56;
          continue;
        }
        if (v50 != 81)
          goto LABEL_97;
      }
      else
      {
        if (v50 > 0x18)
          goto LABEL_96;
        if (v50 == 16)
          goto LABEL_90;
        if (((1 << v50) & 0x1066) == 0)
        {
          if (v50 == 24)
          {
LABEL_90:
            v51 = -48;
            continue;
          }
LABEL_96:
          if (v50 == 70)
          {
            v51 = -64;
            continue;
          }
LABEL_97:
          v52 = v50 - 52;
          v53 = v50 - 33 >= 5;
          v54 = -64;
          if (v53)
            v54 = -48;
          v53 = v52 >= 6;
          v51 = -72;
          if (v53)
            v51 = v54;
          continue;
        }
      }
    }
  }
}

uint64_t sub_22EE0E148(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  llvm *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;

  if (!a2)
    return 0;
  v11 = 0;
  v12 = 0;
  v10 = a1;
  v13 = 0;
  v14 = v18;
  v15 = v18;
  v16 = 2;
  v17 = 0;
  v18[2] = a3;
  v19 = 0;
  v20 = 0;
  v8 = sub_22EE0E1E0(&v10, a2, 0, a4, a5, a6, a7, a8);
  if (v15 != v14)
    free(v15);
  llvm::deallocate_buffer(v11, (void *)(16 * v13));
  return v8;
}

uint64_t sub_22EE0E1E0(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(*(_BYTE *)a2)
  {
    case 1:
      result = sub_22EE23E00(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2:
      result = sub_22EE24330(a1, (uint64_t)a2);
      break;
    case 3:
    case 9:
    case 0x13:
    case 0x60:
      result = nullsub_910(a2);
      break;
    case 4:
      result = sub_22EE2452C(a1, (uint64_t)a2);
      break;
    case 5:
      result = sub_22EE24670(a1, (uint64_t)a2);
      break;
    case 6:
      result = sub_22EE24934(a1, (uint64_t)a2);
      break;
    case 7:
      result = sub_22EE24ABC(a1, (uint64_t)a2);
      break;
    case 8:
      result = sub_22EE24CD4(a1, (uint64_t)a2);
      break;
    case 0xA:
      result = sub_22EE24CDC(a1, (uint64_t)a2);
      break;
    case 0xB:
      result = sub_22EE24D30(a1, (uint64_t)a2);
      break;
    case 0xC:
      result = sub_22EE2501C(a1, (uint64_t)a2);
      break;
    case 0xD:
      result = sub_22EE251B0(a1, (uint64_t)a2);
      break;
    case 0xE:
      result = sub_22EE25258(a1, (uint64_t)a2);
      break;
    case 0xF:
      result = sub_22EE2542C(a1, (uint64_t)a2);
      break;
    case 0x10:
      result = sub_22EE2547C(a1, a2);
      break;
    case 0x11:
      result = sub_22EE257A4(a1, (uint64_t)a2);
      break;
    case 0x12:
      result = sub_22EE2581C(a1, (uint64_t)a2);
      break;
    case 0x14:
      result = sub_22EE25A40((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15:
      result = sub_22EE25A4C(a1, (uint64_t)a2);
      break;
    case 0x16:
      result = sub_22EE25AB8(a1, (uint64_t)a2);
      break;
    case 0x17:
      result = sub_22EE25B24(a1, (uint64_t)a2);
      break;
    case 0x18:
      result = sub_22EE25B90(a1, (uint64_t)a2);
      break;
    case 0x19:
      result = sub_22EE25BFC(a1, (uint64_t)a2);
      break;
    case 0x1A:
      result = sub_22EE25C6C(a1, (uint64_t)a2);
      break;
    case 0x1B:
      result = sub_22EE25CD8(a1, (uint64_t)a2);
      break;
    case 0x1C:
      result = sub_22EE25D44(a1, (uint64_t)a2);
      break;
    case 0x1D:
      result = sub_22EE25DB0(a1, (uint64_t)a2);
      break;
    case 0x1E:
      result = sub_22EE25E1C(a1, (uint64_t)a2);
      break;
    case 0x1F:
      result = sub_22EE25E88(a1, (uint64_t)a2);
      break;
    case 0x20:
      result = sub_22EE25EF4(a1, (uint64_t)a2);
      break;
    case 0x21:
      result = sub_22EE25F60(a1, (uint64_t)a2);
      break;
    case 0x22:
      result = sub_22EE25FCC(a1, (uint64_t)a2);
      break;
    case 0x23:
      result = sub_22EE26038(a1, (uint64_t)a2);
      break;
    case 0x24:
      result = sub_22EE260A4(a1, (uint64_t)a2);
      break;
    case 0x25:
      result = sub_22EE26110(a1, (uint64_t)a2);
      break;
    case 0x26:
      result = sub_22EE2617C(a1, (uint64_t)a2);
      break;
    case 0x27:
      result = sub_22EE261E8(a1, (uint64_t)a2);
      break;
    case 0x28:
      result = sub_22EE26254(a1, (uint64_t)a2);
      break;
    case 0x29:
      result = sub_22EE262C0(a1, (uint64_t)a2);
      break;
    case 0x2A:
      result = sub_22EE2632C(a1, (uint64_t)a2);
      break;
    case 0x2B:
      result = sub_22EE26398(a1, (uint64_t)a2);
      break;
    case 0x2C:
      result = sub_22EE26404(a1, (uint64_t)a2);
      break;
    case 0x2D:
      result = sub_22EE26470(a1, (uint64_t)a2);
      break;
    case 0x2E:
      result = sub_22EE264DC(a1, (uint64_t)a2);
      break;
    case 0x2F:
      result = sub_22EE26548(a1, (uint64_t)a2);
      break;
    case 0x30:
      result = sub_22EE265B4(a1, (uint64_t)a2);
      break;
    case 0x31:
      result = sub_22EE26620(a1, (uint64_t)a2);
      break;
    case 0x32:
      result = sub_22EE2668C(a1, (uint64_t)a2);
      break;
    case 0x33:
      result = sub_22EE266F8(a1, (uint64_t)a2);
      break;
    case 0x34:
      result = sub_22EE26764(a1, (uint64_t)a2);
      break;
    case 0x35:
      result = sub_22EE267D0(a1, (uint64_t)a2);
      break;
    case 0x36:
      result = sub_22EE2683C(a1, (uint64_t)a2);
      break;
    case 0x37:
      result = sub_22EE268A8(a1, (uint64_t)a2);
      break;
    case 0x38:
      result = sub_22EE26914(a1, (uint64_t)a2);
      break;
    case 0x39:
      result = sub_22EE26980(a1, (uint64_t)a2);
      break;
    case 0x3A:
      result = sub_22EE269EC(a1, (uint64_t)a2);
      break;
    case 0x3B:
      result = sub_22EE26A58(a1, (uint64_t)a2);
      break;
    case 0x3C:
    case 0x3D:
      result = sub_22EE26AC4(a1, (uint64_t)a2);
      break;
    case 0x3E:
      result = sub_22EE26B30(a1, (uint64_t)a2);
      break;
    case 0x3F:
      result = sub_22EE26B9C(a1, (uint64_t)a2);
      break;
    case 0x40:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41:
      result = sub_22EE26C08(a1, (uint64_t)a2);
      break;
    case 0x42:
      result = sub_22EE26C74(a1, (uint64_t)a2);
      break;
    case 0x43:
      result = sub_22EE26CE0(a1, (uint64_t)a2);
      break;
    case 0x44:
      result = sub_22EE26D4C(a1, (uint64_t)a2);
      break;
    case 0x45:
      result = sub_22EE26DB8(a1, (uint64_t)a2);
      break;
    case 0x46:
      result = sub_22EE26E24(a1, (uint64_t)a2);
      break;
    case 0x47:
      result = sub_22EE26E90(a1, (uint64_t)a2);
      break;
    case 0x48:
      result = sub_22EE26EFC(a1, (uint64_t)a2);
      break;
    case 0x49:
      result = sub_22EE26F68(a1, (uint64_t)a2);
      break;
    case 0x4A:
      result = sub_22EE26FD4(a1, (uint64_t)a2);
      break;
    case 0x4B:
      result = sub_22EE27040(a1, (uint64_t)a2);
      break;
    case 0x4C:
      result = sub_22EE270AC(a1, (uint64_t)a2);
      break;
    case 0x4D:
      result = sub_22EE27118(a1, (uint64_t)a2);
      break;
    case 0x4E:
      result = sub_22EE27184(a1, (uint64_t)a2);
      break;
    case 0x4F:
      result = sub_22EE271F0(a1, (uint64_t)a2);
      break;
    case 0x50:
      result = sub_22EE2725C(a1, (uint64_t)a2);
      break;
    case 0x51:
      result = sub_22EE272C8(a1, (uint64_t)a2);
      break;
    case 0x52:
      result = sub_22EE27334(a1, (uint64_t)a2);
      break;
    case 0x53:
      result = sub_22EE273A0(a1, (uint64_t)a2);
      break;
    case 0x54:
      result = sub_22EE2740C(a1, (uint64_t)a2);
      break;
    case 0x55:
      result = sub_22EE27478(a1, (uint64_t)a2);
      break;
    case 0x56:
      result = sub_22EE274E4(a1, (uint64_t)a2);
      break;
    case 0x57:
      result = sub_22EE275EC(a1, (uint64_t)a2);
      break;
    case 0x58:
      result = sub_22EE27658((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59:
      result = sub_22EE2770C((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5A:
      result = sub_22EE27784(a1, (uint64_t)a2);
      break;
    case 0x5B:
      result = sub_22EE279AC(a1, (uint64_t)a2);
      break;
    case 0x5C:
      result = sub_22EE27A18(a1, (uint64_t)a2);
      break;
    case 0x5D:
      result = sub_22EE27B0C(a1, (uint64_t)a2);
      break;
    case 0x5E:
      result = sub_22EE27B5C(a1, (uint64_t)a2);
      break;
    case 0x5F:
      result = sub_22EE27BC8(a1, (uint64_t)a2);
      break;
    case 0x61:
      result = sub_22EE27C10(a1, (uint64_t)a2);
      break;
    case 0x62:
      result = sub_22EE27CC4(a1, a2);
      break;
    case 0x63:
      result = sub_22EE27ED4(a1, (uint64_t)a2);
      break;
    case 0x64:
      result = sub_22EE27F24(a1, a2);
      break;
    case 0x65:
      result = sub_22EE2804C(a1, (unsigned int *)a2, a3);
      break;
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
      v10 = sub_22EE0ED40(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEB:
      result = sub_22EE281D0((_QWORD **)a1, (uint64_t)a2, a3);
      break;
    case 0xEC:
      result = sub_22EE28254(a1, a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22EE0E8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

void sub_22EE0ED40(uint64_t *a1, unint64_t a2, __n128 a3)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  __int128 v79;
  llvm *v80;
  __int128 v81;
  llvm *v82;
  __int128 v83;
  llvm *v84;
  void *v85[2];
  llvm *v86;
  unsigned int v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  switch(*(_BYTE *)a2)
  {
    case 0x66:
      sub_22EE138E0(a1, a2);
      return;
    case 0x67:
      sub_22EE13980(a1, a2);
      return;
    case 0x68:
      sub_22EE13A44(a1, a2);
      return;
    case 0x6B:
      sub_22EE13A90(a1, a2);
      return;
    case 0x6C:
      sub_22EE13B48((_QWORD **)a1, a2);
      return;
    case 0x6D:
      sub_22EE13D10((_QWORD **)a1, a2);
      return;
    case 0x6E:
    case 0x84:
    case 0xAC:
    case 0xAD:
    case 0xC5:
      sub_22EE13D78((uint64_t)a1, a2);
      return;
    case 0x6F:
      sub_22EE13D80(a1, a2);
      return;
    case 0x70:
      sub_22EE13E8C(a1, a2);
      return;
    case 0x71:
      sub_22EE14020(a1, (_DWORD *)a2, a3);
      return;
    case 0x72:
      sub_22EE140F0((unint64_t *)a1, a2);
      return;
    case 0x73:
      sub_22EE14380((uint64_t)a1, a2);
      return;
    case 0x74:
      sub_22EE14468(a1, a2);
      return;
    case 0x75:
    case 0x80:
    case 0x9A:
    case 0xA9:
    case 0xAA:
    case 0xAF:
    case 0xB2:
    case 0xB5:
    case 0xC2:
    case 0xC3:
    case 0xCE:
    case 0xCF:
    case 0xE1:
    case 0xE7:
      nullsub_910(a2);
      return;
    case 0x76:
      sub_22EE144C4((uint64_t)a1, (unsigned __int8 *)a2);
      return;
    case 0x77:
      sub_22EE14C84(a1, (unsigned __int8 *)a2);
      return;
    case 0x78:
      v29 = *(_QWORD *)(a2 + 16);
      v30 = *(_QWORD *)(v29 + 16);
      v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
      if ((v30 & 4) != 0)
        v31 = (_QWORD *)*v31;
      v32 = *a1;
      v33 = *(unsigned int *)(a2 + 4);
      if (v31)
        v34 = v31 - 9;
      else
        v34 = 0;
      sub_22EB31884(v32, v33, v34, v29);
      return;
    case 0x79:
      sub_22EE14FA4(a1, a2);
      return;
    case 0x7A:
      sub_22EE15060(a1, a2);
      return;
    case 0x7B:
      sub_22EE151C0((_QWORD **)a1, a2);
      return;
    case 0x7C:
      sub_22EE156D8(a1, a2);
      return;
    case 0x7D:
      sub_22EE15DB8(a1, a2);
      return;
    case 0x7E:
      sub_22EE15E9C(a1, a2);
      return;
    case 0x7F:
      sub_22EE162EC(a1, a2);
      return;
    case 0x81:
      sub_22EE16460((unsigned int **)a1, a2);
      return;
    case 0x82:
      sub_22EE1697C(a1, (uint64_t *)a2);
      return;
    case 0x83:
      sub_22EE16C28((uint64_t)a1, a2);
      return;
    case 0x85:
      sub_22ECD9F20(a1, a2);
      return;
    case 0x86:
      sub_22EE16CD0(a1, a2);
      return;
    case 0x87:
      sub_22EE16D3C(a1, a2);
      return;
    case 0x88:
      sub_22EE16EB4(a1, a2);
      return;
    case 0x89:
      sub_22EE1714C((_QWORD **)a1, a2);
      return;
    case 0x8A:
      sub_22EE17324(a1, (unsigned int *)a2);
      return;
    case 0x8B:
      sub_22EE1750C(a1, (unsigned int *)a2);
      return;
    case 0x8C:
    case 0x8E:
      sub_22EE17678(a1, (unsigned int *)a2);
      return;
    case 0x8D:
      sub_22EE1767C(a1, (unsigned int *)a2);
      return;
    case 0x8F:
      sub_22EE179E8(a1, a2);
      return;
    case 0x90:
      sub_22EE17A54(a1, a2);
      return;
    case 0x91:
      sub_22EE17AF8((uint64_t)a1, a2);
      return;
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
      sub_22EE17BB4();
      return;
    case 0x98:
      sub_22EE17BB8(a1, a2);
      return;
    case 0x99:
      sub_22EE17C5C((uint64_t)a1, (unsigned __int8 *)a2);
      return;
    case 0x9B:
      sub_22EE17C88(a1, a2);
      return;
    case 0x9C:
      sub_22EE17D4C(a1, a2);
      return;
    case 0x9D:
      sub_22EE17E18(a1, a2);
      return;
    case 0x9E:
      sub_22EE17F3C((_QWORD **)a1, a2);
      return;
    case 0x9F:
      sub_22EE17FD4(a1, a2);
      return;
    case 0xA0:
      sub_22EE18028(a1, a2);
      return;
    case 0xA1:
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_DWORD *)(v5 + 28) & 0x7F;
      if (!v5 || v6 != 59)
      {
        if (v5
          && (v6 - 67) >= 0xFFFFFFF9
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v47 = (_QWORD *)sub_22EE12BE0(*(_QWORD *)(*a1 + 12024), *(_QWORD *)(a2 + 16));
          v48 = *v47 & 0xFFFFFFFFFFFFFFF8;
          v49 = *a1;
          if ((*v47 & 4) != 0 && v48)
          {
            v50 = *(int *)(v49 + 11992);
            if ((_DWORD)v50 == -1)
            {
              v62 = sub_22EE08DD4(a1, *(_QWORD *)(a2 + 8));
              if (v62 >= 0x10)
              {
                v63 = v62;
                v64 = *(_QWORD *)(*a1 + 88);
                sub_22EFF605C(a2);
                v66 = sub_22F3C6BB8(v64, v63, v5, v65, *(_QWORD *)v48, *(unsigned int *)(v48 + 8));
                sub_22F32FC6C(*a1, v66);
              }
              return;
            }
            v48 = *(_QWORD *)(*(_QWORD *)v48 + 8 * v50);
          }
          sub_22EFF605C(a2);
          v43 = v51;
          v42 = v49;
          v44 = v48;
          goto LABEL_162;
        }
LABEL_163:
        sub_22EE1F474(a1, a2);
        return;
      }
      v7 = *(unsigned int *)(v5 + 68);
      v8 = v7 & 0xFFFFF;
      v9 = a1[10];
      v10 = *(_DWORD *)(v9 + 80);
      v11 = v10 + *(_DWORD *)(v9 + 8);
      if ((v7 & 0xFFFFF) >= v11)
        goto LABEL_163;
      if (v10 > v8)
        return;
      v12 = v11 + ~v8;
      if (*(_QWORD *)(*(_QWORD *)v9 + 16 * v12 + 8) <= v7 >> 20)
        return;
      v13 = *(_QWORD *)(*(_QWORD *)v9 + 16 * v12) + 24 * (*(_DWORD *)(v5 + 68) >> 20);
      if (!*(_DWORD *)v13)
        return;
      v83 = *(_OWORD *)v13;
      v84 = *(llvm **)(v13 + 16);
      if (*(_BYTE *)(v9 + 84) == 1)
      {
        if ((_DWORD)v83 == 8)
          sub_22F401DC4(*((int **)&v83 + 1), (uint64_t)&v83);
        return;
      }
      if (!*(_BYTE *)(v5 + 80))
        goto LABEL_187;
      v67 = *a1;
      v68 = *(_DWORD *)(*a1 + 11992);
      if (v68 != -1)
      {
        v81 = *(_OWORD *)v13;
        v69 = *((_QWORD *)&v81 + 1) + 24 * v68;
        v81 = *(_OWORD *)v69;
        v82 = *(llvm **)(v69 + 16);
        if ((_DWORD)v81 == 1)
        {
          if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v81 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
          {
LABEL_186:
            v83 = v81;
            v84 = v82;
LABEL_187:
            v22 = *(_DWORD *)(a2 + 4);
            v79 = v83;
            v80 = v84;
            v23 = &v79;
LABEL_106:
            v24 = a1;
            v21 = v5;
            goto LABEL_80;
          }
        }
        else if ((_DWORD)v81 == 7)
        {
          if (**((_BYTE **)&v81 + 1) != 213)
            goto LABEL_186;
        }
        else if (((1 << v81) & 0x13D) != 0)
        {
          goto LABEL_186;
        }
        sub_22F401DC4((int *)&v81, (uint64_t)v85);
        v81 = *(_OWORD *)v85;
        v82 = v86;
        goto LABEL_186;
      }
      v71 = sub_22EE08D2C(v67, *(_QWORD *)(v5 + 48), v9, *(unsigned int *)(a2 + 4), *(_QWORD *)(v5 + 40));
      v85[0] = (void *)v71;
      if (v71 >= 0x10)
      {
        v72 = *(_QWORD *)(*a1 + 88);
        v73 = v71 & 0xFFFFFFFFFFFFFFF0;
        v74 = sub_22F1133DC((uint64_t *)v85, v72) | (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 16) == 45);
        v75 = sub_22E3CD3D4(v72 + 2032, 40, 3);
        sub_22F3C6A44(v75, v74, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v73 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 40, v5, *(_DWORD *)(a2 + 4), (uint64_t)&v83);
      }
      return;
    case 0xA2:
      sub_22EE18074(a1, a2);
      return;
    case 0xA3:
      sub_22EE180E4((_QWORD **)a1, a2);
      return;
    case 0xA4:
      sub_22EE180F0((uint64_t)a1, a2);
      return;
    case 0xA6:
      sub_22EE18528(a1, a2);
      return;
    case 0xA7:
      sub_22EE186B0((_QWORD **)a1, a2);
      return;
    case 0xA8:
      sub_22EE187C4((uint64_t)a1, (const void **)a2);
      return;
    case 0xAB:
      sub_22EE187F0((_QWORD **)a1, a2);
      return;
    case 0xAE:
      v35 = *(unsigned int *)(*a1 + 11992);
      if ((_DWORD)v35 == -1)
      {
        v52 = sub_22EE08DD4(a1, *(_QWORD *)(a2 + 8));
        if (v52 < 0x10)
          return;
        v53 = v52;
        v85[0] = &v86;
        v85[1] = (void *)0x800000000;
        v54 = *(_DWORD *)(a2 + 28);
        if (v54 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v54 = *(_DWORD *)(a2 + 28);
        }
        if (v54)
        {
          v55 = 0;
          v56 = 8 * v54;
          while (1)
          {
            sub_22EFF605C(a2);
            v58 = sub_22EE130A0(a1, v57, *(_QWORD *)(a2 + v55 + 32));
            if (!v58)
              break;
            v59 = v58;
            v60 = LODWORD(v85[1]);
            if (LODWORD(v85[1]) >= (unint64_t)HIDWORD(v85[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v60 = LODWORD(v85[1]);
            }
            *((_QWORD *)v85[0] + v60) = v59;
            v61 = ++LODWORD(v85[1]);
            v55 += 8;
            if (v56 == v55)
              goto LABEL_189;
          }
        }
        else
        {
          v61 = v85[1];
LABEL_189:
          v70 = sub_22F3C6BB8(*(_QWORD *)(*a1 + 88), v53, *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 24), (uint64_t)v85[0], v61);
          sub_22F32FC6C(*a1, v70);
        }
        if (v85[0] != &v86)
          free(v85[0]);
        return;
      }
      v36 = *(_QWORD *)(a2 + 8 * v35 + 32);
      sub_22EFF605C(a2);
      v38 = sub_22EE130A0(a1, v37, v36);
      if (v38)
      {
        v39 = v38;
        sub_22EFF605C(a2);
        v41 = v40;
        v42 = *a1;
        v43 = v41;
        v44 = v39;
LABEL_162:
        sub_22EE1F980(v42, v44, v43);
      }
      return;
    case 0xB0:
      sub_22EE18884(a1, a2);
      return;
    case 0xB1:
      sub_22EE18AAC((_QWORD **)a1, a2);
      return;
    case 0xB3:
      sub_22EE18B74((uint64_t)a1, a2);
      return;
    case 0xB4:
      sub_22EE18C10(a1, a2);
      return;
    case 0xB6:
      v45 = *a1;
      v85[0] = (void *)*a1;
      v85[1] = (void *)1;
      for (i = 2; i != 10; i += 2)
        v85[i] = (void *)-4096;
      v88 = &v90;
      v89 = 0x100000000;
      v91 = *(_QWORD *)(v45 + 12024);
      v92 = 256;
      v93 = 0;
      *(_QWORD *)(v45 + 12024) = v85;
      sub_22EE1FA00(a1, a2);
      if ((_BYTE)v92)
        goto LABEL_143;
      if ((_DWORD)v89)
      {
        v76 = 0;
        v77 = 8 * v89;
        do
        {
          v78 = *(void ***)((char *)v88 + v76);
          if (v78)
          {
            if (*v78 != v78 + 2)
              free(*v78);
            MEMORY[0x2348A0E9C](v78, 0x1080C40ED926357);
          }
          v76 += 8;
        }
        while (v77 != v76);
      }
      goto LABEL_142;
    case 0xB7:
      sub_22EE18E28((uint64_t)a1, a2);
      return;
    case 0xB8:
      sub_22EE18F10(a1, a2);
      return;
    case 0xB9:
      sub_22EE18FC4((uint64_t)a1, a2);
      return;
    case 0xBA:
      sub_22EE190B0((uint64_t)a1, *(_QWORD *)(a2 + 16));
      return;
    case 0xBB:
      sub_22EE190C4((_QWORD **)a1, a2);
      return;
    case 0xBC:
      sub_22EE19188(a1, a2);
      return;
    case 0xBD:
      sub_22EE196F0(a1, a2);
      return;
    case 0xBF:
      sub_22EE199E8(a1, a2);
      return;
    case 0xC0:
      sub_22EE19B08((_QWORD **)a1, a2);
      return;
    case 0xC1:
      sub_22EE19C94(a1, a2);
      return;
    case 0xC4:
      sub_22EE1A0B4(a1, a2);
      return;
    case 0xC6:
      sub_22EE1A118((_QWORD **)a1, a2);
      return;
    case 0xC7:
      sub_22EE1A208(a1, a2);
      return;
    case 0xC8:
      sub_22EE1A304(a1, a2);
      return;
    case 0xC9:
      sub_22EE1A6CC(a1, a2);
      return;
    case 0xCA:
      sub_22EE1A7B4((_QWORD **)a1, a2);
      return;
    case 0xCB:
      sub_22EE1A81C((uint64_t **)a1, a2);
      return;
    case 0xCC:
      sub_22EB6B190(*a1, a2);
      return;
    case 0xCD:
      sub_22EE1AC68((uint64_t)a1, a2);
      return;
    case 0xD0:
      sub_22EE1ADA8(a1, a2);
      return;
    case 0xD1:
      sub_22EE1AE48(a1, a2);
      return;
    case 0xD2:
      sub_22EE1B04C((uint64_t)a1, (_QWORD *)a2);
      return;
    case 0xD3:
      sub_22EE1B0B0((_QWORD **)a1, (unsigned int *)a2);
      return;
    case 0xD4:
      sub_22EE1B450(a1, (unsigned int *)a2);
      return;
    case 0xD5:
      sub_22EE1B834(a1, a2);
      return;
    case 0xD6:
      sub_22EE1B8B0(a1, a2);
      return;
    case 0xD7:
      sub_22EE1B918(a1, (unsigned int *)a2);
      return;
    case 0xD8:
      if ((*(_DWORD *)a2 & 0x8000) != 0)
        sub_22EB254F4(*a1, *(_DWORD *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 0xF);
      return;
    case 0xD9:
      sub_22EE1BA14(a1, a2);
      return;
    case 0xDA:
      sub_22EE1BA8C(a1, a2);
      return;
    case 0xDB:
      v14 = *a1;
      v85[0] = (void *)*a1;
      v85[1] = (void *)1;
      for (j = 2; j != 10; j += 2)
        v85[j] = (void *)-4096;
      v88 = &v90;
      v89 = 0x100000000;
      v91 = *(_QWORD *)(v14 + 12024);
      v92 = 256;
      v93 = 0;
      *(_QWORD *)(v14 + 12024) = v85;
      sub_22EE219F4(a1, a2);
      if ((_BYTE)v92)
        goto LABEL_143;
      if ((_DWORD)v89)
      {
        v16 = 0;
        v17 = 8 * v89;
        do
        {
          v18 = *(void ***)((char *)v88 + v16);
          if (v18)
          {
            if (*v18 != v18 + 2)
              free(*v18);
            MEMORY[0x2348A0E9C](v18, 0x1080C40ED926357);
          }
          v16 += 8;
        }
        while (v17 != v16);
      }
LABEL_142:
      *((_QWORD *)v85[0] + 1503) = v91;
      LOBYTE(v92) = 1;
LABEL_143:
      if (v88 != &v90)
        free(v88);
      if (((uint64_t)v85[1] & 1) == 0)
        llvm::deallocate_buffer(v86, (void *)(16 * v87));
      return;
    case 0xDC:
      sub_22EE1BBF0((uint64_t)a1, a2);
      return;
    case 0xDD:
      sub_22EE1BC64(a1, a2);
      return;
    case 0xDE:
      sub_22EE1BEC8((_QWORD **)a1, a2);
      return;
    case 0xDF:
      sub_22EBE8E04(*a1, a2);
      return;
    case 0xE0:
      sub_22EE1C52C(a1, a2);
      return;
    case 0xE2:
      v25 = *(_QWORD *)(a2 + 24);
      if (*(unsigned __int8 *)(v25 & 0xFFFFFFFFFFFFFFFELL) != 172)
        v25 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
      if ((v25 & 1) != 0)
        return;
      v26 = sub_22F0623A0(a2, *(_QWORD *)(*a1 + 88));
      v27 = sub_22EE08DD4(a1, v26);
      if (v27 < 0x10)
        return;
      LODWORD(v85[0]) = 0;
      v85[1] = 0;
      if ((sub_22ED59EA0(*a1, *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8, v27, v25 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v85, 0) & 1) != 0)return;
      v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
      sub_22EFF605C(a2);
      v83 = *(_OWORD *)v85;
      v84 = v86;
      v22 = v28;
      v23 = &v83;
      goto LABEL_106;
    case 0xE3:
      v19 = *(_DWORD *)(*a1 + 11992);
      if (v19 == -1)
        return;
      v20 = *(_QWORD *)(a2 + 24) + 24 * v19;
      v83 = *(_OWORD *)v20;
      v84 = *(llvm **)(v20 + 16);
      if ((_DWORD)v83 == 1)
      {
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v83 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
          goto LABEL_79;
      }
      else if ((_DWORD)v83 == 7)
      {
        if (**((_BYTE **)&v83 + 1) != 213)
          goto LABEL_79;
      }
      else if (((1 << v83) & 0x13D) != 0)
      {
LABEL_79:
        v21 = *(_QWORD *)(a2 + 16);
        v22 = *(_DWORD *)(a2 + 36);
        v81 = v83;
        v82 = v84;
        v23 = &v81;
        v24 = a1;
LABEL_80:
        sub_22EE1F73C(v24, v21, v22, (uint64_t)v23);
        return;
      }
      sub_22F401DC4((int *)&v83, (uint64_t)v85);
      v83 = *(_OWORD *)v85;
      v84 = v86;
      goto LABEL_79;
    case 0xE4:
      sub_22EE1C70C((_QWORD **)a1, a2);
      return;
    case 0xE5:
      sub_22EE1C7CC((_QWORD **)a1, a2);
      return;
    case 0xE6:
      sub_22EE1C880(a1, (_DWORD *)a2);
      return;
    case 0xE8:
      sub_22EE1D44C(a1, a2);
      return;
    case 0xE9:
      sub_22EE1D624((_QWORD **)a1, a2);
      return;
    case 0xEA:
      sub_22EE1D6C8((_QWORD **)a1, a2);
      return;
    default:
      return;
  }
}

uint64_t sub_22EE11308(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EE0ED40(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EE0ED40(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EE11824(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EE11824(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  uint64_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t result;
  uint64_t v45;
  _BYTE v46[32];
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[6];

  v54[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v9 = a2;
  v11 = 0;
  v45 = a3;
  while (1)
  {
    v12 = *(unsigned __int8 **)(v9 + 8 * v11);
    if (v8)
      break;
    if (*v12 != 213)
    {
      v13 = sub_22EE0ED40(a1, *(_QWORD *)(v9 + 8 * v11));
      if ((v13 & 1) != 0)
        return 1;
      goto LABEL_27;
    }
LABEL_9:
    v14 = *((_QWORD *)v12 + 3);
    v52 = v54;
    v53 = 0x200000000;
    v15 = *a1;
    v50 = 7;
    v51 = v14;
    sub_22EE7377C(v15, (uint64_t)&v50, (uint64_t)&v52);
    v16 = 1;
    v49 = 1;
    v48 = 0;
    v17 = *((unsigned int *)v12 + 4);
    LODWORD(v20) = *((_DWORD *)v12 + 5);
    v18 = (_DWORD)v20 != 0;
    v19 = (_DWORD)v20 != 0;
    LODWORD(v20) = v20 - 1;
    if (v19)
      v20 = v20;
    else
      v20 = 0;
    v21 = v20 | (v18 << 32);
    v47 = v21;
    sub_22F0D4E74(v14);
    if ((sub_22EE73A98((_QWORD *)*a1, v17, v22, (uint64_t)v52, v53, (uint64_t *)a1[10], &v49, &v48, (uint64_t)&v47) & 1) == 0)
    {
      if (v49)
      {
        if (v6)
          *v6 = 1;
        if ((_DWORD)v47)
        {
          v23 = 0;
          while (1)
          {
            v24 = *a1;
            v25 = *(_DWORD *)(*a1 + 11992);
            *(_DWORD *)(*a1 + 11992) = v23;
            v26 = sub_22EE0ED40(a1, v14);
            if ((v26 & 1) != 0)
              break;
            v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(_BYTE *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x20) != 0)
            {
              v28 = sub_22EE739C0(*a1, v27, *((unsigned int *)v12 + 4), v21);
              if ((v28 & 1) != 0)
                break;
              v27 = v28 & 0xFFFFFFFFFFFFFFFELL;
            }
            v29 = *(unsigned int *)(a5 + 8);
            if (v29 >= *(unsigned int *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = *(unsigned int *)(a5 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v29) = v27;
            ++*(_DWORD *)(a5 + 8);
            *(_DWORD *)(v24 + 11992) = v25;
            if (++v23 == (_DWORD)v47)
              goto LABEL_33;
          }
          *(_DWORD *)(v24 + 11992) = v25;
LABEL_49:
          v16 = 1;
LABEL_51:
          v6 = a6;
          goto LABEL_52;
        }
LABEL_33:
        if (!v48)
        {
          v16 = 4;
          goto LABEL_51;
        }
        sub_22EE1D76C((uint64_t)v46, a1);
        v32 = sub_22EE0ED40(a1, v14);
        if ((v32 & 1) != 0
          || (v33 = sub_22EE739C0(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v12 + 4), v21), (v33 & 1) != 0))
        {
          sub_22EE1D880((uint64_t)v46);
          goto LABEL_49;
        }
        v34 = *(unsigned int *)(a5 + 8);
        v6 = a6;
        if (v34 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v34) = v33 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        sub_22EE1D880((uint64_t)v46);
        v16 = 4;
      }
      else
      {
        v35 = *a1;
        v36 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v37 = sub_22EE0ED40(a1, v14);
        if ((v37 & 1) == 0)
        {
          v38 = sub_22EE739C0(*a1, v37 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v12 + 4), v47);
          if ((v38 & 1) == 0)
          {
            if (v6)
              *v6 = 1;
            v39 = *(unsigned int *)(a5 + 8);
            if (v39 >= *(unsigned int *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v39 = *(unsigned int *)(a5 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v39) = v38 & 0xFFFFFFFFFFFFFFFELL;
            ++*(_DWORD *)(a5 + 8);
            v16 = 4;
          }
        }
        *(_DWORD *)(v35 + 11992) = v36;
      }
    }
LABEL_52:
    if (v52 != v54)
      free(v52);
    v40 = v16 == 4;
    v8 = a4;
    v9 = a2;
    if (!v40)
      return 1;
LABEL_56:
    if (++v11 == v45)
      return 0;
  }
  if (!sub_22EFFF908(*(unsigned __int8 **)(v9 + 8 * v11)))
  {
    v12 = *(unsigned __int8 **)(v9 + 8 * v11);
    if (*v12 != 213)
    {
      v13 = sub_22EE11308(a1, *(unsigned __int8 **)(v9 + 8 * v11), 0);
      if ((v13 & 1) != 0)
        return 1;
LABEL_27:
      v30 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *(_QWORD *)(v9 + 8 * v11) != v30)
        *v6 = 1;
      v31 = *(unsigned int *)(a5 + 8);
      if (v31 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v31 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v31) = v30;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_56;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

unint64_t sub_22EE11C74(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  void *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74[24];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD *v78;
  uint64_t v79;
  _QWORD v80[10];

  v6 = a2;
  v80[8] = *MEMORY[0x24BDAC8D0];
  v78 = v80;
  v79 = 0x400000000;
  if (!a2)
  {
    v54 = 0;
    v76 = 0u;
    v77 = 0u;
    goto LABEL_68;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v79))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v79;
    }
    v12 = (unint64_t *)&v78[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v79 + 1;
    LODWORD(v79) = v79 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v76 = 0u;
  v77 = 0u;
  if (!v10)
  {
    v54 = 0;
    goto LABEL_68;
  }
  do
  {
    LODWORD(v79) = v10 - 1;
    v13 = v78[v10 - 1];
    v75 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v40 = *(_QWORD *)(*a1 + 88);
      v41 = sub_22F0AB0EC((unint64_t *)&v75);
      sub_22F0AB958((uint64_t)&v76 + 8, v40, v41);
      *(_QWORD *)&v76 = v41 | ((unint64_t)v41 << 32);
      goto LABEL_41;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v36 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v36 - 35) < 3)
        {
          v50 = sub_22F0AABF8(v13);
          v51 = sub_22EE130A0(a1, 0, v50);
          v52 = *(_QWORD *)(*a1 + 88);
          v53 = sub_22F0AB0EC((unint64_t *)&v75);
          sub_22F3E8E2C((uint64_t *)&v76 + 1, v52, (uint64_t)v51, v53, SHIDWORD(v53));
          *(_QWORD *)&v76 = v53;
        }
        else
        {
          v37 = sub_22F0AB364((uint64_t *)&v75);
          v38 = *(_QWORD *)(v14 + 8) & 6;
          if (v36 == 16)
          {
            if (v38 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v39 = *(_QWORD *)(v14 + 16);
              else
                v39 = 0;
            }
            else
            {
              v39 = 0;
            }
          }
          else if (v38 == 2)
          {
            if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
              v39 = *(_QWORD *)(v14 + 16);
            else
              v39 = 0;
          }
          else
          {
            v39 = 0;
          }
          v42 = sub_22EE130A0(a1, v37, v39);
          v43 = *(_QWORD *)(*a1 + 88);
          v44 = sub_22F0AB364((uint64_t *)&v75);
          v45 = sub_22F0AB364((uint64_t *)&v75);
          v46 = HIDWORD(v45);
          sub_22F0AB8AC((uint64_t *)&v76 + 1, v43, (uint64_t)v42, v44, SHIDWORD(v45));
          if (!(_DWORD)v76)
            LODWORD(v76) = v44;
          DWORD1(v76) = v46;
        }
        goto LABEL_41;
      }
      if ((v16 & 6) != 0)
        v47 = 0;
      else
        v47 = *(_QWORD *)(v13 + 16);
      v48 = sub_22F0AB364((uint64_t *)&v75);
      v49 = sub_22F0AB364((uint64_t *)&v75);
      v70 = a4;
      v71 = v47;
      v72 = v48;
      v73 = HIDWORD(v49);
      LOBYTE(v67) = 0;
      if ((sub_22E958D90(*a1, 0, &v70, 0, &v76, a5, 0, 0, v67) & 1) == 0)
        goto LABEL_41;
      goto LABEL_81;
    }
    v18 = sub_22F0AB4E0((uint64_t)&v75);
    v20 = v18;
    v21 = (uint64_t)v19;
    if (v18 < 0x10)
      goto LABEL_13;
    if ((*(_BYTE *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
    {
      v22 = sub_22EE1DA30(a1, v18, v19, a4, a5, (uint64_t)&v76);
      if (!v22)
        goto LABEL_81;
      v21 = (uint64_t)(v22 + 1);
      v20 = *v22;
LABEL_13:
      if (!v20)
        goto LABEL_81;
      goto LABEL_14;
    }
    v32 = *((_DWORD *)a1 + 22);
    v70 = *a1;
    LODWORD(v71) = v32;
    sub_22EB522D8((uint64_t)&v70, v18);
    if (!v20)
      goto LABEL_81;
LABEL_14:
    v23 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v24 = *(_DWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 8);
    if ((v24 & 0x400) == 0)
    {
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 16);
      v27 = *a1;
      if (v26 == 45)
        goto LABEL_23;
      if (v26 == 44 && (**(_QWORD **)(v27 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v20 & 0xF) == 0 && v24 == 50 && (*(_BYTE *)(*(_QWORD *)(v20 + 24) + 28) & 0x80) != 0)
        goto LABEL_81;
      v62 = v20;
      v63 = v20;
      while (1)
      {
        if ((v63 & 0xF) != 0)
          goto LABEL_104;
        v64 = *(unsigned __int8 *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v64 > 0x39)
        {
LABEL_99:
          if (sub_22F115668(v63))
            v62 = v63;
          v63 = sub_22F115B7C(v63);
          if (!v63)
            goto LABEL_107;
        }
        else
        {
          if (v64 == 24)
            goto LABEL_106;
          if (v64 == 26)
          {
            if ((*(_BYTE *)(v63 + 23) & 0x10) != 0)
            {
LABEL_106:
              v62 = v63;
LABEL_107:
              v65 = sub_22F115668(v62);
              sub_22E8FCA40((_QWORD *)v27, v65, 0xF99u, 0, (uint64_t)&v70);
              v69 = v20;
              v66 = sub_22E8901B8((uint64_t)&v70, &v69);
              v68 = v76;
              sub_22E8906A0(v66, &v68);
              sub_22E903BEC((unsigned int *)&v70);
LABEL_81:
              v6 = 0;
              goto LABEL_85;
            }
          }
          else if (((1 << v64) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_99;
          }
LABEL_104:
          v63 = sub_22F115B7C(v63);
        }
      }
    }
    v27 = *a1;
    v26 = *(unsigned __int8 *)(*(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v26 != 44)
      goto LABEL_40;
    v29 = v20;
    for (i = v20; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v31 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v31 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v29 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_39;
      }
      if (v31 == 24)
        goto LABEL_38;
      if (v31 == 26)
        break;
      if (((1 << v31) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_38:
    v29 = i;
LABEL_39:
    v33 = sub_22F115668(v29);
    sub_22E8FCA40((_QWORD *)v27, v33, 0x1927u, 0, (uint64_t)v74);
    sub_22E903BEC(v74);
    v27 = *a1;
LABEL_40:
    v34 = *(_QWORD *)(v27 + 88);
    v35 = sub_22F0AB364((uint64_t *)&v75);
    sub_22E8ACD1C((uint64_t)&v76, v34, 0, v20, v21, SHIDWORD(v35));
LABEL_41:
    a4 = 0;
    a5 = 0;
    v10 = v79;
  }
  while ((_DWORD)v79);
  v54 = *((_QWORD *)&v76 + 1);
LABEL_68:
  if (v54 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v55 = DWORD2(v77);
    v56 = 0;
    if (v6)
    {
      do
      {
        v57 = *(_QWORD *)(v6 + 8);
        if ((v57 & 4) != 0)
          v58 = 12;
        else
          v58 = 8;
        if (*(_QWORD *)(v6 + 16))
          v59 = v58;
        else
          v59 = 4;
        v56 += v59;
        v6 = v57 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v57 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v77) != v56 || memcmp((const void *)v77, __s2, DWORD2(v77)))
    {
      if (!v54)
        goto LABEL_81;
      if (HIDWORD(v77))
      {
        v60 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v55, 3);
        memcpy(v60, (const void *)v77, DWORD2(v77));
        v54 = *((_QWORD *)&v76 + 1);
      }
    }
    v6 = v54;
  }
LABEL_85:
  if (HIDWORD(v77))
    free((void *)v77);
  if (v78 != (_OWORD *)v80)
    free(v78);
  return v6;
}

uint64_t sub_22EE123D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  llvm *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)a2;
  v8 = 0;
  v9 = 0;
  v7 = a1;
  v10 = 0;
  v11 = v15;
  v12 = v15;
  v13 = 2;
  v14 = 0;
  v15[2] = a3;
  v16 = v4;
  v17 = v5;
  sub_22EE12458((unint64_t)&v7, (uint64_t *)a2, a4);
  if (v12 != v11)
    free(v12);
  return llvm::deallocate_buffer(v8, (void *)(16 * v10));
}

unint64_t sub_22EE12458@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v4 = *a2;
  if (!*a2)
    goto LABEL_30;
  v6 = result;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = a2[2];
    return result;
  }
  if ((v10 & 0x38) != 0)
  {
    if ((v7 - 3) > 2 || !a2[2])
    {
      v14 = *((_DWORD *)a2 + 2);
      v15 = *(_DWORD *)(result + 88);
      v16 = *(_QWORD *)(result + 96);
      if (v14)
      {
        *(_DWORD *)(result + 88) = v14;
        *(_QWORD *)(result + 96) = v4;
      }
      if ((v7 - 3) > 2)
        v17 = 0;
      else
        v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
      result = sub_22EE08DD4(result, v17);
      if (result <= 0xF)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_DWORD *)(v6 + 88) = v15;
        *(_QWORD *)(v6 + 96) = v16;
        return result;
      }
      v12 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8) | result & 7;
      *(_DWORD *)(v6 + 88) = v15;
      *(_QWORD *)(v6 + 96) = v16;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 88);
      if (v7 == 7)
      {
        v11 = 0;
        v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v18 >= 3)
          v18 = 3;
        v7 = v18 | 8;
      }
      else
      {
        v11 = 0;
      }
      goto LABEL_32;
    }
    result = sub_22EE0391C(result);
    if (result)
    {
      v11 = result;
      v12 = *(_QWORD *)result & 7 | *(_QWORD *)((*(_QWORD *)result & 0xFFFFFFFFFFFFFFF0) + 8);
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 88);
LABEL_32:
      result = sub_22EFC6D44((_QWORD *)(v13 + 15224), v7, v12);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      return result;
    }
LABEL_30:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
  if ((~*(_BYTE *)a2 & 7) != 0)
    goto LABEL_28;
  v19 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 3)
    v19 = 3;
  if (v19)
LABEL_28:
    v20 = 0;
  else
    v20 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  result = sub_22EE130A0(result, *((unsigned int *)a2 + 2), v20);
  if (!result)
    goto LABEL_30;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  result = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 88) + 15224), result);
  *(_QWORD *)a3 = result;
  return result;
}

unint64_t sub_22EE12674(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[24];
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;

  v10 = a3;
  v68 = *MEMORY[0x24BDAC8D0];
  v60 = a3;
  v13 = sub_22F0F08CC(&v60);
  if (v13)
  {
    v14 = v13;
    if ((*(_DWORD *)(v13 + 28) & 0x7F) == 0x20)
    {
      v15 = *(unsigned int *)(v13 + 64);
      v16 = v15 & 0xFFFFF;
      v17 = a1[10];
      v18 = *(_DWORD *)(v17 + 80);
      v19 = v18 + *(_DWORD *)(v17 + 8);
      if ((v15 & 0xFFFFF) < v19)
      {
        if (v18 > v16)
          return v10;
        v20 = v19 + ~v16;
        if (*(_QWORD *)(*(_QWORD *)v17 + 16 * v20 + 8) <= v15 >> 20)
          return v10;
        v21 = *(_QWORD *)(*(_QWORD *)v17 + 16 * v20) + 24 * (*(_DWORD *)(v13 + 64) >> 20);
        if (!*(_DWORD *)v21)
          return v10;
        v22 = *(_OWORD *)v21;
        v64 = *(_QWORD *)(v21 + 16);
        v63 = v22;
        if (*(_BYTE *)(v17 + 84) == 1)
        {
          if ((_DWORD)v63 == 8)
            sub_22F401DC4(*((int **)&v63 + 1), (uint64_t)&v63);
          return *((_QWORD *)&v63 + 1);
        }
        if (!*(_BYTE *)(v13 + 80))
          goto LABEL_53;
        v43 = *(_DWORD *)(*a1 + 11992);
        if (v43 != -1)
        {
          v58 = *(_OWORD *)v21;
          v44 = *((_QWORD *)&v58 + 1) + 24 * v43;
          v58 = *(_OWORD *)v44;
          v59 = *(_QWORD *)(v44 + 16);
          if ((_DWORD)v58 == 1)
          {
            if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v58 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
            {
LABEL_52:
              v63 = v58;
              v64 = v59;
LABEL_53:
              *(_QWORD *)v65 = *((_QWORD *)&v63 + 1);
              v45 = sub_22F0F09F8((uint64_t *)v65);
              return sub_22EF6E2D8(*(_QWORD *)(*a1 + 88), v14, v45);
            }
          }
          else if ((_DWORD)v58 == 7)
          {
            if (**((_BYTE **)&v58 + 1) != 213)
              goto LABEL_52;
          }
          else if (((1 << v58) & 0x13D) != 0)
          {
            goto LABEL_52;
          }
          sub_22F401DC4((int *)&v58, (uint64_t)v65);
          v58 = *(_OWORD *)v65;
          v59 = *(_QWORD *)&v65[16];
          goto LABEL_52;
        }
        v46 = *(_QWORD *)(*a1 + 88);
        v47 = &v63;
        v48 = v14;
        return sub_22F36D860(v46, v48, (uint64_t)v47);
      }
    }
  }
  v23 = v10 & 6;
  v24 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (v23 == 2 && v24)
  {
    if ((~*(_DWORD *)v24 & 3) != 0)
    {
      v25 = a4;
      v61 = v10;
      v51 = sub_22F0F08CC(&v61);
      if (!v51)
      {
        if ((~*(_DWORD *)v24 & 3) != 0)
          return v10;
        v52 = sub_22EE130A0(a1, a4, *(_QWORD *)(v24 + 16));
        if (v52)
        {
          v48 = v52;
          v53 = *a1;
          if (*(_DWORD *)(*a1 + 11992) == -1 && v52 == *(_QWORD *)(v24 + 16))
            return v10;
          v54 = *(_DWORD *)v24 >> 2;
          *(_QWORD *)&v65[8] = *(_QWORD *)(v24 + 24);
          *(_DWORD *)v65 = 8;
          *(_DWORD *)&v65[4] = v54;
          v46 = *(_QWORD *)(v53 + 88);
          v47 = (__int128 *)v65;
          return sub_22F36D860(v46, v48, (uint64_t)v47);
        }
        return 0;
      }
      v37 = v51;
      goto LABEL_36;
    }
    v49 = *(_DWORD *)(*a1 + 11992);
    if (v49 == -1)
      return v10;
    v50 = *(_QWORD *)(v24 + 24) + 24 * v49;
    v56 = *(_OWORD *)v50;
    v57 = *(_QWORD *)(v50 + 16);
    if ((_DWORD)v56 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v56 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      {
LABEL_66:
        *(_QWORD *)v65 = *((_QWORD *)&v56 + 1);
        return sub_22F0F09F8((uint64_t *)v65);
      }
    }
    else if ((_DWORD)v56 == 7)
    {
      if (**((_BYTE **)&v56 + 1) != 213)
        goto LABEL_66;
    }
    else if (((1 << v56) & 0x13D) != 0)
    {
      goto LABEL_66;
    }
    sub_22F401DC4((int *)&v56, (uint64_t)v65);
    v56 = *(_OWORD *)v65;
    v57 = *(_QWORD *)&v65[16];
    goto LABEL_66;
  }
  v25 = a4;
  v61 = v10;
  if (v23 == 4 && v24)
  {
    v26 = sub_22F0F08CC((uint64_t *)(v24 + 16));
    v27 = sub_22EE130A0(a1, a4, v26);
    if (v27)
    {
      if (*(_DWORD *)(*a1 + 11992) == -1)
      {
        v28 = *(_QWORD *)(a2 + 8);
        v29 = *(_QWORD *)(v24 + 8);
        if (v27 == v26 && v28 == (v29 & 0xFFFFFFFFFFFFFFF8))
          return v10;
      }
      else
      {
        v29 = *(_QWORD *)(v24 + 8);
        v28 = *(_QWORD *)(a2 + 8);
      }
      return sub_22F36E410(*(_QWORD *)(*a1 + 88), v28, (v29 >> 2) & 1, v27 & 0xFFFFFFFFFFFFFFF9);
    }
    return 0;
  }
  if (v23 == 6 && v24)
  {
    v30 = *(_QWORD *)(a2 + 8);
    if (v30)
      v31 = 0;
    else
      v31 = a5;
    v32 = *a1;
    v33 = *(_QWORD *)(v24 + 8);
    if (*(_DWORD *)(*a1 + 11992) != -1 || v30 != (v33 & 0xFFFFFFFFFFFFFFF8) || v31 >= 0x10)
    {
      if ((v33 & 4) != 0)
      {
        v39 = 0;
        v40 = *(_DWORD *)(v24 + 16);
        LODWORD(v63) = a4;
        DWORD1(v63) = a4;
        DWORD2(v63) = a4;
        v66 = a4;
        v67 = a4;
        *(_QWORD *)&v65[12] = 0;
        *(_DWORD *)&v65[20] = 0;
        *(_DWORD *)v65 = 1;
        *(_DWORD *)&v65[8] = v40;
        do
        {
          v41 = *(_DWORD *)((char *)&v63 + v39);
          *(_DWORD *)&v65[v39 + 12] = v41;
          if (v41)
            v67 = v41;
          v39 += 4;
        }
        while (v39 != 12);
        v62 = 0;
        sub_22ED66924(v32, 0, a2, a4, (uint64_t)v65, v31, 0, &v62, a7);
        return v62;
      }
      else
      {
        v36 = *(_QWORD *)(v24 + 16);
        *(_DWORD *)v65 = 0;
        *(_QWORD *)&v65[8] = v36;
        v66 = a4;
        v67 = a4;
        *(_QWORD *)&v63 = 0;
        sub_22ED66924(v32, 0, a2, a4, (uint64_t)v65, v31, 0, (unint64_t *)&v63, a7);
        return v63;
      }
    }
    return v10;
  }
  v37 = sub_22F0F08CC(&v61);
  if (!v37)
    return v10;
LABEL_36:
  v38 = sub_22EE130A0(a1, v25, v37);
  if (!v38)
    return 0;
  if (v38 != v37 || *(_DWORD *)(*a1 + 11992) != -1)
    return v38 & 0xFFFFFFFFFFFFFFF9;
  return v10;
}

uint64_t sub_22EE12BE0(uint64_t a1, uint64_t a2)
{
  unint64_t i;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  for (i = sub_22EE12CF0(a2); a1; a1 = *(_QWORD *)(a1 + 104))
  {
    v4 = i;
    do
    {
      v5 = sub_22EE12EF0(a1 + 8, v4);
      if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      {
        v6 = a1 + 16;
        v7 = 4;
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(unsigned int *)(a1 + 24);
      }
      if (v6 + 16 * v7 != v5)
        return v5 + 8;
      if (!v4)
        break;
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 38 < 0xFFFFFFFB)
        break;
      if ((*(_BYTE *)(v4 + 96) & 3) != 0)
        break;
      v4 = sub_22E3CD31C((uint64_t *)(v4 + 96), v4);
    }
    while (v4);
    if (!*(_BYTE *)(a1 + 113))
      break;
  }
  v8 = *(_DWORD *)(i + 28) & 0x7F;
  if ((v8 > 0x3B || ((1 << v8) & 0x800004100000000) == 0) && v8 - 38 >= 0xFFFFFFFD)
    sub_22EA3DA94(i);
  return 0;
}

uint64_t sub_22EE12CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v15;

  v1 = a1;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x40)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v4 = *(_QWORD *)v3;
    if (v4 && (*(_WORD *)(v4 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v6 = (*(_DWORD *)(a1 + 96) >> 20);
      if (v6 == 255)
      {
        if ((v2 & 4) != 0)
          v3 = *(_QWORD *)v3;
        for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
        {
          v8 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v8 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_24;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_23;
            if (i == 16)
              goto LABEL_17;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_30;
            if (i == 24)
            {
LABEL_17:
              v8 = -48;
            }
            else
            {
LABEL_23:
              if (i != 70)
              {
LABEL_24:
                v9 = i - 52;
                if ((i - 33) >= 5)
                  v10 = -48;
                else
                  v10 = -64;
                if (v9 >= 6)
                  v8 = v10;
                else
                  v8 = -72;
                goto LABEL_30;
              }
              v8 = -64;
            }
          }
LABEL_30:
          v11 = *(_QWORD *)(v3 + v8 + 16);
          v3 = v11 & 0xFFFFFFFFFFFFFFF8;
          if ((v11 & 4) != 0)
            v3 = *(_QWORD *)v3;
        }
        v6 = sub_22F36F2CC(*(_QWORD *)(v3 + 48), v1);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(v4 - 24) & 0xFFFFFFFFFFFFFFF0);
      if (v12)
        v13 = *(_BYTE *)(v12 + 16) == 26;
      else
        v13 = 0;
      if (!v13)
      {
        v15 = v6;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        {
          LODWORD(v12) = 0;
          goto LABEL_43;
        }
        v12 = sub_22F10CF48(v12);
        v6 = v15;
        if (!v12)
          goto LABEL_43;
      }
      LODWORD(v12) = (unsigned __int16)(*(_QWORD *)(v12 + 16) >> 38);
LABEL_43:
      if (v6 < v12 && *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v6) == v1)
        return *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v4 - 72) + 32))(v4 - 72)
                                     + 120)
                         + 8 * v6);
    }
  }
  return v1;
}

uint64_t sub_22EE12EF0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_22EE13268(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

uint64_t sub_22EE12F6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = sub_22EE12CF0(a2);
  v3 = sub_22EE1320C((_DWORD *)(a1 + 8), &v7);
  result = operator new();
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x400000000;
  v3[1] = result | 4;
  v5 = *(_DWORD *)(a1 + 88);
  if (v5 >= *(_DWORD *)(a1 + 92))
  {
    v6 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v6;
    v5 = *(_DWORD *)(a1 + 88);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v5) = result;
  ++*(_DWORD *)(a1 + 88);
  return result;
}

BOOL sub_22EE13028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BOOL8 result;

  v2 = *(unsigned int *)(a1 + 88);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t ***)(a1 + 80);
  v4 = &v3[v2];
  do
  {
    v5 = **v3;
    v6 = *((unsigned int *)*v3 + 2);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = (_QWORD *)**v3;
      while (*v8 != a2)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          v8 = (_QWORD *)(v5 + 8 * v6);
          break;
        }
      }
    }
    else
    {
      v8 = (_QWORD *)**v3;
    }
    v9 = ((uint64_t)v8 - v5) >> 3;
    result = v9 != v6;
    ++v3;
  }
  while (v9 == v6 && v3 != v4);
  return result;
}

_QWORD *sub_22EE130A0(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (!a3)
    return (_QWORD *)a3;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x20)
  {
    v3 = *(unsigned int *)(a3 + 64);
    v4 = v3 & 0xFFFFF;
    v5 = (_DWORD *)a1[10];
    v6 = v5[20];
    v7 = v6 + v5[2];
    if ((v3 & 0xFFFFF) < v7)
    {
      if (v6 > v4)
        return (_QWORD *)a3;
      v8 = v7 + ~v4;
      if (*(_QWORD *)(*(_QWORD *)v5 + 16 * v8 + 8) <= v3 >> 20)
        return (_QWORD *)a3;
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 16 * v8) + 24 * (*(_DWORD *)(a3 + 64) >> 20);
      if (!*(_DWORD *)v9)
        return (_QWORD *)a3;
      v10 = *(_QWORD *)(v9 + 8);
      if (!*(_BYTE *)(a3 + 80))
      {
LABEL_11:
        v13 = v10;
        *(_QWORD *)&v16 = sub_22F0F09F8(&v13);
        return (_QWORD *)sub_22F0F08CC((uint64_t *)&v16);
      }
      v11 = v10 + 24 * *(int *)(*a1 + 11992);
      v14 = *(_OWORD *)v11;
      v15 = *(_QWORD *)(v11 + 16);
      if ((_DWORD)v14 == 1)
      {
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        {
LABEL_10:
          v10 = *((_QWORD *)&v14 + 1);
          goto LABEL_11;
        }
      }
      else if ((_DWORD)v14 == 7)
      {
        if (**((_BYTE **)&v14 + 1) != 213)
          goto LABEL_10;
      }
      else if (((1 << v14) & 0x13D) != 0)
      {
        goto LABEL_10;
      }
      sub_22F401DC4((int *)&v14, (uint64_t)&v16);
      v14 = v16;
      v15 = v17;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = (_DWORD *)a1[10];
  }
  return sub_22EE37A18(*a1, a2, a3, v5, 0);
}

_QWORD *sub_22EE1320C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22EE13268((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22EE13310(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22EE13268(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_22EE13310(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_22EE133D0((uint64_t)a1, v7);
  v9 = 0;
  sub_22EE13268((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22EE133D0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = v10;
        v9[1] = *(_QWORD *)(a1 + v8 + 16);
        v9 += 2;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22EE1354C(a1, v14, v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22EE1354C(a1, v6, (_QWORD *)v6 + 2 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22EE1354C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22EE13268((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22EE13610(uint64_t result, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v18;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(result + 16 * v9);
    v11 = *v10;
    v12 = *((_DWORD *)v10 + 2);
    if (*v10 != a3 || v12 != a4)
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16 && v11 == -8192)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (uint64_t *)(result + 16 * (v18 & v8));
        v11 = *v10;
        v12 = *((_DWORD *)v10 + 2);
        if (*v10 == a3 && v12 == a4)
          goto LABEL_25;
      }
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_25:
  *a5 = v10;
  return result;
}

_OWORD *sub_22EE136EC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  llvm *v15;
  uint64_t v16;
  int v17;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  _OWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_OWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12++ = xmmword_22F45F5C0;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *(_QWORD *)v15;
        v17 = *((_DWORD *)v15 + 2);
        if ((*(_QWORD *)v15 != -4096 || v17 != -1) && (v16 != -8192 || v17 != -2))
        {
          v20 = ~((unint64_t)(37 * v17) << 32)
              + (37 * v17)
              + ((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v14 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = &result[v23];
          v25 = *(_QWORD *)v24;
          v26 = *((_DWORD *)v24 + 2);
          if (v16 != *(_QWORD *)v24 || v17 != v26)
          {
            v28 = 0;
            v29 = 1;
            while (v25 != -4096 || v26 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v26 == -2;
              if (v30 && v25 == -8192)
                v28 = v24;
              v32 = v23 + v29++;
              v23 = v32 & v14;
              v24 = &result[v32 & v14];
              v25 = *(_QWORD *)v24;
              v26 = *((_DWORD *)v24 + 2);
              if (v16 == *(_QWORD *)v24 && v17 == v26)
                goto LABEL_44;
            }
            if (v28)
              v24 = v28;
          }
LABEL_44:
          *(_QWORD *)v24 = v16;
          *((_DWORD *)v24 + 2) = v17;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 = (llvm *)((char *)v15 + 16);
      }
      while (v15 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v34 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v34)
    {
      v35 = 16 * v34;
      do
      {
        *result++ = xmmword_22F45F5C0;
        v35 -= 16;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t sub_22EE138E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE13980(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE13A44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE130A0(a1, *(unsigned int *)(*(_QWORD *)(a2 + 24) + 24), *(_QWORD *)(a2 + 24));
  if (v4)
    return sub_22F32F628(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v4);
  else
    return 1;
}

uint64_t sub_22EE13A90(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(unsigned int *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, &v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EE13B48(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = sub_22EE0391C(a1);
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(_QWORD *)(a2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v19, v16, (__int16 *)(v6 + 1693), &v18, &v17);
    v7 = *(unsigned int *)(v6 + 3696);
    v8 = v7 - 2;
    v9 = *(_QWORD *)(v6 + 3688);
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
    if ((v13 & 1) != 0)
    {
      a2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(a2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(a2 + 16) & 3, *(_DWORD *)(a2 + 40), v5, v14, *(_DWORD *)(a2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return a2;
}

uint64_t sub_22EE13D10(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EE08DD4(a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EE13D78(uint64_t a1, uint64_t a2)
{
  return sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EE13D80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EE11824(a1, v2 + 16, v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22EE13E8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22EE14020(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EE13E8C(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EE140F0(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v24[64];
  void *v25;
  void *v26;
  __int128 v27;
  _BYTE v28[16];
  char v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v33 = v35;
  v34 = 0x400000000;
  v30 = v32;
  v31 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v26 = v28;
  v27 = xmmword_22F44E350;
  v29 = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24);
  v10 = *(_QWORD *)(v4 + 72);
  v11 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EE0A8F4((uint64_t *)a1, v9, v10, v11, 0, v8, (uint64_t)&v30, (uint64_t)&v33, (uint64_t)&v26))
  {
    v21 = *a1;
  }
  else
  {
    v12 = sub_22EE08DD4(a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v24);
    if (v29)
    {
      sub_22F24FB88(&v26, v31);
      v13 = v26;
    }
    else
    {
      v13 = 0;
    }
    v25 = v13;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v12, (unint64_t *)v30, v31, *((unsigned int *)a1 + 22), a1[12], (uint64_t)v24);
    if ((_DWORD)v34)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v33, v34);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v12;
    }
    v14 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v20 = sub_22EE0E1E0((uint64_t *)a1, v14, 0, v15, v16, v17, v18, v19);
    v21 = *a1;
    if ((v20 & 1) == 0)
    {
      v22 = sub_22EB4ADC8(v21, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v21);
  v22 = 1;
LABEL_12:
  if (v26 != v28)
    free(v26);
  if (v30 != v32)
    free(v30);
  if (v33 != v35)
    free(v33);
  return v22;
}

uint64_t sub_22EE14380(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EE14468(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EE144C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  int v70;
  void *v71[2];
  _BYTE v72[64];
  void *v73;
  uint64_t v74;
  _QWORD v75[10];

  v2 = (uint64_t)a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EE11308((uint64_t *)a1, *v17, 0);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v19 = *(_DWORD *)(v2 + 4);
    goto LABEL_24;
  }
  v49 = **(_QWORD **)(v2 + 40);
  for (i = v49; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_84;
      v51 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v51 <= 0x39)
        break;
LABEL_79:
      if (sub_22F115668(i))
        v49 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_112;
    }
    if (v51 == 24)
      goto LABEL_111;
    if (v51 == 26)
      break;
    if (((1 << v51) & 0x20000000200003CLL) == 0)
      goto LABEL_79;
LABEL_84:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_84;
LABEL_111:
  v49 = i;
LABEL_112:
  v19 = sub_22F115668(v49);
LABEL_24:
  v20 = *(_DWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  if (v19)
  {
    *(_DWORD *)(a1 + 88) = v19;
    *(_QWORD *)(a1 + 96) = 0;
  }
  v22 = sub_22EE08DD4(a1, *(_QWORD *)(v2 + 8));
  if (v22 < 0x10)
    goto LABEL_32;
  v23 = v22;
  if (*(_BYTE *)v2 != 119)
  {
    v24 = *(_DWORD *)(v2 + 4);
    goto LABEL_29;
  }
  v65 = v21;
  v52 = **(_QWORD **)(v2 + 40);
  v53 = v52;
  while (2)
  {
    while (2)
    {
      if ((v53 & 0xF) != 0)
        goto LABEL_96;
      v54 = *(unsigned __int8 *)(*(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v54 > 0x39)
      {
LABEL_91:
        if (sub_22F115668(v53))
          v52 = v53;
        v53 = sub_22F115B7C(v53);
        if (!v53)
          goto LABEL_114;
        continue;
      }
      break;
    }
    if (v54 == 24)
      break;
    if (v54 != 26)
    {
      if (((1 << v54) & 0x20000000200003CLL) != 0)
        goto LABEL_96;
      goto LABEL_91;
    }
    if ((*(_BYTE *)(v53 + 23) & 0x10) == 0)
    {
LABEL_96:
      v53 = sub_22F115B7C(v53);
      continue;
    }
    break;
  }
  v52 = v53;
LABEL_114:
  v24 = sub_22F115668(v52);
  v21 = v65;
LABEL_29:
  v25 = sub_22EE130A0(a1, v24, *(_QWORD *)(v2 + 16));
  if (!v25)
  {
LABEL_32:
    v2 = 1;
    goto LABEL_72;
  }
  v26 = v25;
  v67 = 0;
  v71[0] = v72;
  v71[1] = (void *)0x800000000;
  v27 = *(_QWORD *)a1;
  v28 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v30 = *(_DWORD *)(*(_QWORD *)(v27 + 3688) + 576 * *(unsigned int *)(v27 + 3696) - 576), v30 <= 3)
      ? (v31 = v30 == 2)
      : (v31 = 1),
        v31))
  {
    v29 = 1;
  }
  else
  {
    v29 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v27 + 72) + 1) & 2) != 0)
    {
      v73 = 0;
      v69 = 3;
      v70 = 1;
      v68 = *(unsigned int *)(v27 + 1704);
      sub_22EB4DDB8(v27 + 3688, &v70, (int *)&v68, (__int16 *)(v27 + 1693), (uint64_t *)&v73, &v69);
      v32 = *(unsigned int *)(v27 + 3696);
      v33 = v32 - 2;
      v34 = *(_QWORD *)(v27 + 3688);
      v35 = *(_DWORD *)(v34 + 576 * (v32 - 2));
      if (v35 == 5)
      {
        *(_BYTE *)(v34 + 576 * v32 - 4) = *(_BYTE *)(v34 + 576 * v33 + 572);
        v36 = 1;
      }
      else if (v35 == 2)
      {
        *(_BYTE *)(v34 + 576 * v32 - 4) = 1;
        v36 = *(_BYTE *)(v34 + 576 * v33 + 573) != 0;
      }
      else
      {
        v36 = 0;
        *(_BYTE *)(v34 + 576 * v32 - 4) = 0;
      }
      v37 = v34 + 576 * v32;
      *(_BYTE *)(v37 - 3) = v36;
      *(_WORD *)(v27 + 1693) = 0;
      if (*(_DWORD *)(v27 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v27 + 1776), (llvm::SmallPtrSetImplBase *)(v37 - 560));
        sub_22EAEAE08(v27 + 1840, (uint64_t *)(v37 - 496));
      }
      v29 = 0;
      v28 = *(unsigned __int8 *)v2;
    }
  }
  v38 = v28 == 119;
  if (v28 == 119)
    v39 = v2;
  else
    v39 = 0;
  v40 = v39 + 48;
  v41 = (uint64_t **)(v2 + 40);
  if (v38)
    v42 = v40;
  else
    v42 = v2 + 40;
  if (sub_22EE11824((uint64_t *)a1, v42, *(_DWORD *)(v2 + 32), 1, (uint64_t)v71, &v67))
  {
    if ((v29 & 1) == 0)
      sub_22EB48E64(v27);
    v2 = 1;
    goto LABEL_70;
  }
  if ((v29 & 1) == 0)
    sub_22EB48E64(v27);
  v43 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v23 != *(_QWORD *)(v2 + 8) || v26 != *(_QWORD *)(v2 + 16) || v67)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v45 = *(_DWORD *)(v2 + 4);
      goto LABEL_65;
    }
    v62 = *(_QWORD *)a1;
    v64 = v20;
    v55 = **v41;
    v56 = v55;
    while (1)
    {
      if ((v56 & 0xF) != 0)
        goto LABEL_108;
      v57 = *(unsigned __int8 *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v57 > 0x39)
      {
LABEL_103:
        if (sub_22F115668(v56))
          v55 = v56;
        v56 = sub_22F115B7C(v56);
        if (!v56)
          goto LABEL_128;
      }
      else
      {
        if (v57 == 24)
          goto LABEL_127;
        if (v57 == 26)
        {
          if ((*(_BYTE *)(v56 + 23) & 0x10) != 0)
          {
LABEL_127:
            v55 = v56;
LABEL_128:
            v45 = sub_22F115668(v55);
            v43 = v62;
            v20 = v64;
LABEL_65:
            v46 = v45;
            v47 = *(_DWORD *)v2;
            v48 = *(_QWORD *)(v2 + 24);
            v73 = v75;
            v74 = 0x800000000;
            if ((sub_22EACCC94(v43) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v46, v23, v26, (v47 >> 18) & 1, (uint64_t *)v73, v74, (v47 & 0x80000) != 0, (v47 & 0x100000) != 0, (v47 & 0x200000) != 0, (v47 & 0x400000) != 0, v61, (v47 >> 23) & 7, v48);
            if (v73 != v75)
              free(v73);
            goto LABEL_70;
          }
        }
        else if (((1 << v57) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_103;
        }
LABEL_108:
        v56 = sub_22F115B7C(v56);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v44 = *(_DWORD *)(v2 + 4);
    goto LABEL_62;
  }
  v66 = v21;
  v63 = *(_QWORD *)a1;
  v58 = **v41;
  v59 = v58;
  while (2)
  {
    while (2)
    {
      if ((v59 & 0xF) != 0)
        goto LABEL_126;
      v60 = *(unsigned __int8 *)(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v60 > 0x39)
      {
LABEL_121:
        if (sub_22F115668(v59))
          v58 = v59;
        v59 = sub_22F115B7C(v59);
        if (!v59)
          goto LABEL_130;
        continue;
      }
      break;
    }
    if (v60 == 24)
      break;
    if (v60 != 26)
    {
      if (((1 << v60) & 0x20000000200003CLL) != 0)
        goto LABEL_126;
      goto LABEL_121;
    }
    if ((*(_BYTE *)(v59 + 23) & 0x10) == 0)
    {
LABEL_126:
      v59 = sub_22F115B7C(v59);
      continue;
    }
    break;
  }
  v58 = v59;
LABEL_130:
  v44 = sub_22F115668(v58);
  v43 = v63;
  v21 = v66;
LABEL_62:
  sub_22EB4E494(v43, v44, v26, 1);
LABEL_70:
  if (v71[0] != v72)
    free(v71[0]);
LABEL_72:
  *(_DWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  return v2;
}

uint64_t sub_22EE14C84(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31[2];
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  void *v36[2];
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)(a2 + 40);
  v5 = sub_22EE035DC(a1, *((_QWORD *)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = sub_22F060A34((uint64_t)a2);
  v8 = sub_22EE130A0(a1, v7, *((_QWORD *)a2 + 2));
  if (!v8)
    return 1;
  v9 = v8;
  v32 = 0;
  v36[0] = v37;
  v36[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v10 = *a1;
  v11 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v14 = *(_DWORD *)(*(_QWORD *)(v10 + 3688) + 576 * *(unsigned int *)(v10 + 3696) - 576), v14 <= 3)
      ? (v15 = v14 == 2)
      : (v15 = 1),
        v15))
  {
    v12 = 1;
  }
  else
  {
    v12 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 72) + 1) & 2) != 0)
    {
      v31[0] = 0;
      v34 = 3;
      v35 = 1;
      v33 = *(unsigned int *)(v10 + 1704);
      sub_22EB4DDB8(v10 + 3688, &v35, (int *)&v33, (__int16 *)(v10 + 1693), v31, &v34);
      v16 = *(unsigned int *)(v10 + 3696);
      v17 = v16 - 2;
      v18 = *(_QWORD *)(v10 + 3688);
      v19 = *(_DWORD *)(v18 + 576 * (v16 - 2));
      if (v19 == 5)
      {
        *(_BYTE *)(v18 + 576 * v16 - 4) = *(_BYTE *)(v18 + 576 * v17 + 572);
        v20 = 1;
      }
      else if (v19 == 2)
      {
        *(_BYTE *)(v18 + 576 * v16 - 4) = 1;
        v20 = *(_BYTE *)(v18 + 576 * v17 + 573) != 0;
      }
      else
      {
        v20 = 0;
        *(_BYTE *)(v18 + 576 * v16 - 4) = 0;
      }
      v21 = v18 + 576 * v16;
      *(_BYTE *)(v21 - 3) = v20;
      *(_WORD *)(v10 + 1693) = 0;
      if (*(_DWORD *)(v10 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v10 + 1776), (llvm::SmallPtrSetImplBase *)(v21 - 560));
        sub_22EAEAE08(v10 + 1840, (uint64_t *)(v21 - 496));
      }
      v12 = 0;
      v11 = *a2;
    }
  }
  v22 = v11 == 119;
  if (v11 == 119)
    v23 = a2;
  else
    v23 = 0;
  v24 = (uint64_t)(v23 + 48);
  if (v22)
    v25 = v24;
  else
    v25 = (uint64_t)v4;
  v26 = sub_22EE11824(a1, v25, *((_DWORD *)a2 + 8), 1, (uint64_t)v36, &v32);
  if ((v12 & 1) == 0)
    sub_22EB48E64(v10);
  if ((v26 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v27 = *a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *v4 && v9 == *((_QWORD *)a2 + 2) && !v32)
    {
      v28 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v27, v28, v9, 1);
      v29 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      v31[0] = *v6;
      v31[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v31);
      sub_22F3C57CC(a2);
      v29 = sub_22EBBC368();
    }
    v13 = v29;
  }
  if (v36[0] != v37)
    free(v36[0]);
  return v13;
}

uint64_t sub_22EE14FA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = sub_22EE130A0(a1, *(unsigned int *)(a2 + 4), *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(v6 + 216))
  {
    sub_22EFF605C(v2);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 88);
    v10 = *(_QWORD *)(v6 + 216);
    v2 = sub_22E3CD3D4(v9 + 2032, 32, 3);
    sub_22F3C5EB8(v2, v9, v8, v5, *(_QWORD *)(v5 + 48), v10);
  }
  return v2;
}

uint64_t sub_22EE15060(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v5 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 4), v5);
    if (!v5)
      return 1;
  }
  v6 = *a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EE151C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v40[3];
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *v44[2];
  _QWORD v45[32];
  int v46;
  int v47;
  uint64_t v48;

  v2 = a2;
  v48 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v12 = sub_22EE0ED40(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v44[0] = 0;
    LOBYTE(v42) = 0;
    v13 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v14 = sub_22EBCD1E4((unsigned int *)*a1, 0, v12 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v13, (unint64_t *)v44, &v42);
    v7 = v14;
    if ((v14 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EE08DD4(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
  }
  v8 = *(unsigned int *)v2;
  if ((v8 & 0x100000) != 0)
  {
    v10 = (_DWORD *)(v2 + 72);
    if ((v8 & 0x80000) != 0 && *v10)
      v11 = *(unsigned int *)(v2 + 84);
    else
      v11 = 0;
    v9 = *(_QWORD *)&v10[8 * v11 + 4 * ((v8 >> 19) & 1)];
  }
  else
  {
    v9 = 0;
  }
  *(_OWORD *)v40 = *(_OWORD *)(v2 + 32);
  v15 = sub_22F0AB0EC(v40);
  if (!v9 || (*(_DWORD *)(v9 + 28) & 0x7F) != 0x26)
    goto LABEL_31;
  v16 = *(_QWORD *)(v9 + 48);
  if (!v16)
    v16 = sub_22EF6462C((*a1)[11], v9);
  v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 32);
  v18 = a1[10];
  v19 = *((_DWORD *)v18 + 20) + *((_DWORD *)v18 + 2);
  if ((v17 & 0x7FFFu) >= v19)
    goto LABEL_31;
  v20 = *(_QWORD *)(*(_QWORD *)(*v18 + 16 * (v19 + ~(v17 & 0x7FFF)))
                  + 24
                  * HIWORD(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 32))
                  + 8);
  if ((v17 & 0x8000) != 0)
  {
    v21 = *((_DWORD *)*a1 + 2998);
    if (v21 == -1)
      goto LABEL_63;
    v22 = v20 + 24 * v21;
    v42 = *(_OWORD *)v22;
    v43 = *(_QWORD *)(v22 + 16);
    if ((_DWORD)v42 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v42 + 1) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      {
LABEL_29:
        v20 = *((_QWORD *)&v42 + 1);
        goto LABEL_30;
      }
    }
    else if ((_DWORD)v42 == 7)
    {
      if (**((_BYTE **)&v42 + 1) != 213)
        goto LABEL_29;
    }
    else if (((1 << v42) & 0x13D) != 0)
    {
      goto LABEL_29;
    }
    sub_22F401DC4((int *)&v42, (uint64_t)v44);
    v42 = *(_OWORD *)v44;
    v43 = v45[0];
    goto LABEL_29;
  }
LABEL_30:
  v41 = v20;
  if (v20 <= 0xF)
  {
LABEL_31:
    v23 = sub_22EE130A0(a1, v15, v9);
LABEL_32:
    v24 = v23;
    goto LABEL_33;
  }
  v36 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
  if (v36 && (*(_DWORD *)(v36 + 16) & 0xFE) == 0x2C
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
    && (v36 = sub_22F10CF48(v36)) != 0)
  {
    v23 = sub_22F114198(*(_QWORD *)(v36 + 24));
    goto LABEL_32;
  }
  sub_22E8FCA40(*a1, v15, 0xF99u, 0, (uint64_t)v44);
  sub_22E8901B8((uint64_t)v44, (uint64_t *)&v41);
  sub_22E903BEC((unsigned int *)v44);
LABEL_63:
  v24 = 0;
LABEL_33:
  v25 = *(_QWORD *)(v2 + 32);
  if (v25)
  {
    v26 = sub_22EE11C74((int)a1, v25, *(void **)(v2 + 40));
    if (!v26)
      return 1;
    v28 = v26;
    v29 = v27;
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v30 = *(_DWORD *)(v2 + 80);
  else
    v30 = 0;
  sub_22EE12458((unint64_t)a1, (uint64_t *)(v2 + 48), (uint64_t)&v42);
  if (!(_QWORD)v42)
    return 1;
  v31 = *(unsigned int *)v2;
  if ((v31 & 0x80000) != 0 && (v32 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v33 = *(_DWORD *)(v2 + 76);
    v44[0] = v45;
    v44[1] = (void *)0x800000000;
    v46 = v32;
    v47 = v33;
    v34 = v2 + 72 + 16 * ((v31 >> 19) & 1);
    if ((sub_22EE0E8DC(a1, v34, v34 + 32 * *(unsigned int *)(v2 + 84), v44) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8(a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v28, v29, v30, v24, (uint64_t)&v42, (uint64_t)v44);
    if (v44[0] != v45)
      free(v44[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *((_DWORD *)*a1 + 2998) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v28 != *(_QWORD *)(v2 + 32)
      || v29 != *(_QWORD *)(v2 + 40)
      || (_QWORD)v42 != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8(a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v31 >> 18) & 1, *(_DWORD *)(v2 + 4), v28, v29, v30, v24, (uint64_t)&v42, 0);
    }
    if ((v31 & 0x100000) != 0)
    {
      v37 = (_DWORD *)(v2 + 72);
      if ((v31 & 0x80000) != 0 && *v37)
        v38 = *(unsigned int *)(v2 + 84);
      else
        v38 = 0;
      v35 = *(_QWORD *)&v37[8 * v38 + 4 * ((v31 >> 19) & 1)];
    }
    else
    {
      v35 = 0;
    }
    if (v24 != v35)
      return sub_22F3012E8(a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v31 >> 18) & 1, *(_DWORD *)(v2 + 4), v28, v29, v30, v24, (uint64_t)&v42, 0);
  }
  return v2;
}

uint64_t sub_22EE156D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  void *v91;
  _BOOL4 v92;
  unint64_t v93;
  unsigned int v94[24];
  uint64_t v95;
  unsigned int v96;
  unsigned int v97[24];
  uint64_t v98;
  char v99;
  char v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD v105[6];

  v105[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EE0ED40(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(a2 + 48);
  v103 = v105;
  v104 = 0x200000000;
  v8 = *a1;
  v101 = 7;
  v102 = v7;
  sub_22EE7377C(v8, (uint64_t)&v101, (uint64_t)&v103);
  v9 = 1;
  v100 = 1;
  v99 = 0;
  LODWORD(v12) = *(_DWORD *)(a2 + 28);
  v10 = (_DWORD)v12 != 0;
  v11 = (_DWORD)v12 != 0;
  LODWORD(v12) = v12 - 1;
  if (v11)
    v12 = v12;
  else
    v12 = 0;
  v13 = v12 | (v10 << 32);
  v98 = v13;
  v14 = *(unsigned int *)(a2 + 20);
  sub_22F0D4E74(v7);
  if ((sub_22EE73A98((_QWORD *)*a1, v14, v15, (uint64_t)v103, v104, (uint64_t *)a1[10], &v100, &v99, (uint64_t)&v98) & 1) == 0)
  {
    if (v100)
    {
      if (BYTE4(v98) && v98 > *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 184))
      {
        sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 20), 0xDA0u, 0, (uint64_t)v97);
        v16 = sub_22E89519C((uint64_t)v97, (unsigned int *)&v98);
        v96 = *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 184);
        v17 = sub_22E89519C(v16, &v96);
        sub_22F0D4E74(a2);
        v95 = v18;
        sub_22E8906A0(v17, &v95);
        sub_22E903BEC(v97);
        sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 20), 0x745u, 0, (uint64_t)v94);
        sub_22E903BEC(v94);
LABEL_88:
        v9 = 1;
        goto LABEL_89;
      }
      v19 = *(_QWORD *)(a2 + 40);
      if (v19)
      {
        v20 = (*(_BYTE *)(v19 + 1) & 0x20) == 0;
        v21 = 48;
        if (v20)
          v21 = 40;
        v22 = *(_QWORD *)(a2 + v21);
      }
      else
      {
        v22 = 0;
      }
      v27 = sub_22EE0ED40(a1, v22);
      if ((v27 & 1) != 0)
        goto LABEL_88;
      v28 = *(int **)(a2 + 40);
      if (v28)
      {
        v29 = *v28;
        v92 = (v29 & 0x2000) == 0;
        if ((v29 & 0x2000) != 0 && v99)
        {
          v30 = v6;
          sub_22EE1D76C((uint64_t)v97, a1);
          v31 = sub_22EE0ED40(a1, v7);
          if ((v31 & 1) != 0)
            goto LABEL_87;
          v32 = *(_DWORD *)(a2 + 16);
          if (!v32)
          {
            v33 = *(_QWORD *)(a2 + 40);
            if (v33 && (*(_BYTE *)(v33 + 1) & 0x20) != 0)
            {
              sub_22F0D5A50(v33);
              v32 = v72;
            }
            else
            {
              v32 = *(_DWORD *)(a2 + 20);
            }
          }
          v73 = v31 & 0xFFFFFFFFFFFFFFFELL;
          v74 = *(_DWORD *)(a2 + 56);
          v75 = v27 & 0xFFFFFFFFFFFFFFFELL;
          v77 = *(_DWORD *)(a2 + 20);
          v76 = *(_DWORD *)(a2 + 24);
          if (!v76)
          {
            v78 = *(_QWORD *)(a2 + 40);
            if (!v78 || (v76 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v78 + 1) & 0x20) == 0))
            {
              v93 = v31 & 0xFFFFFFFFFFFFFFFELL;
              v79 = *(_DWORD *)(a2 + 56);
              sub_22F0D60E4(*(_QWORD *)(a2 + 48));
              v74 = v79;
              v73 = v93;
            }
          }
          v27 = sub_22F34AF2C(*a1, v30, v32, v73, v74, v77, v75, v76, v13);
          if ((v27 & 1) != 0)
            goto LABEL_87;
          sub_22EE1D880((uint64_t)v97);
          v92 = 0;
          v6 = v30;
        }
      }
      else
      {
        v92 = 1;
      }
      v89 = v13;
      v90 = (unsigned __int8 *)v6;
      v37 = v98;
      if ((_DWORD)v98)
      {
        v38 = 0;
        v39 = -1;
        while (1)
        {
          v40 = *a1;
          v41 = v37 + v39;
          if (v92)
            v41 = v38;
          v42 = *(_DWORD *)(v40 + 11992);
          *(_DWORD *)(v40 + 11992) = v41;
          v43 = sub_22EE0ED40(a1, v7);
          v9 = v43;
          if ((v43 & 1) != 0)
          {
LABEL_81:
            *(_DWORD *)(v40 + 11992) = v42;
            v9 = 1;
            goto LABEL_89;
          }
          v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
          if ((*(_BYTE *)((v43 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x20) != 0)
          {
            v48 = *(_DWORD *)(a2 + 16);
            if (!v48)
            {
              v49 = *(_QWORD *)(a2 + 40);
              if (v49 && (*(_BYTE *)(v49 + 1) & 0x20) != 0)
              {
                sub_22F0D5A50(v49);
                v48 = v50;
              }
              else
              {
                v48 = *(_DWORD *)(a2 + 20);
              }
            }
            if (v92)
              v51 = v27 & 0xFFFFFFFFFFFFFFFELL;
            else
              v51 = v44;
            v52 = *(_DWORD *)(a2 + 56);
            if (v92)
              v53 = v44;
            else
              v53 = v27 & 0xFFFFFFFFFFFFFFFELL;
            v55 = *(_DWORD *)(a2 + 20);
            v54 = *(_DWORD *)(a2 + 24);
            if (!v54)
            {
              v56 = *(_QWORD *)(a2 + 40);
              if (!v56 || (v54 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v56 + 1) & 0x20) == 0))
              {
                v87 = v53;
                v88 = v51;
                v57 = *(_DWORD *)(a2 + 56);
                sub_22F0D60E4(*(_QWORD *)(a2 + 48));
                v53 = v87;
                v51 = v88;
                v52 = v57;
              }
            }
            v47 = sub_22F34AF2C(*a1, (uint64_t)v90, v48, v51, v52, v55, v53, v54, v89);
          }
          else
          {
            if (v27 < 2)
              goto LABEL_78;
            if (v92)
              v45 = v27 & 0xFFFFFFFFFFFFFFFELL;
            else
              v45 = v43 & 0xFFFFFFFFFFFFFFFELL;
            if (v92)
              v46 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            else
              v46 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL);
            if (v90)
              v47 = sub_22E8C9D28(a1, dword_22F4A2BC4[*(unsigned int *)(a2 + 56)], *(_DWORD *)(a2 + 20), v90, v45, v46);
            else
              v47 = sub_22EB4785C(*a1, 0, *(_DWORD *)(a2 + 20), *(unsigned int *)(a2 + 56), v45, (uint64_t)v46);
          }
          v9 = v47;
LABEL_78:
          if ((v9 & 1) != 0)
            goto LABEL_81;
          *(_DWORD *)(v40 + 11992) = v42;
          ++v38;
          v37 = v98;
          --v39;
          v27 = v9;
          if (v38 == (_DWORD)v98)
            goto LABEL_83;
        }
      }
      v9 = v27;
LABEL_83:
      v58 = v92;
      if (!v99)
        v58 = 0;
      if (!v58)
      {
        if (v9)
          goto LABEL_89;
LABEL_93:
        v9 = sub_22F34AFD0((_QWORD *)*a1, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 56));
        goto LABEL_89;
      }
      sub_22EE1D76C((uint64_t)v97, a1);
      v59 = sub_22EE0ED40(a1, v7);
      if ((v59 & 1) == 0)
      {
        v70 = *(_DWORD *)(a2 + 16);
        if (!v70)
        {
          v71 = *(_QWORD *)(a2 + 40);
          if (v71 && (*(_BYTE *)(v71 + 1) & 0x20) != 0)
          {
            sub_22F0D5A50(v71);
            v70 = v80;
          }
          else
          {
            v70 = *(_DWORD *)(a2 + 20);
          }
        }
        v81 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v82 = *(_DWORD *)(a2 + 56);
        v83 = v59 & 0xFFFFFFFFFFFFFFFELL;
        v85 = *(_DWORD *)(a2 + 20);
        v84 = *(_DWORD *)(a2 + 24);
        if (!v84)
        {
          v86 = *(_QWORD *)(a2 + 40);
          if (!v86 || (v84 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v86 + 1) & 0x20) == 0))
            sub_22F0D60E4(*(_QWORD *)(a2 + 48));
        }
        v9 = sub_22F34AF2C(*a1, (uint64_t)v90, v70, v81, v82, v85, v83, v84, v89);
        if ((v9 & 1) == 0)
        {
          sub_22EE1D880((uint64_t)v97);
          if (v9)
            goto LABEL_89;
          goto LABEL_93;
        }
      }
LABEL_87:
      sub_22EE1D880((uint64_t)v97);
      goto LABEL_88;
    }
    v23 = *a1;
    v24 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v25 = *(_QWORD *)(a2 + 40);
    if (v25)
    {
      v26 = sub_22EE0ED40(a1, v25);
      if ((v26 & 1) != 0)
        goto LABEL_37;
    }
    else
    {
      v26 = 0;
    }
    v34 = *(_QWORD *)(a2 + 48);
    if (v34)
    {
      v35 = sub_22EE0ED40(a1, v34);
      if ((v35 & 1) != 0)
      {
LABEL_37:
        v9 = 1;
LABEL_43:
        *(_DWORD *)(v23 + 11992) = v24;
        goto LABEL_89;
      }
    }
    else
    {
      v35 = 0;
    }
    v36 = *a1;
    if (*(_DWORD *)(v36 + 11992) == -1
      && *(_QWORD *)(a2 + 40) == (v26 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 48) == (v35 & 0xFFFFFFFFFFFFFFFELL))
    {
      v9 = a2;
    }
    else
    {
      v61 = *(_DWORD *)(a2 + 16);
      if (!v61)
      {
        v62 = *(_QWORD *)(a2 + 40);
        if (v62 && (*(_BYTE *)(v62 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v62);
          v61 = v63;
        }
        else
        {
          v61 = *(_DWORD *)(a2 + 20);
        }
      }
      v91 = (void *)v6;
      v64 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v65 = *(_DWORD *)(a2 + 56);
      v66 = v35 & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_DWORD *)(a2 + 20);
      v67 = *(_DWORD *)(a2 + 24);
      if (!v67)
      {
        v69 = *(_QWORD *)(a2 + 40);
        if (!v69 || (v67 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v69 + 1) & 0x20) == 0))
          sub_22F0D60E4(*(_QWORD *)(a2 + 48));
      }
      v9 = sub_22F34AF2C(v36, (uint64_t)v91, v61, v64, v65, v68, v66, v67, v98);
    }
    goto LABEL_43;
  }
LABEL_89:
  if (v103 != v105)
    free(v103);
  return v9;
}

uint64_t sub_22EE15DB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  char v12;
  int v13;

  v2 = a2;
  v4 = sub_22EE08DD4(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 24), *(_QWORD *)(v2 + 16));
  if (!v6)
    return 1;
  v7 = v6;
  v8 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v7 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v8, *(unsigned int *)(v2 + 24), v7, 1);
  }
  else
  {
    v10 = *(_DWORD *)(v2 + 24);
    v11 = *(unsigned __int8 *)(v2 + 28);
    v12 = v11 & 1;
    v13 = (v11 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v8 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v10, v5, v7, v12, v13);
  }
  return v2;
}

uint64_t sub_22EE15E9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE035DC(a1, *(_QWORD *)(a2 + 32));
  if (!v4)
    return 1;
  v5 = (unint64_t *)v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EE0ED40(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v47 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EE11824(a1, (uint64_t)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v47) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) == 0)
  {
    v18 = 0;
    v17 = 0;
    goto LABEL_21;
  }
  v16 = (v15 >> 19) & 1;
  v17 = v13[v16];
  if (!v17)
  {
    v18 = 0;
    goto LABEL_21;
  }
  v18 = sub_22EE11308(a1, (unsigned __int8 *)v13[v16], 1);
  if ((v18 & 1) == 0)
  {
LABEL_21:
    v45 = v18;
    v46 = v8;
    v19 = *(_QWORD *)(v2 + 16);
    if (v19)
    {
      v20 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 40), v19);
      if (!v20)
        goto LABEL_14;
    }
    else
    {
      v20 = 0;
    }
    v44 = v9;
    v21 = *(_QWORD *)(v2 + 24);
    if (v21)
    {
      v22 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 40), v21);
      if (!v22)
        goto LABEL_14;
    }
    else
    {
      v22 = 0;
    }
    v23 = *a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
    {
      if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
      {
        if ((v6 & 0x80000) == 0)
        {
          v24 = *v5;
          goto LABEL_32;
        }
        v7 = v46 == *v13;
      }
      if (v17 == (v45 & 0xFFFFFFFFFFFFFFFELL)
        && v7
        && v20 == *(_QWORD *)(v2 + 16)
        && v22 == *(_QWORD *)(v2 + 24)
        && !v47)
      {
        if (v20)
          sub_22EB4E494(v23, *(unsigned int *)(v2 + 40), v20, 1);
        if (v22)
          sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v22, 1);
        if ((*(_BYTE *)(v2 + 2) & 8) != 0)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v38 || *(_BYTE *)(v38 + 16) != 39)
            v38 = sub_22F10CF48(v38);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
          {
            v39 = *(_QWORD *)(*a1 + 88);
            v40 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v40 || *(_BYTE *)(v40 + 16) != 39)
              v40 = sub_22F10CF48(v40);
            v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v39, *(_QWORD *)(v40 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                        + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v41)
            {
              if (*(_BYTE *)(v41 + 16) == 45)
              {
                v42 = sub_22F114198(*(_QWORD *)(v41 + 24));
                v43 = sub_22EC6602C(*a1, v42) & 0xFFFFFFFFFFFFFFF8;
                if (v43)
                  sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v43, 1);
              }
            }
          }
        }
        goto LABEL_49;
      }
    }
    v24 = *v5;
    if ((v6 & 0x80000) != 0)
    {
      v26 = v44;
      goto LABEL_43;
    }
LABEL_32:
    v25 = sub_22EF5C728(*(_QWORD *)(v23 + 88), v24);
    v26 = v44;
    if (v25)
    {
      v27 = v25;
      v28 = *(unsigned __int8 *)(v25 + 16);
      if (v28 == 3)
      {
        v33 = *(_QWORD *)(v25 + 48);
        if (v33)
          goto LABEL_42;
      }
      else if (v28 == 2)
      {
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = sub_22EF67C8C(v29);
        v31 = *(_DWORD *)(v2 + 40);
        v32 = sub_22E3CD3D4(v29 + 2032, 32, 3);
        v33 = sub_22EFF8F1C(v32, v29, v27 + 40, v30, v31);
LABEL_42:
        v24 = *(_QWORD *)(v27 + 32);
        v26 = 1;
        v46 = v33;
      }
    }
LABEL_43:
    v34 = *(_DWORD *)v2;
    if ((*(_DWORD *)v2 & 0x2000000) != 0)
    {
      v36 = (v34 >> 19) & 1;
      if ((v34 & 0x1800000) != 0)
        ++v36;
      v35 = v13[v36 + *(_DWORD *)(v2 + 4)];
    }
    else
    {
      v35 = 0;
    }
    v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v34 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v35, v24, v5, v46, v26, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v45 & 0xFFFFFFFFFFFFFFFELL));
    goto LABEL_49;
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EE162EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EE16460(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t i;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  void *v53[2];
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  void *v59[2];
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v55 = 0;
  v54 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v55, &v54);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v55;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EE11C74((int)a1, v8, v9);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  sub_22E8ACE30((uint64_t)&v52, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v19 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v18 = v15 | 1;
      else
        v18 = 1;
    }
    else
    {
      v20 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v52, v55, 0);
      if (!v20)
        goto LABEL_32;
      v21 = v20;
      if (v20 >= 0x10)
      {
        v22 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v21 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v21 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v21, *(_DWORD *)(a2 + 72));
      v18 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v19 = sub_22F115668(*v23);
    }
  }
  else
  {
    v17 = sub_22EE1D9AC((uint64_t)a1, v16, v7, (uint64_t)&v52);
    if (!v17)
      goto LABEL_32;
    v18 = (unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL;
    v19 = sub_22F115668(*v17);
  }
  v24 = *(_QWORD *)(a2 + 48);
  if (v24)
  {
    v58 = 0u;
    *(_OWORD *)v59 = 0u;
    v25 = sub_22EE1D9AC((uint64_t)a1, v24, v7, (uint64_t)&v58);
    if (HIDWORD(v59[1]))
      free(v59[0]);
    if (!v25)
      goto LABEL_32;
  }
  else
  {
    v25 = 0;
  }
  v26 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v27 = *(unsigned int *)(a2 + 28);
  v28 = *(_BYTE *)(a2 + 24);
  v29 = *(_DWORD *)(a2 + 56);
  v30 = *(_DWORD *)(a2 + 60);
  if ((*(_BYTE *)(v26 + 1) & 0x80) != 0)
    goto LABEL_37;
  v31 = *(_QWORD *)(v26 + 8);
  if ((v18 & 1) != 0 && (v18 & 0xFFFFFFFFFFFFFFFELL) != 0)
    goto LABEL_37;
  v34 = v31 & 0xFFFFFFFFFFFFFFF0;
  v35 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
  {
    v36 = *(_QWORD *)(v35 + 8);
    goto LABEL_49;
  }
  if (v35 && *(_BYTE *)(v35 + 16) == 39)
  {
LABEL_47:
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_49:
    v37 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || *(_BYTE *)(v37 + 16) != 45)
    {
LABEL_37:
      if ((v28 & 1) != 0)
        v32 = 36;
      else
        v32 = 25;
      v33 = sub_22EBCD92C((uint64_t)*a1, v26, v27, v32, (uint64_t)&v52, v25, v29, v30, v18, v19);
      goto LABEL_41;
    }
    goto LABEL_56;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v49 = *(_QWORD *)(v26 + 8);
    v50 = *(unsigned int *)(a2 + 28);
    v38 = sub_22F10CF48(v35);
    v31 = v49;
    v27 = v50;
    if (v38)
    {
      v35 = *(_QWORD *)v34;
      if (*(_BYTE *)(*(_QWORD *)v34 + 16) != 39)
      {
        v35 = sub_22F10CF48(v35);
        v31 = v49;
        v27 = v50;
      }
      goto LABEL_47;
    }
  }
LABEL_56:
  v51 = v27;
  v39 = v31;
  if ((v18 & 1) != 0)
    v40 = 0;
  else
    v40 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
  v60 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v40 & 7 | *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFFF0) + 8));
  v61 = v19;
  sub_22EFC6D6C((uint64_t)&v62, v60);
  v62 = v40;
  if (!v25)
    goto LABEL_65;
  v41 = *v25;
  v42 = *(_QWORD *)(*v25 & 0xFFFFFFFFFFFFFFF0);
  if (v42 && (*(_DWORD *)(v42 + 16) & 0xFE) == 0x2C
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
    && (v43 = sub_22F10CF48(v42), v41 = *v25, v43))
  {
    sub_22E8ACD1C((uint64_t)&v52, *((_QWORD *)*a1 + 11), 0, v41, (uint64_t)(v25 + 1), v29);
LABEL_65:
    v33 = sub_22EC225CC(*a1, v26, v39, v51, v28 & 1, (uint64_t)&v52, 0, 0, (uint64_t)&v60, 0, 0, 0);
LABEL_41:
    v13 = v33;
    goto LABEL_42;
  }
  v44 = *a1;
  for (i = v41; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_77;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 <= 0x39)
        break;
LABEL_72:
      if (sub_22F115668(i))
        v41 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_79;
    }
    if (v46 == 24)
      goto LABEL_78;
    if (v46 == 26)
      break;
    if (((1 << v46) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_78:
  v41 = i;
LABEL_79:
  v47 = sub_22F115668(v41);
  sub_22E8FCA40(v44, v47, 0xCEFu, 0, (uint64_t)&v58);
  v57 = *v25;
  v48 = sub_22E8901B8((uint64_t)&v58, &v57);
  v56 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
  sub_22E89519C(v48, (unsigned int *)&v56);
  sub_22E903BEC((unsigned int *)&v58);
LABEL_32:
  v13 = 1;
LABEL_42:
  if (HIDWORD(v53[1]))
    free(v53[0]);
  return v13;
}

uint64_t sub_22EE1697C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _OWORD v29[2];
  _QWORD v30[2];
  void *v31;
  uint64_t v32;
  _BYTE v33[16];
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v2 = (uint64_t)a2;
  v36 = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22EE0ED40(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v28 = v5;
  v31 = v33;
  v32 = 0x200000000;
  v30[0] = *(_QWORD *)(v2 + 16);
  v30[1] = *((_QWORD *)&v29[1] + 1);
  do
  {
    v9 = v7;
    v10 = sub_22EFFED0C((unsigned __int8 *)v30[v8]);
    if (*v10 == 141)
    {
      v11 = sub_22EFFED0C(*(unsigned __int8 **)&v10[v10[3]]);
      if (*v11 == 161)
      {
        v12 = v11;
        v13 = v11 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v11 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C((uint64_t *)v2, v34);
          sub_22EFF605C(v35);
          v15 = *(unsigned int *)v12;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v12[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v13;
          v17 = sub_22EE130A0(a1, v14, *(_QWORD *)v16);
          if (!v17)
          {
            v2 = 1;
            goto LABEL_25;
          }
          v18 = v17;
          v19 = *(unsigned int *)v12;
          if ((v19 & 0x100000) != 0)
            v20 = (unsigned int *)&v12[16 * ((v19 >> 18) & 1) + 32];
          else
            v20 = (unsigned int *)v13;
          v21 = v17 != *(_QWORD *)v20;
          v22 = v32;
          if (v32 >= (unint64_t)HIDWORD(v32))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v22 = v32;
          }
          v6 |= v21;
          *((_QWORD *)v31 + v22) = v18 | 3;
          LODWORD(v32) = v32 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v9 & 1) == 0);
  v24 = *a1;
  v25 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v26 = v28 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v26, v25))
  {
    sub_22F05FD5C((uint64_t *)v2, v34);
    sub_22EFF605C(v35);
    v2 = sub_22ED1767C(*a1, v27, LODWORD(v29[0]), (uint64_t)&v31, v25, v26, 0, 1, 0);
  }
  else
  {
    v34[0] = v25;
    v34[1] = v28 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v24, (_DWORD *)v2, 0, v34, 2);
  }
LABEL_25:
  if (v31 != v33)
    free(v31);
  return v2;
}

uint64_t sub_22EE16C28(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v6[2];

  v4 = (uint64_t *)sub_22EE0391C(a1);
  if (!v4)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(uint64_t **)(a2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return a2;
}

uint64_t sub_22EE16CD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EE16D3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22EE0ED40(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22EE0391C(a1);
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EE16EB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE035DC(a1, *(_QWORD *)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EE11824(a1, a2 + 32, *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EE11824(a1, a2 + 32, *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(_QWORD *)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EE1714C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int v15[3];
  int v16;
  uint64_t v17;
  int v18;

  v2 = a2;
  if ((*(_QWORD *)(a2 + 16) & 4) != 0)
  {
    v13 = (uint64_t *)sub_22EE0391C(a1);
    if (v13)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = (uint64_t)*a1;
    v18 = 0;
    v17 = 0;
    v16 = 3;
    *(_QWORD *)v15 = *(unsigned int *)(v4 + 1704);
    sub_22EB4DDB8(v4 + 3688, &v18, v15, (__int16 *)(v4 + 1693), &v17, &v16);
    v5 = *(unsigned int *)(v4 + 3696);
    v6 = v5 - 2;
    v7 = *(_QWORD *)(v4 + 3688);
    v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
    if (v8 == 5)
    {
      *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
      v9 = 1;
    }
    else if (v8 == 2)
    {
      *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
      v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
    }
    else
    {
      v9 = 0;
      *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
    }
    v10 = v7 + 576 * v5;
    *(_BYTE *)(v10 - 3) = v9;
    *(_WORD *)(v4 + 1693) = 0;
    if (*(_DWORD *)(v4 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
      sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
    }
    v11 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v12 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v12, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EE17324(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE0ED40(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22EE11824(a1, (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22EE1750C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE0ED40(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE17324(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22EE11824(a1, (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22EE1767C(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EE0ED40(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v32 = v34;
      v33 = 0x800000000;
      v10 = 1;
      if ((sub_22EE11824(a1, (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24), a2[4] - 1, 1, (uint64_t)&v32, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, v32, v33, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v32, v33, v11, 0);
        v10 = v13;
      }
      if (v32 != v34)
        free(v32);
      return v10;
    }
    return 1;
  }
  v14 = sub_22EE0ED40(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EE1F190((_QWORD **)a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22EE0ED40(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22EE0ED40(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    v26 = *(_DWORD *)(v20 + 56);
    v27 = *(_QWORD *)(v20 + 1296);
    v31 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    if ((v21 & 0x100000) != 0)
      v28 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v28 = 0;
    sub_22E51A8D0(&v32, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v32 & ~HIDWORD(v28) | HIDWORD(v28) & v28;
    *(_QWORD *)(v29 + 1296) = v28;
    v10 = sub_22E8C9D28(a1, a2[1] & 0x3F, a2[5], (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL), v17 & 0xFFFFFFFFFFFFFFFELL, (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL));
    *(_DWORD *)(v20 + 56) = v26;
    *(_QWORD *)(v20 + 1296) = v27;
    v30 = *(_QWORD *)(v20 + 80);
    *(_QWORD *)(v30 + 520) = v31;
    *(_DWORD *)(v30 + 528) = v31;
    return v10;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EE179E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EE0391C(a1);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EE17A54(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = sub_22EE0391C(a1);
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)a2);
  v7 = sub_22EE0ED40(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(_QWORD *)(a2 + 24)
    || *(_QWORD *)(a2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(a2 + 32), v5, *(unsigned int *)(a2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return a2;
}

uint64_t sub_22EE17AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EE035DC(a1, *(_QWORD *)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EE0ED40(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
    || v5 != *(_QWORD *)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EE17BB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EE0391C(a1);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(a2 + 24)
    || *(_QWORD *)(a2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(a2 + 32), *(_BYTE *)(a2 + 40) & 3, *(_DWORD *)(a2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return a2;
}

uint64_t sub_22EE17C5C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EE0ED40(a1, v3);
}

uint64_t sub_22EE17C88(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EE17D4C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_22EE0391C(a1);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *(_DWORD *)(v8 + 11992) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0(v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EE17E18(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EE0E8DC(a1, v4 + 2, &v4[4 * *((unsigned int *)v4 + 2) + 2], v17) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EE17F3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EE0391C(a1);
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EE17FD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE11308(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EE18028(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE11308(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE18074(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EE11308(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE1B0B0((_QWORD **)a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EE180E4(_QWORD **a1, uint64_t a2)
{
  return sub_22EE1F190(a1, a2, 0, 0);
}

uint64_t sub_22EE180F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  void *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EE0ED40(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_47;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v45 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_39:
    v42 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v45) | v6 & 1))
        goto LABEL_45;
      v42 = *(_QWORD **)a1;
    }
    v43 = sub_22EC38374(v42, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v45);
    if ((v43 & 1) != 0)
      v2 = 1;
    else
      v2 = v43;
    goto LABEL_45;
  }
  v6 = 0;
  v45 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 12;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 12);
    if (v11 == 1)
    {
      v21 = sub_22EE0ED40(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)(v8 - 4) + 1)));
      if ((v21 & 1) != 0)
        break;
      v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(_DWORD *)v8;
      v6 = 1;
      v51 = 1;
      v52 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v23;
      v54 = 0;
      v24 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v25 = (char *)v61 + 40 * v62;
      v26 = *(_QWORD *)(v24 + 32);
      v27 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v24;
      *((_OWORD *)v25 + 1) = v27;
      *((_QWORD *)v25 + 4) = v26;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)(v8 - 4) + 1)) != v45;
      v28 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v59;
      }
      *((_QWORD *)v58 + v28) = v22;
      goto LABEL_30;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)(v8 - 4);
      if ((v12 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v41 = *(_QWORD *)(v12 + 40);
        if ((v41 & 7) != 0)
          v13 = 0;
        else
          v13 = v41 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 4);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = (char *)v61 + 40 * v62;
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)(v8 - 4);
      if (v18 && (v18 & 1) == 0)
      {
        v19 = sub_22EE130A0(a1, *(unsigned int *)(v8 + 8), v18);
        v20 = *(_QWORD *)(v8 - 4);
        if ((v20 & 1) != 0)
          v20 = 0;
        v6 = (v19 != v20) | v10;
      }
      goto LABEL_31;
    }
    v29 = sub_22EE0ED40(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)(v8 - 4) + 1)));
    if ((v29 & 1) != 0)
      break;
    v30 = sub_22EE0ED40(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)(v8 - 4) + 2)));
    if ((v30 & 1) != 0)
      break;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v32 = v30 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v33 = *(_QWORD *)v8;
    v47 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v30 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v33;
    v50 = 0;
    v6 = 1;
    v34 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v35 = (char *)v61 + 40 * v62;
    v36 = *(_QWORD *)(v34 + 32);
    v37 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v34;
    *((_OWORD *)v35 + 1) = v37;
    *((_QWORD *)v35 + 4) = v36;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
    {
      v38 = *(_DWORD *)(v8 - 4);
      v6 = *(_QWORD *)(v7 + 8 * (v38 + 1)) != v31
        || *(_QWORD *)(v7 + 8 * (v38 + 2)) != v32;
    }
    v39 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v39 = v59;
    }
    *((_QWORD *)v58 + v39) = v31;
    v40 = v59 + 1;
    LODWORD(v59) = v40;
    if (v40 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = v59;
    }
    *((_QWORD *)v58 + v40) = v32;
LABEL_30:
    LODWORD(v59) = v59 + 1;
LABEL_31:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_39;
  }
  v2 = 1;
LABEL_45:
  if (v58 != v60)
    free(v58);
LABEL_47:
  if (v61 != v63)
    free(v61);
  return v2;
}

uint64_t sub_22EE18528(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EE186B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EE187C4(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EE0ED40(a1, v3);
}

uint64_t sub_22EE187F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EE0ED40(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EE18884(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v22;
  void *v23[4];
  void *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v24 = v26;
  v25 = 0x400000000;
  v22 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      if (*(_QWORD *)(v4 + 8 * v8))
      {
        v12 = sub_22EE0391C(a1);
        if (!v12)
          break;
        v13 = (void *)v12;
        v14 = v22;
        if (v22 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v22;
        }
        v23[v14] = v13;
      }
      else
      {
        v15 = v22;
        if (v22 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v22;
        }
        v23[v15] = 0;
      }
      ++v22;
      v16 = sub_22EE0ED40(a1, v11);
      if ((v16 & 1) != 0)
        break;
      v17 = v25;
      if (v25 >= (unint64_t)HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v25;
      }
      *((_QWORD *)v24 + v17) = v16 & 0xFFFFFFFFFFFFFFFELL;
      v18 = (v25 + 1);
      LODWORD(v25) = v25 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v19 = v22;
        v20 = (uint64_t *)v24;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = v26;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v23, v19, v5, v20, v18);
  }
  if (v24 != v26)
    free(v24);
  return v10;
}

uint64_t sub_22EE18AAC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EE18B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = sub_22EE08DD4(a1, *(_QWORD *)(a2 + 8));
  if (v6 >= 0x10)
  {
    v7 = v6;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v6 != *(_QWORD *)(v2 + 8))
    {
      v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
      sub_22E5018F0(v2, v7);
    }
  }
  else
  {
    v2 = 1;
  }
  *(_DWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = v5;
  return v2;
}

uint64_t sub_22EE18C10(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EE11824(a1, *(_QWORD *)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EE18E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EE11C74(a1, v4, *(void **)(a2 + 48));
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = sub_22EE130A0(a1, *(unsigned int *)(a2 + 32), *(_QWORD *)(a2 + 24));
  if (!v9)
    return 1;
  v10 = v9;
  v11 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
    return 1;
  v13 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
  return sub_22F2F44CC(v13, v11 & 0xFFFFFFFFFFFFFFFELL, v10, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
}

uint64_t sub_22EE18F10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(unsigned int *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, &v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EE18FC4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EE190B0(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EE0ED40(a1, v3);
}

uint64_t sub_22EE190C4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EE19188(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  int v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  __int128 v45;
  void *v46[2];
  void *v47[2];
  _BYTE v48[129];
  uint64_t v49;
  void *v50[2];
  void *v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  void *v57;
  __int128 v58;
  int v59;
  __int16 v60;
  char v61;
  uint64_t v62;

  v2 = a2;
  v62 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22EE11C74((int)a1, v6, *(void **)(v2 + 56));
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 40), *(_QWORD *)(v2 + 24));
  if (!v12)
    return 1;
  v13 = v12;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v15 = *(_QWORD *)(v2 + 64);
    v14 = *(_QWORD *)(v2 + 24);
  }
  else
  {
    v14 = *(_QWORD *)(v2 + 24);
    v15 = v14;
  }
  v16 = v12;
  if (v14 != (v15 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v16 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 40), v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v39 = *(_QWORD *)(v2 + 48);
        v40 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      if (v9 == v39 && v10 == v40 && v13 == *(_QWORD *)(v2 + 24))
      {
        v41 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : v13;
        if (v16 == (v41 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v47[0] = v48;
  v47[1] = (void *)0x800000000;
  v49 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v49) = v22;
      HIDWORD(v49) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EE0E8DC(a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12), v47) & 1) != 0)
        goto LABEL_28;
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(void **)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  *(_QWORD *)&v43 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  DWORD2(v43) = v28;
  v44 = v27;
  if (!(_QWORD)v43
    || (sub_22EE12458((unint64_t)a1, (uint64_t *)&v43, (uint64_t)v50), v43 = *(_OWORD *)v50, v44 = v51[0], v50[0]))
  {
    v29 = *(unsigned int *)v2;
    if ((v29 & 0x100000) != 0)
    {
      if (*(_DWORD *)(v2 + 24 * ((v29 >> 19) & 1) + 48))
        v30 = v47;
      else
        v30 = 0;
    }
    else
    {
      v30 = 0;
    }
    v31 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v29 >> 18) & 1);
    if (*(_QWORD *)(v13 + 40))
    {
      v45 = 0u;
      *(_OWORD *)v46 = 0u;
      sub_22E8ACE30((uint64_t)&v45, v9, v10);
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
      v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if ((v29 & 0x40000) != 0
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 39)
      {
        v2 = 1;
      }
      else
      {
        v34 = (_QWORD *)*a1;
        v35 = v11;
        v50[0] = 0;
        v50[1] = &v51[1];
        v51[0] = (void *)0x800000000;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = v34;
        v56 = v43;
        v57 = v44;
        v58 = xmmword_22F463A40;
        v59 = 16842752;
        v60 = 0;
        v61 = 0;
        sub_22EC56024((uint64_t)v50);
        v36 = *(unsigned int *)(v16 + 28);
        v37 = v51[0];
        if (LODWORD(v51[0]) >= HIDWORD(v51[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v37 = v51[0];
        }
        *((_QWORD *)v50[1] + v37) = (v36 >> 13) & 3 | v16;
        ++LODWORD(v51[0]);
        LODWORD(v50[0]) = 2;
        sub_22EC561E4((uint64_t)v50);
        v2 = sub_22EC24AB8(*a1, v32, v33, v26, (v29 >> 18) & 1, (uint64_t *)&v45, v35, 0, (uint64_t)v50, (uint64_t)v30, 0, 0, 0);
        if (HIBYTE(v59))
        {
          if (LODWORD(v50[0]) == 5)
          {
            sub_22EC64D18(v55, (uint64_t)v50);
          }
          else if (v53 && (*(_DWORD *)(v55[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v55, (uint64_t)v50);
          }
        }
        if (v52)
        {
          v42 = sub_22EC6CBD0(v52);
          MEMORY[0x2348A0E9C](v42, 0x10E0C409F09D3C3);
        }
        if (v50[1] != &v51[1])
          free(v50[1]);
      }
      if (HIDWORD(v46[1]))
        free(v46[0]);
    }
    else
    {
      v38 = (unint64_t)sub_22EB24398(*a1, v31 & 0xFFFFFFFFFFFFFFFELL, v9, v16, v13);
      if ((v38 & 1) != 0)
      {
        v2 = 1;
      }
      else
      {
        *(_OWORD *)v50 = 0u;
        *(_OWORD *)v51 = 0u;
        v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v29 >> 18) & 1, v26, v50, v13, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v43);
        if (HIDWORD(v51[1]))
          free(v51[0]);
      }
    }
    goto LABEL_56;
  }
LABEL_28:
  v2 = 1;
LABEL_56:
  if (v47[0] != v48)
    free(v47[0]);
  return v2;
}

uint64_t sub_22EE196F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EE0ED40(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EE0391C(a1);
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EE11824(a1, *(_QWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(_QWORD **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EE199E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EE0ED40(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22EE0ED40(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22EE0ED40(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EE19B08(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EE0ED40(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EE19C94(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58[4];
  void *v59;
  uint64_t v60;
  _QWORD v61[34];

  v2 = a2;
  v61[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v58, 0, sizeof(v58));
  v59 = v61;
  v60 = 0x400000000;
  sub_22E8BB974((uint64_t)&v59, v4, v58);
  v5 = (_QWORD *)*a1;
  v6 = *(_DWORD *)(*a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v49 = v8;
    v48 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v52 = v4 << 6;
    v53 = a1;
    v12 = 2;
    v57 = v2 + 32;
    v51 = v2;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v59 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v38 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v38 + 16))
        v39 = ***(_DWORD ***)(v38 + 24);
      else
        v39 = *(_DWORD *)(v13 + 64);
      if (v17 != v39)
        goto LABEL_8;
LABEL_9:
      v22 = v57 + 8 * *(unsigned int *)(v2 + 28);
      v23 = v12 - 2;
      v55 = *(_QWORD *)(v22 + 8 * v23);
      v56 = v12 - 1;
      v24 = *(_QWORD *)(v22 + 8 * v56);
      v25 = *(_QWORD *)(v22 + 8 * v12);
      v26 = sub_22EE0ED40(a1, v55);
      v54 = v24;
      v27 = sub_22EE0ED40(a1, v24);
      v50 = v25;
      v28 = sub_22EE0ED40(a1, v25);
      if ((v10 & 1) != 0)
        goto LABEL_18;
      v29 = *(_QWORD *)(v13 + 56);
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      v31 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 4) != 0)
        v31 = *(_QWORD *)(v30 + 32);
      if (v31)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v59 + v9 + 16) < 0x10uLL || (v26 & 1) != 0)
          goto LABEL_19;
      }
      else if ((v26 & 1) != 0)
      {
        goto LABEL_18;
      }
      if (((v27 | v28) & 1) != 0)
      {
LABEL_18:
        v10 = 1;
LABEL_19:
        a1 = v53;
        v2 = v51;
        goto LABEL_20;
      }
      v32 = (char *)v59;
      v33 = (char *)v59 + v9;
      *((_QWORD *)v33 + 3) = v26 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v33 + 4) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v33 + 5) = v28 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v51;
      *((_DWORD *)v33 + 12) = *(_DWORD *)(v57
                                        + 8 * *(unsigned int *)(v51 + 28)
                                        + 8 * (3 * *(_DWORD *)(v51 + 28))
                                        + 4 * v23);
      *((_DWORD *)v33 + 13) = *(_DWORD *)(v57
                                        + 8 * *(unsigned int *)(v51 + 28)
                                        + 8 * (3 * *(_DWORD *)(v51 + 28))
                                        + 4 * v56);
      *((_DWORD *)v33 + 14) = *(_DWORD *)(v57
                                        + 8 * *(unsigned int *)(v51 + 28)
                                        + 8 * (3 * *(_DWORD *)(v51 + 28))
                                        + 4 * v12);
      if (v49)
      {
        v10 = 0;
        v49 = 1;
        a1 = v53;
      }
      else
      {
        a1 = v53;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)(v30 + 32);
        if (!v30)
        {
          v10 = 0;
          v49 = 1;
LABEL_35:
          if (v55 == (v26 & 0xFFFFFFFFFFFFFFFELL) && v54 == (v27 & 0xFFFFFFFFFFFFFFFELL))
          {
            v10 = 0;
            v49 = v50 != (v28 & 0xFFFFFFFFFFFFFFFELL);
          }
          goto LABEL_20;
        }
        v34 = *(_QWORD *)&v32[v9 + 16];
        if (v34 >= 0x10)
          v35 = *(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0);
        else
          v35 = 0;
        v36 = *(_QWORD *)(v13 + 48);
        if (v36 >= 0x10)
          v37 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
        else
          v37 = 0;
        v10 = 0;
        v49 = 1;
        if (v35 == v37)
          goto LABEL_35;
      }
LABEL_20:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v52 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v40 = 1;
          goto LABEL_56;
        }
        v4 = v48;
        if (v49)
        {
          v5 = (_QWORD *)*a1;
          goto LABEL_50;
        }
LABEL_55:
        v40 = v2;
        goto LABEL_56;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_9;
LABEL_8:
    v19 = sub_22EE0391C(a1);
    v20 = sub_22EE08DD4(a1, *(_QWORD *)(v13 + 48));
    v21 = sub_22EE7D030(*a1, v20, v19);
    *(_QWORD *)((char *)v59 + v9 + 16) = v21;
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_55;
LABEL_50:
  v41 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v59, v60);
  v40 = v41;
  if (v41 >= 2 && (_DWORD)v4)
  {
    v42 = (uint64_t *)(v2 + 32);
    v43 = (uint64_t *)((v41 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v45 = *v42++;
      v44 = v45;
      v46 = *v43++;
      *(_QWORD *)&v58[0] = v46;
      sub_22EE21394(a1, v44, (uint64_t *)v58, 1);
      --v4;
    }
    while (v4);
  }
LABEL_56:
  if (v59 != v61)
    free(v59);
  return v40;
}

uint64_t sub_22EE1A0B4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_22EE0391C(a1);
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(a2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(a2 + 24), v4, *(_DWORD *)(a2 + 28));
  return a2;
}

uint64_t sub_22EE1A118(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EE1A208(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EE1A304(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  char v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  void *v39;
  uint64_t v40;
  _QWORD v41[10];

  v41[8] = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v39 = v41;
  v40 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EE11824(a1, a2 + 48, v4, 0, (uint64_t)&v39, &v35) & 1) != 0)
    goto LABEL_25;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v9 = *(_QWORD *)(a2 + 40);
      else
        v9 = 0;
      v10 = sub_22EE0ED40(a1, v9);
      if ((v10 & 1) != 0)
        goto LABEL_25;
      v11 = *a1;
      v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v13 = 0) : (v13 = *(_QWORD *)(a2 + 40)),
            v13 != v12 || v35))
      {
        v36 = v38;
        v37 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v36);
        v21 = *(_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v22 = *(_QWORD *)(a2 + 16);
          v21 = *(_QWORD *)(v21 + 40);
        }
        else
        {
          v22 = 0;
        }
        v23 = sub_22EC2DA20(*a1, v12, *(_QWORD *)(v12 + 8), 0, v21, v22, *(unsigned int *)(a2 + 32));
LABEL_50:
        v19 = v23;
        v34 = v36;
        if (v36 == v38)
          goto LABEL_26;
        goto LABEL_51;
      }
    }
    else
    {
      v14 = sub_22EE0391C(a1);
      if (!v14)
        goto LABEL_25;
      v15 = (uint64_t *)v14;
      v11 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v15 != *(uint64_t **)(a2 + 40) || v35)
      {
        v36 = v38;
        v37 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v36);
        v17 = *(_QWORD *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v18 = *(_QWORD *)(a2 + 16);
          v17 = *(_QWORD *)(v17 + 40);
        }
        else
        {
          v18 = 0;
        }
        v23 = sub_22EC2F730((_QWORD *)*a1, v15, *v15, 0, v17, v18, *(_DWORD *)(a2 + 32), v16, (int *)v36, v37, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v39, v40, 0, 0);
        goto LABEL_50;
      }
    }
    v19 = sub_22EBCC6C0(v11, a2);
    goto LABEL_26;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (uint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_25:
    v19 = 1;
    goto LABEL_26;
  }
  v36 = v38;
  v37 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v36);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v24 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v24 = (uint64_t *)(*v6 + 40);
  v25 = *v24;
  v26 = (int *)v36;
  v27 = v37;
  v28 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v30 = *v6;
  else
    v30 = 0;
  v31 = *(unsigned int *)(a2 + 32);
  v32 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v30 + 58) & 2) != 0)
    v33 = sub_22EC2DA20(v32, 0, v28, v8, v25, v30, v31);
  else
    v33 = sub_22EC2F730(v32, 0, v28, v8, v25, v30, v31, v29, v26, v27, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v39, v40, 0, 0);
  v19 = v33;
  v34 = v36;
  if (v36 != v38)
LABEL_51:
    free(v34);
LABEL_26:
  if (v39 != v41)
    free(v39);
  return v19;
}

uint64_t sub_22EE1A6CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EE11824(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EE1A7B4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EE1A81C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v50;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  int v69;
  char v70;
  char v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[34];

  v2 = a2;
  v74[32] = *MEMORY[0x24BDAC8D0];
  v4 = v74;
  v72 = v74;
  v73 = 0x800000000;
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v5 & 0x7FFFFFFF;
  if ((v5 & 0x7FFFFFFF) != 0)
  {
    v7 = 0;
    v8 = 0;
    v55 = a2 + 40;
    v9 = (unint64_t)&loc_22F44E000;
    v54 = v6;
    while (1)
    {
      v10 = (uint64_t *)(v55 + 16 * v7);
      v12 = *v10;
      v11 = v10[1];
      v13 = v9 & 0xFFFFFF00FFFFFF00;
      v14 = *(_DWORD *)(v2 + 16);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_4;
      v22 = (unsigned int *)(v55 + 16 * (v14 & 0x7FFFFFFF) + 8 * v7);
      v23 = *v22;
      LODWORD(v22) = v22[1];
      v24 = v9 & 0xFFFFFF0000000000 | ((_DWORD)v22 - 1) | 0x100000000;
      if ((_DWORD)v22)
        v13 = v24;
      if (!(_DWORD)v23)
      {
LABEL_4:
        v15 = sub_22EE0ED40(a1, v12);
        if ((v15 & 1) != 0)
          goto LABEL_42;
        v16 = sub_22EE0ED40(a1, v11);
        if ((v16 & 1) != 0)
          goto LABEL_42;
        v17 = v11 == (v16 & 0xFFFFFFFFFFFFFFFELL) && v12 == (v15 & 0xFFFFFFFFFFFFFFFELL);
        v67 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        v68 = v16 & 0xFFFFFFFFFFFFFFFELL;
        v18 = !v17;
        v69 = 0;
        v8 |= v18;
        v70 = 0;
        v71 = 0;
        v19 = (_OWORD *)sub_22E78DF7C((uint64_t)&v72, (unint64_t)&v67, 1);
        v20 = (char *)v72 + 32 * v73;
        v21 = v19[1];
        *v20 = *v19;
        v20[1] = v21;
        LODWORD(v73) = v73 + 1;
        goto LABEL_40;
      }
      v67 = &v69;
      v68 = 0x200000000;
      v25 = (uint64_t)*a1;
      v65 = 7;
      v66 = v12;
      sub_22EE7377C(v25, (uint64_t)&v65, (uint64_t)&v67);
      v26 = (uint64_t)*a1;
      v63 = 7;
      v64 = v11;
      sub_22EE7377C(v26, (uint64_t)&v63, (uint64_t)&v67);
      v27 = 1;
      v62 = 1;
      v61 = 0;
      v60 = v13;
      sub_22F0D5A50(v12);
      v29 = v28;
      sub_22F0D60E4(v11);
      if ((sub_22EE73A98(*a1, v23, v29 | (unint64_t)(v30 << 32), (uint64_t)v67, v68, a1[10], &v62, &v61, (uint64_t)&v60) & 1) == 0)
      {
        v6 = v54;
        if (v62)
        {
          if (!(_DWORD)v60)
          {
            v8 = 1;
            v27 = 4;
            goto LABEL_36;
          }
          v52 = v23;
          v50 = v4;
          v31 = 0;
          while (1)
          {
            v32 = *a1;
            v33 = *((_DWORD *)*a1 + 2998);
            *((_DWORD *)*a1 + 2998) = v31;
            v34 = sub_22EE0ED40(a1, v12);
            if ((v34 & 1) != 0)
              break;
            v35 = sub_22EE0ED40(a1, v11);
            if ((v35 & 1) != 0)
              break;
            v56 = v34 & 0xFFFFFFFFFFFFFFFELL;
            v57 = v35 & 0xFFFFFFFFFFFFFFFELL;
            v58 = 0;
            v59 = v60;
            if ((*(_BYTE *)((v34 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x20) != 0
              || (*(_BYTE *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x20) != 0)
            {
              v58 = v52;
            }
            v8 = 1;
            v36 = (_OWORD *)sub_22E78DF7C((uint64_t)&v72, (unint64_t)&v56, 1);
            v37 = (char *)v72 + 32 * v73;
            v38 = v36[1];
            *v37 = *v36;
            v37[1] = v38;
            LODWORD(v73) = v73 + 1;
            *((_DWORD *)v32 + 2998) = v33;
            if (++v31 == (_DWORD)v60)
            {
              v27 = 4;
              goto LABEL_31;
            }
          }
          *((_DWORD *)v32 + 2998) = v33;
          v27 = 1;
          v8 = 1;
LABEL_31:
          v4 = v50;
        }
        else
        {
          v39 = *a1;
          v53 = *((_DWORD *)*a1 + 2998);
          *((_DWORD *)*a1 + 2998) = -1;
          v40 = sub_22EE0ED40(a1, v12);
          if ((v40 & 1) == 0)
          {
            v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
            v8 |= v12 != (v40 & 0xFFFFFFFFFFFFFFFELL);
            v42 = sub_22EE0ED40(a1, v11);
            if ((v42 & 1) != 0)
            {
              v27 = 1;
            }
            else
            {
              v8 |= v11 != (v42 & 0xFFFFFFFFFFFFFFFELL);
              v56 = v41;
              v57 = v42 & 0xFFFFFFFFFFFFFFFELL;
              v58 = v23;
              v59 = v60;
              v43 = (_OWORD *)sub_22E78DF7C((uint64_t)&v72, (unint64_t)&v56, 1);
              v44 = (char *)v72 + 32 * v73;
              v45 = v43[1];
              *v44 = *v43;
              v44[1] = v45;
              LODWORD(v73) = v73 + 1;
              v27 = 4;
            }
          }
          *((_DWORD *)v39 + 2998) = v53;
        }
      }
      v6 = v54;
LABEL_36:
      if (v67 != &v69)
        free(v67);
      v17 = v27 == 4;
      v2 = a2;
      if (!v17)
      {
LABEL_42:
        v46 = 1;
        goto LABEL_49;
      }
LABEL_40:
      ++v7;
      v9 = v13;
      if (v7 == v6)
        goto LABEL_44;
    }
  }
  LOBYTE(v8) = 0;
LABEL_44:
  v47 = *a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || (v8 & 1) != 0)
    v48 = sub_22EC297B0(v47, *(_QWORD *)(v2 + 20), (uint64_t)v72, v73);
  else
    v48 = sub_22EBCC6C0((uint64_t)v47, v2);
  v46 = v48;
LABEL_49:
  if (v72 != v4)
    free(v72);
  return v46;
}

uint64_t sub_22EE1AC68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EE0ED40(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EE1ADA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EE1AE48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE0391C(a1);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(a2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(a2 + 40 + 16 * *(unsigned int *)(a2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EE0ED40(a1, v15);
          if ((v16 & 1) != 0)
          {
            a2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(a2 + 24)) | v8 & 1)
    a2 = sub_22EB49A78(*a1, *(_DWORD *)(a2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(a2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return a2;
}

uint64_t sub_22EE1B04C(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EE0ED40(a1, a2[2]);
}

uint64_t sub_22EE1B0B0(_QWORD **a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  void *v27[2];
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22EE2173C(a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_34;
  }
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EE11C74((int)a1, v8, *((void **)a2 + 6));
    if (!v9)
    {
      v7 = 1;
      goto LABEL_32;
    }
    sub_22E8ACE30((uint64_t)&v26, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v12 = sub_22EE130A0(a1, a2[6], v11);
    if (!v12)
    {
      LODWORD(v30) = 0;
      LODWORD(v32) = 0;
      if (v34)
      {
        v16 = sub_22EC6CBD0(v34);
        MEMORY[0x2348A0E9C](v16, 0x10E0C409F09D3C3);
      }
      HIBYTE(v42) = 0;
      v7 = 1;
      v34 = 0;
      v35 = 0;
      goto LABEL_32;
    }
    v35 = v12;
  }
  v13 = *a2;
  if ((v13 & 0x40000) != 0)
  {
    v14 = a2[1];
    v15 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v17 = (int *)(v15 + 8 * v14);
    v18 = v17[2];
    v19 = *v17;
    if (*v17 | v18)
    {
      v20 = v17[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v19;
      v29[65] = v20;
      if (v19)
      {
        if ((sub_22EE0E8DC(a1, v15 + 8 * v14 + 16 * ((v13 >> 18) & 1), v15 + 8 * v14 + 16 * ((v13 >> 18) & 1) + 32 * *(unsigned int *)(v15 + 8 * v14 + 12), v28) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v21 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v21, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_46;
        }
        LODWORD(v13) = *a2;
      }
      v7 = sub_22ED66318(*a1, (uint64_t)&v26, v18, (uint64_t)&v30, (v13 >> 19) & 1, (uint64_t)v28);
LABEL_46:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_32;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_30;
  v22 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v22 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v22 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v22 = sub_22EFBAEA4(v22);
    if (!v22)
      goto LABEL_30;
  }
  if (!sub_22EFBAEF8(v22))
  {
    LODWORD(v13) = *a2;
LABEL_30:
    v23 = sub_22EB235A8(*a1, (uint64_t)&v26, (uint64_t)&v30, (v13 >> 19) & 1, 0);
    goto LABEL_31;
  }
  v23 = sub_22EC21A04((uint64_t)*a1, (uint64_t *)&v26, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_31:
  v7 = v23;
LABEL_32:
  if (HIDWORD(v27[1]))
    free(v27[0]);
LABEL_34:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v25 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v25, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EE1B450(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  void *v37[2];
  void *v38[2];
  _BYTE v39[256];
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[64];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EE0ED40(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EE08DD4(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EE11C74((int)a1, v7, *((void **)a2 + 6));
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = (_QWORD *)*a1;
  v41 = 0;
  v42 = v44;
  v43 = 0x800000000;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = v17;
  v49 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v52 = 0;
  v50 = v18;
  v51 = 0;
  v53 = 0;
  v54 = 257;
  v55 = 0;
  sub_22EC56024((uint64_t)&v41);
  if ((sub_22EE2173C((_QWORD **)a1, (unsigned __int8 *)a2, 0, (uint64_t)&v41) & 1) != 0)
    goto LABEL_19;
  if (!sub_22F0621BC((uint64_t)a2))
  {
LABEL_23:
    v38[0] = v39;
    v38[1] = (void *)0x800000000;
    v40 = 0;
    v22 = *a2;
    if ((v22 & 0x40000) == 0)
    {
      v35 = v5;
      v23 = 0;
      v24 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v25 = a2[18];
      v26 = (v22 >> 19) & 1;
      goto LABEL_40;
    }
    v27 = *a2;
    v28 = a2[1];
    if (v27 == 211)
      v29 = a2 + 16;
    else
      v29 = a2 + 20;
    v30 = &v29[2 * v28];
    if (*v30)
    {
      v40 = *(_QWORD *)v30;
      if ((sub_22EE0E8DC(a1, &v30[4 * ((v22 >> 18) & 1)], &v30[8 * v29[2 * v28 + 3] + 4 * ((v22 >> 18) & 1)], v38) & 1) != 0)
      {
        v14 = 1;
LABEL_42:
        if (v38[0] != v39)
          free(v38[0]);
        goto LABEL_44;
      }
      v24 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v25 = a2[18];
      v26 = (*a2 >> 19) & 1;
      v35 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v23 = 0;
LABEL_40:
        v32 = v25;
        v36 = 0u;
        *(_OWORD *)v37 = 0u;
        sub_22E8ACE30((uint64_t)&v36, v10, v11);
        v14 = sub_22EC24AB8(*a1, v24, v35, v32, v26, (uint64_t *)&v36, v15, 0, (uint64_t)&v41, (uint64_t)v23, 0, 0, 0);
        if (HIDWORD(v37[1]))
          free(v37[0]);
        goto LABEL_42;
      }
      v27 = *a2;
      v28 = a2[1];
    }
    else
    {
      v35 = v5;
      v24 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v25 = a2[18];
      v26 = (v22 >> 19) & 1;
    }
    v31 = a2 + 16;
    if (v27 != 211)
      v31 = a2 + 20;
    if (v31[2 * v28])
      v23 = v38;
    else
      v23 = 0;
    goto LABEL_40;
  }
  v19 = a2[6];
  v20 = sub_22F0621BC((uint64_t)a2);
  v21 = sub_22EE130A0(a1, v19, v20);
  if (v21)
  {
    v46 = v21;
    goto LABEL_23;
  }
LABEL_19:
  v14 = 1;
LABEL_44:
  if (BYTE1(v54))
  {
    if ((_DWORD)v41 == 5)
    {
      sub_22EC64D18(v48, (uint64_t)&v41);
    }
    else if (v46 && (*(_DWORD *)(v48[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v48, (uint64_t)&v41);
    }
  }
  if (v45)
  {
    v34 = sub_22EC6CBD0(v45);
    MEMORY[0x2348A0E9C](v34, 0x10E0C409F09D3C3);
  }
  if (v42 != v44)
    free(v42);
  return v14;
}

uint64_t sub_22EE1B834(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

uint64_t sub_22EE1B8B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EE1B918(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EE11824(a1, (uint64_t)(a2 + 6), a2[1], 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = a2[4];
    v7 = a2[5];
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EE1BA14(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EE0ED40(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EE1BA8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22EE0ED40(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EE1BBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EE0391C(a1);
    if (v4)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 32) != v4)
        return sub_22F3C109C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EE1BC64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EE11824(a1, *(_QWORD *)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EE1BEC8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v37;
  int v38;
  _QWORD *v39;
  char v40;
  char v41;
  unsigned __int8 **v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  void *v75[2];
  _QWORD v76[24];
  void *v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;

  v2 = a2;
  v82 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = (uint64_t)*a1;
  LODWORD(v73) = 0;
  v77 = 0;
  LODWORD(v71) = 3;
  v75[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, (int *)&v73, (int *)v75, (__int16 *)(v4 + 1693), (uint64_t *)&v77, (int *)&v71);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  LODWORD(v73) = 0;
  v74 = 0;
  if ((*(_BYTE *)(v2 + 2) & 1) == 0)
    goto LABEL_8;
  v18 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v18)
  {
    v19 = (uint64_t *)(v2 + 40);
    goto LABEL_12;
  }
  v77 = (void *)(*(_QWORD *)(v2 + 32) | 4);
  v30 = *(unsigned int *)(v2 + 16);
  LODWORD(v78) = *(_DWORD *)(v2 + 20);
  LOBYTE(v70) = 0;
  v72 = 0;
  LOBYTE(v75[0]) = 0;
  BYTE4(v75[0]) = 0;
  if ((sub_22EE73A98(*a1, v30, v78 | ((unint64_t)v78 << 32), (uint64_t)&v77, 1, a1[10], &v70, &v72, (uint64_t)v75) & 1) != 0)goto LABEL_33;
  if (!(_BYTE)v70)
  {
LABEL_8:
    v11 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 20), *(_QWORD *)(v2 + 32));
    if (v11)
    {
      v12 = v11;
      v13 = *(_DWORD *)(v2 + 16);
      v14 = *(_DWORD *)(v2 + 20);
      v15 = *(_DWORD *)(v2 + 24);
      v16 = (*a1)[11];
      v17 = 0;
LABEL_31:
      v2 = sub_22F0622F8(v16, v13, v12, v14, v15, v17, 0, 0);
      goto LABEL_34;
    }
LABEL_33:
    v2 = 1;
    goto LABEL_34;
  }
  v31 = *(_QWORD *)(v2 + 32);
  v32 = *(_DWORD *)(v31 + 28) & 0x7F;
  if (v31 && v32 == 38)
  {
    v33 = (*a1)[11];
    v34 = *(_QWORD *)(v31 + 48);
    if (v34)
      v35 = v34 & 0xFFFFFFFFFFFFFFF0;
    else
      v35 = sub_22EF6462C((*a1)[11], *(_QWORD *)(v2 + 32));
    v58 = sub_22EF663B4(v33, v35, 0);
    LODWORD(v73) = 1;
LABEL_65:
    v74 = v58;
    goto LABEL_66;
  }
  if (!v31 || v32 != 32)
  {
    v59 = (uint64_t)*a1;
    v71 = *(_QWORD *)(v31 + 48);
    v60 = v71;
    v61 = sub_22F1133DC(&v71, *(_QWORD *)(v59 + 88));
    v62 = sub_22F32D524(v59, v31, v61, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 16) & 0xFE) == 40, *(_DWORD *)(v2 + 20), 0);
    if ((v62 & 1) != 0)
      goto LABEL_33;
    v63 = sub_22E3CD3D4((*a1)[11] + 2032, 32, 3);
    v58 = sub_22EDA4684(v63, *(_QWORD *)((*a1)[11] + 16832), (_DWORD *)(v62 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(v2 + 20), 0);
    LODWORD(v73) = 7;
    goto LABEL_65;
  }
  v73 = 6;
  v74 = v31 & 0xFFFFFFFFFFFFFFF9;
LABEL_66:
  v19 = &v73;
  v18 = 1;
LABEL_12:
  v20 = 0;
  v21 = 3 * v18;
  v64 = (uint64_t)&v19[v21];
  v22 = 8 * v21;
  v23 = (uint64_t)v19;
  while (1)
  {
    v24 = *(_DWORD *)v23;
    if (*(_DWORD *)v23 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_20;
    }
    else if (v24 == 7)
    {
      if (**(unsigned __int8 **)(v23 + 8) != 213)
        goto LABEL_20;
    }
    else if (((1 << v24) & 0x13D) != 0)
    {
LABEL_20:
      ++v20;
      goto LABEL_21;
    }
    sub_22EDC0108((uint64_t)*a1, v23, *((_DWORD *)a1 + 22), (uint64_t)&v77);
    v70 = 0;
    LOBYTE(v71) = 0;
    BYTE4(v71) = 0;
    v25 = (uint64_t)*a1;
    v67 = v77;
    v68 = v78;
    v69 = v79;
    sub_22EE7465C(v25, (uint64_t)&v67);
    LODWORD(v75[0]) = 0;
    v75[1] = 0;
    v26 = (uint64_t)*a1;
    v27 = *((_DWORD *)*a1 + 2998);
    *((_DWORD *)*a1 + 2998) = -1;
    if (sub_22EE1E8A8((unsigned int *)a1, (uint64_t)&v77, (uint64_t)v75, 1))
    {
      *(_DWORD *)(v26 + 11992) = v27;
      goto LABEL_33;
    }
    v28 = (uint64_t)*a1;
    v65 = *(_OWORD *)v75;
    v66 = v76[0];
    v29 = sub_22EE74920(v28, (unsigned int *)&v65);
    if ((v29 & 0xFF00000000) == 0)
      break;
    v20 += v29;
    *(_DWORD *)(v26 + 11992) = v27;
LABEL_21:
    v23 += 24;
    v22 -= 24;
    if (!v22)
    {
      v12 = *(_QWORD *)(v2 + 32);
      v13 = *(_DWORD *)(v2 + 16);
      v14 = *(_DWORD *)(v2 + 20);
      v15 = *(_DWORD *)(v2 + 24);
      v17 = v20 | 0x100000000;
      v16 = (*a1)[11];
      goto LABEL_31;
    }
  }
  *(_DWORD *)(v26 + 11992) = v27;
  v37 = *(_DWORD *)(v2 + 20);
  v77 = (char *)&v78 + 8;
  *(_QWORD *)&v78 = 0x800000000;
  v80 = v37;
  v81 = v37;
  v38 = *((_DWORD *)a1 + 22);
  v39 = a1[12];
  if (v37)
  {
    *((_DWORD *)a1 + 22) = v37;
    a1[12] = 0;
  }
  v40 = sub_22EE1E3F4((uint64_t)a1, (uint64_t)a1, (uint64_t)v19, (uint64_t)a1, v64);
  *((_DWORD *)a1 + 22) = v38;
  a1[12] = v39;
  if ((v40 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_61;
  }
  v75[0] = v76;
  v75[1] = (void *)0x800000000;
  if (!(_DWORD)v78)
  {
    LODWORD(v47) = 0;
    goto LABEL_58;
  }
  v41 = 0;
  v42 = (unsigned __int8 **)v77;
  v43 = 32 * v78;
  do
  {
    v44 = sub_22E4EF088((uint64_t)v75, (unint64_t)v42, 1);
    v45 = (char *)v75[0] + 24 * LODWORD(v75[1]);
    v46 = *(_OWORD *)v44;
    *((_QWORD *)v45 + 2) = *(_QWORD *)(v44 + 16);
    *(_OWORD *)v45 = v46;
    v47 = ++LODWORD(v75[1]);
    v48 = *(_DWORD *)v42;
    if (*(_DWORD *)v42 == 1)
    {
      v49 = *(_BYTE *)(*(_QWORD *)((unint64_t)v42[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
    }
    else
    {
      if (v48 != 7)
      {
        v50 = ((1 << v48) & 0x13D) == 0;
        goto LABEL_49;
      }
      v49 = *v42[1] == 213;
    }
    v50 = v49;
LABEL_49:
    v41 |= v50;
    v42 += 4;
    v43 -= 32;
  }
  while (v43);
  if ((v41 & 1) == 0)
  {
LABEL_58:
    v51 = *(_QWORD *)(v2 + 32);
    v52 = *(_DWORD *)(v2 + 16);
    v53 = *(_DWORD *)(v2 + 20);
    v54 = *(_DWORD *)(v2 + 24);
    v57 = v47 | 0x100000000;
    v56 = (*a1)[11];
    v55 = 0;
    v47 = 0;
    goto LABEL_59;
  }
  v51 = *(_QWORD *)(v2 + 32);
  v52 = *(_DWORD *)(v2 + 16);
  v53 = *(_DWORD *)(v2 + 20);
  v54 = *(_DWORD *)(v2 + 24);
  v55 = v75[0];
  v56 = (*a1)[11];
  v57 = 0;
LABEL_59:
  v2 = sub_22F0622F8(v56, v52, v51, v53, v54, v57, (uint64_t)v55, v47);
  if (v75[0] != v76)
    free(v75[0]);
LABEL_61:
  if (v77 != (char *)&v78 + 8)
    free(v77);
LABEL_34:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EE1C52C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v5 = *a1 + 3688;
  v25 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v24 = 0;
  v23 = 3;
  v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v25, (int *)&v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EE231F8(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *(_DWORD *)(a2 + 4);
    v14 = a1[10];
    v15 = *(_DWORD *)(v14 + 80);
    v16 = v13;
    if (v15 <= v13)
    {
      v17 = *(_DWORD *)(v14 + 8);
      v18 = v17 + v15;
      v19 = v13 - v17;
      if (v18 <= v13)
        v16 = v19;
      else
        v16 = v15;
    }
    v20 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && v13 == v16 && *(unsigned int **)(a2 + 16) == v20)
    {
      sub_22F32F704(*a1);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(*a1, *(_DWORD *)(a2 + 24), v20, *(_DWORD *)(a2 + 28), v16);
    }
  }
}

uint64_t sub_22EE1C70C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EE0ED40(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EE1C7CC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22EE0ED40(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EE1C880(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  unsigned __int32 v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  int *v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  int *v73;
  uint64_t v74;
  size_t v75;
  unsigned __int32 v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int *v83;
  uint64_t v84;
  size_t v85;
  unsigned __int32 v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  int64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v101[32];
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105[2];
  void *v106;
  uint64_t v107;
  _BYTE v108[32];
  _BYTE *v109;
  int64x2_t v110;
  _BYTE v111[32];
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD v115[6];

  v2 = a1;
  v115[4] = *MEMORY[0x24BDAC8D0];
  v113 = v115;
  v114 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_147;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v93 = vdupq_n_s64(0x20uLL);
  v97 = (uint64_t)(a2 + 6);
  v98 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v109 = v111;
      v110 = vdupq_n_s64(0x20uLL);
      v112 = 0;
      v10 = sub_22F11598C(v9);
      if (v110.i64[0] < (unint64_t)v10)
        sub_22EEB52C0((uint64_t *)&v109, v10);
      v11 = sub_22EE03DE8(v2, &v109, v9, v8);
      if (v11 >= 0x10)
      {
        v13 = v11;
        if (v11 == *v7)
        {
          v14 = v114;
          v15 = HIDWORD(v114);
        }
        else
        {
          v26 = *(_QWORD *)(*v2 + 88);
          v27 = v110.i64[0] - v110.i64[1];
          v28 = v110.i32[0] - v110.i32[2];
          if (v110.i32[0] == v110.i32[2])
            v28 = sub_22F11598C(v13);
          v7 = (unint64_t *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
          *v7 = v13;
          memcpy(v7 + 1, &v109[v110.i64[1]], v27);
          v14 = v114;
          v15 = HIDWORD(v114);
          v5 = 1;
        }
        if (v14 >= v15)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v114;
        }
        v113[v14] = (uint64_t)v7;
        LODWORD(v114) = v114 + 1;
        v12 = 4;
      }
      else
      {
        v12 = 1;
      }
      if (v109 != v111 && v109)
        MEMORY[0x2348A0E84](v109, 0x1000C8077774924);
      goto LABEL_105;
    }
    v16 = *(_QWORD *)(v9 + 32);
    if (v16 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v62 = *(_QWORD *)((char *)&unk_22F4995E8
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v62 = 1;
    v18 = ((unint64_t)v8 + v62 + 3) & -v62;
    v105[0] = *(_QWORD *)(v9 + 32);
    v105[1] = v18;
    v106 = v108;
    v107 = 0x200000000;
    sub_22EE73804(*v2, v16, v18, (uint64_t)&v106);
    v104 = 1;
    v103 = 0;
    LODWORD(v21) = *(_DWORD *)(v9 + 20);
    v19 = (_DWORD)v21 != 0;
    v20 = (_DWORD)v21 != 0;
    LODWORD(v21) = v21 - 1;
    if (v20)
      v21 = v21;
    else
      v21 = 0;
    v102 = v21 | (v19 << 32);
    v22 = *v8;
    v23 = v16;
    for (i = v16; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v25 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v25 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v23 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v25 == 24)
        goto LABEL_42;
      if (v25 == 26)
        break;
      if (((1 << v25) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v23 = i;
LABEL_43:
    v29 = sub_22F115668(v23);
    v30 = sub_22F1167E8(v105);
    v2 = a1;
    if ((sub_22EE73A98((_QWORD *)*a1, v22, v29 | ((unint64_t)v30 << 32), (uint64_t)v106, v107, (uint64_t *)a1[10], &v104, &v103, (uint64_t)&v102) & 1) != 0)
    {
      v12 = 1;
      v6 = (_DWORD *)v97;
      v3 = v98;
      goto LABEL_102;
    }
    if (!v104)
    {
      v58 = *a1;
      v59 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v109 = v111;
      v110 = v93;
      v112 = 0;
      v60 = sub_22F11598C(*v7);
      if (v110.i64[0] < (unint64_t)v60)
        sub_22EEB52C0((uint64_t *)&v109, v60);
      v61 = sub_22EE03DE8(a1, &v109, v16, v18);
      v6 = (_DWORD *)v97;
      if (v61 < 0x10)
        goto LABEL_91;
      v63 = v61;
      v64 = v16;
      while (1)
      {
        if ((v64 & 0xF) != 0)
          goto LABEL_119;
        v65 = *(unsigned __int8 *)(*(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v65 > 0x39)
        {
LABEL_114:
          if (sub_22F115668(v64))
            v16 = v64;
          v64 = sub_22F115B7C(v64);
          if (!v64)
            goto LABEL_133;
        }
        else
        {
          if (v65 == 24)
            goto LABEL_132;
          if (v65 == 26)
          {
            if ((*(_BYTE *)(v64 + 23) & 0x10) != 0)
            {
LABEL_132:
              v16 = v64;
LABEL_133:
              v69 = sub_22F115668(v16);
              v70 = sub_22F1167E8(v105);
              v2 = a1;
              v71 = sub_22F34AE9C((_QWORD *)*a1, v63, v69 | ((unint64_t)v70 << 32), *v8, v102);
              if (v71 >= 0x10)
              {
                v72 = v71;
                sub_22EEB5360((uint64_t)&v109, v71, 4uLL, 4);
                *v73 = *v8;
                v74 = *(_QWORD *)(*a1 + 88);
                v75 = v110.i64[0] - v110.i64[1];
                v76 = v110.i32[0] - v110.i32[2];
                if (v110.i32[0] == v110.i32[2])
                  v76 = sub_22F11598C(v72);
                v77 = (_QWORD *)sub_22E3CD3D4(v74 + 2032, v76 + 8, 3);
                *v77 = v72;
                memcpy(v77 + 1, &v109[v110.i64[1]], v75);
                v78 = v114;
                if (v114 >= (unint64_t)HIDWORD(v114))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v78 = v114;
                }
                v113[v78] = (uint64_t)v77;
                LODWORD(v114) = v114 + 1;
                v12 = 4;
                goto LABEL_92;
              }
LABEL_91:
              v12 = 1;
LABEL_92:
              if (v109 != v111 && v109)
                MEMORY[0x2348A0E84](v109, 0x1000C8077774924);
              *(_DWORD *)(v58 + 11992) = v59;
              v3 = v98;
              goto LABEL_102;
            }
          }
          else if (((1 << v65) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_114;
          }
LABEL_119:
          v64 = sub_22F115B7C(v64);
        }
      }
    }
    v99 = v18;
    if (!(_DWORD)v102)
      goto LABEL_79;
    v31 = 0;
    do
    {
      v32 = *v2;
      v33 = *(_DWORD *)(*v2 + 11992);
      *(_DWORD *)(*v2 + 11992) = v31;
      v109 = v111;
      v110 = vdupq_n_s64(0x20uLL);
      v112 = 0;
      v34 = sub_22F11598C(v16);
      if (v110.i64[0] < (unint64_t)v34)
        sub_22EEB52C0((uint64_t *)&v109, v34);
      v35 = sub_22EE03DE8(v2, &v109, v16, v99);
      if (v35 < 0x10)
      {
LABEL_96:
        if (v109 != v111 && v109)
          MEMORY[0x2348A0E84](v109, 0x1000C8077774924);
        *(_DWORD *)(v32 + 11992) = v33;
        v12 = 1;
        goto LABEL_101;
      }
      v36 = v35;
      if ((*(_BYTE *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 17) & 1) == 0)
        goto LABEL_52;
      v42 = v16;
      v43 = v99;
      v44 = v99;
      v45 = v16;
      do
      {
        v94 = v44;
        v92 = v42;
        while (1)
        {
          if ((v45 & 0xF) != 0)
            goto LABEL_70;
          v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v46 > 0x39)
            goto LABEL_71;
          if (v46 == 24)
          {
LABEL_78:
            v42 = v45;
            goto LABEL_76;
          }
          if (v46 != 26)
            break;
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
            goto LABEL_78;
LABEL_70:
          v45 = sub_22F115B7C(v45);
          v43 = v47;
        }
        if (((1 << v46) & 0x20000000200003CLL) != 0)
          goto LABEL_70;
LABEL_71:
        v91 = v43;
        v48 = sub_22F115668(v45);
        v49 = v92;
        if (v48)
          v49 = v45;
        v50 = v94;
        if (v48)
          v50 = v91;
        v95 = v50;
        v45 = sub_22F115B7C(v45);
        v42 = v49;
        v43 = v51;
        v44 = v95;
      }
      while (v45);
LABEL_76:
      v52 = sub_22F115668(v42);
      v53 = sub_22F1167E8(v105);
      v2 = a1;
      v54 = sub_22F34AE9C((_QWORD *)*a1, v36, v52 | ((unint64_t)v53 << 32), *v8, v102);
      if (v54 < 0x10)
        goto LABEL_96;
      v36 = v54;
      sub_22EEB5360((uint64_t)&v109, v54, 4uLL, 4);
      *v55 = *v8;
LABEL_52:
      v37 = *(_QWORD *)(*v2 + 88);
      v38 = v110.i64[0] - v110.i64[1];
      v39 = v110.i32[0] - v110.i32[2];
      if (v110.i32[0] == v110.i32[2])
        v39 = sub_22F11598C(v36);
      v40 = (_QWORD *)sub_22E3CD3D4(v37 + 2032, v39 + 8, 3);
      *v40 = v36;
      memcpy(v40 + 1, &v109[v110.i64[1]], v38);
      v41 = v114;
      if (v114 >= (unint64_t)HIDWORD(v114))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = v114;
      }
      v113[v41] = (uint64_t)v40;
      LODWORD(v114) = v114 + 1;
      v2 = a1;
      if (v109 != v111 && v109)
        MEMORY[0x2348A0E84](v109, 0x1000C8077774924);
      *(_DWORD *)(v32 + 11992) = v33;
      ++v31;
    }
    while (v31 != (_DWORD)v102);
LABEL_79:
    if (!v103)
    {
      v12 = 4;
LABEL_101:
      v6 = (_DWORD *)v97;
      v3 = v98;
      goto LABEL_102;
    }
    sub_22EE1D76C((uint64_t)v101, v2);
    v109 = v111;
    v110 = vdupq_n_s64(0x20uLL);
    v112 = 0;
    v56 = sub_22F11598C(*v7);
    v6 = (_DWORD *)v97;
    v3 = v98;
    if (v110.i64[0] < (unint64_t)v56)
      sub_22EEB52C0((uint64_t *)&v109, v56);
    v57 = sub_22EE03DE8(v2, &v109, v16, v99);
    if (v57 < 0x10)
    {
LABEL_83:
      v12 = 1;
      goto LABEL_84;
    }
    v66 = v57;
    v67 = v16;
    while (2)
    {
      while (2)
      {
        if ((v67 & 0xF) != 0)
          goto LABEL_131;
        v68 = *(unsigned __int8 *)(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v68 > 0x39)
        {
LABEL_126:
          if (sub_22F115668(v67))
            v16 = v67;
          v67 = sub_22F115B7C(v67);
          if (!v67)
            goto LABEL_140;
          continue;
        }
        break;
      }
      if (v68 == 24)
        break;
      if (v68 != 26)
      {
        if (((1 << v68) & 0x20000000200003CLL) != 0)
          goto LABEL_131;
        goto LABEL_126;
      }
      if ((*(_BYTE *)(v67 + 23) & 0x10) == 0)
      {
LABEL_131:
        v67 = sub_22F115B7C(v67);
        continue;
      }
      break;
    }
    v16 = v67;
LABEL_140:
    v79 = sub_22F115668(v16);
    v80 = sub_22F1167E8(v105);
    v2 = a1;
    v81 = sub_22F34AE9C((_QWORD *)*a1, v66, v79 | ((unint64_t)v80 << 32), *v8, v102);
    if (v81 < 0x10)
      goto LABEL_83;
    v82 = v81;
    sub_22EEB5360((uint64_t)&v109, v81, 4uLL, 4);
    *v83 = *v8;
    v84 = *(_QWORD *)(*a1 + 88);
    v85 = v110.i64[0] - v110.i64[1];
    v86 = v110.i32[0] - v110.i32[2];
    if (v110.i32[0] == v110.i32[2])
      v86 = sub_22F11598C(v82);
    v87 = (_QWORD *)sub_22E3CD3D4(v84 + 2032, v86 + 8, 3);
    *v87 = v82;
    memcpy(v87 + 1, &v109[v110.i64[1]], v85);
    v88 = v114;
    if (v114 >= (unint64_t)HIDWORD(v114))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v88 = v114;
    }
    v12 = 0;
    v113[v88] = (uint64_t)v87;
    LODWORD(v114) = v114 + 1;
LABEL_84:
    if (v109 != v111 && v109)
      MEMORY[0x2348A0E84](v109, 0x1000C8077774924);
    sub_22EE1D880((uint64_t)v101);
LABEL_102:
    if (v106 != v108)
      free(v106);
    v5 = 1;
LABEL_105:
    if ((v12 | 4) == 4)
    {
      if (++v4 == v3)
      {
LABEL_147:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v89 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v113, v114, a2[5]);
        else
          v89 = (uint64_t)a2;
        goto LABEL_152;
      }
      continue;
    }
    break;
  }
  v89 = 1;
LABEL_152:
  if (v113 != v115)
    free(v113);
  return v89;
}

uint64_t sub_22EE1D44C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = sub_22EE0391C(a1);
    if (v10)
    {
      v11 = (unint64_t *)v10;
      v12 = *a1;
      if (v9 != v10 || *(_DWORD *)(v12 + 11992) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = *a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EE1F190((_QWORD **)a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20(*a1, *((unsigned int *)v5 + 4), *((unsigned int *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EE1D624(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22EE1F190(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22EE0ED40(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C(*a1, 0, *(unsigned int *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22EE1D6C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EE0391C(a1);
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(a2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(a2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(a2 + 36));
  }
  return a2;
}

uint64_t sub_22EE1D76C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v4 = *(_QWORD *)(*a2 + 12024);
  if (!v4)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_17;
  }
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 120);
    if (v5)
      break;
    if (!*(_BYTE *)(v4 + 113))
      goto LABEL_16;
    v4 = *(_QWORD *)(v4 + 104);
    if (!v4)
      goto LABEL_5;
  }
  v7 = (uint64_t *)a2[10];
  if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x3B)
  {
    v10 = *(_DWORD *)(v5 + 68);
  }
  else
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x26)
    {
      v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 32);
      v9 = v8 & 0x7FFF;
      v2 = HIWORD(v8);
      goto LABEL_12;
    }
    v10 = *(_DWORD *)(v5 + 64);
  }
  v9 = v10 & 0xFFFFF;
  v2 = v10 >> 20;
LABEL_12:
  LODWORD(v3) = *((_DWORD *)v7 + 20);
  if (v3 > v9
    || (v2 = v2,
        v11 = (_DWORD)v3 + *((_DWORD *)v7 + 2) + ~v9,
        v4 = *v7,
        v3 = *(_QWORD *)(v4 + 16 * v11 + 8),
        v3 <= v2))
  {
LABEL_16:
    v6 = 0;
    LODWORD(v4) = 0;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v4 + 16 * v11) + 24 * v2;
  LODWORD(v4) = *(_DWORD *)v12;
  if (!*(_DWORD *)v12)
    goto LABEL_5;
  LODWORD(v3) = *(_DWORD *)(v12 + 4);
  v6 = *(_QWORD *)(v12 + 8);
  v2 = *(_QWORD *)(v12 + 16);
  *(_DWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
LABEL_17:
  *(_DWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 12) = v3;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

__n128 sub_22EE1D880(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  v1 = *(_QWORD **)a1;
  v2 = *(_DWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 28);
  if (v2)
  {
    v4 = *(_QWORD *)(*v1 + 12024);
    if (v4)
    {
      while (1)
      {
        v5 = *(_QWORD *)(v4 + 120);
        if (v5)
          break;
        if (*(_BYTE *)(v4 + 113))
        {
          v4 = *(_QWORD *)(v4 + 104);
          if (v4)
            continue;
        }
        return result;
      }
      v6 = v1[10];
      if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x3B)
      {
        v10 = *(_DWORD *)(v5 + 68);
      }
      else
      {
        if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x26)
        {
          v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 48)
                                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 32);
          v8 = v7 & 0x7FFF;
          v9 = HIWORD(v7);
LABEL_13:
          v11 = *(_QWORD *)(*(_QWORD *)v6 + 16 * (*(_DWORD *)(v6 + 8) + *(_DWORD *)(v6 + 80) + ~v8))
              + 24 * v9;
          *(_DWORD *)v11 = v2;
          *(__n128 *)(v11 + 4) = result;
          *(_DWORD *)(v11 + 20) = v12;
          return result;
        }
        v10 = *(_DWORD *)(v5 + 64);
      }
      v8 = v10 & 0xFFFFF;
      v9 = v10 >> 20;
      goto LABEL_13;
    }
  }
  return result;
}

_QWORD *sub_22EE1D9AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  int v7;
  uint64_t v8;
  int v9;

  v5 = *(_QWORD *)a2;
  if (v5 >= 0x10)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
      return sub_22EE1DA30((uint64_t *)a1, v5, (unsigned int *)(a2 + 8), a3, 0, a4);
    v7 = *(_DWORD *)(a1 + 88);
    v8 = *(_QWORD *)a1;
    v9 = v7;
    sub_22EB522D8((uint64_t)&v8, v5);
  }
  return (_QWORD *)a2;
}

_QWORD *sub_22EE1DA30(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  unsigned __int32 v29;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  int64x2_t v43;
  _BYTE v44[32];
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _DWORD v48[66];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v42 = (uint64_t)v44;
  v43 = vdupq_n_s64(0x20uLL);
  v45 = 0;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v11 == 20)
  {
    v14 = *(_QWORD *)(a2 + 40);
    v16 = a3[4];
    v15 = a3[5];
    v17 = *a1;
    LODWORD(v46) = 0;
    v47 = v14;
    v48[2] = v16;
    v48[3] = v16;
    v40 = 0;
    sub_22ED66924(v17, 0, a6, v15, (uint64_t)&v46, a4, 0, &v40, 1);
    v18 = 0;
    v19 = v40;
    if (v40 < 8)
      goto LABEL_22;
    v40 = a2;
    v41 = a3;
    v46 = v48;
    v47 = 0x800000000;
    v48[64] = a3[6];
    v48[65] = a3[7];
    v20 = 0;
    if ((sub_22EE1ECD4((uint64_t)a1, (uint64_t)&v40, 0, (uint64_t)&v40, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v19 & 6) == 0 && (v19 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v20 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v40 + 16) >> 19), *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v46);
        sub_22EEB5360((uint64_t)&v42, v20, (8 * *(_DWORD *)(v20 + 20) + 32), 8);
        v32 = v31;
        *v31 = *v41;
        v34 = *(_QWORD *)(a6 + 8);
        v33 = (uint64_t *)(a6 + 8);
        if (!v34 || !sub_22F0ABC50(v33, *(_QWORD *)(*a1 + 88)))
          v35 = 0;
        *((_QWORD *)v32 + 1) = v35;
        v36 = v41;
        v32[5] = v41[5];
        v32[4] = v36[4];
        v32[6] = v36[6];
        v32[7] = v36[7];
        if ((_DWORD)v47)
        {
          v37 = 0;
          v38 = v32 + 8;
          v39 = 32 * v47;
          do
          {
            *v38++ = *(_QWORD *)((char *)v46 + v37 + 24);
            v37 += 32;
          }
          while (v39 != v37);
        }
      }
      else
      {
        v21 = sub_22ED60904((_QWORD *)*a1, v19, v41[4], (uint64_t)&v46);
        v20 = v21;
        if (v21 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v42, v21, (8 * *(_DWORD *)(v21 + 20) + 16), 8);
          v23 = v41;
          v22[1] = v41[5];
          *v22 = v23[4];
          v22[2] = v23[6];
          v22[3] = v23[7];
          if ((_DWORD)v47)
          {
            v24 = 0;
            v25 = v22 + 4;
            v26 = 32 * v47;
            do
            {
              *v25++ = *(_QWORD *)((char *)v46 + v24 + 24);
              v24 += 32;
            }
            while (v26 != v24);
          }
        }
      }
    }
    if (v46 != v48)
      free(v46);
  }
  else
  {
    if (v11 == 46)
    {
      v12 = sub_22EE12674(a1, a6, *(_QWORD *)(a2 + 32), *a3, a4, a4, 1);
      if (v12 < 8)
      {
LABEL_18:
        v18 = 0;
        goto LABEL_22;
      }
      v13 = sub_22EE1DDFC((_QWORD **)a1, (uint64_t)&v42, a2, a3, v12);
    }
    else
    {
      v13 = sub_22EE03DE8(a1, &v42, a2, a3);
    }
    v20 = v13;
  }
  if (v20 < 0x10)
    goto LABEL_18;
  v27 = *(_QWORD *)(*a1 + 88);
  v28 = v43.i64[0] - v43.i64[1];
  v29 = v43.i32[0] - v43.i32[2];
  if (v43.i32[0] == v43.i32[2])
    v29 = sub_22F11598C(v20);
  v18 = (_QWORD *)sub_22E3CD3D4(v27 + 2032, v29 + 8, 3);
  *v18 = v20;
  memcpy(v18 + 1, (const void *)(v42 + v43.i64[1]), v28);
LABEL_22:
  if ((_BYTE *)v42 != v44 && v42)
    MEMORY[0x2348A0E84]();
  return v18;
}

unint64_t sub_22EE1DDFC(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v6 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v7 = v6;
  if (v6 >= 0x10)
  {
    v8 = 8 * *(_DWORD *)(v6 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v6, (v8 + 32), 8);
      *(_DWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 20) = a4[1];
      *(_DWORD *)(v9 + 16) = *a4;
      *(_DWORD *)(v9 + 24) = a4[2];
      *(_DWORD *)(v9 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v10 = 0;
        v11 = (_QWORD *)(v9 + 32);
        v12 = 32 * v20;
        do
        {
          *v11++ = *(_QWORD *)((char *)v19 + v10 + 24);
          v10 += 32;
        }
        while (v12 != v10);
      }
    }
    else
    {
      sub_22EEB5360(a2, v6, (v8 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v7;
}

uint64_t sub_22EE1E3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*(_QWORD *)a2, a3, *(_DWORD *)(a2 + 88), (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EE1E8A8(unsigned int *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) == 0)
        sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a2 + 8), a1[22]);
      v24 = sub_22EE0391C(a1);
      if (v24)
      {
        v25 = *(_QWORD *)v24;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v25;
        *(_QWORD *)(a3 + 24) = v24 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EE08DD4(a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      if (*(_DWORD *)a2 == 2)
        v11 = *(_QWORD *)(a2 + 16);
      else
        v11 = 0;
      if (v11)
      {
        v12 = sub_22EE130A0(a1, a1[22], v11);
        if (!v12)
          return 1;
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v8 && v11 == v12)
      {
        v4 = 0;
        v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v31;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_50:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v12;
        goto LABEL_50;
      }
      v32 = *(_QWORD *)(*(_QWORD *)a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v32, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v26 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v27 = *(_QWORD *)(v26 + 8);
      if (*(_QWORD *)v26)
      {
        v28 = sub_22EE11C74((int)a1, *(_QWORD *)v26, *(void **)(v26 + 8));
        if (!v28)
          return v4;
        v30 = v28;
        v27 = v29;
      }
      else
      {
        v30 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v30, v27);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EE12674((uint64_t *)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, v33, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v30;
        *(_QWORD *)(v39 + 8) = v27;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *(_QWORD *)a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EE0ED40(a1, v21);
      v23 = sub_22EB51A84(*(_QWORD *)a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

uint64_t sub_22EE1ECD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EE1F190(_QWORD **a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD v18[3];
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EE11C74((int)a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24));
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EE12458((unint64_t)a1, (uint64_t *)(v6 + 32), (uint64_t)v18);
  if (!v18[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EE0E8DC(a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68), v19) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540(a1, v10, v11, v12, (uint64_t)v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*((_DWORD *)*a1 + 2998) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540(a1, v10, v11, v12, (uint64_t)v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EE1F364(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EE0391C((uint64_t)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22EE0ED40(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EE1F428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EE1F434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EE1F440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EE1F44C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EE1F458()
{
  JUMPOUT(0x22EE1F460);
}

uint64_t sub_22EE1F474(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  void **v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  void *v32[2];
  void *v33[2];
  _QWORD v34[32];
  uint64_t v35;
  uint64_t v36;

  v2 = a2;
  v36 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22EE11C74((int)a1, v4, *(void **)(v2 + 40));
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(v2 + 16);
  v10 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 4), *(_QWORD *)(v2 + 16));
  if (!v10)
    return 1;
  v11 = v10;
  v12 = *(unsigned int *)v2;
  v13 = v2 + 32;
  if ((v12 & 0x100000) != 0)
    v14 = (uint64_t *)(v2 + 32 + 16 * ((v12 >> 18) & 1));
  else
    v14 = (uint64_t *)(v2 + 16);
  v15 = *v14;
  if (*v14 != *(_QWORD *)(v2 + 16))
  {
    v16 = sub_22EE130A0(a1, *(unsigned int *)(v2 + 4), v15);
    if (v16)
    {
      v17 = v16;
      v15 = *v9;
      goto LABEL_14;
    }
    return 1;
  }
  v17 = v10;
LABEL_14:
  v18 = *(_DWORD *)(v2 + 4);
  v19 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)&v29 = *(_QWORD *)(v15 + 40);
  DWORD2(v29) = v18;
  v30 = v19;
  if ((_QWORD)v29)
  {
    sub_22EE12458((unint64_t)a1, (uint64_t *)&v29, (uint64_t)v33);
    v29 = *(_OWORD *)v33;
    v30 = v34[0];
    v20 = v33[0];
    if (!v33[0])
      return 1;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v21 & 0x40000) != 0)
    {
      v26 = *(_QWORD *)(v2 + 32);
      v27 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    if (v7 == v26 && v8 == v27 && v11 == *v9)
    {
      v28 = (_QWORD *)((v21 & 0x100000) != 0 ? v13 + 16 * ((v21 >> 18) & 1) : v2 + 16);
      if (v17 == *v28
        && v20 == *(void **)(v11 + 40)
        && ((v21 & 0x80000) == 0 || !*(_DWORD *)(v13 + 16 * ((v21 >> 18) & 1) + 8 * ((v21 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v33[0] = v34;
  v33[1] = (void *)0x800000000;
  v35 = 0;
  if ((v21 & 0x80000) == 0
    || (v22 = (_DWORD *)(v13 + 16 * ((v21 >> 18) & 1) + 8 * ((v21 >> 20) & 1)), !*v22))
  {
    v24 = 0;
LABEL_24:
    v31 = 0u;
    *(_OWORD *)v32 = 0u;
    sub_22E8ACE30((uint64_t)&v31, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v31, &v29, v11, v17, v24, 0);
    if (HIDWORD(v32[1]))
      free(v32[0]);
    goto LABEL_26;
  }
  v35 = *(_QWORD *)v22;
  v23 = &v22[4 * ((v21 >> 19) & 1)];
  v24 = v33;
  if ((sub_22EE0E8DC(a1, v23, &v23[8 * v22[3]], v33) & 1) == 0)
    goto LABEL_24;
  v2 = 1;
LABEL_26:
  if (v33[0] != v34)
    free(v33[0]);
  return v2;
}

uint64_t sub_22EE1F73C(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v25;
  int v26;

  v8 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 2)
  {
    v12 = a3;
    if (!sub_22EE37A18(*a1, a3, *(_QWORD *)(a4 + 16), a1[10], 0))
      return 1;
    v11 = *(_QWORD *)(a4 + 8);
LABEL_11:
    v9 = sub_22F3462D8(*a1, a4, v11, v12);
    v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_12;
  }
  if (v8 == 3)
  {
    v11 = *(_QWORD *)(a4 + 8);
    v12 = a3;
    goto LABEL_11;
  }
  if (v8 != 7)
  {
    v9 = (uint64_t)sub_22ED6A908((_QWORD *)*a1, a4, a3);
LABEL_15:
    v14 = 0;
    if ((v9 & 1) == 0)
      goto LABEL_16;
    return 1;
  }
  v9 = *(_QWORD *)(a4 + 8);
  if ((*(_DWORD *)v9 & 0x300) != 0x100)
    goto LABEL_15;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 45)
  {
    v14 = 1;
    if ((v9 & 1) != 0)
      return 1;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a2 + 81))
    v10 = (uint64_t *)(a2 + 16 * *(unsigned int *)(*a1 + 11992) + 88);
  else
    v10 = (uint64_t *)(a2 + 48);
  v21 = *v10;
  if (*(_BYTE *)(a2 + 80))
  {
    v22 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v22 + 16) == 36)
      v21 = *(_QWORD *)(v22 + 32);
  }
  v23 = sub_22EE08D2C(*a1, v21, a1[10], a3, *(_QWORD *)(a2 + 40));
  if (v23 < 0x10)
    return 1;
  v13 = v23 & 0xFFFFFFFFFFFFFFF0;
LABEL_12:
  v14 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 40;
  if ((v9 & 1) != 0)
    return 1;
LABEL_16:
  v15 = v9 & 0xFFFFFFFFFFFFFFFELL;
  v16 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(_DWORD *)v15 & 0x300;
  *(_BYTE *)v16 = -30;
  if (byte_255E04EB3)
  {
    v26 = v18;
    v25 = sub_22F0D3748(226);
    v18 = v26;
    ++*((_DWORD *)v25 + 2);
  }
  v19 = *(_DWORD *)v16 & 0xFFFC00FF | v18;
  v20 = 4;
  if (!v14)
    v20 = 0;
  *(_QWORD *)(v16 + 8) = v17;
  *(_QWORD *)(v16 + 16) = v20 | a2 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(v16 + 24) = v15;
  *(_DWORD *)v16 = v19;
  *(_DWORD *)(v16 + 4) = a3;
  *(_DWORD *)v16 = *(_DWORD *)v15 & 0x3E000 | v19;
  return v16;
}

uint64_t sub_22EE1F980(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  __int128 v7;
  void *v8[2];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a2 + 40);
  v10 = a3;
  sub_22EFC6D6C((uint64_t)&v11, v9);
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v5 = sub_22EB24A3C(a1, &v7, &v9, a2, 0, 0, 0);
  if (HIDWORD(v8[1]))
    free(v8[0]);
  return v5;
}

uint64_t sub_22EE1FA00(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  char *v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  unint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  size_t v100;
  unsigned __int32 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  char v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 *v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211[24];
  char v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  _DWORD *v219;
  void *v220;
  uint64_t v221;
  int v222[12];
  unsigned __int8 *v223;
  void *v224[2];
  _BYTE v225[32];
  _QWORD *v226;
  int64x2_t v227;
  _QWORD v228[5];
  void *v229;
  uint64_t v230;
  _BYTE v231[352];
  unsigned __int8 *v232;
  __int128 v233;
  _BYTE v234[16];
  char v235;
  void *v236[2];
  _BYTE v237[32];
  unint64_t *v238;
  uint64_t v239;
  _QWORD v240[6];

  v2 = a2;
  v240[4] = *MEMORY[0x24BDAC8D0];
  v4 = v231;
  v229 = v231;
  v230 = 0x400000000;
  v5 = sub_22F3C65DC(a2);
  v6 = v5 - sub_22F3C64D0(v2);
  v7 = v6 >> 4;
  v8 = 0;
  v210 = v2;
  if (v6 >> 4)
  {
    if (v7 >= v230)
    {
      if (v7 <= HIDWORD(v230))
      {
        v11 = (char *)v229;
      }
      else
      {
        v220 = 0;
        v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v4 = v231;
        if (v229 != v231)
          free(v229);
        v229 = v11;
        HIDWORD(v230) = (_DWORD)v220;
        v8 = v230;
      }
      if (v7 != v8)
      {
        v12 = &v11[88 * v8];
        do
        {
          *(_OWORD *)v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *((_QWORD *)v12 + 10) = 0;
          *((_OWORD *)v12 + 3) = 0uLL;
          *((_OWORD *)v12 + 4) = 0uLL;
          *((_OWORD *)v12 + 2) = 0uLL;
          *((_QWORD *)v12 + 1) = v12 + 24;
          *((_DWORD *)v12 + 5) = 4;
          v12 += 88;
        }
        while (v12 != &v11[88 * v7]);
      }
    }
    else
    {
      v9 = (void **)((char *)v229 - 80);
      v10 = 88 * v7;
      do
      {
        if (v9 + 2 != *v9)
          free(*v9);
        v9 -= 11;
        v10 += 88;
      }
      while (v10);
    }
    LODWORD(v230) = (unint64_t)v6 >> 4;
  }
  v236[0] = 0;
  v236[0] = (void *)sub_22F3C64D0(v2);
  v13 = (_QWORD *)sub_22F3C650C(v2);
  v14 = v236[0];
  if (v236[0] != v13)
  {
    v15 = v13;
    do
    {
      if (sub_22F3C6428(v2, v14))
      {
        v16 = v236[0];
        v17 = sub_22F3C64D0(v2);
        v18 = (char *)v229 + 88 * (((uint64_t)v16 - v17) >> 4);
        v232 = 0;
        v19 = (unsigned __int8 *)(*(_QWORD *)v236[0] & 0xFFFFFFFFFFFFFFF8);
        v232 = v19;
        v226 = a1;
        v227.i64[0] = (uint64_t)&v232;
        v227.i64[1] = (uint64_t)v18;
        v228[0] = v236;
        if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v19 + 6) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v20 = *((_QWORD *)v19 + 7);
          v21 = v20 & 0xFFFFFFFFFFFFFFF8;
          if ((v20 & 4) != 0)
            v21 = *(_QWORD *)(v21 + 32);
          v22 = *(_QWORD *)v21;
          v220 = v222;
          v221 = 0x200000000;
          v23 = *a1;
          v24 = sub_22EFBC5B4((uint64_t)v19);
          v215 = 7;
          v216 = v24;
          sub_22EE7377C(v23, (uint64_t)&v215, (uint64_t)&v220);
          LOBYTE(v218) = 1;
          LOBYTE(v213) = 0;
          LODWORD(v27) = *(_DWORD *)(v22 + 20);
          v25 = (_DWORD)v27 != 0;
          v26 = (_DWORD)v27 != 0;
          LODWORD(v27) = v27 - 1;
          if (v26)
            v27 = v27;
          else
            v27 = 0;
          v224[0] = (void *)(v27 | (v25 << 32));
          v28 = *(unsigned int *)(v21 + 8);
          v29 = sub_22EFBC5B4((uint64_t)v232);
          sub_22F0D4E74(v29);
          v31 = sub_22EE73A98((_QWORD *)*a1, v28, v30, (uint64_t)v220, v221, (uint64_t *)a1[10], &v218, &v213, (uint64_t)v224);
          if ((v31 & 1) == 0)
          {
            v32 = v218;
            if ((_BYTE)v218 && LODWORD(v224[0]))
            {
              v33 = v4;
              v34 = 0;
              do
              {
                v35 = *a1;
                v36 = *(_DWORD *)(*a1 + 11992);
                *(_DWORD *)(*a1 + 11992) = v34;
                sub_22EE21128((uint64_t)&v226);
                *(_DWORD *)(v35 + 11992) = v36;
                ++v34;
              }
              while (v34 != LODWORD(v224[0]));
              v32 = v218;
              v4 = v33;
              v2 = v210;
            }
            if (v32)
              v37 = v213 == 0;
            else
              v37 = 0;
            if (!v37)
            {
              sub_22EE1D76C((uint64_t)&v238, a1);
              sub_22EE21128((uint64_t)&v226);
              *v18 = *(_DWORD *)(v21 + 8);
              sub_22EE1D880((uint64_t)&v238);
            }
          }
          if (v220 != v222)
            free(v220);
          if ((v31 & 1) != 0)
          {
            v38 = 1;
            goto LABEL_44;
          }
        }
        else
        {
          sub_22EE21128((uint64_t)&v226);
        }
      }
      v14 = (char *)v236[0] + 16;
      v236[0] = v14;
    }
    while (v14 != v15);
  }
  v43 = sub_22F3090C8(*a1);
  v213 = *a1;
  LOBYTE(v214) = 1;
  v44 = sub_22F3C6624(v2);
  *(_QWORD *)(v43 + 1584) = sub_22EE21298(a1, v44);
  v45 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v46 = (uint64_t *)(v45 & 0xFFFFFFFFFFFFFFF8);
  if ((v45 & 4) != 0)
    v46 = (uint64_t *)v46[4];
  v209 = v43;
  v47 = *v46;
  if ((*v46 & 0xF) != 0)
  {
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v48 = v46 + 1;
    v49 = *(unsigned __int8 *)(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v49 == 26)
      v50 = v47;
    else
      v50 = 0;
    if (v49 == 26)
      v51 = v48;
    else
      v51 = 0;
  }
  v226 = v228;
  v227 = vdupq_n_s64(0x20uLL);
  v228[4] = 0;
  v224[0] = v225;
  v224[1] = (void *)0x400000000;
  v218 = v50;
  v219 = v51;
  v238 = v240;
  v239 = 0x400000000;
  v236[0] = v237;
  v236[1] = (void *)0x400000000;
  v232 = v234;
  v233 = xmmword_22F44E350;
  v235 = 0;
  v208 = (uint64_t)v4;
  if ((*(_BYTE *)(v50 + 23) & 0x10) != 0)
  {
    v56 = v50;
    v57 = v50;
    while (1)
    {
      if ((v57 & 0xF) != 0)
        goto LABEL_77;
      v58 = *(unsigned __int8 *)(*(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v58 > 0x39)
      {
LABEL_72:
        if (sub_22F115668(v57))
          v56 = v57;
        v57 = sub_22F115B7C(v57);
        if (!v57)
          goto LABEL_91;
      }
      else
      {
        if (v58 == 24)
          goto LABEL_90;
        if (v58 == 26)
        {
          if ((*(_BYTE *)(v57 + 23) & 0x10) != 0)
          {
LABEL_90:
            v56 = v57;
LABEL_91:
            v63 = sub_22F115668(v56);
            if (*(_BYTE *)(v218 + 16) == 25)
              v64 = 0;
            else
              v64 = (unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38);
            v65 = (uint64_t)(v219 + 4);
            v66 = v218 + 40;
            if ((*(_BYTE *)(v50 + 23) & 4) != 0)
              v67 = sub_22E47E270(v50);
            else
              v67 = 0;
            if ((sub_22EE0A8F4(a1, v63, v65, v64, v66, v67, (uint64_t)&v238, (uint64_t)v236, (uint64_t)&v232) & 1) != 0)
            {
              v55 = 0;
              v4 = (char *)v208;
              v2 = v210;
              goto LABEL_161;
            }
            v68 = *(_QWORD *)(v218 + 24);
            v69 = sub_22E47EE80(&v218);
            v59 = sub_22EE03DE8(a1, &v226, v68, v69);
            if (v59 >= 0x10)
              goto LABEL_109;
LABEL_100:
            v55 = 0;
            v4 = (char *)v208;
            v2 = v210;
            goto LABEL_161;
          }
        }
        else if (((1 << v58) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_72;
        }
LABEL_77:
        v57 = sub_22F115B7C(v57);
      }
    }
  }
  v52 = *(_QWORD *)(v50 + 24);
  v53 = sub_22E47EE80(&v218);
  v54 = sub_22EE03DE8(a1, &v226, v52, v53);
  if (v54 < 0x10)
    goto LABEL_65;
  v59 = v54;
  v60 = v218;
  for (i = v218; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_89;
      v62 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v62 <= 0x39)
        break;
LABEL_84:
      if (sub_22F115668(i))
        v60 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_102;
    }
    if (v62 == 24)
      goto LABEL_101;
    if (v62 == 26)
      break;
    if (((1 << v62) & 0x20000000200003CLL) == 0)
      goto LABEL_84;
LABEL_89:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_89;
LABEL_101:
  v60 = i;
LABEL_102:
  v70 = sub_22F115668(v60);
  if (*(_BYTE *)(v218 + 16) == 25)
    v71 = 0;
  else
    v71 = (unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38);
  v72 = (uint64_t)(v219 + 4);
  v73 = v218 + 40;
  if ((*(_BYTE *)(v50 + 23) & 4) != 0)
    v74 = sub_22E47E270(v50);
  else
    v74 = 0;
  if ((sub_22EE0A8F4(a1, v70, v72, v71, v73, v74, (uint64_t)&v238, (uint64_t)v236, (uint64_t)&v232) & 1) != 0)
    goto LABEL_100;
LABEL_109:
  sub_22E4913B4(v50, (uint64_t)&v220);
  v217 = 0;
  v75 = v50;
  v76 = v50;
  while (2)
  {
    while (2)
    {
      if ((v76 & 0xF) != 0)
        goto LABEL_120;
      v77 = *(unsigned __int8 *)(*(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v77 > 0x39)
      {
LABEL_115:
        if (sub_22F115668(v76))
          v75 = v76;
        v76 = sub_22F115B7C(v76);
        if (!v76)
          goto LABEL_122;
        continue;
      }
      break;
    }
    if (v77 == 24)
      break;
    if (v77 != 26)
    {
      if (((1 << v77) & 0x20000000200003CLL) != 0)
        goto LABEL_120;
      goto LABEL_115;
    }
    if ((*(_BYTE *)(v76 + 23) & 0x10) == 0)
    {
LABEL_120:
      v76 = sub_22F115B7C(v76);
      continue;
    }
    break;
  }
  v75 = v76;
LABEL_122:
  v78 = sub_22F115668(v75);
  if ((sub_22EE09844(a1, v78, v222, (uint64_t)v224, &v217) & 1) != 0)
  {
    v55 = 0;
    v4 = (char *)v208;
    v2 = v210;
    goto LABEL_161;
  }
  v4 = (char *)v208;
  v2 = v210;
  if (v235)
  {
    sub_22F24FB88(&v232, v239);
    if (v232)
    {
      v79 = v223;
      if (v223)
      {
        if (*(_BYTE *)(v218 + 16) == 25)
        {
          if (!(_DWORD)v239)
            goto LABEL_130;
        }
        else
        {
          v198 = (unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38);
          if (v198 == v239)
          {
            if (!(unsigned __int16)(*(_QWORD *)(v218 + 16) >> 38))
              goto LABEL_130;
            v199 = v232;
            while (*v79 == *v199)
            {
              ++v79;
              ++v199;
              if (!--v198)
                goto LABEL_130;
            }
          }
        }
      }
      v217 = 1;
LABEL_130:
      v223 = v232;
      goto LABEL_131;
    }
  }
  if (v223)
  {
    v217 = 1;
    v223 = 0;
  }
LABEL_131:
  if (*(_DWORD *)(*a1 + 11992) != -1)
  {
    v80 = v239;
    goto LABEL_141;
  }
  v80 = v239;
  if (v59 != *(_QWORD *)(v50 + 24)
    || (v81 = (unsigned __int16)(*(_QWORD *)(v50 + 16) >> 38), v81 != v239))
  {
LABEL_141:
    v55 = sub_22EE80544((_QWORD *)*a1, v59, v238, v80, *((unsigned int *)a1 + 22), a1[12], (uint64_t)&v220);
    if (v55 >= 0x10)
      goto LABEL_142;
LABEL_65:
    v55 = 0;
    goto LABEL_161;
  }
  v55 = v218;
  if ((unsigned __int16)(*(_QWORD *)(v50 + 16) >> 38))
  {
    v82 = (_QWORD *)(v50 + 40);
    v83 = v238;
    v84 = 8 * v81;
    while (*v82 == *v83)
    {
      ++v82;
      ++v83;
      v84 -= 8;
      if (!v84)
        goto LABEL_138;
    }
    goto LABEL_141;
  }
LABEL_138:
  if (v217)
    goto LABEL_141;
LABEL_142:
  v85 = sub_22E8BB094((uint64_t)&v226, v55);
  v87 = 0;
  v88 = v219;
  *v86 = *v219;
  v86[1] = v88[1];
  v86[2] = v88[2];
  if (v218)
  {
    v89 = 0;
    if (*(_BYTE *)(v218 + 16) == 26)
    {
      v90 = *(_QWORD *)(v218 + 16);
      if ((v90 & 0x3C0000000000000) != 0)
      {
        v91 = (unsigned __int16)(v90 >> 38);
        if (*(_QWORD *)(v218 + 16) == 25)
          v91 = 0;
        v89 = *(_QWORD *)&v88[2 * v91 + 4];
        v87 = v89 & 0xFFFFFFFF00000000;
        v89 = v89;
      }
      else
      {
        v87 = 0;
        v89 = 0;
      }
    }
  }
  else
  {
    v89 = 0;
  }
  if (v85)
  {
    if (*(_BYTE *)(v85 + 16) == 26)
    {
      v92 = *(_QWORD *)(v85 + 16);
      if ((v92 & 0x3C0000000000000) != 0)
      {
        v93 = v89 | v87;
        if (*(_QWORD *)(v85 + 16) == 25)
          v94 = 0;
        else
          v94 = (unsigned __int16)(v92 >> 38);
        *(_QWORD *)&v86[2 * v94 + 4] = v93;
        v88 = v219;
      }
    }
  }
  v86[3] = v88[3];
  if (*(_BYTE *)(v85 + 16) != 25)
  {
    v95 = *(_QWORD *)(v85 + 16);
    if ((v95 & 0x3FFFC000000000) != 0)
    {
      v96 = 0;
      v97 = (unsigned __int16)(v95 >> 38);
      do
      {
        *(_QWORD *)&v86[2 * v96 + 4] = *((_QWORD *)v236[0] + v96);
        ++v96;
      }
      while (v97 != v96);
    }
  }
LABEL_161:
  if (v232 != v234)
    free(v232);
  if (v236[0] != v237)
    free(v236[0]);
  if (v238 != v240)
    free(v238);
  if (v55 >= 0x10)
  {
    v99 = *(_QWORD *)(*a1 + 88);
    v100 = v227.i64[0] - v227.i64[1];
    v101 = v227.i32[0] - v227.i32[2];
    if (v227.i32[0] == v227.i32[2])
      v101 = sub_22F11598C(v55);
    v98 = (unint64_t *)sub_22E3CD3D4(v99 + 2032, v101 + 8, 3);
    *v98 = v55;
    memcpy(v98 + 1, (char *)v226 + v227.i64[1], v100);
  }
  else
  {
    v98 = 0;
  }
  if (v224[0] != v225)
    free(v224[0]);
  if (v226 != v228 && v226)
    MEMORY[0x2348A0E84]();
  if (v55 < 0x10)
  {
    v38 = 1;
    goto LABEL_291;
  }
  v102 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v102 & 4) != 0 && (v103 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v104 = sub_22EE0ED40(a1, v103);
  else
    v104 = 0;
  v105 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v105 > 3 || v105 == 2)
    goto LABEL_210;
  v107 = *(_QWORD *)(*a1 + 216);
  v108 = *(_WORD *)(v107 + 8) & 0x7F;
  if (v108 == 16 || v108 == 83)
    goto LABEL_211;
  v109 = -40;
  if ((*(_WORD *)(v107 + 8) & 0x7Fu) > 0x46)
  {
    if (v108 == 71)
    {
      v109 = -56;
    }
    else if (v108 != 81)
    {
LABEL_202:
      if (v108 - 52 < 6)
      {
        v109 = -72;
      }
      else
      {
        v109 = -48;
        if (v108 - 33 < 5)
          v109 = -64;
      }
    }
  }
  else
  {
    if (v108 > 0x18)
      goto LABEL_201;
    if (((1 << v108) & 0x1066) == 0)
    {
      if (v108 == 24)
      {
        v109 = -48;
      }
      else
      {
LABEL_201:
        if (v108 != 70)
          goto LABEL_202;
        v109 = -64;
      }
    }
  }
  v110 = *(_QWORD *)(v107 + v109 + 16);
  v111 = (_QWORD *)(v110 & 0xFFFFFFFFFFFFFFF8);
  if ((v110 & 4) != 0)
    v111 = (_QWORD *)*v111;
  if ((sub_22EFC7ADC((unint64_t)v111) & 1) == 0)
LABEL_211:
    v112 = 2;
  else
LABEL_210:
    v112 = 0;
  v113 = sub_22F3C61E8(v2);
  v114 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v98, v112, (*(_DWORD *)v2 >> 18) & 3);
  v220 = v114;
  sub_22EE21394(a1, v113, (uint64_t *)&v220, 1);
  v115 = *a1;
  v116 = v2;
  v117 = *(_QWORD *)(v2 + 16);
  v118 = sub_22F3C6220(v116);
  v119 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v118 + 16))(v118) >> 32;
  if (*(_BYTE *)(*v98 + 16) == 25)
    v120 = 0;
  else
    v120 = (unsigned __int16)(*(_QWORD *)(*v98 + 16) >> 38);
  v121 = sub_22F3C6220(v210);
  v122 = (char *)sub_22F3366E8(v115, (uint64_t)v114, v117, v98, v119, v98 + 3, v120, *(_DWORD *)(v121 + 80) >> 30, v104 & 0xFFFFFFFFFFFFFFFELL);
  v123 = v209;
  *(_QWORD *)(v209 + 1488) = v122;
  v124 = sub_22F3C6220(v210);
  sub_22EE33A90(*a1, a1[10], v124, v122, 0, 0);
  v125 = sub_22F3C6220(v210);
  v220 = v122;
  sub_22EE21394(a1, v125, (uint64_t *)&v220, 1);
  v126 = *a1;
  v211[0] = 0;
  v212 = 0;
  v207 = (unint64_t)v122;
  sub_22EC52964(v126, v114, (uint64_t)v122, v211);
  if (v212)
    v212 = 0;
  v127 = *a1;
  v128 = (uint64_t)v122;
  v129 = v122 + 72;
  if (!v122)
    v129 = 0;
  v206 = *(_QWORD *)(v127 + 216);
  v130 = *(_QWORD *)(v127 + 3200);
  *(_QWORD *)(v127 + 3200) = 0;
  v202 = *(_QWORD *)(v127 + 10288);
  v203 = v130;
  v204 = *(_DWORD *)(v127 + 1944);
  v205 = *(_DWORD *)(v127 + 2192);
  *(_QWORD *)(v127 + 216) = v129;
  *(_DWORD *)(v127 + 1944) = *(_DWORD *)(v127 + 1904);
  *(_DWORD *)(v127 + 2192) = *(_DWORD *)(v127 + 1960);
  v131 = *(_QWORD *)(v210 + 16);
  v132 = (*(_DWORD *)v210 >> 18) & 3;
  v133 = *(_DWORD *)(v210 + 24);
  v134 = (*(_DWORD *)v210 >> 20) & 1;
  v135 = (*(_DWORD *)v210 >> 21) & 1;
  v136 = sub_22F3C66E8(v210);
  v137 = v134;
  v138 = v210;
  sub_22EC52B9C(v127, v209, v128, v131, v132, v133, v137, v135, v136);
  v139 = sub_22F3C64D0(v210);
  v140 = sub_22F3C650C(v210);
  if (v139 == v140)
  {
    *(_DWORD *)(v209 + 1508) = *(_DWORD *)(v209 + 1272);
    v141 = *a1;
    LODWORD(v238) = 6;
    v220 = 0;
    LODWORD(v236[0]) = 3;
    v226 = (_QWORD *)*(unsigned int *)(v141 + 1704);
    sub_22EB4DDB8(v141 + 3688, (int *)&v238, (int *)&v226, (__int16 *)(v141 + 1693), (uint64_t *)&v220, (int *)v236);
    v142 = *(unsigned int *)(v141 + 3696);
    v143 = v142 - 2;
    v144 = *(_QWORD *)(v141 + 3688);
    v145 = *(_DWORD *)(v144 + 576 * (v142 - 2));
    if (v145 == 5)
    {
      *(_BYTE *)(v144 + 576 * v142 - 4) = *(_BYTE *)(v144 + 576 * v143 + 572);
      v146 = 1;
      v4 = (char *)v208;
    }
    else
    {
      v4 = (char *)v208;
      if (v145 == 2)
      {
        *(_BYTE *)(v144 + 576 * v142 - 4) = 1;
        v146 = *(_BYTE *)(v144 + 576 * v143 + 573) != 0;
      }
      else
      {
        v146 = 0;
        *(_BYTE *)(v144 + 576 * v142 - 4) = 0;
      }
    }
    v147 = v144 + 576 * v142;
    *(_BYTE *)(v147 - 3) = v146;
    *(_WORD *)(v141 + 1693) = 0;
    if (*(_DWORD *)(v141 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v141 + 1776), (llvm::SmallPtrSetImplBase *)(v147 - 560));
      sub_22EAEAE08(v141 + 1840, (uint64_t *)(v147 - 496));
    }
    goto LABEL_284;
  }
  v148 = v140;
  v149 = 0;
  while (2)
  {
    v150 = *(_QWORD *)v139;
    if ((*(_QWORD *)v139 & 1) == 0)
    {
      if ((v150 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v139 + 8), 1, 1, 0, (v150 >> 1) & 1);
        goto LABEL_230;
      }
      if (v150 < 4)
      {
LABEL_230:
        v139 += 16;
        if (v139 == v148)
          break;
        continue;
      }
      if (sub_22F3C6428(v138, (_QWORD *)v139))
      {
        v164 = sub_22F3C64D0(v138);
        v165 = *(_QWORD *)v139 & 0xFFFFFFFFFFFFFFF8;
        v220 = v222;
        v221 = 0x400000000;
        v201 = (char *)v229 + 88 * ((v139 - v164) >> 4);
        v166 = *((unsigned int *)v201 + 4);
        if ((_DWORD)v166)
        {
          v167 = (_QWORD *)*((_QWORD *)v201 + 1);
          v200 = &v167[2 * v166];
          while ((*v167 & 1) == 0)
          {
            v168 = v167[1];
            if (v168 < 0x10)
              break;
            v169 = *(_QWORD *)(v165 + 40);
            v170 = (v169 & 7) != 0 ? 0 : v169 & 0xFFFFFFFFFFFFFFF8;
            v171 = sub_22EC5313C(*a1, *(_DWORD *)(v165 + 24), v168, *(_DWORD *)v201, v170, (*(_BYTE *)(v165 + 96) >> 5) & 3, *v167 & 0xFFFFFFFFFFFFFFFELL);
            if (!v171)
              break;
            v172 = v171;
            v173 = v221;
            if (v221 >= (unint64_t)HIDWORD(v221))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v173 = v221;
            }
            *((_QWORD *)v220 + v173) = v172;
            LODWORD(v221) = v221 + 1;
            sub_22F336D2C(*a1, v123, v172);
            v167 += 2;
            if (v167 == v200)
              goto LABEL_272;
          }
LABEL_292:
          if (v220 != v222)
            free(v220);
          *(_DWORD *)(v123 + 1508) = *(_DWORD *)(v123 + 1272);
          v191 = *a1;
          LODWORD(v238) = 6;
          v220 = 0;
          LODWORD(v236[0]) = 3;
          v226 = (_QWORD *)*(unsigned int *)(v191 + 1704);
          sub_22EB4DDB8(v191 + 3688, (int *)&v238, (int *)&v226, (__int16 *)(v191 + 1693), (uint64_t *)&v220, (int *)v236);
          v192 = *(unsigned int *)(v191 + 3696);
          v193 = v192 - 2;
          v194 = *(_QWORD *)(v191 + 3688);
          v195 = *(_DWORD *)(v194 + 576 * (v192 - 2));
          v4 = (char *)v208;
          if (v195 == 5)
          {
            *(_BYTE *)(v194 + 576 * v192 - 4) = *(_BYTE *)(v194 + 576 * v193 + 572);
            v196 = 1;
          }
          else if (v195 == 2)
          {
            *(_BYTE *)(v194 + 576 * v192 - 4) = 1;
            v196 = *(_BYTE *)(v194 + 576 * v193 + 573) != 0;
          }
          else
          {
            v196 = 0;
            *(_BYTE *)(v194 + 576 * v192 - 4) = 0;
          }
          v197 = v194 + 576 * v192;
          *(_BYTE *)(v197 - 3) = v196;
          *(_WORD *)(v191 + 1693) = 0;
          if (*(_DWORD *)(v191 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v191 + 1776), (llvm::SmallPtrSetImplBase *)(v197 - 560));
            sub_22EAEAE08(v191 + 1840, (uint64_t *)(v197 - 496));
          }
LABEL_283:
          LOBYTE(v214) = 0;
          goto LABEL_288;
        }
LABEL_272:
        if ((v149 & 1) != 0)
          goto LABEL_292;
        sub_22EE21394(a1, v165, (uint64_t *)v220, v221);
        if (v220 != v222)
          free(v220);
        v149 = 0;
        goto LABEL_230;
      }
      v151 = *(_QWORD *)v139;
      if ((*(_QWORD *)v139 & 2) != 0)
        v152 = 1;
      else
        v152 = 2;
      if ((*(_QWORD *)v139 & 0xFFFFFFFFFFFFFFFCLL) == 4)
        v153 = 2;
      else
        v153 = v152;
      if (v151 < 4)
        v153 = 2;
      if ((v151 & 1) != 0)
        v154 = 0;
      else
        v154 = v153;
      v155 = *(unsigned int *)(v139 + 12);
      if ((_DWORD)v155)
      {
        v156 = *(_DWORD *)(v139 + 8);
        v220 = (void *)(v151 & 0xFFFFFFFFFFFFFFF8 | 4);
        LODWORD(v221) = v156;
        LOBYTE(v238) = 0;
        LOBYTE(v236[0]) = 0;
        LOBYTE(v226) = 0;
        BYTE4(v226) = 0;
        if ((sub_22EE73A98((_QWORD *)*a1, v155, *(unsigned int *)(v139 + 8) | ((unint64_t)*(unsigned int *)(v139 + 8) << 32), (uint64_t)&v220, 1, (uint64_t *)a1[10], &v238, v236, (uint64_t)&v226) & 1) != 0)
        {
          v149 = 1;
LABEL_247:
          v123 = v209;
          v138 = v210;
          goto LABEL_230;
        }
        if ((_BYTE)v238)
        {
          if ((_DWORD)v226)
          {
            v158 = 0;
            v159 = *(_QWORD *)v139 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v160 = *a1;
              v161 = *(_DWORD *)(*a1 + 11992);
              *(_DWORD *)(*a1 + 11992) = v158;
              v162 = sub_22EE130A0(a1, *(unsigned int *)(v139 + 8), v159);
              if (v162)
                sub_22F32FC30(*a1, v162, *(_DWORD *)(v139 + 8), v154, 0);
              else
                v149 = 1;
              *(_DWORD *)(v160 + 11992) = v161;
              ++v158;
            }
            while (v158 != (_DWORD)v226);
          }
          goto LABEL_247;
        }
        v157 = *(_DWORD *)(v139 + 12);
        v151 = *(_QWORD *)v139;
      }
      else
      {
        v157 = 0;
      }
      v163 = sub_22EE130A0(a1, *(unsigned int *)(v139 + 8), v151 & 0xFFFFFFFFFFFFFFF8);
      if (v163 && (*(_BYTE *)(v163 + 28) & 0x80) == 0)
        sub_22F32FC30(*a1, v163, *(_DWORD *)(v139 + 8), v154, v157);
      else
        v149 = 1;
      goto LABEL_230;
    }
    break;
  }
  *(_DWORD *)(v123 + 1508) = *(_DWORD *)(v123 + 1272);
  v174 = *a1;
  LODWORD(v238) = 6;
  v220 = 0;
  LODWORD(v236[0]) = 3;
  v226 = (_QWORD *)*(unsigned int *)(v174 + 1704);
  sub_22EB4DDB8(v174 + 3688, (int *)&v238, (int *)&v226, (__int16 *)(v174 + 1693), (uint64_t *)&v220, (int *)v236);
  v175 = *(unsigned int *)(v174 + 3696);
  v176 = v175 - 2;
  v177 = *(_QWORD *)(v174 + 3688);
  v178 = *(_DWORD *)(v177 + 576 * (v175 - 2));
  if (v178 == 5)
  {
    *(_BYTE *)(v177 + 576 * v175 - 4) = *(_BYTE *)(v177 + 576 * v176 + 572);
    v179 = 1;
    v4 = (char *)v208;
  }
  else
  {
    v4 = (char *)v208;
    if (v178 == 2)
    {
      *(_BYTE *)(v177 + 576 * v175 - 4) = 1;
      v179 = *(_BYTE *)(v177 + 576 * v176 + 573) != 0;
    }
    else
    {
      v179 = 0;
      *(_BYTE *)(v177 + 576 * v175 - 4) = 0;
    }
  }
  v180 = v177 + 576 * v175;
  *(_BYTE *)(v180 - 3) = v179;
  *(_WORD *)(v174 + 1693) = 0;
  if (*(_DWORD *)(v174 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v174 + 1776), (llvm::SmallPtrSetImplBase *)(v180 - 560));
    sub_22EAEAE08(v174 + 1840, (uint64_t *)(v180 - 496));
  }
  v123 = v209;
  if ((v149 & 1) != 0)
    goto LABEL_283;
LABEL_284:
  sub_22F3C638C(v138);
  v186 = sub_22EE0E1E0(a1, *(unsigned __int16 **)(v138 + 8 * *(unsigned __int16 *)(v138 + 4) + 32), 0, v181, v182, v183, v184, v185);
  LOBYTE(v214) = 0;
  if ((v186 & 1) != 0)
  {
LABEL_288:
    if (v206)
    {
      *(_QWORD *)(v127 + 216) = v206;
      *(_QWORD *)(v127 + 3200) = v203;
      *(_QWORD *)(v127 + 10288) = v202;
      *(_DWORD *)(v127 + 1944) = v204;
      *(_DWORD *)(v127 + 2192) = v205;
    }
    v38 = 1;
    sub_22F336DD4(*a1, *(unsigned int *)(v138 + 16), 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v220, v123);
    sub_22EA30A38(*a1, v207, v186 & 0xFFFFFFFFFFFFFFFELL, 1);
    if (v206)
    {
      *(_QWORD *)(v127 + 216) = v206;
      *(_QWORD *)(v127 + 3200) = v203;
      *(_QWORD *)(v127 + 10288) = v202;
      *(_DWORD *)(v127 + 1944) = v204;
      *(_DWORD *)(v127 + 2192) = v205;
    }
    v187 = *a1;
    v188 = *(unsigned int *)(v138 + 16);
    sub_22F0D60E4(v186 & 0xFFFFFFFFFFFFFFFELL);
    sub_22EC54548(v187, v188, v189, (uint64_t)&v220);
    v38 = v190;
    sub_22F2F43D0((uint64_t)&v220);
  }
LABEL_291:
  sub_22F2F446C((uint64_t)&v213);
LABEL_44:
  v39 = (char *)v229;
  if ((_DWORD)v230)
  {
    v40 = 88 * v230;
    do
    {
      v41 = *(char **)&v39[v40 - 80];
      if (&v39[v40 - 64] != v41)
        free(v41);
      v40 -= 88;
    }
    while (v40);
    v39 = (char *)v229;
  }
  if (v39 != v4)
    free(v39);
  return v38;
}

unint64_t sub_22EE21128(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22EE11308(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

_DWORD *sub_22EE21298(_QWORD *a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v2 = (_DWORD *)a2;
  v20[8] = *MEMORY[0x24BDAC8D0];
  if (a2 && (*(_DWORD *)(a2 + 12) & 0x1FFFFFFF) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0)
      v4 = (_QWORD *)*v4;
    v5 = a1[10];
    v6 = *(_DWORD *)(*a1 + 11992);
    v8 = *a1;
    v9 = v8;
    v10 = v6;
    v11 = v4;
    v12 = v5;
    v13 = 0;
    v14 = 0;
    v15 = v17;
    v16 = 0x400000000;
    v18 = v20;
    v19 = 0x400000000;
    v2 = sub_22EE389A4(&v8, (int *)a2);
    if (v18 != v20)
      free(v18);
    if (v15 != v17)
      free(v15);
    *(_DWORD *)(v9 + 11992) = v10;
  }
  return v2;
}

unint64_t sub_22EE21394(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int i;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (sub_22EFC78D8(a2))
  {
    result = sub_22EE12F6C(*(_QWORD *)(*a1 + 12024), a2);
    if (a4)
    {
      v9 = 8 * a4;
      do
      {
        v10 = *a3++;
        result = sub_22EE0A720(*(_QWORD *)(*a1 + 12024), a2, v10);
        v9 -= 8;
      }
      while (v9);
    }
    return result;
  }
  v11 = *a3;
  v12 = *(_DWORD *)(*a3 + 28);
  if (*a3)
    v13 = (*(_DWORD *)(*a3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC;
  else
    v13 = 0;
  if (v13)
  {
    v14 = *(_WORD *)(v11 + 80) & 0x7F;
    v15 = -40;
    if (v14 > 0x46)
    {
      if (v14 == 83)
        goto LABEL_27;
      if (v14 == 71)
      {
        v15 = -56;
        goto LABEL_27;
      }
      if (v14 != 81)
      {
LABEL_22:
        v16 = v14 - 52;
        v13 = v14 - 33 >= 5;
        v17 = -48;
        if (!v13)
          v17 = -64;
        if (v16 >= 6)
          v15 = v17;
        else
          v15 = -72;
      }
    }
    else
    {
      if (v14 > 0x18)
        goto LABEL_21;
      if (v14 == 16)
      {
LABEL_14:
        v15 = -48;
        goto LABEL_27;
      }
      if (((1 << v14) & 0x1066) == 0)
      {
        if (v14 == 24)
          goto LABEL_14;
LABEL_21:
        if (v14 == 70)
        {
          v15 = -64;
          goto LABEL_27;
        }
        goto LABEL_22;
      }
    }
LABEL_27:
    v18 = *(_QWORD *)(v11 + 72 + v15 + 16);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0)
    {
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_31;
    }
    else if (!v19)
    {
      goto LABEL_31;
    }
    v20 = v19[8];
    if (!v20
      || ((*(unsigned __int16 *)(v20 + 8) | (*(unsigned __int8 *)(v20 + 10) << 16)) & 0x100000) == 0
      || (*(_QWORD *)(v11 + 40) & 7) != 6
      || *(_DWORD *)(*(_QWORD *)(v11 + 40) & 0xFFFFFFFFFFFFFFF8) != 42)
    {
      goto LABEL_31;
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 54 >= 4)
      v25 = 0;
    else
      v25 = a2;
    v26 = *a3;
    v27 = *(_QWORD *)(v11 + 144);
    if ((v27 & 6) == 0 && (v27 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v28 = *(_QWORD *)(v25 + 144);
      v29 = (_QWORD *)sub_22EFE9368(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v28 & 6) != 0)
        v30 = 0;
      else
        v30 = v28 & 0xFFFFFFFFFFFFFFF8;
      *v29 = v30 & 0xFFFFFFFFFFFFFFF8 | *v29 & 7;
      v11 = v26;
      goto LABEL_31;
    }
    v31 = v12 & 0x7F;
    v32 = v11;
    if (v31 != 83)
    {
      v33 = *(_QWORD *)(v11 + 16);
      v34 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 4) != 0)
        v34 = *(_QWORD *)v34;
      for (i = *(_WORD *)(v34 + 8) & 0x7F; i != 83; i = *(_WORD *)(v34 + 8) & 0x7F)
      {
        v36 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v36 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_72;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_71;
          if (i == 16)
            goto LABEL_65;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_78;
          if (i == 24)
          {
LABEL_65:
            v36 = -48;
          }
          else
          {
LABEL_71:
            if (i != 70)
            {
LABEL_72:
              v37 = i - 52;
              if ((i - 33) >= 5)
                v38 = -48;
              else
                v38 = -64;
              if (v37 >= 6)
                v36 = v38;
              else
                v36 = -72;
              goto LABEL_78;
            }
            v36 = -64;
          }
        }
LABEL_78:
        v39 = *(_QWORD *)(v34 + v36 + 16);
        v34 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 4) != 0)
          v34 = *(_QWORD *)v34;
      }
      v32 = v34 - 40;
    }
    v40 = sub_22E3CD3D4(*(_QWORD *)(v32 + 88) + 2032, 16, 3);
    *(_QWORD *)v40 = v25 & 0xFFFFFFFFFFFFFFF9;
    *(_DWORD *)(v40 + 8) = 0;
    v11 = v26;
    *(_QWORD *)(v26 + 144) = v40 & 0xFFFFFFFFFFFFFFF9 | 2;
  }
LABEL_31:
  result = sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v11);
  v21 = *(_DWORD *)(a2 + 28) & 0x7F;
  v22 = v21 > 0x39 || ((1 << v21) & 0x3F0003E01011066) == 0;
  if (!v22 || (v21 - 70 <= 0xD ? (v24 = ((1 << (v21 - 70)) & 0x2803) == 0) : (v24 = 1), !v24 || v21 - 19 <= 4))
  {
    v23 = sub_22EFCAE04(a2);
    return sub_22EE46108(*a1, v23, a1[10]);
  }
  return result;
}

uint64_t sub_22EE2173C(_QWORD **a1, unsigned __int8 *a2, char a3, uint64_t a4)
{
  unsigned __int8 *v5;
  _QWORD **v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;

  v5 = a2;
  v6 = a1;
  v7 = *a2;
  v8 = v7 == 211;
  if (v7 == 211)
    v9 = a2;
  else
    v9 = 0;
  v10 = v9 + 64;
  if (v8)
    v11 = v10;
  else
    v11 = a2 + 80;
  v12 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v12)
  {
    v13 = &v11[v12];
    v33 = v13;
    v14 = 1;
    while (1)
    {
      v15 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
      v16 = sub_22EE130A0(v6, *((unsigned int *)v5 + 6), v15);
      if (v16)
        break;
      if ((*(_DWORD *)(v15 + 28) & 0x7E) != 0x2E)
      {
        *(_DWORD *)a4 = 0;
        *(_DWORD *)(a4 + 16) = 0;
        v30 = *(_QWORD *)(a4 + 88);
        if (v30)
        {
          v31 = sub_22EC6CBD0(v30);
          MEMORY[0x2348A0E9C](v31, 0x10E0C409F09D3C3);
        }
        *(_BYTE *)(a4 + 165) = 0;
        result = 1;
        *(_QWORD *)(a4 + 88) = 0;
        *(_QWORD *)(a4 + 96) = 0;
        return result;
      }
LABEL_32:
      if (++v11 == v13)
        goto LABEL_36;
    }
    v38 = v16;
    if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x2D)
    {
      v17 = *(unsigned int *)(v16 + 56);
      if (!(_DWORD)v17)
      {
        v27 = 1;
LABEL_31:
        v14 &= v27;
        goto LABEL_32;
      }
      v18 = (uint64_t *)(v16 + 64);
      v19 = (uint64_t *)(v16 + 64 + 8 * v17);
    }
    else
    {
      v18 = &v38;
      v19 = &v39;
    }
    do
    {
      v20 = *v18;
      v21 = *(unsigned int *)(*v18 + 28);
      if (*v18)
        v22 = (*(_DWORD *)(*v18 + 28) & 0x7F) == 13;
      else
        v22 = 0;
      if (v22)
      {
        v24 = *(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v24)
        {
          v25 = *(_DWORD *)(a4 + 16);
          v26 = *(_DWORD *)(v24 + 28);
          do
          {
            if (v25 >= *(_DWORD *)(a4 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = *(_DWORD *)(a4 + 16);
            }
            *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v25) = (v26 >> 13) & 3 | v24;
            v25 = *(_DWORD *)(a4 + 16) + 1;
            *(_DWORD *)(a4 + 16) = v25;
            *(_DWORD *)a4 = 2;
            v24 = *(_QWORD *)(v24 + 72);
            if (!v24)
              break;
            v26 = *(_DWORD *)(v24 + 28);
          }
          while ((v26 & 0x7E) == 0x2E);
        }
      }
      else
      {
        v23 = *(unsigned int *)(a4 + 16);
        if (v23 >= *(unsigned int *)(a4 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v23 = *(unsigned int *)(a4 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v23) = (v21 >> 13) & 3 | v20;
        ++*(_DWORD *)(a4 + 16);
        *(_DWORD *)a4 = 2;
      }
      ++v18;
    }
    while (v18 != v19);
    v27 = 0;
    v6 = a1;
    v5 = a2;
    v13 = v33;
    goto LABEL_31;
  }
  v14 = 1;
LABEL_36:
  if ((v14 & 1) == 0 || (a3 & 1) != 0)
  {
    sub_22EC561E4(a4);
    return 0;
  }
  else
  {
    sub_22E8FCA40(*v6, *((_DWORD *)v5 + 6), 0x13F5u, 0, (uint64_t)&v38);
    v37 = *v5 == 212;
    v28 = sub_22E894E38((uint64_t)&v38, (unsigned __int8 *)&v37);
    v36 = *((_QWORD *)v5 + 2);
    sub_22E894538(v28, &v36);
    sub_22E903BEC((unsigned int *)&v38);
    return 1;
  }
}

uint64_t sub_22EE219F4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  _BYTE *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  char v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _BYTE *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  BOOL v81;
  unsigned __int8 v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  char v93;
  unint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  void *v127;
  void *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  _DWORD *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  _DWORD *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  void *v185;
  void *v186;
  char v187;
  int v188;
  int v189;
  uint64_t *v190;
  uint64_t v191;
  char v192;
  int v193;
  unsigned __int8 v194;
  char v195;
  unsigned int v196;
  uint64_t *v197;
  int32x2_t v198;
  char v199;
  __int128 v200[2];
  __int16 v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205[9];
  void *v206;
  uint64_t v207;
  _BYTE v208[32];
  void *v209;
  __int128 v210;
  _BYTE v211[24];
  void *v212[2];
  _BYTE v213[32];
  void *v214;
  uint64_t v215;
  _BYTE v216[32];
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  _BYTE v223[128];
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  void *v230;
  uint64_t v231;
  _BYTE v232[64];
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  _BYTE v237[96];
  char v238;
  void *v239;
  uint64_t v240;
  _BYTE v241[64];
  void *v242;
  __int128 v243;
  _DWORD v244[32];
  void *__src;
  __int128 __len;
  _QWORD v247[18];

  v3 = a1;
  v247[16] = *MEMORY[0x24BDAC8D0];
  v214 = v216;
  v215 = 0x400000000;
  v212[0] = v213;
  v212[1] = (void *)0x400000000;
  v209 = v211;
  v210 = xmmword_22F44E350;
  v211[16] = 0;
  v4 = *a1;
  LODWORD(v242) = 0;
  v217 = 0;
  LODWORD(v205[0]) = 3;
  __src = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, (int *)&v242, (int *)&__src, (__int16 *)(v4 + 1693), &v217, (int *)v205);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*v3 + 88);
  v12 = *(_QWORD *)(*v3 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *v3;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v181 = *v3;
  v182 = *(_QWORD *)(v16 + 216);
  v18 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v179 = *(_QWORD *)(v16 + 10288);
  v180 = v18;
  v177 = *(_DWORD *)(v16 + 2192);
  v178 = *(_DWORD *)(v16 + 1944);
  v176 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EE0A8F4(v3, *(_DWORD *)(a2 + 4), a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v212, (uint64_t)&v214, (uint64_t)&v209) & 1) != 0)
  {
    v183 = 1;
    v19 = v182;
    goto LABEL_273;
  }
  if ((_DWORD)v215)
  {
    v20 = (uint64_t *)v214;
    v21 = 8 * v215;
    do
    {
      v22 = *v20++;
      *(_QWORD *)(v22 + 16) = v176 & 0xFFFFFFFFFFFFFFFBLL;
      v21 -= 8;
    }
    while (v21);
  }
  v23 = v208;
  v206 = v208;
  v207 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v24)
  {
    v122 = 0;
LABEL_270:
    v183 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*v3 + 88), *(_DWORD *)(a2 + 4), v15, (uint64_t *)v214, v215, v23, v122, *(_DWORD *)(a2 + 32));
    goto LABEL_271;
  }
  v173 = v15;
  v174 = a2;
  v175 = v4;
  v25 = 0;
  v26 = (uint64_t *)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
  v27 = &v26[v24];
  v28 = v241;
  v183 = 1;
  v197 = v3;
  v190 = v27;
  while (1)
  {
    v29 = *v26;
    if (!v25)
      break;
    v25 = 1;
LABEL_178:
    v121 = v207;
    if (v207 >= (unint64_t)HIDWORD(v207))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v121 = v207;
    }
    *((_QWORD *)v206 + v121) = v29;
    v122 = (v207 + 1);
    LODWORD(v207) = v207 + 1;
    if (++v26 == v27)
    {
      v23 = (char *)v206;
      v15 = v173;
      if ((_DWORD)v122)
      {
        v168 = 0;
        v4 = v175;
        a2 = v174;
        do
        {
          v169 = *(_QWORD *)&v23[v168];
          if ((*(_DWORD *)v169 - 3) >= 0xFFFFFFFE)
          {
            v170 = *(_QWORD *)(v169 + 24);
            if (v170 >= 8 && (v170 & 4) == 0)
              *(_QWORD *)(*(_QWORD *)((v170 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v176 & 0xFFFFFFFFFFFFFFFBLL;
          }
          v168 += 8;
        }
        while (8 * v122 != v168);
      }
      else
      {
        v122 = 0;
        v4 = v175;
        a2 = v174;
      }
      goto LABEL_270;
    }
  }
  if (*(_DWORD *)v29)
  {
    v30 = *(_BYTE *)(v29 + 4);
    if (*(_DWORD *)v29 <= 2u)
    {
      v61 = *v3;
      if ((*(_BYTE *)(v29 + 4) & 1) != 0 || *(_DWORD *)(v61 + 11992) != -1)
      {
        v62 = (_BYTE *)(v61 + 10664);
        v63 = *(_DWORD *)(v61 + 8456);
        v195 = *(_BYTE *)(v61 + 11952);
        v192 = *(_BYTE *)(v61 + 10664);
        v64 = *(_DWORD *)(*(_QWORD *)(v61 + 104) + 180);
        sub_22EE03478(v61);
        if (!v66)
          *(_BYTE *)(v61 + 11952) = 1;
        *v62 = 0;
        v67 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL;
        if (*(_DWORD *)(v29 + 40) == 1)
        {
          v68 = v67 | 2;
          v3 = v197;
          goto LABEL_105;
        }
        sub_22F0D5A50(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL);
        v217 = 0;
        v218 = v74;
        v219 = 0;
        v220 = 0;
        v221 = v223;
        v222 = 0x400000000;
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v228 = 0;
        v229 = 0;
        v230 = v232;
        v231 = 0x800000000;
        v233 = 0;
        v234 = 0;
        v235 = v237;
        v236 = 0x400000000;
        v238 = 0;
        v239 = v28;
        v240 = 0x400000000;
        sub_22F0D5A50(v67);
        v75 = v28;
        v77 = v76;
        sub_22F0D4E74(v67);
        sub_22EE00E90(&v202, v61, 9, v77, v78, 0, 0, v79, 0, 0, (uint64_t)&v217);
        if ((_BYTE)v203)
        {
          sub_22EE014E4((int32x2_t *)&v202);
          v28 = v75;
          if (v239 != v75)
            free(v239);
          v80 = v235;
          v3 = v197;
          v81 = v235 == v237;
LABEL_112:
          v93 = v195;
          if (!v81)
            free(v80);
          if (v230 != v232)
            free(v230);
          sub_22E89277C(&v221);
          v49 = 0;
        }
        else
        {
          v85 = sub_22EE0ED40(v197, v67);
          if ((v85 & 1) != 0)
          {
            v28 = v241;
          }
          else
          {
            v28 = v241;
            if (*(_DWORD *)(v61 + 8456) <= v63)
            {
              v86 = *(_QWORD *)(*(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v87 = (*(_DWORD *)(v86 + 16) & 0xFE00000u) < 0x8180001 || v86 == 0;
              if (!v87 && *(_DWORD *)(v86 + 16) == 11)
                v85 = sub_22EB19A28(*v197);
            }
          }
          if ((v85 & 1) != 0 || *(_DWORD *)(v61 + 8456) > v63)
          {
            v103 = *v197;
            __src = v247;
            __len = xmmword_22F44E310;
            if (v219)
            {
              LODWORD(v242) = 0;
              v243 = 0uLL;
              v244[0] = 0;
              sub_22E9F6EB8((unint64_t)&v217, (uint64_t)&v242);
              sub_22E9F6F54((uint64_t)&v243, *(_QWORD *)(v103 + 104), &__src);
              v105 = (int)v242;
              if ((_QWORD)v243 && *((_QWORD *)&v243 + 1))
                sub_22E3BB10C(*((unint64_t *)&v243 + 1), v243);
              v104 = __len;
            }
            else
            {
              v104 = 0;
              v105 = v218;
            }
            v144 = (void *)sub_22E3CD3D4(*(_QWORD *)(v103 + 88) + 2032, v104, 3);
            v145 = v144;
            if ((_QWORD)__len)
              memmove(v144, __src, __len);
            v242 = v244;
            v243 = xmmword_22F44E310;
            sub_22F242C48((uint64_t)v205, (uint64_t)&v242);
            *(_QWORD *)&v200[0] = sub_22E8FCD8C(*(_QWORD *)(*v197 + 88), *(_QWORD *)(*v197 + 80));
            *((_QWORD *)&v200[0] + 1) = v146;
            sub_22F0D9044((_DWORD *)v67, (uint64_t)v205, 0, v200, 0, "\n", 1uLL, 0);
            v147 = (void *)sub_22E3CD3D4(*(_QWORD *)(v103 + 88) + 2032, v243, 3);
            v148 = v147;
            if ((_QWORD)v243)
              memmove(v147, v242, v243);
            v149 = sub_22E3CD3D4(*(_QWORD *)(v103 + 88) + 2032, 40, 3);
            v150 = v243;
            *(_QWORD *)v149 = v148;
            *(_QWORD *)(v149 + 8) = v150;
            *(_DWORD *)(v149 + 16) = v105;
            v151 = __len;
            *(_QWORD *)(v149 + 24) = v145;
            *(_QWORD *)(v149 + 32) = v151;
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v205);
            if (v242 != v244)
              free(v242);
            v3 = v197;
            if (__src != v247)
              free(__src);
            v68 = v149 | 2;
            v28 = v241;
          }
          else
          {
            v68 = v85 & 0xFFFFFFFFFFFFFFFCLL;
            v3 = v197;
          }
          sub_22EE014E4((int32x2_t *)&v202);
          if (v239 != v241)
            free(v239);
          if (v235 != v237)
            free(v235);
          if (v230 != v232)
            free(v230);
          sub_22E89277C(&v221);
LABEL_105:
          LOBYTE(v202) = 0;
          LOBYTE(v203) = 0;
          v89 = *(_QWORD *)(v29 + 24);
          if (v89 > 7)
          {
            v91 = v89 & 0xFFFFFFFFFFFFFFF8;
            if ((v89 & 4) != 0)
            {
              v90 = v91 | 4;
              v202 = v91 | 4;
              LOBYTE(v203) = 1;
              v28 = v241;
            }
            else
            {
              v92 = *(_DWORD *)v91;
              v217 = 0;
              v218 = v92;
              v219 = 0;
              v220 = 0;
              v221 = v223;
              v222 = 0x400000000;
              v224 = 0;
              v225 = 0;
              v226 = 0;
              v227 = 0;
              v228 = 0;
              v229 = 0;
              v230 = v232;
              v231 = 0x800000000;
              v233 = 0;
              v234 = 0;
              v235 = v237;
              v236 = 0x400000000;
              v238 = 0;
              v239 = v241;
              v240 = 0x400000000;
              sub_22EE00E90(&v198, *v3, 9, *(_DWORD *)v91, *(unsigned int *)v91 | ((unint64_t)*(unsigned int *)(v91 + 8) << 32), 0, 0, v65, 0, 0, (uint64_t)&v217);
              if (v199)
              {
                sub_22EE014E4(&v198);
                v28 = v241;
                if (v239 != v241)
                  free(v239);
                v80 = v235;
                v81 = v235 == v237;
                v27 = v190;
                goto LABEL_112;
              }
              v152 = sub_22EE21298(v3, v91);
              if (v152)
              {
                v155 = (uint64_t)v152;
                sub_22EE014E4(&v198);
                if ((_BYTE)v203)
                  LOBYTE(v203) = 0;
                sub_22F31A5DC(&v202, v155);
              }
              else
              {
                v153 = *v3;
                __src = v247;
                __len = xmmword_22F44E310;
                if (v219)
                {
                  LODWORD(v242) = 0;
                  v243 = 0uLL;
                  v244[0] = 0;
                  sub_22E9F6EB8((unint64_t)&v217, (uint64_t)&v242);
                  sub_22E9F6F54((uint64_t)&v243, *(_QWORD *)(v153 + 104), &__src);
                  v189 = (int)v242;
                  if ((_QWORD)v243 && *((_QWORD *)&v243 + 1))
                    sub_22E3BB10C(*((unint64_t *)&v243 + 1), v243);
                  v154 = __len;
                }
                else
                {
                  v154 = 0;
                  v189 = v218;
                }
                v156 = (void *)sub_22E3CD3D4(*(_QWORD *)(v153 + 88) + 2032, v154, 3);
                v157 = v156;
                if ((_QWORD)__len)
                  memmove(v156, __src, __len);
                v186 = v157;
                v242 = v244;
                v243 = xmmword_22F44E310;
                sub_22F242C48((uint64_t)v205, (uint64_t)&v242);
                v158 = *(_QWORD *)((*(_QWORD *)(v29 + 24) & 0xFFFFFFFFFFFFFFF8) + 16);
                v159 = *(_BYTE *)(v158 + 60);
                v160 = v158 + 80;
                if ((v159 & 4) == 0)
                  v160 = 0;
                v161 = *(_DWORD **)(v160 + 72);
                *(_QWORD *)&v200[0] = sub_22E8FCD8C(*(_QWORD *)(*v3 + 88), *(_QWORD *)(*v3 + 80));
                *((_QWORD *)&v200[0] + 1) = v162;
                sub_22F0D9044(v161, (uint64_t)v205, 0, v200, 0, "\n", 1uLL, 0);
                v163 = (void *)sub_22E3CD3D4(*(_QWORD *)(v153 + 88) + 2032, v243, 3);
                v164 = v163;
                if ((_QWORD)v243)
                  memmove(v163, v242, v243);
                v165 = sub_22E3CD3D4(*(_QWORD *)(v153 + 88) + 2032, 40, 3);
                v166 = v243;
                *(_QWORD *)v165 = v164;
                *(_QWORD *)(v165 + 8) = v166;
                *(_DWORD *)(v165 + 16) = v189;
                v167 = __len;
                *(_QWORD *)(v165 + 24) = v186;
                *(_QWORD *)(v165 + 32) = v167;
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v205);
                if (v242 != v244)
                  free(v242);
                v3 = v197;
                if (__src != v247)
                  free(__src);
                v202 = v165 & 0xFFFFFFFFFFFFFFF9 | 4;
              }
              LOBYTE(v203) = 1;
              sub_22EE014E4(&v198);
              v28 = v241;
              if (v239 != v241)
                free(v239);
              if (v235 != v237)
                free(v235);
              if (v230 != v232)
                free(v230);
              sub_22E89277C(&v221);
              v90 = v202;
            }
          }
          else
          {
            v90 = 0;
            v202 = 0;
            LOBYTE(v203) = 1;
          }
          v94 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          v95 = *(_DWORD *)v29;
          v96 = *(_DWORD *)(v29 + 16);
          v97 = *v3;
          if ((v68 & 2) != 0 || !v94)
            v98 = sub_22F332740(v97, v94, v95 == 1, v96, v90);
          else
            v98 = sub_22EBCF54C(v97, v94, v95 == 1, v96, v90);
          v49 = v98;
          v27 = v190;
          v93 = v195;
        }
        *(_DWORD *)(v61 + 8456) = v63;
        *(_BYTE *)(v61 + 11952) = v93;
        *v62 = v192;
        v99 = *(_QWORD *)(v61 + 104);
        if (*(_DWORD *)(v99 + 180) == 5)
          *(_BYTE *)(v99 + 170) = 1;
        if (v64)
          v100 = 3;
        else
          v100 = 0;
        *(_DWORD *)(v99 + 180) = v100;
        if (v49)
          goto LABEL_174;
        goto LABEL_256;
      }
    }
    else if ((*(_BYTE *)(v29 + 4) & 1) != 0 || *(_DWORD *)(*v3 + 11992) != -1)
    {
      v31 = *(_QWORD *)(v29 + 8);
      if ((v31 & 2) == 0)
      {
        v32 = *v3;
        v33 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        sub_22F0D5A50(v31 & 0xFFFFFFFFFFFFFFFCLL);
        v35 = v34;
        sub_22F0D4E74(v33);
        sub_22EE00E90(&v202, v32, 10, v35, v36, 0, 0, v37, 0, 0, 0);
        sub_22F0D5A50(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL);
        v217 = 0;
        v218 = v38;
        v219 = 0;
        v220 = 0;
        v221 = v223;
        v222 = 0x400000000;
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v227 = 0;
        v228 = 0;
        v229 = 0;
        v230 = v232;
        v231 = 0x800000000;
        v233 = 0;
        v234 = 0;
        v235 = v237;
        v236 = 0x400000000;
        v238 = 0;
        v239 = v241;
        v240 = 0x400000000;
        v39 = *v3;
        LODWORD(v205[0]) = 4;
        __src = 0;
        v242 = (void *)*(unsigned int *)(v39 + 1704);
        LODWORD(v200[0]) = 3;
        sub_22EB4DDB8(v39 + 3688, (int *)v205, (int *)&v242, (__int16 *)(v39 + 1693), (uint64_t *)&__src, (int *)v200);
        v40 = *(unsigned int *)(v39 + 3696);
        v41 = v40 - 2;
        v42 = *(_QWORD *)(v39 + 3688);
        v43 = *(_DWORD *)(v42 + 576 * (v40 - 2));
        if (v43 == 5)
        {
          *(_BYTE *)(v42 + 576 * v40 - 4) = *(_BYTE *)(v42 + 576 * v41 + 572);
          v44 = 1;
        }
        else if (v43 == 2)
        {
          *(_BYTE *)(v42 + 576 * v40 - 4) = 1;
          v44 = *(_BYTE *)(v42 + 576 * v41 + 573) != 0;
        }
        else
        {
          v44 = 0;
          *(_BYTE *)(v42 + 576 * v40 - 4) = 0;
        }
        v45 = v42 + 576 * v40;
        *(_BYTE *)(v45 - 3) = v44;
        *(_WORD *)(v39 + 1693) = 0;
        if (*(_DWORD *)(v39 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v39 + 1776), (llvm::SmallPtrSetImplBase *)(v45 - 560));
          sub_22EAEAE08(v39 + 1840, (uint64_t *)(v45 - 496));
        }
        v46 = *v3;
        v47 = (unsigned __int8 *)(*v3 + 10664);
        v48 = *(_DWORD *)(*v3 + 8456);
        v194 = v47[1288];
        v49 = *v47;
        v50 = *(_DWORD *)(*(_QWORD *)(v46 + 104) + 180);
        sub_22EE03478(v46);
        if (!v51)
          v47[1288] = 1;
        *v47 = 0;
        v52 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL;
        sub_22F0D5A50(v52);
        v54 = v53;
        sub_22F0D4E74(v52);
        sub_22EE00E90(&v198, v46, 9, v54, v55, 0, 0, v56, 0, 0, (uint64_t)&v217);
        if (v199)
        {
          v57 = v49;
          v191 = 0;
          v58 = 0;
          v49 = 0;
        }
        else
        {
          v57 = v49;
          v191 = sub_22EE0ED40(v197, *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL);
          if ((v191 & 1) != 0 || *(_DWORD *)(v46 + 8456) > v48)
          {
            v101 = *v197;
            __src = v247;
            __len = xmmword_22F44E310;
            if (v219)
            {
              LODWORD(v242) = 0;
              v243 = 0uLL;
              v244[0] = 0;
              sub_22E9F6EB8((unint64_t)&v217, (uint64_t)&v242);
              sub_22E9F6F54((uint64_t)&v243, *(_QWORD *)(v101 + 104), &__src);
              v188 = (int)v242;
              if ((_QWORD)v243 && *((_QWORD *)&v243 + 1))
                sub_22E3BB10C(*((unint64_t *)&v243 + 1), v243);
              v102 = __len;
            }
            else
            {
              v102 = 0;
              v188 = v218;
            }
            v135 = (void *)sub_22E3CD3D4(*(_QWORD *)(v101 + 88) + 2032, v102, 3);
            v136 = v135;
            if ((_QWORD)__len)
              memmove(v135, __src, __len);
            v185 = v136;
            v242 = v244;
            v243 = xmmword_22F44E310;
            sub_22F242C48((uint64_t)v205, (uint64_t)&v242);
            v137 = (_DWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFFCLL);
            *(_QWORD *)&v200[0] = sub_22E8FCD8C(*(_QWORD *)(*v197 + 88), *(_QWORD *)(*v197 + 80));
            *((_QWORD *)&v200[0] + 1) = v138;
            sub_22F0D9044(v137, (uint64_t)v205, 0, v200, 0, "\n", 1uLL, 0);
            v139 = (void *)sub_22E3CD3D4(*(_QWORD *)(v101 + 88) + 2032, v243, 3);
            v140 = v139;
            if ((_QWORD)v243)
              memmove(v139, v242, v243);
            v141 = sub_22E3CD3D4(*(_QWORD *)(v101 + 88) + 2032, 40, 3);
            v142 = v243;
            *(_QWORD *)v141 = v140;
            *(_QWORD *)(v141 + 8) = v142;
            *(_DWORD *)(v141 + 16) = v188;
            v143 = __len;
            *(_QWORD *)(v141 + 24) = v185;
            *(_QWORD *)(v141 + 32) = v143;
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v205);
            if (v242 != v244)
              free(v242);
            v82 = v194;
            if (__src != v247)
              free(__src);
            v49 = sub_22F332940(*v197, v141);
            v58 = 0;
LABEL_68:
            sub_22EE014E4(&v198);
            *(_DWORD *)(v46 + 8456) = v48;
            v47[1288] = v82;
            *v47 = v57;
            v83 = *(_QWORD *)(v46 + 104);
            if (*(_DWORD *)(v83 + 180) == 5)
              *(_BYTE *)(v83 + 170) = 1;
            if (v50)
              v84 = 3;
            else
              v84 = 0;
            *(_DWORD *)(v83 + 180) = v84;
            sub_22EB48E64(v39);
            v3 = v197;
            v27 = v190;
            if (v58)
              v49 = sub_22F3327E4(*v197, v191 & 0xFFFFFFFFFFFFFFFELL);
            v28 = v241;
            if (v239 != v241)
              free(v239);
            if (v235 != v237)
              free(v235);
            if (v230 != v232)
              free(v230);
            sub_22E89277C(&v221);
            sub_22EE014E4((int32x2_t *)&v202);
            if (v49)
              goto LABEL_174;
            goto LABEL_256;
          }
          v58 = 1;
        }
        v82 = v194;
        goto LABEL_68;
      }
      if (*(_DWORD *)(*v3 + 11992) != -1)
      {
        v60 = sub_22F332940(*v3, v31 & 0xFFFFFFFFFFFFFFFCLL);
        goto LABEL_59;
      }
    }
LABEL_175:
    v25 = (v30 & 1) == 0 && (v30 & 4) == 0;
    goto LABEL_178;
  }
  v30 = *(_BYTE *)(v29 + 4);
  v59 = *v3;
  if ((v30 & 1) == 0 && *(_DWORD *)(v59 + 11992) == -1)
    goto LABEL_175;
  if (*(_DWORD *)(v29 + 16) == 1)
  {
    if (*(_DWORD *)(v59 + 11992) != -1)
    {
      v60 = sub_22F332794(*v3, *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8);
LABEL_59:
      v49 = v60;
      goto LABEL_174;
    }
    goto LABEL_175;
  }
  v69 = (_BYTE *)(v59 + 10664);
  v196 = *(_DWORD *)(v59 + 8456);
  v187 = *(_BYTE *)(v59 + 11952);
  v184 = *(_BYTE *)(v59 + 10664);
  v193 = *(_DWORD *)(*(_QWORD *)(v59 + 104) + 180);
  sub_22EE03478(v59);
  if (!v70)
    *(_BYTE *)(v59 + 11952) = 1;
  *v69 = 0;
  v71 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8);
  v72 = v71;
  while (1)
  {
LABEL_46:
    if ((v72 & 0xF) != 0)
      goto LABEL_56;
    v73 = *(unsigned __int8 *)(*(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v73 <= 0x39)
      break;
LABEL_51:
    if (sub_22F115668(v72))
      v71 = v72;
    v72 = sub_22F115B7C(v72);
    if (!v72)
      goto LABEL_135;
  }
  if (v73 == 24)
    goto LABEL_134;
  if (v73 != 26)
  {
    if (((1 << v73) & 0x20000000200003CLL) != 0)
      goto LABEL_56;
    goto LABEL_51;
  }
  if ((*(_BYTE *)(v72 + 23) & 0x10) == 0)
  {
LABEL_56:
    v72 = sub_22F115B7C(v72);
    goto LABEL_46;
  }
LABEL_134:
  v71 = v72;
LABEL_135:
  v106 = sub_22F115668(v71);
  v217 = 0;
  v218 = v106;
  v219 = 0;
  v220 = 0;
  v221 = v223;
  v222 = 0x400000000;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v229 = 0;
  v230 = v232;
  v231 = 0x800000000;
  v233 = 0;
  v234 = 0;
  v235 = v237;
  v236 = 0x400000000;
  v238 = 0;
  v239 = v28;
  v240 = 0x400000000;
  v107 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8);
  v108 = v107;
  v109 = *v197;
  while (2)
  {
    while (2)
    {
      if ((v108 & 0xF) != 0)
        goto LABEL_146;
      v110 = *(unsigned __int8 *)(*(_QWORD *)(v108 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v110 > 0x39)
      {
LABEL_141:
        if (sub_22F115668(v108))
          v107 = v108;
        v108 = sub_22F115B7C(v108);
        if (!v108)
          goto LABEL_148;
        continue;
      }
      break;
    }
    if (v110 == 24)
      break;
    if (v110 != 26)
    {
      if (((1 << v110) & 0x20000000200003CLL) != 0)
        goto LABEL_146;
      goto LABEL_141;
    }
    if ((*(_BYTE *)(v108 + 23) & 0x10) == 0)
    {
LABEL_146:
      v108 = sub_22F115B7C(v108);
      continue;
    }
    break;
  }
  v107 = v108;
LABEL_148:
  v111 = sub_22F115668(v107);
  v112 = *(_QWORD *)(v29 + 8);
  v113 = *(void **)(v112 & 0xFFFFFFFFFFFFFFF8);
  __src = v113;
  *(_QWORD *)&__len = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
  v114 = (uint64_t)v113;
  while (2)
  {
    while (2)
    {
      if ((v114 & 0xF) != 0)
        goto LABEL_159;
      v115 = *(unsigned __int8 *)(*(_QWORD *)(v114 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v115 > 0x39)
      {
LABEL_154:
        if (sub_22F115668(v114))
          v113 = (void *)v114;
        v114 = sub_22F115B7C(v114);
        if (!v114)
          goto LABEL_161;
        continue;
      }
      break;
    }
    if (v115 == 24)
      break;
    if (v115 != 26)
    {
      if (((1 << v115) & 0x20000000200003CLL) != 0)
        goto LABEL_159;
      goto LABEL_154;
    }
    if ((*(_BYTE *)(v114 + 23) & 0x10) == 0)
    {
LABEL_159:
      v114 = sub_22F115B7C(v114);
      continue;
    }
    break;
  }
  v113 = (void *)v114;
LABEL_161:
  v116 = sub_22F115668((uint64_t)v113);
  v117 = sub_22F1167E8((uint64_t *)&__src);
  sub_22EE00E90(&v198, v109, 9, v111, v116 | ((unint64_t)v117 << 32), 0, 0, v118, 0, 0, (uint64_t)&v217);
  v49 = 0;
  v28 = v241;
  v3 = v197;
  if (!v199)
  {
    v123 = sub_22EE0391C(v197);
    if (v123 && *(_DWORD *)(v59 + 8456) <= v196)
    {
      v49 = sub_22F3325E4(*v197, v123);
    }
    else
    {
      v124 = *v197;
      __src = v247;
      __len = xmmword_22F44E310;
      if (v219)
      {
        LODWORD(v242) = 0;
        v243 = 0uLL;
        v244[0] = 0;
        sub_22E9F6EB8((unint64_t)&v217, (uint64_t)&v242);
        sub_22E9F6F54((uint64_t)&v243, *(_QWORD *)(v124 + 104), &__src);
        v126 = (int)v242;
        if ((_QWORD)v243 && *((_QWORD *)&v243 + 1))
          sub_22E3BB10C(*((unint64_t *)&v243 + 1), v243);
        v125 = __len;
      }
      else
      {
        v125 = 0;
        v126 = v218;
      }
      v127 = (void *)sub_22E3CD3D4(*(_QWORD *)(v124 + 88) + 2032, v125, 3);
      v128 = v127;
      if ((_QWORD)__len)
        memmove(v127, __src, __len);
      v242 = v244;
      v243 = xmmword_22F44E310;
      sub_22F242C48((uint64_t)v205, (uint64_t)&v242);
      v204 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8);
      v202 = sub_22E8FCD8C(*(_QWORD *)(*v197 + 88), *(_QWORD *)(*v197 + 80));
      v203 = v129;
      v201 = 257;
      sub_22F119558(&v204, v205, (uint64_t)&v202, (const void ***)v200, 0);
      v130 = (void *)sub_22E3CD3D4(*(_QWORD *)(v124 + 88) + 2032, v243, 3);
      v131 = v130;
      if ((_QWORD)v243)
        memmove(v130, v242, v243);
      v132 = sub_22E3CD3D4(*(_QWORD *)(v124 + 88) + 2032, 40, 3);
      v133 = v243;
      *(_QWORD *)v132 = v131;
      *(_QWORD *)(v132 + 8) = v133;
      *(_DWORD *)(v132 + 16) = v126;
      v134 = __len;
      *(_QWORD *)(v132 + 24) = v128;
      *(_QWORD *)(v132 + 32) = v134;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v205);
      if (v242 != v244)
        free(v242);
      if (__src != v247)
        free(__src);
      v49 = sub_22F332794(*v197, v132);
      v28 = v241;
    }
  }
  sub_22EE014E4(&v198);
  if (v239 != v241)
    free(v239);
  if (v235 != v237)
    free(v235);
  if (v230 != v232)
    free(v230);
  sub_22E89277C(&v221);
  *(_DWORD *)(v59 + 8456) = v196;
  *(_BYTE *)(v59 + 11952) = v187;
  *v69 = v184;
  v119 = *(_QWORD *)(v59 + 104);
  if (*(_DWORD *)(v119 + 180) == 5)
    *(_BYTE *)(v119 + 170) = 1;
  if (v193)
    v120 = 3;
  else
    v120 = 0;
  *(_DWORD *)(v119 + 180) = v120;
  v27 = v190;
  if (v49)
  {
LABEL_174:
    v30 = *(_BYTE *)(v49 + 4);
    v29 = v49;
    goto LABEL_175;
  }
LABEL_256:
  v4 = v175;
LABEL_271:
  v19 = v182;
  if (v206 != v208)
    free(v206);
LABEL_273:
  if (v19)
  {
    *(_QWORD *)(v181 + 216) = v19;
    *(_QWORD *)(v181 + 3200) = v180;
    *(_QWORD *)(v181 + 10288) = v179;
    *(_DWORD *)(v181 + 1944) = v178;
    *(_DWORD *)(v181 + 2192) = v177;
  }
  sub_22EB48E64(v4);
  if (v209 != v211)
    free(v209);
  if (v212[0] != v213)
    free(v212[0]);
  if (v214 != v216)
    free(v214);
  return v183;
}

uint64_t sub_22EE231F8(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EE0E1E0(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

unint64_t sub_22EE23460(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EE11C74(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EE23A88(_QWORD **a1, uint64_t a2)
{
  unint64_t v4;

  if (a2
    && *(_WORD *)(a2 + 32) == 369
    && (v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 48)) & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a2 + 48) != v4)
    && (sub_22EB25E50(*a1, v4) & 1) == 0)
  {
    return sub_22F389338((*a1)[11], *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), v4, (_OWORD *)a2);
  }
  else
  {
    return a2;
  }
}

unint64_t sub_22EE23B14(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 32);
  if (v8 >= 0x10 && (v8 & 0xF) == 0)
    v15 = *(_QWORD *)((char *)&unk_22F4995E8
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v15 = 1;
  v10 = sub_22EE03DE8(a1, a2, v8, ((unint64_t)a4 + v15 + 3) & -v15);
  v11 = 0;
  if (v10 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v10 == *(_QWORD *)(a3 + 32))
    {
      v11 = a3;
    }
    else
    {
      v11 = sub_22EE7E490(*a1, v10, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4);
      if (v11 < 0x10)
        return 0;
    }
    v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    if (!v12 || (*(_DWORD *)(v12 + 16) & 0xFE) != 0x28)
      sub_22F10CF48(v12);
    sub_22EEB5360(a2, v11, 4uLL, 4);
    *v13 = *a4;
  }
  return v11;
}

_QWORD *sub_22EE23C3C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F349030((uint64_t *)a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

unint64_t sub_22EE23CFC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v6;

  v6 = sub_22EE09E08(*a1, a2, a1[10], a3, a4, a5);
  if (v6 && (*(_DWORD *)(*(_QWORD *)(*a1 + 72) + 52) & 0x40000000) != 0)
    sub_22EA1D764(*a1, v6);
  return v6;
}

void sub_22EE23D54(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = MEMORY[0x24BED83D8] + 16;
  v15 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v4 = **a1;
  v6[0] = sub_22E8FCD8C(v3[11], v3[10]);
  v6[1] = v5;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v4 + 96))(v4, &v7, v6, 1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
}

uint64_t sub_22EE23E00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EE0ED40(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EE0ED40(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22EE0ED40(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EE24330(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22EE0ED40(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EE2452C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!sub_22EE0391C(a1))
      return 1;
    v5 = sub_22EACE428();
    if (!v5)
      return 1;
    v6 = v5;
    sub_22EFCCFA0(*(_QWORD *)(*a1 + 216), v5);
    sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), v4, v6);
    if ((*(_BYTE *)(v6 + 28) & 0x80) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (v6 || *(_DWORD *)(v8 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v9)
  {
    v10 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v8 + 88) + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v11 = sub_22F0D3748(4);
      ++*((_DWORD *)v11 + 2);
    }
    *(_DWORD *)(v2 + 8) = v10;
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 24) = v9;
  }
  return v2;
}

uint64_t sub_22EE24670(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE0E1E0(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EE24934(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EE24CD4(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EE2452C(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EE24ABC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EE08DD4(a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EE0E1E0(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EE24CD4(uint64_t *a1, uint64_t a2)
{
  return sub_22EE231F8(a1, a2, 0);
}

uint64_t sub_22EE24CDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE11308(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EE24D30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[6];
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  void *v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v10 = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  *(_QWORD *)&v32[0] = v9;
  v12 = 1;
  sub_22EE21394(a1, v11, (uint64_t *)v32, 1);
  *(_QWORD *)(v6 + 176) = v10;
  v13 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) == 0)
  {
    v14 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 40), 0);
    if ((v14 & 1) != 0)
      return 1;
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
      return 1;
    *(_DWORD *)(v6 + 8) &= ~0x20000u;
    *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v6 + 344) = v15;
    v16 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 16), 0);
    if ((v16 & 1) != 0)
      return 1;
    sub_22F31B0C0((uint64_t)v32, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
    if (!v38)
      goto LABEL_37;
    v18 = sub_22EE11308(a1, *(unsigned __int8 **)(a2 + 80), 0);
    if ((v18 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0)
                   + 17) & 4) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
        || (sub_22F31B2A0((uint64_t)v32) & 1) != 0)
      {
        goto LABEL_33;
      }
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 56);
      if (v19)
      {
        v20 = sub_22EE0E1E0(a1, v19, 0);
        if ((v20 & 1) != 0)
          goto LABEL_37;
        *((_QWORD *)&v33 + 1) = v20 & 0xFFFFFFFFFFFFFFFELL;
      }
      v21 = *(_QWORD *)(a2 + 48);
      if (v21)
      {
        v22 = sub_22EE0E1E0(a1, v21, 0);
        if ((v22 & 1) != 0)
          goto LABEL_37;
        *(_QWORD *)&v33 = v22 & 0xFFFFFFFFFFFFFFFELL;
      }
      v23 = *(_QWORD *)(a2 + 96);
      if (v23)
      {
        v24 = sub_22EE0E1E0(a1, v23, 0);
        if ((v24 & 1) != 0)
          goto LABEL_37;
        *(_QWORD *)&v36 = v24 & 0xFFFFFFFFFFFFFFFELL;
      }
      v25 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 64));
      if ((v25 & 1) == 0)
      {
        *(_QWORD *)&v34 = v25 & 0xFFFFFFFFFFFFFFFELL;
        v26 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 72));
        if ((v26 & 1) == 0)
        {
          *((_QWORD *)&v34 + 1) = v26 & 0xFFFFFFFFFFFFFFFELL;
          v27 = *(_QWORD *)(a2 + 88);
          if (!v27)
            goto LABEL_33;
          v28 = sub_22EE0E1E0(a1, v27, 0);
          if ((v28 & 1) == 0)
          {
            *((_QWORD *)&v35 + 1) = v28 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
            v31 = v37;
            v30[4] = v35;
            v30[5] = v36;
            v30[0] = v32[0];
            v30[1] = v32[1];
            v30[2] = v33;
            v30[3] = v34;
            v29 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v30);
            if (v29)
              v12 = v29;
            else
              v12 = 1;
LABEL_38:
            if (v39 != v40)
              free(v39);
            return v12;
          }
        }
      }
    }
LABEL_37:
    v12 = 1;
    goto LABEL_38;
  }
  return v12;
}

uint64_t sub_22EE2501C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unsigned int v19;
  unint64_t v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v6 = &v5[*(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v4)
      v5 = (uint64_t *)(a2 + 8);
    else
      v5 = 0;
    if (v4)
      v6 = (uint64_t *)(a2 + 16);
    else
      v6 = 0;
  }
  if (v5 == v6)
  {
    v14 = 0;
    v7 = 0;
LABEL_17:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v7 & 1) != 0)
    {
      v16 = *(_DWORD *)(a2 + 16);
      v15 = *(_DWORD *)(a2 + 20);
      v17 = sub_22EA2D7B4((_QWORD *)*a1, v20, v14);
      return sub_22ED2B2F8(*a1, v17, v16, v15);
    }
    else
    {
      return a2;
    }
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v9 = *v5;
      v10 = sub_22EE28380(a1, *v5);
      if (!v10)
        break;
      v11 = v10;
      v12 = v10 != v9;
      v13 = v19;
      if (v19 >= 4uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v19;
      }
      v20[v13] = v11;
      v7 |= v12;
      v14 = ++v19;
      if (++v5 == v6)
        goto LABEL_17;
    }
  }
  return v8;
}

uint64_t sub_22EE251B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EE25258(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EE283D8((uint64_t)&v22, a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EE2542C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE130A0(a1, *(unsigned int *)(*(_QWORD *)(a2 + 8) + 24), *(_QWORD *)(a2 + 8));
  if (v4)
    return sub_22F344258(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 16), v4);
  else
    return 1;
}

uint64_t sub_22EE2547C(uint64_t *a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EE0E1E0(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EE283D8((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EE0E1E0(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EE0E1E0(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EE257A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EE2581C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE11C74((int)a1, v4, *(void **)(a2 + 24));
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22EE12458((unint64_t)a1, (uint64_t *)&v21, (uint64_t)&v19);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_21;
      goto LABEL_19;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_19;
LABEL_21:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_25;
    case 3u:
      break;
    default:
LABEL_19:
      v13 = 1;
LABEL_25:
      v16 = sub_22EE24CD4(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22EE25A40(uint64_t a1, uint64_t a2)
{
  return sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EE25A4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25AB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25B24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25B90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25BFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25C6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25CD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25DB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25E1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25E88(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25EF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25F60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE25FCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26038(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE260A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26110(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE2617C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE261E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26254(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE262C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE2632C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26398(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26404(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26470(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE264DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26548(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE265B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26620(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE2668C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE266F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26764(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE267D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE2683C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE268A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26914(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26980(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE269EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26A58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26AC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26B30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26B9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26C08(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26C74(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26CE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26D4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26DB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26E24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26E90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26EFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26F68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE26FD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE27040(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE270AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE27118(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE27184(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE271F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE2725C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE272C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE27334(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE273A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE2740C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE27478(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EE284A0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EE274E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 32))
      {
LABEL_7:
        v7 = (uint64_t *)sub_22EE0391C(a1);
        if (!v7)
          return 1;
        v8 = (uint64_t)v7;
        v9 = *v7;
        goto LABEL_11;
      }
    }
    else if (v5 >= 8)
    {
      goto LABEL_7;
    }
    v10 = sub_22EE08DD4(a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_11:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v13 = sub_22EB001B8((_QWORD *)*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v13)
      return 1;
    v6 = v13;
    sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), v4, v13);
    goto LABEL_16;
  }
  v6 = 0;
LABEL_16:
  v14 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v14 & 1) == 0)
    return sub_22ED36AF8(*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v6, v14 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EE275EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EE27658(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE0E1E0(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EE2770C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE0ED40(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EE27784(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EE0E1E0(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EE0E1E0(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EE279AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EE27A18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EE27B0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE11308(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EE27B5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EE24CD4(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE27BC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE24CD4(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE27C10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EE24CD4(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EE27BC8(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EE27B5C(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EE27CC4(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EE0ED40(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EE0ED40(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EE0E1E0(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EE27ED4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE27F24(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EE0E1E0(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EE283D8((uint64_t)&v12, a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EE0E1E0(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EE2804C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  unsigned int v17;
  char *v18[2];

  v4 = a2;
  v18[1] = *(char **)MEMORY[0x24BDAC8D0];
  v17 = 0;
  v7 = (uint64_t *)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v8 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      v12 = sub_22EE23A88((_QWORD **)a1, *v7);
      v13 = v11 != v12;
      if (v12)
      {
        v14 = (char *)v12;
        v15 = v17;
        if (v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v17;
        }
        v18[v15] = v14;
        ++v17;
      }
      v8 |= v13;
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v8 = 0;
  }
  v9 = sub_22EE0E1E0(a1, *((_QWORD *)v4 + 1), a3);
  if ((v9 & 1) != 0)
    return 1;
  if ((*((_QWORD *)v4 + 1) != (v9 & 0xFFFFFFFFFFFFFFFELL)) | v8 & 1)
  {
    if (v17)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v18, v17, v9 & 0xFFFFFFFFFFFFFFFELL);
    return v9;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EE281D0(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_22EE0E1E0(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EE130A0(a1, *(unsigned int *)(*(_QWORD *)(a2 + 8) + 24), *(_QWORD *)(a2 + 8));
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EE28254(uint64_t *a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EE283D8((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EE0E1E0(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EE28380(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE43BF4(*a1, a2, *(_QWORD *)(*a1 + 216), a1[10]);
  if (v4)
    sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v4);
  return v4;
}

uint64_t sub_22EE283D8(uint64_t result, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;

  v9 = result;
  if (a4)
  {
    result = sub_22EE28380(a2, a4);
    if (!result)
    {
LABEL_3:
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_WORD *)(v9 + 16) = 1;
      *(_BYTE *)(v9 + 18) = 0;
      return result;
    }
    return sub_22F331C88(*a2, result, a3, a6, v9);
  }
  else if (a5)
  {
    result = sub_22EE0ED40(a2, a5);
    if ((result & 1) != 0)
      goto LABEL_3;
    return sub_22EB530EC(*a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 15) = 0;
  }
  return result;
}

uint64_t sub_22EE284A0(uint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = *(_DWORD **)(a2 + 24);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (unsigned int **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9[2];
      v12 = (unsigned int *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EE28BF8(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EE28D7C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EE28DC8(a1, v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EE28F40((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EE290C4((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EE29110((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EE2915C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EE292A8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EE293F4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EE29588((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EE295D4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EE2962C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EE29684((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EE296D4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EE29724((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EE29870((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EE298F4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EE29940((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EE29A8C((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EE29BE0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EE2A038((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EE2A084((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EE2A1DC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EE2A228(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EE2A27C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EE2A694((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EE2A7E0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EE2A974((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EE2AACC((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EE2AC24((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EE2ADB4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EE2B268(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EE2B2B4((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EE2B400(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EE2B44C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EE2B498((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EE2B4E4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EE2B530((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EE2B588(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EE2B5F0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EE2B63C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EE2B788((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EE2BBA8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EE2BBF4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EE2BC58((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EE2BDA4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EE2BDF0((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EE2BF88(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EE2C3A0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EE2C3EC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EE2C844((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EE2C890((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EE2C9E8((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EE2CB40(a1, (int *)v9);
LABEL_73:
          v9 = (unsigned int *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = *(unsigned int **)(a2 + 24);
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, *(_DWORD *)(a2 + 8));
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = *(_DWORD *)(a2 + 8);
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(*(_QWORD *)(a2 + 24)
                    + 8 * **(unsigned int **)(a2 + 24)
                    + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(*(_QWORD *)(a2 + 24)
                          + 8 * **(unsigned int **)(a2 + 24)
                          + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EE0E1E0(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(*(_DWORD *)(a2 + 8))
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  *(_QWORD *)&v28 = 0;
  DWORD2(v28) = 0;
  v29 = 0;
  v23 = *(_DWORD *)(a2 + 8);
  if (v23 == 9)
  {
    v28 = *(_OWORD *)(a2 + 32);
    v29 = *(_QWORD *)(a2 + 48);
    sub_22EE12458((unint64_t)a1, (uint64_t *)&v28, (uint64_t)&v26);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EE28BF8(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EE0ED40(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EE0ED40(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EE28D7C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE28DC8(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EE0ED40(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EE28F40(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EE0ED40(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EE0ED40(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EE290C4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE29110(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE2915C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EE292A8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EE293F4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EE0ED40(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EE0ED40(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE29588(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE295D4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EE0ED40(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2962C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE0ED40(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE29684(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE296D4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE29724(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE29870(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EE0ED40(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EE298F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE29940(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EE0ED40(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EE29A8C(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EE29BE0(_QWORD **a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _DWORD *v37;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  size_t __n[2];
  int v43[3];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  void *v47;
  uint64_t v48;
  _BYTE v49[128];
  __int128 v50;
  _QWORD v51[10];

  v51[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v43[0] = *(_DWORD *)a2;
  v43[1] = v6;
  v43[2] = v4;
  v47 = v49;
  v48 = 0x1000000000;
  v41 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v39 = 0;
  DWORD2(v39) = 0;
  v40 = 0;
  v44 = v46;
  v45 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EE0ED40(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_43;
      v10 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v48;
      }
      *((_QWORD *)v47 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v48) = v48 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE11C74((int)a1, v11, *(void **)(a2 + 48));
    if (!v12)
    {
LABEL_43:
      v37 = 0;
      goto LABEL_45;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v41, v14, v15);
  v39 = *(_OWORD *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v39)
  {
    sub_22EE12458((unint64_t)a1, (uint64_t *)&v39, (uint64_t)&v50);
    v39 = v50;
    v40 = v51[0];
    if (!(_QWORD)v50)
      goto LABEL_43;
  }
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v50 = v51;
        *((_QWORD *)&v50 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            sub_22EFF605C((uint64_t)v19);
            v29 = sub_22EE130A0(a1, v28, v27);
            v30 = *(unsigned int *)(v29 + 28);
            v25 = DWORD2(v50);
            if (DWORD2(v50) >= (unint64_t)HIDWORD(v50))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v50);
            }
            *(_QWORD *)(v50 + 8 * v25) = (v30 >> 13) & 3 | v29;
            LODWORD(v25) = ++DWORD2(v50);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v31 = (*a1)[11];
        v32 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v33 = (void *)sub_22E3CD3D4(v31 + 2032, LODWORD(__n[1]), 3);
            memcpy(v33, (const void *)__n[0], LODWORD(__n[1]));
            v32 = *((_QWORD *)&v41 + 1);
            LODWORD(v25) = DWORD2(v50);
          }
          else
          {
            v33 = (void *)__n[0];
          }
        }
        else
        {
          v33 = 0;
        }
        v35 = sub_22F0605AC(v31, 0, v32, (uint64_t)v33, (uint64_t)&v39, 1, (*v19 >> 20) & 1, (const void *)v50, v50 + 8 * v25);
        v36 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v36 = v45;
        }
        *((_QWORD *)v44 + v36) = v35;
        LODWORD(v45) = v45 + 1;
        if ((_QWORD *)v50 != v51)
          free((void *)v50);
      }
      else
      {
        v34 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v45;
        }
        *((_QWORD *)v44 + v34) = 0;
        LODWORD(v45) = v45 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v37 = sub_22ECA7F24(*a1, (int *)(a2 + 80), 2u, (int *)(a2 + 88), 2, (uint64_t)&v41, &v39, *(unsigned int *)(a2 + 96), (uint64_t)v47, v48, v43, (unsigned __int8 **)v44, v45);
LABEL_45:
  if (v44 != v46)
    free(v44);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v47 != v49)
    free(v47);
  return v37;
}

uint64_t sub_22EE2A038(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EE2A084(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EE2A1DC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2A228(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2A27C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  size_t __n[2];
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  void *v41[2];
  _QWORD v42[16];
  unsigned __int8 **v43;
  uint64_t v44;
  _QWORD v45[18];

  v45[16] = *MEMORY[0x24BDAC8D0];
  v43 = (unsigned __int8 **)v45;
  v44 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(a2 + 96);
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v44;
      }
      v43[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v44) = v44 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v36 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v36, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
    v34 = *(_OWORD *)(a2 + 72);
    v35 = *(_QWORD *)(a2 + 88);
    if (!(_QWORD)v34
      || (sub_22EE12458((unint64_t)a1, (uint64_t *)&v34, (uint64_t)v41), v34 = *(_OWORD *)v41, v35 = v42[0], v41[0]))
    {
      v41[0] = v42;
      v41[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v11)
      {
        v14 = (_DWORD **)(a2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v38 = v40;
            v39 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                sub_22EFF605C((uint64_t)v16);
                v26 = sub_22EE130A0(a1, v25, v24);
                v27 = *(unsigned int *)(v26 + 28);
                v22 = v39;
                if (v39 >= (unint64_t)HIDWORD(v39))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v39;
                }
                *((_QWORD *)v38 + v22) = (v27 >> 13) & 3 | v26;
                LODWORD(v22) = v39 + 1;
                LODWORD(v39) = v39 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v28 = *(_QWORD *)(*a1 + 88);
            v29 = *((_QWORD *)&v36 + 1);
            if (*((_QWORD *)&v36 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v30 = (void *)sub_22E3CD3D4(v28 + 2032, LODWORD(__n[1]), 3);
                memcpy(v30, (const void *)__n[0], LODWORD(__n[1]));
                v29 = *((_QWORD *)&v36 + 1);
                LODWORD(v22) = v39;
              }
              else
              {
                v30 = (void *)__n[0];
              }
            }
            else
            {
              v30 = 0;
            }
            v32 = sub_22F0605AC(v28, 0, v29, (uint64_t)v30, (uint64_t)&v34, 1, (*v16 >> 20) & 1, v38, (uint64_t)v38 + 8 * v22);
            v33 = LODWORD(v41[1]);
            if (LODWORD(v41[1]) >= (unint64_t)HIDWORD(v41[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v33 = LODWORD(v41[1]);
            }
            *((_QWORD *)v41[0] + v33) = v32;
            ++LODWORD(v41[1]);
            if (v38 != v40)
              free(v38);
          }
          else
          {
            v31 = LODWORD(v41[1]);
            if (LODWORD(v41[1]) >= (unint64_t)HIDWORD(v41[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v41[1]);
            }
            *((_QWORD *)v41[0] + v31) = 0;
            ++LODWORD(v41[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v41[0];
        v12 = LODWORD(v41[1]);
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v42;
      }
      v9 = sub_22F33F420(*a1, v43, v44, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 4), (uint64_t)&v36, (uint64_t)&v34, v13, v12);
      if (v41[0] != v42)
        free(v41[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v43 != v45)
    free(v43);
  return v9;
}

_DWORD *sub_22EE2A694(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE2A7E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EE0ED40(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EE2A974(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EE2AACC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE2AC24(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EE0ED40(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EE2ADB4(_QWORD **a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _DWORD *v37;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  size_t __n[2];
  int v49[3];
  void *v50;
  uint64_t v51;
  _BYTE v52[128];
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  __int128 v56;
  _QWORD v57[10];

  v57[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v49[0] = *(_DWORD *)a2;
  v49[1] = v6;
  v49[2] = v4;
  v53 = v55;
  v54 = 0x1000000000;
  v47 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v45 = 0;
  DWORD2(v45) = 0;
  v50 = v52;
  v51 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EE0ED40(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_43;
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v54) = v54 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE11C74((int)a1, v11, *(void **)(a2 + 48));
    if (!v12)
    {
LABEL_43:
      v37 = 0;
      goto LABEL_46;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v47, v14, v15);
  v45 = *(_OWORD *)(a2 + 56);
  v46 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v45)
  {
    sub_22EE12458((unint64_t)a1, (uint64_t *)&v45, (uint64_t)&v56);
    v45 = v56;
    v46 = v57[0];
    if (!(_QWORD)v56)
      goto LABEL_43;
  }
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v56 = v57;
        *((_QWORD *)&v56 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            sub_22EFF605C((uint64_t)v19);
            v29 = sub_22EE130A0(a1, v28, v27);
            v30 = *(unsigned int *)(v29 + 28);
            v25 = DWORD2(v56);
            if (DWORD2(v56) >= (unint64_t)HIDWORD(v56))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v56);
            }
            *(_QWORD *)(v56 + 8 * v25) = (v30 >> 13) & 3 | v29;
            LODWORD(v25) = ++DWORD2(v56);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v31 = (*a1)[11];
        v32 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v33 = (void *)sub_22E3CD3D4(v31 + 2032, LODWORD(__n[1]), 3);
            memcpy(v33, (const void *)__n[0], LODWORD(__n[1]));
            v32 = *((_QWORD *)&v47 + 1);
            LODWORD(v25) = DWORD2(v56);
          }
          else
          {
            v33 = (void *)__n[0];
          }
        }
        else
        {
          v33 = 0;
        }
        v35 = sub_22F0605AC(v31, 0, v32, (uint64_t)v33, (uint64_t)&v45, 1, (*v19 >> 20) & 1, (const void *)v56, v56 + 8 * v25);
        v36 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v36 = v51;
        }
        *((_QWORD *)v50 + v36) = v35;
        LODWORD(v51) = v51 + 1;
        if ((_QWORD *)v56 != v57)
          free((void *)v56);
      }
      else
      {
        v34 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v51;
        }
        *((_QWORD *)v50 + v34) = 0;
        LODWORD(v51) = v51 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v42 = v47;
  sub_22F0AB560(v43, (uint64_t)&v47 + 8);
  v40 = v45;
  v41 = v46;
  v37 = sub_22EC94100(*a1, a2 + 80, 5u, a2 + 100, 5, (uint64_t)&v42, &v40, *(_DWORD *)(a2 + 120), *(_BYTE *)(a2 + 124), v39, *(_DWORD *)(a2 + 128), *(unsigned int *)(a2 + 132), (uint64_t)v53, v54, v49, 0, (unsigned __int8 **)v50, v51);
  if (v44)
    free(v43[1]);
LABEL_46:
  if (v50 != v52)
    free(v50);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EE2B268(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE2B2B4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE2B400(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2B44C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2B498(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2B4E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2B530(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EE0ED40(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EE2B588(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EE2B5F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE2B63C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE2B788(_QWORD **a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD **v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  size_t __n[2];
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  void *v39[2];
  _QWORD v40[16];
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  v41 = v43;
  v42 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(a2 + 104);
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v42;
      if (v42 >= (unint64_t)HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v42;
      }
      v41[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v42) = v42 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v30 = 0;
  }
  else
  {
LABEL_9:
    v34 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v34, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
    v32 = *(_OWORD *)(a2 + 80);
    v33 = *(_QWORD *)(a2 + 96);
    if ((_QWORD)v32
      && (sub_22EE12458((unint64_t)a1, (uint64_t *)&v32, (uint64_t)v39), v32 = *(_OWORD *)v39,
                                                                              v33 = v40[0],
                                                                              !v39[0]))
    {
      v30 = 0;
    }
    else
    {
      v39[0] = v40;
      v39[1] = (void *)0x1000000000;
      v9 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v9)
      {
        v10 = (_DWORD **)(a2 + 104 + 8 * v9 + 8 * v9 + 8 * v9 + 8 * v9);
        v11 = &v10[v9];
        do
        {
          v12 = *v10;
          if (*v10)
          {
            v36 = v38;
            v37 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                sub_22EFF605C((uint64_t)v12);
                v22 = sub_22EE130A0(a1, v21, v20);
                v23 = *(unsigned int *)(v22 + 28);
                v18 = v37;
                if (v37 >= (unint64_t)HIDWORD(v37))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v37;
                }
                *((_QWORD *)v36 + v18) = (v23 >> 13) & 3 | v22;
                LODWORD(v18) = v37 + 1;
                LODWORD(v37) = v37 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v24 = (*a1)[11];
            v25 = *((_QWORD *)&v34 + 1);
            if (*((_QWORD *)&v34 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v34 + 1);
                LODWORD(v18) = v37;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v32, 1, (*v12 >> 20) & 1, v36, (uint64_t)v36 + 8 * v18);
            v29 = LODWORD(v39[1]);
            if (LODWORD(v39[1]) >= (unint64_t)HIDWORD(v39[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v39[1]);
            }
            *((_QWORD *)v39[0] + v29) = v28;
            ++LODWORD(v39[1]);
            if (v36 != v38)
              free(v36);
          }
          else
          {
            v27 = LODWORD(v39[1]);
            if (LODWORD(v39[1]) >= (unint64_t)HIDWORD(v39[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v39[1]);
            }
            *((_QWORD *)v39[0] + v27) = 0;
            ++LODWORD(v39[1]);
          }
          ++v10;
        }
        while (v10 != v11);
      }
      v30 = sub_22ECA41D4(*a1, (uint64_t)v41, v42, *(_DWORD *)(a2 + 48), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 4), (uint64_t)&v34, (uint64_t)&v32);
      if (v39[0] != v40)
        free(v39[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v41 != v43)
    free(v41);
  return v30;
}

uint64_t sub_22EE2BBA8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EE2BBF4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE2BC58(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EE2BDA4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EE2BDF0(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22EE0ED40(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EE2BF88(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  size_t __n[2];
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  void *v39[2];
  _QWORD v40[16];
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  v41 = v43;
  v42 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(a2 + 96);
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v42;
      if (v42 >= (unint64_t)HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v42;
      }
      v41[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v42) = v42 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v34 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v34, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
    v32 = *(_OWORD *)(a2 + 72);
    v33 = *(_QWORD *)(a2 + 88);
    if (!(_QWORD)v32
      || (sub_22EE12458((unint64_t)a1, (uint64_t *)&v32, (uint64_t)v39), v32 = *(_OWORD *)v39, v33 = v40[0], v39[0]))
    {
      v39[0] = v40;
      v39[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v11)
      {
        v12 = (_DWORD **)(a2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v36 = v38;
            v37 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                sub_22EFF605C((uint64_t)v14);
                v24 = sub_22EE130A0(a1, v23, v22);
                v25 = *(unsigned int *)(v24 + 28);
                v20 = v37;
                if (v37 >= (unint64_t)HIDWORD(v37))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v37;
                }
                *((_QWORD *)v36 + v20) = (v25 >> 13) & 3 | v24;
                LODWORD(v20) = v37 + 1;
                LODWORD(v37) = v37 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v34 + 1);
            if (*((_QWORD *)&v34 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v34 + 1);
                LODWORD(v20) = v37;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v32, 1, (*v14 >> 20) & 1, v36, (uint64_t)v36 + 8 * v20);
            v31 = LODWORD(v39[1]);
            if (LODWORD(v39[1]) >= (unint64_t)HIDWORD(v39[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v39[1]);
            }
            *((_QWORD *)v39[0] + v31) = v30;
            ++LODWORD(v39[1]);
            if (v36 != v38)
              free(v36);
          }
          else
          {
            v29 = LODWORD(v39[1]);
            if (LODWORD(v39[1]) >= (unint64_t)HIDWORD(v39[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v39[1]);
            }
            *((_QWORD *)v39[0] + v29) = 0;
            ++LODWORD(v39[1]);
          }
          ++v12;
        }
        while (v12 != v13);
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v41, v42, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 4), (uint64_t)&v34, (uint64_t)&v32);
      if (v39[0] != v40)
        free(v39[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v41 != v43)
    free(v41);
  return v9;
}

uint64_t sub_22EE2C3A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EE2C3EC(_QWORD **a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _DWORD *v37;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  size_t __n[2];
  int v43[3];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  void *v47;
  uint64_t v48;
  _BYTE v49[128];
  __int128 v50;
  _QWORD v51[10];

  v51[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v43[0] = *(_DWORD *)a2;
  v43[1] = v6;
  v43[2] = v4;
  v47 = v49;
  v48 = 0x1000000000;
  v41 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v39 = 0;
  DWORD2(v39) = 0;
  v40 = 0;
  v44 = v46;
  v45 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EE0ED40(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_43;
      v10 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v48;
      }
      *((_QWORD *)v47 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v48) = v48 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EE11C74((int)a1, v11, *(void **)(a2 + 48));
    if (!v12)
    {
LABEL_43:
      v37 = 0;
      goto LABEL_45;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v41, v14, v15);
  v39 = *(_OWORD *)(a2 + 56);
  v40 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v39)
  {
    sub_22EE12458((unint64_t)a1, (uint64_t *)&v39, (uint64_t)&v50);
    v39 = v50;
    v40 = v51[0];
    if (!(_QWORD)v50)
      goto LABEL_43;
  }
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v50 = v51;
        *((_QWORD *)&v50 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            sub_22EFF605C((uint64_t)v19);
            v29 = sub_22EE130A0(a1, v28, v27);
            v30 = *(unsigned int *)(v29 + 28);
            v25 = DWORD2(v50);
            if (DWORD2(v50) >= (unint64_t)HIDWORD(v50))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v50);
            }
            *(_QWORD *)(v50 + 8 * v25) = (v30 >> 13) & 3 | v29;
            LODWORD(v25) = ++DWORD2(v50);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v31 = (*a1)[11];
        v32 = *((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v33 = (void *)sub_22E3CD3D4(v31 + 2032, LODWORD(__n[1]), 3);
            memcpy(v33, (const void *)__n[0], LODWORD(__n[1]));
            v32 = *((_QWORD *)&v41 + 1);
            LODWORD(v25) = DWORD2(v50);
          }
          else
          {
            v33 = (void *)__n[0];
          }
        }
        else
        {
          v33 = 0;
        }
        v35 = sub_22F0605AC(v31, 0, v32, (uint64_t)v33, (uint64_t)&v39, 1, (*v19 >> 20) & 1, (const void *)v50, v50 + 8 * v25);
        v36 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v36 = v45;
        }
        *((_QWORD *)v44 + v36) = v35;
        LODWORD(v45) = v45 + 1;
        if ((_QWORD *)v50 != v51)
          free((void *)v50);
      }
      else
      {
        v34 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v45;
        }
        *((_QWORD *)v44 + v34) = 0;
        LODWORD(v45) = v45 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v37 = sub_22ECA7CAC(*a1, (int *)(a2 + 80), 2u, (int *)(a2 + 88), 2, (uint64_t)&v41, &v39, *(unsigned int *)(a2 + 96), (uint64_t)v47, v48, v43, (unsigned __int8 **)v44, v45);
LABEL_45:
  if (v44 != v46)
    free(v44);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v47 != v49)
    free(v47);
  return v37;
}

uint64_t sub_22EE2C844(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EE0ED40(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EE2C890(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EE2C9E8(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EE0ED40(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EE2CB40(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EE0ED40(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EE0ED40(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

BOOL sub_22EE2CCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;

  v4 = *(_QWORD *)(a3 + 56);
  if ((v4 & 4) == 0 || !*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8))
    return 0;
  if ((*(_WORD *)(a4 + 30) & 0x180) != 0)
    v7 = *(_QWORD *)(a4 + 16);
  else
    v7 = *(_QWORD *)(a3 + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
    v8 = *(_QWORD *)(v8 + 8);
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 216);
  v12 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v13 = *(_DWORD *)(a1 + 1944);
  v14 = *(_DWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 216) = v8;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v15 = *(_QWORD *)(a1 + 10288);
  *(_QWORD *)(a1 + 10288) = 0;
  v16 = *(_QWORD *)(a3 + 56);
  if ((v16 & 4) != 0)
  {
    v9 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    v10 = *(void **)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  v17 = sub_22F348DBC(a1, v9, v10, a2);
  v19 = v17 == 0;
  if (v17)
    sub_22EFBB0DC(a4, v17, v18);
  if (v11)
  {
    *(_QWORD *)(a1 + 216) = v11;
    *(_QWORD *)(a1 + 3200) = v12;
    *(_QWORD *)(a1 + 10288) = v15;
    *(_DWORD *)(a1 + 1944) = v13;
    *(_DWORD *)(a1 + 2192) = v14;
  }
  return v19;
}

BOOL sub_22EE2CDC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;

  v4 = *(_QWORD *)(a3 + 120);
  if ((v4 & 4) == 0 || !*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8))
    return 0;
  if ((*(_WORD *)(a4 + 30) & 0x180) != 0)
    v7 = *(_QWORD *)(a4 + 16);
  else
    v7 = *(_QWORD *)(a3 + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
    v8 = *(_QWORD *)(v8 + 8);
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 216);
  v12 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v13 = *(_DWORD *)(a1 + 1944);
  v14 = *(_DWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 216) = v8;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  v15 = *(_QWORD *)(a1 + 10288);
  *(_QWORD *)(a1 + 10288) = 0;
  v16 = *(_QWORD *)(a3 + 120);
  if ((v16 & 4) != 0)
  {
    v9 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    v10 = *(void **)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  v17 = sub_22F348DBC(a1, v9, v10, a2);
  v19 = v17 == 0;
  if (v17)
    sub_22F3AC930(a4, v17, v18);
  if (v11)
  {
    *(_QWORD *)(a1 + 216) = v11;
    *(_QWORD *)(a1 + 3200) = v12;
    *(_QWORD *)(a1 + 10288) = v15;
    *(_DWORD *)(a1 + 1944) = v13;
    *(_DWORD *)(a1 + 2192) = v14;
  }
  return v19;
}

void sub_22EE2CEE8(uint64_t a1)
{
  __asm { BR              X10 }
}

double sub_22EE2CF38()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22EF96094(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2CF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  char v5;

  result = sub_22E3CD3D4(v0 + 2032, 48, 3);
  v3 = *(_QWORD *)(v1 + 36);
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)result = *(_OWORD *)v1;
  *(_OWORD *)(result + 16) = v4;
  v5 = *(_BYTE *)(result + 34);
  *(_WORD *)(result + 32) = 100;
  *(_BYTE *)(result + 34) = v5 & 0xE0;
  *(_QWORD *)(result + 36) = v3;
  return result;
}

double sub_22EE2E3BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E844(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E3E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A498(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E40C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A004(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E434()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398330(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E45C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37CFD0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E484()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37AFE8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E4AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393F2C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E4D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391D9C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E4FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F399CC4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E524()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37C990(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E54C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392C7C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E574()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A42DC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E59C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39DC0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E5C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1B70(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E5EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E220(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2E614()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37EC74(v1, v0);
}

double sub_22EE2E63C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A0E8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E664()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F399B84(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E68C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37F708(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E6B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38861C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E6DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E320(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E704()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F399904(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2E72C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A098C(v1, v0);
}

double sub_22EE2E754()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37A954(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E77C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37AAF4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E7A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39BC84(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E7CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F384828(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E7F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380E44(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E81C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F382210(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E844()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3863B0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E86C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A5CC0(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2E894()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37F8FC(v1, v0);
}

double sub_22EE2E8BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39BB44(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E8E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F384464(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E90C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381078(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2E934()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F384BEC(v1, v0);
}

double sub_22EE2E95C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387994(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E984()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D098(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E9AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380C24(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2E9D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F384F00(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2E9FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A5184(v1, v0);
}

double sub_22EE2EA24()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37D3C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EA4C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389F88(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EA74()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E944(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2EA9C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3813E8(v1, v0);
}

double sub_22EE2EAC4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F383ED8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EAEC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F396AA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EB14()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F394140(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EB3C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3930A4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2EB64()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F384A88(v1, v0);
}

double sub_22EE2EB8C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395A80(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EBB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3921F8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EBDC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F396EA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EC04()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F385480(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EC2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38492C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EC54()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F382504(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EC7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395250(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ECA4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389548(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ECCC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A5D8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ECF4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39BEC0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ED1C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388B70(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ED44()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F382618(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ED6C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3823A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2ED94()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387830(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EDBC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3996A8(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2EDE4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3860D8(v1, v0);
}

double sub_22EE2EE0C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3872F0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EE34()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F382464(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EE5C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397C18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EE84()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39814C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EEAC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37ADD4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EED4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395150(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EEFC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F396CA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EF24()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397D18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EF4C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A394(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EF74()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A3598(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EF9C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380488(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EFC4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381D3C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2EFEC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39402C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F014()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A0434(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F03C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39FB2C(v1, v0);
}

double sub_22EE2F064()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3869C8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F08C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E610(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F0B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3969E8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F0DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388A30(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F104()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398EC4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F12C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E420(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F154()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397608(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F17C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D308(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F1A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F383414(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F1CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397E18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F1F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F394AC4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F21C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37D794(v1, v0);
}

uint64_t sub_22EE2F244()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F396708(v1, v0);
}

double sub_22EE2F26C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F6C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F294()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398FC4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F2BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381E50(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F2E4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F385C74(v1, v0);
}

double sub_22EE2F30C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395C20(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F334()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392E20(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F35C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3948C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F384()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395050(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F3AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A7780(v1, v0);
}

double sub_22EE2F3D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A38D0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F3FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F396BA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F424()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380F78(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F44C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39B9C0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F474()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395550(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F49C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F5E0(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F4C4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F387EF8(v1, v0);
}

uint64_t sub_22EE2F4EC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3850D0(v1, v0);
}

double sub_22EE2F514()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A001C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F53C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381278(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F564()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A3410(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F58C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37E520(v1, v0);
}

double sub_22EE2F5B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A810(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F5DC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A306C(v1, v0);
}

double sub_22EE2F604()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A4F08(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F62C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F382EA8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F654()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3835C8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F67C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F385EEC(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F6A4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A619C(v1, v0);
}

double sub_22EE2F6CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A663C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F6F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37C874(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F71C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B820(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F744()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39ABD8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F76C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A7B68(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F794()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39DA0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F7BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381178(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F7E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37AA54(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F80C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A4030(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F834()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D67C(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2F85C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A1534(v1, v0);
}

double sub_22EE2F884()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A998(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F8AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1A04(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F8D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38DAF8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F8FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A468C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F924()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B928(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F94C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37AC64(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F974()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37A754(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F99C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D210(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F9C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38DC60(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2F9EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38097C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FA14()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38BD80(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FA3C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3977B0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FA64()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389688(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FA8C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A8DC(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2FAB4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A49F8(v1, v0);
}

double sub_22EE2FADC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A5474(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FB04()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38ABA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FB2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38BE84(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2FB54()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F38CB20(v1, v0);
}

double sub_22EE2FB7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E0D4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FBA4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38EA68(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FBCC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A5574(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FBF4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F7C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FC1C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E29C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FC44()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A5B0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FC6C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D04C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FC94()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390028(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FCBC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39B8C0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FCE4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A43C0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FD0C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F804(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FD34()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389DFC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FD5C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D650(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2FD84()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39C1E0(v1, v0);
}

uint64_t sub_22EE2FDAC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3827D8(v1, v0);
}

double sub_22EE2FDD4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F384034(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FDFC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393738(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2FE24()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A2D18(v1, v0);
}

double sub_22EE2FE4C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C170(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FE74()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390914(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FE9C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F396FA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FEC4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A5C20(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE2FEEC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A7060(v1, v0);
}

double sub_22EE2FF14()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B2A4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FF3C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39BE20(v1, v0);
}

double sub_22EE2FF64()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B3A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FF8C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38BB78(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FFB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38DFD0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE2FFDC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E964(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30004()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38EE78(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3002C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39E53C(v1, v0);
}

uint64_t sub_22EE30054()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39CE08(v1, v0);
}

double sub_22EE3007C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38BC7C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE300A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E588(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE300CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38FA0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE300F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38FD18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3011C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390398(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30144()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3910F4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3016C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3912FC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30194()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A37BC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE301BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A75B4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE301E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3911F8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3020C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37E188(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30234()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3971A0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3025C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A653C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30284()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38EB6C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE302AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1DC0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE302D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391400(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE302FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391BB4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE30324()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37C584(v1, v0);
}

double sub_22EE3034C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3909F8(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE30374()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F388428(v1, v0);
}

double sub_22EE3039C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3970A0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE303C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D5E4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE303EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38ED74(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30414()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38337C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3043C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3906A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30464()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391504(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3048C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397894(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE304B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381BA4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE304DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F154(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30504()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38AF98(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3052C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390294(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30554()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388E88(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3057C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38DDC8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE305A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F69C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE305CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398688(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE305F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38AA9C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3061C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38DECC(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE30644()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39C518(v1, v0);
}

uint64_t sub_22EE3066C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A27D4(v1, v0);
}

double sub_22EE30694()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A374(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE306BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F080(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE306E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F490(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3070C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390190(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30734()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390DE8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3075C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397B18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30784()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39E7A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE307AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389888(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE307D4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A1F38(v1, v0);
}

double sub_22EE307FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391F0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30824()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392010(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3084C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39913C(v1, v0);
}

double sub_22EE30874()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A2544(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3089C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F396DA0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE308C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A5A6C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE308EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A6024(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30914()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A57C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3093C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F184(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30964()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3976B0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3098C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A22C8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE309B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E380(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE309DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A0E94(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30A04()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387BE0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30A2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C8C0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30A54()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D10C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30A7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39170C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30AA4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3995A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30ACC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A26A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30AF4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A36D8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30B1C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38CE78(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30B44()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E484(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30B6C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38EF7C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30B94()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F288(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30BBC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F38C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30BE4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390CE4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE30C0C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F393904(v1, v0);
}

double sub_22EE30C34()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F394240(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30C5C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3968C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30C84()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397A18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30CAC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39AA60(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30CD4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393538(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30CFC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391608(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30D24()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3917F0(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE30D4C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3961D4(v1, v0);
}

double sub_22EE30D74()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398788(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30D9C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3993A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30DC4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3997CC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30DEC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A080C(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE30E14()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A6D7C(v1, v0);
}

double sub_22EE30E3C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3893DC(v1, v0);
}

double sub_22EE30E64()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A478(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30E8C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3905A0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30EB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38ACA8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30EDC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B1A0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30F04()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B4B0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30F2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D88C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30F54()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38DA14(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30F7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392A48(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30FA4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B618(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30FCC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38AE10(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE30FF4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F594(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3101C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38F908(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31044()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390BE0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3106C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390EEC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31094()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395D54(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE310BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39199C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE310E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391A80(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3110C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392114(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31134()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B09C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3115C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F054(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31184()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390FF0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE311AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F391CB8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE311D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398588(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE311FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38FC14(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31224()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3943C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3124C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F383C58(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31274()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392654(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3129C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A6A98(v1, v0);
}

double sub_22EE312C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A39D0(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE312EC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37B2D0(v1, v0);
}

double sub_22EE31314()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38B71C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3133C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E860(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31364()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38FB10(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3138C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388164(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE313B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395450(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE313DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F383D98(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31404()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A684(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3142C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38FE1C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31454()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39049C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3147C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A72CC(v1, v0);
}

double sub_22EE314A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E798(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE314CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D784(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE314F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E68C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3151C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38BF88(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31544()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C06C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3156C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38FF20(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31594()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392908(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE315BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38E1B8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE315E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D500(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3160C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C254(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31634()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388930(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3165C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3994A8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31684()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39C324(v1, v0);
}

uint64_t sub_22EE316AC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39CBCC(v1, v0);
}

double sub_22EE316D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D41C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE316FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38EC70(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE31724()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A5704(v1, v0);
}

double sub_22EE3174C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38CCEC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31774()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37D5C8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3179C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F35C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE317C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395664(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE317EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C388(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31814()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39E88C(v1, v0);
}

double sub_22EE3183C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37CA28(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE31864()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F38D364(v1, v0);
}

double sub_22EE3188C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39FF7C(v1, v0);
}

double sub_22EE318B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38D56C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE318DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F386EBC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31904()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A7374(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3192C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A4114(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31954()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39FE7C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3197C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F384708(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE319A4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39C754(v1, v0);
}

uint64_t sub_22EE319CC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A67B4(v1, v0);
}

double sub_22EE319F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C9C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31A1C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F8C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31A44()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A0B68(v1, v0);
}

uint64_t sub_22EE31A6C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A10AC(v1, v0);
}

double sub_22EE31A94()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393638(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31ABC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398414(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31AE4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398ABC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31B0C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380680(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE31B34()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F38C6C4(v1, v0);
}

double sub_22EE31B5C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398D40(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31B84()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D798(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31BAC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380D44(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31BD4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F399EC4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31BFC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A23AC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31C24()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39824C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31C4C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387DE0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31C74()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1700(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31C9C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3944C4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE31CC4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A2A34(v1, v0);
}

double sub_22EE31CEC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F382078(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31D14()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A7474(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31D3C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388C70(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31D64()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A0534(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE31D8C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37BBE4(v1, v0);
}

double sub_22EE31DB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37C2D0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31DDC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F397F18(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31E04()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A4C6C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31E2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395350(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31E54()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F384608(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31E7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39DB0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31EA4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390ADC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31ECC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388D84(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31EF4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3963F0(v1, v0);
}

double sub_22EE31F1C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3841B8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31F44()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A2B0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31F6C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392554(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE31F94()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37FF38(v1, v0);
}

double sub_22EE31FBC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393E2C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE31FE4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3946C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3200C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398BBC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32034()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39DD0C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3205C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F398888(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32084()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A0F94(v1, v0);
}

double sub_22EE320AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3947C4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE320D4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F38021C(v1, v0);
}

uint64_t sub_22EE320FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37FC60(v1, v0);
}

uint64_t sub_22EE32124()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3A12F0(v1, v0);
}

double sub_22EE3214C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39F4E0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32174()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387AE0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3219C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F392FA4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE321C4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387CE0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE321EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A2104(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32214()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1D08(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3223C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39D898(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32264()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1C70(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3228C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F386810(v1, v0);
}

uint64_t sub_22EE322B4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F383808(v1, v0);
}

double sub_22EE322DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3973D4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32304()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F383528(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3232C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388730(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE32354()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3957F0(v1, v0);
}

double sub_22EE3237C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389B38(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE323A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A0648(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE323CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39EF14(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE323F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A4734(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3241C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F394CAC(v1, v0);
}

double sub_22EE32444()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3899F8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3246C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3836AC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32494()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A154(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE324BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3839D4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE324E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39C0C0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3250C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F385580(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32534()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3868B4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3255C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381F64(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32584()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39AD48(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE325AC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3945C4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE325D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F386C6C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE325FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389C1C(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE32624()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39AE88(v1, v0);
}

uint64_t sub_22EE3264C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3858A8(v1, v0);
}

double sub_22EE32674()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F388830(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3269C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F385380(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE326C4()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F38705C(v1, v0);
}

double sub_22EE326EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F395E78(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32714()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3949C4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3273C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F39C990(v1, v0);
}

double sub_22EE32764()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38C46C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3278C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A28BC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE327B4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3842CC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE327DC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393230(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32804()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37FDC0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3282C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3933B4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32854()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3922F8(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE3287C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3817BC(v1, v0);
}

double sub_22EE328A4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F393CA8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE328CC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387560(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE328F4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387674(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE3291C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A254(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32944()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F387788(v1, v0);
}

double sub_22EE3296C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3927C8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32994()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38A0B4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE329BC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3923F8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE329E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3805E0(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32A0C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F399DC4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32A34()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A41F8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32A5C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A1904(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32A84()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A4D80(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32AAC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F387190(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32AD4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F386DBC(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32AFC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A596C(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32B24()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F390810(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32B4C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37AE74(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE32B74()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F383020(v1, v0);
}

double sub_22EE32B9C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F383AD4(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32BC4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F389788(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE32BEC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F382BD8(v1, v0);
}

double sub_22EE32C14()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F38BA74(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32C3C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37A854(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32C64()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F399A44(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32C8C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F386AC8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32CB4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A0D74(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32CDC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F380A60(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32D04()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3A17E4(v1, v0).n128_u64[0];
  return result;
}

uint64_t sub_22EE32D2C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37DD74(v1, v0);
}

double sub_22EE32D54()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39CF98(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32D7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F37B0E8(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32DA4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A718(v1, v0).n128_u64[0];
  return result;
}

double sub_22EE32DCC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F39A1CC(v1, v0).n128_u64[0];
  return result;
}

void sub_22EE33524(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_22EE3356C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;

  v6 = sub_22EE03524(a3, *(uint64_t **)(v4 + 40), a4, *(_DWORD *)(v4 + 16), *(_QWORD *)v4, 0);
  if (v6)
  {
    v7 = v6;
    v8 = sub_22E3CD3D4(v5 + 2032, 48, 3);
    v9 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v4;
    *(_OWORD *)(v8 + 16) = v9;
    v10 = (*(unsigned __int8 *)(v8 + 34) << 16) & 0xE00000 | 0x100000;
    *(_WORD *)(v8 + 32) = 286;
    *(_BYTE *)(v8 + 34) = BYTE2(v10);
    *(_QWORD *)(v8 + 40) = v7;
  }
  sub_22EE3355C();
}

double sub_22EE335D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381E50(v0, v1).n128_u64[0];
  return result;
}

double sub_22EE335EC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F381F64(v0, v1).n128_u64[0];
  return result;
}

uint64_t sub_22EE33604()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F384BEC(v0, v1);
}

double sub_22EE3361C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_22F3863B0(v0, v1).n128_u64[0];
  return result;
}

uint64_t sub_22EE33634()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F37B2D0(v0, v1);
}

void sub_22EE3364C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2 && (*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v8 = *v7;
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
    }
    else
    {
      v10 = 0;
    }
    while (v8 != (uint64_t *)v10)
    {
      v11 = *v8;
      if (sub_22EE337A8(a4, *v8))
      {
        v12 = *(_QWORD *)(a4 + 16);
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
          v13 = *(_QWORD *)v13;
        if (v13)
        {
          v14 = (*(_WORD *)(v13 + 8) & 0x7F) - 35;
          v15 = v13 - 64;
          if (v14 >= 3)
            v16 = 0;
          else
            v16 = v15;
        }
        else
        {
          v16 = 0;
        }
        v17 = sub_22EFBAEF8(a4);
        sub_22EBBBB24((uint64_t)v20, a1, v16, 0, v17);
        sub_22EE33524(v11);
        if (v18)
        {
          v19 = v18;
          if (sub_22EE337A8(a4, v18))
            sub_22EFCA95C(a4, v19);
        }
        if (v21)
          *(_QWORD *)(v20[0] + 10288) = v20[1];
      }
      ++v8;
    }
  }
}

BOOL sub_22EE337A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  _DWORD *v20;
  unsigned int v22;
  uint64_t v23;

  v3 = a1;
  v4 = *(unsigned __int16 *)(a2 + 32);
  if (!a2 || v4 != 286)
  {
    v12 = 1;
    if (!a2 || v4 != 119)
      return v12;
    if ((*(_DWORD *)(a1 + 28) & 0x7Eu) - 52 >= 6)
      v3 = 0;
    v13 = *(_DWORD *)(a2 + 36);
    if ((v13 - 1192) >= 2)
    {
      if (v13 != 1191 || !v3)
        return 1;
      v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v16)
        v17 = *(_BYTE *)(v16 + 16) == 26;
      else
        v17 = 0;
      if ((v17
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
         && (v16 = sub_22F10CF48(v16)) != 0)
        && (*(_DWORD *)(v16 + 20) & 0x3FFFC0) != 0
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v3 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 41)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v18)
          v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
        else
          v19 = 0;
        if (!v19)
          v18 = sub_22F10CF48(v18);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 40)
          return 0;
      }
    }
    else if (!v3)
    {
      return 1;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v14)
      v15 = *(unsigned __int8 *)(v14 + 16) - 27 > 0xFFFFFFFD;
    else
      v15 = 0;
    if (!v15)
      v14 = sub_22F10CF48(v14);
    return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28;
  }
  v5 = (uint64_t *)(**(_QWORD **)(a2 + 40) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*v5 + 17) & 4) != 0 || (sub_22EFC7ADC(a1 + 64) & 1) != 0)
  {
LABEL_5:
    v6 = (uint64_t *)sub_22EE47620(v3);
    while (1)
    {
      v8 = v6;
      if (v6 >= v7)
      {
        if (v6 == v7)
          return 1;
        v9 = v7;
        while (*(_WORD *)(*v9 + 32) != 286)
        {
          if (++v9 == v6)
            return 1;
        }
        v8 = v6;
      }
      else
      {
        while (*(_WORD *)(*v8 + 32) != 286)
        {
          if (++v8 == v7)
            return 1;
        }
        v9 = v7;
      }
      if (v8 == v9)
        break;
      do
      {
        v11 = *v6++;
        v10 = v11;
      }
      while (*(_WORD *)(v11 + 32) != 286);
      v12 = 0;
      if ((*(_QWORD *)((**(_QWORD **)(v10 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) | **(_QWORD **)(v10 + 40) & 7) == (*(_QWORD *)((**(_QWORD **)(a2 + 40) & 0xFFFFFFFFFFFFFFF0) + 8) | **(_QWORD **)(a2 + 40) & 7))
        return v12;
    }
    return 1;
  }
  v20 = (_DWORD *)sub_22F10C2A4(*v5);
  if (!v20)
    return 0;
  v12 = 0;
  v22 = (v20[7] & 0x7F) - 35;
  if (v22 >= 3)
    v20 = 0;
  if (v3 && v22 <= 2)
  {
    if (v20 == (_DWORD *)v3)
      goto LABEL_5;
    v23 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 32))(v20);
    if (v23 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
      goto LABEL_5;
    return 0;
  }
  return v12;
}

void sub_22EE33A90(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  uint64_t v18;
  int v19;
  int v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unint64_t **v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 **v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 **v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unsigned __int8 *v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  _DWORD *v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t **v207;
  int v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t v211;
  _DWORD *v212;
  uint64_t **v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  void *v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned __int8 *v221;
  unsigned __int8 **v222;
  unsigned __int8 *v223;
  _BYTE *v224;
  uint64_t v225;
  char **v226;
  char **v227;
  __n128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  BOOL v233;
  uint64_t v234;
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  BOOL v241;
  uint64_t v242;
  uint64_t v243;
  __n128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _DWORD *v255;
  uint64_t **v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t **v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 **v266;
  uint64_t i;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  BOOL v272;
  uint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  uint64_t v278;
  uint64_t v280;
  unint64_t v281;
  char v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  __n128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  BOOL v298;
  uint64_t v299;
  uint64_t v300;
  __n128 v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  unsigned __int8 **v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned __int8 **v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  __n128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  BOOL v326;
  uint64_t v327;
  uint64_t v328;
  __n128 v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  BOOL v334;
  uint64_t v335;
  uint64_t v336;
  __n128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  BOOL v342;
  uint64_t v343;
  uint64_t v344;
  __n128 v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  BOOL v350;
  uint64_t v351;
  uint64_t v352;
  __n128 v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  BOOL v358;
  uint64_t v359;
  uint64_t v360;
  __n128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  BOOL v366;
  uint64_t v367;
  uint64_t v368;
  __n128 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t *v378;
  unsigned int v379;
  unint64_t v380;
  void **p_src;
  uint64_t v382;
  __int128 v383;
  uint64_t v384;
  unint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  _BOOL4 v389;
  uint64_t v390;
  uint64_t v391;
  BOOL v392;
  char *v393;
  int v394;
  char v395;
  char v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  int *v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t v406;
  int v407[2];
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  llvm::SmallPtrSetImplBase *v412;
  __n128 ***v413;
  __int16 *v414;
  uint64_t v415;
  uint64_t v416[2];
  __int128 v417;
  uint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  unint64_t v421;
  void *__src;
  int v423[2];
  _QWORD v424[2];
  unsigned __int8 *v425;
  uint64_t v426;
  char v427;
  unsigned int v428;
  char v429;
  void *v430;
  uint64_t v431;
  _BYTE v432[16];
  void *v433;
  unsigned int v434[10];
  void *v435;
  uint64_t v436;
  _QWORD v437[4];
  _QWORD *v438;
  uint64_t v439;
  _BYTE v440[32];
  uint64_t *v441;
  uint64_t v442;
  _QWORD v443[10];

  v443[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a3);
    v13 = *v12;
    if ((*(_BYTE *)(a3 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a3);
      v15 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
    }
    else
    {
      v15 = 0;
    }
    if (v13 != (uint64_t *)v15)
    {
      v410 = (char *)(a1 + 10664);
      v16 = a1 + 3688;
      v412 = (llvm::SmallPtrSetImplBase *)(a1 + 1776);
      v411 = a1 + 1840;
      v409 = a5;
      v17 = (__int16 *)(a1 + 1693);
      v413 = (__n128 ***)a2;
      v414 = (__int16 *)(a1 + 1693);
      v415 = a1 + 3688;
      while (1)
      {
        v18 = *v13;
        if (!sub_22EE337A8(a4, *v13))
          goto LABEL_46;
        v19 = *(unsigned __int16 *)(v18 + 32);
        v20 = v19 | (*(unsigned __int8 *)(v18 + 34) << 16);
        if (v18 && (unsigned __int16)v19 == 98)
        {
          if (sub_22F37CC2C(v18))
          {
            if ((v20 & 0x20000) != 0)
            {
              __src = v424;
              *(_QWORD *)v423 = 0x200000000;
              v70 = *(unint64_t **)(v18 + 40);
              if (*(_BYTE *)(v18 + 35))
              {
                LODWORD(v441) = 7;
                v442 = (uint64_t)v70;
                sub_22EE7377C(a1, (uint64_t)&v441, (uint64_t)&__src);
              }
              else
              {
                sub_22EE73804(a1, *v70, (uint64_t)(v70 + 1), (uint64_t)&__src);
              }
              LOBYTE(v435) = 1;
              LOBYTE(v433) = 0;
              LOBYTE(v438) = 0;
              BYTE4(v438) = 0;
              if ((sub_22EE73A98((_QWORD *)a1, *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 16), (uint64_t)__src, v423[0], (uint64_t *)a2, &v435, &v433, (uint64_t)&v438) & 1) == 0)
              {
                if ((_BYTE)v435)
                {
                  if ((_DWORD)v438)
                  {
                    v85 = 0;
                    v86 = *(_DWORD *)(a1 + 11992);
                    do
                    {
                      *(_DWORD *)(a1 + 11992) = v85;
                      sub_22EE4768C(a1, a2, v18, a4, 0);
                      *(_DWORD *)(a1 + 11992) = v86;
                      ++v85;
                    }
                    while (v85 != (_DWORD)v438);
                  }
                }
                else
                {
                  v116 = *(_DWORD *)(a1 + 11992);
                  *(_DWORD *)(a1 + 11992) = -1;
                  sub_22EE4768C(a1, a2, v18, a4, 1);
                  *(_DWORD *)(a1 + 11992) = v116;
                }
              }
              if (__src != v424)
                free(__src);
              v16 = a1 + 3688;
            }
            else
            {
              sub_22EE4768C(a1, a2, v18, a4, 0);
            }
            goto LABEL_46;
          }
        }
        else
        {
          if (v18 && (unsigned __int16)v19 == 113)
          {
            LODWORD(v438) = 4;
            __src = 0;
            LODWORD(v435) = 3;
            v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
            sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
            v22 = *(unsigned int *)(a1 + 3696);
            v23 = v22 - 2;
            v24 = *(_QWORD *)(a1 + 3688);
            v25 = *(_DWORD *)(v24 + 576 * (v22 - 2));
            if (v25 == 5)
            {
              *(_BYTE *)(v24 + 576 * v22 - 4) = *(_BYTE *)(v24 + 576 * v23 + 572);
              v26 = 1;
            }
            else if (v25 == 2)
            {
              *(_BYTE *)(v24 + 576 * v22 - 4) = 1;
              v26 = *(_BYTE *)(v24 + 576 * v23 + 573) != 0;
            }
            else
            {
              v26 = 0;
              *(_BYTE *)(v24 + 576 * v22 - 4) = 0;
            }
            v27 = v24 + 576 * v22;
            *(_BYTE *)(v27 - 3) = v26;
            *(_WORD *)(a1 + 1693) = 0;
            if (*(_DWORD *)(a1 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v27 - 560));
              sub_22EAEAE08(v411, (uint64_t *)(v27 - 496));
            }
            v28 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), a2, v21);
            if ((v28 & 1) == 0)
            {
              v30 = *(_QWORD *)(v18 + 48);
              if (v30)
              {
                v31 = sub_22EE0A68C(a1, v30, a2, v29);
                if ((v31 & 1) == 0)
                {
                  v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
                  goto LABEL_44;
                }
              }
              else
              {
                v32 = 0;
LABEL_44:
                sub_22EA475D8((_QWORD *)a1, a4, (__int128 *)v18, v28 & 0xFFFFFFFFFFFFFFFELL, v32);
              }
            }
LABEL_45:
            sub_22EB48E64(a1);
            goto LABEL_46;
          }
          if (v18 && (unsigned __int16)v19 == 363)
          {
            LODWORD(v438) = 4;
            __src = 0;
            LODWORD(v435) = 3;
            v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
            sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
            v34 = *(unsigned int *)(a1 + 3696);
            v35 = v34 - 2;
            v36 = *(_QWORD *)(a1 + 3688);
            v37 = *(_DWORD *)(v36 + 576 * (v34 - 2));
            if (v37 == 5)
            {
              *(_BYTE *)(v36 + 576 * v34 - 4) = *(_BYTE *)(v36 + 576 * v35 + 572);
              v38 = 1;
            }
            else if (v37 == 2)
            {
              *(_BYTE *)(v36 + 576 * v34 - 4) = 1;
              v38 = *(_BYTE *)(v36 + 576 * v35 + 573) != 0;
            }
            else
            {
              v38 = 0;
              *(_BYTE *)(v36 + 576 * v34 - 4) = 0;
            }
            v39 = v36 + 576 * v34;
            *(_BYTE *)(v39 - 3) = v38;
            *(_WORD *)(a1 + 1693) = 0;
            if (*(_DWORD *)(a1 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v39 - 560));
              sub_22EAEAE08(v411, (uint64_t *)(v39 - 496));
            }
            v40 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), a2, v33);
            if ((v40 & 1) == 0)
              sub_22EA49564((_QWORD *)a1, a4, (_OWORD *)v18, v40 & 0xFFFFFFFFFFFFFFFELL);
            goto LABEL_45;
          }
          if (v18 && (unsigned __int16)v19 == 99)
          {
            v41 = *(_QWORD *)(a1 + 88);
            v42 = (void *)(*(_DWORD *)(v18 + 36) & 0x3FFFFFFF);
            v423[0] = 64;
            __src = v42;
            v43 = *(_QWORD *)(v41 + 16544);
            v44 = a6;
            v45 = *(_DWORD *)(v18 + 16);
            v46 = v15;
            v47 = sub_22E3CD3D4(v41 + 2032, 32, 3);
            v48 = v43;
            v49 = v45;
            a6 = v44;
            v17 = (__int16 *)(a1 + 1693);
            v16 = a1 + 3688;
            sub_22EFF8F1C(v47, v41, (uint64_t)&__src, v48, v49);
            v50 = v47;
            v15 = v46;
            a2 = (uint64_t)v413;
            sub_22EA47A40((_QWORD *)a1, a4, (_OWORD *)v18, v50);
            goto LABEL_46;
          }
          if (v18 && (unsigned __int16)v19 == 77)
          {
            LODWORD(v438) = 4;
            __src = 0;
            LODWORD(v435) = 3;
            v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
            sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
            v76 = *(unsigned int *)(a1 + 3696);
            v77 = v76 - 2;
            v78 = *(_QWORD *)(a1 + 3688);
            v79 = *(_DWORD *)(v78 + 576 * (v76 - 2));
            if (v79 == 5)
            {
              *(_BYTE *)(v78 + 576 * v76 - 4) = *(_BYTE *)(v78 + 576 * v77 + 572);
              v80 = 1;
            }
            else if (v79 == 2)
            {
              *(_BYTE *)(v78 + 576 * v76 - 4) = 1;
              v80 = *(_BYTE *)(v78 + 576 * v77 + 573) != 0;
            }
            else
            {
              v80 = 0;
              *(_BYTE *)(v78 + 576 * v76 - 4) = 0;
            }
            v81 = v78 + 576 * v76;
            *(_BYTE *)(v81 - 3) = v80;
            *(_WORD *)(a1 + 1693) = 0;
            if (*(_DWORD *)(a1 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v81 - 560));
              sub_22EAEAE08(v411, (uint64_t *)(v81 - 496));
            }
            v82 = *(unsigned int *)(v18 + 64);
            if ((_DWORD)v82)
            {
              v83 = (uint64_t *)(v18 + 72);
              v84 = *(unsigned int *)(v18 + 64);
            }
            else
            {
              v83 = (uint64_t *)(v18 + 56);
              v84 = *(unsigned int *)(v18 + 48);
            }
            v109 = *v83;
            v441 = v443;
            v442 = 0x400000000;
            if ((sub_22F348D3C(a1, v109, v84, 0, a2, (uint64_t)&v441) & 1) != 0)
              goto LABEL_279;
            v110 = *(_QWORD **)(v18 + 40);
            v111 = *(unsigned int *)(v18 + 36);
            v438 = v110;
            v439 = v111;
            if (v82)
            {
              if (!(_DWORD)v442)
              {
                sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v18 + 16), 0xB25u, 0, (uint64_t)&__src);
                if (v427)
                {
                  v112 = v425;
                  if (!v425)
                  {
                    v112 = (unsigned __int8 *)sub_22E3B8AAC(v426);
                    v425 = v112;
                  }
                  v112[*v112 + 1] = 15;
                  v113 = v425;
                  v114 = *v425;
                  *v425 = v114 + 1;
                  *(_QWORD *)&v113[8 * v114 + 16] = v18;
                }
                else if (v429)
                {
                  v217 = (uint64_t *)__src;
                  v218 = (void *)v424[0];
                  if (v424[0])
                    v218 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v424[0] + 32))(v424[0]);
                  v435 = v218;
                  v219 = sub_22F2F1D6C(v217 + 1598, (uint64_t *)&v435);
                  v220 = v219[1] + 32 * v428;
                  v223 = *(unsigned __int8 **)(v220 + 8);
                  v222 = (unsigned __int8 **)(v220 + 8);
                  v221 = v223;
                  if (!v223)
                  {
                    v221 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v222[1]);
                    *v222 = v221;
                  }
                  v221[*v221 + 1] = 15;
                  v224 = *v222;
                  v225 = **v222;
                  *v224 = v225 + 1;
                  *(_QWORD *)&v224[8 * v225 + 16] = v18;
                  a2 = (uint64_t)v413;
                  v17 = (__int16 *)(a1 + 1693);
                  v16 = a1 + 3688;
                }
                LODWORD(v435) = 1;
                sub_22E8900C4((uint64_t)&__src, (int *)&v435);
                sub_22E903BEC((unsigned int *)&__src);
                goto LABEL_279;
              }
              if (sub_22F31F254((_QWORD *)a1, (uint64_t *)v18, (unsigned __int8 *)*v441, (uint64_t *)&v438, 0))
              {
                __src = v424;
                *(_QWORD *)v423 = 0x400000000;
                sub_22F2ECCD8((uint64_t)&__src, (uint64_t)v424, v441 + 1, &v441[v442]);
                sub_22EAEAE08((uint64_t)&v441, (uint64_t *)&__src);
                if (__src != v424)
                  free(__src);
                v110 = v438;
                v111 = v439;
                a2 = (uint64_t)v413;
                v17 = (__int16 *)(a1 + 1693);
                v16 = a1 + 3688;
                goto LABEL_278;
              }
            }
            else
            {
LABEL_278:
              sub_22EA49160((_QWORD *)a1, a4, (uint64_t *)v18, v110, v111, v441, v442);
            }
LABEL_279:
            if (v441 != v443)
              free(v441);
            goto LABEL_45;
          }
          if (v18 && (unsigned __int16)v19 == 167)
          {
            v51 = sub_22EE47854(a1, a2, v18, *(_QWORD *)(v18 + 40), a4);
            if (v51)
            {
              v52 = v51;
              v53 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
              sub_22EF962EC(v53, *(_QWORD *)(a1 + 88), (_OWORD *)v18, v52, *(const void **)(v18 + 56), *(unsigned int *)(v18 + 48));
LABEL_41:
              v54 = a4;
              v55 = v53;
              v16 = a1 + 3688;
              goto LABEL_42;
            }
            goto LABEL_46;
          }
          if (v18 && (unsigned __int16)v19 == 163)
          {
            v56 = sub_22EE47854(a1, a2, v18, *(_QWORD *)(v18 + 40), a4);
            if (!v56)
              goto LABEL_46;
            v57 = v56;
            v53 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 80, 3);
            sub_22F3851BC(v53, *(_QWORD *)(a1 + 88), (_OWORD *)v18, v57, *(const void **)(v18 + 56), *(unsigned int *)(v18 + 48), *(_DWORD *)(v18 + 64), *(_BYTE *)(v18 + 68), a4);
            goto LABEL_41;
          }
          if (v18 && (unsigned __int16)v19 == 136)
          {
            LODWORD(v438) = 4;
            __src = 0;
            LODWORD(v435) = 3;
            v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
            sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
            v59 = *(unsigned int *)(a1 + 3696);
            v60 = v59 - 2;
            v61 = *(_QWORD *)(a1 + 3688);
            v62 = *(_DWORD *)(v61 + 576 * (v59 - 2));
            if (v62 == 5)
            {
              *(_BYTE *)(v61 + 576 * v59 - 4) = *(_BYTE *)(v61 + 576 * v60 + 572);
              v63 = 1;
            }
            else if (v62 == 2)
            {
              *(_BYTE *)(v61 + 576 * v59 - 4) = 1;
              v63 = *(_BYTE *)(v61 + 576 * v60 + 573) != 0;
            }
            else
            {
              v63 = 0;
              *(_BYTE *)(v61 + 576 * v59 - 4) = 0;
            }
            v64 = v61 + 576 * v59;
            *(_BYTE *)(v64 - 3) = v63;
            *(_WORD *)(a1 + 1693) = 0;
            if (*(_DWORD *)(a1 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v64 - 560));
              sub_22EAEAE08(v411, (uint64_t *)(v64 - 496));
            }
            v65 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), a2, v58);
            if ((v65 & 1) != 0)
              goto LABEL_45;
            v67 = *(_QWORD *)(v18 + 48);
            if (v67)
            {
              v68 = sub_22EE0A68C(a1, v67, a2, v66);
              if ((v68 & 1) != 0)
                goto LABEL_45;
              v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
            }
            else
            {
              v69 = 0;
            }
            sub_22F32021C((_QWORD *)a1, a4, v18, v65 & 0xFFFFFFFFFFFFFFFELL, v69);
            goto LABEL_45;
          }
          if (v18 && (unsigned __int16)v19 == 475)
          {
            sub_22EA4A244((_QWORD *)a1, a4, v18, *(_QWORD *)(v18 + 40), 1);
            goto LABEL_46;
          }
          if (v18 && (unsigned __int16)v19 == 479)
          {
            v71 = a4;
            if (a4)
            {
              v71 = a4;
              if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x1D)
                v71 = *(_QWORD *)(a4 + 48);
            }
            v420 = 0;
            v421 = v71;
            v72 = *(_QWORD *)(v71 + 16);
            v73 = v72 & 0xFFFFFFFFFFFFFFF8;
            if ((v72 & 4) != 0)
              v73 = *(_QWORD *)v73;
            v406 = v71;
            if (v73)
            {
              v74 = (*(_WORD *)(v73 + 8) & 0x7F) - 35;
              v73 -= 64;
              if (v74 >= 3)
                v73 = 0;
            }
            v420 = v73;
            __src = v424;
            *(_QWORD *)v423 = 0x400000000;
            v441 = v443;
            v442 = 0x400000000;
            v438 = v440;
            v439 = 0x400000000;
            v435 = v437;
            v436 = 0x400000000;
            v433 = &v434[2];
            *(_QWORD *)v434 = 0x400000000;
            v430 = v432;
            v431 = 0x400000000;
            *(_QWORD *)&v417 = a1;
            *((_QWORD *)&v417 + 1) = &v421;
            v418 = a2;
            v419 = &v420;
            v416[0] = a1;
            v416[1] = (uint64_t)&v417;
            v75 = *(unsigned __int8 **)(v18 + 40);
            v403 = a6;
            if (v75)
              v400 = sub_22EE47B0C(v416, v75);
            else
              v400 = 0;
            v135 = *(unsigned int *)(v18 + 48);
            if ((_DWORD)v135)
            {
              v136 = *(unsigned __int8 ***)(v18 + 56);
              v137 = 8 * v135;
              do
              {
                v138 = sub_22EE47B0C(v416, *v136);
                if ((v138 & 1) == 0)
                {
                  v139 = v423[0];
                  if (v423[0] >= (unint64_t)v423[1])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v139 = v423[0];
                  }
                  *((_QWORD *)__src + v139) = v138 & 0xFFFFFFFFFFFFFFFELL;
                  ++v423[0];
                }
                ++v136;
                v137 -= 8;
              }
              while (v137);
            }
            v140 = v15;
            v141 = *(unsigned int *)(v18 + 64);
            if ((_DWORD)v141)
            {
              v142 = *(unsigned __int8 ***)(v18 + 72);
              v143 = *(unint64_t **)(v18 + 88);
              v144 = 8 * v141;
              do
              {
                v145 = sub_22EE47B0C(v416, *v142);
                if ((v145 & 1) == 0)
                {
                  v147 = v442;
                  if (v442 >= (unint64_t)HIDWORD(v442))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v147 = v442;
                  }
                  v441[v147] = v145 & 0xFFFFFFFFFFFFFFFELL;
                  LODWORD(v442) = v442 + 1;
                  if (*v143)
                    v148 = sub_22EE0A68C(a1, *v143, a2, v146);
                  else
                    v148 = 0;
                  v149 = v439;
                  if (v439 >= (unint64_t)HIDWORD(v439))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v149 = v439;
                  }
                  v438[v149] = v148 & 0xFFFFFFFFFFFFFFFELL;
                  LODWORD(v439) = v439 + 1;
                  ++v143;
                }
                ++v142;
                v144 -= 8;
              }
              while (v144);
            }
            v150 = *(unsigned int *)(v18 + 96);
            if ((_DWORD)v150)
            {
              v151 = *(unsigned __int8 ***)(v18 + 104);
              v152 = *(unint64_t **)(v18 + 136);
              v153 = 8 * v150;
              do
              {
                v154 = sub_22EE47B0C(v416, *v151);
                if ((v154 & 1) == 0)
                {
                  v156 = v436;
                  if (v436 >= (unint64_t)HIDWORD(v436))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v156 = v436;
                  }
                  *((_QWORD *)v435 + v156) = v154 & 0xFFFFFFFFFFFFFFFELL;
                  LODWORD(v436) = v436 + 1;
                  if (*v152)
                    v157 = sub_22EE0A68C(a1, *v152, a2, v155);
                  else
                    v157 = 0;
                  v158 = v434[0];
                  if (v434[0] >= (unint64_t)v434[1])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v158 = v434[0];
                  }
                  *((_QWORD *)v433 + v158) = v157 & 0xFFFFFFFFFFFFFFFELL;
                  ++v434[0];
                  ++v152;
                }
                ++v151;
                v153 -= 8;
              }
              while (v153);
            }
            sub_22E7B6F2C((uint64_t)&v430, *(_BYTE **)(v18 + 120), (_BYTE *)(*(_QWORD *)(v18 + 120) + 4 * *(unsigned int *)(v18 + 112)));
            sub_22EC96930((_QWORD *)a1, v406, *(_DWORD *)(v18 + 36), (_DWORD *)(v400 & 0xFFFFFFFFFFFFFFFELL), (unsigned __int8 **)__src, v423[0], (unsigned __int8 **)v441, v442, (_DWORD **)v438, v439, (unsigned __int8 **)v435, v436, (int *)v430, v431, (uint64_t *)v433, v434[0], *(_QWORD *)(v18 + 16));
            if (v430 != v432)
              free(v430);
            a6 = v403;
            v15 = v140;
            v16 = a1 + 3688;
            if (v433 != &v434[2])
              free(v433);
            v17 = (__int16 *)(a1 + 1693);
            if (v435 != v437)
              free(v435);
            if (v438 != (_QWORD *)v440)
              free(v438);
            if (v441 != v443)
              free(v441);
            v159 = __src;
            if (__src == v424)
              goto LABEL_46;
            goto LABEL_222;
          }
          if (v18 && (unsigned __int16)v19 == 246)
          {
            v399 = v15;
            v405 = a6;
            v181 = a4;
            if (a4)
            {
              v181 = a4;
              if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x1D)
                v181 = *(_QWORD *)(a4 + 48);
            }
            v401 = (int *)v181;
            v182 = *(_QWORD *)(v181 + 16);
            v183 = v182 & 0xFFFFFFFFFFFFFFF8;
            if ((v182 & 4) != 0)
              v183 = *(_QWORD *)v183;
            if (v183)
            {
              v184 = (*(_WORD *)(v183 + 8) & 0x7F) - 35;
              v183 -= 64;
              if (v184 >= 3)
                v183 = 0;
            }
            v435 = v401;
            v436 = v183;
            v437[0] = a1;
            v437[1] = v413;
            *(_QWORD *)&v417 = &v435;
            *((_QWORD *)&v417 + 1) = a1;
            v185 = *(unsigned __int8 **)(v18 + 40);
            if (v185)
            {
              LODWORD(v438) = 4;
              __src = 0;
              LODWORD(v433) = 3;
              v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
              sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v433);
              v194 = *(unsigned int *)(a1 + 3696);
              v195 = v194 - 2;
              v196 = *(_QWORD *)(a1 + 3688);
              v197 = *(_DWORD *)(v196 + 576 * (v194 - 2));
              if (v197 == 5)
              {
                *(_BYTE *)(v196 + 576 * v194 - 4) = *(_BYTE *)(v196 + 576 * v195 + 572);
                v198 = 1;
              }
              else if (v197 == 2)
              {
                *(_BYTE *)(v196 + 576 * v194 - 4) = 1;
                v198 = *(_BYTE *)(v196 + 576 * v195 + 573) != 0;
              }
              else
              {
                v198 = 0;
                *(_BYTE *)(v196 + 576 * v194 - 4) = 0;
              }
              v199 = v196 + 576 * v194;
              *(_BYTE *)(v199 - 3) = v198;
              *(_WORD *)(a1 + 1693) = 0;
              if (*(_DWORD *)(a1 + 1848))
              {
                llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v199 - 560));
                sub_22EAEAE08(v411, (uint64_t *)(v199 - 496));
              }
              v397 = sub_22EE48168((uint64_t)&v417, v185);
              sub_22EB48E64(a1);
            }
            else
            {
              v397 = 0;
            }
            v200 = sub_22F36FB58(*(_QWORD *)(a1 + 88));
            v201 = *(_QWORD *)(v18 + 48);
            v408 = v200;
            if (v200 == v201)
            {
              v203 = *(_DWORD *)(v200 + 8);
            }
            else
            {
              v202 = *(unsigned int *)(v200 + 8);
              v203 = *(_DWORD *)(v201 + 8);
              if (v202 >= v203)
              {
                if (v203)
                {
                  v210 = *(_DWORD **)v201;
                  v211 = *(_QWORD *)v201 + 136 * v203;
                  v212 = *(_DWORD **)v200;
                  do
                  {
                    v213 = (uint64_t **)(v210 + 2);
                    v214 = *v210;
                    v210 += 34;
                    v215 = (uint64_t)(v212 + 2);
                    *v212 = v214;
                    v212 += 34;
                    sub_22E86154C(v215, v213);
                  }
                  while (v210 != (_DWORD *)v211);
                  LODWORD(v202) = *(_DWORD *)(v408 + 8);
                  v216 = *(_QWORD *)v408;
                }
                else
                {
                  v216 = *(_QWORD *)v200;
                  v212 = *(_DWORD **)v200;
                }
                v226 = (char **)(v216 + 136 * v202);
                if (v226 != (char **)v212)
                {
                  do
                  {
                    v227 = v226 - 17;
                    sub_22F2BF8FC(v226 - 16);
                    v226 = v227;
                  }
                  while (v227 != (char **)v212);
                }
              }
              else
              {
                if (*(_DWORD *)(v200 + 12) < v203)
                {
                  if ((_DWORD)v202)
                  {
                    v252 = *(_QWORD *)v200 - 128;
                    v253 = 136 * v202;
                    do
                    {
                      sub_22F2BF8FC((char **)(v252 + v253));
                      v253 -= 136;
                    }
                    while (v253);
                  }
                  *(_DWORD *)(v408 + 8) = 0;
                  sub_22F2BF970(v408);
                }
                else if ((_DWORD)v202)
                {
                  v204 = *(_DWORD **)v201;
                  v205 = *(_QWORD *)v201 + 136 * v202;
                  v206 = *(_DWORD **)v200;
                  do
                  {
                    v207 = (uint64_t **)(v204 + 2);
                    v208 = *v204;
                    v204 += 34;
                    v209 = (uint64_t)(v206 + 2);
                    *v206 = v208;
                    v206 += 34;
                    sub_22E86154C(v209, v207);
                  }
                  while (v204 != (_DWORD *)v205);
                  goto LABEL_374;
                }
                v202 = 0;
LABEL_374:
                v254 = *(unsigned int *)(v201 + 8);
                if (v202 != v254)
                {
                  v255 = *(_DWORD **)v201;
                  v256 = (uint64_t **)&v255[34 * v254];
                  v257 = *(_QWORD *)v408;
                  v258 = 17 * v202;
                  v259 = v256;
                  v260 = 2 * v258;
                  do
                  {
                    v261 = v257 + v260 * 4;
                    v262 = (uint64_t **)&v255[v260];
                    *(_DWORD *)v261 = v255[v260];
                    *(_QWORD *)(v261 + 16) = 0x200000000;
                    *(_QWORD *)(v261 + 8) = v257 + v260 * 4 + 24;
                    if (v255[v260 + 4])
                      sub_22E86154C(v257 + v260 * 4 + 8, v262 + 1);
                    v257 += 136;
                    v255 += 34;
                  }
                  while (v262 + 17 != v259);
                }
              }
              *(_DWORD *)(v408 + 8) = v203;
            }
            v433 = (void *)a1;
            *(_OWORD *)v434 = v417;
            if (v203)
            {
              v263 = *(_QWORD *)v408;
              v264 = *(_QWORD *)v408 + 136 * v203;
              do
              {
                v265 = *(unsigned int *)(v263 + 16);
                if ((_DWORD)v265)
                {
                  v266 = *(unsigned __int8 ***)(v263 + 8);
                  for (i = 56 * v265; i; i -= 56)
                  {
                    if (*v266)
                    {
                      LODWORD(v438) = 4;
                      __src = 0;
                      LODWORD(v430) = 3;
                      v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
                      sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v430);
                      v268 = *(unsigned int *)(a1 + 3696);
                      v269 = v268 - 2;
                      v270 = *(_QWORD *)(a1 + 3688);
                      v271 = *(_DWORD *)(v270 + 576 * (v268 - 2));
                      if (v271 == 5)
                      {
                        *(_BYTE *)(v270 + 576 * v268 - 4) = *(_BYTE *)(v270 + 576 * v269 + 572);
                        v272 = 1;
                      }
                      else if (v271 == 2)
                      {
                        *(_BYTE *)(v270 + 576 * v268 - 4) = 1;
                        v272 = *(_BYTE *)(v270 + 576 * v269 + 573) != 0;
                      }
                      else
                      {
                        v272 = 0;
                        *(_BYTE *)(v270 + 576 * v268 - 4) = 0;
                      }
                      v273 = v270 + 576 * v268;
                      *(_BYTE *)(v273 - 3) = v272;
                      *(_WORD *)(a1 + 1693) = 0;
                      if (*(_DWORD *)(a1 + 1848))
                      {
                        llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v273 - 560));
                        sub_22EAEAE08(v411, (uint64_t *)(v273 - 496));
                      }
                      v274 = sub_22EE48168((uint64_t)v434, *v266);
                      if (v274 < 2)
                      {
                        sub_22EB48E64(a1);
                        goto LABEL_417;
                      }
                      *v266 = (unsigned __int8 *)(v274 & 0xFFFFFFFFFFFFFFFELL);
                      sub_22EB48E64(a1);
                    }
                    v266 += 7;
                  }
                }
                v263 += 136;
              }
              while (v263 != v264);
            }
            sub_22EC993F8(a1, (uint64_t)v401, v397 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v408, *(_DWORD *)(v18 + 88), *(_QWORD *)(v18 + 16), (uint64_t)&v430);
            if (v432[0])
            {
              v275 = v430;
              v276 = (unsigned __int8 *)v431;
              v277 = sub_22EFFA6B0((unsigned __int8 *)v431);
              if (*v277 != 161)
                goto LABEL_454;
              v278 = *((_QWORD *)v277 + 2);
              if (!v278 || (*(_DWORD *)(v278 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
                goto LABEL_454;
              v280 = *(_QWORD *)(v278 + 144);
              v281 = v280 & 0xFFFFFFFFFFFFFFF8;
              if ((v280 & 6) != 0 || v281 == 0)
                goto LABEL_454;
              if (sub_22E49F868(*(_QWORD *)(v281 + 48)))
              {
                v396 = *(_BYTE *)(a1 + 11952);
                v398 = *(_DWORD *)(a1 + 8456);
                v394 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
                v395 = *v410;
                sub_22EE03478(a1);
                if (!v283)
                  *(_BYTE *)(a1 + 11952) = 1;
                *v410 = 1;
                v284 = *(_BYTE *)(a1 + 12032);
                *(_BYTE *)(a1 + 12032) = 1;
                sub_22EFEB554(*(_QWORD *)(a1 + 88), **v413, (uint64_t)(*v413)[1]);
                v286 = sub_22F34A594(a1, v281, v285, v401[6]);
                if (v286)
                {
                  v287 = v286;
                  v288 = 0;
                  if (sub_22EF71270(*(_QWORD *)(a1 + 88), *(_QWORD *)(v286 + 48), v275[6], 0, 0) >= 0x10)
                  {
                    v288 = 1;
                    sub_22EE44C50(a1, v401[6], v287, 1, 0, 0);
                    v289 = sub_22EFBF86C(v287, (unint64_t *)&__src, 0);
                    v290 = 0x100000000;
                    if (v289)
                      v290 = 0;
                    *(_QWORD *)(v287 + 80) = *(_QWORD *)(v287 + 80) & 0xFFFFFFFEFFFFFFFFLL | v290;
                    v291 = *(_QWORD *)(a1 + 88);
                    v292 = *(_DWORD *)(v287 + 24);
                    v402 = *(_QWORD *)(v287 + 48);
                    __src = *(void **)(v287 + 40);
                    v423[0] = v292;
                    sub_22EFC6D6C((uint64_t)v424, (uint64_t)__src);
                    v276 = (unsigned __int8 *)sub_22E3CD3D4(v291 + 2032, 32, 3);
                    sub_22EFF6AE4((uint64_t)v276, v291, 0, 0, 0, v287, 0, (uint64_t)&__src, 0, 0, v402, 0, 0, 0);
                  }
                }
                else
                {
                  v288 = 0;
                }
                *(_BYTE *)(a1 + 12032) = v284;
                *(_DWORD *)(a1 + 8456) = v398;
                *(_BYTE *)(a1 + 11952) = v396;
                *v410 = v395;
                v309 = *(_QWORD *)(a1 + 104);
                if (*(_DWORD *)(v309 + 180) == 5)
                  *(_BYTE *)(v309 + 170) = 1;
                v310 = v394 ? 3 : 0;
                *(_DWORD *)(v309 + 180) = v310;
                if (v288)
                {
LABEL_454:
                  __src = v424;
                  *(_QWORD *)v423 = 0x800000000;
                  v441 = v443;
                  v442 = 0x800000000;
                  v438 = v440;
                  v439 = 0x800000000;
                  v311 = *(unsigned int *)(v18 + 56);
                  if ((_DWORD)v311)
                  {
                    v313 = *(unsigned __int8 ***)(v18 + 64);
                    v314 = 8 * v311;
                    do
                    {
                      v315 = sub_22EE48168((uint64_t)&v417, *v313);
                      if ((v315 & 1) == 0)
                      {
                        v316 = v423[0];
                        if (v423[0] >= (unint64_t)v423[1])
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v316 = v423[0];
                        }
                        *((_QWORD *)__src + v316) = v315 & 0xFFFFFFFFFFFFFFFELL;
                        ++v423[0];
                      }
                      ++v313;
                      v314 -= 8;
                    }
                    while (v314);
                  }
                  v312 = *(unsigned int *)(v18 + 72);
                  if ((_DWORD)v312)
                  {
                    v317 = *(unsigned __int8 ***)(v18 + 80);
                    v318 = 8 * v312;
                    do
                    {
                      v319 = sub_22EE48168((uint64_t)&v417, *v317);
                      if ((v319 & 1) == 0)
                      {
                        v320 = v442;
                        if (v442 >= (unint64_t)HIDWORD(v442))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v320 = v442;
                        }
                        v441[v320] = v319 & 0xFFFFFFFFFFFFFFFELL;
                        LODWORD(v442) = v442 + 1;
                      }
                      ++v317;
                      v318 -= 8;
                    }
                    while (v318);
                  }
                  sub_22F34A7EC((unsigned int *)&v438, (uint64_t)v438 + 4 * v439, *(int **)(v18 + 96), (int *)(*(_QWORD *)(v18 + 96) + 4 * *(unsigned int *)(v18 + 88)));
                  sub_22EC9A820((_QWORD *)a1, (uint64_t)v275, (uint64_t)v276, (_DWORD *)v408, (uint64_t *)__src, v423[0], v441, v442, v438, v439, 0, 0, *(_QWORD *)(v18 + 16));
                  if (v438 != (_QWORD *)v440)
                    free(v438);
                  if (v441 != v443)
                    free(v441);
                  if (__src != v424)
                    free(__src);
                }
              }
            }
LABEL_417:
            a6 = v405;
            v15 = v399;
            goto LABEL_418;
          }
          if (v18 && (unsigned __int16)v19 == 86)
          {
            LODWORD(v438) = 4;
            __src = 0;
            LODWORD(v435) = 3;
            v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
            sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
            v88 = *(unsigned int *)(a1 + 3696);
            v89 = v88 - 2;
            v90 = *(_QWORD *)(a1 + 3688);
            v91 = *(_DWORD *)(v90 + 576 * (v88 - 2));
            if (v91 == 5)
            {
              *(_BYTE *)(v90 + 576 * v88 - 4) = *(_BYTE *)(v90 + 576 * v89 + 572);
              v92 = 1;
            }
            else if (v91 == 2)
            {
              *(_BYTE *)(v90 + 576 * v88 - 4) = 1;
              v92 = *(_BYTE *)(v90 + 576 * v89 + 573) != 0;
            }
            else
            {
              v92 = 0;
              *(_BYTE *)(v90 + 576 * v88 - 4) = 0;
            }
            v93 = v90 + 576 * v88;
            *(_BYTE *)(v93 - 3) = v92;
            *(_WORD *)(a1 + 1693) = 0;
            if (*(_DWORD *)(a1 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v93 - 560));
              sub_22EAEAE08(v411, (uint64_t *)(v93 - 496));
            }
            v94 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), a2, v87);
            if ((v94 & 1) == 0)
            {
              v96 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 48), a2, v95);
              if ((v96 & 1) == 0)
                sub_22EA4D338((_QWORD *)a1, a4, (__int128 *)v18, v94 & 0xFFFFFFFFFFFFFFFELL, v96 & 0xFFFFFFFFFFFFFFFELL);
            }
            sub_22EB48E64(a1);
            v20 = *(unsigned __int16 *)(v18 + 32) | (*(unsigned __int8 *)(v18 + 34) << 16);
          }
        }
        if (v18 && (unsigned __int16)v20 == 89)
          break;
LABEL_132:
        if ((unsigned __int16)v20 == 157 || (unsigned __int16)v20 == 155)
        {
          if ((*(_BYTE *)(a4 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a4);
            v169 = *((unsigned int *)v168 + 2);
            if ((_DWORD)v169)
            {
              v170 = 8 * v169;
              v171 = *v168;
              while (*(_WORD *)(*(_QWORD *)v171 + 32) != 155)
              {
                v171 += 8;
                v170 -= 8;
                if (!v170)
                  goto LABEL_135;
              }
            }
            else
            {
              v171 = *v168;
            }
            a2 = (uint64_t)v413;
            v17 = (__int16 *)(a1 + 1693);
            v16 = a1 + 3688;
            if (v171 != *v168 + 8 * v169)
              goto LABEL_46;
          }
LABEL_135:
          if (sub_22E49F808(a4))
            goto LABEL_46;
          v20 = *(unsigned __int16 *)(v18 + 32) | (*(unsigned __int8 *)(v18 + 34) << 16);
        }
        if (v18 && (unsigned __int16)v20 - 77 >= 0xFFFFFFFC)
        {
          sub_22F31FBD4((_QWORD *)a1, a4, v18, 4 - (unsigned __int16)(v20 - 73));
          goto LABEL_46;
        }
        switch((unsigned __int16)v20)
        {
          case 'N':
            v115 = 1;
            goto LABEL_150;
          case 'P':
            v115 = 0;
            goto LABEL_150;
          case 'R':
            v115 = 2;
LABEL_150:
            sub_22F3203A0((_QWORD *)a1, (uint64_t *)a4, v18, v115, 1);
            goto LABEL_46;
        }
        if (v18 && (unsigned __int16)v20 == 279)
        {
          if (sub_22E90DE00(a4))
            goto LABEL_46;
          sub_22F39C0C0(v18, *(_QWORD *)(a1 + 88));
LABEL_323:
          v55 = v117;
          v54 = a4;
LABEL_42:
          sub_22EFCA95C(v54, v55);
          goto LABEL_46;
        }
        if (v18 && (unsigned __int16)v20 == 274)
        {
          if (sub_22F30A204(a4))
            goto LABEL_46;
          sub_22F39AD48(v18, *(_QWORD *)(a1 + 88));
          goto LABEL_323;
        }
        if (v18 && (unsigned __int16)v20 == 302)
        {
          sub_22F39F6C4(v18, *(_QWORD *)(a1 + 88));
          goto LABEL_323;
        }
        if (v18 && (unsigned __int16)v20 == 407)
        {
          __src = v424;
          *(_QWORD *)v423 = 0x400000000;
          v118 = *(unsigned int *)(v18 + 40);
          if (!(_DWORD)v118)
          {
            v119 = 0;
            v172 = (uint64_t **)v424;
LABEL_252:
            sub_22EA58368((_QWORD *)a1, a4, v18, *(_DWORD *)(v18 + 36), v172, v119);
            v159 = __src;
            v16 = a1 + 3688;
            if (__src == v424)
              goto LABEL_46;
LABEL_222:
            free(v159);
            goto LABEL_46;
          }
          v119 = 0;
          v120 = *(unint64_t ***)(v18 + 48);
          v404 = a6;
          *(_QWORD *)v407 = &v120[v118];
          while (2)
          {
            v121 = **v120;
            v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v122 && *(_BYTE *)(v122 + 16) == 47)
            {
              v123 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 32);
              v124 = *(_QWORD *)(*(_QWORD *)a2
                               + 16
                               * (*(_DWORD *)(a2 + 8)
                                + *(_DWORD *)(a2 + 80)
                                + ((unsigned __int16)~(_WORD)v123 | 0xFFFF8000)))
                   + 24 * (v123 >> 16);
              if (*(_DWORD *)v124 == 1)
              {
                v125 = *(_QWORD *)(a1 + 88);
                v121 = *(_QWORD *)(v124 + 8);
                goto LABEL_168;
              }
              v128 = *(unsigned int *)(v124 + 4);
              if ((_DWORD)v128)
              {
                v129 = v15;
                v130 = 24 * v128;
                v131 = (unint64_t *)(*(_QWORD *)(v124 + 8) + 8);
                do
                {
                  v132 = *v131;
                  v131 += 3;
                  v133 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v132, 0);
                  v134 = v423[0];
                  if (v423[0] >= (unint64_t)v423[1])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v134 = v423[0];
                  }
                  *((_QWORD *)__src + v134) = v133;
                  v119 = ++v423[0];
                  v130 -= 24;
                }
                while (v130);
                a6 = v404;
                v15 = v129;
                v17 = (__int16 *)(a1 + 1693);
              }
            }
            else
            {
              v125 = *(_QWORD *)(a1 + 88);
LABEL_168:
              v126 = sub_22EF579A8(v125, v121, 0);
              v127 = v423[0];
              if (v423[0] >= (unint64_t)v423[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v127 = v423[0];
              }
              *((_QWORD *)__src + v127) = v126;
              v119 = ++v423[0];
            }
            if (++v120 == *(unint64_t ***)v407)
            {
              v172 = (uint64_t **)__src;
              goto LABEL_252;
            }
            continue;
          }
        }
        if (v18 && (unsigned __int16)v20 == 413)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
          v161 = *(unsigned int *)(a1 + 3696);
          v162 = v161 - 2;
          v163 = *(_QWORD *)(a1 + 3688);
          v164 = *(_DWORD *)(v163 + 576 * (v161 - 2));
          if (v164 == 5)
          {
            *(_BYTE *)(v163 + 576 * v161 - 4) = *(_BYTE *)(v163 + 576 * v162 + 572);
            v165 = 1;
          }
          else if (v164 == 2)
          {
            *(_BYTE *)(v163 + 576 * v161 - 4) = 1;
            v165 = *(_BYTE *)(v163 + 576 * v162 + 573) != 0;
          }
          else
          {
            v165 = 0;
            *(_BYTE *)(v163 + 576 * v161 - 4) = 0;
          }
          v166 = v163 + 576 * v161;
          *(_BYTE *)(v166 - 3) = v165;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v166 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v166 - 496));
          }
          a2 = (uint64_t)v413;
          v167 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v160);
          if ((v167 & 1) == 0)
            sub_22EA58BF4((_QWORD *)a1, a4, (_OWORD *)v18, v167 & 0xFFFFFFFFFFFFFFFELL);
          sub_22EB48E64(a1);
          goto LABEL_419;
        }
        if (v18 && (unsigned __int16)v20 == 414)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v174 = *(unsigned int *)(a1 + 3696);
          v175 = v174 - 2;
          v176 = *(_QWORD *)(a1 + 3688);
          v177 = *(_DWORD *)(v176 + 576 * (v174 - 2));
          if (v177 == 5)
          {
            *(_BYTE *)(v176 + 576 * v174 - 4) = *(_BYTE *)(v176 + 576 * v175 + 572);
            v178 = 1;
          }
          else if (v177 == 2)
          {
            *(_BYTE *)(v176 + 576 * v174 - 4) = 1;
            v178 = *(_BYTE *)(v176 + 576 * v175 + 573) != 0;
          }
          else
          {
            v178 = 0;
            *(_BYTE *)(v176 + 576 * v174 - 4) = 0;
          }
          v179 = v176 + 576 * v174;
          *(_BYTE *)(v179 - 3) = v178;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v179 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v179 - 496));
          }
          v180 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v173);
          if ((v180 & 1) == 0)
            sub_22EA59188((_QWORD *)a1, a4, (_OWORD *)v18, v180 & 0xFFFFFFFFFFFFFFFELL);
LABEL_273:
          sub_22EB48E64(a1);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 424)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v187 = *(unsigned int *)(a1 + 3696);
          v188 = v187 - 2;
          v189 = *(_QWORD *)(a1 + 3688);
          v190 = *(_DWORD *)(v189 + 576 * (v187 - 2));
          if (v190 == 5)
          {
            *(_BYTE *)(v189 + 576 * v187 - 4) = *(_BYTE *)(v189 + 576 * v188 + 572);
            v191 = 1;
          }
          else if (v190 == 2)
          {
            *(_BYTE *)(v189 + 576 * v187 - 4) = 1;
            v191 = *(_BYTE *)(v189 + 576 * v188 + 573) != 0;
          }
          else
          {
            v191 = 0;
            *(_BYTE *)(v189 + 576 * v187 - 4) = 0;
          }
          v192 = v189 + 576 * v187;
          *(_BYTE *)(v192 - 3) = v191;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v192 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v192 - 496));
          }
          v193 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v186);
          if ((v193 & 1) == 0)
            sub_22F320EDC((_QWORD *)a1, a4, v18, *(_DWORD *)(v18 + 36), v193 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 381)
        {
          sub_22F325EEC((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 380)
        {
          sub_22F325E40((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 383)
        {
          sub_22F326044((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 382)
        {
          sub_22F325F98((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 395)
        {
          sub_22F3262B0((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 408)
        {
          sub_22F32642C((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 426)
        {
          sub_22F3265CC((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 433)
        {
          sub_22F32666C((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 440)
        {
          sub_22F326880((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 446)
        {
          sub_22F3269DC((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 445)
        {
          sub_22F326930((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 448)
        {
          sub_22EA635AC((_QWORD *)a1, a4, (_OWORD *)v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 449)
        {
          sub_22F326B8C((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 373)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v229 = *(unsigned int *)(a1 + 3696);
          v230 = v229 - 2;
          v231 = *(_QWORD *)(a1 + 3688);
          v232 = *(_DWORD *)(v231 + 576 * (v229 - 2));
          if (v232 == 5)
          {
            *(_BYTE *)(v231 + 576 * v229 - 4) = *(_BYTE *)(v231 + 576 * v230 + 572);
            v233 = 1;
          }
          else if (v232 == 2)
          {
            *(_BYTE *)(v231 + 576 * v229 - 4) = 1;
            v233 = *(_BYTE *)(v231 + 576 * v230 + 573) != 0;
          }
          else
          {
            v233 = 0;
            *(_BYTE *)(v231 + 576 * v229 - 4) = 0;
          }
          v234 = v231 + 576 * v229;
          *(_BYTE *)(v234 - 3) = v233;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v234 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v234 - 496));
          }
          v235 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v228);
          if ((v235 & 1) == 0)
            sub_22F325694((_QWORD *)a1, a4, v18, v235 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 374)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v237 = *(unsigned int *)(a1 + 3696);
          v238 = v237 - 2;
          v239 = *(_QWORD *)(a1 + 3688);
          v240 = *(_DWORD *)(v239 + 576 * (v237 - 2));
          if (v240 == 5)
          {
            *(_BYTE *)(v239 + 576 * v237 - 4) = *(_BYTE *)(v239 + 576 * v238 + 572);
            v241 = 1;
          }
          else if (v240 == 2)
          {
            *(_BYTE *)(v239 + 576 * v237 - 4) = 1;
            v241 = *(_BYTE *)(v239 + 576 * v238 + 573) != 0;
          }
          else
          {
            v241 = 0;
            *(_BYTE *)(v239 + 576 * v237 - 4) = 0;
          }
          v242 = v239 + 576 * v237;
          *(_BYTE *)(v242 - 3) = v241;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v242 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v242 - 496));
          }
          v243 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v236);
          if ((v243 & 1) == 0)
            sub_22F32598C(a1, (_QWORD *)a4, v18, v243 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 378)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v245 = *(unsigned int *)(a1 + 3696);
          v246 = v245 - 2;
          v247 = *(_QWORD *)(a1 + 3688);
          v248 = *(_DWORD *)(v247 + 576 * (v245 - 2));
          if (v248 == 5)
          {
            *(_BYTE *)(v247 + 576 * v245 - 4) = *(_BYTE *)(v247 + 576 * v246 + 572);
            v249 = 1;
          }
          else if (v248 == 2)
          {
            *(_BYTE *)(v247 + 576 * v245 - 4) = 1;
            v249 = *(_BYTE *)(v247 + 576 * v246 + 573) != 0;
          }
          else
          {
            v249 = 0;
            *(_BYTE *)(v247 + 576 * v245 - 4) = 0;
          }
          v250 = v247 + 576 * v245;
          *(_BYTE *)(v250 - 3) = v249;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v250 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v250 - 496));
          }
          v251 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v244);
          if ((v251 & 1) == 0)
            sub_22F325B94((_QWORD *)a1, a4, v18, v251 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 379)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v294 = *(unsigned int *)(a1 + 3696);
          v295 = v294 - 2;
          v296 = *(_QWORD *)(a1 + 3688);
          v297 = *(_DWORD *)(v296 + 576 * (v294 - 2));
          if (v297 == 5)
          {
            *(_BYTE *)(v296 + 576 * v294 - 4) = *(_BYTE *)(v296 + 576 * v295 + 572);
            v298 = 1;
          }
          else if (v297 == 2)
          {
            *(_BYTE *)(v296 + 576 * v294 - 4) = 1;
            v298 = *(_BYTE *)(v296 + 576 * v295 + 573) != 0;
          }
          else
          {
            v298 = 0;
            *(_BYTE *)(v296 + 576 * v294 - 4) = 0;
          }
          v299 = v296 + 576 * v294;
          *(_BYTE *)(v299 - 3) = v298;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v299 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v299 - 496));
          }
          v300 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v293);
          if ((v300 & 1) == 0)
            sub_22EA607EC((_QWORD *)a1, a4, (_OWORD *)v18, v300 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 210)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v302 = *(unsigned int *)(a1 + 3696);
          v303 = v302 - 2;
          v304 = *(_QWORD *)(a1 + 3688);
          v305 = *(_DWORD *)(v304 + 576 * (v302 - 2));
          if (v305 == 5)
          {
            *(_BYTE *)(v304 + 576 * v302 - 4) = *(_BYTE *)(v304 + 576 * v303 + 572);
            v306 = 1;
          }
          else if (v305 == 2)
          {
            *(_BYTE *)(v304 + 576 * v302 - 4) = 1;
            v306 = *(_BYTE *)(v304 + 576 * v303 + 573) != 0;
          }
          else
          {
            v306 = 0;
            *(_BYTE *)(v304 + 576 * v302 - 4) = 0;
          }
          v307 = v304 + 576 * v302;
          *(_BYTE *)(v307 - 3) = v306;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v307 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v307 - 496));
          }
          v308 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v301);
          if ((v308 & 1) == 0)
            sub_22EA60FB4((_QWORD *)a1, a4, (_OWORD *)v18, (_DWORD *)(v308 & 0xFFFFFFFFFFFFFFFELL));
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 402)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v322 = *(unsigned int *)(a1 + 3696);
          v323 = v322 - 2;
          v324 = *(_QWORD *)(a1 + 3688);
          v325 = *(_DWORD *)(v324 + 576 * (v322 - 2));
          if (v325 == 5)
          {
            *(_BYTE *)(v324 + 576 * v322 - 4) = *(_BYTE *)(v324 + 576 * v323 + 572);
            v326 = 1;
          }
          else if (v325 == 2)
          {
            *(_BYTE *)(v324 + 576 * v322 - 4) = 1;
            v326 = *(_BYTE *)(v324 + 576 * v323 + 573) != 0;
          }
          else
          {
            v326 = 0;
            *(_BYTE *)(v324 + 576 * v322 - 4) = 0;
          }
          v327 = v324 + 576 * v322;
          *(_BYTE *)(v327 - 3) = v326;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v327 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v327 - 496));
          }
          v328 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v321);
          if ((v328 & 1) == 0)
            sub_22EA61434((_QWORD *)a1, (_QWORD *)a4, (_OWORD *)v18, v328 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 403)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v330 = *(unsigned int *)(a1 + 3696);
          v331 = v330 - 2;
          v332 = *(_QWORD *)(a1 + 3688);
          v333 = *(_DWORD *)(v332 + 576 * (v330 - 2));
          if (v333 == 5)
          {
            *(_BYTE *)(v332 + 576 * v330 - 4) = *(_BYTE *)(v332 + 576 * v331 + 572);
            v334 = 1;
          }
          else if (v333 == 2)
          {
            *(_BYTE *)(v332 + 576 * v330 - 4) = 1;
            v334 = *(_BYTE *)(v332 + 576 * v331 + 573) != 0;
          }
          else
          {
            v334 = 0;
            *(_BYTE *)(v332 + 576 * v330 - 4) = 0;
          }
          v335 = v332 + 576 * v330;
          *(_BYTE *)(v335 - 3) = v334;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v335 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v335 - 496));
          }
          v336 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v329);
          if ((v336 & 1) == 0)
            sub_22F32635C((_QWORD *)a1, a4, v18, v336 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 411)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v338 = *(unsigned int *)(a1 + 3696);
          v339 = v338 - 2;
          v340 = *(_QWORD *)(a1 + 3688);
          v341 = *(_DWORD *)(v340 + 576 * (v338 - 2));
          if (v341 == 5)
          {
            *(_BYTE *)(v340 + 576 * v338 - 4) = *(_BYTE *)(v340 + 576 * v339 + 572);
            v342 = 1;
          }
          else if (v341 == 2)
          {
            *(_BYTE *)(v340 + 576 * v338 - 4) = 1;
            v342 = *(_BYTE *)(v340 + 576 * v339 + 573) != 0;
          }
          else
          {
            v342 = 0;
            *(_BYTE *)(v340 + 576 * v338 - 4) = 0;
          }
          v343 = v340 + 576 * v338;
          *(_BYTE *)(v343 - 3) = v342;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v343 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v343 - 496));
          }
          v344 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v337);
          if ((v344 & 1) == 0)
            sub_22F3264C8((_QWORD *)a1, a4, v18, v344 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 439)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v346 = *(unsigned int *)(a1 + 3696);
          v347 = v346 - 2;
          v348 = *(_QWORD *)(a1 + 3688);
          v349 = *(_DWORD *)(v348 + 576 * (v346 - 2));
          if (v349 == 5)
          {
            *(_BYTE *)(v348 + 576 * v346 - 4) = *(_BYTE *)(v348 + 576 * v347 + 572);
            v350 = 1;
          }
          else if (v349 == 2)
          {
            *(_BYTE *)(v348 + 576 * v346 - 4) = 1;
            v350 = *(_BYTE *)(v348 + 576 * v347 + 573) != 0;
          }
          else
          {
            v350 = 0;
            *(_BYTE *)(v348 + 576 * v346 - 4) = 0;
          }
          v351 = v348 + 576 * v346;
          *(_BYTE *)(v351 - 3) = v350;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v351 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v351 - 496));
          }
          v352 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v345);
          if ((v352 & 1) == 0)
            sub_22F3267B8((_QWORD *)a1, a4, v18, v352 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 447)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v354 = *(unsigned int *)(a1 + 3696);
          v355 = v354 - 2;
          v356 = *(_QWORD *)(a1 + 3688);
          v357 = *(_DWORD *)(v356 + 576 * (v354 - 2));
          if (v357 == 5)
          {
            *(_BYTE *)(v356 + 576 * v354 - 4) = *(_BYTE *)(v356 + 576 * v355 + 572);
            v358 = 1;
          }
          else if (v357 == 2)
          {
            *(_BYTE *)(v356 + 576 * v354 - 4) = 1;
            v358 = *(_BYTE *)(v356 + 576 * v355 + 573) != 0;
          }
          else
          {
            v358 = 0;
            *(_BYTE *)(v356 + 576 * v354 - 4) = 0;
          }
          v359 = v356 + 576 * v354;
          *(_BYTE *)(v359 - 3) = v358;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v359 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v359 - 496));
          }
          v360 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v353);
          if ((v360 & 1) == 0)
            sub_22F326A88((_QWORD *)a1, a4, v18, v360 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 453)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v362 = *(unsigned int *)(a1 + 3696);
          v363 = v362 - 2;
          v364 = *(_QWORD *)(a1 + 3688);
          v365 = *(_DWORD *)(v364 + 576 * (v362 - 2));
          if (v365 == 5)
          {
            *(_BYTE *)(v364 + 576 * v362 - 4) = *(_BYTE *)(v364 + 576 * v363 + 572);
            v366 = 1;
          }
          else if (v365 == 2)
          {
            *(_BYTE *)(v364 + 576 * v362 - 4) = 1;
            v366 = *(_BYTE *)(v364 + 576 * v363 + 573) != 0;
          }
          else
          {
            v366 = 0;
            *(_BYTE *)(v364 + 576 * v362 - 4) = 0;
          }
          v367 = v364 + 576 * v362;
          *(_BYTE *)(v367 - 3) = v366;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v367 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v367 - 496));
          }
          v368 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v361);
          if ((v368 & 1) == 0)
            sub_22F326C2C((_QWORD *)a1, a4, v18, v368 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 371)
        {
          sub_22F320FC4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 372)
        {
          sub_22F321114((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 376)
        {
          sub_22F321264((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 377)
        {
          sub_22F3213B4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 387)
        {
          sub_22F321504((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 389)
        {
          sub_22F321654((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 390)
        {
          sub_22F3217A4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 391)
        {
          sub_22F3218F4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 392)
        {
          sub_22F321A44((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 397)
        {
          sub_22F321B94((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 399)
        {
          sub_22F321C44((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 400)
        {
          sub_22F321D94((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 405)
        {
          sub_22F321EE4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 406)
        {
          sub_22F322034((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 410)
        {
          sub_22F322184((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 412)
        {
          sub_22F3222D4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 416)
        {
          sub_22F322424((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 417)
        {
          sub_22F322574((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 418)
        {
          sub_22F3226C4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 421)
        {
          sub_22F322814((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 422)
        {
          sub_22F322964((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 423)
        {
          sub_22F322AB4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 425)
        {
          sub_22F322C04((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 427)
        {
          sub_22F322CB4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 428)
        {
          sub_22F322D64((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 429)
        {
          sub_22F322E14((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 432)
        {
          sub_22F322EC4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 437)
        {
          sub_22F322F74((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 438)
        {
          sub_22F3230C4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 441)
        {
          sub_22F323214((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 442)
        {
          sub_22F323364((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 443)
        {
          sub_22F3234B4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 450)
        {
          sub_22F323564((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 451)
        {
          sub_22F3236B4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 454)
        {
          sub_22F323804((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 455)
        {
          sub_22F323954((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 456)
        {
          sub_22F323AA4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 457)
        {
          sub_22F323BF4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 458)
        {
          sub_22F323D44((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 459)
        {
          sub_22F323E94((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 460)
        {
          sub_22F323FE4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 461)
        {
          sub_22F324134((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 462)
        {
          sub_22F324284((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 463)
        {
          sub_22F3243D4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 464)
        {
          sub_22F324524((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 465)
        {
          sub_22F324674((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 466)
        {
          sub_22F324724((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 468)
        {
          sub_22F324874((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 470)
        {
          sub_22F3249C4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 473)
        {
          sub_22F324B14((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 472)
        {
          sub_22F324C64((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 474)
        {
          sub_22F324DB4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 370)
        {
          sub_22F324F04((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 386)
        {
          sub_22F324FB4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 384)
        {
          sub_22F325064((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 393)
        {
          sub_22F325114((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 430)
        {
          sub_22F3251C4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 431)
        {
          sub_22F325274((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 434)
        {
          sub_22F325324((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 436)
        {
          sub_22F3253D4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 444)
        {
          sub_22F325484((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 452)
        {
          sub_22F325534((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 471)
        {
          sub_22F3255E4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 375)
        {
          sub_22F325DA4((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 385)
        {
          LODWORD(v438) = 4;
          __src = 0;
          LODWORD(v435) = 3;
          v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
          sub_22EB4DDB8(v415, (int *)&v438, (int *)&v441, v414, (uint64_t *)&__src, (int *)&v435);
          v370 = *(unsigned int *)(a1 + 3696);
          v371 = v370 - 2;
          v372 = *(_QWORD *)(a1 + 3688);
          v373 = *(_DWORD *)(v372 + 576 * (v370 - 2));
          if (v373 == 5)
          {
            *(_BYTE *)(v372 + 576 * v370 - 4) = *(_BYTE *)(v372 + 576 * v371 + 572);
            v374 = 1;
          }
          else if (v373 == 2)
          {
            *(_BYTE *)(v372 + 576 * v370 - 4) = 1;
            v374 = *(_BYTE *)(v372 + 576 * v371 + 573) != 0;
          }
          else
          {
            v374 = 0;
            *(_BYTE *)(v372 + 576 * v370 - 4) = 0;
          }
          v375 = v372 + 576 * v370;
          *(_BYTE *)(v375 - 3) = v374;
          *(_WORD *)(a1 + 1693) = 0;
          if (*(_DWORD *)(a1 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v375 - 560));
            sub_22EAEAE08(v411, (uint64_t *)(v375 - 496));
          }
          v376 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), (uint64_t)v413, v369);
          if ((v376 & 1) == 0)
            sub_22F3260F0((_QWORD *)a1, a4, v18, v376 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_273;
        }
        if (v18 && (unsigned __int16)v20 == 435)
        {
          sub_22F32671C((_QWORD *)a1, a4, v18);
          goto LABEL_418;
        }
        if (v18 && (unsigned __int16)v20 == 388)
        {
          sub_22F3261EC((_QWORD *)a1, a4, v18, *(_DWORD *)(v18 + 36));
          goto LABEL_418;
        }
        if (!v18 || (unsigned __int16)v20 != 404)
        {
          if (v409 && (v20 & 0x80000) != 0)
          {
            v378 = *(uint64_t **)(a1 + 12024);
            if (v378)
              v378 = (uint64_t *)sub_22F3490F8(v378, a6);
            __src = (void *)v18;
            *(_QWORD *)v423 = v378;
            v424[0] = a4;
            v379 = *(_DWORD *)(v409 + 8);
            v380 = *(_QWORD *)v409;
            if (v379 >= *(_DWORD *)(v409 + 12))
            {
              v392 = v380 + 24 * v379 > (unint64_t)&__src;
              if (v380 > (unint64_t)&__src || !v392)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v380 = *(_QWORD *)v409;
                goto LABEL_727;
              }
              v393 = (char *)&v423[-2] - v380;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v380 = *(_QWORD *)v409;
              p_src = (void **)&v393[*(_QWORD *)v409];
            }
            else
            {
LABEL_727:
              p_src = &__src;
            }
            v382 = v380 + 24 * *(unsigned int *)(v409 + 8);
            v383 = *(_OWORD *)p_src;
            *(_QWORD *)(v382 + 16) = p_src[2];
            *(_OWORD *)v382 = v383;
            ++*(_DWORD *)(v409 + 8);
            goto LABEL_418;
          }
          v384 = *(_QWORD *)(a4 + 16);
          v385 = v384 & 0xFFFFFFFFFFFFFFF8;
          if ((v384 & 4) != 0)
            v385 = *(_QWORD *)v385;
          if (v385)
          {
            v386 = (*(_WORD *)(v385 + 8) & 0x7F) - 35;
            v387 = v385 - 64;
            if (v386 >= 3)
              v388 = 0;
            else
              v388 = v387;
          }
          else
          {
            v388 = 0;
          }
          v389 = sub_22EFBAEF8(a4);
          sub_22EBBBB24((uint64_t)&__src, a1, v388, 0, v389);
          sub_22EE2CEE8(v18);
          if (v390)
          {
            v391 = v390;
            if (sub_22EE337A8(a4, v18))
              sub_22EFCA95C(a4, v391);
          }
          if (LOBYTE(v424[0]))
            *((_QWORD *)__src + 1286) = *(_QWORD *)v423;
LABEL_418:
          a2 = (uint64_t)v413;
LABEL_419:
          v17 = (__int16 *)(a1 + 1693);
          v16 = a1 + 3688;
          goto LABEL_46;
        }
        v377 = *(uint64_t **)(v18 + 40);
        if ((*(_BYTE *)(*(_QWORD *)(*v377 & 0xFFFFFFFFFFFFFFF0) + 17) & 2) == 0)
        {
          a2 = (uint64_t)v413;
          v17 = (__int16 *)(a1 + 1693);
          v16 = a1 + 3688;
LABEL_747:
          sub_22EA6191C((_QWORD *)a1, a4, (_OWORD *)v18, v377);
          goto LABEL_46;
        }
        a2 = (uint64_t)v413;
        v377 = (uint64_t *)sub_22EE03524(a1, *(uint64_t **)(v18 + 40), (uint64_t)v413, *(_DWORD *)(a4 + 24), 0, 0);
        v17 = (__int16 *)(a1 + 1693);
        v16 = a1 + 3688;
        if (v377)
          goto LABEL_747;
LABEL_46:
        if (++v13 == (uint64_t *)v15)
          goto LABEL_2;
      }
      LODWORD(v438) = 4;
      __src = 0;
      LODWORD(v435) = 3;
      v441 = (uint64_t *)*(unsigned int *)(a1 + 1704);
      sub_22EB4DDB8(v16, (int *)&v438, (int *)&v441, v17, (uint64_t *)&__src, (int *)&v435);
      v98 = *(unsigned int *)(a1 + 3696);
      v99 = v98 - 2;
      v100 = *(_QWORD *)(a1 + 3688);
      v101 = *(_DWORD *)(v100 + 576 * (v98 - 2));
      if (v101 == 5)
      {
        *(_BYTE *)(v100 + 576 * v98 - 4) = *(_BYTE *)(v100 + 576 * v99 + 572);
        v102 = 1;
      }
      else if (v101 == 2)
      {
        *(_BYTE *)(v100 + 576 * v98 - 4) = 1;
        v102 = *(_BYTE *)(v100 + 576 * v99 + 573) != 0;
      }
      else
      {
        v102 = 0;
        *(_BYTE *)(v100 + 576 * v98 - 4) = 0;
      }
      v103 = v100 + 576 * v98;
      *(_BYTE *)(v103 - 3) = v102;
      *(_WORD *)(a1 + 1693) = 0;
      if (*(_DWORD *)(a1 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap(v412, (llvm::SmallPtrSetImplBase *)(v103 - 560));
        sub_22EAEAE08(v411, (uint64_t *)(v103 - 496));
      }
      v104 = sub_22EE0A68C(a1, *(_QWORD *)(v18 + 40), a2, v97);
      if ((v104 & 1) == 0)
      {
        v106 = *(_QWORD *)(v18 + 48);
        if (!v106)
        {
          v108 = 0;
          goto LABEL_130;
        }
        v107 = sub_22EE0A68C(a1, v106, a2, v105);
        if ((v107 & 1) == 0)
        {
          v108 = v107 & 0xFFFFFFFFFFFFFFFELL;
LABEL_130:
          sub_22EA4D4B0((_QWORD *)a1, a4, (__int128 *)v18, v104 & 0xFFFFFFFFFFFFFFFELL, v108);
        }
      }
      sub_22EB48E64(a1);
      v20 = *(unsigned __int16 *)(v18 + 32) | (*(unsigned __int8 *)(v18 + 34) << 16);
      goto LABEL_132;
    }
  }
LABEL_2:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 104) & 0x20) != 0)
    sub_22EA56684((_QWORD *)a1, a4);
}

unint64_t sub_22EE374B8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BYTE *v31;
  int v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;

  v6 = *(_QWORD *)(a2 + 80);
  v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (uint64_t *)*v7;
  v8 = *v7;
  v9 = *a1;
  if ((*(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) == 0)
  {
    v38 = *(_DWORD *)(a2 + 24);
    v60 = *a1;
    v61 = v38;
    sub_22EB522D8((uint64_t)&v60, v8);
    goto LABEL_6;
  }
  v10 = sub_22EE03524(v9, v7, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), 0);
  if (v10)
  {
    v7 = (uint64_t *)v10;
LABEL_6:
    v11 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16480), 0);
  v11 = 1;
LABEL_7:
  v12 = *(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_BYTE *)(v12 + 16) == 13;
  else
    v13 = 0;
  if (!v13)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 13)
      v12 = sub_22F10CF48(v12);
    else
      v12 = 0;
  }
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v14 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 4) != 0)
    v15 = *(_QWORD *)v15;
  v16 = (*(_WORD *)(v15 + 8) & 0x7F) - 35;
  if (v15)
    v17 = v15 - 64;
  else
    v17 = 0;
  if (v16 >= 3)
    v17 = 0;
  if (v12)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18 && **(_BYTE **)(v12 + 24) == 103)
  {
    v58 = v17;
    v59 = v11;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v35 = sub_22F3B16C0(v17 + 64);
      v36 = sub_22EAC1E38(*a1);
      v37 = v36 + 48;
      if (!v36)
        v37 = 0;
      if (v35 == v37)
      {
        v46 = *(_QWORD *)(v58 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v58 + 40) & 7) == 0 && v46 != 0)
        {
          v48 = *(_QWORD *)(v46 + 16);
          if (*(_DWORD *)v48 == 11)
          {
            v49 = *(_QWORD *)(v48 + 16);
            v50 = *(_QWORD *)(v48 + 19);
            if (v49 == 0x745F6E6F6D6D6F63 && v50 == 0x657079745F6E6F6DLL)
            {
              v52 = *(_QWORD *)(a2 + 40);
              if ((v52 & 7) == 0)
              {
                v53 = v52 & 0xFFFFFFFFFFFFFFF8;
                if (v53)
                {
                  v54 = *(_DWORD **)(v53 + 16);
                  if (*v54 == 4 && v54[4] == 1701869940)
                  {
                    v55 = sub_22F1E361C(*(_QWORD **)(*a1 + 112), *(_DWORD *)(a2 + 56));
                    if (v55)
                    {
                      if (v55 != 3)
                      {
                        v56 = *(_QWORD *)(*a1 + 88);
                        v60 = *v7;
                        v57 = sub_22E4D27F8(&v60);
                        v7 = sub_22EF579A8(v56, v57, 0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v11 = v59;
  }
  v19 = *(_QWORD *)(*a1 + 88);
  v20 = a1[3];
  v21 = *(_DWORD *)(a2 + 56);
  v22 = *(_DWORD *)(a2 + 24);
  v23 = *(_QWORD *)(a2 + 40);
  if ((v23 & 7) != 0)
    v24 = 0;
  else
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
  if (a3)
    v25 = sub_22EFC46F8(v19, v20, v21, v22, v24, (uint64_t)v7);
  else
    v25 = sub_22EFC45FC(v19, v20, v21, v22, v24, (uint64_t)v7);
  v26 = v25;
  if (v11)
    sub_22EFC77E8(v25, 1);
  v27 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                              + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
  if (v27 && (*(_DWORD *)(v27 + 16) & 0xFE) == 0x2C
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
    && (v27 = sub_22F10CF48(v27)) != 0)
  {
    v39 = *(_QWORD *)(sub_22F114198(*(_QWORD *)(v27 + 24)) + 120);
    v40 = (v39 & 4) != 0 ? 0 : v39 & 0xFFFFFFFFFFFFFFF8;
    v41 = v40 == a2 ? v11 : 1;
    if ((v41 & 1) == 0)
    {
      v42 = *(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0);
      if (!v42 || (*(_DWORD *)(v42 + 16) & 0xFE) != 0x2C)
        v42 = sub_22F10CF48(v42);
      v43 = sub_22F114198(*(_QWORD *)(v42 + 24));
      sub_22F3AC924(v43, v26);
    }
  }
  v28 = sub_22EE37984(a2);
  if (v28)
  {
    v44 = sub_22EE37A18(*a1, *(_DWORD *)(a2 + 24), v28, (_DWORD *)a1[4], 0);
    if (!v44)
      return 0;
    v45 = v44;
    sub_22EA08320((_QWORD *)*a1, (unint64_t)v44, v26);
    sub_22F3494A8((unint64_t *)(v26 + 64), v45[9]);
  }
  sub_22EE33A90(*a1, a1[4], a2, v26, 0, 0);
  v29 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                              + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
  if (v29 && *(_BYTE *)(v29 + 16) == 18
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 18 && sub_22F10CF48(v29))
  {
    sub_22E90DA20(*a1, v26);
  }
  v30 = *(_DWORD *)(v26 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  *(_DWORD *)(v26 + 28) = v30;
  if ((*(_BYTE *)(a2 + 29) & 8) != 0)
  {
    v33 = 2048;
  }
  else
  {
    v31 = (_BYTE *)a2;
    while ((v31[29] & 8) == 0)
    {
      v31 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v31 + 40))(v31);
      if (v31 == (_BYTE *)a2 || v31 == 0)
      {
        v33 = 0;
        goto LABEL_50;
      }
    }
    v33 = 2048;
LABEL_50:
    v30 = *(_DWORD *)(v26 + 28);
  }
  *(_DWORD *)(v26 + 28) = v30 & 0xFFFFF7FF | v33;
  return v26;
}

unint64_t sub_22EE37984(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  unint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_BYTE *)(a1 + 64);
  v2 = (uint64_t *)(a1 + 64);
  if ((v3 & 3) != 0)
    return 0;
  result = sub_22E3CD31C(v2, a1);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
    {
      if ((*(_WORD *)(*v6 + 8) & 0x7Fu) - 35 > 2)
        return result;
      v6 = (_QWORD *)v6[1];
    }
    else if (((_WORD)v6[1] & 0x7Fu) - 35 >= 3)
    {
      return result;
    }
    v7 = *(_QWORD *)(result + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)(v8 + 8);
    if (v6 != (_QWORD *)v8)
      return 0;
  }
  return result;
}

_QWORD *sub_22EE37A18(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, int a5)
{
  _DWORD *v6;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  __int16 v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  __int16 v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 *v70;
  int v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _OWORD *v78;
  _OWORD *v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  _BYTE v123[96];
  uint64_t v124[12];
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  _DWORD v131[66];
  uint64_t v132;

  v6 = a4;
  v132 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 4) != 0)
    v11 = *(_QWORD *)v11;
  v12 = a4[20];
  if (sub_22EFC7ADC(v11))
  {
    if (!v12)
    {
      v17 = (int *)(a3 + 28);
      v16 = *(_DWORD *)(a3 + 28);
      v18 = v16 & 0x7F;
      v15 = 1;
LABEL_27:
      if ((v18 - 32) <= 0x20 && ((1 << (v18 - 32)) & 0x108000041) != 0)
        goto LABEL_31;
      if (v15)
      {
        v25 = *(_WORD *)(v11 + 8);
        if ((v25 & 0x7Fu) <= 0x18 && ((1 << (v25 & 0x7F)) & 0x1000006) != 0)
          goto LABEL_31;
        v27 = (v25 & 0x7E) != 0x46 && (v25 & 0x7Fu) - 52 >= 6;
        if (!v27)
          goto LABEL_31;
      }
      if ((v18 - 35) <= 2)
      {
        v28 = *(_QWORD *)(a3 + 128);
        if (v28)
        {
          if (((*(unsigned __int16 *)(v28 + 8) | (*(unsigned __int8 *)(v28 + 10) << 16)) & 0x100000) != 0)
          {
            if (sub_22EFC7E08(a3) > v6[20])
              goto LABEL_31;
            v16 = *v17;
          }
        }
      }
      v120 = a5;
      if ((v16 & 0x7Fu) - 38 < 0xFFFFFFFD)
      {
LABEL_57:
        if (v15)
        {
          v29 = a2;
          v30 = sub_22EE3B6BC(a1, a2, v11, (uint64_t)v6);
          if (!v30)
            return 0;
          v31 = v30;
          v32 = *(_QWORD *)(a3 + 16);
          v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
          if ((v32 & 4) != 0)
            v33 = (_QWORD *)*v33;
          if ((_QWORD *)v30 == v33)
            return (_QWORD *)a3;
          if ((*(_WORD *)(v30 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD || (sub_22EFC7ADC(v30) & 1) != 0)
          {
            v34 = 0;
          }
          else
          {
            v90 = *(_QWORD *)(v31 - 16);
            v91 = v6;
            if (v90)
              v92 = v90 & 0xFFFFFFFFFFFFFFF0;
            else
              v92 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v31 - 64);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 45)
              v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            else
              v93 = 0;
            v94 = *(_DWORD *)(sub_22F114198(*(_QWORD *)(v93 + 24)) + 72);
            if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v93 + 24)) + 74) & 2) == 0)
            {
              v129 = &unk_24FAB6EF8;
              LODWORD(v130) = 3591;
              if ((sub_22EE8B0B0(a1, v29, v92) & 1) != 0)
                return 0;
            }
            v34 = (v94 >> 17) & 1;
            v95 = sub_22F114198(*(_QWORD *)(v93 + 24));
            if (v95)
              v31 = v95 + 64;
            else
              v31 = 0;
            v6 = v91;
          }
          v35 = *(_QWORD *)(a3 + 40);
          if (v35)
          {
            v36 = *(_DWORD *)(a3 + 24);
            v129 = *(void **)(a3 + 40);
            LODWORD(v130) = v36;
            sub_22EFC6D6C((uint64_t)v131, v35);
            sub_22EE123D8(a1, (uint64_t)&v129, (uint64_t)v6, (uint64_t)v124);
            if (!v124[0])
              return 0;
            v37 = sub_22EFCE144(v31, v124[0]);
            if (!v37)
            {
LABEL_202:
              if ((*v17 & 0x7E) == 0x2E || (sub_22E9038B8(a1) & 1) != 0)
                return 0;
              if (v34)
              {
                sub_22E8FCA40((_QWORD *)a1, v29, 0xEBFu, 0, (uint64_t)&v129);
                v124[0] = *(_QWORD *)(a3 + 40);
                v96 = sub_22E894538((uint64_t)&v129, v124);
                if (v31)
                  v97 = v31 - 64;
                else
                  v97 = 0;
                v98 = *(_QWORD *)(v97 + 48);
                if (v98)
                  v99 = v98 & 0xFFFFFFFFFFFFFFF0;
                else
                  v99 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v97);
                *(_QWORD *)&v127 = v99;
                sub_22E8901B8(v96, (uint64_t *)&v127);
                sub_22E903BEC((unsigned int *)&v129);
                sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x16C9u, 0, (uint64_t)v123);
                v110 = (unsigned int *)v123;
LABEL_244:
                sub_22E903BEC(v110);
                return 0;
              }
              if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x43)
                v100 = a3;
              else
                v100 = 0;
              v101 = *(_QWORD *)(v100 + 16);
              v102 = v101 & 0xFFFFFFFFFFFFFFF8;
              if ((v101 & 4) != 0)
                v102 = *(_QWORD *)(v102 + 8);
              if (v102)
                v103 = v102 - 64;
              else
                v103 = 0;
              v104 = sub_22EE37A18(a1, v29, v103, v6, 0);
              sub_22E8FCA40((_QWORD *)a1, v29, 0xCE1u, 0, (uint64_t)&v129);
              v124[0] = *(_QWORD *)(a3 + 40);
              v105 = sub_22E894538((uint64_t)&v129, v124);
              v106 = *(_QWORD *)(v104 + 16);
              v107 = v106 & 0xFFFFFFFFFFFFFFF8;
              if ((v106 & 4) != 0)
                v107 = *(_QWORD *)v107;
              v108 = *(_WORD *)(v107 + 8) & 0x7F;
              v109 = -40;
              if (v108 > 0x46)
              {
                switch(v108)
                {
                  case 'S':
                    goto LABEL_237;
                  case 'G':
                    v109 = -56;
                    goto LABEL_237;
                  case 'Q':
                    goto LABEL_237;
                }
              }
              else
              {
                if (v108 <= 0x18)
                {
                  if (v108 == 16)
                    goto LABEL_223;
                  if (((1 << v108) & 0x1066) != 0)
                    goto LABEL_237;
                  if (v108 == 24)
                  {
LABEL_223:
                    v109 = -48;
LABEL_237:
                    v111 = v107 + v109;
                    v112 = *(_QWORD *)(v107 + v109 + 48);
                    if (v112)
                      v113 = v112 & 0xFFFFFFFFFFFFFFF0;
                    else
                      v113 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v111);
                    *(_QWORD *)&v127 = v113;
                    sub_22E8901B8(v105, (uint64_t *)&v127);
                    sub_22E903BEC((unsigned int *)&v129);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v104 + 24), 0x15CAu, 0, (uint64_t)&v129);
                    v114 = *(_QWORD *)(v104 + 48);
                    if (v114)
                      v115 = v114 & 0xFFFFFFFFFFFFFFF0;
                    else
                      v115 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v104);
                    v124[0] = v115;
                    sub_22E8901B8((uint64_t)&v129, v124);
                    v110 = (unsigned int *)&v129;
                    goto LABEL_244;
                  }
                }
                if (v108 == 70)
                {
LABEL_235:
                  v109 = -64;
                  goto LABEL_237;
                }
              }
              if (v108 - 52 < 6)
              {
                v109 = -72;
                goto LABEL_237;
              }
              if (v108 - 33 < 5)
                goto LABEL_235;
              goto LABEL_223;
            }
            v38 = *(_QWORD *)(a1 + 88);
            while (1)
            {
              v39 = (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFF8);
              if ((v37 & 4) == 0 || !v39)
                break;
              if (sub_22EE66964(v38, a3, *v39))
              {
                v22 = (_QWORD *)*v39;
                goto LABEL_201;
              }
              v37 = v39[1];
              if (!v37)
              {
                v22 = 0;
                goto LABEL_201;
              }
            }
            if (sub_22EE66964(v38, a3, (uint64_t)v39))
              v22 = v39;
            else
              v22 = 0;
          }
          else
          {
            v89 = *(_QWORD *)(a1 + 88);
            if ((*(_WORD *)(v31 + 8) & 0x80) != 0)
              sub_22EFCC320(v31);
            v22 = *(_QWORD **)(v31 + 16);
            if (!v22)
              goto LABEL_202;
            while ((sub_22EE66964(v89, a3, (uint64_t)v22) & 1) == 0)
            {
              v22 = (_QWORD *)(v22[1] & 0xFFFFFFFFFFFFFFF8);
              if (!v22)
                goto LABEL_202;
            }
          }
LABEL_201:
          if (v22)
            return v22;
          goto LABEL_202;
        }
        return (_QWORD *)a3;
      }
      if (!sub_22EFC7ADC(a3 + 64))
        return (_QWORD *)a3;
      v40 = *(_QWORD *)(a3 + 136);
      if ((v40 & 4) != 0 || (v41 = v40 & 0xFFFFFFFFFFFFFFF8, (v40 & 0xFFFFFFFFFFFFFFF8) == 0))
      {
        if ((*v17 & 0x7F) != 0x25)
        {
          v119 = 0;
          goto LABEL_90;
        }
        v42 = *(_QWORD *)(a3 + 152);
        v41 = v42 & 0xFFFFFFFFFFFFFFF8;
        if ((v42 & 4) != 0 && v41)
        {
          do
          {
            v43 = *(_QWORD *)(*(_QWORD *)v41 + 152);
            v41 = v43 & 0xFFFFFFFFFFFFFFF8;
          }
          while ((v43 & 4) != 0 && v41);
        }
      }
      v119 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v41 + 32))(v41);
LABEL_90:
      v44 = *(_QWORD *)(a1 + 216);
      v45 = a2;
      v118 = a2;
      while (1)
      {
        while (1)
        {
          v46 = *(_WORD *)(v44 + 8) & 0x7F;
          if (v46 == 16 || v46 == 83)
            goto LABEL_57;
          v47 = v44;
          v48 = sub_22EFCC008(v44);
          if (v48 == sub_22EFCC008(a3 + 64))
            return (_QWORD *)a3;
          v49 = *(_WORD *)(v47 + 8);
          v50 = (v49 & 0x7F) - 38;
          if (v50 >= 0xFFFFFFFD)
            v22 = (_QWORD *)(v47 - 64);
          else
            v22 = 0;
          v51 = v47;
          if (v50 >= 0xFFFFFFFD)
          {
            v121 = v47;
            if ((*(_DWORD *)(v47 - 36) & 0x7E) == 0x24 && v119)
            {
              v52 = *(_QWORD *)(v47 + 88);
              v53 = v52 & 0xFFFFFFFFFFFFFFF8;
              if ((v52 & 4) != 0 && v53)
              {
                do
                {
                  v54 = *(_QWORD *)(*(_QWORD *)v53 + 152);
                  v53 = v54 & 0xFFFFFFFFFFFFFFF8;
                }
                while ((v54 & 4) != 0 && v53);
              }
              v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 32))(v119);
              while (1)
              {
                v56 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v53 + 32))(v53);
                if (v55 == v56)
                  break;
                v53 = *(_QWORD *)sub_22EFE9368(v56) & 0xFFFFFFFFFFFFFFF8;
                if (!v53)
                  goto LABEL_107;
              }
            }
            else
            {
LABEL_107:
              v57 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a3 + 32))(a3);
              v58 = (unint64_t)v22;
              a2 = v118;
              while (1)
              {
                v59 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v58 + 32))(v58);
                if (v57 == v59)
                  break;
                v60 = *(_QWORD *)(v59 + 136);
                if ((v60 & 4) != 0)
                {
                  v61 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8);
                  if (v61)
                  {
                    v58 = *v61 & 0xFFFFFFFFFFFFFFF8;
                    if (v58)
                      continue;
                  }
                }
                v51 = v121;
                v49 = *(_WORD *)(v121 + 8);
                goto LABEL_113;
              }
            }
            return v22;
          }
LABEL_113:
          if ((v49 & 0x7Eu) - 58 < 0xFFFFFFFA)
            break;
          if ((*(_DWORD *)(v51 - 44) & 0x1800000) != 0)
          {
            v62 = *(_QWORD *)(v51 - 56);
            v44 = v62 & 0xFFFFFFFFFFFFFFF8;
            v63 = v62 & 0xFFFFFFFFFFFFFFF8;
            if ((v62 & 4) != 0)
              v63 = *(_QWORD *)v44;
            v64 = *(_WORD *)(v63 + 8) & 0x7F;
            if (v64 == 83 || v64 == 16)
            {
              if ((v62 & 4) != 0)
                v44 = *(_QWORD *)(v44 + 8);
              v66 = 2;
              goto LABEL_175;
            }
          }
          if ((*(_DWORD *)(v51 - 44) & 0x27F) != 0x235)
            break;
          v67 = *(_QWORD *)((*(_QWORD *)(v51 - 32) & 0xFFFFFFFFFFFFFFF8) + 16);
          v129 = v131;
          v130 = 0x800000000;
          v131[64] = a2;
          v131[65] = a2;
          v116 = v67;
          v117 = v6;
          v68 = *(_DWORD *)(*(_QWORD *)(v67 + 56) + 12) & 0x1FFFFFFF;
          v69 = *(_QWORD *)(*(_QWORD *)v6 + 8);
          v70 = **(__int128 ***)v6;
          if (v69 > v68)
            v69 = v68;
          v122 = v51;
          if (v69)
          {
            v73 = (__int128 *)((char *)v70 + 24 * v69);
            do
            {
              v127 = *v70;
              v128 = *((_QWORD *)v70 + 2);
              if ((_DWORD)v127 == 8)
                v74 = (__int128 *)*((_QWORD *)&v127 + 1);
              else
                v74 = &v127;
              if ((_DWORD)v127 == 8)
                v75 = DWORD1(v127);
              else
                v75 = 1;
              if ((_DWORD)v75)
              {
                v76 = 24 * v75;
                do
                {
                  v77 = *v74;
                  v126 = *((_QWORD *)v74 + 2);
                  v125 = v77;
                  sub_22EDC0108(a1, (uint64_t)&v125, v45, (uint64_t)v124);
                  v78 = (_OWORD *)sub_22E78DF7C((uint64_t)&v129, (unint64_t)v124, 1);
                  v79 = (char *)v129 + 32 * v130;
                  v80 = v78[1];
                  *v79 = *v78;
                  v79[1] = v80;
                  LODWORD(v130) = v130 + 1;
                  v74 = (__int128 *)((char *)v74 + 24);
                  v76 -= 24;
                }
                while (v76);
              }
              v70 = (__int128 *)((char *)v70 + 24);
            }
            while (v70 != v73);
          }
          v81 = sub_22ED60904((_QWORD *)a1, v116 & 0xFFFFFFFFFFFFFFF9, v45, (uint64_t)&v129);
          *(_QWORD *)&v127 = v81;
          if (v81 >= 0x10)
          {
            v82 = sub_22F10C2A4(*(_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF0));
            if (v82)
            {
              if ((*(_DWORD *)(v82 + 28) & 0x7Fu) - 35 >= 3)
                v83 = 0;
              else
                v83 = v82;
            }
            else
            {
              v83 = 0;
            }
            v6 = v117;
            a2 = v118;
            if (v120 && sub_22EE0CF68(a1, v45, v83))
            {
              sub_22E8FCA40((_QWORD *)a1, v45, 0x126Au, 0, (uint64_t)v124);
              v87 = sub_22E8901B8((uint64_t)v124, (uint64_t *)&v127);
              LOBYTE(v125) = sub_22EFD5760(v83) == 2;
              sub_22E894E38(v87, (unsigned __int8 *)&v125);
              sub_22E903BEC((unsigned int *)v124);
              v66 = 1;
            }
            else
            {
              v88 = v83 + 64;
              if (!v83)
                v88 = 0;
              v122 = v88;
              v66 = 2;
            }
          }
          else
          {
            v66 = 1;
            v6 = v117;
            a2 = v118;
          }
          if (v129 != v131)
            free(v129);
          v44 = v122;
LABEL_175:
          v22 = 0;
          if (v66 != 2)
            return v22;
        }
        v71 = v49 & 0x7F;
        v72 = -40;
        if (v71 > 70)
        {
          switch(v71)
          {
            case 'S':
              goto LABEL_161;
            case 'G':
              v72 = -56;
              goto LABEL_161;
            case 'Q':
              goto LABEL_161;
          }
        }
        else
        {
          if (v71 <= 0x18)
          {
            if (v71 == 16)
              goto LABEL_131;
            if (((1 << v71) & 0x1066) != 0)
              goto LABEL_161;
            if (v71 == 24)
            {
LABEL_131:
              v72 = -48;
              goto LABEL_161;
            }
          }
          if (v71 == 70)
          {
            v72 = -64;
            goto LABEL_161;
          }
        }
        v84 = v71 - 52;
        v27 = (v71 - 33) >= 5;
        v85 = -64;
        if (v27)
          v85 = -48;
        v27 = v84 >= 6;
        v72 = -72;
        if (v27)
          v72 = v85;
LABEL_161:
        v86 = *(_QWORD *)(v51 + v72 + 16);
        v44 = v86 & 0xFFFFFFFFFFFFFFF8;
        if ((v86 & 4) != 0)
          v44 = *(_QWORD *)v44;
      }
    }
    v13 = *(_WORD *)(v11 + 8) & 0x7F;
    v14 = -40;
    if (v13 > 0x46)
    {
      switch(v13)
      {
        case 'S':
          goto LABEL_22;
        case 'G':
          v14 = -56;
          goto LABEL_22;
        case 'Q':
          goto LABEL_22;
      }
    }
    else
    {
      if (v13 <= 0x18)
      {
        if (v13 == 16)
          goto LABEL_8;
        if (((1 << v13) & 0x1066) != 0)
          goto LABEL_22;
        if (v13 == 24)
        {
LABEL_8:
          v14 = -48;
LABEL_22:
          v15 = sub_22EFC7E08(v11 + v14) > v12;
          goto LABEL_23;
        }
      }
      if (v13 == 70)
      {
LABEL_20:
        v14 = -64;
        goto LABEL_22;
      }
    }
    if (v13 - 52 < 6)
    {
      v14 = -72;
      goto LABEL_22;
    }
    if (v13 - 33 < 5)
      goto LABEL_20;
    goto LABEL_8;
  }
  v15 = 0;
LABEL_23:
  v17 = (int *)(a3 + 28);
  v16 = *(_DWORD *)(a3 + 28);
  v18 = v16 & 0x7F;
  if (v18 != 64 || v15)
    goto LABEL_27;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 2) == 0)
    return (_QWORD *)a3;
LABEL_31:
  v20 = *(_QWORD *)(a1 + 12024);
  if (v20)
  {
    v21 = (_QWORD *)sub_22EE12BE0(v20, a3);
    if (v21)
    {
      v22 = (_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8);
      if ((*v21 & 4) != 0 || !v22)
        return *(_QWORD **)(*v22 + 8 * *(int *)(a1 + 11992));
      return v22;
    }
  }
  v23 = *v17 & 0x7F;
  if (v23 <= 0x3B && ((1 << v23) & 0x800004100000000) != 0)
    return (_QWORD *)a3;
  if ((*v17 & 0x80) != 0)
    return 0;
  if (v23 - 38 >= 0xFFFFFFFD)
    sub_22EA3DA94(a3);
  v22 = (_QWORD *)sub_22EE43BF4(a1, a3, *(_QWORD *)(a1 + 216), (uint64_t)v6);
  sub_22EE0A7A4(*(_QWORD *)(a1 + 12024), a3, (uint64_t)v22);
  return v22;
}

unint64_t sub_22EE38684(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_22EE374B8(a1, a2, 0);
  if (v3)
    sub_22EFCCFA0(a1[3], v3);
  return v3;
}

unint64_t sub_22EE386C0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_22EE374B8(a1, a2, 1);
  if (v3)
    sub_22EFCCFA0(a1[3], v3);
  return v3;
}

_DWORD *sub_22EE386FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  llvm *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v21 = *a1;
  v22 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v21 + i) = -4096;
  v25 = &v27;
  v26 = 0x100000000;
  v28 = *(_QWORD *)(v4 + 12024);
  v29 = 0;
  v30 = 0;
  *(_QWORD *)(v4 + 12024) = &v21;
  v6 = sub_22EE389A4(a1, *(int **)(a2 + 56));
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 48);
    if (sub_22EE37984(v7) && (v8 = sub_22EFCE144(a1[3], *(_QWORD *)(v7 + 40)), v8 >= 8))
    {
      v10 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0 && v10)
        v10 = *(_QWORD *)v10;
      if ((*(_DWORD *)(v10 + 28) & 0x7F) == 0x1E)
        v9 = v10;
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    v11 = sub_22EE374B8(a1, v7, 1);
    if (v11)
    {
      v13 = v11;
      v14 = sub_22F3B9190(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), (uint64_t)v6, v11);
      v6 = (_DWORD *)v14;
      *(_QWORD *)(v13 + 88) = v14;
      if (v9)
      {
        v15 = *(_QWORD *)(v9 + 72);
        *(_QWORD *)(v14 + 72) = v15;
        v16 = sub_22E3CD31C((uint64_t *)(v15 + 64), v15);
        *((_QWORD *)v6 + 8) = v16 & 0xFFFFFFFFFFFFFFFCLL;
        v6[7] |= *(_DWORD *)(v16 + 28) & 0x260000;
        sub_22E7B7A74(*((_QWORD *)v6 + 9) + 64, (uint64_t)v6);
        v6[7] = v6[7] & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
      }
      else
      {
        *(_DWORD *)(v14 + 28) = *(_DWORD *)(v14 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
        v17 = (_QWORD *)sub_22EFE9368(v14);
        *v17 = *v17 & 7 | a2;
      }
      sub_22EFCCFA0(a1[3], (unint64_t)v6);
    }
    else
    {
      v6 = 0;
    }
  }
  if (!(_BYTE)v29)
  {
    if ((_DWORD)v26)
    {
      v18 = 0;
      v19 = 8 * v26;
      do
      {
        v20 = *(void ***)((char *)v25 + v18);
        if (v20)
        {
          if (*v20 != v20 + 2)
            free(*v20);
          MEMORY[0x2348A0E9C](v20, 0x1080C40ED926357);
        }
        v18 += 8;
      }
      while (v19 != v18);
    }
    *(_QWORD *)(v21 + 12024) = v28;
    LOBYTE(v29) = 1;
  }
  if (v25 != &v27)
    free(v25);
  if ((v22 & 1) == 0)
    llvm::deallocate_buffer(v23, (void *)(16 * v24));
  return v6;
}

_DWORD *sub_22EE389A4(_QWORD *a1, int *a2)
{
  int v4;
  unsigned int v5;
  int *v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2[3];
  v5 = v4 & 0x1FFFFFFF;
  v29 = v31;
  v30 = 0x800000000;
  if ((v4 & 0x1FFFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[3];
    v5 = v4 & 0x1FFFFFFF;
  }
  v6 = a2 + 4;
  if (v5)
  {
    LOBYTE(v7) = 0;
    v8 = &v6[2 * v5];
    v9 = a2 + 4;
    do
    {
      while (1)
      {
        v10 = sub_22EE0C33C(a1, *(_QWORD *)v9);
        v11 = v30;
        if (v30 >= (unint64_t)HIDWORD(v30))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v30;
        }
        *((_QWORD *)v29 + v11) = v10;
        LODWORD(v30) = v30 + 1;
        if (!(v7 & 1 | (v10 == 0)))
          break;
        v9 += 2;
        LOBYTE(v7) = 1;
        if (v9 == v8)
          goto LABEL_12;
      }
      v12 = *(_DWORD *)(v10 + 28);
      v7 = (v12 >> 7) & 1;
      v9 += 2;
    }
    while (v9 != v8);
    if ((v12 & 0x80) != 0)
    {
LABEL_12:
      v13 = 0;
      goto LABEL_26;
    }
    v4 = a2[3];
  }
  if ((v4 & 0x40000000) == 0 || (v14 = *(_QWORD *)&v6[2 * (v4 & 0x1FFFFFFF)]) == 0)
  {
    v23 = 0;
    goto LABEL_25;
  }
  v15 = *a1;
  v28 = 0;
  v27 = 0;
  v26 = 3;
  v25 = *(unsigned int *)(v15 + 1704);
  sub_22EB4DDB8(v15 + 3688, &v28, (int *)&v25, (__int16 *)(v15 + 1693), &v27, &v26);
  v16 = *(unsigned int *)(v15 + 3696);
  v17 = v16 - 2;
  v18 = *(_QWORD *)(v15 + 3688);
  v19 = *(_DWORD *)(v18 + 576 * (v16 - 2));
  if (v19 == 5)
  {
    *(_BYTE *)(v18 + 576 * v16 - 4) = *(_BYTE *)(v18 + 576 * v17 + 572);
    v20 = 1;
  }
  else if (v19 == 2)
  {
    *(_BYTE *)(v18 + 576 * v16 - 4) = 1;
    v20 = *(_BYTE *)(v18 + 576 * v17 + 573) != 0;
  }
  else
  {
    v20 = 0;
    *(_BYTE *)(v18 + 576 * v16 - 4) = 0;
  }
  v21 = v18 + 576 * v16;
  *(_BYTE *)(v21 - 3) = v20;
  *(_WORD *)(v15 + 1693) = 0;
  if (*(_DWORD *)(v15 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v15 + 1776), (llvm::SmallPtrSetImplBase *)(v21 - 560));
    sub_22EAEAE08(v15 + 1840, (uint64_t *)(v21 - 496));
  }
  v22 = sub_22EE0A68C(*a1, v14, a1[4]);
  sub_22EB48E64(v15);
  v13 = 0;
  if (v22 >= 2 && (v22 & 1) == 0)
  {
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
LABEL_25:
    v13 = sub_22EFE8F48(*(_QWORD *)(*a1 + 88), *a2, a2[1], (uint64_t)v29, v30, a2[2], v23);
  }
LABEL_26:
  if (v29 != v31)
    free(v29);
  return v13;
}

uint64_t sub_22EE38C60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = 0x1000000000;
  v4 = *(unsigned int *)(a2 + 100);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a2 + 104);
    v6 = 8 * v4;
    do
    {
      v7 = sub_22F3494FC(a1, *v5);
      v8 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v19;
      }
      *((_QWORD *)v18 + v8) = v7;
      v9 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
      ++v5;
      v6 -= 8;
    }
    while (v6);
    v10 = v18;
  }
  else
  {
    v9 = 0;
    v10 = v20;
  }
  v17[0] = v10;
  v17[1] = v9;
  v11 = sub_22EE38DB8(a1, a2, 0, (uint64_t)v17);
  v12 = v11;
  if ((!v11 || (*(_BYTE *)(v11 + 28) & 0x80) != 0) && (_DWORD)v19)
  {
    v13 = (uint64_t *)v18;
    v14 = 8 * v19;
    do
    {
      v15 = *v13++;
      sub_22EFC77E8(v15, 1);
      v14 -= 8;
    }
    while (v14);
  }
  if (v18 != v20)
    free(v18);
  return v12;
}

uint64_t sub_22EE38DB8(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  _QWORD v43[12];

  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (uint64_t *)v10[4];
  v11 = a1[4];
  v12 = sub_22EFBAFDC(a2);
  v13 = (_QWORD *)sub_22EE03524(v8, v10, v11, v12, *(_QWORD *)(a2 + 40), 1);
  v15 = (uint64_t)v13;
  if (v13)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 24), 0x1403u, 0, (uint64_t)v43);
      v16 = 0;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
      {
        v17 = *(_QWORD *)(a2 + 16);
        v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0)
          v18 = *(_QWORD *)v18;
        v16 = (*(_WORD *)(v18 + 8) & 0x7Eu) - 34 < 4;
      }
      v42 = v16;
      v19 = sub_22E894E38((uint64_t)v43, (unsigned __int8 *)&v42);
      v41 = *(_QWORD *)v15;
      sub_22E8901B8(v19, (uint64_t *)&v41);
      sub_22E903BEC((unsigned int *)v43);
      return 0;
    }
    v20 = a1[3];
    v41 = v20;
    if ((*(_BYTE *)(a2 + 31) & 8) != 0)
    {
      sub_22EA1D904(&v41);
      v20 = v41;
    }
    v21 = *(_QWORD *)(*a1 + 88);
    v22 = *(_DWORD *)(a2 + 64);
    v23 = *(_DWORD *)(a2 + 24);
    if (a4)
    {
      v26 = sub_22F3B3204(v21, v20, v22, v23, *(_QWORD *)v15, v15, *(_BYTE *)(a2 + 96) & 7, v14, *(uint64_t **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 40);
      if ((v24 & 7) != 0)
        v25 = 0;
      else
        v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      v26 = sub_22EFBB670(v21, v20, v22, v23, v25, *(_QWORD *)v15, v15, *(_BYTE *)(a2 + 96) & 7);
    }
    v15 = v26;
    if ((*(_WORD *)(*(_QWORD *)(*a1 + 72) + 148) & 2) != 0)
    {
      sub_22EA1D5B8((_QWORD *)*a1, v26);
      if (v27)
        sub_22EFC77E8(v15, 1);
    }
    v28 = *a1;
    if ((*(_DWORD *)(*(_QWORD *)(*a1 + 72) + 52) & 0x40000000) != 0)
    {
      sub_22EA1D764(v28, v15);
      v28 = *a1;
    }
    if (sub_22EE2CCAC(v28, a1[4], a2, v15))
      return 0;
    sub_22EE39160((_QWORD *)*a1, v15, a2, a1[4], a1[5], a1[3], a1[6], a3, 0);
    v30 = *(_DWORD *)(a2 + 28);
    if ((v30 & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 4) != 0 && (*(_BYTE *)(v15 + 28) & 0x80) == 0)
    {
      if (v20 && (*(_WORD *)(v20 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v20 - 24) & 0xFFFFFFFFFFFFFFF0);
        if (!v31 || *(unsigned __int8 *)(v31 + 16) - 27 <= 0xFFFFFFFD)
          v31 = sub_22F10CF48(v31);
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(sub_22F30914C(*a1) + 1440) & 0xFFFFFFFFFFFFFFF0);
      }
      v32 = *(_QWORD *)(v31 + 24);
      v43[0] = sub_22ED348AC(*a1, v15);
      v43[1] = v33;
      *(_DWORD *)(v15 + 96) = *(_DWORD *)(v15 + 96) & 0xFFFFFBFF | ((sub_22ED34A90(*a1, v43, v32) != 0) << 10);
      v30 = *(_DWORD *)(a2 + 28);
    }
    v34 = *(_DWORD *)(v15 + 28);
    *(_DWORD *)(v15 + 28) = v34 & 0xFFFFFDFF | (((v30 >> 9) & 1) << 9);
    v35 = *(_BYTE *)(v15 + 96);
    if ((v35 & 7) == 2 || (*(_BYTE *)(v15 + 96) & 7) == 0 && (v35 & 0x18) == 0x10)
    {
      if ((v34 & 0x7F) == 0x40 || (v34 & 0x7F) == 0x3E)
        goto LABEL_47;
      v36 = *(_QWORD *)(v15 + 16);
      v37 = v36 & 0xFFFFFFFFFFFFFFF8;
      if ((v36 & 4) != 0)
        v37 = *(_QWORD *)(v37 + 8);
      v38 = *(_WORD *)(sub_22EFCBB30(v37) + 8) & 0x7F;
      if (v38 != 16 && v38 != 83)
      {
        if ((*(_DWORD *)(v15 + 28) & 0x7F) == 0x40)
          goto LABEL_47;
        v39 = *(_QWORD *)(v15 + 16);
        v40 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 4) != 0)
          v40 = *(_QWORD *)v40;
        if ((*(_WORD *)(v40 + 8) & 0x7Eu) - 34 >= 4)
LABEL_47:
          sub_22EA2D380(*a1, v15);
      }
    }
  }
  return v15;
}

void sub_22EE39160(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v17;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int i;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int j;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  _BOOL4 v106;
  _BOOL4 v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[64];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  _QWORD v119[2];
  int v120;
  int v121;
  char v122;
  BOOL v123;
  char v124;
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v17 = *(_DWORD *)(a2 + 28) & 0x7F;
  v19 = (*(_DWORD *)(a3 + 28) & 0x7F) == 0x42 && v17 == 66;
  v106 = v19;
  if ((v17 - 65) > 1)
  {
    v107 = 0;
    if ((*(_DWORD *)(a3 + 28) & 0x8000000) == 0)
      goto LABEL_16;
LABEL_11:
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v22 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = v22 & 0xF7DFFFFF | 0x8000000;
    if (v21 && (*(_BYTE *)(v21 + 30) & 0x20) != 0)
      *(_DWORD *)(a2 + 28) = v22 | 0x8200000;
    goto LABEL_19;
  }
  if (sub_22EFB6870(a3))
    v20 = 1;
  else
    v20 = (*(_DWORD *)(a3 + 28) & 0x7F) == 66;
  v107 = v20;
  if ((*(_DWORD *)(a3 + 28) & 0x8000000) != 0)
    goto LABEL_11;
LABEL_16:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    v23 = *(_QWORD *)(a3 + 16);
    a6 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 4) != 0)
      a6 = *(_QWORD *)(a6 + 8);
LABEL_19:
    sub_22EFC80C4(a2, a6);
  }
  v24 = *(_BYTE *)(a2 + 96) & 0xE7 | (8 * ((*(unsigned __int8 *)(a3 + 96) >> 3) & 3));
  *(_BYTE *)(a2 + 96) = v24;
  *(_BYTE *)(a2 + 96) = v24 & 0x9F | *(_BYTE *)(a3 + 96) & 0x60;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
    v25 = 0;
  else
    v25 = *(_DWORD *)(a3 + 96) & 0x800;
  v26 = *(_DWORD *)(a2 + 96) & 0xFFFFF7FF | v25;
  *(_DWORD *)(a2 + 96) = v26;
  v27 = v26 & 0xFFFFEFFF | (((*(_DWORD *)(a3 + 96) >> 12) & 1) << 12);
  *(_DWORD *)(a2 + 96) = v27;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
    v28 = 0;
  else
    v28 = *(_DWORD *)(a3 + 96) & 0x8000;
  v29 = v28 | v27 & 0xFFFF7FFF;
  *(_DWORD *)(a2 + 96) = v29;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
    v30 = 0;
  else
    v30 = *(_DWORD *)(a3 + 96) & 0x10000;
  v31 = v30 | v29 & 0xFFFEFFFF;
  *(_DWORD *)(a2 + 96) = v31;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
    v32 = 0;
  else
    v32 = *(_DWORD *)(a3 + 96) & 0x20000;
  *(_DWORD *)(a2 + 96) = v32 | v31 & 0xFFFDFFFF;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a3 + 28) >> 13) & 3) << 13);
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40)
    goto LABEL_221;
  v33 = *(_QWORD *)(a3 + 16);
  v34 = v33 & 0xFFFFFFFFFFFFFFF8;
  if ((v33 & 4) != 0)
    v34 = *(_QWORD *)v34;
  if ((*(_WORD *)(v34 + 8) & 0x7Eu) - 34 >= 4)
  {
LABEL_221:
    if (sub_22EFC9084(a3, 0))
    {
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      *(_DWORD *)(v35 + 28) |= 0x400u;
    }
    if ((*(_BYTE *)(a3 + 29) & 8) == 0)
    {
      v36 = (_BYTE *)a3;
      while ((v36[29] & 8) == 0)
      {
        v36 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v36 + 40))(v36);
        if (v36 == (_BYTE *)a3 || v36 == 0)
        {
          v38 = 0;
          goto LABEL_48;
        }
      }
    }
    v38 = 2048;
LABEL_48:
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFF7FF | v38;
  }
  v105 = a4;
  sub_22EE33A90(a1, a4, a3, a2, a5, a7);
  v39 = *(_QWORD *)(a2 + 40);
  v41 = *(_DWORD *)(a2 + 24);
  v40 = *(_DWORD *)(a2 + 28);
  v42 = ((16 * v40) >> 31) & 9;
  v43 = 1;
  if ((v40 & 0x8000000) == 0)
  {
    v44 = a1[27];
    v45 = *(_WORD *)(v44 + 8) & 0x7F;
    v46 = -40;
    if (v45 > 0x46)
    {
      if (v45 != 83)
      {
        if (v45 == 71)
        {
          v46 = -56;
          goto LABEL_66;
        }
        if (v45 == 81)
          goto LABEL_66;
LABEL_61:
        if (v45 - 52 < 6)
        {
          v46 = -72;
        }
        else
        {
          v46 = -48;
          if (v45 - 33 < 5)
            v46 = -64;
        }
      }
    }
    else
    {
      if (v45 > 0x18)
        goto LABEL_60;
      if (v45 != 16)
      {
        if (((1 << v45) & 0x1066) != 0)
          goto LABEL_66;
        if (v45 != 24)
        {
LABEL_60:
          if (v45 == 70)
          {
            v46 = -64;
            goto LABEL_66;
          }
          goto LABEL_61;
        }
      }
      v46 = -48;
    }
LABEL_66:
    v43 = sub_22EFB9D84(v44 + v46) == 0;
  }
  v109 = 0;
  v110 = v112;
  v111 = 0x800000000;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = a1;
  v117 = v39;
  v118 = v41;
  sub_22EFC6D6C((uint64_t)v119, v39);
  v119[1] = 0;
  v120 = v42;
  v121 = 0;
  v122 = 1;
  v123 = v43;
  v124 = 1;
  v125 = 0;
  sub_22EC56024((uint64_t)&v109);
  if ((*(_BYTE *)(a2 + 31) & 8) != 0 && (*(_BYTE *)(a3 + 72) & 3) == 0 && sub_22E3CD31C((uint64_t *)(a3 + 72), a3))
  {
    v51 = *(_QWORD *)(sub_22E3CD31C((uint64_t *)(a3 + 72), a3) + 16);
    v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
    if ((v51 & 4) != 0)
      v52 = (_QWORD *)*v52;
    if (!sub_22EFC7ADC((unint64_t)v52))
      goto LABEL_86;
    v53 = *(_QWORD *)(sub_22E3CD31C((uint64_t *)(a3 + 72), a3) + 16);
    v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8);
    if ((v53 & 4) != 0)
      v54 = (_QWORD *)*v54;
    v55 = *(_QWORD *)(a3 + 16);
    v56 = (_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8);
    if ((v55 & 4) != 0)
      v56 = (_QWORD *)*v56;
    if (v54 == v56)
    {
LABEL_86:
      v57 = *(unsigned int *)(a2 + 24);
      if ((*(_BYTE *)(a3 + 72) & 3) != 0)
        v58 = 0;
      else
        v58 = sub_22E3CD31C((uint64_t *)(a3 + 72), a3);
      v99 = sub_22EE37A18(a1, v57, v58, v105, 0);
      if (!v99)
        goto LABEL_91;
      v100 = v99;
      v101 = *(unsigned int *)(v99 + 28);
      v49 = v111;
      if (v111 >= HIDWORD(v111))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v49 = v111;
      }
      v50 = (v101 >> 13) & 3 | v100;
      goto LABEL_76;
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 65 >= 2)
  {
    v47 = sub_22EFB948C(a3);
    if (v47)
    {
      if (v47 != 3)
      {
        v59 = *(_QWORD *)(a2 + 16);
        v60 = (_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8);
        if ((v59 & 4) != 0)
          v60 = (_QWORD *)*v60;
        sub_22EC611AC(a1, &v109, v60, 0);
        goto LABEL_91;
      }
    }
  }
  if (a9)
  {
    v48 = *(unsigned int *)(a9 + 28);
    v49 = v111;
    if (v111 >= HIDWORD(v111))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v49 = v111;
    }
    v50 = (v48 >> 13) & 3 | a9;
LABEL_76:
    *((_QWORD *)v110 + v49) = v50;
    LODWORD(v111) = v111 + 1;
    LODWORD(v109) = 2;
  }
LABEL_91:
  sub_22EA1DDB8(a1, a2, (uint64_t)&v109);
  if ((a8 & 1) == 0)
  {
    v61 = *(_QWORD *)(a2 + 16);
    v62 = v61 & 0xFFFFFFFFFFFFFFF8;
    if ((v61 & 4) != 0)
      v62 = *(_QWORD *)(v62 + 8);
    sub_22EFCCE00(v62, a2);
    if ((*(_BYTE *)(a2 + 31) & 8) == 0 || (*(_BYTE *)(a2 + 72) & 3) != 0 || !sub_22E3CD31C((uint64_t *)(a2 + 72), a2))
    {
      v63 = *(_QWORD *)(a2 + 16);
      v64 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
      if ((v63 & 4) != 0)
        v64 = (_QWORD *)*v64;
      sub_22EFCE90C((uint64_t)v64, a2);
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) & 1) == 0)
  {
    v65 = *(_QWORD *)(a2 + 16);
    v66 = v65 & 0xFFFFFFFFFFFFFFF8;
    if ((v65 & 4) != 0)
      v66 = *(_QWORD *)v66;
    v67 = *(_WORD *)(v66 + 8) & 0x7F;
    if (v67 <= 0x18 && ((1 << v67) & 0x1000006) != 0 || v67 - 52 <= 5)
      sub_22EE0A7A4(a1[1503], a3, a2);
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
  {
    v68 = *(_QWORD *)(a2 + 16);
    v69 = v68 & 0xFFFFFFFFFFFFFFF8;
    if ((v68 & 4) != 0)
      v69 = *(_QWORD *)v69;
    if ((*(_WORD *)(v69 + 8) & 0x7Eu) - 38 < 0xFFFFFFFC)
      v70 = 1;
    else
      v70 = a8;
    if (((v70 | v107) & 1) == 0)
      sub_22F3AC26C(a2, a3, 1);
  }
  if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 67 >= 0xFFFFFFFE
    && (*(_DWORD *)(a3 + 28) & 0x7F) != 0x42
    && (*(_BYTE *)(a3 + 420) & 7) == 2)
  {
    *(_BYTE *)(a2 + 420) = *(_BYTE *)(a2 + 420) & 0xF8 | 2;
  }
  v71 = a1[11];
  v108 = (_QWORD *)a3;
  v72 = v71 + 1800;
  v73 = sub_22EF7402C(v71 + 1800, (uint64_t *)&v108);
  if (*(_QWORD *)(v71 + 1832) != v73)
  {
    v102 = *(_DWORD *)(v73 + 8);
    v108 = (_QWORD *)a2;
    if (v102 >= 2)
      *(_DWORD *)sub_22F36F0B0(v72, (unint64_t *)&v108) = v102;
  }
  v74 = a1[11];
  v108 = (_QWORD *)a3;
  v75 = v74 + 1848;
  v76 = sub_22EF740A4(v74 + 1848, (uint64_t *)&v108);
  if (*(_QWORD *)(v74 + 1880) != v76)
  {
    v103 = *(_DWORD *)(v76 + 8);
    v108 = (_QWORD *)a2;
    if (v103 >= 2)
      *(_DWORD *)sub_22F26BBB0(v75, (unint64_t *)&v108) = v103;
  }
  v77 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v108) = 0;
  v78 = sub_22F110500((uint64_t)&v108, v77);
  if (v78 && *(_QWORD *)(v78 + 24) <= 0xFuLL && (*(_BYTE *)(v78 + 17) & 4) == 0)
    goto LABEL_186;
  if (((a8 | v106 | v107) & 1) == 0)
  {
    if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(a3 + 97) & 0x20) == 0)
      goto LABEL_186;
    v79 = a3;
    if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x53)
    {
      v80 = *(_QWORD *)(a3 + 16);
      v81 = v80 & 0xFFFFFFFFFFFFFFF8;
      if ((v80 & 4) != 0)
        v81 = *(_QWORD *)v81;
      for (i = *(_WORD *)(v81 + 8) & 0x7F; i != 83; i = *(_WORD *)(v81 + 8) & 0x7F)
      {
        v83 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v83 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_139;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_138;
          if (i == 16)
            goto LABEL_132;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_145;
          if (i == 24)
          {
LABEL_132:
            v83 = -48;
          }
          else
          {
LABEL_138:
            if (i != 70)
            {
LABEL_139:
              v84 = i - 52;
              if ((i - 33) >= 5)
                v85 = -48;
              else
                v85 = -64;
              if (v84 >= 6)
                v83 = v85;
              else
                v83 = -72;
              goto LABEL_145;
            }
            v83 = -64;
          }
        }
LABEL_145:
        v86 = *(_QWORD *)(v81 + v83 + 16);
        v81 = v86 & 0xFFFFFFFFFFFFFFF8;
        if ((v86 & 4) != 0)
          v81 = *(_QWORD *)v81;
      }
      v79 = v81 - 40;
    }
    if (!sub_22EFBBF74(a3, *(_QWORD *)(v79 + 88)))
      goto LABEL_186;
    if (!a2 || (v87 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
    {
      v88 = *(_QWORD *)(a2 + 16);
      v89 = v88 & 0xFFFFFFFFFFFFFFF8;
      if ((v88 & 4) != 0)
        v89 = *(_QWORD *)v89;
      for (j = *(_WORD *)(v89 + 8) & 0x7F; j != 83; j = *(_WORD *)(v89 + 8) & 0x7F)
      {
        v91 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v91 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_170;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_169;
          if (j == 16)
            goto LABEL_163;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_176;
          if (j == 24)
          {
LABEL_163:
            v91 = -48;
          }
          else
          {
LABEL_169:
            if (j != 70)
            {
LABEL_170:
              v92 = j - 52;
              if ((j - 33) >= 5)
                v93 = -48;
              else
                v93 = -64;
              if (v92 >= 6)
                v91 = v93;
              else
                v91 = -72;
              goto LABEL_176;
            }
            v91 = -64;
          }
        }
LABEL_176:
        v94 = *(_QWORD *)(v89 + v91 + 16);
        v89 = v94 & 0xFFFFFFFFFFFFFFF8;
        if ((v94 & 4) != 0)
          v89 = *(_QWORD *)v89;
      }
      v87 = v89 - 40;
    }
    if (sub_22EFBBF74(a2, *(_QWORD *)(v87 + 88)))
LABEL_186:
      sub_22EE43198((uint64_t)a1, a2, a3, v105);
  }
  if ((*(_BYTE *)(a2 + 28) & 0x80) == 0)
  {
    v95 = *(_QWORD *)(a2 + 16);
    v96 = v95 & 0xFFFFFFFFFFFFFFF8;
    if ((v95 & 4) != 0)
      v96 = *(_QWORD *)v96;
    v97 = *(_WORD *)(v96 + 8) & 0x7F;
    v98 = v97 > 0x18 || ((1 << v97) & 0x1000006) == 0;
    if ((!v98 || v97 - 52 <= 5)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v108 = a1;
      sub_22EA05988((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD, __int128 *))sub_22EA44FB0, (uint64_t)&v108);
    }
  }
  if ((_BYTE)v125)
  {
    if ((_DWORD)v109 == 5)
    {
      sub_22EC64D18(v116, (uint64_t)&v109);
    }
    else if (v114 && (*(_DWORD *)(v116[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v116, (uint64_t)&v109);
    }
  }
  if (v113)
  {
    v104 = sub_22EC6CBD0(v113);
    MEMORY[0x2348A0E9C](v104, 0x10E0C409F09D3C3);
  }
  if (v110 != v112)
    free(v110);
}

uint64_t sub_22EE39D00(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[3];
  v4 = a2[6];
  v5 = a2[7];
  v6 = a2[9];
  v7 = sub_22EFC7430(40, *(_QWORD *)(*a1 + 88), v3, 0);
  v8 = sub_22EA41AB8(v7, 0, v3, v4);
  *(_QWORD *)v8 = &unk_24FAC4360;
  *(_DWORD *)(v8 + 36) = v6;
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0xFFFF9FFF | (((v5 >> 13) & 3) << 13);
  sub_22EFCCE00(a1[3], v7);
  return v7;
}

uint64_t sub_22EE39D9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;

  v4 = *(_QWORD *)(a2 + 56);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (uint64_t *)v5[4];
  v6 = *v5;
  v7 = *a1;
  if ((*(_BYTE *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0) + 17) & 0xA) != 0)
  {
    v8 = (uint64_t *)sub_22EE03524(v7, v5, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), 0);
    if (!v8)
    {
      v11 = *(_QWORD *)(a2 + 56);
      v5 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 4) != 0)
        v5 = (uint64_t *)v5[4];
      goto LABEL_11;
    }
    v5 = v8;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 24), 0xD25u, 0, (uint64_t)&v42);
      v44 = *v5;
      sub_22E8901B8((uint64_t)&v42, &v44);
      sub_22E903BEC((unsigned int *)&v42);
LABEL_11:
      v10 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    v9 = *(_DWORD *)(a2 + 24);
    v42 = *a1;
    v43 = v9;
    sub_22EB522D8((uint64_t)&v42, v6);
  }
  v10 = 0;
LABEL_12:
  v12 = *(_DWORD *)(a2 + 68);
  if ((v12 & 1) == 0)
    goto LABEL_20;
  v13 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
    v13 = *(_QWORD *)(v13 + 8);
  v14 = v13 ? v10 : 1;
  if ((v14 & 1) == 0)
  {
    v16 = *a1;
    v42 = 0;
    v45 = 3;
    v46 = 4;
    v44 = *(unsigned int *)(v16 + 1704);
    sub_22EB4DDB8(v16 + 3688, &v46, (int *)&v44, (__int16 *)(v16 + 1693), &v42, &v45);
    v18 = *(unsigned int *)(v16 + 3696);
    v19 = v18 - 2;
    v20 = *(_QWORD *)(v16 + 3688);
    v21 = *(_DWORD *)(v20 + 576 * (v18 - 2));
    if (v21 == 5)
    {
      *(_BYTE *)(v20 + 576 * v18 - 4) = *(_BYTE *)(v20 + 576 * v19 + 572);
      v22 = 1;
    }
    else if (v21 == 2)
    {
      *(_BYTE *)(v20 + 576 * v18 - 4) = 1;
      v22 = *(_BYTE *)(v20 + 576 * v19 + 573) != 0;
    }
    else
    {
      v22 = 0;
      *(_BYTE *)(v20 + 576 * v18 - 4) = 0;
    }
    v23 = v20 + 576 * v18;
    *(_BYTE *)(v23 - 3) = v22;
    *(_WORD *)(v16 + 1693) = 0;
    if (*(_DWORD *)(v16 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v16 + 1776), (llvm::SmallPtrSetImplBase *)(v23 - 560));
      sub_22EAEAE08(v16 + 1840, (uint64_t *)(v23 - 496));
    }
    v24 = sub_22EE0A68C(*a1, v13, a1[4], v17);
    v10 = v24 & 1;
    if ((v24 & 1) != 0)
      v15 = 0;
    else
      v15 = v24 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EB48E64(v16);
    v12 = *(_DWORD *)(a2 + 68);
  }
  else
  {
LABEL_20:
    v15 = 0;
  }
  v25 = (_QWORD *)a1[3];
  if (v25)
    v26 = (uint64_t)(v25 - 8);
  else
    v26 = 0;
  v27 = (v12 >> 1) & 1;
  v28 = *(_DWORD *)(a2 + 72) & 3;
  if (v28 == 3)
    v28 = 0;
  v29 = sub_22EA3811C((_QWORD *)*a1, *(_QWORD *)(a2 + 40), *v5, v5, v26, *(_DWORD *)(a2 + 24), v27, v15, v28, v41, *(_DWORD *)(a2 + 64), 0, (*(_DWORD *)(a2 + 28) >> 13) & 3, 0, 0);
  if (!v29)
  {
    v36 = (_QWORD *)a1[3];
    v37 = v36[1] & 0x7F;
    v38 = 0x1FFFFFFFFFFFFFFBLL;
    if (v37 > 0x46)
    {
      switch(v37)
      {
        case 'S':
          goto LABEL_73;
        case 'G':
          v38 = 0x1FFFFFFFFFFFFFF9;
          goto LABEL_73;
        case 'Q':
          goto LABEL_73;
      }
    }
    else
    {
      if (v37 <= 0x18)
      {
        if (v37 == 16)
          goto LABEL_59;
        if (((1 << v37) & 0x1066) != 0)
          goto LABEL_73;
        if (v37 == 24)
        {
LABEL_59:
          v38 = 0x1FFFFFFFFFFFFFFALL;
LABEL_73:
          sub_22EFC77E8((uint64_t)&v36[v38], 1);
          return v29;
        }
      }
      if (v37 == 70)
      {
LABEL_71:
        v38 = 0x1FFFFFFFFFFFFFF8;
        goto LABEL_73;
      }
    }
    if (v37 - 52 < 6)
    {
      v38 = 0x1FFFFFFFFFFFFFF7;
      goto LABEL_73;
    }
    if (v37 - 33 < 5)
      goto LABEL_71;
    goto LABEL_59;
  }
  sub_22EE33A90(*a1, a1[4], a2, v29, a1[5], (uint64_t *)a1[6]);
  if ((*(_BYTE *)(v29 + 29) & 1) != 0)
    sub_22EA49EE4((_QWORD *)*a1, v29);
  if ((v10 & 1) != 0)
    sub_22EFC77E8(v29, 1);
  if (!*(_QWORD *)(v29 + 40))
  {
    v39 = *(_QWORD *)(*a1 + 88);
    v42 = v29;
    sub_22F370158(v39 + 1704, &v42)[1] = a2;
  }
  v30 = *(_QWORD *)(v29 + 16);
  v31 = v30 & 0xFFFFFFFFFFFFFFF8;
  if ((v30 & 4) != 0)
    v31 = *(_QWORD *)v31;
  if (v31)
    v32 = (*(_WORD *)(v31 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v32 = 0;
  if (v32 && (*(_BYTE *)(v31 + 11) & 1) != 0)
  {
    v33 = *(_WORD *)(sub_22EFCBB30(v31) + 8) & 0x7F;
    v34 = v33 > 0x18 || ((1 << v33) & 0x1000006) == 0;
    if (!v34 || v33 - 52 <= 5)
      sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v29);
  }
  v35 = *(_DWORD *)(v29 + 28) & 0xFFFFFDFF | (((*(_DWORD *)(a2 + 28) >> 9) & 1) << 9);
  *(_DWORD *)(v29 + 28) = v35;
  *(_DWORD *)(v29 + 28) = v35 & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  sub_22EFCCFA0(a1[3], v29);
  return v29;
}

unint64_t sub_22EE3A21C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0 || !v5)
  {
    if ((v4 & 4) != 0)
      v10 = 0;
    else
      v10 = v4 & 0xFFFFFFFFFFFFFFF8;
    v11 = sub_22EE0C33C(a1, v10);
    if (!v11)
      return 0;
    v5 = sub_22EFD9CC8(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 24), v11 & 0xFFFFFFFFFFFFFFFBLL, *(_DWORD *)(a2 + 56), 0, 0);
    *(_DWORD *)(v5 + 28) &= 0xFFFF9FFF;
    *(_DWORD *)(v5 + 60) = *(_DWORD *)(v5 + 60) & 0xFFFFFFFE | *(_DWORD *)(a2 + 60) & 1;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a2 + 60) & 1) == 0)
    v5 = sub_22EE03524(*a1, (uint64_t *)v5, a1[4], *(_DWORD *)(a2 + 24), 0, 0);
  if (v5)
  {
    v6 = *a1;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v8 = sub_22EACF278(v6, v7, *(_DWORD *)(a2 + 56), (uint64_t *)v5);
    v5 = v8;
    if (v8)
    {
      *(_DWORD *)(v8 + 28) &= 0xFFFF9FFF;
      *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0xFFFFFFFE | *(_DWORD *)(a2 + 60) & 1;
LABEL_8:
      sub_22EFCCFA0(a1[3], v5);
    }
  }
  return v5;
}

uint64_t sub_22EE3A344(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int j;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t k;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v55;
  uint64_t v56;

  if ((*(_BYTE *)(a2 + 96) & 3) != 0)
    goto LABEL_2;
  v13 = sub_22E3CD31C((uint64_t *)(a2 + 96), a2);
  if (!v13)
    goto LABEL_2;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  if ((v14 & 4) != 0)
  {
    if ((*(_WORD *)(*v15 + 8) & 0x7Fu) - 35 > 2)
      goto LABEL_32;
    v15 = (_QWORD *)v15[1];
  }
  else if (((_WORD)v15[1] & 0x7Fu) - 35 >= 3)
  {
    goto LABEL_32;
  }
  v18 = *(_QWORD *)(v13 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 4) != 0)
    v19 = *(_QWORD *)(v19 + 8);
  if (v15 != (_QWORD *)v19)
  {
LABEL_2:
    v4 = 0;
    goto LABEL_3;
  }
LABEL_32:
  v4 = sub_22EE37A18(*a1, *(_DWORD *)(a2 + 24), v13, (_DWORD *)a1[4], 0);
  if (!v4)
    return 0;
LABEL_3:
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v7 = sub_22EFC3768(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 24), v6, (uint64_t)v4, (*(_QWORD *)(a2 + 72) >> 39) & 1, (*(_QWORD *)(a2 + 72) >> 40) & 1, (*(_QWORD *)(a2 + 72) & 0x20000000000) != 0);
  if ((*(_BYTE *)(a2 + 77) & 2) == 0)
    goto LABEL_43;
  v8 = *(_QWORD *)(a2 + 128);
  if ((v8 & 4) == 0 || (v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) == 0))
  {
    v16 = sub_22E496830(a2);
    if (v16 < 0x10)
      goto LABEL_38;
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_40;
  }
  v10 = *v9;
  for (i = *v9; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_20;
      v12 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v12 <= 0x39)
        break;
LABEL_15:
      if (sub_22F115668(i))
        v10 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_35;
    }
    if (v12 == 24)
      goto LABEL_34;
    if (v12 == 26)
      break;
    if (((1 << v12) & 0x20000000200003CLL) == 0)
      goto LABEL_15;
LABEL_20:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_20;
LABEL_34:
  v10 = i;
LABEL_35:
  v20 = sub_22F115668(v10);
  v21 = (uint64_t *)sub_22EE03524(*a1, v9, a1[4], v20, 0, 0);
  if (v21 && (v22 = v21, !sub_22EA3320C((_QWORD *)*a1, v21)))
  {
    v24 = (unint64_t)v22 | 4;
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16480);
    if (v23 < 0x10)
    {
LABEL_38:
      v24 = 0;
      goto LABEL_42;
    }
    v17 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
LABEL_40:
    v24 = *v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
LABEL_42:
  *(_QWORD *)(v7 + 128) = v24;
LABEL_43:
  sub_22EE33A90(*a1, a1[4], a2, v7, 0, 0);
  if (!v7 || (v25 = v7, (*(_DWORD *)(v7 + 28) & 0x7F) != 0x53))
  {
    v26 = *(_QWORD *)(v7 + 16);
    v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    if ((v26 & 4) != 0)
      v27 = *(_QWORD *)v27;
    for (j = *(_WORD *)(v27 + 8) & 0x7F; j != 83; j = *(_WORD *)(v27 + 8) & 0x7F)
    {
      v29 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v29 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_58;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_57;
        if (j == 16)
          goto LABEL_51;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_64;
        if (j == 24)
        {
LABEL_51:
          v29 = -48;
        }
        else
        {
LABEL_57:
          if (j != 70)
          {
LABEL_58:
            v30 = j - 52;
            if ((j - 33) >= 5)
              v31 = -48;
            else
              v31 = -64;
            if (v30 >= 6)
              v29 = v31;
            else
              v29 = -72;
            goto LABEL_64;
          }
          v29 = -64;
        }
      }
LABEL_64:
      v32 = *(_QWORD *)(v27 + v29 + 16);
      v27 = v32 & 0xFFFFFFFFFFFFFFF8;
      if ((v32 & 4) != 0)
        v27 = *(_QWORD *)v27;
    }
    v25 = v27 - 40;
  }
  v33 = sub_22E3CD3D4(*(_QWORD *)(v25 + 88) + 2032, 16, 3);
  *(_QWORD *)v33 = a2 & 0xFFFFFFFFFFFFFFF9;
  *(_DWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v7 + 144) = v33;
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v7 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  v34 = *(_QWORD *)(*a1 + 88);
  v56 = a2;
  v35 = v34 + 1800;
  v36 = sub_22EF7402C(v34 + 1800, &v56);
  if (*(_QWORD *)(v34 + 1832) != v36)
  {
    v55 = *(_DWORD *)(v36 + 8);
    v56 = v7;
    if (v55 >= 2)
      *(_DWORD *)sub_22F36F0B0(v35, (unint64_t *)&v56) = v55;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 88))(v37, a2);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 80))(v40, v7, v39);
  }
  v41 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 72))(v41, a2);
  if (v42)
  {
    v43 = v42;
    v44 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 64))(v44, v7, v43);
  }
  if (sub_22EE2CDC8(*a1, a1[4], a2, v7))
    return 0;
  sub_22EFCCFA0(a1[3], v7);
  v45 = sub_22EFC3500(a2);
  v46 = v45;
  if (!v45)
    goto LABEL_96;
  if (v45 == a2)
    goto LABEL_96;
  v47 = *(_QWORD *)(v45 + 128);
  if ((v47 & 4) == 0)
    goto LABEL_96;
  v48 = (unint64_t *)(v47 & 0xFFFFFFFFFFFFFFF8);
  if ((v47 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_96;
  v49 = *v48;
  for (k = *v48; ; k = sub_22F115B7C(k))
  {
    while (1)
    {
      if ((k & 0xF) != 0)
        goto LABEL_93;
      v51 = *(unsigned __int8 *)(*(_QWORD *)(k & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v51 <= 0x39)
        break;
LABEL_88:
      if (sub_22F115668(k))
        v49 = k;
      k = sub_22F115B7C(k);
      if (!k)
        goto LABEL_95;
    }
    if (v51 == 24)
      goto LABEL_94;
    if (v51 == 26)
      break;
    if (((1 << v51) & 0x20000000200003CLL) == 0)
      goto LABEL_88;
LABEL_93:
    ;
  }
  if ((*(_BYTE *)(k + 23) & 0x10) == 0)
    goto LABEL_93;
LABEL_94:
  v49 = k;
LABEL_95:
  v52 = sub_22F115668(v49);
  v53 = sub_22EE08D2C(*a1, *v48, a1[4], v52, 0);
  sub_22EA333A0((_QWORD *)*a1, *(_DWORD *)(v46 + 24), (*(_QWORD *)(v46 + 72) >> 39) & 1, v53, 1, v7);
LABEL_96:
  if (sub_22EE3A97C(*(_QWORD *)(a2 + 16)))
  {
    if (v46 == a2)
      goto LABEL_101;
  }
  else if (v46 && (*(_BYTE *)(v7 + 76) & 0x80) == 0)
  {
LABEL_101:
    sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v7);
    sub_22EE3A9F4(a1, v7, v46);
  }
  return v7;
}

BOOL sub_22EE3A97C(uint64_t a1)
{
  unint64_t v1;
  __int16 v2;
  _BOOL8 result;
  BOOL v4;

  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((a1 & 4) != 0)
    v1 = *(_QWORD *)v1;
  v2 = *(_WORD *)(v1 + 8);
  result = 1;
  v4 = (v2 & 0x7Fu) > 0x18 || ((1 << (v2 & 0x7F)) & 0x1000006) == 0;
  if (v4 && (v2 & 0x7Fu) - 52 >= 6)
    return (v2 & 0x7Eu) - 34 <= 3 && sub_22EA3DA94(v1 - 64) != 0;
  return result;
}

void sub_22EE3A9F4(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x24BDAC8D0];
  sub_22EFC3340(a2);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  v35 = v37;
  v36 = 0x400000000;
  v6 = sub_22E49F9AC(a3);
  sub_22EFC3500(a3);
  if (v6)
  {
    v7 = 0;
LABEL_3:
    v8 = *(_QWORD *)(v6 + 56);
    if (v8)
    {
      v9 = *a1;
      v30 = 0;
      v33 = 3;
      v34 = 4;
      v32 = *(unsigned int *)(v9 + 1704);
      sub_22EB4DDB8(v9 + 3688, &v34, (int *)&v32, (__int16 *)(v9 + 1693), &v30, &v33);
      v11 = *(unsigned int *)(v9 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v9 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v9 + 1693) = 0;
      if (*(_DWORD *)(v9 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v9 + 1840, (uint64_t *)(v16 - 496));
      }
      v8 = sub_22EE0A68C(*a1, v8, a1[4], v10);
      sub_22EB48E64(v9);
    }
    v17 = *(_QWORD *)(v6 + 40);
    if ((v17 & 7) != 0)
      v18 = 0;
    else
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 1) != 0)
      v19 = 0;
    else
      v19 = v8 & 0xFFFFFFFFFFFFFFFELL;
    v20 = sub_22EA3A988(*a1, a2, v7, *(_DWORD *)(v6 + 24), v18, v19);
    v21 = v20;
    if ((v8 & 1) != 0)
    {
      if (v20)
        sub_22EFC77E8(v20, 1);
      sub_22EFC77E8(a2, 1);
    }
    if (v21)
    {
      sub_22EE33A90(*a1, a1[4], v6, v21, 0, 0);
      *(_DWORD *)(v21 + 28) = *(_DWORD *)(v21 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
      sub_22EFCCFA0(a2 + 64, v21);
      v22 = v36;
      if (v36 >= (unint64_t)HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = v36;
      }
      *((_QWORD *)v35 + v22) = v21;
      LODWORD(v36) = v36 + 1;
      v23 = *(_QWORD *)(a3 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v24 = *(_QWORD *)v24;
      v25 = *(_WORD *)(v24 + 8) & 0x7F;
      v26 = v25 > 0x18 || ((1 << v25) & 0x1000006) == 0;
      if ((!v26 || v25 - 52 <= 5) && (*(_BYTE *)(a2 + 76) & 0x80) == 0)
        sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), v6, v21);
      v7 = v21;
    }
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v6)
        break;
      if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x43)
        goto LABEL_3;
    }
  }
  v27 = *a1;
  v28 = *(unsigned int *)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 112);
  v30 = 0;
  v31 = 0;
  sub_22EA3BEC8(v27, v28, v29, a2, (uint64_t *)v35, v36, 0, (uint64_t)&v30);
  sub_22E80F94C(&v31);
  if (v35 != v37)
    free(v35);
}

uint64_t sub_22EE3AD54(_QWORD **a1, unint64_t a2)
{
  int v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t i;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71[7];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75[2];
  void *v76[2];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  _QWORD v83[3];
  char v84;
  BOOL v85;
  char v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  llvm *v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v5 = (_DWORD *)(a2 + 28);
  v4 = *(_DWORD *)(a2 + 28);
  v6 = *a1;
  v88 = *a1;
  v89 = 1;
  for (i = 2; i != 10; i += 2)
    (&v88)[i] = (_QWORD *)-4096;
  v92 = (char *)&v94;
  v93 = 0x100000000;
  v95 = v6[1503];
  v96 = 0;
  v97 = 0;
  v6[1503] = &v88;
  v8 = sub_22EE389A4(a1, *(int **)(a2 + 56));
  if (!v8)
    goto LABEL_61;
  v9 = v8;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(v10 + 120);
  if ((v11 & 4) == 0)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v73 = 0;
    v74 = 0;
    goto LABEL_8;
  }
  v15 = (unint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
  v14 = *v15;
  v13 = (void *)v15[1];
  v73 = v14;
  v74 = (uint64_t)v13;
  if (!v14)
  {
    v12 = 0;
    goto LABEL_8;
  }
  v58 = sub_22F348DBC((uint64_t)*a1, v14, v13, (uint64_t)a1[4]);
  v73 = v58;
  v74 = v59;
  if (!v58)
  {
LABEL_61:
    v37 = 0;
    goto LABEL_104;
  }
  v12 = v58;
  v13 = (void *)v59;
  v14 = v58;
LABEL_8:
  v16 = v4 & 0x1800000;
  if ((v4 & 0x1800000) == 0)
  {
    v66 = 0;
    v67 = (uint64_t)v9;
    if (sub_22EE3B628(v10) && (v18 = sub_22EFCE144((unint64_t)a1[3], *(_QWORD *)(v10 + 40)), v18 >= 8))
    {
      v30 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0 && v30)
        v30 = *(_QWORD *)v30;
      v19 = 0;
      if (v30)
      {
        v20 = 0;
        if ((*(_DWORD *)(v30 + 28) & 0x7F) == 0x1C)
        {
          v20 = *(_QWORD *)(v30 + 48);
          v19 = v30;
        }
      }
      else
      {
        v20 = 0;
      }
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v21 = (uint64_t *)(a1 + 3);
    v17 = (uint64_t)a1[3];
    v72 = v17;
    goto LABEL_72;
  }
  if (v12)
  {
    *(_OWORD *)v75 = 0u;
    *(_OWORD *)v76 = 0u;
    sub_22E8ACE30((uint64_t)v75, v14, (uint64_t)v13);
    v17 = sub_22E958204((uint64_t)*a1, (uint64_t)v75, 0);
    v72 = v17;
    if (HIDWORD(v76[1]))
      free(v76[0]);
    if (!v17)
      goto LABEL_61;
  }
  else
  {
    v22 = *(_QWORD *)(v10 + 16);
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 4) != 0)
      v23 = (_QWORD *)*v23;
    v17 = sub_22EE3B6BC((uint64_t)*a1, *(_DWORD *)(v10 + 24), (uint64_t)v23, (uint64_t)a1[4]);
    v72 = v17;
  }
  v65 = v12;
  v24 = *a1;
  v25 = *(_QWORD *)(v10 + 40);
  v26 = *(_DWORD *)(v10 + 24);
  v27 = (*a1)[27];
  v28 = *(_WORD *)(v27 + 8) & 0x7F;
  v29 = -40;
  if (v28 > 0x46)
  {
    switch(v28)
    {
      case 'S':
        goto LABEL_42;
      case 'G':
        v29 = -56;
        goto LABEL_42;
      case 'Q':
        goto LABEL_42;
    }
    goto LABEL_38;
  }
  if (v28 > 0x18)
    goto LABEL_37;
  if (v28 != 16)
  {
    if (((1 << v28) & 0x1066) != 0)
      goto LABEL_42;
    if (v28 != 24)
    {
LABEL_37:
      if (v28 == 70)
      {
LABEL_40:
        v29 = -64;
        goto LABEL_42;
      }
LABEL_38:
      if (v28 - 52 < 6)
      {
        v29 = -72;
        goto LABEL_42;
      }
      if (v28 - 33 < 5)
        goto LABEL_40;
    }
  }
  v29 = -48;
LABEL_42:
  v67 = (uint64_t)v9;
  v66 = v16;
  v31 = sub_22EFB9D84(v27 + v29) == 0;
  v75[0] = 0;
  v75[1] = &v76[1];
  v76[0] = (void *)0x800000000;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = v24;
  v81 = v25;
  v82 = v26;
  sub_22EFC6D6C((uint64_t)v83, v25);
  v83[1] = 0;
  v83[2] = 0;
  v84 = 1;
  v85 = v31;
  v86 = 1;
  v87 = 0;
  sub_22EC56024((uint64_t)v75);
  sub_22EC611AC((uint64_t)*a1, (uint64_t)v75, v17, 0);
  if (LODWORD(v75[0]) == 2)
  {
    v19 = *(_QWORD *)v75[1] & 0xFFFFFFFFFFFFFFFCLL;
    v32 = *(_DWORD *)(v19 + 28);
    if ((v32 & 0x7Fu) <= 0x2F && ((1 << (v32 & 0x7F)) & 0xC00000060000) != 0)
    {
      v19 = sub_22EFBAEA4(*(_QWORD *)v75[1] & 0xFFFFFFFFFFFFFFFCLL);
      v32 = *(_DWORD *)(v19 + 28);
    }
    if ((v32 & 0x7F) == 0x1C)
    {
      v20 = *(_QWORD *)(v19 + 48);
      v33 = *(_QWORD *)(sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v19 + 72) + 64), *(_QWORD *)(v19 + 72)) + 56);
      if (sub_22ED5D218(*a1, v67, v33, 1, 0, 0) && (sub_22ED5D528(*a1, v67, v33, 0, 0) & 1) == 0)
        goto LABEL_63;
      goto LABEL_52;
    }
  }
  if (v65)
  {
    sub_22E8FCA40(*a1, *(_DWORD *)(v10 + 24), 0xFDFu, 0, (uint64_t)v71);
    v70 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 48) + 72) >> 13;
    v34 = sub_22E8900C4((uint64_t)v71, &v70);
    v69 = *(_QWORD *)(v10 + 40);
    v35 = sub_22E894538(v34, &v69);
    v36 = sub_22E894FB4(v35, &v72);
    v68 = sub_22F0AB0EC((unint64_t *)&v73);
    sub_22E8906A0(v36, (uint64_t *)&v68);
    sub_22E903BEC(v71);
LABEL_52:
    if ((_BYTE)v87)
    {
      if (LODWORD(v75[0]) == 5)
      {
        sub_22EC64D18(v80, (uint64_t)v75);
      }
      else if (v78 && (*(_DWORD *)(v80[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v80, (uint64_t)v75);
      }
    }
    if (v77)
    {
      v63 = sub_22EC6CBD0(v77);
      MEMORY[0x2348A0E9C](v63, 0x10E0C409F09D3C3);
    }
    if (v75[1] != &v76[1])
      free(v75[1]);
    goto LABEL_61;
  }
  v20 = 0;
  v19 = 0;
LABEL_63:
  if ((_BYTE)v87)
  {
    if (LODWORD(v75[0]) == 5)
    {
      sub_22EC64D18(v80, (uint64_t)v75);
    }
    else if (v78 && (*(_DWORD *)(v80[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v80, (uint64_t)v75);
    }
  }
  if (v77)
  {
    v64 = sub_22EC6CBD0(v77);
    MEMORY[0x2348A0E9C](v64, 0x10E0C409F09D3C3);
  }
  v21 = (uint64_t *)(a1 + 3);
  if (v75[1] != &v76[1])
    free(v75[1]);
LABEL_72:
  v38 = *(_QWORD *)(v10 + 40);
  if ((v38 & 7) != 0)
    v39 = 0;
  else
    v39 = v38 & 0xFFFFFFFFFFFFFFF8;
  v40 = sub_22EFCF6C0((*a1)[11], (unsigned __int16)*(_DWORD *)(v10 + 72) >> 13, v17, *(_DWORD *)(v10 + 56), *(_DWORD *)(v10 + 24), v39, v20, 1);
  v41 = v40;
  if (v73)
    sub_22F3AC930(v40, v73, v74);
  sub_22EE3364C((uint64_t)*a1, (uint64_t)a1[4], v10, v41);
  v42 = *(_QWORD *)(a2 + 40);
  if ((v42 & 7) != 0)
    v43 = 0;
  else
    v43 = v42 & 0xFFFFFFFFFFFFFFF8;
  v37 = sub_22EFE9D6C((*a1)[11], v72, *(_DWORD *)(a2 + 24), v43, v67, v41);
  sub_22EA0F280((unint64_t *)(v37 + 64), v19);
  *(_QWORD *)(v41 + 136) = v37 & 0xFFFFFFFFFFFFFFFBLL;
  if (v66)
  {
    v44 = (_DWORD *)(v19 + 28);
    if (!v19)
      v44 = v5;
    *(_DWORD *)(v37 + 28) = *(_DWORD *)(v37 + 28) & 0xFFFF9FFF | (((*v44 >> 13) & 3) << 13);
    sub_22EA22164((_DWORD *)v37, 0);
  }
  else
  {
    *(_DWORD *)(v37 + 28) = *(_DWORD *)(v37 + 28) & 0xFFFF9FFF | (((*v5 >> 13) & 3) << 13);
    if (!v19)
    {
      v45 = (_QWORD *)sub_22EFE9368(v37);
      *v45 = *v45 & 7 | a2;
    }
  }
  v46 = (*a1)[11];
  v47 = sub_22EFEAD74(v37);
  sub_22EF64558(v46, v41, v47);
  if (v66)
  {
    sub_22EFCE90C(v72, v37);
    sub_22EFC80C4(v37, *v21);
    sub_22EFC80C4(v41, *v21);
  }
  else
  {
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2))
    {
      v48 = *(_QWORD *)(a2 + 16);
      v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if ((v48 & 4) != 0)
        v49 = *(_QWORD *)(v49 + 8);
      sub_22EFC80C4(v37, v49);
      v50 = *(_QWORD *)(a2 + 16);
      v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if ((v50 & 4) != 0)
        v51 = *(_QWORD *)(v51 + 8);
      sub_22EFC80C4(v41, v51);
    }
    sub_22EFCCFA0(*v21, v37);
    if (!v19)
    {
      v75[0] = v76;
      v75[1] = (void *)0x400000000;
      sub_22EFEAC54(a2, (uint64_t)v75);
      if (LODWORD(v75[1]))
      {
        v52 = 0;
        v53 = 8 * LODWORD(v75[1]);
        do
        {
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)((char *)v75[0] + v52) + 104) + 24))(*(_QWORD *)(*(_QWORD *)((char *)v75[0] + v52) + 104)))
          {
            v54 = *(_QWORD *)((char *)v75[0] + v52);
            v55 = *((unsigned int *)a1 + 16);
            if (v55 >= *((unsigned int *)a1 + 17))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v55 = *((unsigned int *)a1 + 16);
            }
            v56 = &a1[7][2 * v55];
            *v56 = v37;
            v56[1] = v54;
            ++*((_DWORD *)a1 + 16);
          }
          v52 += 8;
        }
        while (v53 != v52);
      }
      if (v75[0] != v76)
        free(v75[0]);
    }
  }
LABEL_104:
  if (!(_BYTE)v96)
  {
    if ((_DWORD)v93)
    {
      v60 = 0;
      v61 = 8 * v93;
      do
      {
        v62 = *(void ***)&v92[v60];
        if (v62)
        {
          if (*v62 != v62 + 2)
            free(*v62);
          MEMORY[0x2348A0E9C](v62, 0x1080C40ED926357);
        }
        v60 += 8;
      }
      while (v61 != v60);
    }
    v88[1503] = v95;
    LOBYTE(v96) = 1;
  }
  if (v92 != (char *)&v94)
    free(v92);
  if ((v89 & 1) == 0)
    llvm::deallocate_buffer(v90, (void *)(16 * v91));
  return v37;
}

unint64_t sub_22EE3B628(uint64_t a1)
{
  uint64_t *v2;
  char v3;
  unint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_BYTE *)(a1 + 96);
  v2 = (uint64_t *)(a1 + 96);
  if ((v3 & 3) != 0)
    return 0;
  result = sub_22E3CD31C(v2, a1);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
    {
      if ((*(_WORD *)(*v6 + 8) & 0x7Fu) - 35 > 2)
        return result;
      v6 = (_QWORD *)v6[1];
    }
    else if (((_WORD)v6[1] & 0x7Fu) - 35 >= 3)
    {
      return result;
    }
    v7 = *(_QWORD *)(result + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)(v8 + 8);
    if (v6 != (_QWORD *)v8)
      return 0;
  }
  return result;
}

uint64_t sub_22EE3B6BC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  BOOL v10;

  v4 = *(_WORD *)(a3 + 8) & 0x7F;
  if ((v4 - 13) <= 0x3D)
  {
    switch(v4)
    {
      case 16:
      case 24:
        v6 = -48;
        break;
      case 71:
        v6 = -56;
        break;
      case 70:
        v6 = -64;
        break;
      default:
        v9 = v4 - 52;
        v10 = (v4 - 33) >= 5;
        v6 = -48;
        if (!v10)
          v6 = -64;
        if (v9 < 6)
          v6 = -72;
        break;
    }
    v7 = sub_22EE37A18(a1, a2, a3 + v6, a4, 1);
    if (v7)
      return sub_22EFCAE04(v7);
    return 0;
  }
  return a3;
}

unint64_t sub_22EE3B75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 152);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v6 = *(_QWORD *)(*v5 + 152);
      v5 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v6 & 4) != 0 && v5);
  }
  v7 = sub_22EFCE144(*(_QWORD *)(a1 + 24), v5[5]);
  if (v7 < 8)
    return 0;
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0 && v8)
    v8 = *(_QWORD *)v8;
  if (!v8 || (*(_DWORD *)(v8 + 28) & 0x7F) != 28)
    return 0;
  result = sub_22F3B8804(v8, a2);
  if (!result)
    return sub_22EE3B810((unsigned int **)a1, v8, a2);
  return result;
}

unint64_t sub_22EE3B810(unsigned int **a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t i;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  unint64_t v23;
  unsigned int v24[24];
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[96];
  void *v29;
  uint64_t v30;
  _QWORD v31[33];
  unsigned int *v32;
  uint64_t v33;
  llvm *v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v32 = *a1;
  v33 = 1;
  for (i = 2; i != 10; i += 2)
    (&v32)[i] = (unsigned int *)-4096;
  v36 = (char *)&v38;
  v37 = 0x100000000;
  v39 = *((_QWORD *)v6 + 1503);
  v40 = 0;
  v41 = 0;
  *((_QWORD *)v6 + 1503) = &v32;
  v8 = sub_22EE389A4(a1, *(int **)(a3 + 184));
  if (!v8)
  {
    v12 = 0;
    goto LABEL_14;
  }
  v9 = (uint64_t)v8;
  v10 = *(uint64_t **)(a3 + 192);
  v29 = v31;
  v11 = *v10;
  v30 = 0x800000000;
  v31[32] = v11;
  if ((sub_22EE09D78((uint64_t)*a1, (uint64_t)(v10 + 2), *((unsigned int *)v10 + 2), (uint64_t)a1[4]) & 1) == 0)
  {
    v26 = v28;
    v27 = 0x400000000;
    v12 = 0;
    if ((sub_22ED61988(*a1, (int *)a2, *(_DWORD *)(a3 + 24), (uint64_t)&v29, 0, (uint64_t)&v26, 1, 0) & 1) == 0)
    {
      if ((sub_22ED65198(*a1, *(_DWORD *)(a3 + 24), a2, v30, (uint64_t)v26) & 1) == 0)
      {
        v25 = 0;
        v12 = sub_22F3B863C(a2, (uint64_t)v26, v27, v9, (uint64_t)&v25);
        v14 = sub_22EF6512C(*((_QWORD *)*a1 + 11), a2 & 0xFFFFFFFFFFFFFFF9, (uint64_t)v26, v27, 0);
        v16 = (uint64_t *)sub_22EF64F48(*((_QWORD *)*a1 + 11), a2 & 0xFFFFFFFFFFFFFFF9, *(_DWORD *)(a3 + 24), (uint64_t)&v29, v14);
        if (!v12)
        {
          v19 = sub_22F3B8F90(*((_QWORD *)*a1 + 11), (unsigned __int16)*(_DWORD *)(a3 + 72) >> 13, (uint64_t)a1[3], *(_DWORD *)(a3 + 56), *(_DWORD *)(a3 + 24), v9, a2, v15, (__int128 *)v26, v27, (uint64_t)&v29, v14, 0);
          if (!sub_22EE2CDC8((uint64_t)*a1, (uint64_t)a1[4], a3, v19))
          {
            *(_QWORD *)(*(_QWORD *)(v19 + 104) + 200) = *(_QWORD *)(*(_QWORD *)(v19 + 104) + 200) & 7 | a3;
            sub_22ED6C768(v19, (uint64_t)v16);
            sub_22ED63B48(*a1, v19);
            sub_22EFEA8CC(a2, v19, 0);
            v12 = v19;
          }
          goto LABEL_10;
        }
        sub_22E8FCA40(*a1, *(_DWORD *)(a3 + 24), 0x11A4u, 0, (uint64_t)v24);
        v23 = *v16;
        sub_22E8901B8((uint64_t)v24, (uint64_t *)&v23);
        sub_22E903BEC(v24);
        sub_22E8FCA40(*a1, *(_DWORD *)(v12 + 24), 0x176Du, 0, (uint64_t)v24);
        v17 = *(_QWORD *)(v12 + 48);
        if (v17)
          v18 = v17 & 0xFFFFFFFFFFFFFFF0;
        else
          v18 = sub_22EF6462C(*((_QWORD *)*a1 + 11), v12);
        v23 = v18;
        sub_22E8901B8((uint64_t)v24, (uint64_t *)&v23);
        sub_22E903BEC(v24);
      }
      v12 = 0;
    }
LABEL_10:
    if (v26 != v28)
      free(v26);
    goto LABEL_12;
  }
  v12 = 0;
LABEL_12:
  if (v29 != v31)
    free(v29);
LABEL_14:
  if (!(_BYTE)v40)
  {
    if ((_DWORD)v37)
    {
      v20 = 0;
      v21 = 8 * v37;
      do
      {
        v22 = *(void ***)&v36[v20];
        if (v22)
        {
          if (*v22 != v22 + 2)
            free(*v22);
          MEMORY[0x2348A0E9C](v22, 0x1080C40ED926357);
        }
        v20 += 8;
      }
      while (v21 != v20);
    }
    *((_QWORD *)v32 + 1503) = v39;
    LOBYTE(v40) = 1;
  }
  if (v36 != (char *)&v38)
    free(v36);
  if ((v33 & 1) == 0)
    llvm::deallocate_buffer(v34, (void *)(16 * v35));
  return v12;
}

uint64_t sub_22EE3BC0C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[32];
  uint64_t v40;
  uint64_t v41;
  llvm *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v40 = *a1;
  v41 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v40 + i) = -4096;
  v44 = &v46;
  v45 = 0x100000000;
  v47 = *(_QWORD *)(v4 + 12024);
  v48 = 0;
  v49 = 0;
  *(_QWORD *)(v4 + 12024) = &v40;
  v6 = sub_22EE389A4(a1, *(int **)(a2 + 56));
  if (!v6)
  {
    v11 = 0;
    goto LABEL_28;
  }
  v7 = (uint64_t)v6;
  v8 = *(_QWORD **)(a2 + 48);
  if ((v8[9] & 3) != 0)
    goto LABEL_5;
  v26 = sub_22E3CD31C(v8 + 9, *(_QWORD *)(a2 + 48));
  if (!v26)
    goto LABEL_5;
  v27 = v8[2];
  v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  if ((v27 & 4) != 0)
  {
    if ((*(_WORD *)(*v28 + 8) & 0x7Fu) - 35 > 2)
      goto LABEL_45;
    v28 = (_QWORD *)v28[1];
LABEL_42:
    v29 = *(_QWORD *)(v26 + 16);
    v30 = v29 & 0xFFFFFFFFFFFFFFF8;
    if ((v29 & 4) != 0)
      v30 = *(_QWORD *)(v30 + 8);
    if (v28 != (_QWORD *)v30)
      goto LABEL_5;
    goto LABEL_45;
  }
  if (((_WORD)v28[1] & 0x7Fu) - 35 < 3)
    goto LABEL_42;
LABEL_45:
  v31 = sub_22EFCE144(a1[3], v8[5]);
  if (v31 >= 8)
  {
    v32 = v31 & 0xFFFFFFFFFFFFFFF8;
    if ((v31 & 4) != 0 && v32)
      v32 = *(_QWORD *)v32;
    if ((*(_DWORD *)(v32 + 28) & 0x7F) == 0x1F)
      v9 = v32;
    else
      v9 = 0;
    goto LABEL_6;
  }
LABEL_5:
  v9 = 0;
LABEL_6:
  v10 = sub_22EE38DB8(a1, (uint64_t)v8, 1, 0);
  v11 = 0;
  if (v10)
  {
    v12 = v10;
    v13 = *(_QWORD *)(a2 + 40);
    if ((v13 & 7) != 0)
      v14 = 0;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    v11 = sub_22F3B929C(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 24), v14, v7, v10);
    sub_22F3AC240(v12, v11);
    sub_22EA0F280((unint64_t *)(v11 + 64), v9);
    *(_DWORD *)(v11 + 28) = *(_DWORD *)(v11 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
    if (!v9)
    {
      v15 = (_QWORD *)sub_22EFE9368(v11);
      *v15 = *v15 & 7 | a2;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2))
    {
      v16 = *(_QWORD *)(a2 + 16);
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v17 = *(_QWORD *)(v17 + 8);
      sub_22EFC80C4(v11, v17);
      v18 = *(_QWORD *)(a2 + 16);
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v19 = *(_QWORD *)(v19 + 8);
      sub_22EFC80C4(v12, v19);
    }
    sub_22EFCCFA0(a1[3], v11);
    if (!v9)
    {
      v37 = v39;
      v38 = 0x400000000;
      sub_22EFEC460(a2, (uint64_t)&v37);
      if ((_DWORD)v38)
      {
        v20 = 0;
        v21 = 8 * v38;
        do
        {
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)((char *)v37 + v20) + 80) + 24))(*(_QWORD *)(*(_QWORD *)((char *)v37 + v20) + 80)))
          {
            v22 = *(_QWORD *)((char *)v37 + v20);
            v23 = *((unsigned int *)a1 + 36);
            if (v23 >= *((unsigned int *)a1 + 37))
            {
              v36 = *(_QWORD *)((char *)v37 + v20);
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v22 = v36;
              v23 = *((unsigned int *)a1 + 36);
            }
            v24 = (uint64_t *)(a1[17] + 16 * v23);
            *v24 = v11;
            v24[1] = v22;
            ++*((_DWORD *)a1 + 36);
          }
          v20 += 8;
        }
        while (v21 != v20);
      }
      if (v37 != v39)
        free(v37);
    }
  }
LABEL_28:
  if (!(_BYTE)v48)
  {
    if ((_DWORD)v45)
    {
      v33 = 0;
      v34 = 8 * v45;
      do
      {
        v35 = *(void ***)((char *)v44 + v33);
        if (v35)
        {
          if (*v35 != v35 + 2)
            free(*v35);
          MEMORY[0x2348A0E9C](v35, 0x1080C40ED926357);
        }
        v33 += 8;
      }
      while (v34 != v33);
    }
    *(_QWORD *)(v40 + 12024) = v47;
    LOBYTE(v48) = 1;
  }
  if (v44 != &v46)
    free(v44);
  if ((v41 & 1) == 0)
    llvm::deallocate_buffer(v42, (void *)(16 * v43));
  return v11;
}

uint64_t *sub_22EE3C00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *result;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 112);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v10 = *(_QWORD *)(*v5 + 112);
      v5 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v10 & 4) != 0 && v5);
  }
  v6 = sub_22EFCE144(*(_QWORD *)(a1 + 24), v5[5]);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0 && v7)
    v7 = *(_QWORD *)v7;
  if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x1F)
    v8 = v7;
  else
    v8 = 0;
  result = (uint64_t *)sub_22F3B95FC(v8, a2);
  if (!result)
    return sub_22EE3C0B4((uint64_t *)a1, v8, a2);
  return result;
}

uint64_t *sub_22EE3C0B4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _BYTE v34[96];
  uint64_t v35;
  unsigned int v36[24];
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  _BYTE v40[96];
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[33];
  uint64_t v44;
  uint64_t v45;
  llvm *v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v44 = *a1;
  v45 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v44 + i) = -4096;
  v48 = (char *)&v50;
  v49 = 0x100000000;
  v51 = *(_QWORD *)(v6 + 12024);
  v52 = 0;
  v53 = 0;
  *(_QWORD *)(v6 + 12024) = &v44;
  v8 = sub_22EE389A4(a1, *(int **)(a3 + 424));
  if (!v8)
  {
    v12 = 0;
    goto LABEL_14;
  }
  v9 = (uint64_t)v8;
  v10 = *(uint64_t **)(a3 + 432);
  v41 = v43;
  v11 = *v10;
  v42 = 0x800000000;
  v43[32] = v11;
  if ((sub_22EE09D78(*a1, (uint64_t)(v10 + 2), *((unsigned int *)v10 + 2), a1[4]) & 1) == 0)
  {
    v38 = (__int128 *)v40;
    v39 = 0x400000000;
    v12 = 0;
    if ((sub_22ED61988((_QWORD *)*a1, (int *)a2, *(_DWORD *)(a3 + 24), (uint64_t)&v41, 0, (uint64_t)&v38, 1, 0) & 1) != 0)
      goto LABEL_10;
    if ((sub_22ED65198((_QWORD *)*a1, *(_DWORD *)(a3 + 24), a2, v42, (uint64_t)v38) & 1) != 0)
      goto LABEL_9;
    v37 = 0;
    v14 = sub_22F3B9448(a2, (uint64_t)v38, v39, v9, (uint64_t)&v37);
    v15 = sub_22EF6512C(*(_QWORD *)(*a1 + 88), a2 & 0xFFFFFFFFFFFFFFF9, (uint64_t)v38, v39, 0);
    v16 = sub_22EF64F48(*(_QWORD *)(*a1 + 88), a2 & 0xFFFFFFFFFFFFFFF9, *(_DWORD *)(a3 + 24), (uint64_t)&v41, v15);
    v17 = (uint64_t *)v16;
    if (v14)
    {
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a3 + 24), 0x1400u, 0, (uint64_t)v36);
      v35 = *v17;
      sub_22E8901B8((uint64_t)v36, &v35);
      sub_22E903BEC(v36);
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v14 + 24), 0x1819u, 0, (uint64_t)v34);
      v18 = (unsigned int *)v34;
    }
    else
    {
      v31 = v16;
      v32 = *a1;
      v19 = *(_QWORD *)(a3 + 56);
      v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8);
      if ((v19 & 4) != 0)
        v20 = (uint64_t *)v20[4];
      v21 = a1[4];
      v22 = sub_22EFBAFDC(a3);
      v23 = (uint64_t *)sub_22EE03524(v32, v20, v21, v22, *(_QWORD *)(a3 + 40), 0);
      v12 = v23;
      if (!v23)
        goto LABEL_10;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 > 1)
      {
        v12 = (uint64_t *)sub_22F3B97F0(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a3 + 64), *(_DWORD *)(a3 + 24), v9, a2, *v23, (uint64_t)v23, *(_BYTE *)(a3 + 96) & 7, v38, v39, (uint64_t)&v41);
        if (!sub_22EE2CCAC(*a1, a1[4], a3, (uint64_t)v12))
        {
          *(_QWORD *)(v12[10] + 440) = *(_QWORD *)(v12[10] + 440) & 7 | a3;
          sub_22F34A548((unint64_t)v12, v31);
          sub_22ED64058((unsigned int *)*a1, (uint64_t)v12);
          sub_22EFEC0D8(a2, (uint64_t)v12, 0);
          sub_22EE39160((_QWORD *)*a1, (uint64_t)v12, a3, a1[4], a1[5], a1[3], a1[6], 0, 0);
LABEL_10:
          if (v38 != (__int128 *)v40)
            free(v38);
          goto LABEL_12;
        }
LABEL_9:
        v12 = 0;
        goto LABEL_10;
      }
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a3 + 24), 0x1403u, 0, (uint64_t)v36);
      v24 = 0;
      if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x40)
      {
        v25 = *(_QWORD *)(a3 + 16);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v26 = *(_QWORD *)v26;
        v24 = (*(_WORD *)(v26 + 8) & 0x7Eu) - 34 < 4;
      }
      v33 = v24;
      v27 = sub_22E894E38((uint64_t)v36, (unsigned __int8 *)&v33);
      v35 = *v12;
      sub_22E8901B8(v27, &v35);
      v18 = v36;
    }
    sub_22E903BEC(v18);
    goto LABEL_9;
  }
  v12 = 0;
LABEL_12:
  if (v41 != v43)
    free(v41);
LABEL_14:
  if (!(_BYTE)v52)
  {
    if ((_DWORD)v49)
    {
      v28 = 0;
      v29 = 8 * v49;
      do
      {
        v30 = *(void ***)&v48[v28];
        if (v30)
        {
          if (*v30 != v30 + 2)
            free(*v30);
          MEMORY[0x2348A0E9C](v30, 0x1080C40ED926357);
        }
        v28 += 8;
      }
      while (v29 != v28);
    }
    *(_QWORD *)(v44 + 12024) = v51;
    LOBYTE(v52) = 1;
  }
  if (v48 != (char *)&v50)
    free(v48);
  if ((v45 & 1) == 0)
    llvm::deallocate_buffer(v46, (void *)(16 * v47));
  return v12;
}

unint64_t sub_22EE3C58C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  llvm *v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v26 = *a1;
  v27 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v26 + i) = -4096;
  v30 = &v32;
  v31 = 0x100000000;
  v33 = *(_QWORD *)(v4 + 12024);
  v34 = 0;
  v35 = 0;
  *(_QWORD *)(v4 + 12024) = &v26;
  v6 = sub_22EE389A4(a1, *(int **)(a2 + 56));
  if (!v6)
    goto LABEL_7;
  v7 = *(_QWORD *)(a2 + 48);
  if (v7 && (*(_DWORD *)(v7 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v8 = sub_22EE3C878(a1, v7, v6, 0, 0, 0);
    if (!v8)
    {
LABEL_7:
      v9 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = sub_22EE3DF6C(a1, v7, v6, 0);
    if (!v8)
      goto LABEL_7;
  }
  v11 = *(_QWORD *)(v8 + 144);
  v9 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 6) != 0)
    v12 = 0;
  else
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_DWORD *)(v12 + 28);
  v14 = v13 & 0x1800000;
  *(_DWORD *)(v12 + 28) = v13 & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  if (*(_QWORD *)sub_22EFE9368(v12) > 7uLL)
  {
LABEL_24:
    if (!v14)
    {
      sub_22EFCCFA0(a1[3], v12);
      goto LABEL_8;
    }
    goto LABEL_25;
  }
  if (!v14 || sub_22E49F868(*(_QWORD *)(a2 + 48)))
  {
    v15 = (_QWORD *)sub_22EFE9368(v12);
    *v15 = *v15 & 7 | a2;
    goto LABEL_24;
  }
LABEL_25:
  v16 = *(_QWORD *)(v12 + 16);
  v17 = v16 & 0xFFFFFFFFFFFFFFF8;
  if ((v16 & 4) != 0)
    v17 = *(_QWORD *)v17;
  if ((*(_WORD *)(v17 + 8) & 0x7Eu) - 34 <= 3)
  {
    if ((*(_BYTE *)(a2 + 64) & 3) != 0)
      goto LABEL_29;
    v18 = sub_22E3CD31C((uint64_t *)(a2 + 64), a2);
    if (!v18)
      goto LABEL_29;
    v19 = *(_QWORD *)(a2 + 16);
    v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) != 0)
    {
      if ((*(_WORD *)(*v20 + 8) & 0x7Fu) - 35 > 2)
        goto LABEL_8;
      v20 = (_QWORD *)v20[1];
    }
    else if (((_WORD)v20[1] & 0x7Fu) - 35 >= 3)
    {
      goto LABEL_8;
    }
    v21 = *(_QWORD *)(v18 + 16);
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    if ((v21 & 4) != 0)
      v22 = *(_QWORD *)(v22 + 8);
    if (v20 != (_QWORD *)v22)
LABEL_29:
      sub_22E90B0B0((_QWORD *)*a1, v12);
  }
LABEL_8:
  if (!(_BYTE)v34)
  {
    if ((_DWORD)v31)
    {
      v23 = 0;
      v24 = 8 * v31;
      do
      {
        v25 = *(void ***)((char *)v30 + v23);
        if (v25)
        {
          if (*v25 != v25 + 2)
            free(*v25);
          MEMORY[0x2348A0E9C](v25, 0x1080C40ED926357);
        }
        v23 += 8;
      }
      while (v24 != v23);
    }
    *(_QWORD *)(v26 + 12024) = v33;
    LOBYTE(v34) = 1;
  }
  if (v30 != &v32)
    free(v30);
  if ((v27 & 1) == 0)
    llvm::deallocate_buffer(v28, (void *)(16 * v29));
  return v9;
}

unint64_t sub_22EE3C878(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, char a5, int a6)
{
  int *v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  void *v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int k;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int m;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int j;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  void *v150;
  int v151;
  _QWORD *v152;
  unsigned int *v153;
  uint64_t v154;
  unsigned int *v155;
  char v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  _DWORD *v169;
  int v170;
  uint64_t v171;
  unint64_t v172;
  BOOL v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v183;
  uint64_t v184;
  void **v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t *v197;
  unint64_t v198;
  void *v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  char v203;
  uint64_t *v204;
  unsigned int v205;
  _BOOL4 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  int v213;
  void *v214[2];
  void *v215[2];
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  _BYTE v220[64];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int16 v229;
  char v230;
  int v231;
  void *v232;
  uint64_t v233;
  _BYTE v234[32];
  void *v235[2];
  _BYTE v236[32];
  uint64_t v237;
  uint64_t v238;
  llvm *v239;
  unsigned int v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  BOOL v246;
  uint64_t v247;
  uint64_t v248;

  v9 = a3;
  v248 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a2 + 144);
  if ((v12 & 6) != 0)
    v13 = 0;
  else
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if (!a3 && v13)
  {
    v14 = *(uint64_t **)a1[4];
    v15 = *v14;
    v16 = v14[1];
    v214[0] = 0;
    v17 = sub_22EFE9880(v13, v15, v16, (uint64_t)v214);
    if (v17)
      return v17;
    v18 = (*(_WORD *)(v13 + 30) & 0x180) != 0;
LABEL_13:
    v21 = (_QWORD *)a1[3];
    v22 = v21[1] & 0x7F;
    v23 = -40;
    if (v22 > 0x46)
    {
      if (v22 != 83)
      {
        if (v22 == 71)
        {
          v23 = -56;
          goto LABEL_29;
        }
        if (v22 == 81)
          goto LABEL_29;
LABEL_24:
        v24 = v22 - 52;
        v25 = v22 - 33 >= 5;
        v26 = -48;
        if (!v25)
          v26 = -64;
        if (v24 >= 6)
          v23 = v26;
        else
          v23 = -72;
      }
    }
    else
    {
      if (v22 > 0x18)
        goto LABEL_23;
      if (v22 != 16)
      {
        if (((1 << v22) & 0x1066) != 0)
          goto LABEL_29;
        if (v22 != 24)
        {
LABEL_23:
          if (v22 == 70)
          {
            v23 = -64;
            goto LABEL_29;
          }
          goto LABEL_24;
        }
      }
      v23 = -48;
    }
LABEL_29:
    v20 = sub_22EFC8010((uint64_t)v21 + v23) != 0;
    goto LABEL_30;
  }
  if (v13)
    v19 = v13;
  else
    v19 = a2;
  v18 = (*(_WORD *)(v19 + 30) & 0x180) != 0;
  if (!a3)
    goto LABEL_13;
  v20 = 1;
LABEL_30:
  v203 = a5;
  v27 = *a1;
  v237 = *a1;
  v238 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v237 + i) = -4096;
  v205 = 0;
  v244 = *(_QWORD *)(v27 + 12024);
  v241 = &v243;
  v242 = 0x100000000;
  v245 = 0;
  v246 = v20;
  v247 = 0;
  *(_QWORD *)(v27 + 12024) = &v237;
  v235[0] = v236;
  v235[1] = (void *)0x400000000;
  v204 = a4;
  if (v18)
  {
    v29 = *(_QWORD *)(a2 + 56);
    if ((v29 & 4) != 0 && (v30 = v29 & 0xFFFFFFFFFFFFFFF8, v31 = *(unsigned int *)(v30 + 16), (_DWORD)v31))
    {
      v118 = *(unsigned int *)(v30 + 16);
      sub_22F24C010((uint64_t)v235, v31);
      v119 = 0;
      v205 = v118;
      v120 = 8 * v118;
      do
      {
        v121 = sub_22EE389A4(a1, *(int **)(*(_QWORD *)((*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8) + 24) + v119));
        if (!v121)
          goto LABEL_42;
        *(_QWORD *)((char *)v235[0] + v119) = v121;
        v119 += 8;
      }
      while (v120 != v119);
      v27 = *a1;
    }
    else
    {
      v205 = 0;
    }
  }
  v32 = a1[4];
  v33 = *(_WORD *)(a2 + 80) & 0x7F;
  v206 = v18;
  switch(v33)
  {
    case '8':
      v34 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 160);
      break;
    case '7':
      v35 = *(_QWORD *)(a2 + 112);
      v36 = *(_QWORD *)(v35 + 80);
      if ((v36 & 0x4000000000000000) != 0)
        v34 = *(_QWORD *)(v35 + 16 * ((v36 >> 61) & 1) + 168);
      else
        v34 = v36 >> 63;
      break;
    case '5':
      v34 = *(_QWORD *)(a2 + 168);
      break;
    default:
      v34 = 0;
      break;
  }
  v37 = sub_22EE3F6D0(v27, v32, v34);
  if (v37 != 2)
  {
    v38 = v37;
    v39 = *(_WORD *)(a2 + 80) & 0x7F;
    v40 = -40;
    if (v39 > 0x46)
    {
      if (v39 == 83)
        goto LABEL_59;
      if (v39 == 71)
      {
        v40 = -56;
        goto LABEL_59;
      }
      if (v39 != 81)
      {
LABEL_54:
        v41 = v39 - 52;
        v25 = v39 - 33 >= 5;
        v42 = -48;
        if (!v25)
          v42 = -64;
        if (v41 >= 6)
          v40 = v42;
        else
          v40 = -72;
      }
    }
    else
    {
      if (v39 > 0x18)
        goto LABEL_53;
      if (v39 == 16)
      {
LABEL_46:
        v40 = -48;
        goto LABEL_59;
      }
      if (((1 << v39) & 0x1066) == 0)
      {
        if (v39 == 24)
          goto LABEL_46;
LABEL_53:
        if (v39 == 70)
        {
          v40 = -64;
          goto LABEL_59;
        }
        goto LABEL_54;
      }
    }
LABEL_59:
    v43 = *(_QWORD *)(a2 + 72 + v40 + 16);
    v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8);
    if ((v43 & 4) != 0)
      v44 = (_QWORD *)*v44;
    if (v44)
      v45 = v44 - 8;
    else
      v45 = 0;
    v46 = v45[16];
    if (v46 && ((*(unsigned __int16 *)(v46 + 8) | (*(unsigned __int8 *)(v46 + 10) << 16)) & 0x100000) != 0)
    {
      v47 = *(_QWORD *)(a2 + 56);
      v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if ((v47 & 4) != 0)
        v48 = *(_QWORD *)(v48 + 32);
      if (!v48 && ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x39 || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x37))
      {
        v55 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 48), 0);
        v56 = *(_QWORD *)(a2 + 56);
        if ((v56 & 4) != 0)
          *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 32) = v55;
        else
          *(_QWORD *)(a2 + 56) = v55 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    v232 = v234;
    v233 = 0x400000000;
    v49 = sub_22EE3F858(a1, a2, (uint64_t)&v232);
    v212 = v49;
    if (v49)
    {
      v211 = sub_22EE3FCD8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 48), (uint64_t)v49);
      if (v9)
      {
        v50 = v9[3];
        v51 = v50 & 0x1FFFFFFF;
        if ((v50 & 0x1FFFFFFF) != 0)
        {
          v52 = (uint64_t)(v9 + 4);
          v53 = *(_QWORD *)&v9[2 * v51 + 2];
          if (v53)
          {
            if ((*(_DWORD *)(v53 + 28) & 0x27F) == 0x226 && (*(_BYTE *)(v53 + 60) & 2) != 0)
            {
              if ((v50 & 0x40000000) != 0)
                v54 = *(_QWORD *)(v52 + 8 * v51);
              else
                v54 = 0;
              v9 = sub_22EFE8F48(*(_QWORD *)(*a1 + 88), *v9, v9[1], v52, v51, v9[2], v54);
            }
          }
        }
      }
      v57 = *(_QWORD *)(a2 + 56);
      if ((v57 & 4) == 0)
      {
        v58 = 0;
        v59 = a1[3];
        v197 = a1 + 3;
        if (!v206)
        {
          v199 = 0;
          v200 = 0;
          goto LABEL_117;
        }
        v199 = 0;
LABEL_113:
        v79 = *(_QWORD *)(a2 + 16);
        v80 = (_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF8);
        if ((v79 & 4) != 0)
          v80 = (_QWORD *)*v80;
        v59 = sub_22EE3B6BC(*a1, *(_DWORD *)(a2 + 24), (uint64_t)v80, a1[4]);
        v200 = 0;
        goto LABEL_116;
      }
      v60 = (unint64_t *)(v57 & 0xFFFFFFFFFFFFFFF8);
      v199 = (void *)v60[1];
      if (!*v60)
      {
        v200 = 0;
        goto LABEL_89;
      }
      v179 = sub_22F348DBC(*a1, *v60, v199, a1[4]);
      v199 = v180;
      if (v179)
      {
        v200 = v179;
        v181 = *(_QWORD *)(a2 + 56);
        if ((v181 & 4) == 0)
        {
          v58 = 0;
LABEL_108:
          v59 = a1[3];
          v197 = a1 + 3;
          if (!v206)
            goto LABEL_117;
          if (!v200)
            goto LABEL_113;
          *(_OWORD *)v214 = 0u;
          *(_OWORD *)v215 = 0u;
          sub_22E8ACE30((uint64_t)v214, v200, (uint64_t)v199);
          v59 = sub_22E958204(*a1, (uint64_t)v214, 0);
          v78 = !v59 || (sub_22E958490(*a1, v214, v59) & 1) == 0;
          if (HIDWORD(v215[1]))
          {
            v202 = a6;
            v104 = v78;
            free(v215[0]);
            v78 = v104;
            a6 = v202;
          }
          if (v78)
          {
LABEL_116:
            if (v59)
            {
LABEL_117:
              v201 = v59;
              v81 = *a1;
              v82 = *(_DWORD *)(a2 + 24);
              v83 = *(void **)(a2 + 152);
              v214[0] = *(void **)(a2 + 40);
              LODWORD(v214[1]) = v82;
              v215[0] = v83;
              sub_22EE123D8(v81, (uint64_t)v214, a1[4], (uint64_t)&v207);
              if (a6)
                sub_22F349970((uint64_t)a1, a2, &v211, &v212, (uint64_t *)&v207);
              v84 = v59 - 64;
              if (!v59)
                v84 = 0;
              v198 = v84;
              v85 = *(_DWORD *)(a2 + 64);
              v86 = *(_DWORD *)(a2 + 28) & 0x7F;
              if (v86 == 57)
              {
                v17 = sub_22EFD8738(*(_QWORD *)(*a1 + 88), v198, v85, (uint64_t *)&v207, v211, (uint64_t)v212, (*(_QWORD *)(a2 + 80) & 0x8000000000) != 0, (*(_QWORD *)(a2 + 80) & 0x20000) != 0, 0, *(_QWORD *)(a2 + 80) >> 30, (uint64_t)v58);
                *(_DWORD *)(v17 + 140) = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) >> 32;
                v94 = *(_QWORD *)(*a1 + 88);
                v95 = (_QWORD *)(v94 + 15224);
                v96 = *(_QWORD *)(v198 + 48);
                if (v96)
                  v97 = v96 & 0xFFFFFFFFFFFFFFF0;
                else
                  v97 = sub_22EF6462C(v94, v198);
                *(_QWORD *)(v17 + 40) = sub_22EFC6B40(v95, v97 & 7 | *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFFF0) + 8));
                v87 = v198;
              }
              else
              {
                if (v86 == 56)
                {
                  v193 = *(_QWORD *)(*a1 + 88);
                  v195 = v211;
                  v191 = v212;
                  v88 = *(_QWORD *)(a2 + 80);
                  v89 = (v88 >> 39) & 1;
                  v90 = (v88 >> 17) & 1;
                  v91 = v88 >> 30;
                  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
                  v190 = (uint64_t)v58;
                  v87 = v198;
                  v93 = sub_22EFD88BC(v193, v198, v85, (uint64_t *)&v207, v195, (uint64_t)v191, v89, v90, v38, v91, v187, SHIDWORD(v92), v190);
                }
                else
                {
                  if (v86 == 55)
                  {
                    v189 = (uint64_t)v58;
                    v87 = v198;
                    v17 = sub_22EFD7DFC(*(_QWORD *)(*a1 + 88), v198, v85, (uint64_t *)&v207, v211, (uint64_t)v212, v38, (*(_QWORD *)(a2 + 80) & 0x8000000000) != 0, (*(_QWORD *)(a2 + 80) & 0x20000) != 0, 0, *(_QWORD *)(a2 + 80) >> 30, 0, 0, v189);
                    *(_DWORD *)(v17 + 140) = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) >> 32;
                    goto LABEL_142;
                  }
                  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
                    || (*(_QWORD *)(a2 + 40) & 7) == 6
                    && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
                  {
                    v196 = 2;
                  }
                  else
                  {
                    v196 = 0;
                  }
                  v98 = v212;
                  v192 = *(_QWORD *)(*a1 + 88);
                  v194 = v211;
                  v99 = *(_QWORD *)(a2 + 80);
                  v100 = (v99 >> 39) & 1;
                  v101 = (v99 >> 17) & 1;
                  v102 = v99 >> 30;
                  v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
                  v188 = (uint64_t)v58;
                  v87 = v198;
                  v93 = sub_22EFD6AD8(v192, v198, v85, (uint64_t *)&v207, v194, (uint64_t)v98, v196, v100, v101, v102, SHIDWORD(v103), v188);
                }
                v17 = v93;
              }
LABEL_142:
              if ((*(_BYTE *)(a2 + 82) & 1) != 0)
                *(_QWORD *)(v17 + 80) |= 0x10000uLL;
              if (v200)
                sub_22EFBB0DC(v17, v200, (uint64_t)v199);
              if (v9)
              {
                if (v201)
                  v105 = v87 + 64;
                else
                  v105 = 0;
                v106 = sub_22EFE964C(*(_QWORD *)(*a1 + 88), v105, *(_DWORD *)(v17 + 24), *(_QWORD *)(v17 + 40), (uint64_t)v9, v17);
                v13 = v106;
                if (v206)
                {
                  sub_22EFC80C4(v106, *v197);
                  sub_22EA22164((_DWORD *)v13, 0);
                }
                else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
                {
                  v116 = *(_QWORD *)(a2 + 16);
                  v117 = v116 & 0xFFFFFFFFFFFFFFF8;
                  if ((v116 & 4) != 0)
                    v117 = *(_QWORD *)(v117 + 8);
                  sub_22EFC80C4(v13, v117);
                }
                *(_QWORD *)(v17 + 144) = v13 & 0xFFFFFFFFFFFFFFF9;
LABEL_187:
                if (v206)
                {
LABEL_188:
                  if (v205)
                    sub_22EFBB25C(v17, *(_QWORD *)(*a1 + 88), v235[0], v205);
                  sub_22EFC80C4(v17, *v197);
                  sub_22EA22164((_DWORD *)v17, 0);
                  goto LABEL_230;
                }
LABEL_226:
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
                {
                  v131 = *(_QWORD *)(a2 + 16);
                  v132 = v131 & 0xFFFFFFFFFFFFFFF8;
                  if ((v131 & 4) != 0)
                    v132 = *(_QWORD *)(v132 + 8);
                  sub_22EFC80C4(v17, v132);
                }
LABEL_230:
                v133 = v233;
                v134 = v232;
                if ((_DWORD)v233)
                {
                  v135 = v17 + 72;
                  if (!v17)
                    v135 = 0;
                  v136 = v135 & 0xFFFFFFFFFFFFFFFBLL;
                  v137 = (uint64_t *)v232;
                  v138 = v233;
                  do
                  {
                    v139 = *v137++;
                    *(_QWORD *)(v139 + 16) = v136;
                    --v138;
                  }
                  while (v138);
                  v140 = v133;
                  if (!v17)
                    goto LABEL_239;
                }
                else
                {
                  v140 = 0;
                  if (!v17)
                  {
LABEL_239:
                    v142 = *(_QWORD *)(v17 + 16);
                    v143 = v142 & 0xFFFFFFFFFFFFFFF8;
                    if ((v142 & 4) != 0)
                      v143 = *(_QWORD *)v143;
                    for (j = *(_WORD *)(v143 + 8) & 0x7F; j != 83; j = *(_WORD *)(v143 + 8) & 0x7F)
                    {
                      v145 = -40;
                      if (j > 70)
                      {
                        if (j == 71)
                        {
                          v145 = -56;
                        }
                        else if (j != 81)
                        {
                          goto LABEL_252;
                        }
                      }
                      else
                      {
                        if (j > 0x18)
                          goto LABEL_251;
                        if (j == 16)
                          goto LABEL_245;
                        if (((1 << j) & 0x1066) != 0)
                          goto LABEL_258;
                        if (j == 24)
                        {
LABEL_245:
                          v145 = -48;
                        }
                        else
                        {
LABEL_251:
                          if (j != 70)
                          {
LABEL_252:
                            v146 = j - 52;
                            if ((j - 33) >= 5)
                              v147 = -48;
                            else
                              v147 = -64;
                            if (v146 >= 6)
                              v145 = v147;
                            else
                              v145 = -72;
                            goto LABEL_258;
                          }
                          v145 = -64;
                        }
                      }
LABEL_258:
                      v148 = *(_QWORD *)(v143 + v145 + 16);
                      v143 = v148 & 0xFFFFFFFFFFFFFFF8;
                      if ((v148 & 4) != 0)
                        v143 = *(_QWORD *)v143;
                    }
                    v141 = v143 - 40;
LABEL_265:
                    if ((_DWORD)v133)
                    {
                      v149 = 8 * v140;
                      v150 = (void *)sub_22E3CD3D4(*(_QWORD *)(v141 + 88) + 2032, 8 * v140, 3);
                      *(_QWORD *)(v17 + 120) = v150;
                      memmove(v150, v134, v149);
                    }
                    sub_22EE3FDA4(a1, v17, a2);
                    v151 = *(_DWORD *)(v17 + 28);
                    if ((v151 & 0x7F) == 0x39 && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 1) & 2) != 0)
                    {
                      sub_22F3291E4(*a1, v17);
                      v151 = *(_DWORD *)(v17 + 28);
                    }
                    *(_DWORD *)(v17 + 28) = v151 & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
                    if ((*(_BYTE *)(a2 + 82) & 4) != 0)
                      *(_QWORD *)(v17 + 80) |= 0x40000uLL;
                    v152 = (_QWORD *)*a1;
                    v217 = 0;
                    v218 = v220;
                    v219 = 0x800000000;
                    v221 = 0;
                    v222 = 0;
                    v223 = 0;
                    v224 = v152;
                    v225 = v207;
                    v228 = 0;
                    v226 = v208;
                    v227 = 0;
                    v229 = 257;
                    v230 = 1;
                    v231 = 0;
                    sub_22EC56024((uint64_t)&v217);
                    v153 = (unsigned int *)(*(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8);
                    if ((*(_QWORD *)(a2 + 144) & 6) == 6 && v153)
                    {
                      v214[0] = v215;
                      v154 = *((_QWORD *)v153 + 1);
                      v214[1] = (void *)0x800000000;
                      v216 = v154;
                      v155 = v153 + 4;
                      if ((sub_22EE09D78(*a1, v153 + 4, v153[1], a1[4], v214) & 1) != 0)
                      {
                        v156 = 0;
                      }
                      else
                      {
                        v161 = *v153;
                        if ((_DWORD)v161)
                        {
                          while (1)
                          {
                            v162 = sub_22EE37A18(*a1, *(unsigned int *)(a2 + 24), *(_QWORD *)&v155[8 * v153[1]], a1[4], 0);
                            if (!v162)
                              break;
                            v163 = v162;
                            v164 = *(unsigned int *)(v162 + 28);
                            v165 = v219;
                            if (v219 >= (unint64_t)HIDWORD(v219))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                              v165 = v219;
                            }
                            *((_QWORD *)v218 + v165) = (v164 >> 13) & 3 | v163;
                            LODWORD(v219) = v219 + 1;
                            LODWORD(v217) = 2;
                            v155 += 2;
                            if (!--v161)
                              goto LABEL_297;
                          }
                          v156 = 0;
                        }
                        else
                        {
LABEL_297:
                          v156 = 1;
                          if (sub_22ED6CFD0())
                            sub_22EFC77E8(v17, 1);
                        }
                      }
                      if (v214[0] != v215)
                        free(v214[0]);
                      if ((v156 & 1) == 0)
                        goto LABEL_313;
LABEL_303:
                      v166 = 1;
                      goto LABEL_304;
                    }
                    v157 = 0;
                    if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v153)
                      v157 = (uint64_t *)*((_QWORD *)v153 + 4);
                    if (v203)
                      v158 = v204;
                    else
                      v158 = v157;
                    if (v158)
                    {
                      sub_22EC611AC(*a1, &v217, v201, 0);
                      v214[0] = v215;
                      v159 = *v158;
                      v214[1] = (void *)0x800000000;
                      v216 = v159;
                      v160 = sub_22EE09D78(*a1, v158 + 2, *((unsigned int *)v158 + 2), a1[4], v214);
                      if ((v160 & 1) == 0 && sub_22ED6CFD0())
                        sub_22EFC77E8(v17, 1);
                      if (v214[0] != v215)
                        free(v214[0]);
                      if ((v160 & 1) != 0)
                        goto LABEL_313;
                      goto LABEL_303;
                    }
                    if (v203)
                    {
                      sub_22EC611AC(*a1, &v217, v201, 0);
                      if (sub_22ED6CFD0())
                      {
                        v166 = 1;
                        sub_22EFC77E8(v17, 1);
                        goto LABEL_304;
                      }
                      goto LABEL_303;
                    }
                    if (v9)
                      v173 = 1;
                    else
                      v173 = v13 == 0;
                    v174 = v206;
                    if (v173)
                      v174 = 1;
                    if (v174 == 1)
                    {
                      if (v201)
                        v175 = v198 + 64;
                      else
                        v175 = 0;
                      sub_22EC611AC(*a1, &v217, v175, 0);
                      v166 = 0;
                      if ((_DWORD)v217 != 2)
                        goto LABEL_304;
                      v176 = *(_QWORD *)v218 & 0xFFFFFFFFFFFFFFFCLL;
                      v177 = *(_DWORD *)(v176 + 28) & 0x7F;
                      if (v177 <= 0x2F && ((1 << v177) & 0xC00000060000) != 0)
                        v177 = *(_DWORD *)(sub_22EFBAEA4(v176) + 28) & 0x7F;
                      if (v177 - 33 <= 4)
                      {
                        LODWORD(v217) = 0;
                        LODWORD(v219) = 0;
                        if (v221)
                        {
                          v178 = sub_22EC6CBD0(v221);
                          MEMORY[0x2348A0E9C](v178, 0x10E0C409F09D3C3);
                        }
                        v166 = 0;
                        BYTE2(v231) = 0;
                        v221 = 0;
                        v222 = 0;
LABEL_304:
                        v167 = *a1;
                        v168 = sub_22E49F868(v17);
                        sub_22EA23284(v167, 0, v17, &v217, v166, v168);
                        if ((*(_BYTE *)(a2 + 82) & 8) != 0)
                          sub_22EAD107C((_QWORD *)*a1, v17, 0);
                        if (v206 && (*(_BYTE *)(v17 + 104) & 3) == 0)
                        {
                          v172 = sub_22E3CD31C((uint64_t *)(v17 + 104), v17);
                          v169 = (_DWORD *)(a2 + 28);
                          if (v172)
                            v169 = (_DWORD *)(sub_22E3CD31C((uint64_t *)(v17 + 104), v17) + 28);
                        }
                        else
                        {
                          v169 = (_DWORD *)(a2 + 28);
                        }
                        v170 = *v169 & 0x6000;
                        *(_DWORD *)(v17 + 28) = *(_DWORD *)(v17 + 28) & 0xFFFF9FFF | v170;
                        if (v13)
                          *(_DWORD *)(v13 + 28) = *(_DWORD *)(v13 + 28) & 0xFFFF9FFF | v170;
                        sub_22EAAB818((_QWORD *)*a1, v17);
                        v171 = *(_QWORD *)(a2 + 80);
                        if ((v171 & 0x4000000) != 0)
                        {
                          if ((sub_22EE401BC(a1, v17, a2) & 1) != 0)
                          {
LABEL_313:
                            v17 = 0;
LABEL_355:
                            if ((_BYTE)v231)
                            {
                              if ((_DWORD)v217 == 5)
                              {
                                sub_22EC64D18(v224, (uint64_t)&v217);
                              }
                              else if (v222 && (*(_DWORD *)(v224[9] + 52) & 0x400000) != 0)
                              {
                                sub_22E90B5FC((unint64_t)v224, (uint64_t)&v217);
                              }
                            }
                            if (v221)
                            {
                              v186 = sub_22EC6CBD0(v221);
                              MEMORY[0x2348A0E9C](v186, 0x10E0C409F09D3C3);
                            }
                            if (v218 != v220)
                              free(v218);
                            goto LABEL_364;
                          }
                          v171 = *(_QWORD *)(a2 + 80);
                        }
                        if ((v171 & 0x2400000) == 0x400000)
                          sub_22EAB9ED0((_QWORD *)*a1, v17, *(_DWORD *)(v17 + 24));
                        if (((v166 ^ 1 | v206) & 1) == 0)
                          sub_22ED6E4B0(*a1, (_DWORD *)v17);
                        if (!v13 && ((*(_BYTE *)(v17 + 28) & 0x80) == 0 || !(_DWORD)v219))
                        {
                          if (v206)
                          {
                            if ((*(_BYTE *)(a2 + 104) & 3) != 0 || !sub_22E3CD31C((uint64_t *)(a2 + 104), a2))
                              sub_22E90B0B0((_QWORD *)*a1, v17);
                            sub_22EFCE90C(v198 + 64, v17);
                          }
                          else
                          {
                            sub_22EFCCFA0(*v197, v17);
                          }
                        }
                        goto LABEL_355;
                      }
                    }
                    v166 = 0;
                    goto LABEL_304;
                  }
                }
                v141 = v17;
                if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x53)
                  goto LABEL_265;
                goto LABEL_239;
              }
              if (v13)
              {
                sub_22EFEB554(*(_QWORD *)(*a1 + 88), **(__n128 ***)a1[4], *(_QWORD *)(*(_QWORD *)a1[4] + 8));
                if (!v17 || (v108 = v17, (*(_DWORD *)(v17 + 28) & 0x7F) != 0x53))
                {
                  v109 = *(_QWORD *)(v17 + 16);
                  v110 = v109 & 0xFFFFFFFFFFFFFFF8;
                  if ((v109 & 4) != 0)
                    v110 = *(_QWORD *)v110;
                  for (k = *(_WORD *)(v110 + 8) & 0x7F; k != 83; k = *(_WORD *)(v110 + 8) & 0x7F)
                  {
                    v112 = -40;
                    if (k > 70)
                    {
                      if (k == 71)
                      {
                        v112 = -56;
                      }
                      else if (k != 81)
                      {
                        goto LABEL_168;
                      }
                    }
                    else
                    {
                      if (k > 0x18)
                        goto LABEL_167;
                      if (k == 16)
                        goto LABEL_161;
                      if (((1 << k) & 0x1066) != 0)
                        goto LABEL_174;
                      if (k == 24)
                      {
LABEL_161:
                        v112 = -48;
                      }
                      else
                      {
LABEL_167:
                        if (k != 70)
                        {
LABEL_168:
                          v113 = k - 52;
                          if ((k - 33) >= 5)
                            v114 = -48;
                          else
                            v114 = -64;
                          if (v113 >= 6)
                            v112 = v114;
                          else
                            v112 = -72;
                          goto LABEL_174;
                        }
                        v112 = -64;
                      }
                    }
LABEL_174:
                    v115 = *(_QWORD *)(v110 + v112 + 16);
                    v110 = v115 & 0xFFFFFFFFFFFFFFF8;
                    if ((v115 & 4) != 0)
                      v110 = *(_QWORD *)v110;
                  }
                  v108 = v110 - 40;
                }
                sub_22EFC23A4(v17, *(_QWORD *)(v108 + 88), v13, v107, 0, 1, 0, 0);
                goto LABEL_187;
              }
              if (v206)
              {
                v13 = 0;
                goto LABEL_188;
              }
              if (!v17 || (v122 = v17, (*(_DWORD *)(v17 + 28) & 0x7F) != 0x53))
              {
                v123 = *(_QWORD *)(v17 + 16);
                v124 = v123 & 0xFFFFFFFFFFFFFFF8;
                if ((v123 & 4) != 0)
                  v124 = *(_QWORD *)v124;
                for (m = *(_WORD *)(v124 + 8) & 0x7F; m != 83; m = *(_WORD *)(v124 + 8) & 0x7F)
                {
                  v126 = -40;
                  if (m > 70)
                  {
                    if (m == 71)
                    {
                      v126 = -56;
                    }
                    else if (m != 81)
                    {
                      goto LABEL_212;
                    }
                  }
                  else
                  {
                    if (m > 0x18)
                      goto LABEL_211;
                    if (m == 16)
                      goto LABEL_205;
                    if (((1 << m) & 0x1066) != 0)
                      goto LABEL_218;
                    if (m == 24)
                    {
LABEL_205:
                      v126 = -48;
                    }
                    else
                    {
LABEL_211:
                      if (m != 70)
                      {
LABEL_212:
                        v127 = m - 52;
                        if ((m - 33) >= 5)
                          v128 = -48;
                        else
                          v128 = -64;
                        if (v127 >= 6)
                          v126 = v128;
                        else
                          v126 = -72;
                        goto LABEL_218;
                      }
                      v126 = -64;
                    }
                  }
LABEL_218:
                  v129 = *(_QWORD *)(v124 + v126 + 16);
                  v124 = v129 & 0xFFFFFFFFFFFFFFF8;
                  if ((v129 & 4) != 0)
                    v124 = *(_QWORD *)v124;
                }
                v122 = v124 - 40;
              }
              v130 = sub_22E3CD3D4(*(_QWORD *)(v122 + 88) + 2032, 16, 3);
              v13 = 0;
              *(_QWORD *)v130 = a2 & 0xFFFFFFFFFFFFFFF9;
              *(_DWORD *)(v130 + 8) = 0;
              *(_QWORD *)(v17 + 144) = v130 & 0xFFFFFFFFFFFFFFF9 | 2;
              goto LABEL_226;
            }
          }
LABEL_139:
          v17 = 0;
          goto LABEL_364;
        }
        v60 = (unint64_t *)(v181 & 0xFFFFFFFFFFFFFFF8);
LABEL_89:
        v58 = (unsigned __int8 *)v60[5];
        if (v58)
        {
          v61 = *a1;
          LODWORD(v207) = 0;
          v214[0] = 0;
          v213 = 3;
          v217 = *(unsigned int *)(v61 + 1704);
          sub_22EB4DDB8(v61 + 3688, (int *)&v207, (int *)&v217, (__int16 *)(v61 + 1693), (uint64_t *)v214, &v213);
          v62 = *(unsigned int *)(v61 + 3696);
          v63 = v62 - 2;
          v64 = *(_QWORD *)(v61 + 3688);
          v65 = *(_DWORD *)(v64 + 576 * (v62 - 2));
          if (v65 == 5)
          {
            *(_BYTE *)(v64 + 576 * v62 - 4) = *(_BYTE *)(v64 + 576 * v63 + 572);
            v66 = 1;
          }
          else if (v65 == 2)
          {
            *(_BYTE *)(v64 + 576 * v62 - 4) = 1;
            v66 = *(_BYTE *)(v64 + 576 * v63 + 573) != 0;
          }
          else
          {
            v66 = 0;
            *(_BYTE *)(v64 + 576 * v62 - 4) = 0;
          }
          v67 = v64 + 576 * v62;
          *(_BYTE *)(v67 - 3) = v66;
          *(_WORD *)(v61 + 1693) = 0;
          if (*(_DWORD *)(v61 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v61 + 1776), (llvm::SmallPtrSetImplBase *)(v67 - 560));
            sub_22EAEAE08(v61 + 1840, (uint64_t *)(v67 - 496));
          }
          v68 = (_QWORD *)a1[3];
          if (v68)
          {
            v69 = (v68[1] & 0x7F) - 35;
            v70 = (uint64_t)(v68 - 8);
            if (v69 >= 3)
              v71 = 0;
            else
              v71 = v70;
          }
          else
          {
            v71 = 0;
          }
          v72 = *a1;
          v73 = sub_22E46BB88(a2);
          sub_22EBBBB24((uint64_t)v214, v72, v71, v73, v71 != 0);
          v75 = sub_22EE0A68C(*a1, (unint64_t)v58, a1[4], v74);
          if ((v75 & 1) != 0)
          {
            v77 = 0;
          }
          else
          {
            v58 = (unsigned __int8 *)(v75 & 0xFFFFFFFFFFFFFFFELL);
            v76 = *a1;
            v210 = 0;
            v209 = 0uLL;
            v77 = sub_22E9F3234(v76, v58, &v209, 0, 0);
          }
          if (LOBYTE(v215[0]))
            *((void **)v214[0] + 1286) = v214[1];
          sub_22EB48E64(v61);
          if (!v77)
            goto LABEL_139;
        }
        goto LABEL_108;
      }
    }
    v17 = 0;
LABEL_364:
    if (v232 != v234)
      free(v232);
    goto LABEL_366;
  }
LABEL_42:
  v17 = 0;
LABEL_366:
  if (v235[0] != v236)
    free(v235[0]);
  if (!v245)
  {
    if ((_DWORD)v242)
    {
      v183 = 0;
      v184 = 8 * v242;
      do
      {
        v185 = *(void ***)((char *)v241 + v183);
        if (v185)
        {
          if (*v185 != v185 + 2)
            free(*v185);
          MEMORY[0x2348A0E9C](v185, 0x1080C40ED926357);
        }
        v183 += 8;
      }
      while (v184 != v183);
    }
    *(_QWORD *)(v237 + 12024) = v244;
    v245 = 1;
  }
  if (v241 != &v243)
    free(v241);
  if ((v238 & 1) == 0)
    llvm::deallocate_buffer(v239, (void *)(16 * v240));
  return v17;
}

unint64_t sub_22EE3DF6C(uint64_t *a1, uint64_t a2, int *a3, int a4)
{
  int *v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int j;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int k;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int m;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int *v113;
  char v114;
  _BOOL4 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  char v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  int v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  char v145;
  void *v146;
  uint64_t v147;
  _BOOL4 v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153[3];
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  void *v159[2];
  void *v160[2];
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _BYTE v165[64];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  int v171;
  _QWORD v172[2];
  int v173;
  int v174;
  char v175;
  BOOL v176;
  char v177;
  int v178;
  void *v179;
  uint64_t v180;
  _BYTE v181[32];
  uint64_t v182;
  uint64_t v183;
  llvm *v184;
  unsigned int v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;

  v5 = a3;
  v193 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 144);
  if ((v8 & 6) != 0)
    v9 = 0;
  else
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if (a3 || !v9)
  {
    if (v9)
      v15 = v9;
    else
      v15 = a2;
    v14 = (*(_WORD *)(v15 + 30) & 0x180) != 0;
    if (a3)
    {
      v16 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    v10 = *(uint64_t **)a1[4];
    v11 = *v10;
    v12 = v10[1];
    v159[0] = 0;
    v13 = sub_22EFE9880(v9, v11, v12, (uint64_t)v159);
    if (v13)
      return v13;
    v14 = (*(_WORD *)(v9 + 30) & 0x180) != 0;
    v5 = 0;
  }
  v17 = a1[3];
  v18 = *(_WORD *)(v17 + 8) & 0x7F;
  v16 = 1;
  v19 = v18 > 0x18 || ((1 << v18) & 0x1000006) == 0;
  if (v19 && v18 - 52 >= 6)
  {
    v31 = -40;
    if ((*(_WORD *)(v17 + 8) & 0x7Fu) > 0x46)
    {
      switch(v18)
      {
        case 'S':
          goto LABEL_314;
        case 'G':
          v31 = -56;
          goto LABEL_314;
        case 'Q':
          goto LABEL_314;
      }
    }
    else
    {
      if (v18 <= 0x18)
      {
        if (v18 == 16)
          goto LABEL_36;
        if (((1 << v18) & 0x1066) != 0)
          goto LABEL_314;
        if (v18 == 24)
        {
LABEL_36:
          v31 = -48;
LABEL_314:
          v16 = sub_22EFC8010(v17 + v31) != 0;
          goto LABEL_17;
        }
      }
      if (v18 == 70)
      {
LABEL_312:
        v31 = -64;
        goto LABEL_314;
      }
    }
    if (v18 - 52 < 6)
    {
      v31 = -72;
      goto LABEL_314;
    }
    if (v18 - 33 < 5)
      goto LABEL_312;
    goto LABEL_36;
  }
LABEL_17:
  v20 = *a1;
  v182 = *a1;
  v183 = 1;
  for (i = 16; i != 80; i += 16)
    *(uint64_t *)((char *)&v182 + i) = -4096;
  v22 = 0;
  v186 = (char *)&v188;
  v187 = 0x100000000;
  v189 = *(_QWORD *)(v20 + 12024);
  v190 = 0;
  v191 = v16;
  v192 = 0;
  *(_QWORD *)(v20 + 12024) = &v182;
  if (!a2
    || (*(_DWORD *)(a2 + 28) & 0x7F) != 0x35
    || (v22 = sub_22EE3F6D0(v20, a1[4], *(_QWORD *)(a2 + 168)), v22 != 2))
  {
    v179 = v181;
    v180 = 0x400000000;
    v23 = sub_22EE3F858(a1, a2, (uint64_t)&v179);
    v158 = v23;
    if (!v23)
    {
      v13 = 0;
      goto LABEL_295;
    }
    v24 = v23;
    v25 = sub_22EE3FCD8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 48), (uint64_t)v23);
    v157 = v25;
    if (v5)
    {
      v26 = v5[3];
      v27 = v26 & 0x1FFFFFFF;
      if ((v26 & 0x1FFFFFFF) != 0)
      {
        v28 = (uint64_t)(v5 + 4);
        v29 = *(_QWORD *)&v5[2 * v27 + 2];
        if (v29)
        {
          if ((*(_DWORD *)(v29 + 28) & 0x27F) == 0x226 && (*(_BYTE *)(v29 + 60) & 2) != 0)
          {
            if ((v26 & 0x40000000) != 0)
              v30 = *(_QWORD *)(v28 + 8 * v27);
            else
              v30 = 0;
            v5 = sub_22EFE8F48(*(_QWORD *)(*a1 + 88), *v5, v5[1], v28, v27, v5[2], v30);
          }
        }
      }
    }
    v152 = (uint64_t)v5;
    v32 = *(_QWORD *)(a2 + 56);
    v148 = v14;
    if ((v32 & 4) == 0)
    {
      v146 = 0;
      v149 = 0;
LABEL_56:
      v151 = 0;
LABEL_57:
      if ((*(_BYTE *)(a2 + 31) & 8) != 0)
      {
        v154 = a1[3];
        sub_22EA1D904((unint64_t *)&v154);
        v49 = v149;
      }
      else
      {
        v49 = v149;
        v50 = !v14;
        if (!v149)
          v50 = 1;
        if ((v50 & 1) != 0)
        {
          v51 = *(_QWORD *)(a2 + 16);
          v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
          if ((v51 & 4) != 0)
            v52 = (_QWORD *)*v52;
          v154 = sub_22EE3B6BC(*a1, *(_DWORD *)(a2 + 24), (uint64_t)v52, a1[4]);
        }
        else
        {
          *(_OWORD *)v159 = 0u;
          *(_OWORD *)v160 = 0u;
          sub_22E8ACE30((uint64_t)v159, v149, (uint64_t)v146);
          v13 = sub_22E958204(*a1, (uint64_t)v159, 0);
          v154 = v13;
          if (HIDWORD(v160[1]))
            free(v160[0]);
          if (!v13)
            goto LABEL_295;
        }
      }
      v53 = *a1;
      v54 = *(_DWORD *)(a2 + 24);
      v55 = *(void **)(a2 + 152);
      v159[0] = *(void **)(a2 + 40);
      LODWORD(v159[1]) = v54;
      v160[0] = v55;
      sub_22EE123D8(v53, (uint64_t)v159, a1[4], (uint64_t)v153);
      if (a4)
      {
        sub_22F349970((uint64_t)a1, a2, &v157, &v158, v153);
        v25 = v157;
        v24 = v158;
      }
      v56 = *(_QWORD *)(*a1 + 88);
      v150 = v154;
      v57 = *(_DWORD *)(a2 + 64);
      v58 = *(_QWORD *)a2;
      if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x35)
      {
        v98 = (*(uint64_t (**)(uint64_t))(v58 + 16))(a2);
        v99 = sub_22F3B1DF0(v56, v150, v57, v22, v153, v25, (uint64_t)v24, SHIDWORD(v98), 0);
        v13 = v99;
        if ((*(_BYTE *)(a2 + 84) & 0x20) != 0)
          *(_QWORD *)(v99 + 80) |= 0x2000000000uLL;
        *(_DWORD *)(v99 + 28) = *(_DWORD *)(v99 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
      }
      else
      {
        v59 = (*(uint64_t (**)(uint64_t))(v58 + 32))(a2);
        v13 = sub_22EFC4400(v56, v150, v57, v153, v25, (uint64_t)v24, (unsigned __int16)*(_DWORD *)(v59 + 80) >> 13, (*(_QWORD *)(a2 + 80) & 0x8000000000) != 0, (*(_QWORD *)(a2 + 80) & 0x20000) != 0, (*(_QWORD *)(a2 + 80) & 0x200000) != 0, *(_QWORD *)(a2 + 80) >> 30, v151);
        *(_DWORD *)(v13 + 140) = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) >> 32;
      }
      if ((*(_BYTE *)(a2 + 82) & 1) != 0)
        *(_QWORD *)(v13 + 80) |= 0x10000uLL;
      if (v49)
        sub_22EFBB0DC(v13, v49, (uint64_t)v146);
      if ((*(_BYTE *)(a2 + 31) & 8) != 0)
      {
        v60 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v13 + 48))(v13);
        v61 = *(_DWORD *)(v13 + 28);
        *(_DWORD *)(v13 + 28) = v61 & 0xF7DFFFFF | 0x8000000;
        if (v60)
        {
          if ((*(_BYTE *)(v60 + 30) & 0x20) != 0)
            *(_DWORD *)(v13 + 28) = v61 | 0x8200000;
        }
      }
      v62 = (_QWORD *)a1[3];
      if (!v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
        {
          if ((*(_BYTE *)(a2 + 31) & 8) == 0)
          {
            v63 = *(_QWORD *)(a2 + 16);
            v62 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
            if ((v63 & 4) != 0)
              v62 = (_QWORD *)*v62;
          }
        }
      }
      sub_22EFC80C4(v13, (uint64_t)v62);
      v64 = v180;
      v65 = v179;
      if ((_DWORD)v180)
      {
        v66 = (char *)v179;
        v67 = v180;
        do
        {
          if (*(_QWORD *)v66)
            *(_QWORD *)(*(_QWORD *)v66 + 16) = (v13 + 72) & 0xFFFFFFFFFFFFFFFBLL;
          v66 += 8;
          --v67;
        }
        while (v67);
      }
      if (!v13 || (v68 = v13, (*(_DWORD *)(v13 + 28) & 0x7F) != 0x53))
      {
        v69 = *(_QWORD *)(v13 + 16);
        v70 = v69 & 0xFFFFFFFFFFFFFFF8;
        if ((v69 & 4) != 0)
          v70 = *(_QWORD *)v70;
        for (j = *(_WORD *)(v70 + 8) & 0x7F; j != 83; j = *(_WORD *)(v70 + 8) & 0x7F)
        {
          v72 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v72 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_107;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_106;
            if (j == 16)
              goto LABEL_100;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_113;
            if (j == 24)
            {
LABEL_100:
              v72 = -48;
            }
            else
            {
LABEL_106:
              if (j != 70)
              {
LABEL_107:
                v73 = j - 52;
                if ((j - 33) >= 5)
                  v74 = -48;
                else
                  v74 = -64;
                if (v73 >= 6)
                  v72 = v74;
                else
                  v72 = -72;
                goto LABEL_113;
              }
              v72 = -64;
            }
          }
LABEL_113:
          v75 = *(_QWORD *)(v70 + v72 + 16);
          v70 = v75 & 0xFFFFFFFFFFFFFFF8;
          if ((v75 & 4) != 0)
            v70 = *(_QWORD *)v70;
        }
        v68 = v70 - 40;
      }
      if ((_DWORD)v64)
      {
        v76 = 8 * v64;
        v77 = (void *)sub_22E3CD3D4(*(_QWORD *)(v68 + 88) + 2032, 8 * v64, 3);
        *(_QWORD *)(v13 + 120) = v77;
        memmove(v77, v65, v76);
      }
      if (v151)
        sub_22F3AC084(v13, v151);
      if (v152)
      {
        v9 = sub_22EFE964C(*(_QWORD *)(*a1 + 88), v150, *(_DWORD *)(v13 + 24), *(_QWORD *)(v13 + 40), v152, v13);
        *(_QWORD *)(v13 + 144) = v9 & 0xFFFFFFFFFFFFFFF9;
        sub_22EFC80C4(v9, (uint64_t)v62);
        if (!v14)
        {
          v147 = v9;
          goto LABEL_208;
        }
        if (sub_22E49F868(a2))
        {
          v78 = *(_QWORD *)(a2 + 144);
          v79 = (_QWORD *)sub_22EFE9368(v9);
          if ((v78 & 6) != 0)
            v80 = 0;
          else
            v80 = v78 & 0xFFFFFFFFFFFFFFF8;
          *v79 = v80 & 0xFFFFFFFFFFFFFFF8 | *v79 & 7;
        }
        v147 = v9;
        goto LABEL_205;
      }
      if (v9)
      {
        sub_22EFEB554(*(_QWORD *)(*a1 + 88), **(__n128 ***)a1[4], *(_QWORD *)(*(_QWORD *)a1[4] + 8));
        if (!v13 || (v82 = v13, (*(_DWORD *)(v13 + 28) & 0x7F) != 0x53))
        {
          v83 = *(_QWORD *)(v13 + 16);
          v84 = v83 & 0xFFFFFFFFFFFFFFF8;
          if ((v83 & 4) != 0)
            v84 = *(_QWORD *)v84;
          for (k = *(_WORD *)(v84 + 8) & 0x7F; k != 83; k = *(_WORD *)(v84 + 8) & 0x7F)
          {
            v86 = -40;
            if (k > 70)
            {
              if (k == 71)
              {
                v86 = -56;
              }
              else if (k != 81)
              {
                goto LABEL_148;
              }
            }
            else
            {
              if (k > 0x18)
                goto LABEL_147;
              if (k == 16)
                goto LABEL_141;
              if (((1 << k) & 0x1066) != 0)
                goto LABEL_154;
              if (k == 24)
              {
LABEL_141:
                v86 = -48;
              }
              else
              {
LABEL_147:
                if (k != 70)
                {
LABEL_148:
                  v87 = k - 52;
                  if ((k - 33) >= 5)
                    v88 = -48;
                  else
                    v88 = -64;
                  if (v87 >= 6)
                    v86 = v88;
                  else
                    v86 = -72;
                  goto LABEL_154;
                }
                v86 = -64;
              }
            }
LABEL_154:
            v89 = *(_QWORD *)(v84 + v86 + 16);
            v84 = v89 & 0xFFFFFFFFFFFFFFF8;
            if ((v89 & 4) != 0)
              v84 = *(_QWORD *)v84;
          }
          v82 = v84 - 40;
        }
        sub_22EFC23A4(v13, *(_QWORD *)(v82 + 88), v9, v81, 0, 1, 0, 0);
        v147 = v13;
        if (!v14)
          goto LABEL_208;
        goto LABEL_205;
      }
      if (!v14)
      {
        v9 = 0;
        v147 = v13;
        goto LABEL_208;
      }
      if (sub_22E49F868(a2))
      {
        if (!v13 || (v90 = v13, (*(_DWORD *)(v13 + 28) & 0x7F) != 0x53))
        {
          v91 = *(_QWORD *)(v13 + 16);
          v92 = v91 & 0xFFFFFFFFFFFFFFF8;
          if ((v91 & 4) != 0)
            v92 = *(_QWORD *)v92;
          for (m = *(_WORD *)(v92 + 8) & 0x7F; m != 83; m = *(_WORD *)(v92 + 8) & 0x7F)
          {
            v94 = -40;
            if (m > 70)
            {
              if (m == 71)
              {
                v94 = -56;
              }
              else if (m != 81)
              {
                goto LABEL_181;
              }
            }
            else
            {
              if (m > 0x18)
                goto LABEL_180;
              if (m == 16)
                goto LABEL_174;
              if (((1 << m) & 0x1066) != 0)
                goto LABEL_187;
              if (m == 24)
              {
LABEL_174:
                v94 = -48;
              }
              else
              {
LABEL_180:
                if (m != 70)
                {
LABEL_181:
                  v95 = m - 52;
                  if ((m - 33) >= 5)
                    v96 = -48;
                  else
                    v96 = -64;
                  if (v95 >= 6)
                    v94 = v96;
                  else
                    v94 = -72;
                  goto LABEL_187;
                }
                v94 = -64;
              }
            }
LABEL_187:
            v97 = *(_QWORD *)(v92 + v94 + 16);
            v92 = v97 & 0xFFFFFFFFFFFFFFF8;
            if ((v97 & 4) != 0)
              v92 = *(_QWORD *)v92;
          }
          v90 = v92 - 40;
        }
        v100 = sub_22E3CD3D4(*(_QWORD *)(v90 + 88) + 2032, 16, 3);
        v9 = 0;
        *(_QWORD *)v100 = a2 & 0xFFFFFFFFFFFFFFF9;
        *(_DWORD *)(v100 + 8) = 0;
        *(_QWORD *)(v13 + 144) = v100 & 0xFFFFFFFFFFFFFFF9 | 2;
      }
      else
      {
        v9 = 0;
      }
      v147 = v13;
LABEL_205:
      sub_22EA22164((_DWORD *)v13, 0);
      v101 = *(_QWORD *)(v13 + 144);
      if ((v101 & 6) == 0 && (v101 & 0xFFFFFFFFFFFFFFF8) != 0)
        sub_22EA22164((_DWORD *)(v101 & 0xFFFFFFFFFFFFFFF8), 0);
LABEL_208:
      sub_22EE3FDA4(a1, v13, a2);
      v102 = (_QWORD *)*a1;
      v103 = *(_QWORD *)(v13 + 40);
      v104 = *(_DWORD *)(a2 + 28);
      v105 = ((16 * v104) >> 31) & 9;
      v106 = 1;
      if ((v104 & 0x8000000) != 0)
      {
LABEL_226:
        v162 = 0;
        v163 = v165;
        v164 = 0x800000000;
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v169 = v102;
        v170 = v103;
        v171 = 0;
        sub_22EFC6D6C((uint64_t)v172, v103);
        v172[1] = 0;
        v173 = v105;
        v174 = 0;
        v175 = 1;
        v176 = v106;
        v177 = 1;
        v178 = 0;
        sub_22EC56024((uint64_t)&v162);
        v110 = *(_QWORD *)(a2 + 144);
        v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
        if ((v110 & 6) == 6 && v111)
        {
          v159[0] = v160;
          v112 = *((_QWORD *)v111 + 1);
          v159[1] = (void *)0x800000000;
          v161 = v112;
          v113 = v111 + 4;
          if ((sub_22EE09D78(*a1, v111 + 4, v111[1], a1[4], v159) & 1) != 0)
          {
            v114 = 0;
          }
          else
          {
            v122 = *v111;
            if ((_DWORD)v122)
            {
              while (1)
              {
                v123 = sub_22EE37A18(*a1, *(unsigned int *)(a2 + 24), *(_QWORD *)&v113[8 * v111[1]], a1[4], 0);
                if (!v123)
                  break;
                v124 = v123;
                v125 = *(unsigned int *)(v123 + 28);
                v126 = v164;
                if (v164 >= (unint64_t)HIDWORD(v164))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v126 = v164;
                }
                *((_QWORD *)v163 + v126) = (v125 >> 13) & 3 | v124;
                LODWORD(v164) = v164 + 1;
                LODWORD(v162) = 2;
                v113 += 2;
                if (!--v122)
                  goto LABEL_249;
              }
              v114 = 0;
            }
            else
            {
LABEL_249:
              v114 = 1;
              if (sub_22ED6CFD0())
                sub_22EFC77E8(v13, 1);
            }
          }
          if (v159[0] != v160)
            free(v159[0]);
          if ((v114 & 1) == 0)
            goto LABEL_274;
        }
        else
        {
          v115 = v148;
          if ((v110 & 6) != 4 || !v111 || (v143 = (uint64_t *)*((_QWORD *)v111 + 4)) == 0)
          {
            if (v152 || !v9)
            {
              v116 = *a1;
              v117 = sub_22EFCBB30(v150);
              sub_22EC611AC(v116, &v162, v117, 0);
              if ((_DWORD)v162 == 2)
              {
                v118 = *(_QWORD *)v163 & 0xFFFFFFFFFFFFFFFCLL;
                v119 = *(_DWORD *)(v118 + 28) & 0x7F;
                if (v119 <= 0x2F && ((1 << v119) & 0xC00000060000) != 0)
                  v119 = *(_DWORD *)(sub_22EFBAEA4(v118) + 28) & 0x7F;
                if (v119 - 33 <= 4)
                {
                  LODWORD(v162) = 0;
                  LODWORD(v164) = 0;
                  if (v166)
                  {
                    v120 = sub_22EC6CBD0(v166);
                    MEMORY[0x2348A0E9C](v120, 0x10E0C409F09D3C3);
                  }
                  BYTE2(v178) = 0;
                  v166 = 0;
                  v167 = 0;
                  v115 = v148;
                }
              }
              sub_22EA04CD4(*a1, (uint64_t)&v162, v150, 0, 1, v149 != 0);
            }
            v121 = 0;
LABEL_256:
            v127 = *a1;
            v128 = sub_22E49F868(v13);
            sub_22EA23284(v127, 0, v13, &v162, v121, v128);
            v129 = !v115;
            if (!v152)
              v129 = 1;
            if ((v129 & 1) != 0)
            {
              if (!v115)
                goto LABEL_272;
            }
            else if ((*(_BYTE *)(v9 + 64) & 3) == 0 && sub_22E3CD31C((uint64_t *)(v9 + 64), v9))
            {
              v130 = (_QWORD *)*a1;
              v131 = *(_QWORD *)(sub_22E3CD31C((uint64_t *)(v9 + 64), v9) + 56);
              if (sub_22E49F868(v13))
                v132 = 6;
              else
                v132 = 5;
              sub_22ED5D528(v130, v152, v131, v132, 0);
            }
            if (sub_22E49F868(a2) && sub_22EFC9084(v13, 0))
            {
              v133 = *(_QWORD *)(v13 + 144) & 6;
              v134 = *(_QWORD *)(v13 + 144) & 0xFFFFFFFFFFFFFFF8;
              if (v133 != 2 || !v134)
              {
                if (v133 != 4 || !v134 || (*(_BYTE *)(v134 + 8) & 4) == 0)
                  goto LABEL_272;
                v134 = *(_QWORD *)(v134 + 48);
              }
              if (v134 && !*(_DWORD *)(v134 + 8))
              {
                v137 = *(_DWORD *)(a2 + 24);
                *(_DWORD *)(v134 + 8) = v137;
                v138 = (_QWORD *)(*a1 + 12240);
                v159[0] = (void *)v13;
                LODWORD(v159[1]) = v137;
                sub_22EB87D64(v138, (__n128 *)v159);
              }
            }
LABEL_272:
            if ((*(_BYTE *)(a2 + 83) & 4) == 0 || (sub_22EE401BC(a1, v13, a2) & 1) == 0)
            {
              if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 82) & 0x40) != 0)
                sub_22EAB9ED0((_QWORD *)*a1, v13, *(_DWORD *)(a2 + 24));
              if (v115
                || (*(_BYTE *)(v13 + 31) & 8) != 0
                && ((*(_BYTE *)(v13 + 104) & 3) != 0 || !sub_22E3CD31C((uint64_t *)(v13 + 104), v13)))
              {
                sub_22EFCE90C(v154, v147);
              }
              if ((*(_QWORD *)(v13 + 40) & 7) == 6)
              {
                if (*(_DWORD *)(*(_QWORD *)(v13 + 40) & 0xFFFFFFFFFFFFFFF8))
                {
                  if ((*(_WORD *)(v154 + 8) & 0x7Eu) - 34 >= 4)
                  {
                    v135 = *(_DWORD *)(v147 + 28);
                    if ((v135 & 0x200000) != 0)
                      *(_DWORD *)(v147 + 28) = v135 | 0x4000000;
                  }
                }
              }
              goto LABEL_286;
            }
LABEL_274:
            v13 = 0;
LABEL_286:
            if ((_BYTE)v178)
            {
              if ((_DWORD)v162 == 5)
              {
                sub_22EC64D18(v169, (uint64_t)&v162);
              }
              else if (v167 && (*(_DWORD *)(v169[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v169, (uint64_t)&v162);
              }
            }
            if (v166)
            {
              v142 = sub_22EC6CBD0(v166);
              MEMORY[0x2348A0E9C](v142, 0x10E0C409F09D3C3);
            }
            if (v163 != v165)
              free(v163);
            goto LABEL_295;
          }
          sub_22EC611AC(*a1, &v162, v150, 0);
          v159[0] = v160;
          v144 = *v143;
          v159[1] = (void *)0x800000000;
          v161 = v144;
          v145 = sub_22EE09D78(*a1, v143 + 2, *((unsigned int *)v143 + 2), a1[4], v159);
          if ((v145 & 1) == 0 && sub_22ED6CFD0())
            sub_22EFC77E8(v13, 1);
          if (v159[0] != v160)
            free(v159[0]);
          if ((v145 & 1) != 0)
            goto LABEL_274;
        }
        v121 = 1;
        v115 = v148;
        goto LABEL_256;
      }
      v107 = v102[27];
      v108 = *(_WORD *)(v107 + 8) & 0x7F;
      v109 = -40;
      if (v108 > 0x46)
      {
        if (v108 != 83)
        {
          if (v108 == 71)
          {
            v109 = -56;
            goto LABEL_225;
          }
          if (v108 == 81)
            goto LABEL_225;
LABEL_220:
          if (v108 - 52 < 6)
          {
            v109 = -72;
          }
          else
          {
            v109 = -48;
            if (v108 - 33 < 5)
              v109 = -64;
          }
        }
      }
      else
      {
        if (v108 > 0x18)
          goto LABEL_219;
        if (v108 != 16)
        {
          if (((1 << v108) & 0x1066) != 0)
            goto LABEL_225;
          if (v108 != 24)
          {
LABEL_219:
            if (v108 == 70)
            {
              v109 = -64;
              goto LABEL_225;
            }
            goto LABEL_220;
          }
        }
        v109 = -48;
      }
LABEL_225:
      v106 = sub_22EFB9D84(v107 + v109) == 0;
      goto LABEL_226;
    }
    v33 = (unint64_t *)(v32 & 0xFFFFFFFFFFFFFFF8);
    v146 = (void *)v33[1];
    if (*v33)
    {
      v46 = sub_22F348DBC(*a1, *v33, v146, a1[4]);
      v146 = v47;
      if (!v46)
        goto LABEL_53;
      v48 = *(_QWORD *)(a2 + 56);
      v149 = v46;
      if ((v48 & 4) == 0)
        goto LABEL_56;
      v33 = (unint64_t *)(v48 & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v149 = 0;
    }
    v34 = v33[5];
    if (!v34)
      goto LABEL_56;
    v35 = *a1;
    LODWORD(v153[0]) = 0;
    v159[0] = 0;
    LODWORD(v154) = 3;
    v162 = *(unsigned int *)(v35 + 1704);
    sub_22EB4DDB8(v35 + 3688, (int *)v153, (int *)&v162, (__int16 *)(v35 + 1693), (uint64_t *)v159, (int *)&v154);
    v36 = *(unsigned int *)(v35 + 3696);
    v37 = v36 - 2;
    v38 = *(_QWORD *)(v35 + 3688);
    v39 = *(_DWORD *)(v38 + 576 * (v36 - 2));
    if (v39 == 5)
    {
      *(_BYTE *)(v38 + 576 * v36 - 4) = *(_BYTE *)(v38 + 576 * v37 + 572);
      v40 = 1;
    }
    else if (v39 == 2)
    {
      *(_BYTE *)(v38 + 576 * v36 - 4) = 1;
      v40 = *(_BYTE *)(v38 + 576 * v37 + 573) != 0;
    }
    else
    {
      v40 = 0;
      *(_BYTE *)(v38 + 576 * v36 - 4) = 0;
    }
    v41 = v38 + 576 * v36;
    *(_BYTE *)(v41 - 3) = v40;
    *(_WORD *)(v35 + 1693) = 0;
    if (*(_DWORD *)(v35 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v35 + 1776), (llvm::SmallPtrSetImplBase *)(v41 - 560));
      sub_22EAEAE08(v35 + 1840, (uint64_t *)(v41 - 496));
    }
    v42 = sub_22EE0A68C(*a1, v34, a1[4]);
    if ((v42 & 1) == 0)
    {
      v43 = (unsigned __int8 *)(v42 & 0xFFFFFFFFFFFFFFFELL);
      v44 = *a1;
      v156 = 0;
      v155 = 0uLL;
      v151 = (uint64_t)v43;
      v45 = sub_22E9F3234(v44, v43, &v155, 0, 0);
      sub_22EB48E64(v35);
      v13 = 0;
      v14 = v148;
      if (v45)
        goto LABEL_57;
LABEL_295:
      if (v179 != v181)
        free(v179);
      goto LABEL_297;
    }
    sub_22EB48E64(v35);
LABEL_53:
    v13 = 0;
    goto LABEL_295;
  }
  v13 = 0;
LABEL_297:
  if (!v190)
  {
    if ((_DWORD)v187)
    {
      v139 = 0;
      v140 = 8 * v187;
      do
      {
        v141 = *(void ***)&v186[v139];
        if (v141)
        {
          if (*v141 != v141 + 2)
            free(*v141);
          MEMORY[0x2348A0E9C](v141, 0x1080C40ED926357);
        }
        v139 += 8;
      }
      while (v140 != v139);
    }
    *(_QWORD *)(v182 + 12024) = v189;
    v190 = 1;
  }
  if (v186 != (char *)&v188)
    free(v186);
  if ((v183 & 1) == 0)
    llvm::deallocate_buffer(v184, (void *)(16 * v185));
  return v13;
}

_QWORD *sub_22EE3F310(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = sub_22EE3B628(a2);
  if (v4)
  {
    v5 = sub_22EE37A18(*a1, *(_DWORD *)(a2 + 24), v4, (_DWORD *)a1[4], 0);
    if (!v5)
      return v5;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EFC3A88(a2);
  v7 = *(_QWORD *)(a2 + 128);
  if (v7 && ((*(unsigned __int16 *)(v7 + 8) | (*(unsigned __int8 *)(v7 + 10) << 16)) & 0x100000) != 0)
  {
    v22 = *(_QWORD *)(*a1 + 88);
    v23 = a1[3];
    v24 = *(_QWORD *)(v7 + 136);
    v25 = *(_DWORD *)(a2 + 24);
    v26 = *(_DWORD *)(v7 + 104) & 3;
    v27 = sub_22EFD4600(a2);
    v10 = sub_22F3B1954(v22, v23, v24, v25, v26, v27, (*(_DWORD *)(*(_QWORD *)(a2 + 128) + 104) >> 3) & 3);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 40);
    if ((v8 & 7) != 0)
      v9 = 0;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = sub_22EFCF6C0(*(_QWORD *)(*a1 + 88), (unsigned __int16)*(_DWORD *)(a2 + 72) >> 13, a1[3], *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 24), v9, (uint64_t)v5, v6);
  }
  v5 = (_QWORD *)v10;
  v11 = *a1;
  if (v6 && !v5[6])
  {
    v12 = a1[3];
    if (v12)
    {
      v5[6] = *(_QWORD *)(v12 - 16);
    }
    else
    {
      sub_22EF6462C(*(_QWORD *)(v11 + 88), (unint64_t)v5);
      v11 = *a1;
    }
  }
  if (sub_22EE2CDC8(v11, a1[4], a2, (unint64_t)v5))
    return 0;
  sub_22EE3364C(*a1, a1[4], a2, (uint64_t)v5);
  v13 = *((_DWORD *)v5 + 7) & 0xFFFFFDFF | (((*(_DWORD *)(a2 + 28) >> 9) & 1) << 9);
  *((_DWORD *)v5 + 7) = v13;
  if (((*(_DWORD *)(a2 + 28) >> 13) & 3) != 3)
    *((_DWORD *)v5 + 7) = v13 & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  if (!v6)
    sub_22F3B1D90((unint64_t)v5, a2, 1);
  if ((*(_WORD *)(a2 + 30) & 0x180) != 0)
    sub_22EA22164(v5, 0);
  if ((*(_BYTE *)(a2 + 75) & 1) != 0)
    v5[9] |= 0x1000000uLL;
  if (sub_22EA3DA94(a2))
    sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, (uint64_t)v5);
  v14 = *(_QWORD *)(*a1 + 88);
  v36 = (_QWORD *)a2;
  v15 = v14 + 1800;
  v16 = sub_22EF7402C(v14 + 1800, (uint64_t *)&v36);
  if (*(_QWORD *)(v14 + 1832) != v16)
  {
    v31 = *(_DWORD *)(v16 + 8);
    v36 = v5;
    if (v31 >= 2)
      *(_DWORD *)sub_22F36F0B0(v15, (unint64_t *)&v36) = v31;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 88))(v17, a2);
  if (v18)
  {
    v32 = v18;
    v33 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v33 + 80))(v33, v5, v32);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 72))(v19, a2);
  if (v20)
  {
    v34 = v20;
    v35 = *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 15064);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v35 + 64))(v35, v5, v34);
  }
  sub_22EFCCFA0(a1[3], (unint64_t)v5);
  if ((*(_BYTE *)(a2 + 74) & 1) != 0 && sub_22EA3DA94(a2))
  {
    v28 = (_OWORD *)*a1;
    v36 = v28;
    v29 = v28[765];
    v28[765] = 0u;
    v30 = v28[766];
    v37 = v29;
    v38 = v30;
    v28[766] = 0u;
    v39 = v28[767];
    v28[767] = 0u;
    sub_22EE0B368(*a1, *(_DWORD *)(a2 + 24), v5, a2, (uint64_t *)a1[4], 1, 1);
    if (!sub_22E8BB0E8(a2))
      sub_22EE0D944(*a1, *(_DWORD *)(a2 + 24), (unint64_t)v5, (uint64_t *)a1[4], 1);
    sub_22EE472B4((unint64_t)v28, 1);
    sub_22EE487AC(&v36);
  }
  v36 = (_QWORD *)*a1;
  sub_22EA058D8((uint64_t)v36, (uint64_t)v5, (uint64_t (*)(uint64_t, _QWORD, __int128 *))sub_22EA44F50, (uint64_t)&v36);
  return v5;
}

uint64_t sub_22EE3F6D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v3 = a3;
  v4 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a3 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v19 = 4;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *(unsigned int *)(a1 + 1704);
    sub_22EB4DDB8(a1 + 3688, &v19, v16, (__int16 *)(a1 + 1693), &v18, &v17);
    v7 = *(unsigned int *)(a1 + 3696);
    v8 = v7 - 2;
    v9 = *(_QWORD *)(a1 + 3688);
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EE0A68C(a1, v4, a2);
    if ((v13 & 1) != 0)
    {
      sub_22EB48E64(a1);
      return 2;
    }
    else
    {
      sub_22EB48E64(a1);
      v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
      v3 = v15;
      if ((*(_BYTE *)(v13 | 1) & 0x80) == 0)
      {
        sub_22F329074(a1, &v15);
        return v15;
      }
    }
  }
  return v3;
}

unint64_t *sub_22EE3F858(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  void *v54;
  __int128 v55;
  _BYTE v56[24];
  void *v57[2];
  _QWORD v58[5];

  v58[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
  {
    v11 = a1[3];
    if (v11)
      v10 = v11 - 64;
    else
      v10 = 0;
    v12 = sub_22E46BB88(a2);
    v9 = v12 & 0xFFFFFFFF00000000;
    v8 = v12;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  v13 = *a1;
  v14 = a1[4];
  v15 = sub_22EFBAFDC(a2);
  v16 = sub_22EE08E6C(v13, v7, v14, v15, *(_QWORD *)(a2 + 40), v10, v9 | v8);
  if (v16)
  {
    v17 = v7 + 1;
    v18 = *v7;
    if ((*v7 & 0xF) == 0 && *(_BYTE *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16) == 37)
    {
      v18 = sub_22F1169C8(*v7, (uint64_t)(v7 + 1));
      v17 = v19;
    }
    if ((v18 & 0xF) != 0
      || ((v20 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v20 + 16) == 26) ? (v21 = v18 == 0) : (v21 = 1), v21))
    {
      v57[0] = v58;
      v57[1] = (void *)0x400000000;
      v54 = v56;
      v55 = xmmword_22F44E350;
      v56[16] = 0;
      v22 = *a1;
      v23 = *(_DWORD *)(a2 + 24);
      v24 = *(_QWORD *)(a2 + 120);
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v25 && *(_BYTE *)(v25 + 16) == 26
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v25 = sub_22F10CF48(v25)) != 0)
      {
        v26 = (unsigned __int16)(*(_QWORD *)(v25 + 16) >> 38);
      }
      else
      {
        v26 = 0;
      }
      v27 = sub_22EE0A854(v22, v23, v24, v26, 0, a1[4], (uint64_t)v57, a3, (uint64_t)&v54);
      if (v54 != v56)
        free(v54);
      if (v57[0] != v58)
        free(v57[0]);
      if (v27)
        return 0;
    }
    else if (v16 == v7)
    {
      if (*(_BYTE *)(v18 + 16) != 25)
      {
        v44 = *(_QWORD *)(v18 + 16);
        if ((v44 & 0x3FFFC000000000) != 0)
        {
          v45 = (uint64_t *)(v17 + 2);
          v46 = (unint64_t *)(v20 + 40);
          v47 = (unsigned __int16)(v44 >> 38);
          do
          {
            v48 = *a1;
            if (*v45)
            {
              v49 = sub_22EE09E08(v48, *v45, a1[4], 0, 0, 0);
              if (!v49)
                return 0;
            }
            else
            {
              v49 = sub_22F31DD6C(v48, a2 + 72, *(_DWORD *)(a2 + 24), *v46);
            }
            v50 = v49;
            v51 = *(unsigned int *)(a3 + 8);
            if (v51 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v51 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v51) = v50;
            ++*(_DWORD *)(a3 + 8);
            ++v46;
            ++v45;
            --v47;
          }
          while (v47);
        }
      }
      return v7;
    }
    else
    {
      v30 = (uint64_t)(v16 + 1);
      v29 = *v16;
      if ((*v16 & 0xF) == 0 && *(_BYTE *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 16) == 37)
        sub_22F1169C8(v29, v30);
      if (*(_BYTE *)(v18 + 16) != 25)
      {
        v31 = *(_QWORD *)(v18 + 16);
        if ((v31 & 0x3FFFC000000000) != 0)
        {
          v32 = 0;
          v33 = 0;
          v34 = v30 + 16;
          v52 = (unsigned __int16)(v31 >> 38);
          v53 = v17 + 2;
          while (1)
          {
            v35 = v53[v32];
            if (!v35)
              break;
            v36 = *(_QWORD *)(*a1 + 12024);
            v37 = *(_QWORD *)(v35 + 48);
            if (*(_BYTE *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) == 36
              && (v38 = sub_22EE73EF0(*a1, v37, a1[4]), (v38 & 0xFF00000000) != 0))
            {
              v39 = v38;
              sub_22EE12F6C(v36, v35);
              for (; v39; --v39)
              {
                v40 = *(_QWORD *)(v34 + 8 * v33);
                v41 = *(unsigned int *)(a3 + 8);
                if (v41 >= *(unsigned int *)(a3 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v41 = *(unsigned int *)(a3 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a3 + 8 * v41) = v40;
                ++*(_DWORD *)(a3 + 8);
                sub_22EE0A720(v36, v35, v40);
                ++v33;
              }
            }
            else
            {
              v42 = *(_QWORD *)(v34 + 8 * v33);
              v43 = *(unsigned int *)(a3 + 8);
              if (v43 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v43 = *(unsigned int *)(a3 + 8);
              }
              ++v33;
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v43) = v42;
              ++*(_DWORD *)(a3 + 8);
              sub_22EE0A7A4(v36, v35, v42);
            }
            if (++v32 == v52)
              return v16;
          }
          return 0;
        }
      }
    }
  }
  return v16;
}

unint64_t sub_22EE3FCD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  __int128 v10[5];

  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 26;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 26;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF0));
  if (*(_DWORD *)(v5 + 16) >> 19 == *(_DWORD *)(v7 + 16) >> 19)
    return *(_QWORD *)a3;
  sub_22E4913B4(v7, (uint64_t)v10);
  LOWORD(v10[0]) = *(_DWORD *)(v5 + 16) >> 19;
  return sub_22EF63D8C(a1, *(_QWORD *)(v7 + 24), (uint64_t *)(v7 + 40), (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38), v10, 0);
}

uint64_t sub_22EE3FDA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  int *v11;
  _DWORD *v12;
  uint64_t v14;
  __int32 v15;
  int v16;
  int32x2_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int32 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v27;
  unsigned int v28;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  _OWORD v50[5];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[5];

  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFFFDFF | (((*(_DWORD *)(a3 + 28) >> 9) & 1) << 9);
  v6 = *(_QWORD *)(*a1 + 88);
  *(_QWORD *)&v51 = a3;
  v7 = v6 + 1800;
  v8 = sub_22EF7402C(v6 + 1800, (uint64_t *)&v51);
  if (*(_QWORD *)(v6 + 1832) != v8)
  {
    v49 = *(_DWORD *)(v8 + 8);
    *(_QWORD *)&v51 = a2;
    if (v49 >= 2)
      *(_DWORD *)sub_22F36F0B0(v7, (unint64_t *)&v51) = v49;
  }
  v9 = (int32x2_t *)*a1;
  v10 = *(_QWORD *)(*a1 + 10672) + ((unint64_t)*(unsigned int *)(*a1 + 10680) << 6);
  v11 = (int *)(v10 - 64);
  if ((*(_DWORD *)(v10 - 64) - 3) <= 1)
  {
    v12 = *(_DWORD **)(v10 - 48);
    if (v12 && (v12[7] & 0x7F) == 29)
    {
      v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 32))(v12);
      v15 = v9[1466].i32[0];
      if (v15)
      {
        v16 = *v11;
        v17 = v9[1464];
        v18 = ~((unint64_t)(37 * v16) << 32)
            + (37 * v16)
            + ((unint64_t)((v14 >> 4) ^ (v14 >> 9)) << 32);
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = v15 - 1;
        v22 = v21 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
        v23 = *(_QWORD *)&v17 + 16 * v22;
        v24 = *(_QWORD *)v23;
        v25 = *(_DWORD *)(v23 + 8);
        if (v14 == *(_QWORD *)v23 && v16 == v25)
        {
LABEL_21:
          *(_QWORD *)v23 = -8192;
          *(_DWORD *)(v23 + 8) = -2;
          v9[1465] = vadd_s32(v9[1465], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v27 = 1;
          while (v24 != -4096 || v25 != -1)
          {
            v28 = v22 + v27++;
            v22 = v28 & v21;
            v23 = *(_QWORD *)&v17 + 16 * v22;
            v24 = *(_QWORD *)v23;
            v25 = *(_DWORD *)(v23 + 8);
            if (v14 == *(_QWORD *)v23 && v16 == v25)
              goto LABEL_21;
          }
        }
      }
      v30 = *a1;
      v31 = *(_QWORD **)(*a1 + 11968);
      v32 = *(_QWORD **)(*a1 + 11976);
      if (v31 == v32)
      {
        *(_DWORD *)(v10 - 64) = 0;
        *(_QWORD *)(v10 - 48) = a2;
      }
      else
      {
        do
        {
          if (*v31)
            (*(void (**)(_QWORD, uint64_t, int *))(*(_QWORD *)*v31 + 40))(*v31, v30, v11);
          ++v31;
        }
        while (v31 != v32);
        v33 = *a1;
        v34 = *(_QWORD **)(*a1 + 11968);
        v35 = *(_QWORD **)(*a1 + 11976);
        *(_DWORD *)(v10 - 64) = 0;
        *(_QWORD *)(v10 - 48) = a2;
        while (v34 != v35)
        {
          if (*v34)
            (*(void (**)(_QWORD, uint64_t, int *))(*(_QWORD *)*v34 + 32))(*v34, v33, v11);
          ++v34;
        }
      }
    }
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v36)
    v37 = *(_BYTE *)(v36 + 16) == 26;
  else
    v37 = 0;
  if (!v37)
    v36 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0));
  if ((*(_QWORD *)(v36 + 16) & 0x3C0000001000000) != 0)
  {
    sub_22E4913B4(v36, (uint64_t)&v51);
    v38 = *a1;
    if ((*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 1) & 2) != 0 && v52 >= 2 && (_DWORD)v52 != 5)
    {
      if (!sub_22EFC8324(a3))
      {
        if ((_DWORD)v52 == 10)
          v39 = v55[0];
        else
          v39 = a3;
        if ((_DWORD)v52 == 9)
          v40 = 9;
        else
          v40 = 10;
        v41 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v41 || *(_BYTE *)(v41 + 16) != 26)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
            v41 = sub_22F10CF48(v41);
          else
            v41 = 0;
        }
        sub_22E4913B4(v41, (uint64_t)v50);
        *(_OWORD *)((char *)v55 + 4) = *(_OWORD *)((char *)&v50[3] + 12);
        v53 = v50[2];
        v51 = v50[0];
        v52 = v50[1];
        LODWORD(v52) = v40;
        v54 = a2;
        v55[0] = v39;
        *(_QWORD *)(a2 + 48) = sub_22EF63D8C(*(_QWORD *)(*a1 + 88), *(_QWORD *)(v41 + 24), (uint64_t *)(v41 + 40), (unsigned __int16)(*(_QWORD *)(v41 + 16) >> 38), &v51, 0);
        goto LABEL_54;
      }
      v38 = *a1;
    }
    v43 = a2 + 72;
    if (!a2)
      v43 = 0;
    v44 = *(_QWORD *)(v38 + 216);
    v45 = *(_QWORD *)(v38 + 3200);
    *(_QWORD *)(v38 + 3200) = 0;
    v46 = *(_QWORD *)(v38 + 10288);
    v47 = *(_DWORD *)(v38 + 1944);
    v48 = *(_DWORD *)(v38 + 2192);
    *(_QWORD *)(v38 + 216) = v43;
    *(_QWORD *)(v38 + 10288) = 0;
    *(_DWORD *)(v38 + 1944) = *(_DWORD *)(v38 + 1904);
    *(_DWORD *)(v38 + 2192) = *(_DWORD *)(v38 + 1960);
    sub_22F348A0C((uint64_t *)v38, (uint64_t *)a2, v36, a1[4]);
    if (v44)
    {
      *(_QWORD *)(v38 + 216) = v44;
      *(_QWORD *)(v38 + 3200) = v45;
      *(_QWORD *)(v38 + 10288) = v46;
      *(_DWORD *)(v38 + 1944) = v47;
      *(_DWORD *)(v38 + 2192) = v48;
    }
  }
LABEL_54:
  *(_QWORD *)&v51 = a3;
  sub_22EFBF86C(a3, (unint64_t *)&v51, 0);
  return sub_22EE33A90(*a1, a1[4], v51, a2, a1[5], a1[6]);
}

uint64_t sub_22EE401BC(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19[34];

  v19[32] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 83) & 8) != 0)
  {
    v4 = *(unsigned int **)(a3 + 128);
    if (v4)
    {
      v5 = a1;
      v6 = a2;
      v17 = a3;
      v18 = 0;
      v7 = *v4;
      if (*v4 >= 0x21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *v4;
      }
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        v10 = 8 * v7;
        do
        {
          v11 = *(_QWORD *)&v4[v8 / 4 + 2];
          v12 = sub_22EE37A18(*v5, *(unsigned int *)(v6 + 24), v11 & 0xFFFFFFFFFFFFFFFCLL, v5[4], 0);
          if (!v12)
            return 1;
          v13 = v12;
          v14 = v12 != (v11 & 0xFFFFFFFFFFFFFFFCLL);
          v15 = v18;
          if (v18 >= 0x20uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v15 = v18;
          }
          v19[v15] = v11 & 3 | v13;
          v9 |= v14;
          v16 = ++v18;
          v8 += 8;
        }
        while (v10 != v8);
        if ((v9 & 1) != 0)
          v4 = sub_22F3AC398(*(_QWORD *)(*v5 + 88), v19, v16);
      }
      *(_QWORD *)(v6 + 80) |= 0x8000000uLL;
      *(_QWORD *)(v6 + 128) = v4;
      a2 = v6;
      a3 = v17;
      a1 = v5;
    }
  }
  sub_22EAD04B8(*a1, a2, *(_DWORD *)(a3 + 24));
  return 0;
}

uint64_t sub_22EE40390(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  _OWORD v32[2];
  uint64_t v33;
  void **v34;
  char v35;
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x24BDAC8D0];
  LOBYTE(v33) = 0;
  BYTE4(v33) = 0;
  v4 = *(_BYTE *)(a2 + 60);
  v5 = a2 + 80;
  if ((v4 & 4) != 0)
    v6 = a2 + 80;
  else
    v6 = 0;
  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    v19 = sub_22F349AE8(a2);
    v4 = *(_BYTE *)(a2 + 60);
    if (v19)
    {
      if ((*(_BYTE *)(a2 + 60) & 8) == 0)
      {
        v37 = v39;
        v38 = 0x200000000;
        v20 = *(_QWORD *)(a2 + 144);
        v21 = *(unsigned int *)(v20 + 8);
        if ((_DWORD)v21)
        {
          v22 = (__int128 *)(v20 + 16);
          v23 = 32 * v21;
          do
          {
            v24 = *v22;
            v25 = v22[1];
            v22 += 2;
            v32[0] = v24;
            v32[1] = v25;
            v34 = &v37;
            v35 = 0;
            v36 = -1;
            sub_22EE735B0((uint64_t)&v34, (unsigned int *)v32);
            v23 -= 32;
          }
          while (v23);
          v20 = *(_QWORD *)(a2 + 144);
        }
        LOBYTE(v34) = 1;
        v31 = 0;
        v26 = (_QWORD *)*a1;
        v27 = *(unsigned int *)(*(_QWORD *)(v6 + 72) + 20);
        v28 = *(unsigned int *)(v6 + 32);
        if (v20)
        {
          v29 = *(unsigned int *)(v20 + 4);
        }
        else
        {
          sub_22EFC70E8((_QWORD *)(v6 + 24));
          if (!(_DWORD)v29)
            v29 = *(unsigned int *)(v6 + 32);
        }
        v30 = sub_22EE73A98(v26, v27, v28 | (v29 << 32), (uint64_t)v37, v38, (uint64_t *)a1[4], &v34, &v31, (uint64_t)&v33);
        if (v37 != v39)
          free(v37);
        if ((v30 & 1) != 0)
          return 0;
        v4 = *(_BYTE *)(a2 + 60);
      }
    }
  }
  v7 = *(_QWORD *)(a2 + 40);
  if ((v7 & 7) != 0)
    v9 = 0;
  else
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 32);
  v10 = sub_22EFEAF4C(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 24), (v8 & 0x7FFF) - *(_DWORD *)(a1[4] + 8), HIWORD(v8), v9, (v4 & 3) == 1, (v8 & 0x8000) != 0, (v4 & 2) != 0, v33);
  v11 = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v10 + 28) = v11 & 0xFFFF9FFF;
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(a2 + 28) & 0x200 | v11 & 0xFFFF9DFF;
  if ((*(_BYTE *)(a2 + 60) & 4) != 0 && (*(_BYTE *)(a2 + 29) & 2) == 0 && (sub_22F348B04(*a1, v10, v5, a1[4]) & 1) != 0)
    return 0;
  v12 = *(_QWORD *)(a2 + 72);
  if (v12 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
  {
    v13 = *a1;
    v14 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v14)
      v14 = (uint64_t *)v14[1];
    v15 = a1[4];
    v16 = sub_22EFEB0E0(a2);
    v17 = sub_22EE03524(v13, v14, v15, v16, *(_QWORD *)(a2 + 40), 0);
    if (v17)
      *(_QWORD *)(v10 + 72) = v17 & 0xFFFFFFFFFFFFFFF9;
  }
  sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v10);
  return v10;
}

uint64_t sub_22EE40670(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  void **v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  int *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93[2];
  void **v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[32];
  void *v98;
  uint64_t v99;
  _BYTE v100[32];
  uint64_t *v101;
  uint64_t v102;
  _QWORD v103[6];

  v103[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 56);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)v5[4];
  v8 = *v5;
  v7 = (int *)(v5 + 1);
  v6 = v8;
  v101 = v103;
  v102 = 0x400000000;
  v98 = v100;
  v99 = 0x400000000;
  v94 = 0;
  if (*(_BYTE *)(a2 + 81))
  {
    v9 = *(_DWORD *)(a2 + 84);
    if (v9 < 5)
    {
      v10 = 4;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a2 + 84);
      v10 = HIDWORD(v102);
    }
    if (v10 < v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a2 + 84);
    }
    if (v9)
    {
      v20 = v9;
      v21 = (uint64_t **)(a2 + 96);
      while (1)
      {
        v95 = (void *)sub_22EE03524(*a1, *v21, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), 0);
        if (!v95)
          break;
        v22 = sub_22ED58F98((_QWORD *)*a1, (uint64_t **)&v95, *(_DWORD *)(a2 + 24));
        if (v22 < 0x10)
          break;
        v23 = v22;
        v24 = v95;
        v25 = v102;
        if (v102 >= (unint64_t)HIDWORD(v102))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = v102;
        }
        v101[v25] = (uint64_t)v24;
        LODWORD(v102) = v102 + 1;
        v26 = v99;
        if (v99 >= (unint64_t)HIDWORD(v99))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v99;
        }
        *((_QWORD *)v98 + v26) = v23;
        LODWORD(v99) = v99 + 1;
        v21 += 2;
        if (!--v20)
          goto LABEL_47;
      }
LABEL_87:
      v40 = 0;
      goto LABEL_111;
    }
LABEL_47:
    v33 = *(_QWORD *)(a2 + 56);
    v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFF8);
    if ((v33 & 4) != 0)
      v34 = (uint64_t *)v34[4];
    v94 = (void **)v34;
    v31 = *v34;
LABEL_50:
    v35 = *(_DWORD *)(a2 + 68);
    v36 = (v35 & 0xFFFFF) - *(_DWORD *)(a1[4] + 8);
    v37 = v35 >> 20;
    v38 = *(_QWORD *)(a2 + 40);
    if ((v38 & 7) != 0)
      v39 = 0;
    else
      v39 = v38 & 0xFFFFFFFFFFFFFFF8;
    v40 = sub_22F3B8968(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v36, v37, v39, v31, v34, (uint64_t *)v98, v99, v101, v102);
    v32 = 0;
    v41 = 1;
    v42 = v94;
    goto LABEL_83;
  }
  if (!sub_22ED5F298(a2))
  {
    v27 = *(_QWORD *)(a2 + 56);
    v28 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFF8);
    if ((v27 & 4) != 0)
      v28 = (uint64_t *)v28[4];
    v94 = (void **)sub_22EE03524(*a1, v28, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), 0);
    if (v94)
    {
      v29 = sub_22ED58F98((_QWORD *)*a1, (uint64_t **)&v94, *(_DWORD *)(a2 + 24));
      v30 = *a1;
      if (v29 > 0xF)
      {
        v31 = v29;
        v32 = 0;
      }
      else
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 16480);
        v32 = 1;
      }
      goto LABEL_79;
    }
    goto LABEL_87;
  }
  v11 = *(_QWORD *)(v6 + 32);
  if (v11 >= 0x10 && (*(_QWORD *)(v6 + 32) & 0xFLL) == 0)
    v85 = *(_QWORD *)((char *)&unk_22F49A180
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v85 = 1;
  v13 = ((unint64_t)v7 + v85 + 3) & -v85;
  v93[0] = *(_QWORD *)(v6 + 32);
  v93[1] = v13;
  v95 = v97;
  v96 = 0x200000000;
  sub_22EE73804(*a1, v11, v13, (uint64_t)&v95);
  v92 = 1;
  v91 = 0;
  LODWORD(v16) = *(_DWORD *)(v6 + 20);
  v14 = (_DWORD)v16 != 0;
  v15 = (_DWORD)v16 != 0;
  LODWORD(v16) = v16 - 1;
  if (v15)
    v16 = v16;
  else
    v16 = 0;
  v90 = v16 | (v14 << 32);
  v87 = *v7;
  v88 = (_QWORD *)*a1;
  v17 = v11;
  for (i = v11; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_27;
      v19 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v19 <= 0x39)
        break;
LABEL_22:
      if (sub_22F115668(i))
        v17 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_55;
    }
    if (v19 == 24)
      goto LABEL_54;
    if (v19 == 26)
      break;
    if (((1 << v19) & 0x20000000200003CLL) == 0)
      goto LABEL_22;
LABEL_27:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_27;
LABEL_54:
  v17 = i;
LABEL_55:
  v43 = sub_22F115668(v17);
  v44 = sub_22F1167E8(v93);
  if ((sub_22EE73A98(v88, v87, v43 | ((unint64_t)v44 << 32), (uint64_t)v95, v96, (uint64_t *)a1[4], &v92, &v91, (uint64_t)&v90) & 1) != 0)
  {
    v34 = 0;
    v31 = 0;
    v45 = 0;
    v46 = 0;
  }
  else if (v92)
  {
    if ((_DWORD)v90)
    {
      v47 = 0;
      while (1)
      {
        v48 = *a1;
        v49 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(v48 + 11992) = v47;
        v89 = sub_22EE03B98((uint64_t *)v48, v11, v13, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40));
        if (!v89)
          break;
        v50 = sub_22ED58F98((_QWORD *)*a1, (uint64_t **)&v89, *(_DWORD *)(a2 + 24));
        if (v50 < 0x10)
          break;
        v51 = v50;
        v52 = v89;
        v53 = v102;
        if (v102 >= (unint64_t)HIDWORD(v102))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v53 = v102;
        }
        v101[v53] = (uint64_t)v52;
        LODWORD(v102) = v102 + 1;
        v54 = v99;
        if (v99 >= (unint64_t)HIDWORD(v99))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v54 = v99;
        }
        *((_QWORD *)v98 + v54) = v51;
        LODWORD(v99) = v99 + 1;
        *(_DWORD *)(v48 + 11992) = v49;
        if (++v47 == (_DWORD)v90)
          goto LABEL_70;
      }
      v34 = 0;
      v31 = 0;
      v45 = 0;
      v46 = 0;
      *(_DWORD *)(v48 + 11992) = v49;
    }
    else
    {
LABEL_70:
      v57 = *(_QWORD *)(a2 + 56);
      v34 = (uint64_t *)(v57 & 0xFFFFFFFFFFFFFFF8);
      if ((v57 & 4) != 0)
        v34 = (uint64_t *)v34[4];
      v94 = (void **)v34;
      v31 = *v34;
      v45 = 1;
      v46 = 1;
    }
  }
  else
  {
    v55 = *a1;
    v56 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(v55 + 11992) = -1;
    v89 = sub_22EE03B98((uint64_t *)v55, v11, v13, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40));
    if (v89
      && (sub_22ED58F98((_QWORD *)*a1, (uint64_t **)&v89, *(_DWORD *)(a2 + 24)),
          v86 = sub_22F34AD38((_QWORD *)*a1, v89, *v7, v90),
          (v94 = (void **)v86) != 0))
    {
      v34 = v86;
      v46 = 0;
      v31 = *v86;
      *(_DWORD *)(v55 + 11992) = v56;
      v45 = 1;
    }
    else
    {
      v34 = 0;
      v31 = 0;
      v45 = 0;
      v46 = 0;
      *(_DWORD *)(v55 + 11992) = v56;
    }
  }
  if (v95 != v97)
    free(v95);
  if ((v45 & 1) == 0)
    goto LABEL_87;
  if ((v46 & 1) != 0)
    goto LABEL_50;
  v32 = 0;
  v30 = *a1;
LABEL_79:
  v58 = *(_QWORD *)(v30 + 88);
  v59 = *(_DWORD *)(a2 + 68);
  v60 = (v59 & 0xFFFFF) - *(_DWORD *)(a1[4] + 8);
  v61 = v59 >> 20;
  v62 = *(_QWORD *)(a2 + 40);
  if ((v62 & 7) != 0)
    v63 = 0;
  else
    v63 = v62 & 0xFFFFFFFFFFFFFFF8;
  v42 = v94;
  v40 = sub_22EFEB338(v58, a1[3], *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v60, v61, v63, v31, *(_BYTE *)(a2 + 80), (uint64_t)v94);
  v41 = 0;
LABEL_83:
  v65 = *v42;
  v64 = (int *)(v42 + 1);
  v95 = v65;
  v96 = (uint64_t)v64;
  sub_22F116CD8((uint64_t *)&v95);
  if (v66 && *(_QWORD *)(v66 + 40))
  {
    if (v41)
      v68 = *v64;
    else
      v68 = 0;
    v32 |= sub_22F345894((_QWORD *)*a1, v66, v67, v40, v68);
  }
  v69 = *(_DWORD *)(v40 + 28);
  *(_DWORD *)(v40 + 28) = v69 & 0xFFFF9FFF;
  *(_DWORD *)(v40 + 28) = *(_DWORD *)(a2 + 28) & 0x200 | v69 & 0xFFFF9DFF;
  if (v32)
    sub_22EFC77E8(v40, 1);
  v70 = (_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a2 + 72) >= 4uLL && (*(_QWORD *)(a2 + 72) & 3) != 1)
  {
    v71 = *a1;
    LODWORD(v90) = 4;
    v95 = 0;
    LODWORD(v89) = 3;
    v93[0] = *(unsigned int *)(v71 + 1704);
    sub_22EB4DDB8(v71 + 3688, (int *)&v90, (int *)v93, (__int16 *)(v71 + 1693), (uint64_t *)&v95, (int *)&v89);
    v73 = *(unsigned int *)(v71 + 3696);
    v74 = v73 - 2;
    v75 = *(_QWORD *)(v71 + 3688);
    v76 = *(_DWORD *)(v75 + 576 * (v73 - 2));
    if (v76 == 5)
    {
      *(_BYTE *)(v75 + 576 * v73 - 4) = *(_BYTE *)(v75 + 576 * v74 + 572);
      v77 = 1;
    }
    else if (v76 == 2)
    {
      *(_BYTE *)(v75 + 576 * v73 - 4) = 1;
      v77 = *(_BYTE *)(v75 + 576 * v74 + 573) != 0;
    }
    else
    {
      v77 = 0;
      *(_BYTE *)(v75 + 576 * v73 - 4) = 0;
    }
    v78 = v75 + 576 * v73;
    *(_BYTE *)(v78 - 3) = v77;
    *(_WORD *)(v71 + 1693) = 0;
    if (*(_DWORD *)(v71 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v71 + 1776), (llvm::SmallPtrSetImplBase *)(v78 - 560));
      sub_22EAEAE08(v71 + 1840, (uint64_t *)(v78 - 496));
    }
    v79 = *v70 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*v70 & 3) != 1)
      v79 = 0;
    if (v79)
      v80 = (uint64_t *)(v79 + 72);
    else
      v80 = (uint64_t *)(a2 + 72);
    v81 = *v80;
    v82 = v81 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v81 & 3) == 2 && v82)
      v82 = *(_QWORD *)(v82 + 8);
    v83 = sub_22EE0A68C(*a1, v82, a1[4], v72);
    if ((v83 & 1) == 0)
      *(_QWORD *)(v40 + 72) = v83 & 0xFFFFFFFFFFFFFFFCLL;
    sub_22EB48E64(v71);
  }
  sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v40);
LABEL_111:
  if (v98 != v100)
    free(v98);
  if (v101 != v103)
    free(v101);
  return v40;
}

uint64_t sub_22EE40F5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  char v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t m;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t j;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t k;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  __int128 v69;
  int *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  uint64_t *v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  char v99;
  char v100;
  char v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t v105;
  uint64_t v106;
  llvm *v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD v117[10];

  v2 = a2;
  v117[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(int **)(a2 + 56);
  v115 = v117;
  v116 = 0x800000000;
  if (*(_BYTE *)(a2 + 81))
  {
    v5 = *(_DWORD *)(a2 + 84);
    if (v5 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_DWORD *)(v2 + 84);
    }
    v94 = (uint64_t)v4;
    if (v5)
    {
      v6 = 0;
      v7 = v5;
      while (1)
      {
        v8 = *a1;
        v105 = *a1;
        v106 = 1;
        for (i = 16; i != 80; i += 16)
          *(uint64_t *)((char *)&v105 + i) = -4096;
        v109 = (char *)&v111;
        v110 = 0x100000000;
        v112 = *(_QWORD *)(v8 + 12024);
        v113 = 0;
        v114 = 0;
        *(_QWORD *)(v8 + 12024) = &v105;
        v10 = sub_22EE389A4(a1, *(int **)(v2 + 88 + 8 * v6));
        if (!v10)
          break;
        v11 = v10;
        v12 = v116;
        if (v116 >= (unint64_t)HIDWORD(v116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v116;
        }
        v115[v12] = (uint64_t)v11;
        LODWORD(v116) = v116 + 1;
        if (!(_BYTE)v113)
        {
          if ((_DWORD)v110)
          {
            v13 = 0;
            v90 = 8 * v110;
            do
            {
              v14 = *(void ***)&v109[v13];
              if (v14)
              {
                if (*v14 != v14 + 2)
                {
                  v88 = *(void ***)&v109[v13];
                  free(*v14);
                  v14 = v88;
                }
                MEMORY[0x2348A0E9C](v14, 0x1080C40ED926357);
              }
              v13 += 8;
            }
            while (v90 != v13);
          }
          *(_QWORD *)(v105 + 12024) = v112;
          LOBYTE(v113) = 1;
        }
        if (v109 != (char *)&v111)
          free(v109);
        if ((v106 & 1) == 0)
          llvm::deallocate_buffer(v107, (void *)(16 * v108));
        if (++v6 == v7)
          goto LABEL_97;
      }
      if (!(_BYTE)v113)
      {
        if ((_DWORD)v110)
        {
          v80 = 0;
          v81 = 8 * v110;
          do
          {
            v82 = *(void ***)&v109[v80];
            if (v82)
            {
              if (*v82 != v82 + 2)
                free(*v82);
              MEMORY[0x2348A0E9C](v82, 0x1080C40ED926357);
            }
            v80 += 8;
          }
          while (v81 != v80);
        }
        *(_QWORD *)(v105 + 12024) = v112;
        LOBYTE(v113) = 1;
      }
      if (v109 != (char *)&v111)
        free(v109);
      if ((v106 & 1) == 0)
        llvm::deallocate_buffer(v107, (void *)(16 * v108));
      goto LABEL_104;
    }
LABEL_97:
    v34 = *(_QWORD *)(*a1 + 88);
    v93 = *(_DWORD *)(v2 + 24);
    v35 = *(_DWORD *)(v2 + 64);
    v36 = a1[3];
    v37 = (v35 & 0xFFFFF) - *(_DWORD *)(a1[4] + 8);
    v38 = v35 >> 20;
    v39 = *(_QWORD *)(v2 + 40);
    v40 = a1;
    v41 = v2;
    if ((v39 & 7) != 0)
      v42 = 0;
    else
      v42 = v39 & 0xFFFFFFFFFFFFFFF8;
    v43 = v115;
    v44 = v116;
    v19 = sub_22EFC7430(88, v34, v36, 8 * v116);
    v45 = v42;
    v2 = v41;
    a1 = v40;
    sub_22EFEB4B8(v19, v36, v93, v37, v38, v45, v94, v46, v43, v44);
LABEL_101:
    if (*(_QWORD *)(v2 + 72) >= 8uLL && (*(_QWORD *)(v2 + 72) & 6) != 2)
    {
      v49 = sub_22F259350(v2);
      if ((*v49 - 5) > 1)
      {
        v51 = 0;
        v52 = 0;
      }
      else
      {
        v50 = (unint64_t *)(*((_QWORD *)v49 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v51 = *v50;
        v52 = (void *)v50[1];
      }
      v58 = sub_22F348DBC(*a1, v51, v52, a1[4]);
      v60 = v59;
      v61 = *a1;
      v62 = *((_QWORD *)sub_22F259350(v2) + 1);
      v63 = sub_22F259350(v2);
      v64 = (*v63 - 5) > 1 ? 0 : *(_DWORD *)((*((_QWORD *)v63 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v65 = sub_22F348E70(v61, v58, v60, v62, v64, a1[4]);
      if (v65 >= 8)
      {
        v66 = v65;
        v67 = *(_QWORD *)(*a1 + 88);
        v68 = sub_22F259350(v2);
        v69 = 0uLL;
        if ((*v68 - 5) <= 1)
          v69 = *(_OWORD *)(*((_QWORD *)v68 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v96 = v69;
        v70 = sub_22F259350(v2);
        if ((*v70 - 5) > 1)
          v71 = 0;
        else
          v71 = *(_DWORD *)((*((_QWORD *)v70 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v72 = v67 + 2032;
        v73 = sub_22E3CD3D4(v67 + 2032, 24, 3);
        *(_OWORD *)v73 = v96;
        *(_DWORD *)(v73 + 16) = v71;
        *(_DWORD *)(v73 + 20) = 0;
        v74 = v73 & 0xFFFFFFFFFFFFFFFCLL;
        v75 = sub_22E3CD3D4(v72, 32, 3);
        *(_QWORD *)v75 = 5;
        *(_QWORD *)(v75 + 8) = v66;
        *(_QWORD *)(v75 + 24) = v74;
        *(_QWORD *)(v19 + 72) = v75 & 0xFFFFFFFFFFFFFFF9;
      }
    }
    v47 = *(_DWORD *)(v19 + 28);
    *(_DWORD *)(v19 + 28) = v47 & 0xFFFF9FFF;
    *(_DWORD *)(v19 + 28) = *(_DWORD *)(v2 + 28) & 0x200 | v47 & 0xFFFF9DFF;
    sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), v2, v19);
    goto LABEL_105;
  }
  if (*(_BYTE *)(a2 + 80) && sub_22EFE8EE4((uint64_t)v4))
  {
    v102 = v104;
    v103 = 0x200000000;
    sub_22EE41AB4(*a1, (uint64_t)v4, (uint64_t)&v102);
    v101 = 1;
    v100 = 0;
    LOBYTE(v98) = 0;
    v99 = 0;
    if ((sub_22EE73A98((_QWORD *)*a1, *(unsigned int *)(v2 + 24), *v4 | ((unint64_t)v4[2] << 32), (uint64_t)v102, v103, (uint64_t *)a1[4], &v101, &v100, (uint64_t)&v98) & 1) != 0)
    {
      v15 = 0;
      v16 = 0;
      v4 = 0;
      goto LABEL_93;
    }
    v16 = v101 != 0;
    if (v101)
    {
      if (v98)
      {
        v91 = v101 != 0;
        v20 = v4;
        v21 = v2;
        v22 = 0;
        while (1)
        {
          v23 = *a1;
          v95 = *(_DWORD *)(*a1 + 11992);
          *(_DWORD *)(v23 + 11992) = v22;
          v105 = v23;
          v106 = 1;
          for (j = 16; j != 80; j += 16)
            *(uint64_t *)((char *)&v105 + j) = -4096;
          v109 = (char *)&v111;
          v110 = 0x100000000;
          v112 = *(_QWORD *)(v23 + 12024);
          v113 = 0;
          v114 = 0;
          *(_QWORD *)(v23 + 12024) = &v105;
          v25 = sub_22EE389A4(a1, v20);
          if (!v25)
            break;
          v26 = v25;
          v27 = v116;
          if (v116 >= (unint64_t)HIDWORD(v116))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = v116;
          }
          v115[v27] = (uint64_t)v26;
          LODWORD(v116) = v116 + 1;
          if (!(_BYTE)v113)
          {
            if ((_DWORD)v110)
            {
              v28 = 0;
              v87 = a1;
              v89 = 8 * v110;
              do
              {
                v29 = *(void ***)&v109[v28];
                if (v29)
                {
                  v30 = *(_QWORD *)&v109[v28];
                  if (*v29 != v29 + 2)
                    free(*v29);
                  MEMORY[0x2348A0E9C](v30, 0x1080C40ED926357);
                }
                v28 += 8;
                a1 = v87;
              }
              while (v89 != v28);
            }
            *(_QWORD *)(v105 + 12024) = v112;
            LOBYTE(v113) = 1;
          }
          if (v109 != (char *)&v111)
            free(v109);
          if ((v106 & 1) == 0)
            llvm::deallocate_buffer(v107, (void *)(16 * v108));
          *(_DWORD *)(v23 + 11992) = v95;
          if (++v22 == v98)
          {
            v4 = v20;
            v16 = v91;
            goto LABEL_92;
          }
        }
        if (!(_BYTE)v113)
        {
          if ((_DWORD)v110)
          {
            v84 = 0;
            v85 = 8 * v110;
            do
            {
              v86 = *(void ***)&v109[v84];
              if (v86)
              {
                if (*v86 != v86 + 2)
                  free(*v86);
                MEMORY[0x2348A0E9C](v86, 0x1080C40ED926357);
              }
              v84 += 8;
              v2 = v21;
            }
            while (v85 != v84);
          }
          *(_QWORD *)(v105 + 12024) = v112;
          LOBYTE(v113) = 1;
        }
        if (v109 != (char *)&v111)
          free(v109);
        if ((v106 & 1) == 0)
          llvm::deallocate_buffer(v107, (void *)(16 * v108));
        v15 = 0;
        v16 = 0;
        v4 = 0;
        *(_DWORD *)(v23 + 11992) = v95;
LABEL_93:
        if (v102 != v104)
          free(v102);
        if ((v15 & 1) == 0)
        {
LABEL_104:
          v19 = 0;
          goto LABEL_105;
        }
        v94 = (uint64_t)v4;
        if (v16)
          goto LABEL_97;
LABEL_110:
        v53 = *(_DWORD *)(v2 + 64);
        v54 = (v53 & 0xFFFFF) - *(_DWORD *)(a1[4] + 8);
        v55 = v53 >> 20;
        v56 = *(_QWORD *)(v2 + 40);
        if ((v56 & 7) != 0)
          v57 = 0;
        else
          v57 = v56 & 0xFFFFFFFFFFFFFFF8;
        v19 = sub_22F3B8BD0(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(v2 + 24), v54, v55, *(_BYTE *)(v2 + 80), v57, v94);
        goto LABEL_101;
      }
    }
    else
    {
      v31 = *a1;
      v32 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(v31 + 11992) = -1;
      v105 = v31;
      v106 = 1;
      for (k = 16; k != 80; k += 16)
        *(uint64_t *)((char *)&v105 + k) = -4096;
      v109 = (char *)&v111;
      v110 = 0x100000000;
      v112 = *(_QWORD *)(v31 + 12024);
      v113 = 0;
      v114 = 0;
      *(_QWORD *)(v31 + 12024) = &v105;
      v4 = sub_22EE389A4(a1, v4);
      if (!(_BYTE)v113)
      {
        if ((_DWORD)v110)
        {
          v97 = 0;
          v92 = 8 * v110;
          do
          {
            v83 = *(void ***)&v109[v97];
            if (v83)
            {
              if (*v83 != v83 + 2)
                free(*v83);
              MEMORY[0x2348A0E9C](v83, 0x1080C40ED926357);
            }
            v97 += 8;
          }
          while (v92 != v97);
        }
        *(_QWORD *)(v105 + 12024) = v112;
        LOBYTE(v113) = 1;
      }
      if (v109 != (char *)&v111)
        free(v109);
      if ((v106 & 1) == 0)
        llvm::deallocate_buffer(v107, (void *)(16 * v108));
      *(_DWORD *)(v31 + 11992) = v32;
      if (!v4)
      {
        v15 = 0;
        v16 = 0;
        goto LABEL_93;
      }
    }
LABEL_92:
    v15 = 1;
    goto LABEL_93;
  }
  v17 = *a1;
  v105 = *a1;
  v106 = 1;
  for (m = 16; m != 80; m += 16)
    *(uint64_t *)((char *)&v105 + m) = -4096;
  v109 = (char *)&v111;
  v110 = 0x100000000;
  v112 = *(_QWORD *)(v17 + 12024);
  v113 = 0;
  v114 = 0;
  *(_QWORD *)(v17 + 12024) = &v105;
  v19 = (uint64_t)sub_22EE389A4(a1, v4);
  if (!(_BYTE)v113)
  {
    if ((_DWORD)v110)
    {
      v76 = 0;
      v77 = 8 * v110;
      do
      {
        v78 = v19;
        v79 = *(void ***)&v109[v76];
        if (v79)
        {
          if (*v79 != v79 + 2)
            free(*v79);
          MEMORY[0x2348A0E9C](v79, 0x1080C40ED926357);
        }
        v76 += 8;
        v19 = v78;
      }
      while (v77 != v76);
    }
    *(_QWORD *)(v105 + 12024) = v112;
    LOBYTE(v113) = 1;
  }
  if (v109 != (char *)&v111)
    free(v109);
  if ((v106 & 1) == 0)
    llvm::deallocate_buffer(v107, (void *)(16 * v108));
  v94 = v19;
  if (v19)
    goto LABEL_110;
LABEL_105:
  if (v115 != v117)
    free(v115);
  return v19;
}

uint64_t sub_22EE41AB4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;

  v3 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = (uint64_t *)(a2 + 16);
    v7 = 8 * v3;
    do
    {
      result = sub_22EFC7864(*v6);
      if ((result & 1) == 0)
      {
        v8 = *v6;
        v9 = *(_DWORD *)(*v6 + 28);
        if (*v6 && (*(_DWORD *)(*v6 + 28) & 0x7F) == 0x3B)
        {
          v10 = *(_QWORD *)(v8 + 56);
          v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
          if ((v10 & 4) != 0)
            v11 = (unint64_t *)v11[4];
          result = sub_22EE73804(v5, *v11, (uint64_t)(v11 + 1), a3);
          v8 = *v6;
          v9 = *(_DWORD *)(*v6 + 28);
        }
        if ((v9 & 0x7F) == 0x20)
          result = sub_22EE41AB4(v5, *(_QWORD *)(v8 + 56), a3);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22EE41B64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  int v8;
  int v10;
  unint64_t v11;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  v5 = *(_WORD *)(a1[3] + 8) & 0x7F;
  v6 = v5 - 52 < 6;
  v7 = v5 > 0x18;
  v8 = (1 << v5) & 0x1000006;
  v10 = !v7 && v8 != 0 || v6;
  v11 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (v11)
  {
    v14 = *(_DWORD *)(v11 + 28);
    while (1)
    {
      v15 = *(_QWORD *)(v11 + 64);
      v16 = v15;
      if ((v14 & 0x7F) == 0x2F)
      {
        if (*(_QWORD *)(v11 + 80))
          v16 = *(_QWORD *)(v11 + 80);
        else
          v16 = *(_QWORD *)(v11 + 64);
      }
      v17 = *a1;
      if (v15 && (*(_DWORD *)(v15 + 28) & 0x7F) == 0x2B)
        v18 = sub_22F3B2F94(*(_QWORD *)(v17 + 88), a1[3], *(_DWORD *)(v15 + 24), *(_QWORD *)(v15 + 40));
      else
        v18 = sub_22EE37A18(v17, *(_DWORD *)(v11 + 24), v16, (_DWORD *)a1[4], 0);
      v19 = (uint64_t)v18;
      if (!v18)
        return 0;
      v28 = 0;
      if (!a4 || (sub_22EAC4238((_QWORD *)*a1, a3, (unint64_t)v18, a4, (unint64_t *)&v28) & 1) == 0)
        break;
LABEL_19:
      v11 = *(_QWORD *)(v11 + 72);
      if (v11)
      {
        v14 = *(_DWORD *)(v11 + 28);
        if ((v14 & 0x7E) == 0x2E)
          continue;
      }
      return a3;
    }
    if ((*(_BYTE *)(v11 + 48) & 3) != 0 || (v20 = sub_22E3CD31C((uint64_t *)(v11 + 48), v11)) == 0)
    {
LABEL_34:
      v25 = sub_22EAC4984(*a1, 0, a3, v19, (uint64_t)v28);
      v26 = *(_QWORD *)(*a1 + 88);
      v29 = v25;
      sub_22F24C2B0(v26 + 1680, &v29)[1] = v11;
      if (v10)
        sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), v11, v25);
      goto LABEL_19;
    }
    v21 = *(_QWORD *)(v11 + 16);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 4) != 0)
    {
      if ((*(_WORD *)(*v22 + 8) & 0x7Fu) - 35 > 2)
      {
LABEL_33:
        v28 = sub_22EE37A18(*a1, *(_DWORD *)(v11 + 24), v20, (_DWORD *)a1[4], 0);
        goto LABEL_34;
      }
      v22 = (_QWORD *)v22[1];
    }
    else if (((_WORD)v22[1] & 0x7Fu) - 35 >= 3)
    {
      goto LABEL_33;
    }
    v23 = *(_QWORD *)(v20 + 16);
    v24 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 4) != 0)
      v24 = *(_QWORD *)(v24 + 8);
    if (v22 != (_QWORD *)v24)
      goto LABEL_34;
    goto LABEL_33;
  }
  return a3;
}

uint64_t sub_22EE41D78(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  void *v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int16 v38;
  char v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F348DBC(*a1, *(_QWORD *)(a2 + 64), *(void **)(a2 + 72), a1[4]);
  if (!v4)
    return 0;
  v8 = v4;
  v9 = v5;
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)&v24 = *(_QWORD *)(a2 + 40);
  DWORD2(v24) = v10;
  v25 = v11;
  v12 = (_QWORD *)*a1;
  if ((v24 & 7) == 3)
  {
    v13 = v12[27];
    if (v13 && (*(_WORD *)(v13 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      v15 = v12[11];
      v16 = (_QWORD *)(v15 + 15224);
      v17 = sub_22EF6477C(v15, v13 - 64);
      *(_QWORD *)&v24 = sub_22EFC6A3C(v16, v17 & 7 | *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8));
      v12 = (_QWORD *)*a1;
    }
  }
  v18 = (*(_WORD *)(a1[3] + 8) & 0x7E) - 34;
  v27 = 0;
  v28 = v30;
  v29 = 0x800000000;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v12;
  v35 = v24;
  v36 = v25;
  v37 = xmmword_22F44E360;
  v38 = 1;
  v39 = 1;
  v40 = 0;
  sub_22EC56024((uint64_t)&v27);
  v6 = sub_22F3B2980(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 56), v8, v9, (uint64_t *)&v24, (*(_QWORD *)(a2 + 48) >> 2) & 1);
  v22 = 0u;
  *(_OWORD *)v23 = 0u;
  sub_22E8ACE30((uint64_t)&v22, v8, v9);
  if (v18 <= 3)
  {
    v39 = 0;
    sub_22EC611AC(*a1, (uint64_t)&v27, a1[3], 0);
    if (sub_22EAC4CC0((_QWORD *)*a1, *(unsigned int *)(a2 + 56), (*(_QWORD *)(a2 + 48) >> 2) & 1, (uint64_t *)&v22, *(_DWORD *)(a2 + 24), (uint64_t)&v27))sub_22EFC77E8(v6, 1);
  }
  if ((*(_BYTE *)(v6 + 28) & 0x80) == 0
    && sub_22EAC4F0C(*a1, *(_DWORD *)(a2 + 56), (*(_QWORD *)(a2 + 48) >> 2) & 1, (uint64_t)&v22, (uint64_t)&v24, *(_DWORD *)(a2 + 24), 0, a2))
  {
    sub_22EFC77E8(v6, 1);
  }
  v19 = *(_QWORD *)(*a1 + 88);
  v26 = v6;
  sub_22F25E108((uint64_t *)(v19 + 1632), &v26)[1] = a2;
  *(_DWORD *)(v6 + 28) = *(_DWORD *)(v6 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  sub_22EFCCFA0(a1[3], v6);
  if ((*(_BYTE *)(v6 + 28) & 0x80) == 0)
  {
    if ((v24 & 7) == 3)
      sub_22F328E20((_QWORD *)*a1, v6);
    if (v18 >= 4)
      v20 = 0;
    else
      v20 = &v27;
    v6 = sub_22EE41B64(a1, a2, v6, (uint64_t)v20);
  }
  if (HIDWORD(v23[1]))
    free(v23[0]);
  if ((_BYTE)v40)
  {
    if ((_DWORD)v27 == 5)
    {
      sub_22EC64D18(v34, (uint64_t)&v27);
    }
    else if (v32 && (*(_DWORD *)(v34[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v34, (uint64_t)&v27);
    }
  }
  if (v31)
  {
    v21 = sub_22EC6CBD0(v31);
    MEMORY[0x2348A0E9C](v21, 0x10E0C409F09D3C3);
  }
  if (v28 != v30)
    free(v28);
  return v6;
}

uint64_t sub_22EE420D8(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_22EE37A18(*a1, *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 64), (_DWORD *)a1[4], 0);
  v5 = 0;
  if ((sub_22E9585EC((_QWORD *)*a1, (unint64_t)v4, *((_DWORD *)v4 + 6), 0) & 1) != 0)
    return v5;
  v5 = sub_22F3B2B04(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 60), *(_DWORD *)(a2 + 24), (uint64_t)v4);
  v7 = *(_QWORD *)(*a1 + 88);
  v8 = v5;
  sub_22F24C2B0(v7 + 1656, &v8)[1] = a2;
  *(_DWORD *)(v5 + 28) = *(_DWORD *)(v5 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  sub_22EFCCFA0(a1[3], v5);
  if ((*(_BYTE *)(v5 + 28) & 0x80) != 0)
    return v5;
  else
    return sub_22EE41B64(a1, a2, v5, 0);
}

uint64_t sub_22EE421CC(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  void *v24;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v40[25];
  char v41;
  __int128 v42;
  uint64_t v43;
  __int128 *v44;
  char v45;
  int v46;
  void *v47[2];
  _OWORD v48[4];
  __int128 v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 64) && (a3 & 1) == 0)
  {
    *(_QWORD *)&v49 = v50;
    *((_QWORD *)&v49 + 1) = 0x200000000;
    v5 = *(_QWORD *)(a2 + 72);
    v6 = *(_QWORD *)(a2 + 80);
    v47[0] = &v49;
    LOBYTE(v47[1]) = 0;
    HIDWORD(v47[1]) = -1;
    sub_22EE7384C((uint64_t)v47, v5, v6);
    v7 = *(_DWORD *)(a2 + 24);
    *(_QWORD *)&v42 = *(_QWORD *)(a2 + 40);
    DWORD2(v42) = v7;
    sub_22EFC6D6C((uint64_t)&v43, v42);
    v44 = &v49;
    v45 = 0;
    v46 = -1;
    *(_OWORD *)v47 = v42;
    *(_QWORD *)&v48[0] = v43;
    sub_22EE738E8((uint64_t)&v44, (uint64_t *)v47);
    LOBYTE(v44) = 1;
    v41 = 0;
    LOBYTE(v42) = 0;
    BYTE4(v42) = 0;
    v8 = (_QWORD *)*a1;
    v9 = *(unsigned int *)(a2 + 64);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    if ((sub_22EE73A98(v8, v9, v10, v49, DWORD2(v49), (uint64_t *)a1[4], &v44, &v41, (uint64_t)&v42) & 1) == 0)
    {
      if (!(_BYTE)v44)
      {
        v21 = (_QWORD *)*a1;
        v22 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v18 = sub_22EE421CC(a1, a2, 1);
        *((_DWORD *)v21 + 2998) = v22;
        goto LABEL_25;
      }
      v11 = *(_QWORD *)(a2 + 16);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v12 = *(_QWORD *)v12;
      v13 = *(_WORD *)(v12 + 8) & 0x7F;
      if (v13 <= 0x18 && ((1 << v13) & 0x1000006) != 0)
      {
        v14 = v42;
        if (v42 < 2)
        {
LABEL_10:
          v47[0] = v48;
          v47[1] = (void *)0x800000000;
          if (v14)
          {
            v15 = 0;
            while (1)
            {
              v16 = (_QWORD *)*a1;
              v17 = *(_DWORD *)(*a1 + 11992);
              *(_DWORD *)(*a1 + 11992) = v15;
              v18 = sub_22EE421CC(a1, a2, 1);
              if (!v18)
                break;
              v19 = LODWORD(v47[1]);
              if (LODWORD(v47[1]) >= (unint64_t)HIDWORD(v47[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v19 = LODWORD(v47[1]);
              }
              *((_QWORD *)v47[0] + v19) = v18;
              v20 = ++LODWORD(v47[1]);
              *((_DWORD *)v16 + 2998) = v17;
              if (++v15 == (_DWORD)v42)
              {
                v29 = (uint64_t *)v47[0];
                goto LABEL_31;
              }
            }
            *((_DWORD *)v16 + 2998) = v17;
          }
          else
          {
            v20 = 0;
            v29 = (uint64_t *)v48;
LABEL_31:
            v18 = sub_22F328F38(*a1, a2, v29, v20);
            if (sub_22EE3A97C(*(_QWORD *)(a2 + 16)))
              sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v18);
          }
          if (v47[0] != v48)
            free(v47[0]);
LABEL_25:
          v24 = (void *)v49;
          if ((_QWORD *)v49 != v50)
          {
LABEL_26:
            free(v24);
            return v18;
          }
          return v18;
        }
      }
      else
      {
        v23 = v13 - 52;
        v14 = v42;
        if (v23 > 5 || v42 <= 1)
          goto LABEL_10;
      }
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 64), 0x13EDu, 0, (uint64_t)v40);
      sub_22E903BEC(v40);
    }
    v18 = 0;
    goto LABEL_25;
  }
  v26 = *(_DWORD *)(a2 + 60);
  v27 = sub_22F348DBC(*a1, *(_QWORD *)(a2 + 72), *(void **)(a2 + 80), a1[4]);
  if (!v27)
    return 0;
  *(_OWORD *)v47 = 0u;
  v48[0] = 0u;
  sub_22E8ACE30((uint64_t)v47, v27, v28);
  v30 = *a1;
  v31 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)&v42 = *(_QWORD *)(a2 + 40);
  DWORD2(v42) = v31;
  sub_22EFC6D6C((uint64_t)&v43, v42);
  sub_22EE123D8(v30, (uint64_t)&v42, a1[4], (uint64_t)&v49);
  v32 = *(_DWORD *)(a2 + 64);
  if (v32 && *(_DWORD *)(*a1 + 11992) != -1)
    v32 = 0;
  v33 = sub_22F34A9F8(a2);
  v34 = *a1;
  v35 = (*(_DWORD *)(a2 + 28) >> 13) & 3;
  v36 = *(_DWORD *)(a2 + 56);
  v38 = v49;
  v39 = v50[0];
  v42 = 0uLL;
  v18 = sub_22EAC2C24(v34, 0, v35, v36, 1, v26, (uint64_t *)v47, (uint64_t)&v38, v32, (uint64_t)&v42, 1, v33);
  sub_22E80F94C((uint64_t *)&v42 + 1);
  if (v18)
  {
    sub_22EE33A90(*a1, a1[4], a2, v18, 0, 0);
    v37 = *(_QWORD *)(*a1 + 88);
    *(_QWORD *)&v42 = v18;
    sub_22F25E108((uint64_t *)(v37 + 1632), &v42)[1] = a2;
  }
  if (HIDWORD(v48[0]))
  {
    v24 = *(void **)&v48[0];
    goto LABEL_26;
  }
  return v18;
}

uint64_t sub_22EE42624(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  void *v26;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45[2];
  unsigned int v46[25];
  char v47;
  char v48;
  void *v49[2];
  _OWORD v50[4];
  __int128 v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 60) && (a3 & 1) == 0)
  {
    *(_QWORD *)&v51 = v52;
    *((_QWORD *)&v51 + 1) = 0x200000000;
    v5 = *(_QWORD *)(a2 + 64);
    v6 = *(_QWORD *)(a2 + 72);
    v49[0] = &v51;
    LOBYTE(v49[1]) = 0;
    HIDWORD(v49[1]) = -1;
    sub_22EE7384C((uint64_t)v49, v5, v6);
    v7 = *(void **)(a2 + 40);
    v8 = *(_DWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 80);
    v44 = &v51;
    LOBYTE(v45[0]) = 0;
    HIDWORD(v45[0]) = -1;
    v49[0] = v7;
    LODWORD(v49[1]) = v8;
    *(_QWORD *)&v50[0] = v9;
    sub_22EE738E8((uint64_t)&v44, (uint64_t *)v49);
    v48 = 1;
    v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v44) = 0;
    v10 = (_QWORD *)*a1;
    v11 = *(unsigned int *)(a2 + 60);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    if ((sub_22EE73A98(v10, v11, v12, v51, DWORD2(v51), (uint64_t *)a1[4], &v48, &v47, (uint64_t)&v44) & 1) == 0)
    {
      if (!v48)
      {
        v23 = (_QWORD *)*a1;
        v24 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v20 = sub_22EE42624(a1, a2, 1);
        *((_DWORD *)v23 + 2998) = v24;
        goto LABEL_25;
      }
      v13 = *(_QWORD *)(a2 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      v15 = *(_WORD *)(v14 + 8) & 0x7F;
      if (v15 <= 0x18 && ((1 << v15) & 0x1000006) != 0)
      {
        v16 = (int)v44;
        if (v44 < 2)
        {
LABEL_10:
          v49[0] = v50;
          v49[1] = (void *)0x800000000;
          if (v16)
          {
            v17 = 0;
            while (1)
            {
              v18 = (_QWORD *)*a1;
              v19 = *(_DWORD *)(*a1 + 11992);
              *(_DWORD *)(*a1 + 11992) = v17;
              v20 = sub_22EE42624(a1, a2, 1);
              if (!v20)
                break;
              v21 = LODWORD(v49[1]);
              if (LODWORD(v49[1]) >= (unint64_t)HIDWORD(v49[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v21 = LODWORD(v49[1]);
              }
              *((_QWORD *)v49[0] + v21) = v20;
              v22 = ++LODWORD(v49[1]);
              *((_DWORD *)v18 + 2998) = v19;
              if (++v17 == (_DWORD)v44)
              {
                v32 = (uint64_t *)v49[0];
                goto LABEL_36;
              }
            }
            *((_DWORD *)v18 + 2998) = v19;
          }
          else
          {
            v22 = 0;
            v32 = (uint64_t *)v50;
LABEL_36:
            v20 = sub_22F328F38(*a1, a2, v32, v22);
            if (sub_22EE3A97C(*(_QWORD *)(a2 + 16)))
              sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, v20);
          }
          if (v49[0] != v50)
            free(v49[0]);
LABEL_25:
          v26 = (void *)v51;
          if ((_QWORD *)v51 != v52)
          {
LABEL_26:
            free(v26);
            return v20;
          }
          return v20;
        }
      }
      else
      {
        v25 = v15 - 52;
        v16 = (int)v44;
        if (v25 > 5 || v44 <= 1)
          goto LABEL_10;
      }
      sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 60), 0x13EDu, 0, (uint64_t)v46);
      sub_22E903BEC(v46);
    }
    v20 = 0;
    goto LABEL_25;
  }
  v28 = 0;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x2A)
    v29 = a2;
  else
    v29 = 0;
  if (v29)
    v28 = *(_DWORD *)(v29 + 60);
  v30 = sub_22F348DBC(*a1, *(_QWORD *)(a2 + 64), *(void **)(a2 + 72), a1[4]);
  if (!v30)
    return 0;
  *(_OWORD *)v49 = 0u;
  v50[0] = 0u;
  sub_22E8ACE30((uint64_t)v49, v30, v31);
  v33 = *a1;
  v34 = *(_DWORD *)(a2 + 24);
  v35 = *(_QWORD *)(a2 + 80);
  v44 = *(__int128 **)(a2 + 40);
  LODWORD(v45[0]) = v34;
  v45[1] = v35;
  sub_22EE123D8(v33, (uint64_t)&v44, a1[4], (uint64_t)&v51);
  v36 = *(_DWORD *)(a2 + 60);
  if (v36 && *(_DWORD *)(*a1 + 11992) != -1)
    v36 = 0;
  v37 = sub_22F34A9F8(a2);
  v38 = *a1;
  v39 = (*(_DWORD *)(a2 + 28) >> 13) & 3;
  v40 = *(_DWORD *)(a2 + 56);
  v42 = v51;
  v43 = v52[0];
  v44 = 0;
  v45[0] = 0;
  v20 = sub_22EAC2C24(v38, 0, v39, v40, v29 != 0, v28, (uint64_t *)v49, (uint64_t)&v42, v36, (uint64_t)&v44, 1, v37);
  sub_22E80F94C(v45);
  if (v20)
  {
    sub_22EE33A90(*a1, a1[4], a2, v20, 0, 0);
    v41 = *(_QWORD *)(*a1 + 88);
    v44 = (__int128 *)v20;
    sub_22F25E108((uint64_t *)(v41 + 1632), &v44)[1] = a2;
  }
  if (HIDWORD(v50[0]))
  {
    v26 = *(void **)&v50[0];
    goto LABEL_26;
  }
  return v20;
}

uint64_t sub_22EE42A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v4)
  {
    v5 = (unint64_t *)(a2 + 64);
    v6 = 8 * v4;
    while (1)
    {
      v7 = (uint64_t)sub_22EE37A18(*(_QWORD *)a1, *(_DWORD *)(a2 + 24), *v5, *(_DWORD **)(a1 + 32), 0);
      if (!v7)
        break;
      v8 = v11;
      if (v11 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v11;
      }
      v12[v8] = v7;
      v9 = ++v11;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
LABEL_9:
    v7 = sub_22F328F38(*(_QWORD *)a1, a2, v12, v9);
    if (sub_22EE3A97C(*(_QWORD *)(a2 + 16)))
      sub_22EE0A7A4(*(_QWORD *)(*(_QWORD *)a1 + 12024), a2, v7);
  }
  return v7;
}

unint64_t sub_22EE42BCC(uint64_t *a1, uint64_t a2, __n128 a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v24;
  _QWORD v25[4];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[5] = *MEMORY[0x24BDAC8D0];
  v26 = v28;
  a3.n128_u64[0] = 0x500000000;
  v27 = 0x500000000;
  v5 = *(unsigned int **)(a2 + 40);
  v7 = *v5;
  v6 = v5[1];
  if ((_DWORD)v6)
  {
    v8 = (unint64_t *)&v5[2 * v7 + 4];
    v9 = 8 * v6;
    do
    {
      v10 = sub_22EE0A68C(*a1, *v8, a1[4], a3);
      v6 = v27;
      if (v27 >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v27;
      }
      *((_QWORD *)v26 + v6) = v10 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v6) = v27 + 1;
      LODWORD(v27) = v27 + 1;
      ++v8;
      v9 -= 8;
    }
    while (v9);
    v5 = *(unsigned int **)(a2 + 40);
    v7 = *v5;
  }
  a3.n128_u64[0] = 0x400000000;
  v24 = 0;
  if ((_DWORD)v7)
  {
    v11 = v5 + 4;
    v12 = 8 * v7;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_DWORD *)(*(_QWORD *)v11 + 8);
      if (*(_QWORD *)v11)
        v15 = v14 == 7;
      else
        v15 = 0;
      if (v15)
      {
        v19 = sub_22EE0A68C(*a1, *(_QWORD *)(v13 + 16), a1[4], a3);
        if (v19 >= 2)
        {
          v17 = sub_22F33E2DC((uint64_t *)*a1, v19 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)v13, *(_DWORD *)(v13 + 12), *(_DWORD *)(v13 + 4));
          goto LABEL_18;
        }
      }
      else
      {
        if (v13)
          v16 = v14 == 4;
        else
          v16 = 0;
        if (!v16)
        {
          v17 = 0;
LABEL_18:
          v18 = v24;
          if (v24 >= 4uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v24;
          }
          v25[v18] = v17;
          ++v24;
          goto LABEL_24;
        }
        v20 = sub_22EE0A68C(*a1, *(_QWORD *)(v13 + 16), a1[4], a3);
        if (v20 >= 2)
        {
          v17 = sub_22F33E518((_QWORD *)*a1, (_DWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)v13, *(_DWORD *)(v13 + 12), *(_DWORD *)(v13 + 4));
          if (v17)
            goto LABEL_18;
        }
      }
LABEL_24:
      v11 += 2;
      v12 -= 8;
      if (!v12)
      {
        v21 = v24;
        LODWORD(v6) = v27;
        goto LABEL_29;
      }
    }
  }
  v21 = 0;
LABEL_29:
  v22 = sub_22EC83A4C((_QWORD *)*a1, *(_DWORD *)(a2 + 24), (uint64_t *)v26, v6, (char *)v25, v21, a1[3]);
  if (v26 != v28)
    free(v26);
  return v22;
}

_QWORD *sub_22EE42E38(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 17) & 7) != 0)
  {
    v7 = *(_QWORD **)a1;
    v8 = *(_DWORD *)(a2 + 24);
    v9 = sub_22EE08D2C(*(_QWORD *)a1, v4, *(_QWORD *)(a1 + 32), v8, 0);
    v4 = sub_22F33F6FC(v7, v8, v9);
  }
  if (v4 >= 0x10)
  {
    v11 = *(_QWORD *)(a2 + 88);
    v10 = *(_QWORD *)(a2 + 96);
    v12 = *(unsigned int *)(a2 + 24);
    v30[0] = v4;
    v30[1] = v12;
    v13 = sub_22F3B7D68(a2);
    v14 = v13;
    if (v13 && (*(_BYTE *)(v13 + 28) & 0x80) == 0)
      v14 = *(_QWORD *)sub_22EE12BE0(*(_QWORD *)(*(_QWORD *)a1 + 12024), v13) & 0xFFFFFFFFFFFFFFF8;
    v5 = (_QWORD *)sub_22ECAF9F4(*(_QWORD *)a1, 0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 40), (uint64_t)v30, 1uLL, (*(_DWORD *)(a2 + 28) >> 13) & 3, v14);
    sub_22EE0A7A4(*(_QWORD *)(*(_QWORD *)a1 + 12024), a2, (uint64_t)v5);
    if (!v11)
    {
      if (!v10)
      {
LABEL_35:
        v22 = 0;
        v21 = *(_QWORD *)a1;
        goto LABEL_39;
      }
      v15 = 0;
LABEL_21:
      v23 = sub_22F33FAB0(*(_QWORD *)a1, 0, (uint64_t)v5);
      sub_22EE0A7A4(*(_QWORD *)(*(_QWORD *)a1 + 12024), *(_QWORD *)(*(_QWORD *)(a2 + 128) + 16), *(_QWORD *)(v5[16] + 16));
      sub_22EE0A7A4(*(_QWORD *)(*(_QWORD *)a1 + 12024), *(_QWORD *)(*(_QWORD *)(a2 + 120) + 16), *(_QWORD *)(v5[15] + 16));
      if ((*(_WORD *)(a2 + 64) & 0x6000) != 0)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 16);
        if (v26 && (*(_DWORD *)(v26 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v26 + 96) & 0x600u) - 1536 > 0xFFFFFBFF
          || *(_QWORD *)(v26 + 88) < 8uLL)
        {
          v27 = 0;
          v25 = 0;
          goto LABEL_30;
        }
        sub_22EE43198(*(_QWORD *)a1, v23, v26, *(_QWORD *)(a1 + 32));
        v25 = 0;
      }
      else
      {
        v25 = sub_22EE0A68C(*(_QWORD *)a1, v10, *(_QWORD *)(a1 + 32), v24) & 0xFFFFFFFFFFFFFFFELL;
      }
      v27 = 1;
LABEL_30:
      sub_22F33FC94(*(_QWORD *)a1, (uint64_t)v5, v25, v23);
      if (v15 && v27)
      {
        if (!v25 || (*(_WORD *)(a2 + 64) & 0x6000) != 0)
        {
          v22 = 0;
          v21 = *(_QWORD *)a1;
          if (v25 || (*(_WORD *)(a2 + 64) & 0x6000) == 0)
            goto LABEL_39;
        }
        else
        {
          v21 = *(_QWORD *)a1;
        }
        goto LABEL_38;
      }
      goto LABEL_35;
    }
    sub_22F33F824(*(_QWORD *)a1, 0, (uint64_t)v5);
    sub_22EE0A7A4(*(_QWORD *)(*(_QWORD *)a1 + 12024), *(_QWORD *)(*(_QWORD *)(a2 + 104) + 16), *(_QWORD *)(v5[13] + 16));
    sub_22EE0A7A4(*(_QWORD *)(*(_QWORD *)a1 + 12024), *(_QWORD *)(*(_QWORD *)(a2 + 112) + 16), *(_QWORD *)(v5[14] + 16));
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 24);
    if (v17)
    {
      v18 = (*(_WORD *)(v17 + 8) & 0x7F) - 35;
      v19 = v17 - 64;
      if (v18 >= 3)
        v16 = 0;
      else
        v16 = v19;
    }
    sub_22EBBBB24((uint64_t)v28, *(_QWORD *)a1, v16, 0, v16 != 0);
    v15 = sub_22EE0A68C(*(_QWORD *)a1, v11, *(_QWORD *)(a1 + 32), v20) & 0xFFFFFFFFFFFFFFFELL;
    sub_22F33FA20(*(_QWORD *)a1, (uint64_t)v5, v15);
    if (v29)
    {
      *(_QWORD *)(v28[0] + 10288) = v28[1];
      if (v10)
        goto LABEL_21;
    }
    else if (v10)
    {
      goto LABEL_21;
    }
    v21 = *(_QWORD *)a1;
    if (v15)
    {
LABEL_38:
      v22 = (*(_BYTE *)(a2 + 28) & 0x80) == 0;
      goto LABEL_39;
    }
    v22 = 0;
LABEL_39:
    sub_22F33FDA0(v21, 0, (uint64_t)v5, v22);
    return v5;
  }
  return 0;
}

unint64_t sub_22EE43198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int v38[3];
  int v39;
  uint64_t v40;
  int v41;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16056);
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, a2);
  if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x40)
  {
    v9 = *(_DWORD *)(a3 + 96);
    if ((v9 & 0x4000) != 0)
    {
      v36 = 24576;
    }
    else
    {
      if ((v9 & 0x2000) == 0)
        goto LABEL_6;
      v36 = 0x2000;
    }
    *(_DWORD *)(a2 + 96) |= v36;
  }
LABEL_6:
  result = sub_22EFBC5B4(a3);
  if (result)
  {
    v41 = 6;
    v40 = a2;
    v39 = 3;
    *(_QWORD *)v38 = *(unsigned int *)(a1 + 1704);
    sub_22EB4DDB8(a1 + 3688, &v41, v38, (__int16 *)(a1 + 1693), &v40, &v39);
    v11 = *(unsigned int *)(a1 + 3696);
    v12 = v11 - 2;
    v13 = *(_QWORD *)(a1 + 3688);
    v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
    if (v14 == 5)
    {
      *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
      v15 = 1;
    }
    else if (v14 == 2)
    {
      *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
      v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
    }
    else
    {
      v15 = 0;
      *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
    }
    v16 = v13 + 576 * v11;
    *(_BYTE *)(v16 - 3) = v15;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v16 - 496));
    }
    v17 = *(_QWORD *)(a2 + 16);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)*v18;
    v19 = *(_QWORD *)(a1 + 216);
    v20 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = 0;
    v21 = *(_QWORD *)(a1 + 10288);
    v22 = *(_DWORD *)(a1 + 1944);
    v23 = *(_DWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 216) = v18;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    v24 = (unsigned __int8 *)sub_22EFBC5B4(a3);
    v25 = sub_22EE0CEDC(a1, v24, a4, (*(_BYTE *)(a3 + 96) & 0x60) == 32);
    if (v19)
    {
      *(_QWORD *)(a1 + 216) = v19;
      *(_QWORD *)(a1 + 3200) = v20;
      *(_QWORD *)(a1 + 10288) = v21;
      *(_DWORD *)(a1 + 1944) = v22;
      *(_DWORD *)(a1 + 2192) = v23;
    }
    if ((v25 & 1) != 0)
    {
      sub_22EFC77E8(a2, 1);
      goto LABEL_20;
    }
    v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
    if (sub_22E49F808(a2))
    {
      if (!v26 || !sub_22EFFFBEC(v26, *(_QWORD *)(a1 + 88), 0, 0, v27, v28, v29, v30))
        goto LABEL_20;
    }
    else if (!v26)
    {
      sub_22EA117E4(a1, a2);
      goto LABEL_20;
    }
    sub_22EA28AD8();
LABEL_20:
    result = sub_22EB48E64(a1);
    goto LABEL_21;
  }
  v31 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v31 != 64)
  {
    v32 = *(_QWORD *)(a2 + 16);
    v33 = v32 & 0xFFFFFFFFFFFFFFF8;
    if ((v32 & 4) != 0)
      v33 = *(_QWORD *)v33;
    if ((*(_WORD *)(v33 + 8) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(a2 + 97) & 0x20) == 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      if (!(_DWORD)result)
        return result;
      v37 = *(_QWORD *)(a3 + 80);
      if ((!v37 || (*(_DWORD *)(v37 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v37 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
        && *(_QWORD *)(v37 + 88) > 7uLL)
      {
        return result;
      }
      v31 = *(_DWORD *)(a2 + 28) & 0x7F;
    }
  }
  v34 = *(_DWORD *)(a2 + 96);
  v35 = (v34 & 0x800) == 0 || v31 == 64;
  if (v35 && (v34 & 0x1000) == 0)
  {
    result = sub_22EA117E4(a1, a2);
LABEL_21:
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0)
      return sub_22E9FF2F4(a1, a2);
  }
  return result;
}

_QWORD *sub_22EE43528(_QWORD **a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t *v39;
  int v40[3];
  __int128 v41;
  __int128 v42;
  void *v43[2];
  _QWORD v44[2];
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[32];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[9];

  v54[6] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v5 & 0x600) != 0)
  {
    v6 = *(_QWORD *)(a2 + 104);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 104);
    if ((v5 & 0x100) == 0)
      goto LABEL_3;
  }
  v9 = *a1;
  v10 = *(_DWORD *)(a2 + 24);
  v11 = sub_22EE08D2C((uint64_t)*a1, *(_QWORD *)(a2 + 48), (uint64_t)a1[4], v10, v6);
  v4 = sub_22F33FEEC(v9, v10, v11);
LABEL_3:
  if (v4 < 0x10)
    return 0;
  v12 = sub_22F3B8034(a2);
  v13 = v12;
  if (v12 && (*(_BYTE *)(v12 + 28) & 0x80) == 0)
    v13 = *(_QWORD *)sub_22EE12BE0((*a1)[1503], v12) & 0xFFFFFFFFFFFFFFF8;
  v52 = v54;
  v53 = 0x600000000;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_22F33C0DC();
  v14 = sub_22F33FF90((uint64_t)*a1, 0, v4, *(_DWORD *)(a2 + 24), v6) & 0xFFFFFFFFFFFFFFFELL;
  sub_22EE0A7A4((*a1)[1503], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * **(unsigned int **)(a2 + 56) + 16) + 16), *(_QWORD *)(v14 + 16));
  v15 = a1[3];
  if (v15)
  {
    v16 = (v15[1] & 0x7F) - 35;
    v17 = (uint64_t)(v15 - 8);
    if (v16 >= 3)
      v18 = 0;
    else
      v18 = v17;
  }
  else
  {
    v18 = 0;
  }
  sub_22EBBBB24((uint64_t)v44, (uint64_t)*a1, v18, 0, v18 != 0);
  v20 = *(_DWORD **)(a2 + 56);
  v23 = *v20;
  v22 = (uint64_t *)(v20 + 4);
  v21 = v23;
  if (v23)
  {
    v39 = &v22[v21];
    v38 = v14;
    while (1)
    {
      v24 = *v22;
      v49 = v51;
      v50 = 0x400000000;
      v25 = *(unsigned int *)(v24 + 16);
      if ((_DWORD)v25)
        break;
LABEL_24:
      v30 = sub_22F348DBC((uint64_t)*a1, *(_QWORD *)(v24 + 40), *(void **)(v24 + 48), (uint64_t)a1[4]);
      v42 = 0u;
      *(_OWORD *)v43 = 0u;
      sub_22E8ACE30((uint64_t)&v42, v30, v31);
      sub_22EE123D8((uint64_t)*a1, v24 + 56, (uint64_t)a1[4], (uint64_t)&v41);
      v32 = *(_DWORD *)(v24 + 12);
      v33 = *(_DWORD *)(v24 + 4);
      v40[0] = *(_DWORD *)v24;
      v40[1] = v32;
      v40[2] = v33;
      v34 = sub_22EC94100(*a1, v24 + 80, 5u, v24 + 100, 5, (uint64_t)&v42, &v41, *(_DWORD *)(v24 + 120), *(_BYTE *)(v24 + 124), v37, *(_DWORD *)(v24 + 128), *(unsigned int *)(v24 + 132), (uint64_t)v49, v50, v40, 0, 0, 0);
      v35 = v53;
      if (v53 >= (unint64_t)HIDWORD(v53))
      {
        v36 = v34;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = v36;
        v35 = v53;
      }
      v14 = v38;
      v52[v35] = v34;
      LODWORD(v53) = v53 + 1;
      if (HIDWORD(v43[1]))
        free(v43[0]);
      if (v49 != v51)
        free(v49);
      if (++v22 == v39)
        goto LABEL_35;
    }
    v26 = (unint64_t *)(v24 + 136);
    v27 = 8 * v25;
    while (1)
    {
      v28 = sub_22EE0A68C((uint64_t)*a1, *v26, (uint64_t)a1[4], v19) & 0xFFFFFFFFFFFFFFFELL;
      if (!v28)
        break;
      v29 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = v50;
      }
      *((_QWORD *)v49 + v29) = v28;
      LODWORD(v50) = v50 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
        goto LABEL_24;
    }
    if (v49 != v51)
      free(v49);
    sub_22EC81438(*a1, 0);
    v7 = 0;
  }
  else
  {
LABEL_35:
    sub_22EC81438(*a1, 0);
    v7 = sub_22ECB0100((uint64_t)*a1, 0, (unint64_t)a1[3], *(_QWORD *)(a2 + 40), v4, *(_DWORD *)(a2 + 24), v6, (*(_DWORD *)(a2 + 28) >> 13) & 3, v14, v52, v53, v13);
    sub_22EE0A7A4((*a1)[1503], a2, (uint64_t)v7);
  }
  if (v45)
    *(_QWORD *)(v44[0] + 10288) = v44[1];
  if (v52 != v54)
    free(v52);
  return v7;
}

uint64_t sub_22EE439A0(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41[13];

  v14 = *a1;
  v15 = *(_QWORD *)(a3 + 56);
  v16 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 4) != 0)
    v16 = *(_QWORD *)(v16 + 32);
  v17 = (_QWORD *)a1[4];
  v18 = sub_22EFBAFDC(a3);
  v19 = (uint64_t *)sub_22EE03524(v14, v16, v17, v18, *(_QWORD *)(a3 + 40), 0);
  if (!v19)
    return 0;
  v36 = a4;
  v37 = a2;
  v38 = a7;
  v20 = *v19;
  v35 = v19;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a3 + 24), 0x1403u, 0, (uint64_t)v41);
    v30 = 0;
    if ((*(_DWORD *)(a3 + 28) & 0x7F) != 0x40)
    {
      v31 = *(_QWORD *)(a3 + 16);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)v32;
      v30 = (*(_WORD *)(v32 + 8) & 0x7Eu) - 34 < 4;
    }
    v40 = v30;
    v33 = sub_22E894E38((uint64_t)v41, (unsigned __int8 *)&v40);
    v39 = *v35;
    sub_22E8901B8(v33, &v39);
    sub_22E903BEC((unsigned int *)v41);
    return 0;
  }
  v21 = a6;
  v22 = *(_QWORD *)(*a1 + 88);
  v23 = a1[3];
  v34 = *(_DWORD *)(a3 + 64);
  v24 = *(_DWORD *)(a3 + 24);
  v25 = *(_BYTE *)(a3 + 96) & 7;
  v26 = sub_22EFC7430(424, v22, v23, 0);
  v27 = sub_22EFEC588(v26, 65, v22, v23, v34, v24, v37, v20, (uint64_t)v35, v25, a5, v21);
  sub_22EFEC7C4(v27, v36);
  if (!v38)
  {
    v41[0] = 0;
    sub_22EFEBC30(v37, (uint64_t)a5, v21, (uint64_t)v41);
    sub_22EFEBFD4(v37, v26, v41[0]);
  }
  v28 = *a1;
  if ((*(_DWORD *)(*(_QWORD *)(*a1 + 72) + 52) & 0x40000000) != 0)
  {
    sub_22EA1D764(v28, v26);
    v28 = *a1;
  }
  if (sub_22EE2CCAC(v28, a1[4], a3, v26))
    return 0;
  sub_22EE39160((_QWORD *)*a1, v26, a3, a1[4], a1[5], a1[3], a1[6], 0, v38);
  return v26;
}

uint64_t sub_22EE43BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[64];
  void *v26;
  uint64_t v27;
  _QWORD v28[9];
  uint64_t vars0;

  v4 = 0;
  v28[8] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v5 = *(_DWORD *)(a1 + 11992);
  v16 = a1;
  v17 = a1;
  v18 = v5;
  v19 = a3;
  v20 = a4;
  v21 = 0;
  v22 = 0;
  v23 = v25;
  v24 = 0x400000000;
  v26 = v28;
  v27 = 0x400000000;
  if ((*(_BYTE *)(a2 + 28) & 0x80) == 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v11[0] = &v12;
    v11[1] = &v16;
    v11[2] = &v13;
    v12 = 0;
    v15 = v6;
    v14[0] = a1;
    v14[1] = &v15;
    v8 = *(_QWORD *)off_255E04E38(&off_255E04E38, a2);
    if (!v8)
      goto LABEL_6;
    v9 = (uint64_t)&vars0 - v8;
    if (v9 < 0)
      v9 = -v9;
    if ((unint64_t)(v9 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v14, (uint64_t)sub_22EE6684C, (uint64_t)v11);
    else
LABEL_6:
      *(_QWORD *)v11[0] = sub_22EE0C33C(&v16, v7);
    v4 = v12;
    if (v26 != v28)
      free(v26);
  }
  if (v23 != v25)
    free(v23);
  *(_DWORD *)(v17 + 11992) = v18;
  return v4;
}

unint64_t sub_22EE43D40(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  void *v27;
  uint64_t v28;
  _BYTE v29[64];
  void *v30[2];
  _BYTE v31[64];
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 28) & 0x80) != 0)
    return 0;
  v30[0] = v31;
  v30[1] = (void *)0x400000000;
  v32 = 0;
  v33 = 1;
  v6 = sub_22EFC7E08(a2);
  v32 += v6;
  v7 = a2 + 64;
  if (a2)
    v8 = a2 + 64;
  else
    v8 = 0;
  v9 = *(_DWORD *)(a1 + 11992);
  v17 = a1;
  v18 = a1;
  v19 = v9;
  v20 = v8;
  v21 = v30;
  v22 = 0;
  v23 = 0;
  v24 = v26;
  v25 = 0x400000000;
  v27 = v29;
  v10 = (*(_DWORD *)(a3 + 28) & 0x7E) - 58;
  v28 = 0x400000000;
  if (v10 >= 0xFFFFFFFC)
  {
    v11 = sub_22EE3C878(&v17, a3, 0, 0, 0, 1);
  }
  else
  {
    v11 = sub_22EE3DF6C(&v17, a3, 0, 1);
    if (v11)
    {
      v12 = *(_QWORD *)(a3 + 56);
      if ((v12 & 4) != 0 && (v16 = v12 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v16 + 16)))
        v13 = **(int ***)(v16 + 24);
      else
        v13 = (int *)(a3 + 64);
      v14 = sub_22EFD9CC8(*(_QWORD *)(a1 + 88), v8, *(_DWORD *)(a3 + 24), v11 & 0xFFFFFFFFFFFFFFFBLL, *v13, 0, 0);
      *(_DWORD *)(v14 + 28) &= 0xFFFF9FFF;
      sub_22EFCCFA0(v7, v14);
    }
  }
  if (v27 != v29)
    free(v27);
  if (v24 != v26)
    free(v24);
  *(_DWORD *)(v18 + 11992) = v19;
  if (v30[0] != v31)
    free(v30[0]);
  return v11;
}

_DWORD *sub_22EE43F30(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _DWORD *result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 11992);
  v8 = a1;
  v9 = a1;
  v10 = v4;
  v11 = a3;
  v12 = a4;
  v13 = 0;
  v14 = 0;
  v15 = v17;
  v16 = 0x400000000;
  v18 = v20;
  v19 = 0x400000000;
  result = sub_22EE389A4(&v8, a2);
  if (v18 != v20)
  {
    v7 = result;
    free(v18);
    result = v7;
  }
  if (v15 != v17)
  {
    v6 = result;
    free(v15);
    result = v6;
  }
  *(_DWORD *)(v9 + 11992) = v10;
  return result;
}

uint64_t sub_22EE44010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;

  result = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v8 = *(_BYTE *)(result + 16) == 26;
  else
    v8 = 0;
  if (v8)
  {
    v9 = a4;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = sub_22F10CF48(result);
    v9 = a4;
    if (!result)
      return result;
  }
  v10 = *(_QWORD *)(result + 16);
  if ((v10 & 0x3FFFC000000000) == 0)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = (unsigned __int16)(v10 >> 38);
  v27 = v13;
  while (1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v11);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v12);
      v19 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v18 + 40) = v19;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
      {
        v20 = sub_22EE08D2C(a1, *(_QWORD *)(v14 + 48), a5, *(unsigned int *)(v18 + 24), v19);
        if (v20 < 0x10)
          return 1;
        *(_QWORD *)(v18 + 48) = v20;
      }
      sub_22EE0A7A4(v9, v14, v18);
      ++v12;
      goto LABEL_26;
    }
    sub_22EE12F6C(v9, *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v11));
    v15 = sub_22EE73EF0(a1, *(_QWORD *)(v14 + 48), a5);
    if ((v15 & 0xFF00000000) != 0)
    {
      v16 = v15;
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v17 && *(_BYTE *)(v17 + 16) == 36)
      {
        if (v16)
          break;
        goto LABEL_26;
      }
      v17 = sub_22F10CF48(v17);
      if (v16)
        break;
    }
LABEL_26:
    if (++v11 == v13)
      return 0;
  }
  v21 = 0;
  v22 = *(_QWORD *)(v17 + 32);
  while (1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * (v12 + v21));
    v24 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v23 + 40) = v24;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
      break;
LABEL_24:
    sub_22EE0A720(v9, v14, v23);
    if (v16 == ++v21)
    {
      v12 += v21;
      v13 = v27;
      goto LABEL_26;
    }
  }
  v25 = *(_DWORD *)(a1 + 11992);
  *(_DWORD *)(a1 + 11992) = v21;
  v26 = sub_22EE08D2C(a1, v22, a5, *(unsigned int *)(v23 + 24), v24);
  if (v26 >= 0x10)
  {
    *(_QWORD *)(v23 + 48) = v26;
    *(_DWORD *)(a1 + 11992) = v25;
    v9 = a4;
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 11992) = v25;
  return 1;
}

uint64_t sub_22EE4423C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  _QWORD v48[6];
  uint64_t v49;
  int32x2_t v50;
  char v51;
  char v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 **v56;
  uint64_t v57;
  uint64_t v58;
  llvm *v59;
  unsigned int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  void *v67[2];
  _QWORD v68[11];
  uint64_t vars0;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v68[9] = *MEMORY[0x24BDAC8D0];
  v53 = (unsigned __int8 *)(*(_QWORD *)(v1 + 88) & 0xFFFFFFFFFFFFFFF8);
  v54 = v3;
  LODWORD(v48[0]) = 6;
  v57 = v1;
  LODWORD(v55) = 3;
  v67[0] = (void *)*(unsigned int *)(v0 + 1704);
  sub_22EB4DDB8(v0 + 3688, (int *)v48, (int *)v67, (__int16 *)(v0 + 1693), &v57, (int *)&v55);
  v8 = *(unsigned int *)(v7 + 3696);
  v9 = v8 - 2;
  v10 = *(_QWORD *)(v7 + 3688);
  v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
  if (v11 == 5)
  {
    *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
    v12 = 1;
  }
  else if (v11 == 2)
  {
    *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
    v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
  }
  v13 = v10 + 576 * v8;
  *(_BYTE *)(v13 - 3) = v12;
  *(_WORD *)(v7 + 1693) = 0;
  if (*(_DWORD *)(v7 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v7 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
    sub_22EAEAE08(v7 + 1840, (uint64_t *)(v13 - 496));
  }
  v14 = 1;
  sub_22EE007CC(v4, 0, 1, 0, (uint64_t)v67);
  sub_22EE00E90(&v50, v7, 2, v6, 0, v2, 0, v15, *(_QWORD *)v67[0], *((_QWORD *)v67[0] + 1), 0);
  if (!v51)
  {
    if (v52)
    {
      v16 = *(_QWORD *)(v2 + 56);
      if ((v16 & 4) != 0 && (v37 = v16 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v37 + 16)))
        v17 = **(int ***)(v37 + 24);
      else
        v17 = (int *)(v2 + 64);
      sub_22E8FCA40((_QWORD *)v7, *v17, 0x1210u, 0, (uint64_t)&v57);
      sub_22E890024((uint64_t)&v57, &v54);
      sub_22E903BEC((unsigned int *)&v57);
      v14 = 1;
      sub_22EFC77E8(v2, 1);
      goto LABEL_50;
    }
    v49 = 0;
    v18 = v4 + 72;
    if (!v4)
      v18 = 0;
    v19 = *(_QWORD *)(v7 + 216);
    v45 = *(_QWORD *)(v7 + 3200);
    *(_QWORD *)(v7 + 3200) = 0;
    v20 = *(_QWORD *)(v7 + 10288);
    v21 = *(_DWORD *)(v7 + 1944);
    v46 = *(_DWORD *)(v7 + 2192);
    *(_QWORD *)(v7 + 216) = v18;
    *(_QWORD *)(v7 + 10288) = 0;
    *(_DWORD *)(v7 + 1944) = *(_DWORD *)(v7 + 1904);
    *(_DWORD *)(v7 + 2192) = *(_DWORD *)(v7 + 1960);
    v57 = v7;
    v22 = 16;
    v58 = 1;
    do
    {
      *(uint64_t *)((char *)&v57 + v22) = -4096;
      v22 += 16;
    }
    while (v22 != 80);
    v61 = &v63;
    v62 = 0x100000000;
    v64 = *(_QWORD *)(v7 + 12024);
    v65 = 0;
    v66 = 0;
    *(_QWORD *)(v7 + 12024) = &v57;
    v23 = sub_22EFC20FC(v4, 0);
    if ((sub_22EE44010(v7, v4, v23, (uint64_t)&v57, (uint64_t)v67) & 1) != 0)
    {
      if (!(_BYTE)v65)
      {
        if ((_DWORD)v62)
        {
          v39 = 0;
          v40 = 8 * v62;
          do
          {
            v41 = *(void ***)((char *)v61 + v39);
            if (v41)
            {
              if (*v41 != v41 + 2)
                free(*v41);
              MEMORY[0x2348A0E9C](v41, 0x1080C40ED926357);
            }
            v39 += 8;
          }
          while (v40 != v39);
        }
        *(_QWORD *)(v57 + 12024) = v64;
        LOBYTE(v65) = 1;
      }
      if (v61 != &v63)
        free(v61);
      if ((v58 & 1) == 0)
        llvm::deallocate_buffer(v59, (void *)(16 * v60));
      if (v19)
      {
        *(_QWORD *)(v7 + 216) = v19;
        *(_QWORD *)(v7 + 3200) = v45;
        *(_QWORD *)(v7 + 10288) = v20;
        *(_DWORD *)(v7 + 1944) = v21;
        v14 = 1;
        *(_DWORD *)(v7 + 2192) = v46;
        goto LABEL_50;
      }
      goto LABEL_47;
    }
    v48[0] = &v49;
    v48[1] = v7;
    v48[2] = &v53;
    v48[3] = v67;
    LODWORD(v47) = v6;
    v55 = v7;
    v56 = &v47;
    v25 = *(_QWORD *)off_255E04E38(&off_255E04E38, v24);
    if (!v25)
      goto LABEL_29;
    v26 = (uint64_t)&vars0 - v25;
    if (v26 < 0)
      v26 = -v26;
    if ((unint64_t)(v26 - 8126464) <= 0x40000)
    {
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)&v55, (uint64_t)sub_22EE66880, (uint64_t)v48);
    }
    else
    {
LABEL_29:
      v27 = sub_22EE0CEDC(v7, v53, (uint64_t)v67, 0);
      *(_QWORD *)v48[0] = v27;
    }
    if (!(_BYTE)v65)
    {
      if ((_DWORD)v62)
      {
        v42 = 0;
        v43 = 8 * v62;
        do
        {
          v44 = *(void ***)((char *)v61 + v42);
          if (v44)
          {
            if (*v44 != v44 + 2)
              free(*v44);
            MEMORY[0x2348A0E9C](v44, 0x1080C40ED926357);
          }
          v42 += 8;
        }
        while (v43 != v42);
      }
      *(_QWORD *)(v57 + 12024) = v64;
      LOBYTE(v65) = 1;
    }
    if (v61 != &v63)
      free(v61);
    if ((v58 & 1) == 0)
      llvm::deallocate_buffer(v59, (void *)(16 * v60));
    if (v19)
    {
      *(_QWORD *)(v7 + 216) = v19;
      *(_QWORD *)(v7 + 3200) = v45;
      *(_QWORD *)(v7 + 10288) = v20;
      *(_DWORD *)(v7 + 1944) = v21;
      *(_DWORD *)(v7 + 2192) = v46;
    }
    if ((v49 & 1) != 0)
    {
LABEL_47:
      v14 = 1;
      goto LABEL_50;
    }
    sub_22E99E5D4(*(_QWORD *)(v7 + 88), v2, *(_QWORD *)(v2 + 48), (uint64_t)v48);
    v28 = *(unsigned int *)(v2 + 24);
    sub_22F0D5A50((uint64_t)v53);
    v55 = (v28 << 32) | 2;
    v56 = (unsigned __int8 **)(v29 | ((unint64_t)v29 << 32));
    v47 = (unsigned __int8 *)(v49 & 0xFFFFFFFFFFFFFFFELL);
    v14 = 1;
    sub_22EC395BC(&v57, v7, v48, &v55, &v47, 1, 0, 1);
    v31 = sub_22EC3DF80((uint64_t)&v57, v7, (uint64_t)v48, (unsigned __int16 *)&v55, &v47, 1, 0, v30);
    v49 = v31;
    if ((v31 & 1) == 0)
    {
      v32 = *(_QWORD *)(v2 + 56);
      if ((v32 & 4) != 0 && (v38 = v32 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v38 + 16)))
        v33 = **(unsigned int ***)(v38 + 24);
      else
        v33 = (unsigned int *)(v2 + 64);
      v34 = sub_22EBCF22C(v7, v31 & 0xFFFFFFFFFFFFFFFELL, *v33, 0, 0);
      v49 = v34;
      if ((v34 & 1) != 0)
      {
        v14 = 1;
      }
      else
      {
        *(_DWORD *)(v2 + 96) |= 0x600u;
        *(_QWORD *)(v2 + 88) = v34 & 0xFFFFFFFFFFFFFFFALL;
        v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 96) + 136))(*(_QWORD *)(v7 + 96));
        if (v35)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 120))(v35, v2);
        v14 = 0;
      }
    }
    sub_22EC3CE2C((uint64_t)&v57);
  }
LABEL_50:
  sub_22EE014E4(&v50);
  if (v67[0] != v68)
    free(v67[0]);
  sub_22EB48E64(v7);
  return v14;
}

int32x2_t *sub_22EE448D0(int32x2_t *result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  int v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int32x2_t v31;
  char v32;
  char v33;
  uint64_t *v34;
  void *v35[2];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v10 = (uint64_t)result;
  v47 = *MEMORY[0x24BDAC8D0];
  v34 = a3;
  v11 = *(_QWORD *)(a3[6] & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (!v12)
  {
    result = (int32x2_t *)sub_22F10CF48(*(_QWORD *)(a3[6] & 0xFFFFFFFFFFFFFFF0));
    v11 = (uint64_t)result;
  }
  if ((*(_QWORD *)(v11 + 16) & 0x3C0000000000000) == 0x280000000000000)
  {
    sub_22EE00E90(&v31, v10, 8, a2, 0, (uint64_t)a3, 0, a8, 0, 0, 0);
    if (v32)
    {
      LODWORD(v37) = 0;
      v38 = 0u;
      v39 = 0u;
      v40 = 0;
      v13 = (uint64_t *)v10;
      v14 = a3;
    }
    else
    {
      if (!v33)
      {
        v15 = *(_QWORD *)(v10 + 216);
        v16 = *(_QWORD *)(v10 + 3200);
        *(_QWORD *)(v10 + 3200) = 0;
        v17 = *(_QWORD *)(v10 + 10288);
        v18 = *(_DWORD *)(v10 + 1944);
        v19 = *(_DWORD *)(v10 + 2192);
        *(_QWORD *)(v10 + 216) = a3 + 9;
        *(_QWORD *)(v10 + 10288) = 0;
        *(_DWORD *)(v10 + 1944) = *(_DWORD *)(v10 + 1904);
        *(_DWORD *)(v10 + 2192) = *(_DWORD *)(v10 + 1960);
        v37 = v10;
        v20 = 16;
        *(_QWORD *)&v38 = 1;
        do
        {
          *(uint64_t *)((char *)&v37 + v20) = -4096;
          v20 += 16;
        }
        while (v20 != 80);
        v41 = &v43;
        v42 = 0x100000000;
        v44 = *(_QWORD *)(v10 + 12024);
        v45 = 0;
        v46 = 0;
        *(_QWORD *)(v10 + 12024) = &v37;
        sub_22EE007CC((uint64_t)a3, 0, 1, 0, (uint64_t)v35);
        v21 = sub_22F257DA4(v11);
        if (sub_22EE44010(v10, (uint64_t)a3, v21, (uint64_t)&v37, (uint64_t)v35))
        {
          v27 = 0;
          v28 = 0u;
          v29 = 0u;
          v30 = 0;
          sub_22EB149A8((uint64_t *)v10, a3, (__int128 *)&v27);
        }
        else
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v22)
            v23 = *(_BYTE *)(v22 + 16) == 26;
          else
            v23 = 0;
          if (!v23)
            v22 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0));
          sub_22F348A0C((uint64_t *)v10, a3, v22, (uint64_t)v35);
        }
        if (v35[0] != &v36)
          free(v35[0]);
        if (!(_BYTE)v45)
        {
          if ((_DWORD)v42)
          {
            v24 = 0;
            v25 = 8 * v42;
            do
            {
              v26 = *(void ***)((char *)v41 + v24);
              if (v26)
              {
                if (*v26 != v26 + 2)
                  free(*v26);
                MEMORY[0x2348A0E9C](v26, 0x1080C40ED926357);
              }
              v24 += 8;
            }
            while (v25 != v24);
          }
          *(_QWORD *)(v37 + 12024) = v44;
          LOBYTE(v45) = 1;
        }
        if (v41 != &v43)
          free(v41);
        if ((v38 & 1) == 0)
          llvm::deallocate_buffer(*((llvm **)&v38 + 1), (void *)(16 * v39));
        if (v15)
        {
          *(_QWORD *)(v10 + 216) = v15;
          *(_QWORD *)(v10 + 3200) = v16;
          *(_QWORD *)(v10 + 10288) = v17;
          *(_DWORD *)(v10 + 1944) = v18;
          *(_DWORD *)(v10 + 2192) = v19;
        }
        return sub_22EE014E4(&v31);
      }
      sub_22E8FCA40((_QWORD *)v10, a2, 0xCE5u, 0, (uint64_t)&v37);
      sub_22E890024((uint64_t)&v37, (uint64_t *)&v34);
      sub_22E903BEC((unsigned int *)&v37);
      v14 = v34;
      LODWORD(v37) = 0;
      v38 = 0u;
      v39 = 0u;
      v40 = 0;
      v13 = (uint64_t *)v10;
    }
    sub_22EB149A8(v13, v14, (__int128 *)&v37);
    return sub_22EE014E4(&v31);
  }
  return result;
}

void sub_22EE44C50(unint64_t a1, unsigned __int32 a2, uint64_t a3, int a4, int a5, int a6)
{
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  llvm *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t i;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t j;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  uint64_t *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t *v123;
  uint64_t v124;
  llvm *v125;
  llvm *TimeTraceProfilerInstance;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int16 *v155;
  unint64_t v156;
  _QWORD v157[5];
  int v158;
  const char *v159;
  int32x2_t v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unsigned int v167[24];
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171[2];
  int v172;
  char v173;
  __int16 v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  llvm *v181;
  unsigned int v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  BOOL v188;
  uint64_t v189;
  __n128 v190[20];
  char v191;
  void *v192;
  llvm *v193;
  uint64_t v194;
  unsigned int v195;
  _QWORD *v196;
  void *v197;
  uint64_t v198;
  int v199;
  _QWORD v200[4];
  _BYTE *v201;
  uint64_t v202;
  _BYTE v203[64];
  _QWORD *v204;
  uint64_t v205;
  _QWORD v206[6];

  v206[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v171 = a3;
  if ((*(_DWORD *)(a3 + 28) & 0x80) != 0)
    return;
  if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x35)
    return;
  v12 = sub_22EFC20A4(a3);
  if (v12 == 2)
    return;
  v13 = v12;
  v14 = sub_22EFC01DC(a3, 0);
  if (v13 == 1 && v14 && !a5)
    return;
  v170 = 0;
  if ((sub_22EFBF86C(a3, (unint64_t *)&v170, 1) & 1) != 0)
  {
    v15 = v170;
    if (sub_22E49F868(v170))
      return;
    *(_QWORD *)v171 = v15;
  }
  else
  {
    v15 = *(_QWORD *)v171;
  }
  v16 = sub_22EFC20FC(v15, 1);
  v169 = v16;
  v190[0].n128_u64[0] = 0;
  if (sub_22EFBF86C(v16, v190[0].n128_u64, 0))
    v17 = v190[0].n128_u64[0];
  else
    v17 = 0;
  v168 = v17;
  if (v17)
  {
    v18 = sub_22EFBF910(v17, (uint64_t *)&v168);
    v16 = v168;
    v169 = v168;
    if ((*(_BYTE *)(v168 + 84) & 8) != 0)
    {
      v19 = 0;
      v168 = 0;
    }
    else
    {
      v19 = v168;
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v20 = *(_QWORD *)v171;
  v21 = sub_22EFBF824(*(uint64_t *)v171) != 0;
  v22 = (llvm *)sub_22ED57F34((_QWORD *)a1, a2, v20, v21, v16, v19, v13, a5);
  if ((_DWORD)v22)
  {
    if (a5)
    {
      sub_22EFC77E8(v20, 1);
    }
    else if (v13 == 4)
    {
      *(_QWORD *)(v20 + 80) |= 0x100000000uLL;
      v190[0].n128_u64[0] = v20;
      v190[0].n128_u32[2] = a2;
      sub_22EB87D64((_QWORD *)(a1 + 12160), v190);
    }
    else if (v13 == 1 && a6 && !*(_BYTE *)(*(_QWORD *)(a1 + 104) + 168))
    {
      v31 = *(_QWORD *)(v16 + 56);
      if ((v31 & 4) != 0 && (v141 = v31 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v141 + 16)))
        v32 = **(int ***)(v141 + 24);
      else
        v32 = (int *)(v16 + 64);
      v33 = sub_22F1E361C(*(_QWORD **)(a1 + 112), *v32);
      if (v33 == 3 || !v33)
      {
        sub_22E8FCA40((_QWORD *)a1, a2, 0x19CFu, 0, (uint64_t)v190);
        sub_22E890024((uint64_t)v190, (uint64_t *)v171);
        sub_22E903BEC((unsigned int *)v190);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v16 + 24), 0x160Bu, 0, (uint64_t)v167);
        sub_22E903BEC(v167);
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
        {
          sub_22E8FCA40((_QWORD *)a1, a2, 0x1636u, 0, (uint64_t)v190);
          sub_22E890024((uint64_t)v190, (uint64_t *)v171);
          sub_22E903BEC((unsigned int *)v190);
        }
      }
    }
    return;
  }
  if ((*(_BYTE *)(v16 + 83) & 0x20) != 0 && !*(_QWORD *)(a1 + 3144))
  {
    *(_QWORD *)(v20 + 80) |= 0x100000000uLL;
    v34 = *(_DWORD *)(a1 + 12216);
    if (v34 >= *(_DWORD *)(a1 + 12220))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v34 = *(_DWORD *)(a1 + 12216);
    }
    v35 = (uint64_t *)(*(_QWORD *)(a1 + 12208) + 16 * v34);
    *v35 = v20;
    v35[1] = a2;
    ++*(_DWORD *)(a1 + 12216);
    return;
  }
  v190[0].n128_u64[0] = (unint64_t)v171;
  v190[0].n128_u64[1] = a1;
  if (llvm::getTimeTraceProfilerInstance(v22))
    llvm::timeTraceProfilerBegin();
  sub_22EE48830((uint64_t)v190, (_QWORD *)a1, a4);
  v163 = a1;
  v164 = *(_OWORD *)(a1 + 12240);
  *(_OWORD *)(a1 + 12240) = 0u;
  v165 = *(_OWORD *)(a1 + 12256);
  *(_OWORD *)(a1 + 12256) = 0u;
  v166 = *(_OWORD *)(a1 + 12272);
  *(_OWORD *)(a1 + 12272) = 0u;
  if (v18)
  {
    v24 = v18;
  }
  else if ((*(_BYTE *)(v16 + 83) & 0x20) != 0 && *(_QWORD *)(a1 + 3144))
  {
    if ((*(_BYTE *)(v16 + 29) & 0x80) != 0)
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8), a1 + 3096);
    v119 = sub_22F34A788(a1 + 3096, v16);
    (*(void (**)(_QWORD, _QWORD))(a1 + 3144))(*(_QWORD *)(a1 + 3160), *(_QWORD *)(v119 + 8));
    v24 = sub_22EFBF910(v16, (uint64_t *)&v169);
    v16 = v169;
  }
  else
  {
    v24 = 0;
  }
  if (v13 == 3 && (*(_BYTE *)(v16 + 82) & 1) == 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v25 || *(unsigned __int8 *)(v25 + 16) - 27 <= 0xFFFFFFFD)
      v25 = sub_22F10CF48(v25);
    v26 = *(_QWORD *)(*(_QWORD *)(v25 + 24) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v179) = 0;
    v27 = sub_22F110500((uint64_t)&v179, v26);
    if (!v27 || *(_BYTE *)(v27 + 16) != 14)
      goto LABEL_238;
  }
  v28 = *(_QWORD *)v171;
  if ((*(_BYTE *)(v16 + 82) & 1) != 0)
  {
    v29 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v171 + 112) + 104), *(_QWORD *)(*(_QWORD *)v171 + 112));
    v30 = v29;
    *(_QWORD *)(v29 + 80) |= 0x10000uLL;
    v28 = *(_QWORD *)v171;
    if (v29 == *(_QWORD *)v171)
    {
      v28 = v29;
    }
    else
    {
      do
      {
        if ((*(_BYTE *)(v30 + 104) & 3) != 0)
        {
          v30 = 0;
        }
        else
        {
          v30 = sub_22E3CD31C((uint64_t *)(v30 + 104), v30);
          v28 = *(_QWORD *)v171;
        }
        *(_QWORD *)(v30 + 80) |= 0x10000uLL;
      }
      while (v30 != v28);
    }
  }
  sub_22EE00E90(&v160, a1, 0, a2, 0, v28, 0, v23, 0, 0, 0);
  if (v161 | v162)
    goto LABEL_237;
  v36 = *(_QWORD *)(a1 + 88);
  v37 = *(_QWORD *)v171;
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v157[0] = &unk_24FAC2E78;
  v157[3] = v36;
  v157[4] = v37;
  v158 = 0;
  v159 = "instantiating function definition";
  v38 = *(_QWORD *)v171;
  v39 = *(_QWORD *)(*(_QWORD *)v171 + 8);
  if ((v39 & 4) != 0)
    *(_QWORD *)(*(_QWORD *)v171 + 8) = v39 & 0xFFFFFFFFFFFFFFF9 | 2;
  *(_DWORD *)(v38 + 64) = *(_DWORD *)(v169 + 64);
  LODWORD(v201) = 6;
  v179 = 0;
  LODWORD(v204) = 3;
  v192 = (void *)*(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, (int *)&v201, (int *)&v192, (__int16 *)(a1 + 1693), (uint64_t *)&v179, (int *)&v204);
  v40 = *(unsigned int *)(a1 + 3696);
  v41 = v40 - 2;
  v42 = *(_QWORD *)(a1 + 3688);
  v43 = *(_DWORD *)(v42 + 576 * (v40 - 2));
  if (v43 == 5)
  {
    *(_BYTE *)(v42 + 576 * v40 - 4) = *(_BYTE *)(v42 + 576 * v41 + 572);
    v44 = 1;
  }
  else if (v43 == 2)
  {
    *(_BYTE *)(v42 + 576 * v40 - 4) = 1;
    v44 = *(_BYTE *)(v42 + 576 * v41 + 573) != 0;
  }
  else
  {
    v44 = 0;
    *(_BYTE *)(v42 + 576 * v40 - 4) = 0;
  }
  v45 = v42 + 576 * v40;
  *(_BYTE *)(v45 - 3) = v44;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v45 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v45 - 496));
  }
  v46 = *(_QWORD *)(*(_QWORD *)v171 + 16);
  v47 = v46 & 0xFFFFFFFFFFFFFFF8;
  if ((v46 & 4) != 0)
    v47 = *(_QWORD *)v47;
  v48 = 0;
  if (v47 && (*(_WORD *)(v47 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    if (sub_22EA3DA94(v47 - 64))
    {
      v49 = 0;
      if ((*(_QWORD *)(*(_QWORD *)v171 + 144) & 6) == 4)
      {
        v50 = *(_QWORD *)(*(_QWORD *)v171 + 144) & 0xFFFFFFFFFFFFFFF8;
        if (v50)
          v49 = *(_QWORD *)(v50 + 16) & 0xFFFFFFFFFFFFFFF8;
      }
      v48 = v49 == 0;
    }
    else
    {
      v48 = 0;
    }
  }
  v179 = a1;
  v180 = 1;
  for (i = 16; i != 80; i += 16)
    *(unint64_t *)((char *)&v179 + i) = -4096;
  v183 = &v185;
  v184 = 0x100000000;
  v186 = *(_QWORD *)(a1 + 12024);
  v187 = 0;
  v188 = v48;
  v189 = 0;
  *(_QWORD *)(a1 + 12024) = &v179;
  v52 = v169;
  if ((*(_BYTE *)(v169 + 83) & 2) != 0)
  {
    v66 = sub_22EAB3978(a1, v169);
    v67 = *(_QWORD *)v171;
    if (v66 - 1 <= 3)
    {
      v68 = *(_QWORD *)(*(_QWORD *)v171 + 16);
      v69 = v68 & 0xFFFFFFFFFFFFFFF8;
      if ((v68 & 4) != 0)
        v69 = *(_QWORD *)v69;
      v70 = (*(_WORD *)(v69 + 8) & 0x7F) - 35;
      if (v69)
        v71 = v69 - 64;
      else
        v71 = 0;
      if (v70 >= 3)
        v71 = 0;
      v72 = *(_QWORD *)(v52 + 16);
      v73 = v72 & 0xFFFFFFFFFFFFFFF8;
      if ((v72 & 4) != 0)
        v73 = *(_QWORD *)v73;
      v74 = (*(_WORD *)(v73 + 8) & 0x7F) - 35;
      if (v73)
        v75 = v73 - 64;
      else
        v75 = 0;
      if (v74 >= 3)
        v75 = 0;
      if (v71)
        v76 = v75 == 0;
      else
        v76 = 1;
      if (!v76)
      {
        v77 = *(_QWORD *)(v75 + 128);
        if (v77)
        {
          if (((*(unsigned __int16 *)(v77 + 8) | (*(unsigned __int8 *)(v77 + 10) << 16)) & 0x100000) != 0)
          {
            v194 = 0;
            v192 = (void *)a1;
            v193 = 0;
            v195 = 0;
            v196 = v200;
            v197 = v200;
            v198 = 2;
            v199 = 0;
            v200[2] = v75;
            v200[3] = v71;
            v78 = *(_QWORD *)(*(_QWORD *)v171 + 56);
            v79 = (uint64_t *)(v78 & 0xFFFFFFFFFFFFFFF8);
            if ((v78 & 4) != 0)
              v79 = (uint64_t *)v79[4];
            v80 = sub_22EE48A80((_QWORD **)&v192, v79);
            v81 = *(_QWORD *)v171;
            *(_QWORD *)(*(_QWORD *)v171 + 48) = *v80;
            v82 = *(_QWORD *)(v81 + 56);
            if ((v82 & 4) != 0)
              *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFFF8) + 32) = v80;
            else
              *(_QWORD *)(v81 + 56) = (unint64_t)v80 & 0xFFFFFFFFFFFFFFFBLL;
            v120 = **(_QWORD **)(v81 + 120);
            v121 = *(_QWORD *)(v120 + 56);
            v122 = (uint64_t *)(v121 & 0xFFFFFFFFFFFFFFF8);
            if ((v121 & 4) != 0)
              v122 = (uint64_t *)v122[4];
            v123 = sub_22EE48A80((_QWORD **)&v192, v122);
            *(_QWORD *)(v120 + 48) = *v123;
            v124 = *(_QWORD *)(v120 + 56);
            if ((v124 & 4) != 0)
              *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 32) = v123;
            else
              *(_QWORD *)(v120 + 56) = (unint64_t)v123 & 0xFFFFFFFFFFFFFFFBLL;
            if (v197 != v196)
              free(v197);
            llvm::deallocate_buffer(v193, (void *)(16 * v195));
            v67 = *(_QWORD *)v171;
          }
        }
      }
    }
    sub_22EAD04B8(a1, v67, *(_DWORD *)(v52 + 24));
    goto LABEL_224;
  }
  v155 = (unsigned __int16 *)v24;
  sub_22EE007CC(*(uint64_t *)v171, 0, 0, v169, (uint64_t)&v192);
  v53 = *(_QWORD *)(v52 + 56);
  if ((v53 & 4) != 0 && *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8))
  {
    v127 = *(_QWORD *)v171;
    if ((*(_WORD *)(*(_QWORD *)v171 + 30) & 0x180) != 0)
      v128 = *(_QWORD *)(*(_QWORD *)v171 + 16);
    else
      v128 = *(_QWORD *)(v52 + 16);
    v129 = v128 & 0xFFFFFFFFFFFFFFF8;
    if ((v128 & 4) != 0)
      v129 = *(_QWORD *)(v129 + 8);
    v130 = 0;
    v131 = 0;
    v132 = *(_QWORD *)(a1 + 216);
    v133 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = 0;
    v134 = *(_QWORD *)(a1 + 10288);
    v135 = *(_DWORD *)(a1 + 1944);
    v136 = *(_DWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 216) = v129;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    v137 = *(_QWORD *)(v52 + 56);
    if ((v137 & 4) != 0)
    {
      v138 = (unint64_t *)(v137 & 0xFFFFFFFFFFFFFFF8);
      v130 = *v138;
      v131 = (void *)v138[1];
    }
    v139 = sub_22F348DBC(a1, v130, v131, (uint64_t)&v192);
    if (v139)
      sub_22EFBB0DC(v127, v139, v140);
    if (v132)
    {
      *(_QWORD *)(a1 + 216) = v132;
      *(_QWORD *)(a1 + 3200) = v133;
      *(_QWORD *)(a1 + 10288) = v134;
      *(_DWORD *)(a1 + 1944) = v135;
      *(_DWORD *)(a1 + 2192) = v136;
    }
  }
  sub_22EA2F2FC(a1, 0, *(uint64_t *)v171, 0, 0);
  v54 = *(_QWORD *)v171;
  v55 = *(_QWORD *)v171 + 72;
  if (!*(_QWORD *)v171)
    v55 = 0;
  v56 = *(_QWORD *)(a1 + 216);
  v57 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  v58 = *(_QWORD *)(a1 + 10288);
  v59 = *(_DWORD *)(a1 + 1944);
  v60 = *(_DWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 216) = v55;
  *(_QWORD *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
  *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
  if ((sub_22EE44010(a1, v54, v52, (uint64_t)&v179, (uint64_t)&v192) & 1) != 0)
  {
    if (v56)
    {
      *(_QWORD *)(a1 + 216) = v56;
      *(_QWORD *)(a1 + 3200) = v57;
      *(_QWORD *)(a1 + 10288) = v58;
      *(_DWORD *)(a1 + 1944) = v59;
      *(_DWORD *)(a1 + 2192) = v60;
    }
    if (v192 != &v194)
      free(v192);
    goto LABEL_229;
  }
  v83 = *(_QWORD *)v171;
  if ((*(_BYTE *)(v52 + 84) & 4) != 0)
  {
    sub_22F31E348(a1, *(uint64_t *)v171);
    v114 = 0;
    goto LABEL_199;
  }
  if (!*(_QWORD *)v171 || (*(_DWORD *)(*(_QWORD *)v171 + 28) & 0x7F) != 0x37)
    goto LABEL_197;
  v148 = v56;
  v149 = v58;
  v150 = v57;
  v151 = v59;
  v152 = v60;
  v204 = v206;
  v205 = 0x400000000;
  v84 = (*(_DWORD *)(v52 + 28) >> 7) & 1;
  v85 = sub_22EFD7ED0(v52);
  v86 = sub_22EFD7ED0(v52) + 8 * ((*(_QWORD *)(v52 + 80) >> 40) & 0x1FFFFFLL);
  v156 = v83;
  if (v85 == v86)
  {
    LOBYTE(v89) = v84;
    goto LABEL_192;
  }
  v153 = v52;
  v154 = v86;
  do
  {
    v87 = *(_QWORD *)v85;
    v88 = *(_WORD *)(*(_QWORD *)v85 + 28);
    if ((v88 & 4) == 0)
      goto LABEL_122;
    if ((v88 & 1) != 0 || (v90 = *(_QWORD *)v87, (*(_QWORD *)v87 & 6) != 0) || !*(_DWORD *)(v87 + 16))
    {
      v89 = 1;
      if ((sub_22EE0CEDC(a1, *(unsigned __int8 **)(v87 + 8), (uint64_t)&v192, 1) & 1) != 0)
        goto LABEL_184;
      v94 = *(_QWORD *)v87;
      v95 = *(_QWORD *)v87 & 6;
      if (v95 == 4 || v95 == 2)
      {
        if (!sub_22EE37A18(a1, *(_DWORD *)(v87 + 16), v94 & 0xFFFFFFFFFFFFFFF8, &v192, 0))
        {
          v103 = v156;
          goto LABEL_183;
        }
        sub_22E46BB88(v52);
        sub_22EFD7AE4((uint64_t *)v87);
        v86 = v154;
        v102 = sub_22EAAEC58();
        v98 = v156;
        if ((v102 & 1) != 0)
        {
LABEL_182:
          v103 = v98;
          v89 = 1;
          goto LABEL_183;
        }
      }
      else
      {
        if (!v95)
        {
          v96 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFF8);
          v97 = sub_22EFD7AE4((uint64_t *)v87);
          if (sub_22EE03524(a1, v96, (uint64_t)&v192, v97, *(_QWORD *)(v156 + 40), 0))
          {
            if ((*(_BYTE *)v87 & 6) != 0 || (*(_WORD *)(v87 + 28) & 1) != 0)
            {
              v98 = v156;
              v112 = sub_22EAAF63C();
            }
            else
            {
              v98 = v156;
              v99 = *(_WORD *)(v156 + 80) & 0x7F;
              if (v99 > 0x46)
              {
                if (v99 == 83 || v99 == 71)
                {
                  v52 = v153;
                  v86 = v154;
                  v98 = v156;
                }
                else
                {
                  v52 = v153;
                  v86 = v154;
                  v98 = v156;
                }
              }
              v112 = sub_22EAAF190();
            }
            v102 = v112;
            if ((v112 & 1) == 0)
              goto LABEL_179;
            goto LABEL_182;
          }
          v89 = 1;
          v103 = v156;
LABEL_183:
          sub_22EFC77E8(v103, 1);
          goto LABEL_184;
        }
        v102 = 0;
      }
LABEL_179:
      v113 = v205;
      if (v205 >= (unint64_t)HIDWORD(v205))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v113 = v205;
      }
      v204[v113] = v102 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v205) = v205 + 1;
LABEL_122:
      v89 = v84;
      goto LABEL_184;
    }
    v177 = *(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF8);
    v91 = v177;
    v178 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    v201 = v203;
    v202 = 0x400000000;
    sub_22EE73804(a1, v177, v178, (uint64_t)&v201);
    v92 = *(_QWORD *)(v87 + 8);
    v175 = 7;
    v176 = v92;
    sub_22EE7377C(a1, (uint64_t)&v175, (uint64_t)&v201);
    v174 = 0;
    LOBYTE(v172) = 0;
    v173 = 0;
    if ((*(_BYTE *)v87 & 6) != 0 || (*(_WORD *)(v87 + 28) & 1) != 0)
      v93 = 0;
    else
      v93 = *(unsigned int *)(v87 + 16);
    for (j = v91; ; j = sub_22F115B7C(j))
    {
      while (1)
      {
        if ((j & 0xF) != 0)
          goto LABEL_150;
        v101 = *(unsigned __int8 *)(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v101 <= 0x39)
          break;
LABEL_145:
        if (sub_22F115668(j))
          v91 = j;
        j = sub_22F115B7C(j);
        if (!j)
          goto LABEL_159;
      }
      if (v101 == 24)
        goto LABEL_158;
      if (v101 == 26)
        break;
      if (((1 << v101) & 0x20000000200003CLL) == 0)
        goto LABEL_145;
LABEL_150:
      ;
    }
    if ((*(_BYTE *)(j + 23) & 0x10) == 0)
      goto LABEL_150;
LABEL_158:
    v91 = j;
LABEL_159:
    v104 = sub_22F115668(v91);
    v105 = sub_22F1167E8((uint64_t *)&v177);
    v86 = v154;
    if ((sub_22EE73A98((_QWORD *)a1, v93, v104 | ((unint64_t)v105 << 32), (uint64_t)v201, v202, (uint64_t *)&v192, (_BYTE *)&v174 + 1, &v174, (uint64_t)&v172) & 1) != 0)
    {
      v89 = 1;
      sub_22EFC77E8(v156, 1);
      v52 = v153;
    }
    else
    {
      v52 = v153;
      if (v172)
      {
        v106 = 0;
        v107 = *(_DWORD *)(a1 + 11992);
        while (1)
        {
          *(_DWORD *)(a1 + 11992) = v106;
          if ((sub_22EE0CEDC(a1, *(unsigned __int8 **)(v87 + 8), (uint64_t)&v192, 1) & 1) != 0)
            break;
          v108 = (*(_QWORD *)v87 & 6) != 0 ? 0 : (uint64_t *)(*(_QWORD *)v87 & 0xFFFFFFFFFFFFFFF8);
          v109 = sub_22EFD7AE4((uint64_t *)v87);
          if (!sub_22EE03524(a1, v108, (uint64_t)&v192, v109, *(_QWORD *)(v156 + 40), 0))
            break;
          v110 = sub_22EAAF190();
          if ((v110 & 1) != 0)
            break;
          v111 = v205;
          if (v205 >= (unint64_t)HIDWORD(v205))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v111 = v205;
          }
          v204[v111] = v110 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v205) = v205 + 1;
          *(_DWORD *)(a1 + 11992) = v107;
          if (++v106 == v172)
          {
            v89 = v84;
            goto LABEL_175;
          }
        }
        *(_DWORD *)(a1 + 11992) = v107;
        v89 = 1;
LABEL_175:
        v86 = v154;
      }
      else
      {
        v89 = v84;
      }
    }
    if (v201 != v203)
      free(v201);
LABEL_184:
    v85 += 8;
    v84 = v89;
  }
  while (v85 != v86);
LABEL_192:
  sub_22EAB1D44((unsigned int *)a1, v156, 0, v204, v205, v89 & 1);
  if (v204 != v206)
    free(v204);
  v59 = v151;
  v60 = v152;
  v58 = v149;
  v57 = v150;
  v56 = v148;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 148) == 11 && !sub_22EFC0EB8(v156))
    sub_22F34933C(a1, v156);
LABEL_197:
  v114 = sub_22EE0E148(a1, v155, (uint64_t)&v192, v61, v62, v63, v64, v65);
  if ((v114 & 1) != 0)
    sub_22EFC77E8(*(uint64_t *)v171, 1);
LABEL_199:
  sub_22EA30A38(a1, *(unint64_t *)v171, v114 & 0xFFFFFFFFFFFFFFFELL, 1);
  if (v169)
    v115 = v169 + 72;
  else
    v115 = 0;
  v116 = *(_QWORD *)sub_22EFCC008(v115);
  if (v116)
  {
    for (k = *(_QWORD **)(v116 + 80); k; k = (_QWORD *)*k)
      sub_22E909EBC(a1, (uint64_t)k, &v192);
  }
  v118 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 136))(*(_QWORD *)(a1 + 96));
  if (v118)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v118 + 112))(v118, *(_QWORD *)v171);
  if (v56)
  {
    *(_QWORD *)(a1 + 216) = v56;
    *(_QWORD *)(a1 + 3200) = v57;
    *(_QWORD *)(a1 + 10288) = v58;
    *(_DWORD *)(a1 + 1944) = v59;
    *(_DWORD *)(a1 + 2192) = v60;
  }
  if (v192 != &v194)
    free(v192);
LABEL_224:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), *(_QWORD *)v171);
  sub_22EE472B4(v163, 1);
  if (!v187)
  {
    if ((_DWORD)v184)
    {
      v145 = 0;
      v146 = 8 * v184;
      do
      {
        v147 = *(void ***)((char *)v183 + v145);
        if (v147)
        {
          if (*v147 != v147 + 2)
            free(*v147);
          MEMORY[0x2348A0E9C](v147, 0x1080C40ED926357);
        }
        v145 += 8;
      }
      while (v146 != v145);
    }
    *(_QWORD *)(v179 + 12024) = v186;
    v187 = 1;
  }
  if (v191)
  {
    sub_22EAD196C(v190[0].n128_u64[0]);
    sub_22EE472B4(v190[0].n128_u64[0], 0);
  }
LABEL_229:
  if (!v187)
  {
    if ((_DWORD)v184)
    {
      v142 = 0;
      v143 = 8 * v184;
      do
      {
        v144 = *(void ***)((char *)v183 + v142);
        if (v144)
        {
          if (*v144 != v144 + 2)
            free(*v144);
          MEMORY[0x2348A0E9C](v144, 0x1080C40ED926357);
        }
        v142 += 8;
      }
      while (v143 != v142);
    }
    *(_QWORD *)(v179 + 12024) = v186;
    v187 = 1;
  }
  if (v183 != &v185)
    free(v183);
  if ((v180 & 1) == 0)
    llvm::deallocate_buffer(v181, (void *)(16 * v182));
  sub_22EB48E64(a1);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v157);
LABEL_237:
  sub_22EE014E4(&v160);
LABEL_238:
  sub_22EE487AC(&v163);
  v125 = (llvm *)sub_22EE65FC4((uint64_t)v190);
  TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v125);
  if (TimeTraceProfilerInstance)
    llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
}

unint64_t sub_22EE46108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  _QWORD *v6;
  _QWORD *v7;

  result = sub_22EFCC008(a2);
  if (*(_QWORD *)result)
  {
    v6 = *(_QWORD **)(*(_QWORD *)result + 80);
    if (v6)
    {
      do
      {
        v7 = v6;
        result = sub_22E909EBC(a1, v6, a3);
        v6 = (_QWORD *)*v7;
      }
      while (*v7);
    }
  }
  return result;
}

uint64_t sub_22EE4616C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int32x2_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[64];
  void *v33;
  uint64_t v34;
  _BYTE v35[64];
  void *v36[2];
  _DWORD v37[17];
  char v38;
  void *v39[2];
  _DWORD v40[17];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 28) & 0x80) == 0)
  {
    v11 = a3;
    sub_22EE00E90(&v21, a1, 0, a7, 0, a3, 0, a8, 0, 0, 0);
    v14 = 0;
    if (v22)
    {
LABEL_20:
      sub_22EE014E4(&v21);
      return v14;
    }
    v39[0] = v40;
    v39[1] = (void *)0x400000000;
    v40[16] = 0;
    v41 = 0;
    sub_22E9F7044((uint64_t)v39, a4);
    if ((*(_DWORD *)(v11 + 28) & 0x7F) == 0x42)
    {
      v15 = (_BYTE *)(*(_QWORD *)(v11 + 80) + 440);
    }
    else
    {
      v16 = sub_22EFB6870(v11);
      if (!v16)
        goto LABEL_9;
      v15 = (_BYTE *)sub_22EFE9368(v16);
    }
    if ((*v15 & 4) != 0)
    {
LABEL_10:
      v36[0] = v37;
      v36[1] = (void *)0x400000000;
      v37[16] = 0;
      v38 = 0;
      sub_22E9F7044((uint64_t)v36, a4);
      v17 = *(_QWORD *)(v11 + 16);
      v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (_QWORD *)*v18;
      v19 = *(_DWORD *)(a1 + 11992);
      v23 = a1;
      v24 = a1;
      v25 = v19;
      v26 = v18;
      v27 = v36;
      v28 = 0;
      v29 = 0;
      v30 = v32;
      v31 = 0x400000000;
      v33 = v35;
      v34 = 0x400000000;
      v14 = sub_22EE439A0((unint64_t *)&v23, a2, v11, a5, *(__int128 **)a6, *(unsigned int *)(a6 + 8), 0);
      if (v33 != v35)
        free(v33);
      if (v30 != v32)
        free(v30);
      *(_DWORD *)(v24 + 11992) = v25;
      if (v36[0] != v37)
        free(v36[0]);
      if (v39[0] != v40)
        free(v39[0]);
      goto LABEL_20;
    }
LABEL_9:
    v11 = *(_QWORD *)(v11 + 80);
    goto LABEL_10;
  }
  return 0;
}

void sub_22EE46380(unint64_t a1, unsigned __int32 a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int j;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int *v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int k;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int32x2_t v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned int v133[24];
  void *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  llvm *v141;
  _QWORD *v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  _BYTE v157[64];
  _QWORD *v158;
  uint64_t v159;
  llvm *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  const char *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  __n128 v171[20];
  char v172;
  void *v173[2];
  _QWORD v174[11];

  v174[9] = *MEMORY[0x24BDAC8D0];
  v138 = a3;
  if ((*(_BYTE *)(a3 + 28) & 0x80) == 0)
  {
    v12 = sub_22EFBE2C4(a3);
    if (v12 != 2)
    {
      v13 = v12;
      v123 = a4;
      v14 = sub_22EFBD3B0(a3);
      sub_22EE007CC(a3, 0, 0, 0, (uint64_t)v173);
      if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 65 >= 2)
        v16 = 0;
      else
        v16 = a3;
      v121 = v16;
      v125 = a3;
      if (v16 && (*(_DWORD *)(v14 + 28) & 0x7F) != 0x40)
      {
        v17 = *(_QWORD *)(v14 + 16);
        v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0)
          v18 = *(_QWORD *)v18;
        if ((*(_WORD *)(v18 + 8) & 0x7Eu) - 34 <= 3)
        {
          v14 = *(_QWORD *)(v14 + 80);
          if ((!v14 || (*(_DWORD *)(v14 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v14 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
            && *(_QWORD *)(v14 + 88) >= 8uLL
            && ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(a3 + 96) & 0x600u) - 1536 > 0xFFFFFBFF
             || *(_QWORD *)(a3 + 88) <= 7uLL))
          {
            sub_22EE00E90(&v126, a1, 0, a2, 0, a3, 0, v15, 0, 0, 0);
            if (v127 | BYTE1(v127))
            {
              sub_22EE014E4((int32x2_t *)&v126);
              goto LABEL_112;
            }
            v19 = *(_QWORD *)(a1 + 88);
            llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
            v158 = &unk_24FAC2E78;
            v161 = v19;
            v162 = a3;
            v163 = 0;
            v164 = "instantiating variable initializer";
            v20 = *(_QWORD *)(a3 + 8);
            if ((v20 & 4) != 0)
              *(_QWORD *)(a3 + 8) = v20 & 0xFFFFFFFFFFFFFFF9 | 2;
            sub_22EE48830((uint64_t)v171, (_QWORD *)a1, v123);
            v139 = a1;
            v140 = 1;
            for (i = 16; i != 80; i += 16)
              *(unint64_t *)((char *)&v139 + i) = -4096;
            v149 = &v151;
            v150 = 0x100000000;
            v152 = *(_QWORD *)(a1 + 12024);
            v153 = 0;
            v154 = 0;
            *(_QWORD *)(a1 + 12024) = &v139;
            v134 = (void *)a1;
            v135 = *(_OWORD *)(a1 + 12240);
            *(_OWORD *)(a1 + 12240) = 0u;
            v136 = *(_OWORD *)(a1 + 12256);
            *(_OWORD *)(a1 + 12256) = 0u;
            v22 = *(_OWORD *)(a1 + 12272);
            *(_OWORD *)(a1 + 12272) = 0u;
            v23 = *(_QWORD *)(a3 + 16);
            v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
            v137 = v22;
            if ((v23 & 4) != 0)
              v24 = (_QWORD *)*v24;
            v25 = *(_QWORD *)(a1 + 216);
            v118 = *(_QWORD *)(a1 + 3200);
            *(_QWORD *)(a1 + 3200) = 0;
            v26 = *(_QWORD *)(a1 + 10288);
            v27 = *(_DWORD *)(a1 + 1944);
            v116 = *(_DWORD *)(a1 + 2192);
            *(_QWORD *)(a1 + 216) = v24;
            *(_QWORD *)(a1 + 10288) = 0;
            *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
            *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
            sub_22EE43198(a1, a3, v14, (uint64_t)v173);
            if (v25)
            {
              *(_QWORD *)(a1 + 216) = v25;
              *(_QWORD *)(a1 + 3200) = v118;
              *(_QWORD *)(a1 + 10288) = v26;
              *(_DWORD *)(a1 + 1944) = v27;
              *(_DWORD *)(a1 + 2192) = v116;
            }
            sub_22EE472B4((unint64_t)v134, 1);
            if (!(_BYTE)v153)
            {
              if ((_DWORD)v150)
              {
                v103 = 0;
                v104 = 8 * v150;
                do
                {
                  v105 = *(void ***)((char *)v149 + v103);
                  if (v105)
                  {
                    if (*v105 != v105 + 2)
                      free(*v105);
                    MEMORY[0x2348A0E9C](v105, 0x1080C40ED926357);
                  }
                  v103 += 8;
                }
                while (v104 != v103);
              }
              *(_QWORD *)(v139 + 12024) = v152;
              LOBYTE(v153) = 1;
            }
            if (v172)
            {
              sub_22EAD196C(v171[0].n128_i64[0]);
              sub_22EE472B4(v171[0].n128_u64[0], 0);
            }
            sub_22EE487AC(&v134);
            if (!(_BYTE)v153)
            {
              if ((_DWORD)v150)
              {
                v106 = 0;
                v107 = 8 * v150;
                do
                {
                  v108 = *(void ***)((char *)v149 + v106);
                  if (v108)
                  {
                    if (*v108 != v108 + 2)
                      free(*v108);
                    MEMORY[0x2348A0E9C](v108, 0x1080C40ED926357);
                  }
                  v106 += 8;
                }
                while (v107 != v106);
              }
              *(_QWORD *)(v139 + 12024) = v152;
              LOBYTE(v153) = 1;
            }
            if (v149 != &v151)
              free(v149);
            if ((v140 & 1) == 0)
              llvm::deallocate_buffer(v141, (void *)(16 * v142));
            sub_22EE65FC4((uint64_t)v171);
            llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)&v158);
            sub_22EE014E4((int32x2_t *)&v126);
          }
        }
      }
      v28 = *(_QWORD *)(v14 + 80);
      if (v28)
      {
        v29 = 0;
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *(_QWORD *)(v14 + 80);
        while (1)
        {
          v32 = a6;
          v33 = a1;
          v34 = v31;
          if (sub_22EFBBF74(v31, v30) == 2)
            break;
          v35 = v34;
          v36 = (uint64_t *)(v34 + 72);
          v37 = *(_BYTE *)(v34 + 72);
          a1 = v33;
          a6 = v32;
          if ((v37 & 3) != 0)
          {
            if (v29)
              goto LABEL_49;
            v29 = 1;
          }
          v31 = sub_22E3CD31C(v36, v35);
          if (v31 == v28 || !v31)
            goto LABEL_49;
        }
        v38 = v34;
        a1 = v33;
      }
      else
      {
LABEL_49:
        if ((a5 & 1) == 0)
        {
          v39 = v125;
          if (v13 == 4)
          {
            v171[0].n128_u64[0] = v125;
            v171[0].n128_u32[2] = a2;
            sub_22EB87D64((_QWORD *)(a1 + 12160), v171);
            if ((sub_22ED57F34((_QWORD *)a1, a2, v125, 0, v14, 0, 4, 0) & 1) != 0)
            {
LABEL_112:
              if (v173[0] != v174)
                free(v173[0]);
              return;
            }
            v40 = 0;
LABEL_56:
            v42 = *(_QWORD *)(a1 + 96);
            if (!v39 || (v43 = v39, (*(_DWORD *)(v39 + 28) & 0x7F) != 0x53))
            {
              v44 = *(_QWORD *)(v39 + 16);
              v45 = v44 & 0xFFFFFFFFFFFFFFF8;
              if ((v44 & 4) != 0)
                v45 = *(_QWORD *)v45;
              for (j = *(_WORD *)(v45 + 8) & 0x7F; j != 83; j = *(_WORD *)(v45 + 8) & 0x7F)
              {
                v47 = -40;
                if (j > 70)
                {
                  if (j == 71)
                  {
                    v47 = -56;
                  }
                  else if (j != 81)
                  {
                    goto LABEL_71;
                  }
                }
                else
                {
                  if (j > 0x18)
                    goto LABEL_70;
                  if (j == 16)
                    goto LABEL_64;
                  if (((1 << j) & 0x1066) != 0)
                    goto LABEL_77;
                  if (j == 24)
                  {
LABEL_64:
                    v47 = -48;
                  }
                  else
                  {
LABEL_70:
                    if (j != 70)
                    {
LABEL_71:
                      v48 = j - 52;
                      if ((j - 33) >= 5)
                        v49 = -48;
                      else
                        v49 = -64;
                      if (v48 >= 6)
                        v47 = v49;
                      else
                        v47 = -72;
                      goto LABEL_77;
                    }
                    v47 = -64;
                  }
                }
LABEL_77:
                v50 = *(_QWORD *)(v45 + v47 + 16);
                v45 = v50 & 0xFFFFFFFFFFFFFFF8;
                if ((v50 & 4) != 0)
                  v45 = *(_QWORD *)v45;
              }
              v43 = v45 - 40;
            }
            v51 = *(_QWORD *)(v39 + 80);
            if (v51)
            {
              v52 = 0;
              v53 = *(_QWORD *)(v43 + 88);
              v54 = *(_QWORD *)(v39 + 80);
              while (sub_22EFBBF74(v54, v53) != 2)
              {
                if ((*(_BYTE *)(v54 + 72) & 3) != 0)
                {
                  if (v52)
                    goto LABEL_92;
                  v52 = 1;
                }
                v55 = sub_22E3CD31C((uint64_t *)(v54 + 72), v54);
                if (v55 != v51)
                {
                  v54 = v55;
                  if (v55)
                    continue;
                }
                goto LABEL_92;
              }
              v77 = sub_22EFBC2B0(v39);
              sub_22EFBEC04(v54, v77, a2);
              goto LABEL_111;
            }
LABEL_92:
            sub_22EE00E90(&v130, a1, 0, a2, 0, v39, 0, v41, 0, 0, 0);
            if (v131 | v132)
            {
LABEL_196:
              sub_22EE014E4(&v130);
LABEL_111:
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v42 + 120))(v42, v39);
              goto LABEL_112;
            }
            v56 = *(_QWORD *)(a1 + 88);
            llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
            v134 = &unk_24FAC2E78;
            *(_QWORD *)&v136 = v56;
            *((_QWORD *)&v136 + 1) = v39;
            LODWORD(v137) = 0;
            *((_QWORD *)&v137 + 1) = "instantiating variable definition";
            sub_22EE48830((uint64_t)v171, (_QWORD *)a1, v123);
            v57 = *(_QWORD *)(v39 + 16);
            v58 = (_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8);
            if ((v57 & 4) != 0)
              v58 = (_QWORD *)*v58;
            v59 = *(_QWORD *)(a1 + 216);
            v60 = *(_QWORD *)(a1 + 3200);
            *(_QWORD *)(a1 + 3200) = 0;
            v61 = *(_QWORD *)(a1 + 10288);
            v62 = *(_DWORD *)(a1 + 1944);
            v120 = *(_DWORD *)(a1 + 2192);
            *(_QWORD *)(a1 + 216) = v58;
            *(_QWORD *)(a1 + 10288) = 0;
            *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
            *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
            v158 = (_QWORD *)a1;
            v63 = 2;
            v159 = 1;
            v64 = v40;
            do
            {
              (&v158)[v63] = (_QWORD *)-4096;
              v63 += 2;
            }
            while (v63 != 10);
            v165 = &v167;
            v166 = 0x100000000;
            v168 = *(_QWORD *)(a1 + 12024);
            v169 = 0;
            v170 = 0;
            *(_QWORD *)(a1 + 12024) = &v158;
            v126 = a1;
            v65 = *(_OWORD *)(a1 + 12240);
            *(_OWORD *)(a1 + 12240) = 0u;
            v66 = *(_OWORD *)(a1 + 12256);
            v127 = v65;
            v128 = v66;
            *(_OWORD *)(a1 + 12256) = 0u;
            v129 = *(_OWORD *)(a1 + 12272);
            *(_OWORD *)(a1 + 12272) = 0u;
            v124 = v62;
            if ((*(_DWORD *)(v40 + 28) & 0x7F) != 0x40)
            {
              v67 = *(_QWORD *)(v40 + 16);
              v68 = v67 & 0xFFFFFFFFFFFFFFF8;
              if ((v67 & 4) != 0)
                v68 = *(_QWORD *)v68;
              if ((*(_WORD *)(v68 + 8) & 0x7Eu) - 34 <= 3)
              {
                v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
                v64 = v40;
                if ((v69 & 1) == 0)
                {
                  sub_22EE43198(a1, v39, v40, (uint64_t)v173);
                  v76 = v39;
LABEL_178:
                  if (v59)
                  {
                    *(_QWORD *)(a1 + 216) = v59;
                    *(_QWORD *)(a1 + 3200) = v60;
                    *(_QWORD *)(a1 + 10288) = v61;
                    *(_DWORD *)(a1 + 1944) = v124;
                    *(_DWORD *)(a1 + 2192) = v120;
                  }
                  if (v76)
                  {
                    v100 = sub_22EFBC2B0(v39);
                    v101 = sub_22EFBE4A0(v39);
                    sub_22EFBEC04(v76, v100, v101);
                  }
                  else
                  {
                    v76 = v39;
                  }
                  sub_22EE472B4(v126, 1);
                  if (!(_BYTE)v169)
                  {
                    if ((_DWORD)v166)
                    {
                      v109 = 0;
                      v110 = 8 * v166;
                      do
                      {
                        v111 = *(void ***)((char *)v165 + v109);
                        if (v111)
                        {
                          if (*v111 != v111 + 2)
                            free(*v111);
                          MEMORY[0x2348A0E9C](v111, 0x1080C40ED926357);
                        }
                        v109 += 8;
                      }
                      while (v110 != v109);
                    }
                    v158[1503] = v168;
                    LOBYTE(v169) = 1;
                  }
                  if (v172)
                  {
                    sub_22EAD196C(v171[0].n128_i64[0]);
                    sub_22EE472B4(v171[0].n128_u64[0], 0);
                  }
                  sub_22EE487AC(&v126);
                  if (!(_BYTE)v169)
                  {
                    if ((_DWORD)v166)
                    {
                      v112 = 0;
                      v113 = 8 * v166;
                      do
                      {
                        v114 = *(void ***)((char *)v165 + v112);
                        if (v114)
                        {
                          if (*v114 != v114 + 2)
                            free(*v114);
                          MEMORY[0x2348A0E9C](v114, 0x1080C40ED926357);
                        }
                        v112 += 8;
                      }
                      while (v113 != v112);
                    }
                    v158[1503] = v168;
                    LOBYTE(v169) = 1;
                  }
                  if (v165 != &v167)
                    free(v165);
                  if ((v159 & 1) == 0)
                    llvm::deallocate_buffer(v160, (void *)(16 * v161));
                  sub_22EE65FC4((uint64_t)v171);
                  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)&v134);
                  v39 = v76;
                  goto LABEL_196;
                }
              }
            }
            if (!v121)
            {
              v81 = *(_QWORD *)(v39 + 16);
              v82 = (_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF8);
              if ((v81 & 4) != 0)
                v82 = (_QWORD *)*v82;
              v76 = sub_22EE43BF4(a1, v64, (uint64_t)v82, (uint64_t)v173);
              v138 = v76;
              goto LABEL_178;
            }
            if ((*(_DWORD *)(v39 + 28) & 0x7F) == 0x40)
            {
LABEL_104:
              v70 = v60;
              v71 = *(_QWORD *)(v64 + 56);
              v72 = (uint64_t *)(v71 & 0xFFFFFFFFFFFFFFF8);
              if ((v71 & 4) != 0)
                v72 = (uint64_t *)v72[4];
              v73 = v64;
              v74 = sub_22EFBAFDC(v64);
              v75 = (_QWORD *)sub_22EE03524(a1, v72, (uint64_t)v173, v74, *(_QWORD *)(v73 + 40), 0);
              if (v75)
              {
                *(_QWORD *)(v121 + 48) = *v75;
                *(_BYTE *)(v121 + 420) |= 8u;
                sub_22EE43198(a1, v121, v73, (uint64_t)v173);
                v76 = v39;
                v60 = v70;
                if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x40000000) != 0)
                {
                  sub_22EA1D764(a1, v121);
                  v76 = v39;
                }
              }
              else
              {
                v76 = 0;
                v60 = v70;
              }
              v138 = v76;
              goto LABEL_178;
            }
            v83 = *(_QWORD *)(v39 + 16);
            v84 = (_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF8);
            if ((v83 & 4) != 0)
            {
              if ((*(_WORD *)(*v84 + 8) & 0x7Eu) - 34 > 3 || (*(_WORD *)(v84[1] + 8) & 0x7Eu) - 34 >= 4)
                goto LABEL_104;
              v119 = v60;
              v84 = (_QWORD *)*v84;
            }
            else
            {
              if (((_WORD)v84[1] & 0x7Eu) - 34 >= 4)
                goto LABEL_104;
              v119 = v60;
            }
            v85 = *(_DWORD *)(a1 + 11992);
            v139 = a1;
            v140 = a1;
            LODWORD(v141) = v85;
            v142 = v84;
            v143 = v173;
            v144 = 0;
            v145 = 0;
            v146 = &v148;
            v147 = 0x400000000;
            v155 = v157;
            v86 = *(_QWORD *)(v121 + 112);
            v87 = v86 & 0xFFFFFFFFFFFFFFF8;
            v156 = 0x400000000;
            if ((v86 & 4) != 0 && v87)
            {
              do
              {
                v115 = *(_QWORD *)(*(_QWORD *)v87 + 112);
                v87 = v115 & 0xFFFFFFFFFFFFFFF8;
              }
              while ((v115 & 4) != 0 && v87);
            }
            v88 = sub_22EE439A0(&v139, v87, v40, v121 + 136, **(__int128 ***)(v121 + 128), *(unsigned int *)(*(_QWORD *)(v121 + 128) + 8), v121);
            v76 = v88;
            v138 = v88;
            if (v88)
            {
              v89 = *(_QWORD *)(v121 + 112);
              if ((v89 & 4) != 0)
              {
                v90 = (_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF8);
                if (v90)
                {
                  v122 = *v90 & 0xFFFFFFFFFFFFFFF8;
                  if (v122)
                  {
                    v117 = v90[1];
                    v91 = v88;
                    if ((*(_DWORD *)(v88 + 28) & 0x7F) != 0x53)
                    {
                      v92 = *(_QWORD *)(v88 + 16);
                      v93 = v92 & 0xFFFFFFFFFFFFFFF8;
                      if ((v92 & 4) != 0)
                        v93 = *(_QWORD *)v93;
                      for (k = *(_WORD *)(v93 + 8) & 0x7F; k != 83; k = *(_WORD *)(v93 + 8) & 0x7F)
                      {
                        v95 = -40;
                        if (k > 70)
                        {
                          if (k == 71)
                          {
                            v95 = -56;
                          }
                          else if (k != 81)
                          {
                            goto LABEL_157;
                          }
                        }
                        else
                        {
                          if (k > 0x18)
                            goto LABEL_156;
                          if (k == 16)
                            goto LABEL_150;
                          if (((1 << k) & 0x1066) != 0)
                            goto LABEL_163;
                          if (k == 24)
                          {
LABEL_150:
                            v95 = -48;
                          }
                          else
                          {
LABEL_156:
                            if (k != 70)
                            {
LABEL_157:
                              v96 = k - 52;
                              if ((k - 33) >= 5)
                                v97 = -48;
                              else
                                v97 = -64;
                              if (v96 >= 6)
                                v95 = v97;
                              else
                                v95 = -72;
                              goto LABEL_163;
                            }
                            v95 = -64;
                          }
                        }
LABEL_163:
                        v98 = *(_QWORD *)(v93 + v95 + 16);
                        v93 = v98 & 0xFFFFFFFFFFFFFFF8;
                        if ((v98 & 4) != 0)
                          v93 = *(_QWORD *)v93;
                      }
                      v91 = v93 - 40;
                    }
                    v99 = sub_22E3CD3D4(*(_QWORD *)(v91 + 88) + 2032, 16, 3);
                    *(_QWORD *)v99 = v122;
                    *(_QWORD *)(v99 + 8) = v117;
                    *(_QWORD *)(v76 + 112) = v99 | 4;
                  }
                }
              }
              sub_22EE43198(a1, v76, v40, (uint64_t)v173);
            }
            if (v155 != v157)
              free(v155);
            if (v146 != &v148)
              free(v146);
            *(_DWORD *)(v140 + 11992) = (_DWORD)v141;
            v60 = v119;
            goto LABEL_178;
          }
          if (v13 == 1)
          {
            if ((_DWORD)a6 && !*(_BYTE *)(*(_QWORD *)(a1 + 104) + 168))
            {
              v78 = *(_QWORD *)(v14 + 56);
              if ((v78 & 4) != 0 && (v102 = v78 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v102 + 16)))
                v79 = **(int ***)(v102 + 24);
              else
                v79 = (int *)(v14 + 64);
              v80 = sub_22F1E361C(*(_QWORD **)(a1 + 112), *v79);
              if (v80 == 3 || !v80)
              {
                sub_22E8FCA40((_QWORD *)a1, a2, 0x1BF3u, 0, (uint64_t)v171);
                sub_22E890024((uint64_t)v171, &v138);
                sub_22E903BEC((unsigned int *)v171);
                sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v14 + 24), 0x160Bu, 0, (uint64_t)v133);
                sub_22E903BEC(v133);
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
                {
                  sub_22E8FCA40((_QWORD *)a1, a2, 0x1636u, 0, (uint64_t)v171);
                  sub_22E890024((uint64_t)v171, &v138);
                  sub_22E903BEC((unsigned int *)v171);
                }
              }
            }
            goto LABEL_112;
          }
          v38 = 0;
LABEL_53:
          v40 = v38;
          if ((sub_22ED57F34((_QWORD *)a1, a2, v39, 0, v14, v38, v13, a5) & 1) != 0
            || v13 == 3 && !sub_22EFBCA2C(v39, *(_QWORD *)(a1 + 88)))
          {
            goto LABEL_112;
          }
          goto LABEL_56;
        }
        v38 = 0;
      }
      v39 = v125;
      goto LABEL_53;
    }
  }
}

uint64_t sub_22EE472B4(unint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  _DWORD *v18;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v33[2];
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  const char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = a1 + 12240;
  v5 = a1 + 12160;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  while (*(_QWORD *)(a1 + 12280))
  {
    v6 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 12248)
                                        + ((*(_QWORD *)(a1 + 12272) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * *(_QWORD *)(a1 + 12272));
    v7 = (unsigned int *)(v6 + 1);
    v8 = v4;
LABEL_7:
    v9 = *v6;
    v10 = *v7;
    v11 = vaddq_s64(*(int64x2_t *)(v8 + 32), (int64x2_t)xmmword_22F45F5B0);
    *(int64x2_t *)(v8 + 32) = v11;
    if (v11.i64[0] >= 0x200uLL)
    {
      operator delete(**(void ***)(v8 + 8));
      *(_QWORD *)(v8 + 8) += 8;
      *(_QWORD *)(v8 + 32) -= 256;
    }
    if (v9)
      v12 = (*(_DWORD *)(v9 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
    else
      v12 = 0;
    if (v12)
    {
      v17 = *(_QWORD *)(v9 + 144) & 6;
      v18 = (_DWORD *)(*(_QWORD *)(v9 + 144) & 0xFFFFFFFFFFFFFFF8);
      if (v17 != 4 || v18 == 0)
      {
        if (v17 != 2 || v18 == 0)
        {
          v21 = 0;
          goto LABEL_30;
        }
      }
      else
      {
        v18 += 4;
      }
      v21 = ((*v18 >> 1) & 3) + 1;
LABEL_30:
      if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9) + 84) & 0x10) != 0)
      {
        v22 = *(_QWORD *)(a1 + 88);
        v33[0] = a1;
        v33[1] = v9;
        v34 = v10;
        LOBYTE(v35) = v21 == 4;
        sub_22EF73E64(v22, v9, sub_22EE66D9C, (uint64_t)v33);
      }
      else
      {
        sub_22EE44C50(a1, v10, v9, 1, v21 == 4, 1);
        if (sub_22EFBF86C(v9, v33, 0))
          *(_QWORD *)(v9 + 80) &= ~0x100000000uLL;
      }
      if ((a2 & 1) == 0
        && (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x8000000000000) != 0
        && *(_DWORD *)(a1 + 8352) == 1
        && (*(_BYTE *)(v9 + 84) & 1) != 0)
      {
        v23 = *((_QWORD *)&v39 + 1);
        if ((_QWORD)v40 == *((_QWORD *)&v39 + 1))
          v24 = 0;
        else
          v24 = 32 * (v40 - *((_QWORD *)&v39 + 1)) - 1;
        v25 = *((_QWORD *)&v41 + 1);
        v26 = *((_QWORD *)&v41 + 1) + v41;
        if (v24 == *((_QWORD *)&v41 + 1) + (_QWORD)v41)
        {
          sub_22EB87F7C((uint64_t)&v39);
          v25 = *((_QWORD *)&v41 + 1);
          v23 = *((_QWORD *)&v39 + 1);
          v26 = v41 + *((_QWORD *)&v41 + 1);
        }
        v27 = *(_QWORD *)(v23 + ((v26 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v26;
        *(_QWORD *)v27 = v9;
        *(_DWORD *)(v27 + 8) = v10;
        *((_QWORD *)&v41 + 1) = v25 + 1;
      }
    }
    else if ((*(_BYTE *)(sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 80) + 72), *(_QWORD *)(v9 + 80)) + 28) & 0x80) == 0)
    {
      v13 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 80) + 72), *(_QWORD *)(v9 + 80));
      v14 = sub_22EFBE2C4(v13);
      if ((v14 - 2) >= 2
        && (v14 != 4 || v9 == sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v9 + 80) + 72), *(_QWORD *)(v9 + 80))))
      {
        v15 = *(_QWORD *)(a1 + 88);
        llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
        v33[0] = (unint64_t)&unk_24FAC2E78;
        v35 = v15;
        v36 = v9;
        v37 = 0;
        v38 = "instantiating variable definition";
        v16 = sub_22EFBC2B0(v9) == 4;
        sub_22EE46380(a1, v10, v9, 1, v16, 1);
        llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v33);
      }
    }
  }
  if ((a2 & 1) != 0)
    return sub_22E78E5D4((uint64_t)&v39);
  if (*(_QWORD *)(a1 + 12200))
  {
    v6 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 12168)
                                        + ((*(_QWORD *)(a1 + 12192) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * *(_QWORD *)(a1 + 12192));
    v7 = (unsigned int *)(v6 + 1);
    v8 = v5;
    goto LABEL_7;
  }
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x8000000000000) != 0)
  {
    v28 = *(_OWORD *)(a1 + 12160);
    v29 = v40;
    *(_OWORD *)(a1 + 12160) = v39;
    v30 = *(_OWORD *)(a1 + 12176);
    *(_OWORD *)(a1 + 12176) = v29;
    v39 = v28;
    v40 = v30;
    v31 = *(_QWORD *)(a1 + 12192);
    *(_OWORD *)(a1 + 12192) = v41;
    v41 = v31;
  }
  return sub_22E78E5D4((uint64_t)&v39);
}

