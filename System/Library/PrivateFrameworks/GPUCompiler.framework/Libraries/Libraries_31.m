uint64_t sub_22F305214(uint64_t a1)
{
  _QWORD **v2;
  _QWORD **v3;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    v3 = sub_22E8CED78(v2);
    MEMORY[0x2348A0E9C](v3, 0x1020C403A5D3213);
  }
  return a1;
}

uint64_t sub_22F305254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = *(_QWORD *)(a3 + 40);
  v6 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 7) != 0 || v6 == 0)
  {
    if ((v13 & 7) != 0)
    {
      v8 = sub_22EFC68C0(&v13);
      goto LABEL_8;
    }
  }
  else
  {
    v10 = *v6;
    if ((*v6 & 0x800000000) != 0)
    {
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 120) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120), v13 & 0xFFFFFFFFFFFFFFF8);
      v10 = *v6;
    }
    if ((v10 & 0x100000000) != 0)
      *v6 = v10 | 0x200000000;
  }
  v8 = v6[1];
LABEL_8:
  if (!v8)
    return sub_22E8CE7E8(a1, a3);
  if ((v8 & 1) == 0)
  {
    if (!a2)
    {
      sub_22E8CEA58(a1, v8);
      sub_22E8CE7E8(a1, a3);
      return sub_22E8CE7E8(a1, v8);
    }
    return sub_22E8CE7E8(a1, a3);
  }
  v11 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  if ((a2 & 1) != 0)
    v12 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 8;
  else
    v12 = *v11;
  v14 = a3;
  return sub_22F24C084(v11, v12, &v14);
}

uint64_t sub_22F30535C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v6 = a3 & 0xFFFFFFFFFFFFFFF8;
  v7 = a3 & 7;
  if ((a3 & 7) == 0 && v6)
  {
    if ((*(_BYTE *)(v6 + 4) & 8) != 0)
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 120) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120), a3 & 0xFFFFFFFFFFFFFFF8);
LABEL_5:
    v8 = *(_QWORD *)(v6 + 8);
    if (!v8)
    {
LABEL_10:
      *(_QWORD *)(v6 + 8) = a2;
      return 1;
    }
    goto LABEL_6;
  }
  if ((a3 & 7) == 0)
    goto LABEL_5;
  v8 = sub_22EFC68C0(&v27);
  if (!v8)
    goto LABEL_14;
LABEL_6:
  if ((v8 & 1) != 0)
  {
    v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(unsigned int *)(v11 + 8);
    if (!(_DWORD)v12)
    {
LABEL_24:
      if (v12 >= *(_DWORD *)(v11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v12) = *(_DWORD *)(v11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = a2;
      ++*(_DWORD *)(v11 + 8);
      return 1;
    }
    v13 = *(uint64_t **)v11;
    v14 = 8 * v12;
    while (1)
    {
      result = sub_22E8CEBF4(*v13, a2);
      if ((_DWORD)result == 2)
        break;
      if ((_DWORD)result == 1)
      {
        *v13 = a2;
        return result;
      }
      v15 = *(_QWORD *)(*v13 + 16);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
      if ((v15 & 4) != 0)
        v16 = (_QWORD *)*v16;
      if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v16) + 8) & 0x7F) != 0x53)
      {
        v28 = a2;
        sub_22F24C084((uint64_t *)v11, (uint64_t)v13, &v28);
        return 1;
      }
      ++v13;
      v14 -= 8;
      if (!v14)
      {
        LODWORD(v12) = *(_DWORD *)(v11 + 8);
        goto LABEL_24;
      }
    }
  }
  else
  {
    v9 = sub_22E8CEBF4(v8, a2);
    if (v9 != 2)
    {
      if (v9 != 1)
      {
        if (v7)
          sub_22EFC6930(&v27);
        else
          *(_QWORD *)(v6 + 8) = 0;
        v17 = sub_22E8CE95C(*(_QWORD *)(a1 + 16), a3);
        v18 = *(_QWORD *)(v8 + 16);
        v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
        if ((v18 & 4) != 0)
          v19 = (_QWORD *)*v19;
        v20 = sub_22EFCBB30((unint64_t)v19);
        v21 = *(_DWORD *)(v17 + 8);
        v22 = *(_DWORD *)(v17 + 12);
        if ((*(_WORD *)(v20 + 8) & 0x7F) == 0x53)
        {
          if (v21 >= v22)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = *(_DWORD *)(v17 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v21) = v8;
          v23 = *(_DWORD *)(v17 + 12);
          v24 = *(_DWORD *)(v17 + 8) + 1;
          *(_DWORD *)(v17 + 8) = v24;
          if (v24 >= v23)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v24 = *(_DWORD *)(v17 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v24) = a2;
        }
        else
        {
          if (v21 >= v22)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = *(_DWORD *)(v17 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v21) = a2;
          v25 = *(_DWORD *)(v17 + 12);
          v26 = *(_DWORD *)(v17 + 8) + 1;
          *(_DWORD *)(v17 + 8) = v26;
          if (v26 >= v25)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = *(_DWORD *)(v17 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v26) = v8;
        }
        ++*(_DWORD *)(v17 + 8);
        return 1;
      }
      if (!v7)
        goto LABEL_10;
LABEL_14:
      sub_22EFC6930(&v27);
      return 1;
    }
  }
  return 0;
}

double sub_22F305624(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  double result;

  a1[4] = a2;
  *a1 = &off_24FAA58B8;
  a1[1] = 0;
  a1[2] = a1 + 4;
  a1[5] = a3;
  *(_QWORD *)&result = 0x200000002;
  a1[3] = 0x200000002;
  return result;
}

uint64_t sub_22F30564C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA58B8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return j_nullsub_910_0(a1);
}

uint64_t sub_22F30568C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA58B8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return j_nullsub_910_0(a1);
}

void sub_22F3056CC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA58B8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  j_nullsub_910_0(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F305720(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 24);
  if (v4 >= *(_DWORD *)(result + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 24);
  return result;
}

uint64_t sub_22F30577C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    if (result)
      break;
    if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 24))
      return 0;
  }
  return result;
}

uint64_t sub_22F3057E0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F30583C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2);
    if (result)
      break;
    if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 24))
      return 0;
  }
  return result;
}

uint64_t sub_22F3058A0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v2 = 0;
  LODWORD(v3) = 0;
  do
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) + v3;
    ++v2;
  }
  while (v2 < *(unsigned int *)(a1 + 24));
  return v3;
}

uint64_t sub_22F305908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2);
    if (result)
      break;
    if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 24))
      return 0;
  }
  return result;
}

uint64_t sub_22F30596C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a2);
    if (result)
      break;
    if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 24))
      return 0;
  }
  return result;
}

uint64_t sub_22F3059D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = 8 * v2;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 48))(*v4, a2);
    if (result)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t sub_22F305A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 2;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = 8 * v2;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 104))(*v4, a2);
    if ((result & 0xFFFFFFFD) != 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 2;
  }
  return result;
}

uint64_t sub_22F305A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 24))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7);
      v6 |= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a2, a3);
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 24));
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  return v6 & 1;
}

uint64_t sub_22F305B0C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F305B68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(result + 24))
  {
    v9 = result;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v10);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 112))(v11, a2, a3, a4, a5);
      ++v10;
    }
    while (v10 < *(unsigned int *)(v9 + 24));
  }
  return result;
}

uint64_t sub_22F305BE4(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(result + 24))
  {
    v8 = result;
    v9 = 0;
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * v9);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 120))(v11, v10, a3, a4, a5);
      ++v9;
    }
    while (v9 < *(unsigned int *)(v8 + 24));
  }
  return result;
}

uint64_t sub_22F305C60(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F305CBC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F305D18(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 24))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t sub_22F305D64(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 24))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t sub_22F305DB0(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 24))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t sub_22F305DFC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 176))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F305E58(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 24))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t sub_22F305EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
    if (result)
      break;
    if (++v4 >= (unint64_t)*(unsigned int *)(a1 + 24))
      return 0;
  }
  return result;
}

uint64_t sub_22F305F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t result;

  if (!*(_DWORD *)(a1 + 24))
    return 0;
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v14);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 192))(v15, a2, a3, a4, a5, a6, a7);
    if ((_DWORD)result)
      break;
    ++v14;
  }
  while (v14 < *(unsigned int *)(a1 + 24));
  return result;
}

uint64_t sub_22F305FA8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 200))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306004(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 216))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306060(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(result + 24))
  {
    v1 = result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 224))(v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 24));
  }
  return result;
}

uint64_t sub_22F3060AC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 232))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306108(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 240))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306164(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 248))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F3061C0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 256))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F30621C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 16);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 264))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

BOOL sub_22F30626C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 24))
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 272))(v7, a2, a3);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 24));
  }
  return *(_DWORD *)(a2 + 16) != 0;
}

uint64_t sub_22F3062DC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 280))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306338(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 288))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306394(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 296))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F3063F0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 304))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F30644C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 360))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F3064A8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 312))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306504(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 320))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306560(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 328))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F3065BC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 336))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306618(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 344))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

uint64_t sub_22F306674(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(result + 24))
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 352))(v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 24));
  }
  return result;
}

BOOL sub_22F3066D0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v3 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v3)
    return 0;
  v6 = a2;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 16) + 376))(**(_QWORD **)(a1 + 16), a2) & 1) != 0)
    return 1;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v3 == v8)
      break;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 376))(v10, v6, a3);
    v8 = v9 + 1;
  }
  while (!v11);
  return v9 < v3;
}

uint64_t sub_22F306774()
{
  return 0;
}

_QWORD *sub_22F30677C(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = a1 + 4;
  a1[10] = 0;
  a1[3] = 0x400000000;
  a1[8] = a1 + 10;
  a1[9] = 0;
  a1[11] = 1;
  a1[12] = a1 + 14;
  a1[13] = 0xE00000000;
  sub_22E8FB224((uint64_t)(a1 + 12), 0xEuLL);
  return a1;
}

uint64_t sub_22F3067E4(uint64_t a1)
{
  sub_22E8FB19C((char **)(a1 + 96));
  return sub_22E3B4EF4(a1);
}

_UNKNOWN **sub_22F306810()
{
  return off_253E4AC10;
}

uint64_t sub_22F306820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a2, a1, a3);
}

BOOL sub_22F306838(uint64_t a1)
{
  return (~*(_DWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0xF00000) == 0;
}

void sub_22F306850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v6 = *(unsigned __int16 *)(a1 + 48);
  if (v6 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned __int16 *)(a1 + 48);
  }
  v7 = 0;
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 80 + 8 * v8);
      if (v7 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v11;
      }
      v12[v7] = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v7 = ++v11;
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a1 + 48));
  }
  v10 = sub_22F37DBD4(*(_QWORD *)(a2 + 88), v12, v7, (_OWORD *)a1);
  sub_22EFCA95C(a3, v10);
}

uint64_t sub_22F306998()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_22F3069A0()
{
  return 1;
}

void sub_22F3069AC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3069C0()
{
  return 0;
}

_QWORD *sub_22F3069C8()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = result;
  result[1] = result;
  result[2] = 0;
  return result;
}

uint64_t *sub_22F3069F8(uint64_t *result)
{
  if (result)
  {
    sub_22F244CC4(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F306A34(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "structs, variables, functions, and namespaces";
  return a1;
}

uint64_t sub_22F306B18(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "non-static data members and global variables";
  return a1;
}

uint64_t sub_22F306BFC(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions and global variables";
  return a1;
}

uint64_t sub_22F306CE0(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "variables, functions, structs, unions, classes, non-static data members, and typedefs";
  return a1;
}

uint64_t sub_22F306DC4(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, variables, classes, and Objective-C interfaces";
  return a1;
}

uint64_t sub_22F306EA8(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, Objective-C methods, and Objective-C properties";
  return a1;
}

uint64_t sub_22F306F8C(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, Objective-C methods, and global variables";
  return a1;
}

uint64_t sub_22F307070(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "Objective-C methods, blocks, and non-K&R-style functions";
  return a1;
}

uint64_t sub_22F307154(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "Objective-C methods and non-K&R-style functions";
  return a1;
}

uint64_t sub_22F307238(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "parameters and implicit object parameters";
  return a1;
}

uint64_t sub_22F30731C(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, Objective-C methods, and blocks";
  return a1;
}

uint64_t sub_22F307400(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "parameters, non-static data members, and global builtin variables";
  return a1;
}

uint64_t sub_22F3074E4(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "variables, enums, typedefs, and non-static data members";
  return a1;
}

uint64_t sub_22F3075C8(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "typedefs, functions, function pointers, Objective-C methods, and variables";
  return a1;
}

uint64_t sub_22F3076AC(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, methods, and parameters";
  return a1;
}

uint64_t sub_22F307790(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "non-static member functions";
  return a1;
}

uint64_t sub_22F307874(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "Objective-C implementation declarations, Objective-C interfaces, and Objective-C containers";
  return a1;
}

uint64_t sub_22F307958(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "Objective-C interfaces and Objective-C protocols";
  return a1;
}

uint64_t sub_22F307A3C(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "variables with non-local storage, functions, and Objective-C methods";
  return a1;
}

uint64_t sub_22F307B20(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, global variables, Objective-C methods, and Objective-C properties";
  return a1;
}

uint64_t sub_22F307C04(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "functions, Objective-C methods, Objective-C interfaces, and Objective-C properties";
  return a1;
}

uint64_t sub_22F307CE8(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "variables, non-static data members, types, enums, enumerators, labels, non-static data m"
                                "embers, Objective-C methods, functions, and function pointers";
  return a1;
}

uint64_t sub_22F307DCC(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "Objective-C methods, enums, structs, unions, classes, functions, and function pointers";
  return a1;
}

llvm::raw_ostream *sub_22F307EB0(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22F307ED8((uint64_t)a1, v2);
}

llvm::raw_ostream *sub_22F307ED8(uint64_t a1, llvm::raw_ostream *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *result;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD v20[2];
  const char *v21;
  int v22;
  const char *v23;
  int v24;
  const char *v25;
  int v26;
  const char *v27;
  int v28;
  const char *v29;
  int v30;
  const char *v31;
  int v32;
  const char *v33;
  int v34;
  const char *v35;
  int v36;
  const char *v37;
  int v38;
  const char *v39;
  int v40;
  const char *v41;
  int v42;
  const char *v43;
  int v44;
  const char *v45;
  int v46;
  const char *v47;
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  int v52;
  const char *v53;
  int v54;
  const char *v55;
  int v56;
  const char *v57;
  int v58;
  const char *v59;
  int v60;
  const char *v61;
  int v62;
  const char *v63;
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  int v68;
  const char *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
    sub_22E47DAC0(a2, "Flags: ");
  v5 = 0;
  v20[0] = 1;
  v21 = "FnScope";
  v22 = 2;
  v23 = "BreakScope";
  v24 = 4;
  v25 = "ContinueScope";
  v26 = 8;
  v27 = "DeclScope";
  v28 = 16;
  v29 = "ControlScope";
  v30 = 32;
  v31 = "ClassScope";
  v32 = 64;
  v33 = "BlockScope";
  v34 = 128;
  v35 = "TemplateParamScope";
  v36 = 256;
  v37 = "FunctionPrototypeScope";
  v38 = 512;
  v39 = "FunctionDeclarationScope";
  v40 = 1024;
  v41 = "AtCatchScope";
  v42 = 2048;
  v43 = "ObjCMethodScope";
  v44 = 4096;
  v45 = "SwitchScope";
  v46 = 0x2000;
  v47 = "TryScope";
  v48 = 0x4000;
  v49 = "FnTryCatchScope";
  v50 = 0x8000;
  v51 = "OpenMPDirectiveScope";
  v52 = 0x10000;
  v53 = "OpenMPLoopDirectiveScope";
  v54 = 0x20000;
  v55 = "OpenMPSimdDirectiveScope";
  v56 = 0x40000;
  v57 = "EnumScope";
  v58 = 0x80000;
  v59 = "SEHTryScope";
  v60 = 0x100000;
  v61 = "SEHExceptScope";
  v62 = 0x200000;
  v63 = "SEHFilterScope";
  v64 = 0x400000;
  v65 = "CompoundStmtScope";
  v66 = 0x800000;
  v67 = "ClassInheritanceScope";
  v68 = 0x1000000;
  v69 = "CatchScope";
  v6 = v4;
  do
  {
    v7 = v20[v5];
    if ((v7 & v6) != 0)
    {
      sub_22E47DAC0(a2, *(char **)&v20[v5 + 2]);
      v6 &= ~v7;
      if (v6)
        sub_22E47DAC0(a2, " | ");
    }
    v5 += 4;
  }
  while (v5 != 100);
  if (v4)
  {
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      *v8 = 10;
    }
  }
  if (*(_QWORD *)a1)
  {
    sub_22E47DAC0(a2, "Parent: (clang::Scope*)");
    v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v10 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
    {
      llvm::raw_ostream::write(v9);
    }
    else
    {
      *((_QWORD *)v9 + 4) = v10 + 1;
      *v10 = 10;
    }
  }
  sub_22E47DAC0(a2, "Depth: ");
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v12 + 1;
    *v12 = 10;
  }
  sub_22E47DAC0(a2, "MSLastManglingNumber: ");
  v13 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 10;
  }
  sub_22E47DAC0(a2, "MSCurManglingNumber: ");
  result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v16 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v16 >= *((_QWORD *)result + 3))
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  }
  else
  {
    *((_QWORD *)result + 4) = v16 + 1;
    *v16 = 10;
  }
  if (*(_QWORD *)(a1 + 360))
  {
    sub_22E47DAC0(a2, "Entity : (clang::DeclContext*)");
    result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v17 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v17 >= *((_QWORD *)result + 3))
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
    }
    else
    {
      *((_QWORD *)result + 4) = v17 + 1;
      *v17 = 10;
    }
  }
  v18 = *(_QWORD *)(a1 + 416);
  if ((v18 & 4) != 0)
    return sub_22E47DAC0(a2, "NRVO not allowed\n");
  if (v18 >= 8)
  {
    sub_22E47DAC0(a2, "NRVO candidate : (clang::VarDecl*)");
    result = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v19 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v19 >= *((_QWORD *)result + 3))
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
    }
    else
    {
      *((_QWORD *)result + 4) = v19 + 1;
      *v19 = 10;
    }
  }
  return result;
}

unint64_t *sub_22F308404(unint64_t *a1, uint64_t a2)
{
  return sub_22E8FBE48(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
}

_QWORD *sub_22F308414(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  *result = 4;
  result[1] = v2;
  return result;
}

unint64_t *sub_22F308424(unint64_t *a1, uint64_t a2)
{
  *a1 = sub_22E8FBD50(*(unsigned __int8 **)(a2 + 24));
  a1[1] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_22F30845C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned __int8 *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;

  v4 = (_DWORD *)(a1 + 704);
  if (*(unsigned __int8 *)(a2 + 26) << 16 == 0x10000)
  {
    v5 = *(unsigned __int8 **)(a2 + 40);
    v10 = 4;
    v11 = a3;
    if (v5)
      v10 = sub_22E8FBD50(v5);
  }
  else
  {
    v10 = 4;
    v11 = a3;
  }
  result = (uint64_t)sub_22F308614(v4, &v10);
  v7 = result;
  v8 = *(unsigned __int16 *)(a2 + 24);
  v9 = *(_DWORD *)(result + 24);
  if (v9 >= *(_DWORD *)(result + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v7 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v9) = a2 & 0xFFFFFFFFFFFFFFFDLL | (2 * (v8 == 0));
  ++*(_DWORD *)(v7 + 24);
  return result;
}

uint64_t sub_22F30851C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F308688(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + (v5 << 6);
}

uint64_t sub_22F308578(uint64_t *a1)
{
  char v1;
  uint64_t result;
  uint64_t v4;

  v1 = *((_BYTE *)a1 + 24);
  if ((v1 & 4) != 0)
    return 0;
  result = 0;
  if ((v1 & 8) == 0 && (v1 & 3) != 3)
  {
    v4 = *a1;
    if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x40)
      return 0;
    return *(_BYTE *)(v4 + 98) & 1;
  }
  return result;
}

void sub_22F3085C8(uint64_t a1)
{
  sub_22F2F4378(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F3085F0(uint64_t a1)
{
  sub_22F2F4378(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F308614(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F308688((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F308780(a1, (uint64_t)a2, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = v5 + 4;
    v5[3] = 0x400000000;
  }
  return v5;
}

uint64_t sub_22F308688(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  int v21;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = a2[1];
  v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 9) ^ *a2) << 32))
     + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v4 - 1;
  v11 = (v4 - 1) & v9;
  v12 = (_QWORD *)(v3 + (v11 << 6));
  v13 = *v12;
  v14 = v12[1];
  if (*a2 == *v12 && v5 == v14)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 || v14)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == 0;
      if (v19 && v13 == 4)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v3 + (v11 << 6));
      v13 = *v12;
      v14 = v12[1];
      if (*a2 == *v12 && v5 == v14)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a3 = v12;
  return result;
}

_QWORD *sub_22F308780(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  BOOL v8;
  _QWORD *v10;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E8FC56C((uint64_t)a1, v7);
  v10 = 0;
  sub_22F308688((uint64_t)a1, a3, &v10);
  a4 = v10;
LABEL_6:
  *a1 += 2;
  if (*a4)
    v8 = 0;
  else
    v8 = a4[1] == 0;
  if (!v8)
    --a1[1];
  return a4;
}

uint64_t sub_22F308840(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8[24];
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v6 = sub_22E8FC868(a1);
  if (!v6 && !*(_BYTE *)(a1 + 8888))
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1A5Eu, 0, (uint64_t)v8);
    sub_22F2F2210((uint64_t)v8, (uint64_t)v9);
    sub_22E903BEC(v8);
    *(_BYTE *)(a1 + 8888) = 1;
  }
  return v6;
}

uint64_t sub_22F3088CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 3344) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v5 = sub_22E3CD31C((uint64_t *)(v4 + 72), v4);
  if (v5)
    v6 = v5 + 40;
  else
    v6 = 0;
  return sub_22F31D050(a1, a2, v6);
}

void sub_22F308918(uint64_t a1, int *a2, int *a3, __int16 *a4, int *a5)
{
  unsigned int v6;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    sub_22F309968(a1, a2, a3, a4, a5);
  }
  else
  {
    sub_22E907C38(*(_QWORD *)a1 + 576 * v6, *a2, *a3, *a4, 0, *a5);
    ++*(_DWORD *)(a1 + 8);
  }
}

unsigned int *sub_22F308988(unsigned int *result, int a2)
{
  _BYTE *v2;
  unsigned int v3[24];

  v2 = result + 2210;
  if (!*((_BYTE *)result + 8840))
  {
    sub_22E8FCA40(result, a2, 0x90u, 0, (uint64_t)v3);
    result = sub_22E903BEC(v3);
    *v2 = 1;
  }
  return result;
}

BOOL sub_22F3089DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 337)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22F308A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v6 = a1;
    if (*(_BYTE *)(a1 + 16))
    {
      sub_22F305720(v3, a2);
    }
    else
    {
      v4 = (_QWORD *)operator new();
      sub_22F305624(v4, *(_QWORD *)(v6 + 8), a2);
      *(_QWORD *)(v6 + 8) = v5;
      *(_BYTE *)(v6 + 16) = 1;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
}

llvm::raw_ostream *sub_22F308AC0(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *v4;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = sub_22E47DAC0(v2, "\n*** Semantic Analysis Stats:\n");
  llvm::errs(v3);
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v4, " SFINAE diagnostics trapped.\n");
  sub_22E9006C4(a1 + 8360);
  return sub_22F2F1BB4((llvm *)(a1 + 12064));
}

uint64_t sub_22F308B18(uint64_t a1, int *a2, const void *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  int v11;
  unsigned __int16 *v12;
  size_t v13;
  void *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if ((v5 & 0x80000000) == 0)
    return 0;
  v11 = sub_22F1E22F0(*(_QWORD **)(a1 + 112), v5);
  v14 = v16;
  v15 = xmmword_22F44E350;
  v12 = sub_22F410A14(v11, (uint64_t *)&v14, *(_QWORD **)(*(_QWORD *)(a1 + 80) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 80) + 56), 0);
  if (v13 == a4 && (!v13 || !memcmp(v12, a3, v13)))
  {
    *a2 = v11;
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if (v14 != v16)
    free(v14);
  return v6;
}

BOOL sub_22F308C14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 172)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

_QWORD *sub_22F308C74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11[24];

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 312))(v2, a1 + 2552);
  v3 = *(unsigned int *)(a1 + 2600);
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)(a1 + 2592);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      if ((sub_22EFC9194(*v5) & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v7 + 24), 0x1BDDu, 0, (uint64_t)v11);
        v10 = (*(_DWORD *)(v7 + 28) & 0x7F) == 40;
        v8 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
        v9 = *(_QWORD *)(v7 + 40);
        sub_22E894538(v8, &v9);
        sub_22E903BEC(v11);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = sub_22F309F34((_QWORD *)(a1 + 2552));
  *(_DWORD *)(a1 + 2600) = 0;
  return result;
}

void sub_22F308D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = *(_QWORD *)(v1 + 20);
  if ((v2 & 0x800000000000) != 0 && (*(_DWORD *)(v1 + 240) & 0xE0) == 0x60)
  {
    sub_22EC733F8(a1);
  }
  else if ((v2 & 0x400000000000) != 0 && ((*(_DWORD *)(v1 + 240) >> 5) & 3 | 4) == 4)
  {
    v4 = sub_22E49F3DC(*(_QWORD **)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 344));
    if (v4)
      v5 = *v4 & 0x7FFFFFFF;
    else
      v5 = 0;
    sub_22F33A83C(a1, v5);
    *(_BYTE *)(*(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992) - 38) = 1;
  }
}

void sub_22F308DE8(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 10680);
  if (v2 && v2 != *(_DWORD *)(a1 + 11960))
  {
    sub_22EE01684(a1);
    *(_DWORD *)(a1 + 11960) = *(_DWORD *)(a1 + 10680);
  }
  if (*(_QWORD *)(a1 + 1680))
    sub_22E9105AC(a1);
}

char *sub_22F308E44(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4;
  char *result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_22E9093B4((void **)a1, a2, a3);
  }
  else
  {
    *(_DWORD *)v4 = a2;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 16);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    result = (char *)(v4 + 32);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_22F308E9C(uint64_t a1, int a2, int a3, int a4, uint64_t a5, _QWORD *a6)
{
  return sub_22E903A04(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_22F308EA4@<X0>(_QWORD *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v5;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a4;
  if (!a4)
  {
    v10 = sub_22E903070((uint64_t)a1, 0);
    v11 = (_BYTE *)(v10 - 72);
    if (!v10)
      v11 = 0;
    if ((*(_WORD *)(v10 + 8) & 0x7Eu) - 52 >= 6)
      v5 = 0;
    else
      v5 = v11;
  }
  v12 = a1[9];
  v13 = *(_QWORD *)(v12 + 72);
  if ((_DWORD)v13)
  {
    if ((v13 & 0x800000000) != 0)
      return sub_22F33BCB4(a1, a2, a3, v5, a5);
    else
      return sub_22F33BD4C(a1, a2, a3, v5, a5);
  }
  else if ((*(_BYTE *)(v12 + 68) & 0x20) != 0)
  {
    if ((*(_WORD *)(v12 + 96) & 0x80) != 0)
      return sub_22F31C558((uint64_t)a1, a2, a3, a5);
    else
      return sub_22F31C65C((uint64_t)a1, a2, a3, a5);
  }
  else if ((*(_BYTE *)(v12 + 104) & 4) != 0)
  {
    return sub_22ED55938(a1, a2, a3, a5);
  }
  else
  {
    return sub_22E903A04(a5, 1, a2, a3, (uint64_t)v5, a1);
  }
}

uint64_t sub_22F308FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;

  v6 = operator new();
  result = sub_22E90755C(v6, *(_QWORD *)(a1 + 104));
  *(_DWORD *)(result + 1224) = 3;
  *(_DWORD *)(result + 1256) = 0;
  *(_OWORD *)(result + 1232) = 0u;
  *(_DWORD *)(result + 1248) = 0;
  *(_QWORD *)(result + 1264) = result + 1280;
  *(_QWORD *)(result + 1272) = 0x400000000;
  *(_BYTE *)(result + 1408) = 0;
  *(_QWORD *)(result + 1416) = 0;
  *(_QWORD *)result = &unk_24FAB6988;
  *(_QWORD *)(result + 1424) = a3;
  *(_QWORD *)(result + 1432) = a2;
  *(_QWORD *)(result + 1440) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFFFFF8 | 1;
  v8 = *(_DWORD *)(a1 + 1904);
  if (v8 >= *(_DWORD *)(a1 + 1908))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 1904);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v8) = v6;
  ++*(_DWORD *)(a1 + 1904);
  return result;
}

uint64_t sub_22F3090C8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = operator new();
  sub_22F309534(v2, *(_QWORD *)(a1 + 104));
  v3 = *(_DWORD *)(a1 + 1904);
  if (v3 >= *(_DWORD *)(a1 + 1908))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a1 + 1904);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v3) = v2;
  ++*(_DWORD *)(a1 + 1904);
  return v2;
}

uint64_t sub_22F30914C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 1904);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v1 - 8);
  v3 = (*(_DWORD *)(v2 + 8) & 7) == 1 ? v2 : 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1424);
    if (v4)
    {
      if (!sub_22EFCBE78(v4 + 40, *(_QWORD *)(a1 + 216)))
        return 0;
    }
  }
  return v3;
}

uint64_t sub_22F3091B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v1 = 8 * *(unsigned int *)(a1 + 1904);
  do
  {
    if (!v1)
      return 0;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) - 8 + v1);
    v1 -= 8;
    if (v3)
      v4 = (*(_DWORD *)(v3 + 8) & 7) == 2;
    else
      v4 = 0;
  }
  while (!v4);
  v6 = v3;
  v5 = *(_QWORD *)(v3 + 1480);
  if (v5 && !sub_22EFCBE78(v5 + 64, *(_QWORD *)(a1 + 216)))
    return 0;
  return v6;
}

uint64_t sub_22F309224(uint64_t a1)
{
  uint64_t result;

  result = sub_22E904A34(a1, 0);
  if (result && !*(_DWORD *)(result + 1440) && !*(_QWORD *)(result + 1584))
    return 0;
  return result;
}

uint64_t sub_22F309270(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 12896);
  if (!result)
  {
    result = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "super", 5uLL);
    *(_QWORD *)(a1 + 12896) = result;
  }
  return result;
}

uint64_t sub_22F3092B0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22E906204(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t *sub_22F3092FC(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (uint64_t *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sub_22F309394(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    sub_22E906278((uint64_t *)(a1 + 24));
    operator delete(*v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F3093E8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22E9062E4(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

_QWORD *sub_22F309434(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F285FC0(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

unsigned int *sub_22F3094A0(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];

  sub_22F308EA4(a2, a3, *(_DWORD *)(a4 + 16), a5, (uint64_t)v10);
  v7 = sub_22E903820((uint64_t)v10, (unsigned __int8 **)a4);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a1 = *(_OWORD *)v7;
  *(_OWORD *)(a1 + 9) = v8;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a1 + 32, v7 + 32);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

double sub_22F309534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = sub_22E90755C(a1, a2);
  *(_DWORD *)(v2 + 1224) = 0;
  *(_DWORD *)(v2 + 1256) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 1232) = 0u;
  *(_DWORD *)(v2 + 1248) = 0;
  *(_QWORD *)(v2 + 1264) = v2 + 1280;
  *(_QWORD *)(v2 + 1272) = 0x400000000;
  *(_BYTE *)(v2 + 1408) = 0;
  *(_OWORD *)(v2 + 1416) = 0u;
  *(_QWORD *)(v2 + 1432) = v2 + 1448;
  *(_QWORD *)(v2 + 1440) = 0x400000000;
  *(_QWORD *)v2 = &unk_24FAA5878;
  *(_OWORD *)(v2 + 1480) = 0u;
  *(_OWORD *)(v2 + 1496) = 0u;
  *(_QWORD *)(v2 + 1509) = 0;
  *(_QWORD *)(v2 + 1520) = v2 + 1536;
  *(_QWORD *)(v2 + 1528) = 0x400000000;
  *(_OWORD *)(v2 + 1568) = 0u;
  *(_QWORD *)(v2 + 1584) = 0;
  *(_QWORD *)(v2 + 1592) = v2 + 1608;
  *(_QWORD *)(v2 + 1600) = 0x400000000;
  *(_QWORD *)(v2 + 1640) = v2 + 1672;
  *(_QWORD *)(v2 + 1648) = v2 + 1672;
  *(_QWORD *)(v2 + 1656) = 8;
  *(_DWORD *)(v2 + 1664) = 0;
  *(_DWORD *)(v2 + 1752) = 0;
  *(_OWORD *)(v2 + 1736) = 0u;
  *(_QWORD *)(v2 + 1760) = v2 + 1776;
  *(_QWORD *)(v2 + 1768) = 0x400000000;
  *(_DWORD *)(v2 + 1840) = 0;
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v2 + 8) & 0xFFFFFFF8 | 2;
  return result;
}

void **sub_22F30960C(void **result)
{
  void **v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void **v5;
  void **v6;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = result;
    v3 = (char *)(v1 - 16);
    v4 = 144 * v2;
    do
    {
      sub_22F2BF8FC((char **)&v3[v4]);
      v4 -= 144;
    }
    while (v4);
    result = v6;
    v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

void **sub_22F309684(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 56 * v2;
    do
    {
      v4 = *(char **)&v6[v3 - 48];
      if (&v6[v3 - 32] != v4)
        free(v4);
      v3 -= 56;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

char **sub_22F30970C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 576 * v3;
    v5 = v2 - 576;
    do
    {
      sub_22E907910(&v5[v4]);
      v4 -= 576;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F309770(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    v3 = *(_QWORD *)result + 8;
    do
    {
      if ((*(_QWORD *)(v3 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000 && *(_DWORD *)(v3 + 8) >= 0x41u)
      {
        result = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
      }
      v3 += 24;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

void **sub_22F3097EC(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;
  char *v6;
  void **v7;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = (char *)*result;
    v7 = result;
    v3 = 56 * v2;
    do
    {
      v4 = *(void **)&v6[v3 - 32];
      if (v4)
      {
        *(_QWORD *)&v6[v3 - 24] = v4;
        operator delete(v4);
      }
      v3 -= 56;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

void sub_22F309870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_22E3B4AB8(v3 + 8, *(_QWORD **)(v3 + 16));
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void **sub_22F3098E0(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  char *v5;
  void **v6;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v5 = (char *)*result;
    v6 = result;
    v3 = 56 * v2;
    do
    {
      llvm::deallocate_buffer(*(llvm **)&v5[v3 - 56], (void *)(16 * *(unsigned int *)&v5[v3 - 40]));
      v3 -= 56;
    }
    while (v3);
    result = v6;
    v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    v4 = result;
    free(v1);
    return v4;
  }
  return result;
}

uint64_t sub_22F309968(uint64_t a1, int *a2, int *a3, __int16 *a4, int *a5)
{
  uint64_t v10;
  unsigned int v11;

  v10 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E907C38(v10 + 576 * *(unsigned int *)(a1 + 8), *a2, *a3, *a4, 0, *a5);
  sub_22E907A34(a1, v10);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v10;
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = 0;
  return v10 + 576 * v11 - 576;
}

uint64_t sub_22F309A2C(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_22F309B60(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAB69E0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return nullsub_910(a1);
}

void sub_22F309BA0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAB69E0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  nullsub_910(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F309BF8(uint64_t a1, unsigned int *a2)
{
  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 24) = xmmword_22F463B20;
  *(_OWORD *)(a1 + 8) = xmmword_22F463B20;
  sub_22F309C68((unsigned int *)a1, a2);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x100000000;
  if (a2[12])
    sub_22F2BBD68(a1 + 40, (uint64_t)(a2 + 10));
  return a1;
}

unsigned int *sub_22F309C68(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) == 0)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v5;
      LODWORD(v5) = result[4];
      result[4] = a2[4];
      a2[4] = v5;
      return result;
    }
    v4 = *result;
    v6 = result;
    result = a2;
    goto LABEL_7;
  }
  if ((v4 & 1) == 0)
  {
    v6 = a2;
LABEL_7:
    v15 = *(_OWORD *)(v6 + 2);
    *v6 = v4 | 1;
    for (i = 2; i != 10; i += 4)
      *(_OWORD *)&v6[i] = *(_OWORD *)&result[i];
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v15;
    return result;
  }
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = v8;
    v11 = (uint64_t)&result[4 * v9 + 2];
    v12 = (uint64_t)&a2[4 * v9 + 2];
    if (*(_QWORD *)v11 == -4096
      || *(_QWORD *)v11 == -8192
      || *(_QWORD *)v12 == -4096
      || *(_QWORD *)v12 == -8192)
    {
      v16 = *(_OWORD *)v11;
      v14 = *(_DWORD *)(v12 + 8);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_DWORD *)(v11 + 8) = v14;
      *(_QWORD *)v12 = v16;
      *(_DWORD *)(v12 + 8) = DWORD2(v16);
    }
    else
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
    }
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  return result;
}

uint64_t sub_22F309DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v15 = 0;
  result = sub_22F24BEB4(a1, (_QWORD *)a2, &v15);
  v7 = v15;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 2;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 16 * v9;
  }
  else
  {
    result = (uint64_t)sub_22F309E78((_DWORD *)a1, a2, (_QWORD *)a2, v15);
    v7 = (_QWORD *)result;
    v12 = *(_QWORD *)a2;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)result = v12;
    v13 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v14 = 2;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(unsigned int *)(a1 + 16);
    }
    v11 = v13 + 16 * v14;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

_QWORD *sub_22F309E78(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 2;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E9080D4((uint64_t)a1, v7);
  v9 = 0;
  sub_22F24BEB4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

_QWORD *sub_22F309F34(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 5;
      goto LABEL_9;
    }
    v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
      do
LABEL_9:
        *v3++ = -4096;
      while (v3 != v4);
      v5 = *(_DWORD *)result & 1;
      goto LABEL_11;
    }
    return sub_22F309FB0(result);
  }
  return result;
}

_QWORD *sub_22F309FB0(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 5;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22E906184(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(8 * v8));
    return sub_22E906184(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

uint64_t sub_22F30A07C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11[25];
  int v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v14 = a2;
  v12 = a4;
  if (a3)
  {
    v5 = *(_DWORD *)(a3 + 28);
    if (a4 == 3 || ((v5 >> 13) & 3) == a4)
    {
      result = 0;
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xBE0u, 0, (uint64_t)v11);
      v8 = sub_22E890024((uint64_t)v11, &v14);
      sub_22F30A170(v8, &v12);
      sub_22E903BEC(v11);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x176Eu, 0, (uint64_t)v11);
      v9 = sub_22E890024((uint64_t)v11, &v13);
      v10 = (*(_DWORD *)(v13 + 28) >> 13) & 3;
      sub_22F30A170(v9, &v10);
      sub_22E903BEC(v11);
      a2 = v14;
      v5 = v12 << 13;
      result = 1;
    }
  }
  else
  {
    result = 0;
    v5 = a4 << 13;
  }
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 28) & 0xFFFF9FFF | (((v5 >> 13) & 3) << 13);
  return result;
}

uint64_t sub_22F30A170(uint64_t a1, int *a2)
{
  unsigned __int8 **v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (unsigned __int8 **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (unsigned __int8 **)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  sub_22F3B3920(v4, *a2);
  return a1;
}

BOOL sub_22F30A204(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 274)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unsigned int *sub_22F30A264(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int *v7;
  _BYTE v8[96];
  _BYTE v9[96];

  switch(a2)
  {
    case 0:
    case 3:
      v3 = 0;
      v4 = 3;
      goto LABEL_3;
    case 1:
      v4 = 3;
      v3 = 256;
      goto LABEL_3;
    case 2:
      v4 = 3;
      v3 = 512;
      v5 = 0x10000;
      return (unsigned int *)sub_22E90DE60(a1 + 584, a3, v4, 0, 0, v3 | v5 | (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 192) >> 9) & 0x1000000);
    case 4:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 288) & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)a1, a3, 0x11C0u, 0, (uint64_t)v9);
        v7 = (unsigned int *)v9;
        return sub_22E903BEC(v7);
      }
      v4 = 3;
      v3 = 768;
      goto LABEL_3;
    case 5:
      if (*(_DWORD *)(a1 + 592))
      {
        v3 = 0;
        v4 = 4;
        goto LABEL_3;
      }
      if (*(_BYTE *)(a1 + 669) || *(_BYTE *)(a1 + 668))
      {
LABEL_15:
        v3 = 0;
        v4 = 0;
LABEL_3:
        v5 = 16711680;
        return (unsigned int *)sub_22E90DE60(a1 + 584, a3, v4, 0, 0, v3 | v5 | (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 192) >> 9) & 0x1000000);
      }
      sub_22E8FCA40((_QWORD *)a1, a3, 0x1AEBu, 0, (uint64_t)v8);
      sub_22F2F30F4((uint64_t)v8, (uint64_t)"stack empty");
      v7 = (unsigned int *)v8;
      return sub_22E903BEC(v7);
    default:
      goto LABEL_15;
  }
}

uint64_t sub_22F30A394(_QWORD *a1, const void *a2, size_t a3, int a4, int a5)
{
  uint64_t v10;
  int Key;
  uint64_t v12;
  uint64_t v13;
  llvm::StringMapImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29[24];
  _QWORD v30[2];
  unsigned int v31[24];

  v10 = a1[11];
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    v12 = *(unsigned int *)(v10 + 19056);
  else
    v12 = Key;
  v13 = *(_QWORD *)(v10 + 19048) + 8 * v12;
  v14 = (llvm::StringMapImpl *)(a1[11] + 19048);
  if (v13 == *(_QWORD *)v14 + 8 * *(unsigned int *)(a1[11] + 19056))
    goto LABEL_13;
  v15 = *(_QWORD *)v13;
  v16 = *(_DWORD *)(*(_QWORD *)v13 + 20);
  if (v16 == a4)
    return 0;
  if ((v16 & 8) != 0)
  {
LABEL_13:
    v21 = sub_22F29DA68(v14, a2, a3);
    result = 0;
    v22 = *v21;
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 16) = a5;
    *(_DWORD *)(v22 + 20) = a4;
    return result;
  }
  v18 = v15 + 8;
  sub_22E8FCA40(a1, a5, 0x1251u, 0, (uint64_t)v31);
  v19 = sub_22F2F30F4((uint64_t)v31, (uint64_t)"this");
  sub_22F30AC48(v19, (const char **)(v15 + 8));
  sub_22E903BEC(v31);
  if (*(_QWORD *)(v15 + 8))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)v18 + 24), 0x64u, 0, (uint64_t)v31);
    v23 = *(_QWORD *)(*(_QWORD *)v18 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(*(_QWORD *)v18 + 40) & 7) != 0 || v23 == 0)
    {
      v27 = 0;
      v26 = "";
    }
    else
    {
      v25 = *(_DWORD **)(v23 + 16);
      v28 = *v25;
      v26 = (const char *)(v25 + 4);
      v27 = v28;
    }
    v30[0] = v26;
    v30[1] = v27;
    sub_22F2F2210((uint64_t)v31, (uint64_t)v30);
    sub_22E903BEC(v31);
  }
  v20 = *(_DWORD *)(v15 + 16);
  if (v20)
  {
    sub_22E8FCA40(a1, v20, 0x6Bu, 0, (uint64_t)v29);
    sub_22E903BEC(v29);
  }
  return 1;
}

uint64_t sub_22F30A544(uint64_t result, int a2)
{
  *(_BYTE *)(result + 240) = a2 == 1;
  return result;
}

uint64_t sub_22F30A554(uint64_t a1, int a2, int a3, const void *a4, size_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v10 = *(_QWORD *)(a1 + 88);
  v11 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80));
  v12 = sub_22F3AD14C(v10, v11, a2, a3, a4, a5);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v14 = sub_22E3CD31C((uint64_t *)(v13 + 72), v13);
  sub_22EFCCFA0(v14 + 40, v12);
  return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v12);
}

uint64_t sub_22F30A5F4(uint64_t a1, int a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v12 = *(_QWORD *)(a1 + 88);
  v13 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v12 + 1960) + 80));
  v14 = sub_22F3AD248(v12, v13, a2, a3, a4, a5, a6);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
  v16 = sub_22E3CD31C((uint64_t *)(v15 + 72), v15);
  sub_22EFCCFA0(v16 + 40, v14);
  return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), v14);
}

_DWORD *sub_22F30A6A4(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *result;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19[24];

  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 1296);
  v7 = v6 & 0xFFFF3FFF | 0x4000;
  if (a3 != 1)
    v7 = v6 & 0xFFFF3FFF | 0x8000;
  if (a3)
    v8 = v7;
  else
    v8 = v6 & 0xFFFF3FFF;
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_DWORD *)(v9 + 52);
  if ((v10 & 0x100000) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x125Au, 0, (uint64_t)v19);
    v18 = 0;
    v15 = sub_22E8900C4((uint64_t)v19, &v18);
    v17 = 0;
    sub_22E8900C4(v15, &v17);
    sub_22E903BEC(v19);
    v9 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v9 + 52);
  }
  if ((v10 & 0x8000) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x125Au, 0, (uint64_t)v19);
    v18 = 0;
    v16 = sub_22E8900C4((uint64_t)v19, &v18);
    v17 = 1;
    sub_22E8900C4(v16, &v17);
    sub_22E903BEC(v19);
    v9 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v9 + 52);
  }
  if ((v10 & 0x80000) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x125Au, 0, (uint64_t)v19);
    v18 = 0;
    v11 = sub_22E8900C4((uint64_t)v19, &v18);
    v17 = 2;
    sub_22E8900C4(v11, &v17);
    sub_22E903BEC(v19);
    v9 = *(_QWORD *)(a1 + 72);
  }
  v12 = HIDWORD(v6) | 0xC000u;
  *(_QWORD *)(a1 + 1296) = v8 | (v12 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  result = sub_22E51A8D0(v19, v9);
  *(_DWORD *)(a1 + 56) = v19[0] & ~(_DWORD)v12 | v8 & v12;
  v14 = *(_DWORD **)(a1 + 80);
  v14[131] = a2;
  v14[130] = a3;
  v14[132] = a3;
  return result;
}

unsigned int *sub_22F30A854(_QWORD *a1, int a2, int a3, int a4)
{
  int v7;
  unsigned int v9[26];

  if ((a3 - 2) > 2 || (v7 = *(_WORD *)(sub_22EFCBB30(a1[27]) + 8) & 0x7F, v7 == 16) || v7 == 83)
    __asm { BR              X10 }
  sub_22E8FCA40(a1, a2, 0x11BAu, 0, (uint64_t)v9);
  return sub_22E903BEC(v9);
}

void sub_22F30AA0C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  sub_22E90E8DC(v0 + 1208, v3, v2, v1 & 0xFFFFFF9F | ((unint64_t)(v4 | 0x60u) << 32));
  JUMPOUT(0x22F30A9D0);
}

void sub_22F30AA38(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a1);
  if (*(_DWORD *)(v1 + 1216))
  {
    sub_22E90E8DC(v1 + 1208, v4, v3, v2);
    JUMPOUT(0x22F30A9D0);
  }
  sub_22E8FCA40((_QWORD *)v1, v4, 0x1AF2u, 0, (uint64_t)va);
  v5 = sub_22F2F30F4((uint64_t)va, (uint64_t)"float_control");
  sub_22F2F30F4(v5, (uint64_t)"stack empty");
  JUMPOUT(0x22F30A944);
}

void sub_22F30AAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;

  *(_DWORD *)(v14 - 68) = v12;
  a10 = 0uLL;
  sub_22F2B2FEC(v10 + 1208, &a10, v13, (int *)(v10 + 1304), (int *)(v14 - 68));
  *(_QWORD *)(v10 + 1296) = v11;
  *(_DWORD *)(v10 + 1304) = *(_DWORD *)(v14 - 68);
  JUMPOUT(0x22F30A9D0);
}

uint64_t sub_22F30AB1C(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 244) = a2;
  *(_DWORD *)(result + 280) = a3;
  return result;
}

uint64_t sub_22F30AB28(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v9;
  unsigned int v10[24];

  if ((a2 & 4) != 0 && !*(_DWORD *)(a1 + 496))
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x1AF2u, 0, (uint64_t)v10);
    v9 = sub_22F2F30F4((uint64_t)v10, (uint64_t)"vtordisp");
    sub_22F2F30F4(v9, (uint64_t)"stack empty");
    sub_22E903BEC(v10);
  }
  return sub_22E90E98C(a1 + 488, a3, a2, 0, 0, a4);
}

unint64_t sub_22F30ABC8(unint64_t result, _OWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7[0] = *a2;
    *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 12);
    result = sub_22E78DF7C(result, (unint64_t)v7, 1);
    v4 = (_OWORD *)(*(_QWORD *)v2 + 32 * *(unsigned int *)(v2 + 8));
    v5 = *(_OWORD *)result;
    v6 = *(_OWORD *)(result + 16);
  }
  else
  {
    v4 = (_OWORD *)(*(_QWORD *)result + 32 * v3);
    v5 = *a2;
    v6 = a2[1];
  }
  *v4 = v5;
  v4[1] = v6;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_22F30AC48(uint64_t a1, const char **a2)
{
  unsigned __int8 **v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (unsigned __int8 **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (unsigned __int8 **)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  sub_22F36FBF4(v4, a2);
  return a1;
}

uint64_t sub_22F30ACDC(_QWORD *a1, int a2, int a3, _DWORD *a4)
{
  return sub_22F30A394(a1, &a4[a4[1] + 5], ((*a4 >> 21) & 7u) * a4[4], a3, a2);
}

uint64_t sub_22F30AD08(uint64_t result, int a2, _DWORD *a3)
{
  if (((*a3 >> 21) & 7) * a3[4] == 8 && *(_QWORD *)&a3[a3[1] + 5] == 0x554358245452432ELL)
    a3 = 0;
  *(_QWORD *)(result + 1352) = a3;
  *(_DWORD *)(result + 1360) = a2;
  return result;
}

BOOL sub_22F30AD50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 121)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F30ADB0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F30B67C(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 2;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_22F30AE0C(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_DWORD **)result;
        v3 = 12 * v1;
        do
        {
          *v2 = 0x7FFFFFFF;
          v2 += 3;
          v3 -= 12;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E9110F8(result);
    }
  }
  return result;
}

uint64_t sub_22F30AE60(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;

  v3 = sub_22E911208(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 56 * v5;
  *(_OWORD *)v6 = *(_OWORD *)v3;
  *(_QWORD *)(v6 + 24) = 0x400000000;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  result = v6 + 16;
  if (*(_DWORD *)(v3 + 24))
    result = sub_22F28CB40(result, v3 + 16);
  *(_BYTE *)(v4 + 56 * v5 + 48) = *(_BYTE *)(v3 + 48);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F30AEE8(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F30BA00(a1);
  v2 = *(_QWORD *)a1 + 144 * v1;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_QWORD *)(v2 + 24) = 0x200000000;
  LODWORD(v2) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v2;
  return *(_QWORD *)a1 + 144 * v2 - 144;
}

uint64_t sub_22F30AF4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD *v7;
  unsigned int v8;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *a1 + 144 * v5;
  v7 = (_OWORD *)(a2 + 144);
  if (a2 + 144 != v6)
  {
    do
    {
      *(v7 - 9) = *v7;
      sub_22E911270((uint64_t)(v7 - 8), (uint64_t)(v7 + 1));
      v7 += 9;
    }
    while (v7 != (_OWORD *)v6);
    v5 = *((_DWORD *)a1 + 2);
    v4 = *a1;
  }
  v8 = v5 - 1;
  *((_DWORD *)a1 + 2) = v8;
  sub_22F2BF8FC((char **)(v4 + 144 * v8 + 16));
  return a2;
}

unsigned int *sub_22F30AFD8(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2[24];

  v1 = result[346];
  if (v1)
  {
    sub_22E8FCA40(result, *(_DWORD *)(*((_QWORD *)result + 172) + 144 * v1 - 144), 0x11B5u, 0, (uint64_t)v2);
    return sub_22E903BEC(v2);
  }
  return result;
}

uint64_t sub_22F30B024(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 1368);
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    result = MEMORY[0x2348A0E9C](v2, 0x20C40960023A9);
  }
  *(_QWORD *)(v1 + 1368) = 0;
  return result;
}

void sub_22F30B074(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5[25];
  unsigned int v6;
  uint64_t v7;

  v7 = a2;
  if (a2)
  {
    v6 = 0;
    if ((sub_22EF97694((int *)(*(_QWORD *)(a2 + 16) + 16), **(unsigned int **)(a2 + 16), (int *)&v6) & 1) != 0)
    {
      sub_22E9107E0((uint64_t)a1, v6, a3);
    }
    else
    {
      sub_22E8FCA40(a1, a3, 0x188Du, 0, (uint64_t)v5);
      sub_22E8BAE44((uint64_t)v5, &v7);
      sub_22E903BEC(v5);
    }
  }
  else
  {
    sub_22E910938(a1, 0, a3);
  }
}

_DWORD *sub_22F30B114(uint64_t a1, int a2, int a3)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;
  int v11;

  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 1296);
  v5 = HIDWORD(v4);
  v6 = v4 & 0xFFFFFFFC;
  v7 = v4 & 0xFFFFFFFC | 2;
  if (a3 == 1)
  {
    LODWORD(v5) = HIDWORD(v4) | 3;
    LODWORD(v4) = v4 & 0xFFFFFFFC | 1;
  }
  if (a3 == 2)
  {
    LODWORD(v5) = HIDWORD(v4) | 3;
    LODWORD(v4) = v7;
  }
  if (a3)
    v8 = v5;
  else
    v8 = HIDWORD(v4) | 3u;
  if (a3)
    v9 = v4;
  else
    v9 = v6;
  *(_QWORD *)(a1 + 1296) = v9 | (v8 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  result = sub_22E51A8D0(&v11, *(_QWORD *)(a1 + 72));
  *(_DWORD *)(a1 + 56) = v11 & ~(_DWORD)v8 | v9 & v8;
  return result;
}

_DWORD *sub_22F30B1D0(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *result;
  int v8;

  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 1296);
  v5 = v4 & 0xFFFFFF9F | (32 * a3);
  v6 = HIDWORD(v4) | 0x60u;
  *(_QWORD *)(a1 + 1296) = v5 | (v6 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  result = sub_22E51A8D0(&v8, *(_QWORD *)(a1 + 72));
  *(_DWORD *)(a1 + 56) = v8 & ~(_DWORD)v6 | v5 & v6;
  return result;
}

uint64_t sub_22F30B264(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v11[25];
  int v12;
  _BYTE v13[864];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 1296);
  sub_22E71FFBC((uint64_t)v13, *(__int128 **)(a1 + 72));
  if (a3)
  {
    if ((*(_BYTE *)(a1 + 57) & 0x39) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0x11BBu, 0, (uint64_t)v11);
      sub_22E903BEC(v11);
    }
    v7 = v6 & 0xFFFFFF03 | 0xDC;
    v8 = 252;
  }
  else
  {
    v7 = v6 & 0xFFFFFF7F;
    v8 = 128;
  }
  v9 = v8 | HIDWORD(v6);
  *(_QWORD *)(a1 + 1296) = v7 | (unint64_t)(v9 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  sub_22E51A8D0(&v12, (uint64_t)v13);
  *(_DWORD *)(a1 + 56) = v12 & ~(_DWORD)v9 | v7 & v9;
  return sub_22E54B4D4((uint64_t)v13);
}

_DWORD *sub_22F30B394(uint64_t a1, int a2, int a3)
{
  return sub_22F30B1D0(a1, a2, a3);
}

_DWORD *sub_22F30B39C(uint64_t a1, int a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v5;
  _DWORD *result;
  int v7;

  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 1296);
  v5 = HIDWORD(v4);
  if (a3 <= 2)
  {
    LODWORD(v4) = dword_22F463DF0[a3] | v4 & 0xFFFFC0FC;
    v5 = v5 | 0x3F03;
  }
  *(_QWORD *)(a1 + 1296) = v4 | (v5 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  result = sub_22E51A8D0(&v7, *(_QWORD *)(a1 + 72));
  *(_DWORD *)(a1 + 56) = v7 & ~(_DWORD)v5 | v4 & v5;
  return result;
}

uint64_t sub_22F30B454(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (a2)
  {
    v2 = *(_BYTE *)(result + 60) | 0xF;
  }
  else
  {
    v3 = *(_QWORD *)(result + 72);
    v4 = *(_BYTE *)(result + 60) & 0xFE | (*(_DWORD *)(v3 + 124) >> 3) & 1;
    *(_BYTE *)(result + 60) = v4;
    v5 = v4 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v3 + 132) >> 11) & 1));
    *(_BYTE *)(result + 60) = v5;
    v6 = v5 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(v3 + 124) >> 21) & 1));
    *(_BYTE *)(result + 60) = v6;
    v2 = v6 & 0xF7 | (*(_QWORD *)(v3 + 116) >> 60) & 8;
  }
  *(_BYTE *)(result + 60) = v2;
  return result;
}

BOOL sub_22F30B4B4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;

  if (*(_WORD *)(*(_QWORD *)(a3 + 72) + 8) == 480)
    return 0;
  if (!sub_22E8D290C(a3, a1)
    || !sub_22F306820(a3, (uint64_t)a1, a2)
    || (sub_22EA47F54(a1, a3) & 1) != 0)
  {
    return 1;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8);
  if ((v8 & 0x10000000) != 0 || (a4 & 1) != 0)
    return 0;
  v10 = WORD1(v8) & 0xF;
  if ((v8 & 0xF00000) != 0)
  {
    if (v10 && !sub_22E8D2B00(a3, a1, v10))
      return 1;
    if (!sub_22F306838(a3))
    {
      v11 = (HIWORD(*(_DWORD *)(*(_QWORD *)(a3 + 72) + 8)) & 0xF)
          + ((*(_DWORD *)(*(_QWORD *)(a3 + 72) + 8) >> 20) & 0xF);
      if (v11)
      {
        if (!sub_22E8D2B88(a3, a1, v11))
          return 1;
      }
    }
    return 0;
  }
  return !sub_22E8D2A78(a3, a1, v10);
}

uint64_t sub_22F30B5AC(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  uint64_t result;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v17 = 0;
  result = sub_22F30B67C(a2, *a3, &v17);
  v9 = v17;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 2;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F30B72C((_DWORD *)a2, a3, v17);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    v14 = *a4;
    *(_DWORD *)(result + 12) = *((_DWORD *)a4 + 2);
    *(_QWORD *)(result + 4) = v14;
    v15 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v16 = 2;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(unsigned int *)(a2 + 16);
    }
    v13 = v15 + 16 * v16;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_22F30B67C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == 0x80000000;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_22F30B72C(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E910F60((uint64_t)a1, v6);
  v8 = 0;
  sub_22F30B67C((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != 0x7FFFFFFF)
    --a1[1];
  return a3;
}

uint64_t sub_22F30B7EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;

  v4 = a2;
  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = 0x7FFFFFFF;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_DWORD *)v4;
      if ((*(_DWORD *)v4 - 0x7FFFFFFF) >= 2)
      {
        v13 = 0;
        result = sub_22F30B67C((uint64_t)v5, v10, &v13);
        v11 = v13;
        *v13 = *(_DWORD *)v4;
        v12 = *(_QWORD *)(v4 + 4);
        v11[3] = *(_DWORD *)(v4 + 12);
        *(_QWORD *)(v11 + 1) = v12;
        *v5 += 2;
      }
      v4 += 16;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_22F30B8C4(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F30B930((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F30B930(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 56 * v2;
    v6 = a2 + 16;
    v7 = v4 + 16;
    do
    {
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v7 - 16);
      *(_QWORD *)v6 = v6 + 16;
      *(_QWORD *)(v6 + 8) = 0x400000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = sub_22F28CB40(v6, v7);
      v8 = v7 - 16;
      *(_BYTE *)(v6 + 32) = *(_BYTE *)(v7 + 32);
      v6 += 56;
      v7 += 56;
    }
    while (v8 + 56 != v5);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = 56 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 40);
        if ((void *)(v10 + v11 - 24) != v12)
          free(v12);
        v11 -= 56;
      }
      while (v11);
    }
  }
}

uint64_t sub_22F30BA00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2 + 144 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 16) = v3 + 32;
  *(_QWORD *)(v3 + 24) = 0x200000000;
  sub_22F30BAB8(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  return v2 + 144 * v4 - 144;
}

uint64_t sub_22F30BAB8(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 144 * v2;
    result = a2 + 16;
    v6 = v4 + 16;
    do
    {
      *(_OWORD *)(result - 16) = *(_OWORD *)(v6 - 16);
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 8))
        result = sub_22E911270(result, v6);
      v7 = v6 - 16;
      result += 144;
      v6 += 144;
    }
    while (v7 + 144 != v5);
    v8 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v3 - 128;
      v10 = 144 * v8;
      do
      {
        result = (uint64_t)sub_22F2BF8FC((char **)(v9 + v10));
        v10 -= 144;
      }
      while (v10);
    }
  }
  return result;
}

void sub_22F30BB6C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E9161D8((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F30BBD8(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E916B4C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F30BC44(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  if (a1 != a2)
    sub_22E91670C((uint64_t *)(a1 + 96), *(std::string **)(a2 + 96), *(std::string **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5));
  return a1;
}

void sub_22F30BCBC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F30BD7C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F30BD28(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  sub_22E91703C((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  sub_22E91703C((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  return a1;
}

uint64_t sub_22F30BD7C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 144 * v2;
    result = a2 + 16;
    v6 = v4 + 16;
    do
    {
      *(_OWORD *)(result - 16) = *(_OWORD *)(v6 - 16);
      sub_22E917140(result, (__int128 *)v6);
      *(_BYTE *)(v7 + 120) = *(_BYTE *)(v6 + 120);
      result = v7 + 144;
      v8 = v6 + 128;
      v6 += 144;
    }
    while (v8 != v5);
    v9 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)v3 - 128;
      v11 = 144 * v9;
      do
      {
        result = sub_22E9170C8(v10 + v11);
        v11 -= 144;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F30BE10(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;

  v4 = sub_22E9162D4((char *)a1, (__int128 *)a2);
  v4[56] = 0;
  v5 = v4 + 56;
  v5[24] = 0;
  if (*(_BYTE *)(a2 + 80))
    sub_22E6C96C4((void **)v5, (__int128 *)(a2 + 56));
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
    sub_22E6C96C4((void **)(a1 + 88), (__int128 *)(a2 + 88));
  return a1;
}

void sub_22F30BE6C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F30BED8(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F30BED8(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 152 * v2;
    result = a2 + 16;
    v6 = v4 + 16;
    do
    {
      *(_OWORD *)(result - 16) = *(_OWORD *)(v6 - 16);
      sub_22E917140(result, (__int128 *)v6);
      v7 = *(_QWORD *)(v6 + 120);
      *(_DWORD *)(v8 + 128) = *(_DWORD *)(v6 + 128);
      *(_QWORD *)(v8 + 120) = v7;
      result = v8 + 152;
      v9 = v6 + 136;
      v6 += 152;
    }
    while (v9 != v5);
    v10 = *(_DWORD *)(v3 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)v3 - 136;
      v12 = 152 * v10;
      do
      {
        result = sub_22E9170C8(v11 + v12);
        v12 -= 152;
      }
      while (v12);
    }
  }
  return result;
}

void sub_22F30BF74(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F30BFE0(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F30BFE0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 144 * v2;
    result = a2 + 16;
    v6 = v4 + 16;
    do
    {
      *(_OWORD *)(result - 16) = *(_OWORD *)(v6 - 16);
      sub_22E917140(result, (__int128 *)v6);
      *(_QWORD *)(v7 + 120) = *(_QWORD *)(v6 + 120);
      result = v7 + 144;
      v8 = v6 + 128;
      v6 += 144;
    }
    while (v8 != v5);
    v9 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)v3 - 128;
      v11 = 144 * v9;
      do
      {
        result = sub_22E9170C8(v10 + v11);
        v11 -= 144;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22F30C074(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E917908((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F30C0E0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E917D04((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F30C14C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E918174((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

BOOL sub_22F30C1B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 322)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F30C218(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1904))
    return **(_QWORD **)(a1 + 1896);
  else
    return 0;
}

uint64_t sub_22F30C234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(v4 + 15088);
  v6 = 256;
  if (!*(_BYTE *)(a1 + 48))
    v6 = 224;
  v7 = 264;
  if (!*(_BYTE *)(a1 + 48))
    v7 = 232;
  v8 = *(_QWORD *)(v5 + v7);
  v9 = *(const void **)(v5 + v6);
  v10 = sub_22E91D794(v4, v9, v8, *(_QWORD *)(a1 + 8));
  if (v10
    && ((*(unsigned __int16 *)(v10 + 32) | (*(unsigned __int8 *)(v10 + 34) << 16)) & 0x10000) != 0
    && (v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8))) != 0)
  {
    v11 = (unsigned int *)v13;
    while (1)
    {
      v14 = sub_22E91D794(*(_QWORD *)(a2 + 88), v9, v8, (uint64_t)v11);
      if (v14)
      {
        if (((*(unsigned __int16 *)(v14 + 32) | (*(unsigned __int8 *)(v14 + 34) << 16)) & 0x10000) == 0)
          break;
      }
      v11 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 48))(v11);
      if (!v11)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = *(unsigned int **)(a1 + 8);
  }
  return v11[6];
}

_QWORD *sub_22F30C31C(_QWORD *result)
{
  _DWORD *v1;
  BOOL v2;

  if ((*(_WORD *)(*(_QWORD *)(*result + 72) + 148) & 2) != 0)
  {
    v1 = (_DWORD *)result[2];
    result = sub_22F1E361C(*(_QWORD **)(*result + 112), *(_DWORD *)(*(_QWORD *)(result[1] + 8) + 24));
    if ((_DWORD)result)
      v2 = (_DWORD)result == 3;
    else
      v2 = 1;
    if (!v2)
      *v1 = 5036;
  }
  return result;
}

uint64_t sub_22F30C378(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD **)a2;
      v6 = 56 * v4;
      do
      {
        sub_22E6D82D0((uint64_t *)(a1 + 32), v5);
        v5 += 14;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v8 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v15 = v9;
    v10 = sub_22F2F1D6C(v8, &v15);
    v11 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v11)
    {
      v12 = (uint64_t *)(v10[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
      v13 = *(_DWORD **)a2;
      v14 = 56 * v11;
      do
      {
        sub_22E6D82D0(v12, v13);
        v13 += 14;
        v14 -= 56;
      }
      while (v14);
    }
  }
  return a1;
}

uint64_t sub_22F30C460(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 0x18000000) == 0)
    return *(unsigned int *)(a1 + 8 * (unsigned __int16)v4 + 4 * a2 + 48);
  v5 = sub_22F3C79F4(a1);
  return sub_22F3F14F4(a2, v5, (*(_DWORD *)(a1 + 24) & 0x18000000) == 0x10000000, a1 + 48, (unsigned __int16)*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 36));
}

void sub_22F30C4D4(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v2 = (_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    v7 = a1;
    v6 = a2;
    v5 = (_QWORD *)(a1 + 88);
    v4 = sub_22EC6CBD0(v3);
    MEMORY[0x2348A0E9C](v4, 0x10E0C409F09D3C3);
    v2 = v5;
    a2 = v6;
    a1 = v7;
  }
  *(_BYTE *)(a1 + 165) = 0;
  *v2 = 0;
  v2[1] = 0;
  *(_DWORD *)(a1 + 152) = a2;
  sub_22EC56024(a1);
}

uint64_t sub_22F30C54C(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 **v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (unsigned __int8 **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (unsigned __int8 **)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  sub_22F0F0B50(v4, *a2);
  return a1;
}

unsigned int *sub_22F30C5E4(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  uint64_t v8;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v8 = **(_QWORD **)(a1 + 16);
  sub_22E8906A0((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F30C658()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F30C66C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v12;
  uint64_t *v13;

  v8 = a5;
  v12 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v13 = sub_22EE89D90(a1, a3, *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFELL) + 8), a4, a5, a6, a7, a8);
  if ((*(_WORD *)(a3 + 1088) & 1) != 0 || (**(_QWORD **)a3 & 0x3F000) == 0x32000)
    return 1;
  else
    return sub_22E95C7F8(a1, a2, v13, v12, v8);
}

unsigned int *sub_22F30C700(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7[24];
  uint64_t v8;
  uint64_t v9;

  v8 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v7);
  sub_22F0D4E74(**(_QWORD **)(a1 + 16));
  v9 = v5;
  sub_22E8906A0((uint64_t)v7, &v9);
  sub_22E8901B8((uint64_t)v7, &v8);
  return sub_22E903BEC(v7);
}

void sub_22F30C778()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F30C78C()
{
  return 1;
}

unsigned int *sub_22F30C798(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v5[24];
  uint64_t v6;

  v6 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v5);
  sub_22E8901B8((uint64_t)v5, &v6);
  return sub_22E903BEC(v5);
}

void sub_22F30C7E8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F30C7FC(uint64_t result)
{
  if (!result || *(unsigned __int8 *)(result + 16) - 31 <= 0xFFFFFFFD)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 29 > 1)
      return 0;
    else
      return sub_22F10CF48(result);
  }
  return result;
}

unsigned int *sub_22F30C83C(_QWORD *a1, int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5[24];
  uint64_t v6;

  v6 = a3;
  if (((*(unsigned __int16 *)(a1[9] + 16) | (unint64_t)((uint64_t)*(char *)(a1[9] + 18) << 16)) & 0x8000000000000000) != 0
    || (*(_BYTE *)(*(_QWORD *)(a1[11] + 15088) + 290) & 4) != 0)
  {
    v3 = 4586;
  }
  else
  {
    v3 = 4587;
  }
  sub_22E8FCA40(a1, a2, v3, 0, (uint64_t)v5);
  sub_22E8906A0((uint64_t)v5, &v6);
  return sub_22E903BEC(v5);
}

uint64_t sub_22F30C8B4(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16[24];
  _QWORD *v17;
  unsigned int v18;
  char v19;
  _QWORD *v20;
  __int128 v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  sub_22F00905C(a2, a1[11], 0, (uint64_t)&v17);
  if (v19)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1[11] + 15088) + 656))(*(_QWORD *)(a1[11] + 15088), &v17) & 1) != 0)
    {
      v6 = 0;
      if (v18 >= 0x41)
        v7 = v17;
      else
        v7 = &v17;
      *a3 = *v7;
      goto LABEL_7;
    }
    v20 = v22;
    v21 = xmmword_22F44E330;
    sub_22F242C48((uint64_t)v16, (uint64_t)&v20);
    llvm::APInt::print((llvm::APInt *)&v17, (llvm::raw_ostream *)v16);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v16);
    sub_22EFF605C(a2);
    sub_22E8FCA40(a1, v12, 0x11F0u, 0, (uint64_t)v16);
    v13 = sub_22F2F2210((uint64_t)v16, (uint64_t)&v20);
    sub_22F0D4E74(a2);
    v15 = v14;
    sub_22E8906A0(v13, &v15);
    sub_22E903BEC(v16);
    if (v20 != v22)
      free(v20);
  }
  else
  {
    sub_22EFF605C(a2);
    sub_22E8FCA40(a1, v9, 0xD15u, 0, (uint64_t)v16);
    LODWORD(v15) = 0;
    v10 = sub_22E8900C4((uint64_t)v16, (int *)&v15);
    sub_22F0D4E74(a2);
    v20 = v11;
    sub_22E8906A0(v10, (uint64_t *)&v20);
    sub_22E903BEC(v16);
  }
  v6 = 1;
LABEL_7:
  if (v19 && v18 >= 0x41 && v17)
    MEMORY[0x2348A0E84](v17, 0x1000C8000313F17);
  return v6;
}

uint64_t sub_22F30CAA8(_QWORD *a1, uint64_t a2, int a3, _DWORD *a4)
{
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18[24];
  _QWORD *v19;
  unsigned int v20;
  char v21;
  BOOL v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *a4 = 0;
    return 1;
  }
  v22 = a3 == 2;
  sub_22F00905C(a2, a1[11], 0, (uint64_t)&v19);
  if (v21)
  {
    v17 = 0;
    if ((a3 - 1) >= 2)
    {
      if (a3)
      {
        v9 = 0;
        v8 = 0;
      }
      else
      {
        v9 = 1;
        v17 = 1;
        v8 = 1;
      }
    }
    else
    {
      v8 = 0;
      v9 = 0xFFFFLL;
      v17 = 0xFFFF;
    }
    if ((sub_22E8BAD7C((uint64_t)&v19, 0) & 1) == 0 && !sub_22E42E8B8((uint64_t)&v19, v9))
    {
      if (v20 >= 0x41)
        v10 = v19;
      else
        v10 = &v19;
      *a4 = *v10;
      v11 = 1;
      goto LABEL_11;
    }
    v23 = v25;
    v24 = xmmword_22F44E330;
    sub_22F242C48((uint64_t)v18, (uint64_t)&v23);
    llvm::APInt::print((llvm::APInt *)&v19, (llvm::raw_ostream *)v18);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v18);
    sub_22EFF605C(a2);
    if (v8)
    {
      sub_22E8FCA40(a1, v14, 0x11E6u, 0, (uint64_t)v18);
      sub_22F2F2210((uint64_t)v18, (uint64_t)&v23);
    }
    else
    {
      sub_22E8FCA40(a1, v14, 0x11EEu, 0, (uint64_t)v18);
      v15 = sub_22F2F2210((uint64_t)v18, (uint64_t)&v23);
      v16 = sub_22E89519C(v15, &v17);
      sub_22E894E38(v16, (unsigned __int8 *)&v22);
    }
    sub_22E903BEC(v18);
    if (v23 != v25)
      free(v23);
  }
  else
  {
    sub_22EFF605C(a2);
    sub_22E8FCA40(a1, v13, 0x11E7u, 0, (uint64_t)v18);
    sub_22E894E38((uint64_t)v18, (unsigned __int8 *)&v22);
    sub_22E903BEC(v18);
  }
  v11 = 0;
LABEL_11:
  if (v21 && v20 >= 0x41 && v19)
    MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
  return v11;
}

uint64_t sub_22F30CD14(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t result;
  int v7;

  result = 0;
  v7 = a3;
  switch(*(_DWORD *)(a2 + 56))
  {
    case 1:
    case 2:
    case 0x27:
    case 0x28:
      result = sub_22E965528(a1, a2, a3, a4);
      break;
    case 3:
    case 4:
    case 5:
      result = sub_22E9657C8(a1, a2, a3, a4);
      break;
    case 8:
    case 9:
      result = sub_22E9665C0(a1, a3, a4);
      break;
    case 0xC:
      result = sub_22E97D8F8(a1, a3, a4);
      break;
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
      result = sub_22F30FE80(a1, a2, a3, a4) || sub_22F30FFB0(a1, v7, a4);
      break;
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
      result = sub_22E967410(a1, (_QWORD *)a2, a3, a4);
      break;
    case 0x1E:
      result = sub_22E9686A4(a1, a3, a4);
      break;
    case 0x1F:
    case 0x20:
      result = sub_22E968908(a1, a2, a3, a4);
      break;
    case 0x24:
      result = sub_22F30CE9C((uint64_t)a1, a3, a4);
      break;
    case 0x29:
    case 0x2A:
      result = sub_22E966B98(a1, (_DWORD *)a2, a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_22F30CE9C(uint64_t a1, int a2, unsigned int *a3)
{
  _QWORD *v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17[24];
  unint64_t *v18;
  unsigned int v19;
  char v20;

  v4 = (_QWORD *)a1;
  v5 = 0;
  v6 = 15;
  v7 = 1;
  if (a2 > 2222)
  {
    switch(a2)
    {
      case 2223:
      case 2224:
      case 2225:
      case 2226:
      case 2227:
      case 2228:
      case 2229:
      case 2230:
      case 2231:
      case 2232:
      case 2233:
      case 2234:
      case 2248:
        goto LABEL_3;
      case 2238:
      case 2256:
        v5 = 1;
        if (sub_22E9797E0(a1, a3, 1u, 0, 15, 1))
          return v5;
        a1 = (uint64_t)v4;
        v8 = a3;
        v7 = 2;
        v6 = 15;
        break;
      case 2244:
      case 2266:
        v6 = 4095;
        goto LABEL_7;
      case 2249:
      case 2250:
      case 2257:
      case 2258:
      case 2280:
        goto LABEL_6;
      case 2267:
      case 2268:
        v6 = 7;
        goto LABEL_6;
      case 2278:
      case 2279:
      case 2281:
      case 2282:
        goto LABEL_7;
      default:
        return v5;
    }
    return sub_22E9797E0(a1, v8, v7, 0, v6, 1);
  }
  if (a2 > 2168)
  {
    if ((a2 - 2181) >= 0xC && a2 != 2169)
      return v5;
    goto LABEL_6;
  }
  if (a2 > 2098)
  {
    if ((a2 - 2099) < 4)
    {
      v6 = 255;
LABEL_3:
      v7 = 3;
      goto LABEL_7;
    }
    return v5;
  }
  if ((a2 - 2032) < 2)
    goto LABEL_7;
  if (a2 == 2027)
  {
    v10 = *(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
    sub_22F00905C(v10, *(_QWORD *)(a1 + 88), 0, (uint64_t)&v18);
    if (v20)
    {
      v11 = v19;
      if (v19 > 0x40)
      {
        v13 = *v18;
        if ((*v18 & 0x8000000000000000) != 0)
        {
          MEMORY[0x2348A0E84]();
          return 0;
        }
      }
      else
      {
        v12 = (_QWORD)v18 << -(char)v19;
        if ((v12 & 0x8000000000000000) != 0)
          return 0;
        v13 = v12 >> (64 - v19);
      }
      if (v13 <= 0xFF)
      {
        sub_22F0D5A50(v10);
        sub_22E8FCA40(v4, v14, 0x12A1u, 0, (uint64_t)v17);
        sub_22F0D4E74(v10);
        v16 = v15;
        v5 = *(_BYTE *)(sub_22E8906A0((uint64_t)v17, &v16) + 80) != 0;
        sub_22E903BEC(v17);
        if (!v20)
          return v5;
        v11 = v19;
      }
      if (v11 >= 0x41 && v18)
        MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
      if (v13 <= 0xFF)
        return v5;
    }
    return 0;
  }
  if (a2 == 2037)
  {
LABEL_6:
    v7 = 2;
LABEL_7:
    v8 = a3;
    return sub_22E9797E0(a1, v8, v7, 0, v6, 1);
  }
  return v5;
}

BOOL sub_22F30D0F4(_QWORD *a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _BOOL8 v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  unsigned __int8 v28;

  v7 = *a2;
  v8 = (unsigned __int8 **)((char *)a2 + (v7 >> 24));
  v9 = (&v8[(v7 >> 18) & 1])[a3 + 1];
  v10 = sub_22EFFBBCC(*v8);
  if ((*(_DWORD *)v9 & 0x18000) != 0)
    return 0;
  v11 = *((_QWORD *)v10 + 2);
  LOBYTE(v25) = 0;
  v28 = 0;
  sub_22F00905C((uint64_t)v9, a1[11], 0, (uint64_t)&v22);
  sub_22E54C490((uint64_t)&v25, (uint64_t)&v22);
  v12 = v28;
  if (v24 && v23 >= 0x41 && v22)
  {
    v19 = v28;
    MEMORY[0x2348A0E84](v22, 0x1000C8000313F17);
    v12 = v19;
  }
  if (v12)
  {
    if (*(_DWORD *)(a4 + 8) > 0x40u || (v13 = v26, v26 > 0x40))
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v25);
    }
    else
    {
      *(_QWORD *)a4 = v25;
      *(_DWORD *)(a4 + 8) = v13;
    }
    v14 = 0;
    *(_BYTE *)(a4 + 12) = v27;
  }
  else
  {
    sub_22EFFAE7C(a2);
    sub_22E8FCA40(a1, v16, 0xC00u, 0, (uint64_t)&v22);
    v21 = *(_QWORD *)(v11 + 40);
    v17 = sub_22E894538((uint64_t)&v22, &v21);
    sub_22F0D4E74((uint64_t)v9);
    v20 = v18;
    v14 = *(_BYTE *)(sub_22E8906A0(v17, &v20) + 80) != 0;
    sub_22E903BEC((unsigned int *)&v22);
  }
  if (v28 && v26 >= 0x41 && v25)
    MEMORY[0x2348A0E84](v25, 0x1000C8000313F17);
  return v14;
}

uint64_t sub_22F30D2B8(_QWORD *a1, unsigned int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39[24];

  if (a2[4] > 2)
  {
    v9 = *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3));
    if ((sub_22E98473C((uint64_t)a1, a2) & 1) != 0 || (sub_22E9847E8(a1, v9, 0) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v10 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24);
      v11 = sub_22EFFE844(*(unsigned __int8 **)(v10 + 16));
      v12 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v13 = sub_22EFFE844(*(unsigned __int8 **)(v10 + 24));
      v14 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v13 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v38 = sub_22EF5B848(a1[11], *(_QWORD *)(a1[11] + 16408) | 1, 0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
        || (*(_BYTE *)(a1[9] + 1) & 1) != 0
        && (sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF8) != *(_QWORD *)(a1[11] + 16408))
      {
        sub_22F0D5A50((uint64_t)v11);
        sub_22E8FCA40(a1, v15, 0x1357u, 0, (uint64_t)v39);
        v37 = *((_QWORD *)v11 + 1);
        v16 = sub_22E8901B8((uint64_t)v39, &v37);
        v17 = sub_22E8901B8(v16, (uint64_t *)&v38);
        LODWORD(v31) = 1;
        v18 = sub_22E8900C4(v17, (int *)&v31);
        v36 = 0;
        v19 = sub_22E8900C4(v18, &v36);
        v35 = 3;
        v20 = sub_22E8900C4(v19, &v35);
        v34 = 2;
        v21 = sub_22E8900C4(v20, &v34);
        v33 = *((_QWORD *)v11 + 1);
        v22 = sub_22E8901B8(v21, &v33);
        sub_22E8901B8(v22, (uint64_t *)&v38);
        sub_22E903BEC(v39);
      }
      v37 = sub_22EF67C8C(a1[11]);
      if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8) != v37)
      {
        sub_22F0D5A50((uint64_t)v13);
        sub_22E8FCA40(a1, v23, 0x1357u, 0, (uint64_t)v39);
        v33 = *((_QWORD *)v13 + 1);
        v24 = sub_22E8901B8((uint64_t)v39, &v33);
        v25 = sub_22E8901B8(v24, &v37);
        v36 = 1;
        v26 = sub_22E8900C4(v25, &v36);
        v35 = 0;
        v27 = sub_22E8900C4(v26, &v35);
        v34 = 3;
        v28 = sub_22E8900C4(v27, &v34);
        v32 = 3;
        v29 = sub_22E8900C4(v28, &v32);
        v31 = *((_QWORD *)v13 + 1);
        v30 = sub_22E8901B8(v29, &v31);
        sub_22E8901B8(v30, &v37);
        sub_22E903BEC(v39);
      }
      return 0;
    }
  }
  else
  {
    sub_22EFFAEF8(a2);
    sub_22E8FCA40(a1, v4, 0x133Eu, 0, (uint64_t)v39);
    LODWORD(v38) = 0;
    v5 = sub_22E8900C4((uint64_t)v39, (int *)&v38);
    LODWORD(v37) = 3;
    v6 = sub_22E8900C4(v5, (int *)&v37);
    LODWORD(v33) = a2[4];
    v7 = *(_BYTE *)(sub_22E89519C(v6, (unsigned int *)&v33) + 80) != 0;
    sub_22E903BEC(v39);
  }
  return v7;
}

BOOL sub_22F30D5A0(_QWORD *a1, unsigned int *a2)
{
  _BOOL8 v4;
  int *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  unint64_t v16;
  unsigned int v17[24];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 712))(*(_QWORD *)(a1[11] + 15088)) & 1) == 0)
  {
    sub_22EFFAE7C(a2);
    sub_22E8FCA40(a1, v9, 0xBA8u, 0, (uint64_t)v17);
    sub_22EFFAE7C(a2);
    v11 = v10;
    sub_22EFFAEF8(a2);
    v16 = __PAIR64__(v12, v11);
    v13 = sub_22E8906A0((uint64_t)v17, (uint64_t *)&v16);
LABEL_9:
    v4 = *(_BYTE *)(v13 + 80) != 0;
    sub_22E903BEC(v17);
    return v4;
  }
  v4 = 1;
  if (sub_22E979C64(a1, a2, 1u))
    return v4;
  v5 = *(int **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
  v6 = *v5;
  if ((*v5 & 0x4000) != 0)
    return 0;
  v7 = *((_QWORD *)v5 + 1);
  v16 = v7;
  if (!sub_22F110DD0(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22EFFAEF8(a2);
    sub_22E8FCA40(a1, v15, 0x1365u, 0, (uint64_t)v17);
    v13 = sub_22E8901B8((uint64_t)v17, (uint64_t *)&v16);
    goto LABEL_9;
  }
  if ((v6 & 0x300) == 0x100)
  {
    v8 = sub_22EB1A358(a1, v5, 0);
    *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)) = v8 & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  v4 = 0;
  *((_QWORD *)a2 + 1) = v7;
  return v4;
}

unsigned int *sub_22F30D714(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18[24];

  v8 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
  if ((*(_BYTE *)(v8 + 1) & 0x40) == 0)
  {
    v10 = result;
    result = (unsigned int *)sub_22F0005B0(v8, *((_QWORD *)result + 11), 1, a4, a5, a6, a7, a8);
    if ((_DWORD)result)
    {
      sub_22F0D5A50(v8);
      sub_22E8FCA40(v10, v11, 0x1852u, 0, (uint64_t)v18);
      sub_22F0D4E74(v8);
      v17 = v12;
      v13 = sub_22E8906A0((uint64_t)v18, &v17);
      v14 = *(_QWORD *)(sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3))) + 40);
      if ((v14 & 7) != 0)
        v15 = 0;
      else
        v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = v15;
      sub_22E8BAE44(v13, (uint64_t *)&v16);
      return sub_22E903BEC(v18);
    }
  }
  return result;
}

BOOL sub_22F30D7E8(_QWORD *a1, unsigned int *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  BOOL v10;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint8x8_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;

  v4 = a2[4];
  v35 = v4;
  if (v4 >= 4)
  {
    sub_22EFFAEF8(a2);
    sub_22E8FCA40(a1, v5, 0x1344u, 0, (uint64_t)&v30);
    LODWORD(v25) = 0;
    v6 = sub_22E8900C4((uint64_t)&v30, (int *)&v25);
    v29 = 3;
    v7 = sub_22E8900C4(v6, &v29);
    v8 = sub_22E89519C(v7, &v35);
    sub_22F0D4E74((uint64_t)a2);
    v26 = v9;
    v10 = *(_BYTE *)(sub_22E8906A0(v8, (uint64_t *)&v26) + 80) != 0;
    sub_22E903BEC(&v30);
    return v10;
  }
  v12 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24));
  if ((*v12 & 0x18000) != 0)
    goto LABEL_5;
  v10 = 1;
  v27 = 1;
  v26 = 0;
  v28 = 0;
  if (sub_22F30D0F4(a1, a2, 1u, (uint64_t)&v26))
    goto LABEL_11;
  if (v27 > 0x40)
  {
    if (llvm::APInt::countPopulationSlowCase((llvm::APInt *)&v26) != 1)
      goto LABEL_19;
  }
  else
  {
    v19 = (uint8x8_t)vcnt_s8(v26);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] != 1)
    {
LABEL_19:
      sub_22EFFAE7C(a2);
      sub_22E8FCA40(a1, v20, 0xA39u, 0, (uint64_t)&v30);
      sub_22F0D4E74((uint64_t)v12);
      v25 = v21;
      v10 = *(_BYTE *)(sub_22E8906A0((uint64_t)&v30, &v25) + 80) != 0;
      sub_22E903BEC(&v30);
LABEL_11:
      v18 = 0;
      goto LABEL_12;
    }
  }
  if (sub_22E42E8B8((uint64_t)&v26, 0x100000000))
  {
    sub_22EFFAE7C(a2);
    sub_22E8FCA40(a1, v22, 0x184Fu, 0, (uint64_t)&v30);
    sub_22F0D4E74((uint64_t)v12);
    v25 = v23;
    v24 = sub_22E8906A0((uint64_t)&v30, &v25);
    sub_22E97FA2C(v24, &qword_22F463C60);
    sub_22E903BEC(&v30);
  }
  v18 = 1;
LABEL_12:
  if (v27 >= 0x41 && *(_QWORD *)&v26)
    MEMORY[0x2348A0E84](*(_QWORD *)&v26, 0x1000C8000313F17);
  if (v18)
  {
LABEL_5:
    if (v4 < 3)
    {
      return 0;
    }
    else
    {
      v13 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 6] + ((unint64_t)*a2 >> 24));
      v14 = a1[11];
      v15 = sub_22EF67C8C(v14);
      v33 = 0;
      v30 = 1;
      v16 = sub_22EF60188(v14, v15);
      v31 = 0;
      v32 = v16;
      v34 = 0;
      v17 = sub_22EC45014(a1, &v30, 0, v13, 0, 0);
      if ((v17 & 1) != 0)
      {
        return 1;
      }
      else
      {
        v10 = 0;
        *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 6] + ((unint64_t)*a2 >> 24)) = v17 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v10;
}

BOOL sub_22F30DAA8(_QWORD *a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL8 v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  unsigned int v19[24];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 744))(*(_QWORD *)(a1[11] + 15088)) & 1) != 0)
  {
    v10 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24));
    v8 = 1;
    v17 = 1;
    v16 = 0;
    v18 = 0;
    if (!sub_22F30D0F4(a1, a2, 1u, (uint64_t)&v16))
    {
      if (sub_22E508590((uint64_t)&v16, 1))
      {
        sub_22EFFAE7C(a2);
        sub_22E8FCA40(a1, v11, 0xB9Bu, 0, (uint64_t)v19);
        sub_22F0D5A50(v10);
        v13 = v12;
        sub_22F0D60E4(v10);
        v15 = __PAIR64__(v14, v13);
        v8 = *(_BYTE *)(sub_22E8906A0((uint64_t)v19, (uint64_t *)&v15) + 80) != 0;
        sub_22E903BEC(v19);
      }
      else
      {
        v8 = 0;
      }
    }
    if (v17 >= 0x41 && v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
  else
  {
    sub_22EFFAE7C(a2);
    sub_22E8FCA40(a1, v4, 0xB9Cu, 0, (uint64_t)v19);
    sub_22EFFAE7C(a2);
    v6 = v5;
    sub_22EFFAEF8(a2);
    v16 = __PAIR64__(v7, v6);
    v8 = *(_BYTE *)(sub_22E8906A0((uint64_t)v19, (uint64_t *)&v16) + 80) != 0;
    sub_22E903BEC(v19);
  }
  return v8;
}

BOOL sub_22F30DC28(_QWORD *a1, unsigned int *a2)
{
  _BOOL8 v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v10;
  unsigned int v11[24];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 744))(*(_QWORD *)(a1[11] + 15088)) & 1) != 0)
    return 0;
  sub_22EFFAE7C(a2);
  sub_22E8FCA40(a1, v5, 0xBA7u, 0, (uint64_t)v11);
  sub_22EFFAE7C(a2);
  v7 = v6;
  sub_22EFFAEF8(a2);
  v10 = __PAIR64__(v8, v7);
  v4 = *(_BYTE *)(sub_22E8906A0((uint64_t)v11, (uint64_t *)&v10) + 80) != 0;
  sub_22E903BEC(v11);
  return v4;
}

uint64_t sub_22F30DCCC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  void **v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a2 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFELL);
  v7 = (unsigned __int8 **)((a2 & 0xFFFFFFFFFFFFFFFELL) + (v6 >> 24));
  v8 = sub_22EFFBBCC(*v7);
  v9 = (void **)&v7[((v6 >> 18) & 1) + 1];
  v10 = *(unsigned int *)(v5 + 16);
  sub_22EFFAE7C((unsigned int *)v5);
  v12 = v11;
  sub_22EFFAEF8((unsigned int *)v5);
  v14 = v13;
  sub_22F0D4E74((uint64_t)v8);
  return sub_22E983290(a1, v12 | (unint64_t)(v14 << 32), v15, *(_DWORD *)(v5 + 20), v9, v10, a3, 0);
}

uint64_t sub_22F30DD70(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  void **v48[3];
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;

  v4 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  v5 = sub_22EFC01DC(v4, 0);
  v6 = a2[4];
  if (v5 == 1294)
    v7 = 1;
  else
    v7 = 2;
  v51 = v7;
  v52 = v6;
  if (v6 < v7)
  {
    sub_22EFFAEF8(a2);
    sub_22E8FCA40(a1, v8, 0x133Du, 0, (uint64_t)v48);
    v47 = 0;
    v9 = sub_22E8900C4((uint64_t)v48, (int *)&v47);
    v10 = sub_22E89519C(v9, &v51);
    goto LABEL_6;
  }
  if (v6 < (v7 | 0x100))
  {
    v16 = v5;
    v17 = *a2;
    v18 = v17 >> 24;
    if (v5 == 1294)
    {
      v19 = 0;
      v20 = (v17 >> 18) & 1;
    }
    else
    {
      v31 = *(_QWORD *)((char *)&a2[2 * ((v17 >> 18) & 1) + 2] + v18);
      v32 = a1[11];
      v33 = *(_QWORD *)(v32 + 16816);
      v49 = 0;
      LODWORD(v48[0]) = 1;
      v48[1] = 0;
      v48[2] = (void **)sub_22EF60188(v32, v33);
      v50 = 0;
      v34 = sub_22EC45014(a1, v48, 0, v31, 0, 0);
      if ((v34 & 1) != 0)
        return 1;
      v35 = *a2;
      v18 = v35 >> 24;
      v36 = (char *)a2 + (v35 >> 24);
      v20 = (v35 >> 18) & 1;
      *(_QWORD *)&v36[8 * v20 + 8] = v34 & 0xFFFFFFFFFFFFFFFELL;
      v19 = 1;
    }
    v21 = sub_22E984638(a1, *(unsigned __int8 **)((char *)&a2[2 * v20 + 2 + 2 * v19] + v18));
    if ((v21 & 1) == 0)
    {
      v22 = *a2;
      *(_QWORD *)((char *)&a2[2 * ((v22 >> 18) & 1) + 2 + 2 * v19] + (v22 >> 24)) = v21 & 0xFFFFFFFFFFFFFFFELL;
      v47 = v19 + 1;
      v23 = v52;
      if (v19 + 1 >= v52)
      {
LABEL_19:
        if (v16 == 1294)
        {
          v14 = 0;
          *((_QWORD *)a2 + 1) = sub_22EF67C8C(a1[11]);
        }
        else
        {
          sub_22E99E680((unint64_t *)v48, v23, 0);
          v37 = (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
          v38 = a2[4];
          sub_22EFFAE7C(a2);
          v14 = 1;
          v40 = sub_22E9849B0((uint64_t)a1, v37, v38, 1u, v19, v19 + 1, 8u, 0, v39, 0, (uint64_t)v48);
          sub_22E54C5D0(v48);
          if (v40)
          {
            v14 = 0;
            *((_QWORD *)a2 + 1) = *(_QWORD *)(a1[11] + 16816);
          }
        }
        return v14;
      }
      v24 = v19 | 2;
      while (1)
      {
        v25 = sub_22F32D0F4(a1, *(_QWORD *)((char *)&a2[2 * ((v22 >> 18) & 1) + 2 * v24] + BYTE3(v22)), 0, 0);
        if ((v25 & 1) != 0)
          break;
        v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
        sub_22EF5CCD0(a1[11], *(_QWORD *)(*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v48);
        v27 = (int)v48[0];
        if ((uint64_t)v48[0] >= 256)
        {
          sub_22F0D60E4(v26);
          sub_22E8FCA40(a1, v41, 0x1164u, 0, (uint64_t)v48);
          v42 = sub_22E89519C((uint64_t)v48, &v47);
          v45 = v27;
          v43 = sub_22E8900C4(v42, &v45);
          v44 = 255;
          v11 = sub_22E8900C4(v43, &v44);
          goto LABEL_7;
        }
        v22 = *a2;
        *(_QWORD *)((char *)&a2[2 * ((v22 >> 18) & 1) + 2 * v24] + (v22 >> 24)) = v26;
        v47 = v24;
        v23 = v52;
        if (v24++ >= v52)
          goto LABEL_19;
      }
    }
    return 1;
  }
  sub_22EFFAEF8(a2);
  sub_22E8FCA40(a1, v29, 0x1344u, 0, (uint64_t)v48);
  v47 = 0;
  v30 = sub_22E8900C4((uint64_t)v48, (int *)&v47);
  v45 = v7 + 255;
  v10 = sub_22E89519C(v30, (unsigned int *)&v45);
LABEL_6:
  v11 = sub_22E89519C(v10, &v52);
LABEL_7:
  v12 = v11;
  sub_22F0D4E74((uint64_t)a2);
  v46 = v13;
  v14 = *(_BYTE *)(sub_22E8906A0(v12, &v46) + 80) != 0;
  sub_22E903BEC((unsigned int *)v48);
  return v14;
}

uint64_t sub_22F30E104(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v4 = 1;
  if (!sub_22E979C64(a1, a2, 1u))
  {
    v5 = sub_22EB1B998((uint64_t)a1, *(void **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)));
    if ((v5 & 1) == 0)
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)) = v6;
      v7 = *(_QWORD *)(v6 + 8);
      sub_22F0D5A50(v6);
      if ((sub_22E995F64(a1, v8, v7) & 1) == 0)
      {
        v4 = 0;
        *((_QWORD *)a2 + 1) = v7;
      }
    }
  }
  return v4;
}

uint64_t sub_22F30E19C(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL8 v13;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19[24];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!sub_22E979C64(a1, a2, 2u))
  {
    v4 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24);
    v5 = *(_QWORD *)(v4 + 8);
    v22 = *(_QWORD *)(v4 + 16);
    v23 = v5;
    sub_22EFF605C((uint64_t)a2);
    v7 = sub_22EB1F050((uint64_t)a1, &v23, &v22, v6, 2);
    if ((v23 & 1) == 0 && (v22 & 1) == 0)
    {
      v8 = v7;
      v9 = v23 & 0xFFFFFFFFFFFFFFFELL;
      v10 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v11 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v20 = v11;
      v21 = v10;
      if (v8 < 0x10
        || (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) | v10 & 7) != (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) | v11 & 7))
      {
        sub_22F0D5A50(v9);
        sub_22E8FCA40(a1, v15, 0x1338u, 0, (uint64_t)v19);
        v16 = sub_22E8901B8((uint64_t)v19, &v21);
        v13 = *(_BYTE *)(sub_22E8901B8(v16, &v20) + 80) != 0;
        sub_22E903BEC(v19);
        return v13;
      }
      sub_22F0D5A50(v9);
      if ((sub_22E995F64(a1, v12, v10) & 1) == 0)
      {
        v13 = 0;
        v17 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24);
        v18 = v22 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v17 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v17 + 16) = v18;
        *((_QWORD *)a2 + 1) = v8;
        return v13;
      }
    }
  }
  return 1;
}

uint64_t sub_22F30E300(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = 1;
  if (!sub_22E979C64(a1, a2, 1u))
  {
    v5 = sub_22EB1B998((uint64_t)a1, *(void **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)));
    if ((v5 & 1) == 0)
    {
      v4 = 0;
      *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)) = v5 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  return v4;
}

uint64_t sub_22F30E378(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18[24];

  v6 = 1;
  if (!sub_22E979C64(a1, a2, 1u))
  {
    v7 = sub_22EB1A358(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), 0);
    v6 = v7;
    if ((v7 & 1) == 0)
    {
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = *(_QWORD *)(*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v9)
        v10 = *(_BYTE *)(v9 + 16) == 29;
      else
        v10 = 0;
      if (v10
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29
        && (v9 = sub_22F10CF48(v9)) != 0)
      {
        *((_QWORD *)a2 + 1) = sub_22F36BBA8(a1[11], *(_QWORD *)(v9 + 32), *(unsigned int *)(v9 + 44), *(unsigned int *)(v9 + 40));
        *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)) = v8;
        return a3;
      }
      else
      {
        sub_22F0D5A50(v6 & 0xFFFFFFFFFFFFFFFELL);
        sub_22E8FCA40(a1, v11, 0xB99u, 0, (uint64_t)v18);
        v6 = 1;
        v17 = 1;
        v12 = sub_22E8900C4((uint64_t)v18, &v17);
        v16 = 1;
        v13 = sub_22E8900C4(v12, &v16);
        v15 = *(_QWORD *)(v8 + 8);
        sub_22E8901B8(v13, &v15);
        sub_22E903BEC(v18);
      }
    }
  }
  return v6;
}

BOOL sub_22F30E4BC(_QWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int v9;
  _BOOL8 result;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int *v21;

  v5 = 0;
  if (a2 > 4522)
  {
    switch(a2)
    {
      case 5129:
      case 5131:
      case 5133:
      case 5135:
      case 5137:
      case 5139:
      case 5141:
      case 5143:
      case 5147:
      case 5150:
      case 5194:
      case 5196:
      case 5206:
      case 5208:
      case 5265:
      case 5267:
      case 5269:
      case 5271:
      case 5273:
      case 5275:
      case 5277:
      case 5279:
      case 5283:
      case 5286:
      case 5313:
      case 5316:
      case 5319:
      case 5322:
LABEL_7:
        v6 = a3;
        v7 = 2;
        goto LABEL_8;
      case 5130:
      case 5132:
      case 5134:
      case 5136:
      case 5138:
      case 5140:
      case 5142:
      case 5144:
      case 5145:
      case 5148:
      case 5193:
      case 5195:
      case 5205:
      case 5207:
      case 5266:
      case 5268:
      case 5270:
      case 5272:
      case 5274:
      case 5276:
      case 5278:
      case 5280:
      case 5281:
      case 5284:
      case 5311:
      case 5314:
      case 5317:
      case 5320:
LABEL_13:
        v6 = a3;
        v7 = 2;
        goto LABEL_14;
      case 5146:
      case 5149:
      case 5181:
      case 5182:
      case 5183:
      case 5184:
      case 5185:
      case 5186:
      case 5187:
      case 5188:
      case 5189:
      case 5190:
      case 5191:
      case 5192:
      case 5282:
      case 5285:
      case 5312:
      case 5315:
      case 5318:
      case 5321:
LABEL_19:
        v6 = a3;
        v7 = 2;
        goto LABEL_31;
      case 5151:
      case 5154:
      case 5157:
      case 5160:
      case 5197:
      case 5199:
      case 5201:
      case 5203:
      case 5209:
      case 5211:
      case 5213:
      case 5215:
      case 5287:
      case 5290:
      case 5293:
      case 5296:
LABEL_18:
        v6 = a3;
        v7 = 1;
LABEL_14:
        v8 = 1;
        v9 = 16;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5152:
      case 5155:
      case 5158:
      case 5161:
      case 5288:
      case 5291:
      case 5294:
      case 5297:
LABEL_30:
        v6 = a3;
        v7 = 1;
LABEL_31:
        v8 = 1;
        v9 = 32;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5153:
      case 5156:
      case 5159:
      case 5162:
      case 5198:
      case 5200:
      case 5202:
      case 5204:
      case 5210:
      case 5212:
      case 5214:
      case 5216:
      case 5289:
      case 5292:
      case 5295:
      case 5298:
        v6 = a3;
        v7 = 1;
LABEL_8:
        v8 = 1;
        v9 = 8;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5163:
      case 5164:
      case 5165:
      case 5166:
      case 5167:
      case 5168:
      case 5169:
      case 5170:
      case 5223:
      case 5224:
      case 5225:
      case 5226:
      case 5227:
      case 5228:
      case 5229:
      case 5230:
      case 5231:
      case 5232:
      case 5233:
      case 5234:
      case 5241:
      case 5242:
      case 5243:
      case 5244:
      case 5245:
      case 5246:
      case 5247:
      case 5248:
      case 5249:
      case 5250:
      case 5251:
      case 5252:
      case 5259:
      case 5260:
      case 5261:
      case 5262:
      case 5263:
      case 5264:
      case 5323:
      case 5324:
      case 5325:
      case 5326:
      case 5327:
      case 5328:
      case 5329:
      case 5330:
      case 5331:
      case 5332:
      case 5333:
      case 5334:
      case 5335:
      case 5336:
      case 5337:
      case 5338:
      case 5339:
      case 5340:
      case 5341:
      case 5342:
      case 5343:
      case 5344:
      case 5345:
      case 5346:
      case 5347:
      case 5348:
      case 5349:
      case 5350:
      case 5351:
      case 5352:
      case 5353:
      case 5354:
      case 5355:
      case 5356:
      case 5357:
      case 5358:
      case 5359:
      case 5360:
      case 5361:
      case 5362:
      case 5363:
      case 5364:
      case 5365:
      case 5366:
      case 5367:
      case 5368:
      case 5369:
      case 5370:
      case 5371:
      case 5372:
      case 5373:
      case 5374:
      case 5375:
      case 5376:
      case 5377:
      case 5378:
      case 5387:
      case 5388:
      case 5389:
      case 5390:
      case 5391:
      case 5392:
      case 5393:
      case 5394:
      case 5395:
      case 5396:
      case 5397:
      case 5398:
      case 5399:
      case 5400:
      case 5401:
      case 5402:
      case 5403:
      case 5404:
      case 5405:
      case 5406:
      case 5407:
      case 5408:
      case 5409:
      case 5410:
      case 5411:
      case 5412:
      case 5413:
      case 5414:
      case 5415:
      case 5416:
      case 5417:
      case 5418:
      case 5419:
      case 5420:
      case 5421:
      case 5422:
      case 5423:
      case 5424:
      case 5425:
      case 5426:
      case 5427:
      case 5428:
      case 5429:
        return v5;
      case 5171:
      case 5173:
      case 5177:
      case 5219:
      case 5222:
      case 5301:
      case 5304:
      case 5307:
      case 5310:
LABEL_33:
        v6 = a3;
        v7 = 2;
        goto LABEL_5;
      case 5172:
      case 5174:
      case 5178:
        v6 = a3;
        v7 = 2;
LABEL_41:
        v8 = 0;
        v9 = 3;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5175:
      case 5179:
        v6 = a3;
        v7 = 2;
LABEL_45:
        v8 = 0;
        v9 = 1;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5176:
      case 5180:
      case 5217:
      case 5220:
      case 5299:
      case 5302:
      case 5305:
      case 5308:
LABEL_35:
        v6 = a3;
        v7 = 2;
        goto LABEL_36;
      case 5218:
      case 5221:
      case 5300:
      case 5303:
      case 5306:
      case 5309:
LABEL_37:
        v6 = a3;
        v7 = 2;
        goto LABEL_38;
      case 5235:
      case 5238:
      case 5253:
      case 5256:
LABEL_34:
        v6 = a3;
        v7 = 1;
LABEL_36:
        v8 = 0;
        v9 = 15;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5236:
      case 5239:
      case 5254:
      case 5257:
LABEL_39:
        v6 = a3;
        v7 = 1;
LABEL_38:
        v8 = 0;
        v9 = 31;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5237:
      case 5240:
      case 5255:
      case 5258:
LABEL_4:
        v6 = a3;
        v7 = 1;
LABEL_5:
        v8 = 0;
        v9 = 7;
        return sub_22E9797E0((uint64_t)a1, v6, v7, v8, v9, 1);
      case 5379:
      case 5380:
      case 5381:
      case 5382:
      case 5383:
      case 5384:
      case 5385:
      case 5386:
LABEL_26:
        v5 = 1;
        if (sub_22E9797E0((uint64_t)a1, a3, 1u, -1016, 1016, 1))
          return v5;
        v14 = a1;
        v15 = a3;
        v16 = 8;
        break;
      case 5430:
      case 5431:
      case 5432:
      case 5433:
      case 5434:
      case 5435:
      case 5436:
      case 5437:
      case 5438:
      case 5439:
      case 5440:
      case 5441:
LABEL_21:
        v5 = 1;
        if (sub_22E9797E0((uint64_t)a1, a3, 1u, -508, 508, 1))
          return v5;
        v14 = a1;
        v15 = a3;
        v16 = 4;
        break;
      default:
        switch(a2)
        {
          case 4758:
          case 4760:
          case 4762:
          case 4764:
          case 4766:
          case 4768:
          case 4770:
          case 4772:
          case 4774:
          case 4776:
          case 4778:
          case 4780:
          case 4824:
          case 4826:
          case 4828:
          case 4830:
          case 4832:
          case 4834:
          case 4836:
          case 4838:
          case 4840:
          case 4842:
          case 4844:
          case 4846:
            goto LABEL_7;
          case 4759:
          case 4761:
          case 4763:
          case 4765:
          case 4767:
          case 4769:
          case 4771:
          case 4773:
          case 4775:
          case 4777:
          case 4779:
          case 4781:
          case 4825:
          case 4827:
          case 4829:
          case 4831:
          case 4833:
          case 4835:
          case 4837:
          case 4839:
          case 4841:
          case 4843:
          case 4845:
          case 4847:
            goto LABEL_13;
          case 4782:
          case 4785:
          case 4818:
            goto LABEL_35;
          case 4783:
          case 4786:
          case 4819:
            goto LABEL_37;
          case 4784:
          case 4787:
          case 4820:
            goto LABEL_33;
          case 4788:
          case 4789:
          case 4790:
          case 4791:
          case 4792:
          case 4793:
          case 4794:
          case 4795:
          case 4796:
          case 4797:
          case 4798:
          case 4799:
          case 4806:
          case 4807:
          case 4808:
          case 4809:
          case 4810:
          case 4811:
          case 4812:
          case 4813:
          case 4814:
          case 4815:
          case 4816:
          case 4817:
            return v5;
          case 4800:
          case 4803:
          case 4821:
            goto LABEL_34;
          case 4801:
          case 4804:
          case 4822:
            goto LABEL_39;
          case 4802:
          case 4805:
          case 4823:
            goto LABEL_4;
          default:
            v19 = a2 - 4523;
            goto LABEL_52;
        }
    }
    return sub_22F30E918(v14, v15, 1u, v16);
  }
  else
  {
    if (a2 <= 3883)
    {
      switch(a2)
      {
        case 3639:
        case 3640:
        case 3643:
        case 3645:
          goto LABEL_13;
        case 3641:
        case 3642:
        case 3644:
        case 3646:
          goto LABEL_19;
        case 3647:
        case 3648:
        case 3649:
        case 3650:
        case 3659:
        case 3660:
        case 3661:
        case 3662:
        case 3663:
        case 3664:
        case 3665:
        case 3666:
        case 3675:
        case 3676:
        case 3677:
        case 3678:
        case 3679:
        case 3680:
        case 3681:
        case 3682:
        case 3683:
        case 3702:
        case 3703:
        case 3704:
        case 3705:
        case 3706:
        case 3707:
        case 3708:
        case 3709:
        case 3710:
        case 3711:
        case 3712:
        case 3713:
        case 3714:
        case 3715:
        case 3716:
        case 3717:
        case 3718:
        case 3719:
        case 3720:
        case 3721:
        case 3722:
        case 3723:
        case 3724:
        case 3725:
        case 3744:
        case 3745:
        case 3746:
        case 3747:
        case 3748:
        case 3749:
        case 3750:
        case 3751:
        case 3752:
        case 3753:
        case 3754:
        case 3755:
        case 3756:
        case 3757:
        case 3758:
        case 3759:
        case 3760:
        case 3761:
        case 3762:
        case 3763:
        case 3764:
        case 3765:
        case 3766:
        case 3767:
        case 3768:
        case 3769:
        case 3770:
        case 3771:
        case 3772:
        case 3773:
        case 3774:
        case 3775:
        case 3776:
        case 3777:
        case 3778:
        case 3779:
        case 3780:
        case 3781:
        case 3782:
        case 3783:
          return v5;
        case 3651:
        case 3652:
        case 3655:
        case 3657:
        case 3667:
        case 3668:
        case 3671:
        case 3673:
          goto LABEL_18;
        case 3653:
        case 3654:
        case 3656:
        case 3658:
        case 3669:
        case 3670:
        case 3672:
        case 3674:
          goto LABEL_30;
        case 3684:
        case 3685:
        case 3686:
        case 3687:
        case 3688:
        case 3689:
        case 3732:
        case 3733:
        case 3734:
        case 3735:
        case 3736:
        case 3737:
        case 3738:
        case 3739:
        case 3740:
        case 3741:
        case 3742:
        case 3743:
          goto LABEL_10;
        case 3690:
        case 3691:
        case 3692:
        case 3693:
        case 3694:
        case 3695:
        case 3696:
        case 3697:
        case 3698:
        case 3699:
        case 3700:
        case 3701:
          goto LABEL_16;
        case 3726:
        case 3727:
        case 3728:
        case 3729:
        case 3730:
        case 3731:
          goto LABEL_24;
        case 3784:
        case 3786:
        case 3790:
          goto LABEL_4;
        case 3785:
        case 3787:
        case 3791:
          v6 = a3;
          v7 = 1;
          goto LABEL_41;
        case 3788:
        case 3792:
          v6 = a3;
          v7 = 1;
          goto LABEL_45;
        case 3789:
        case 3793:
          goto LABEL_34;
        default:
          if ((a2 - 3047) <= 0xA && ((1 << (a2 + 25)) & 0x78F) != 0)
            goto LABEL_30;
          v19 = a2 - 3225;
          break;
      }
LABEL_52:
      if (v19 <= 0xD)
      {
        v20 = 1 << v19;
        if ((v20 & 0x1405) != 0)
        {
          v21 = a3;
          return sub_22F30ECB8(a1, v21);
        }
        if ((v20 & 0x280A) != 0)
        {
          v21 = a3;
          return sub_22F30ECB8(a1, v21);
        }
      }
      return v5;
    }
    switch(a2)
    {
      case 3884:
      case 3885:
      case 3886:
      case 3887:
      case 3888:
      case 3889:
      case 3908:
      case 3909:
      case 3910:
      case 3911:
      case 3912:
      case 3913:
      case 3914:
      case 3915:
      case 3916:
      case 3917:
      case 3918:
      case 3919:
LABEL_10:
        v5 = 1;
        if (sub_22E9797E0((uint64_t)a1, a3, 2u, 1, 8, 1))
          return v5;
        v11 = a1;
        v12 = a3;
        v13 = 2;
        goto LABEL_43;
      case 3890:
      case 3891:
      case 3892:
      case 3893:
      case 3894:
      case 3895:
      case 3896:
      case 3897:
      case 3898:
      case 3899:
      case 3900:
      case 3901:
LABEL_16:
        v5 = 1;
        if (sub_22E9797E0((uint64_t)a1, a3, 1u, 1, 8, 1))
          return v5;
        v11 = a1;
        v12 = a3;
        v13 = 1;
        goto LABEL_43;
      case 3902:
      case 3903:
      case 3904:
      case 3905:
      case 3906:
      case 3907:
LABEL_24:
        v5 = 1;
        if (sub_22E9797E0((uint64_t)a1, a3, 3u, 1, 8, 1))
          return v5;
        v11 = a1;
        v12 = a3;
        v13 = 3;
LABEL_43:
        result = sub_22F30EA70(v11, v12, v13);
        break;
      case 3920:
      case 3921:
      case 3922:
      case 3923:
      case 3924:
      case 3925:
      case 3926:
      case 3927:
      case 3928:
      case 3929:
      case 3930:
      case 3931:
      case 3932:
      case 3933:
      case 3934:
      case 3935:
      case 3936:
      case 3937:
      case 3938:
      case 3939:
      case 3940:
      case 3941:
      case 3942:
      case 3943:
      case 3944:
      case 3945:
      case 3946:
      case 3947:
      case 3948:
      case 3949:
      case 3950:
      case 3951:
      case 3952:
      case 3953:
      case 3954:
      case 3955:
      case 3956:
      case 3957:
      case 3958:
      case 3959:
      case 3960:
      case 3961:
      case 3962:
      case 3963:
      case 3964:
      case 3965:
      case 3966:
      case 3967:
      case 3968:
      case 3969:
      case 3970:
      case 3971:
      case 3972:
      case 3973:
      case 3974:
      case 3975:
        return v5;
      case 3976:
      case 3977:
      case 3978:
      case 3979:
      case 3980:
      case 3981:
      case 3982:
      case 3983:
        goto LABEL_26;
      default:
        if ((a2 - 4023) < 0xC)
          goto LABEL_21;
        switch(a2)
        {
          case 4450:
          case 4452:
            v17 = a3;
            v18 = 1;
            break;
          case 4451:
          case 4453:
            v17 = a3;
            v18 = 1;
            break;
          case 4460:
          case 4462:
          case 4470:
          case 4472:
            v17 = a3;
            v18 = 0;
            break;
          case 4461:
          case 4463:
          case 4471:
          case 4473:
            v17 = a3;
            v18 = 0;
            break;
          default:
            return v5;
        }
        result = sub_22F30EE78(a1, v17, v18);
        break;
    }
  }
  return result;
}

BOOL sub_22F30E918(_QWORD *a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  _BOOL8 v4;
  _DWORD *v5;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17[24];
  uint64_t *v18;
  unsigned int v19;
  char v20;
  unsigned int v21;

  v4 = 0;
  v21 = a4;
  v19 = 1;
  v18 = 0;
  v20 = 0;
  v5 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * a3] + ((unint64_t)*a2 >> 24));
  if ((*v5 & 0x18000) == 0)
  {
    v10 = sub_22F30D0F4(a1, a2, a3, (uint64_t)&v18);
    v11 = v19;
    if (v10)
    {
      v4 = 1;
    }
    else
    {
      if (v19 > 0x40)
        v12 = *v18;
      else
        v12 = (uint64_t)((_QWORD)v18 << -(char)v19) >> -(char)v19;
      if (v12 % a4)
      {
        sub_22EFFAE7C(a2);
        sub_22E8FCA40(a1, v13, 0xA84u, 0, (uint64_t)v17);
        v14 = sub_22E89519C((uint64_t)v17, &v21);
        sub_22F0D4E74((uint64_t)v5);
        v16 = v15;
        v4 = *(_BYTE *)(sub_22E8906A0(v14, &v16) + 80) != 0;
        sub_22E903BEC(v17);
        v11 = v19;
      }
      else
      {
        v4 = 0;
      }
    }
    if (v11 >= 0x41 && v18)
      MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
  }
  return v4;
}

BOOL sub_22F30EA70(_QWORD *a1, unsigned int *a2, unsigned int a3)
{
  _BOOL8 v3;
  _DWORD *v4;
  unsigned int v8;
  _QWORD *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  char v22;

  v3 = 0;
  v21 = 1;
  v20 = 0;
  v22 = 0;
  v4 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * a3] + ((unint64_t)*a2 >> 24));
  if ((*v4 & 0x18000) == 0)
  {
    if (sub_22F30D0F4(a1, a2, a3, (uint64_t)&v20))
    {
      v3 = 1;
      goto LABEL_2;
    }
    if (!sub_22E984E5C((uint64_t)&v20))
    {
LABEL_20:
      sub_22EFFAE7C(a2);
      sub_22E8FCA40(a1, v11, 0xA85u, 0, (uint64_t)&v14);
      sub_22F0D4E74((uint64_t)v4);
      v18 = (_QWORD *)v12;
      v3 = *(_BYTE *)(sub_22E8906A0((uint64_t)&v14, (uint64_t *)&v18) + 80) != 0;
      sub_22E903BEC((unsigned int *)&v14);
      goto LABEL_2;
    }
    v17 = v21;
    if (v21 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const llvm::APInt *)&v20);
    else
      v16 = v20;
    llvm::APInt::operator-=();
    v8 = v17;
    v19 = v17;
    v18 = (_QWORD *)v16;
    v17 = 0;
    if (v8 > 0x40)
    {
      llvm::APInt::andAssignSlowCase((llvm::APInt *)&v18, (const llvm::APInt *)&v20);
      v9 = v18;
      v15 = v19;
      v13 = v19;
      v14 = (uint64_t)v18;
      v19 = 0;
      if (v13 >= 0x41)
      {
        v10 = v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v14) < 0x41 && *v9 == 0;
        if (v9)
        {
          MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
          if (v19 >= 0x41)
          {
            if (v18)
              MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
          }
        }
LABEL_15:
        if (v17 >= 0x41 && v16)
          MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
        if (v10)
        {
          v3 = 0;
          goto LABEL_2;
        }
        goto LABEL_20;
      }
    }
    else
    {
      v9 = (_QWORD *)(v20 & v16);
      v18 = (_QWORD *)(v20 & v16);
      v15 = v8;
      v14 = v20 & v16;
      v19 = 0;
    }
    v10 = v9 == 0;
    goto LABEL_15;
  }
LABEL_2:
  if (v21 >= 0x41 && v20)
    MEMORY[0x2348A0E84](v20, 0x1000C8000313F17);
  return v3;
}

BOOL sub_22F30ECB8(_QWORD *a1, unsigned int *a2)
{
  _BOOL8 v2;
  _DWORD *v3;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12[24];
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  char v20;

  v2 = 0;
  v19 = 1;
  v18 = 0;
  v20 = 0;
  v3 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24));
  if ((*v3 & 0x18000) == 0)
  {
    v2 = 1;
    if (!sub_22F30D0F4(a1, a2, 1u, (uint64_t)&v18))
    {
      llvm::APInt::getLoBits((llvm::APInt *)&v18);
      if (v19 >= 0x41 && v18)
        MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
      v18 = v16;
      v19 = v17;
      v17 = 0;
      v20 = 1;
      v14 = v19;
      if (v19 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v13, (const llvm::APInt *)&v18);
        v7 = v20;
      }
      else
      {
        v13 = v16;
        v7 = 1;
      }
      v15 = v7;
      v8 = sub_22E984ED4((uint64_t)&v13);
      if (v14 >= 0x41 && v13)
        MEMORY[0x2348A0E84](v13, 0x1000C8000313F17);
      if ((v8 & 1) != 0)
      {
        v2 = 0;
      }
      else
      {
        sub_22EFFAE7C(a2);
        sub_22E8FCA40(a1, v9, 0xA86u, 0, (uint64_t)v12);
        sub_22F0D4E74((uint64_t)v3);
        v11 = v10;
        v2 = *(_BYTE *)(sub_22E8906A0((uint64_t)v12, &v11) + 80) != 0;
        sub_22E903BEC(v12);
      }
    }
  }
  if (v19 >= 0x41 && v18)
    MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
  return v2;
}

BOOL sub_22F30EE78(_QWORD *a1, unsigned int *a2, unsigned int a3)
{
  _BOOL8 v3;
  _DWORD *v4;
  char v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char v28;

  v3 = 0;
  v27 = 1;
  v26 = 0;
  v28 = 0;
  v4 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * a3] + ((unint64_t)*a2 >> 24));
  if ((*v4 & 0x18000) != 0)
    goto LABEL_2;
  if (sub_22F30D0F4(a1, a2, a3, (uint64_t)&v26))
  {
    v3 = 1;
    goto LABEL_2;
  }
  llvm::APInt::getLoBits((llvm::APInt *)&v26);
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  v26 = v24;
  v27 = v25;
  v25 = 0;
  v28 = 1;
  v22 = v27;
  if (v27 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, (const llvm::APInt *)&v26);
    v8 = v28;
  }
  else
  {
    v21 = v24;
    v8 = 1;
  }
  v23 = v8;
  if ((sub_22E984ED4((uint64_t)&v21) & 1) != 0)
  {
    v9 = 1;
    goto LABEL_16;
  }
  if (sub_22E42E8B8((uint64_t)&v26, 0) && sub_22E8BAD7C((uint64_t)&v26, 0x10000))
  {
    v20 = v27;
    if (v27 < 0x41)
    {
      v10 = &v26;
LABEL_25:
      v11 = (_QWORD *)*(unsigned __int8 *)v10;
      v19 = v11;
      v20 = 0;
LABEL_26:
      v9 = v11 == (_QWORD *)255;
      goto LABEL_16;
    }
    v10 = (uint64_t *)&v19;
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const llvm::APInt *)&v26);
    v14 = v20;
    if (v20 <= 0x40)
      goto LABEL_25;
    *v19 = *(unsigned __int8 *)v19;
    v11 = v19;
    bzero(v19 + 1, (((unint64_t)(v14 + 63) >> 3) - 8) & 0xFFFFFFF8);
    v15 = v20;
    v18 = v20;
    v17 = v11;
    v20 = 0;
    if (v18 < 0x41)
      goto LABEL_26;
    if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v17) < 0x41)
    {
      v9 = *v11 == 255;
LABEL_33:
      MEMORY[0x2348A0E84](v11, 0x1000C8000313F17);
      if (v20 >= 0x41 && v19)
        MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
      goto LABEL_16;
    }
    v9 = 0;
    if (v11)
      goto LABEL_33;
  }
  else
  {
    v9 = 0;
  }
LABEL_16:
  if (v22 >= 0x41 && v21)
    MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
  if (v9)
  {
    v3 = 0;
  }
  else
  {
    sub_22EFFAE7C(a2);
    sub_22E8FCA40(a1, v12, 0xA87u, 0, (uint64_t)&v17);
    sub_22F0D4E74((uint64_t)v4);
    v16 = v13;
    v3 = *(_BYTE *)(sub_22E8906A0((uint64_t)&v17, &v16) + 80) != 0;
    sub_22E903BEC((unsigned int *)&v17);
  }
LABEL_2:
  if (v27 >= 0x41 && v26)
    MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
  return v3;
}

BOOL sub_22F30F160(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;

  switch(a3)
  {
    case 6010:
    case 6012:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 1;
      goto LABEL_25;
    case 6011:
    case 6013:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 2;
LABEL_25:
      v11 = 0x1FFF;
      goto LABEL_11;
    case 6014:
    case 6016:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 2;
      goto LABEL_30;
    case 6015:
    case 6017:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 3;
LABEL_30:
      v11 = 511;
      goto LABEL_11;
    case 6018:
    case 6020:
    case 6058:
    case 6060:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 3;
      goto LABEL_20;
    case 6019:
    case 6021:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 4;
      goto LABEL_20;
    case 6022:
    case 6024:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 1;
      goto LABEL_37;
    case 6023:
    case 6025:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 2;
LABEL_37:
      v11 = 2047;
      goto LABEL_11;
    case 6026:
    case 6027:
    case 6028:
    case 6029:
    case 6030:
    case 6031:
    case 6032:
    case 6033:
    case 6034:
    case 6035:
    case 6037:
    case 6038:
    case 6039:
    case 6040:
    case 6041:
    case 6042:
    case 6043:
    case 6044:
    case 6045:
    case 6046:
    case 6047:
    case 6048:
    case 6049:
    case 6050:
    case 6051:
    case 6052:
    case 6053:
    case 6054:
    case 6055:
    case 6056:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 2;
      goto LABEL_4;
    case 6036:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 1;
LABEL_4:
      v11 = 4095;
      goto LABEL_11;
    case 6057:
    case 6059:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 2;
LABEL_20:
      v11 = 63;
      goto LABEL_11;
    case 6061:
    case 6062:
    case 6073:
    case 6074:
    case 6075:
    case 6076:
    case 6077:
    case 6078:
    case 6079:
    case 6080:
    case 6081:
    case 6082:
    case 6083:
    case 6084:
    case 6085:
    case 6086:
    case 6087:
    case 6088:
    case 6089:
    case 6090:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 2;
      goto LABEL_7;
    case 6063:
    case 6064:
    case 6065:
    case 6066:
    case 6067:
    case 6068:
    case 6069:
    case 6070:
    case 6071:
    case 6072:
    case 6091:
    case 6092:
    case 6093:
    case 6094:
    case 6095:
    case 6096:
    case 6097:
    case 6098:
    case 6099:
    case 6100:
    case 6101:
    case 6102:
    case 6103:
    case 6104:
    case 6105:
    case 6106:
    case 6107:
    case 6108:
    case 6109:
    case 6110:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 3;
LABEL_7:
      v11 = 127;
      goto LABEL_11;
    case 6111:
    case 6113:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 3;
      goto LABEL_44;
    case 6112:
    case 6114:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 4;
LABEL_44:
      v11 = 7;
      goto LABEL_11;
    case 6115:
    case 6116:
    case 6117:
    case 6118:
    case 6119:
    case 6120:
    case 6121:
    case 6122:
    case 6123:
    case 6124:
    case 6135:
    case 6136:
    case 6137:
    case 6138:
    case 6139:
    case 6140:
    case 6141:
    case 6142:
    case 6143:
    case 6144:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 3;
      goto LABEL_10;
    case 6125:
    case 6126:
    case 6127:
    case 6128:
    case 6129:
    case 6130:
    case 6131:
    case 6132:
    case 6133:
    case 6134:
    case 6145:
    case 6146:
    case 6147:
    case 6148:
    case 6149:
    case 6150:
    case 6151:
    case 6152:
    case 6153:
    case 6154:
    case 6155:
    case 6156:
    case 6157:
    case 6158:
    case 6159:
    case 6160:
    case 6161:
    case 6162:
    case 6163:
    case 6164:
      v7 = 1;
      if (sub_22E9797E0(a1, a4, 0, 0, 7, 1))
        return v7;
      v8 = a1;
      v9 = a4;
      v10 = 4;
LABEL_10:
      v11 = 15;
LABEL_11:
      if (sub_22E9797E0(v8, v9, v10, 0, v11, 1))
        return v7;
      else
        return sub_22E97C9CC(a1, a2, *(_DWORD **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), 1);
    default:
      return 0;
  }
}

BOOL sub_22F30F5AC(_QWORD *a1, int a2, unsigned int *a3)
{
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  int v54;
  _QWORD *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71[24];
  uint64_t v72;

  if (a2 == 9004)
  {
    if (sub_22E979C64(a1, a3, 2u))
      return 1;
    v14 = (unint64_t)&a3[2 * (((unint64_t)*a3 >> 18) & 1)] + ((unint64_t)*a3 >> 24);
    v8 = *(void **)(v14 + 8);
    v7 = *(_QWORD **)(v14 + 16);
    v9 = 1;
    v15 = sub_22EB1B954((uint64_t)a1, v8);
    if ((v15 & 1) != 0)
      return v9;
    v72 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v16 != 32 && v16 != 39)
    {
LABEL_64:
      sub_22EFFAE7C(a3);
      sub_22E8FCA40(a1, v59, 0xECAu, 0, (uint64_t)v71);
      v60 = sub_22F2F30F4((uint64_t)v71, (uint64_t)"first");
      v43 = sub_22E8901B8(v60, &v72);
      v61 = (uint64_t)v8;
LABEL_65:
      sub_22F0D4E74(v61);
      v70 = v62;
      v52 = &v70;
      goto LABEL_63;
    }
    v70 = v7[1];
    if (!sub_22E479BE0(*(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF0)))
    {
LABEL_60:
      sub_22EFFAE7C(a3);
      v54 = v53;
      v55 = a1;
      v56 = 3785;
LABEL_61:
      sub_22E8FCA40(v55, v54, v56, 0, (uint64_t)v71);
      v57 = sub_22F2F30F4((uint64_t)v71, (uint64_t)"second");
      v43 = sub_22E8901B8(v57, &v70);
      v44 = (uint64_t)v7;
      goto LABEL_62;
    }
    v9 = 0;
    v17 = *(_QWORD *)(a1[11] + 16480);
    goto LABEL_17;
  }
  if (a2 == 9003)
  {
    if (!sub_22E979C64(a1, a3, 2u))
    {
      v21 = *(void **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
      v9 = 1;
      v22 = sub_22EB1B954((uint64_t)a1, v21);
      if ((v22 & 1) != 0)
        return v9;
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v72 = v23;
      v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      if (v24 == 32 || v24 == 39)
      {
        *(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24)) = v22 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)a3 + 1) = v23;
        return sub_22E9797E0((uint64_t)a1, a3, 1u, 0, 15, 1);
      }
      sub_22EFFAE7C(a3);
      sub_22E8FCA40(a1, v63, 0xECAu, 0, (uint64_t)v71);
      v64 = sub_22F2F30F4((uint64_t)v71, (uint64_t)"first");
      v43 = sub_22E8901B8(v64, &v72);
      v61 = (uint64_t)v21;
      goto LABEL_65;
    }
    return 1;
  }
  if (a2 != 9002)
  {
    if ((a2 - 9005) > 1)
    {
      if (a2 != 9007)
        return 1;
      v25 = (unint64_t)&a3[2 * (((unint64_t)*a3 >> 18) & 1)] + ((unint64_t)*a3 >> 24);
      v26 = *(void **)(v25 + 8);
      v7 = *(_QWORD **)(v25 + 16);
      v9 = 1;
      v27 = sub_22EB1B954((uint64_t)a1, v26);
      v28 = sub_22EB1B954((uint64_t)a1, v7);
      if (((v27 | v28) & 1) != 0)
        return v9;
      v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v72 = v29;
      v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
      v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v70 = v31;
      v32 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFF0);
      v33 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      if (v33 == 32 || v33 == 39 || sub_22EFFBE1C((unint64_t)v26, a1[11], 2))
      {
        v34 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFF0);
        v35 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16);
        if (v35 != 32 && v35 != 39 && !sub_22EFFBE1C((unint64_t)v7, a1[11], 2))
        {
          sub_22EFFAE7C(a3);
          v54 = v66;
          v55 = a1;
          v56 = 3787;
          goto LABEL_61;
        }
        v36 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if ((v36 == 39 || v36 == 32) && !sub_22EFFBE1C((unint64_t)v26, a1[11], 2))
        {
          v45 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if ((v45 == 39 || v45 == 32) && !sub_22EFFBE1C((unint64_t)v7, a1[11], 2))
          {
            v67 = sub_22F10ACF8(*v32);
            v46 = sub_22F10ACF8(*v34);
            if (!sub_22F36EDA0(a1[11], *(_QWORD *)(*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(*(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 0))
            {
              sub_22EFFAE7C(a3);
              sub_22E8FCA40(a1, v47, 0x1392u, 0, (uint64_t)v71);
              v48 = sub_22E8901B8((uint64_t)v71, &v72);
              v49 = sub_22E8901B8(v48, &v70);
              sub_22F0D4E74((uint64_t)v26);
              v69 = v50;
              v43 = sub_22E8906A0(v49, &v69);
              sub_22F0D4E74((uint64_t)v7);
              v68 = v51;
              v52 = &v68;
LABEL_63:
              v9 = *(_BYTE *)(sub_22E8906A0(v43, v52) + 80) != 0;
              sub_22E903BEC(v71);
              return v9;
            }
          }
        }
        v37 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v37 == 32
          || v37 == 39
          || (v39 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16), v39 == 32)
          || v39 == 39)
        {
          if (sub_22EFFBE1C((unint64_t)v26, a1[11], 2))
            v27 = sub_22E90092C((uint64_t)a1, v27 & 0xFFFFFFFFFFFFFFFELL, v31, 14, 0, 0);
          if (sub_22EFFBE1C((unint64_t)v7, a1[11], 2))
            v30 = sub_22E90092C((uint64_t)a1, v30, v29, 14, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
          v9 = 0;
          v38 = (unint64_t)&a3[2 * (((unint64_t)*a3 >> 18) & 1)] + ((unint64_t)*a3 >> 24);
          *(_QWORD *)(v38 + 8) = v27 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)(v38 + 16) = v30;
          v17 = *(_QWORD *)(a1[11] + 16496);
          goto LABEL_17;
        }
        sub_22EFFAE7C(a3);
        sub_22E8FCA40(a1, v40, 0xEC8u, 0, (uint64_t)v71);
        v41 = sub_22E8901B8((uint64_t)v71, &v72);
        v42 = &v70;
      }
      else
      {
        sub_22EFFAE7C(a3);
        sub_22E8FCA40(a1, v65, 0xECBu, 0, (uint64_t)v71);
        v41 = sub_22F2F30F4((uint64_t)v71, (uint64_t)"first");
        v42 = &v72;
      }
      v43 = sub_22E8901B8(v41, v42);
      v44 = (uint64_t)v26;
LABEL_62:
      sub_22F0D4E74(v44);
      v69 = v58;
      v52 = &v69;
      goto LABEL_63;
    }
    v9 = 1;
    if (sub_22E979C64(a1, a3, 1u))
      return v9;
    v8 = *(void **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
    v19 = sub_22EB1B954((uint64_t)a1, v8);
    if ((v19 & 1) != 0)
      return v9;
    v17 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v72 = v17;
    v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v20 != 32 && v20 != 39)
      goto LABEL_64;
    *(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24)) = v19 & 0xFFFFFFFFFFFFFFFELL;
    if (a2 != 9005)
      return 0;
    v9 = 0;
LABEL_17:
    *((_QWORD *)a3 + 1) = v17;
    return v9;
  }
  if (sub_22E979C64(a1, a3, 2u))
    return 1;
  v6 = (unint64_t)&a3[2 * (((unint64_t)*a3 >> 18) & 1)] + ((unint64_t)*a3 >> 24);
  v8 = *(void **)(v6 + 8);
  v7 = *(_QWORD **)(v6 + 16);
  v9 = 1;
  v10 = sub_22EB1B954((uint64_t)a1, v8);
  if ((v10 & 1) != 0)
    return v9;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v72 = v11;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  if (v12 != 32 && v12 != 39)
    goto LABEL_64;
  *(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24)) = v10 & 0xFFFFFFFFFFFFFFFELL;
  v13 = sub_22EB1A358(a1, v7, 0);
  if ((v13 & 1) == 0)
  {
    v70 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (sub_22E479BE0(*(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF0)))
    {
      v9 = 0;
      *((_QWORD *)a3 + 1) = v11;
      return v9;
    }
    goto LABEL_60;
  }
  return v9;
}

BOOL sub_22F30FDA8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v5 = 64;
  v4 = a2;
  v6 = 0;
  v2 = sub_22E4634B4(a1, (uint64_t)&v4);
  if (v5 >= 0x41 && v4)
    MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  return v2 >= 0;
}

BOOL sub_22F30FE14(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  unsigned int v5;
  char v6;

  v5 = 64;
  v4 = a2;
  v6 = 0;
  v2 = sub_22E4634B4(a1, (uint64_t)&v4);
  if (v5 >= 0x41 && v4)
    MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  return v2 < 1;
}

BOOL sub_22F30FE80(_QWORD *a1, uint64_t a2, int a3, unsigned int *a4)
{
  _BOOL8 v6;
  int v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14[20];
  char v15;

  if ((a3 - 2024) > 0x5B)
  {
    if ((a3 - 2116) > 0x2A)
    {
      if ((a3 - 2159) > 0x215
        || ((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 568))(a2, "msa", 3) & 1) != 0)
      {
        return 0;
      }
      sub_22EFFAE7C(a4);
      v9 = v13;
      v10 = a1;
      v11 = 3910;
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 568))(a2, "dspr2", 5) & 1) != 0)
        return 0;
      sub_22EFFAE7C(a4);
      v9 = v8;
      v10 = a1;
      v11 = 3909;
    }
LABEL_9:
    sub_22E8FCA40(v10, v9, v11, 0, (uint64_t)v14);
    v6 = v15 != 0;
    sub_22E903BEC(v14);
    return v6;
  }
  if (((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 568))(a2, "dsp", 3) & 1) == 0)
  {
    sub_22EFFAE7C(a4);
    v9 = v12;
    v10 = a1;
    v11 = 3908;
    goto LABEL_9;
  }
  return 0;
}

BOOL sub_22F30FFB0(_QWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  _BOOL8 result;

  v5 = 0;
  v6 = 63;
  v7 = 1;
  if (a2 <= 2478)
  {
    if (a2 > 2145)
    {
      switch(a2)
      {
        case 2179:
        case 2180:
        case 2181:
        case 2182:
        case 2215:
        case 2243:
        case 2258:
        case 2286:
        case 2287:
        case 2288:
        case 2289:
        case 2302:
        case 2303:
        case 2304:
        case 2305:
          break;
        case 2183:
        case 2185:
        case 2186:
        case 2187:
        case 2188:
        case 2189:
        case 2190:
        case 2191:
        case 2192:
        case 2193:
        case 2194:
        case 2195:
        case 2196:
        case 2197:
        case 2198:
        case 2199:
        case 2200:
        case 2201:
        case 2202:
        case 2203:
        case 2204:
        case 2205:
        case 2206:
        case 2207:
        case 2208:
        case 2209:
        case 2210:
        case 2211:
        case 2212:
        case 2217:
        case 2218:
        case 2219:
        case 2220:
        case 2225:
        case 2226:
        case 2227:
        case 2228:
        case 2233:
        case 2235:
        case 2237:
        case 2238:
        case 2239:
        case 2240:
        case 2245:
        case 2246:
        case 2247:
        case 2248:
        case 2249:
        case 2250:
        case 2252:
        case 2253:
        case 2254:
        case 2255:
        case 2260:
        case 2261:
        case 2262:
        case 2263:
        case 2264:
        case 2265:
        case 2266:
        case 2267:
        case 2268:
        case 2274:
        case 2275:
        case 2276:
        case 2277:
        case 2278:
        case 2279:
        case 2280:
        case 2281:
        case 2290:
        case 2291:
        case 2292:
        case 2293:
        case 2294:
        case 2295:
        case 2296:
        case 2297:
          return v5;
        case 2184:
LABEL_18:
          LODWORD(v5) = 0;
          v6 = 255;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        case 2213:
        case 2241:
        case 2256:
        case 2307:
        case 2311:
LABEL_3:
          LODWORD(v5) = 0;
          v6 = 7;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        case 2214:
        case 2242:
        case 2257:
        case 2306:
        case 2310:
LABEL_9:
          LODWORD(v5) = 0;
          v6 = 15;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        case 2216:
        case 2244:
        case 2259:
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        case 2221:
        case 2229:
LABEL_22:
          LODWORD(v5) = 0;
          v6 = 7;
          goto LABEL_15;
        case 2222:
        case 2230:
LABEL_23:
          LODWORD(v5) = 0;
          v6 = 15;
          goto LABEL_15;
        case 2223:
        case 2231:
          goto LABEL_14;
        case 2224:
        case 2232:
          LODWORD(v5) = 0;
          goto LABEL_15;
        case 2234:
        case 2236:
        case 2251:
          LODWORD(v5) = 0;
          v6 = 255;
          goto LABEL_15;
        case 2269:
        case 2270:
        case 2271:
        case 2272:
        case 2282:
        case 2283:
        case 2284:
        case 2285:
        case 2298:
        case 2299:
        case 2300:
        case 2301:
LABEL_8:
          v6 = 15;
          LODWORD(v5) = -16;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        case 2273:
        case 2314:
          v7 = 0;
          break;
        case 2308:
        case 2312:
LABEL_19:
          LODWORD(v5) = 0;
          v6 = 3;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        case 2309:
        case 2313:
LABEL_20:
          LODWORD(v5) = 0;
          v6 = 1;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
        default:
          if (a2 != 2146 && a2 != 2147)
            return v5;
          goto LABEL_14;
      }
LABEL_6:
      LODWORD(v5) = 0;
      v6 = 31;
      return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
    }
    if (a2 <= 2124)
    {
      if (a2 == 2102)
        return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
      if (a2 == 2103)
      {
        v7 = 0;
        LODWORD(v5) = 0;
        return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
      }
    }
    else
    {
      switch(a2)
      {
        case 2125:
          goto LABEL_14;
        case 2126:
LABEL_28:
          LODWORD(v5) = 0;
          v6 = 3;
          goto LABEL_15;
        case 2145:
LABEL_14:
          LODWORD(v5) = 0;
          v6 = 31;
LABEL_15:
          v7 = 2;
          return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
      }
    }
    return v5;
  }
  v8 = 511;
  v9 = -512;
  v10 = 1;
  switch(a2)
  {
    case 2479:
    case 2591:
    case 2595:
    case 2614:
    case 2621:
    case 2630:
    case 2638:
    case 2646:
    case 2654:
      goto LABEL_9;
    case 2480:
    case 2590:
    case 2594:
    case 2613:
    case 2622:
    case 2629:
    case 2637:
    case 2645:
    case 2653:
      goto LABEL_3;
    case 2481:
    case 2623:
      goto LABEL_19;
    case 2482:
    case 2624:
      goto LABEL_20;
    case 2483:
      goto LABEL_37;
    case 2484:
      v10 = 2;
      v8 = 1022;
      v9 = -1024;
      goto LABEL_37;
    case 2485:
    case 2488:
      v10 = 4;
      v8 = 2044;
      v9 = -2048;
      goto LABEL_37;
    case 2486:
    case 2487:
      v10 = 8;
      v8 = 4088;
      v9 = -4096;
      goto LABEL_37;
    case 2489:
      v7 = 0;
      v6 = 255;
      LODWORD(v5) = -128;
      return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
    case 2490:
    case 2491:
    case 2492:
      v7 = 0;
      v6 = 511;
      LODWORD(v5) = -512;
      return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2499:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2527:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2576:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2609:
    case 2610:
    case 2611:
    case 2612:
    case 2617:
    case 2618:
    case 2619:
    case 2620:
    case 2625:
    case 2626:
    case 2627:
    case 2628:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
      return v5;
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
      goto LABEL_8;
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2592:
    case 2596:
    case 2615:
    case 2631:
    case 2639:
    case 2647:
    case 2655:
      goto LABEL_6;
    case 2575:
    case 2577:
    case 2598:
    case 2599:
    case 2600:
      goto LABEL_18;
    case 2593:
    case 2597:
    case 2616:
    case 2632:
    case 2640:
    case 2648:
    case 2656:
      return sub_22E9797E0((uint64_t)a1, a3, v7, v5, v6, 1);
    case 2605:
      goto LABEL_23;
    case 2606:
      goto LABEL_22;
    case 2607:
      goto LABEL_28;
    case 2608:
      LODWORD(v5) = 0;
      v6 = 1;
      goto LABEL_15;
    case 2657:
      goto LABEL_36;
    case 2658:
      v8 = 1022;
      v9 = -1024;
      v7 = 2;
      v10 = 2;
      goto LABEL_37;
    case 2659:
    case 2662:
      v10 = 4;
      v8 = 2044;
      v9 = -2048;
      goto LABEL_36;
    case 2660:
    case 2661:
      v10 = 8;
      v8 = 4088;
      v9 = -4096;
LABEL_36:
      v7 = 2;
LABEL_37:
      v5 = 1;
      if (sub_22E9797E0((uint64_t)a1, a3, v7, v9, v8, 1))
        return v5;
      result = sub_22F30E918(a1, a3, v7, v10);
      break;
    default:
      if ((a2 - 2683) < 4)
        goto LABEL_6;
      if (a2 == 2692)
        goto LABEL_18;
      return v5;
  }
  return result;
}

BOOL sub_22F310254(_QWORD *a1, unsigned int *a2, unsigned int a3)
{
  _BOOL8 v3;
  _DWORD *v4;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  unsigned int v18;

  v3 = 0;
  v18 = a3;
  v16 = 1;
  v15 = 0;
  v17 = 0;
  v4 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * a3] + ((unint64_t)*a2 >> 24));
  if ((*v4 & 0x18000) == 0)
  {
    if (sub_22F30D0F4(a1, a2, a3, (uint64_t)&v15))
    {
      v3 = 1;
    }
    else
    {
      if (sub_22E97DAA0((llvm::APInt *)&v15))
        goto LABEL_9;
      sub_22F3103B8((llvm::APInt *)&v15, (uint64_t)&v13);
      v8 = sub_22E97DAA0((llvm::APInt *)&v13);
      if (v14 >= 0x41 && v13)
        MEMORY[0x2348A0E84](v13, 0x1000C8000313F17);
      if (v8)
      {
LABEL_9:
        v3 = 0;
      }
      else
      {
        sub_22EFFAE7C(a2);
        sub_22E8FCA40(a1, v9, 0xA83u, 0, (uint64_t)&v13);
        v10 = sub_22E89519C((uint64_t)&v13, &v18);
        sub_22F0D4E74((uint64_t)v4);
        v12 = v11;
        v3 = *(_BYTE *)(sub_22E8906A0(v10, &v12) + 80) != 0;
        sub_22E903BEC((unsigned int *)&v13);
      }
    }
  }
  if (v16 >= 0x41 && v15)
    MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
  return v3;
}

llvm::APInt *sub_22F3103B8@<X0>(llvm::APInt *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APInt *result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;

  v8 = *((_DWORD *)a1 + 2);
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, a1);
  else
    v7 = *(_QWORD *)a1;
  result = sub_22E99E4B8((llvm::APInt *)&v7);
  v5 = v7;
  v6 = *((_BYTE *)a1 + 12);
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 12) = v6;
  return result;
}

uint64_t sub_22F310428(_QWORD *a1, unsigned int *a2)
{
  _BOOL8 v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32[24];

  if (sub_22E979C64(a1, a2, 3u))
    return 1;
  if ((sub_22F0085E8(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 6] + ((unint64_t)*a2 >> 24)), a1[11], 0) & 1) != 0)
  {
    v6 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
    sub_22EFFAE7C(a2);
    v10 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2
       || (*(_BYTE *)(v10 + 17) & 4) != 0)
      && ((v28 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0),
           *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2)
       || (*(_BYTE *)(v28 + 17) & 4) != 0))
    {
      if (*(_QWORD *)(*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        v4 = 0;
        *((_QWORD *)a2 + 1) = v7;
        return v4;
      }
      v11 = v9;
      v12 = a1;
      v13 = 5131;
    }
    else
    {
      v11 = v9;
      v12 = a1;
      v13 = 5132;
    }
    sub_22E8FCA40(v12, v11, v13, 0, (uint64_t)v32);
    v14 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
    if (v14)
    {
      if ((*(_DWORD *)(v14 + 28) & 0x7Eu) - 52 >= 6)
        v15 = 0;
      else
        v15 = v14;
    }
    else
    {
      v15 = 0;
    }
    v30 = v15;
    v16 = sub_22E890024((uint64_t)v32, &v30);
    v17 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1)] + ((unint64_t)*a2 >> 24);
    sub_22F0D5A50(*(_QWORD *)(v17 + 8));
    v19 = v18;
    sub_22F0D60E4(*(_QWORD *)(v17 + 16));
    LODWORD(v29) = v19;
  }
  else
  {
    sub_22EFFAE7C(a2);
    sub_22E8FCA40(a1, v21, 0x1422u, 0, (uint64_t)v32);
    v31 = 3;
    v22 = sub_22E8900C4((uint64_t)v32, &v31);
    v23 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
    if (v23)
    {
      if ((*(_DWORD *)(v23 + 28) & 0x7Eu) - 52 >= 6)
        v24 = 0;
      else
        v24 = v23;
    }
    else
    {
      v24 = 0;
    }
    v30 = v24;
    v16 = sub_22E890024(v22, &v30);
    v25 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 6] + ((unint64_t)*a2 >> 24));
    sub_22F0D5A50(v25);
    v27 = v26;
    sub_22F0D60E4(v25);
    LODWORD(v29) = v27;
  }
  HIDWORD(v29) = v20;
  v4 = *(_BYTE *)(sub_22E8906A0(v16, &v29) + 80) != 0;
  sub_22E903BEC(v32);
  return v4;
}

BOOL sub_22F31069C(_QWORD *a1, unsigned int *a2, unsigned int a3)
{
  _BOOL8 v3;
  _DWORD *v4;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[24];
  unint64_t *v16;
  unsigned int v17;
  char v18;

  v3 = 0;
  v17 = 1;
  v16 = 0;
  v18 = 0;
  v4 = *(_DWORD **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + 2 * a3] + ((unint64_t)*a2 >> 24));
  if ((*v4 & 0x18000) == 0)
  {
    v8 = sub_22F30D0F4(a1, a2, a3, (uint64_t)&v16);
    v9 = v17;
    if (v8)
    {
      v3 = 1;
    }
    else
    {
      if (v17 > 0x40)
        v10 = *v16;
      else
        v10 = (uint64_t)((_QWORD)v16 << -(char)v17) >> -(char)v17;
      if (v10 > 7 || v10 == 4)
      {
        sub_22EFFAE7C(a2);
        sub_22E8FCA40(a1, v12, 0x1245u, 0, (uint64_t)v15);
        sub_22F0D4E74((uint64_t)v4);
        v14 = v13;
        v3 = *(_BYTE *)(sub_22E8906A0((uint64_t)v15, &v14) + 80) != 0;
        sub_22E903BEC(v15);
        v9 = v17;
      }
      else
      {
        v3 = 0;
      }
    }
    if (v9 >= 0x41 && v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
  return v3;
}

BOOL sub_22F3107D0(_QWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v5;
  unsigned int v6;
  _BOOL8 v7;
  _DWORD *v8;
  char v10;
  char v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18[24];
  _QWORD *v19;
  unsigned int v20;
  char v21;

  v5 = 0;
  v6 = 1;
  if (a2 > 3536)
  {
    if (a2 <= 4038)
    {
      switch(a2)
      {
        case 3650:
        case 3687:
        case 3721:
        case 3751:
        case 3761:
        case 3770:
        case 3788:
        case 3791:
        case 3806:
        case 3809:
        case 3818:
          goto LABEL_24;
        case 3651:
        case 3652:
        case 3653:
        case 3654:
        case 3655:
        case 3656:
        case 3657:
        case 3658:
        case 3659:
        case 3660:
        case 3661:
        case 3662:
        case 3663:
        case 3668:
        case 3669:
        case 3670:
        case 3671:
        case 3672:
        case 3673:
        case 3674:
        case 3675:
        case 3676:
        case 3677:
        case 3678:
        case 3679:
        case 3680:
        case 3681:
        case 3682:
        case 3683:
        case 3684:
        case 3685:
        case 3686:
        case 3694:
        case 3695:
        case 3696:
        case 3697:
        case 3704:
        case 3705:
        case 3706:
        case 3708:
        case 3709:
        case 3710:
        case 3711:
        case 3712:
        case 3713:
        case 3714:
        case 3715:
        case 3716:
        case 3717:
        case 3719:
        case 3720:
        case 3722:
        case 3723:
        case 3725:
        case 3726:
        case 3728:
        case 3729:
        case 3731:
        case 3732:
        case 3738:
        case 3739:
        case 3742:
        case 3743:
        case 3744:
        case 3745:
        case 3746:
        case 3747:
        case 3749:
        case 3750:
        case 3756:
        case 3757:
        case 3759:
        case 3760:
        case 3762:
        case 3763:
        case 3765:
        case 3766:
        case 3768:
        case 3769:
        case 3771:
        case 3772:
        case 3774:
        case 3775:
        case 3777:
        case 3778:
        case 3780:
        case 3781:
        case 3783:
        case 3784:
        case 3786:
        case 3787:
        case 3789:
        case 3790:
        case 3792:
        case 3793:
        case 3795:
        case 3796:
        case 3798:
        case 3799:
        case 3801:
        case 3802:
        case 3804:
        case 3805:
        case 3807:
        case 3808:
        case 3816:
        case 3817:
        case 3819:
        case 3820:
        case 3822:
        case 3823:
        case 3827:
        case 3828:
        case 3837:
        case 3838:
        case 3839:
        case 3840:
        case 3841:
        case 3845:
        case 3846:
        case 3847:
        case 3848:
        case 3853:
        case 3855:
        case 3862:
        case 3863:
        case 3865:
        case 3866:
          return v5;
        case 3664:
        case 3698:
        case 3699:
        case 3700:
        case 3701:
        case 3724:
        case 3735:
        case 3741:
        case 3753:
        case 3754:
        case 3824:
        case 3825:
        case 3826:
        case 3829:
        case 3830:
        case 3831:
        case 3832:
        case 3833:
        case 3834:
        case 3835:
        case 3836:
        case 3842:
        case 3843:
        case 3844:
        case 3849:
        case 3850:
        case 3851:
        case 3852:
        case 3854:
        case 3856:
        case 3857:
        case 3858:
        case 3859:
        case 3860:
        case 3861:
        case 3864:
        case 3867:
          goto LABEL_4;
        case 3665:
        case 3667:
        case 3688:
        case 3689:
        case 3690:
        case 3691:
        case 3812:
        case 3813:
          goto LABEL_30;
        case 3666:
        case 3702:
        case 3703:
        case 3707:
        case 3718:
        case 3727:
        case 3730:
        case 3734:
        case 3752:
        case 3755:
          goto LABEL_47;
        case 3692:
        case 3693:
          goto LABEL_42;
        case 3733:
        case 3736:
        case 3737:
          goto LABEL_32;
        case 3740:
        case 3810:
        case 3811:
          goto LABEL_5;
        case 3748:
        case 3758:
        case 3764:
        case 3767:
        case 3773:
        case 3776:
        case 3779:
        case 3782:
        case 3785:
        case 3794:
        case 3797:
        case 3800:
        case 3803:
        case 3821:
          goto LABEL_26;
        case 3814:
        case 3815:
          goto LABEL_6;
        default:
          if ((a2 - 3537) > 9)
          {
            if ((a2 - 3635) >= 2)
              return v5;
          }
          else
          {
            v13 = 1 << (a2 + 47);
            if ((v13 & 0x3F0) != 0)
              goto LABEL_4;
            if ((v13 & 3) == 0)
              goto LABEL_24;
          }
          break;
      }
      goto LABEL_47;
    }
    if ((a2 - 4039) > 0x11)
      return v5;
    v12 = 1 << (a2 + 57);
    if ((v12 & 0x300F) == 0)
    {
      if ((v12 & 0xCF00) == 0)
        goto LABEL_6;
LABEL_30:
      v6 = 2;
    }
    goto LABEL_5;
  }
  if (a2 <= 3159)
  {
    switch(a2)
    {
      case 2760:
      case 2761:
        goto LABEL_5;
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2770:
      case 2771:
      case 2772:
      case 2773:
      case 2785:
      case 2786:
      case 2788:
      case 2789:
      case 2803:
        return v5;
      case 2766:
      case 2767:
      case 2774:
      case 2775:
      case 2784:
      case 2787:
      case 2790:
      case 2791:
        goto LABEL_47;
      case 2768:
      case 2769:
      case 2776:
      case 2777:
      case 2778:
      case 2779:
      case 2780:
      case 2781:
      case 2782:
      case 2783:
      case 2804:
        goto LABEL_24;
      case 2792:
      case 2793:
      case 2794:
      case 2795:
      case 2800:
      case 2801:
      case 2802:
        goto LABEL_26;
      case 2796:
      case 2797:
      case 2798:
      case 2799:
LABEL_42:
        LOBYTE(v5) = 0;
        v6 = 2;
        goto LABEL_6;
      default:
        v10 = a2 + 108;
        if ((a2 - 2964) > 0x15)
          goto LABEL_18;
        if ((1 << v10))
          goto LABEL_30;
        if (((1 << v10) & 0xF3C00) != 0)
          goto LABEL_4;
        if (((1 << v10) & 0x30C000) != 0)
          goto LABEL_47;
LABEL_18:
        if ((a2 - 2671) >= 0x10)
          return v5;
        goto LABEL_4;
    }
  }
  if (a2 > 3255)
  {
    v11 = a2 + 72;
    if ((a2 - 3256) <= 0x11)
    {
      if (((1 << v11) & 0x33FC0) != 0)
      {
LABEL_32:
        LOBYTE(v5) = 0;
        v6 = 5;
        goto LABEL_6;
      }
      if (((1 << v11) & 3) != 0)
      {
LABEL_24:
        LOBYTE(v5) = 0;
        v6 = 3;
        goto LABEL_6;
      }
      if (((1 << v11) & 0xC000) != 0)
      {
LABEL_47:
        LOBYTE(v5) = 0;
        v6 = 4;
LABEL_6:
        v7 = 0;
        v20 = 1;
        v19 = 0;
        v21 = 0;
        v8 = *(_DWORD **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 + 2 * v6]
                        + ((unint64_t)*a3 >> 24));
        if ((*v8 & 0x18000) != 0)
          goto LABEL_7;
        if (sub_22F30D0F4(a1, a3, v6, (uint64_t)&v19))
        {
          v7 = 1;
          goto LABEL_7;
        }
        if (sub_22E42E5EC((uint64_t)&v19, 4) || sub_22E42E5EC((uint64_t)&v19, 8))
          goto LABEL_41;
        if ((v5 & 1) != 0)
        {
          v14 = &v19;
          if (v20 >= 0x41)
            v14 = v19;
          if ((*v14 & 0xFFFFFFFFFFFFFFFCLL) != 8)
            goto LABEL_56;
        }
        else if (!sub_22E42E5EC((uint64_t)&v19, 12))
        {
LABEL_56:
          sub_22EFFAE7C(a3);
          sub_22E8FCA40(a1, v15, 0x1426u, 0, (uint64_t)v18);
          sub_22F0D4E74((uint64_t)v8);
          v17 = v16;
          v7 = *(_BYTE *)(sub_22E8906A0((uint64_t)v18, &v17) + 80) != 0;
          sub_22E903BEC(v18);
LABEL_7:
          if (v20 >= 0x41 && v19)
            MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
          return v7;
        }
LABEL_41:
        v7 = 0;
        goto LABEL_7;
      }
    }
    switch(a2)
    {
      case 3328:
      case 3329:
      case 3330:
      case 3331:
        break;
      case 3332:
      case 3333:
      case 3334:
      case 3335:
        goto LABEL_6;
      case 3336:
      case 3337:
      case 3338:
      case 3339:
        return v5;
      case 3340:
      case 3341:
        goto LABEL_32;
      case 3342:
      case 3343:
      case 3344:
      case 3345:
        goto LABEL_4;
      default:
        if ((a2 - 3386) >= 2)
          return v5;
LABEL_4:
        v6 = 4;
        break;
    }
LABEL_5:
    LOBYTE(v5) = 1;
    goto LABEL_6;
  }
  switch(a2)
  {
    case 3160:
    case 3161:
    case 3166:
    case 3167:
    case 3185:
    case 3186:
      goto LABEL_32;
    case 3173:
    case 3174:
    case 3175:
    case 3176:
    case 3177:
    case 3178:
    case 3183:
    case 3184:
LABEL_26:
      v6 = 3;
      goto LABEL_5;
    case 3179:
    case 3180:
    case 3181:
    case 3182:
      goto LABEL_24;
    case 3187:
    case 3188:
      goto LABEL_47;
    default:
      return v5;
  }
  return v5;
}

BOOL sub_22F310B44(_QWORD *a1, int a2, unsigned int *a3)
{
  _BOOL8 v5;
  unsigned int v6;
  _DWORD *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12[24];
  uint64_t v13;
  unsigned int v14;
  char v15;

  v5 = 0;
  if (a2 > 2878)
  {
    if ((a2 - 3065) >= 0x10)
    {
      if ((a2 - 2879) >= 8)
        return v5;
      v6 = 3;
      goto LABEL_7;
    }
  }
  else if ((a2 - 2847) >= 0x20 && (a2 - 2589) >= 0x10)
  {
    return v5;
  }
  v6 = 4;
LABEL_7:
  v5 = 0;
  v14 = 1;
  v13 = 0;
  v15 = 0;
  v7 = *(_DWORD **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 + 2 * v6] + ((unint64_t)*a3 >> 24));
  if ((*v7 & 0x18000) == 0)
  {
    if (sub_22F30D0F4(a1, a3, v6, (uint64_t)&v13))
    {
      v5 = 1;
    }
    else if (sub_22E42E5EC((uint64_t)&v13, 1)
           || sub_22E42E5EC((uint64_t)&v13, 2)
           || sub_22E42E5EC((uint64_t)&v13, 4)
           || sub_22E42E5EC((uint64_t)&v13, 8))
    {
      v5 = 0;
    }
    else
    {
      sub_22EFFAE7C(a3);
      sub_22E8FCA40(a1, v9, 0x1427u, 0, (uint64_t)v12);
      sub_22F0D4E74((uint64_t)v7);
      v11 = v10;
      v5 = *(_BYTE *)(sub_22E8906A0((uint64_t)v12, &v11) + 80) != 0;
      sub_22E903BEC(v12);
    }
  }
  if (v14 >= 0x41 && v13)
    MEMORY[0x2348A0E84](v13, 0x1000C8000313F17);
  return v5;
}

BOOL sub_22F310CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 99)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F310D38(_QWORD *a1, _QWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;

  if ((a2[7] & 0x40000) != 0)
    v10 = 2;
  else
    v10 = 4;
  v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  sub_22E97E434(a1, a2, 0, 0, a4, a5, 0, a3, v11, v10);
  sub_22E982D28(a1, a3, (uint64_t)a2);
  return 0;
}

uint64_t sub_22F310DE4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_22EB318F0(a1, 0, a3, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  v7 = *a2;
  v8 = (uint64_t *)((char *)a2 + (v7 >> 24));
  v9 = (uint64_t)&v8[((v7 >> 18) & 1) + 1];
  v11 = a2[4];
  v10 = a2[5];
  sub_22F0D4E74(*v8);
  sub_22E97E434(a1, 0, a3, 0, v9, v11, 0, v10, v12, v6);
  return 0;
}

uint64_t sub_22F310E84(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23[24];

  v10 = *a3;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2
    && (*(_BYTE *)(v11 + 17) & 4) == 0)
  {
    v12 = a4;
    v13 = a1;
    v14 = 3113;
LABEL_15:
    sub_22E8FCA40(v13, v12, v14, 0, (uint64_t)v23);
    sub_22F0D4E74(a2);
    v22 = v19;
    sub_22E8906A0((uint64_t)v23, &v22);
    goto LABEL_16;
  }
  v15 = v10 & 0xFFFFFFFFFFFFFFF0;
  v16 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2
    || (*(_BYTE *)(v16 + 17) & 4) != 0)
  {
    if ((*(_DWORD *)(v11 + 16) & 0x400) != 0)
      goto LABEL_18;
    v17 = *(_DWORD *)(v16 + 16);
    if ((v17 & 0x400) != 0)
      goto LABEL_18;
    if (*(_DWORD *)(v11 + 16) - 57 <= 0xFFFFFFFD)
    {
      v11 = sub_22F10CF48(v11);
      v16 = *(_QWORD *)v15;
      LOBYTE(v17) = *(_BYTE *)(*(_QWORD *)v15 + 16);
    }
    v18 = *(_DWORD *)(v11 + 20);
    if (v17 - 57 <= 0xFFFFFFFD)
      v16 = sub_22F10CF48(v16);
    if (v18 == *(_DWORD *)(v16 + 20))
    {
LABEL_18:
      v21 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
      return sub_22F311800(v21, a2, (uint64_t)a3, v10, a4, a5);
    }
    v12 = a4;
    v13 = a1;
    v14 = 3112;
    goto LABEL_15;
  }
  sub_22E8FCA40(a1, a4, 0xC2Au, 0, (uint64_t)v23);
LABEL_16:
  sub_22E903BEC(v23);
  return 1;
}

uint64_t sub_22F311024@<X0>(llvm::APInt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;

  v8 = *((_DWORD *)a1 + 2);
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, a1);
  else
    v7 = *(_QWORD *)a1;
  sub_22E99E4B8((llvm::APInt *)&v7);
  result = llvm::APInt::operator++();
  v5 = v7;
  v6 = *((_BYTE *)a1 + 12);
  *(_DWORD *)(a2 + 8) = v8;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 12) = v6;
  return result;
}

unsigned int *sub_22F31109C(unsigned int *result, unint64_t a2)
{
  unsigned int v2[24];
  unint64_t v3;

  v3 = a2;
  if (HIDWORD(a2))
  {
    if ((_DWORD)a2)
    {
      sub_22E8FCA40(result, a2, 0x1A55u, 0, (uint64_t)v2);
      sub_22E8906A0((uint64_t)v2, (uint64_t *)&v3);
      return sub_22E903BEC(v2);
    }
  }
  return result;
}

uint64_t sub_22F3110EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 8) & 0x2000000000) != 0
    && (result & 0x80000000) == 0)
  {
    v5 = *(uint64_t **)(a2 + 96);
    result = *(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v6 = *(_BYTE *)(result + 16) == 26;
    else
      v6 = 0;
    if (v6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (result = sub_22F10CF48(result)) != 0)
    {
      result = sub_22E98EE08(a1, *(_QWORD *)(result + 24), 1);
      if ((_DWORD)result)
      {
        v17 = *v5;
        v18 = v5 + 1;
        v15 = sub_22F116708(&v17);
        v16 = sub_22F1167E8(&v17);
        result = (uint64_t)sub_22F31109C((unsigned int *)a1, v15 | (v16 << 32));
      }
    }
    v7 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)(a2 + 72);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        result = sub_22E98EE08(a1, *(_QWORD *)(*v8 + 48), 0);
        if ((_DWORD)result)
        {
          v11 = *(_QWORD *)(v10 + 56);
          v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
          if ((v11 & 4) != 0)
            v12 = (uint64_t *)v12[4];
          v17 = *v12;
          v18 = v12 + 1;
          v13 = sub_22F116708(&v17);
          v14 = sub_22F1167E8(&v17);
          result = (uint64_t)sub_22F31109C((unsigned int *)a1, v13 | (v14 << 32));
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

unsigned int *sub_22F31123C(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8[2];

  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 11) + 2000) + 8) & 0x2000000000) != 0
    && (*(_DWORD *)(a2 + 40) & 0x80000000) == 0)
  {
    v3 = result;
    v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v4 || *(_BYTE *)(v4 + 16) != 39)
      v4 = sub_22F10CF48(v4);
    result = (unsigned int *)sub_22E98EE08((uint64_t)v3, *(_QWORD *)(v4 + 32), 0);
    if ((_DWORD)result)
    {
      v5 = *(uint64_t **)(a2 + 32);
      v8[0] = *v5;
      v8[1] = (uint64_t)(v5 + 1);
      v6 = sub_22F116708(v8);
      v7 = sub_22F1167E8(v8);
      return sub_22F31109C(v3, v6 | (v7 << 32));
    }
  }
  return result;
}

unsigned int *sub_22F3112E4(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int *result;
  uint64_t v6;
  _QWORD v7[2];

  v6 = 0;
  v7[0] = 0;
  *(_QWORD *)((char *)v7 + 5) = 0;
  result = (unsigned int *)sub_22E98F908((uint64_t)a1, a2, (uint64_t)&v6);
  if ((_DWORD)result)
  {
    result = (unsigned int *)sub_22E98FC60((uint64_t)a1, a3, &v6);
    if (result)
      return sub_22E98FE4C(a1, (uint64_t)result, (uint64_t)&v6);
  }
  return result;
}

_QWORD *sub_22F311344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD *result;
  uint64_t v18[2];

  v12 = *(_QWORD *)(a1 + 12856);
  if (!v12)
  {
    v13 = (uint64_t *)(a1 + 12856);
    v12 = operator new();
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 16) = 0;
    v14 = *v13;
    *v13 = v12;
    if (v14)
    {
      sub_22E9B3E9C((uint64_t)v13, v14);
      v12 = *v13;
    }
  }
  v18[0] = a2;
  v18[1] = a3;
  if (a6)
    v15 = 2;
  else
    v15 = 0;
  v16 = v15 | a5;
  result = sub_22F312658(v12, v18);
  result[2] = a4;
  *((_BYTE *)result + 24) = v16;
  return result;
}

unint64_t sub_22F3113F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_22F27B674(a1 + 13072, a2, a3, a4, a5);
}

BOOL sub_22F311404(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  return !sub_22E9B3FAC(*(_QWORD *)v1, *(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 8));
}

uint64_t sub_22F311468()
{
  return 1;
}

uint64_t sub_22F311470()
{
  return 1;
}

uint64_t sub_22F31147C()
{
  return 1;
}

uint64_t sub_22F311488()
{
  return 1;
}

BOOL sub_22F311490(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v4 << 16) & 0x780000) != 0)
    v5 = ((*(unsigned __int16 *)(a1 + 28) | (v4 << 16)) >> 19) & 0xF;
  else
    v5 = sub_22F1BFAD0(a1);
  return v5 == 1;
}

uint64_t sub_22F311510(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "cl_khr_subgroups or __opencl_c_subgroups";
  return a1;
}

uint64_t sub_22F3115F4(uint64_t a1)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(unsigned __int8 **)(a1 + 32);
    if (!v2)
    {
      v2 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v12 = v7;
    v8 = sub_22F2F1D6C(v6, &v12)[1] + 32 * *(unsigned int *)(a1 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v3 = (_BYTE *)*v10;
  }
  v4 = *v3;
  *v3 = v4 + 1;
  *(_QWORD *)&v3[8 * v4 + 16] = "'kernel_enqueue_flags_t' (i.e. uint)";
  return a1;
}

void sub_22F3116D8(std::string *a1@<X8>)
{
  std::string::value_type v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  llvm::APFixedPoint::toString();
  std::string::__init(a1, v2, 0);
}

BOOL sub_22F311764(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return !sub_22F409CF8(v1);
}

uint64_t sub_22F31179C(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return sub_22F272660(v1);
}

uint64_t sub_22F3117D0(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return sub_22F10E414(v1);
}

uint64_t sub_22F311800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  *(_BYTE *)a1 = -98;
  if (byte_255E04EB3)
    sub_22F3F189C(158);
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AA970(a1) & 0x1F) << 13);
  return a1;
}

llvm::APInt *sub_22F311890(llvm::APInt *this)
{
  unsigned int v2;

  if (*((_BYTE *)this + 12))
  {
    v2 = *((_DWORD *)this + 2);
    if (v2 > 0x40)
    {
      llvm::APInt::lshrSlowCase(this);
    }
    else if (v2 == 8)
    {
      *(_QWORD *)this = 0;
    }
    else
    {
      *(_QWORD *)this >>= 8;
    }
  }
  else
  {
    sub_22E99E710(this, 8);
  }
  return this;
}

uint64_t sub_22F311900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(_DWORD **)a2;
      v6 = 56 * v4;
      do
      {
        sub_22E6D82D0((uint64_t *)(a1 + 32), v5);
        v5 += 14;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v8 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v15 = v9;
    v10 = sub_22F2F1D6C(v8, &v15);
    v11 = *(_QWORD *)(a2 + 8);
    if (v11)
    {
      v12 = (uint64_t *)(v10[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
      v13 = *(_DWORD **)a2;
      v14 = 56 * v11;
      do
      {
        sub_22E6D82D0(v12, v13);
        v13 += 14;
        v14 -= 56;
      }
      while (v14);
    }
  }
  return a1;
}

uint64_t sub_22F3119E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = (uint64_t *)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = (uint64_t *)(sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
  }
  sub_22E8907D4(v4, a2);
  return a1;
}

uint64_t sub_22F311A7C(_QWORD *a1, uint64_t a2)
{
  if (*a1 == a2 || a2 - *a1 < llvm::getNumBytesForUTF8((llvm *)*(unsigned __int8 *)*a1))
    return 1;
  else
    return llvm::ConvertUTF8toUTF32();
}

uint64_t sub_22F311B00(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(result + 80))
  {
    v2 = *(unsigned __int8 **)(result + 32);
    if (!v2)
    {
      v14 = result;
      v15 = a2;
      v16 = sub_22E3B8AAC(*(_QWORD *)(result + 40));
      a2 = v15;
      v2 = (unsigned __int8 *)v16;
      result = v14;
      *(_QWORD *)(v14 + 32) = v2;
    }
    v2[*v2 + 1] = 1;
    v3 = *(_BYTE **)(result + 32);
    v4 = *v3;
    *v3 = v4 + 1;
    *(_QWORD *)&v3[8 * v4 + 16] = a2;
  }
  else if (*(_BYTE *)(result + 92))
  {
    v5 = a2;
    v6 = (uint64_t *)(*(_QWORD *)result + 12784);
    v17 = result;
    v7 = *(_QWORD *)(result + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v18 = v7;
    v8 = sub_22F2F1D6C(v6, &v18)[1] + 32 * *(unsigned int *)(v17 + 88);
    v11 = *(unsigned __int8 **)(v8 + 8);
    v10 = (unsigned __int8 **)(v8 + 8);
    v9 = v11;
    if (!v11)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v10[1]);
      *v10 = v9;
    }
    v9[*v9 + 1] = 1;
    v12 = *v10;
    v13 = **v10;
    *v12 = v13 + 1;
    *(_QWORD *)&v12[8 * v13 + 16] = v5;
    return v17;
  }
  return result;
}

uint64_t sub_22F311C14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  int v19;

  if (a2)
  {
    v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = (_QWORD *)(a1 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 == a3 && v11 == a4)
    {
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (v10 != -4096 || v11 != -1)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v11 == -2;
        if (v17 && v10 == -8192)
          v15 = v9;
        v19 = v8 + v16++;
        v8 = v19 & (a2 - 1);
        v9 = (_QWORD *)(a1 + 32 * v8);
        v10 = *v9;
        v11 = v9[1];
        v13 = 1;
        if (*v9 == a3 && v11 == a4)
          goto LABEL_8;
      }
      v13 = 0;
      if (v15)
        v9 = v15;
    }
  }
  else
  {
    v9 = 0;
    v13 = 0;
  }
LABEL_8:
  *a5 = v9;
  return v13;
}

uint64_t sub_22F311D00(uint64_t a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F251EFC((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F311D98(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F311D98(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E486BE8(a1, v6);
  v8 = 0;
  sub_22F251EFC((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F311E44(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E54D014((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_22F311EF0(uint64_t a1, void (*a2)(_QWORD *, _QWORD, uint64_t), uint64_t a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(_QWORD *, _QWORD, _QWORD);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v26[32];
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 192);
  if (v3)
  {
    v6 = a1;
    v27 = v29;
    v28 = 0x400000000;
    v24 = v26;
    v25 = 0x400000000;
    v7 = *(_DWORD *)(a1 + 196);
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + 8 + 8 * v8);
        if (v7 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = v28;
        }
        *((_QWORD *)v27 + v7) = v9;
        v7 = v28 + 1;
        LODWORD(v28) = v28 + 1;
        ++v8;
      }
      while (v8 != *(_DWORD *)(v6 + 196));
      v3 = *(_DWORD *)(v6 + 192);
    }
    v10 = (v3 - 1);
    if (v3 != 1)
    {
      v23 = v6;
      v11 = (_QWORD *)(v6 + (a3 >> 1));
      do
      {
        v12 = v28;
        if ((_DWORD)v28)
        {
          v13 = 0;
          do
          {
            v14 = 0;
            v15 = v25;
            v16 = 8 * (*((_QWORD *)v27 + v13) & 0x3FLL) + 8;
            do
            {
              v17 = *(_QWORD *)((*((_QWORD *)v27 + v13) & 0xFFFFFFFFFFFFFFC0) + v14);
              if (v15 >= HIDWORD(v25))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v15 = v25;
              }
              v24[v15] = v17;
              v15 = v25 + 1;
              LODWORD(v25) = v25 + 1;
              v14 += 8;
            }
            while (v16 != v14);
            v18 = a2;
            if ((a3 & 1) != 0)
              v18 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*v11 + a2);
            v18(v11, *((_QWORD *)v27 + v13++), v10);
          }
          while (v13 != v12);
        }
        LODWORD(v28) = 0;
        sub_22E77A230((uint64_t)&v27, (uint64_t)&v24);
        v10 = (v10 - 1);
      }
      while ((_DWORD)v10);
      v7 = v28;
      v6 = v23;
    }
    if (v7)
    {
      v19 = 0;
      v20 = 8 * v7;
      v21 = (_QWORD *)(v6 + (a3 >> 1));
      do
      {
        v22 = a2;
        if ((a3 & 1) != 0)
          v22 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v21 + a2);
        v22(v21, *(_QWORD *)((char *)v27 + v19), 0);
        v19 += 8;
      }
      while (v20 != v19);
    }
    if (v24 != (_QWORD *)v26)
      free(v24);
    if (v27 != v29)
      free(v27);
  }
}

uint64_t sub_22F312154(uint64_t result, uint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 200);
  *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

uint64_t sub_22F31216C(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_22F312210(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F3122F4(a2, a3, v12);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    *(_DWORD *)(result + 4) = a3[1];
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F312210(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  _DWORD *v15;
  int v16;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v7 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = a2 - 1;
    v11 = (a2 - 1) & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
    v5 = (_DWORD *)(a1 + 16 * v11);
    v12 = *v5;
    v13 = v5[1];
    if (*v5 == a3 && v13 == a4)
    {
      v6 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (v12 != -1 || v13 != -1)
      {
        if (v15)
          v18 = 0;
        else
          v18 = v13 == -2;
        if (v18 && v12 == -2)
          v15 = v5;
        v20 = v11 + v16++;
        v11 = v20 & v10;
        v5 = (_DWORD *)(a1 + 16 * (v20 & v10));
        v12 = *v5;
        v13 = v5[1];
        v6 = 1;
        if (*v5 == a3 && v13 == a4)
          goto LABEL_12;
      }
      v6 = 0;
      if (v15)
        v5 = v15;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_12:
  *a5 = v5;
  return v6;
}

_DWORD *sub_22F3122F4(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22E9AF178(a1, v6);
    v9 = 0;
    sub_22F312210(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
    a3 = v9;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F3123AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v13;
  _DWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    v10 = *(_DWORD *)(a2 + 4);
    if ((*(_DWORD *)a2 != -1 || v10 != -1) && (v9 != -2 || v10 != -2))
    {
      v14 = 0;
      result = sub_22F312210(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *(_DWORD *)a2;
      v13[1] = *(_DWORD *)(a2 + 4);
      *((_QWORD *)v13 + 1) = *(_QWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

BOOL sub_22F312474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 447)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F3124D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 453)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F31253C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 411)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22F31259C(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_22F31259C(*a1);
    sub_22F31259C(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

void sub_22F3125EC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E9B2AF4(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

_QWORD *sub_22F312658(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F311C14(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F3126C4(a1, a2, v8);
    v7 = a2[1];
    *v5 = *a2;
    v5[1] = v7;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_22F3126C4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E9B3EE8(a1, v6);
  v9 = 0;
  sub_22F311C14(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F312778(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = xmmword_22F4658D0;
      v7 += 2;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v15 = 0;
      result = sub_22F311C14(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v15);
      v13 = v15;
      v14 = *(_QWORD *)(a2 + 8);
      *v15 = *(_QWORD *)a2;
      v13[1] = v14;
      *((_OWORD *)v13 + 1) = *(_OWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_22F31283C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(_QWORD *))a1;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t sub_22F312858(unint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = 0;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 16);
  switch((char)v3)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return 1;
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
      return 5;
    case 10:
      return 2;
    case 11:
      v4 = (v3 >> 19) & 0x1FF;
      if (v4 > 0x102)
      {
        if (v4 - 259 < 2)
          return 5;
      }
      else
      {
        if (v4 - 219 < 3)
          return 4;
        if (v4 == 165)
          return 8;
        if (v4 == 218)
          return 6;
      }
      return 0;
    case 12:
    case 19:
    case 44:
      return result;
    case 25:
    case 26:
      return 3;
    case 32:
    case 33:
    case 34:
      return 4;
    case 39:
      return 6;
    case 40:
    case 41:
      if ((v3 & 0xFE) == 0x28)
        v5 = a1;
      else
        v5 = 0;
      if (a1 >= 0x10)
        v6 = v5;
      else
        v6 = 0;
      v8 = v6;
      v7 = sub_22F31295C(&v8);
      return sub_22F312858(v7);
    case 45:
      return 7;
    default:
      if (*(_DWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2)
        return 5;
      return result;
  }
}

uint64_t sub_22F31295C(_QWORD *a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 18) & 0x10) != 0)
  {
    do
    {
      v1 = *(_QWORD *)(*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v1)
      {
        v3 = *(_DWORD *)(v1 + 16);
        if ((v3 & 0xFE) == 0x28)
          continue;
      }
      v1 = sub_22F10CF48(v1);
      v3 = *(_DWORD *)(v1 + 16);
    }
    while ((v3 & 0x100000) != 0);
  }
  return *(_QWORD *)(v1 + 32);
}

uint64_t sub_22F3129B8(unint64_t *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  const char *v22;
  const char *v23;
  __int128 v24;
  const char *v25[4];
  __int16 v26;
  uint64_t v27[2];
  int v28;
  int v29;
  __int128 v30;
  _BYTE *v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  void *v35;
  uint64_t v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a1 + 6) == 2)
    return sub_22F312C38((uint64_t)a1, a3, a5, a6);
  v12 = *((_DWORD *)a1 + 4);
  v13 = *((_DWORD *)a1 + 8);
  v27[0] = a5;
  v27[1] = a6;
  v28 = v12;
  v29 = v13;
  v30 = 0uLL;
  v31 = 0;
  v32 = v34;
  v33 = 0x400000000;
  v35 = v37;
  v36 = 0x200000000;
  *(_QWORD *)&v24 = ((*(_QWORD *)(a2[250] + 100) >> 12) & 0x2000000 | sub_22E8FCD8C((uint64_t)a2, a3) & 0xFFFFDFFFFDF9CFFFLL) ^ 0x200002043000;
  *((_QWORD *)&v24 + 1) = v14;
  v15 = *((_DWORD *)a1 + 6);
  if (v15 != 3)
  {
    if (v15 == 1)
    {
      sub_22E8A9AD8((uint64_t)v27, a1[1]);
      v16 = sub_22F2F28A4((uint64_t)v27);
    }
    else
    {
      v16 = sub_22E9B47E8((uint64_t)a1, a3, a2, (uint64_t)v27, a7, a4, &v24);
    }
    v17 = v16;
    goto LABEL_6;
  }
  *(_WORD *)(a1[1] + 4) = *((_DWORD *)a1 + 4);
  *(_QWORD *)a1[1] = *(_QWORD *)a1[1] & 0xFFFCFFFFFFFFFFFFLL | ((a1[4] & 3) << 48);
  if (*a1)
  {
    v19 = *(_QWORD *)(*a1 + 16);
    v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) != 0)
      v20 = (_QWORD *)*v20;
    sub_22F2F2968((uint64_t)v27, (uint64_t)v20);
    *(_OWORD *)(a1[1] + 8) = v30;
    v21 = sub_22F312EEC(a2, *a1);
    if (v21)
    {
      if ((*(_BYTE *)(v21 + 32) & 2) != 0)
      {
        v22 = *(const char **)(v21 + 24);
        if (!v22)
        {
          v23 = 0;
          goto LABEL_21;
        }
      }
      else
      {
        v22 = (const char *)sub_22F0C8E74(v21, (uint64_t)a2);
      }
      v23 = (const char *)strlen(v22);
LABEL_21:
      v26 = 261;
      v25[0] = v22;
      v25[1] = v23;
      v31 = sub_22F2F27DC(v27[0], v25);
      *(_QWORD *)(a1[1] + 24) = v31;
    }
  }
  v17 = a1[1];
LABEL_6:
  if (v35 != v37)
    free(v35);
  if (v32 != v34)
    free(v32);
  return v17;
}

uint64_t sub_22F312C38(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  const char *v26[4];
  __int16 v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32[2];
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  void *v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 32);
  v32[0] = a3;
  v32[1] = a4;
  v33 = v5;
  v34 = v6;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = v40;
  v39 = 0x400000000;
  v41 = v43;
  v42 = 0x200000000;
  v7 = sub_22E6D7128(a2, *(llvm **)(a1 + 8));
  v8 = *(unsigned int **)(*(_QWORD *)(a1 + 8) + 16);
  v9 = *v8;
  v31 = 261;
  v28 = v8 + 4;
  *(_QWORD *)&v29 = v9;
  v10 = sub_22F2F27DC(v32[0], (const char **)&v28);
  sub_22E8A9AD8((uint64_t)v32, (uint64_t)v10);
  if (v7 && (*((_WORD *)v7 + 18) & 2) != 0)
  {
    sub_22E8A9D90((uint64_t)v32, 7, "");
    v11 = v7[1];
    v12 = v11 + 8 * *((unsigned int *)v7 + 6);
    if ((*((_WORD *)v7 + 18) & 4) != 0 && (v12 -= 8, v11 == v12))
    {
      sub_22E8A9C00((uint64_t)v32, (uint64_t)"...");
      v13 = v7[1];
    }
    else
    {
      v13 = v7[1];
      v11 = v12;
    }
    if (v13 != v11)
    {
      while (1)
      {
        if (v13 != v7[1])
          sub_22E8A9D90((uint64_t)v32, 15, "");
        v16 = v13 + 8;
        if ((*((_WORD *)v7 + 18) & 0xC) != 0 && v16 == v11)
          break;
        v18 = *(unsigned int **)(*(_QWORD *)v13 + 16);
        v19 = *v18;
        v31 = 261;
        v28 = v18 + 4;
        *(_QWORD *)&v29 = v19;
        v20 = sub_22F2F27DC(v32[0], (const char **)&v28);
        sub_22E8A9C00((uint64_t)v32, (uint64_t)v20);
        v13 += 8;
        if (v16 == v11)
          goto LABEL_8;
      }
      v21 = *(unsigned int **)(*(_QWORD *)v13 + 16);
      v22 = *v21;
      v28 = &v30;
      v29 = xmmword_22F44E330;
      sub_22E61131C((uint64_t)&v28, (_BYTE *)v21 + 16, (_BYTE *)v21 + v22 + 16);
      if ((*((_WORD *)v7 + 18) & 4) != 0)
      {
        v23 = ", ...";
        v24 = "";
      }
      else
      {
        v23 = "...";
        v24 = "";
      }
      sub_22E61131C((uint64_t)&v28, v23, v24);
      v27 = 261;
      v26[0] = (const char *)v28;
      v26[1] = (const char *)v29;
      v25 = sub_22F2F27DC(v32[0], v26);
      sub_22E8A9C00((uint64_t)v32, (uint64_t)v25);
      if (v28 != &v30)
        free(v28);
    }
LABEL_8:
    sub_22E8A9D90((uint64_t)v32, 8, "");
  }
  v14 = sub_22F2F28A4((uint64_t)v32);
  if (v41 != v43)
    free(v41);
  if (v38 != v40)
    free(v38);
  return v14;
}

unint64_t sub_22F312EEC(_QWORD *a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return 0;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(a2 + 58) & 8) == 0)
    return 0;
  result = sub_22EFDCBF0(a2, 1);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 80);
    if (v6 != *(_QWORD *)(a2 + 40))
      return 0;
    v7 = *(_QWORD *)(result + 40);
    v8 = (v7 & 7) != 0 ? 0 : v7 & 0xFFFFFFFFFFFFFFF8;
    v9 = (v6 & 7) != 0 ? 0 : v6 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == v9)
      return 0;
    result = sub_22EF56434(a1, a2, 0);
    if (!result)
    {
      result = sub_22EF56434(a1, v5, 0);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_22F312FB0(_QWORD *a1, unint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  result = sub_22EF56434(a1, a2, 0);
  if (result)
    return result;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x18)
    return 0;
  result = sub_22EFDCBF0(a2, 1);
  if (result)
    return sub_22EF56434(a1, result, 0);
  return result;
}

uint64_t sub_22F31301C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  uint64_t v6;

  if (*(_DWORD *)a2 == 1)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 8) + 48);
  }
  else
  {
    if (*(_DWORD *)a2)
      return 0;
    v5 = (uint64_t *)(a2 + 8);
  }
  v6 = *v5;
  if (*v5 && sub_22EFBAACC(*v5) > a3)
    return sub_22EF56434(a1, *(_QWORD *)(*(_QWORD *)(v6 + 120) + 8 * a3), 0);
  return 0;
}

uint64_t sub_22F3130A0(unsigned __int16 *a1, uint64_t a2, _DWORD *a3, int a4)
{
  BOOL v6;
  unsigned int v7;

  switch(a2)
  {
    case 2:
      if (*a1 != 20302)
        return 70;
      return 65;
    case 3:
      if (*a1 == 26990 && *((_BYTE *)a1 + 2) == 108)
        goto LABEL_22;
      if (*a1 == 26958 && *((_BYTE *)a1 + 2) == 108)
        goto LABEL_22;
      v6 = (*a1 ^ 0x4559 | *((unsigned __int8 *)a1 + 2) ^ 0x53) == 0;
      v7 = 70;
      goto LABEL_23;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x4C4C554E:
LABEL_22:
          v6 = a4 == 0;
          v7 = 32;
LABEL_23:
          if (v6)
            return 65;
          else
            return v7;
        case 0x65757274:
          return 65;
        case 0x6C6F6F62:
          return (*a3 >> 14) & 1 | 0x32u;
        default:
          return 70;
      }
    case 5:
      if (*(_DWORD *)a1 != 1936482662 || *((_BYTE *)a1 + 4) != 101)
        return 70;
      return 65;
    default:
      return 70;
  }
}

char **sub_22F3131C8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v31[2];
  void *v32;
  int v33;
  char v34;
  void *v35;
  void *v36;
  _QWORD v37[2];
  __int128 v38;
  int v39;
  _BYTE v40[24];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  __int128 v46;
  int v47;
  _BYTE v48[24];
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53[4];
  __int16 v54;
  char *v55;
  char *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60[11];
  void *v61;
  uint64_t v62;
  _WORD v63[32];
  _BYTE v64[48];
  void *v65;
  void *v66;
  _DWORD v67[2];
  char v68;
  _BYTE *v69;
  void *v70;
  uint64_t v71;
  int v72;
  _BYTE v73[16];
  void *v74;
  uint64_t v75;
  _QWORD v76[8];

  v76[5] = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v64 = 0;
  v64[4] = 0;
  v68 = 0;
  memset(&v64[8], 0, 33);
  v69 = v73;
  v70 = v73;
  v71 = 8;
  v72 = 0;
  sub_22E9B831C((uint64_t)&v55, a1, v8, v9, (__int128 *)v64, 0, 0);
  if (v70 != v69)
    free(v70);
  if (v68 && v67[1])
    free(v66);
  v10 = operator new(0x28uLL);
  v10[2] = 0;
  v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  v11 = v58;
  *v10 = v58;
  v10[1] = &v58;
  v11[1] = v10;
  v58 = v10;
  ++v59;
  *(_OWORD *)v64 = v57;
  memset(&v64[16], 0, 32);
  v65 = v67;
  v66 = (void *)0x400000000;
  v74 = v76;
  v75 = 0x200000000;
  if (a4)
  {
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200000000000) != 0)
    {
      v18 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 112)
                                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 112), a2, a3, a4, 1, 0) & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = *(void ***)(v18 + 200);
        v20 = *(void ***)(v18 + 208);
        while (v19 != v20)
        {
          v21 = *v19;
          v63[8] = 260;
          v61 = v21;
          v22 = sub_22F2F27DC(*(uint64_t *)v64, (const char **)&v61);
          sub_22E8A9AD8((uint64_t)v64, (uint64_t)v22);
          v23 = sub_22F2F28A4((uint64_t)v64);
          v24 = (uint64_t)*v19++;
          v25 = ~(*(unsigned __int16 *)(v24 + 1344) >> 1) & 2;
          v37[0] = 0;
          v37[1] = v23;
          v38 = xmmword_22F469F10;
          v39 = v25;
          memset(v40, 0, sizeof(v40));
          v41 &= 0xC0u;
          v43 = 0;
          v44 = 0;
          v42 = 0;
          sub_22E9D8DB4((uint64_t *)&v55, (uint64_t)v37);
          v61 = v40;
          sub_22E6C60B8((void ***)&v61);
        }
      }
    }
  }
  else
  {
    v61 = v63;
    v62 = 0x800000000;
    sub_22F40FD4C(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 104), (uint64_t)&v61);
    if ((_DWORD)v62)
    {
      v12 = 0;
      v13 = 8 * v62;
      do
      {
        v14 = *(void ***)((char *)v61 + v12);
        v54 = 260;
        v53[0] = v14;
        v15 = sub_22F2F27DC(*(uint64_t *)v64, (const char **)v53);
        sub_22E8A9AD8((uint64_t)v64, (uint64_t)v15);
        v16 = sub_22F2F28A4((uint64_t)v64);
        v17 = ~(*(unsigned __int16 *)(*(_QWORD *)((char *)v61 + v12) + 1344) >> 1) & 2;
        v45[0] = 0;
        v45[1] = v16;
        v46 = xmmword_22F469F10;
        v47 = v17;
        memset(v48, 0, sizeof(v48));
        v49 &= 0xC0u;
        v51 = 0;
        v52 = 0;
        v50 = 0;
        sub_22E9D8DB4((uint64_t *)&v55, (uint64_t)v45);
        v53[0] = (void **)v48;
        sub_22E6C60B8(v53);
        v12 += 8;
      }
      while (v13 != v12);
    }
    if (v61 != v63)
      free(v61);
  }
  v26 = (uint64_t)v58;
  v27 = *v58;
  *(_QWORD *)(v27 + 8) = v58[1];
  **(_QWORD **)(v26 + 8) = v27;
  --v59;
  sub_22E9D8FB0(v26);
  v28 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v31, v60);
  if (v56 == v55)
    v29 = 0;
  else
    v29 = v55;
  sub_22E9B83FC(a1, v28, v31, (uint64_t)v29, -1431655765 * ((unint64_t)(v56 - v55) >> 5));
  if (v36 != v35)
    free(v36);
  if (v34)
  {
    if (v33)
      free(v32);
    v34 = 0;
  }
  if (v74 != v76)
    free(v74);
  if (v65 != v67)
    free(v65);
  return sub_22E9B8490(&v55);
}

char **sub_22F313608(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  __int128 v25[3];
  void *v26;
  int v27;
  char v28;
  void *v29;
  void *v30;
  _QWORD v31[3];
  __int128 v32[2];
  uint64_t v33;
  void *v34;
  int v35;
  char v36;
  void *v37;
  void *v38;
  char *v39;
  char *v40;
  BOOL (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  char v47;
  __int128 v48[11];
  void **v49;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  sub_22E9B85C4((uint64_t)v32, a1, a3);
  sub_22E9B831C((uint64_t)&v39, a1, v6, v7, v32, 0, 0);
  if (v38 != v37)
    free(v38);
  if (v36 && v35)
    free(v34);
  v8 = operator new(0x28uLL);
  v8[2] = 0;
  v8[3] = 0;
  *((_DWORD *)v8 + 8) = 0;
  v9 = v43;
  *v8 = v43;
  v8[1] = &v43;
  v9[1] = v8;
  v43 = v8;
  ++v44;
  if (a3 <= 0xE)
  {
    if (((1 << a3) & 0x507F) != 0)
    {
      v41 = sub_22E9B8728;
      v42 = 0;
    }
    else if (((1 << a3) & 0x2780) != 0)
    {
      v15 = *(_QWORD *)(a1 + 72);
      v16 = sub_22E9B87B4(a3);
      v17 = sub_22E9B8894;
      if (v16)
        v17 = sub_22E9B8804;
      v41 = v17;
      v42 = 0;
      if ((*(_BYTE *)(v15 + 1) & 1) != 0)
        sub_22E9B8974((unint64_t *)a1, 0, (uint64_t *)&v39);
    }
  }
  v10 = sub_22EBBB18C(a1);
  if (v10 >= 0x10)
  {
    v11 = sub_22F10ACF8(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v12 & 8) != 0)
    {
      v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v45 = v13 | v14 | (v12 | v11) & 7;
    v46 = 1;
    v47 = 1;
  }
  v18 = *(_QWORD *)(a1 + 216);
  memset(v31, 0, sizeof(v31));
  sub_22E9B8FE8((uint64_t)v32, (uint64_t)&v39, v18, 0, (uint64_t)v31);
  v49 = (void **)v31;
  sub_22E6C60B8(&v49);
  sub_22EC67A18((_QWORD *)a1, (uint64_t **)a2, 0, (uint64_t)v32, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x20) != 0);
  sub_22E9B90C4();
  v19 = (uint64_t)v43;
  v20 = *v43;
  *(_QWORD *)(v20 + 8) = v43[1];
  **(_QWORD **)(v19 + 8) = v20;
  --v44;
  sub_22E9D8FB0(v19);
  if (a3 <= 0xD && ((1 << a3) & 0x2980) != 0 && *(_QWORD *)(a2 + 24))
    sub_22E9BE678(*(_WORD **)(a1 + 72), (uint64_t *)&v39);
  v21 = *(_QWORD *)(a1 + 208);
  v22 = *(unsigned __int8 *)(v21 + 8);
  if ((v22 & 1) != 0)
  {
    sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v39, (v22 >> 5) & 1, 0, 0);
    v21 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v25, v48);
  if (v40 == v39)
    v23 = 0;
  else
    v23 = v39;
  sub_22E9B83FC(a1, v21, v25, (uint64_t)v23, -1431655765 * ((unint64_t)(v40 - v39) >> 5));
  if (v30 != v29)
    free(v30);
  if (v28)
  {
    if (v27)
      free(v26);
    v28 = 0;
  }
  *(_QWORD *)&v32[0] = off_24FAB7520;
  v49 = (void **)&v33;
  sub_22E6C60B8(&v49);
  return sub_22E9B8490(&v39);
}

char **sub_22F313954(char **result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v25;
  int v26;
  int v27;
  __int128 v29[3];
  void *v30;
  int v31;
  char v32;
  void *v33;
  void *v34;
  uint64_t v35;
  llvm *v36[2];
  unsigned int v37;
  BOOL v38;
  char v39;
  const char *v40;
  size_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  const char **v45;
  char *v46;
  void *v47;
  BOOL *v48;
  char v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  _BYTE v54[64];
  char *v55;
  char *v56;
  __int128 v57[11];
  uint64_t v58;
  int v59;
  unsigned int v60;

  v59 = a3;
  v60 = a2;
  v58 = a4;
  if (a3 == 2)
    return result;
  v6 = (uint64_t)result;
  v7 = (*(uint64_t (**)(char *))(*(_QWORD *)result[26] + 40))(result[26]);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 208) + 48))(*(_QWORD *)(v6 + 208));
  LODWORD(v42) = 35;
  BYTE4(v42) = 0;
  v49 = 0;
  v43 = 0u;
  v44 = 0u;
  LOBYTE(v45) = 0;
  v50 = v54;
  v51 = v54;
  v52 = 8;
  v53 = 0;
  sub_22E9B831C((uint64_t)&v55, v6, v7, v8, (__int128 *)&v42, 0, 0);
  if (v51 != v50)
    free(v51);
  if (v49 && HIDWORD(v48))
    free(v47);
  v40 = 0;
  v41 = 0;
  v39 = 0;
  if (a4)
  {
    v19 = *(uint64_t **)(a4 + 16);
    v22 = *v19;
    v20 = v19 + 2;
    v21 = v22;
    v23 = v22;
    v40 = (const char *)v20;
    v41 = v22;
    if ((_DWORD)v22 != 7)
    {
      if (v21 != 6)
        goto LABEL_8;
      if (*(_DWORD *)v20 == 1634485087 && *((_WORD *)v20 + 2) == 26478)
      {
        v25 = "clang";
LABEL_41:
        v40 = v25;
        v41 = strlen(v25);
        v39 = 1;
        goto LABEL_8;
      }
      if (v23 != 7)
        goto LABEL_8;
    }
    v26 = *(_DWORD *)v20;
    v27 = *(_DWORD *)((char *)v20 + 3);
    if (v26 != 1852268383 || v27 != 1600091502)
      goto LABEL_8;
    v25 = "gnu";
    goto LABEL_41;
  }
LABEL_8:
  v38 = a2 < 3;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v42 = v6;
  *(_QWORD *)&v43 = &v60;
  *((_QWORD *)&v43 + 1) = &v59;
  *(_QWORD *)&v44 = v36;
  *((_QWORD *)&v44 + 1) = &v55;
  v45 = &v40;
  v46 = &v39;
  v47 = &v58;
  v48 = &v38;
  v9 = (uint64_t *)sub_22F306810();
  if (v10)
  {
    v11 = v9;
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      sub_22E9BFAAC(&v42, v13);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = sub_22F306774();
  if (v14)
  {
    v15 = (_QWORD *)v14;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(v15[1] + 32))(&v35);
      sub_22E9BFAAC(&v42, v35);
      v16 = v35;
      v35 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  v17 = *(_QWORD *)(v6 + 208);
  sub_22F2A4F2C((uint64_t)v29, v57);
  if (v56 == v55)
    v18 = 0;
  else
    v18 = v55;
  sub_22E9B83FC(v6, v17, v29, (uint64_t)v18, -1431655765 * ((unint64_t)(v56 - v55) >> 5));
  if (v34 != v33)
    free(v34);
  if (v32)
  {
    if (v31)
      free(v30);
    v32 = 0;
  }
  llvm::deallocate_buffer(v36[0], (void *)(16 * v37));
  return sub_22E9B8490(&v55);
}

void sub_22F313C2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  __int16 v5;
  char v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  v5 = 0;
  v6 = a4;
  v7 = v9;
  v8 = 0x400000000;
  sub_22E9C0008(a1, a2, &v4);
  if (v7 != v9)
    free(v7);
}

void sub_22F313CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_22F313C2C(a1, a2, a4, 0);
  }
  else if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) != 0)
  {
    sub_22E9C0E00(a1, a2, (void *)(a3 & 0xFFFFFFFFFFFFFFFELL), 0, 0, 0, 0);
  }
}

void sub_22F313CEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17[3];
  void *v18;
  int v19;
  char v20;
  void *v21;
  void *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[128];
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32[11];
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  void *v38;
  int v39;
  char v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[64];
  uint64_t v46;

  v46 = a3;
  v7 = sub_22EA06918((_QWORD *)a1, &v46, a4, 0);
  if (v7)
  {
    v8 = v7;
    v33 = 12;
    v34 = 0;
    v40 = 0;
    v35 = 0u;
    v36 = 0u;
    v37 = 0;
    v41 = v45;
    v42 = v45;
    v43 = 8;
    v44 = 0;
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
    sub_22E9B831C((uint64_t)&v28, a1, v9, v10, (__int128 *)&v33, (uint64_t)sub_22E9C2584, 0);
    v11 = operator new(0x28uLL);
    v11[2] = 0;
    v11[3] = 0;
    *((_DWORD *)v11 + 8) = 0;
    v12 = v30;
    *v11 = v30;
    v11[1] = &v30;
    v12[1] = v11;
    v30 = v11;
    ++v31;
    v23 = v27;
    v24 = v27;
    v25 = 16;
    v26 = 0;
    sub_22E9C2FC4((uint64_t)&v33, v8, 1, 1, *(_QWORD *)(a1 + 216), (uint64_t)&v23, (uint64_t)&v28, a5, 1u, 1);
    v13 = (uint64_t)v30;
    v14 = *v30;
    *(_QWORD *)(v14 + 8) = v30[1];
    **(_QWORD **)(v13 + 8) = v14;
    --v31;
    sub_22E9D8FB0(v13);
    v15 = *(_QWORD *)(a1 + 208);
    sub_22F2A4F2C((uint64_t)v17, v32);
    if (v29 == v28)
      v16 = 0;
    else
      v16 = v28;
    sub_22E9B83FC(a1, v15, v17, (uint64_t)v16, -1431655765 * ((unint64_t)(v29 - v28) >> 5));
    if (v22 != v21)
      free(v22);
    if (v20)
    {
      if (v19)
        free(v18);
      v20 = 0;
    }
    if (v24 != v23)
      free(v24);
    sub_22E9B8490(&v28);
    if (v42 != v41)
      free(v42);
    if (v40)
    {
      if (v39)
        free(v38);
    }
  }
}

char **sub_22F313F10(_QWORD *a1, uint64_t **a2, int a3)
{
  char **result;
  uint64_t (*v6)(uint64_t, uint64_t);
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13[3];
  void *v14;
  int v15;
  char v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  uint64_t (**v20)();
  __int128 v21;
  __int128 v22;
  char v23;
  void *v24;
  int v25;
  char v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[64];
  char *v32;
  char *v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  __int128 v36[11];
  void **v37;

  result = (char **)a1[26];
  if (result)
  {
    if ((a3 - 25) >= 3)
    {
      if (a3 == 23)
      {
        v6 = (uint64_t (*)(uint64_t, uint64_t))sub_22E9C3504;
        v7 = 13;
      }
      else
      {
        v6 = (uint64_t (*)(uint64_t, uint64_t))sub_22E9C3518;
        v7 = 14;
      }
    }
    else
    {
      v6 = sub_22E9C3560;
      v7 = 15;
    }
    v8 = (*((uint64_t (**)(char **))*result + 5))(result);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[26] + 48))(a1[26]);
    LODWORD(v20) = v7;
    BYTE4(v20) = 0;
    v26 = 0;
    v21 = 0u;
    v22 = 0u;
    v23 = 0;
    v27 = v31;
    v28 = v31;
    v29 = 8;
    v30 = 0;
    sub_22E9B831C((uint64_t)&v32, (uint64_t)a1, v8, v9, (__int128 *)&v20, 0, 0);
    if (v28 != v27)
      free(v28);
    if (v26 && v25)
      free(v24);
    v10 = a1[27];
    memset(v19, 0, sizeof(v19));
    sub_22E9B8FE8((uint64_t)&v20, (uint64_t)&v32, v10, 0, (uint64_t)v19);
    v37 = (void **)v19;
    sub_22E6C60B8(&v37);
    v34 = v6;
    v35 = 0;
    sub_22EC67A18(a1, a2, 1, (uint64_t)&v20, (*(_BYTE *)(a1[26] + 8) & 4) != 0, (*(_BYTE *)(a1[26] + 8) & 0x20) != 0);
    v11 = a1[26];
    if ((*(_BYTE *)(v11 + 8) & 4) != 0)
    {
      v34 = sub_22E9C35B8;
      v35 = 0;
      sub_22EC67A18(a1, a2, 6, (uint64_t)&v20, (*(_BYTE *)(v11 + 8) & 4) != 0, (*(_BYTE *)(v11 + 8) & 0x20) != 0);
      v11 = a1[26];
    }
    sub_22F2A4F2C((uint64_t)v13, v36);
    if (v33 == v32)
      v12 = 0;
    else
      v12 = v32;
    sub_22E9B83FC((uint64_t)a1, v11, v13, (uint64_t)v12, -1431655765 * ((unint64_t)(v33 - v32) >> 5));
    if (v18 != v17)
      free(v18);
    if (v16)
    {
      if (v15)
        free(v14);
      v16 = 0;
    }
    v20 = off_24FAB7520;
    v37 = (void **)&v23;
    sub_22E6C60B8(&v37);
    return sub_22E9B8490(&v32);
  }
  return result;
}

char **sub_22F31416C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v13[3];
  void *v14;
  int v15;
  char v16;
  void *v17;
  void *v18;
  int v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;
  void *v24;
  int v25;
  char v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[64];
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36[11];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v19 = 28;
  v20 = 0;
  v26 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v27 = v31;
  v28 = v31;
  v29 = 8;
  v30 = 0;
  sub_22E9B831C((uint64_t)&v32, a1, v4, v5, (__int128 *)&v19, 0, 0);
  if (v28 != v27)
    free(v28);
  if (v26 && v25)
    free(v24);
  v6 = operator new(0x28uLL);
  v6[2] = 0;
  v6[3] = 0;
  *((_DWORD *)v6 + 8) = 0;
  v7 = v34;
  *v6 = v34;
  v6[1] = &v34;
  v7[1] = v6;
  v34 = v6;
  ++v35;
  sub_22E9C35DC(a2, (uint64_t *)&v32, *(uint64_t **)(a1 + 72));
  v8 = (uint64_t)v34;
  v9 = *v34;
  *(_QWORD *)(v9 + 8) = v34[1];
  **(_QWORD **)(v8 + 8) = v9;
  --v35;
  sub_22E9D8FB0(v8);
  v10 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v13, v36);
  if (v33 == v32)
    v11 = 0;
  else
    v11 = v32;
  sub_22E9B83FC(a1, v10, v13, (uint64_t)v11, -1431655765 * ((unint64_t)(v33 - v32) >> 5));
  if (v18 != v17)
    free(v18);
  if (v16)
  {
    if (v15)
      free(v14);
    v16 = 0;
  }
  return sub_22E9B8490(&v32);
}

char **sub_22F314324(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  __int128 v18[3];
  void *v19;
  int v20;
  char v21;
  void *v22;
  void *v23;
  _QWORD v24[2];
  __int128 v25;
  int v26;
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  int v34;
  _QWORD v35[3];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  __int128 v41;
  int v42;
  _QWORD v43[3];
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  __int128 v49;
  __int128 v50;
  char v51;
  void *v52;
  int v53;
  char v54;
  _BYTE *v55;
  void *v56;
  uint64_t v57;
  int v58;
  _BYTE v59[64];
  char *v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64[11];

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v48) = 28;
  BYTE4(v48) = 0;
  v54 = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0;
  v55 = v59;
  v56 = v59;
  v57 = 8;
  v58 = 0;
  sub_22E9B831C((uint64_t)&v60, a1, v8, v9, (__int128 *)&v48, 0, 0);
  if (v56 != v55)
    free(v56);
  if (v54 && v53)
    free(v52);
  v10 = operator new(0x28uLL);
  v10[2] = 0;
  v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  v11 = v62;
  *v10 = v62;
  v10[1] = &v62;
  v11[1] = v10;
  v62 = v10;
  ++v63;
  sub_22E9C35DC(a2, (uint64_t *)&v60, *(uint64_t **)(a1 + 72));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
  {
    v40[0] = 0;
    v40[1] = "noexcept";
    v41 = xmmword_22F469F50;
    v42 = 0;
    memset(v43, 0, sizeof(v43));
    v44 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    sub_22E9D8DB4((uint64_t *)&v60, (uint64_t)v40);
    v48 = (void **)v43;
    sub_22E6C60B8(&v48);
    if (*(_DWORD *)(a3 + 80) == 7 && !sub_22E8AD5E0(a3) && !sub_22E8AD59C(a3))
    {
      if (!a4 || (v17 = *a4, (*a4 & 0xE) == 0))
      {
        v32[0] = 0;
        v32[1] = "final";
        v33 = xmmword_22F469F50;
        v34 = 0;
        memset(v35, 0, sizeof(v35));
        v36 = 0;
        v38 = 0;
        v39 = 0;
        v37 = 0;
        sub_22E9D8DB4((uint64_t *)&v60, (uint64_t)v32);
        v48 = (void **)v35;
        sub_22E6C60B8(&v48);
        if (!a4)
        {
LABEL_25:
          v24[0] = 0;
          v24[1] = "override";
          v25 = xmmword_22F469F50;
          v26 = 0;
          memset(v27, 0, sizeof(v27));
          v28 = 0;
          v30 = 0;
          v31 = 0;
          v29 = 0;
          sub_22E9D8DB4((uint64_t *)&v60, (uint64_t)v24);
          v48 = (void **)v27;
          sub_22E6C60B8(&v48);
          goto LABEL_10;
        }
        v17 = *a4;
      }
      if ((v17 & 1) != 0)
        goto LABEL_10;
      goto LABEL_25;
    }
  }
LABEL_10:
  v12 = (uint64_t)v62;
  v13 = *v62;
  *(_QWORD *)(v13 + 8) = v62[1];
  **(_QWORD **)(v12 + 8) = v13;
  --v63;
  sub_22E9D8FB0(v12);
  v14 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v18, v64);
  if (v61 == v60)
    v15 = 0;
  else
    v15 = v60;
  sub_22E9B83FC(a1, v14, v18, (uint64_t)v15, -1431655765 * ((unint64_t)(v61 - v60) >> 5));
  if (v23 != v22)
    free(v23);
  if (v21)
  {
    if (v20)
      free(v19);
    v21 = 0;
  }
  return sub_22E9B8490(&v60);
}

void sub_22F314634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EF67C8C(*(_QWORD *)(a1 + 88));
  sub_22F313C2C(a1, a2, v4, 0);
}

void sub_22F31466C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v4;
  char v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x24BDAC8D0];
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 48 < 0x1B)
  {
    v5 = 0;
    v4 = 0;
    v6 = v8;
    v3 = *(_QWORD *)(a3 + 48);
    v8[0] = a3;
    v7 = 0x400000001;
    sub_22E9C0008(a1, a2, &v3);
    if (v6 != v8)
      free(v6);
  }
  else
  {
    sub_22F313608(a1, a2, 7u);
  }
}

char **sub_22F314740(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  __int128 v19[2];
  void *v20;
  int v21;
  char v22;
  void *v23;
  void *v24;
  _QWORD v25[2];
  __int128 v26;
  int v27;
  _QWORD v28[3];
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  int v35;
  _QWORD v36[3];
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[3];
  _QWORD v43[5];
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  BOOL (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53[11];
  char v54;
  void **v55;
  _BYTE v56[48];
  _DWORD *v57;
  uint64_t v58;
  _DWORD v59[2];
  char v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  _BYTE v65[16];
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[6];

  v68[5] = *MEMORY[0x24BDAC8D0];
  v54 = a3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v56 = 7;
  v56[4] = 0;
  v60 = 0;
  memset(&v56[8], 0, 33);
  v61 = v65;
  v62 = v65;
  v63 = 8;
  v64 = 0;
  sub_22E9B831C((uint64_t)&v45, a1, v5, v6, (__int128 *)v56, 0, 0);
  if (v62 != v61)
    free(v62);
  if (v60 && v59[1])
    free((void *)v58);
  v49 = sub_22E9B8804;
  v50 = 0;
  v7 = operator new(0x28uLL);
  v7[2] = 0;
  v7[3] = 0;
  *((_DWORD *)v7 + 8) = 0;
  v8 = v51;
  *v7 = v51;
  v7[1] = &v51;
  v8[1] = v7;
  v51 = v7;
  ++v52;
  v9 = *(_QWORD *)(a1 + 216);
  memset(v42, 0, sizeof(v42));
  sub_22E9B8FE8((uint64_t)v43, (uint64_t)&v45, v9, 0, (uint64_t)v42);
  *(_QWORD *)v56 = v42;
  sub_22E6C60B8((void ***)v56);
  sub_22EC67A18((_QWORD *)a1, (uint64_t **)a2, 0, (uint64_t)v43, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x20) != 0);
  sub_22E9B90C4();
  *(_OWORD *)v56 = v48;
  memset(&v56[16], 0, 32);
  v57 = v59;
  v58 = 0x400000000;
  v66 = v68;
  v67 = 0x200000000;
  v41[0] = &v54;
  v41[1] = v56;
  sub_22E8A9AD8((uint64_t)v56, (uint64_t)"else");
  v10 = *(_QWORD *)(v47 + 208);
  if (v10 && (*(_BYTE *)(v10 + 8) & 2) != 0)
    sub_22E9C655C((uint64_t)v41);
  v33[0] = 0;
  v33[1] = sub_22F2F28A4((uint64_t)v56);
  v34 = xmmword_22F469F30;
  v35 = 0;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  sub_22E9D8DB4((uint64_t *)&v45, (uint64_t)v33);
  v55 = (void **)v36;
  sub_22E6C60B8(&v55);
  sub_22E8A9AD8((uint64_t)v56, (uint64_t)"else if");
  sub_22E8A9D90((uint64_t)v56, 19, "");
  sub_22E8A9D90((uint64_t)v56, 7, "");
  if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
    v11 = "condition";
  else
    v11 = "expression";
  sub_22E8A9C00((uint64_t)v56, (uint64_t)v11);
  sub_22E8A9D90((uint64_t)v56, 8, "");
  v12 = *(_QWORD *)(v47 + 208);
  if (v12 && (*(_BYTE *)(v12 + 8) & 2) != 0)
    sub_22E9C655C((uint64_t)v41);
  v25[0] = 0;
  v25[1] = sub_22F2F28A4((uint64_t)v56);
  v26 = xmmword_22F469F30;
  v27 = 0;
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  sub_22E9D8DB4((uint64_t *)&v45, (uint64_t)v25);
  v55 = (void **)v28;
  sub_22E6C60B8(&v55);
  v13 = (uint64_t)v51;
  v14 = *v51;
  *(_QWORD *)(v14 + 8) = v51[1];
  **(_QWORD **)(v13 + 8) = v14;
  --v52;
  sub_22E9D8FB0(v13);
  if (*(_QWORD *)(a2 + 24))
    sub_22E9BE678(*(_WORD **)(a1 + 72), (uint64_t *)&v45);
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(unsigned __int8 *)(v15 + 8);
  if ((v16 & 1) != 0)
  {
    sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v45, (v16 >> 5) & 1, 0, 0);
    v15 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v19, v53);
  if (v46 == v45)
    v17 = 0;
  else
    v17 = v45;
  sub_22E9B83FC(a1, v15, v19, (uint64_t)v17, -1431655765 * ((unint64_t)(v46 - v45) >> 5));
  if (v24 != v23)
    free(v24);
  if (v22)
  {
    if (v21)
      free(v20);
    v22 = 0;
  }
  if (v66 != v68)
    free(v66);
  if (v57 != v59)
    free(v57);
  v43[0] = off_24FAB7520;
  *(_QWORD *)v56 = &v44;
  sub_22E6C60B8((void ***)v56);
  return sub_22E9B8490(&v45);
}

void sub_22F314BAC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  void *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  _QWORD v20[3];
  void **v21[5];
  uint64_t v22;
  _QWORD v23[2];
  __int128 v24;
  int v25;
  _QWORD v26[3];
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35[11];
  int v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  void *v41;
  int v42;
  char v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  _BYTE v48[64];
  void **v49;

  v3 = a1[26];
  if (v3)
  {
    v36 = 20;
    v43 = 0;
    v38 = 0u;
    v39 = 0u;
    v40 = 0;
    v44 = v48;
    v45 = v48;
    v46 = 8;
    v47 = 0;
    v37 = 1;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[26] + 48))(a1[26]);
    sub_22E9B831C((uint64_t)&v31, (uint64_t)a1, v5, v6, (__int128 *)&v36, (uint64_t)sub_22E9C35B8, 0);
    v7 = operator new(0x28uLL);
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    v8 = v33;
    *v7 = v33;
    v7[1] = &v33;
    v8[1] = v7;
    v33 = v7;
    ++v34;
    if ((*(_BYTE *)(a2 + 8) & 0x20) == 0)
    {
      v23[0] = 0;
      v23[1] = "namespace";
      v24 = xmmword_22F469F50;
      v25 = 0;
      memset(v26, 0, sizeof(v26));
      v27 = 0;
      v29 = 0;
      v30 = 0;
      v28 = 0;
      sub_22E9D8DB4((uint64_t *)&v31, (uint64_t)v23);
      v21[0] = (void **)v26;
      sub_22E6C60B8(v21);
    }
    v9 = a1[27];
    memset(v20, 0, sizeof(v20));
    sub_22E9B8FE8((uint64_t)v21, (uint64_t)&v31, v9, 0, (uint64_t)v20);
    v49 = (void **)v20;
    sub_22E6C60B8(&v49);
    sub_22EC67A18(a1, (uint64_t **)a2, 0, (uint64_t)v21, (*(_BYTE *)(a1[26] + 8) & 4) != 0, (*(_BYTE *)(a1[26] + 8) & 0x20) != 0);
    v10 = (uint64_t)v33;
    v11 = *v33;
    *(_QWORD *)(v11 + 8) = v33[1];
    **(_QWORD **)(v10 + 8) = v11;
    --v34;
    sub_22E9D8FB0(v10);
    v12 = a1[26];
    sub_22F2A4F2C((uint64_t)&v14, v35);
    if (v32 == v31)
      v13 = 0;
    else
      v13 = v31;
    sub_22E9B83FC((uint64_t)a1, v12, &v14, (uint64_t)v13, -1431655765 * ((unint64_t)(v32 - v31) >> 5));
    if (v19 != v18)
      free(v19);
    if (v17)
    {
      if (v16)
        free(v15);
      v17 = 0;
    }
    v21[0] = (void **)off_24FAB7520;
    v49 = (void **)&v22;
    sub_22E6C60B8(&v49);
    sub_22E9B8490(&v31);
    if (v45 != v44)
      free(v45);
    if (v43)
    {
      if (v42)
        free(v41);
    }
  }
}

char **sub_22F314E34(_QWORD *a1, uint64_t **a2)
{
  char **result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14[3];
  void *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  _QWORD v20[3];
  uint64_t (**v21)();
  __int128 v22;
  __int128 v23;
  char v24;
  void *v25;
  int v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[64];
  char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37[11];
  void **v38;

  result = (char **)a1[26];
  if (result)
  {
    v5 = (*((uint64_t (**)(char **))*result + 5))(result);
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[26] + 48))(a1[26]);
    LODWORD(v21) = 17;
    BYTE4(v21) = 0;
    v27 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v28 = v32;
    v29 = v32;
    v30 = 8;
    v31 = 0;
    sub_22E9B831C((uint64_t)&v33, (uint64_t)a1, v5, v6, (__int128 *)&v21, (uint64_t)sub_22E9C77E0, 0);
    if (v29 != v28)
      free(v29);
    if (v27 && v26)
      free(v25);
    v7 = operator new(0x28uLL);
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    v8 = v35;
    *v7 = v35;
    v7[1] = &v35;
    v8[1] = v7;
    v35 = v7;
    ++v36;
    v9 = a1[27];
    memset(v20, 0, sizeof(v20));
    sub_22E9B8FE8((uint64_t)&v21, (uint64_t)&v33, v9, 0, (uint64_t)v20);
    v38 = (void **)v20;
    sub_22E6C60B8(&v38);
    sub_22EC67A18(a1, a2, 0, (uint64_t)&v21, (*(_BYTE *)(a1[26] + 8) & 4) != 0, (*(_BYTE *)(a1[26] + 8) & 0x20) != 0);
    v10 = (uint64_t)v35;
    v11 = *v35;
    *(_QWORD *)(v11 + 8) = v35[1];
    **(_QWORD **)(v10 + 8) = v11;
    --v36;
    sub_22E9D8FB0(v10);
    v12 = a1[26];
    sub_22F2A4F2C((uint64_t)v14, v37);
    if (v34 == v33)
      v13 = 0;
    else
      v13 = v33;
    sub_22E9B83FC((uint64_t)a1, v12, v14, (uint64_t)v13, -1431655765 * ((unint64_t)(v34 - v33) >> 5));
    if (v19 != v18)
      free(v19);
    if (v17)
    {
      if (v16)
        free(v15);
      v17 = 0;
    }
    v21 = off_24FAB7520;
    v38 = (void **)&v24;
    sub_22E6C60B8(&v38);
    return sub_22E9B8490(&v33);
  }
  return result;
}

char **sub_22F31505C(_QWORD *a1, uint64_t **a2)
{
  char **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10[3];
  void *v11;
  int v12;
  char v13;
  void *v14;
  void *v15;
  _QWORD v16[3];
  uint64_t (**v17)();
  __int128 v18;
  __int128 v19;
  char v20;
  void *v21;
  int v22;
  char v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[64];
  char *v29;
  char *v30;
  __int128 v31[11];
  void **v32;

  result = (char **)a1[26];
  if (result)
  {
    v5 = (*((uint64_t (**)(char **))*result + 5))(result);
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[26] + 48))(a1[26]);
    LODWORD(v17) = 17;
    BYTE4(v17) = 0;
    v23 = 0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
    v24 = v28;
    v25 = v28;
    v26 = 8;
    v27 = 0;
    sub_22E9B831C((uint64_t)&v29, (uint64_t)a1, v5, v6, (__int128 *)&v17, (uint64_t)sub_22E9C77E0, 0);
    if (v25 != v24)
      free(v25);
    if (v23 && v22)
      free(v21);
    v7 = a1[27];
    memset(v16, 0, sizeof(v16));
    sub_22E9B8FE8((uint64_t)&v17, (uint64_t)&v29, v7, 0, (uint64_t)v16);
    v32 = (void **)v16;
    sub_22E6C60B8(&v32);
    sub_22EC67A18(a1, a2, 0, (uint64_t)&v17, (*(_BYTE *)(a1[26] + 8) & 4) != 0, (*(_BYTE *)(a1[26] + 8) & 0x20) != 0);
    v8 = a1[26];
    sub_22F2A4F2C((uint64_t)v10, v31);
    if (v30 == v29)
      v9 = 0;
    else
      v9 = v29;
    sub_22E9B83FC((uint64_t)a1, v8, v10, (uint64_t)v9, -1431655765 * ((unint64_t)(v30 - v29) >> 5));
    if (v15 != v14)
      free(v15);
    if (v13)
    {
      if (v12)
        free(v11);
      v13 = 0;
    }
    v17 = off_24FAB7520;
    v32 = (void **)&v20;
    sub_22E6C60B8(&v32);
    return sub_22E9B8490(&v29);
  }
  return result;
}

char **sub_22F315230()
{
  uint64_t **v0;
  uint64_t v1;
  char **result;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13[3];
  void *v14;
  int v15;
  char v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  _QWORD v20[2];
  __int128 v21;
  int v22;
  _QWORD v23[3];
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  __int128 v29;
  int v30;
  _QWORD v31[3];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  int v38;
  _QWORD v39[3];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int128 v45;
  int v46;
  _QWORD v47[3];
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  __int128 v53;
  int v54;
  _QWORD v55[3];
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  __int128 v61;
  int v62;
  _QWORD v63[3];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  __int128 v69;
  int v70;
  _QWORD v71[3];
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  __int128 v77;
  int v78;
  _QWORD v79[3];
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  __int128 v85;
  int v86;
  _QWORD v87[3];
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[2];
  __int128 v93;
  int v94;
  _QWORD v95[3];
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[2];
  __int128 v101;
  int v102;
  _QWORD v103[3];
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  __int128 v109;
  int v110;
  _QWORD v111[3];
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  __int128 v117;
  int v118;
  _QWORD v119[3];
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[2];
  __int128 v125;
  int v126;
  _QWORD v127[3];
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[2];
  __int128 v133;
  int v134;
  _QWORD v135[3];
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[2];
  __int128 v141;
  int v142;
  _QWORD v143[3];
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[2];
  __int128 v149;
  int v150;
  _QWORD v151[3];
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[2];
  __int128 v157;
  int v158;
  _QWORD v159[3];
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[2];
  __int128 v165;
  int v166;
  _QWORD v167[3];
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD v172[2];
  __int128 v173;
  int v174;
  __int128 v175;
  uint64_t v176;
  char v177;
  __int128 v178;
  uint64_t v179;
  _QWORD v180[2];
  __int128 v181;
  int v182;
  _QWORD v183[3];
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[2];
  __int128 v189;
  int v190;
  _QWORD v191[3];
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD v196[2];
  __int128 v197;
  int v198;
  _QWORD v199[3];
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD v204[2];
  __int128 v205;
  int v206;
  _QWORD v207[3];
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD v212[2];
  __int128 v213;
  int v214;
  _QWORD v215[3];
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[2];
  __int128 v221;
  int v222;
  _QWORD v223[3];
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD v228[2];
  __int128 v229;
  int v230;
  _QWORD v231[3];
  char v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD v236[2];
  __int128 v237;
  int v238;
  _QWORD v239[3];
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD v244[2];
  __int128 v245;
  int v246;
  _QWORD v247[3];
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD v252[2];
  __int128 v253;
  int v254;
  _QWORD v255[3];
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD v260[2];
  __int128 v261;
  int v262;
  _QWORD v263[3];
  char v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD v268[2];
  __int128 v269;
  int v270;
  _QWORD v271[3];
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD v276[2];
  __int128 v277;
  int v278;
  _QWORD v279[3];
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD v284[2];
  __int128 v285;
  int v286;
  _QWORD v287[3];
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD v292[2];
  __int128 v293;
  int v294;
  _QWORD v295[3];
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD v300[2];
  __int128 v301;
  int v302;
  _QWORD v303[3];
  char v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD v308[2];
  __int128 v309;
  int v310;
  _QWORD v311[3];
  char v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD v316[2];
  __int128 v317;
  int v318;
  _QWORD v319[3];
  char v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD v324[2];
  __int128 v325;
  int v326;
  _QWORD v327[3];
  char v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD v332[2];
  __int128 v333;
  int v334;
  _QWORD v335[3];
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD v340[2];
  __int128 v341;
  int v342;
  _QWORD v343[3];
  char v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD v348[2];
  __int128 v349;
  int v350;
  _QWORD v351[3];
  char v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD v356[2];
  __int128 v357;
  int v358;
  _QWORD v359[3];
  char v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD v364[2];
  __int128 v365;
  int v366;
  _QWORD v367[3];
  char v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t (**v372)();
  __int128 v373;
  __int128 v374;
  char v375;
  void *v376;
  int v377;
  char v378;
  _BYTE *v379;
  void *v380;
  uint64_t v381;
  int v382;
  _BYTE v383[64];
  char *v384;
  char *v385;
  char v386;
  _QWORD *v387;
  uint64_t v388;
  __int128 v389[11];
  void **v390;

  v1 = MEMORY[0x24BDAC7A8]();
  result = *(char ***)(v1 + 208);
  if (result)
  {
    v3 = v0;
    v4 = (*((uint64_t (**)(char **))*result + 5))(result);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 208) + 48))(*(_QWORD *)(v1 + 208));
    LODWORD(v372) = 18;
    BYTE4(v372) = 0;
    v378 = 0;
    v373 = 0u;
    v374 = 0u;
    v375 = 0;
    v379 = v383;
    v380 = v383;
    v381 = 8;
    v382 = 0;
    sub_22E9B831C((uint64_t)&v384, v1, v4, v5, (__int128 *)&v372, (uint64_t)sub_22E9C7C74, 0);
    if (v380 != v379)
      free(v380);
    if (v378 && v377)
      free(v376);
    v6 = operator new(0x28uLL);
    v6[2] = 0;
    v6[3] = 0;
    *((_DWORD *)v6 + 8) = 0;
    v7 = v387;
    *v6 = v387;
    v6[1] = &v387;
    v7[1] = v6;
    v387 = v6;
    ++v388;
    v364[0] = 0;
    v364[1] = "new";
    v365 = xmmword_22F469F50;
    v366 = 0;
    v368 = 0;
    memset(v367, 0, sizeof(v367));
    v370 = 0;
    v371 = 0;
    v369 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v364);
    v372 = (uint64_t (**)())v367;
    sub_22E6C60B8((void ***)&v372);
    v356[0] = 0;
    v356[1] = "delete";
    v357 = xmmword_22F469F50;
    v358 = 0;
    memset(v359, 0, sizeof(v359));
    v360 = 0;
    v361 = 0;
    v363 = 0;
    v362 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v356);
    v372 = (uint64_t (**)())v359;
    sub_22E6C60B8((void ***)&v372);
    v348[0] = 0;
    v348[1] = "new[]";
    v349 = xmmword_22F469F50;
    v350 = 0;
    v355 = 0;
    v354 = 0;
    v353 = 0;
    memset(v351, 0, sizeof(v351));
    v352 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v348);
    v372 = (uint64_t (**)())v351;
    sub_22E6C60B8((void ***)&v372);
    v340[0] = 0;
    v340[1] = "delete[]";
    v341 = xmmword_22F469F50;
    v342 = 0;
    memset(v343, 0, sizeof(v343));
    v344 &= 0xC0u;
    v345 = 0;
    v347 = 0;
    v346 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v340);
    v372 = (uint64_t (**)())v343;
    sub_22E6C60B8((void ***)&v372);
    v332[0] = 0;
    v332[1] = "+";
    v333 = xmmword_22F469F50;
    v334 = 0;
    memset(v335, 0, sizeof(v335));
    v336 &= 0xC0u;
    v337 = 0;
    v339 = 0;
    v338 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v332);
    v372 = (uint64_t (**)())v335;
    sub_22E6C60B8((void ***)&v372);
    v324[0] = 0;
    v324[1] = "-";
    v325 = xmmword_22F469F50;
    v326 = 0;
    memset(v327, 0, sizeof(v327));
    v328 &= 0xC0u;
    v331 = 0;
    v329 = 0;
    v330 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v324);
    v372 = (uint64_t (**)())v327;
    sub_22E6C60B8((void ***)&v372);
    v316[0] = 0;
    v316[1] = "*";
    v317 = xmmword_22F469F50;
    v318 = 0;
    memset(v319, 0, sizeof(v319));
    v320 &= 0xC0u;
    v323 = 0;
    v321 = 0;
    v322 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v316);
    v372 = (uint64_t (**)())v319;
    sub_22E6C60B8((void ***)&v372);
    v308[0] = 0;
    v308[1] = "/";
    v309 = xmmword_22F469F50;
    v310 = 0;
    memset(v311, 0, sizeof(v311));
    v312 &= 0xC0u;
    v315 = 0;
    v313 = 0;
    v314 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v308);
    v372 = (uint64_t (**)())v311;
    sub_22E6C60B8((void ***)&v372);
    v300[0] = 0;
    v300[1] = "%";
    v301 = xmmword_22F469F50;
    v302 = 0;
    memset(v303, 0, sizeof(v303));
    v304 &= 0xC0u;
    v307 = 0;
    v305 = 0;
    v306 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v300);
    v372 = (uint64_t (**)())v303;
    sub_22E6C60B8((void ***)&v372);
    v292[0] = 0;
    v292[1] = "^";
    v293 = xmmword_22F469F50;
    v294 = 0;
    memset(v295, 0, sizeof(v295));
    v296 &= 0xC0u;
    v299 = 0;
    v297 = 0;
    v298 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v292);
    v372 = (uint64_t (**)())v295;
    sub_22E6C60B8((void ***)&v372);
    v284[0] = 0;
    v284[1] = "&";
    v285 = xmmword_22F469F50;
    v286 = 0;
    memset(v287, 0, sizeof(v287));
    v288 &= 0xC0u;
    v291 = 0;
    v289 = 0;
    v290 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v284);
    v372 = (uint64_t (**)())v287;
    sub_22E6C60B8((void ***)&v372);
    v276[0] = 0;
    v276[1] = "|";
    v277 = xmmword_22F469F50;
    v278 = 0;
    memset(v279, 0, sizeof(v279));
    v280 &= 0xC0u;
    v283 = 0;
    v281 = 0;
    v282 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v276);
    v372 = (uint64_t (**)())v279;
    sub_22E6C60B8((void ***)&v372);
    v268[0] = 0;
    v268[1] = "~";
    v269 = xmmword_22F469F50;
    v270 = 0;
    memset(v271, 0, sizeof(v271));
    v272 &= 0xC0u;
    v275 = 0;
    v273 = 0;
    v274 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v268);
    v372 = (uint64_t (**)())v271;
    sub_22E6C60B8((void ***)&v372);
    v260[0] = 0;
    v260[1] = "!";
    v261 = xmmword_22F469F50;
    v262 = 0;
    memset(v263, 0, sizeof(v263));
    v264 &= 0xC0u;
    v267 = 0;
    v265 = 0;
    v266 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v260);
    v372 = (uint64_t (**)())v263;
    sub_22E6C60B8((void ***)&v372);
    v252[0] = 0;
    v252[1] = "=";
    v253 = xmmword_22F469F50;
    v254 = 0;
    memset(v255, 0, sizeof(v255));
    v256 &= 0xC0u;
    v259 = 0;
    v257 = 0;
    v258 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v252);
    v372 = (uint64_t (**)())v255;
    sub_22E6C60B8((void ***)&v372);
    v244[0] = 0;
    v244[1] = "<";
    v245 = xmmword_22F469F50;
    v246 = 0;
    memset(v247, 0, sizeof(v247));
    v248 &= 0xC0u;
    v251 = 0;
    v249 = 0;
    v250 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v244);
    v372 = (uint64_t (**)())v247;
    sub_22E6C60B8((void ***)&v372);
    v236[0] = 0;
    v236[1] = ">";
    v237 = xmmword_22F469F50;
    v238 = 0;
    memset(v239, 0, sizeof(v239));
    v240 &= 0xC0u;
    v243 = 0;
    v241 = 0;
    v242 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v236);
    v372 = (uint64_t (**)())v239;
    sub_22E6C60B8((void ***)&v372);
    v228[0] = 0;
    v228[1] = "+=";
    v229 = xmmword_22F469F50;
    v230 = 0;
    memset(v231, 0, sizeof(v231));
    v232 &= 0xC0u;
    v235 = 0;
    v233 = 0;
    v234 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v228);
    v372 = (uint64_t (**)())v231;
    sub_22E6C60B8((void ***)&v372);
    v220[0] = 0;
    v220[1] = "-=";
    v221 = xmmword_22F469F50;
    v222 = 0;
    memset(v223, 0, sizeof(v223));
    v224 &= 0xC0u;
    v227 = 0;
    v225 = 0;
    v226 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v220);
    v372 = (uint64_t (**)())v223;
    sub_22E6C60B8((void ***)&v372);
    v212[0] = 0;
    v212[1] = "*=";
    v213 = xmmword_22F469F50;
    v214 = 0;
    memset(v215, 0, sizeof(v215));
    v216 &= 0xC0u;
    v219 = 0;
    v217 = 0;
    v218 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v212);
    v372 = (uint64_t (**)())v215;
    sub_22E6C60B8((void ***)&v372);
    v204[0] = 0;
    v204[1] = "/=";
    v205 = xmmword_22F469F50;
    v206 = 0;
    memset(v207, 0, sizeof(v207));
    v208 &= 0xC0u;
    v211 = 0;
    v209 = 0;
    v210 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v204);
    v372 = (uint64_t (**)())v207;
    sub_22E6C60B8((void ***)&v372);
    v196[0] = 0;
    v196[1] = "%=";
    v197 = xmmword_22F469F50;
    v198 = 0;
    memset(v199, 0, sizeof(v199));
    v200 &= 0xC0u;
    v203 = 0;
    v201 = 0;
    v202 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v196);
    v372 = (uint64_t (**)())v199;
    sub_22E6C60B8((void ***)&v372);
    v188[0] = 0;
    v188[1] = "^=";
    v189 = xmmword_22F469F50;
    v190 = 0;
    memset(v191, 0, sizeof(v191));
    v192 &= 0xC0u;
    v195 = 0;
    v193 = 0;
    v194 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v188);
    v372 = (uint64_t (**)())v191;
    sub_22E6C60B8((void ***)&v372);
    v180[0] = 0;
    v180[1] = "&=";
    v181 = xmmword_22F469F50;
    v182 = 0;
    memset(v183, 0, sizeof(v183));
    v184 &= 0xC0u;
    v187 = 0;
    v185 = 0;
    v186 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v180);
    v372 = (uint64_t (**)())v183;
    sub_22E6C60B8((void ***)&v372);
    v172[0] = 0;
    v172[1] = "|=";
    v173 = xmmword_22F469F50;
    v174 = 0;
    v175 = 0u;
    v176 = 0;
    v177 &= 0xC0u;
    v178 = 0u;
    v179 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v172);
    v372 = (uint64_t (**)())&v175;
    sub_22E6C60B8((void ***)&v372);
    v164[0] = 0;
    v164[1] = "<<";
    v165 = xmmword_22F469F50;
    v166 = 0;
    memset(v167, 0, sizeof(v167));
    v168 &= 0xC0u;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v164);
    v372 = (uint64_t (**)())v167;
    sub_22E6C60B8((void ***)&v372);
    v156[0] = 0;
    v156[1] = ">>";
    v157 = xmmword_22F469F50;
    v158 = 0;
    memset(v159, 0, sizeof(v159));
    v160 &= 0xC0u;
    v161 = 0;
    v162 = 0;
    v163 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v156);
    v372 = (uint64_t (**)())v159;
    sub_22E6C60B8((void ***)&v372);
    v148[0] = 0;
    v148[1] = "<<=";
    v149 = xmmword_22F469F50;
    v150 = 0;
    memset(v151, 0, sizeof(v151));
    v152 &= 0xC0u;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v148);
    v372 = (uint64_t (**)())v151;
    sub_22E6C60B8((void ***)&v372);
    v140[0] = 0;
    v140[1] = ">>=";
    v141 = xmmword_22F469F50;
    v142 = 0;
    memset(v143, 0, sizeof(v143));
    v144 &= 0xC0u;
    v145 = 0;
    v146 = 0;
    v147 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v140);
    v372 = (uint64_t (**)())v143;
    sub_22E6C60B8((void ***)&v372);
    v132[0] = 0;
    v132[1] = "==";
    v133 = xmmword_22F469F50;
    v134 = 0;
    memset(v135, 0, sizeof(v135));
    v136 &= 0xC0u;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v132);
    v372 = (uint64_t (**)())v135;
    sub_22E6C60B8((void ***)&v372);
    v124[0] = 0;
    v124[1] = "!=";
    v125 = xmmword_22F469F50;
    v126 = 0;
    memset(v127, 0, sizeof(v127));
    v128 &= 0xC0u;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v124);
    v372 = (uint64_t (**)())v127;
    sub_22E6C60B8((void ***)&v372);
    v116[0] = 0;
    v116[1] = "<=";
    v117 = xmmword_22F469F50;
    v118 = 0;
    memset(v119, 0, sizeof(v119));
    v120 &= 0xC0u;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v116);
    v372 = (uint64_t (**)())v119;
    sub_22E6C60B8((void ***)&v372);
    v108[0] = 0;
    v108[1] = ">=";
    v109 = xmmword_22F469F50;
    v110 = 0;
    memset(v111, 0, sizeof(v111));
    v112 &= 0xC0u;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v108);
    v372 = (uint64_t (**)())v111;
    sub_22E6C60B8((void ***)&v372);
    v100[0] = 0;
    v100[1] = "<=>";
    v101 = xmmword_22F469F50;
    v102 = 0;
    memset(v103, 0, sizeof(v103));
    v104 &= 0xC0u;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v100);
    v372 = (uint64_t (**)())v103;
    sub_22E6C60B8((void ***)&v372);
    v92[0] = 0;
    v92[1] = "&&";
    v93 = xmmword_22F469F50;
    v94 = 0;
    memset(v95, 0, sizeof(v95));
    v96 &= 0xC0u;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v92);
    v372 = (uint64_t (**)())v95;
    sub_22E6C60B8((void ***)&v372);
    v84[0] = 0;
    v84[1] = "||";
    v85 = xmmword_22F469F50;
    v86 = 0;
    memset(v87, 0, sizeof(v87));
    v88 &= 0xC0u;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v84);
    v372 = (uint64_t (**)())v87;
    sub_22E6C60B8((void ***)&v372);
    v76[0] = 0;
    v76[1] = "++";
    v77 = xmmword_22F469F50;
    v78 = 0;
    memset(v79, 0, sizeof(v79));
    v80 &= 0xC0u;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v76);
    v372 = (uint64_t (**)())v79;
    sub_22E6C60B8((void ***)&v372);
    v68[0] = 0;
    v68[1] = "--";
    v69 = xmmword_22F469F50;
    v70 = 0;
    memset(v71, 0, sizeof(v71));
    v72 &= 0xC0u;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v68);
    v372 = (uint64_t (**)())v71;
    sub_22E6C60B8((void ***)&v372);
    v60[0] = 0;
    v60[1] = ",";
    v61 = xmmword_22F469F50;
    v62 = 0;
    memset(v63, 0, sizeof(v63));
    v64 &= 0xC0u;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v60);
    v372 = (uint64_t (**)())v63;
    sub_22E6C60B8((void ***)&v372);
    v52[0] = 0;
    v52[1] = "->*";
    v53 = xmmword_22F469F50;
    v54 = 0;
    memset(v55, 0, sizeof(v55));
    v56 &= 0xC0u;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v52);
    v372 = (uint64_t (**)())v55;
    sub_22E6C60B8((void ***)&v372);
    v44[0] = 0;
    v44[1] = "->";
    v45 = xmmword_22F469F50;
    v46 = 0;
    memset(v47, 0, sizeof(v47));
    v48 &= 0xC0u;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v44);
    v372 = (uint64_t (**)())v47;
    sub_22E6C60B8((void ***)&v372);
    v36[0] = 0;
    v36[1] = "()";
    v37 = xmmword_22F469F50;
    v38 = 0;
    memset(v39, 0, sizeof(v39));
    v40 &= 0xC0u;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v36);
    v372 = (uint64_t (**)())v39;
    sub_22E6C60B8((void ***)&v372);
    v28[0] = 0;
    v28[1] = "[]";
    v29 = xmmword_22F469F50;
    v30 = 0;
    memset(v31, 0, sizeof(v31));
    v32 &= 0xC0u;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v28);
    v372 = (uint64_t (**)())v31;
    sub_22E6C60B8((void ***)&v372);
    v20[0] = 0;
    v20[1] = "co_await";
    v21 = xmmword_22F469F50;
    v22 = 0;
    memset(v23, 0, sizeof(v23));
    v24 &= 0xC0u;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    sub_22E9D8DB4((uint64_t *)&v384, (uint64_t)v20);
    v372 = (uint64_t (**)())v23;
    sub_22E6C60B8((void ***)&v372);
    v386 = 1;
    v8 = *(_QWORD *)(v1 + 216);
    memset(v19, 0, sizeof(v19));
    sub_22E9B8FE8((uint64_t)&v372, (uint64_t)&v384, v8, 0, (uint64_t)v19);
    v390 = (void **)v19;
    sub_22E6C60B8(&v390);
    sub_22EC67A18((_QWORD *)v1, v3, 0, (uint64_t)&v372, (*(_BYTE *)(*(_QWORD *)(v1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(v1 + 208) + 8) & 0x20) != 0);
    sub_22E9C7CC8(*(uint64_t **)(v1 + 72), (uint64_t)&v384);
    v9 = (uint64_t)v387;
    v10 = *v387;
    *(_QWORD *)(v10 + 8) = v387[1];
    **(_QWORD **)(v9 + 8) = v10;
    --v388;
    sub_22E9D8FB0(v9);
    v11 = *(_QWORD *)(v1 + 208);
    sub_22F2A4F2C((uint64_t)v13, v389);
    if (v385 == v384)
      v12 = 0;
    else
      v12 = v384;
    sub_22E9B83FC(v1, v11, v13, (uint64_t)v12, -1431655765 * ((unint64_t)(v385 - v384) >> 5));
    if (v18 != v17)
      free(v18);
    if (v16)
    {
      if (v15)
        free(v14);
      v16 = 0;
    }
    v372 = off_24FAB7520;
    v390 = (void **)&v375;
    sub_22E6C60B8(&v390);
    return sub_22E9B8490(&v384);
  }
  return result;
}

char **sub_22F316684(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12[3];
  void *v13;
  int v14;
  char v15;
  void *v16;
  void *v17;
  int v18;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  void *v23;
  int v24;
  char v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[64];
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v18 = 0;
  v19 = 0;
  v25 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v26 = v30;
  v27 = v30;
  v28 = 8;
  v29 = 0;
  sub_22E9B831C((uint64_t)&v31, a1, v2, v3, (__int128 *)&v18, 0, 0);
  if (v27 != v26)
    free(v27);
  if (v25 && v24)
    free(v23);
  v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  *((_DWORD *)v4 + 8) = 0;
  v5 = v33;
  *v4 = v33;
  v4[1] = &v33;
  v5[1] = v4;
  v33 = v4;
  ++v34;
  v6 = *(_WORD *)(*(_QWORD *)(a1 + 216) + 8);
  if ((v6 & 0x7E) == 0x14)
  {
    sub_22E9CAB1C(*(_QWORD *)(a1 + 72), (uint64_t)&v31, 0);
  }
  else if ((v6 & 0x7Fu) - 19 > 4)
  {
    sub_22E9CB10C((uint64_t)&v31, 0);
  }
  else
  {
    sub_22E9CAE48(*(_QWORD *)(a1 + 72), (uint64_t *)&v31, 0);
  }
  v7 = (uint64_t)v33;
  v8 = *v33;
  *(_QWORD *)(v8 + 8) = v33[1];
  **(_QWORD **)(v7 + 8) = v8;
  --v34;
  sub_22E9D8FB0(v7);
  v9 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v12, v35);
  if (v32 == v31)
    v10 = 0;
  else
    v10 = v31;
  sub_22E9B83FC(a1, v9, v12, (uint64_t)v10, -1431655765 * ((unint64_t)(v32 - v31) >> 5));
  if (v17 != v16)
    free(v17);
  if (v15)
  {
    if (v14)
      free(v13);
    v15 = 0;
  }
  return sub_22E9B8490(&v31);
}

char **sub_22F316878(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v11[3];
  void *v12;
  int v13;
  char v14;
  void *v15;
  void *v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  void *v22;
  int v23;
  char v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v17 = 0;
  v18 = 0;
  v24 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v25 = v29;
  v26 = v29;
  v27 = 8;
  v28 = 0;
  sub_22E9B831C((uint64_t)&v30, a1, v2, v3, (__int128 *)&v17, 0, 0);
  if (v26 != v25)
    free(v26);
  if (v24 && v23)
    free(v22);
  v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  *((_DWORD *)v4 + 8) = 0;
  v5 = v32;
  *v4 = v32;
  v4[1] = &v32;
  v5[1] = v4;
  v32 = v4;
  ++v33;
  sub_22E9CB748(*(_QWORD *)(a1 + 72), (uint64_t *)&v30, 0);
  v6 = (uint64_t)v32;
  v7 = *v32;
  *(_QWORD *)(v7 + 8) = v32[1];
  **(_QWORD **)(v6 + 8) = v7;
  --v33;
  sub_22E9D8FB0(v6);
  v8 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v11, v34);
  if (v31 == v30)
    v9 = 0;
  else
    v9 = v30;
  sub_22E9B83FC(a1, v8, v11, (uint64_t)v9, -1431655765 * ((unint64_t)(v31 - v30) >> 5));
  if (v16 != v15)
    free(v16);
  if (v14)
  {
    if (v13)
      free(v12);
    v14 = 0;
  }
  return sub_22E9B8490(&v30);
}

char **sub_22F316A20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v11[3];
  void *v12;
  int v13;
  char v14;
  void *v15;
  void *v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  void *v22;
  int v23;
  char v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v17 = 0;
  v18 = 0;
  v24 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v25 = v29;
  v26 = v29;
  v27 = 8;
  v28 = 0;
  sub_22E9B831C((uint64_t)&v30, a1, v2, v3, (__int128 *)&v17, 0, 0);
  if (v26 != v25)
    free(v26);
  if (v24 && v23)
    free(v22);
  v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  *((_DWORD *)v4 + 8) = 0;
  v5 = v32;
  *v4 = v32;
  v4[1] = &v32;
  v5[1] = v4;
  v32 = v4;
  ++v33;
  sub_22E9CBA0C((uint64_t)&v30, 0);
  sub_22E9CBE94((uint64_t)&v30, 0);
  v6 = (uint64_t)v32;
  v7 = *v32;
  *(_QWORD *)(v7 + 8) = v32[1];
  **(_QWORD **)(v6 + 8) = v7;
  --v33;
  sub_22E9D8FB0(v6);
  v8 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v11, v34);
  if (v31 == v30)
    v9 = 0;
  else
    v9 = v30;
  sub_22E9B83FC(a1, v8, v11, (uint64_t)v9, -1431655765 * ((unint64_t)(v31 - v30) >> 5));
  if (v16 != v15)
    free(v16);
  if (v14)
  {
    if (v13)
      free(v12);
    v14 = 0;
  }
  return sub_22E9B8490(&v30);
}

char **sub_22F316BD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v11[3];
  void *v12;
  int v13;
  char v14;
  void *v15;
  void *v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  void *v22;
  int v23;
  char v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v17 = 0;
  v18 = 0;
  v24 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v25 = v29;
  v26 = v29;
  v27 = 8;
  v28 = 0;
  sub_22E9B831C((uint64_t)&v30, a1, v2, v3, (__int128 *)&v17, 0, 0);
  if (v26 != v25)
    free(v26);
  if (v24 && v23)
    free(v22);
  v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  *((_DWORD *)v4 + 8) = 0;
  v5 = v32;
  *v4 = v32;
  v4[1] = &v32;
  v5[1] = v4;
  v32 = v4;
  ++v33;
  sub_22E9CBE94((uint64_t)&v30, 0);
  v6 = (uint64_t)v32;
  v7 = *v32;
  *(_QWORD *)(v7 + 8) = v32[1];
  **(_QWORD **)(v6 + 8) = v7;
  --v33;
  sub_22E9D8FB0(v6);
  v8 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v11, v34);
  if (v31 == v30)
    v9 = 0;
  else
    v9 = v30;
  sub_22E9B83FC(a1, v8, v11, (uint64_t)v9, -1431655765 * ((unint64_t)(v31 - v30) >> 5));
  if (v16 != v15)
    free(v16);
  if (v14)
  {
    if (v13)
      free(v12);
    v14 = 0;
  }
  return sub_22E9B8490(&v30);
}

char **sub_22F316D74(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  __int128 v18[3];
  void *v19;
  int v20;
  char v21;
  void *v22;
  void *v23;
  _QWORD v24[2];
  __int128 v25;
  int v26;
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t (**v33)();
  __int128 v34;
  __int128 v35;
  char v36;
  void *v37;
  int v38;
  char v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[64];
  char *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49[11];
  void **v50;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v33) = 9;
  BYTE4(v33) = 0;
  v39 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v40 = v44;
  v41 = v44;
  v42 = 8;
  v43 = 0;
  if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
    v6 = sub_22E9CF0DC;
  else
    v6 = sub_22E9CF13C;
  sub_22E9B831C((uint64_t)&v45, a1, v4, v5, (__int128 *)&v33, (uint64_t)v6, 0);
  if (v41 != v40)
    free(v41);
  if (v39 && v38)
    free(v37);
  v7 = *(_QWORD *)(a1 + 216);
  memset(v32, 0, sizeof(v32));
  sub_22E9B8FE8((uint64_t)&v33, (uint64_t)&v45, v7, 0, (uint64_t)v32);
  v50 = (void **)v32;
  sub_22E6C60B8(&v50);
  v8 = operator new(0x28uLL);
  v8[2] = 0;
  v8[3] = 0;
  *((_DWORD *)v8 + 8) = 0;
  v9 = v47;
  *v8 = v47;
  v8[1] = &v47;
  v9[1] = v8;
  v47 = v8;
  ++v48;
  sub_22EC67A18((_QWORD *)a1, a2, 0, (uint64_t)&v33, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0, (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 0x20) != 0);
  v10 = sub_22E90328C(a1);
  if (v10)
  {
    v11 = sub_22EFDC9F0(v10);
    if (v11)
    {
      if (sub_22F3B46CC(v11))
      {
        v24[0] = 0;
        v24[1] = "super";
        v25 = xmmword_22F469F50;
        v26 = 0;
        memset(v27, 0, sizeof(v27));
        v28 = 0;
        v30 = 0;
        v31 = 0;
        v29 = 0;
        sub_22E9D8DB4((uint64_t *)&v45, (uint64_t)v24);
        v50 = (void **)v27;
        sub_22E6C60B8(&v50);
        sub_22E9CF1FC(a1, 1, 0, 0, (uint64_t)&v45);
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
    sub_22E9CA57C(a1, (uint64_t)&v45);
  v12 = (uint64_t)v47;
  v13 = *v47;
  *(_QWORD *)(v13 + 8) = v47[1];
  **(_QWORD **)(v12 + 8) = v13;
  --v48;
  sub_22E9D8FB0(v12);
  v14 = *(_QWORD *)(a1 + 208);
  v15 = *(unsigned __int8 *)(v14 + 8);
  if ((v15 & 1) != 0)
  {
    sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v45, (v15 >> 5) & 1, 0, 0);
    v14 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v18, v49);
  if (v46 == v45)
    v16 = 0;
  else
    v16 = v45;
  sub_22E9B83FC(a1, v14, v18, (uint64_t)v16, -1431655765 * ((unint64_t)(v46 - v45) >> 5));
  if (v23 != v22)
    free(v23);
  if (v21)
  {
    if (v20)
      free(v19);
    v21 = 0;
  }
  v33 = off_24FAB7520;
  v50 = (void **)&v36;
  sub_22E6C60B8(&v50);
  return sub_22E9B8490(&v45);
}

void sub_22F317070(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  void *v25[2];
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v12 = sub_22E90328C((uint64_t)a1);
  if (!v12)
  {
    v15 = sub_22F309270((uint64_t)a1);
    v16 = sub_22EC65CE0(a1, (uint64_t)a2, v15, a3, 0, 0);
    if (!v16)
      goto LABEL_8;
    v17 = (uint64_t *)v16;
    v18 = *(_DWORD *)(v16 + 28) & 0x7F;
    if (v18 != 22)
    {
      if ((v18 - 33) > 9)
      {
        if (v18 != 42)
        {
LABEL_8:
          v24 = 0u;
          *(_OWORD *)v25 = 0u;
          v26 = 0;
          v27 = v15;
          v28 = a3;
          v29 = a3;
          v19 = sub_22EB1C438((uint64_t)a1, a2, (uint64_t)&v24, 0, &v26, 0, 0, 0, 0, 0);
          sub_22E9C0E00((uint64_t)a1, (uint64_t)a2, (void *)(v19 & 0xFFFFFFFFFFFFFFFELL), a4, a5, a6, 0);
          if (HIDWORD(v25[1]))
            free(v25[0]);
          return;
        }
LABEL_17:
        v23 = 0;
LABEL_18:
        sub_22F3172C0((uint64_t)a1, (uint64_t)a2, v23, a4, a5, a6, 1);
        return;
      }
      v21 = *(_QWORD *)(v16 + 48);
      if (!v21)
        v21 = sub_22EF6462C(a1[11], (unint64_t)v17);
      v22 = sub_22E4EBB74(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
      if (!v22)
        goto LABEL_17;
      v17 = (uint64_t *)sub_22F272660(v22);
      if (!v17)
        goto LABEL_17;
    }
LABEL_19:
    v23 = sub_22F36D148(a1[11], v17, 0);
    goto LABEL_18;
  }
  v13 = v12;
  v14 = sub_22EFDC9F0(v12);
  if (v14)
  {
    v20 = (uint64_t *)sub_22F3B46CC(v14);
    if (v20)
    {
      v17 = v20;
      if ((*(_BYTE *)(v13 + 58) & 2) != 0)
      {
        sub_22E9C0E00((uint64_t)a1, (uint64_t)a2, 0, a4, a5, a6, v20);
        return;
      }
      goto LABEL_19;
    }
  }
}

char **sub_22F3172C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v22[3];
  void *v23;
  int v24;
  char v25;
  void *v26;
  void *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void *v33;
  int v34;
  char v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[64];
  char *v41;
  char *v42;
  __int128 v43[11];

  if (a3 >= 0x10)
  {
    v18 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    v14 = a3;
    if (v18)
    {
      v14 = a3;
      if (*(_BYTE *)(v18 + 16) == 57)
        v14 = *(_QWORD *)(v18 + 8);
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v28) = 31;
  BYTE4(v28) = 0;
  v30 = a4;
  v31 = a5;
  v32 = 0;
  v35 = 0;
  v36 = v40;
  v37 = v40;
  v38 = 8;
  v39 = 0;
  *((_QWORD *)&v28 + 1) = 0;
  v29 = v14;
  sub_22E9B831C((uint64_t)&v41, a1, v15, v16, &v28, 0, 0);
  if (v37 != v36)
    free(v37);
  if (v35 && v34)
    free(v33);
  sub_22E9BF698(a1, a3, a4, a5, a6, a7, (uint64_t *)&v41);
  if ((_DWORD)a6)
  {
    v17 = sub_22E9CF7B8((uint64_t)v41, (uint64_t)v42, a5);
    if (v17 > 0xF)
      sub_22F313C2C(a1, a2, v17, 0);
    else
      sub_22F313608(a1, a2, 7u);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 208);
    sub_22F2A4F2C((uint64_t)v22, v43);
    if (v42 == v41)
      v20 = 0;
    else
      v20 = v41;
    sub_22E9B83FC(a1, v19, v22, (uint64_t)v20, -1431655765 * ((unint64_t)(v42 - v41) >> 5));
    if (v27 != v26)
      free(v27);
    if (v25)
    {
      if (v24)
        free(v23);
      v25 = 0;
    }
  }
  return sub_22E9B8490(&v41);
}

uint64_t sub_22F3174CC(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) - 35 > 0xFFFFFFFD;
  else
    v3 = 0;
  if (!v3)
    v2 = sub_22F10CF48(v2);
  v4 = v2 + 8 * ((*(_QWORD *)(v2 + 16) >> 19) & 0x7FLL) + 48;
  sub_22F319F54(a1);
  return v4;
}

void sub_22F31752C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[11];
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)&v10[7] = 0x10000;
  *(_QWORD *)v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  if (a3)
  {
    v9 = a3;
    v5 = (a3 & 1) != 0 ? (uint64_t *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 8) : &v9;
    v6 = (a3 & 1) != 0
       ? (uint64_t *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFELL))
       : (uint64_t *)v10;
    if (v5 != v6)
    {
      v7 = 0;
      do
      {
        v8 = *v5;
        if (*v5)
        {
          if (v7 >= HIDWORD(v12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v7 = v12;
          }
          *((_QWORD *)v11 + v7) = v8;
          v7 = v12 + 1;
          LODWORD(v12) = v12 + 1;
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  sub_22E9C0008(a1, a2, (uint64_t *)v10);
  if (v11 != v13)
    free(v11);
}

char **sub_22F317674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v21[3];
  void *v22;
  int v23;
  char v24;
  void *v25;
  void *v26;
  int v27;
  char v28;
  __int128 v29;
  __int128 v30;
  char v31;
  void *v32;
  int v33;
  char v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[64];
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45[11];

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v27 = 16;
  v28 = 0;
  v34 = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  v35 = v39;
  v36 = v39;
  v37 = 8;
  v38 = 0;
  sub_22E9B831C((uint64_t)&v40, a1, v6, v7, (__int128 *)&v27, 0, 0);
  if (v36 != v35)
    free(v36);
  if (v34 && v33)
    free(v32);
  v8 = *(_QWORD *)(a1 + 208);
  if ((*(_BYTE *)(v8 + 8) & 4) != 0)
  {
    v9 = operator new(0x28uLL);
    v9[2] = 0;
    v9[3] = 0;
    *((_DWORD *)v9 + 8) = 0;
    v10 = v43;
    *v9 = v43;
    v9[1] = &v43;
    v10[1] = v9;
    v43 = v9;
    ++v44;
    if (a3)
    {
      v11 = a2 + 16 * a3;
      do
      {
        v12 = sub_22F337DFC((_QWORD *)a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), 0);
        if (v12)
        {
          v13 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 32))(v12);
          sub_22E3BA850((uint64_t)&v42, v13);
        }
        a2 += 16;
      }
      while (a2 != v11);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v15 = sub_22E3CD31C((uint64_t *)(v14 + 72), v14);
    if (v15)
      v16 = v15 + 40;
    else
      v16 = 0;
    sub_22E9D0954(v16, *(_QWORD *)(a1 + 216), 0, (unint64_t)&v40);
    v17 = (uint64_t)v43;
    v18 = *v43;
    *(_QWORD *)(v18 + 8) = v43[1];
    **(_QWORD **)(v17 + 8) = v18;
    --v44;
    sub_22E9D8FB0(v17);
    v8 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v21, v45);
  if (v41 == v40)
    v19 = 0;
  else
    v19 = v40;
  sub_22E9B83FC(a1, v8, v21, (uint64_t)v19, -1431655765 * ((unint64_t)(v41 - v40) >> 5));
  if (v26 != v25)
    free(v26);
  if (v24)
  {
    if (v23)
      free(v22);
    v24 = 0;
  }
  return sub_22E9B8490(&v40);
}

char **sub_22F3178A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v14[3];
  void *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  void *v25;
  int v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[64];
  char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v20 = 16;
  v21 = 0;
  v27 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v28 = v32;
  v29 = v32;
  v30 = 8;
  v31 = 0;
  sub_22E9B831C((uint64_t)&v33, a1, v2, v3, (__int128 *)&v20, 0, 0);
  if (v29 != v28)
    free(v29);
  if (v27 && v26)
    free(v25);
  v4 = *(_QWORD *)(a1 + 208);
  if ((*(_BYTE *)(v4 + 8) & 4) != 0)
  {
    v5 = operator new(0x28uLL);
    v5[2] = 0;
    v5[3] = 0;
    *((_DWORD *)v5 + 8) = 0;
    v6 = v35;
    *v5 = v35;
    v5[1] = &v35;
    v6[1] = v5;
    v35 = v5;
    ++v36;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v8 = sub_22E3CD31C((uint64_t *)(v7 + 72), v7);
    if (v8)
      v9 = v8 + 40;
    else
      v9 = 0;
    sub_22E9D0954(v9, *(_QWORD *)(a1 + 216), 1, (unint64_t)&v33);
    v10 = (uint64_t)v35;
    v11 = *v35;
    *(_QWORD *)(v11 + 8) = v35[1];
    **(_QWORD **)(v10 + 8) = v11;
    --v36;
    sub_22E9D8FB0(v10);
    v4 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v14, v37);
  if (v34 == v33)
    v12 = 0;
  else
    v12 = v33;
  sub_22E9B83FC(a1, v4, v14, (uint64_t)v12, -1431655765 * ((unint64_t)(v34 - v33) >> 5));
  if (v19 != v18)
    free(v19);
  if (v17)
  {
    if (v16)
      free(v15);
    v17 = 0;
  }
  return sub_22E9B8490(&v33);
}

char **sub_22F317A84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v14[3];
  void *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  void *v25;
  int v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[64];
  char *v33;
  char *v34;
  _QWORD v35[2];
  uint64_t v36;
  __int128 v37[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v20 = 32;
  v21 = 0;
  v27 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v28 = v32;
  v29 = v32;
  v30 = 8;
  v31 = 0;
  sub_22E9B831C((uint64_t)&v33, a1, v2, v3, (__int128 *)&v20, 0, 0);
  if (v29 != v28)
    free(v29);
  if (v27 && v26)
    free(v25);
  v4 = v35;
  v5 = operator new(0x28uLL);
  v5[2] = 0;
  v5[3] = 0;
  *((_DWORD *)v5 + 8) = 0;
  v6 = v35[0];
  *v5 = v35[0];
  v5[1] = v35;
  *(_QWORD *)(v6 + 8) = v5;
  v7 = v36;
  v35[0] = v5;
  ++v36;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v9 = sub_22E3CD31C((uint64_t *)(v8 + 72), v8);
    if (v9)
      v10 = v9 + 40;
    else
      v10 = 0;
    sub_22E9D0A78(v10, *(_QWORD *)(a1 + 216), 0, (unint64_t)&v33);
    v5 = (_QWORD *)v35[0];
    v6 = *(_QWORD *)v35[0];
    v4 = *(_QWORD **)(v35[0] + 8);
    v7 = v36 - 1;
  }
  *(_QWORD *)(v6 + 8) = v4;
  *(_QWORD *)v5[1] = v6;
  v36 = v7;
  sub_22E9D8FB0((uint64_t)v5);
  v11 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v14, v37);
  if (v34 == v33)
    v12 = 0;
  else
    v12 = v33;
  sub_22E9B83FC(a1, v11, v14, (uint64_t)v12, -1431655765 * ((unint64_t)(v34 - v33) >> 5));
  if (v19 != v18)
    free(v19);
  if (v17)
  {
    if (v16)
      free(v15);
    v17 = 0;
  }
  return sub_22E9B8490(&v33);
}

char **sub_22F317C5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  const void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v21[3];
  void *v22;
  int v23;
  char v24;
  void *v25;
  void *v26;
  int v27;
  char v28;
  __int128 v29;
  __int128 v30;
  char v31;
  void *v32;
  int v33;
  char v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[64];
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45[11];

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v27 = 32;
  v28 = 0;
  v34 = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0;
  v35 = v39;
  v36 = v39;
  v37 = 8;
  v38 = 0;
  sub_22E9B831C((uint64_t)&v40, a1, v7, v8, (__int128 *)&v27, 0, 0);
  if (v36 != v35)
    free(v36);
  if (v34 && v33)
    free(v32);
  v9 = operator new(0x28uLL);
  v9[2] = 0;
  v9[3] = 0;
  *((_DWORD *)v9 + 8) = 0;
  v10 = v43;
  *v9 = v43;
  v9[1] = &v43;
  v10[1] = v9;
  v43 = v9;
  ++v44;
  v11 = (_DWORD *)sub_22EC65CE0((_QWORD *)a1, *(_QWORD *)(a1 + 3344), a3, a4, 0, 0);
  if (v11 && (v11[7] & 0x7F) == 0x16)
  {
    v12 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 32))(v11);
    sub_22E3BA850((uint64_t)&v42, v12);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v14 = sub_22E3CD31C((uint64_t *)(v13 + 72), v13);
    if (v14)
      v15 = v14 + 40;
    else
      v15 = 0;
    sub_22E9D0A78(v15, *(_QWORD *)(a1 + 216), 0, (unint64_t)&v40);
  }
  v16 = (uint64_t)v43;
  v17 = *v43;
  *(_QWORD *)(v17 + 8) = v43[1];
  **(_QWORD **)(v16 + 8) = v17;
  --v44;
  sub_22E9D8FB0(v16);
  v18 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v21, v45);
  if (v41 == v40)
    v19 = 0;
  else
    v19 = v40;
  sub_22E9B83FC(a1, v18, v21, (uint64_t)v19, -1431655765 * ((unint64_t)(v41 - v40) >> 5));
  if (v26 != v25)
    free(v26);
  if (v24)
  {
    if (v23)
      free(v22);
    v24 = 0;
  }
  return sub_22E9B8490(&v40);
}

char **sub_22F317E98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v14[3];
  void *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  void *v25;
  int v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[64];
  char *v33;
  char *v34;
  _QWORD v35[2];
  uint64_t v36;
  __int128 v37[11];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  v20 = 4;
  v21 = 0;
  v27 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v28 = v32;
  v29 = v32;
  v30 = 8;
  v31 = 0;
  sub_22E9B831C((uint64_t)&v33, a1, v2, v3, (__int128 *)&v20, 0, 0);
  if (v29 != v28)
    free(v29);
  if (v27 && v26)
    free(v25);
  v4 = v35;
  v5 = operator new(0x28uLL);
  v5[2] = 0;
  v5[3] = 0;
  *((_DWORD *)v5 + 8) = 0;
  v6 = v35[0];
  *v5 = v35[0];
  v5[1] = v35;
  *(_QWORD *)(v6 + 8) = v5;
  v7 = v36;
  v35[0] = v5;
  ++v36;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 208) + 8) & 4) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v9 = sub_22E3CD31C((uint64_t *)(v8 + 72), v8);
    if (v9)
      v10 = v9 + 40;
    else
      v10 = 0;
    sub_22E9D0A78(v10, *(_QWORD *)(a1 + 216), 1, (unint64_t)&v33);
    v5 = (_QWORD *)v35[0];
    v6 = *(_QWORD *)v35[0];
    v4 = *(_QWORD **)(v35[0] + 8);
    v7 = v36 - 1;
  }
  *(_QWORD *)(v6 + 8) = v4;
  *(_QWORD *)v5[1] = v6;
  v36 = v7;
  sub_22E9D8FB0((uint64_t)v5);
  v11 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v14, v37);
  if (v34 == v33)
    v12 = 0;
  else
    v12 = v33;
  sub_22E9B83FC(a1, v11, v14, (uint64_t)v12, -1431655765 * ((unint64_t)(v34 - v33) >> 5));
  if (v19 != v18)
    free(v19);
  if (v17)
  {
    if (v16)
      free(v15);
    v17 = 0;
  }
  return sub_22E9B8490(&v33);
}

unint64_t sub_22F318070(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x19 && (*(_BYTE *)(result + 73) & 0x40) == 0)
      break;
  }
  return result;
}

char **sub_22F3180CC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v13[2];
  void *v14;
  int v15;
  char v16;
  void *v17;
  void *v18;
  _QWORD v19[2];
  __int128 v20;
  int v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  __int128 v28;
  int v29;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  int v37;
  _QWORD v38[3];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  int v45;
  _QWORD v46[3];
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  __int128 v52;
  int v53;
  _QWORD v54[3];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  __int128 v60;
  int v61;
  _QWORD v62[3];
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  __int128 v68;
  int v69;
  _QWORD v70[3];
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  int v77;
  _QWORD v78[3];
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  __int128 v84;
  int v85;
  _QWORD v86[3];
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  __int128 v92;
  int v93;
  _QWORD v94[3];
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  __int128 v100;
  int v101;
  _QWORD v102[3];
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  __int128 v108;
  int v109;
  _QWORD v110[3];
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[2];
  __int128 v116;
  int v117;
  _QWORD v118[3];
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  __int128 v124;
  int v125;
  _QWORD v126[3];
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[2];
  __int128 v132;
  int v133;
  _QWORD v134[3];
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[2];
  __int128 v140;
  int v141;
  _QWORD v142[3];
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[2];
  __int128 v148;
  int v149;
  _QWORD v150[3];
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[2];
  __int128 v156;
  int v157;
  _QWORD v158[3];
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[2];
  __int128 v164;
  int v165;
  _QWORD v166[3];
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[2];
  __int128 v172;
  int v173;
  _QWORD v174[3];
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[2];
  __int128 v180;
  int v181;
  _QWORD v182[3];
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[2];
  __int128 v188;
  int v189;
  _QWORD v190[3];
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  __int128 v197;
  _QWORD *v198;
  uint64_t v199;
  __int128 v200[11];
  void **v201;
  _BYTE v202[48];
  void *v203;
  void *v204;
  _DWORD v205[2];
  char v206;
  _BYTE *v207;
  void *v208;
  uint64_t v209;
  int v210;
  _BYTE v211[16];
  void *v212;
  uint64_t v213;
  _QWORD v214[6];

  v214[5] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v202 = 25;
  v202[4] = 0;
  v206 = 0;
  memset(&v202[8], 0, 33);
  v207 = v211;
  v208 = v211;
  v209 = 8;
  v210 = 0;
  sub_22E9B831C((uint64_t)&v195, a1, v4, v5, (__int128 *)v202, 0, 0);
  if (v208 != v207)
    free(v208);
  if (v206 && v205[1])
    free(v204);
  v6 = operator new(0x28uLL);
  v6[2] = 0;
  v6[3] = 0;
  *((_DWORD *)v6 + 8) = 0;
  v7 = v198;
  *v6 = v198;
  v6[1] = &v198;
  v7[1] = v6;
  v198 = v6;
  ++v199;
  *(_OWORD *)v202 = v197;
  memset(&v202[16], 0, 32);
  v203 = v205;
  v204 = (void *)0x400000000;
  v212 = v214;
  v213 = 0x200000000;
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"if");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"condition");
  v187[0] = 0;
  v187[1] = sub_22F2F28A4((uint64_t)v202);
  v188 = xmmword_22F469F30;
  v189 = 0;
  memset(v190, 0, sizeof(v190));
  v191 = 0;
  v194 = 0;
  v192 = 0;
  v193 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v187);
  v201 = (void **)v190;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"ifdef");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
  v179[0] = 0;
  v179[1] = sub_22F2F28A4((uint64_t)v202);
  v180 = xmmword_22F469F30;
  v181 = 0;
  v186 = 0;
  v184 = 0;
  v185 = 0;
  memset(v182, 0, sizeof(v182));
  v183 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v179);
  v201 = (void **)v182;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"ifndef");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
  v171[0] = 0;
  v171[1] = sub_22F2F28A4((uint64_t)v202);
  v172 = xmmword_22F469F30;
  v173 = 0;
  memset(v174, 0, sizeof(v174));
  v175 &= 0xC0u;
  v178 = 0;
  v176 = 0;
  v177 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v171);
  v201 = (void **)v174;
  sub_22E6C60B8(&v201);
  if (a2)
  {
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"elif");
    sub_22E8A9D90((uint64_t)v202, 19, "");
    sub_22E8A9C00((uint64_t)v202, (uint64_t)"condition");
    v163[0] = 0;
    v163[1] = sub_22F2F28A4((uint64_t)v202);
    v164 = xmmword_22F469F30;
    v165 = 0;
    memset(v166, 0, sizeof(v166));
    v167 &= 0xC0u;
    v170 = 0;
    v168 = 0;
    v169 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v163);
    v201 = (void **)v166;
    sub_22E6C60B8(&v201);
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"elifdef");
    sub_22E8A9D90((uint64_t)v202, 19, "");
    sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
    v155[0] = 0;
    v155[1] = sub_22F2F28A4((uint64_t)v202);
    v156 = xmmword_22F469F30;
    v157 = 0;
    memset(v158, 0, sizeof(v158));
    v159 &= 0xC0u;
    v162 = 0;
    v160 = 0;
    v161 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v155);
    v201 = (void **)v158;
    sub_22E6C60B8(&v201);
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"elifndef");
    sub_22E8A9D90((uint64_t)v202, 19, "");
    sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
    v147[0] = 0;
    v147[1] = sub_22F2F28A4((uint64_t)v202);
    v148 = xmmword_22F469F30;
    v149 = 0;
    memset(v150, 0, sizeof(v150));
    v151 &= 0xC0u;
    v154 = 0;
    v152 = 0;
    v153 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v147);
    v201 = (void **)v150;
    sub_22E6C60B8(&v201);
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"else");
    v139[0] = 0;
    v139[1] = sub_22F2F28A4((uint64_t)v202);
    v140 = xmmword_22F469F30;
    v141 = 0;
    memset(v142, 0, sizeof(v142));
    v143 &= 0xC0u;
    v146 = 0;
    v144 = 0;
    v145 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v139);
    v201 = (void **)v142;
    sub_22E6C60B8(&v201);
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"endif");
    v131[0] = 0;
    v131[1] = sub_22F2F28A4((uint64_t)v202);
    v132 = xmmword_22F469F30;
    v133 = 0;
    memset(v134, 0, sizeof(v134));
    v135 &= 0xC0u;
    v138 = 0;
    v136 = 0;
    v137 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v131);
    v201 = (void **)v134;
    sub_22E6C60B8(&v201);
  }
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"include");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"header");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
  v123[0] = 0;
  v123[1] = sub_22F2F28A4((uint64_t)v202);
  v124 = xmmword_22F469F30;
  v125 = 0;
  memset(v126, 0, sizeof(v126));
  v127 &= 0xC0u;
  v130 = 0;
  v128 = 0;
  v129 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v123);
  v201 = (void **)v126;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"include");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"<");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"header");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)">");
  v115[0] = 0;
  v115[1] = sub_22F2F28A4((uint64_t)v202);
  v116 = xmmword_22F469F30;
  v117 = 0;
  memset(v118, 0, sizeof(v118));
  v119 &= 0xC0u;
  v122 = 0;
  v120 = 0;
  v121 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v115);
  v201 = (void **)v118;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"define");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
  v107[0] = 0;
  v107[1] = sub_22F2F28A4((uint64_t)v202);
  v108 = xmmword_22F469F30;
  v109 = 0;
  memset(v110, 0, sizeof(v110));
  v111 &= 0xC0u;
  v114 = 0;
  v112 = 0;
  v113 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v107);
  v201 = (void **)v110;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"define");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
  sub_22E8A9D90((uint64_t)v202, 7, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"args");
  sub_22E8A9D90((uint64_t)v202, 8, "");
  v99[0] = 0;
  v99[1] = sub_22F2F28A4((uint64_t)v202);
  v100 = xmmword_22F469F30;
  v101 = 0;
  memset(v102, 0, sizeof(v102));
  v103 &= 0xC0u;
  v106 = 0;
  v104 = 0;
  v105 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v99);
  v201 = (void **)v102;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"undef");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"macro");
  v91[0] = 0;
  v91[1] = sub_22F2F28A4((uint64_t)v202);
  v92 = xmmword_22F469F30;
  v93 = 0;
  memset(v94, 0, sizeof(v94));
  v95 &= 0xC0u;
  v98 = 0;
  v96 = 0;
  v97 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v91);
  v201 = (void **)v94;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"line");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"number");
  v83[0] = 0;
  v83[1] = sub_22F2F28A4((uint64_t)v202);
  v84 = xmmword_22F469F30;
  v85 = 0;
  memset(v86, 0, sizeof(v86));
  v87 &= 0xC0u;
  v90 = 0;
  v88 = 0;
  v89 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v83);
  v201 = (void **)v86;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"line");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"number");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"filename");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
  v75[0] = 0;
  v75[1] = sub_22F2F28A4((uint64_t)v202);
  v76 = xmmword_22F469F30;
  v77 = 0;
  memset(v78, 0, sizeof(v78));
  v79 &= 0xC0u;
  v82 = 0;
  v80 = 0;
  v81 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v75);
  v201 = (void **)v78;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"error");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"message");
  v67[0] = 0;
  v67[1] = sub_22F2F28A4((uint64_t)v202);
  v68 = xmmword_22F469F30;
  v69 = 0;
  memset(v70, 0, sizeof(v70));
  v71 &= 0xC0u;
  v74 = 0;
  v72 = 0;
  v73 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v67);
  v201 = (void **)v70;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"pragma");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"arguments");
  v59[0] = 0;
  v59[1] = sub_22F2F28A4((uint64_t)v202);
  v60 = xmmword_22F469F30;
  v61 = 0;
  memset(v62, 0, sizeof(v62));
  v63 &= 0xC0u;
  v66 = 0;
  v64 = 0;
  v65 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v59);
  v201 = (void **)v62;
  sub_22E6C60B8(&v201);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) != 0)
  {
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"import");
    sub_22E8A9D90((uint64_t)v202, 19, "");
    sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
    sub_22E8A9C00((uint64_t)v202, (uint64_t)"header");
    sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
    v51[0] = 0;
    v51[1] = sub_22F2F28A4((uint64_t)v202);
    v52 = xmmword_22F469F30;
    v53 = 0;
    memset(v54, 0, sizeof(v54));
    v55 &= 0xC0u;
    v58 = 0;
    v56 = 0;
    v57 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v51);
    v201 = (void **)v54;
    sub_22E6C60B8(&v201);
    sub_22E8A9AD8((uint64_t)v202, (uint64_t)"import");
    sub_22E8A9D90((uint64_t)v202, 19, "");
    sub_22E8A9B38((uint64_t)v202, (uint64_t)"<");
    sub_22E8A9C00((uint64_t)v202, (uint64_t)"header");
    sub_22E8A9B38((uint64_t)v202, (uint64_t)">");
    v43[0] = 0;
    v43[1] = sub_22F2F28A4((uint64_t)v202);
    v44 = xmmword_22F469F30;
    v45 = 0;
    memset(v46, 0, sizeof(v46));
    v47 &= 0xC0u;
    v50 = 0;
    v48 = 0;
    v49 = 0;
    sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v43);
    v201 = (void **)v46;
    sub_22E6C60B8(&v201);
  }
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"include_next");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"header");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"\"");
  v35[0] = 0;
  v35[1] = sub_22F2F28A4((uint64_t)v202);
  v36 = xmmword_22F469F30;
  v37 = 0;
  memset(v38, 0, sizeof(v38));
  v39 &= 0xC0u;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v35);
  v201 = (void **)v38;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"include_next");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)"<");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"header");
  sub_22E8A9B38((uint64_t)v202, (uint64_t)">");
  v27[0] = 0;
  v27[1] = sub_22F2F28A4((uint64_t)v202);
  v28 = xmmword_22F469F30;
  v29 = 0;
  memset(v30, 0, sizeof(v30));
  v31 &= 0xC0u;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v27);
  v201 = (void **)v30;
  sub_22E6C60B8(&v201);
  sub_22E8A9AD8((uint64_t)v202, (uint64_t)"warning");
  sub_22E8A9D90((uint64_t)v202, 19, "");
  sub_22E8A9C00((uint64_t)v202, (uint64_t)"message");
  v19[0] = 0;
  v19[1] = sub_22F2F28A4((uint64_t)v202);
  v20 = xmmword_22F469F30;
  v21 = 0;
  memset(v22, 0, sizeof(v22));
  v23 &= 0xC0u;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  sub_22E9D8DB4((uint64_t *)&v195, (uint64_t)v19);
  v201 = (void **)v22;
  sub_22E6C60B8(&v201);
  v8 = (uint64_t)v198;
  v9 = *v198;
  *(_QWORD *)(v9 + 8) = v198[1];
  **(_QWORD **)(v8 + 8) = v9;
  --v199;
  sub_22E9D8FB0(v8);
  v10 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v13, v200);
  if (v196 == v195)
    v11 = 0;
  else
    v11 = v195;
  sub_22E9B83FC(a1, v10, v13, (uint64_t)v11, -1431655765 * ((unint64_t)(v196 - v195) >> 5));
  if (v18 != v17)
    free(v18);
  if (v16)
  {
    if (v15)
      free(v14);
    v16 = 0;
  }
  if (v212 != v214)
    free(v212);
  if (v203 != v205)
    free(v203);
  return sub_22E9B8490(&v195);
}

char **sub_22F3190C0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if (*(_QWORD *)(a2 + 24))
    v2 = 11;
  else
    v2 = 0;
  return sub_22F313608(a1, a2, v2);
}

char **sub_22F3190D4(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  __int128 v24[3];
  void *v25;
  int v26;
  char v27;
  void *v28;
  void *v29;
  _QWORD v30[2];
  __int128 v31;
  int v32;
  _BYTE v33[24];
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38[4];
  __int16 v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45[11];
  _BYTE v46[48];
  void *v47;
  void *v48;
  _DWORD v49[2];
  char v50;
  _BYTE *v51;
  void *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[16];
  void *v56;
  uint64_t v57;
  _QWORD v58[8];

  v58[5] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  if (a2)
    v6 = 22;
  else
    v6 = 23;
  *(_DWORD *)v46 = v6;
  v46[4] = 0;
  v50 = 0;
  memset(&v46[8], 0, 33);
  v51 = v55;
  v52 = v55;
  v53 = 8;
  v54 = 0;
  sub_22E9B831C((uint64_t)&v40, a1, v4, v5, (__int128 *)v46, 0, 0);
  if (v52 != v51)
    free(v52);
  if (v50 && v49[1])
    free(v48);
  v7 = *(_QWORD *)(a1 + 208);
  if ((a2 & 1) == 0 && (*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    *(_OWORD *)v46 = v42;
    memset(&v46[16], 0, 32);
    v47 = v49;
    v48 = (void *)0x400000000;
    v56 = v58;
    v57 = 0x200000000;
    v8 = operator new(0x28uLL);
    v8[2] = 0;
    v8[3] = 0;
    *((_DWORD *)v8 + 8) = 0;
    v9 = v43;
    *v8 = v43;
    v8[1] = &v43;
    v9[1] = v8;
    v43 = v8;
    ++v44;
    v10 = sub_22F18DE84(*(_QWORD *)(a1 + 80), 1);
    v12 = v11;
    v13 = sub_22F418224(*(_QWORD *)(a1 + 80), 1);
    if (v10 != (_QWORD *)v13)
    {
      v18 = (_QWORD *)v13;
      do
      {
        v19 = v10 + 2;
        v20 = *(int **)(*v10 + 16);
        v21 = *v20;
        v39 = 261;
        v38[0] = (void **)(v20 + 4);
        v38[1] = (void **)v21;
        v22 = sub_22F2F27DC(*(uint64_t *)v46, (const char **)v38);
        sub_22E8A9AD8((uint64_t)v46, (uint64_t)v22);
        v23 = sub_22F2F28A4((uint64_t)v46);
        v30[0] = 0;
        v30[1] = v23;
        v31 = xmmword_22F469FF0;
        v32 = 0;
        memset(v33, 0, sizeof(v33));
        v34 &= 0xC0u;
        v36 = 0;
        v37 = 0;
        v35 = 0;
        sub_22E9D8DB4((uint64_t *)&v40, (uint64_t)v30);
        v38[0] = (void **)v33;
        sub_22E6C60B8(v38);
        v10 = v12;
        if (v19 != v12)
        {
          v10 = v19;
          while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v10 += 2;
            if (v10 == v12)
            {
              v10 = v12;
              break;
            }
          }
        }
      }
      while (v10 != v18);
    }
    v14 = (uint64_t)v43;
    v15 = *v43;
    *(_QWORD *)(v15 + 8) = v43[1];
    **(_QWORD **)(v14 + 8) = v15;
    --v44;
    sub_22E9D8FB0(v14);
    if (v56 != v58)
      free(v56);
    if (v47 != v49)
      free(v47);
    v7 = *(_QWORD *)(a1 + 208);
  }
  sub_22F2A4F2C((uint64_t)v24, v45);
  if (v41 == v40)
    v16 = 0;
  else
    v16 = v40;
  sub_22E9B83FC(a1, v7, v24, (uint64_t)v16, -1431655765 * ((unint64_t)(v41 - v40) >> 5));
  if (v29 != v28)
    free(v29);
  if (v27)
  {
    if (v26)
      free(v25);
    v27 = 0;
  }
  return sub_22E9B8490(&v40);
}

char **sub_22F31943C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12[3];
  void *v13;
  int v14;
  char v15;
  void *v16;
  void *v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31[11];
  void **v32;
  _BYTE v33[48];
  _DWORD *v34;
  uint64_t v35;
  _DWORD v36[2];
  char v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[16];
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[6];

  v45[5] = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  *(_DWORD *)v33 = 24;
  v33[4] = 0;
  v37 = 0;
  memset(&v33[8], 0, 33);
  v38 = v42;
  v39 = v42;
  v40 = 8;
  v41 = 0;
  sub_22E9B831C((uint64_t)&v26, a1, v2, v3, (__int128 *)v33, 0, 0);
  if (v39 != v38)
    free(v39);
  if (v37 && v36[1])
    free((void *)v35);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 8);
  if ((v4 & 1) != 0)
    sub_22E9BE8B8(*(_QWORD *)(a1 + 80), (uint64_t *)&v26, (v4 >> 5) & 1, 1, 0);
  v5 = operator new(0x28uLL);
  v5[2] = 0;
  v5[3] = 0;
  *((_DWORD *)v5 + 8) = 0;
  v6 = v29;
  *v5 = v29;
  v5[1] = &v29;
  v6[1] = v5;
  v29 = v5;
  ++v30;
  *(_OWORD *)v33 = v28;
  memset(&v33[16], 0, 32);
  v34 = v36;
  v35 = 0x400000000;
  v43 = v45;
  v44 = 0x200000000;
  sub_22E8A9AD8((uint64_t)v33, (uint64_t)"defined");
  sub_22E8A9D90((uint64_t)v33, 19, "");
  sub_22E8A9D90((uint64_t)v33, 7, "");
  sub_22E8A9C00((uint64_t)v33, (uint64_t)"macro");
  sub_22E8A9D90((uint64_t)v33, 8, "");
  v18[0] = 0;
  v18[1] = sub_22F2F28A4((uint64_t)v33);
  v19 = xmmword_22F469F30;
  v20 = 0;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  sub_22E9D8DB4((uint64_t *)&v26, (uint64_t)v18);
  v32 = (void **)v21;
  sub_22E6C60B8(&v32);
  v7 = (uint64_t)v29;
  v8 = *v29;
  *(_QWORD *)(v8 + 8) = v29[1];
  **(_QWORD **)(v7 + 8) = v8;
  --v30;
  sub_22E9D8FB0(v7);
  v9 = *(_QWORD *)(a1 + 208);
  sub_22F2A4F2C((uint64_t)v12, v31);
  if (v27 == v26)
    v10 = 0;
  else
    v10 = v26;
  sub_22E9B83FC(a1, v9, v12, (uint64_t)v10, -1431655765 * ((unint64_t)(v27 - v26) >> 5));
  if (v17 != v16)
    free(v17);
  if (v15)
  {
    if (v14)
      free(v13);
    v15 = 0;
  }
  if (v43 != v45)
    free(v43);
  if (v34 != v36)
    free(v34);
  return sub_22E9B8490(&v26);
}

void sub_22F319738(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char v3;
  __int128 v4;
  __int128 v5;
  char v6;
  void *v7;
  int v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _BYTE v14[64];

  v1 = *(_QWORD *)(a1 + 208);
  v2 = 26;
  v3 = 0;
  v9 = 0;
  v4 = 0u;
  v5 = 0u;
  v6 = 0;
  v10 = v14;
  v11 = v14;
  v12 = 8;
  v13 = 0;
  sub_22E9B83FC(a1, v1, (__int128 *)&v2, 0, 0);
  if (v11 != v10)
    free(v11);
  if (v9)
  {
    if (v8)
      free(v7);
  }
}

char **sub_22F3197C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  __int128 v18[3];
  void *v19;
  int v20;
  char v21;
  void *v22;
  void *v23;
  const char *v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  _QWORD v28[2];
  __int128 v29;
  int v30;
  _BYTE v31[24];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  int v38;
  _BYTE v39[24];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  __int128 v45;
  __int128 v46;
  char v47;
  void *v48;
  int v49;
  char v50;
  _BYTE *v51;
  void *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[64];
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61[11];
  void **v62;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 48))(*(_QWORD *)(a1 + 208));
  LODWORD(v44) = 0;
  BYTE4(v44) = 0;
  v50 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v51 = v55;
  v52 = v55;
  v53 = 8;
  v54 = 0;
  v17 = a1;
  sub_22E9B831C((uint64_t)&v56, a1, v2, v3, (__int128 *)&v44, 0, 0);
  if (v52 != v51)
    free(v52);
  if (v50 && v49)
    free(v48);
  v4 = operator new(0x28uLL);
  v5 = 0;
  v4[2] = 0;
  v4[3] = 0;
  *((_DWORD *)v4 + 8) = 0;
  v6 = v59;
  *v4 = v59;
  v4[1] = &v59;
  v6[1] = v4;
  v59 = v4;
  ++v60;
  v7 = xmmword_22F469F50;
  do
  {
    v8 = off_24FAB74E8[v5];
    v36[0] = 0;
    v36[1] = v8;
    v37 = v7;
    v38 = 0;
    memset(v39, 0, sizeof(v39));
    v40 &= 0xC0u;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    sub_22E9D8DB4((uint64_t *)&v56, (uint64_t)v36);
    v44 = (void **)v39;
    sub_22E6C60B8(&v44);
    v9 = v58;
    v27 = 257;
    if (*v8)
    {
      v26 = v8;
      v10 = 3;
    }
    else
    {
      v10 = 1;
    }
    LOBYTE(v27) = v10;
    v24 = "ApplicationExtension";
    v25 = 259;
    sub_22E78CF44((uint64_t *)&v26, (uint64_t *)&v24, (uint64_t)&v44);
    v11 = sub_22F2F27DC(v9, (const char **)&v44);
    v28[0] = 0;
    v28[1] = v11;
    v29 = xmmword_22F469F50;
    v30 = 0;
    memset(v31, 0, sizeof(v31));
    v32 &= 0xC0u;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    sub_22E9D8DB4((uint64_t *)&v56, (uint64_t)v28);
    v62 = (void **)v31;
    sub_22E6C60B8(&v62);
    v7 = xmmword_22F469F50;
    ++v5;
  }
  while (v5 != 5);
  v12 = (uint64_t)v59;
  v13 = *v59;
  *(_QWORD *)(v13 + 8) = v59[1];
  **(_QWORD **)(v12 + 8) = v13;
  --v60;
  sub_22E9D8FB0(v12);
  v14 = *(_QWORD *)(v17 + 208);
  sub_22F2A4F2C((uint64_t)v18, v61);
  if (v57 == v56)
    v15 = 0;
  else
    v15 = v56;
  sub_22E9B83FC(v17, v14, v18, (uint64_t)v15, -1431655765 * ((unint64_t)(v57 - v56) >> 5));
  if (v23 != v22)
    free(v23);
  if (v21)
  {
    if (v20)
      free(v19);
    v21 = 0;
  }
  return sub_22E9B8490(&v56);
}

uint64_t sub_22F319AB0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2 != *(void **)(a1 + 80))
    free(v2);
  if (*(_BYTE *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 68))
      free(*(void **)(a1 + 56));
    *(_BYTE *)(a1 + 72) = 0;
  }
  return a1;
}

uint64_t *sub_22F319B00(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 96;
      v6 = *(_OWORD *)(v3 - 96);
      v7 = *(_OWORD *)(v3 - 80);
      *(_DWORD *)(v4 - 64) = *(_DWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 96) = v6;
      *(_OWORD *)(v4 - 80) = v7;
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 56) = 0;
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      *(_QWORD *)(v4 - 40) = *(_QWORD *)(v3 - 40);
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v8 = *(_OWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 16) = v8;
      v3 -= 96;
      v4 -= 96;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t *sub_22F319BA4(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 33, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *v11 = a3;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F319C94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          sub_22F319D08(v5);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F319D08(llvm *this)
{
  void *v2;
  uint64_t v3;

  v3 = *(_QWORD *)this;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  return llvm::deallocate_buffer(this, (void *)(v3 + 33));
}

unint64_t sub_22F319D40(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x19 && (*(_BYTE *)(result + 73) & 0x40) != 0)
      break;
  }
  return result;
}

uint64_t sub_22F319D9C(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v5 = *a2;
  v4 = (uint64_t)(a2 + 1);
  *(_QWORD *)a1 = v5;
  v6 = (_QWORD *)(a1 + 8);
  if (v3)
  {
    sub_22F0AB71C((uint64_t)v6, v4);
  }
  else
  {
    sub_22F0AB560(v6, v4);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_22F319DE0(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
      free(v4);
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F24C77C(a1, a2);
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t sub_22F319E54(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      sub_22F24C77C(a1, a2);
    }
    else
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x100000000;
      if (*(_DWORD *)(a2 + 8))
        sub_22F24C77C(a1, a2);
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
      free(v4);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_22F319EE0(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
      free(v4);
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F24C890(a1, a2);
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t sub_22F319F54(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return v1 + 8 * ((*(_QWORD *)(v1 + 16) >> 19) & 0x7FLL) + 8 * (*(_QWORD *)(v1 + 16) >> 26) + 48;
}

_QWORD *sub_22F319FA0(uint64_t a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F277304(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F31A008(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F31A008(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E9F2E40(a1, v6);
  v8 = 0;
  sub_22F277304(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F31A0B8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_22F277304(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F31A16C(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  result = sub_22E4CCC08((uint64_t *)a2, (uint64_t)a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = sub_22E4CCD0C(a2, (uint64_t)a3, a3, v10);
    v7 = result;
    *(_OWORD *)result = *(_OWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F31A1F8(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unint64_t a4)
{
  int v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  char v15;
  uint64_t v16;

  v16 = a2;
  v13[0] = 0;
  v8 = sub_22F24C318(*(_QWORD *)(a1 + 10320), *(_DWORD *)(a1 + 10336), a2, v13);
  v9 = v13[0];
  if (!v8)
    v9 = *(_QWORD *)(a1 + 10320) + 16 * *(unsigned int *)(a1 + 10336);
  if (v9 == *(_QWORD *)(a1 + 10320) + 16 * *(unsigned int *)(a1 + 10336))
  {
    sub_22F31A2E4((uint64_t)&v14, a1, a2, a3, a4);
    if (v15)
    {
      v11 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 8, 3);
      *v11 = v14;
      v12 = v11;
    }
    else
    {
      v12 = 0;
    }
    sub_22F2543D4((uint64_t)v13, a1 + 10320, &v16, &v12);
    v9 = v13[0];
  }
  return *(_QWORD *)(v9 + 8);
}

uint64_t sub_22F31A2E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, unint64_t a5)
{
  uint64_t result;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;

  result = sub_22E9F46C0(&v18, a2, a3, *a4);
  if (v19)
  {
    v11 = v18;
    if (a5 < 2)
    {
LABEL_6:
      *(_QWORD *)a1 = v11;
      *(_BYTE *)(a1 + 8) = 1;
      return result;
    }
    v12 = 2;
    v13 = 1;
    while (1)
    {
      result = sub_22E9F46C0(&v16, a2, a3, a4[v13]);
      if (!v17)
        break;
      v14 = v16;
      result = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 16, 3);
      *(_QWORD *)result = v11;
      *(_QWORD *)(result + 8) = v14;
      v11 = result & 0xFFFFFFFFFFFFFFF9 | 2;
      v13 = v12;
      if (a5 <= v12++)
        goto LABEL_6;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_22F31A3C0(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F2C52BC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F31AD18(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_BYTE *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F31A460(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5, int a6, uint64_t a7)
{
  char v14;
  int v15;

  if (a6)
  {
    v14 = 0;
  }
  else if ((*(_BYTE *)(a2 + 1) & 0x20) != 0)
  {
    v14 = 2;
  }
  else
  {
    v14 = 0;
    if (a5 >= 8 && (a5 & 4) == 0)
    {
      if (sub_22EFE8EE4(a5 & 0xFFFFFFFFFFFFFFF8))
        v14 = 2;
      else
        v14 = 0;
    }
  }
  if (a3)
    v15 = 1;
  else
    v15 = 2;
  *(_DWORD *)a1 = v15;
  *(_BYTE *)(a1 + 4) = (a6 == 0) | (4 * (a6 == 5)) | v14 | *(_BYTE *)(a1 + 4) & 0xF8;
  *(_QWORD *)(a1 + 8) = a2 & 0xFFFFFFFFFFFFFFFDLL;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 40) = a6;
  return a1;
}

uint64_t sub_22F31A53C(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5)
{
  char v10;
  int v11;

  v10 = 0;
  if (a5 >= 8 && (a5 & 4) == 0)
  {
    if (sub_22EFE8EE4(a5 & 0xFFFFFFFFFFFFFFF8))
      v10 = 2;
    else
      v10 = 0;
  }
  if (a3)
    v11 = 1;
  else
    v11 = 2;
  *(_DWORD *)a1 = v11;
  *(_BYTE *)(a1 + 4) = v10 | ((a5 & 2) != 0) | *(_BYTE *)(a1 + 4) & 0xF8;
  *(_QWORD *)(a1 + 8) = a2 | 2;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 40) = 1;
  return a1;
}

unint64_t *sub_22F31A5DC(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2 & 0xFFFFFFFFFFFFFFF9;
  *a1 = a2 & 0xFFFFFFFFFFFFFFF9;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(v4 + 60);
  v6 = v4 + 80;
  if ((v5 & 4) == 0)
    v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 80);
  if (v7)
  {
    if (sub_22F1145A8(v7 + 48, *(unsigned int *)(v7 + 8) - 1))
      v7 = 2;
    else
      v7 = 0;
    v3 = *a1 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *a1 = v7 | v3;
  return a1;
}

uint64_t sub_22F31A650(uint64_t result, unint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  *(_DWORD *)result = 0;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xF8 | ((v2 & 0x200) != 0) | (v2 >> 7) & 2 | 4;
  *(_QWORD *)(result + 8) = a2 | 4;
  *(_DWORD *)(result + 16) = ~(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF0) + 16) >> 8) & 2;
  return result;
}

void sub_22F31A6AC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  v3 = *a2;
  v4 = *((unsigned int *)a2 + 2);
  v5 = *a2 + 32 * v4;
  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  if (*(_DWORD *)(v5 - 24))
  {
    sub_22F24C77C((uint64_t)a1, v5 - 32);
    LODWORD(v4) = *((_DWORD *)a2 + 2);
    v3 = *a2;
  }
  v6 = (v4 - 1);
  *((_DWORD *)a2 + 2) = v6;
  v7 = (void **)(v3 + 32 * v6);
  if (*v7 != v7 + 2)
    free(*v7);
}

_QWORD *sub_22F31A728(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return (_QWORD *)sub_22F31AA64(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 32 * v3);
  *result = result + 2;
  result[1] = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_22F24C890((uint64_t)result, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F31A798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 32 * v6;
    do
    {
      v9 = *(void **)(v7 + v8 - 32);
      if ((void *)(v7 + v8 - 16) != v9)
        free(v9);
      v8 -= 32;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = 0;
  sub_22F31A80C(a1, a2, a2 + 32 * a3);
}

void sub_22F31A80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = a2;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(a1 + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    sub_22F31A8C0(a1);
    v7 = *(unsigned int *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)a1 + 32 * v7);
    do
    {
      *v8 = v8 + 2;
      v8[1] = 0x200000000;
      if (*(_DWORD *)(v4 + 8))
        v8 = (_QWORD *)sub_22F24C890((uint64_t)v8, v4);
      v4 += 32;
      v8 += 4;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 5);
}

void sub_22F31A8C0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F31A92C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F31A92C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 32 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x200000000;
      if (*(_DWORD *)(v5 + 8))
        sub_22F24C77C((uint64_t)a2, v5);
      v5 += 32;
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 32 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 32);
        if ((void *)(v8 + v9 - 16) != v10)
          free(v10);
        v9 -= 32;
      }
      while (v9);
    }
  }
}

double sub_22F31A9DC(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 32];
      if (&v4[v6 - 16] != v7)
        free(v7);
      v6 -= 32;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_22F31AA64(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v5 = &v4[4 * *(unsigned int *)(a1 + 8)];
  *v5 = v5 + 2;
  v5[1] = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F24C890((uint64_t)v5, a2);
  sub_22F31A92C(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v6 = (*(_DWORD *)(a1 + 8) + 1);
  *(_QWORD *)(a1 + 8) = v6;
  return (uint64_t)&v4[4 * v6 - 4];
}

void sub_22F31AB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F365138(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
}

uint64_t sub_22F31AB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22F365138(a5, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F31AB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F365138(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F31ABB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = a1 + 32;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v6 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v8 = v7;
    v4 = sub_22F2F1D6C(v6, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8;
  }
  sub_22F0EFFCC(v4, a2);
  return a1;
}

unint64_t *sub_22F31AC48(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = 0;
  v5 = a2 + 2032;
  if ((*(_BYTE *)a3 & 2) != 0)
  {
    v12 = sub_22E3CD3D4(v5, 16, 3);
    sub_22F31AC48(&v14, a2, *a3 & 0xFFFFFFFFFFFFFFF8);
    sub_22F31AC48(&v13, a2, (*a3 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v13;
    v9 = v12 & 0xFFFFFFFFFFFFFFF9 | *a3 & 4 | 2;
  }
  else
  {
    v6 = sub_22E3CD3D4(v5, 32, 3);
    v7 = (_OWORD *)(*a3 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = v7[1];
    *(_OWORD *)v6 = *v7;
    *(_OWORD *)(v6 + 16) = v8;
    v9 = v6 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *a1 = v9;
  return a1;
}

_QWORD *sub_22F31AD18(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22E9F8348(a1, v6);
    v8 = 0;
    sub_22F2C52BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F31ADD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = sub_22F2C52BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v10, v11, &v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      v12[1] = *(_QWORD *)(a2 + 8);
      *((_BYTE *)v12 + 16) = *(_BYTE *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F31AEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  v3 = sub_22F2E5664(a1, a2);
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  if (v4 + 16 * v5 == v3)
    v6 = (unsigned int *)(a1 + 80);
  else
    v6 = (unsigned int *)(v3 + 8);
  return *(_QWORD *)(a1 + 72) + 16 * *v6;
}

uint64_t sub_22F31AF0C(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  char v13;
  _DWORD *v14;

  v14 = a4;
  if (!sub_22E9F98A0(a1, a2, a3, (uint64_t)"co_yield", 8))
  {
    sub_22EBBCB14(a1, a4, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v13);
    return 1;
  }
  sub_22E9F9F38((unsigned int *)a1, a3, (uint64_t)"co_yield", 8);
  v8 = 1;
  v9 = sub_22E9FA490((_QWORD *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8) + 176), a3, "yield_value", 0xBuLL, (uint64_t)&v14, 1);
  if ((v9 & 1) == 0)
  {
    v10 = sub_22E9FA000((_QWORD *)a1, a2, a3);
    if ((v10 & 1) == 0)
    {
      v11 = sub_22E9FA5D0(a1, a3, v9 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFFELL));
      if ((v11 & 1) == 0)
        return sub_22E9FB1B0(a1, a3, v11 & 0xFFFFFFFFFFFFFFFELL);
    }
    return 1;
  }
  return v8;
}

uint64_t sub_22F31B02C(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  char v8;

  if (sub_22E9F98A0(a1, a2, a3, (uint64_t)"co_return", 9))
    return sub_22E9FB310(a1, a3, (unint64_t)a4, 0);
  sub_22EBBCB14(a1, a4, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v8);
  return 1;
}

uint64_t sub_22F31B0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = a3;
  *(_QWORD *)(a1 + 120) = a4;
  v7 = 1;
  *(_BYTE *)(a1 + 128) = 1;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a3 + 24);
  v8 = a1 + 152;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0x400000000;
  v9 = *(_QWORD *)(a4 + 176);
  if (v9)
    v7 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) >> 2) & 1;
  *(_BYTE *)(a1 + 184) = v7;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = a5;
  v10 = *(unsigned int *)(a4 + 264);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = 0;
    v12 = 16 * v10;
    v13 = (uint64_t *)(*(_QWORD *)(a4 + 256) + 8);
    do
    {
      v14 = *v13;
      if (v11 >= *(_DWORD *)(a1 + 148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v11) = *(_DWORD *)(a1 + 144);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v11) = v14;
      v11 = (*(_DWORD *)(a1 + 144) + 1);
      *(_DWORD *)(a1 + 144) = v11;
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
    v8 = *(_QWORD *)(a1 + 136);
    v7 = *(unsigned __int8 *)(a1 + 184);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v11;
  if (!v7)
  {
    v15 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 176) + 48) & 0xFFFFFFFFFFFFFFF0));
    if (v15)
    {
      if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 35 >= 3)
        v16 = 0;
      else
        v16 = v15;
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)(a1 + 192) = v16;
  }
  if (sub_22F31B258(a1))
  {
    v17 = *(_QWORD *)(a1 + 120);
    v18 = *(_QWORD *)(v17 + 336);
    if ((*(_BYTE *)(v17 + 10) & 2) != 0 || v18)
    {
      v19 = *(_QWORD *)(v17 + 344);
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v19;
      LOBYTE(v18) = 1;
    }
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  *(_BYTE *)(a1 + 128) = v18;
  return a1;
}

BOOL sub_22F31B258(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_22ED2B2F8(*(_QWORD *)(a1 + 104), *(_QWORD *)(*(_QWORD *)(a1 + 120) + 176), *(_DWORD *)(a1 + 132), *(_DWORD *)(a1 + 132));
  if ((v2 & 1) == 0)
    *(_QWORD *)(a1 + 8) = v2 & 0xFFFFFFFFFFFFFFFELL;
  return (v2 & 1) == 0;
}

uint64_t sub_22F31B2A0(uint64_t a1)
{
  uint64_t result;

  result = sub_22F31B2F8(a1);
  if ((_DWORD)result)
  {
    result = sub_22F31B504(a1);
    if ((_DWORD)result)
    {
      result = sub_22E9FB7B8(a1);
      if ((_DWORD)result)
      {
        result = sub_22F31B6E0(a1);
        if ((_DWORD)result)
          result = sub_22E9FB908(a1);
      }
    }
  }
  *(_BYTE *)(a1 + 128) = result;
  return result;
}

uint64_t sub_22F31B2F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _BOOL8 v8;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18[24];
  unsigned int v19[42];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 192);
  v2 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 8);
  v6 = *(_DWORD *)(a1 + 132);
  LOBYTE(v17[0]) = 0;
  sub_22E9FC4CC((uint64_t)v19, v4, "unhandled_exception", v2, v6, v17);
  sub_22E8BAFF0((uint64_t)v19);
  if (LOBYTE(v17[0]))
  {
    v7 = *(_QWORD **)(a1 + 104);
    if ((*(_QWORD *)(v7[9] + 8) & 0x400000000000) != 0)
    {
      v12 = sub_22E9FA490(v7, *(_QWORD *)(*(_QWORD *)(a1 + 120) + 176), *(_DWORD *)(a1 + 132), "unhandled_exception", 0x13uLL, 0, 0);
      v13 = sub_22EBCF22C(*(_QWORD *)(a1 + 104), v12 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a1 + 132), 0, 0);
      v8 = 0;
      if ((v13 & 1) != 0)
        return v8;
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 104) + 72) & 0x80) == 0)
      {
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 28);
        if (v14)
        {
          sub_22E8FCA40(*(_QWORD **)(a1 + 104), v14, 0x1252u, 0, (uint64_t)v18);
          sub_22E903BEC(v18);
          sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(*(_QWORD *)(a1 + 120) + 12), 0x158Fu, 0, (uint64_t)v19);
          v15 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 120) + 8) >> 18) & 3;
          v16 = qword_22F46A030[v15];
          v17[0] = off_24FAB7718[v15];
          v17[1] = v16;
          sub_22F2F2210((uint64_t)v19, (uint64_t)v17);
          sub_22E903BEC(v19);
          return 0;
        }
      }
      *(_QWORD *)(a1 + 32) = v13 & 0xFFFFFFFFFFFFFFFELL;
    }
    return 1;
  }
  else
  {
    v10 = (v5 & 0x400000000000) == 0;
    v8 = v10;
    if (v10)
      v11 = 6382;
    else
      v11 = 3125;
    sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(a1 + 132), v11, 0, (uint64_t)v19);
    sub_22E890024((uint64_t)v19, v3);
    sub_22E903BEC(v19);
    sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(*(_QWORD *)(a1 + 192) + 24), 0x15A7u, 0, (uint64_t)v19);
    sub_22E890024((uint64_t)v19, v3);
    sub_22E903BEC(v19);
  }
  return v8;
}

uint64_t sub_22F31B504(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8[25];
  __int16 v9;
  _BYTE v10[8];
  _QWORD *v11;
  uint64_t v12;
  _BYTE v13[8];
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v2 = (uint64_t *)(a1 + 192);
  sub_22E9FC4CC((uint64_t)v13, *(_QWORD *)(a1 + 104), "return_void", *(_QWORD *)(a1 + 192), *(_DWORD *)(a1 + 132), (_BYTE *)&v9 + 1);
  sub_22E9FC4CC((uint64_t)v10, *(v2 - 11), "return_value", *v2, *((_DWORD *)v2 - 15), &v9);
  if (!HIBYTE(v9) || !(_BYTE)v9)
  {
    if (HIBYTE(v9) | v9)
    {
      if (!HIBYTE(v9))
      {
        v5 = 0;
        goto LABEL_8;
      }
      v6 = sub_22E9FB310(*(_QWORD *)(a1 + 104), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 24), 0, 0);
      v5 = (uint64_t)sub_22F3322D4(*(_QWORD *)(a1 + 104), v6 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v5 = sub_22ED2B260(*(_QWORD *)(a1 + 104), *(_DWORD *)(*(_QWORD *)(a1 + 192) + 24), 0);
    }
    v3 = 0;
    if ((v5 & 1) != 0)
      goto LABEL_4;
LABEL_8:
    *(_QWORD *)(a1 + 40) = v5 & 0xFFFFFFFFFFFFFFFELL;
    v3 = 1;
    goto LABEL_4;
  }
  sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 24), 0xC32u, 0, (uint64_t)v8);
  sub_22E890024((uint64_t)v8, v2);
  sub_22E903BEC(v8);
  sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)((*v14 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x1655u, 0, (uint64_t)v8);
  v7 = v15;
  sub_22E894538((uint64_t)v8, &v7);
  sub_22E903BEC(v8);
  sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0x1655u, 0, (uint64_t)v8);
  v7 = v12;
  sub_22E894538((uint64_t)v8, &v7);
  sub_22E903BEC(v8);
  v3 = 0;
LABEL_4:
  sub_22E8BAFF0((uint64_t)v10);
  sub_22E8BAFF0((uint64_t)v13);
  return v3;
}

uint64_t sub_22F31B6E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  _QWORD v22[2];
  unsigned int v23[24];
  uint64_t v24;
  _BYTE v25[8];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v21 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 80) + 544), "get_return_object_on_allocation_failure", 0x27uLL);
  sub_22E8BAEE4((uint64_t)v25, *(_QWORD *)(a1 + 104), v21, *(_DWORD *)(a1 + 132), 3, 0);
  v2 = *(_QWORD *)(a1 + 192);
  if (v2)
    v3 = v2 + 64;
  else
    v3 = 0;
  if (!sub_22EC611AC(*(_QWORD *)(a1 + 104), v25, v3, 0))
  {
    v5 = 1;
    goto LABEL_17;
  }
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  v4 = sub_22EB235A8(*(_QWORD **)(a1 + 104), (uint64_t)&v19, (uint64_t)v25, 0, 0);
  v5 = 0;
  if ((v4 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 104);
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *(_QWORD *)(a1 + 120);
    v24 = *(_QWORD *)(a1 + 192);
    sub_22EFF605C(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v7)
    {
      if (*v7 == 161)
      {
        v10 = *((_QWORD *)v7 + 2);
        if (v10)
        {
          if ((*(_DWORD *)(v10 + 28) & 0x7Eu) - 54 <= 3)
          {
            if (sub_22EFD642C(*((_QWORD **)v7 + 2)))
            {
              v11 = sub_22EB1CFA4(*(_QWORD *)(a1 + 104), 0, v7, *(unsigned int *)(a1 + 132), 0, 0, *(unsigned int *)(a1 + 132), 0, 0);
              v5 = 0;
              if ((v11 & 1) != 0)
                goto LABEL_14;
              v12 = sub_22ED358AC(*(_QWORD *)(a1 + 104), *(_DWORD *)(a1 + 132), v11 & 0xFFFFFFFFFFFFFFFELL, 0);
              if ((v12 & 1) == 0)
              {
                *(_QWORD *)(a1 + 80) = v12 & 0xFFFFFFFFFFFFFFFELL;
                v5 = 1;
                goto LABEL_14;
              }
              v17 = *(_QWORD **)(a1 + 104);
              v18 = *v26 & 0xFFFFFFFFFFFFFFFCLL;
              if ((*(_DWORD *)(v18 + 28) & 0x7Fu) <= 0x2F
                && ((1 << (*(_DWORD *)(v18 + 28) & 0x7F)) & 0xC00000060000) != 0)
              {
                v18 = sub_22EFBAEA4(v18);
              }
              sub_22E8FCA40(v17, *(_DWORD *)(v18 + 24), 0x1651u, 0, (uint64_t)v23);
              sub_22E894538((uint64_t)v23, &v21);
              sub_22E903BEC(v23);
              sub_22E8FCA40(*(_QWORD **)(a1 + 104), *(_DWORD *)(*(_QWORD *)(a1 + 120) + 12), 0x158Fu, 0, (uint64_t)v23);
              v14 = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 8);
              goto LABEL_20;
            }
            v9 = *(_DWORD *)(v10 + 24);
          }
        }
      }
    }
    sub_22E8FCA40(v6, v9, 0xC31u, 0, (uint64_t)v23);
    sub_22E890024((uint64_t)v23, &v24);
    sub_22E903BEC(v23);
    sub_22E8FCA40(v6, *(_DWORD *)(v8 + 12), 0x158Fu, 0, (uint64_t)v23);
    v14 = *(unsigned int *)(v8 + 8);
LABEL_20:
    v15 = (v14 >> 18) & 3;
    v16 = qword_22F46A030[v15];
    v22[0] = off_24FAB7718[v15];
    v22[1] = v16;
    sub_22F2F2210((uint64_t)v23, (uint64_t)v22);
    sub_22E903BEC(v23);
    v5 = 0;
  }
LABEL_14:
  if (HIDWORD(v20[1]))
    free(v20[0]);
LABEL_17:
  sub_22E8BAFF0((uint64_t)v25);
  return v5;
}

uint64_t sub_22F31B9B0(_QWORD *a1, int a2, int a3, _QWORD *a4)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int *v16;
  int v17;
  _QWORD **v18;
  uint64_t v19;
  unsigned int *v20;
  int *v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27[24];
  unint64_t v28;
  _BYTE v29[96];
  unsigned int v30[24];
  int v31;
  _QWORD v32[19];
  char v33;
  _BYTE v34[8];
  _QWORD v35[21];

  v35[20] = *MEMORY[0x24BDAC8D0];
  if (a1[425])
    goto LABEL_2;
  v9 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "coroutine_traits", 0x10uLL);
  v10 = a1[419];
  if ((v10 & 1) != 0)
  {
    v10 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v10 >> 1);
    a1[419] = v10;
  }
  v11 = a3;
  sub_22E8BAEE4((uint64_t)v34, (uint64_t)a1, v9, a3, 0, 0);
  v12 = 0;
  if (v10)
    v12 = sub_22EC611AC(a1, v34, v10 + 48, 0);
  v13 = sub_22F3283DC(a1);
  sub_22E8BAEE4((uint64_t)&v31, (uint64_t)a1, v9, v11, 0, 0);
  v14 = 0;
  if (v13)
    v14 = sub_22EC611AC(a1, &v31, v13 + 48, 0);
  if (((v12 | v14) & 1) != 0)
  {
    if (v12)
      v15 = v10;
    else
      v15 = v13;
    a1[426] = v15;
    if (v12)
      v16 = (int *)v34;
    else
      v16 = &v31;
    v17 = *v16;
    if (v12)
      v18 = (_QWORD **)v35;
    else
      v18 = (_QWORD **)v32;
    v19 = sub_22F31BD1C(v17, *v18);
    a1[425] = v19;
    if (!v19)
    {
      if (v12)
        v21 = (int *)v34;
      else
        v21 = &v31;
      *((_BYTE *)v21 + 163) = 0;
      if (v12)
        v22 = (_QWORD **)v35;
      else
        v22 = (_QWORD **)v32;
      sub_22E8FCA40(a1, *(_DWORD *)((**v22 & 0xFFFFFFFFFFFFFFFCLL) + 24), 0xEA9u, 0, (uint64_t)v29);
      v20 = (unsigned int *)v29;
      goto LABEL_24;
    }
    if (!v14)
      goto LABEL_21;
    sub_22E8FCA40(a1, a2, 0x1960u, 0, (uint64_t)v30);
    sub_22F2F30F4((uint64_t)v30, (uint64_t)"coroutine_traits");
    sub_22E903BEC(v30);
    v33 = 0;
    v28 = *(_QWORD *)v32[0] & 0xFFFFFFFFFFFFFFFCLL;
    sub_22E8FCA40(a1, *(_DWORD *)(v28 + 24), 0x15C9u, 0, (uint64_t)v30);
    sub_22E890024((uint64_t)v30, (uint64_t *)&v28);
    sub_22E903BEC(v30);
    if (!v12)
      goto LABEL_21;
    v23 = a1[425];
    if (v31 == 2)
    {
      v24 = *(_QWORD *)v32[0] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = *(_DWORD *)(v24 + 28) & 0x7F;
      if (v25 <= 0x2F && ((1 << v25) & 0xC00000060000) != 0)
      {
        v24 = sub_22EFBAEA4(v24);
        v25 = *(_DWORD *)(v24 + 28) & 0x7F;
      }
      v26 = v25 == 28 ? v24 : 0;
    }
    else
    {
      v26 = 0;
    }
    if (v23 == v26)
    {
LABEL_21:
      sub_22E8BAFF0((uint64_t)&v31);
      sub_22E8BAFF0((uint64_t)v34);
LABEL_2:
      *a4 = a1[426];
      return a1[425];
    }
    sub_22E8FCA40(a1, a2, 0xF5Cu, 0, (uint64_t)v27);
    sub_22E903BEC(v27);
    sub_22E8FCA40(a1, *(_DWORD *)(a1[425] + 24), 0x15C9u, 0, (uint64_t)v30);
    sub_22E890024((uint64_t)v30, a1 + 425);
  }
  else
  {
    sub_22E8FCA40(a1, a2, 0xDF1u, 0, (uint64_t)v30);
    sub_22F2F30F4((uint64_t)v30, (uint64_t)"std::coroutine_traits");
  }
  v20 = v30;
LABEL_24:
  sub_22E903BEC(v20);
  sub_22E8BAFF0((uint64_t)&v31);
  sub_22E8BAFF0((uint64_t)v34);
  return 0;
}

uint64_t sub_22F31BD1C(int a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v3;

  if (a1 != 2)
    return 0;
  result = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(result + 28) & 0x7F;
  if (v3 <= 0x2F && ((1 << v3) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v3 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v3 != 28)
    return 0;
  return result;
}

uint64_t sub_22F31BD7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;

  *(_BYTE *)a1 = -94;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(162);
    ++*((_DWORD *)v10 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AACC4(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F31BE14(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v9;

  *(_BYTE *)a1 = a2;
  if (byte_255E04EB3)
  {
    v9 = sub_22F0D3748(a2);
    ++*((_DWORD *)v9 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAC8C(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F31BEA4(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v15;
  int v16;
  char *v17;

  v15 = *((_QWORD *)a7 + 1);
  v16 = *a7;
  *(_BYTE *)a1 = a2;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(a2);
    ++*((_DWORD *)v17 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | v16 & 0x1F00;
  *(_QWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a8;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAC8C(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F31BF68(uint64_t result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = a2;
  v7 = result;
  if (a2 == a4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = a2;
    do
    {
      ++v8;
      v10 = v9 + 1;
      while (v10 != a3)
      {
        v11 = *v10++;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v9 = v10 - 1;
          goto LABEL_8;
        }
      }
      v9 = a3;
LABEL_8:
      ;
    }
    while (v9 != a4);
  }
  v12 = *(unsigned int *)(result + 8);
  if (v8 + v12 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(unsigned int *)(v7 + 8);
  }
  if (v6 != a4)
  {
    v13 = (unint64_t *)(*(_QWORD *)v7 + 8 * v12);
    do
    {
      v15 = *v6;
      v14 = v6 + 1;
      *v13 = v15;
      while (v14 != a3)
      {
        v16 = *v14++;
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = v14 - 1;
          goto LABEL_18;
        }
      }
      v6 = a3;
LABEL_18:
      ++v13;
    }
    while (v6 != a4);
  }
  *(_DWORD *)(v7 + 8) = v12 + v8;
  return result;
}

uint64_t sub_22F31C058(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F2891B4(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F31C120((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22F31C120(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E9FDC40((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2891B4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F31C1DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2891B4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_22F31C2A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(v3 + 68) & 0x40) != 0)
  {
    v6 = *(_QWORD *)(v3 + 100);
    if ((v6 & 0x1000000000) != 0)
      v7 = "__hipPushCallConfiguration";
    else
      v7 = "hipConfigureCall";
    if ((v6 & 0x1000000000) != 0)
      v8 = 26;
    else
      v8 = 16;
    std::string::__init((std::string *)a2, v7, v8);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 16);
    if (sub_22F4197B8(*(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 352), 0))
    {
      v5 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_22F455390;
      strcpy(v5, "__cudaPushCallConfiguration");
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 17;
      strcpy((char *)a2, "cudaConfigureCall");
    }
  }
}

uint64_t sub_22F31C378(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v3 = 0;
    v4 = 0;
    return v3 & v4;
  }
  v2 = *(_DWORD *)(a1 + 28);
  if ((v2 & 0x100) != 0)
  {
    sub_22EFC8E88(a1);
    v7 = sub_22E9FFD4C(v6);
    if (v7)
    {
      v3 = (*(unsigned __int8 *)(v7 + 34) >> 2) & 1;
      v2 = *(_DWORD *)(a1 + 28);
      goto LABEL_4;
    }
    v2 = *(_DWORD *)(a1 + 28);
  }
  v3 = (v2 >> 9) & 1;
LABEL_4:
  if ((v2 & 0x100) != 0)
  {
    sub_22EFC8E88(a1);
    v9 = sub_22E9FFDAC(v8);
    if (v9)
    {
      v4 = (*(unsigned __int8 *)(v9 + 34) >> 2) & 1;
      return v3 & v4;
    }
    v2 = *(_DWORD *)(a1 + 28);
  }
  v4 = (v2 >> 9) & 1;
  return v3 & v4;
}

uint64_t sub_22F31C408(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a3 + 8);
  if (v3 >= 2)
  {
    v6 = result;
    v7 = *(_QWORD **)a3;
    v8 = *(_QWORD *)a3 + 16;
    v9 = 16 * v3 - 16;
    do
    {
      v10 = sub_22E9FE318(v6, a2, v7[1]);
      if (v10 < sub_22E9FE318(v6, a2, *(_QWORD *)(v8 + 8)))
        v7 = (_QWORD *)v8;
      v8 += 16;
      v9 -= 16;
    }
    while (v9);
    result = sub_22E9FE318(v6, a2, v7[1]);
    v11 = *(_QWORD **)a3;
    v12 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v12)
    {
      v13 = result;
      v14 = 0;
      v15 = &v11[2 * v12];
      v16 = 16 * v12;
      v17 = 16 * v12 - 16;
      while (1)
      {
        v18 = &v11[v14 / 8];
        result = sub_22E9FE318(v6, a2, v11[v14 / 8 + 1]);
        if (result < v13)
          break;
        v14 += 16;
        if (v16 == v14)
        {
          v18 = v15;
          goto LABEL_12;
        }
      }
      if (v17 != v14)
      {
        v19 = v18 + 3;
        v20 = v16 - v14 - 16;
        do
        {
          result = sub_22E9FE318(v6, a2, *v19);
          if (result >= v13)
          {
            v21 = *v19;
            *v18 = *(v19 - 1);
            v18[1] = v21;
            v18 += 2;
          }
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
      }
    }
    else
    {
      v18 = *(_QWORD **)a3;
    }
LABEL_12:
    *(_DWORD *)(a3 + 8) = ((unint64_t)v18 - *(_QWORD *)a3) >> 4;
  }
  return result;
}

uint64_t sub_22F31C558@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v8 = sub_22E903070(a1, 1);
  v9 = 0;
  v10 = 0;
  if (v8 && (*(_WORD *)(v8 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v10 = (_BYTE *)(v8 - 72);
    v11 = *(_QWORD *)(a1 + 216);
    v12 = (*(_WORD *)(v11 + 8) & 0x7E) - 52;
    if (v11)
      v13 = v11 - 72;
    else
      v13 = 0;
    if (v12 >= 6)
      v14 = 0;
    else
      v14 = v13;
    v15 = sub_22E9FDFC4(v8, v14, 0);
    if (v15 < 2)
      goto LABEL_10;
    if (v15 != 3 || (*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x80) == 0)
    {
      v9 = 0;
      return sub_22E903A04(a4, v9, a2, a3, (uint64_t)v10, (_QWORD *)a1);
    }
    if (*(_BYTE *)(a1 + 8889) && (sub_22F41A8F8(a3) & 1) != 0)
    {
LABEL_10:
      v9 = 1;
    }
    else if (sub_22EA32CC0(a1, v10, 0))
    {
      v9 = 3;
    }
    else
    {
      v9 = 2;
    }
  }
  return sub_22E903A04(a4, v9, a2, a3, (uint64_t)v10, (_QWORD *)a1);
}

uint64_t sub_22F31C65C@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v8 = sub_22E903070(a1, 1);
  v9 = 0;
  v10 = 0;
  if (v8 && (*(_WORD *)(v8 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v10 = (_BYTE *)(v8 - 72);
    v11 = *(_QWORD *)(a1 + 216);
    v12 = (*(_WORD *)(v11 + 8) & 0x7E) - 52;
    if (v11)
      v13 = v11 - 72;
    else
      v13 = 0;
    if (v12 >= 6)
      v14 = 0;
    else
      v14 = v13;
    v15 = sub_22E9FDFC4(v8, v14, 0);
    if (v15 == 2)
      goto LABEL_14;
    if (v15 != 3 || (*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x80) != 0)
    {
      v9 = 0;
      return sub_22E903A04(a4, v9, a2, a3, (uint64_t)v10, (_QWORD *)a1);
    }
    if (*(_BYTE *)(a1 + 8889) && (sub_22F41A8F8(a3) & 1) != 0)
    {
LABEL_14:
      v9 = 1;
    }
    else if (sub_22EA32CC0(a1, v10, 0))
    {
      v9 = 3;
    }
    else
    {
      v9 = 2;
    }
  }
  return sub_22E903A04(a4, v9, a2, a3, (uint64_t)v10, (_QWORD *)a1);
}

BOOL sub_22F31C760(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22[2];
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = a3;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
  v4 = v3 > 3 || v3 == 2;
  if (!v4 || (v3 & 0xFFFFFFFE) == 4)
    return 1;
  v5 = 1;
  v10 = sub_22E903070(a1, 1);
  if (!v10 || (*(_WORD *)(v10 + 8) & 0x7Eu) - 58 < 0xFFFFFFFA)
    return v5;
  v11 = v10 - 72;
  v12 = sub_22EA32CC0(a1, (_BYTE *)(v10 - 72), 0);
  v13 = sub_22E9FE318(a1, v11, a3);
  if (v12)
    v14 = 3;
  else
    v14 = 2;
  if (v13 >= 2)
  {
    if ((~*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x880) == 0
      && sub_22E462B18(a3)
      && (sub_22EFBF86C(a3, v22, 0) & 1) == 0)
    {
      v15 = *(_QWORD *)(a1 + 88) + 18624;
      v24 = a3;
      sub_22F275184(v15, &v24, (uint64_t)v22);
    }
    return 1;
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v25 = a2;
  sub_22F31CB40((uint64_t)v22, a1 + 12808, &v24);
  if (!v23)
    return 1;
  v16 = sub_22E903A04((uint64_t)v22, v14, a2, 4638, v11, (_QWORD *)a1);
  LODWORD(v24) = sub_22E9FDFC4(v16, a3, 0);
  v17 = sub_22E8900C4((uint64_t)v22, (int *)&v24);
  v21 = 0;
  v18 = sub_22E8900C4(v17, &v21);
  v19 = sub_22E890024(v18, &v26);
  v20 = sub_22E9FDFC4(v19, v11, 0);
  sub_22E8900C4(v19, &v20);
  sub_22E903BEC((unsigned int *)v22);
  if (!sub_22EFC01DC(v26, 0))
  {
    sub_22E903A04((uint64_t)v22, v14, *(_DWORD *)(v26 + 24), 6001, v11, (_QWORD *)a1);
    sub_22E890024((uint64_t)v22, &v26);
    sub_22E903BEC((unsigned int *)v22);
  }
  return (v14 - 3) < 0xFFFFFFFE;
}

void sub_22F31C994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;

  if (!sub_22F295B40(a2) && !sub_22E466E5C(a2))
  {
    v4 = *(_QWORD *)(a1 + 88);
    v8 = 0uLL;
    v10 = 0;
    v9 = 0;
    v12 = 120;
    v11 = 0;
    v5 = sub_22F381CB8(v4, &v8);
    sub_22EFCA95C(a2, v5);
    v6 = *(_QWORD *)(a1 + 88);
    v8 = 0uLL;
    v10 = 0;
    v9 = 0;
    v12 = 120;
    v11 = 0;
    v7 = sub_22F38218C(v6, &v8);
    sub_22EFCA95C(a2, v7);
  }
}

void sub_22F31CA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;

  v5 = *(_QWORD *)(a3 + 48);
  if ((*(_BYTE *)(v5 + 29) & 1) != 0)
  {
    sub_22EFC8E88(*(_QWORD *)(a3 + 48));
    v7 = sub_22EA00378(v6);
    if (v7)
    {
      sub_22F382078(v7, *(_QWORD *)(a1 + 88));
      v9 = *(_WORD *)(v8 + 32);
      *(_BYTE *)(v8 + 34) |= 1u;
      *(_WORD *)(v8 + 32) = v9;
      sub_22EFCA95C(a2, v8);
    }
  }
  if ((*(_BYTE *)(v5 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v5);
    v11 = sub_22E9FFDAC(v10);
    if (v11)
    {
      sub_22F382210(v11, *(_QWORD *)(a1 + 88));
      v13 = *(_WORD *)(v12 + 32);
      *(_BYTE *)(v12 + 34) |= 1u;
      *(_WORD *)(v12 + 32) = v13;
      sub_22EFCA95C(a2, v12);
    }
  }
  if ((*(_BYTE *)(v5 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v5);
    v15 = sub_22E9FFD4C(v14);
    if (v15)
    {
      sub_22F381D3C(v15, *(_QWORD *)(a1 + 88));
      v17 = *(_WORD *)(v16 + 32);
      *(_BYTE *)(v16 + 34) |= 1u;
      *(_WORD *)(v16 + 32) = v17;
      sub_22EFCA95C(a2, v16);
    }
  }
}

uint64_t sub_22F31CB40(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = 0;
  result = sub_22F31CBD0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v11);
  v7 = v11;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = sub_22F31CCD4(a2, a3, v11);
    v7 = result;
    v10 = a3[2];
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = v10;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F31CBD0(uint64_t a1, int a2, _DWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;
  int v23;
  int v24;

  if (a2)
  {
    v24 = (*a3 >> 4) ^ (*a3 >> 9);
    v23 = sub_22F422E70(a3 + 2);
    v8 = sub_22E9FFE0C(&v24, &v23);
    v9 = a2 - 1;
    v10 = (a2 - 1) & v8;
    v11 = a3[2];
    v12 = (uint64_t *)(a1 + 16 * v10);
    v13 = *v12;
    v14 = *((_DWORD *)v12 + 2);
    if (*(_QWORD *)a3 == *v12 && v11 == v14)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == 0;
        if (v19 && v13 == -8192)
          v16 = v12;
        v21 = v10 + v17++;
        v10 = v21 & v9;
        v12 = (uint64_t *)(a1 + 16 * (v21 & v9));
        v13 = *v12;
        v14 = *((_DWORD *)v12 + 2);
        if (*(_QWORD *)a3 == *v12 && v11 == v14)
          goto LABEL_8;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_8:
  *a4 = v12;
  return result;
}

uint64_t sub_22F31CCD4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EA00214(a1, v6);
  v9 = 0;
  sub_22F31CBD0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != 0)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F31CD8C(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 == 400)
    return *(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1;
  result = 1;
  if (a2 > 357)
  {
    if ((a2 - 358) < 2 || a2 == 380)
      return result;
    if (a2 != 407)
      return 0;
    return *(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1;
  }
  if ((a2 - 79) <= 0x31 && ((1 << (a2 - 79)) & 0x2000060624221) != 0)
    return result;
  v4 = (a2 - 156);
  if (v4 > 0x33)
    goto LABEL_8;
  if (((1 << (a2 + 100)) & 0x4160000200001) != 0)
    return result;
  if (((1 << (a2 + 100)) & 0x8000000000058) != 0)
    return *(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1;
  if (v4 == 20)
    return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 3) >> 2) & 1;
LABEL_8:
  if (a2 != 250)
    return 0;
  return result;
}

uint64_t sub_22F31CE68(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  if (*(_DWORD *)a1 != 2)
    return 0;
  result = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v2 = *(_DWORD *)(result + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v2 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v2 - 33 >= 0xA)
    return 0;
  return result;
}

uint64_t sub_22F31CED8(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  __int128 v6;
  void *v7[2];
  _BYTE v8[168];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  sub_22E8BAEE4((uint64_t)v8, (uint64_t)a1, a2, a3, 0, 0);
  v4 = sub_22EB235A8(a1, (uint64_t)&v6, (uint64_t)v8, 1, 0);
  sub_22E8BAFF0((uint64_t)v8);
  if (HIDWORD(v7[1]))
    free(v7[0]);
  return v4;
}

uint64_t sub_22F31CF88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;

  v9 = a3;
  v10 = a4;
  sub_22EFC6D6C((uint64_t)&v11, a3);
  return sub_22ED57D18(a1, a2, 0, (uint64_t)&v9, a5, 0);
}

uint64_t sub_22F31CFF0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  v4 = a2;
  v2 = sub_22F0F08CC(&v4);
  if (!v2)
    return 6;
  if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 28 < 5)
    return dword_22F46A270[(*(_DWORD *)(v2 + 28) & 0x7F) - 28];
  if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x1B)
    return 5;
  return 6;
}

uint64_t sub_22F31D050(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 216) = a3;
  *(_QWORD *)(a2 + 360) = a3;
  return result;
}

unint64_t sub_22F31D05C(uint64_t a1)
{
  unint64_t result;

  result = sub_22EA044C0(a1, *(_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 216) = result;
  return result;
}

uint64_t sub_22F31D084(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 216);
  v6 = sub_22EFC3500(a3);
  if (v6)
    v7 = v6 + 64;
  else
    v7 = 0;
  *(_QWORD *)(a1 + 216) = v7;
  *(_QWORD *)(a2 + 360) = sub_22EFCB77C(v7);
  return v5;
}

uint64_t sub_22F31D0D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  v5 = result;
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 > 0xFFFFFFF9
    || (*(_DWORD *)(a3 + 28) & 0x7F) == 0x1D && (v3 = *(_QWORD *)(a3 + 48)) != 0)
  {
    *(_QWORD *)(result + 216) = v3 + 72;
    *(_QWORD *)(a2 + 360) = v3 + 72;
    result = sub_22EFBAACC(v3);
    if ((_DWORD)result)
    {
      v6 = 0;
      v7 = a2 + 72;
      v8 = v5 + 3320;
      v9 = 8 * result;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 120) + v6);
        if (*(_QWORD *)(v10 + 40) >= 8uLL && (*(_QWORD *)(v10 + 40) & 7) == 0)
        {
          sub_22E3BA850(v7, *(const void **)(*(_QWORD *)(v3 + 120) + v6));
          result = sub_22E8CE7E8(v8, v10);
        }
        v6 += 8;
      }
      while (v9 != v6);
    }
  }
  return result;
}

_QWORD *sub_22F31D1A0(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = sub_22EFCC008(a2);
  do
  {
    v4 = a1[45];
    if (v4 && sub_22EFCC008(v4) == v3)
      break;
    a1 = (_QWORD *)*a1;
  }
  while (a1);
  return a1;
}

uint64_t sub_22F31D1E8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  if ((sub_22EA04ED8(a1, a2, a3) & 1) != 0)
    return 1;
  else
    return sub_22EA051EC(a1, a2, a3);
}

BOOL sub_22F31D240(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  char **v3;
  char **v4;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = a2;
  if (a2 >= 0x7E8)
  {
    v9 = a2 - 2024;
    v7 = a1[1];
    if (v7 + 2024 > (unint64_t)a2)
    {
      v8 = *a1;
      if (strchr(*(char **)(*a1 + 48 * v9 + 16), 84))
        return 1;
      v6 = (char **)(v8 + 48 * v9);
      return strchr(v6[2], 116) != 0;
    }
    v2 = a2 - v7 - 2024;
    v3 = (char **)a1[2];
    v4 = &v3[6 * v2];
  }
  else
  {
    v3 = &off_24FAC8C40;
    v4 = &(&off_24FAC8C40)[6 * a2];
  }
  if (strchr(v4[2], 84))
    return 1;
  v6 = &v3[6 * v2];
  return strchr(v6[2], 116) != 0;
}

unint64_t sub_22F31D30C(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  unint64_t result;
  uint64_t v14;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unsigned int v27[24];
  unsigned int v28[24];
  _QWORD *v29[2];
  _QWORD v30[3];

  v5 = *(_QWORD **)(a1 + 112);
  v6 = sub_22E677168((uint64_t)v5, a3);
  v7 = sub_22E677168((uint64_t)v5, *(_DWORD *)(a2 + 24));
  v8 = v6;
  v9 = sub_22E6155EC(v5, v6);
  v10 = sub_22E6155EC(v5, v7);
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 104);
  v12 = *(_DWORD *)(a2 + 24);
  if (v12 < 0)
    v12 = sub_22F1E238C(v5, v12);
  result = sub_22F1E27D0(v5, v12);
  v30[0] = result;
  v30[1] = v14;
  v29[0] = (_QWORD *)a1;
  v29[1] = v30;
  if (v9 != v10 || HIDWORD(v6) != HIDWORD(v7))
    goto LABEL_7;
  v17 = sub_22E49F3DC(v5, v7);
  if (v17)
    v18 = v17[2];
  else
    v18 = 0;
  v19 = sub_22E49F3DC(v5, v8);
  if (v19)
    v20 = v19[2];
  else
    v20 = 0;
  v21 = *(_QWORD *)(a2 + 8) & 6;
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    if (v21)
    {
      v22 = sub_22EFC7594(a2);
      goto LABEL_22;
    }
  }
  else if (v21)
  {
    v22 = *(_QWORD *)(a2 - 8);
    goto LABEL_22;
  }
  v22 = 0;
LABEL_22:
  v23 = sub_22EA0F2E8(v29, v22, v18);
  v24 = *(_DWORD *)(a1 + 8992);
  if (v24)
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v24 - 48);
  else
    v25 = 0;
  result = sub_22EA0F2E8(v29, v25, v20);
  v26 = v23 | result;
  if (v9)
  {
    result = (unint64_t)sub_22F13C1A0(v11, v9);
    if ((result & 1) == 0)
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 24), 0x1807u, 0, (uint64_t)v28);
      result = (unint64_t)sub_22E903BEC(v28);
    }
  }
  if ((v26 & 1) == 0)
  {
LABEL_7:
    v16 = *(_DWORD *)(a2 + 24);
    if (v16)
    {
      sub_22E8FCA40((_QWORD *)a1, v16, 0x6Du, 0, (uint64_t)v27);
      return (unint64_t)sub_22E903BEC(v27);
    }
  }
  return result;
}

uint64_t sub_22F31D4F4(uint64_t a1, uint64_t a2)
{
  int v2;
  size_t v3;

  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(unsigned int *)(a2 + 36);
  if (v2 == (_DWORD)v3 && (!v2 || !memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), v3)))
    return (*(_BYTE *)(a1 + 48) == 0) ^ (*(_BYTE *)(a2 + 48) != 0);
  else
    return 0;
}

uint64_t sub_22F31D55C(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;

  for (i = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0); ; i = (uint64_t *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0))
  {
    v3 = sub_22F10D774(*i);
    v4 = v3;
    if (!v3 || (sub_22F40A7F0(v3) & 1) != 0)
      break;
  }
  return v4;
}

BOOL sub_22F31D5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 4) != 0)
    v9 = *(_QWORD *)(v9 + 8);
  return !sub_22EFC7ADC(v9)
      || ((*(_BYTE *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0 || (*(_WORD *)(a1 + 30) & 0x980) == 0)
      && ((*(_BYTE *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0 || (*(_BYTE *)(a2 + 31) & 8) == 0);
}

BOOL sub_22F31D630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 79)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F31D690(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  if ((*(_WORD *)(v7 + 8) & 0x7F) == 0x17)
  {
    if ((*(_QWORD *)(a3 + 56) & 0x3000000) == 0x2000000)
      v8 = 4;
    else
      v8 = 3;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    if ((*(_WORD *)(v10 + 8) & 0x7E) == 0x14)
      v8 = 1;
    else
      v8 = 2;
  }
  sub_22EA084D0((uint64_t)a1, a2, (_BYTE *)a3, v8);
  v11 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v11)
  {
    v12 = *(unsigned int *)(a3 + 104);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(a3 + 96);
      v14 = *(unint64_t **)(a2 + 96);
      v15 = 8 * v11 - 8;
      v16 = 8 * v12 - 8;
      do
      {
        v18 = *v14++;
        v17 = v18;
        v19 = *v13++;
        sub_22EA0E584(v17, v19, a1);
        if (!v15)
          break;
        v15 -= 8;
        v20 = v16;
        v16 -= 8;
      }
      while (v20);
    }
  }
  return sub_22EAF2D18(a1, a2, a3);
}

uint64_t sub_22F31D794(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13[12];
  uint64_t v14;

  v14 = a3;
  v13[0] = 0;
  if ((sub_22EE8B858((uint64_t)a1, a2, v13, 0) & 1) != 0)
    goto LABEL_15;
  v6 = sub_22EFB948C(a3);
  if (v6 == 1 || v6 == 4 || (*(_DWORD *)(a3 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a3 + 97) & 0x20) != 0)
    goto LABEL_4;
  if (sub_22EFB6870(a3))
    goto LABEL_4;
  v10 = *(_QWORD *)(a3 + 56);
  if ((v10 & 4) != 0)
  {
    if (*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 16))
      goto LABEL_4;
  }
  v11 = *(_QWORD *)(a3 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (sub_22EFC7ADC((unint64_t)v12))
  {
LABEL_4:
    *(_DWORD *)(a3 + 96) |= 0x100u;
    v7 = sub_22EFB6870(a2);
    if (v7)
      sub_22EC61DA0((uint64_t)a1, v7);
    sub_22EC61DA0((uint64_t)a1, a2);
    return 0;
  }
  else
  {
LABEL_15:
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1214u, 0, (uint64_t)v13);
    sub_22E890024((uint64_t)v13, &v14);
    sub_22E903BEC((unsigned int *)v13);
    sub_22F31D30C((uint64_t)a1, a2, *(_DWORD *)(v14 + 24));
    v8 = 1;
    sub_22EFC77E8(v14, 1);
  }
  return v8;
}

uint64_t sub_22F31D8D8(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;

  a1[1] = a2;
  v3 = sub_22E3CD31C((uint64_t *)(a2 + 72), a2);
  *a1 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  *((_DWORD *)a1 - 11) |= *(_DWORD *)(v3 + 28) & 0x260000;
  return sub_22E7B7A74(a1[1] + 72, (uint64_t)(a1 - 9));
}

unint64_t sub_22F31D92C(_QWORD *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v22[2];
  _QWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  int v33;
  _WORD *v34;
  uint64_t v35;
  _WORD v36[484];
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v24 = a3;
  v28 = 0;
  v29 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v30 = *(_QWORD *)(a3 + 88);
  v31 = 5;
  v32 = 0u;
  v33 = 0;
  v34 = v36;
  v35 = 0x800000000;
  v36[480] = (*(_QWORD *)a3 & 0x3F000) == 204800;
  v12 = *(_QWORD *)(a3 + 40);
  v37 = 0u;
  v38 = v12;
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v13 = sub_22EE8156C((uint64_t)a1, (uint64_t)&v24, (uint64_t)a2, a4, a5, a6, a7, a8);
  v14 = a1[27];
  if (v14)
    v15 = v14 - 64;
  else
    v15 = 0;
  v16 = *(_QWORD *)(a4 + 48);
  if (v16)
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
  else
    v17 = sub_22EF6462C(a1[11], a4);
  if (v14)
    v18 = v15 + 64;
  else
    v18 = 0;
  v19 = sub_22EFC2D88(a1[11], v18, *(_DWORD *)(a3 + 88), *(_DWORD *)(a3 + 88), 0, v17, (uint64_t)v13, 0, 0, 0);
  *(_DWORD *)(v19 + 28) |= 0x200u;
  sub_22EFCCFA0(a1[27], v19);
  v22[0] = v23;
  v23[0] = v19;
  v22[1] = (void *)0x200000001;
  v20 = sub_22EFC3500(a4);
  if ((sub_22EE8B0B0((uint64_t)a1, *(_DWORD *)(v19 + 24), v17) & 1) != 0
    || sub_22EA128A4(a1, a2, a1[27], v20, 3, (uint64_t)v22))
  {
    sub_22EFC77E8(v19, 1);
    sub_22EFC77E8(v15, 1);
  }
  if (v22[0] != v23)
    free(v22[0]);
  sub_22E827F78((uint64_t)&v24);
  return v19;
}

BOOL sub_22F31DB68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 56);
  if ((v2 & 0x100000000) == 0)
  {
    if ((_DWORD)v2 != 200)
    {
      if ((_DWORD)v2 != 300)
        return 0;
      return sub_22F420778(a1, (uint64_t)"__opencl_c_program_scope_global_variables", 41, a2);
    }
    return 1;
  }
  if (*(_DWORD *)(a2 + 64) == 100)
    return 1;
  return sub_22F420778(a1, (uint64_t)"__opencl_c_program_scope_global_variables", 41, a2);
}

BOOL sub_22F31DBB0(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  return !sub_22E54EB3C(*(uint64_t **)v2, (uint64_t *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v2 + 8)));
}

void sub_22F31DBEC(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a2;
  if ((a5 & 1) != 0 && sub_22EA28A28(&v19))
  {
    v9 = v19;
    v15 = v19;
    v16 = a3;
    v17 = a4;
    v18 = a1;
    v20 = v19;
    v10 = sub_22F111C54(&v20);
    sub_22EA46870((uint64_t)&v15, v10, v9);
  }
  if ((a5 & 2) != 0 && sub_22EA1DC20(&v19))
  {
    v11 = v19;
    v15 = v19;
    v16 = a3;
    v17 = a4;
    v18 = a1;
    v12 = sub_22F115260(v19);
    sub_22EA46B5C((uint64_t)&v15, v12, v11);
  }
  if ((a5 & 4) != 0)
  {
    if (sub_22EA25B3C(&v19))
    {
      v13 = v19;
      v15 = v19;
      v16 = a3;
      v17 = a4;
      v18 = a1;
      v20 = v19;
      v14 = sub_22F111B38(&v20);
      sub_22EA46E44((uint64_t)&v15, v14, v13);
    }
  }
}

unint64_t sub_22F31DCF8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t result;

  if (a1 && (*(_WORD *)(a1 + 8) & 0x7Eu) - 54 <= 3 && sub_22EA3D8FC(a1 - 72))
  {
    v2 = *(_QWORD *)(sub_22EFCAD5C(a1) + 16);
    v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 4) != 0)
      v3 = (_QWORD *)*v3;
  }
  else
  {
    v3 = (_QWORD *)a1;
  }
  v4 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)v3) + 16);
  result = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_22F31DD6C(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 88);
  v8 = sub_22EF579A8(v6, a4, a3);
  result = sub_22EFBF080(v6, a2, a3, a3, 0, a4, (uint64_t)v8, 0, 0);
  *(_DWORD *)(result + 28) |= 0x200u;
  return result;
}

uint64_t sub_22F31DDE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = (_QWORD *)sub_22EFC7430(56, a1, a2, 0);
  v13 = 0;
  if (a5)
  {
    sub_22F0F043C(a1, a6);
    v13 = v14;
  }
  result = sub_22EA41AB8((uint64_t)v12, 3, a2, a3);
  *v12 = &off_24FAC5328;
  v12[5] = a4;
  v12[6] = v13;
  return result;
}

_QWORD *sub_22F31DE88(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[100];
  int v12;
  _BYTE v13[96];
  uint64_t v14;

  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 60 >= 7)
      v3 = 0;
    else
      v3 = a2;
    v14 = v3;
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 96);
      *(_DWORD *)(v3 + 96) = v4 | 0x800;
      switch(v4 & 7)
      {
        case 1:
          v12 = 0;
          goto LABEL_16;
        case 2:
          v6 = 1;
          goto LABEL_15;
        case 3:
          v6 = 2;
          goto LABEL_15;
        case 4:
          v6 = 3;
          goto LABEL_15;
        case 5:
          v6 = 4;
LABEL_15:
          v12 = v6;
LABEL_16:
          if ((v4 & 0x18) == 0x10)
            goto LABEL_17;
          goto LABEL_18;
        default:
          if ((v4 & 0x18) != 0x10)
            return result;
LABEL_17:
          v12 = 6;
LABEL_18:
          v7 = *(_QWORD *)(v3 + 56);
          if ((v7 & 4) != 0 && (v10 = v7 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v10 + 16)))
            v8 = **(int ***)(v10 + 24);
          else
            v8 = (int *)(v3 + 64);
          sub_22E8FCA40(result, *v8, 0xDA8u, 0, (uint64_t)v11);
          v9 = sub_22E890024((uint64_t)v11, &v14);
          sub_22E8900C4(v9, &v12);
          v5 = (unsigned int *)v11;
          break;
      }
    }
    else
    {
      sub_22E8FCA40(result, *(_DWORD *)(a2 + 24), 0xDA2u, 0, (uint64_t)v13);
      v5 = (unsigned int *)v13;
    }
    sub_22E903BEC(v5);
    return (_QWORD *)sub_22EFC77E8(a2, 1);
  }
  return result;
}

uint64_t sub_22F31DFC8(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16[3];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  int v46;
  _WORD *v47;
  uint64_t v48;
  _WORD v49[484];
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a5 + 16);
  v16[2] = 0;
  v17 = 0u;
  v18 = v10;
  v30 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  sub_22E8FCD8C(a1[11], a1[10]);
  DWORD2(v23) = a3;
  DWORD1(v24) = a3;
  v16[0] = 135168;
  v36 = v16;
  v37 = 0u;
  v38 = 0u;
  v43 = 0;
  v45 = 0u;
  v44 = 9;
  v46 = 0;
  v47 = v49;
  v48 = 0x800000000;
  v49[480] = 0;
  v50 = 0u;
  v51 = v10;
  v55 = 0;
  v39 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v40 = a4;
  v42 = a3;
  v41 = a3;
  sub_22E82103C((uint64_t)&v50, a5);
  if (*(_DWORD *)(a5 + 4))
    HIDWORD(v43) = *(_DWORD *)(a5 + 4);
  HIDWORD(v31) = a3;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  LODWORD(v31) = 1;
  v35 = 0;
  sub_22F2E2950((uint64_t)&v36, (unint64_t)&v31, a3);
  sub_22E80F94C(&v34);
  v11 = sub_22EA130FC((uint64_t)a1, a2, (uint64_t)&v36);
  v31 = v11;
  *(_DWORD *)(v11 + 96) |= 0x800u;
  sub_22EA2BC1C((uint64_t)a1, v11);
  v12 = sub_22EA2CFC4(a1, a2, v16, (uint64_t *)&v31, 1u);
  if (*(_DWORD *)(a5 + 4))
    v13 = *(_DWORD *)(a5 + 4);
  else
    v13 = a3;
  v14 = sub_22ED2B2F8((uint64_t)a1, v12, a3, v13);
  sub_22E827F78((uint64_t)&v36);
  sub_22E828530((uint64_t)v16);
  return v14;
}

unint64_t sub_22F31E1DC(unint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22E906648(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 32 * v3;
  *(_DWORD *)v4 = *a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

void sub_22F31E224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _WORD *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a3 + 136);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)(a3 + 128);
    do
    {
      v5 = (_WORD *)*v4;
      if ((*(_WORD *)*v4 & 0x100) != 0)
      {
        v6 = *((_QWORD *)v5 + 2);
        if (v6)
        {
          if ((*(_DWORD *)(v6 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(v6 + 97) & 4) == 0)
            *((_QWORD *)v5 + 2) = 0;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_22F31E270(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int16 v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = **a2;
  if ((v2 & 0x6000000000) != 0)
    return 0;
  if (((v2 >> 12) & 0x3F) - 33 > 2)
    return 1;
  v4 = *((_DWORD *)a2 + 30);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = a2[14];
    if (LODWORD(v6[15 * v5]) == 3)
    {
      v7 = &v6[15 * v5];
      v9 = *((_WORD *)v7 + 16);
      v8 = v7 + 4;
      if ((v9 & 0x200) != 0)
      {
        v10 = v8[9];
        if (v10 >= 0x10)
        {
          v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
          v12 = *v11;
          if (*v11 && *(_BYTE *)(v12 + 16) == 57)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13 < 0x10)
              return 1;
            v11 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
          }
          v14 = *v11;
          v16 = 0;
          v15 = sub_22F110500((uint64_t)&v16, v14);
          if (v15 && *(_QWORD *)(v15 + 24) <= 0xFuLL)
            return (*(unsigned __int8 *)(v15 + 17) >> 2) & 1;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_22F31E348(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  result = a2;
  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    v4 = a2;
    if ((v3 & 0x7Eu) - 58 > 0xFFFFFFF9)
      goto LABEL_6;
    if ((v3 & 0x7F) == 0x18)
    {
      v5 = (_QWORD *)(a2 + 56);
      v6 = 0x2000000000;
      goto LABEL_7;
    }
    if ((v3 & 0x7F) == 0x1D)
    {
      v4 = *(_QWORD *)(a2 + 48);
      if (v4)
      {
LABEL_6:
        v5 = (_QWORD *)(v4 + 80);
        v6 = 0x400000000;
LABEL_7:
        *v5 |= v6;
      }
    }
  }
  return result;
}

BOOL sub_22F31E3AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 179)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F31E40C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;

  v3 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v3 <= 0x1F)
  {
    if (v3 == 28)
      return 6;
    if (v3 == 30)
      return 7;
  }
  else
  {
    switch(v3)
    {
      case ' ':
        return 8;
      case '(':
        return 5;
      case ')':
        return 4;
    }
  }
  return ((uint64_t (*)(void))((char *)&loc_22F31E468 + 4 * byte_22F46A0AD[a3]))();
}

void sub_22F31E48C()
{
  JUMPOUT(0x22F31E468);
}

void sub_22F31E49C()
{
  JUMPOUT(0x22F31E468);
}

uint64_t sub_22F31E4A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_22F34BB60(a1, a2, *(_QWORD *)(a3 + 16));
  if ((_DWORD)v5)
    sub_22EC61DA0(a1, *(_QWORD *)(a3 + 8));
  return v5;
}

unint64_t sub_22F31E4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;

  v3 = a2 + 48;
  if (!a2)
    v3 = 0;
  *(_QWORD *)(a1 + 224) = v3;
  result = sub_22EA044C0(a1, *(_QWORD *)(a1 + 216));
  *(_QWORD *)(a1 + 216) = result;
  return result;
}

uint64_t sub_22F31E524(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = a2 + 48;
  if (!a2)
    v2 = 0;
  *(_QWORD *)(result + 216) = v2;
  *(_QWORD *)(result + 224) = 0;
  return result;
}

unint64_t sub_22F31E538@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = *(_QWORD *)(result + 72);
  if ((*(_QWORD *)(v6 + 20) & 0x200200000000000) == 0 || (*(_BYTE *)(v6 + 1) & 1) == 0)
    goto LABEL_7;
  v10 = (_QWORD *)result;
  v11 = sub_22EFCAD5C(*(_QWORD *)(result + 216));
  v12 = sub_22EFB9D84(v11) ? 1 : 2;
  result = sub_22EC65CE0(v10, a2, a3, a4, 0, v12);
  if (!result || (*(_DWORD *)(result + 28) & 0x7F) != 0x43)
    goto LABEL_7;
  v13 = *(_QWORD *)(result + 16);
  v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 4) != 0)
    v14 = (_QWORD *)*v14;
  v15 = v14 ? (unint64_t)(v14 - 8) : 0;
  v16 = 0;
  if (!*(_QWORD *)(v15 + 40) && (result = sub_22EE8B858((uint64_t)v10, v15, &v16, 0), (result & 1) == 0))
  {
    *(_WORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
LABEL_7:
    *(_WORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  return result;
}

unint64_t sub_22F31E638(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v5;

  v5 = sub_22F3ADA6C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a2, a3, a4);
  sub_22EFCCFA0(*(_QWORD *)(a1 + 216), v5);
  return v5;
}

void sub_22F31E688(_QWORD *a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = a2;
  v7 = sub_22EC65CE0(a1, a1[418], a2, a4, 0, 0);
  if (v7)
  {
    v8 = v7;
    v9 = sub_22F3A64F8(a1[11], a3 | ((unint64_t)a3 << 32), 6);
    sub_22EFCA95C(v8, v9);
  }
  else
  {
    v10 = sub_22E901250((uint64_t)(a1 + 402), &v12);
    *(_QWORD *)&v11 = 0;
    DWORD2(v11) = a4;
    sub_22E901410(v10, &v11);
  }
}

BOOL sub_22F31E72C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72);
  return (*(_BYTE *)(v2 + 68) & 0x20) != 0
      && (*(_WORD *)(v2 + 96) & 0x80) == 0
      && sub_22E9FDFC4(a1, a2, 0) == 1;
}

void sub_22F31E768()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F31E77C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7F) == 22;
  return result;
}

__n128 sub_22F31E7A8@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB7898;
  *a2 = v4;
  return result;
}

BOOL sub_22F31E800(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 4)
    return 1;
  v4 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v4 << 16) & 0x780000) != 0)
    v5 = ((*(unsigned __int16 *)(a1 + 28) | (v4 << 16)) >> 19) & 0xF;
  else
    v5 = sub_22F1BFAD0(a1);
  return v5 == 5;
}

BOOL sub_22F31E884(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 6)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  v6 = (~(v5 << 16) & 0x780000) != 0
     ? ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF
     : sub_22F1BFAD0(a1);
  if (v6 == 7)
    return 1;
  v7 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v7 << 16) & 0x780000) != 0)
    v8 = ((*(unsigned __int16 *)(a1 + 28) | (v7 << 16)) >> 19) & 0xF;
  else
    v8 = sub_22F1BFAD0(a1);
  return v8 == 8;
}

uint64_t sub_22F31E938(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 16);
  if (!result || (v1 - 27) <= 0xFFFFFFFD)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
      return 0;
    while (1)
    {
      if (v1 > 0x17u)
      {
        if (v1 == 24)
          goto LABEL_14;
        if (v1 == 37)
          goto LABEL_7;
      }
      else if (v1 == 7 || v1 == 8)
      {
LABEL_7:
        v2 = *(_QWORD *)(result + 32);
        goto LABEL_8;
      }
      if ((v1 & 0xFE) == 0)
      {
LABEL_14:
        v2 = *(_QWORD *)(result + 40);
        goto LABEL_8;
      }
      if (v1 != 28)
      {
        if (v1 - 25 >= 2)
          return 0;
        return result;
      }
      v2 = sub_22F409940(result);
LABEL_8:
      result = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v1) = *(_BYTE *)(result + 16);
    }
  }
  return result;
}

BOOL sub_22F31E9F0(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _BOOL8 result;

  if (*(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72))
    return 0;
  if (*(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73))
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 != *(_QWORD *)(a2 + 32) || v4 && memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), v4))
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != *(_QWORD *)(a2 + 48) || v5 && memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), v5))
    return 0;
  v6 = *(_QWORD *)(a1 + 64);
  if (v6 != *(_QWORD *)(a2 + 64) || v6 && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v6))
    return 0;
  v9 = a1;
  v7 = *(unsigned __int8 **)a1;
  v8 = *(unsigned __int8 **)(v9 + 8);
  v11 = a2;
  v10 = *(unsigned __int8 **)a2;
  if (v8 - v7 != *(_QWORD *)(v11 + 8) - (_QWORD)v10)
    return 0;
  if (v7 == v8)
    return 1;
  do
  {
    result = sub_22E80AB38(v7, v10);
    if (!result)
      break;
    v7 += 24;
    v10 += 24;
  }
  while (v7 != v8);
  return result;
}

void sub_22F31EAF4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F31EB08(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7Eu) - 52 < 6;
  return result;
}

__n128 sub_22F31EB38@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB7948;
  *a2 = v4;
  return result;
}

uint64_t sub_22F31EB90(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22EA44DA8(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F31EBDC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22EA44E1C(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

_QWORD *sub_22F31EC28(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_22F31ECD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22EA461AC((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

unsigned int *sub_22F31ED38(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 v7;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v8);
  v7 = sub_22F111384(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_22E894E38((uint64_t)v8, &v7);
  sub_22E8901B8(v5, &v9);
  return sub_22E903BEC(v8);
}

void sub_22F31EDAC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F31EDC0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E793870((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F31EE54(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F31EE54(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EA46248(a1, v6);
  v8 = 0;
  sub_22E793870((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F31EF00(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E793870((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unsigned int *sub_22F31EFB0(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  int v8;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v8 = **(_DWORD **)(a1 + 16);
  sub_22E8900C4((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F31F024()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F31F038(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F28501C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F31F0E0(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 16) = *(_DWORD *)(a4 + 8);
    *(_QWORD *)(result + 8) = *(_QWORD *)a4;
    *(_DWORD *)(a4 + 8) = 0;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F31F0E0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EA471E4(a1, v6);
  v8 = 0;
  sub_22F28501C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F31F190(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F28501C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
      v10[1] = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F31F254(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, uint64_t *a4, _DWORD *a5)
{
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20[24];

  v10 = sub_22EFFBBCC(a3);
  if (*v10 == 225)
    v11 = v10;
  else
    v11 = 0;
  if (a5)
  {
    v18 = v11;
    sub_22F0D5A50((uint64_t)a3);
    v11 = v18;
    *a5 = v17;
  }
  if (!v11 || (*(_DWORD *)v11 & 0x1C0000) != 0)
  {
    sub_22F0D5A50((uint64_t)a3);
    sub_22E8FCA40(a1, v15, 0xAE5u, 0, (uint64_t)v20);
    v16 = sub_22E8D2984((uint64_t)v20, a2);
    v19 = 2;
    sub_22E8900C4(v16, &v19);
    sub_22E903BEC(v20);
    return 0;
  }
  else
  {
    v12 = (uint64_t)&v11[4 * *((unsigned int *)v11 + 1) + 20];
    v13 = *((_DWORD *)v11 + 4) * ((*(_DWORD *)v11 >> 21) & 7u);
    *a4 = v12;
    a4[1] = v13;
    return 1;
  }
}

void sub_22F31F344(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11[24];
  unsigned int v12[24];

  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_2;
  sub_22EFC8E88(a2);
  v10 = sub_22EAA3280(v9);
  if (!v10)
    goto LABEL_2;
  if (*(_DWORD *)(v10 + 36) != a4)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v10 + 16), 0xF4Eu, 0, (uint64_t)v12);
    sub_22E903BEC(v12);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x176Fu, 0, (uint64_t)v11);
    sub_22E903BEC(v11);
    sub_22EAA31B4(a2);
LABEL_2:
    v7 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    sub_22F3A5E8C(v7, a1[11], a3, a4);
  }
}

void sub_22F31F418(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11[24];
  unsigned int v12[24];

  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_2;
  sub_22EFC8E88(a2);
  v10 = sub_22EAA33AC(v9);
  if (!v10)
    goto LABEL_2;
  if (*(_DWORD *)(v10 + 36) != a4)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v10 + 16), 0xF4Eu, 0, (uint64_t)v12);
    sub_22E903BEC(v12);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x176Fu, 0, (uint64_t)v11);
    sub_22E903BEC(v11);
    sub_22EAA32E0(a2);
LABEL_2:
    v7 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    sub_22F3A44F4(v7, a1[11], a3, a4);
  }
}

uint64_t sub_22F31F4EC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 88) + 15088);
  v3 = *(_DWORD *)(v2 + 68);
  v4 = v3 > 0x21;
  v5 = (1 << v3) & 0x3F0000888;
  v6 = v4 || v5 == 0;
  if (!v6 && (*(_DWORD *)(v2 + 56) & 0xFFFFFFFE) != 0x30)
    return llvm::MCSectionMachO::ParseSectionSpecifier();
  *a2 = 0;
  return result;
}

BOOL sub_22F31F57C(_QWORD *a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t *i;
  uint64_t *v7;
  char v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL8 v13;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  char v33;
  char v34;
  void **v35[12];
  _DWORD *v36;
  uint64_t v37;

  v36 = a3;
  v37 = a4;
  if (llvm::StringRef::find() != -1)
  {
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    LODWORD(v28) = 0;
    sub_22E8900C4((uint64_t)v35, (int *)&v28);
    LODWORD(v25) = 0;
    sub_22E8900C4((uint64_t)v35, (int *)&v25);
    v15 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"fpmath=");
LABEL_29:
    LODWORD(v22) = 0;
    v13 = *(_BYTE *)(sub_22E8900C4(v15, (int *)&v22) + 80) != 0;
    sub_22E903BEC((unsigned int *)v35);
    return v13;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 496))(*(_QWORD *)(a1[11] + 15088)) & 1) == 0
    && llvm::StringRef::find() != -1)
  {
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    LODWORD(v28) = 0;
    sub_22E8900C4((uint64_t)v35, (int *)&v28);
    LODWORD(v25) = 0;
    sub_22E8900C4((uint64_t)v35, (int *)&v25);
    v15 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"tune=");
    goto LABEL_29;
  }
  sub_22E639F38(v36, v37, &v28);
  if (v30
    && ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[11] + 15088) + 480))(*(_QWORD *)(a1[11] + 15088), v29) & 1) == 0)
  {
    v20 = &v29;
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    LODWORD(v25) = 2;
    sub_22E8900C4((uint64_t)v35, (int *)&v25);
    LODWORD(v22) = 1;
LABEL_38:
    sub_22E8900C4((uint64_t)v35, (int *)&v22);
    v17 = sub_22F2F2210((uint64_t)v35, (uint64_t)v20);
    goto LABEL_33;
  }
  if (v31[1]
    && ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1[11] + 15088) + 480))(*(_QWORD *)(a1[11] + 15088), v31[0]) & 1) == 0)
  {
    v20 = v31;
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    LODWORD(v25) = 2;
    sub_22E8900C4((uint64_t)v35, (int *)&v25);
    LODWORD(v22) = 2;
    goto LABEL_38;
  }
  if (v33)
  {
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    LODWORD(v25) = 1;
    sub_22E8900C4((uint64_t)v35, (int *)&v25);
    LODWORD(v22) = 0;
    sub_22E8900C4((uint64_t)v35, (int *)&v22);
    v16 = "arch=";
LABEL_32:
    v17 = sub_22F2F30F4((uint64_t)v35, (uint64_t)v16);
LABEL_33:
    v27 = 0;
    v18 = &v27;
    goto LABEL_34;
  }
  if (v34)
  {
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    LODWORD(v25) = 1;
    sub_22E8900C4((uint64_t)v35, (int *)&v25);
    LODWORD(v22) = 0;
    sub_22E8900C4((uint64_t)v35, (int *)&v22);
    v16 = "tune=";
    goto LABEL_32;
  }
  v7 = (uint64_t *)*((_QWORD *)&v28 + 1);
  for (i = (uint64_t *)v28; i != v7; i += 3)
  {
    v8 = *((_BYTE *)i + 23);
    v9 = v8 < 0;
    v10 = (uint64_t *)*i;
    if (v8 >= 0)
      v10 = i;
    v11 = v8 & 0x7F;
    if (v9)
      v11 = i[1];
    if (v11)
      v12 = (uint64_t *)((char *)v10 + 1);
    else
      v12 = v10;
    v25 = v12;
    v26 = v11 - (v11 != 0);
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 536))(*(_QWORD *)(a1[11] + 15088)))
    {
      sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
      LODWORD(v22) = 0;
      sub_22E8900C4((uint64_t)v35, (int *)&v22);
      v27 = 0;
      sub_22E8900C4((uint64_t)v35, &v27);
      v17 = sub_22F2F2210((uint64_t)v35, (uint64_t)&v25);
      v24 = 0;
      v18 = &v24;
      goto LABEL_34;
    }
  }
  v23 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  if (!v32)
  {
LABEL_25:
    v13 = 0;
    goto LABEL_26;
  }
  if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t **))(**(_QWORD **)(a1[11] + 15088) + 552))(*(_QWORD *)(a1[11] + 15088), v31[2], v32, v29, v30, &v22, &v25) & 1) != 0)
  {
    if (v26)
    {
      sub_22E8FCA40(a1, a2, 0x1BCCu, 0, (uint64_t)v35);
      sub_22F2F2210((uint64_t)v35, (uint64_t)&v25);
      sub_22E903BEC((unsigned int *)v35);
    }
    goto LABEL_25;
  }
  if (v26)
  {
    sub_22E8FCA40(a1, a2, 0xE35u, 0, (uint64_t)v35);
    v19 = sub_22F2F2210((uint64_t)v35, (uint64_t)&v25);
  }
  else
  {
    sub_22E8FCA40(a1, a2, 0x1BCEu, 0, (uint64_t)v35);
    v27 = 0;
    sub_22E8900C4((uint64_t)v35, &v27);
    v24 = 0;
    sub_22E8900C4((uint64_t)v35, &v24);
    v17 = sub_22F2F30F4((uint64_t)v35, (uint64_t)"branch-protection");
    v21 = 0;
    v18 = &v21;
LABEL_34:
    v19 = sub_22E8900C4(v17, v18);
  }
  v13 = *(_BYTE *)(v19 + 80) != 0;
  sub_22E903BEC((unsigned int *)v35);
LABEL_26:
  v35[0] = (void **)&v28;
  sub_22E3B3CC8(v35);
  return v13;
}

void sub_22F31FA2C(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;

  v9 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
  v10 = a3[1];
  *(_OWORD *)v9 = *a3;
  *(_OWORD *)(v9 + 16) = v10;
  v11 = *(unsigned __int8 *)(v9 + 34) >> 5;
  *(_BYTE *)(v9 + 35) = 0;
  *(_QWORD *)(v9 + 40) = a4;
  if (a5)
    v12 = 0x20000;
  else
    v12 = 0;
  *(_WORD *)(v9 + 32) = 98;
  *(_BYTE *)(v9 + 34) = (v12 & 0xFF1FFFFF | ((v11 & 7) << 21)) >> 16;
  sub_22EFCA95C(a2, v9);
}

uint64_t sub_22F31FAB0(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17[24];
  uint64_t v18;
  unsigned int v19[24];
  uint64_t v20;

  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v11 = sub_22EAA340C(v10);
    v20 = v11;
    if (v11)
    {
      v12 = v11;
      v13 = *(unsigned int *)(v11 + 36);
      if ((a5 != v13 || (_DWORD)v13 && memcmp(*(const void **)(v11 + 40), a4, v13))
        && ((*(unsigned __int16 *)(v12 + 32) | (*(unsigned __int8 *)(v12 + 34) << 16)) & 0x40000) == 0)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v12 + 16), 0xB34u, 0, (uint64_t)v19);
        v14 = sub_22E9AEE38((uint64_t)v19, &v20);
        v18 = a3;
        sub_22E9AEE38(v14, &v18);
        sub_22E903BEC(v19);
        sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x1574u, 0, (uint64_t)v17);
        sub_22E903BEC(v17);
      }
      sub_22EA4B01C(a2);
    }
  }
  v15 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
  return sub_22F3A1EC0(v15, a1[11], (_OWORD *)a3, a4, a5);
}

unsigned int *sub_22F31FBD4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13[24];
  _QWORD v14[2];
  unsigned int v15[24];
  uint64_t v16[2];

  v16[1] = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(a2 + 29) & 1) == 0
    || (sub_22EFC8E88(a2), v8 = sub_22EAA346C(*(uint64_t **)v7, *(_DWORD *)(v7 + 8)), (v16[0] = v8) == 0)
    || (v9 = v8, 4 - (unsigned __int16)(*(_WORD *)(v8 + 32) - 73) == a4))
  {
    __asm { BR              X10 }
  }
  sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v15);
  v14[0] = sub_22F40B4AC(a4);
  v14[1] = v10;
  v11 = sub_22F2F2210((uint64_t)v15, (uint64_t)v14);
  sub_22E9AEE38(v11, v16);
  sub_22E903BEC(v15);
  sub_22E8FCA40(a1, *(_DWORD *)(v9 + 16), 0x1574u, 0, (uint64_t)v13);
  return sub_22E903BEC(v13);
}

uint64_t sub_22F3200E0(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16[25];
  unsigned int v17;

  if ((*(_BYTE *)(a2 + 50) & 1) == 0)
  {
    if (sub_22E8D2A78(a2, a1, 1u))
    {
      v17 = 0;
      v6 = *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFFCLL;
      if (sub_22EA4BAD4(a1, a2, v6, &v17, 0xFFFFFFFF, 0))
      {
        v7 = *(unsigned __int8 *)(*(_QWORD *)(a1[11] + 15088) + 144);
        if (*(_BYTE *)(*(_QWORD *)(a1[11] + 15088) + 144))
        {
          v8 = v17;
          *a3 = v17;
          if (v8 <= v7)
            return 0;
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 16), 0xB1Au, 0, (uint64_t)v16);
          v14 = *(unsigned __int8 *)(*(_QWORD *)(a1[11] + 15088) + 144);
          v9 = sub_22E89519C((uint64_t)v16, &v14);
          sub_22F0D4E74(v6);
          v15 = v10;
          v11 = (unsigned int *)v9;
        }
        else
        {
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 16), 0xB1Bu, 0, (uint64_t)v16);
          sub_22F0D4E74(v6);
          v15 = v12;
          v11 = v16;
        }
        sub_22E8906A0((uint64_t)v11, &v15);
        sub_22E903BEC(v16);
      }
    }
    *(_QWORD *)(a2 + 48) |= 0x10000uLL;
  }
  return 1;
}

void sub_22F32021C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[7];

  v5 = a5;
  sub_22F382440((uint64_t)v13, a1[11], a3, a4, a5);
  v10 = sub_22EA4BE8C(a1, a4, v13, 0);
  if (v10)
  {
    v11 = v10;
    if (!v5 || (v5 = sub_22EA4BE8C(a1, v5, v13, 1u)) != 0)
    {
      v12 = sub_22E3CD3D4(a1[11] + 2032, 56, 3);
      sub_22F382440(v12, a1[11], a3, v11, v5);
      sub_22EFCA95C(a2, v12);
    }
  }
}

uint64_t sub_22F3202E0(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  char v5;

  if (result)
  {
    v1 = result;
    v2 = *(_BYTE *)(result + 96) & 7;
    if (v2 == 1)
    {
      return 3;
    }
    else
    {
      if (v2 == 3)
        return 4;
      v3 = sub_22E3CEC2C(result);
      v4 = sub_22E3CB5E0(v1);
      if (v3)
      {
        if (v4)
          return 1;
        v5 = *(_BYTE *)(v1 + 96);
        if (((v5 & 7) == 2 || (*(_BYTE *)(v1 + 96) & 7) == 0 && (v5 & 0x18) == 0x10) && !sub_22EA7EB50(v1))
          return 2;
        return 0;
      }
      if (v4)
        return 0;
      if ((*(_BYTE *)(v1 + 96) & 7) == 2)
        return 5;
      else
        return 6;
    }
  }
  return result;
}

void sub_22F3203A0(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  char v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  const char *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23[24];

  if (!a4)
  {
    v11 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
    v12 = (*(_BYTE *)(v11 + 17) & 4) != 0
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
       || sub_22F115064(v11);
    v13 = 6790;
    if (a5)
    {
      if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
        v13 = 4064;
      else
        v13 = 6790;
    }
    v22 = *(_QWORD *)(a3 + 16);
    v21 = 0;
    if (v12)
    {
      v9 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
      sub_22F392E00(v9, a1[11], a3);
      goto LABEL_17;
    }
    v15 = (*(uint64_t (**)(uint64_t *))(*a2 + 16))(a2);
    sub_22E8FCA40(a1, v15, v13, 0, (uint64_t)v23);
    v16 = sub_22E8906A0((uint64_t)v23, &v22);
    v17 = "ns_consumed";
LABEL_23:
    v20 = sub_22F2F30F4(v16, (uint64_t)v17);
    sub_22E8900C4(v20, &v21);
    sub_22E903BEC(v23);
    return;
  }
  if (a4 == 1)
  {
    v14 = sub_22EA4C294(a2[6]);
    v22 = *(_QWORD *)(a3 + 16);
    v21 = 1;
    if (v14)
    {
      v9 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
      sub_22F380D24(v9, a1[11], a3);
      goto LABEL_17;
    }
    v18 = (*(uint64_t (**)(uint64_t *))(*a2 + 16))(a2);
    sub_22E8FCA40(a1, v18, 0x1A86u, 0, (uint64_t)v23);
    v16 = sub_22E8906A0((uint64_t)v23, &v22);
    v17 = "cf_consumed";
    goto LABEL_23;
  }
  if (a4 != 2)
    return;
  v8 = sub_22EA4C234(a2[6]);
  v22 = *(_QWORD *)(a3 + 16);
  v21 = 1;
  if ((v8 & 1) == 0)
  {
    v19 = (*(uint64_t (**)(uint64_t *))(*a2 + 16))(a2);
    sub_22E8FCA40(a1, v19, 0x1A86u, 0, (uint64_t)v23);
    v16 = sub_22E8906A0((uint64_t)v23, &v22);
    v17 = "os_consumed";
    goto LABEL_23;
  }
  v9 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F396A80(v9, a1[11], a3);
LABEL_17:
  sub_22EFCA95C((uint64_t)a2, v9);
}

uint64_t sub_22F3205EC(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11[24];

  v4 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + 17) & 4) != 0 || sub_22F115120(v4))
    return 0;
  sub_22E8FCA40(a1, a2, 0x1A87u, 0, (uint64_t)v11);
  v7 = sub_22F2F30F4((uint64_t)v11, (uint64_t)"'ns_returns_retained'");
  v10 = 0;
  v8 = sub_22E8900C4(v7, &v10);
  v9 = 0;
  sub_22E8900C4(v8, &v9);
  sub_22E903BEC(v11);
  return 1;
}

uint64_t sub_22F320680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((sub_22EA4D25C(a2, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36)) & 1) != 0)
    return 0;
  v6 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
  return sub_22F37FEC0(v6, *(_QWORD *)(a1 + 88), (_OWORD *)a3, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36));
}

uint64_t sub_22F3206E8(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[96];
  _QWORD v23[2];
  _QWORD v24[2];
  int v25;
  unsigned int v26[24];

  if ((a2[29] & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)a2);
    v9 = *(uint64_t **)v8;
    v10 = *(unsigned int *)(v8 + 8);
    v11 = *(uint64_t **)v8;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      v11 = *(uint64_t **)v8;
      while (*(_WORD *)(*v11 + 32) != 353)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_2;
      }
    }
    if (v11 != &v9[v10])
    {
      do
      {
        v14 = *v9++;
        v13 = v14;
      }
      while (*(_WORD *)(v14 + 32) != 353);
      v15 = *(_DWORD *)(v13 + 36);
      v16 = *(unsigned int *)(a3 + 36);
      if (v15 == (_DWORD)v16 && (!v15 || !memcmp(*(const void **)(v13 + 40), *(const void **)(a3 + 40), v16)))
        return 0;
      sub_22E8FCA40(a1, *(_DWORD *)(v13 + 16), 0x1A52u, 0, (uint64_t)v26);
      v25 = 0;
      v17 = sub_22E8900C4((uint64_t)v26, &v25);
      v18 = *(unsigned int *)(v13 + 36);
      v24[0] = *(_QWORD *)(v13 + 40);
      v24[1] = v18;
      v19 = sub_22F2F2210(v17, (uint64_t)v24);
      v20 = *(unsigned int *)(a3 + 36);
      v23[0] = *(_QWORD *)(a3 + 40);
      v23[1] = v20;
      sub_22F2F2210(v19, (uint64_t)v23);
      sub_22E903BEC(v26);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x176Fu, 0, (uint64_t)v22);
      v6 = (unsigned int *)v22;
LABEL_4:
      sub_22E903BEC(v6);
      return 0;
    }
  }
LABEL_2:
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 72))(a2))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x1A0Au, 0, (uint64_t)v26);
    LODWORD(v24[0]) = 0;
    sub_22E8900C4((uint64_t)v26, (int *)v24);
    v6 = v26;
    goto LABEL_4;
  }
  v21 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
  return sub_22F3A6D04(v21, a1[11], (_OWORD *)a3, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36));
}

uint64_t sub_22F320890(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[96];
  _QWORD v23[2];
  _QWORD v24[2];
  int v25;
  unsigned int v26[24];

  if ((a2[29] & 1) != 0)
  {
    sub_22EFC8E88((uint64_t)a2);
    v9 = *(uint64_t **)v8;
    v10 = *(unsigned int *)(v8 + 8);
    v11 = *(uint64_t **)v8;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      v11 = *(uint64_t **)v8;
      while (*(_WORD *)(*v11 + 32) != 354)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_2;
      }
    }
    if (v11 != &v9[v10])
    {
      do
      {
        v14 = *v9++;
        v13 = v14;
      }
      while (*(_WORD *)(v14 + 32) != 354);
      v15 = *(_DWORD *)(v13 + 36);
      v16 = *(unsigned int *)(a3 + 36);
      if (v15 == (_DWORD)v16 && (!v15 || !memcmp(*(const void **)(v13 + 40), *(const void **)(a3 + 40), v16)))
        return 0;
      sub_22E8FCA40(a1, *(_DWORD *)(v13 + 16), 0x1A52u, 0, (uint64_t)v26);
      v25 = 1;
      v17 = sub_22E8900C4((uint64_t)v26, &v25);
      v18 = *(unsigned int *)(v13 + 36);
      v24[0] = *(_QWORD *)(v13 + 40);
      v24[1] = v18;
      v19 = sub_22F2F2210(v17, (uint64_t)v24);
      v20 = *(unsigned int *)(a3 + 36);
      v23[0] = *(_QWORD *)(a3 + 40);
      v23[1] = v20;
      sub_22F2F2210(v19, (uint64_t)v23);
      sub_22E903BEC(v26);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x176Fu, 0, (uint64_t)v22);
      v6 = (unsigned int *)v22;
LABEL_4:
      sub_22E903BEC(v6);
      return 0;
    }
  }
LABEL_2:
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a2 + 72))(a2))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x1A0Au, 0, (uint64_t)v26);
    LODWORD(v24[0]) = 1;
    sub_22E8900C4((uint64_t)v26, (int *)v24);
    v6 = v26;
    goto LABEL_4;
  }
  v21 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
  return sub_22F3A6FE8(v21, a1[11], (_OWORD *)a3, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36));
}

double sub_22F320A40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  unsigned int v10[24];
  uint64_t v11;

  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v7 = sub_22EAA3154(v6);
    v11 = v7;
    if (v7)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v7 + 16), 0x1875u, 0, (uint64_t)v10);
      sub_22E9AEE38((uint64_t)v10, &v11);
      sub_22E903BEC(v10);
      sub_22EA40A3C(a2);
    }
  }
  if (!sub_22E60FD38(a2))
  {
    v9 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    *(_QWORD *)&result = sub_22F3845E8(v9, a1[11], a3).n128_u64[0];
  }
  return result;
}

uint64_t sub_22F320AF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  unsigned int v21[24];
  _QWORD v22[2];

  v6 = *(const void **)(a3 + 40);
  v7 = *(unsigned int *)(a3 + 36);
  v22[0] = v6;
  v22[1] = v7;
  v8 = sub_22EAA1D18(a2, v6, v7);
  if (v8)
  {
    v12 = v8;
    sub_22E8FCA40(a1, *(_DWORD *)(v8 + 16), 0x12AAu, 0, (uint64_t)v21);
    v13 = *(unsigned int **)(*(_QWORD *)v12 + 16);
    v14 = *v13;
    v20[0] = v13 + 4;
    v20[1] = v14;
    v15 = sub_22F2F2210((uint64_t)v21, (uint64_t)v20);
    v16 = *(unsigned int **)(*(_QWORD *)a3 + 16);
    v17 = *v16;
    v19[0] = v16 + 4;
    v19[1] = v17;
    v18 = sub_22F2F2210(v15, (uint64_t)v19);
    sub_22F2F2210(v18, (uint64_t)v22);
    sub_22E903BEC(v21);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x1574u, 0, (uint64_t)v21);
    sub_22E903BEC(v21);
    sub_22EAA1E74(a2);
    return 0;
  }
  else
  {
    v9 = a1[11];
    v10 = sub_22E3CD3D4(v9 + 2032, 48, 3);
    return sub_22F385754(v10, v9, (_OWORD *)a3, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36));
  }
}

uint64_t sub_22F320BFC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  unsigned int v21[24];
  _QWORD v22[2];

  v6 = *(const void **)(a3 + 40);
  v7 = *(unsigned int *)(a3 + 36);
  v22[0] = v6;
  v22[1] = v7;
  v8 = sub_22EAA1F40(a2, v6, v7);
  if (v8)
  {
    v12 = v8;
    sub_22E8FCA40(a1, *(_DWORD *)(v8 + 16), 0x12AAu, 0, (uint64_t)v21);
    v13 = *(unsigned int **)(*(_QWORD *)v12 + 16);
    v14 = *v13;
    v20[0] = v13 + 4;
    v20[1] = v14;
    v15 = sub_22F2F2210((uint64_t)v21, (uint64_t)v20);
    v16 = *(unsigned int **)(*(_QWORD *)a3 + 16);
    v17 = *v16;
    v19[0] = v16 + 4;
    v19[1] = v17;
    v18 = sub_22F2F2210(v15, (uint64_t)v19);
    sub_22F2F2210(v18, (uint64_t)v22);
    sub_22E903BEC(v21);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0x1574u, 0, (uint64_t)v21);
    sub_22E903BEC(v21);
    sub_22EAA1E74(a2);
    return 0;
  }
  else
  {
    v9 = a1[11];
    v10 = sub_22E3CD3D4(v9 + 2032, 48, 3);
    return sub_22F385B20(v10, v9, (_OWORD *)a3, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 36));
  }
}

uint64_t sub_22F320D00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  int v9;
  uint64_t v11;

  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 > 1)
    return 0;
  v7 = *(_QWORD *)((sub_22F10ACF8(v5) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) == 0)
    return 0;
  v9 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  if (v9 != 13 && v9 != 11)
    return 0;
  v11 = sub_22F10ACF8(*v4);
  return sub_22EA4F714(a1, v11, a3);
}

uint64_t sub_22F320D9C(_QWORD *a1, int *a2, unint64_t a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19[24];

  if (sub_22F10C780(*(_QWORD *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFF0)))
  {
    if (!a3 || sub_22E4752A8(a3))
    {
      v8 = *((_QWORD *)a2 + 6);
      v9 = sub_22EFBAFDC((uint64_t)a2);
      return sub_22EA5357C(a1, v8, v9, a3, a4);
    }
    if (a4)
    {
      v11 = *((_QWORD *)a2 + 7);
      if ((v11 & 4) != 0 && (v15 = v11 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v15 + 16)))
        v12 = **(int ***)(v15 + 24);
      else
        v12 = a2 + 16;
      sub_22E8FCA40(a1, *v12, 0xF17u, 0, (uint64_t)v19);
      v18 = *((_QWORD *)a2 + 6);
      v13 = sub_22E8901B8((uint64_t)v19, &v18);
      v17 = sub_22F3AC79C(a3);
      v14 = sub_22E89519C(v13, &v17);
      v16 = (*(uint64_t (**)(int *))(*(_QWORD *)a2 + 16))(a2);
      sub_22E8906A0(v14, &v16);
      sub_22E903BEC(v19);
    }
  }
  return 0;
}

void sub_22F320EDC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  int *v11;

  if (a5)
  {
    v9 = sub_22EB1A358(a1, a5, 0);
    if ((v9 & 1) != 0)
    {
LABEL_6:
      sub_22EFC77E8(a2, 1);
      return;
    }
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = 0;
  }
  v11 = (int *)sub_22E3CD3D4(a1[11] + 2032, 48, 3);
  sub_22F38E770((uint64_t)v11, a1[11], a3, a4, v10);
  if (sub_22EA596D4(a1, a2, (uint64_t)v11)
    || v10
    && (*(_BYTE *)(v10 + 2) & 1) == 0
    && (sub_22EA59844(a1, v11, (_DWORD *)v10, *(_DWORD *)(a1[8] + 44)) & 1) == 0)
  {
    goto LABEL_6;
  }
  sub_22EFCA95C(a2, (uint64_t)v11);
}

void sub_22F320FC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38A458(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA59CD8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321114(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38A55C(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA59E58(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321264(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38AA7C(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA59FD8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3213B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38AB80(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5A158(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F321504(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B800(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5A2D8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321654(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38BB58(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5A458(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3217A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38BC5C(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5A5D8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3218F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38BD60(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5A758(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321A44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38BE64(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5A8D8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321B94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38C368(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5AA58(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F321C44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38C8A0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5ABD8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321D94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38C9A4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5AD58(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F321EE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38D0EC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5AED8(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F322034(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38D1F0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B044(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322184(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38D764(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B1C4(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3222D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38D9F4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B344(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322424(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38DEAC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B4C4(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322574(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38DFB0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B644(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3226C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38E0B4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B7C4(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322814(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38E464(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5B944(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322964(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38E568(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5BAB8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322AB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38E66C(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5BC38(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F322C04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38E840(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5BDB8(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F322CB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38EA48(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5BF38(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F322D64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38EB4C(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5C0B8(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F322E14(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38EC50(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5C238(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F322EC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38EF5C(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5C3B8(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F322F74(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F470(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5C538(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3230C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F574(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5C6B8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F323214(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F9EC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5C838(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F323364(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38FAF0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5C9B8(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F3234B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38FBF4(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5CB38(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F323564(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390378(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5CCB8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3236B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F39047C(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5CE38(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F323804(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3908F4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5CFB8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F323954(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390BC0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5D138(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F323AA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390CC4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5D2B8(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F323BF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390DC8(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5D438(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F323D44(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390ECC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5D5B8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F323E94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390FD0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5D738(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F323FE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3910D4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5D8B8(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F324134(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3911D8(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5DA38(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F324284(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3912DC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5DBB8(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F3243D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3913E0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5DD38(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F324524(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3914E4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5DEB8(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F324674(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3915E8(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5E038(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F324724(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3916EC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5E1B8(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F324874(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F39197C(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5E338(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F3249C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F391B94(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
  {
LABEL_6:
    sub_22EFC77E8(a2, 1);
    return;
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22EA5E4A4(a1, a2, v6, 1) & 1) != 0)
    {
      sub_22EFCA95C(a2, v6);
      return;
    }
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
  v12 = *(_QWORD *)(v6 + 16);
  v9 = sub_22E8906A0((uint64_t)v13, &v12);
  v10 = sub_22E9AEE38(v9, &v14);
  v11 = 4;
  sub_22E8900C4(v10, &v11);
  sub_22E903BEC(v13);
}

void sub_22F324B14(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F391FF0(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5E624(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F324C64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F391EEC(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5E7A4(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F324DB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F3920F4(v6, a1[11], a3);
  v14 = v7;
  if (sub_22EA59BBC(a1, a2, v6))
    goto LABEL_2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 2 || (*(_BYTE *)(a1[9] + 120) & 8) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (sub_22EA5E924(a1, a2, v6, 1) & 1) == 0)
    {
LABEL_2:
      sub_22EFC77E8(a2, 1);
      return;
    }
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8FCA40(a1, v8, 0x1891u, 0, (uint64_t)v13);
    v12 = *(_QWORD *)(v6 + 16);
    v9 = sub_22E8906A0((uint64_t)v13, &v12);
    v10 = sub_22E9AEE38(v9, &v14);
    v11 = 4;
    sub_22E8900C4(v10, &v11);
    sub_22E903BEC(v13);
  }
}

void sub_22F324F04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38A354(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5EA98(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F324FB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B6FC(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5EC18(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325064(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B388(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5ED98(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325114(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38BF68(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5EF18(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3251C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38ED54(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F098(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325274(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38EE58(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F218(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325324(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F164(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F398(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3253D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F36C(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F518(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325484(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38FCF8(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F698(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325534(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390580(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F818(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3255E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F391C98(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EA5F998(a1, a2, v6, 1) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325694(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD v30[3];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) != 0)
    goto LABEL_21;
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
  sub_22F38A660(v9, a1[11], a3, v8);
  v41 = v10;
  if (sub_22EA5FB18(a1, a2, v9))
    goto LABEL_21;
  v40 = *(_QWORD *)(a2 + 48);
  v11 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v12 + 17) & 4) != 0)
  {
LABEL_19:
    sub_22EFCA95C(a2, v9);
    return;
  }
  if ((sub_22EA5FCC0(v12) & 1) != 0)
  {
    v13 = 384;
  }
  else if ((sub_22EA5FD18(*v11) & 1) != 0)
  {
    v13 = 320;
  }
  else if ((sub_22EA5FD84(*v11) & 1) != 0)
  {
    v13 = 416;
  }
  else
  {
    if ((sub_22EA5FE10(*v11) & 1) == 0
      && (sub_22EA5FE5C(*v11) & 1) == 0
      && (sub_22EA5FEA8(*v11) & 1) == 0
      && !sub_22EA5FEF4(*v11))
    {
      v19 = -1;
      goto LABEL_10;
    }
    v13 = 64;
  }
  v14 = (__int128 *)a1[8];
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = *((_QWORD *)v14 + 6);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v31 = v18;
  v30[2] = v17;
  v30[1] = v16;
  v30[0] = v15;
  v19 = (*(_QWORD *)((char *)v30 + ((v13 >> 3) & 0x3F)) >> (v13 & 7)) | ((unint64_t)(2 * *(_DWORD *)((char *)v30 + ((v13 >> 3) & 0x3F) + 8)) << (v13 & 7 ^ 0x3F));
LABEL_10:
  if ((*(_BYTE *)(v8 + 2) & 1) == 0 && (sub_22EA5FF40(a1, v9, v8, v19) & 1) == 0)
    goto LABEL_21;
  if ((sub_22EA5FCC0(*v11) & 1) != 0
    || (sub_22EA5FD18(*v11) & 1) != 0
    || (sub_22EA5FE10(*v11) & 1) != 0
    || (sub_22EA5FE5C(*v11) & 1) != 0
    || (sub_22EA5FEA8(*v11) & 1) != 0
    || (sub_22EA5FEF4(*v11) & 1) != 0)
  {
    v20 = sub_22EFBAFDC(a2);
    v21 = sub_22E5457C4(*v11);
    v22 = sub_22F10C2A4(v21);
    if ((*(_DWORD *)(v22 + 28) & 0x7Fu) - 35 >= 3)
      v23 = 0;
    else
      v23 = v22;
    v24 = *(_QWORD *)(**(_QWORD **)(v23 + 168) + 8);
    v38 = &unk_24FAB6EF8;
    v39 = 3591;
    if (!sub_22EE8B0B0((uint64_t)a1, v20, v24))
      goto LABEL_19;
LABEL_21:
    sub_22EFC77E8(a2, 1);
    return;
  }
  v25 = *(_QWORD *)(a2 + 56);
  if ((v25 & 4) != 0 && (v29 = v25 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v29 + 16)))
    v26 = **(int ***)(v29 + 24);
  else
    v26 = (int *)(a2 + 64);
  sub_22E8FCA40(a1, *v26, 0xEDDu, 0, (uint64_t)&v38);
  v27 = sub_22E8901B8((uint64_t)&v38, &v40);
  v28 = sub_22E9AEE38(v27, &v41);
  v37 = *(_QWORD *)(v9 + 16);
  sub_22E8906A0(v28, &v37);
  sub_22E903BEC((unsigned int *)&v38);
  sub_22EFC77E8(a2, 1);
}

void sub_22F32598C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19[24];
  uint64_t v20;
  uint64_t v21;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) != 0
    || (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = (int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3),
        sub_22F38A7EC((uint64_t)v9, *(_QWORD *)(a1 + 88), a3, v8),
        v21 = v10,
        sub_22EA604B0((_QWORD *)a1, (uint64_t)a2, (uint64_t)v9))
    || (*(_BYTE *)(v8 + 2) & 1) == 0
    && (sub_22EA59844((_QWORD *)a1, v9, (_DWORD *)v8, **(_DWORD **)(a1 + 64) - 1) & 1) == 0)
  {
    sub_22EFC77E8((uint64_t)a2, 1);
  }
  else
  {
    v20 = a2[6];
    v11 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v11 + 17) & 4) != 0 || (sub_22EA557D8(v11) & 1) != 0)
    {
      sub_22EFCA95C((uint64_t)a2, (uint64_t)v9);
    }
    else if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 125) & 0x20) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, v9[4], 0x1875u, 0, (uint64_t)v19);
      sub_22E9AEE38((uint64_t)v19, &v21);
      sub_22E903BEC(v19);
      v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
      sub_22E8FCA40((_QWORD *)a1, v15, 0x165Fu, 0, (uint64_t)v19);
      v16 = sub_22E8901B8((uint64_t)v19, &v20);
      v17 = sub_22E9AEE38(v16, &v21);
      v18 = *((_QWORD *)v9 + 2);
      sub_22E8906A0(v17, &v18);
      sub_22E903BEC(v19);
    }
    else
    {
      v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
      sub_22E8FCA40((_QWORD *)a1, v12, 0xEDDu, 0, (uint64_t)v19);
      v13 = sub_22E8901B8((uint64_t)v19, &v20);
      v14 = sub_22E9AEE38(v13, &v21);
      v18 = *((_QWORD *)v9 + 2);
      sub_22E8906A0(v14, &v18);
      sub_22E903BEC(v19);
      sub_22EFC77E8((uint64_t)a2, 1);
    }
  }
}

void sub_22F325B94(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) == 0
    && (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3),
        sub_22F38AC84(v9, a1[11], a3, v8),
        !sub_22F325C90(a1, a2, v9))
    && ((*(_BYTE *)(v8 + 2) & 1) != 0 || (sub_22EA5FF40(a1, v9, v8, *(_DWORD *)(a1[8] + 4) - 1) & 1) != 0)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA60614(a1, a2, v9, 1)))
  {
    sub_22EFCA95C(a2, v9);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

BOOL sub_22F325C90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12[24];
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[24];
  uint64_t v16;

  v6 = sub_22F311404(a2);
  if (v6)
  {
    v7 = sub_22EA82D34(a2);
    v16 = v7;
    if (*(unsigned __int16 *)(v7 + 32) != *(unsigned __int16 *)(a3 + 32))
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v15);
      v14 = *(_QWORD *)(a3 + 16);
      v8 = sub_22E8906A0((uint64_t)v15, &v14);
      v13 = a3;
      v9 = sub_22E8FB3C4(v8, &v13);
      sub_22E9AEE38(v9, &v16);
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 16), 0xED2u, 0, (uint64_t)v15);
      v14 = *(_QWORD *)(a3 + 16);
      v11 = sub_22E8906A0((uint64_t)v15, &v14);
      v13 = a3;
      sub_22E8FB3C4(v11, &v13);
    }
    sub_22E903BEC(v15);
    sub_22E8FCA40(a1, *(_DWORD *)(v7 + 16), 0x1574u, 0, (uint64_t)v12);
    sub_22E903BEC(v12);
  }
  return v6;
}

void sub_22F325DA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38A978(v6, a1[11], a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
    || sub_22EA60A64(a1, a2, v6, 1))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325E40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38AF78(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325EEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B07C(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F325F98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B180(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F326044(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B284(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3260F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) == 0
    && (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3),
        sub_22F38B48C(v9, a1[11], a3, v8),
        !sub_22EA59BBC(a1, a2, v9))
    && ((*(_BYTE *)(v8 + 2) & 1) != 0 || (sub_22EA5FF40(a1, v9, v8, *(_DWORD *)(a1[8] + 12) - 1) & 1) != 0)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA60C48(a1, a2, v9, 1)))
  {
    sub_22EFCA95C(a2, v9);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3261EC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;

  v8 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38B904(v8, a1[11], a3, a4);
  if (!sub_22EA59BBC(a1, a2, v8)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA60E20(a1, a2, v8, 1)))
  {
    sub_22EFCA95C(a2, v8);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3262B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38C150(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F32635C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v7 = sub_22EB1A358(a1, a4, 0);
    if ((v7 & 1) != 0)
      goto LABEL_9;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v8 = 0;
  }
  v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
  sub_22F38CE54(v9, a1[11], a3, v8);
  if (!v8 || (*(_BYTE *)(v8 + 2) & 1) != 0 || (sub_22EA5FF40(a1, v9, v8, *(_DWORD *)(a1[8] + 12) - 1) & 1) != 0)
  {
    sub_22EFCA95C(a2, v9);
    return;
  }
LABEL_9:
  sub_22EFC77E8(a2, 1);
}

void sub_22F32642C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38D54C(v6, a1[11], a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
    || sub_22EA62818(a1, a2, v6, 1))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3264C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) == 0
    && (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3),
        sub_22F38D868(v9, a1[11], a3, v8),
        !sub_22EA629E4(a1, a2, v9))
    && ((*(_BYTE *)(v8 + 2) & 1) != 0 || (sub_22EA5FF40(a1, v9, v8, *(_DWORD *)(a1[8] + 52) - 1) & 1) != 0)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA4DA58(a1, a2, 0, v9 & 0xFFFFFFFFFFFFFFF8, 1, 0)))
  {
    sub_22EFCA95C(a2, v9);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3265CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38E944(v6, a1[11], a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
    || (sub_22EA54288(a1, a2, 0, v6, 1) & 1) != 0)
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F32666C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F060(v6, a1[11], a3);
  if (!sub_22F325C90(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA62BF8(a1, a2, v6, 1)))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F32671C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F268(v6, a1[11], a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
    || (sub_22EA62D8C(a1, a2, v6, 1) & 1) != 0)
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3267B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) != 0
    || (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3),
        sub_22F38F678(v9, a1[11], a3, v8),
        sub_22EA62FD8(a1, a2, v9))
    || (*(_BYTE *)(v8 + 2) & 1) == 0 && (sub_22EA5FF40(a1, v9, v8, 0xFFFFFFFF) & 1) == 0)
  {
    sub_22EFC77E8(a2, 1);
  }
  else
  {
    sub_22EFCA95C(a2, v9);
  }
}

void sub_22F326880(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38F8E8(v6, a1[11], a3);
  if (!sub_22EA59BBC(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA631EC(a1, a2, v6, 1)))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F326930(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38FDFC(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F3269DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F38FF00(v6, a1[11], a3);
  if (!sub_22F327768(a1, a2, v6)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || (sub_22EAA37B8(a1, a2, v6) & 1) != 0))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F326A88(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) == 0
    && (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3),
        sub_22F390004(v9, a1[11], a3, v8),
        !sub_22EA63398(a1, a2, v9))
    && ((*(_BYTE *)(v8 + 2) & 1) != 0 || (sub_22EA5FF40(a1, v9, v8, *(_DWORD *)(a1[8] + 40) - 1) & 1) != 0)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA54A84(a1, a2, 0, v9, 1, 0)))
  {
    sub_22EFCA95C(a2, v9);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F326B8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  sub_22F390274(v6, a1[11], a3);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
    || sub_22EA552EC(a1, a2, 0, v6, 1))
  {
    sub_22EFCA95C(a2, v6);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F326C2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = sub_22EB1A358(a1, a4, 0);
  if ((v7 & 1) == 0
    && (v8 = v7 & 0xFFFFFFFFFFFFFFFELL,
        v9 = sub_22E3CD3D4(a1[11] + 2032, 48, 3),
        sub_22F390684(v9, a1[11], a3, v8),
        !sub_22EA63814(a1, a2, v9))
    && ((*(_BYTE *)(v8 + 2) & 1) != 0 || (sub_22EA5FF40(a1, v9, v8, *(_DWORD *)(a1[8] + 48) - 1) & 1) != 0)
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
     || sub_22EA55C38(a1, a2, 0, v9, 1, 0)))
  {
    sub_22EFCA95C(a2, v9);
  }
  else
  {
    sub_22EFC77E8(a2, 1);
  }
}

void sub_22F326D30(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  __int16 v27;
  char v28;

  if (*(_QWORD *)a4)
  {
    v8 = *(_QWORD *)(a3 + 40);
    if ((v8 & 7) != 0)
      v9 = 0;
    else
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = sub_22EA7DE44(a1, a3, *(void **)a4, *(_DWORD *)(a4 + 8));
    v11 = *(_QWORD *)(a1 + 88);
    v12 = *(unsigned int **)(v9 + 16);
    v13 = *v12;
    v14 = *(_DWORD *)(a4 + 8);
    v23 = 0uLL;
    v24 = v14;
    v25 = v14;
    v26 = 0;
    v28 = 120;
    v27 = 0;
    v15 = sub_22F37C430(v11, v12 + 4, v13, &v23);
    sub_22EFCA95C(v10, v15);
    v16 = sub_22F3A64F8(*(_QWORD *)(a1 + 88), *(unsigned int *)(a4 + 8) | ((unint64_t)*(unsigned int *)(a4 + 8) << 32), 6);
    sub_22EFCA95C(v10, v16);
    v17 = *(_DWORD *)(a1 + 3296);
    if (v17 >= *(_DWORD *)(a1 + 3300))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(a1 + 3296);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 3288) + 8 * v17) = v10;
    ++*(_DWORD *)(a1 + 3296);
    v18 = *(_QWORD *)(a1 + 216);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v20 = sub_22E3CD31C((uint64_t *)(v19 + 72), v19);
    if (v20)
      v21 = v20 + 40;
    else
      v21 = 0;
    *(_QWORD *)(a1 + 216) = v21;
    sub_22EFC80B8(v10, v21);
    sub_22EFC80C4(v10, *(_QWORD *)(a1 + 216));
    sub_22EA0483C(a1, v10, a2, 1);
    *(_QWORD *)(a1 + 216) = v18;
  }
  else
  {
    v22 = sub_22F3A64F8(*(_QWORD *)(a1 + 88), *(unsigned int *)(a4 + 8) | ((unint64_t)*(unsigned int *)(a4 + 8) << 32), 6);
    sub_22EFCA95C(a3, v22);
  }
}

uint64_t sub_22F326EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22F246C54((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 80 * *(unsigned int *)(v5 + 8);
}

uint64_t sub_22F326F28(uint64_t a1)
{
  uint64_t HashValue;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
  v3 = (37 * *(char *)(a1 + 16));
  v4 = (v3 | (HashValue << 32)) + ~(v3 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  return ((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27));
}

uint64_t sub_22F326F94(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 12 * v1;
        do
        {
          *v2 = -1;
          v2 = (_QWORD *)((char *)v2 + 12);
          v3 -= 12;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22EA89CA8(result);
    }
  }
  return result;
}

uint64_t sub_22F326FE8(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_DWORD **)result;
        v3 = 24 * v1;
        do
        {
          *v2 = -1;
          v2 += 6;
          v3 -= 24;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22EA89DB8(result);
    }
  }
  return result;
}

_DWORD *sub_22F32703C(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F3270A4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F327190(a1, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_22F3270A4(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_DWORD *)(a1 + 12 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v16 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -2)
          v14 = v10;
        v20 = v9 + v15++;
        v9 = v20 & v8;
        v10 = (_DWORD *)(a1 + 12 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v16 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_11;
      }
      v16 = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    v16 = 0;
  }
LABEL_11:
  *a5 = v10;
  return v16;
}

_DWORD *sub_22F327190(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22EA8A020(a1, v6);
    v9 = 0;
    sub_22F3270A4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
    a3 = v9;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F327248(uint64_t result, int *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v13;
  int *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 12 * v6;
    do
    {
      *v7 = -1;
      v7 = (_QWORD *)((char *)v7 + 12);
      v8 -= 12;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    v10 = a2[1];
    if ((*a2 != -1 || v10 != -1) && (v9 != -2 || v10 != -2))
    {
      v14 = 0;
      result = sub_22F3270A4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *a2;
      v13[1] = a2[1];
      v13[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_22F327314(uint64_t a1, uint64_t a2, int *a3, _OWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_22F3273B0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F32744C(a2, a3, v12);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F3273B0(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_DWORD *sub_22F32744C(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22EA8A0EC(a1, v6);
    v8 = 0;
    sub_22F3273B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F327500(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -1;
      v7 += 6;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_22F3273B0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_DWORD *)a2;
      *(_OWORD *)(v10 + 2) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_DWORD *sub_22F3275B4(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F3273B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F32744C(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = 0;
    *((_BYTE *)v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_22F327624(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1 & 0x3FFFFFFF;
  v3 = *a2 & 0x3FFFFFFF;
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return v3 < v2;
}

BOOL sub_22F327648(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 141)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F3276A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 304)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F327708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 151)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F327768(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15[24];
  uint64_t v16;
  uint64_t v17;
  unsigned int v18[24];
  uint64_t v19;

  result = sub_22F271228(a2);
  if ((_DWORD)result)
  {
    v14 = result;
    v7 = sub_22EA88CB8(a2);
    v8 = a3;
    v9 = v7;
    v19 = v7;
    v10 = v8;
    if (*(unsigned __int16 *)(v7 + 32) != *(unsigned __int16 *)(v8 + 32))
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v8 + 16), 0xB34u, 0, (uint64_t)v18);
      v17 = *(_QWORD *)(v10 + 16);
      v11 = sub_22E8906A0((uint64_t)v18, &v17);
      v16 = v10;
      v12 = sub_22E8FB3C4(v11, &v16);
      sub_22E9AEE38(v12, &v19);
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v8 + 16), 0xED2u, 0, (uint64_t)v18);
      v17 = *(_QWORD *)(v10 + 16);
      v13 = sub_22E8906A0((uint64_t)v18, &v17);
      v16 = v10;
      sub_22E8FB3C4(v13, &v16);
    }
    sub_22E903BEC(v18);
    sub_22E8FCA40(a1, *(_DWORD *)(v9 + 16), 0x1574u, 0, (uint64_t)v15);
    sub_22E903BEC(v15);
    return v14;
  }
  return result;
}

uint64_t sub_22F327884(uint64_t result, uint64_t a2, int a3)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (a2)
  {
    v4 = (int32x2_t *)result;
    v8 = a2;
    sub_22EFC77E8(a2, 1);
    v9 = 0;
    if (sub_22E3B9914((uint64_t)&v4[1061], &v8, &v9))
    {
      *v9 = -8192;
      v4[1062] = vadd_s32(v4[1062], (int32x2_t)0x1FFFFFFFFLL);
    }
    v5 = v8;
    v6 = sub_22E3CD3D4(*(_QWORD *)&v4[11] + 2032, 24, 3);
    v9 = *(_QWORD **)(v8 + 48);
    v7 = sub_22E4D27F8(&v9);
    result = sub_22E5BBE34(v6, a3, v7, 0, 0, 0);
    *(_DWORD *)(v5 + 96) |= 0x600u;
    *(_QWORD *)(v5 + 88) = v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

uint64_t sub_22F327964(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;

  if ((*(_QWORD *)(*(_QWORD *)(result + 72) + 8) & 0x400000000000) == 0)
    return result;
  v5 = result;
  v6 = *(_QWORD *)(a3 + 48);
  v7 = (uint64_t *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v7;
  v9 = *(_DWORD *)(*v7 + 16);
  if (*v7 && (*(_DWORD *)(*v7 + 16) & 0xFE) == 0x28)
    goto LABEL_5;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v8 = sub_22F10CF48(v8);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 16);
LABEL_5:
      if ((v9 & 0x100000) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v8)
          {
            v14 = *(_DWORD *)(v8 + 16);
            if ((v14 & 0xFE) == 0x28)
              continue;
          }
          v8 = sub_22F10CF48(v8);
          v14 = *(_DWORD *)(v8 + 16);
        }
        while ((v14 & 0x100000) != 0);
      }
      v10 = *(_QWORD *)(v8 + 32);
      for (i = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0); ; i = (uint64_t *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0))
      {
        v12 = *i;
        if (!*i || (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) != 0x28))
        {
          v12 = sub_22F10CF48(v12);
          v13 = *(_DWORD *)(v12 + 16);
        }
        if ((v13 & 0x100000) == 0)
          break;
      }
      goto LABEL_25;
    }
    v8 = *v7;
    LOBYTE(v9) = *(_BYTE *)(*v7 + 16);
  }
  v9 = v9;
  if (v9 == 39)
  {
LABEL_22:
    v10 = *(_QWORD *)(v8 + 32);
    v12 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (v12 && *(_BYTE *)(v12 + 16) == 39)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v8 = sub_22F10CF48(v8);
    if (v8)
      goto LABEL_22;
    v8 = *v7;
    v9 = *(unsigned __int8 *)(*v7 + 16);
  }
  if (v9 != 31)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
      goto LABEL_26;
    v8 = sub_22F10CF48(v8);
    if (!v8)
      goto LABEL_26;
  }
  v10 = *(_QWORD *)(v8 + 32);
  v12 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v17 = *(_BYTE *)(v12 + 16) == 31;
  else
    v17 = 0;
  if (!v17)
LABEL_24:
    v12 = sub_22F10CF48(v12);
LABEL_25:
  v6 = *(_QWORD *)(v12 + 32);
  v7 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
LABEL_26:
  result = *v7;
  if (*v7 && *(_BYTE *)(result + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (result = sub_22F10CF48(result)) != 0)
  {
    v15 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (v15)
      v16 = *(_BYTE *)(v15 + 16) == 26;
    else
      v16 = 0;
    if (!v16)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v15 = sub_22F10CF48(v15);
      else
        v15 = 0;
    }
    v18 = *(_DWORD *)(a3 + 24);
    v19 = *v7;
    if (!*v7 || *(_BYTE *)(v19 + 16) != 26)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v19 = sub_22F10CF48(*v7);
      else
        v19 = 0;
    }
    result = sub_22EB15D70(v5, v15, v18, v19, *(_DWORD *)(a2 + 24));
    if ((_DWORD)result)
      return sub_22EFC77E8(a2, 1);
  }
  return result;
}

_QWORD *sub_22F327C10(_QWORD *result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 && a4)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 26 <= 6)
      a2 = *(_QWORD *)(a2 + 48);
    return (_QWORD *)sub_22EAAA8A8(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_22F327C3C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F32A194((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return result;
}

uint64_t sub_22F327CBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char v6;

  if ((a2 & 1) != 0)
    return 1;
  v3 = (unint64_t)sub_22EBBCB14(a1, (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v6);
  v4 = v3;
  if ((v3 & 1) != 0)
    return 1;
  if (sub_22EE67384(a1, v3 & 0xFFFFFFFFFFFFFFFELL, 22))
    return 1;
  return v4;
}

void sub_22F327D30(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 80) & 0xE00000FFFFFFFFFFLL | 0x10000000000;
  v6 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 8, 3);
  *v6 = a3;
  *(_QWORD *)(a2 + 160) = v6;
  v7 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  if (v8)
    v9 = (uint64_t)(v8 - 8);
  else
    v9 = 0;
  v10 = sub_22EC66CD8(a1, v9);
  if (v10)
  {
    v11 = v10;
    v12 = sub_22EFD7AE4(a3);
    sub_22EB4E494(a1, v12, v11, 1);
    v14 = sub_22EFD7AE4(a3);
    sub_22EB17F48(a1, v11, &v14, 1, 0, 0, 0, 0);
  }
  v13 = *(_DWORD *)(a1 + 2976);
  if (v13 >= *(_DWORD *)(a1 + 2980))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 2976);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 2968) + 8 * v13) = a2;
  ++*(_DWORD *)(a1 + 2976);
  sub_22EAAF8FC(a1, a2);
}

void **sub_22F327E60(void **result, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19[24];
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (uint64_t)result;
  v4 = result[336];
  if (!v4)
    goto LABEL_24;
  result = sub_22E3BA914((llvm::SmallPtrSetImplBase *)result[336], a2);
  v5 = v4[1];
  v6 = 16;
  if (v5 == *v4)
    v6 = 20;
  if (result == (void **)(v5 + 8 * *(unsigned int *)((char *)v4 + v6)))
  {
LABEL_24:
    if (*(_DWORD *)(*(_QWORD *)(v3 + 104) + 180))
    {
      v7 = (uint64_t *)(v3 + 2688);
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      sub_22F3AB750((uint64_t)a2, (uint64_t)v25);
      v20 = v24;
      v21 = v24;
      v22 = 8;
      v23 = 0;
      v8 = v27;
      v9 = v28;
      while (v8 != v9)
      {
        v10 = *(_QWORD *)(v8 + 32);
        v11 = *(_QWORD *)(v8 + 40);
        while (v10 != v11)
        {
          if (*(_DWORD *)(v10 + 16) == 1)
          {
            v12 = **(_BYTE ***)(v10 + 8);
            if ((v12[82] & 8) != 0)
            {
              sub_22E3BA850((uint64_t)&v20, v12);
              if (v13)
              {
                sub_22E8FCA40((_QWORD *)v3, *(_DWORD *)(**(_QWORD **)(v10 + 8) + 24), 0x17A3u, 0, (uint64_t)v19);
                v18 = *(_QWORD *)(**(_QWORD **)(v10 + 8) + 40);
                v14 = sub_22E894538((uint64_t)v19, &v18);
                v17 = *((_QWORD *)a2 + 5);
                sub_22E894538(v14, &v17);
                sub_22E903BEC(v19);
              }
            }
          }
          v10 += 120;
        }
        v8 += 56;
      }
      v15 = *v7;
      if (!*v7)
      {
        v16 = operator new();
        *(_QWORD *)v16 = v16 + 32;
        *(_QWORD *)(v16 + 8) = v16 + 32;
        *(_QWORD *)(v16 + 16) = 8;
        *(_DWORD *)(v16 + 24) = 0;
        sub_22E9078BC((void ***)(v3 + 2688), (void **)v16);
        v15 = *v7;
      }
      sub_22E3BA850(v15, a2);
      if (v21 != v20)
        free(v21);
      return (void **)sub_22F31EB90((uint64_t)v25);
    }
  }
  return result;
}

uint64_t sub_22F328034(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (_QWORD *)v2[4];
  if (!v2)
    v2 = (_QWORD *)(a1 + 48);
  result = *(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v4 = *(_BYTE *)(result + 16) == 26;
  else
    v4 = 0;
  if (v4)
    return (*(_QWORD *)(result + 16) >> 54) & 0xFLL;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
    return (*(_QWORD *)(result + 16) >> 54) & 0xFLL;
  return result;
}

int32x2_t *sub_22F3280AC(int32x2_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v9 = 12;
  v10 = 0;
  v11 = HIDWORD(v6);
  v13 = 0;
  v14 = 0;
  v12 = a3;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_22EE012D0((uint64_t)a1, (unint64_t)&v9);
  v7 = sub_22EE43D40((uint64_t)a1, a2, a3);
  if (v7)
    *(_DWORD *)(v7 + 28) |= 0x200u;
  return sub_22EE013E8(a1);
}

void sub_22F328148(uint64_t a1, unint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  void *v9;
  _QWORD v10[18];

  v10[17] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EAB3978(a1, a2);
  if (v4 == 6)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)(v6 + 8);
    if (v6)
      v7 = v6 - 64;
    else
      v7 = 0;
    sub_22EABA1C4((uint64_t)v8, a1, v7, a2, SHIBYTE(v4), 1);
    sub_22EABA238((uint64_t)v8);
    if (v9 != v10)
      free(v9);
  }
  else
  {
    sub_22EAB8670(a1, a2, v4, 0, 1);
  }
}

uint64_t sub_22F328244(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;

  v6 = sub_22EF6477C(*(_QWORD *)(a1 + 88), a2);
  return sub_22EABB400(a1, *(unsigned int *)(a2 + 24), v6, (a3 & 0xFFFFFFFD) == 1, 0, 0, 0, 0, a3);
}

uint64_t sub_22F3282C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 26 <= 6)
      a3 = *(_QWORD *)(a3 + 48);
    v3 = a3 + 64;
    if (!a3)
      v3 = 0;
    *(_QWORD *)(result + 216) = v3;
    *(_QWORD *)(a2 + 360) = v3;
  }
  return result;
}

unint64_t sub_22F3282F8(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3)
  {
    v3 = result;
    result = sub_22EA044C0(result, *(_QWORD *)(result + 216));
    *(_QWORD *)(v3 + 216) = result;
  }
  return result;
}

uint64_t sub_22F328324(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F32A858(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 < *(_QWORD *)(a1 + 40))
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    else
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (((unint64_t)v6 - v7) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v11 + 8);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 16 * v8 + 8;
}

uint64_t sub_22F3283DC(_QWORD *a1)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a1[423])
  {
    v3 = a1[419];
    if ((v3 & 1) != 0)
    {
      v3 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v3 >> 1);
      a1[419] = v3;
    }
    if (v3)
    {
      v4 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "experimental", 0xCuLL);
      sub_22E8BAEE4((uint64_t)&v8, (uint64_t)a1, v4, 0, 7, 0);
      if (sub_22EC611AC(a1, &v8, v3 + 48, 0))
      {
        if (v8 == 2)
        {
          v5 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
          v6 = *(_DWORD *)(v5 + 28);
          if ((v6 & 0x7Fu) <= 0x2F && ((1 << (v6 & 0x7F)) & 0xC00000060000) != 0)
          {
            v5 = sub_22EFBAEA4(v5);
            v6 = *(_DWORD *)(v5 + 28);
          }
          if ((v6 & 0x7F) == 0x10)
          {
            a1[423] = v5;
LABEL_17:
            sub_22E8BAFF0((uint64_t)&v8);
            return a1[423];
          }
        }
        a1[423] = 0;
      }
      v10 = 0;
      goto LABEL_17;
    }
  }
  return a1[423];
}

unint64_t sub_22F32851C(_QWORD *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  _BYTE *v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  _BYTE v26[96];
  _BYTE v27[96];
  _BYTE v28[96];
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[256];
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a1[424])
  {
    v14 = a1[419];
    if ((v14 & 1) != 0)
    {
      v14 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v14 >> 1);
      a1[419] = v14;
    }
    if (v14)
    {
      v15 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "initializer_list", 0x10uLL);
      sub_22E8BAEE4((uint64_t)&v32, (uint64_t)a1, v15, a3, 0, 0);
      if ((sub_22EC611AC(a1, &v32, v14 + 48, 0) & 1) != 0)
      {
        v16 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFCLL;
        if ((_DWORD)v32 == 2
          && ((v17 = *(_DWORD *)(v16 + 28), (v17 & 0x7Fu) <= 0x2F)
            ? (v18 = ((1 << (v17 & 0x7F)) & 0xC00000060000) == 0)
            : (v18 = 1),
              v18
            ? (v19 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFCLL)
            : (v19 = sub_22EFBAEA4(*(_QWORD *)v33 & 0xFFFFFFFFFFFFFFFCLL), v17 = *(_DWORD *)(v19 + 28)),
              (v17 & 0x7F) == 0x1C))
        {
          v20 = *(_QWORD *)(v19 + 56);
          if (sub_22EFE8FBC(v20) == 1 && (*(_DWORD *)(*(_QWORD *)(v20 + 16) + 28) & 0x7F) == 0x26)
          {
            sub_22E8BAFF0((uint64_t)&v32);
            a1[424] = v19;
            goto LABEL_2;
          }
          v24 = *(_DWORD *)(v19 + 24);
          v21 = (unsigned int *)v26;
          v22 = v26;
        }
        else
        {
          v34[147] = 0;
          v24 = *(_DWORD *)(v16 + 24);
          v21 = (unsigned int *)v27;
          v22 = v27;
        }
        v23 = a1;
        v25 = 3754;
      }
      else
      {
        v21 = (unsigned int *)v28;
        v22 = v28;
        v23 = a1;
        v24 = a3;
        v25 = 3572;
      }
      sub_22E8FCA40(v23, v24, v25, 0, (uint64_t)v22);
      sub_22E903BEC(v21);
      sub_22E8BAFF0((uint64_t)&v32);
    }
    else
    {
      sub_22E8FCA40(a1, a3, 0xDF4u, 0, (uint64_t)&v29);
      sub_22E903BEC(&v29);
    }
    v12 = 0;
    a1[424] = 0;
    return v12;
  }
LABEL_2:
  v32 = v34;
  v33 = 0x800000000;
  v35 = a3;
  v36 = a3;
  v7 = (unint64_t)sub_22EF579A8(a1[11], a2, a3);
  v29 = 1;
  v30 = a2;
  v31 = v7 & 0xFFFFFFFFFFFFFFFCLL | 2;
  v8 = (_OWORD *)sub_22E78DF7C((uint64_t)&v32, (unint64_t)&v29, 1);
  v9 = (char *)v32 + 32 * v33;
  v10 = v8[1];
  *v9 = *v8;
  v9[1] = v10;
  LODWORD(v33) = v33 + 1;
  v11 = sub_22ED60904(a1, a1[424] & 0xFFFFFFFFFFFFFFF9, a3, (uint64_t)&v32);
  v12 = v11 & 7 | *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  if (v32 != v34)
    free(v32);
  return v12;
}

uint64_t sub_22F3287E4(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  int v17;
  _DWORD *v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unsigned int v45[24];
  unsigned int v46[24];
  unsigned int v47[25];
  int i;
  int v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v12 = a2;
  v55 = *MEMORY[0x24BDAC8D0];
  for (i = a6; (*(_BYTE *)(v12 + 8) & 0x80) != 0; v12 = *(_QWORD *)v12)
    ;
  v14 = a5 + 1;
  v15 = a5[1];
  sub_22E8BAEE4((uint64_t)&v49, (uint64_t)a1, a7, a6, 7, 0);
  sub_22EC64BE8((uint64_t)a1, (uint64_t)&v49, v12, (uint64_t)a5, 0, 0);
  v17 = v49;
  if (v49 != 5)
  {
    if (!v51)
    {
      v49 = 0;
      v51 = 0;
      if (v52)
      {
        v26 = sub_22EC6CBD0(v52);
        MEMORY[0x2348A0E9C](v26, 0x10E0C409F09D3C3);
      }
      v54 = 0;
      v52 = 0;
      v53 = 0;
      if ((!v15 || sub_22F0AAB60(v15) == 5)
        && (v27 = *(_QWORD *)(a7 + 16), *(_DWORD *)v27 == 3)
        && ((v28 = *(unsigned __int16 *)(v27 + 16), v29 = *(unsigned __int8 *)(v27 + 18), v28 == 29811)
          ? (v30 = v29 == 100)
          : (v30 = 0),
            v30))
      {
        sub_22E8FCA40(a1, a6, 0x1517u, 0, (uint64_t)v47);
        sub_22E903BEC(v47);
        v42 = sub_22EAC20DC(a1);
        sub_22E8BB8FC((uint64_t)&v49, v42);
        sub_22EC561E4((uint64_t)&v49);
      }
      else
      {
        sub_22EAC24EC((uint64_t)a1, (uint64_t)&v49, (uint64_t *)v12, a5, a7);
      }
      if (!v51)
      {
        sub_22E8FCA40(a1, a6, 0x13u, 0, (uint64_t)v45);
        v44 = *a5;
        sub_22E8906A0((uint64_t)v45, &v44);
        sub_22E903BEC(v45);
        v25 = 0;
LABEL_51:
        sub_22E9114FC(a1, v25);
        goto LABEL_52;
      }
      v17 = v49;
    }
    v18 = (_DWORD *)(*v50 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17 == 2)
    {
      v19 = v18[7] & 0x7F;
      v20 = v19 > 0x2F || ((1 << v19) & 0xC00000060000) == 0;
      v21 = *v50 & 0xFFFFFFFFFFFFFFFCLL;
      if (!v20)
      {
        v21 = sub_22EFBAEA4(*v50 & 0xFFFFFFFFFFFFFFFCLL);
        v19 = *(_DWORD *)(v21 + 28) & 0x7F;
      }
      if (v19 == 16)
        v22 = v21;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
    sub_22EB17F48((uint64_t)a1, v18, (unsigned int *)&i, 1, 0, 0, 0, 0);
    if (v22)
    {
      v23 = (_QWORD *)(v22 + 48);
      do
      {
        if ((sub_22EFCBE78((unint64_t)v23, a1[27]) & 1) != 0)
          break;
        v24 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)v23) + 16);
        v23 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
        if ((v24 & 4) != 0)
          v23 = (_QWORD *)*v23;
      }
      while (v23);
    }
    else
    {
      v23 = 0;
    }
    v31 = (unint64_t)(a1 + 27);
    v32 = a1[27];
    v33 = a1[11];
    if (*v14)
    {
      v34 = sub_22F0ABC50(v14, a1[11]);
      v35 = v41;
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    v25 = sub_22EFD8AC4(v33, v32, a3, a4, v34, v35, i, (unint64_t)v18, (uint64_t)v23);
LABEL_40:
    v31 = *(_QWORD *)v31;
    while (1)
    {
      v36 = *(_WORD *)(v31 + 8) & 0x7F;
      if (v36 != 12)
        break;
      v37 = *(_QWORD *)(v31 - 24);
      v31 = v37 & 0xFFFFFFFFFFFFFFF8;
      if ((v37 & 4) != 0)
        goto LABEL_40;
    }
    if (v36 == 83)
    {
      v38 = (_QWORD *)a1[14];
      v39 = i;
      if (i < 0)
        v39 = sub_22F1E22F0((_QWORD *)a1[14], i);
      if ((sub_22F1E3734(v38, v39) & 1) == 0)
      {
        sub_22E8FCA40(a1, i, 0x1BEDu, 0, (uint64_t)v46);
        sub_22E903BEC(v46);
      }
    }
    sub_22F328BD8(v12, v25);
    if (v25)
      sub_22EA63DD8(a1, v12, v25, a8, 1);
    goto LABEL_51;
  }
  v25 = 0;
LABEL_52:
  sub_22E8BAFF0((uint64_t)&v49);
  return v25;
}

uint64_t sub_22F328BD8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 360);
  if (v2)
  {
    v3 = *(_WORD *)(v2 + 8) & 0x7F;
    v4 = v3 > 0x18 || ((1 << v3) & 0x1000006) == 0;
    if (v4 && v3 - 52 >= 6)
      return sub_22EFCCFA0(*(_QWORD *)(result + 360), a2);
  }
  v7 = result;
  v5 = *(_DWORD *)(result + 376);
  if (v5 >= *(_DWORD *)(result + 380))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v7 + 376);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 368) + 8 * v5) = a2;
  ++*(_DWORD *)(v7 + 376);
  return result;
}

uint64_t sub_22F328C90(unint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 56);
    a1[1] = v3;
    v4 = sub_22E3CD31C((uint64_t *)(v3 + 48), v3);
    *a1 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    *((_DWORD *)a1 - 5) |= *(_DWORD *)(v4 + 28) & 0x260000;
    v5 = (unint64_t *)a1[1];
  }
  else
  {
    v5 = a1 - 6;
    a1[1] = (unint64_t)(a1 - 6);
  }
  return sub_22E7B7A74((uint64_t)(v5 + 6), (uint64_t)(a1 - 6));
}

void sub_22F328CF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)(a3 + 16))
  {
    v6 = 0;
    v7 = *(uint64_t **)(a3 + 8);
    v8 = a1 + 3320;
    while (2)
    {
      v9 = *v7;
      while (1)
      {
        v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        if (sub_22E8CE620(v8, (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL), *(_QWORD *)(a1 + 216), a2, 0))
        {
          v11 = *(_WORD *)(*(_QWORD *)(a1 + 216) + 8) & 0x7F;
          if (v11 <= 0x18 && ((1 << v11) & 0x1000006) != 0)
            break;
          if (v11 - 52 < 6)
            break;
          v13 = *(_DWORD *)(v10 + 28);
          if ((v13 & 0x8000000) == 0 || (v13 & 0x200000) != 0)
            break;
        }
        v14 = *(_QWORD *)(a3 + 8);
        v15 = *(unsigned int *)(a3 + 16);
        v9 = *(_QWORD *)(v14 + 8 * v15 - 8);
        LODWORD(v15) = v15 - 1;
        *(_DWORD *)(a3 + 16) = v15;
        *v7 = v9;
        v6 = 1;
        if (v7 == (uint64_t *)(v14 + 8 * v15))
          goto LABEL_17;
      }
      if (++v7 != (uint64_t *)(*(_QWORD *)(a3 + 8) + 8 * *(unsigned int *)(a3 + 16)))
        continue;
      break;
    }
    if (v6)
LABEL_17:
      sub_22EA3DA00(a3);
  }
}

uint64_t sub_22F328E20(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23[25];
  char v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a2 + 64);
  if ((*(_BYTE *)(v4 + 8) & 4) != 0)
    v5 = *(_QWORD *)(v4 + 16) & 0xFFFFFFFFFFFFFFF0;
  else
    v5 = 0;
  v6 = a1[27];
  if (v6)
    v7 = v6 - 64;
  else
    v7 = 0;
  v25 = v7;
  v24 = 0;
  v8 = sub_22EAC5B18(v7, v5, &v24);
  if (v8)
    v9 = 0;
  else
    v9 = v24 == 0;
  v10 = v9;
  if (v9)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 56), 0x13E6u, 0, (uint64_t)v23);
    v11 = *(unsigned int *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 40);
    v20 = v11;
    v21 = v12;
    sub_22EFC70E8(&v19);
    if (v13)
      v14 = v13;
    else
      v14 = v11;
    v22 = v11 | (v14 << 32);
    v15 = sub_22E8906A0((uint64_t)v23, &v22);
    v18 = v5;
    v16 = sub_22E8901B8(v15, (uint64_t *)&v18);
    sub_22E890024(v16, &v25);
    sub_22E903BEC(v23);
    sub_22EFC77E8(a2, 1);
  }
  else if (v8)
  {
    *(_BYTE *)(v8 + 12) |= 0x10u;
  }
  return v10;
}

unint64_t sub_22F328F38(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v6;

  v6 = sub_22F3B2BF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a2, a3, a4);
  *(_DWORD *)(v6 + 28) = *(_DWORD *)(v6 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
  sub_22EFCCFA0(*(_QWORD *)(a1 + 216), v6);
  return v6;
}

uint64_t sub_22F328FA0(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  if (*(_DWORD *)a1 != 2)
    return 0;
  result = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v2 = *(_DWORD *)(result + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v2 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v2 != 67)
    return 0;
  return result;
}

uint64_t sub_22F329008(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  if (*(_DWORD *)a1 != 2)
    return 0;
  result = **(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v2 = *(_DWORD *)(result + 28) & 0x7F;
  if (v2 <= 0x2F && ((1 << v2) & 0xC00000060000) != 0)
  {
    result = sub_22EFBAEA4(result);
    v2 = *(_DWORD *)(result + 28) & 0x7F;
  }
  if (v2 - 60 >= 7)
    return 0;
  return result;
}

uint64_t sub_22F329074(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;

  v12 = 1;
  v11 = 0;
  v13 = 0;
  v3 = sub_22ED02FD4(a1, *a2 & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400), &v11, 4);
  v4 = v3;
  *a2 = *a2 & 3 | v3 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 < 2 || (*(_BYTE *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) != 0)
  {
    v7 = 0;
    v8 = v3 & 0xFFFFFFFFFFFFFFFCLL | 2;
    v5 = v12;
  }
  else
  {
    v5 = v12;
    if (v12 > 0x40)
      v6 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v11) == v5;
    else
      v6 = v11 == 0;
    v10 = v6;
    v8 = v4 & 0xFFFFFFFFFFFFFFFCLL | v10 ^ 1u;
    v7 = 1;
  }
  *a2 = v8;
  if (v5 >= 0x41 && v11)
    MEMORY[0x2348A0E84](v11, 0x1000C8000313F17);
  return v7;
}

uint64_t sub_22F32916C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[16];
  llvm *v7;
  unsigned int v8;

  if ((*(_BYTE *)(a2 + 87) & 0x20) != 0)
    v4 = *(_QWORD *)(a2 + 168);
  else
    v4 = 0;
  sub_22EAE797C((uint64_t)v6, a1, *(_DWORD *)(a2 + 24), v4);
  sub_22EAB8670(a1, a2, 0, v6, 1);
  return llvm::deallocate_buffer(v7, (void *)(16 * v8));
}

uint64_t sub_22F3291E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  __int128 v6;
  int v7;
  uint64_t v8;

  result = sub_22EFC7ADC(a2 + 72);
  if ((result & 1) == 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v5 = *(_BYTE *)(result + 16) == 26;
    else
      v5 = 0;
    if (!v5)
      result = sub_22F10CF48(result);
    if ((*(_WORD *)(result + 22) & 0x3C0) == 0)
    {
      sub_22E4913B4(result, (uint64_t)&v6);
      v7 = 9;
      v8 = a2;
      result = sub_22EF63D8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 0, 0, &v6, 0);
      *(_QWORD *)(a2 + 48) = result;
    }
  }
  return result;
}

uint64_t sub_22F32927C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v16;
  _BYTE v17[96];
  _BYTE v18[96];
  _BYTE v19[56];

  if (a3)
    v6 = a3 + 72;
  else
    v6 = 0;
  sub_22EAE5FA8((uint64_t)v19, a1, v6);
  v7 = sub_22EBBC0DC((_QWORD *)a1, a2);
  v8 = sub_22EB2EA08(a1, a2, 5, (unint64_t)v7 & 0xFFFFFFFFFFFFFFFELL);
  v9 = sub_22F337270(a1, a2, *(_DWORD *)(a3 + 24), a3, v8 & 0xFFFFFFFFFFFFFFFELL);
  if ((v9 & 1) == 0 && (*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
    v9 = (uint64_t)sub_22EFFB64C(*(_QWORD *)(a1 + 88), *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8), 63, v9 & 0xFFFFFFFFFFFFFFFELL, 0, 0, 0);
  if ((v9 & 1) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1641u, 0, (uint64_t)v18);
    v14 = (unsigned int *)v18;
LABEL_12:
    sub_22E903BEC(v14);
    sub_22EFC77E8(a3, 1);
    return sub_22EAE7390((uint64_t)v19);
  }
  v10 = sub_22ED358AC(a1, *(_DWORD *)(a3 + 24), v9 & 0xFFFFFFFFFFFFFFFELL, 0);
  if ((v10 & 1) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1641u, 0, (uint64_t)v17);
    v14 = (unsigned int *)v17;
    goto LABEL_12;
  }
  v16 = v10 & 0xFFFFFFFFFFFFFFFELL;
  v11 = sub_22F0D6620(*(_QWORD *)(a1 + 88), &v16, 1, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 24));
  *(_QWORD *)(a3 + 80) &= ~0x8000000uLL;
  *(_QWORD *)(a3 + 128) = v11;
  sub_22F0D60E4((uint64_t)v11);
  *(_DWORD *)(a3 + 140) = v12;
  sub_22EFC9100(a3, *(_QWORD *)(a1 + 88));
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 136))(*(_QWORD *)(a1 + 96));
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, a3);
  return sub_22EAE7390((uint64_t)v19);
}

unint64_t sub_22F32941C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5)
{
  _WORD *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36[24];

  if ((*a4 & 0x1C0000) != 0)
  {
    v20 = (uint64_t)a4;
    sub_22EFF605C((uint64_t)a4);
    v22 = v21;
    v23 = (_QWORD *)a1;
    v24 = 3720;
LABEL_17:
    sub_22E8FCA40(v23, v22, v24, 0, (uint64_t)v36);
    sub_22F0D4E74(v20);
    v35 = v27;
    sub_22E8906A0((uint64_t)v36, &v35);
    sub_22E903BEC(v36);
    return 0;
  }
  v9 = &a4[a4[1] + 5];
  v10 = a4[4] * ((*a4 >> 21) & 7);
  if (v10 != 1)
  {
    if (v10 == 3 && *v9 == 11075 && BYTE2(a4[a4[1] + 5]) == 43)
    {
      v11 = 2;
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  if (*(_BYTE *)v9 != 67)
  {
LABEL_16:
    v20 = (uint64_t)a4;
    sub_22EFF605C((uint64_t)a4);
    v22 = v26;
    v23 = (_QWORD *)a1;
    v24 = 3721;
    goto LABEL_17;
  }
  v11 = 1;
LABEL_5:
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 216);
  sub_22EFF605C((uint64_t)a4);
  v14 = a5 != 0;
  v15 = a3;
  v17 = sub_22EFD899C(v12, v13, a3, v16, v11, v14);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x800000000000) != 0)
  {
    v28 = *(_DWORD *)(a1 + 8992);
    if (v28)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v28 - 48);
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 28);
        v31 = v30 > 6;
        v32 = (1 << v30) & 0x5A;
        if (!v31 && v32 != 0)
        {
          v34 = sub_22F33A8C4(a1, v15, 1);
          *(_QWORD *)(v17 + 8) |= 6uLL;
          *(_QWORD *)(v17 - 8) = v34;
        }
      }
    }
  }
  sub_22EFCCFA0(*(_QWORD *)(a1 + 216), v17);
  v18 = v17 + 40;
  if (!v17)
    v18 = 0;
  *(_QWORD *)(a1 + 216) = v18;
  *(_QWORD *)(a2 + 360) = v18;
  return v17;
}

uint64_t sub_22F329600(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7;
  uint64_t v8;

  if (a4)
  {
    *(_DWORD *)(a3 + 76) = a4;
    *(_DWORD *)(a3 + 48) |= 0x10000u;
  }
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x800000000000) != 0)
  {
    v7 = *(_DWORD *)(a1 + 8992);
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v7 - 48);
      if (v8)
      {
        if (*(_DWORD *)(v8 + 28) == 5 && *(_QWORD *)(v8 + 32))
          sub_22F33AFA0(a1);
      }
    }
  }
  *(_QWORD *)(a1 + 216) = sub_22EA044C0(a1, *(_QWORD *)(a1 + 216));
  return a3;
}

_QWORD *sub_22F32968C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;

  v7 = sub_22F3ADB34(a1[11], a1[27], a4);
  sub_22EA63DD8(a1, a2, (uint64_t)v7, a3, 1);
  sub_22EFCCFA0(a1[27], (unint64_t)v7);
  return v7;
}

unint64_t sub_22F3296F4(uint64_t a1, unsigned int a2, unsigned __int8 *a3, _DWORD *a4, int a5)
{
  if ((sub_22EE67384(a1, (unint64_t)a3, 5) & 1) != 0)
    return 0;
  else
    return sub_22EACEDFC(a1, a2, a3, a4, a5, 0);
}

unint64_t sub_22F329770(_QWORD *a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v23;
  unsigned int v24[24];
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v11 = a2;
  v45 = *MEMORY[0x24BDAC8D0];
  v13 = *((_DWORD *)a3 + 22);
  v14 = *a3;
  if (*a3 >> 25)
  {
    if ((v14 & 0x2000000) != 0)
    {
      sub_22E8FCA40(a1, *((_DWORD *)a3 + 36), 0x18u, 0, (uint64_t)&v25);
      sub_22F2F30F4((uint64_t)&v25, (uint64_t)"const");
      sub_22E903BEC((unsigned int *)&v25);
      v14 = *a3;
    }
    if ((v14 & 0x8000000) != 0)
    {
      sub_22E8FCA40(a1, *((_DWORD *)a3 + 38), 0x18u, 0, (uint64_t)&v25);
      sub_22F2F30F4((uint64_t)&v25, (uint64_t)"volatile");
      sub_22E903BEC((unsigned int *)&v25);
      v14 = *a3;
    }
    if ((v14 & 0x4000000) != 0)
    {
      sub_22E8FCA40(a1, *((_DWORD *)a3 + 37), 0x18u, 0, (uint64_t)&v25);
      sub_22F2F30F4((uint64_t)&v25, (uint64_t)"restrict");
      sub_22E903BEC((unsigned int *)&v25);
      v14 = *a3;
    }
    if ((v14 & 0x20000000) != 0)
    {
      sub_22E8FCA40(a1, *((_DWORD *)a3 + 39), 0x18u, 0, (uint64_t)&v25);
      sub_22F2F30F4((uint64_t)&v25, (uint64_t)"_Atomic");
      sub_22E903BEC((unsigned int *)&v25);
      v14 = *a3;
    }
    v11 = a2;
    if ((v14 & 0x10000000) != 0)
    {
      sub_22E8FCA40(a1, *((_DWORD *)a3 + 40), 0x18u, 0, (uint64_t)&v25);
      sub_22F2F30F4((uint64_t)&v25, (uint64_t)"__unaligned");
      sub_22E903BEC((unsigned int *)&v25);
      v11 = a2;
      v14 = *a3;
    }
  }
  v25 = a3;
  v29 = 0;
  v30 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v31 = a3[11];
  v33 = 0u;
  v32 = 7;
  v34 = 0;
  v35 = &v37;
  v36 = 0x800000000;
  v38 = (v14 & 0x3F000) == 204800;
  v15 = a3[5];
  v39 = 0u;
  v40 = v15;
  v44 = 0;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v16 = sub_22EE8156C((uint64_t)a1, (uint64_t)&v25, v11, (uint64_t)a4, a5, a6, a7, a8);
  if ((v38 & 1) != 0)
    goto LABEL_23;
  if ((*v25 & 0x3F000) == 0x32000)
    goto LABEL_23;
  v17 = (uint64_t *)v16;
  v18 = *v16;
  if ((sub_22EE67290((uint64_t)a1, v13, v16, 9) & 1) != 0)
    goto LABEL_23;
  if (!a5)
  {
    v19 = sub_22EACF278((uint64_t)a1, v13, *((_DWORD *)a3 + 47), v17);
    goto LABEL_7;
  }
  if (!sub_22F112590(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22E8FCA40(a1, v13, 0x12A6u, 0, (uint64_t)v24);
    v23 = a3[11];
    sub_22E8906A0((uint64_t)v24, &v23);
    sub_22E903BEC(v24);
LABEL_23:
    v20 = 0;
    goto LABEL_9;
  }
  v19 = sub_22F3B9070(a1[11], a1[27], v13, a4, a5, (unint64_t)v17 | 4, *((_DWORD *)a3 + 47));
LABEL_7:
  v20 = v19;
  if (v19)
  {
    *(_DWORD *)(v19 + 28) &= 0xFFFF9FFF;
    sub_22EFCCFA0(a1[27], v19);
  }
LABEL_9:
  sub_22E827F78((uint64_t)&v25);
  return v20;
}

unsigned int *sub_22F329AB0(unsigned int *result, unint64_t a2, unsigned int a3, int a4)
{
  if (a4 == 1)
    return (unsigned int *)sub_22EAD04B8((uint64_t)result, a2, a3);
  if (a4 == 2)
    return sub_22EAB9ED0(result, a2, a3);
  return result;
}

uint64_t sub_22F329AD4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7[24];

  result = sub_22EA130FC((uint64_t)a1, a2, a3);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 <= 5)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(result + 24), 0xE6Au, 0, (uint64_t)v7);
      v6 = *(_QWORD *)(a3 + 72);
      sub_22E8906A0((uint64_t)v7, &v6);
      sub_22E903BEC(v7);
      return 0;
    }
  }
  return result;
}

unsigned int *sub_22F329B60(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  sub_22E90749C((uint64_t)v6, *(_BYTE **)(a1 + 16));
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F329BC8()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F329BE0(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  unsigned __int8 v8;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v8 = **(_BYTE **)(a1 + 16);
  sub_22E894E38((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F329C54()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F329C6C(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  sub_22F329CE8(a1, (uint64_t)v6);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F329CD4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F329CE8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned int v8;

  v8 = **(_DWORD **)(a1 + 16);
  sub_22E89519C(a2, &v8);
  v7 = **(_QWORD **)(a1 + 24);
  sub_22E8906A0(a2, &v7);
  v6 = **(_BYTE **)(a1 + 32);
  sub_22E894E38(a2, &v6);
  v5 = **(_BYTE **)(a1 + 40);
  return sub_22E894E38(a2, &v5);
}

unsigned int *sub_22F329D74(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  int v8;
  unsigned __int8 v9;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v9 = **(_BYTE **)(a1 + 16);
  sub_22E894E38((uint64_t)v6, &v9);
  v8 = **(_DWORD **)(a1 + 24);
  sub_22E8900C4((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F329E00()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F329E14(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F329E7C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F329F18(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_22F329E7C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v6 = a2 - 1;
    v7 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 24 * v7);
    v8 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v4;
        v13 = v7 + v10++;
        v7 = v13 & v6;
        v4 = (_QWORD *)(a1 + 24 * (v13 & v6));
        v8 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_8;
      }
      v5 = 0;
      if (v9)
        v4 = v9;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_8:
  *a4 = v4;
  return v5;
}

_QWORD *sub_22F329F18(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22EAE27D8(a1, v6);
    v8 = 0;
    sub_22F329E7C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F329FCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F329E7C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F32A084(uint64_t result, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
    return sub_22F32A0B8(result, a2, *a3);
  v4 = (unsigned int *)(*(_QWORD *)result + 8 * v3);
  *v4 = a2;
  v4[1] = *a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_22F32A0B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = a2 | (unint64_t)(a3 << 32);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

BOOL sub_22F32A134(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x400000000000000) != 0)
    return 1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) & 0x400000000000) == 0;
}

uint64_t sub_22F32A18C()
{
  return 1;
}

_QWORD *sub_22F32A194(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22EAE25F0(a2, a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F32A250((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F32A250(_DWORD *a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 16;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EAE971C((uint64_t)a1, v6);
  v8 = 0;
  sub_22EAE25F0((uint64_t)a1, a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F32A30C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22EAE25F0((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F32A3C8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E4D6DA8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F32A474(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F2D29BC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F32A50C(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F32A50C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22EAE9A60(a1, v6);
    v8 = 0;
    sub_22F2D29BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F32A5C0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F2D29BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F32A674(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 17;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_22F32A6EC(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
    }
    do
      *v3++ = -4096;
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

_QWORD *sub_22F32A6EC(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22EAE9B20(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(8 * v8));
    return sub_22EAE9B20(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

unsigned int *sub_22F32A7B8(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  int v8;
  int v9;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v9 = **(_DWORD **)(a1 + 16);
  sub_22E8900C4((uint64_t)v6, &v9);
  v8 = **(_DWORD **)(a1 + 24);
  sub_22E8900C4((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F32A844()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F32A858@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F32A8E8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F32A984(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F32A8E8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F32A984(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_22EAEACE4(a1, v7);
    v9 = 0;
    sub_22F32A8E8((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F32AA34(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F32A8E8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

unsigned int *sub_22F32AAEC(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  uint64_t v8;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v8 = **(_QWORD **)(a1 + 16);
  sub_22E894538((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F32AB60()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F32AB74(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2D3258(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_BYTE *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F32AC0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2 + 56 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 8) = v3 + 24;
  *(_QWORD *)(v3 + 16) = 0x400000000;
  sub_22F32ACBC((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  return v2 + 56 * v4 - 56;
}

void sub_22F32ACBC(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 56 * v2;
    do
    {
      v8 = (_QWORD *)(a2 + v5);
      v9 = v6 + v5;
      *v8 = *(_QWORD *)(v6 + v5);
      v8[2] = 0x400000000;
      v8[1] = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_22F24C77C(a2 + v5 + 8, v9 + 8);
      v5 += 56;
    }
    while (v9 + 56 != v7);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 56 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 48);
        if ((void *)(v11 + v12 - 32) != v13)
          free(v13);
        v12 -= 56;
      }
      while (v12);
    }
  }
}

BOOL sub_22F32AD8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 221)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F32ADEC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56) & 0xC00000000;
  if (v2)
    return sub_22F0D36D4(a2, *(_QWORD *)(a1 + 40), v2 == 0x800000000, *(_QWORD *)(a1 + 96), *(unsigned int *)(a1 + 104), *(_DWORD *)(a1 + 108));
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 96) + 8 * *(unsigned int *)(a1 + 104) + 4 * a2);
}

BOOL sub_22F32AE30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 220)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F32AE90(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x18)
      return sub_22EAFAEBC(result, (_QWORD *)a2, 1, (*(_QWORD *)(a2 + 56) >> 17) & 1);
  }
  return result;
}

BOOL sub_22F32AEB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 265)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t *sub_22F32AF18(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, void **a7, int a8, unint64_t *a9, uint64_t a10, unsigned int a11, unsigned int a12, _DWORD **a13, unsigned int a14, unsigned int *a15, int a16, uint64_t a17)
{
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  __int16 v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  void **v68;
  _QWORD *__src;
  unsigned int v70[24];
  uint64_t v71;
  unsigned int v72[24];
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[12];

  v76[10] = *MEMORY[0x24BDAC8D0];
  v73 = a4;
  v25 = *(_QWORD *)(a1 + 3344);
  v26 = sub_22EFCAD5C(*(_QWORD *)(a1 + 216));
  v27 = 1;
  if (sub_22EFB9D84(v26))
    v28 = 1;
  else
    v28 = 2;
  v29 = sub_22EC65CE0((_QWORD *)a1, v25, a4, a5, 0, v28);
  v30 = v29;
  if (!v29)
    goto LABEL_5;
  v33 = *(_DWORD *)(v29 + 28);
  if ((v33 & 0x7F) != 0x16)
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0x1215u, 0, (uint64_t)&v74);
    sub_22E8BAE44((uint64_t)&v74, &v73);
    sub_22E903BEC((unsigned int *)&v74);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v30 + 24), 0x6Du, 0, (uint64_t)v72);
    sub_22E903BEC(v72);
    v33 = *(_DWORD *)(v30 + 28);
  }
  if ((v33 & 0x7F) != 0x16)
  {
    v30 = 0;
    goto LABEL_5;
  }
  v34 = *(_QWORD *)(v30 + 40);
  if ((v34 & 7) != 0)
    v35 = 0;
  else
    v35 = v34 & 0xFFFFFFFFFFFFFFF8;
  if (v35 != v73)
    v73 = v35;
  v36 = sub_22F3B4828((uint64_t *)v30);
  if (!v36)
  {
LABEL_16:
    v27 = 0;
    goto LABEL_5;
  }
  v49 = v36;
  if (!a6)
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0x100Du, 0, (uint64_t)&v74);
    sub_22E8BAE44((uint64_t)&v74, &v73);
    sub_22E903BEC((unsigned int *)&v74);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)v49, 0x1771u, 0, (uint64_t)&v74);
    sub_22E8BAE44((uint64_t)&v74, &v73);
    sub_22E903BEC((unsigned int *)&v74);
    v74 = v76;
    v75 = 0x400000000;
    v50 = *(unsigned int *)(v49 + 8);
    if ((_DWORD)v50)
    {
      v65 = a3;
      v66 = a8;
      v67 = a2;
      v68 = a7;
      v52 = v49 + 16;
      v53 = 8 * v50;
      do
      {
        v54 = *(_QWORD *)(a1 + 88);
        v55 = *(_QWORD *)(a1 + 216);
        v56 = *(unsigned __int16 *)(*(_QWORD *)v52 + 88);
        v57 = v56 >> 14;
        v58 = v56 & 0x3FFF;
        v59 = *(_QWORD *)(*(_QWORD *)v52 + 40);
        if ((v59 & 7) != 0)
          v60 = 0;
        else
          v60 = v59 & 0xFFFFFFFFFFFFFFF8;
        v61 = sub_22EF579A8(*(_QWORD *)(a1 + 88), *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v52 + 80) & 0xFFFFFFFFFFFFFFF8)+ ((2 * *(_QWORD *)(*(_QWORD *)v52 + 80)) & 8)), 0);
        v62 = sub_22F3B5928(v54, v55, v57, 0, v58, 0, v60, 0, (uint64_t)v61);
        v63 = v75;
        if (v75 >= (unint64_t)HIDWORD(v75))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v63 = v75;
        }
        v74[v63] = v62;
        v51 = (v75 + 1);
        LODWORD(v75) = v75 + 1;
        v52 += 8;
        v53 -= 8;
      }
      while (v53);
      __src = v74;
      a2 = v67;
      a7 = v68;
      a3 = v65;
      a8 = v66;
    }
    else
    {
      v51 = 0;
      __src = v76;
    }
    v64 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 8 * v51 + 16, 3);
    a6 = v64;
    *(_QWORD *)v64 = 0;
    *(_DWORD *)(v64 + 8) = v51;
    if (v51)
      memmove((void *)(v64 + 16), __src, 8 * v51);
    if (v74 != v76)
      free(v74);
    goto LABEL_16;
  }
  v27 = 0;
  if (sub_22EAF4F38((_QWORD *)a1, v36, a6, 1u))
    a6 = 0;
LABEL_5:
  v31 = a3;
  v32 = sub_22F3B5B14(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a3, v73, a6, v30, a5, 0);
  sub_22EA63DD8((_QWORD *)a1, *(_QWORD *)(a1 + 3344), (uint64_t)v32, a17, 1);
  sub_22E9114FC((_QWORD *)a1, (uint64_t)v32);
  if ((v27 & 1) != 0)
  {
    sub_22E91049C(a1, *(_QWORD *)(a1 + 3344), (uint64_t)v32);
  }
  else
  {
    v37 = *(_QWORD *)(v30 + 120);
    if (!v37)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v30 + 96) + 88), *(_QWORD *)(v30 + 96));
      v37 = *(_QWORD *)(v30 + 120);
    }
    if (v37 >= 8)
    {
      v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if (v38)
      {
        sub_22E8FCA40((_QWORD *)a1, v31, 0xCCEu, 0, (uint64_t)&v74);
        v71 = *(_QWORD *)(v30 + 40);
        sub_22E894538((uint64_t)&v74, &v71);
        sub_22E903BEC((unsigned int *)&v74);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v38 + 24), 0x6Du, 0, (uint64_t)v70);
        sub_22E903BEC(v70);
        sub_22EFC77E8((uint64_t)v32, 1);
      }
    }
    sub_22E91049C(a1, *(_QWORD *)(a1 + 3344), (uint64_t)v32);
    sub_22EA084D0(a1, (unint64_t)v32, (_BYTE *)v30, 1);
  }
  sub_22EA0483C(a1, (unint64_t)v32, *(uint64_t **)(a1 + 3344), 1);
  v39 = v32[15];
  if (!v39)
  {
    sub_22E3CD31C((uint64_t *)(v32[12] + 88), v32[12]);
    v39 = v32[15];
  }
  if (v39 <= 7)
    sub_22F3B4B38((unint64_t)v32);
  if (a7)
  {
    v41 = *(_QWORD *)(a1 + 216);
    v42 = a7;
    v43 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = 0;
    v44 = a2;
    v45 = *(_QWORD *)(a1 + 10288);
    v46 = a8;
    v47 = *(_DWORD *)(a1 + 1944);
    v48 = *(_DWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 216) = v32 + 6;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    sub_22EAF3E0C((_QWORD *)a1, v44, v31, v32, v73, a5, v42, v46, a9, a10, a11, a12);
    if (v41)
    {
      *(_QWORD *)(a1 + 216) = v41;
      *(_QWORD *)(a1 + 3200) = v43;
      *(_QWORD *)(a1 + 10288) = v45;
      *(_DWORD *)(a1 + 1944) = v47;
      *(_DWORD *)(a1 + 2192) = v48;
    }
  }
  else
  {
    *(_DWORD *)((v32[15] & 0xFFFFFFFFFFFFFFF8) + 80) = a5;
  }
  if (a14)
  {
    sub_22EAF58D4(a1, (uint64_t)v32, a13, a14, a15);
    sub_22F3B45C4((_QWORD *)((v32[15] & 0xFFFFFFFFFFFFFFF8) + 16), a13, a14, a15, *(_QWORD *)(a1 + 88));
    *(_DWORD *)((v32[15] & 0xFFFFFFFFFFFFFFF8) + 80) = a16;
  }
  sub_22F32B4DC((_QWORD *)a1, (uint64_t)v32);
  *(_QWORD *)(a1 + 216) = v32 + 6;
  return v32;
}

uint64_t sub_22F32B4DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;
  unsigned int v7[24];

  if ((*(_WORD *)(sub_22EFCBB30(a1[27]) + 8) & 0x7Fu) - 19 < 5)
    return 0;
  v6 = a1[28];
  if (!v6)
    v6 = a1[27];
  if ((*(_WORD *)(sub_22EFCBB30(v6) + 8) & 0x7F) == 0x53)
    return 0;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xFF1u, 0, (uint64_t)v7);
  sub_22E903BEC(v7);
  v4 = 1;
  sub_22EFC77E8(a2, 1);
  return v4;
}

uint64_t sub_22F32B57C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v5 + 8);
  }
  if (a2)
  {
    v7 = (_DWORD *)(*(_QWORD *)v5 + 4 * v6);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v6 + a2;
  return result;
}

uint64_t sub_22F32B5F8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BYTE v33[96];
  _BYTE v34[96];
  unsigned int v35[24];
  uint64_t v36;
  uint64_t v37;

  v36 = a5;
  v37 = a3;
  v12 = *(_QWORD *)(a1 + 3344);
  v13 = sub_22EFCAD5C(*(_QWORD *)(a1 + 216));
  v14 = 1;
  if (sub_22EFB9D84(v13))
    v15 = 1;
  else
    v15 = 2;
  v16 = sub_22EC65CE0((_QWORD *)a1, v12, a3, a4, 0, v15);
  if (v16)
  {
    v17 = v16;
    sub_22E8FCA40((_QWORD *)a1, a4, 0xBF7u, 0, (uint64_t)v35);
    sub_22E8BAE44((uint64_t)v35, &v37);
    sub_22E903BEC(v35);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v17 + 24), 0x6Cu, 0, (uint64_t)v34);
    v18 = (unsigned int *)v34;
    goto LABEL_6;
  }
  v21 = *(_QWORD *)(a1 + 3344);
  v22 = sub_22EFCAD5C(*(_QWORD *)(a1 + 216));
  if (sub_22EFB9D84(v22))
    v23 = 1;
  else
    v23 = 2;
  v24 = sub_22EC65CE0((_QWORD *)a1, v21, a5, a6, 0, v23);
  v25 = v24;
  if (!v24)
    goto LABEL_17;
  if ((*(_DWORD *)(v24 + 28) & 0x7Fu) - 39 <= 2)
  {
    v26 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v24 + 80) & 0xFFFFFFFFFFFFFFF8)
                                + ((2 * *(_QWORD *)(v24 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 33 <= 1)
    {
      if (*(unsigned __int8 *)(v26 + 16) - 35 <= 0xFFFFFFFD)
        v26 = sub_22F10CF48(v26);
      v27 = sub_22F272660(v26);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 40);
        v29 = (v28 & 7) != 0 ? 0 : v28 & 0xFFFFFFFFFFFFFFF8;
        v36 = v29;
        v30 = *(_QWORD *)(a1 + 3344);
        v31 = sub_22EFCAD5C(*(_QWORD *)(a1 + 216));
        v32 = sub_22EFB9D84(v31) ? 1 : 2;
        v25 = sub_22EC65CE0((_QWORD *)a1, v30, v29, a6, 0, v32);
        if (!v25)
        {
LABEL_17:
          sub_22E8FCA40((_QWORD *)a1, a6, 0x1BA5u, 0, (uint64_t)v35);
          sub_22E8BAE44((uint64_t)v35, &v36);
          sub_22E903BEC(v35);
          if ((v14 & 1) != 0)
            return 0;
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v25 + 24), 0x6Cu, 0, (uint64_t)v33);
          v18 = (unsigned int *)v33;
LABEL_6:
          sub_22E903BEC(v18);
          return 0;
        }
      }
    }
  }
  if ((*(_DWORD *)(v25 + 28) & 0x7F) != 0x16)
  {
    v14 = 0;
    goto LABEL_17;
  }
  v19 = sub_22F3B6E9C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a4, a3, v25, a6, a2);
  if ((sub_22F32B4DC((_QWORD *)a1, v19) & 1) == 0)
    sub_22EA0483C(a1, v19, *(uint64_t **)(a1 + 3344), 1);
  return v19;
}

uint64_t sub_22F32B898(_QWORD *a1, uint64_t a2, int *a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v21[24];
  unsigned int v22[24];

  v5 = *((unsigned int *)a5 + 2);
  if ((_DWORD)v5)
  {
    v9 = 0;
    v10 = *a5;
    v12 = 8 * v5;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)v10 + 40);
      if ((v13 & 7) != 0)
        v14 = 0;
      else
        v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      v15 = sub_22EC65CE0(a1, a1[418], v14, *a3, 11, 0);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)(v15 + 40);
        if ((v17 & 7) != 0)
          v18 = 0;
        else
          v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == a2)
        {
          sub_22E8FCA40(a1, *a3, 0x11E0u, 0, (uint64_t)v22);
          sub_22E903BEC(v22);
          sub_22E8FCA40(a1, a4, 0x6Du, 0, (uint64_t)v21);
          sub_22E903BEC(v21);
          v9 = 1;
        }
        v19 = *(_QWORD *)(v16 + 104);
        if (!v19)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 96) + 88), *(_QWORD *)(v16 + 96));
          v19 = *(_QWORD *)(v16 + 104);
        }
        if (v19 >= 8)
          v9 |= sub_22F32B898(a1, a2, a3, *(unsigned int *)(v16 + 24), (v19 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

unsigned int *sub_22F32B9EC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned __int8 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12[25];
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a4;
  v15 = a2;
  v13 = a6;
  sub_22E8FCA40(a1, a5, 0x1024u, 0, (uint64_t)v12);
  v7 = sub_22E894E38((uint64_t)v12, &v13);
  v8 = sub_22E8BAE44(v7, &v14);
  v9 = sub_22E8BAE44(v8, &v15);
  LODWORD(v11) = a3;
  HIDWORD(v11) = a3;
  sub_22E8906A0(v9, &v11);
  return sub_22E903BEC(v12);
}

unint64_t sub_22F32BA5C(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v19;
  unint64_t v20[9];

  v20[8] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  if (a4)
  {
    v7 = a3;
    v8 = a3 + 16 * a4;
    do
    {
      v10 = *(_QWORD *)v7;
      v11 = *(_DWORD *)(v7 + 8);
      v12 = sub_22EFCAD5C(a1[27]);
      if (sub_22EFB9D84(v12))
        v13 = 1;
      else
        v13 = 2;
      v14 = (_BYTE *)sub_22EC65CE0(a1, a1[418], v10, v11, 11, v13);
      v15 = sub_22F3B6240(a1[11], a1[27], v10, *(_DWORD *)(v7 + 8), a2, (uint64_t)v14);
      sub_22EA0483C((uint64_t)a1, v15, (uint64_t *)a1[418], 1);
      sub_22F32B4DC(a1, v15);
      sub_22EA63DD8(a1, a1[418], v15, a5, 1);
      sub_22E91049C((uint64_t)a1, a1[418], v15);
      if (v14)
        sub_22EA084D0((uint64_t)a1, v15, v14, 1);
      v16 = v19;
      if (v19 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v19;
      }
      v20[v16] = v15;
      v17 = ++v19;
      v7 += 16;
    }
    while (v7 != v8);
  }
  else
  {
    v17 = 0;
  }
  return sub_22EA2D7B4(a1, v20, v17);
}

uint64_t sub_22F32BC30(_QWORD *a1, int a2, uint64_t a3, unsigned int a4, int *a5, uint64_t a6, int a7, _DWORD **a8, unsigned int a9, unsigned int *a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  _BYTE v37[96];
  _BYTE v38[96];
  void *v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a6;
  v43 = a3;
  v19 = (uint64_t *)sub_22EA06918(a1, &v43, a4, 1);
  if (v19)
  {
    v23 = sub_22F36D148(a1[11], v19, 0);
    LOBYTE(v35) = a6 == 0;
    v39 = &unk_24FAB7FF0;
    v40 = 3028;
    v41 = &v35;
    if ((sub_22EE8B0B0((uint64_t)a1, a4, v23) & 1) == 0)
    {
      if (a6)
      {
        v25 = sub_22EFDD7A0((unint64_t)v19, a6);
        v24 = v25;
        if ((*(_QWORD *)(a1[9] + 20) & 0x200000000000) != 0 || !v25)
        {
LABEL_16:
          if (a5)
          {
            v30 = sub_22F3B4828(v19);
            if (v30)
            {
              if (v42)
                v34 = 2;
              else
                v34 = 3;
              if (sub_22EAF4F38(a1, v30, (uint64_t)a5, v34))
                v29 = 0;
              else
                v29 = (uint64_t)a5;
              goto LABEL_18;
            }
            sub_22E8FCA40(a1, *a5, 0x100Bu, 0, (uint64_t)&v39);
            v36 = v42 != 0;
            v31 = sub_22E894E38((uint64_t)&v39, (unsigned __int8 *)&v36);
            v32 = sub_22E8BAE44(v31, &v43);
            v35 = *(_QWORD *)a5;
            sub_22E8906A0(v32, &v35);
            sub_22E903BEC((unsigned int *)&v39);
          }
          v29 = 0;
LABEL_18:
          v20 = sub_22F3B66DC(a1[11], a1[27], a2, a4, a7, v42, (unint64_t)v19, v24, v29, 0, 0, 0);
          sub_22EFCCFA0(a1[27], v20);
          if (v24)
          {
            sub_22EA63DD8(a1, a1[418], v20, a12, 1);
            sub_22E91049C((uint64_t)a1, a1[418], v20);
            sub_22EA084D0((uint64_t)a1, v20, (_BYTE *)v24, 1);
          }
          else
          {
            sub_22F3B69F8(v20);
            sub_22EA63DD8(a1, a1[418], v20, a12, 1);
            sub_22E91049C((uint64_t)a1, a1[418], v20);
          }
          if (a9)
          {
            sub_22EAF58D4((uint64_t)a1, v20, a8, a9, a10);
            sub_22F3B45C4((_QWORD *)((*(_QWORD *)(v20 + 120) & 0xFFFFFFFFFFFFFFF8) + 16), a8, a9, a10, a1[11]);
            v33 = *(_QWORD *)(v20 + 40);
            if (v33 < 8 || (v33 & 7) != 0)
              sub_22EFDAD04((unint64_t)v19, a8, a9, a1[11]);
          }
          sub_22F32B4DC(a1, v20);
          goto LABEL_4;
        }
        sub_22E8FCA40(a1, a7, 0x82u, 0, (uint64_t)&v39);
        v26 = sub_22E8BAE44((uint64_t)&v39, &v43);
        sub_22E8BAE44(v26, &v42);
        sub_22E903BEC((unsigned int *)&v39);
        v27 = (unsigned int *)v37;
        sub_22E8FCA40(a1, *(_DWORD *)(v24 + 24), 0x6Du, 0, (uint64_t)v37);
      }
      else
      {
        if (!sub_22F3B4E88((unint64_t)v19))
        {
          v24 = 0;
          goto LABEL_16;
        }
        sub_22E8FCA40(a1, a4, 0xBDDu, 0, (uint64_t)&v39);
        sub_22E8BAE44((uint64_t)&v39, &v43);
        sub_22E903BEC((unsigned int *)&v39);
        v28 = sub_22F3B4E88((unint64_t)v19);
        v27 = (unsigned int *)v38;
        sub_22E8FCA40(a1, *(_DWORD *)(v28 + 24), 0x161Fu, 0, (uint64_t)v38);
        v24 = 0;
      }
      sub_22E903BEC(v27);
      goto LABEL_16;
    }
  }
  v20 = sub_22F3B66DC(a1[11], a1[27], a2, a4, a7, a6, (unint64_t)v19, 0, (uint64_t)a5, 0, 0, 0);
  sub_22EFC77E8(v20, 1);
  sub_22EFCCFA0(a1[27], v20);
  sub_22F3B69F8(v20);
  if (!v19)
  {
    sub_22E8FCA40(a1, a4, 0x13BBu, 0, (uint64_t)&v39);
    sub_22E8BAE44((uint64_t)&v39, &v43);
    sub_22E903BEC((unsigned int *)&v39);
  }
LABEL_4:
  v21 = v20 + 48;
  if (!v20)
    v21 = 0;
  a1[27] = v21;
  return v20;
}

uint64_t sub_22F32C040(unsigned int *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7)
{
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25[24];
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a5;
  v30 = a3;
  v13 = sub_22EA06918(a1, &v30, a4, 1);
  v14 = (uint64_t *)v13;
  if (!v13)
    goto LABEL_2;
  v19 = *(_QWORD *)(v13 + 120);
  if (!v19)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v13 + 96) + 88), *(_QWORD *)(v13 + 96));
    v19 = v14[15];
  }
  if (v19 >= 8)
  {
    v15 = sub_22EFDD7A0((unint64_t)v14, a5);
    if (!v15)
    {
      v15 = sub_22F3B66DC(*((_QWORD *)a1 + 11), *((_QWORD *)a1 + 27), a2, a4, a6, a5, (unint64_t)v14, 0, 0, 0, 0, 0);
      *(_DWORD *)(v15 + 28) |= 0x200u;
      sub_22F3B69F8(v15);
    }
  }
  else
  {
LABEL_2:
    v15 = 0;
  }
  v16 = sub_22F3B6A8C(*((_QWORD *)a1 + 11), *((_QWORD *)a1 + 27), a5, (uint64_t)v14, a4, a2, a6);
  if (v14)
  {
    v20 = sub_22F36D148(*((_QWORD *)a1 + 11), v14, 0);
    v27 = &unk_24FAB6EF8;
    v28 = 5051;
    if (!sub_22EE8B0B0((uint64_t)a1, a4, v20))
      goto LABEL_6;
  }
  else
  {
    sub_22E8FCA40(a1, a4, 0x13BBu, 0, (uint64_t)&v27);
    sub_22E8BAE44((uint64_t)&v27, &v30);
    sub_22E903BEC((unsigned int *)&v27);
  }
  sub_22EFC77E8(v16, 1);
LABEL_6:
  sub_22EA63DD8(a1, *((_QWORD *)a1 + 418), v16, a7, 1);
  sub_22E91049C((uint64_t)a1, *((_QWORD *)a1 + 418), v16);
  sub_22EFCCFA0(*((_QWORD *)a1 + 27), v16);
  if (v14 && sub_22F278AC4((uint64_t)v14))
  {
    sub_22E8FCA40(a1, a4, 0x1012u, 0, (uint64_t)&v27);
    v26 = v14[5];
    sub_22E894538((uint64_t)&v27, &v26);
    sub_22E903BEC((unsigned int *)&v27);
  }
  if (v15)
  {
    v21 = sub_22EFC72E8(v15);
    if (sub_22F368C34(v21, v15))
    {
      sub_22E8FCA40(a1, a4, 0xCC9u, 0, (uint64_t)&v27);
      v22 = sub_22E8BAE44((uint64_t)&v27, &v30);
      sub_22E8BAE44(v22, &v29);
      sub_22E903BEC((unsigned int *)&v27);
      v23 = sub_22EFC72E8(v15);
      v24 = sub_22F368C34(v23, v15);
      sub_22E8FCA40(a1, *(_DWORD *)(v24 + 24), 0x6Du, 0, (uint64_t)v25);
      sub_22E903BEC(v25);
      sub_22EFC77E8(v16, 1);
    }
    else
    {
      sub_22F3B6874(v15, v16);
      sub_22EAF3BE0(a1, v15, *(_DWORD *)(v16 + 24));
    }
  }
  sub_22F32B4DC(a1, v16);
  v17 = v16 + 48;
  if (!v16)
    v17 = 0;
  *((_QWORD *)a1 + 27) = v17;
  return v16;
}

unint64_t sub_22F32C31C(_QWORD *a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v16;
  unint64_t v17[65];

  LODWORD(v4) = a4;
  v17[64] = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  if ((unint64_t)(a4 + 1) >= 0x41)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v4 = v4;
  if ((_DWORD)v4)
  {
    do
    {
      v8 = *a3;
      if (*a3)
      {
        v9 = *(_QWORD *)(v8 + 16);
        v10 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v10 = *(_QWORD *)v10;
        v11 = *(_WORD *)(v10 + 8) & 0x7F;
        if (v11 == 83 || v11 == 16)
          *(_DWORD *)(v8 + 28) |= 0x1000u;
        v13 = v16;
        if (v16 >= 0x40uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v16;
        }
        v17[v13] = v8;
        ++v16;
      }
      ++a3;
      --v4;
    }
    while (v4);
  }
  v14 = v16;
  if (v16 >= 0x40)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v16;
  }
  v17[v14] = a2;
  return sub_22EA2D7B4(a1, v17, v16 + 1);
}

unint64_t sub_22F32C4AC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t result;

  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v1 = *(_QWORD *)(a1 + 120);
  }
  if (v1 < 8)
    return 0;
  v3 = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
    return 0;
  if ((*(_WORD *)(v3 + 56) & 0x80) != 0)
    sub_22EFCC320(v3 + 48);
  for (result = *(_QWORD *)(v3 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x33)
      break;
  }
  return result;
}

unsigned int *sub_22F32C530(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20[24];
  unsigned int v21[24];

  result = (unsigned int *)sub_22EAF8298(a1, a2, a3, a4, 1, 1);
  v9 = *(unsigned int *)(a2 + 104);
  v10 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v9)
    v11 = (_DWORD)v10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = *(uint64_t **)(a2 + 96);
    v13 = *(uint64_t **)(a3 + 96);
    v14 = 8 * v9 - 8;
    v15 = 8 * v10 - 8;
    do
    {
      v17 = *v12++;
      v16 = v17;
      v18 = *v13++;
      result = (unsigned int *)sub_22EAF86C0(a1, a2, v16, v18, a4, 1, 1);
      if (!v14)
        break;
      v14 -= 8;
      v19 = v15;
      v15 -= 8;
    }
    while (v19);
  }
  if (((*(unsigned __int8 *)(a2 + 58) ^ *(unsigned __int8 *)(a3 + 58)) & 4) != 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x18E3u, 0, (uint64_t)v21);
    sub_22E903BEC(v21);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x6Cu, 0, (uint64_t)v20);
    return sub_22E903BEC(v20);
  }
  return result;
}

uint64_t sub_22F32C640(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 216);
  result = 0;
  switch(*(_WORD *)(v1 + 8) & 0x7F)
  {
    case 0x13:
      v3 = *(_QWORD *)(v1 - 8);
      if ((v3 & 7) == 0 && v3 >= 8)
        result = 2;
      else
        result = 3;
      break;
    case 0x14:
      result = 5;
      break;
    case 0x15:
      result = 4;
      break;
    case 0x16:
      return result;
    case 0x17:
      result = 1;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

BOOL sub_22F32C6AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 268)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unsigned int *sub_22F32C70C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  _BYTE *v9;
  unsigned int *result;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[103];
  BOOL v28;
  unsigned int v29[24];
  _BYTE v30[96];
  unsigned int v31[24];

  if (sub_22EFDBD9C(a3))
  {
    if ((*(_BYTE *)(a3 + 29) & 1) == 0)
      goto LABEL_3;
    sub_22EFC8E88(a3);
    v22 = *(uint64_t **)v21;
    v23 = *(unsigned int *)(v21 + 8);
    v24 = *(uint64_t **)v21;
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      v24 = *(uint64_t **)v21;
      while (*(_WORD *)(*v24 + 32) != 484)
      {
        ++v24;
        v25 -= 8;
        if (!v25)
          goto LABEL_3;
      }
    }
    if (v24 == &v22[v23])
    {
LABEL_3:
      v6 = 0;
    }
    else
    {
      do
      {
        v26 = *v22++;
        v6 = v26;
      }
      while (*(_WORD *)(v26 + 32) != 484);
    }
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x100Au, 0, (uint64_t)v31);
    sub_22E903BEC(v31);
    v7 = *(_DWORD *)(v6 + 16);
    v8 = (unsigned int *)v30;
    v9 = v30;
    goto LABEL_5;
  }
  result = (unsigned int *)sub_22EFDBD9C(a2);
  if ((_DWORD)result)
  {
    sub_22EFC8E88(a2);
    v12 = *v11;
    v13 = *((unsigned int *)v11 + 2);
    if ((_DWORD)v13 && *(_WORD *)(*v12 + 32) != 484)
    {
      v14 = 8 * v13 - 8;
      v15 = *v11;
      do
      {
        v16 = v15[1];
        ++v15;
        v14 -= 8;
      }
      while (*(_WORD *)(v16 + 32) != 484);
    }
    do
    {
      v18 = *v12++;
      v17 = v18;
    }
    while (*(_WORD *)(v18 + 32) != 484);
    sub_22E8FCA40(a1, *(_DWORD *)(v17 + 16), 0xFF6u, 0, (uint64_t)v29);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = v19 & 0xFFFFFFFFFFFFFFF8;
    if ((v19 & 4) != 0)
      v20 = *(_QWORD *)v20;
    v28 = (*(_WORD *)(v20 + 8) & 0x7F) == 23;
    sub_22E894E38((uint64_t)v29, (unsigned __int8 *)&v28);
    sub_22E903BEC(v29);
    v7 = *(_DWORD *)(a3 + 24);
    v8 = (unsigned int *)v27;
    v9 = v27;
LABEL_5:
    sub_22E8FCA40(a1, v7, 0x6Cu, 0, (uint64_t)v9);
    return sub_22E903BEC(v8);
  }
  return result;
}

uint64_t sub_22F32C8BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = sub_22EFDD1E0(a2);
  if (result)
  {
    v6 = result;
    do
    {
      result = sub_22EF5BA38(*(_QWORD *)(a1 + 88), *(_QWORD *)(v6 + 48));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
      {
        v7 = *(unsigned int *)(a3 + 8);
        if (v7 >= *(unsigned int *)(a3 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = v6;
        ++*(_DWORD *)(a3 + 8);
      }
      v6 = *(_QWORD *)(v6 + 80);
    }
    while (v6);
  }
  return result;
}

unint64_t sub_22F32C964(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 58) & 2) == 0)
    return 0;
  result = sub_22EFDC9F0(a1);
  if (result)
  {
    v5 = result;
    result = sub_22EFDBA90(result, *(_QWORD *)(a1 + 40), 1, 0, 0, 0);
    if (result)
    {
      if ((*(_BYTE *)(result + 58) & 8) == 0)
        return 0;
      result = sub_22EFDCBF0(result, 1);
      *a2 = result;
      if (!result)
        return result;
      v6 = *(_QWORD *)(result + 120);
      if (!v6)
        return 0;
      v7 = *(_QWORD *)(v6 + 40);
      if ((v7 & 7) != 0)
        v8 = 0;
      else
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      return sub_22EFDB894(v5, v8, &v9);
    }
  }
  return result;
}

void sub_22F32CA08()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F32CA1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7F) == 23;
  return result;
}

__n128 sub_22F32CA48@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB8180;
  *a2 = v4;
  return result;
}

BOOL sub_22F32CAA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 258)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22F32CB00(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x33)
      break;
  }
  return result;
}

uint64_t sub_22F32CB54(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;

  v2 = sub_22F32C4AC(a1);
  if (!*(_QWORD *)(a1 + 120))
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
  result = 0;
  if (v2)
  {
LABEL_4:
    result = (result + 1);
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v2)
        break;
      if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x33)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_22F32CBB8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F32CC38((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

_QWORD *sub_22F32CC38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F32CCF4(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F32CDA0((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F32CCF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F32CDA0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EB0CB2C((uint64_t)a1, v6);
  v8 = 0;
  sub_22F32CCF4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F32CE5C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F32CCF4((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

unsigned int *sub_22F32CF20(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  sub_22F32CF9C((_QWORD **)a1, (uint64_t)v6);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F32CF88()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F32CF9C(_QWORD **a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *a1[2];
  sub_22E894538(a2, &v7);
  v6 = *a1[3];
  sub_22E8BAE44(a2, &v6);
  v5 = *a1[4];
  return sub_22E8906A0(a2, &v5);
}

uint64_t sub_22F32D00C(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  if ((*(_QWORD *)(*(_QWORD *)&a1[9] + 8) & 0x400000000000) != 0)
    return sub_22EB156D8(a1, a2, a3, a4, a5, a6, a7, 0, 0, 0, 0);
  else
    return 0;
}

unsigned int *sub_22F32D054(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  uint64_t v8;
  int v9;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v9 = **(_DWORD **)(a1 + 16);
  sub_22E8900C4((uint64_t)v6, &v9);
  v8 = **(_QWORD **)(a1 + 24);
  sub_22E8906A0((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F32D0E0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F32D0F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v29;
  __int128 v30;
  void *v31[2];
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v4 = (unsigned __int8 *)a2;
  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if ((v7 & 0xFE00000u) >= 0x8180001 && v6 != 0 && *(_DWORD *)(v6 + 16) == 11)
  {
    if ((v7 & 0xFF80000) == 0x8480000 && (a3 == 2 || a4 && sub_22F30AD50(a4)))
    {
      v4 = (unsigned __int8 *)sub_22EC2C298((uint64_t *)a1, v4);
    }
    else
    {
      v27 = sub_22EB19A28(a1);
      if ((v27 & 1) != 0)
        return 1;
      v4 = (unsigned __int8 *)(v27 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v10 = sub_22EB1BB84(a1, v4);
  v32 = v10;
  if ((v10 & 1) != 0)
    return 1;
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
  {
    sub_22F32D3A8((unsigned int *)a1, &v32);
    v11 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  *(_QWORD *)&v30 = v12;
  if (sub_22EB1BEA4(a1, (unint64_t *)&v30) != 2)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
      return v11;
    sub_22EFF605C(v11);
    v25 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)&v30 = &unk_24FAB6EF8;
    DWORD2(v30) = 2989;
    if ((sub_22EE8B0B0(a1, v26, v25) & 1) == 0)
      return v11;
    return 1;
  }
  v30 = 0u;
  *(_OWORD *)v31 = 0u;
  v13 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "__builtin_trap", 0xEuLL);
  sub_22F0D5A50(v11);
  v33 = 0;
  v34 = v13;
  v35 = v14;
  v36 = v14;
  v15 = sub_22EB1C438(a1, *(uint64_t **)(a1 + 3344), (uint64_t)&v30, 0, &v33, 1, 0, 0, 0, 0);
  if ((v15 & 1) != 0
    || (v16 = *(_QWORD *)(a1 + 3344),
        v17 = v15 & 0xFFFFFFFFFFFFFFFELL,
        sub_22F0D5A50(v11),
        v19 = v18,
        sub_22F0D60E4(v11),
        LOWORD(v29) = 0,
        v21 = sub_22EB1CFA4(a1, v16, v17, v19, 0, 0, v20, 0, v29),
        (v21 & 1) != 0))
  {
    v11 = 1;
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 3344);
    sub_22F0D5A50(v11);
    v24 = sub_22EB4785C(a1, v22, v23, 32, v21 & 0xFFFFFFFFFFFFFFFELL, v11);
    if ((v24 & 1) != 0)
      v11 = 1;
    else
      v11 = v24 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (HIDWORD(v31[1]))
    free(v31[0]);
  return v11;
}

unsigned int *sub_22F32D3A8(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;

  if ((*(_WORD *)(*((_QWORD *)result + 9) + 148) & 2) != 0)
  {
    v3 = result;
    result = sub_22EFFB64C(*((_QWORD *)result + 11), *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8), 60, *a2 & 0xFFFFFFFFFFFFFFFELL, 0, 0, 0);
    *a2 = result;
    *(_WORD *)((char *)v3 + 1693) = 257;
  }
  return result;
}

uint64_t sub_22F32D410(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, _QWORD *a6, unsigned int a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v16 = a7;
  v17 = (_QWORD *)operator new[]();
  v19 = v17;
  if (v16)
  {
    v20 = v17;
    v21 = v16;
    do
    {
      if (*a6 >= 0x10uLL)
      {
        v22 = 0;
        v23 = *(_QWORD *)(*a6 & 0xFFFFFFFFFFFFFFF0);
        if (v23 && *(_BYTE *)(v23 + 16) == 57)
          v22 = *(_QWORD *)(v23 + 24);
      }
      else
      {
        v22 = 0;
      }
      *v20++ = v22;
      ++a6;
      --v21;
    }
    while (v21);
  }
  v24 = sub_22EB204CC(a1, a2, a3, a4, a5, v17, v16, v18, a9, a10);
  MEMORY[0x2348A0E84](v19, 0x20C8093837F09);
  return v24;
}

uint64_t sub_22F32D524(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)(a2 + 40);
  v18 = a5;
  sub_22EFC6D6C((uint64_t)&v19, v17);
  if (a6 && (v15 = *(_QWORD *)(a6 + 8), v14 = (uint64_t *)(a6 + 8), v15))
  {
    v11 = sub_22F0ABC50(v14, *(_QWORD *)(a1 + 88));
    v12 = v16;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  return sub_22EB21CE8(a1, a2, a3, a4, (uint64_t)&v17, v11, v12, 0, 0, 0);
}

uint64_t sub_22F32D5CC(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _QWORD v7[2];

  v3 = (_DWORD *)(a1 + 704);
  sub_22F308414(v7, a2);
  result = (uint64_t)sub_22F308614(v3, v7);
  v5 = result;
  v6 = *(_DWORD *)(result + 24);
  if (v6 >= *(_DWORD *)(result + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6) = a2 | 2;
  ++*(_DWORD *)(v5 + 24);
  return result;
}

uint64_t sub_22F32D650(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10[2];

  v5 = (_DWORD *)(a1 + 704);
  sub_22F308424(v10, a2);
  result = (uint64_t)sub_22F308614(v5, v10);
  v7 = result;
  v8 = *(_DWORD *)(result + 24);
  if (v8 >= *(_DWORD *)(result + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 24);
  }
  v9 = 2;
  if (!a3)
    v9 = 0;
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8) = a2 & 0xFFFFFFFFFFFFFFFDLL | v9;
  ++*(_DWORD *)(v7 + 24);
  return result;
}

uint64_t sub_22F32D6EC(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char v13;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 2000) + 20);
  if ((v7 & 0x2000000000) != 0)
  {
    sub_22EE03478(a1);
    if (!v13)
    {
      if (a6 >= 0x10)
      {
        v15 = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0);
        v17 = 0;
        v16 = sub_22F110500((uint64_t)&v17, v15);
        if (v16 && *(_QWORD *)(v16 + 24) <= 0xFuLL)
        {
          if ((v7 & 0x4000000000) != 0 && (*(_DWORD *)(v16 + 16) & 0x400) != 0)
            return sub_22F3C33D0(v6, a6, a2, a3, a4, a5);
        }
        else if ((v7 & 0x4000000000) != 0)
        {
          return sub_22F3C33D0(v6, a6, a2, a3, a4, a5);
        }
      }
      a6 = *(_QWORD *)(v6 + 16832);
      return sub_22F3C33D0(v6, a6, a2, a3, a4, a5);
    }
  }
  return 1;
}

uint64_t sub_22F32D7C0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  if (sub_22EB4EE10(a1, a2, a3, 0, 0, 0, &v5, &v4, 0))
    return 0;
  else
    return v4;
}

uint64_t sub_22F32D80C(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  return sub_22F3C109C(*(_QWORD *)(a1 + 88), a2, a3, a4, a5);
}

uint64_t sub_22F32D820(uint64_t a1, int a2, unsigned int a3, int a4, unint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  int v11;

  if (a5 < 0x10)
    return 1;
  v9 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 57)
    goto LABEL_9;
  a5 = *(_QWORD *)(v9 + 8);
  if (a5 >= 0x10)
  {
    v10 = *(_QWORD **)(v9 + 24);
    if (v10)
    {
      v11 = a3;
      return sub_22F3C109C(*(_QWORD *)(a1 + 88), a2, v11, a4, (uint64_t)v10);
    }
LABEL_9:
    v11 = a3;
    v10 = sub_22EF579A8(*(_QWORD *)(a1 + 88), a5, a3);
    return sub_22F3C109C(*(_QWORD *)(a1 + 88), a2, v11, a4, (uint64_t)v10);
  }
  return 1;
}

uint64_t sub_22F32D8C8(uint64_t result, int a2, int a3)
{
  uint64_t v3;

  switch(a3)
  {
    case 204:
      v3 = 1;
      return sub_22EB254F4(result, a2, v3);
    case 205:
      v3 = 6;
      return sub_22EB254F4(result, a2, v3);
    case 206:
    case 207:
      __break(1u);
      return result;
    case 208:
      v3 = 3;
      return sub_22EB254F4(result, a2, v3);
    case 209:
      v3 = 4;
      return sub_22EB254F4(result, a2, v3);
    case 210:
      v3 = 2;
      return sub_22EB254F4(result, a2, v3);
    case 211:
      v3 = 5;
      return sub_22EB254F4(result, a2, v3);
    default:
      v3 = 0;
      return sub_22EB254F4(result, a2, v3);
  }
}

unint64_t *sub_22F32D92C(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v7[3];
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[16];

  v2 = (unint64_t *)a2;
  v3 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
  v4 = *(_DWORD *)(v3 - 1152);
  *(_DWORD *)(v3 - 576) = v4;
  if (v4 > 3 || v4 == 2)
  {
    v7[1] = 0;
    v7[2] = 0;
    v7[0] = (_QWORD *)a1;
    v8 = 0;
    v9 = v13;
    v10 = v13;
    v11 = 2;
    v12 = 0;
    v2 = sub_22EB4DB90(v7, a2);
    sub_22F2F4694((uint64_t)v7);
  }
  return v2;
}

unint64_t sub_22F32D9C4(uint64_t a1, unint64_t a2, __n128 a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v8;
  uint64_t v9[3];
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE v15[16];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
  v5 = *(_DWORD *)(v4 - 1152);
  *(_DWORD *)(v4 - 576) = v5;
  if (v5 > 3 || v5 == 2)
  {
    v9[1] = 0;
    v9[2] = 0;
    v9[0] = a1;
    v10 = 0;
    v11 = v15;
    v12 = v15;
    a3.n128_u64[0] = 2;
    v13 = 2;
    v14 = 0;
    sub_22EB4D054(v9, a2, a3);
    v3 = v8;
    sub_22F2F4694((uint64_t)v9);
  }
  return v3;
}

uint64_t sub_22F32DA5C(_QWORD *a1, unsigned int a2, unsigned int a3, int a4, unint64_t a5, uint64_t a6)
{
  unint64_t *v6;
  uint64_t v8;

  if (!a5)
    return 1;
  if (!a4)
    return sub_22EB28F24(a1, a5, a2, a3);
  if (a5 >= 0x10)
  {
    v6 = 0;
    v8 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
    if (v8)
    {
      if (*(_BYTE *)(v8 + 16) == 57)
        v6 = *(unint64_t **)(v8 + 24);
    }
  }
  else
  {
    v6 = 0;
  }
  return sub_22EB28664((uint64_t)a1, v6, a2, a3, a6);
}

uint64_t sub_22F32DAC4(_QWORD *a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5)
{
  unint64_t v9;

  v9 = sub_22EB29350(a1, a2, a5);
  if ((v9 & 1) != 0)
    return 1;
  else
    return sub_22EB2941C(a1, a2, a3, a4 != 33, v9 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22F32DB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[12392];
  uint64_t v14;

  v0 = MEMORY[0x24BDAC7A8]();
  v14 = *MEMORY[0x24BDAC8D0];
  v12 = v1;
  v7 = 9;
  v8 = 0;
  v9 = v2;
  v10 = 0;
  v11 = 0;
  sub_22F0D5A50(v1);
  v6[0] = (v3 << 32) | 2;
  v6[1] = 0;
  sub_22EC395BC(v13, v0, &v7, v6, &v12, 1, 0, 1);
  v4 = sub_22EC3DF80((int)v13, v0);
  sub_22EC3CE2C((uint64_t)v13);
  return v4;
}

uint64_t sub_22F32DC14(uint64_t a1)
{
  unsigned int v1;
  _OWORD *v2;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22EB892A8(a1);
  v2 = (_OWORD *)(*(_QWORD *)a1 + 48 * v1);
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  LODWORD(v2) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v2;
  return *(_QWORD *)a1 + 48 * v2 - 48;
}

uint64_t sub_22F32DC58(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22EB89380(a1);
  v2 = (_OWORD *)(*(_QWORD *)a1 + 32 * v1);
  *v2 = 0u;
  v2[1] = 0u;
  v3 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v3;
  return *(_QWORD *)a1 + 32 * v3 - 32;
}

void sub_22F32DC94(uint64_t a1, _DWORD *a2, char a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];
  char v8;
  _QWORD *v9;
  uint64_t v10;

  v7[0] = *(_QWORD *)(a1 + 88);
  v7[1] = a1;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (a5)
  {
    v5 = 8 * a5;
    v6 = a4;
    while ((_DWORD *)*v6 != a2)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v6 = &a4[a5];
        break;
      }
    }
  }
  else
  {
    v6 = a4;
  }
  if (a5 == v6 - a4)
    sub_22EB88244((uint64_t)v7, a2);
}

BOOL sub_22F32DD04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 78)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F32DD64(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t v6;

  if (a3 >= 0x10)
  {
    v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v6 && *(_BYTE *)(v6 + 16) == 57)
      a3 = *(_QWORD *)(v6 + 8);
  }
  else
  {
    a3 = 0;
  }
  return sub_22F32DD9C(a1, a2, a3, a4, a5);
}

uint64_t sub_22F32DD9C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20[24];
  uint64_t v21;
  uint64_t v22;

  v10 = *(_QWORD *)(a2 + 8);
  v21 = v10;
  v22 = a3;
  v11 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v11 + 17) & 4) != 0
    || (v12 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0),
        (*(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    || (v13 = sub_22EF5CDF0(a1[11], v11), v13 == sub_22EF5CDF0(a1[11], *v12)))
  {
    v14 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
    return sub_22E51EDA8(v14, (_DWORD *)a2, a3, 0, 0, a4, a5);
  }
  else
  {
    sub_22E8FCA40(a1, a4, 0xE32u, 0, (uint64_t)v20);
    v16 = sub_22E8901B8((uint64_t)v20, &v22);
    v17 = sub_22E8901B8(v16, &v21);
    sub_22F0D4E74(a2);
    v19 = v18;
    sub_22E8906A0(v17, &v19);
    sub_22E903BEC(v20);
    return 1;
  }
}

uint64_t sub_22F32DEB8(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t *v5;
  uint64_t v8;

  if (a3 >= 0x10)
  {
    v5 = 0;
    v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v8 && *(_BYTE *)(v8 + 16) == 57)
      v5 = *(uint64_t **)(v8 + 24);
  }
  else
  {
    v5 = 0;
  }
  return sub_22F310E84(a1, a2, v5, a4, a5);
}

uint64_t sub_22F32DEF8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  if (a3 >= 0x10)
  {
    v4 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v4 && *(_BYTE *)(v4 + 16) == 57)
    {
      if (*(_QWORD *)(v4 + 24))
        return sub_22EB34874();
      a3 = *(_QWORD *)(v4 + 8);
    }
  }
  else
  {
    a3 = 0;
  }
  sub_22EF579A8(*(_QWORD *)(a1 + 88), a3, 0);
  return sub_22EB34874();
}

uint64_t sub_22F32DF80(unsigned int *a1, _QWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  if (v2 == 32)
    return 1;
  if (v2 != 10)
    return 43;
  sub_22F32D3A8(a1, a2);
  return 44;
}

BOOL sub_22F32DFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 29 > 1)
    return 0;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v6 - 29) > 1)
    return 0;
  if (*(_BYTE *)(v5 + 16) != 29)
  {
    if (v6 == 29)
    {
      v5 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
      v4 = *v3;
    }
    else
    {
      v5 = 0;
    }
  }
  if (!v4 || *(_BYTE *)(v4 + 16) != 29)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
      v4 = sub_22F10CF48(v4);
    else
      v4 = 0;
  }
  return *(_DWORD *)(v5 + 40) == *(_DWORD *)(v4 + 40) && *(_DWORD *)(v5 + 44) == *(_DWORD *)(v4 + 44);
}

BOOL sub_22F32E0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;

  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = sub_22EB35B94(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  return (!v7 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56)
      && (!sub_22EB35B94(v8)
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56)
      && sub_22EB35AD4(a1, a2, a3);
}

BOOL sub_22F32E16C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BOOL8 v12;
  unsigned int v14;
  unsigned int v15[24];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2;
  v7 = a1;
  v17 = a3;
  v18 = a2;
  v16 = a4;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16)
     - 29;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 29 > 1)
  {
    if (v8 > 1)
    {
LABEL_10:
      v12 = 0;
      *a5 = 26;
      return v12;
    }
    v14 = 3647;
LABEL_8:
    sub_22E8FCA40(a1, a2, v14, 0, (uint64_t)v15);
    v9 = sub_22E8901B8((uint64_t)v15, &v17);
    v10 = &v16;
    goto LABEL_4;
  }
  if (v8 <= 1)
  {
    if (sub_22F32DFDC((uint64_t)a1, a4, a3))
      goto LABEL_10;
    LODWORD(a2) = v6;
    a1 = v7;
    v14 = 3648;
    goto LABEL_8;
  }
  sub_22E8FCA40(a1, a2, 0xE3Fu, 0, (uint64_t)v15);
  v9 = sub_22E8901B8((uint64_t)v15, &v16);
  v10 = &v17;
LABEL_4:
  v11 = sub_22E8901B8(v9, v10);
  v12 = *(_BYTE *)(sub_22E8906A0(v11, &v18) + 80) != 0;
  sub_22E903BEC(v15);
  return v12;
}

BOOL sub_22F32E2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unsigned int v19[24];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a2;
  v21 = a3;
  v22 = a2;
  v20 = a4;
  v10 = a4 & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 < 2
    || sub_22F110744(v11, *(_QWORD *)(a1 + 88)))
  {
    if (sub_22F32E0C8(a1, a4, a3))
    {
      v17 = 0;
      *a5 = 1;
      return v17;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
       - 55 >= 2)
      v14 = 3649;
    else
      v14 = 3651;
    v12 = v8;
    v13 = (_QWORD *)a1;
  }
  else
  {
    v12 = v8;
    v13 = (_QWORD *)a1;
    v14 = 3650;
  }
  sub_22E8FCA40(v13, v12, v14, 0, (uint64_t)v19);
  v15 = sub_22E8901B8((uint64_t)v19, &v21);
  v16 = sub_22E8901B8(v15, &v20);
  v17 = *(_BYTE *)(sub_22E8906A0(v16, &v22) + 80) != 0;
  sub_22E903BEC(v19);
  return v17;
}

uint64_t sub_22F32E3C4(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  unint64_t v6;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19[24];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a4;
  v8 = a2;
  v9 = a1;
  v21 = a3;
  v22 = a2;
  v10 = *(_QWORD *)(a4 + 8);
  v20 = v10;
  v11 = v10 & 0xFFFFFFFFFFFFFFF0;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  if ((v12 - 55) <= 1)
  {
    if (sub_22F32E0C8((uint64_t)a1, v10, a3))
    {
      v18 = v9[9];
      if ((*(_DWORD *)(v18 + 52) & 0x40000000) == 0
        || (*(_BYTE *)(v18 + 136) & 1) != 0
        || *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        *a5 = 1;
        return v6;
      }
    }
    v13 = v8;
    a1 = v9;
    v14 = 3646;
LABEL_4:
    sub_22E8FCA40(a1, v13, v14, 0, (uint64_t)v19);
    v15 = sub_22E8901B8((uint64_t)v19, &v21);
    v16 = sub_22E8901B8(v15, &v20);
    sub_22E8906A0(v16, &v22);
    sub_22E903BEC(v19);
    return 1;
  }
  if (v12 == 39)
  {
    v13 = v8;
    v14 = 3650;
    goto LABEL_4;
  }
  *a5 = 27;
  return sub_22EB35F48((uint64_t)a1, a3, a4);
}

uint64_t sub_22F32E518(_QWORD *a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19[25];
  _BOOL4 v20;

  v6 = a2;
  v8 = sub_22EFFBE1C(a2, a1[11], 2);
  if (v8)
  {
    v9 = v8;
    v10 = (unsigned __int8 *)v6;
    v6 = a3;
  }
  else
  {
    v9 = sub_22EFFBE1C(a3, a1[11], 2);
    v10 = (unsigned __int8 *)a3;
  }
  if (v9 < 2)
    return 0;
  if (v9 != 2
    || (v12 = sub_22EFFA6B0(v10),
        sub_22EFF605C((uint64_t)v12),
        v19[0] = v13,
        result = sub_22F308B18((uint64_t)a1, v19, "NULL", 4),
        (_DWORD)result))
  {
    v20 = v9 == 3;
    sub_22E8FCA40(a1, a4, 0x1354u, 0, (uint64_t)v19);
    v18 = *(_QWORD *)(v6 + 8);
    v14 = sub_22E8901B8((uint64_t)v19, &v18);
    v15 = sub_22E8900C4(v14, (int *)&v20);
    sub_22F0D4E74(v6);
    v17 = v16;
    sub_22E8906A0(v15, &v17);
    sub_22E903BEC((unsigned int *)v19);
    return 1;
  }
  return result;
}

uint64_t sub_22F32E638(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75[24];
  uint64_t v76;
  unint64_t v77;

  v8 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v9 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v76 = v9;
  v77 = v8;
  v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22EB375F0(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
  {
    v11 = sub_22E583AD4(a1[11]);
    v12 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) | v9 & 7) == (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) | v11 & 7))
    {
LABEL_3:
      v13 = *a3 & 0xFFFFFFFFFFFFFFFELL;
      v14 = (uint64_t)a1;
      v15 = v8;
      v16 = 43;
LABEL_4:
      *a3 = sub_22E90092C(v14, v13, v15, v16, 0, 0);
      return v8;
    }
  }
  else
  {
    v12 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  }
  if (sub_22EB375F0(*v12))
  {
    v17 = sub_22E583AD4(a1[11]);
    if ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7) == (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) | v17 & 7))
      goto LABEL_12;
  }
  if (sub_22EB3763C(*v10))
  {
    v18 = sub_22E583A80(a1[11]);
    if ((v12[1] | v9 & 7) == (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 8) | v18 & 7))
      goto LABEL_3;
  }
  if (sub_22EB3763C(*v12))
  {
    v19 = sub_22E583A80(a1[11]);
    if ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7) == (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8) | v19 & 7))
    {
LABEL_12:
      v20 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      v21 = (uint64_t)a1;
      v22 = v9;
      v23 = 43;
LABEL_13:
      *a2 = sub_22E90092C(v21, v20, v22, v23, 0, 0);
      return v9;
    }
  }
  v25 = a1[11];
  v26 = sub_22F36E228(v25);
  v27 = *(_QWORD *)(v26 + 48);
  if (v27)
    v28 = v27 & 0xFFFFFFFFFFFFFFF0;
  else
    v28 = sub_22EF6462C(v25, v26);
  if (v28 == v8)
  {
    v29 = sub_22EB37688(a1[11]);
    if ((v12[1] | v9 & 7) == (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8) | v29 & 7))
    {
LABEL_19:
      v13 = *a3 & 0xFFFFFFFFFFFFFFFELL;
      v14 = (uint64_t)a1;
      v15 = v8;
      v16 = 1;
      goto LABEL_4;
    }
  }
  v30 = a1[11];
  v31 = sub_22F36E228(v30);
  v32 = *(_QWORD *)(v31 + 48);
  if (v32)
    v33 = v32 & 0xFFFFFFFFFFFFFFF0;
  else
    v33 = sub_22EF6462C(v30, v31);
  if (v33 == v9)
  {
    v34 = sub_22EB37688(a1[11]);
    if ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7) == (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) | v34 & 7))
    {
      v20 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      v21 = (uint64_t)a1;
      v22 = v9;
      v23 = 1;
      goto LABEL_13;
    }
  }
  v35 = *v10;
  v36 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v36 == 32)
  {
    v37 = *v12;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
    {
      if ((*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7) == (v12[1] | v9 & 7))
        return v8;
      if (*(_BYTE *)(v35 + 16) != 32)
      {
        v35 = sub_22F10CF48(*v10);
        v37 = *v12;
      }
      if (!v37 || *(_BYTE *)(v37 + 16) != 32)
        v37 = sub_22F10CF48(v37);
      v38 = v37;
      v39 = sub_22EF6F4E4(a1[11], v35, v37);
      if (v39 <= 0xF)
      {
        if (sub_22EF6ED94(a1[11], v35, v38))
        {
          if (sub_22F32EDD0(v38))
            v39 = v9;
          else
            v39 = v8;
        }
        else if (sub_22EF6ED94(a1[11], v38, v35))
        {
          if (sub_22F32EDD0(v35))
            v39 = v8;
          else
            v39 = v9;
        }
        else
        {
          if ((!sub_22E491464(v35) && !sub_22E491464(v38) || !sub_22EF6E900(a1[11], v35, v38, 1))
            && !sub_22EB3763C(*v10)
            && !sub_22EB3763C(*v12))
          {
            sub_22E8FCA40(a1, a4, 0x14FDu, 0, (uint64_t)v75);
            v65 = sub_22E8901B8((uint64_t)v75, (uint64_t *)&v77);
            v66 = sub_22E8901B8(v65, &v76);
            sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
            v74 = v67;
            v68 = sub_22E8906A0(v66, &v74);
            sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
            v73 = v69;
            sub_22E8906A0(v68, &v73);
            sub_22E903BEC(v75);
            v70 = a1[11];
            v71 = sub_22F36E1B8(v70);
            v72 = *(_QWORD *)(v71 + 48);
            if (v72)
              v8 = v72 & 0xFFFFFFFFFFFFFFF0;
            else
              v8 = sub_22EF6462C(v70, v71);
            v40 = *a2 & 0xFFFFFFFFFFFFFFFELL;
            v41 = (uint64_t)a1;
            v42 = v8;
            goto LABEL_35;
          }
          v62 = a1[11];
          v63 = sub_22F36E1B8(v62);
          v64 = *(_QWORD *)(v63 + 48);
          if (v64)
            v39 = v64 & 0xFFFFFFFFFFFFFFF0;
          else
            v39 = sub_22EF6462C(v62, v63);
        }
      }
      v40 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      v41 = (uint64_t)a1;
      v8 = v39;
      v42 = v39;
LABEL_35:
      v43 = 1;
LABEL_36:
      *a2 = sub_22E90092C(v41, v40, v42, v43, 0, 0);
      goto LABEL_19;
    }
  }
  if (sub_22F10DFD8(*v10))
  {
    v44 = *v12;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
    {
      if ((*(_WORD *)(a1[9] + 148) & 2) == 0)
      {
        if (*(_BYTE *)(v35 + 16) != 39)
        {
          v35 = sub_22F10CF48(v35);
          v44 = *v12;
        }
        v45 = *(_QWORD *)(v35 + 32);
        if (!v44 || *(_BYTE *)(v44 + 16) != 32)
          v44 = sub_22F10CF48(v44);
        v46 = *(_QWORD *)(v44 + 32);
        v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v47 & 8) != 0)
        {
          v49 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v48 = 0;
          v49 = 0;
        }
        v60 = sub_22EA28548(a1[11], v45, v48 | v49 | (v47 | v46) & 7);
        v8 = sub_22EF5B848(a1[11], v60, 0);
        v40 = *a2 & 0xFFFFFFFFFFFFFFFELL;
        v41 = (uint64_t)a1;
        v42 = v8;
        v43 = 5;
        goto LABEL_36;
      }
LABEL_60:
      sub_22E8FCA40(a1, a4, 0xBECu, 0, (uint64_t)v75);
      v55 = sub_22E8901B8((uint64_t)v75, (uint64_t *)&v77);
      v56 = sub_22E8901B8(v55, &v76);
      sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
      v74 = v57;
      v58 = sub_22E8906A0(v56, &v74);
      sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
      v73 = v59;
      sub_22E8906A0(v58, &v73);
      sub_22E903BEC(v75);
      v8 = 0;
      *a3 = 1;
      *a2 = 1;
      return v8;
    }
  }
  if (v36 != 32)
    return 0;
  v50 = *v12;
  if (!sub_22F10DFD8(*v12))
    return 0;
  if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
    goto LABEL_60;
  if (*(_BYTE *)(v35 + 16) != 32)
  {
    v35 = sub_22F10CF48(v35);
    v50 = *v12;
  }
  v51 = *(_QWORD *)(v35 + 32);
  if (!v50 || *(_BYTE *)(v50 + 16) != 39)
    v50 = sub_22F10CF48(v50);
  v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v52 & 8) != 0)
  {
    v54 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v53 = 0;
    v54 = 0;
  }
  v61 = sub_22EA28548(a1[11], *(_QWORD *)(v50 + 32), v53 | v54 | (v52 | v51) & 7);
  v8 = sub_22EF5B848(a1[11], v61, 0);
  *a3 = sub_22E90092C((uint64_t)a1, *a3 & 0xFFFFFFFFFFFFFFFELL, v8, 5, 0, 0);
  *a2 = sub_22E90092C((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v8, 1, 0, 0);
  return v8;
}

uint64_t sub_22F32EDD0(uint64_t a1)
{
  if (sub_22EB3763C(a1) || sub_22EB375F0(a1))
    return 1;
  else
    return sub_22EB5548C(a1);
}

uint64_t sub_22F32EE14(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7;
  _BYTE *v8;
  _BYTE v9[24];

  sub_22E5BBE34((uint64_t)v9, a2, a4, 0, 0, 0);
  v8 = v9;
  v7 = 0;
  return sub_22EB376DC(a1, a3, (uint64_t *)&v8, &v7, 0);
}

unsigned int *sub_22F32EE84(_QWORD *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20[24];
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;

  sub_22EB39DB0(&v23, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  sub_22EB39DB0(&v21, (unsigned __int8 *)(*a4 & 0xFFFFFFFFFFFFFFFELL));
  sub_22E8FCA40(a1, a2, 0x1376u, 0, (uint64_t)v20);
  v19 = *((_QWORD *)v23 + 1);
  v8 = sub_22E8901B8((uint64_t)v20, &v19);
  v18 = *((_QWORD *)v21 + 1);
  v9 = sub_22E8901B8(v8, &v18);
  sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
  v17 = v10;
  v11 = sub_22E8906A0(v9, &v17);
  sub_22F0D4E74(*a4 & 0xFFFFFFFFFFFFFFFELL);
  v16 = v12;
  sub_22E8906A0(v11, &v16);
  result = sub_22E903BEC(v20);
  if (v24)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v24 + 24), 0x17F9u, 0, (uint64_t)v20);
    LODWORD(v18) = 0;
    v14 = sub_22E8900C4((uint64_t)v20, (int *)&v18);
    v19 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
    sub_22E8901B8(v14, &v19);
    result = sub_22E903BEC(v20);
  }
  if (v22)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v22 + 24), 0x17F9u, 0, (uint64_t)v20);
    LODWORD(v18) = 1;
    v15 = sub_22E8900C4((uint64_t)v20, (int *)&v18);
    v19 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    sub_22E8901B8(v15, &v19);
    return sub_22E903BEC(v20);
  }
  return result;
}

unsigned int *sub_22F32F00C(_QWORD *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32[24];
  uint64_t v33;
  uint64_t v34;

  v8 = *a3;
  v34 = *((_QWORD *)sub_22EFFEB40((unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL)) + 1);
  v9 = *a4;
  v33 = *((_QWORD *)sub_22EFFEB40((unsigned __int8 *)(*a4 & 0xFFFFFFFFFFFFFFFELL)) + 1);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16)
      - 57;
  if (v10 >= 0xFFFFFFFE
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 57 > 0xFFFFFFFD)
  {
    sub_22E8FCA40(a1, a2, 0x137Bu, 0, (uint64_t)v32);
    LODWORD(v28) = 1;
    v22 = sub_22E8900C4((uint64_t)v32, (int *)&v28);
    v23 = sub_22E8901B8(v22, &v34);
    v24 = sub_22E8901B8(v23, &v33);
    sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v30 = v25;
    v19 = sub_22E8906A0(v24, &v30);
    sub_22F0D4E74(*a4 & 0xFFFFFFFFFFFFFFFELL);
    v29 = v26;
    v21 = &v29;
  }
  else
  {
    v12 = __CFADD__(v10, 2);
    if (v10 >= 0xFFFFFFFE)
      v13 = v8;
    else
      v13 = v9;
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if (v12)
      v15 = v9;
    else
      v15 = v8;
    v16 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E8FCA40(a1, a2, 0x137Bu, 0, (uint64_t)v32);
    v31 = 0;
    v17 = sub_22E8900C4((uint64_t)v32, &v31);
    v30 = *(_QWORD *)(v14 + 8);
    v18 = sub_22E8901B8(v17, &v30);
    v29 = *((_QWORD *)sub_22EFFEB40(v16) + 1);
    v19 = sub_22E8901B8(v18, &v29);
    sub_22F0D4E74(v14);
    v28 = v20;
    v21 = &v28;
  }
  sub_22E8906A0(v19, v21);
  return sub_22E903BEC(v32);
}

uint64_t *sub_22F32F1C8(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;

  if ((a5 & 1) == 0)
  {
    v10 = sub_22EB1B954((uint64_t)a1, (void *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    *a2 = v10;
    if ((v10 & 1) != 0)
      return 0;
  }
  v11 = sub_22EB1B954((uint64_t)a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  *a3 = v11;
  if ((v11 & 1) != 0)
    return 0;
  v12 = *(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(_BYTE *)(v12 + 16) == 29;
  else
    v13 = 0;
  if (!v13)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 29)
    {
      v12 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0));
      v11 = *a3;
    }
    else
    {
      v12 = 0;
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_BYTE *)(v14 + 16) == 29;
  else
    v15 = 0;
  if (!v15)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 29)
      return sub_22EB3B570((uint64_t)a1, a2, a3, a4, a5);
    v14 = sub_22F10CF48(v14);
  }
  if (v12)
    v16 = v14 == 0;
  else
    v16 = 1;
  if (v16)
    return sub_22EB3B570((uint64_t)a1, a2, a3, a4, a5);
  if (*(_DWORD *)(v12 + 44) == *(_DWORD *)(v14 + 40)
    && (*(_QWORD *)((*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v12 + 32) & 7) == (*(_QWORD *)((*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v14 + 32) & 7))
  {
    return (uint64_t *)sub_22F36BBA8(a1[11], *(_QWORD *)(v12 + 32), *(unsigned int *)(v12 + 40), *(unsigned int *)(v14 + 44));
  }
  sub_22F32EE84(a1, a4, a2, a3);
  return 0;
}

uint64_t sub_22F32F390(int a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v6;
  int v7;

  v2 = sub_22EFFA6B0(a2);
  v3 = *v2;
  v4 = v2;
  result = 4;
  switch(v3)
  {
    case 201:
      return 0;
    case 202:
      v6 = sub_22EFFE844(*((unsigned __int8 **)v4 + 2));
      v7 = *v6;
      result = 2;
      if ((v7 - 153) > 0x2A)
        goto LABEL_13;
      if (((1 << (v7 + 103)) & 0x40010020002) != 0)
        return result;
      if (v7 == 153)
      {
        if ((*(_DWORD *)v6 & 0x1F80000) != 0x780000)
          return 3;
      }
      else
      {
LABEL_13:
        if (v7 != 117)
          return 3;
      }
      return result;
    case 203:
      return 1;
    case 204:
      return result;
    default:
      if (v3 == 114)
        return 5;
      else
        return 6;
  }
}

uint64_t sub_22F32F45C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22F1113D8(v3, *(_QWORD *)(a1 + 88));
  v6 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_22EF60A6C(*(_QWORD *)(a1 + 88), v6, 1);
  sub_22F36AD2C(*(_QWORD *)(a1 + 88), v4);
  return sub_22EF60B50(*(_QWORD *)(a1 + 88), v7, v9);
}

unint64_t sub_22F32F4EC(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = sub_22EB36814(a1, a2, a3, a4, 0, 1, 0, (*(_QWORD *)(a1[9] + 100) & 0x2000000000) != 0, 0);
  if (v8 > 0xF)
  {
    v9 = a1[9];
    if ((*(_DWORD *)(v9 + 52) & 0x40000000) == 0
      || (v11 = *(_QWORD *)(v9 + 56), (v11 & 0x100000000) != 0)
      || v11 > 0x77
      || (v13 = a1[9], v14 = v8, v12 = sub_22F110DD0(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)), v9 = v13, v8 = v14, !v12))
    {
      if ((*(_BYTE *)(v9 + 1) & 1) == 0)
      {
        v15 = v8;
        if (*(_BYTE *)(sub_22E3E4B64(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)) + 16) != 56)
        {
          sub_22F32F00C(a1, a4, a2, a3);
          return 0;
        }
        v9 = a1[9];
        v8 = v15;
      }
      if ((*(_BYTE *)(v9 + 104) & 0x20) == 0 || sub_22F11057C(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
        return sub_22EB423E0((uint64_t)a1, *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8));
    }
  }
  sub_22F32EE84(a1, a4, a2, a3);
  return 0;
}

uint64_t sub_22F32F628(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;

  sub_22EFC9100(a4, *(_QWORD *)(a1 + 88));
  v8 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  v9 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 0);
  *(_BYTE *)v8 = 104;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(104);
    ++*((_DWORD *)v10 + 2);
  }
  v11 = *(_DWORD *)v8 & 0xFFFC00FF;
  *(_QWORD *)(v8 + 8) = v9;
  *(_DWORD *)(v8 + 16) = a2;
  *(_DWORD *)(v8 + 20) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  *(_DWORD *)v8 = v11;
  return v8;
}

uint64_t sub_22F32F6E0(uint64_t a1)
{
  return sub_22EB48CC8(a1, *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576), 0, 3);
}

uint64_t sub_22F32F704(uint64_t a1)
{
  *(_DWORD *)(a1 + 1704) = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 568);
  *(_WORD *)(a1 + 1693) = 0;
  sub_22EB4E16C((llvm::SmallPtrSetImplBase *)(a1 + 1776));
  *(_DWORD *)(a1 + 1848) = 0;
  return sub_22EB48E64(a1);
}

uint64_t sub_22F32F754(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, int a5)
{
  int v9;

  v9 = sub_22ED55F1C(a1, a2);
  return sub_22EB497A8(a1, a3, a4, a5, v9);
}

uint64_t sub_22F32F79C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unint64_t a5, unsigned int *a6, uint64_t a7, int a8)
{
  uint64_t v14;
  uint64_t *v15;

  if (a5 < 0x10)
    return 1;
  v14 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 57)
    goto LABEL_7;
  a5 = *(_QWORD *)(v14 + 8);
  if (a5 < 0x10)
    return 1;
  v15 = *(uint64_t **)(v14 + 24);
  if (!v15)
LABEL_7:
    v15 = sub_22EF579A8(*(_QWORD *)(a1 + 88), a5, a4);
  return sub_22EB49A78(a1, a3, v15, a6, a7, a8);
}

uint64_t sub_22F32F84C(_QWORD *a1, int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22F3AD66C(a1[11], a1[27], a2);
  v6 = v5;
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
  {
    v9 = *(_QWORD *)(v5 + 16);
    v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 4) != 0)
      v10 = (_QWORD *)*v10;
    v11 = sub_22EC5250C((uint64_t)a1, (unint64_t)v10);
    if (v11)
    {
      v13 = v12;
      *(_DWORD *)(v6 + 116) = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 24))(v11, v6);
      *(_QWORD *)(v6 + 120) = v13;
    }
  }
  sub_22F308FD8((uint64_t)a1, a3, v6);
  sub_22EFCCFA0(a1[27], v6);
  v7 = v6 + 40;
  if (!v6)
    v7 = 0;
  if (a3)
    *(_QWORD *)(a3 + 360) = v7;
  a1[27] = v7;
  *(_BYTE *)(sub_22F30914C((uint64_t)a1) + 1408) = 1;
  return sub_22EB48CC8((uint64_t)a1, 6, 0, 3);
}

_BYTE *sub_22F32F928(uint64_t a1)
{
  uint64_t v2;
  _BYTE *result;
  _BYTE *v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 1704) = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 568);
  *(_WORD *)(a1 + 1693) = 0;
  sub_22EB4E16C((llvm::SmallPtrSetImplBase *)(a1 + 1776));
  *(_DWORD *)(a1 + 1848) = 0;
  v2 = sub_22EB48E64(a1);
  *(_QWORD *)(a1 + 216) = sub_22EA044C0(v2, *(_QWORD *)(a1 + 216));
  sub_22E904AD8(a1, 0, 0, 0, (uint64_t *)&v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if ((result[8] & 7) != 0 || *(_QWORD *)(v5 + 1888))
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
    else
      *(_QWORD *)(v5 + 1888) = result;
  }
  return result;
}

uint64_t sub_22F32F9E0(_QWORD *a1, unsigned int a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t *v5;
  uint64_t v8;

  if (a4 >= 0x10)
  {
    v5 = 0;
    v8 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v8 && *(_BYTE *)(v8 + 16) == 57)
      v5 = *(uint64_t **)(v8 + 24);
  }
  else
  {
    v5 = 0;
  }
  return sub_22EB4B7A8(a1, a2, a3, v5, a5);
}

uint64_t sub_22F32FA20(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = (unsigned __int8 *)(*(_QWORD *)(v3 + 15088) + *(_QWORD *)(**(_QWORD **)(v3 + 15088) - 24));
  v5 = *v4;
  if (v4[4] == v5)
  {
    v6 = 16480;
  }
  else if (v4[20] == v5)
  {
    v6 = 16488;
  }
  else
  {
    v6 = 16496;
  }
  v7 = *(_QWORD *)(v3 + v6);
  v8 = sub_22E3CD3D4(v3 + 2032, 24, 3);
  *(_BYTE *)v8 = -81;
  if (byte_255E04EB3)
  {
    v9 = sub_22F0D3748(175);
    ++*((_DWORD *)v9 + 2);
  }
  v10 = *(_DWORD *)v8 & 0xFFFC00FF;
  *(_QWORD *)(v8 + 8) = v7;
  *(_DWORD *)(v8 + 16) = a2;
  *(_DWORD *)v8 = v10;
  return v8;
}

unsigned int *sub_22F32FAE8(uint64_t a1, char a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  unsigned int *v12;

  v12 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  return sub_22F3C215C(v12, *(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6);
}

uint64_t sub_22F32FB54(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, a2, a3);
}

unsigned int *sub_22F32FB64@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  int v8;
  unsigned int v9[24];

  sub_22E8FCA40((_QWORD *)a1, a2, 0x1478u, 0, (uint64_t)v9);
  v8 = (**(_DWORD **)(a1 + 72) >> 8) & 1;
  v5 = sub_22E89519C((uint64_t)v9, (unsigned int *)&v8);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(_OWORD *)(a3 + 9) = v6;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a3 + 32, v5 + 32);
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v9);
}

uint64_t sub_22F32FC00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22F331064(a1, a2, a3);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * a3);
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

uint64_t sub_22F32FC30(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  v6 = 0;
  return sub_22EB4EE10(a1, a2, a3, a4, a5, 1, &v7, &v6, 0);
}

uint64_t sub_22F32FC6C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = result + 8848;
    v7 = 8 * v2;
    do
    {
      result = sub_22EB520E4(v4, *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + v5 + 32), (unsigned __int8 *)a2, 1, v6);
      v5 += 8;
    }
    while (v7 != v5);
  }
  return result;
}

uint64_t sub_22F32FCE0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 27) & 1) != 0)
    return sub_22EFDBF50(v2);
  else
    return sub_22F41F330(v2);
}

uint64_t sub_22F32FCF8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v29[4];
  char v30;
  _QWORD v31[4];
  unsigned __int8 v32;
  _QWORD *v33;
  _QWORD v34[2];

  v34[0] = a2;
  v34[1] = a3;
  v33 = v34;
  sub_22EB53AD4(*(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 224), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 232), (uint64_t)&v33, (uint64_t)v31);
  v6 = v32;
  v7 = v31[0];
  v26 = v31[1];
  v9 = v31[2];
  v8 = v31[3];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088);
  v11 = *(_QWORD *)(v10 + 264);
  if (v11)
  {
    sub_22EB53AD4(*(char **)(v10 + 256), v11, (uint64_t)&v33, (uint64_t)v29);
    if (v30)
      v12 = v29[3];
    else
      v12 = 0;
    if (v30)
      v13 = v29[2];
    else
      v13 = 0;
    if (v30)
      v14 = v29[1];
    else
      v14 = 0;
    if (v30)
      v15 = v29[0];
    else
      v15 = 0;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v15 = 0;
    v14 = 0;
  }
  v16 = sub_22F30C218(a1);
  if (v16)
    *(_DWORD *)(v16 + 8) |= 0x800u;
  v17 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 88, 3);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400);
  *(_BYTE *)v17 = -62;
  if (byte_255E04EB3)
  {
    v19 = sub_22F0D3748(194);
    ++*((_DWORD *)v19 + 2);
  }
  v20 = *(_DWORD *)v17;
  if (v6)
    v21 = v9;
  else
    v21 = 0;
  if (v6)
    v22 = v8;
  else
    v22 = 0;
  if (v6)
    v23 = v7;
  else
    v23 = 0;
  v24 = v26;
  if (!v6)
    v24 = 0;
  *(_QWORD *)(v17 + 8) = v18;
  *(_QWORD *)(v17 + 16) = v23;
  *(_QWORD *)(v17 + 24) = v24;
  *(_QWORD *)(v17 + 32) = v21;
  *(_QWORD *)(v17 + 40) = v22;
  *(_QWORD *)(v17 + 48) = v15;
  *(_QWORD *)(v17 + 56) = v14;
  *(_QWORD *)(v17 + 64) = v13;
  *(_QWORD *)(v17 + 72) = v12;
  *(_DWORD *)(v17 + 80) = a4;
  *(_DWORD *)(v17 + 84) = a5;
  *(_DWORD *)v17 = v20 & 0xFFFC00FF;
  return v17;
}

uint64_t sub_22F32FE78(_QWORD *a1, int a2, void *a3, uint64_t a4, int a5)
{
  unint64_t v10;

  v10 = sub_22EF5B848(a1[11], *(_QWORD *)(a1[11] + 16392), 2u);
  return sub_22EB53C74(a1, a2, a5, v10, a3, a4);
}

uint64_t sub_22F32FEDC(_QWORD *a1, int a2, void *a3, int a4)
{
  unint64_t v8;

  v8 = sub_22EF5B848(a1[11], *(_QWORD *)(a1[11] + 16392), 4u);
  return sub_22EB53C74(a1, a2, a4, v8, a3, 0);
}

uint64_t sub_22F32FF34(_QWORD *a1, void *a2, int a3, int a4)
{
  return sub_22EB54020(a1, a2, 0, a3, a4, 0);
}

uint64_t sub_22F32FF4C(_QWORD *a1, void *a2, int a3, int a4)
{
  return sub_22EB54020(a1, a2, 1, a3, a4, 0);
}

uint64_t sub_22F32FF64(_QWORD *a1, void *a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29[24];
  uint64_t v30;
  unsigned int v31;
  char v32;
  unsigned int v33[24];
  uint64_t v34;
  uint64_t v35;

  v35 = a3;
  v11 = 1;
  v12 = sub_22EB1B954((uint64_t)a1, a2);
  if ((v12 & 1) == 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v34 = v14;
    v15 = sub_22F10DCA4(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0));
    if (!v15)
    {
      sub_22F0D5A50(v13);
      sub_22E8FCA40(a1, v18, 0xD82u, 0, (uint64_t)v33);
      sub_22E8901B8((uint64_t)v33, &v34);
      sub_22E903BEC(v33);
      return 1;
    }
    if (a3)
    {
      v16 = v15;
      if (*(_QWORD *)(v15 + 40) != a3)
      {
        sub_22F00905C(a3, a1[11], 0, (uint64_t)&v30);
        if (v32)
        {
          sub_22F408D44(v16, a1[11], (uint64_t)&v27);
          if (sub_22E4634B4((uint64_t)&v30, (uint64_t)&v27))
          {
            sub_22F0D5A50(v13);
            sub_22E8FCA40(a1, v24, 0xD83u, 0, (uint64_t)v33);
            v25 = sub_22F2F37E0((uint64_t)v33, &v35);
            v26 = *(_QWORD *)(v16 + 40);
            sub_22F2F37E0(v25, &v26);
            sub_22E903BEC(v33);
            v17 = 1;
          }
          else
          {
            v17 = 0;
          }
          if (v28 >= 0x41 && v27)
            MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
        }
        else
        {
          sub_22F0D5A50(a3);
          sub_22E8FCA40(a1, v19, 0xD81u, 0, (uint64_t)v29);
          sub_22E903BEC(v29);
          v17 = 1;
        }
        if (v32 && v31 >= 0x41 && v30)
          MEMORY[0x2348A0E84](v30, 0x1000C8000313F17);
        if (v17)
          return 1;
      }
    }
    v21 = sub_22F369668(a1[11], v14, 3);
    v11 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
    v22 = v35;
    *(_BYTE *)v11 = -27;
    if (byte_255E04EB3)
    {
      v23 = sub_22F0D3748(229);
      ++*((_DWORD *)v23 + 2);
    }
    *(_DWORD *)v11 &= 0xFFFC00FF;
    *(_QWORD *)(v11 + 8) = v21;
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v22;
    *(_BYTE *)(v11 + 32) = a4;
    *(_DWORD *)(v11 + 36) = a5;
    *(_DWORD *)(v11 + 40) = a6;
  }
  return v11;
}

uint64_t sub_22F3301DC(_QWORD *a1, void *a2, uint64_t a3, int a4, int a5)
{
  return sub_22F32FF64(a1, a2, a3, 0, a4, a5);
}

uint64_t sub_22F3301F0(_QWORD *a1, void *a2, uint64_t a3, int a4, int a5)
{
  return sub_22F32FF64(a1, a2, a3, 1, a4, a5);
}

uint64_t sub_22F330204(_QWORD *a1, uint64_t a2, void *a3, _QWORD *a4, int a5, int a6)
{
  return sub_22EB542F0(a1, a2, a3, a4, a5, a6);
}

void sub_22F330210()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22F330224@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &unk_24FAB8500;
  *a2 = v4;
  return result;
}

uint64_t sub_22F330280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  if (*(_DWORD *)(a2 + 24))
    sub_22F24C890(v4, a2 + 16);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 54) = *(_QWORD *)(a2 + 54);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_22EB54B94((_QWORD *)(a1 + 64), *(uint64_t **)(a2 + 64), *(uint64_t **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
  return a1;
}

uint64_t sub_22F33030C(_QWORD *a1)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;

  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v2 = a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
    return llvm::detail::DoubleAPFloat::makeSmallest(v1);
  else
    return llvm::detail::IEEEFloat::makeSmallest(v1);
}

uint64_t sub_22F330354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, int a7)
{
  char *v14;

  *(_BYTE *)a1 = -72;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(184);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 = ((a5 & 3) << 8) & 0xE3FF | ((a6 & 7) << 10) | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_DWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AABC0(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F330408(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12;
  char *v13;
  unsigned int v14;

  v12 = *a2;
  *(_BYTE *)a1 = -69;
  if (byte_255E04EB3)
  {
    v13 = sub_22F0D3748(187);
    ++*((_DWORD *)v13 + 2);
  }
  v14 = v12 & 0x300 | *(_DWORD *)a1 & 0xFFFC00FF | 0x1400;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)a1 = v14;
  *(_DWORD *)(a1 + 4) = a6;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AA800(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F3304BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  char *v17;

  *(_BYTE *)a1 = -65;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(191);
    ++*((_DWORD *)v17 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_DWORD *)(a1 + 48) = a7;
  *(_DWORD *)(a1 + 52) = a8;
  *(_DWORD *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD84(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F330580(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7)
{
  uint64_t v8;
  char *v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = -100;
  if (byte_255E04EB3)
  {
    v16 = a6;
    v13 = a7;
    v14 = a4;
    v15 = a3;
    v12 = a2;
    v11 = a5;
    v10 = sub_22F0D3748(156);
    a5 = v11;
    a4 = v14;
    a3 = v15;
    a2 = v12;
    a7 = v13;
    a6 = v16;
    ++*((_DWORD *)v10 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | ((a5 & 3) << 8);
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a2;
  v8 = 4;
  if (!a7)
    v8 = 0;
  *(_QWORD *)(a1 + 24) = v8 | a3 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(a1 + 32) = a6;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AA82C(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F330644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12)
{
  char v20;
  char *v21;

  v20 = a12;
  *(_BYTE *)a1 = 102;
  if (byte_255E04EB3)
  {
    v21 = sub_22F0D3748(102);
    v20 = a12;
    ++*((_DWORD *)v21 + 2);
  }
  *(_DWORD *)a1 = ((a10 & 3) << 8) & 0xE3FF | ((v20 & 7) << 10) | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a9;
  *(_DWORD *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 20) = a8;
  *(_QWORD *)(a1 + 48) = a6;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AA894(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F330724(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;
  size_t v4;
  void *v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = (unsigned __int8 **)(a1 + 32);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(void **)a2;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v8 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v10 = v9;
    v3 = (unsigned __int8 **)(sub_22F2F1D6C(v8, &v10)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
    v5 = *(void **)a2;
    v4 = *(_QWORD *)(a2 + 8);
  }
  sub_22E3B89A8(v3, v5, v4);
  return a1;
}

uint64_t sub_22F3307C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_BYTE *)a1 = -32;
  if (byte_255E04EB3)
  {
    v12 = a2;
    v13 = a5;
    v10 = a3;
    v11 = a4;
    v9 = sub_22F0D3748(224);
    a3 = v10;
    a4 = v11;
    a2 = v12;
    a5 = v13;
    ++*((_DWORD *)v9 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AA8B0(a1, a6) & 0x1F) << 13);
  *(_DWORD *)(a1 + 4) = a6;
  return a1;
}

uint64_t sub_22F330858(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, int a9, int a10, char a11)
{
  char *v19;

  *(_BYTE *)a1 = -101;
  if (byte_255E04EB3)
  {
    v19 = sub_22F0D3748(155);
    ++*((_DWORD *)v19 + 2);
  }
  *(_DWORD *)a1 = ((a7 & 3) << 8) & 0xE3FF | ((a8 & 7) << 10) | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a9;
  *(_BYTE *)(a1 + 48) = a11;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AA9CC(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F330924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;

  *(_BYTE *)a1 = 114;
  if (byte_255E04EB3)
  {
    v6 = sub_22F0D3748(114);
    ++*((_DWORD *)v6 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAAC4(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F3309A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  char *v14;
  uint64_t v15;

  *(_BYTE *)a1 = -22;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(234);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a3;
  v15 = 4;
  if (!a7)
    v15 = 0;
  *(_QWORD *)(a1 + 24) = v15 | a4 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAA40(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F330A60(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3);
}

uint64_t sub_22F330A70(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22E7930C0((_DWORD *)a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

_QWORD *sub_22F330B28(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, int a7, uint64_t a8, char a9)
{
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  int v17;
  _QWORD *result;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = a2;
  v10 = a1 + 1264;
  v19 = a2;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  if (a3)
    v11 = 2;
  else
    v11 = a4;
  if (a5)
    v12 = 4;
  else
    v12 = 0;
  if (a9)
    v13 = 64;
  else
    v13 = 0;
  v23 = v12 | v11 | v13;
  v14 = (_OWORD *)sub_22E78DF7C(v10, (unint64_t)&v19, 1);
  v15 = (_OWORD *)(*(_QWORD *)(a1 + 1264) + 32 * *(unsigned int *)(a1 + 1272));
  v16 = v14[1];
  *v15 = *v14;
  v15[1] = v16;
  v17 = *(_DWORD *)(a1 + 1272) + 1;
  *(_DWORD *)(a1 + 1272) = v17;
  result = sub_22F283EC0((uint64_t *)(a1 + 1232), &v24);
  *((_DWORD *)result + 2) = v17;
  return result;
}

unsigned int *sub_22F330BD4(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8[24];
  uint64_t v9;
  uint64_t v10;

  v9 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v8);
  v10 = **(_QWORD **)(a1 + 16);
  sub_22E894538((uint64_t)v8, &v10);
  LOBYTE(v10) = sub_22F1113D4(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_22E894E38((uint64_t)v8, (unsigned __int8 *)&v10);
  sub_22E8901B8(v6, &v9);
  return sub_22E903BEC(v8);
}

void sub_22F330C64()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22F330C78(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  double result;

  v2 = *a1;
  if ((v2 & 0x100000) != 0)
  {
    v3 = &a1[6 * ((v2 >> 19) & 1)];
    v5 = v3[12];
    v4 = v3 + 12;
    if (v5)
      *(_QWORD *)&result = sub_22F0F0558(v4, (uint64_t)&v4[4 * ((v2 >> 20) & 1)], a2).n128_u64[0];
  }
  return result;
}

unsigned int *sub_22F330CAC(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8[24];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v8);
  v11 = **(_QWORD **)(a1 + 16);
  sub_22E8AECC4((uint64_t)v8, &v11);
  v10 = **(_QWORD **)(a1 + 24);
  sub_22E8906A0((uint64_t)v8, &v10);
  LOBYTE(v11) = sub_22F1113D4(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_22E894E38((uint64_t)v8, (unsigned __int8 *)&v11);
  sub_22E8901B8(v6, &v9);
  return sub_22E903BEC(v8);
}

void sub_22F330D54()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F330D6C(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9[24];
  uint64_t v10;
  uint64_t v11;

  v10 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v9);
  sub_22F0D4E74(**(_QWORD **)(a1 + 16));
  v11 = v6;
  sub_22E8906A0((uint64_t)v9, &v11);
  LOBYTE(v11) = sub_22F1113D4(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_22E894E38((uint64_t)v9, (unsigned __int8 *)&v11);
  sub_22E8901B8(v7, &v10);
  return sub_22E903BEC(v9);
}

void sub_22F330E00()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F330E18(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8[24];
  uint64_t v9;
  uint64_t v10;

  v9 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v8);
  v10 = **(_QWORD **)(a1 + 16);
  sub_22E8906A0((uint64_t)v8, &v10);
  LOBYTE(v10) = sub_22F1113D4(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_22E894E38((uint64_t)v8, (unsigned __int8 *)&v10);
  sub_22E8901B8(v6, &v9);
  return sub_22E903BEC(v8);
}

void sub_22F330EA8()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F330EC0(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  sub_22F330F3C(a1, (uint64_t)v6);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F330F28()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F330F3C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v5;

  v5 = *(_OWORD *)*(_QWORD *)(a1 + 16);
  v3 = sub_22F116708((uint64_t *)&v5);
  *(_QWORD *)&v5 = v3 | (sub_22F1167E8((uint64_t *)&v5) << 32);
  return sub_22E8906A0(a2, (uint64_t *)&v5);
}

uint64_t sub_22F330F98(uint64_t a1, int *a2, int *a3, __int16 *a4, uint64_t *a5, int *a6)
{
  uint64_t v12;
  unsigned int v13;

  v12 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E907C38(v12 + 576 * *(unsigned int *)(a1 + 8), *a2, *a3, *a4, *a5, *a6);
  sub_22E907A34(a1, v12);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v12;
  v13 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = 0;
  return v12 + 576 * v13 - 576;
}

uint64_t sub_22F331064(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * a3);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

unint64_t sub_22F3310E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = sub_22F0AAB60(v5);
  if ((v6 - 3) < 2)
  {
    if ((*(_BYTE *)(v5 + 8) & 4) != 0)
    {
      v7 = *(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_4;
    }
LABEL_9:
    v7 = 0;
    goto LABEL_4;
  }
  if (v6)
    goto LABEL_9;
  v10 = *(_QWORD *)(v5 + 8);
  if ((v10 & 6) != 0)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v5 + 16);
  v7 = sub_22EF65A30(*(_QWORD *)(a1 + 88), 6, v10 & 0xFFFFFFFFFFFFFFF8, v11, 0);
LABEL_4:
  v8 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v7, a3);
  return sub_22EE7D030(a1, v7, (uint64_t)v8);
}

unint64_t sub_22F331190(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int *v11;
  unint64_t result;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE v18[96];
  unint64_t v19;
  unint64_t v20;
  _BYTE v21[96];

  v8 = (*(_DWORD *)a2 >> 12) & 0x3F;
  if (v8 == 50)
    return 0;
  if (v8 == 34)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 120), 0xC57u, 0, (uint64_t)v21);
    v11 = (unsigned int *)v21;
LABEL_4:
    sub_22E903BEC(v11);
    return 0;
  }
  result = sub_22EE8C8BC((uint64_t)a1, *(unsigned __int8 **)(a2 + 8), 1, a4, a5, a6, a7, a8);
  v20 = result;
  if (a3 >= 0x10)
  {
    v14 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    v15 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v15 && *(_BYTE *)(v15 + 16) == 57)
    {
      v16 = *(_QWORD *)(v15 + 8);
      v19 = v16;
      if (v16 < 0x10)
        return result;
      v14 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v19 = a3;
    }
    if ((*(_BYTE *)(*v14 + 17) & 4) == 0
      && *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(v14[1] & 0xFFFFFFFFFFFFFFF0))
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 120), 0xCB4u, 0, (uint64_t)v18);
      v17 = sub_22E8901B8((uint64_t)v18, (uint64_t *)&v20);
      sub_22E8901B8(v17, (uint64_t *)&v19);
      v11 = (unsigned int *)v18;
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_22F3312B4(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, unint64_t a5, unsigned int a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;

  v8 = a1[11];
  v9 = *(_QWORD *)(v8 + 18592);
  v10 = *(_QWORD *)(v9 + 48);
  if (v10)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v19 = a2;
    v17 = a5;
    v18 = a4;
    v11 = sub_22EF6462C(v8, v9);
    a4 = v18;
    a2 = v19;
    a5 = v17;
  }
  v12 = v11 | 1;
  if (!a4)
    return sub_22EBBA3E8(a1, v12, a2, a5, a6);
  if (a5 < 0x10)
    return 1;
  v14 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 57)
    goto LABEL_12;
  a5 = *(_QWORD *)(v14 + 8);
  if (a5 < 0x10)
    return 1;
  v15 = *(uint64_t **)(v14 + 24);
  if (v15)
  {
    v16 = a2;
  }
  else
  {
LABEL_12:
    v16 = a2;
    v15 = sub_22EF579A8(a1[11], a5, a2);
  }
  return sub_22EBBA098(a1, v12, v16, v15, a6);
}

uint64_t sub_22F3313CC(uint64_t a1, uint64_t a2)
{
  int v3;

  sub_22EFF605C(a2);
  return sub_22EBBBBEC(a1, v3, 0, 1, 0, 0);
}

llvm::APInt *sub_22F331408(llvm::APInt *result, llvm::APInt *a2, llvm::APInt *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  if (*((_BYTE *)a2 + 16))
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_DWORD *)result + 2) = v3;
    if (v3 <= 0x40)
    {
      v4 = *(_QWORD *)a2;
LABEL_4:
      *(_QWORD *)result = v4;
      return result;
    }
  }
  else
  {
    v5 = *((_DWORD *)a3 + 2);
    *((_DWORD *)result + 2) = v5;
    if (v5 <= 0x40)
    {
      v4 = *(_QWORD *)a3;
      goto LABEL_4;
    }
    a2 = a3;
  }
  return (llvm::APInt *)llvm::APInt::initSlowCase(result, a2);
}

void sub_22F331450(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26[2];
  uint64_t v27;

  if (!*(_BYTE *)(a1 + 3680))
  {
    v2 = *(_QWORD *)(a1 + 72);
    if ((*(_BYTE *)(v2 + 60) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 3360) && (*(_BYTE *)(v2 + 1) & 2) == 0)
      {
        v5 = *(_QWORD *)(a1 + 88);
        v6 = sub_22EAC20DC((_QWORD *)a1);
        if (v6)
          v7 = v6 + 48;
        else
          v7 = 0;
        v8 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "bad_alloc", 9uLL);
        v9 = sub_22EFCF6C0(v5, 3, v7, 0, 0, v8, 0, 0);
        *(_QWORD *)(a1 + 3360) = v9;
        if ((v9 & 1) != 0)
        {
          v9 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 16048) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16048), v9 >> 1);
          *(_QWORD *)(a1 + 3360) = v9;
        }
        *(_DWORD *)(v9 + 28) |= 0x200u;
      }
      if (!*(_QWORD *)(a1 + 3368) && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 136) & 0x20) != 0)
      {
        v10 = *(_QWORD *)(a1 + 88);
        v11 = sub_22EAC20DC((_QWORD *)a1);
        if (v11)
          v12 = v11 + 48;
        else
          v12 = 0;
        v13 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "align_val_t", 0xBuLL);
        v14 = sub_22EFC3768(v10, v12, 0, 0, v13, 0, 1, 1, 1);
        v15 = *(_QWORD *)(a1 + 88);
        v16 = sub_22EF67C8C(v15);
        v17 = 0;
        if (v16 >= 0x10)
          v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFFBLL;
        *(_QWORD *)(v14 + 128) = v17;
        *(_QWORD *)(v14 + 136) = sub_22EF67C8C(v15);
        *(_DWORD *)(v14 + 28) |= 0x200u;
        *(_QWORD *)(a1 + 3368) = v14;
      }
      if (!*(_QWORD *)(a1 + 3376))
      {
        v18 = *(_QWORD *)(a1 + 88);
        v19 = sub_22EAC20DC((_QWORD *)a1);
        if (v19)
          v20 = v19 + 48;
        else
          v20 = 0;
        v21 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "__type_descriptor_t", 0x13uLL);
        v22 = sub_22EFC3768(v18, v20, 0, 0, v21, 0, 1, 1, 1);
        v23 = 0;
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *(_QWORD *)(v24 + 16544);
        if (v25 >= 0x10)
          v23 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFFBLL;
        *(_QWORD *)(v22 + 128) = v23;
        *(_QWORD *)(v22 + 136) = *(_QWORD *)(v24 + 16544);
        *(_DWORD *)(v22 + 28) |= 0x200u;
        *(_QWORD *)(a1 + 3376) = v22;
      }
      *(_BYTE *)(a1 + 3680) = 1;
      v3 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 0);
      v4 = sub_22EF67C8C(*(_QWORD *)(a1 + 88));
      v26[0] = (_QWORD *)a1;
      v26[1] = &v27;
      v27 = v4;
      sub_22EBC1BB8(v26, 1u, v3, v4);
      sub_22EBC1BB8(v26, 3u, v3, v27);
      sub_22EBC1BB8(v26, 2u, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), v3);
      sub_22EBC1BB8(v26, 4u, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), v3);
    }
  }
}

uint64_t sub_22F33171C(_QWORD *a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[8];
  uint64_t v16;
  _BYTE v17[168];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_22F331450((uint64_t)a1);
  sub_22E8BAEE4((uint64_t)v17, (uint64_t)a1, a5, a2, 0, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
  v11 = sub_22E3CD31C((uint64_t *)(v10 + 72), v10);
  if (v11)
    v12 = v11 + 40;
  else
    v12 = 0;
  sub_22EC611AC(a1, v17, v12, 0);
  sub_22EBC1568(a1, (uint64_t)v17, a3, a4, 0, (uint64_t)v15);
  v13 = v16;
  sub_22E8BAFF0((uint64_t)v17);
  return v13;
}

uint64_t sub_22F331808(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v7;
  uint64_t result;
  unint64_t v9;
  _BOOL4 v10;
  uint64_t v11;

  v5 = (a1[11] + 15312) | 6;
  v11 = 0;
  v7 = sub_22F3318B8(a1, a2, a3, v5, &v11, 1);
  result = 0;
  if (!v7)
  {
    result = v11;
    if (!v11)
    {
      v9 = sub_22EF6477C(a1[11], a3);
      v10 = sub_22EBC16E0((uint64_t)a1, v9);
      return sub_22F33171C(a1, a2, 1, v10, v5);
    }
  }
  return result;
}

BOOL sub_22F3318B8(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6)
{
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29[24];
  unsigned int v30[24];
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[96];
  int v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v31 = a3;
  v32 = a4;
  sub_22E8BAEE4((uint64_t)&v36, (uint64_t)a1, a4, a2, 0, 0);
  if (a3)
    v11 = a3 + 64;
  else
    v11 = 0;
  sub_22EC611AC(a1, &v36, v11, 0);
  if (v36 == 5)
  {
    v12 = 1;
    goto LABEL_6;
  }
  v40 = 0;
  v14 = sub_22EF6477C(a1[11], a3);
  v15 = sub_22EBC16E0((uint64_t)a1, v14);
  v33 = v35;
  v34 = 0x400000000;
  sub_22EBC1568(a1, (uint64_t)&v36, 0, v15, (uint64_t)&v33, (uint64_t)v29);
  if ((_DWORD)v34)
  {
    if ((_DWORD)v34 == 1)
    {
      v16 = *((_QWORD *)v33 + 1);
      *a5 = v16;
      if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) + 82) & 0x40) == 0)
      {
        v12 = sub_22E90ABC4((uint64_t)a1, a2, 0, v39, *(_QWORD *)v33, a6) == 1;
        goto LABEL_30;
      }
      if (a6)
      {
        sub_22E8FCA40(a1, a2, 0xCA1u, 0, (uint64_t)v30);
        sub_22E903BEC(v30);
        sub_22EB17D68(a1, *a5);
      }
    }
    else if (a6)
    {
      sub_22E8FCA40(a1, a2, 0xA47u, 0, (uint64_t)v29);
      v25 = sub_22E894538((uint64_t)v29, &v32);
      sub_22E890024(v25, &v31);
      sub_22E903BEC(v29);
      if ((_DWORD)v34)
      {
        v26 = 24 * v34;
        v27 = (uint64_t *)((char *)v33 + 8);
        do
        {
          v28 = *v27;
          v27 += 3;
          sub_22E8FCA40(a1, *(_DWORD *)(v28 + 24), 0x1651u, 0, (uint64_t)v29);
          sub_22E894538((uint64_t)v29, &v32);
          sub_22E903BEC(v29);
          v26 -= 24;
        }
        while (v26);
      }
    }
    goto LABEL_29;
  }
  if (v38)
  {
    if (a6)
    {
      sub_22E8FCA40(a1, a2, 0xFB1u, 0, (uint64_t)v29);
      v17 = sub_22E894538((uint64_t)v29, &v32);
      sub_22E890024(v17, &v31);
      sub_22E903BEC(v29);
      if (v38)
      {
        v18 = v37;
        v19 = 8 * v38;
        do
        {
          v20 = *v18 & 0xFFFFFFFFFFFFFFFCLL;
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
          v22 = v21 > 0x2F;
          v23 = (1 << v21) & 0xC00000060000;
          if (!v22 && v23 != 0)
            v20 = sub_22EFBAEA4(v20);
          sub_22E8FCA40(a1, *(_DWORD *)(v20 + 24), 0x1651u, 0, (uint64_t)v29);
          sub_22E894538((uint64_t)v29, &v32);
          sub_22E903BEC(v29);
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
    }
LABEL_29:
    v12 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  *a5 = 0;
LABEL_30:
  if (v33 != v35)
    free(v33);
LABEL_6:
  sub_22E8BAFF0((uint64_t)&v36);
  return v12;
}

void sub_22F331BD4(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _WORD v9[17];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7 = v9;
  v8 = 0x400000000;
  v9[16] = 256;
  v10 = 0;
  if (sub_22EBC28C4((uint64_t)&v6, a2, a4) == 2)
    sub_22EBC2708(a1, a3, (uint64_t)&v6);
  if (v7 != v9)
    free(v7);
}

unint64_t sub_22F331C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t result;
  unsigned __int8 *v11;

  result = sub_22EBC4288(a1, a2, a3, a4);
  if ((result & 1) != 0)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_WORD *)(a5 + 16) = 1;
    *(_BYTE *)(a5 + 18) = 0;
  }
  else
  {
    v11 = (unsigned __int8 *)(sub_22EBCF22C(a1, result & 0xFFFFFFFFFFFFFFFELL, a3, 0, 0) & 0xFFFFFFFFFFFFFFFELL);
    return sub_22EB889F8(a5, a1, a2, v11, a4 == 1);
  }
  return result;
}

uint64_t sub_22F331D24(uint64_t a1, int a2, unsigned int a3, unint64_t *a4, unint64_t a5, unsigned int a6)
{
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if (a5 >= 5)
  {
    v18 = a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(a5) = v18;
  }
  v11 = a5;
  if ((_DWORD)a5)
  {
    while (1)
    {
      v12 = *a4;
      if (*a4 >= 0x10)
      {
        v16 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
        if (v16 && *(_BYTE *)(v16 + 16) == 57)
        {
          v13 = *(_QWORD **)(v16 + 24);
          if (v13)
            goto LABEL_7;
          v12 = *(_QWORD *)(v16 + 8);
        }
      }
      else
      {
        v12 = 0;
      }
      v13 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v12, a3);
LABEL_7:
      v14 = v20;
      if (v20 >= 4uLL)
      {
        v19 = v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v19;
        v14 = v20;
      }
      v21[v14] = (uint64_t)v13;
      v15 = ++v20;
      ++a4;
      if (!--v11)
        return sub_22EBC6244(a1, a2, a3, v21, v15, a6);
    }
  }
  v15 = 0;
  return sub_22EBC6244(a1, a2, a3, v21, v15, a6);
}

uint64_t sub_22F331EBC(_QWORD *a1, int a2, int a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t *v11;
  uint64_t v13;

  if (a4 >= 0x10)
  {
    v13 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v13 && *(_BYTE *)(v13 + 16) == 57)
    {
      v11 = *(unint64_t **)(v13 + 24);
      if (v11)
        return sub_22EBC8B4C(a1, a2, a3, v11, a5, a6);
      a4 = *(_QWORD *)(v13 + 8);
    }
  }
  else
  {
    a4 = 0;
  }
  v11 = sub_22EF579A8(a1[11], a4, 0);
  return sub_22EBC8B4C(a1, a2, a3, v11, a5, a6);
}

uint64_t sub_22F331F54(uint64_t a1, int a2, int a3, unint64_t a4, int a5)
{
  if (a4)
    return sub_22EBC8E1C(a1, a2, a3, a4, a5);
  else
    return 1;
}

int *sub_22F331F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  int *v6;
  uint64_t v7;

  v2 = a2;
  v7 = a2;
  sub_22EB4E2D8(a1);
  if (*(_BYTE *)(a1 + 1693))
  {
    v5 = sub_22F0D6620(*(_QWORD *)(a1 + 88), &v7, 1, 0, 0);
    v6 = (int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
    sub_22F3307C0((uint64_t)v6, (uint64_t)v5, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 0, 0, 0);
    return sub_22EBCCCF0(a1, v6);
  }
  return (int *)v2;
}

uint64_t sub_22F332014(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  _DWORD *v19;
  size_t v20;
  uint64_t *v21;
  unsigned int v22;
  _OWORD v23[2];
  unsigned int v24[24];
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  _QWORD *v28;
  int64x2_t v29;
  _QWORD v30[6];

  v30[5] = *MEMORY[0x24BDAC8D0];
  v27 = a3;
  v26 = a5;
  v25 = 0;
  v10 = a4;
  if ((sub_22EBCE108(a1, &v25, (uint64_t)&v27, &v26, a4) & 1) != 0)
    return 1;
  if ((*(_QWORD *)a7 & 0x3F000) == 0x22000)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a7 + 120), 0xC57u, 0, (uint64_t)v24);
    sub_22E903BEC(v24);
    return 1;
  }
  v18 = sub_22EE8C8BC((uint64_t)a1, *(unsigned __int8 **)(a7 + 8), 0, v11, v12, v13, v14, v15);
  v28 = v30;
  v29 = vdupq_n_s64(0x20uLL);
  v30[4] = 0;
  sub_22EEB5360((uint64_t)&v28, v18, 8uLL, 4);
  *v19 = *(_DWORD *)(a7 + 120);
  v19[1] = *(_DWORD *)(a7 + 140);
  v20 = v29.i64[0] - v29.i64[1];
  v21 = sub_22EF5DB78(a1[11], v18, v29.i32[0] - v29.i32[2]);
  memcpy(v21 + 1, (char *)v28 + v29.i64[1], v20);
  v22 = sub_22F115668(*v21);
  memset(v23, 0, sizeof(v23));
  v16 = sub_22EBCD92C((uint64_t)a1, v27, v10, v26, (uint64_t)v23, 0, 0, a6, (unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL, v22);
  if (v28 != v30 && v28)
    MEMORY[0x2348A0E84]();
  return v16;
}

uint64_t sub_22F3321E4(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18[24];

  result = sub_22EB19A28(a1);
  if ((result & 1) == 0)
  {
    v8 = result & 0xFFFFFFFFFFFFFFFELL;
    sub_22EB4E1D8((unsigned __int8 *)a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
    if (*(_DWORD *)(a1 + 10680) <= *(_DWORD *)(a1 + 11956) && (*(_BYTE *)(v8 + 1) & 0x40) == 0)
    {
      if (sub_22F0005B0(v8, *(_QWORD *)(a1 + 88), 0, v9, v10, v11, v12, v13))
      {
        sub_22EFF605C(v8);
        sub_22E8FCA40((_QWORD *)a1, v14, 0x1B4Bu, 0, (uint64_t)v18);
        sub_22E903BEC(v18);
      }
    }
    sub_22EB17190(a1, v8);
    v16 = v15;
    v17 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
    return sub_22F333584(v17, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400), v8, v16, a2, a4);
  }
  return result;
}

int *sub_22F3322D4(uint64_t a1, uint64_t a2)
{
  if (a2)
    return sub_22F331F6C(a1, a2);
  else
    return (int *)1;
}

uint64_t sub_22F3322F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[3];
  _BYTE v12[88];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  __int16 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = *a4;
  if (!v10)
    return 1;
  if (sub_22EFC67A8(&v10))
    return 2;
  v11[0] = 0;
  v11[1] = v12;
  v11[2] = 0x800000000;
  memset(&v12[64], 0, 24);
  v13 = a1;
  v14 = *(_OWORD *)a4;
  v15 = a4[2];
  v16 = xmmword_22F4658C0;
  v17 = 16842752;
  v18 = 0;
  v19 = 0;
  sub_22EC56024((uint64_t)v11);
  sub_22EC64BE8(a1, (uint64_t)v11, a2, a3, 0, 0);
  HIBYTE(v17) = 0;
  v8 = dword_22F483070[SLODWORD(v11[0])];
  sub_22E8BAFF0((uint64_t)v11);
  return v8;
}

uint64_t sub_22F332414(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v10;
  uint64_t v12[3];

  sub_22EA12DB4(a1, a6);
  if (a4)
    v10 = 16;
  else
    v10 = 17;
  if ((sub_22EE72B18(a1, a5, v10) & 1) != 0 || (sub_22EE72C58(a1, v12, v10) & 1) != 0)
    return 3;
  else
    return sub_22F3322F4(a1, a2, a5, v12);
}

uint64_t sub_22F3324A8(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v20 = 0;
  if (a5)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      v10 = sub_22F0ABC50((uint64_t *)(a3 + 8), a1[11]);
      v11 = v18;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    if (sub_22ED716FC(a1, 5, a2, v10, v11, a5, a4, (uint64_t *)&v20, 0) < 0x10)
      return 0;
    v17 = v20;
LABEL_15:
    v19 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
    return sub_22F31A650(v19, v17);
  }
  v13 = sub_22ED63018((uint64_t)a1, a1[1611], a2, a3, *(_DWORD *)a6, *(_QWORD *)(a6 + 24), *(_QWORD *)(a6 + 8), *(_DWORD *)(a6 + 4), *(_DWORD *)(a6 + 36), a6 + 56, *(unsigned int *)(a6 + 44), *(_DWORD *)(a6 + 40));
  if (!v14 && v13 >= 0x10)
  {
    v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if (!v15 || *(_BYTE *)(v15 + 16) != 57)
    {
      v17 = 0;
      v20 = 0;
      goto LABEL_15;
    }
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 24);
    v20 = v17;
    if (v16 >= 0x10)
      goto LABEL_15;
  }
  return 0;
}

uint64_t sub_22F3325E4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  return sub_22F31A650(v3, a2);
}

uint64_t sub_22F332618(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;

  v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "expr-type", 9uLL);
  v13 = sub_22EFEAF4C(a1[11], a1[27], 0, 0, a6, 0, v12, 1, 0, 1, 0);
  if (sub_22ED58C78(a1, a4, a5, v13, 0, 1))
    return sub_22EBCF54C((uint64_t)a1, a2, 0, a3, 0);
  v15 = a1[11];
  v18 = v13;
  v16 = sub_22EFE8F48(v15, 0, 0, (uint64_t)&v18, 1, 0, 0);
  sub_22F31A5DC(&v17, (uint64_t)v16);
  return sub_22EBCF54C((uint64_t)a1, a2, 0, a3, v17);
}

uint64_t sub_22F332740(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5)
{
  uint64_t v9;

  v9 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
  return sub_22F31A53C(v9, a2, a3, a4, a5);
}

uint64_t sub_22F332794(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_DWORD *)result = 0;
  *(_BYTE *)(result + 4) &= 0xF8u;
  *(_QWORD *)(result + 8) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(result + 16) = 1;
  return result;
}

uint64_t sub_22F3327E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v10;
  _QWORD v11[2];
  void *v12;
  uint64_t v13;
  _BYTE v14[96];
  char v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v11[0] = 0;
  v11[1] = 0;
  v12 = v14;
  v13 = 0x400000000;
  v15 = 0;
  v16 = v18;
  v17 = 0x400000000;
  if ((*(_DWORD *)a2 & 0x4000) != 0
    || (v10 = a2, sub_22F0D4E74(a2), v5 = 0, (sub_22E9F3578(a1, 0, &v10, 1, 0, 0, v4, v11) & 1) == 0))
  {
    v5 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_DWORD *)a2;
    v8 = v15;
    *(_DWORD *)v5 = 3;
    *(_BYTE *)(v5 + 4) = (v7 >> 12) & 2 | ((v7 & 0x4000) != 0) | (4 * v8) | *(_BYTE *)(v5 + 4) & 0xF8;
    *(_QWORD *)(v5 + 8) = a2 & 0xFFFFFFFFFFFFFFFDLL;
    *(_QWORD *)(v5 + 16) = sub_22F3650F8(v6, (uint64_t)v11);
  }
  if (v16 != v18)
    free(v16);
  if (v12 != v14)
    free(v12);
  return v5;
}

uint64_t sub_22F332940(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_DWORD *)result = 3;
  *(_BYTE *)(result + 4) &= 0xF8u;
  *(_QWORD *)(result + 8) = a2 | 2;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_22F33298C(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned int v17[24];

  v9 = sub_22F3B1F5C(a1[11], a1[27], a2);
  v10 = v9 + 40;
  if (!v9)
    v10 = 0;
  a1[27] = v10;
  a5[45] = v10;
  if (a4)
  {
    v11 = v10 & 0xFFFFFFFFFFFFFFFBLL;
    v12 = 8 * a4;
    do
    {
      v13 = (_QWORD *)*a3;
      if ((*(_DWORD *)(*a3 + 96) & 0x600) == 0x400 || (*(_DWORD *)(*a3 + 96) & 0x600) == 0x200 || v13[11] >= 8uLL)
      {
        v14 = sub_22EFBF2CC(*a3);
        sub_22E8FCA40(a1, v14, 0x123Au, 0, (uint64_t)v17);
        sub_22E903BEC(v17);
      }
      v13[2] = v11;
      if (v13[5] >= 8uLL && (v13[5] & 7) == 0)
      {
        sub_22EA2018C((uint64_t)a1, (uint64_t)a5, (uint64_t)v13);
        sub_22EA0483C((uint64_t)a1, (unint64_t)v13, a5, 1);
      }
      ++a3;
      v12 -= 8;
    }
    while (v12);
  }
  return v9;
}

uint64_t sub_22F332AA8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *a6, uint64_t a7, int a8)
{
  unsigned int *v9;

  v9 = sub_22F3C4144(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  if (sub_22EE72930(a1, (unint64_t)v9))
    return 1;
  else
    return (uint64_t)v9;
}

uint64_t sub_22F332AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;

  *(_BYTE *)a1 = -121;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(135);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3 | 4;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB64(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F332B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;

  *(_BYTE *)a1 = -121;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(135);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB64(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F332C0C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F332C8C((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

_QWORD *sub_22F332C8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F332D48(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F332DF4((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F332D48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F332DF4(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 1;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EBCFF08((uint64_t)a1, v6);
  v8 = 0;
  sub_22F332D48((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F332EB0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 16);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F332D48((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F332F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;

  *(_BYTE *)a1 = -119;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(137);
    ++*((_DWORD *)v10 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3 | 4;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB64(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F33300C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;

  *(_BYTE *)a1 = -119;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(137);
    ++*((_DWORD *)v10 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB64(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F3330A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char *v10;
  int v11;
  int v12;

  *(_BYTE *)a1 = -122;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(134);
    ++*((_DWORD *)v10 + 2);
  }
  v11 = *(_DWORD *)a1;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  if (a5)
    v12 = 0x40000;
  else
    v12 = 0;
  *(_DWORD *)a1 = v11 & 0xFFF800FF | v12;
  *(_DWORD *)(a1 + 4) = a4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AABD0(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F333148(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *a1 + 120 * v5;
  v7 = a2 + 120;
  if (a2 + 120 != v6)
  {
    do
    {
      *(_QWORD *)(v7 - 120) = *(_QWORD *)v7;
      *(_DWORD *)(v7 - 112) = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v7 - 104) = *(_QWORD *)(v7 + 16);
      sub_22EBD0370((uint64_t *)(v7 - 96), (uint64_t *)(v7 + 24));
      v8 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(v7 - 40) = v8;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v7 + 96);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v7 + 112);
      v9 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(v7 - 88) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(v7 - 72) = v9;
      v7 += 120;
    }
    while (v7 != v6);
    v5 = *((_DWORD *)a1 + 2);
    v4 = *a1;
  }
  v10 = v5 - 1;
  *((_DWORD *)a1 + 2) = v10;
  sub_22E80F94C((uint64_t *)(v4 + 120 * v10 + 24));
  return a2;
}

uint64_t sub_22F33320C(uint64_t result)
{
  if (result && *(_BYTE *)(result + 16) == 39)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 27 < 0xFFFFFFFE;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 27 < 0xFFFFFFFE;
  return result;
}

uint64_t sub_22F333280(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;

  *(_BYTE *)a1 = 122;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(122);
    ++*((_DWORD *)v17 + 2);
  }
  v18 = *(_DWORD *)a1;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a7;
  *(_QWORD *)(a1 + 24) = a8;
  if (a3)
    v19 = 0x40000;
  else
    v19 = 0;
  v20 = v18 & 0xFFC000FF;
  if (a4)
    v21 = 0x80000;
  else
    v21 = 0;
  if (a5)
    v22 = 0x100000;
  else
    v22 = 0;
  if (a6)
    v23 = 0x200000;
  else
    v23 = 0;
  *(_DWORD *)a1 = v21 | v19 | v22 | v23 | v20;
  *(_DWORD *)(a1 + 4) = a9;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AABF0(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F333374(unint64_t a1)
{
  uint64_t result;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x8000000000000) != 0)
    return 1;
  result = sub_22E49F6F8(a1);
  if ((_DWORD)result)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    return (**(_QWORD **)(a1 + 128) & 0x8000000000) == 0;
  }
  return result;
}

uint64_t sub_22F3333D8(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) >> 42) & 1;
}

uint64_t sub_22F33340C(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  char *v16;

  *(_BYTE *)a1 = 108;
  if (byte_255E04EB3)
  {
    v16 = sub_22F0D3748(108);
    ++*((_DWORD *)v16 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a8;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xFC | a3 & 3;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a7;
  *(_QWORD *)(a1 + 48) = a4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAC04(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F3334C8(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  char *v14;
  unsigned int v15;

  *(_BYTE *)a1 = -90;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(166);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a7;
  if (a5)
    v15 = 0x80000000;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 16) = v15 & 0x80000000 | a3 & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 20) = a2;
  *(_DWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = a4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAC48(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F333584(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  char *v12;
  int v13;

  *(_BYTE *)a1 = 127;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(127);
    ++*((_DWORD *)v12 + 2);
  }
  v13 = *(_DWORD *)a1;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  *(_DWORD *)a1 = v13 & 0xFFF800FF | ((a4 == 0) << 18);
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAC68(a1, a4) & 0x1F) << 13);
  return a1;
}

_QWORD *sub_22F33362C(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 2)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = (_QWORD *)MEMORY[0x23489D23C](8 * a2, 8);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 3;
  do
LABEL_6:
    *result++ = -4096;
  while (result != v6);
  return result;
}

uint64_t sub_22F3336AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_22F24C890(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 54);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 54) = v4;
  if (a1 != a2)
    sub_22EBFC0E8(a1 + 64, *(uint64_t **)(a2 + 64), *(uint64_t **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3));
  return a1;
}

_QWORD *sub_22F333714(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = (_QWORD *)sub_22EBFC2D8((_DWORD *)a1, *a2);
  if ((_DWORD)result)
  {
    result = *(_QWORD **)(a1 + 24);
    v5 = *(unsigned int *)(a1 + 32);
    v6 = &result[v5];
    if ((_DWORD)v5)
    {
      v7 = 8 * v5;
      while (*result != *a2)
      {
        ++result;
        v7 -= 8;
        if (!v7)
        {
          result = v6;
          break;
        }
      }
    }
    if (v6 != result + 1)
    {
      result = memmove(result, result + 1, (char *)v6 - (char *)(result + 1));
      LODWORD(v5) = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v5 - 1;
  }
  return result;
}

uint64_t sub_22F333790(uint64_t a1, unsigned int *a2)
{
  *(_QWORD *)a1 = 1;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  sub_22F3337FC((unsigned int *)a1, a2);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x200000000;
  if (a2[8])
    sub_22F24C77C(a1 + 24, (uint64_t)(a2 + 6));
  return a1;
}

unsigned int *sub_22F3337FC(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) == 0)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v5;
      LODWORD(v5) = result[4];
      result[4] = a2[4];
      a2[4] = v5;
      return result;
    }
    v4 = *result;
    v6 = result;
    result = a2;
    goto LABEL_7;
  }
  if ((v4 & 1) == 0)
  {
    v6 = a2;
LABEL_7:
    v7 = *(_OWORD *)(v6 + 2);
    *v6 = v4 | 1;
    *((_QWORD *)v6 + 1) = *((_QWORD *)result + 1);
    *((_QWORD *)v6 + 2) = *((_QWORD *)result + 2);
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v7;
    return result;
  }
  v8 = 0;
  v9 = (int *)(result + 2);
  v10 = (int *)(a2 + 2);
  do
  {
    v11 = *(_QWORD *)&v9[v8];
    *(_QWORD *)&v9[v8] = *(_QWORD *)&v10[v8];
    *(_QWORD *)&v10[v8] = v11;
    v8 += 2;
  }
  while (v8 != 4);
  return result;
}

_QWORD *sub_22F3338D4(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 3;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_22F33394C(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
    }
    do
      *v3++ = -4096;
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

_QWORD *sub_22F33394C(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3C) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 3)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 3;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22F33362C(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(8 * v8));
    return sub_22F33362C(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

BOOL sub_22F333A14(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  _BYTE v8[16];
  unsigned __int8 v9;

  sub_22F2A20DC((uint64_t)v8, a1, a2);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return v4 != 0;
}

uint64_t sub_22F333AA4(uint64_t a1, unsigned int *a2)
{
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(8 * *(unsigned int *)(a1 + 16)));
  *(_QWORD *)a1 = 1;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  sub_22F3337FC((unsigned int *)a1, a2);
  return a1;
}

uint64_t sub_22F333B08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F333BB4(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F333B08((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F333C14(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F333C14(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 2;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EBFC328((uint64_t)a1, v6);
  v8 = 0;
  sub_22F333B08((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F333CD0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_22F333B08((uint64_t)v5, v10, &v13);
      v11 = v13;
      v12 = a2[1];
      *v13 = *a2;
      v11[1] = v12;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

unsigned int *sub_22F333D94(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v9 = **(_QWORD **)(a1 + 16);
  sub_22E8AECC4((uint64_t)v6, &v9);
  v8 = **(_DWORD **)(a1 + 24);
  sub_22E8900C4((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F333E20()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F333E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  if (*(_DWORD *)(a2 + 24))
    sub_22F24C77C(v4, a2 + 16);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 54) = *(_QWORD *)(a2 + 54);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

uint64_t sub_22F333EBC(uint64_t a1, uint64_t a2, char a3, int a4, int a5, uint64_t a6)
{
  char *v12;

  *(_BYTE *)a1 = -58;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(198);
    ++*((_DWORD *)v12 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_BYTE *)(a1 + 32) = a3;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD70(a1) & 0x1F) << 13);
  return a1;
}

void sub_22F333F5C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F333F70(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7F) == 51;
  return result;
}

__n128 sub_22F333F9C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB86F0;
  *a2 = v4;
  return result;
}

uint64_t sub_22F333FF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, int a6, uint64_t a7)
{
  char *v14;

  *(_BYTE *)a1 = -51;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(205);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 = ((a4 & 3) << 8) & 0xE3FF | ((a5 & 7) << 10) | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = a7 & 0xFFFFFFFFFFFFFFF9;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD08(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F3340B4(int a1)
{
  uint64_t v1;

  v1 = a1 - 48;
  if (v1 > 0x36)
    return 0xFFFFFFFFLL;
  else
    return dword_22F483264[v1];
}

uint64_t sub_22F3340DC(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 2) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 4 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 2);
  return result;
}

uint64_t sub_22F33415C(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    if (a4)
      v9 = 150;
    else
      v9 = 136;
    v8 = sub_22EBBA59C(a1, a3, v9);
  }
  else
  {
    v7 = sub_22EB25D60(a1, a3, a4);
    v8 = sub_22E90092C(a1, v7 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400), 31, 0, 0);
  }
  return sub_22EC27798(a1, a2, (unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22F3341E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v11 = sub_22EB19A28(a1);
  if ((v11 & 1) != 0)
    return 1;
  v12 = sub_22EB1A358(a1, a3, 0);
  if ((v12 & 1) != 0)
    return 1;
  v14 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v16 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 56, 3);
  return sub_22F334ED0(v16, v15, v14, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16872), 1, 4, a5, a6, a2);
}

uint64_t sub_22F3342A0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unint64_t a5, int a6)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v16;

  v16 = 0;
  v10 = sub_22EE7D634(a5, &v16);
  v11 = v16;
  if (!v16)
  {
    v12 = v10;
    v13 = *(_QWORD *)(a1 + 88);
    v14 = sub_22F141A3C(a4, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    v11 = sub_22EF579A8(v13, v12, v14);
    v16 = v11;
  }
  return sub_22EC2A5E0(a1, a2, v11, a6);
}

uint64_t sub_22F33433C(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)a2;
  v10 = 0;
  result = sub_22F2D3164(a1, &v9, &v10, (uint64_t)&v7);
  if (v8)
  {
    v5 = v7;
    v6 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_22E4D6CC4((void **)(a1 + 24), a2);
    }
    else
    {
      *v6 = *a2;
      result = (uint64_t)(v6 + 1);
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 4) - 1;
  }
  return result;
}

uint64_t sub_22F3343D8(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned int v27[24];
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v12 = sub_22EC65CE0(a1, a1[418], a2, a6, 11, 0);
  v28 = v12;
  if (!v12)
  {
    sub_22E8FCA40(a1, a4, 0x13B5u, 0, (uint64_t)v27);
    sub_22E8BAE44((uint64_t)v27, &v29);
    sub_22E903BEC(v27);
    return 1;
  }
  v15 = v12;
  if (sub_22EFDE1F4())
  {
    sub_22E8FCA40(a1, a4, 0x1005u, 0, (uint64_t)v27);
    sub_22E890024((uint64_t)v27, &v28);
    sub_22E903BEC(v27);
    v15 = v28;
  }
  v16 = *(_QWORD *)(v15 + 104);
  if (!v16)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 96) + 88), *(_QWORD *)(v15 + 96));
    v16 = *(_QWORD *)(v15 + 104);
  }
  if (v16 >= 8)
  {
    v17 = v28;
    v18 = *(_QWORD *)(v28 + 104);
    if (!v18)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v28 + 96) + 88), *(_QWORD *)(v28 + 96));
      v18 = *(_QWORD *)(v17 + 104);
    }
    if (v18 < 8)
      v19 = 0;
    else
      v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
    v28 = v19;
  }
  v20 = a1[11];
  v21 = sub_22F36E2EC(v20);
  v22 = sub_22F36D148(v20, v21, 0);
  if (v22 < 0x10)
    return 1;
  v23 = sub_22F36CC4C(a1[11], v22);
  v13 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  v24 = v28;
  *(_BYTE *)v13 = -50;
  if (byte_255E04EB3)
  {
    v25 = sub_22F0D3748(206);
    ++*((_DWORD *)v25 + 2);
  }
  v26 = *(_DWORD *)v13 & 0xFFFC00FF;
  *(_QWORD *)(v13 + 8) = v23;
  *(_QWORD *)(v13 + 16) = v24;
  *(_DWORD *)(v13 + 24) = a3;
  *(_DWORD *)(v13 + 28) = a6;
  *(_DWORD *)(v13 + 32) = a7;
  *(_DWORD *)v13 = v26;
  return v13;
}

unint64_t sub_22F3345A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 16) - 35 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_22F272660(v6);
  if (!v8
    || (v9 = v8, (result = sub_22EFDBA90(v8, a2, a4, 0, 1, 0)) == 0) && (result = sub_22F3B4D74(v9, &v14, a4)) == 0)
  {
    v11 = *(_QWORD *)(v6 + 16);
    if (v11 >> 26)
    {
      v12 = (uint64_t *)(v6 + 8 * ((v11 >> 19) & 0x7F) + 48);
      v13 = 8 * (v11 >> 26);
      do
      {
        result = sub_22F3B4CBC(*v12, a2, a4);
        if (result)
          break;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_22F334684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t result;

  v6 = sub_22F3174CC(a3);
  if ((uint64_t *)v6 == v7)
    return 0;
  v8 = (uint64_t *)v6;
  v9 = v7;
  while (1)
  {
    result = sub_22F3B4CBC(*v8, a2, a4);
    if (result)
      break;
    if (++v8 == v9)
      return 0;
  }
  return result;
}

uint64_t sub_22F3346EC(unint64_t a1)
{
  uint64_t result;
  BOOL v2;

  result = sub_22F259044(a1);
  if (result)
  {
    result = *(_QWORD *)(*(_QWORD *)result & 0xFFFFFFFFFFFFFFF0);
    if (result)
      v2 = *(unsigned __int8 *)(result + 16) - 35 > 0xFFFFFFFD;
    else
      v2 = 0;
    if (!v2)
      return sub_22F10CF48(result);
  }
  return result;
}

uint64_t sub_22F33472C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7, unsigned int a8, unsigned __int8 **a9, unint64_t a10)
{
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[96];
  _BYTE v32[104];

  v16 = a3;
  v17 = sub_22EC2AEBC(a1, a3);
  if (!v17)
  {
    sub_22E8FCA40((_QWORD *)a1, v16, 0xE61u, 0, (uint64_t)v32);
    v20 = (unsigned int *)v32;
    goto LABEL_5;
  }
  v18 = v17;
  v19 = sub_22EFDC9F0(v17);
  if (!v19)
  {
    sub_22E8FCA40((_QWORD *)a1, v16, 0xFB2u, 0, (uint64_t)v31);
    v30 = *(_QWORD *)(v18 + 40);
    sub_22E894538((uint64_t)v31, (uint64_t *)&v30);
LABEL_4:
    v20 = (unsigned int *)v31;
LABEL_5:
    sub_22E903BEC(v20);
    return 1;
  }
  v22 = v19;
  v23 = sub_22F3346EC(v19) & 0xFFFFFFFFFFFFFFF0;
  if (!v23)
  {
    sub_22E8FCA40((_QWORD *)a1, v16, 0x1247u, 0, (uint64_t)v31);
    v26 = *(_QWORD *)(v22 + 40);
    if ((v26 & 7) != 0)
      v27 = 0;
    else
      v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    v30 = v27;
    sub_22E8BAE44((uint64_t)v31, (uint64_t *)&v30);
    goto LABEL_4;
  }
  if (*(_QWORD *)(v18 + 40) == a4)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
    *(_DWORD *)(v25 + 8) &= ~0x1000u;
  }
  if ((*(_BYTE *)(v18 + 58) & 2) == 0)
    return sub_22EC2F730((_QWORD *)a1, 0, v23, v16, a4, 0, a5, v24, a6, a7, a8, a9, a10, SHIDWORD(a10), 0);
  v28 = sub_22F36CC4C(*(_QWORD *)(a1 + 88), v23);
  return sub_22EC2DA20(a1, 0, v28, v16, a4, 0, a5, v29, a6, a7, a8, (uint64_t)a9, a10, 0);
}

uint64_t sub_22F3348F0(_QWORD *a1, unint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7, uint64_t a8)
{
  uint64_t *v16;
  uint64_t v17;
  unsigned int v19;

  v19 = a4;
  if (a2 >= 0x10)
    v16 = sub_22EF579A8(a1[11], a2, 0);
  else
    v16 = 0;
  if (a3)
    v17 = a4;
  else
    v17 = 0;
  return sub_22EC2F730(a1, v16, a2, v17, a5, a6, a4, a8, (int *)&v19, 1, a4, a7, a8, SHIDWORD(a8), 1u);
}

uint64_t sub_22F3349A8(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7, unsigned int a8, unsigned __int8 **a9, unsigned int a10, int a11)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;

  v22 = 0;
  v17 = sub_22EE7D634(a3, &v22);
  if (v17 < 0x10)
    return 1;
  v20 = v17;
  v21 = v22;
  if (!v22)
  {
    v21 = sub_22EF579A8(a1[11], v17, a5);
    v22 = v21;
  }
  return sub_22EC2F730(a1, v21, v20, 0, a4, 0, a5, v18, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t sub_22F334A84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  int v10;

  v10 = a4;
  v8 = a4;
  if (a2)
    a4 = 0;
  else
    a4 = a4;
  return sub_22EC2DA20(a1, a2, a3, a4, a5, a6, v8, a8, &v10, 1, v8, a7, a8, 1u);
}

uint64_t *sub_22F334ACC(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  if (*((_BYTE *)result + 80))
    return sub_22E6D82D0(result + 4, a2);
  if (*((_BYTE *)result + 92))
  {
    v4 = (uint64_t *)(*result + 12784);
    v5 = result[2];
    if (v5)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v7 = v5;
    v6 = sub_22F2F1D6C(v4, &v7);
    return sub_22E6D82D0((uint64_t *)(v6[1] + 32 * *((unsigned int *)v3 + 22) + 8), a2);
  }
  return result;
}

uint64_t sub_22F334B74(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[22];

  v7[21] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), a2, a3);
  sub_22E8BAEE4((uint64_t)v7, a1, v4, 0, 0, 0);
  v5 = sub_22EC63520(a1, v7, *(_QWORD *)(a1 + 3344), 0, 0);
  sub_22E8BAFF0((uint64_t)v7);
  return v5;
}

uint64_t sub_22F334C20(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) == 0)
    return 0;
  v9 = sub_22EC30C10(*(_QWORD *)(a3 + 8));
  v10 = sub_22EC30C10(a2);
  if (v10 == 1 && v9 == 4 || (result = 0, v10 == 4) && v9 == 1)
  {
    sub_22EC30A7C(a1, a2, a3);
    if (v10 == 4)
      v11 = 1;
    else
      v11 = 43;
    *a4 = v11;
    return 1;
  }
  return result;
}

BOOL sub_22F334CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  result = 1;
  if ((v3 & 8) != 0)
  {
    v5 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 32 && (v5[3] & 0x1C0) == 0xC0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
      return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
          || *(_BYTE *)(v6 + 16) != 32 && (v6 = sub_22F10CF48(v6)) == 0
          || (v7 = sub_22F31179C(v6)) == 0
          || !sub_22EFDABBC(v7);
    }
  }
  return result;
}

uint64_t sub_22F334D78(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unint64_t a6, uint64_t a7, void *a8)
{
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v16;

  v16 = 0;
  v13 = sub_22EE7D634(a6, &v16);
  if (!a4)
    sub_22EC30A7C(a1, v13, (uint64_t)a8);
  v14 = v16;
  if (!v16)
  {
    v14 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v13, a3);
    v16 = v14;
  }
  return sub_22EC33F14(a1, a3, a4, a5, v14, a8);
}

uint64_t sub_22F334E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  char *v12;
  int v13;

  *(_BYTE *)a1 = -54;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(202);
    ++*((_DWORD *)v12 + 2);
  }
  if (a5)
    v13 = 0x40000;
  else
    v13 = 0;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFF800FF | v13;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a6;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB1C(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F334ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, int a9)
{
  char *v17;

  *(_BYTE *)a1 = -48;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(208);
    ++*((_DWORD *)v17 + 2);
  }
  *(_DWORD *)a1 = ((a5 & 3) << 8) & 0xE3FF | ((a6 & 7) << 10) | *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a9;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a8;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD58(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F334F98(uint64_t a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F335030(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F335140(a2, (uint64_t)a3, v12);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *a3;
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F335030(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  unsigned int HashValue;
  uint64_t v9;
  int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t result;
  BOOL v17;

  if (a2)
  {
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
    v9 = 0;
    v10 = a2 - 1;
    for (i = 1; ; ++i)
    {
      v12 = HashValue & v10;
      v13 = a1 + 24 * (HashValue & v10);
      v14 = *(const void **)v13;
      if (*(_QWORD *)v13 == -2)
      {
        if (*(_QWORD *)a3 == -2)
          goto LABEL_18;
      }
      else if (v14 == (const void *)-1)
      {
        if (*(_QWORD *)a3 == -1)
          goto LABEL_18;
      }
      else
      {
        v15 = *(_QWORD *)(a3 + 8);
        if (v15 == *(_QWORD *)(v13 + 8) && (!v15 || !memcmp(*(const void **)a3, *(const void **)v13, v15)))
        {
LABEL_18:
          result = 1;
          goto LABEL_19;
        }
      }
      if (v14 == (const void *)-1)
        break;
      if (v9)
        v17 = 0;
      else
        v17 = v14 == (const void *)-2;
      if (v17)
        v9 = a1 + 24 * v12;
      HashValue = i + v12;
    }
    result = 0;
    if (v9)
      v13 = v9;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_19:
  *a4 = v13;
  return result;
}

_QWORD *sub_22F335140(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EC34704(a1, v6);
  v8 = 0;
  sub_22F335030(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F3351F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char *v10;

  *(_BYTE *)a1 = -60;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(196);
    ++*((_DWORD *)v10 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AACDC(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F335288(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  char *v12;

  *(_BYTE *)a1 = -51;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(205);
    ++*((_DWORD *)v12 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0xD00;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF9 | 2;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD08(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F335340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  char *v14;

  *(_BYTE *)a1 = -51;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(205);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0xD00;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2 | 4;
  *(_QWORD *)(a1 + 24) = a3 & 0xFFFFFFFFFFFFFFF9;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a7 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF9 | 2;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD08(a1) & 0x1F) << 13);
  return a1;
}

void sub_22F335408()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F33541C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7F) == 25;
  return result;
}

__n128 sub_22F335448@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB8728;
  *a2 = v4;
  return result;
}

uint64_t sub_22F3354A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  char *v14;

  *(_BYTE *)a1 = -51;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(205);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0xD00;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2 | 4;
  *(_QWORD *)(a1 + 24) = a3 & 0xFFFFFFFFFFFFFFF9;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(_QWORD *)(a1 + 40) = a7 & 0xFFFFFFFFFFFFFFF9 | 4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAD08(a1) & 0x1F) << 13);
  return a1;
}

BOOL sub_22F335560(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  if (!*(_DWORD *)(a1 + 24) || **(_QWORD **)(a1 + 16))
    return 0;
  v2 = (*(_QWORD *)a1 & 7) != 0 ? 0 : *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(v2 + 16);
  if (*(_DWORD *)v3 != 5)
    return 0;
  v4 = *(_DWORD *)(v3 + 16);
  v5 = *(unsigned __int8 *)(v3 + 20);
  return v4 == 1701868915 && v5 == 114;
}

BOOL sub_22F3355C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 124)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F335620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 125)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unsigned int *sub_22F335684(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v9 = **(_QWORD **)(a1 + 16);
  sub_22E894538((uint64_t)v6, &v9);
  v8 = **(_QWORD **)(a1 + 24);
  sub_22E8906A0((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F335710()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F335728(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  sub_22F3357A4(a1, (uint64_t)v6);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F335790()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3357A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = **(_QWORD **)(a1 + 16);
  sub_22E894538(a2, &v7);
  sub_22F0D4E74(**(_QWORD **)(a1 + 24));
  v6 = v4;
  return sub_22E8906A0(a2, &v6);
}

uint64_t sub_22F335800(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v6 = a2;
  v7 = a1;
  v14 = a2;
  result = sub_22EC37620((uint64_t *)&v14, a1);
  if ((_DWORD)result)
  {
    if (v7 >= 0x10 && (*(_DWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v15 = v7;
      v7 = sub_22F31295C(&v15);
    }
    if (v6 >= 0x10 && (*(_DWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v15 = v6;
      v6 = sub_22F31295C(&v15);
    }
    v14 = v6;
    v9 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v9 + 16) == 39)
    {
      v10 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v10 + 16) == 39)
      {
        v11 = *(_QWORD *)(v9 + 32);
        v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
        v7 = v11 & 7 | v12;
        v6 = *(_QWORD *)(v10 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
        v14 = v6;
        v9 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
      }
    }
    v13 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
    return ((v9 & 0xFFFFFFFFFFFFFFF0) == v13 || sub_22EAAB1B8(a3, a4, v9 & 0xFFFFFFFFFFFFFFF0, v13))
        && (sub_22EC37620((uint64_t *)&v14, v7) & 1) != 0;
  }
  return result;
}

BOOL sub_22F335958(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _BYTE v4[32];
  unint64_t v5;

  v5 = *(_QWORD *)(a2 + 16);
  sub_22EC37BCC((uint64_t)v4, a1, a2, a3, &v5, 1, 0, 1);
  return v4[8] == 0;
}

uint64_t sub_22F3359A8(unsigned int *a1)
{
  return ((uint64_t (*)(_QWORD))((char *)nullsub_969 + 4 * byte_22F48361D[*a1]))(0);
}

uint64_t sub_22F3359D0@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
}

uint64_t sub_22F3359F0@<X0>(uint64_t a1@<X8>)
{
  return nullsub_969(*(_QWORD *)(a1 + 32));
}

uint64_t sub_22F3359F8(int *a1, llvm::raw_ostream *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  uint64_t **v13;
  uint64_t **v14;
  _QWORD *v16;

  v4 = *((_QWORD *)a1 + 1);
  if (v4 && (v8 = sub_22F3359F8(v4, a2)) != 0)
  {
    v9 = v8;
    v10 = v8;
    do
    {
      --v10;
    }
    while (v10);
    v5 = (v9 + 1);
  }
  else
  {
    v5 = 1;
  }
  v6 = *a1;
  switch(*a1)
  {
    case 0:
      v7 = "Variable";
      goto LABEL_30;
    case 1:
      v7 = "Parameter";
      goto LABEL_30;
    case 2:
      v7 = "TemplateParameter";
      goto LABEL_30;
    case 3:
      v7 = "Result";
      goto LABEL_30;
    case 4:
      v7 = "StmtExprResult";
      goto LABEL_30;
    case 5:
      v7 = "Exception";
      goto LABEL_30;
    case 6:
      v7 = "Member";
      goto LABEL_30;
    case 7:
      v11 = "ArrayElement ";
      goto LABEL_24;
    case 8:
      v7 = "New";
      goto LABEL_30;
    case 9:
      v7 = "Temporary";
      goto LABEL_30;
    case 10:
      v7 = "Base";
      goto LABEL_30;
    case 11:
      v7 = "Delegating";
      goto LABEL_30;
    case 12:
      v11 = "VectorElement ";
      goto LABEL_24;
    case 13:
      v7 = "Block";
      goto LABEL_30;
    case 14:
      v7 = "Block (lambda)";
      goto LABEL_30;
    case 15:
      v11 = "ComplexElement ";
LABEL_24:
      sub_22E47DAC0(a2, v11);
      llvm::raw_ostream::operator<<();
      goto LABEL_31;
    case 16:
      sub_22E47DAC0(a2, "LambdaCapture ");
      sub_22EFC6724((uint64_t)a2, *((_QWORD *)a1 + 4));
      goto LABEL_31;
    case 17:
      v7 = "CompoundLiteral";
      goto LABEL_30;
    case 18:
      v7 = "RelatedResult";
      goto LABEL_30;
    case 19:
      v7 = "CF audited function Parameter";
      goto LABEL_30;
    case 20:
      v7 = "Binding";
LABEL_30:
      sub_22E47DAC0(a2, v7);
LABEL_31:
      v6 = *a1;
      break;
    default:
      break;
  }
  v12 = 1 << v6;
  if ((v12 & 0x7FFB8) == 0)
  {
    if ((v12 & 0x100045) != 0)
      v16 = (_QWORD *)*((_QWORD *)a1 + 4);
    else
      v16 = (_QWORD *)(*((_QWORD *)a1 + 4) & 0xFFFFFFFFFFFFFFF8);
    if (v16)
    {
      sub_22E47DAC0(a2, " ");
      sub_22F3ABF28(v16, a2);
    }
  }
  v13 = (uint64_t **)sub_22E47DAC0(a2, " '");
  v14 = sub_22F40B69C(v13, *((_QWORD *)a1 + 2));
  sub_22E47DAC0((llvm::raw_ostream *)v14, "'\n");
  return v5;
}

uint64_t sub_22F335C3C(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22F3359F8((int *)a1, v2);
}

__n128 sub_22F335C64(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  int v9;
  uint64_t v10;

  if (a3 == 1)
  {
    v4 = 3;
    goto LABEL_5;
  }
  if (a3 == 2)
  {
    v4 = 2;
LABEL_5:
    v9 = v4;
  }
  v10 = a2;
  v5 = sub_22EC51434(a1 + 8, (unint64_t)&v9);
  v6 = *(_QWORD *)(a1 + 8) + 40 * *(unsigned int *)(a1 + 16);
  v7 = *(_QWORD *)(v5 + 32);
  result = *(__n128 *)(v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v5;
  *(__n128 *)(v6 + 16) = result;
  *(_QWORD *)(v6 + 32) = v7;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

__n128 sub_22F335CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  int v9;
  uint64_t v10;

  v9 = 25;
  v10 = a3;
  v4 = a1 + 8;
  sub_22EC514AC(a1 + 8, *(_QWORD *)(a1 + 8), (unint64_t)&v9);
  v9 = 26;
  v10 = a2;
  v5 = sub_22EC51434(v4, (unint64_t)&v9);
  v6 = *(_QWORD *)v4 + 40 * *(unsigned int *)(v4 + 8);
  v7 = *(_QWORD *)(v5 + 32);
  result = *(__n128 *)(v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v5;
  *(__n128 *)(v6 + 16) = result;
  *(_QWORD *)(v6 + 32) = v7;
  ++*(_DWORD *)(v4 + 8);
  return result;
}

__n128 sub_22F335D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 17;
  v11 = *(_QWORD *)(**(_QWORD **)(a3 + 16) + 8);
  v5 = a1 + 8;
  sub_22EC514AC(a1 + 8, *(_QWORD *)(a1 + 8), (unint64_t)&v10);
  v10 = 18;
  v11 = a2;
  v12 = a3;
  v6 = sub_22EC51434(v5, (unint64_t)&v10);
  v7 = *(_QWORD *)v5 + 40 * *(unsigned int *)(v5 + 8);
  v8 = *(_QWORD *)(v6 + 32);
  result = *(__n128 *)(v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v6;
  *(__n128 *)(v7 + 16) = result;
  *(_QWORD *)(v7 + 32) = v8;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t sub_22F335E0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  result = sub_22F0623F0(v8, a2, a3, a4, 0);
  *(_BYTE *)(a1 + 1693) = 1;
  return result;
}

uint64_t sub_22F335E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 3) == 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    sub_22EFF605C(a2);
    if ((sub_22EE8B0B0(a1, v6, v5) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 8);
      v8 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
      v9 = sub_22F0623F0(v8, v7, v2, 0, 0);
      *(_BYTE *)(a1 + 1693) = 1;
      return v9;
    }
  }
  return v2;
}

BOOL sub_22F335F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  _QWORD v8[2];
  unint64_t v9;
  _DWORD v10[3098];
  uint64_t v11;

  v0 = MEMORY[0x24BDAC7A8]();
  v11 = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) != 0)
    return 0;
  v3 = v1;
  v4 = v0;
  v9 = v2 & 0xFFFFFFFFFFFFFFFELL;
  sub_22F0D5A50(v2 & 0xFFFFFFFFFFFFFFFELL);
  v8[0] = (v5 << 32) | 2;
  v8[1] = 0;
  sub_22EC395BC(v10, v4, v3, v8, &v9, 1, 0, 1);
  v6 = v10[0] != 0;
  sub_22EC3CE2C((uint64_t)v10);
  return v6;
}

uint64_t sub_22F336010(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_BYTE *)a1 = -66;
  if (byte_255E04EB3)
  {
    v5 = a2;
    v4 = sub_22F0D3748(190);
    a2 = v5;
    ++*((_DWORD *)v4 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAA74(a1) & 0x1F) << 13);
  return a1;
}

_QWORD *sub_22F336094(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  sub_22F0D492C(a1);
  v4 = v6;
  v5 = v7;
  if ((BYTE8(v6) & 3) != 0)
    result = (_QWORD *)sub_22F3F3034((uint64_t)&v4);
  else
    result = (_QWORD *)v4;
  *result = a2;
  return result;
}

void sub_22F3360F0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F33615C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F33615C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 688 * v2;
    do
    {
      result = sub_22EC4F754(a2, v5);
      v5 += 688;
      a2 += 688;
      v6 -= 688;
    }
    while (v6);
    v7 = *(_DWORD *)(v4 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 688 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 56);
        if ((void *)(v8 + v9 - 40) != v10)
          free(v10);
        result = (uint64_t)sub_22EC4FA84((char **)(v8 + v9 - 688));
        v9 -= 688;
      }
      while (v9);
    }
  }
  return result;
}

double sub_22F3361F0(char **a1, char **a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  double result;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = 152 * v5;
    do
    {
      v7 = &v4[v6];
      if ((*(_DWORD *)&v4[v6 - 152] & 0x7FFFFFFF) == 2)
      {
        v8 = (char *)*((_QWORD *)v7 - 15);
        if (v7 - 104 != v8)
          free(v8);
      }
      v6 -= 152;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F33628C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F3362F8(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F3362F8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 152 * v2;
    do
    {
      sub_22EC4D2E0(a2, v5);
      v5 += 152;
      a2 += 152;
      v6 -= 152;
    }
    while (v6);
    v7 = *(_DWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 152 * v7;
      do
      {
        v10 = v8 + v9;
        if ((*(_DWORD *)(v8 + v9 - 152) & 0x7FFFFFFF) == 2)
        {
          v11 = *(void **)(v10 - 120);
          if ((void *)(v10 - 104) != v11)
            free(v11);
        }
        v9 -= 152;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F336394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = 106;
  if (byte_255E04EB3)
  {
    v8 = a2;
    v9 = a4;
    v7 = a3;
    v6 = sub_22F0D3748(106);
    a3 = v7;
    a2 = v8;
    a4 = v9;
    ++*((_DWORD *)v6 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAA90(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F336424(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v8;
  int v9;
  unsigned int v10;
  int v11;

  *(_BYTE *)a1 = -59;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(197);
    ++*((_DWORD *)v8 + 2);
  }
  v9 = *(_DWORD *)a1;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  v10 = v9 & 0xFFF800FF;
  if (a4)
    v11 = 262400;
  else
    v11 = 256;
  *(_DWORD *)a1 = v11 | v10;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB1C(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F3364C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = -124;
  if (byte_255E04EB3)
  {
    v6 = a2;
    v7 = a3;
    v5 = sub_22F0D3748(132);
    a2 = v6;
    a3 = v7;
    ++*((_DWORD *)v5 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB2C(a1) & 0x1F) << 13);
  return a1;
}

unsigned int *sub_22F336548(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v9 = **(_QWORD **)(a1 + 16);
  sub_22E8901B8((uint64_t)v6, &v9);
  v8 = **(_QWORD **)(a1 + 24);
  sub_22E8906A0((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F3365D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22F3365E8(uint64_t a1, int a2, uint64_t a3, char a4, char a5)
{
  unint64_t v10;
  __int16 v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t v18;

  v10 = a1 + 216;
LABEL_2:
  v10 = *(_QWORD *)v10;
  while (1)
  {
    v11 = *(_WORD *)(v10 + 8);
    v12 = v11 & 0x7F;
    v13 = v12 > 0x18 || ((1 << (v11 & 0x7F)) & 0x1000006) == 0;
    if (!v13 || v12 - 52 < 6)
      break;
    v14 = (v11 & 0x7Eu) - 34 < 4 || v12 == 16;
    if (v14 || v12 == 83)
      break;
    v15 = *(_QWORD *)(sub_22EFCAD5C(v10) + 16);
    v10 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      goto LABEL_2;
  }
  v16 = sub_22E904A34(a1, 0);
  v17 = sub_22EC524B4(v16, a1) != 0;
  v18 = sub_22F3B1954(*(_QWORD *)(a1 + 88), v10, a3, a2, a4, v17, a5);
  sub_22EFCCFA0(v10, v18);
  return v18;
}

unint64_t sub_22F3366E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, int a5, void *a6, unint64_t a7, int a8, uint64_t a9)
{
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void *__src;
  __int128 v44;
  uint64_t v45;

  v15 = *a4;
  v16 = sub_22E904A34(a1, 0);
  v17 = sub_22EC524B4(v16, a1);
  __src = a6;
  if ((sub_22EFC7ADC(a2 + 64) & 1) != 0 || v17)
  {
    v26 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
    if (v26)
      v27 = *(_BYTE *)(v26 + 16) == 26;
    else
      v27 = 0;
    if (!v27)
      v26 = sub_22F10CF48(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
    v28 = sub_22F1104D8(*(_QWORD *)(*(_QWORD *)(v26 + 24) & 0xFFFFFFFFFFFFFFF0));
    if (v28 && *(_QWORD *)(v28 + 24) <= 0xFuLL && (*(_BYTE *)(v28 + 17) & 4) == 0)
    {
      v29 = sub_22F347230(a1);
      v39 = *(_QWORD *)(a1 + 88);
      v40 = v29;
      v30 = (unsigned __int16)(*(_QWORD *)(v26 + 16) >> 38);
      sub_22E4913B4(v26, (uint64_t)&v44);
      v15 = sub_22EF63D8C(v39, v40, (uint64_t *)(v26 + 40), v30, &v44, 0);
    }
  }
  v18 = *(_QWORD *)(a1 + 88);
  v19 = (v18 + 15952) | 6;
  *(_QWORD *)&v44 = v19;
  DWORD2(v44) = a3;
  v45 = a3;
  v20 = sub_22EFD6AD8(v18, a2, a5, (uint64_t *)&v44, v15, (uint64_t)a4, 0, (*(_DWORD *)(a1 + 56) & 0xFC) != 4, 1, a8, a5, a9);
  v21 = v20;
  *(_DWORD *)(v20 + 28) &= 0xFFFF9FFF;
  if (!v17)
  {
    sub_22EFCCFA0(a2 + 64, v20);
    v22 = (uint64_t *)(a1 + 216);
    v25 = v21;
    goto LABEL_19;
  }
  v22 = (uint64_t *)(a1 + 216);
  sub_22EFC80C4(v20, *(_QWORD *)(a1 + 216));
  if (a2)
    v23 = a2 + 64;
  else
    v23 = 0;
  v24 = sub_22EFE964C(*(_QWORD *)(a1 + 88), v23, *(_DWORD *)(v21 + 24), v19, (uint64_t)v17, v21);
  if (v24)
  {
    v25 = v24;
    *(_DWORD *)(v24 + 28) &= 0xFFFF9FFF;
    *(_QWORD *)(v21 + 144) = v24 & 0xFFFFFFFFFFFFFFF9;
    sub_22EFCCFA0(a2 + 64, v24);
LABEL_19:
    sub_22EFC80C4(v25, *v22);
  }
  if (a7)
  {
    v31 = sub_22EFC72E8(v21);
    if (a7 >> 61)
      v32 = -1;
    else
      v32 = 8 * a7;
    v33 = (void *)sub_22E3CD3D4(v31 + 2032, v32, 3);
    *(_QWORD *)(v21 + 120) = v33;
    memmove(v33, __src, 8 * a7);
    sub_22E98BD04(a1, (uint64_t *)__src, a7, 0, v21);
    v34 = *(uint64_t **)(v21 + 120);
    v35 = sub_22EFBAACC(v21);
    if (v35)
    {
      v36 = 8 * v35;
      do
      {
        v37 = *v34++;
        *(_QWORD *)(v37 + 16) = (v21 + 72) & 0xFFFFFFFFFFFFFFFBLL;
        v36 -= 8;
      }
      while (v36);
    }
  }
  return v21;
}

uint64_t sub_22F336994(uint64_t a1, unsigned int a2, _BYTE *a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t result;

  v11 = sub_22E904A34(a1, 0);
  result = sub_22F2633B0(v11 + 1432, a3, &a3[8 * a4]);
  *(_DWORD *)(v11 + 1424) = a4;
  *(_QWORD *)(v11 + 1568) = a2 | ((unint64_t)a5 << 32);
  *(_QWORD *)(v11 + 1576) = a6;
  return result;
}

unint64_t sub_22F3369FC()
{
  uint64_t v0;
  unsigned __int8 **v1;
  unsigned __int8 **v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  int *v20;
  size_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46[24];
  _BYTE v47[12392];
  _QWORD *v48;
  int64x2_t v49;
  _QWORD v50[7];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = v0;
  v50[5] = *MEMORY[0x24BDAC8D0];
  v16 = sub_22EF67C08(*(_QWORD *)(v0 + 88));
  v48 = v50;
  v49 = vdupq_n_s64(0x20uLL);
  v50[4] = 0;
  sub_22EEB5360((uint64_t)&v48, v16, (8 * *(_DWORD *)(v16 + 20) + 56), 8);
  *v17 = v14;
  if (v12)
  {
    v16 = sub_22EE7E490((_QWORD *)v15, v16, 1, v14);
    sub_22EEB5360((uint64_t)&v48, v16, 4uLL, 4);
    *v18 = v14;
  }
  if (v10 && ((*v2)[1] & 0x20) != 0)
  {
    if ((**(_QWORD **)(v15 + 72) & 0x1000) != 0)
      v19 = 6415;
    else
      v19 = 5271;
    sub_22E8FCA40((_QWORD *)v15, v10, v19, 0, (uint64_t)v46);
    sub_22E903BEC(v46);
    v16 = sub_22EF663B4(*(_QWORD *)(v15 + 88), v16, v8);
    sub_22EEB5360((uint64_t)&v48, v16, 4uLL, 4);
    *v20 = v10;
  }
  v21 = v49.i64[0] - v49.i64[1];
  v22 = sub_22EF5DB78(*(_QWORD *)(v15 + 88), v16, v49.i32[0] - v49.i32[2]);
  memcpy(v22 + 1, (char *)v48 + v49.i64[1], v21);
  v23 = sub_22EA27E18(v15, 0, v6, v16, v22, v14 | ((unint64_t)v14 << 32), v4, *v2);
  v24 = 0;
  if (v23 >= 0x10)
  {
    v25 = v23;
    v26 = v14 << 32;
    v27 = *v2;
    if (**v2 == 215)
      v28 = *v2;
    else
      v28 = 0;
    v40 = 16;
    v41 = 0;
    v42 = v23;
    v43 = 0;
    v44 = v6;
    v45 = v14;
    if (v4)
    {
      if (v28)
      {
        sub_22F0D5A50((uint64_t)v27);
        v30 = v29;
        sub_22F0D60E4((uint64_t)v27);
        v38 = v26;
        v39 = v30 | (unint64_t)(v31 << 32);
LABEL_17:
        v33 = (unsigned __int8 **)(v28 + 24);
        v34 = *((unsigned int *)v28 + 1);
LABEL_18:
        sub_22EC3B2A8(v47, v15, &v40, &v38, v33, v34, 0, 1);
        v35 = sub_22EC3DF80((int)v47, v15);
        v24 = 0;
        if ((v35 & 1) == 0)
        {
          *v2 = (unsigned __int8 *)(v35 & 0xFFFFFFFFFFFFFFFELL);
          v24 = v25;
        }
        sub_22EC3CEB8((uint64_t)v47);
        goto LABEL_21;
      }
      v37 = v14;
      v34 = 1;
      v38 = (v37 << 32) | 1;
      v39 = v37 | ((unint64_t)v37 << 32);
    }
    else
    {
      sub_22F0D5A50((uint64_t)v27);
      v38 = v26 | 2;
      v39 = v32 | ((unint64_t)v32 << 32);
      if (v28)
        goto LABEL_17;
      v34 = 1;
    }
    v33 = v2;
    goto LABEL_18;
  }
LABEL_21:
  if (v48 != v50 && v48)
    MEMORY[0x2348A0E84](v48, 0x1000C8077774924);
  return v24;
}

_QWORD *sub_22F336D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  int v10;
  _QWORD *result;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a3 + 48);
  v5 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 40;
  v6 = *(_DWORD *)(a3 + 24);
  v17 = a3;
  v12 = a3;
  v13 = v6;
  v14 = 0;
  v15 = v4;
  v16 = v5;
  v7 = (_OWORD *)sub_22E78DF7C(a2 + 1264, (unint64_t)&v12, 1);
  v8 = (_OWORD *)(*(_QWORD *)(a2 + 1264) + 32 * *(unsigned int *)(a2 + 1272));
  v9 = v7[1];
  *v8 = *v7;
  v8[1] = v9;
  v10 = *(_DWORD *)(a2 + 1272) + 1;
  *(_DWORD *)(a2 + 1272) = v10;
  result = sub_22F283EC0((uint64_t *)(a2 + 1232), &v17);
  *((_DWORD *)result + 2) = v10;
  return result;
}

void sub_22F336DD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  sub_22EB48DCC(a1);
  sub_22EB48E64(a1);
  if ((a4 & 1) == 0)
    sub_22F31D05C(a1);
  v7 = *(_QWORD *)(v6 + 1480);
  sub_22EFC77E8(v7, 1);
  v8 = sub_22EFC3B90(v7);
  v15 = v17;
  v16 = 0x400000000;
  sub_22F271D38((uint64_t)&v15, v8, 0);
  v9 = *(_DWORD *)(v7 + 24);
  v13 = 0;
  v14 = 0;
  sub_22EA39224(a1, 0, v9, v7, (uint64_t *)v15, v16, 0, 0, (uint64_t)&v13);
  sub_22E80F94C(&v14);
  sub_22EAB3AC0(a1, 0, (uint64_t *)v7);
  sub_22E904AD8(a1, 0, 0, 0, (uint64_t *)&v11);
  v10 = v11;
  v11 = 0;
  if (v10)
    sub_22E905138((uint64_t)&v12, v10);
  if (v15 != v17)
    free(v15);
}

unint64_t sub_22F336F24(uint64_t a1, _QWORD *a2, __int16 a3)
{
  __int128 v7[5];
  _OWORD v8[5];

  sub_22E4913B4((uint64_t)a2, (uint64_t)v8);
  v7[0] = v8[0];
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[4] = v8[4];
  LOWORD(v7[0]) = v8[0] & 0xFFE0 | a3;
  *(_QWORD *)((char *)v7 + 4) = 0;
  return sub_22EF63D8C(*(_QWORD *)(a1 + 88), a2[3], a2 + 5, (unsigned __int16)(a2[2] >> 38), v7, 0);
}

unint64_t sub_22F336FAC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  __int128 v26;
  void *v27[2];
  uint64_t v28;

  v0 = MEMORY[0x24BDAC7A8]();
  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(v1 + 24);
  if ((~v4 & 3) == 0)
    return 0;
  v7 = v3;
  LODWORD(v8) = v2;
  v9 = v1;
  v10 = v0;
  if (sub_22F308578((uint64_t *)v1))
    return sub_22EFBC5B4(*(_QWORD *)v9);
  v11 = (_DWORD)v8 == 0;
  if ((_DWORD)v8)
    v8 = v8;
  else
    v8 = *(unsigned int *)(v9 + 8);
  if ((v4 & 8) != 0)
  {
    v15 = !v11;
    v16 = sub_22EBBB18C(v10);
    v5 = (uint64_t)sub_22EBBC14C(v10, v8, v16, v15);
    if ((*(_BYTE *)(v9 + 24) & 3) == 0)
      v5 = sub_22EB2EA08(v10, v8, 5, v5);
    v14 = 0;
  }
  else
  {
    v12 = *(_QWORD *)v9;
    v13 = *(_QWORD *)(*(_QWORD *)v9 + 40);
    if ((v13 & 7) != 0)
      v14 = 0;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    v26 = 0u;
    *(_OWORD *)v27 = 0u;
    v19 = v13;
    LODWORD(v20) = v8;
    sub_22EFC6D6C((uint64_t)&v21, v13);
    v5 = sub_22EB24A3C(v10, &v26, &v19, v12, 0, 0, 0);
    if (HIDWORD(v27[1]))
      free(v27[0]);
  }
  if ((v7 & 1) == 0)
  {
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *(_QWORD *)(v9 + 16);
      LODWORD(v19) = 16;
      v20 = 0;
      v21 = v17;
      v22 = 0;
      v23 = v14;
      v24 = v8;
      v18[0] = v8 << 32;
      v18[1] = v8 | ((unint64_t)v8 << 32);
      sub_22EC3B2A8(&v26, v10, &v19, v18, &v25, 1, 0, 1);
      v5 = sub_22EC3DF80((int)&v26, v10);
      sub_22EC3CEB8((uint64_t)&v26);
    }
  }
  return v5;
}

uint64_t sub_22F3371C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10[232];

  v10[231] = *MEMORY[0x24BDAC8D0];
  sub_22F2F3A38((uint64_t)v10, *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8));
  sub_22EA30A30(a1, v10[186], a3);
  sub_22F0D60E4(a3);
  sub_22EC54548(a1, v6, v5, (uint64_t)v10);
  v8 = v7;
  sub_22F2F43D0((uint64_t)v10);
  return v8;
}

uint64_t sub_22F337270(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD v47[2];
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(sub_22EFCAD5C(a4 + 72) + 16);
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  if (v11)
    v12 = v11 - 8;
  else
    v12 = 0;
  v13 = sub_22EFCE144((unint64_t)(v12 + 8), (*(_QWORD *)(a1 + 88) + 15952) | 6);
  v14 = v13 & 0xFFFFFFFFFFFFFFF8;
  if ((v13 & 4) != 0 && v14)
    v14 = *(_QWORD *)v14;
  *(_DWORD *)(v14 + 28) |= 0x800u;
  sub_22EFC9100(v14, *(_QWORD *)(a1 + 88));
  v15 = *(_QWORD *)(a5 + 8);
  LODWORD(v48) = 14;
  v49 = 0;
  v50 = v15;
  v51 = 0;
  v52 = a3;
  v53 = 0;
  v16 = sub_22EC45014(a1, &v48, a2, a5, 0, 0);
  v17 = v16;
  if ((v16 & 1) == 0)
  {
    if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      sub_22EFF605C(v16 & 0xFFFFFFFFFFFFFFFELL);
      v19 = v18;
    }
    else
    {
      v19 = 0;
    }
    v17 = sub_22EBCF22C(a1, v17 & 0xFFFFFFFFFFFFFFFELL, v19, 0, 0);
  }
  if ((v17 & 1) != 0)
    return 1;
  v22 = a3;
  sub_22F3AD66C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 216), a3);
  v24 = v23;
  v25 = *(_QWORD *)(v14 + 56);
  v26 = v25 & 0xFFFFFFFFFFFFFFF8;
  if ((v25 & 4) != 0)
    v26 = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(v23 + 96) = v26;
  if (sub_22EFBF68C(v14))
    v27 = 0x2000;
  else
    v27 = 0;
  *(_DWORD *)(v24 + 48) = *(_DWORD *)(v24 + 48) & 0xFFFF5FFF | v27;
  v48 = &v50;
  v49 = 0x400000000;
  v28 = sub_22EFBAACC(v14);
  if (v28)
  {
    v46 = v24;
    v30 = 0;
    v31 = v24 + 40;
    v32 = 8 * v28;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v14 + 120) + v30);
      v34 = *(_QWORD *)(v33 + 56);
      v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if ((v34 & 4) != 0 && *(_DWORD *)(v35 + 16))
        v36 = **(int ***)(v35 + 24);
      else
        v36 = (int *)(v33 + 64);
      v37 = *(_QWORD *)(v33 + 40);
      if ((v37 & 7) != 0)
        v38 = 0;
      else
        v38 = v37 & 0xFFFFFFFFFFFFFFF8;
      if ((v34 & 4) != 0)
        v35 = *(_QWORD *)(v35 + 32);
      v39 = sub_22EFBF080(*(_QWORD *)(a1 + 88), v31, *v36, *(_DWORD *)(v33 + 24), v38, *(_QWORD *)(v33 + 48), v35, *(_BYTE *)(v33 + 96) & 7, 0);
      v40 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v40 = v49;
      }
      *((_QWORD *)v48 + v40) = v39;
      v29 = v49 + 1;
      LODWORD(v49) = v49 + 1;
      v30 += 8;
    }
    while (v32 != v30);
    v24 = v46;
    v22 = a3;
  }
  else
  {
    v29 = v49;
  }
  sub_22F3ACFA8((_DWORD *)v24, v48, v29);
  *(_DWORD *)(v24 + 48) |= 0x10000u;
  v41 = sub_22EF579A8(*(_QWORD *)(a1 + 88), *(_QWORD *)(a5 + 8), 0);
  if (v24)
    v42 = v24 + 40;
  else
    v42 = 0;
  v47[0] = sub_22EFBB670(*(_QWORD *)(a1 + 88), v42, v22, v22, 0, *(_QWORD *)(a5 + 8), (uint64_t)v41, 0) & 0xFFFFFFFFFFFFFFF9;
  v47[1] = v17 & 0xFFFFFFFFFFFFFFFELL;
  sub_22F3AD00C(v24, *(_QWORD *)(a1 + 88), (uint64_t)v47, 1, 0);
  v43 = (unsigned __int8 *)sub_22F0D3724(16, *(_QWORD *)(a1 + 88), 8u);
  *v43 = 8;
  if (byte_255E04EB3)
    sub_22F3F189C(8);
  *((_DWORD *)v43 + 1) = a3;
  *((_DWORD *)v43 + 2) = a3;
  *(_DWORD *)v43 = *v43;
  *(_QWORD *)(v24 + 88) = v43;
  v20 = sub_22F0D3724(24, *(_QWORD *)(a1 + 88), 8u);
  v44 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v44 || *(unsigned __int8 *)(v44 + 16) - 27 <= 0xFFFFFFFD)
    v44 = sub_22F10CF48(v44);
  sub_22F330924(v20, v24, *(_QWORD *)(v44 + 24));
  v45 = *(_DWORD *)(a1 + 1704);
  if (v45 >= *(_DWORD *)(a1 + 1708))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v45 = *(_DWORD *)(a1 + 1704);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1696) + 8 * v45) = v24 & 0xFFFFFFFFFFFFFFFBLL;
  ++*(_DWORD *)(a1 + 1704);
  *(_WORD *)(a1 + 1693) = 257;
  if (v48 != &v50)
    free(v48);
  return v20;
}

void sub_22F337694()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3376A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F2E6D78(a2);
  if (result)
    return (*(_DWORD *)(result + 28) & 0x7Fu) - 60 < 7;
  return result;
}

__n128 sub_22F3376D8@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB8848;
  *a2 = v4;
  return result;
}

uint64_t sub_22F337730(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

_DWORD *sub_22F33774C(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F3377B8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F337854(a1, a2, v7);
    *v5 = *a2;
    *(_QWORD *)(v5 + 1) = 0;
  }
  return v5;
}

uint64_t sub_22F3377B8(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 12 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 12 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F337854(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EC55F58(a1, v6);
  v8 = 0;
  sub_22F3377B8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F337904(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 12 * v6;
    do
    {
      *v7 = -1;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_22F3377B8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_DWORD *)a2;
      *(_QWORD *)(v10 + 1) = *(_QWORD *)(a2 + 4);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 12;
  }
  return result;
}

uint64_t sub_22F3379B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2 + 8;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != a2 + 8)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v3 + 136);
      if (v5)
      {
        while (1)
        {
          v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
          if ((v5 & 4) == 0 || !v6)
            break;
          result = sub_22E8BB8FC(v4, *v6);
          v5 = v6[1];
          if (!v5)
            goto LABEL_9;
        }
        result = sub_22E8BB8FC(v4, v5 & 0xFFFFFFFFFFFFFFF8);
      }
LABEL_9:
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

double sub_22F337A30(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  double result;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = v4 + 8;
  *(_QWORD *)(v4 + 16) = v4 + 8;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 1;
  for (i = 40; i != 168; i += 16)
    *(_QWORD *)(v4 + i) = 0;
  *(_QWORD *)(v4 + 168) = v4 + 200;
  *(_QWORD *)(v4 + 176) = v4 + 200;
  *(_QWORD *)(v4 + 184) = 4;
  *(_DWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = v4 + 256;
  *(_QWORD *)(v4 + 248) = 0x400000000;
  *(_DWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 360) = 0;
  *(_WORD *)(v4 + 368) = 257;
  *(_BYTE *)(v4 + 370) = 1;
  a1[11] = v4;
  sub_22F3AB4A8((uint64_t *)v4, a2);
  sub_22F3379B8((uint64_t)a1, a1[11]);
  sub_22EC561E4((uint64_t)a1);
  *(_QWORD *)&result = 0x100000005;
  *a1 = 0x100000005;
  return result;
}

double sub_22F337B04(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  double result;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = v4 + 8;
  *(_QWORD *)(v4 + 16) = v4 + 8;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 1;
  for (i = 40; i != 168; i += 16)
    *(_QWORD *)(v4 + i) = 0;
  *(_QWORD *)(v4 + 168) = v4 + 200;
  *(_QWORD *)(v4 + 176) = v4 + 200;
  *(_QWORD *)(v4 + 184) = 4;
  *(_DWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = v4 + 256;
  *(_QWORD *)(v4 + 248) = 0x400000000;
  *(_DWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 360) = 0;
  *(_WORD *)(v4 + 368) = 257;
  *(_BYTE *)(v4 + 370) = 1;
  a1[11] = v4;
  sub_22F3AB4A8((uint64_t *)v4, a2);
  sub_22F3379B8((uint64_t)a1, a1[11]);
  sub_22EC561E4((uint64_t)a1);
  *(_QWORD *)&result = 5;
  *a1 = 5;
  return result;
}

unint64_t sub_22F337BD8(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = sub_22EC60AEC(a2);
  if ((_DWORD)result)
  {
    if (sub_22E49F6F8(a2))
      sub_22EABCDDC(a1, a2);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x200) == 0)
      sub_22EABD328(a1, a2);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x800) == 0)
      sub_22EABE360(a1, a2);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0)
    {
      if (sub_22EABDAF8(a2))
        sub_22EABDBA0(a1, a2);
      if (sub_22EABE940(a2))
        sub_22EABEA08(a1, a2);
    }
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x2000) == 0)
      return sub_22EABEFB4(a1, a2);
  }
  return result;
}

uint64_t sub_22F337CE8(uint64_t a1)
{
  int v2;
  unsigned int i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v9[31];

  v2 = *(_DWORD *)(a1 + 10680);
  for (i = *(_DWORD *)(a1 + 11768); v2 != i; ++i)
  {
    v8 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 10672) + ((unint64_t)i << 6) + 16);
    if (v5 && (v8 = sub_22EC61E54(v5)) != 0)
    {
      sub_22F29D1F0(a1 + 11904, &v8, (uint64_t)v9);
      if (v9[16])
      {
        v6 = v8;
      }
      else
      {
        v6 = 0;
        v8 = 0;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = *(unsigned int *)(a1 + 11768);
    if (v7 >= *(unsigned int *)(a1 + 11772))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(unsigned int *)(a1 + 11768);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 11760) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 11768);
  }
  return a1 + 11904;
}

unint64_t sub_22F337DFC(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  return sub_22EC65CE0(a1, a1[418], a2, a3, 11, a4);
}

unint64_t sub_22F337E18(uint64_t a1, uint64_t a2)
{
  return sub_22EC6602C(a1, a2) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F337E58()
{
  return 0;
}

void sub_22F337E60(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v10;
  unint64_t v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  uint64_t v24;
  char v25;
  char v26;
  _BYTE v27[168];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  v18 = 0;
  v19 = v23;
  v20 = v23;
  v21 = 8;
  v22 = 0;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  sub_22E8BAEE4((uint64_t)v27, a1, 0, 0, a3, 0);
  v27[164] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  if ((a5 & 1) == 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v11 = sub_22E3CD31C((uint64_t *)(v10 + 72), v10);
    if (v11)
      v12 = (const void *)(v11 + 40);
    else
      v12 = 0;
    sub_22E3BA850((uint64_t)&v19, v12);
  }
  v13 = operator new(0x28uLL);
  v13[2] = 0;
  v13[3] = 0;
  *((_DWORD *)v13 + 8) = 0;
  v14 = v17[0];
  *v13 = v17[0];
  v13[1] = v17;
  *(_QWORD *)(v14 + 8) = v13;
  v17[0] = (uint64_t)v13;
  ++v18;
  sub_22EC71544(v17, a2, v27, 1, 0);
  v15 = (_QWORD **)v17[0];
  v16 = *(_QWORD *)v17[0];
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17[0] + 8);
  *v15[1] = v16;
  --v18;
  sub_22F339A14((uint64_t)(v15 + 2));
  operator delete(v15);
  sub_22E8BAFF0((uint64_t)v27);
  if (v20 != v19)
    free(v20);
  sub_22F339A88(v17);
}

void sub_22F337FEC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;

  if (!a3)
  {
    v3 = *(_QWORD *)(a2 + 40);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    v5 = (v3 & 7) != 0 || v4 == 0;
    if (!v5
      && ((*(_BYTE *)(a2 + 8) & 4) == 0
       || (sub_22EC62AF4(*(_QWORD *)(a1 + 424), a2) & 1) != 0
       || *(_QWORD *)(a1 + 8) == v4))
    {
      sub_22EC67E3C(a1, (const void *)(*(_QWORD *)(v4 + 16) + 16), **(unsigned int **)(v4 + 16), 0);
    }
  }
}

void sub_22F338060(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  void *v3;
  void **v4;

  v1 = *(_DWORD *)(a1 + 8) - 1;
  *(_DWORD *)(a1 + 8) = v1;
  v2 = *(_QWORD *)a1 + 88 * v1;
  v4 = (void **)(v2 + 64);
  sub_22E8D19C8(&v4);
  v3 = *(void **)(v2 + 16);
  if (v3 != (void *)(v2 + 32))
    free(v3);
}

void sub_22F3380BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  uint64_t v19;

  *(_BYTE *)(a1 + 1025) = 1;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = *v5;
      v5 += 2;
      v7 = v6 + 48;
      if (v6)
        v8 = v7;
      else
        v8 = 0;
      sub_22EC68998(a1 + 632, v8);
    }
    while (v5 != a3);
  }
  v9 = *(_QWORD *)(a1 + 440);
  v11 = v9
     && (v10 = *(_QWORD *)(v9 + 8)) != 0
     && (*(_BYTE *)(v10 + 8) & 4) != 0
     && (v19 = *(_QWORD *)(v10 + 16)) != 0
     && *(_BYTE *)(v19 + 16) == 46;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 424) + 88);
  if (*(_DWORD *)(v12 + 16))
  {
    v13 = 0;
    while (1)
    {
      v14 = (_DWORD *)sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v13));
      if (!v14)
        goto LABEL_14;
      if ((v14[7] & 0x7Fu) - 35 > 2)
        goto LABEL_14;
      v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 32))(v14);
      if ((sub_22EFC7ADC(v15 + 64) & 1) != 0)
        goto LABEL_14;
      v16 = *(_QWORD *)(v15 + 72);
      if ((v16 & 0x1000000) != 0 || (v16 & 0xE000) == 0x4000)
        goto LABEL_14;
      if (*(_QWORD *)(v15 + 40) < 8uLL || (*(_QWORD *)(v15 + 40) & 7) != 0)
        goto LABEL_14;
      v18 = (v16 & 0x30000) == 0;
      if (v11)
        goto LABEL_26;
      if ((v16 & 0x30000) != 0)
        break;
LABEL_14:
      if (++v13 == *(_DWORD *)(v12 + 16))
        return;
    }
    v18 = (*(_DWORD *)(v15 + 28) & 0x7E) == 36;
LABEL_26:
    if (!v18)
      sub_22EC68998(a1 + 632, v15 + 64);
    goto LABEL_14;
  }
}

uint64_t sub_22F33821C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t result;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((*(_QWORD *)a2 & 7) != 0)
    v3 = 0;
  else
    v3 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(a1 + 456);
  v5 = (unsigned int *)(a1 + 464);
  v37 = a1 + 584;
  v38 = a2;
  while (2)
  {
    v6 = v4;
    v7 = *(_QWORD *)(a1 + 440);
    for (i = *(unsigned __int8 *)(a2 + 60); ; i = 1)
    {
      v9 = *(_QWORD *)(a1 + 424);
      v10 = *(_QWORD *)(a1 + 432);
      v11 = *(unsigned __int8 *)(a1 + 1024);
      v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 448) + 14);
      v14 = v3 == *(_QWORD *)(a1 + 8) && i == 0;
      *(_BYTE *)(a1 + 627) = 0;
      sub_22F3385BC((uint64_t)v5);
      *(_QWORD *)(a1 + 584) = v3;
      *(_BYTE *)(a1 + 628) = v14;
      if (v6)
      {
        if ((*(_WORD *)(v6 + 8) & 0x7F) != 0x16
          || (!v12 || (v39 = 0, (v15 = sub_22EFDB894(v6 - 48, v3, &v39)) == 0))
          && (v15 = sub_22EFDA7BC(v6 - 48, v3, 1)) == 0)
        {
          sub_22EC611AC(v9, v5, v6, 0);
          goto LABEL_19;
        }
        goto LABEL_17;
      }
      sub_22EC64BE8(v9, (uint64_t)v5, v10, v7, 0, v11 != 0);
      v17 = sub_22E90328C(v9);
      if (!v17)
        goto LABEL_19;
      v18 = v17;
      if ((*(_BYTE *)(v17 + 58) & 2) == 0 || !sub_22EFDC9F0(v17))
        goto LABEL_19;
      if (!*(_DWORD *)(a1 + 480))
        goto LABEL_35;
      v16 = *v5;
      if (*v5 == 2)
      {
        v19 = **(_QWORD **)(a1 + 472) & 0xFFFFFFFFFFFFFFFCLL;
        v20 = *(_DWORD *)(v19 + 28) & 0x7F;
        v21 = v20 > 0x2F;
        v22 = (1 << v20) & 0xC00000060000;
        if (!v21 && v22 != 0)
          v19 = sub_22EFBAEA4(v19);
        if (sub_22EFC8010(v19))
          goto LABEL_19;
LABEL_35:
        v24 = sub_22EFDC9F0(v18);
        v15 = sub_22EFDB894(v24, v3, &v39);
        if (!v15)
        {
LABEL_19:
          v16 = *v5;
          goto LABEL_20;
        }
LABEL_17:
        sub_22E8BB8FC((uint64_t)v5, v15);
        sub_22EC561E4((uint64_t)v5);
        goto LABEL_19;
      }
LABEL_20:
      if (v16 > 4)
        return 0;
      if (((1 << v16) & 0x13) == 0)
      {
        v26 = *(unsigned int *)(a1 + 480);
        if ((_DWORD)v26)
        {
          v27 = *(uint64_t **)(a1 + 472);
          v28 = 8 * v26;
          do
          {
            v29 = *v27++;
            sub_22F33852C(v38, v29 & 0xFFFFFFFFFFFFFFFCLL);
            v28 -= 8;
          }
          while (v28);
        }
        sub_22EC685E8(*(_QWORD *)(a1 + 424), v38);
        v30 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 448) + 24))(*(_QWORD *)(a1 + 448), v38);
        *(_DWORD *)(v38 + 48) = v30;
        v31 = *(_DWORD *)(v38 + 40);
        if (v31 <= 0x2710)
        {
          v32 = *(_DWORD *)(v38 + 44);
          if (v32 <= 0x2710)
          {
            v33 = 150 * v30 + 100 * v31 + 110 * v32;
            if (v30 <= 0x2710 && v33 < 0x2711)
            {
              sub_22EC67FFC(v38, *(_QWORD *)(a1 + 440), v37);
              return 1;
            }
          }
        }
        if (!*(_BYTE *)(a1 + 1025))
          return 0;
        v25 = a1 + 832;
        a2 = v38;
        goto LABEL_53;
      }
      if (!v7)
        break;
      v7 = 0;
      *(_BYTE *)(v38 + 60) = 1;
    }
    v4 = 0;
    a2 = v38;
    if (v6)
      continue;
    break;
  }
  if (!*(_BYTE *)(a1 + 1025))
    return 0;
  v25 = a1 + 832;
LABEL_53:
  v36 = sub_22EC72EA4(v25, a2);
  sub_22F330280(*(_QWORD *)(a1 + 832) + 88 * *(unsigned int *)(a1 + 840), v36);
  result = 0;
  ++*(_DWORD *)(a1 + 840);
  return result;
}

uint64_t sub_22F33852C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 24);
    if (v4 && !**(_QWORD **)(result + 16))
    {
      v4 = 0;
      *(_DWORD *)(result + 24) = 0;
    }
    if (v4 >= *(_DWORD *)(result + 28))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = *(_DWORD *)(v3 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 24);
    if (!*(_QWORD *)v3)
      *(_QWORD *)v3 = *(_QWORD *)(a2 + 40);
  }
  return result;
}

uint64_t sub_22F3385BC(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v3 = (_QWORD *)(a1 + 88);
  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    v4 = sub_22EC6CBD0(result);
    result = MEMORY[0x2348A0E9C](v4, 0x10E0C409F09D3C3);
  }
  *(_BYTE *)(a1 + 165) = 0;
  *v3 = 0;
  v3[1] = 0;
  return result;
}

void sub_22F33860C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void **v6;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = 88 * v2;
    do
    {
      v6 = (void **)(v3 + v4 - 24);
      sub_22E8D19C8(&v6);
      v5 = *(void **)(v3 + v4 - 72);
      if ((void *)(v3 + v4 - 56) != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

unint64_t sub_22F338680(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  result = sub_22EFCC008(a2);
  if (result)
  {
    v4 = result;
    while (1)
    {
      v5 = *(_WORD *)(v4 + 8) & 0x7F;
      if (v5 == 16)
        break;
      if (v5 != 33)
      {
        if (v5 == 5 || v5 == 12)
          goto LABEL_18;
LABEL_15:
        v8 = sub_22EFCC008(v4);
        v9 = *(unsigned int *)(a1 + 8);
        if (v9 >= *(unsigned int *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *(unsigned int *)(a1 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        ++*(_DWORD *)(a1 + 8);
        goto LABEL_18;
      }
      if ((*(_BYTE *)(v4 + 12) & 0x80) != 0)
        goto LABEL_15;
LABEL_18:
      result = sub_22EFCB77C(v4);
      v4 = result;
      if (!result)
        return result;
    }
    if ((*(_BYTE *)(v4 + 56) & 4) != 0)
      goto LABEL_18;
    if (*(_QWORD *)(v4 - 8) < 8uLL || (*(_QWORD *)(v4 - 8) & 7) != 0)
      goto LABEL_18;
    goto LABEL_15;
  }
  return result;
}

double sub_22F338770(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  double result;
  uint64_t **v7;
  uint64_t v8;
  unsigned int v9;

  v9 = a4;
  v8 = a3;
  if (a5)
  {
    v7 = (uint64_t **)sub_22F339AF8(a2 + 12040, &v8);
    sub_22EC723C8(v7 + 1, &v9);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_22F3387F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;

  v10 = sub_22F0D3724(24, *(_QWORD *)(a1 + 88), 8u);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832);
  *(_BYTE *)v10 = -25;
  if (byte_255E04EB3)
    sub_22F3F189C(231);
  v12 = *(_DWORD *)v10;
  *(_QWORD *)(v10 + 8) = v11;
  *(_DWORD *)(v10 + 16) = a5;
  *(_DWORD *)v10 = v12 & 0xFFFC00FF | 0x3C100;
  v18 = v10;
  v13 = (uint64_t *)sub_22F338BAC(a1 + 10176, &v18);
  v14 = *a2;
  *a2 = 0;
  v15 = *v13;
  *v13 = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  sub_22EC72658(v13 + 1, a3);
  sub_22EC72658(v13 + 5, a4);
  v16 = *(_DWORD *)(a1 + 296);
  if (v16 >= *(_DWORD *)(a1 + 300))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(a1 + 296);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v16) = v10;
  ++*(_DWORD *)(a1 + 296);
  return v10;
}

void sub_22F338924(uint64_t a1, unsigned int a2, unint64_t a3, int a4, int a5)
{
  unint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[8];

  v7 = a3;
  v18[7] = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EC6C350(a3);
  if (v10)
    v7 = v10;
  v11 = *(_QWORD *)(v7 + 8) & 6;
  if ((*(_BYTE *)(v7 + 29) & 0x80) == 0)
  {
    if (v11)
    {
      v12 = *(_QWORD *)(v7 - 8);
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!v11)
  {
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v12 = sub_22EFC7594(v7);
LABEL_8:
  v15 = &v17;
  v17 = v12;
  v16 = 0x800000001;
  v13 = (uint64_t *)sub_22EF5929C(*(_QWORD *)(a1 + 88), v7);
  sub_22F338A50((uint64_t)&v15, (uint64_t)v18, v13, &v13[v14]);
  sub_22EC6C5C8(a1, a2, v7, *(_DWORD *)(v7 + 24), (std::string::size_type *)v15, v16, a4, a5);
  if (v15 != &v17)
    free(v15);
}

_BYTE *sub_22F338A50(uint64_t a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_22F2633B0(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_22F246808(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      *(_DWORD *)(a1 + 8) = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

uint64_t sub_22F338BAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13[9];
  uint64_t v14;
  uint64_t v15[10];

  v15[9] = *MEMORY[0x24BDAC8D0];
  v11 = *a2;
  v12 = 0;
  sub_22F28430C((uint64_t)&v9, a1, &v11, &v12);
  v4 = v9;
  if (v10)
  {
    v13[0] = 0;
    v13[4] = 0;
    v8 = *a2;
    v13[8] = 0;
    v14 = v8;
    v15[0] = 0;
    v15[4] = 0;
    v15[8] = 0;
    sub_22F33A6D4(v15, v13);
    sub_22EC730CC((uint64_t *)(a1 + 24), &v14);
    sub_22F3092FC(v15);
    sub_22F3092FC(v13);
    v6 = *(_QWORD *)(a1 + 24);
    v5 = -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v6) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v9 + 8);
    v6 = *(_QWORD *)(a1 + 24);
  }
  return v6 + 80 * v5 + 8;
}

uint64_t sub_22F338CC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a2;
  v8 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v3, &v8))
  {
    v4 = v8;
    v5 = *(_QWORD *)a1;
    v6 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(unsigned int *)(a1 + 16);
    v4 = *(_QWORD *)a1 + 16 * v6;
  }
  if (v4 == v5 + 16 * v6)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 80 * *(unsigned int *)(v4 + 8);
}

uint64_t *sub_22F338D48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 10176;
  result = (uint64_t *)sub_22F33A7CC(a1 + 10176, &v5);
  if (*(uint64_t **)(a1 + 10208) != result)
    return sub_22EC7322C(v3, result);
  return result;
}

uint64_t sub_22F338D9C(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  _BYTE v10[88];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int16 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = a4;
  DWORD2(v7) = a3;
  sub_22EFC6D6C((uint64_t)&v8, a4);
  v9[0] = 0;
  v9[1] = v10;
  v9[2] = 0x800000000;
  memset(&v10[64], 0, 24);
  v11 = a1;
  v12 = v7;
  v13 = v8;
  v14 = xmmword_22F4658C0;
  v15 = 16842752;
  v16 = 0;
  v17 = 0;
  sub_22EC56024((uint64_t)v9);
  HIWORD(v15) = 0;
  sub_22EC63520(a1, (uint64_t)v9, a2, 0, 0);
  sub_22EC56D44((uint64_t)v9);
  return sub_22E8BAFF0((uint64_t)v9);
}

void sub_22F338E98(uint64_t a1)
{
  sub_22F339D88(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F338EBC()
{
  return 1;
}

void sub_22F338EC8()
{
  JUMPOUT(0x2348A0E9CLL);
}

__n128 sub_22F338EDC@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB8880;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 48);
  *a2 = v4;
  return result;
}

_QWORD *sub_22F338F44(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_22EC6F220(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x100000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_22F24C77C((uint64_t)result, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F338FA8(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F339014(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F339014(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 24 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x100000000;
      if (*(_DWORD *)(v5 + 8))
        sub_22F24C77C((uint64_t)a2, v5);
      v5 += 24;
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 24 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 24);
        if ((void *)(v8 + v9 - 8) != v10)
          free(v10);
        v9 -= 24;
      }
      while (v9);
    }
  }
}

char **sub_22F3390CC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v5)
        free(v5);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

BOOL sub_22F339140(int a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v3;

  if (a1 != 2)
    return 0;
  v2 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(v2 + 28) & 0x7F;
  if (v3 <= 0x2F && ((1 << v3) & 0xC00000060000) != 0)
    v3 = *(_DWORD *)(sub_22EFBAEA4(v2) + 28) & 0x7F;
  return v3 - 33 < 5;
}

uint64_t sub_22F3391A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F3392CC(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 32;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_22F339204(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F3392CC(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 32;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F339378((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_BYTE *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 32;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_22F3392CC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F339378(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 32;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EC702D0((uint64_t)a1, v6);
  v8 = 0;
  sub_22F3392CC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F339434(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F3392CC((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_BYTE *)v11 + 8) = *(_BYTE *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F3394FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22EC70834((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F3395B4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22EC70B04((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_22F339670(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = (_QWORD *)MEMORY[0x23489D23C](8 * a2, 8);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 17;
  do
LABEL_6:
    *result++ = -4096;
  while (result != v6);
  return result;
}

_QWORD *sub_22F3396F0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2C355C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F339758(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F339758(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EC72294(a1, v6);
  v8 = 0;
  sub_22F2C355C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t *sub_22F339808(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -1;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      v9 = *(v8 - 1);
      if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = 0;
        sub_22F2C355C(*v4, *((_DWORD *)v4 + 4), v9, &v12);
        v11 = v12;
        *v12 = *(v8 - 1);
        v11[1] = *v8;
        *v8 = 0;
        ++*((_DWORD *)v4 + 2);
        result = sub_22F29CFE8(v8);
      }
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
  return result;
}

int *sub_22F3398CC@<X0>(uint64_t a1@<X0>, int **a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *result;
  int *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int *v13;

  v4 = sub_22EFCC008(a1);
  if ((*(_WORD *)(v4 + 8) & 0x100) != 0)
  {
    v5 = sub_22EFCAD5C(a1);
    v6 = sub_22EFC72E8(v5);
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v6 + 16048) + 80))(*(_QWORD *)(v6 + 16048), v4);
  }
  result = (int *)sub_22EFCD52C((uint64_t *)v4);
  if (result)
  {
    v8 = result;
    result = sub_22EC72354(result);
    if ((*(_BYTE *)v8 & 1) != 0)
    {
      v12 = v8 + 18;
      v10 = v8 + 2;
      v11 = 4;
    }
    else
    {
      v10 = (int *)*((_QWORD *)v8 + 1);
      v11 = v8[4];
      v12 = &v10[4 * v11];
    }
    *a2 = result;
    a2[1] = v9;
    v13 = &v10[4 * v11];
    a2[2] = v12;
    a2[3] = v12;
    a2[4] = v12;
    a2[5] = v12;
    a2[6] = v13;
    a2[7] = v13;
  }
  else
  {
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void sub_22F339980(uint64_t a1@<X0>, char a2@<W1>, int **a3@<X8>)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;

  v5 = sub_22EFCC008(a1);
  v6 = (uint64_t *)v5;
  if ((a2 & 1) == 0)
    sub_22EFCE790(v5);
  v7 = *v6;
  if (v7)
  {
    v8 = sub_22EC72354((int *)v7);
    if ((*(_BYTE *)v7 & 1) != 0)
    {
      v12 = (int *)(v7 + 72);
      v10 = v7 + 8;
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 8);
      v11 = *(unsigned int *)(v7 + 16);
      v12 = (int *)(v10 + 16 * v11);
    }
    *a3 = v8;
    a3[1] = v9;
    v13 = (int *)(v10 + 16 * v11);
    a3[2] = v12;
    a3[3] = v12;
    a3[4] = v12;
    a3[5] = v12;
    a3[6] = v13;
    a3[7] = v13;
  }
  else
  {
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
}

uint64_t sub_22F339A14(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)((char *)v3 + 8);
    do
    {
      if ((unint64_t)*(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v5 = sub_22F29CFE8(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = (void *)(16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, v6);
  return a1;
}

void sub_22F339A88(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_22F339A14((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

_QWORD *sub_22F339AF8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F339B84(a1, a2, v8);
    v7 = *a2;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
    v5[6] = 0;
    v5[5] = 0;
    v5[4] = v5 + 5;
  }
  return v5;
}

_QWORD *sub_22F339B84(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EC724C4(a1, v6);
  v8 = 0;
  sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F339C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      sub_22F339D0C(v10 + 1, a2 + 8);
      ++*(_DWORD *)(a1 + 8);
      sub_22E3B4AB8(a2 + 32, *(_QWORD **)(a2 + 40));
      v11 = *(void **)(a2 + 8);
      if ((void *)(a2 + 24) != v11)
        free(v11);
    }
    a2 += 56;
  }
}

_QWORD *sub_22F339D0C(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *result = result + 2;
  result[1] = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_22F28CB40((uint64_t)result, a2);
  result[3] = *(_QWORD *)(a2 + 24);
  v3 = (_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 32);
  result[4] = v4;
  v5 = result + 4;
  v6 = *(_QWORD *)(a2 + 40);
  result[5] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v3;
    *v3 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    result[3] = v5;
  }
  return result;
}

uint64_t sub_22F339D88(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FAB88B8;
  sub_22F339DFC((char **)(a1 + 832));
  sub_22EC72590(a1 + 632);
  sub_22E8BAFF0(a1 + 464);
  v2 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_22EC72604((uint64_t *)(a1 + 440));
  sub_22F339DFC((char **)(a1 + 40));
  sub_22F339ED4(*(_QWORD **)(a1 + 24));
  return a1;
}

char **sub_22F339DFC(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  void **v7;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      v7 = (void **)&v2[v4 - 24];
      sub_22E8D19C8(&v7);
      v5 = *(char **)&v2[v4 - 72];
      if (&v2[v4 - 56] != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22F339E88(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_22F339E88(*a1);
    sub_22F339E88(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

void sub_22F339ED4(_QWORD *a1)
{
  if (a1)
  {
    sub_22F339ED4(*a1);
    sub_22F339ED4(a1[1]);
    sub_22F339F14((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

uint64_t sub_22F339F14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  void *v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(char ***)(*(_QWORD *)a1 + v3);
        if (v5 != (char **)-8 && v5 != 0)
        {
          v7 = *v5 + 113;
          sub_22F339DFC(v5 + 1);
          llvm::deallocate_buffer((llvm *)v5, v7);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_22F339FAC(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 113, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 112;
  if (a3)
    memcpy((void *)(v10 + 112), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *v11 = a3;
  v11[1] = v11 + 3;
  v11[2] = 0x100000000;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F33A0A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 + 1) >= 2)
    {
      v12 = 0;
      result = sub_22EC726E8((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F33A164(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_22F339670(v1, v5);
  v8 = *((unsigned int *)result + 4);
  if (v5 != (_DWORD)v8)
  {
    llvm::deallocate_buffer((llvm *)result[1], (void *)(8 * v8));
    return sub_22F339670(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

uint64_t sub_22F33A228()
{
  return llvm::FoldingSetNodeID::AddNodeID();
}

uint64_t sub_22F33A234(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void sub_22F33A2E0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F33A34C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F33A34C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 88 * v2;
    do
    {
      sub_22F333E34(a2, v5);
      v5 += 88;
      a2 += 88;
      v6 -= 88;
    }
    while (v6);
    v7 = *(_DWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 88 * v7;
      do
      {
        v11 = (void **)(v8 + v9 - 24);
        sub_22E8D19C8(&v11);
        v10 = *(void **)(v8 + v9 - 72);
        if ((void *)(v8 + v9 - 56) != v10)
          free(v10);
        v9 -= 88;
      }
      while (v9);
    }
  }
}

_QWORD *sub_22F33A3F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F33A4AC(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F33A558((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F33A4AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F33A558(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EC72F60((uint64_t)a1, v6);
  v8 = 0;
  sub_22F33A4AC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F33A614(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F33A4AC((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_22F33A6D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_22EC72658(a1 + 1, (uint64_t)(a2 + 1));
  sub_22EC72658(a1 + 5, (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *sub_22F33A730(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = (uint64_t *)a2[1];
  while (v4 != v5)
  {
    v7 = *(_QWORD *)(v4 - 80);
    v4 -= 80;
    *(v6 - 10) = v7;
    v6 -= 10;
    v6[1] = 0;
    v6[5] = 0;
    v6[9] = 0;
    result = sub_22F33A6D4(v6 + 1, (uint64_t *)(v4 + 8));
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F33A7CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  v3 = *a2;
  v6 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v3, &v6))
    v4 = v6 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v4 = 1;
  if (v4)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 80 * *(unsigned int *)(v6 + 8);
}

uint64_t sub_22F33A83C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_DWORD *)(a1 + 8992);
  if (v3 && (v4 = *(_QWORD *)(a1 + 8984) + 56 * v3, *(_DWORD *)(*(_QWORD *)(v4 - 48) + 28) == 5))
  {
    *(_DWORD *)(v4 - 56) = a2;
  }
  else
  {
    v6 = sub_22F33A8C4(a1, a2, 0);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
    v8 = sub_22E3CD31C((uint64_t *)(v7 + 72), v7);
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF9 | 2;
    *(_QWORD *)(v8 - 8) = v6;
  }
  return 0;
}

uint64_t sub_22F33A8C4(uint64_t a1, int a2, char a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  char *v15;
  __int16 v16;
  char v17;
  void *__p[2];
  __int128 v19;

  v6 = *(char **)(a1 + 9896);
  if (!v6)
  {
    v11 = *(_DWORD *)(a1 + 8992);
    if (v11)
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v11 - 48);
    else
      v12 = 0;
    v6 = sub_22F412A24(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 104) + 488, a2, v12);
    *(_QWORD *)(a1 + 9896) = v6;
  }
  v14 = a2;
  v15 = v6;
  v16 = 0;
  v17 = a3;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v7 = sub_22EC75C28(a1 + 8984, (unint64_t)&v14);
  v8 = *(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992);
  v9 = *(_OWORD *)v7;
  *(_DWORD *)(v8 + 15) = *(_DWORD *)(v7 + 15);
  *(_OWORD *)v8 = v9;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v7 + 24);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_DWORD *)(v8 + 48) = (*(_DWORD *)(v7 + 48))++ != 0;
  ++*(_DWORD *)(a1 + 8992);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_22F1DB478(a1 + 10096, *(_QWORD *)(a1 + 9896), a2, (uint64_t)nullsub_161, (uint64_t)&v14, (uint64_t)nullsub_914, (uint64_t)&v13);
  return *(_QWORD *)(a1 + 9896);
}

uint64_t sub_22F33AA10(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
    return sub_22F33B0F8(result, a2, a3);
  *(_QWORD *)(*(_QWORD *)result + 8 * v3) = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * (a3 != 0));
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_22F33AA40(uint64_t a1, unsigned int a2, unint64_t a3)
{
  sub_22EC74DD4((unsigned int *)a1, a3, a2, *(_QWORD *)(a1 + 216), 1);
  return sub_22EC751FC(a1, a2, a3);
}

uint64_t sub_22F33AA8C(__n128 *a1, int a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  _QWORD v19[2];
  void *__p[2];
  __int128 v21;

  sub_22EC74DD4((unsigned int *)a1, a3, a2, a1[13].n128_i64[1], 1);
  v18 = 0;
  v19[0] = 0;
  *(_DWORD *)((char *)v19 + 7) = 0;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v6 = sub_22EC75C28((uint64_t)&a1[561].n128_i64[1], (unint64_t)&v18);
  v7 = a1[561].n128_u64[1] + 56 * a1[562].n128_u32[0];
  v8 = *(_OWORD *)v6;
  *(_DWORD *)(v7 + 15) = *(_DWORD *)(v6 + 15);
  *(_OWORD *)v7 = v8;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v6 + 24);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_DWORD *)(v7 + 48) = (*(_DWORD *)(v6 + 48))++ != 0;
  v9 = a1[562].n128_u32[0] + 1;
  a1[562].n128_u32[0] = v9;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v9 = a1[562].n128_u32[0];
  }
  v10 = a1[561].n128_u64[1] + 56 * v9;
  *(_QWORD *)(v10 - 48) = a3;
  if ((*(_QWORD *)(a1[4].n128_u64[1] + 20) & 0x200000000000000) != 0)
  {
    sub_22F25ACCC(v10 - 32, a1 + 631);
    a1[631].n128_u64[1] = a1[631].n128_u64[0];
    ++a1[632].n128_u32[2];
    ++*(_DWORD *)(v10 - 8);
  }
  result = sub_22F1DB478((uint64_t)&a1[631], a3, a2, (uint64_t)nullsub_161, (uint64_t)&v18, (uint64_t)nullsub_914, (uint64_t)&v17);
  v12 = a1[4].n128_u64[1];
  if ((*(_BYTE *)(v12 + 240) & 0xE0) != 0 || (*(_QWORD *)(v12 + 20) & 0x200000000000000) != 0)
  {
    v13 = a1[13].n128_u64[1];
    while (v13)
    {
      v14 = sub_22EFCAD5C(v13);
      if ((*(_QWORD *)(a1[4].n128_u64[1] + 20) & 0x200000000000000) != 0)
        v15 = 4;
      else
        v15 = 2;
      *(_QWORD *)(v14 + 8) = v15 | *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF9;
      *(_QWORD *)(sub_22EFCAD5C(v13) - 8) = a3;
      result = sub_22EFCAD5C(v13);
      v16 = *(_QWORD *)(result + 16);
      v13 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v13 = *(_QWORD *)(v13 + 8);
    }
  }
  return result;
}

uint64_t sub_22F33AC7C(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x200000000000000) != 0)
  {
    v24 = *(_QWORD *)(a1 + 8984) + 56 * *(unsigned int *)(a1 + 8992);
    sub_22F25ACCC(a1 + 10096, (__n128 *)(v24 - 32));
    *(_QWORD *)(v24 - 24) = *(_QWORD *)(v24 - 32);
    ++*(_DWORD *)(v24 - 8);
    ++*(_DWORD *)(a1 + 10120);
    sub_22F278254(a1 + 11928);
  }
  v6 = *(_DWORD *)(a1 + 8992) - 1;
  *(_DWORD *)(a1 + 8992) = v6;
  v7 = *(_QWORD *)(a1 + 8984);
  v8 = *(void **)(v7 + 56 * v6 + 24);
  if (v8)
  {
    *(_QWORD *)(v7 + 56 * v6 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 112);
  if (sub_22E63AF88(v9, *(_DWORD *)(v9 + 304), a2 & 0x7FFFFFFF))
    v10 = *(_DWORD *)(v9 + 304);
  else
    v10 = sub_22F1E1EE8(v9, a2 & 0x7FFFFFFF);
  v11 = *(_QWORD **)(a1 + 112);
  v12 = v10;
  v13 = sub_22E49F3DC(v11, v10);
  if (v13)
  {
    v14 = *v13 & 0x7FFFFFFF;
    v15 = v14 + sub_22F1E37C0((uint64_t)v11, v12);
  }
  else
  {
    v15 = 0;
  }
  if (v15 == a2)
  {
    v25 = sub_22E49F3DC(*(_QWORD **)(a1 + 112), v12);
    if (v25)
      a2 = v25[2];
    else
      a2 = 0;
  }
  result = sub_22EC751FC(a1, a2, a3);
  v17 = *(_QWORD *)(a1 + 72);
  if ((*(_BYTE *)(v17 + 240) & 0xE0) != 0 || (*(_QWORD *)(v17 + 20) & 0x200000000000000) != 0)
  {
    v18 = *(_QWORD *)(a1 + 216);
    if (v18)
    {
      v19 = *(unsigned int *)(a1 + 8992);
      v20 = 56 * v19;
      do
      {
        v21 = sub_22EFCAD5C(v18);
        if ((_DWORD)v19)
        {
          *(_QWORD *)(v21 - 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8984) + v20 - 48);
          if (*(_QWORD *)(*(_QWORD *)(a1 + 8984) + v20 - 48))
            goto LABEL_16;
        }
        else
        {
          *(_QWORD *)(v21 - 8) = 0;
        }
        v22 = sub_22EFCAD5C(v18);
        *(_QWORD *)(v22 + 8) &= 0xFFFFFFFFFFFFFFF9;
LABEL_16:
        result = sub_22EFCAD5C(v18);
        v23 = *(_QWORD *)(result + 16);
        v18 = v23 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 4) != 0)
          v18 = *(_QWORD *)(v18 + 8);
      }
      while (v18);
    }
  }
  return result;
}

uint64_t sub_22F33AE78(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t result;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;

  result = sub_22EE03478(a1);
  if (!v7 && (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x80000000000000) != 0)
  {
    v8 = *(unsigned int *)(a3 + 432);
    v9 = *(_QWORD *)(a1 + 10096);
    if (v8 >= (*(_QWORD *)(a1 + 10104) - v9) >> 2 || !*(_DWORD *)(v9 + 4 * v8))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1960) + 80);
      v11 = sub_22E3CD31C((uint64_t *)(v10 + 72), v10);
      v12 = v11 + 40;
      if (v11)
        v13 = v11 + 40;
      else
        v13 = 0;
      v14 = sub_22EFC47F4(*(_QWORD *)(a1 + 88), v13, a2, a3, a2);
      sub_22EFCCFA0(v12, v14);
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96), v14);
      (*(void (**)(_QWORD, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 112)
                                                                        + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 112), a3, 1, a2);
      return sub_22F1DB478(a1 + 10096, a3, a2, (uint64_t)nullsub_161, (uint64_t)&v16, (uint64_t)nullsub_914, (uint64_t)&v15);
    }
  }
  return result;
}

void sub_22F33AFA0(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  void *v3;

  v1 = *(_DWORD *)(a1 + 8992) - 1;
  *(_DWORD *)(a1 + 8992) = v1;
  v2 = *(_QWORD *)(a1 + 8984);
  v3 = *(void **)(v2 + 56 * v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v2 + 56 * v1 + 32) = v3;
    operator delete(v3);
  }
}

void sub_22F33AFD4(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F33B040((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F33B040(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  void *v9;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 56 * v2;
    do
    {
      v5 = *v3;
      *(_DWORD *)(a2 + 15) = *(_DWORD *)((char *)v3 + 15);
      *(_OWORD *)a2 = v5;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 3) = 0;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *(_DWORD *)(a2 + 48) = (*((_DWORD *)v3 + 12))++ != 0;
      v3 = (__int128 *)((char *)v3 + 56);
      a2 += 56;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = (__int128 *)*a1;
      v8 = 56 * v6;
      do
      {
        v9 = *(void **)((char *)v7 + v8 - 32);
        if (v9)
        {
          *(_QWORD *)((char *)v7 + v8 - 24) = v9;
          operator delete(v9);
        }
        v8 -= 56;
      }
      while (v8);
    }
  }
}

uint64_t sub_22F33B0F8(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v6;
  unsigned int v7;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * (a3 != 0));
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

uint64_t sub_22F33B178(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27[24];
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31[24];
  unsigned int v32[24];
  uint64_t v33;
  unsigned int v34[24];
  uint64_t v35;

  v35 = a4;
  v8 = *(_DWORD *)(a2 + 72);
  v9 = *(_DWORD *)(a3 + 72);
  if ((a5 & 1) == 0 && (v9 & 0xE34) == 0 && (*(_DWORD *)(a2 + 72) & 0xE34) != 0)
    goto LABEL_6;
  if ((v8 & 1) != 0 && (v9 & 8) != 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B19u, 0, (uint64_t)v34);
    v33 = *(_QWORD *)(a2 + 40);
    v19 = sub_22E894538((uint64_t)v34, &v33);
    sub_22E8BAE44(v19, &v35);
    sub_22E903BEC(v34);
  }
  if (((v9 ^ v8) & 0x20) != 0)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B0Au, 0, (uint64_t)v34);
    v33 = *(_QWORD *)(a2 + 40);
    v24 = sub_22E894538((uint64_t)v34, &v33);
    v21 = sub_22F2F30F4(v24, (uint64_t)"copy");
  }
  else
  {
    if ((v9 & 1) != 0 || ((v8 & 0x410) == 0) != ((v9 & 0x410) != 0))
      goto LABEL_6;
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B0Au, 0, (uint64_t)v34);
    v33 = *(_QWORD *)(a2 + 40);
    v20 = sub_22E894538((uint64_t)v34, &v33);
    v21 = sub_22F2F30F4(v20, (uint64_t)"retain (or strong)");
  }
  sub_22E8BAE44(v21, &v35);
  sub_22E903BEC(v34);
LABEL_6:
  sub_22EC78BBC(a1, a3, a2, 0);
  if (*(_QWORD *)(a2 + 88) != *(_QWORD *)(a3 + 88))
  {
    if ((*(_BYTE *)(a3 + 72) & 1) == 0)
      goto LABEL_24;
    v25 = *(_QWORD *)(a3 + 16);
    v26 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 4) != 0)
      v26 = *(_QWORD *)v26;
    if ((*(_WORD *)(v26 + 8) & 0x7F) != 0x17)
    {
LABEL_24:
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B0Au, 0, (uint64_t)v34);
      v33 = *(_QWORD *)(a2 + 40);
      v22 = sub_22E894538((uint64_t)v34, &v33);
      v23 = sub_22F2F30F4(v22, (uint64_t)"setter");
      sub_22E8BAE44(v23, &v35);
      sub_22E903BEC(v34);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1780u, 0, (uint64_t)v32);
      sub_22E903BEC(v32);
    }
  }
  if (*(_QWORD *)(a2 + 80) != *(_QWORD *)(a3 + 80))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B0Au, 0, (uint64_t)v34);
    v33 = *(_QWORD *)(a2 + 40);
    v11 = sub_22E894538((uint64_t)v34, &v33);
    v12 = sub_22F2F30F4(v11, (uint64_t)"getter");
    sub_22E8BAE44(v12, &v35);
    sub_22E903BEC(v34);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1780u, 0, (uint64_t)v31);
    sub_22E903BEC(v31);
  }
  v13 = *(_QWORD *)(a3 + 56) & 7 | *(_QWORD *)((*(_QWORD *)(a3 + 56) & 0xFFFFFFFFFFFFFFF0) + 8);
  v14 = *(_QWORD *)(a2 + 56) & 7 | *(_QWORD *)((*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF0) + 8);
  result = sub_22F36EDA0(*((_QWORD *)a1 + 11), v13, v14, 0);
  if ((result & 1) == 0)
  {
    v30 = 0;
    v33 = 0;
    result = sub_22ECFB880((uint64_t)a1, v14, v13, &v33, &v30);
    if ((_DWORD)result)
      v16 = v30 == 0;
    else
      v16 = 0;
    if (!v16)
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1B0Fu, 0, (uint64_t)v34);
      v29 = *(_QWORD *)(a2 + 56);
      v17 = sub_22E8901B8((uint64_t)v34, &v29);
      v28 = *(_QWORD *)(a3 + 56);
      v18 = sub_22E8901B8(v17, &v28);
      sub_22E8BAE44(v18, &v35);
      sub_22E903BEC(v34);
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x1780u, 0, (uint64_t)v27);
      return (uint64_t)sub_22E903BEC(v27);
    }
  }
  return result;
}

uint64_t sub_22F33B4E0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26[12];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if (!a3)
    return 0;
  v26[0] = *(_QWORD *)(a3 + 80);
  v8 = sub_22E4D27F8(v26);
  v29 = v8;
  v27 = *(_QWORD *)(a2 + 56);
  v26[0] = sub_22E4D27F8(&v27);
  v9 = sub_22F110438(v26);
  v28 = v9;
  v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  v11 = v9 & 7;
  v12 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) | v11) == (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) | v8 & 7))
    return 0;
  v13 = v9;
  v14 = *v10;
  if ((*v10 && *(_BYTE *)(v14 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v14 = sub_22F10CF48(*v10)) != 0)
    && ((v15 = *v12) != 0 && *(_BYTE *)(v15 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v15 = sub_22F10CF48(*v12)) != 0))
  {
    if ((sub_22EF6ED94(a1[11], v15, v14) & 1) == 0)
    {
LABEL_17:
      sub_22E8FCA40(a1, a4, 0x1828u, 0, (uint64_t)v26);
      v27 = *(_QWORD *)(a2 + 40);
      v21 = sub_22E894538((uint64_t)v26, &v27);
      v25 = *(_QWORD *)(a3 + 40);
      sub_22E894538(v21, &v25);
      sub_22E903BEC((unsigned int *)v26);
      v20 = (unsigned int *)&v23;
      goto LABEL_18;
    }
    return 0;
  }
  if (!sub_22F32EE14((uint64_t)a1, a4, v8, v13))
  {
    v22 = v10[1];
    if ((v22 | v11) != (*(_QWORD *)(*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
      && sub_22F110E9C(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0)))
    {
      goto LABEL_17;
    }
    return 0;
  }
  sub_22E8FCA40(a1, a4, 0x11D2u, 0, (uint64_t)v26);
  v27 = *(_QWORD *)(a2 + 40);
  v17 = sub_22E894538((uint64_t)v26, &v27);
  v18 = sub_22E8901B8(v17, (uint64_t *)&v28);
  v25 = *(_QWORD *)(a3 + 40);
  v19 = sub_22E894538(v18, &v25);
  sub_22E8901B8(v19, &v29);
  sub_22E903BEC((unsigned int *)v26);
  v20 = (unsigned int *)&v24;
LABEL_18:
  sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x64u, 0, (uint64_t)v20);
  sub_22E903BEC(v20);
  return 1;
}

uint64_t sub_22F33B750(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _DWORD v16[4];

  v15 = *a2;
  v16[0] = 0;
  sub_22F33B8D4(a1, (uint64_t)&v15, v16, (uint64_t)&v13);
  v4 = v13;
  if (v14)
  {
    v11 = *a2;
    v12 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v7 = sub_22E54DBA4((void **)(a1 + 24), (uint64_t)&v11);
    }
    else
    {
      v6 = v11;
      *(_QWORD *)(v5 + 16) = v12;
      *(_OWORD *)v5 = v6;
      v7 = (char *)(v5 + 24);
    }
    *(_QWORD *)(a1 + 32) = v7;
    v9 = *(_QWORD *)(a1 + 24);
    v8 = -1431655765 * ((unint64_t)&v7[-v9] >> 3) - 1;
    *(_DWORD *)(v4 + 16) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v13 + 16);
    v9 = *(_QWORD *)(a1 + 24);
  }
  return v9 + 24 * v8 + 16;
}

unint64_t sub_22F33B824(unint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v7;
  _QWORD *v10;

  v4 = *(_QWORD *)(result + 72);
  if ((*(_BYTE *)(v4 + 1) & 0x80) != 0
    && ((1 << *(_DWORD *)(v4 + 400)) & 0xDD) != 0
    && a3 != 0
    && (*(_DWORD *)(a3 + 28) & 0x7F) == 0x15)
  {
    v7 = *(_QWORD *)(a3 + 88);
    if (v7)
    {
      v10 = (_QWORD *)result;
      result = sub_22EFDAC68(*(_QWORD *)(a3 + 88));
      if (!result)
        return sub_22EC7BCA4(v10, a2, a3, v7, a4);
    }
  }
  return result;
}

uint64_t sub_22F33B8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_22F33B970((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_22F33BA78(a1, a2, a2, v12);
    v9 = result;
    *(_QWORD *)result = *(_QWORD *)a2;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F33B970(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_DWORD *)(a2 + 8);
    v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *a1 + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_DWORD *)(v12 + 8);
    if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v14 == -2;
        if (v19 && v13 == -8192)
          v17 = v12;
        v21 = v11 + v18++;
        v11 = v21 & v10;
        v12 = v4 + 24 * (v21 & v10);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 8);
        result = 1;
        if (*(_QWORD *)a2 == *(_QWORD *)v12 && v5 == v14)
          goto LABEL_8;
      }
      result = 0;
      if (v17)
        v12 = v17;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v12;
  return result;
}

uint64_t sub_22F33BA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EC7DCE8(a1, v7);
  v10 = 0;
  sub_22F33B970((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F33BB2C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_22F45F5C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v9 != -1) && (*(_QWORD *)a2 != -8192 || v9 != -2))
    {
      v13 = 0;
      result = sub_22F33B970((uint64_t *)v5, a2, (uint64_t *)&v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F33BC00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 12288);
  v2 = *(_QWORD *)(v1 + 21448);
  v3 = *(unsigned int *)(v2 + 1904);
  if ((_DWORD)v3)
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 1896) + 8 * v3 - 8);
  else
    v4 = 0;
  *(_QWORD *)(v1 + 328) = v4;
  return result;
}

char **sub_22F33BC2C(char **result, uint64_t a2)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;

  v2 = result[1536];
  v3 = *((_DWORD *)v2 + 86);
  if (v3)
  {
    v4 = *((_QWORD *)v2 + 42);
    if (*(_QWORD *)(v4 + 5272 * v3 - 8) == a2)
    {
      v5 = v3 - 1;
      *((_DWORD *)v2 + 86) = v5;
      result = sub_22ECB16BC((char **)(v4 + 5272 * v5));
    }
  }
  *((_QWORD *)v2 + 41) = 0;
  v6 = *((_QWORD *)v2 + 2681);
  v7 = *(unsigned int *)(v6 + 1904);
  v8 = *(_QWORD *)(v6 + 1896) - 8;
  for (i = 8 * v7; i; i -= 8)
  {
    v10 = *(_QWORD *)(v8 + i);
    if ((*(_DWORD *)(v10 + 8) & 7u) - 1 >= 3)
    {
      *((_QWORD *)v2 + 41) = v10;
      return result;
    }
  }
  return result;
}

uint64_t sub_22F33BCB4@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;

  if (a4)
  {
    v10 = sub_22EA32CC0((uint64_t)a1, a4, 0);
    if (v10 == 4)
    {
      if (sub_22EC7EB80((uint64_t)a1))
        v11 = 1;
      else
        v11 = 3;
    }
    else
    {
      v11 = v10 == 0;
    }
  }
  else
  {
    v11 = 0;
  }
  return sub_22F308E9C(a5, v11, a2, a3, (uint64_t)a4, a1);
}

uint64_t sub_22F33BD4C@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  int v12;

  if (a4)
  {
    v10 = sub_22EA32CC0((uint64_t)a1, a4, 0);
    if (v10 == 4)
      v11 = 3;
    else
      v11 = 0;
    if (v10)
      v12 = v11;
    else
      v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  return sub_22F308E9C(a5, v12, a2, a3, (uint64_t)a4, a1);
}

uint64_t sub_22F33BDCC(int a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v3 = v5;
  v4 = 0x400000000;
  sub_22F421BB4((uint64_t)&v3, a1);
  v1 = v4;
  if (v3 != v5)
    free(v3);
  return v1;
}

uint64_t sub_22F33BE54(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;

  v1 = *(_QWORD *)(result + 12288);
  if (v1)
  {
    v2 = *(void **)(v1 + 21672);
    if (v2 != (void *)(v1 + 21688))
      free(v2);
    v3 = *(void **)(v1 + 21640);
    if (v3 != (void *)(v1 + 21656))
      free(v3);
    v4 = *(void **)(v1 + 21504);
    if (v4 != (void *)(v1 + 21520))
      free(v4);
    sub_22F340560(v1 + 21464);
    v5 = *(char **)(v1 + 336);
    v6 = *(_DWORD *)(v1 + 344);
    if (v6)
    {
      v7 = 5272 * v6;
      v8 = v5 - 5272;
      do
      {
        sub_22ECB16BC((char **)&v8[v7]);
        v7 -= 5272;
      }
      while (v7);
      v5 = *(char **)(v1 + 336);
    }
    if (v5 != (char *)(v1 + 352))
      free(v5);
    sub_22ECB18C4(v1);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F33BF4C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  uint64_t result;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  unsigned int v21[24];
  const char *v22;
  const char *v23;

  v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 112) + 104), *(_QWORD *)(a2 + 112));
  result = sub_22F37A510(v7);
  if ((*(_BYTE *)(a1[9] + 76) & 8) != 0)
  {
    if (BYTE4(result))
      v10 = (_DWORD)result == 0;
    else
      v10 = 1;
    if (v10)
      return result;
  }
  else
  {
    if (BYTE4(result))
      v9 = (_DWORD)result == 1;
    else
      v9 = 0;
    if (v9)
      return result;
  }
  v11 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 112) + 104), *(_QWORD *)(a3 + 112));
  result = sub_22F37A510(v11);
  v12 = a1[9];
  v13 = *(_QWORD *)(v12 + 72);
  v14 = result & 0xFF00000000;
  if ((v13 & 0x800000000) != 0 && v14 && (_DWORD)result == 0)
  {
    v18 = sub_22F42187C((const char *)0x17, 0);
    v22 = v18;
    if (v18)
      v18 = (const char *)strlen(v18);
    v23 = v18;
    sub_22E8FCA40(a1, a4, 0x110Eu, 0, (uint64_t)v21);
    v17 = sub_22F2F2210((uint64_t)v21, (uint64_t)&v22);
    v20 = 0;
    goto LABEL_28;
  }
  if ((v13 & 0x800000000) == 0 && (*(_WORD *)(v12 + 96) & 0x10) == 0 && v14 && (_DWORD)result == 1)
  {
    v16 = sub_22F42187C((const char *)0x17, 1);
    v22 = v16;
    if (v16)
      v16 = (const char *)strlen(v16);
    v23 = v16;
    sub_22E8FCA40(a1, a4, 0x110Eu, 0, (uint64_t)v21);
    v17 = sub_22F2F2210((uint64_t)v21, (uint64_t)&v22);
    v20 = 1;
LABEL_28:
    sub_22E8900C4(v17, &v20);
    sub_22E903BEC(v21);
    v19 = sub_22F37A53C(v11);
    sub_22E8FCA40(a1, v19, 0x1709u, 0, (uint64_t)v21);
    sub_22F2F2210((uint64_t)v21, (uint64_t)&v22);
    return (uint64_t)sub_22E903BEC(v21);
  }
  return result;
}

uint64_t sub_22F33C0DC()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void **v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41[2];
  _QWORD v42[658];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v39 = v3;
  v5 = v4;
  v7 = v6;
  v8 = v0;
  v42[656] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(v0 + 12288);
  v10 = v1;
  v11 = *(_DWORD *)(v9 + 344);
  if (!v11 || (v12 = *(_QWORD *)(v9 + 336), *(_QWORD *)(v12 + 5272 * v11 - 8) != *(_QWORD *)(v9 + 328)))
  {
    v41[0] = v42;
    v41[1] = (void *)0x400000000;
    if (v11 >= *(_DWORD *)(v9 + 348))
    {
      v40 = 0;
      v38 = (_QWORD **)(v9 + 336);
      v27 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
      *(_QWORD *)(sub_22ECB2594(v27 + 5272 * *(unsigned int *)(v9 + 344), (uint64_t)v41) + 5264) = *(_QWORD *)(v9 + 328);
      v28 = *(_QWORD **)(v9 + 336);
      v29 = *(_DWORD *)(v9 + 344);
      if (v29)
      {
        v30 = v27;
        v31 = 5272 * v29;
        v37 = v30;
        do
        {
          v32 = sub_22ECB2594(v30, (uint64_t)v28);
          *(_QWORD *)(v32 + 5264) = v28[658];
          v28 += 659;
          v30 = v32 + 5272;
          v31 -= 5272;
        }
        while (v31);
        v28 = *(_QWORD **)(v9 + 336);
        v33 = *(_DWORD *)(v9 + 344);
        if (v33)
        {
          v34 = 659 * v33;
          v35 = v28 - 659;
          do
          {
            sub_22ECB16BC((char **)&v35[v34]);
            v34 -= 659;
          }
          while (v34 * 8);
          v28 = *v38;
        }
        v27 = v37;
      }
      v36 = v40;
      if (v28 != (_QWORD *)(v9 + 352))
        free(v28);
      *(_QWORD *)(v9 + 336) = v27;
      *(_DWORD *)(v9 + 348) = v36;
    }
    else
    {
      *(_QWORD *)(sub_22ECB2594(*(_QWORD *)(v9 + 336) + 5272 * v11, (uint64_t)v41) + 5264) = *(_QWORD *)(v9 + 328);
    }
    ++*(_DWORD *)(v9 + 344);
    v13 = v41[0];
    if (LODWORD(v41[1]))
    {
      v14 = 1312 * LODWORD(v41[1]);
      v15 = (char *)v41[0] - 1312;
      do
      {
        sub_22ECB1720((uint64_t)&v15[v14]);
        v14 -= 1312;
      }
      while (v14);
      v13 = v41[0];
    }
    if (v13 != v42)
      free(v13);
    v12 = *(_QWORD *)(v9 + 336);
    v11 = *(_DWORD *)(v9 + 344);
  }
  v16 = v12 + 5272 * v11;
  v17 = (void **)(v16 - 5272);
  v19 = (_DWORD *)(v16 - 5264);
  v18 = *(_DWORD *)(v16 - 5264);
  if (v18 >= *(_DWORD *)(v16 - 5260))
  {
    v40 = 0;
    v22 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
    v23 = v22 + 1312 * *v19;
    *(_OWORD *)v41 = *(_OWORD *)v5;
    v42[0] = *(_QWORD *)(v5 + 16);
    v24 = v10;
    v25 = (unsigned int *)v22;
    sub_22ECB30AC(v23, v7, (__int128 *)v41, v39, v24);
    sub_22ECB3050(v16 - 5272, v25);
    v26 = v40;
    if (*v17 != (void *)(v16 - 5256))
      free(*v17);
    *v17 = v25;
    *(_DWORD *)(v16 - 5260) = v26;
  }
  else
  {
    v20 = (uint64_t)*v17 + 1312 * v18;
    *(_OWORD *)v41 = *(_OWORD *)v5;
    v42[0] = *(_QWORD *)(v5 + 16);
    sub_22ECB30AC(v20, v7, (__int128 *)v41, v39, v10);
  }
  ++*v19;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 336) + 5272 * *(unsigned int *)(v9 + 344) - 5272)
            + 1312 * *(unsigned int *)(*(_QWORD *)(v9 + 336) + 5272 * *(unsigned int *)(v9 + 344) - 5264)
            - 380) = v2;
  return sub_22EB48CC8(v8, 6, 0, 3);
}

unint64_t sub_22F33C42C(_QWORD *a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5;

  v5 = sub_22F33C468(a1, a2, a3, a4);
  if (v5)
    sub_22EFCCFA0(a1[27], v5);
  return v5;
}

uint64_t sub_22F33C468(_QWORD *a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BOOL4 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  unint64_t v37;
  int v38;
  __int16 v39;
  unsigned __int8 v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[10];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x800000000;
  if (!a4)
    goto LABEL_33;
  v6 = a2 | ((unint64_t)a2 << 32);
  v7 = 8 * a4;
  do
  {
    v8 = *a3;
    v41 = *(_QWORD *)(*a3 + 16);
    v9 = v41;
    sub_22EFF605C(v8);
    v11 = v10;
    *(_DWORD *)(v9 + 28) |= 0x800u;
    sub_22EFC9100(v9, a1[11]);
    v12 = *(_QWORD *)(v41 + 48);
    if ((*(_BYTE *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 17) & 6) != 0)
    {
      v13 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v43;
      }
      *((_QWORD *)v42 + v13) = v8;
      LODWORD(v43) = v43 + 1;
    }
    else
    {
      *(_QWORD *)&v36 = &unk_24FAB6EF8;
      DWORD2(v36) = 4346;
      if ((sub_22EE8B0B0((uint64_t)a1, v11, v12) & 1) != 0)
        goto LABEL_7;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        sub_22E8FCA40(a1, v11, 0x10DFu, 0, (uint64_t)&v36);
        v35[0] = llvm::omp::getOpenMPDirectiveName();
        v35[1] = v25;
        v26 = sub_22F2F2210((uint64_t)&v36, (uint64_t)v35);
        v34 = *(_QWORD *)(v41 + 48);
        sub_22E8901B8(v26, &v34);
LABEL_25:
        sub_22E903BEC((unsigned int *)&v36);
        if (sub_22EFBBF74(v41, a1[11]))
          v29 = 5543;
        else
          v29 = 6001;
        sub_22E8FCA40(a1, *(_DWORD *)(v41 + 24), v29, 0, (uint64_t)&v36);
        sub_22E890024((uint64_t)&v36, (uint64_t *)&v41);
        sub_22E903BEC((unsigned int *)&v36);
        goto LABEL_7;
      }
      sub_22EFBB794(v41);
      if (v14
        && (!sub_22F25B62C(v41)
         || (*(_BYTE *)(a1[9] + 76) & 4) == 0
         || !*(_BYTE *)(*(_QWORD *)(a1[11] + 15088) + 81)))
      {
LABEL_24:
        sub_22E8FCA40(a1, v11, 0x1108u, 0, (uint64_t)&v36);
        v27 = sub_22E890024((uint64_t)&v36, (uint64_t *)&v41);
        sub_22EFBB794(v41);
        LODWORD(v35[0]) = v28 == 0;
        sub_22E8900C4(v27, (int *)v35);
        goto LABEL_25;
      }
      v15 = v41;
      if ((*(_BYTE *)(v41 + 96) & 7) == 5)
      {
        v16 = sub_22E3D1740(v41);
        v15 = v41;
        if (v16)
        {
          if (!sub_22E3CEC2C(v41))
            goto LABEL_24;
          v15 = v41;
        }
      }
      *(_QWORD *)&v36 = 0;
      v17 = (unsigned __int8 *)sub_22EFBC530(v15, (uint64_t *)&v36);
      if (!v17 || (*(_QWORD *)&v36 = a1, (sub_22EC83760((uint64_t)&v36, v17) & 1) == 0))
      {
        v18 = v43;
        if (v43 >= (unint64_t)HIDWORD(v43))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v43;
        }
        *((_QWORD *)v42 + v18) = v8;
        LODWORD(v43) = v43 + 1;
        v19 = (_DWORD *)a1[1536];
        *(_QWORD *)&v36 = sub_22EC81010(v41);
        v20 = sub_22ECB3308(v19, (uint64_t *)&v36);
        v20[1] = v20[1] & 3 | v8;
        v20[2] = 0;
        *v20 = 79;
        v21 = v41;
        v22 = a1[11];
        v36 = 0uLL;
        v37 = v6;
        v38 = 0;
        v39 = 0;
        v40 = ((((v40 >> 7) & 1) << 23) | 0x780000u) >> 16;
        v23 = sub_22F396964(v22, &v36);
        sub_22EFCA95C(v21, v23);
        v24 = *(_QWORD *)(a1[11] + 16056);
        if (v24)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 152))(v24, v41);
      }
    }
LABEL_7:
    ++a3;
    v7 -= 8;
  }
  while (v7);
  if (!(_DWORD)v43)
  {
LABEL_33:
    v31 = 0;
    goto LABEL_34;
  }
  v30 = a1[28];
  if (!v30)
    v30 = a1[27];
  v31 = sub_22F3B77F4(a1[11], v30, a2, v42, v43);
  *(_DWORD *)(v31 + 28) &= 0xFFFF9FFF;
LABEL_34:
  if (v42 != v44)
    free(v42);
  return v31;
}

unint64_t sub_22F33C8A4(_QWORD *a1, int a2, int **a3, uint64_t a4)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v12[24];

  v5 = *(_WORD *)(a1[27] + 8) & 0x7F;
  if (v5 == 16 || v5 == 83)
  {
    v6 = sub_22EC8446C(a1, a2, a3, a4);
    if (v6)
    {
      sub_22EFCCFA0(a1[27], v6);
      v7 = a1[1536];
      v8 = (unsigned int *)(v7 + 21512);
      v9 = (_QWORD *)(v7 + 21504);
      v10 = *(_DWORD *)(v7 + 21512);
      if (v10 >= *(_DWORD *)(v7 + 21516))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *v8;
      }
      *(_QWORD *)(*v9 + 8 * v10) = v6;
      ++*v8;
    }
  }
  else
  {
    sub_22E8FCA40(a1, a2, 0x1098u, 0, (uint64_t)v12);
    sub_22F2F30F4((uint64_t)v12, (uint64_t)"requires");
    sub_22E903BEC(v12);
    return 0;
  }
  return v6;
}

uint64_t sub_22F33C99C(uint64_t result)
{
  --*(_DWORD *)(result + 12688);
  return result;
}

uint64_t sub_22F33C9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;

  v9 = sub_22E3CD3D4(a1 + 2032, 40, 3);
  *(_BYTE *)v9 = 20;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(20);
    ++*((_DWORD *)v10 + 2);
  }
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_QWORD *)(v9 + 32) = a5;
  return v9;
}

uint64_t sub_22F33CA30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int **i;
  int v13;
  int *v14;
  unsigned int v17[24];
  unsigned int v18[24];

  if (!a4)
    return 1;
  v7 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v7 - 8);
    *(_DWORD *)(v8 + 8) |= 8u;
  }
  if (!a3)
    return sub_22F3F4D74(*(_QWORD *)(a1 + 88), a5, a6, a2, a3, a4);
  v9 = 0;
  v10 = 0;
  v11 = 8 * a3;
  for (i = (int **)a2; ; ++i)
  {
    v13 = (*i)[2];
    v14 = v13 == 14 ? *i : v10;
    if (v13 == 51)
      v9 = *i;
    else
      v10 = v14;
    if (v10 && v9 != 0)
      break;
    v11 -= 8;
    if (!v11)
      return sub_22F3F4D74(*(_QWORD *)(a1 + 88), a5, a6, a2, a3, a4);
  }
  sub_22E8FCA40((_QWORD *)a1, *v10, 0x10F3u, 0, (uint64_t)v18);
  sub_22E903BEC(v18);
  sub_22E8FCA40((_QWORD *)a1, *v9, 0x170Cu, 0, (uint64_t)v17);
  sub_22E903BEC(v17);
  return 1;
}

uint64_t sub_22F33CB34(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a4)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v11 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v11 - 8);
    *(_DWORD *)(v12 + 8) |= 8u;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v14 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
  return sub_22F3F5DF0(v13, a5, a6, a2, a3, a4, *(_QWORD *)(v14 + 1104));
}

uint64_t sub_22F33CBDC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a4)
    return 1;
  v11 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v11 - 8);
    *(_DWORD *)(v12 + 8) |= 8u;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v14 = sub_22ECB1B04(*(_QWORD *)(a1 + 12288));
  return sub_22F3F661C(v13, a5, a6, a2, a3, a4, *(_QWORD *)(v14 + 1104));
}

uint64_t sub_22F33CC70(_QWORD *a1, void *a2, uint64_t a3, int a4, int a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int **v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int **v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t OpenMPDirectiveName;
  uint64_t v32;
  unsigned int v33[24];

  if (!a3)
    return sub_22F3F6A7C(a1[11], a4, a5, a2, a3);
  v27 = a4;
  v28 = a5;
  v8 = 0;
  v9 = 0;
  v10 = 8 * a3;
  v11 = 8 * a3;
  v12 = (int **)a2;
  do
  {
    v14 = *v12++;
    v13 = v14;
    if (v14[2] == 30)
      v8 = v13;
    else
      v9 = v13;
    v11 -= 8;
  }
  while (v11);
  v15 = 0;
  v16 = 85;
  v17 = (int **)a2;
  do
  {
    v18 = *v17;
    v19 = (*v17)[2];
    if (v19 < 2 || v19 == 68)
    {
      if (v16 == 85)
      {
        v15 = *v18;
        v16 = (*v17)[2];
      }
      else
      {
        sub_22E8FCA40(a1, *v18, 0x10EFu, 0, (uint64_t)v33);
        OpenMPDirectiveName = llvm::omp::getOpenMPDirectiveName();
        v32 = v20;
        v21 = sub_22F2F2210((uint64_t)v33, (uint64_t)&OpenMPDirectiveName);
        v30 = 1;
        v22 = sub_22E8900C4(v21, &v30);
        v29 = *(_QWORD *)v18;
        sub_22E8906A0(v22, &v29);
        sub_22E903BEC(v33);
        sub_22E8FCA40(a1, v15, 0x1715u, 0, (uint64_t)v33);
        OpenMPDirectiveName = llvm::omp::getOpenMPClauseName();
        v32 = v23;
        sub_22F2F2210((uint64_t)v33, (uint64_t)&OpenMPDirectiveName);
        sub_22E903BEC(v33);
      }
    }
    ++v17;
    v10 -= 8;
  }
  while (v10);
  a4 = v27;
  a5 = v28;
  if (!v8 || !v9)
    return sub_22F3F6A7C(a1[11], a4, a5, a2, a3);
  sub_22E8FCA40(a1, v8[3], 0x1084u, 0, (uint64_t)v33);
  OpenMPDirectiveName = llvm::omp::getOpenMPClauseName();
  v32 = v25;
  sub_22F2F2210((uint64_t)v33, (uint64_t)&OpenMPDirectiveName);
  sub_22E903BEC(v33);
  sub_22E8FCA40(a1, *v9, 0x1702u, 0, (uint64_t)v33);
  OpenMPDirectiveName = llvm::omp::getOpenMPClauseName();
  v32 = v26;
  sub_22F2F2210((uint64_t)v33, (uint64_t)&OpenMPDirectiveName);
  sub_22E903BEC(v33);
  return 1;
}

uint64_t sub_22F33CE68(_QWORD *a1, int **a2, unint64_t a3, int a4, int a5)
{
  unsigned int *v5;
  _BYTE v7[96];
  _BYTE v8[96];
  _BYTE v9[96];

  if (a3)
  {
    if ((*a2)[2] == 19)
    {
      if (a3 < 3)
        return sub_22F3F6C10(a1[11], a4, a5, a2, a3);
      sub_22E8FCA40(a1, *a2[2], 0x106Du, 0, (uint64_t)v7);
      v5 = (unsigned int *)v7;
    }
    else
    {
      sub_22E8FCA40(a1, **a2, 0x106Cu, 0, (uint64_t)v8);
      v5 = (unsigned int *)v8;
    }
  }
  else
  {
    sub_22E8FCA40(a1, a4, 0x106Cu, 0, (uint64_t)v9);
    v5 = (unsigned int *)v9;
  }
  sub_22E903BEC(v5);
  return 1;
}

uint64_t sub_22F33CF24(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[21];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[15];

  v29[14] = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v21[19] = v22;
  v21[20] = 0x400000000;
  v22[4] = v23;
  v22[5] = 0x400000000;
  v23[4] = v24;
  v23[5] = 0x400000000;
  v24[4] = v25;
  v24[5] = 0x400000000;
  v25[4] = v26;
  v25[5] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v15 = a2;
  v28[5] = 0x400000000;
  if (a3)
  {
    v18 = 8 * a3;
    v15 = a2;
    while (*(_DWORD *)(*(_QWORD *)v15 + 8) != 12)
    {
      v15 += 8;
      v18 -= 8;
      if (!v18)
        goto LABEL_6;
    }
  }
  if (v15 == &a2[8 * a3])
LABEL_6:
    v16 = 0;
  else
    v16 = *(_QWORD *)(*(_QWORD *)v15 + 16);
  v17 = sub_22EC9BA28(16, v16, 0, a4, (uint64_t *)a1, *(_QWORD *)(a1 + 12288), a7, (uint64_t)v21);
  if (v17)
  {
    v19 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v19 - 8);
      *(_DWORD *)(v20 + 8) |= 8u;
    }
    v7 = sub_22F3FA464(*(_QWORD *)(a1 + 88), a5, a6, v17, a2, a3, a4, (uint64_t)v21);
  }
  else
  {
    v7 = 1;
  }
  sub_22F340E84(v21);
  return v7;
}

uint64_t sub_22F33D0E0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a4)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v13 = sub_22F33BDCC(66);
  if (v13 >= 2)
  {
    v14 = v13 + 1;
    v15 = a4;
    do
    {
      v15 = *(_QWORD *)(v15 + 8 * *(unsigned int *)(v15 + 8) + 32);
      *(_QWORD *)((*(_QWORD *)(v15 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
      --v14;
    }
    while (v14 > 2);
  }
  v16 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v16 - 8);
    *(_DWORD *)(v17 + 8) |= 8u;
  }
  return sub_22F3FE254(*(_QWORD *)(a1 + 88), a5, a6, a2, a3, a4);
}

uint64_t sub_22F33D1C0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[15];

  v33[14] = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v16 = sub_22F33BDCC(67);
  v17 = a4;
  if (v16 >= 2)
  {
    v18 = v16 + 1;
    v17 = a4;
    do
    {
      v17 = *(_QWORD *)(v17 + 8 * *(unsigned int *)(v17 + 8) + 32);
      *(_QWORD *)((*(_QWORD *)(v17 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
      --v18;
    }
    while (v18 > 2);
  }
  v25[19] = v26;
  v25[20] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0x400000000;
  v32[4] = v33;
  v19 = a2;
  v32[5] = 0x400000000;
  if (a3)
  {
    v22 = 8 * a3;
    v19 = a2;
    while (*(_DWORD *)(*(_QWORD *)v19 + 8) != 12)
    {
      v19 += 8;
      v22 -= 8;
      if (!v22)
        goto LABEL_9;
    }
  }
  if (v19 == &a2[8 * a3])
LABEL_9:
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)v19 + 16);
  v21 = sub_22EC9BA28(67, v20, 0, v17, (uint64_t *)a1, *(_QWORD *)(a1 + 12288), a7, (uint64_t)v25);
  if (v21)
  {
    v23 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v23 - 8);
      *(_DWORD *)(v24 + 8) |= 8u;
    }
    v7 = sub_22F3FE410(*(_QWORD *)(a1 + 88), a5, a6, v21, a2, a3, a4, (uint64_t)v25);
  }
  else
  {
    v7 = 1;
  }
  sub_22F340E84(v25);
  return v7;
}

uint64_t sub_22F33D3DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[21];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[15];

  v34[14] = *MEMORY[0x24BDAC8D0];
  if (!a4 || (sub_22EC9E0A8((_QWORD *)a1, a2, a3, 94, *(_QWORD *)(a1 + 12288)) & 1) != 0)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v26[19] = v27;
  v26[20] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0x400000000;
  v32[4] = v33;
  v32[5] = 0x400000000;
  v33[4] = v34;
  v33[5] = 0x400000000;
  v16 = &a2[a3];
  v17 = 8 * a3;
  v18 = a2;
  if (a3)
  {
    v23 = 8 * a3;
    v18 = a2;
    while (*(_DWORD *)(*v18 + 8) != 12)
    {
      ++v18;
      v23 -= 8;
      if (!v23)
        goto LABEL_7;
    }
  }
  if (v18 == v16)
LABEL_7:
    v19 = 0;
  else
    v19 = *(_QWORD *)(*v18 + 16);
  v20 = a2;
  if (a3)
  {
    v20 = a2;
    while (*(_DWORD *)(*v20 + 8) != 60)
    {
      ++v20;
      v17 -= 8;
      if (!v17)
        goto LABEL_10;
    }
  }
  if (v20 == v16)
LABEL_10:
    v21 = 0;
  else
    v21 = *(_QWORD *)(*v20 + 16);
  v22 = sub_22EC9BA28(94, v19, v21, a4, (uint64_t *)a1, *(_QWORD *)(a1 + 12288), a7, (uint64_t)v26);
  if (v22)
  {
    v24 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v24 - 8);
      *(_DWORD *)(v25 + 8) |= 8u;
    }
    v14 = sub_22F400190(*(_QWORD *)(a1 + 88), a5, a6, v22, a2, a3, a4, (uint64_t)v26);
  }
  else
  {
    v14 = 1;
  }
  sub_22F340E84(v26);
  return v14;
}

uint64_t sub_22F33D608(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[15];

  v33[14] = *MEMORY[0x24BDAC8D0];
  if (!a4 || (sub_22EC9E0A8((_QWORD *)a1, a2, a3, 98, *(_QWORD *)(a1 + 12288)) & 1) != 0)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v16 = sub_22F33BDCC(98);
  v17 = a4;
  if (v16 >= 2)
  {
    v18 = v16 + 1;
    v17 = a4;
    do
    {
      v17 = *(_QWORD *)(v17 + 8 * *(unsigned int *)(v17 + 8) + 32);
      *(_QWORD *)((*(_QWORD *)(v17 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
      --v18;
    }
    while (v18 > 2);
  }
  v25[19] = v26;
  v25[20] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0x400000000;
  v32[4] = v33;
  v19 = a2;
  v32[5] = 0x400000000;
  if (a3)
  {
    v22 = 8 * a3;
    v19 = a2;
    while (*(_DWORD *)(*v19 + 8) != 12)
    {
      ++v19;
      v22 -= 8;
      if (!v22)
        goto LABEL_10;
    }
  }
  if (v19 == &a2[a3])
LABEL_10:
    v20 = 0;
  else
    v20 = *(_QWORD *)(*v19 + 16);
  v21 = sub_22EC9BA28(98, v20, 0, v17, (uint64_t *)a1, *(_QWORD *)(a1 + 12288), a7, (uint64_t)v25);
  if (v21)
  {
    v23 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v23 - 8);
      *(_DWORD *)(v24 + 8) |= 8u;
    }
    v14 = sub_22F400CD8(*(_QWORD *)(a1 + 88), a5, a6, v21, a2, a3, a4, (uint64_t)v25);
  }
  else
  {
    v14 = 1;
  }
  sub_22F340E84(v25);
  return v14;
}

uint64_t sub_22F33D834(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[15];

  v33[14] = *MEMORY[0x24BDAC8D0];
  if (!a4 || (sub_22EC9E0A8((_QWORD *)a1, a2, a3, 96, *(_QWORD *)(a1 + 12288)) & 1) != 0)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v16 = sub_22F33BDCC(96);
  v17 = a4;
  if (v16 >= 2)
  {
    v18 = v16 + 1;
    v17 = a4;
    do
    {
      v17 = *(_QWORD *)(v17 + 8 * *(unsigned int *)(v17 + 8) + 32);
      *(_QWORD *)((*(_QWORD *)(v17 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
      --v18;
    }
    while (v18 > 2);
  }
  v25[19] = v26;
  v25[20] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0x400000000;
  v32[4] = v33;
  v19 = a2;
  v32[5] = 0x400000000;
  if (a3)
  {
    v22 = 8 * a3;
    v19 = a2;
    while (*(_DWORD *)(*v19 + 8) != 12)
    {
      ++v19;
      v22 -= 8;
      if (!v22)
        goto LABEL_10;
    }
  }
  if (v19 == &a2[a3])
LABEL_10:
    v20 = 0;
  else
    v20 = *(_QWORD *)(*v19 + 16);
  v21 = sub_22EC9BA28(96, v20, 0, v17, (uint64_t *)a1, *(_QWORD *)(a1 + 12288), a7, (uint64_t)v25);
  if (v21)
  {
    v23 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v23 - 8);
      *(_DWORD *)(v24 + 8) |= 8u;
    }
    v14 = sub_22F40127C(*(_QWORD *)(a1 + 88), a5, a6, v21, a2, a3, a4, (uint64_t)v25);
  }
  else
  {
    v14 = 1;
  }
  sub_22F340E84(v25);
  return v14;
}

uint64_t sub_22F33DA60(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[21];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[15];

  v33[14] = *MEMORY[0x24BDAC8D0];
  if (!a4 || (sub_22EC9E0A8((_QWORD *)a1, a2, a3, 97, *(_QWORD *)(a1 + 12288)) & 1) != 0)
    return 1;
  *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
  v16 = sub_22F33BDCC(97);
  v17 = a4;
  if (v16 >= 2)
  {
    v18 = v16 + 1;
    v17 = a4;
    do
    {
      v17 = *(_QWORD *)(v17 + 8 * *(unsigned int *)(v17 + 8) + 32);
      *(_QWORD *)((*(_QWORD *)(v17 + 16) & 0xFFFFFFFFFFFFFFF8) + 80) |= 4uLL;
      --v18;
    }
    while (v18 > 2);
  }
  v25[19] = v26;
  v25[20] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0x400000000;
  v31[4] = v32;
  v31[5] = 0x400000000;
  v32[4] = v33;
  v19 = a2;
  v32[5] = 0x400000000;
  if (a3)
  {
    v22 = 8 * a3;
    v19 = a2;
    while (*(_DWORD *)(*v19 + 8) != 12)
    {
      ++v19;
      v22 -= 8;
      if (!v22)
        goto LABEL_10;
    }
  }
  if (v19 == &a2[a3])
LABEL_10:
    v20 = 0;
  else
    v20 = *(_QWORD *)(*v19 + 16);
  v21 = sub_22EC9BA28(97, v20, 0, v17, (uint64_t *)a1, *(_QWORD *)(a1 + 12288), a7, (uint64_t)v25);
  if (v21)
  {
    v23 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v23 - 8);
      *(_DWORD *)(v24 + 8) |= 8u;
    }
    v14 = sub_22F401820(*(_QWORD *)(a1 + 88), a5, a6, v21, a2, a3, a4, (uint64_t)v25);
  }
  else
  {
    v14 = 1;
  }
  sub_22F340E84(v25);
  return v14;
}

BOOL sub_22F33DC8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 246)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F33DCEC(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 16);
  if (!result || v1 != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    while (1)
    {
      if (v1 > 0x17u)
      {
        if (v1 == 24)
          goto LABEL_14;
        if (v1 == 37)
          goto LABEL_7;
      }
      else if (v1 == 7 || v1 == 8)
      {
LABEL_7:
        v2 = *(_QWORD *)(result + 32);
        goto LABEL_8;
      }
      if ((v1 & 0xFE) == 0)
      {
LABEL_14:
        v2 = *(_QWORD *)(result + 40);
        goto LABEL_8;
      }
      if (v1 != 28)
      {
        if (v1 != 26)
          return 0;
        return result;
      }
      v2 = sub_22F409940(result);
LABEL_8:
      result = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v1) = *(_BYTE *)(result + 16);
    }
  }
  return result;
}

uint64_t sub_22F33DD98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = a3;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result + 8 * v8 == a2)
    return sub_22F341ED0(result, a3, a4);
  v9 = (a2 - v7) >> 3;
  if (v8 + a3 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = *(unsigned int *)(v6 + 8);
  }
  v10 = (uint64_t *)(v7 + 8 * v9);
  v11 = (uint64_t *)(v7 + 8 * v8);
  v12 = v11 - v10;
  v13 = v12 - v5;
  if (v12 >= v5)
  {
    result = sub_22F246808(v6, (char *)&v11[-v5], (char *)(v7 + 8 * v8));
    if (&v11[-v5] != v10)
      result = (uint64_t)memmove(&v10[v5], v10, (char *)&v11[-v5] - (char *)v10);
    do
    {
      *v10++ = a4;
      --v5;
    }
    while (v5);
  }
  else
  {
    *(_DWORD *)(v6 + 8) = v8 + v5;
    if (v9 != v8)
    {
      result = (uint64_t)memcpy((void *)(v7 + 8 * (v8 + v5) - 8 * v12), v10, (char *)v11 - (char *)v10);
      v14 = v11 - v10;
      do
      {
        *v10++ = a4;
        --v14;
      }
      while (v14);
    }
    if (v5 != v12)
    {
      do
        *v11++ = a4;
      while (!__CFADD__(v13++, 1));
    }
  }
  return result;
}

uint64_t *sub_22F33DED4(uint64_t *result, int a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  if (a2 <= 32)
  {
    if (a2 > 18)
      __asm { BR              X10 }
    if (a2 == 4)
    {
      return (uint64_t *)sub_22F33E518(result, a3, a4, a5, a6);
    }
    else if (a2 == 7)
    {
      return (uint64_t *)sub_22F33E2DC(result, (uint64_t)a3, a4, a5, a6);
    }
    else
    {
      return (uint64_t *)sub_22F33E39C(result, a3, a4, a5, a6);
    }
  }
  else
  {
    switch(a2)
    {
      case '4':
        result = (uint64_t *)sub_22EC9FCD4((uint64_t)result, a3, a4, a5, a6);
        break;
      case '5':
      case '6':
      case ';':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'L':
      case 'M':
        __break(1u);
        break;
      case '7':
        result = (uint64_t *)sub_22EC9FB70((uint64_t)result, a3, a4, a5, a6);
        break;
      case '8':
        result = (uint64_t *)sub_22EC9F620(result, (uint64_t)a3, a4, a5, a6);
        break;
      case '9':
        result = (uint64_t *)sub_22EC9F1E8(result, (unint64_t)a3, a4, a5, a6);
        break;
      case ':':
        result = (uint64_t *)sub_22EC9EFAC(result, (uint64_t)a3, a4, a5, a6);
        break;
      case '<':
        result = (uint64_t *)sub_22EC9F118(result, a4, a6, a5, a3);
        break;
      case '=':
        result = (uint64_t *)sub_22F33E49C(result, a3, a4, a5, a6);
        break;
      case '>':
        result = (uint64_t *)sub_22EC9F4A0(result, (uint64_t)a3, a4, a5, a6);
        break;
      case 'F':
        result = (uint64_t *)sub_22F33E1DC(result, a3, a4, a5, a6);
        break;
      case 'K':
        result = (uint64_t *)sub_22F33E25C(result, a3, a4, a5, a6);
        break;
      case 'N':
        result = (uint64_t *)sub_22EC9F344(result, (unint64_t)a3, a4, a5, a6);
        break;
      default:
        if (a2 == 33)
          result = (uint64_t *)sub_22EC9F560(result, (uint64_t)a3, a4, a5, a6);
        else
          result = (uint64_t *)sub_22F33E41C(result, a3, a4, a5, a6);
        break;
    }
  }
  return result;
}

uint64_t sub_22F33E1DC(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t result;

  v9 = sub_22EC98030(a1, a2, 70, 1, 0);
  if ((v9 & 1) != 0)
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 70;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = v9 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_22F33E25C(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t result;

  v9 = sub_22EC98030(a1, a2, 75, 1, 0);
  if ((v9 & 1) != 0)
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 75;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = v9 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_22F33E2DC(uint64_t *a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_22EFF605C(a2);
  if (!sub_22ECA0798(a1, v10, a1[1536]))
    return 0;
  v11 = sub_22EB1A358(a1, a2, 0);
  if ((v11 & 1) != 0)
    return 0;
  v12 = sub_22ECFABE8(a1, (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(a1[1536] + 21536), 4, 1);
  if ((v12 & 1) != 0)
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 7;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = v12 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_22F33E39C(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t result;

  v9 = sub_22EC98030(a1, a2, 12, 1, 0);
  if ((v9 & 1) != 0)
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 12;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = v9 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_22F33E41C(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t result;

  v9 = sub_22EC98030(a1, a2, 35, 0, 0);
  if ((v9 & 1) != 0)
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a5;
  *(_DWORD *)(result + 8) = 35;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)(result + 16) = v9 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_22F33E49C(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  unint64_t v10;

  if (!a2)
  {
    v10 = 0;
    return sub_22F3EB874(a1[11], a3, a4, a5, v10);
  }
  v9 = sub_22EC98030(a1, a2, 61, 1, 0);
  if ((v9 & 1) == 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22F3EB874(a1[11], a3, a4, a5, v10);
  }
  return 0;
}

uint64_t sub_22F33E518(_QWORD *a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;

  v9 = sub_22EC98030(a1, a2, 4, 1, 0);
  if ((v9 & 1) != 0)
    return 0;
  else
    return sub_22F3EAC14(a1[11], v9 & 0xFFFFFFFFFFFFFFFELL, a3, a4, a5);
}

void sub_22F33E588(_QWORD *a1, int a2, unsigned int a3, int a4, int a5, int a6, int a7)
{
  if (a2 > 58)
  {
    if (a2 == 59)
    {
      sub_22ECA0CE8(a1, a3, a4, a5, a6, a7);
    }
    else if (a2 == 64)
    {
      sub_22ECA0A68(a1, a3, a4, a5, a6, a7);
    }
    else
    {
      sub_22ECA0DD0(a1, a3, a4, a5, a6, a7);
    }
  }
  else if (a2 == 9)
  {
    sub_22ECA0C00(a1, a3, a4, a5, a6, a7);
  }
  else if (a2 == 10)
  {
    sub_22ECA0F50(a1, a3, a4, a5, a6, a7);
  }
  else
  {
    sub_22ECA0930((uint64_t)a1, a3);
  }
}

_DWORD *sub_22F33E5F4(uint64_t a1, int a2, int a3)
{
  _DWORD *result;

  result = (_DWORD *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 12, 3);
  result[1] = a3;
  result[2] = 32;
  *result = a2;
  return result;
}

_DWORD *sub_22F33E634(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6, int a7, uint64_t a8, int *a9, uint64_t a10, int a11, int a12, int a13)
{
  if (a2 <= 23)
  {
    if (a2 == 17)
      return sub_22ECA1BE0(a1, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), a6, a7, *a9, a9[1], a13);
    else
      return (_DWORD *)sub_22ECA1F20(a1, *(_DWORD *)(a3 + 4 * a4 - 4), a5, a6, a7, a9[a10 - 1], a13);
  }
  else if (a2 == 24)
  {
    return (_DWORD *)sub_22ECA18BC(a1, *(_DWORD *)(a3 + 4 * a4 - 4), a5, a6, a7, a9[a10 - 1], a11, a13);
  }
  else if (a2 == 36)
  {
    return (_DWORD *)sub_22EC9FE98((uint64_t)a1, *(_DWORD *)(a3 + 4 * a4 - 4), (unsigned __int8 *)a5, a6, a7, a9[a10 - 1], a11, a13);
  }
  else
  {
    return (_DWORD *)sub_22ECA1458(a1, *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8), a5, a6, a7, *a9, a9[1], 0, a9[2], 0, a11, 0, a13);
  }
}

uint64_t sub_22F33E73C(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v6;
  int v7;

  v6 = result;
  if (a2 <= 31)
  {
    if (a2 > 12)
    {
      if (a2 == 13)
      {
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 13;
      }
      else
      {
        if (a2 == 20)
        {
          result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 32, 3);
          *(_DWORD *)result = a3;
          *(_DWORD *)(result + 4) = a4;
          *(_QWORD *)(result + 8) = 20;
          *(_DWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          return result;
        }
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 25;
      }
    }
    else
    {
      if (!a2)
      {
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        *(_DWORD *)(result + 8) = 0;
        return result;
      }
      if (a2 == 1)
      {
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 1;
      }
      else
      {
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 11;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case '1':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 49;
        break;
      case '2':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 50;
        break;
      case '3':
        *(_BYTE *)(sub_22ECB1B04(*(_QWORD *)(result + 12288)) + 1080) = 1;
        result = sub_22E3CD3D4(*(_QWORD *)(v6 + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 51;
        break;
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'F':
      case 'G':
      case 'I':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'Q':
      case 'T':
      case 'U':
        __break(1u);
        return result;
      case '<':
        return sub_22EC9F118((_QWORD *)result, a3, a4, 0, 0);
      case '=':
        return sub_22F3EB874(*(_QWORD *)(result + 88), a3, 0, a4, 0);
      case 'A':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 65;
        break;
      case 'C':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 67;
        break;
      case 'D':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 68;
        break;
      case 'E':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 69;
        break;
      case 'H':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 72;
        break;
      case 'J':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 74;
        break;
      case 'P':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 80;
        break;
      case 'R':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 82;
        break;
      case 'S':
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 83;
        break;
      case 'V':
        *(_BYTE *)(sub_22ECB1B04(*(_QWORD *)(result + 12288)) + 1081) = 1;
        result = sub_22E3CD3D4(*(_QWORD *)(v6 + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 86;
        break;
      case 'W':
        return sub_22F3EA350(*(_QWORD *)(result + 88), a3, a4);
      default:
        if (a2 == 32)
        {
          result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
          *(_DWORD *)(result + 4) = a4;
          *(_DWORD *)(result + 8) = 32;
          *(_DWORD *)result = a3;
          return result;
        }
        result = sub_22E3CD3D4(*(_QWORD *)(result + 88) + 2032, 12, 3);
        *(_DWORD *)result = a3;
        *(_DWORD *)(result + 4) = a4;
        v7 = 93;
        break;
    }
  }
  *(_DWORD *)(result + 8) = v7;
  return result;
}

uint64_t sub_22F33EAFC(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t result;

  if (a2 && !sub_22ECA22F4(a1, a2, a5, 20))
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a6;
  *(_DWORD *)(result + 8) = 20;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a5;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_22F33EB88(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, char a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v19;
  uint64_t *i;
  unsigned __int8 *v21;
  int v22;
  int v24;
  char v25;
  char v26;
  unsigned int v27[24];

  if (!sub_22ECA22F4(a1, a2, a9, 41))
    return 0;
  v24 = a8;
  v25 = a5;
  v26 = a6;
  if (a4)
  {
    v19 = 8 * a4;
    for (i = a3; ; ++i)
    {
      v21 = (unsigned __int8 *)*i;
      if ((*(_DWORD *)*i & 0x1E000) == 0 && (sub_22F0085E8(*i, a1[11], 0) & 1) == 0 && *v21 != 225)
        break;
      v19 -= 8;
      if (!v19)
        return sub_22F3EC904(a1[11], a2, a3, a4, v25, v26, a7, v24, a9, 0, a11);
    }
    sub_22EFF605C((uint64_t)v21);
    sub_22E8FCA40(a1, v22, 0x108Fu, 0, (uint64_t)v27);
    sub_22E903BEC(v27);
    return 0;
  }
  return sub_22F3EC904(a1[11], a2, a3, a4, v25, v26, a7, v24, a9, 0, a11);
}

uint64_t sub_22F33ECC8(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t result;

  if (!sub_22ECA22F4(a1, a2, a5, 88))
    return 0;
  result = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
  *(_DWORD *)result = a3;
  *(_DWORD *)(result + 4) = a6;
  *(_DWORD *)(result + 8) = 88;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a5;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

unsigned int *sub_22F33ED50(uint64_t *a1, int a2, unsigned __int8 **a3, unint64_t a4, _DWORD *a5, int *a6, unsigned int a7, uint64_t a8, uint64_t a9, unint64_t a10, int *a11, unsigned __int8 **a12, uint64_t a13)
{
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  __int128 *v21;
  int v22;
  int v23;
  int *v24;
  unsigned int v25;
  int *v26;
  uint64_t v27;

  v15 = *a6;
  v14 = a6[1];
  v16 = a6[2];
  if (a2 > 52)
  {
    if (a2 > 76)
    {
      if (a2 <= 88)
      {
        if (a2 == 81)
          return sub_22ECA7CAC(a1, v24, v25, v26, v27, a8, v21, a8, a9, a10, a11, a12, a13);
        else
          return (unsigned int *)sub_22F33F264((uint64_t)a1, (uint64_t)a3, a4, v15, v14, a7, v16, a8, a9);
      }
      else if (a2 == 89)
      {
        return sub_22ECA8A30(a1, (uint64_t)a3, a4, a6);
      }
      else
      {
        return sub_22ECA819C(a1, (uint64_t)a3, a4, a6);
      }
    }
    else if (a2 > 65)
    {
      if (a2 == 66)
        return (unsigned int *)sub_22ECA41D4(a1, (uint64_t)a3, a4, v22, v15, v14, v23, a7, a9, a10, (uint64_t)a11);
      else
        return sub_22ECA3D84(a1, a3, a4, *a6, a6[1], a6[2]);
    }
    else
    {
      v17 = *a6;
      v18 = a6[1];
      v19 = a6[2];
      if (a2 == 53)
        return sub_22ECA9DF0(a1, a3, a4, v17, v18, v19);
      else
        return sub_22ECA2624(a1, a3, a4, v17, v18, v19);
    }
  }
  else
  {
    if (a2 > 13)
      __asm { BR              X25 }
    if (a2 == 3)
    {
      return (unsigned int *)sub_22ECAA508((uint64_t)a1, *a6, a6[1], a7, a6[2], (uint64_t)a5, (uint64_t *)a3, a4);
    }
    else if (a2 == 5)
    {
      return sub_22ECA5100((uint64_t)a1, a3, a4, a5, *a6, a6[1], a7, v16);
    }
    else
    {
      return (unsigned int *)sub_22ECA9A04(a1, (uint64_t)a5, a3, a4, *a6, a6[1], a7, v16);
    }
  }
}

uint64_t sub_22F33F264(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  int v37;
  int v38;
  const void *v41;
  unsigned int v42;
  void *v43;
  unsigned int v44;
  void *v45;
  unsigned int v46;
  void *v47;
  unsigned int v48;
  void *v49;
  unsigned int v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  sub_22ECAAC58((uint64_t)&v41, a3, 0);
  if ((sub_22ECAAED0(a1, *(_QWORD *)(a1 + 12288), 77, a2, a3, a8, a9) & 1) != 0)
  {
    v15 = 0;
  }
  else
  {
    v17 = *(_QWORD *)(a8 + 8);
    v16 = (uint64_t *)(a8 + 8);
    v37 = a6;
    v38 = a7;
    v35 = v42;
    v36 = v41;
    v34 = *(_QWORD *)(a1 + 88);
    if (v17)
    {
      v30 = sub_22F0ABC50(v16, *(_QWORD *)(a1 + 88));
      v32 = v31;
      v33 = v30;
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v18 = v43;
    v19 = v44;
    v20 = v45;
    v21 = v46;
    v22 = v47;
    v23 = v48;
    v24 = v49;
    v25 = v50;
    v26 = sub_22EC9ED7C(*(_QWORD *)(a1 + 88), v51, v52);
    v27 = sub_22ECAAB84(a1, v53, v54);
    v15 = sub_22F3EB374(v34, a4, a5, v37, v38, v36, v35, v28, v33, v32, a9, v18, v19, v20, v21, v22, v23, v24, v25,
            v26,
            v27);
  }
  sub_22ECAE7FC((uint64_t)&v41);
  return v15;
}

uint64_t sub_22F33F420(uint64_t a1, unsigned __int8 **a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 **a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v42;
  int v43;
  const void *v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  void *v54;
  unsigned int v55;
  void *v56;
  unsigned int v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  sub_22ECAAC58((uint64_t)&v46, a3, 0);
  if (sub_22ECAAED0(a1, *(_QWORD *)(a1 + 12288), 0x25u, a2, a3, a8, a9, v17, a10, a11, (uint64_t)&v46))
  {
    v18 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(a8 + 8);
    v19 = (uint64_t *)(a8 + 8);
    v42 = a6;
    v43 = a7;
    v40 = v47;
    v41 = v46;
    v39 = *(_QWORD *)(a1 + 88);
    if (v20)
    {
      v33 = sub_22F0ABC50(v19, *(_QWORD *)(a1 + 88));
      v35 = v34;
      v36 = v33;
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    v37 = v49;
    v38 = v48;
    v21 = v50;
    v22 = v51;
    v23 = v52;
    v24 = v53;
    v25 = v54;
    v26 = v55;
    v27 = v56;
    v28 = v57;
    v29 = sub_22EC9ED7C(*(_QWORD *)(a1 + 88), v58, v59);
    v30 = sub_22ECAAB84(a1, v60, v61);
    v18 = sub_22F3EB57C(v39, a4, a5, v42, v43, v41, v40, v31, v36, v35, a9, v38, v37, v21, v22, v23, v24, v25, v26,
            v27,
            v28,
            v29,
            v30);
  }
  sub_22ECAE7FC((uint64_t)&v46);
  return v18;
}

unint64_t sub_22F33F5F4(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v10;
  unint64_t result;
  uint64_t v12;

  v12 = *(_QWORD *)(a2 + 48);
  v10 = sub_22E4D27F8(&v12);
  result = sub_22F32D524(a1, a2, v10, 1, a5, 0);
  if (result < 2)
    return 1;
  if (!a4 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
  {
    result = sub_22EB2EA08(a1, a5, 5, result & 0xFFFFFFFFFFFFFFFELL);
    if (result < 2)
      return 1;
  }
  if (a3 != 1 && (*(_BYTE *)((result & 0xFFFFFFFFFFFFFFFELL) + 1) & 3) != 0)
  {
    result = sub_22EB1A358(a1, result & 0xFFFFFFFFFFFFFFFELL);
    if (result < 2)
      return 1;
  }
  return result;
}

uint64_t sub_22F33F6D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22ECCFE28(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

unint64_t sub_22F33F6FC(_QWORD *a1, int a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11[24];
  uint64_t v12;
  uint64_t v13;

  if (a3 < 0x10)
    return 0;
  v12 = v3;
  v13 = v4;
  v5 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || *(_BYTE *)(v5 + 16) != 57 || (a3 = *(_QWORD *)(v5 + 8), a3 >= 0x10))
  {
    if ((a3 & 0xF) != 0 || (*(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
    {
      sub_22E8FCA40(a1, a2, 0x10DEu, 0, (uint64_t)v11);
      v10 = 0;
    }
    else
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16);
      if ((v7 - 25) > 1)
      {
        v9 = v7 & 0xFE;
        if (v9 == 40)
        {
          sub_22E8FCA40(a1, a2, 0x10DEu, 0, (uint64_t)v11);
          v8 = 2;
        }
        else
        {
          if ((v9 - 2) > 3)
            return a3;
          sub_22E8FCA40(a1, a2, 0x10DEu, 0, (uint64_t)v11);
          v8 = 3;
        }
      }
      else
      {
        sub_22E8FCA40(a1, a2, 0x10DEu, 0, (uint64_t)v11);
        v8 = 1;
      }
      v10 = v8;
    }
    sub_22E8900C4((uint64_t)v11, &v10);
    sub_22E903BEC(v11);
  }
  return 0;
}

uint64_t sub_22F33F824(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;

  sub_22E904974(a1);
  v6 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v6)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v6 - 8);
    *(_DWORD *)(v6 + 8) |= 8u;
    LODWORD(v6) = *(_DWORD *)(a1 + 1904);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v6 - 8);
  *(_DWORD *)(v7 + 8) |= 0x100u;
  if (a3)
    v8 = a3 + 56;
  else
    v8 = 0;
  if (a2)
  {
    *(_QWORD *)(a1 + 216) = v8;
    v9 = a2 + 45;
  }
  else
  {
    v9 = (_QWORD *)(a1 + 216);
  }
  *v9 = v8;
  sub_22EB48CC8(a1, 6, 0, 3);
  v10 = *(_QWORD *)(a3 + 48);
  v11 = sub_22EC822F4((_QWORD *)a1, *(_DWORD *)(a3 + 24), v10, "omp_in", 6uLL, 0, 0);
  v12 = sub_22EC822F4((_QWORD *)a1, *(_DWORD *)(a3 + 24), v10, "omp_out", 7uLL, 0, 0);
  if (a2)
  {
    sub_22EA0483C(a1, v11, a2, 1);
    sub_22EA0483C(a1, v12, a2, 1);
  }
  else
  {
    sub_22EFCCFA0(a3 + 56, v11);
    sub_22EFCCFA0(a3 + 56, v12);
  }
  v13 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v11 + 28) |= 0x800u;
  sub_22EFC9100(v11, *(_QWORD *)(a1 + 88));
  v14 = sub_22EFF6D08(*(_QWORD *)(a1 + 88), 0, 0, 0, v11, 0, v13, v10, 1, 0, 0, 0, 0);
  v15 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v12 + 28) |= 0x800u;
  sub_22EFC9100(v12, *(_QWORD *)(a1 + 88));
  result = sub_22EFF6D08(*(_QWORD *)(a1 + 88), 0, 0, 0, v12, 0, v15, v10, 1, 0, 0, 0, 0);
  *(_QWORD *)(a3 + 104) = v14;
  *(_QWORD *)(a3 + 112) = result;
  return result;
}

void sub_22F33FA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  sub_22EB48DCC(a1);
  sub_22EB48E64(a1);
  sub_22F31D05C(a1);
  sub_22E904AD8(a1, 0, 0, 0, (uint64_t *)&v7);
  v6 = v7;
  v7 = 0;
  if (v6)
    sub_22E905138((uint64_t)&v8, v6);
  if (a3)
    *(_QWORD *)(a2 + 88) = a3;
  else
    sub_22EFC77E8(a2, 1);
}

uint64_t sub_22F33FAB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  sub_22E904974(a1);
  v6 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v6 - 8);
    *(_DWORD *)(v7 + 8) |= 8u;
  }
  if (a3)
    v8 = a3 + 56;
  else
    v8 = 0;
  if (a2)
  {
    *(_QWORD *)(a1 + 216) = v8;
    v9 = a2 + 45;
  }
  else
  {
    v9 = (_QWORD *)(a1 + 216);
  }
  *v9 = v8;
  sub_22EB48CC8(a1, 6, 0, 3);
  v10 = *(_QWORD *)(a3 + 48);
  v11 = sub_22EC822F4((_QWORD *)a1, *(_DWORD *)(a3 + 24), v10, "omp_priv", 8uLL, 0, 0);
  v12 = sub_22EC822F4((_QWORD *)a1, *(_DWORD *)(a3 + 24), v10, "omp_orig", 8uLL, 0, 0);
  if (a2)
  {
    sub_22EA0483C(a1, v11, a2, 1);
    sub_22EA0483C(a1, v12, a2, 1);
  }
  else
  {
    sub_22EFCCFA0(a3 + 56, v11);
    sub_22EFCCFA0(a3 + 56, v12);
  }
  v13 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v12 + 28) |= 0x800u;
  sub_22EFC9100(v12, *(_QWORD *)(a1 + 88));
  v14 = sub_22EFF6D08(*(_QWORD *)(a1 + 88), 0, 0, 0, v12, 0, v13, v10, 1, 0, 0, 0, 0);
  v15 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(v11 + 28) |= 0x800u;
  sub_22EFC9100(v11, *(_QWORD *)(a1 + 88));
  *(_QWORD *)(a3 + 120) = sub_22EFF6D08(*(_QWORD *)(a1 + 88), 0, 0, 0, v11, 0, v15, v10, 1, 0, 0, 0, 0);
  *(_QWORD *)(a3 + 128) = v14;
  return v11;
}

void sub_22F33FC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  __int16 v9;
  unint64_t v10;
  char v11;
  __int16 v12;
  _BYTE *v13;
  uint64_t v14;

  sub_22EB48DCC(a1);
  sub_22EB48E64(a1);
  sub_22F31D05C(a1);
  sub_22E904AD8(a1, 0, 0, 0, (uint64_t *)&v13);
  v8 = v13;
  v13 = 0;
  if (v8)
    sub_22E905138((uint64_t)&v14, v8);
  if (a3)
  {
    *(_QWORD *)(a2 + 96) = a3;
    v9 = *(_WORD *)(a2 + 64) & 0x9FFF;
  }
  else
  {
    if (a4 && (*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(a4 + 96) & 0x600u) - 1536 > 0xFFFFFBFF
      || *(_QWORD *)(a4 + 88) < 8uLL)
    {
      sub_22EFC77E8(a2, 1);
      return;
    }
    v10 = sub_22EFBC5B4(a4);
    v11 = *(_BYTE *)(a4 + 96);
    *(_QWORD *)(a2 + 96) = v10;
    if ((v11 & 0x60) != 0)
      v12 = 0x2000;
    else
      v12 = 0x4000;
    v9 = *(_WORD *)(a2 + 64) & 0x9FFF | v12;
  }
  *(_WORD *)(a2 + 64) = v9;
}

uint64_t sub_22F33FDA0(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v12;
  uint64_t v13;

  v12 = a3;
  if (a3)
    v8 = (unint64_t *)&v12;
  else
    v8 = 0;
  if ((a3 & 1) != 0)
    v9 = (unint64_t *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v9 = v8;
  if ((a3 & 1) != 0)
  {
    v10 = (unint64_t *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else if (a3)
  {
    v10 = (unint64_t *)&v13;
  }
  else
  {
    v10 = 0;
  }
  while (v9 != v10)
  {
    if (a4)
    {
      if (a2)
        sub_22EA0483C(a1, *v9, a2, 0);
    }
    else
    {
      sub_22EFC77E8(*v9, 1);
    }
    ++v9;
  }
  return a3;
}

unint64_t sub_22F33FE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  uint64_t v12;
  unint64_t v13;

  v10 = sub_22EE8156C(a1, a3, a2, a4, a5, a6, a7, a8);
  if ((*(_WORD *)(a3 + 1088) & 1) != 0 || (**(_QWORD **)a3 & 0x3F000) == 0x32000)
    return 0;
  v12 = (uint64_t)v10;
  v13 = *v10;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    sub_22EAA474C(a1, a3);
  return sub_22EE7D030(a1, v13, v12);
}

unint64_t sub_22F33FEEC(_QWORD *a1, int a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v7;
  unsigned int v8[24];

  if (a3 >= 0x10)
  {
    v5 = a3;
    v7 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (v7 && *(_BYTE *)(v7 + 16) == 57)
      v5 = *(_QWORD *)(v7 + 8);
  }
  else
  {
    v5 = 0;
  }
  if ((sub_22F10DF70(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0)) & 1) == 0
    && !sub_22F10E06C(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22E8FCA40(a1, a2, 0x10B2u, 0, (uint64_t)v8);
    sub_22E903BEC(v8);
    return 0;
  }
  return v5;
}

uint64_t sub_22F33FF90(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = sub_22EF579A8(*(_QWORD *)(a1 + 88), a3, a4);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v11 + 1960) + 80));
  if (v12)
    v13 = v12 + 40;
  else
    v13 = 0;
  if ((a5 & 7) != 0)
    v14 = 0;
  else
    v14 = a5 & 0xFFFFFFFFFFFFFFF8;
  v15 = sub_22EFBB670(v11, v13, a4, a4, v14, a3, (uint64_t)v10, 0);
  if (a2)
    sub_22EA0483C(a1, v15, a2, 0);
  *(_DWORD *)(v15 + 28) |= 0x800u;
  sub_22EFC9100(v15, *(_QWORD *)(a1 + 88));
  v16 = sub_22EFF6D08(*(_QWORD *)(a1 + 88), 0, 0, 0, v15, 0, a4, a3, 1, 0, 0, 0, 0);
  *(_QWORD *)(sub_22ECB1B04(*(_QWORD *)(a1 + 12288)) + 1304) = v16;
  return v16;
}

uint64_t sub_22F3400B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 12296) + 56 * *(unsigned int *)(a1 + 12304);
  *(_QWORD *)a2 = *(_QWORD *)(v2 - 56);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v2 - 48);
  *(_QWORD *)(v2 - 56) = 0;
  *(_QWORD *)(v2 - 48) = 0;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v2 - 40);
  *(_DWORD *)(v2 - 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 - 32);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(v2 - 20);
  return sub_22F34263C(a1 + 12296);
}

void sub_22F340100(_QWORD *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  _DWORD *v10;
  char v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  int v26;
  __int16 v27;
  char v28;
  unsigned int v29[24];
  uint64_t v30;

  v30 = a2;
  if (*(_DWORD *)(a1[9] + 72) >= 0x32u && ((sub_22EFC9084(a2, 0) & 1) != 0 || sub_22EFC9194(a2)))
  {
    sub_22E8FCA40(a1, a3, 0x1AC2u, 0, (uint64_t)v29);
    sub_22E903BEC(v29);
  }
  v10 = (_DWORD *)sub_22EF95D10(a2);
  if (v11)
  {
    v12 = v10;
    v13 = *(_DWORD *)(a5 + 24);
    v14 = v10[15];
    if (v10[10] != v13 && v14 == -1)
    {
      sub_22E8FCA40(a1, a3, 0x106Fu, 0, (uint64_t)&v24);
      v23 = sub_22F37A500(*(_DWORD *)(a5 + 24));
      v16 = sub_22E8AECC4((uint64_t)&v24, (uint64_t *)&v23);
      v22 = sub_22F37A500(v12[10]);
      sub_22E8AECC4(v16, (uint64_t *)&v22);
LABEL_14:
      sub_22E903BEC((unsigned int *)&v24);
      return;
    }
    if (v10[9] == a4)
    {
      if (v14 == -1)
        return;
      goto LABEL_19;
    }
    if (v14 == -1)
    {
      sub_22E8FCA40(a1, a3, 0x105Bu, 0, (uint64_t)&v24);
      sub_22E890024((uint64_t)&v24, &v30);
      goto LABEL_14;
    }
  }
  else
  {
    v13 = *(_DWORD *)(a5 + 24);
  }
LABEL_19:
  if (*(_BYTE *)(a5 + 40))
    v17 = *(_QWORD *)(a5 + 32);
  else
    v17 = 0;
  if (*(_QWORD *)(a5 + 32))
    v18 = 0;
  else
    v18 = *(_BYTE *)(a5 + 40) != 0;
  v19 = a1[11];
  v24 = 0uLL;
  v25 = a3 | ((unint64_t)a3 << 32);
  v26 = 0;
  v28 = 120;
  v27 = 0;
  v20 = sub_22F396338(v19, a4, v13, v17, v18, -1, &v24);
  sub_22EFCA95C(a2, v20);
  v21 = *(_QWORD *)(a1[11] + 16056);
  if (v21)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 160))(v21, a2, v20);
  sub_22EC7FD5C((uint64_t)a1, 0, a2, a3);
}

void sub_22F340300(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 88 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 88;
      v2 -= 88;
    }
    while (v2);
  }
}

char **sub_22F340364(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 144 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 144];
      if (&v2[v4 - 128] != v5)
        free(v5);
      v4 -= 144;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F3403D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if (sub_22F340438(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 24 * v5;
}

uint64_t sub_22F340438(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

BOOL sub_22F3404EC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  BOOL v4;

  if ((*(_DWORD *)(a1 + 28) & 0x7E) != 0x3C)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = *(_WORD *)(sub_22EFCBB30(v2) + 8) & 0x7F;
  v4 = v3 > 0x18 || ((1 << v3) & 0x1000006) == 0;
  return (!v4 || v3 - 52 <= 5) && v3 != 1;
}

uint64_t sub_22F340560(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
          sub_22F3405D4(v6);
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F3405D4(llvm *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  if (*((_DWORD *)this + 6) >= 0x41u)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      MEMORY[0x2348A0E84](v3, 0x1000C8000313F17);
  }
  return llvm::deallocate_buffer(this, (void *)(v2 + 33));
}

uint64_t sub_22F340628(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F24C318(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = sub_22F24C3AC(a2, a3, v12);
    *v9 = *a3;
    result = *a4;
    if (*a4)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v9[1] = result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F3406DC(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F34072C(a1);
  v2 = *(_QWORD *)a1 + 80 * v1;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)v2 = v2 + 16;
  *(_QWORD *)(v2 + 8) = 0x800000000;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_22F34072C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = &v2[10 * *(unsigned int *)(a1 + 8)];
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *v3 = v3 + 2;
  v3[1] = 0x800000000;
  sub_22F24C6C4(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  return (uint64_t)&v2[10 * v4 - 10];
}

void sub_22F3407DC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 + 101 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(unsigned int *)(a1 + 8);
  }
  bzero((void *)(*(_QWORD *)a1 + 8 * v2), 0x328uLL);
  *(_DWORD *)(a1 + 8) = v2 + 101;
}

uint64_t sub_22F340838(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_22F340438(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 24 * v11;
  }
  else
  {
    result = (uint64_t)sub_22F340908((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_OWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 8;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 16);
    }
    v13 = v14 + 24 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22F340908(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22ECD080C((uint64_t)a1, v6);
  v8 = 0;
  sub_22F340438((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F3409C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 200);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[3 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F340438((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

double sub_22F340A90(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v3 = (_QWORD *)(a1 + 152);
  v4 = a2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_22F24C010(a1 + 152, a2);
  sub_22F24C010(a1 + 200, v4);
  sub_22F24C010(a1 + 248, v4);
  sub_22F24C010(a1 + 296, v4);
  sub_22F24C010(a1 + 344, v4);
  sub_22F24C010(a1 + 392, v4);
  sub_22F24C010(a1 + 440, v4);
  sub_22F24C010(a1 + 488, v4);
  if (a2)
  {
    v5 = 0;
    do
    {
      *(_QWORD *)(*v3 + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 200) + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 296) + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 344) + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 440) + v5) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 488) + v5) = 0;
      v5 += 8;
    }
    while (8 * v4 != v5);
  }
  result = 0.0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

uint64_t sub_22F340BE8(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F340D44((uint64_t)&v11, a1, &v13, &v14);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

uint64_t sub_22F340CA4(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)a2;
  v10 = 0;
  result = sub_22F340D44((uint64_t)&v7, a1, &v9, &v10);
  if (v8)
  {
    v5 = v7;
    v6 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_22E4D6CC4((void **)(a1 + 24), a2);
    }
    else
    {
      *v6 = *a2;
      result = (uint64_t)(v6 + 1);
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 4) - 1;
  }
  return result;
}

uint64_t sub_22F340D44(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F340DD8(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F340DD8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4EEE00(a1, v6);
  v8 = 0;
  sub_22F246C54((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F340E84(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = (_QWORD *)a1[61];
  if (v2 != a1 + 63)
    free(v2);
  v3 = (_QWORD *)a1[55];
  if (v3 != a1 + 57)
    free(v3);
  v4 = (_QWORD *)a1[49];
  if (v4 != a1 + 51)
    free(v4);
  v5 = (_QWORD *)a1[43];
  if (v5 != a1 + 45)
    free(v5);
  v6 = (_QWORD *)a1[37];
  if (v6 != a1 + 39)
    free(v6);
  v7 = (_QWORD *)a1[31];
  if (v7 != a1 + 33)
    free(v7);
  v8 = (_QWORD *)a1[25];
  if (v8 != a1 + 27)
    free(v8);
  v9 = (_QWORD *)a1[19];
  if (v9 != a1 + 21)
    free(v9);
  return a1;
}

uint64_t sub_22F340F44(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v12 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v12)
  {
    return result;
  }
  *(_QWORD *)(v11 + 8 * result) = sub_22F34101C(a2, a3, a4, a5);
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

uint64_t sub_22F34101C(const void *a1, size_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APInt *v12;

  v8 = MEMORY[0x23489D23C](a2 + 33, 8);
  v9 = v8;
  v10 = v8 + 32;
  if (a2)
    memcpy((void *)(v8 + 32), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  v11 = *a3;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = v11;
  v12 = (llvm::APInt *)(v9 + 16);
  LODWORD(v11) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(v9 + 24) = v11;
  if (v11 > 0x40)
    llvm::APInt::initSlowCase(v12, (const llvm::APInt *)a4);
  else
    *(_QWORD *)v12 = *(_QWORD *)a4;
  *(_BYTE *)(v9 + 28) = *(_BYTE *)(a4 + 12);
  return v9;
}

BOOL sub_22F3410BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 245)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F34111C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = 0;
  if (!sub_22F246C54((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

void sub_22F341184(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F3411F0(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F3411F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = (_BYTE *)(a2 + 12);
    v4 = 16 * v2;
    v5 = *(_QWORD *)result + 8;
    do
    {
      *((_DWORD *)v3 - 1) = *(_DWORD *)v5;
      *(_QWORD *)(v3 - 12) = *(_QWORD *)(v5 - 8);
      *(_DWORD *)v5 = 0;
      *v3 = *(_BYTE *)(v5 + 4);
      v3 += 16;
      v5 += 16;
      v4 -= 16;
    }
    while (v4);
    v6 = *(unsigned int *)(result + 8);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)result;
      v8 = 16 * v6;
      do
      {
        if (*(_DWORD *)(v7 + v8 - 8) >= 0x41u)
        {
          result = *(_QWORD *)(v7 + v8 - 16);
          if (result)
            result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
        }
        v8 -= 16;
      }
      while (v8);
    }
  }
  return result;
}

char **sub_22F34128C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        v5 = *(_QWORD *)&v2[v4 - 16];
        if (v5)
          MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
      }
      v4 -= 16;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_22F341310(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2A0920((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F341370(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F341370(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22ECF4A80((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2A0920((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F34142C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2A0920((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

int *sub_22F3414F4(int *a1)
{
  int v2;
  int *v3;
  unsigned int v4;
  int *result;
  unsigned int v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 50;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 6;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[6 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 8;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[6 * v4];
  }
  return result;
}

uint64_t sub_22F341574(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F28619C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F341604(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 88 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F341604(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_22F34166C(a1, a3, a2);
  *v6 = *a3;
  v6[1] = v6 + 3;
  v6[2] = 0x400000000;
  if (*(_DWORD *)(a4 + 8))
    sub_22ECF4E18(v6 + 1, (uint64_t *)a4);
  return v6;
}

_QWORD *sub_22F34166C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22ECF4BFC(a1, v6);
  v8 = 0;
  sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F34171C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 88 * v6;
    do
    {
      *v7 = -4096;
      v7 += 11;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x400000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22ECF4CC8(v11, (uint64_t *)(v4 + 8));
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

void sub_22F341810(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F34187C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F34187C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 144 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x800000000;
      if (*(_DWORD *)(v5 + 8))
        sub_22F2528D0((uint64_t)a2, v5);
      v5 += 144;
      a2 += 18;
      v6 -= 144;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 144 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 144);
        if ((void *)(v8 + v9 - 128) != v10)
          free(v10);
        v9 -= 144;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F341934@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F3419B8((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F341A50(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_22F3419B8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((*a2 >> 9) ^ *a2);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -1;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F341A50(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22ECF6638(a1, v7);
  v9 = 0;
  sub_22F3419B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_22F341AF8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    bzero(*(void **)a1, 8 * v6);
  while (a2 != a3)
  {
    if ((unint64_t)(*a2 + 1) >= 2)
    {
      v7 = 0;
      sub_22F3419B8((uint64_t *)a1, a2, &v7);
      *v7 = *a2;
      ++*(_DWORD *)(a1 + 8);
    }
    ++a2;
  }
}

double sub_22F341B94(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 144 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 144];
      if (&v4[v6 - 128] != v7)
        free(v7);
      v6 -= 144;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F341C20(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_22F341810(a1);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v8 = 9 * v2;
        v9 = 144 * a2 - 144 * v2;
        v10 = *(_QWORD *)a1 + 16 * v8 + 16;
        do
        {
          *(_QWORD *)(v10 - 16) = v10;
          *(_QWORD *)(v10 - 8) = 0x800000000;
          v10 += 144;
          v9 -= 144;
        }
        while (v9);
      }
    }
    else
    {
      v5 = 9 * v2;
      v6 = (void **)(*(_QWORD *)a1 + 16 * v5 - 144);
      v7 = 144 * a2 - 16 * v5;
      do
      {
        if (v6 + 2 != *v6)
          free(*v6);
        v6 -= 18;
        v7 += 144;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_22F341CFC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22ECF742C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

unint64_t sub_22F341D68(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = (char *)a3 - (char *)a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + a3 - a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (unint64_t *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *v4++;
      result = sub_22E6939D8(v9);
      v10 = result + 64;
      if (!result)
        v10 = 0;
      *v8++ = v10;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_22F341E04(uint64_t a1, uint64_t a2)
{
  sub_22E861AD8(a1, a2);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_22F2528D0(a1 + 72, a2 + 72);
  sub_22F28CB40(a1 + 216, a2 + 216);
  sub_22F341E58(a1 + 264, (unsigned int *)(a2 + 264));
  return a1;
}

uint64_t sub_22F341E58(uint64_t a1, unsigned int *a2)
{
  uint64_t i;

  sub_22F2ECC54(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(24 * *(unsigned int *)(a1 + 16)));
  *(_QWORD *)a1 = 1;
  for (i = 8; i != 104; i += 24)
    *(_DWORD *)(a1 + i) = -1;
  sub_22F2ECFF4((unsigned int *)a1, a2);
  return a1;
}

uint64_t sub_22F341ED0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v5 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
  v8 = a2;
  do
  {
    *v7++ = a3;
    --v8;
  }
  while (v8);
  *(_DWORD *)(v5 + 8) = v6 + a2;
  return result;
}

void sub_22F341F44(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = &v2[2 * *(unsigned int *)(a1 + 8)];
  *v3 = v3 + 2;
  v3[1] = 0;
  sub_22F341FCC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F341FCC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)a1;
    v5 = 16 * v2;
    do
    {
      v6 = a2 + 2;
      *a2 = a2 + 2;
      a2[1] = 0;
      if (*(_DWORD *)(v4 + 8))
        sub_22F24C77C((uint64_t)a2, v4);
      v4 += 16;
      a2 = v6;
      v5 -= 16;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 16 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 16);
        if ((void *)(v8 + v9) != v10)
          free(v10);
        v9 -= 16;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F342060(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (uint64_t *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9 | 4;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

void sub_22F3420E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = v6;
  v8 = a2;
  do
  {
    v6 = sub_22F342268(v6, a3) + 616;
    --v8;
  }
  while (v8);
  v9 = (char *)*a1;
  v10 = *((_DWORD *)a1 + 2);
  if (v10)
  {
    v11 = 616 * v10;
    v12 = v9 - 616;
    do
    {
      sub_22F340E84(&v12[v11]);
      v11 -= 616;
    }
    while (v11);
    v9 = (char *)*a1;
  }
  if (v9 != (char *)(a1 + 2))
    free(v9);
  *a1 = v7;
  *((_DWORD *)a1 + 2) = a2;
  *((_DWORD *)a1 + 3) = 0;
}

uint64_t sub_22F342194(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  sub_22F24C890(a1 + 152, a2 + 152);
  sub_22F24C890(a1 + 200, a2 + 200);
  sub_22F24C890(a1 + 248, a2 + 248);
  sub_22F24C890(a1 + 296, a2 + 296);
  sub_22F24C890(a1 + 344, a2 + 344);
  sub_22F24C890(a1 + 392, a2 + 392);
  sub_22F24C890(a1 + 440, a2 + 440);
  sub_22F24C890(a1 + 488, a2 + 488);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  v11 = *(_OWORD *)(a2 + 600);
  v13 = *(_OWORD *)(a2 + 552);
  v12 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v11;
  *(_OWORD *)(a1 + 552) = v13;
  *(_OWORD *)(a1 + 568) = v12;
  return a1;
}

uint64_t sub_22F342268(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  v11 = a1 + 152;
  *(_QWORD *)(a1 + 160) = 0x400000000;
  if (*(_DWORD *)(a2 + 160))
    sub_22F24C890(v11, a2 + 152);
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x400000000;
  if (*(_DWORD *)(a2 + 208))
    sub_22F24C890(a1 + 200, a2 + 200);
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x400000000;
  if (*(_DWORD *)(a2 + 256))
    sub_22F24C890(a1 + 248, a2 + 248);
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0x400000000;
  if (*(_DWORD *)(a2 + 304))
    sub_22F24C890(a1 + 296, a2 + 296);
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)(a1 + 352) = 0x400000000;
  if (*(_DWORD *)(a2 + 352))
    sub_22F24C890(a1 + 344, a2 + 344);
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x400000000;
  if (*(_DWORD *)(a2 + 400))
    sub_22F24C890(a1 + 392, a2 + 392);
  *(_QWORD *)(a1 + 440) = a1 + 456;
  *(_QWORD *)(a1 + 448) = 0x400000000;
  if (*(_DWORD *)(a2 + 448))
    sub_22F24C890(a1 + 440, a2 + 440);
  *(_QWORD *)(a1 + 488) = a1 + 504;
  *(_QWORD *)(a1 + 496) = 0x400000000;
  if (*(_DWORD *)(a2 + 496))
    sub_22F24C890(a1 + 488, a2 + 488);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  v12 = *(_OWORD *)(a2 + 552);
  v13 = *(_OWORD *)(a2 + 568);
  v14 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v14;
  *(_OWORD *)(a1 + 552) = v12;
  *(_OWORD *)(a1 + 568) = v13;
  return a1;
}

_QWORD *sub_22F342408(uint64_t a1, unint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F29DBCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F342474(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_22F342474(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22ECF82E8(a1, v6);
  v8 = 0;
  sub_22F29DBCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F342520(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 + 1) >= 2)
    {
      v11 = 0;
      result = sub_22F29DBCC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_22F3425D0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22ECF840C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F34263C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 8) - 1;
  *(_DWORD *)(a1 + 8) = v1;
  return llvm::deallocate_buffer(*(llvm **)(*(_QWORD *)a1 + 56 * v1), (void *)(16 * *(unsigned int *)(*(_QWORD *)a1 + 56 * v1 + 16)));
}

void sub_22F342668(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = &v2[18 * *(unsigned int *)(a1 + 8)];
  *v3 = v3 + 2;
  v3[1] = 0x800000000;
  sub_22F34187C(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F342700()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  int v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[339];
  int v43;
  _OWORD v44[9];
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[5];
  __int128 v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  int v52;
  uint64_t v53;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v53 = *MEMORY[0x24BDAC8D0];
  v35 = v3;
  v36 = v1;
  v31 = 5;
  v32 = xmmword_22F495F80;
  v34 = 0;
  sub_22EFF605C(v3);
  v40 = v42;
  v41 = 0x1000000000;
  v42[336] = v44;
  v42[337] = v44;
  v42[338] = 16;
  v43 = 0;
  v44[8] = 0u;
  v45 = v47;
  v46 = 0x400000000;
  v47[4] = (char *)&v48 + 8;
  v48 = 0u;
  v49 = 1;
  v50 = v6;
  v52 = 0;
  v51 = 0u;
  sub_22ECFDAC8(v5, v4, v2, (uint64_t)&v32 + 8, (uint64_t)&v40, 0, 0, 0);
  v8 = v7;
  if (v7 == 2)
    goto LABEL_2;
  if (v7 != 1)
  {
    v13 = 0;
    goto LABEL_8;
  }
  v13 = 0;
  if ((_DWORD)v41)
  {
LABEL_2:
    sub_22ECFE46C(&v37);
    if (v8 == 2)
    {
      sub_22F0D5A50(v35);
      sub_22E8FCA40(v5, v9, 0x132Fu, 0, (uint64_t)&v27);
      v26 = *(_QWORD *)(v35 + 8);
      v10 = sub_22E8901B8((uint64_t)&v27, &v26);
      v11 = sub_22E8901B8(v10, &v36);
      sub_22F0D4E74(v35);
      v25 = v12;
      sub_22E8906A0(v11, &v25);
    }
    else
    {
      v15 = v35;
      sub_22F0D5A50(v35);
      v17 = v16;
      v26 = *(_QWORD *)(v15 + 8);
      sub_22F0D4E74(v15);
      v25 = v18;
      v27 = &unk_24FAB8820;
      v28 = 5000;
      v29 = &v26;
      v30 = &v25;
      if ((sub_22EE8B0B0((uint64_t)v5, v17, v2) & 1) != 0)
        goto LABEL_5;
      sub_22F0D5A50(v35);
      sub_22E8FCA40(v5, v19, 0x1387u, 0, (uint64_t)&v27);
      v24 = 0;
      v20 = sub_22E894E38((uint64_t)&v27, &v24);
      v26 = *(_QWORD *)(v35 + 8);
      v21 = sub_22E8901B8(v20, &v26);
      sub_22F0D4E74(v35);
      v25 = v22;
      v23 = sub_22E8906A0(v21, &v25);
      sub_22E8901B8(v23, &v36);
    }
    sub_22E903BEC((unsigned int *)&v27);
LABEL_5:
    sub_22ECFEBA0((uint64_t)&v40, (uint64_t)v5, (int)&v35, 1u, v37, v38, "", 0, 0);
    if (v37 != (char *)&v39)
      free(v37);
    v13 = 1;
  }
LABEL_8:
  sub_22E9DC79C((uint64_t *)&v40);
  if ((v31 & 0x7FFFFFFF) == 2)
    free(v33);
  return v13;
}

uint64_t sub_22F342A50(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  _QWORD v16[2];
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;

  v25 = a2;
  if ((sub_22ECFAD0C(a1, &v25, 0) & 1) != 0)
    return 1;
  v5 = a1[11];
  v6 = sub_22F36E1B8(v5);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7)
    v8 = v7 & 0xFFFFFFFFFFFFFFF0;
  else
    v8 = sub_22EF6462C(v5, v6);
  v9 = v25;
  v10 = a1[11];
  v11 = sub_22F36E1B8(v10);
  v12 = *(_QWORD *)(v11 + 48);
  if (v12)
    v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  else
    v13 = sub_22EF6462C(v10, v11);
  sub_22ECFA94C(v16, a1, v9, v13, 0, 1, 0, 0, 0, 1);
  v14 = v16[0];
  v15 = v16[0] & 0x7FFFFFFF;
  if ((v16[0] & 0x7FFFFFFF) != 0)
  {
    if (v15 == 4)
    {
      v3 = 0;
      goto LABEL_18;
    }
    if (v15 == 1 && (v21 & 0xFF00) == 0xD00)
    {
      v21 &= 0xFFFFFFFFFF0000FFLL;
      v23 = v22;
      v24 = v22;
    }
  }
  else if ((v17 & 0xFF00) == 0xD00)
  {
    v17 &= 0xFFFFFFFFFF0000FFLL;
    v19 = v18;
    v20 = v18;
  }
  v3 = sub_22EBC4694(a1, v25, v8, v16, 3, 0);
  v14 = v16[0];
LABEL_18:
  if ((v14 & 0x7FFFFFFF) == 2 && v18 != &v20)
    free(v18);
  return v3;
}

void sub_22F342BD4(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18[24];

  sub_22E90379C(a2, a3, a4, 0, (uint64_t)v18);
  v17 = *(_QWORD *)(a1 + 16);
  v6 = sub_22E8901B8((uint64_t)v18, &v17);
  v16 = *(_QWORD *)(a1 + 24);
  sub_22E8901B8(v6, &v16);
  sub_22E903BEC(v18);
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(uint64_t **)(a1 + 32);
    v10 = &v9[2 * v7];
    for (i = 16 * v7; ; i -= 16)
    {
      v12 = *((_QWORD *)a2 + 13);
      v13 = *(_DWORD *)(v12 + 12) ? *(_DWORD *)(v12 + 16) : 0x7FFFFFFF;
      if (v8 >= v13)
        break;
      ++v8;
      v14 = *v9;
      v15 = v9[1];
      v9 += 2;
      sub_22ED113EC(a2, v14, v15, 0, 0, 0);
      if (v9 == v10)
      {
        if (v7 >= 5)
          *(_DWORD *)(*((_QWORD *)a2 + 13) + 16) = 4;
        return;
      }
    }
    if (v8 >= 5)
      *(_DWORD *)(v12 + 16) = 4;
    sub_22E8FCA40(a2, 0, 0x1755u, 0, (uint64_t)v18);
    LODWORD(v17) = i >> 4;
    sub_22E8900C4((uint64_t)v18, (int *)&v17);
    sub_22E903BEC(v18);
  }
}

BOOL sub_22F342D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  void *v5;
  int v6;
  _QWORD v7[33];

  v7[32] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 72);
  if ((*(_BYTE *)(v2 + 68) & 0x20) == 0 || (*(_BYTE *)(v2 + 104) & 1) == 0)
    return 0;
  sub_22ECFE46C(&v5);
  v3 = v6 != 0;
  if (v5 != v7)
    free(v5);
  return v3;
}

unint64_t sub_22F342DC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  int v5;

  v1 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2 && v3 == 39)
    goto LABEL_3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v2 = sub_22F10CF48(v2);
    if (v2)
      goto LABEL_3;
    v2 = *v1;
    v3 = *(unsigned __int8 *)(*v1 + 16);
  }
  if ((v3 & 0xFE) == 0x28)
    goto LABEL_9;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v2 = sub_22F10CF48(v2);
    if (v2)
    {
LABEL_9:
      if ((*(_BYTE *)(v2 + 18) & 0x10) != 0)
      {
        do
        {
          v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v2)
          {
            v5 = *(_DWORD *)(v2 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v2 = sub_22F10CF48(v2);
          v5 = *(_DWORD *)(v2 + 16);
        }
        while ((v5 & 0x100000) != 0);
      }
      goto LABEL_3;
    }
    v2 = *v1;
    v3 = *(unsigned __int8 *)(*v1 + 16);
  }
  if (v3 == 31
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31 && (v2 = sub_22F10CF48(v2)) != 0)
  {
LABEL_3:
    v1 = (uint64_t *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  return *(_QWORD *)(v1[1] & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F342EDC(_QWORD *a1, uint64_t *a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v6 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  result = sub_22ED14440(a1, v6, &v15);
  if (result)
  {
    v8 = result;
    if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result) + 84) & 0x10) != 0
      && sub_22E631558(v8)
      || (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8) + 84) & 0x10) != 0
      && sub_22EFC0D04(v8))
    {
      return 0;
    }
    else
    {
      sub_22EFF605C((uint64_t)v6);
      v14 = v9;
      sub_22EB17F48(a1, v8, &v14, 1, 0, 0, 0, 0);
      v10 = v15;
      sub_22E90B2C0((uint64_t)a1, v6, v15);
      v12 = sub_22ED147E8((uint64_t)a1, v6, v10, v8, v11);
      v13 = v12;
      if (a3)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 <= 1)
          v13 = sub_22EB1922C((uint64_t)a1, (unsigned __int8 *)v12, 0);
      }
      *a2 = v13;
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F343028(unsigned int *a1, unint64_t *a2, int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v8;
  unsigned __int8 *v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32[24];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = a5;
  v34 = a6;
  v35 = a5;
  v13 = sub_22E9058F0((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
  v15 = v14;
  v16 = sub_22ED14F7C(a1, v13, 0, &v33);
  if (!v16)
    goto LABEL_9;
  v17 = v16;
  sub_22F0D5A50(*a2 & 0xFFFFFFFFFFFFFFFELL);
  v32[0] = v18;
  v19 = 1;
  if ((sub_22EB17F48(a1, v17, v32, 1, 0, 0, 0, 0) & 1) == 0)
  {
    if ((v15 & 0x100) == 0 && (*(_DWORD *)(v17 + 28) & 0x7Eu) - 54 <= 3 && !sub_22EFD642C((_QWORD *)v17))
    {
      if (a4)
      {
        sub_22EFF605C((uint64_t)v13);
        sub_22E8FCA40(a1, v26, 0xB8Fu, 0, (uint64_t)v32);
        LODWORD(v31) = 0;
        v27 = sub_22E8900C4((uint64_t)v32, (int *)&v31);
        sub_22F0D4E74((uint64_t)v13);
        *(_QWORD *)&v29 = v28;
        sub_22E8906A0(v27, (uint64_t *)&v29);
        sub_22E903BEC(v32);
        goto LABEL_11;
      }
      return 0;
    }
    v21 = sub_22ED147E8((uint64_t)a1, (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL), v33, v17, v20);
    v19 = v21;
    if (a3)
    {
      v19 = sub_22EB1B954((uint64_t)a1, (void *)(v21 & 0xFFFFFFFFFFFFFFFELL));
      if ((v19 & 1) != 0)
        goto LABEL_11;
    }
    if (v19 <= 1)
    {
LABEL_9:
      if (a4)
      {
        sub_22E8FCA40(a1, v8, a7, 0, (uint64_t)v32);
        v31 = *((_QWORD *)v13 + 2);
        v22 = sub_22E894538((uint64_t)v32, &v31);
        v23 = sub_22E8901B8(v22, &v34);
        v24 = sub_22E8906A0(v23, &v35);
        v29 = *(_OWORD *)(v13 + 40);
        v30 = sub_22F0AB0EC((unint64_t *)&v29);
        sub_22E8906A0(v24, (uint64_t *)&v30);
        sub_22E903BEC(v32);
        sub_22ED11AD0(a1, (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL), 0, 0);
LABEL_11:
        v19 = 1;
        goto LABEL_12;
      }
      return 0;
    }
  }
LABEL_12:
  *a2 = v19;
  return 1;
}

unsigned __int8 *sub_22F343250(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  unint64_t v39;
  int *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  _QWORD v45[3];
  __int128 v46;
  void *v47[2];
  uint64_t v48;
  _BYTE v49[8];
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v12 = a1[11] + 18648;
  v13 = *(_QWORD *)(*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 16) - 27 > 0xFFFFFFFD;
  else
    v14 = 0;
  if (!v14)
    v13 = sub_22F10CF48(v13);
  v15 = sub_22EFB1C68(v12, *(_QWORD *)(v13 + 24));
  if (!v15)
    return 0;
  v16 = (uint64_t)v15;
  v17 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  sub_22EFF605C(a4);
  v44 = (_DWORD *)a4;
  sub_22E5BBE34(v17, v18, *(_QWORD *)(a4 + 8), BYTE1(*(_DWORD *)a4) & 3, (*(_DWORD *)a4 >> 10) & 7, a4);
  v19 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
  sub_22EFF605C(a5);
  sub_22E5BBE34(v19, v20, *(_QWORD *)(a5 + 8), BYTE1(*(_DWORD *)a5) & 3, (*(_DWORD *)a5 >> 10) & 7, a5);
  v21 = 1;
  v22 = sub_22ED1767C(a1, a2, 14, a3, v17, v19, 1, 1, a6);
  if ((v22 & 1) == 0)
  {
    v21 = 1;
    v43 = v17;
    v23 = sub_22ED1767C(a1, a2, 10, a3, v17, v19, 1, 1, a6);
    if ((v23 & 1) == 0)
    {
      v24 = *(unsigned __int8 *)(v16 + 112);
      if (*(_BYTE *)(v16 + 112))
      {
        v42 = (_DWORD *)a5;
        v25 = 0;
      }
      else
      {
        v21 = 1;
        v25 = sub_22ED1767C(a1, a2, 10, a3, v19, v43, 1, 1, a6);
        if ((v25 & 1) != 0)
          return (unsigned __int8 *)v21;
        v42 = (_DWORD *)a5;
        v24 = *(unsigned __int8 *)(v16 + 112);
      }
      v26 = 0;
      v48 = v22;
      v49[0] = v24 != 2;
      v50 = v23;
      v51 = 2;
      v52 = v25;
      v53 = 3;
      v54 = 0;
      v55 = 4;
      if (v24)
        v27 = 2;
      else
        v27 = 3;
      v28 = v27 + 1;
      v29 = &v49[16 * v27];
      v21 = 1;
      v30 = v29;
      while (1)
      {
        v31 = *v30;
        v30 -= 16;
        v32 = sub_22F3AA5C4(v16, v31);
        if (!v32)
          break;
        v46 = 0u;
        *(_OWORD *)v47 = 0u;
        memset(v45, 0, sizeof(v45));
        v33 = sub_22EB24A3C(a1, &v46, v45, *((_QWORD *)v32 + 1), 0, 0, 0);
        if (HIDWORD(v47[1]))
          free(v47[0]);
        if ((v33 & 1) != 0)
          return (unsigned __int8 *)v21;
        v35 = v26 & 0xFFFFFFFFFFFFFFFELL;
        v34 = (v26 & 0xFFFFFFFFFFFFFFFELL) == 0;
        v26 = v33;
        if (!v34)
        {
          v26 = sub_22EB2F86C(a1, a2, a2, *((_QWORD *)v29 - 1) & 0xFFFFFFFFFFFFFFFELL, v33 & 0xFFFFFFFFFFFFFFFELL, v35);
          if ((v26 & 1) != 0)
            return (unsigned __int8 *)v21;
        }
        v29 = v30;
        v14 = v28-- <= 1;
        if (v14)
        {
          v36 = *(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL);
          v37 = (v36 >> 8) & 3;
          v38 = (v36 >> 10) & 7;
          if (a1[162] == a1[161])
            v39 = 0;
          else
            v39 = a1[162];
          v41 = sub_22F003090(a1[11], v44, v42, 9, *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8), v37, v38, a2, v39);
          *(_QWORD *)&v46 = v43;
          *((_QWORD *)&v46 + 1) = v19;
          v47[0] = (void *)(v26 & 0xFFFFFFFFFFFFFFFELL);
          return sub_22F3C2FFC(a1[11], (uint64_t)v41, (uint64_t)&v46, 3, 2u);
        }
      }
      return 0;
    }
  }
  return (unsigned __int8 *)v21;
}

uint64_t sub_22F3435D0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t result;
  _OWORD *v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;

  v10 = 0;
  result = sub_22ED22138(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F343668(a2, a3, v10);
    v7 = (_OWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = a3[1];
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_OWORD *sub_22F343668(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  int v5;
  unsigned int v6;
  _OWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22ED22214(a1, v6);
  v8 = 0;
  sub_22ED22138(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 0)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F343718(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t *v11;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    bzero(*(void **)a1, 16 * v6);
  while (a2 != a3)
  {
    v7 = *a2;
    v8 = a2[1];
    if (*(_OWORD *)a2 != 0 && (v7 != -1 || v8 != -1))
    {
      v11 = 0;
      sub_22ED22138(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v7, v8, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

BOOL sub_22F3437C0(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return sub_22F409CF8(v1);
}

void sub_22F3437F0(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  int *v5;

  v4 = *a1;
  if ((*a1 & 0x7FFFFFFF) == 2)
  {
    v5 = (int *)*((_QWORD *)a1 + 4);
    if (v5 != (int *)(a1 + 12))
    {
      free(v5);
      v4 = *a1;
    }
  }
  *a1 = v4 & 0x80000000;
  *((_QWORD *)a1 + 2) = *((_QWORD *)a1 + 2) & 0xFFFFFFFC04000000 | 0x20000000;
  *((_QWORD *)a1 + 3) = a2;
  *((_QWORD *)a1 + 4) = a2;
  *((_QWORD *)a1 + 5) = a2;
  *((_QWORD *)a1 + 6) = a2;
  *((_QWORD *)a1 + 7) = 0;
}

uint64_t sub_22F34385C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;

  if ((result & 4) != 0)
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 40);
    if (v2)
    {
      v4 = *(_DWORD *)(a2 + 8);
      if (v4 >= *(_DWORD *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v4 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v4) = v2;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

void sub_22F3438C4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 16 * v2), 16 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_22F34393C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F343950()
{
  return 0;
}

__n128 sub_22F343958@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB9028;
  *a2 = v4;
  return result;
}

uint64_t sub_22F3439B0(uint64_t a1, int *a2, int a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;

  v6 = *((_QWORD *)a2 + 1);
  v7 = *a2;
  *(_BYTE *)a1 = -126;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(130);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | v7 & 0x1F00;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = 0x100000000;
  if (!a3)
    v9 = 0;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFEFFFFFFFFLL | v9;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AAB1C(a1) & 0x1F) << 13);
  return a1;
}

_QWORD *sub_22F343A64(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  char *v12;
  int v13;
  char *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v5 = result;
  result[1] = 0;
  v6 = (char *)*result;
  v7 = *((unsigned int *)result + 4);
  if ((_DWORD)v7)
    result = memset((void *)*result, 255, 4 * v7);
  if (a2 != a3)
  {
    v8 = 0;
    v9 = v7 - 1;
    do
    {
      v10 = *a2;
      if (*a2 <= 0xFFFFFFFD)
      {
        v11 = (37 * v10) & v9;
        v12 = &v6[4 * v11];
        v13 = *(_DWORD *)v12;
        if (v10 != *(_DWORD *)v12)
        {
          v14 = 0;
          v15 = 1;
          while (v13 != -1)
          {
            if (v14)
              v16 = 0;
            else
              v16 = v13 == -2;
            if (v16)
              v14 = v12;
            v17 = v11 + v15++;
            v11 = v17 & v9;
            v12 = &v6[4 * (v17 & v9)];
            v13 = *(_DWORD *)v12;
            if (v10 == *(_DWORD *)v12)
              goto LABEL_7;
          }
          if (v14)
            v12 = v14;
        }
LABEL_7:
        *(_DWORD *)v12 = v10;
        *((_DWORD *)v5 + 2) = ++v8;
      }
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_22F343B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  *(_QWORD *)(v4 + 96) = v4 + 112;
  v5 = v4 + 96;
  *(_QWORD *)(v5 + 8) = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_22F24C77C(v5, a2 + 96);
  return a1;
}

uint64_t sub_22F343BB0(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  unint64_t i;
  uint64_t v5;
  int v6;

  if ((*(_BYTE *)(a1 + 104) & 4) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v2)
      v3 = *(unsigned __int8 *)(v2 + 16) - 27 > 0xFFFFFFFD;
    else
      v3 = 0;
    if (!v3)
      v2 = sub_22F10CF48(v2);
    for (i = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF0; ; i = sub_22F10ACF8(v5) & 0xFFFFFFFFFFFFFFF0)
    {
      v5 = *(_QWORD *)i;
      v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6 != 39 && (v6 & 0xFE) != 0x28)
        break;
    }
    if (*(_BYTE *)(v5 + 16) != 26)
      v5 = sub_22F10CF48(v5);
    return (unsigned __int16)(*(_QWORD *)(v5 + 16) >> 38);
  }
  else if (*(_QWORD *)a1)
  {
    return sub_22EFBAACC(*(_QWORD *)a1);
  }
  else
  {
    return *(unsigned int *)(a1 + 108);
  }
}

uint64_t sub_22F343C64(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10[2];

  v5 = (_DWORD *)(a1 + 704);
  sub_22F308404(v10, a2);
  result = (uint64_t)sub_22F308614(v5, v10);
  v7 = result;
  v8 = *(_DWORD *)(result + 24);
  if (v8 >= *(_DWORD *)(result + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 24);
  }
  v9 = 2;
  if (!a3)
    v9 = 0;
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8) = a2 & 0xFFFFFFFFFFFFFFFDLL | v9;
  ++*(_DWORD *)(v7 + 24);
  return result;
}

void sub_22F343D00(uint64_t a1)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a1 + 16);
  if (!v2)
    goto LABEL_6;
  if ((sub_22EFFFB48(v2) & 1) == 0)
  {
    v2 = *(unsigned __int8 **)(a1 + 16);
LABEL_6:
    sub_22F0D5A50((uint64_t)v2);
    return;
  }
  if (*(_QWORD *)(a1 + 40))
    sub_22F0AB0EC((unint64_t *)(a1 + 40));
}

uint64_t sub_22F343D54(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19[24];
  uint64_t v20;
  unsigned int v21[24];
  uint64_t v22;

  v22 = a3;
  if (*(_QWORD *)(a3 + 48))
  {
    sub_22E8FCA40(a1, a2, 0x121Bu, 0, (uint64_t)v21);
    v20 = *(_QWORD *)(a3 + 40);
    sub_22E894538((uint64_t)v21, &v20);
    sub_22E903BEC(v21);
    sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0x6Du, 0, (uint64_t)v19);
    sub_22E903BEC(v19);
  }
  else
  {
    v10 = sub_22EFB92BC(a3, a1[9]);
    if (v10 >= 3)
    {
      v11 = v10;
      v12 = sub_22F1E361C(*(_QWORD **)(a1[11] + 1992), a2);
      if (v12 == 3 || v12 == 0)
      {
        sub_22E8FCA40(a1, a2, 0x1B2Bu, 0, (uint64_t)v21);
        v14 = sub_22E9AEF84((uint64_t)v21, &v22);
        LODWORD(v20) = v11;
        sub_22E8900C4(v14, (int *)&v20);
        sub_22E903BEC(v21);
      }
    }
    v15 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
    v16 = v22;
    *(_BYTE *)v15 = -21;
    if (byte_255E04EB3)
    {
      v17 = sub_22F0D3748(235);
      ++*((_DWORD *)v17 + 2);
    }
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 16) = a5;
    *(_BYTE *)(v15 + 24) = 0;
    *(_DWORD *)(v15 + 4) = a2;
    v18 = v22;
    *(_QWORD *)(v22 + 48) = v15;
    if (*(_DWORD *)(v18 + 76) == *(_DWORD *)(v18 + 24))
    {
      *(_DWORD *)(v18 + 76) = a2;
      if (!*(_QWORD *)(v18 + 64))
        *(_DWORD *)(v18 + 24) = a2;
    }
    return v15;
  }
  return a5;
}

unsigned __int8 *sub_22F343EEC(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];

  v3 = a3;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = 0x100000000;
  sub_22ED52FCC(a1, a3, (uint64_t)a2, (uint64_t)&v7);
  if ((_DWORD)v8)
    v3 = sub_22ED2C6AC(a1, *a2, (char **)v7, v8, (uint64_t)v3);
  if (v7 != v9)
    free(v7);
  return v3;
}

uint64_t sub_22F343FAC(uint64_t a1, int a2, int a3, uint64_t a4, int a5, _BYTE *a6)
{
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  _QWORD v17[2];

  if (*(_BYTE *)(a4 + 16))
    return 1;
  v11 = *(_QWORD *)a4;
  v12 = *(_DWORD **)(a4 + 8);
  sub_22ED30F28((unsigned int *)a1, v12);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 104);
    sub_22EFF605C((uint64_t)v12);
    if (sub_22F1CF68C(*(_QWORD *)(v13 + 32), 0x18CFu, v14, v13) != 1)
    {
      v17[0] = *(_QWORD *)(a1 + 88);
      v17[1] = a1;
      sub_22ED2DC2C((uint64_t)v17, v12);
    }
  }
  if (*a6 == 19)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
    *(_BYTE *)(*(_QWORD *)(v16 + 352) + 2 * *(_QWORD *)(v16 + 360) - 2) = 1;
  }
  return sub_22F3F272C(*(_QWORD *)(a1 + 88), v11, (uint64_t)v12, (uint64_t)a6, a2, a3, a5);
}

uint64_t sub_22F3440A8(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unsigned __int8 *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD v21[2];

  sub_22ED30F28((unsigned int *)a1, a6);
  v13 = sub_22EB52F30(a1, a2, a6, 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EBCF22C(a1, v13 & 0xFFFFFFFFFFFFFFFELL, a2, 0, 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = (_DWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  if ((v14 & 0xFFFFFFFFFFFFFFFELL) != 0 && (**(_WORD **)(a1 + 72) & 0x101) == 0)
  {
    v19 = *(_QWORD *)(a1 + 104);
    sub_22EFF605C(v14 & 0xFFFFFFFFFFFFFFFELL);
    if (sub_22F1CF68C(*(_QWORD *)(v19 + 32), 0x18CFu, v20, v19) != 1)
    {
      v21[0] = *(_QWORD *)(a1 + 88);
      v21[1] = a1;
      sub_22ED2DC2C((uint64_t)v21, v15);
    }
  }
  v16 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  *(_BYTE *)v16 = 13;
  if (byte_255E04EB3)
  {
    v18 = sub_22F0D3748(13);
    ++*((_DWORD *)v18 + 2);
  }
  *(_DWORD *)(v16 + 24) = a4;
  *(_DWORD *)(v16 + 28) = a7;
  *(_QWORD *)(v16 + 8) = a3;
  *(_QWORD *)(v16 + 16) = v15;
  *(_DWORD *)(v16 + 4) = a2;
  return v16;
}

unint64_t sub_22F3441F0(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v3 = sub_22EB19A28(a1, a2);
  if ((v3 & 1) != 0)
    return 1;
  v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v3 & 0xFFFFFFFFFFFFFFFELL);
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = sub_22EBCF22C(a1, v4, v6, 0, 0);
  if ((v7 & 1) != 0)
    return 1;
  else
    return v7 & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sub_22F344258(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v8 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v8 - 8);
    *(_DWORD *)(v9 + 8) |= 0x10u;
  }
  sub_22EFC9100(a4, *(_QWORD *)(a1 + 88));
  v10 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_BYTE *)v10 = 15;
  if (byte_255E04EB3)
  {
    v11 = sub_22F0D3748(15);
    ++*((_DWORD *)v11 + 2);
  }
  *(_QWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 16) = a3;
  *(_DWORD *)(v10 + 4) = a2;
  return v10;
}

uint64_t sub_22F344308(unsigned int *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  unsigned int v10[24];

  v5 = *(_QWORD *)(a3 + 48);
  if (!v5)
  {
    v7 = 3103;
LABEL_8:
    sub_22E8FCA40(a1, a2, v7, 0, (uint64_t)v10);
    sub_22E903BEC(v10);
    return 1;
  }
  if ((*(_BYTE *)(v5 + 11) & 2) != 0)
  {
    v7 = 3102;
    goto LABEL_8;
  }
  sub_22ED3451C(a1, a2, v5);
  result = sub_22E3CD3D4(*((_QWORD *)a1 + 11) + 2032, 8, 3);
  *(_BYTE *)result = 9;
  if (byte_255E04EB3)
  {
    v8 = result;
    v9 = sub_22F0D3748(9);
    result = v8;
    ++*((_DWORD *)v9 + 2);
  }
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_22F3443DC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5[2];
  _QWORD v6[2];

  v1 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFFFF8);
  if ((a1 & 4) != 0)
    v1 = (unint64_t *)v1[4];
  v5[0] = *v1;
  v5[1] = (unint64_t)(v1 + 1);
  v6[0] = sub_22F259410(v5);
  v6[1] = v2;
  v3 = *(_QWORD *)(v6[0] + 24);
  sub_22E47EE80(v6);
  return v3;
}

unint64_t sub_22F344434(unint64_t a1)
{
  if (a1
    && ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x38
     || (*(_DWORD *)(a1 + 28) & 0x7F) == 0x1D
     && (a1 = *(_QWORD *)(a1 + 48)) != 0
     && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x38))
  {
    return sub_22F34510C(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F344474(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;

  v5 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_BYTE *)v5 = 87;
  if (byte_255E04EB3)
  {
    v6 = sub_22F0D3748(87);
    ++*((_DWORD *)v6 + 2);
  }
  *(_DWORD *)(v5 + 8) = a2;
  *(_QWORD *)(v5 + 16) = a3;
  return v5;
}

uint64_t sub_22F3444EC(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v12;
  _DWORD *v13;
  int v15;
  unsigned int v16[24];

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x200000000000) == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0xFF9u, 0, (uint64_t)v16);
    sub_22F2F30F4((uint64_t)v16, (uint64_t)"@try");
    sub_22E903BEC(v16);
  }
  v12 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v12)
    v13 = *(_DWORD **)(*(_QWORD *)(a1 + 1896) + 8 * v12 - 8);
  else
    v13 = 0;
  if (v13[7])
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0xF5Du, 0, (uint64_t)v16);
    v15 = 1;
    sub_22E8900C4((uint64_t)v16, &v15);
    sub_22E903BEC(v16);
    sub_22E8FCA40((_QWORD *)a1, v13[7], 0x1575u, 0, (uint64_t)v16);
    sub_22F2F30F4((uint64_t)v16, (uint64_t)"'__try'");
    sub_22E903BEC(v16);
  }
  v13[2] |= 8u;
  v13[5] = a2;
  v13[6] = 1;
  return sub_22F3F3110(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6);
}

uint64_t sub_22F344640(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v9[24];

  if ((*(_QWORD *)(a1[9] + 8) & 0x200000000000) == 0)
  {
    sub_22E8FCA40(a1, a2, 0xFF9u, 0, (uint64_t)v9);
    sub_22F2F30F4((uint64_t)v9, (uint64_t)"@throw");
    sub_22E903BEC(v9);
  }
  if (a3)
    return sub_22ED36B94(a1, a2, a3);
  if (a4)
  {
    while ((*((_BYTE *)a4 + 9) & 4) == 0)
    {
      a4 = (uint64_t *)*a4;
      if (!a4)
        goto LABEL_8;
    }
    return sub_22ED36B94(a1, a2, a3);
  }
LABEL_8:
  sub_22E8FCA40(a1, a2, 0x123Fu, 0, (uint64_t)v9);
  sub_22E903BEC(v9);
  return 1;
}

uint64_t sub_22F344708(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v7 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v7 - 8);
    *(_DWORD *)(v8 + 8) |= 8u;
  }
  v9 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  *(_BYTE *)v9 = 88;
  if (byte_255E04EB3)
  {
    v10 = sub_22F0D3748(88);
    ++*((_DWORD *)v10 + 2);
  }
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_DWORD *)(v9 + 8) = a2;
  return v9;
}

uint64_t sub_22F3447A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;

  v7 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  *(_BYTE *)v7 = 4;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(4);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  return v7;
}

uint64_t sub_22F344820(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v5 - 8);
    *(_DWORD *)(v6 + 8) |= 8u;
  }
  v7 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  *(_BYTE *)v7 = 91;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(91);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  return v7;
}

uint64_t sub_22F3448B8(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unsigned int v10[24];
  uint64_t v11;

  v11 = *(_QWORD *)(a3 + 8);
  if (sub_22E479BE0(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0))
    || (*(_BYTE *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    return sub_22F3F2948(a1[11], a2, a3, a4);
  }
  sub_22EFF605C(a3);
  sub_22E8FCA40(a1, v8, 0xD27u, 0, (uint64_t)v10);
  sub_22E8901B8((uint64_t)v10, &v11);
  sub_22E903BEC(v10);
  return 1;
}

uint64_t sub_22F34496C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 12888);
  v3 = *(_DWORD *)(result + 256);
  if (v3 >= *(_DWORD *)(result + 260))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(v1 + 256);
  }
  *(_QWORD *)(*(_QWORD *)(v1 + 248) + 8 * v3) = v2;
  ++*(_DWORD *)(v1 + 256);
  return result;
}

uint64_t sub_22F3449CC(uint64_t result)
{
  --*(_DWORD *)(result + 256);
  return result;
}

uint64_t sub_22F3449DC(uint64_t a1, int a2, uint64_t a3)
{
  --*(_DWORD *)(a1 + 256);
  return sub_22F3F29BC(*(_QWORD *)(a1 + 88), a2, a3);
}

uint64_t sub_22F3449F4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  char *v7;
  unsigned int v8[24];

  if (a3)
  {
    while ((*(_BYTE *)(a3 + 10) & 8) == 0)
    {
      a3 = *(_QWORD *)a3;
      if (!a3)
        goto LABEL_4;
    }
    sub_22ED3451C((unsigned int *)a1, a2, a3);
    v5 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 16, 3);
    *(_BYTE *)v5 = 96;
    if (byte_255E04EB3)
    {
      v7 = sub_22F0D3748(96);
      ++*((_DWORD *)v7 + 2);
    }
    *(_DWORD *)(v5 + 8) = a2;
  }
  else
  {
LABEL_4:
    sub_22E8FCA40((_QWORD *)a1, a2, 0xF73u, 0, (uint64_t)v8);
    sub_22E903BEC(v8);
    return 1;
  }
  return v5;
}

uint64_t sub_22F344AB0(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  __int128 v16;
  uint64_t v17;

  v13 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
  v16 = *a6;
  v17 = *((_QWORD *)a6 + 2);
  *(_BYTE *)v13 = 18;
  if (byte_255E04EB3)
  {
    v14 = sub_22F0D3748(18);
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)(v13 + 8) = a2;
  *(_BYTE *)(v13 + 12) = a3;
  *(_QWORD *)(v13 + 16) = a4;
  *(_QWORD *)(v13 + 24) = a5;
  *(_OWORD *)(v13 + 32) = v16;
  *(_QWORD *)(v13 + 48) = v17;
  *(_QWORD *)(v13 + 56) = a7;
  return v13;
}

uint64_t sub_22F344B74(uint64_t a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;

  v11 = sub_22E8ACE94(a4, *(_QWORD *)(a1 + 88));
  v13 = v12;
  sub_22EA12DB4(a1, a5);
  return sub_22F344AB0(a1, a2, a3, v11, v13, &v15, a6);
}

unint64_t sub_22F344C04(_QWORD *a1, unint64_t *a2, int a3, unsigned int a4)
{
  unint64_t v8;
  __int16 v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v8 = (unint64_t)(a1 + 27);
LABEL_2:
  v8 = *(_QWORD *)v8;
  while (1)
  {
    v9 = *(_WORD *)(v8 + 8);
    v10 = v9 & 0x7F;
    v11 = v10 > 0x18 || ((1 << (v9 & 0x7F)) & 0x1000006) == 0;
    if (!v11 || v10 - 52 < 6)
      break;
    v12 = (v9 & 0x7Eu) - 34 < 4 || v10 == 16;
    if (v12 || v10 == 83)
      break;
    v13 = *(_QWORD *)(sub_22EFCAD5C(v8) + 16);
    v8 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      goto LABEL_2;
  }
  v14 = a1[11];
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
    v15 = sub_22EFCF6C0(v14, 0, v8, a3, a3, 0, 0, 0);
  else
    v15 = sub_22F3ACBB4(v14, 0, v8, a3, a3, 0, 0);
  v16 = v15;
  sub_22F3ACD50(v15);
  sub_22EFCCFA0(v8, v16);
  *(_DWORD *)(v16 + 28) |= 0x200u;
  sub_22EFC3340(v16);
  v17 = sub_22F3AD6E8(a1[11], a1[27], a4);
  *a2 = v17;
  sub_22EFCCFA0(v8, v17);
  return v16;
}

uint64_t sub_22F344D4C(_QWORD *a1, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  v9 = sub_22F344C04(a1, (unint64_t *)&v21, a2, a5);
  v10 = v21;
  if (v21)
    v11 = v21 + 40;
  else
    v11 = 0;
  v12 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "__context", 9uLL);
  v13 = a1[11];
  v14 = *(_QWORD *)(v9 + 48);
  if (v14)
  {
    v15 = v14 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v20 = a1[11];
    v15 = sub_22EF6462C(v13, v9);
    v13 = v20;
  }
  v16 = sub_22EF5B848(v13, v15, 0);
  v17 = sub_22EFC4364(a1[11], v11, a2, v12, v16, 4);
  sub_22EFCCFA0(v11, v17);
  *(_DWORD *)(v10 + 76) = 0;
  *(_QWORD *)(v10 + 88) = v17;
  sub_22E905FE0((uint64_t)a1, a3, v10, v9, a4, 0);
  if (a3)
  {
    a1[27] = v11;
    v18 = (uint64_t *)(a3 + 360);
  }
  else
  {
    v18 = a1 + 27;
  }
  *v18 = v11;
  return sub_22EB48CC8((uint64_t)a1, 6, 0, 3);
}

_BYTE *sub_22F344E80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  _BYTE *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  sub_22EB48DCC(a1);
  v2 = sub_22EB48E64(a1);
  *(_QWORD *)(a1 + 216) = sub_22EA044C0(v2, *(_QWORD *)(a1 + 216));
  sub_22E904AD8(a1, 0, 0, 0, &v9);
  v3 = *(_QWORD *)(v9 + 1432);
  sub_22EFC77E8(v3, 1);
  v4 = sub_22EFC3B90(v3);
  v11 = v13;
  v12 = 0x400000000;
  sub_22F271D38((uint64_t)&v11, v4, 0);
  v5 = *(_DWORD *)(v3 + 24);
  v7 = 0;
  v8 = 0;
  sub_22EA39224(a1, 0, v5, v3, (uint64_t *)v11, v12, 0, 0, (uint64_t)&v7);
  sub_22E80F94C(&v8);
  if (v11 != v13)
    free(v11);
  result = (_BYTE *)v9;
  v9 = 0;
  if (result)
  {
    if ((result[8] & 7) != 0 || *(_QWORD *)(v10 + 1888))
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
    else
      *(_QWORD *)(v10 + 1888) = result;
  }
  return result;
}

uint64_t sub_22F344FD0(uint64_t a1, const void **a2)
{
  uint64_t result;
  char v5;
  const void *v6;
  unsigned int v7;

  result = sub_22E3BA850(a1, *a2);
  if (v5)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(a1 + 104);
    if (v7 >= *(_DWORD *)(a1 + 108))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 104);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 104);
  }
  return result;
}

uint64_t sub_22F345040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  if (*(_DWORD *)(a2 + 16))
    sub_22F24C77C(v4, a2 + 8);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 163) = 0;
  return a1;
}

unint64_t sub_22F34510C(unint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (result)
  {
    v1 = *(_QWORD *)(sub_22EFCAD5C(result + 72) + 16);
    v2 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
    if ((v1 & 4) != 0)
      v2 = (_QWORD *)*v2;
    if (v2)
      v3 = v2 - 8;
    else
      v3 = 0;
    v4 = v3[16];
    if (v4)
      return ((unint64_t)(*(unsigned __int8 *)(v4 + 10) << 16) >> 20) & 1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_22F345160(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *((_DWORD *)v2 - 4);
    v2 -= 3;
    *(_QWORD *)(a1 + 16) = v2;
    if (v4 >= 0x41)
    {
      if (*v2)
      {
        MEMORY[0x2348A0E84](*v2, 0x1000C8000313F17);
        v2 = *(_QWORD **)(a1 + 16);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22F3451D0(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F345240(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F345240(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)result;
    v5 = 24 * v2;
    do
    {
      v6 = a2 + v3;
      *(_DWORD *)(v6 + 8) = *(_DWORD *)(v4 + v3 + 8);
      *(_QWORD *)v6 = *(_QWORD *)(v4 + v3);
      *(_DWORD *)(v4 + v3 + 8) = 0;
      *(_BYTE *)(v6 + 12) = *(_BYTE *)(v4 + v3 + 12);
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + v3 + 16);
      v3 += 24;
    }
    while (v5 != v3);
    v7 = *(unsigned int *)(result + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)result;
      v9 = 24 * v7;
      do
      {
        if (*(_DWORD *)(v8 + v9 - 16) >= 0x41u)
        {
          result = *(_QWORD *)(v8 + v9 - 24);
          if (result)
          {
            v10 = v9;
            v11 = v8;
            result = MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
            v9 = v10;
            v8 = v11;
          }
        }
        v9 -= 24;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_22F3452FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *((_DWORD *)v2 - 2);
    v2 -= 2;
    *(_QWORD *)(a1 + 16) = v2;
    if (v4 >= 0x41)
    {
      if (*v2)
      {
        MEMORY[0x2348A0E84](*v2, 0x1000C8000313F17);
        v2 = *(_QWORD **)(a1 + 16);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22F34536C(uint64_t a1, llvm::APInt *a2)
{
  int v4;
  int *v5;

  if (*(_DWORD *)(a1 + 32) || *(_QWORD *)(a1 + 72))
  {
    v4 = *((_DWORD *)a2 + 2);
    if (v4 - sub_22E99C40C(a2) + 1 > 0x20)
      return 0;
    if (*((_DWORD *)a2 + 2) >= 0x41u)
      v5 = *(int **)a2;
    else
      v5 = (int *)a2;
    return sub_22ED52124(a1 + 24, *v5);
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    if ((sub_22ED521B0(a2, *(int *)(a1 + 8)) & 1) != 0)
      return 0;
    return !sub_22ED52254(a2, *(int *)(a1 + 12));
  }
  else
  {
    return 1;
  }
}

unint64_t sub_22F345420(unint64_t result, __int128 *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    result = sub_22E5BBF6C(result, (unint64_t)&v7);
    v4 = *(_QWORD *)v2 + 24 * *(unsigned int *)(v2 + 8);
    v5 = *(_OWORD *)result;
    v6 = *(_QWORD *)(result + 16);
  }
  else
  {
    v4 = *(_QWORD *)result + 24 * v3;
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

BOOL sub_22F3454B0(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 3)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v5 << 16) & 0x780000) != 0)
    v6 = ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF;
  else
    v6 = sub_22F1BFAD0(a1);
  return v6 == 4;
}

uint64_t sub_22F345534()
{
  return 1;
}

unsigned int *sub_22F34553C(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v7[24];
  uint64_t v8;
  unsigned int v9[24];

  if ((**(_QWORD **)(a1 + 72) & 0x10) != 0)
    v5 = 5362;
  else
    v5 = 4844;
  sub_22E8FCA40((_QWORD *)a1, a2, v5, 0, (uint64_t)v9);
  v8 = *(_QWORD *)(a3 + 40);
  sub_22E894538((uint64_t)v9, &v8);
  sub_22E903BEC(v9);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a3 + 24), 0x17E2u, 0, (uint64_t)v7);
  return sub_22E903BEC(v7);
}

_QWORD *sub_22F3455C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *result;

  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  result = sub_22F0AB560((_QWORD *)(a3 + 24), a1 + 24);
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a3 + 52) = a2;
  return result;
}

uint64_t sub_22F34561C(uint64_t a1, unint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  __n128 v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  __int128 v40;
  void *v41[2];
  void *v42;
  uint64_t v43;
  _BYTE v44[256];
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    sub_22F0F043C(*(_QWORD *)(a1 + 88), a6);
    v32 = v18;
    v16 = *(_QWORD *)(a7 + 48);
    v36 = *a4;
    v37 = a4[1].n128_u64[0];
    v17 = *(_QWORD *)(a6 + 272);
  }
  else
  {
    v32 = 0;
    v16 = *(_QWORD *)(a7 + 48);
    v36 = *a4;
    v37 = a4[1].n128_u64[0];
    v17 = 0;
  }
  v33 = v17;
  v19 = *(_DWORD *)(a7 + 24);
  v42 = v44;
  v43 = 0x800000000;
  v45 = 0;
  v38 = 1;
  v39 = v16 & 0xFFFFFFFFFFFFFFF0;
  sub_22EDC0108(a1, (uint64_t)&v38, v19, (uint64_t)&v40);
  v20 = (_OWORD *)sub_22E78DF7C((uint64_t)&v42, (unint64_t)&v40, 1);
  v21 = (char *)v42 + 32 * v43;
  v22 = v20[1];
  *v21 = *v20;
  v21[1] = v22;
  LODWORD(v43) = v43 + 1;
  v45 = v33;
  if (a6)
  {
    v23 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v23)
    {
      v24 = *(_QWORD *)a6;
      v25 = 32 * v23;
      do
      {
        v26 = (_OWORD *)sub_22E78DF7C((uint64_t)&v42, v24, 1);
        v27 = (char *)v42 + 32 * v43;
        v28 = v26[1];
        *v27 = *v26;
        v27[1] = v28;
        LODWORD(v43) = v43 + 1;
        v24 += 32;
        v25 -= 32;
      }
      while (v25);
    }
  }
  v40 = 0u;
  *(_OWORD *)v41 = 0u;
  sub_22E8ACE30((uint64_t)&v40, a2, a3);
  v29 = sub_22F345EB4(a1, (unsigned int *)&v40, 0, (__int128 *)&v36, a5, a5, (uint64_t)&v42);
  v30 = v29;
  if ((v29 & 1) == 0 && a8)
    v30 = sub_22F34AF2C(a1, 0, 0, v29 & 0xFFFFFFFFFFFFFFFELL, 19, a8, 0, 0, 0);
  if (HIDWORD(v41[1]))
    free(v41[0]);
  if (v42 != v44)
    free(v42);
  if ((v30 & 1) == 0)
  {
    v34 = *a4;
    v35 = a4[1].n128_u64[0];
    sub_22F3B8930(a7, a2, a3, &v34, a5, a5, v32, v30 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v30 & 1;
}

uint64_t sub_22F345894(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *v37;
  void *v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  void *v51[2];
  void *v52;
  uint64_t v53;
  _BYTE v54[256];
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 48) == a2 && (*(_BYTE *)(a2 + 18) & 0x18) == 0)
  {
    v18 = sub_22F32D524((uint64_t)a1, a4, a2, 0, *(_DWORD *)(a4 + 24), 0);
    v14 = 1;
    if (v18)
    {
      v19 = (unsigned __int8 *)v18;
      v20 = *(_QWORD *)(a3 + 16);
      v21 = *(_QWORD *)(a2 + 40);
      v22 = *(_DWORD *)(a3 + 28);
      v44 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)&v45 = *(_QWORD *)(v21 + 40);
      DWORD2(v45) = v22;
      sub_22EFC6D6C((uint64_t)&v46, v45);
      v23 = *(_QWORD *)(a3 + 40);
      v29 = sub_22EE8C8BC((uint64_t)a1, v19, 1, v24, v25, v26, v27, v28);
      v30 = *(_DWORD *)(a4 + 24);
      v52 = v54;
      v53 = 0x800000000;
      v55 = 0;
      LODWORD(v48) = 1;
      v49 = (uint64_t *)v29;
      sub_22EDC0108((uint64_t)a1, (uint64_t)&v48, v30, (uint64_t)&v50);
      v31 = (_OWORD *)sub_22E78DF7C((uint64_t)&v52, (unint64_t)&v50, 1);
      v32 = (char *)v52 + 32 * v53;
      v33 = v31[1];
      *v32 = *v31;
      v32[1] = v33;
      LODWORD(v53) = v53 + 1;
      v55 = v23;
      v34 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v34)
      {
        v35 = a2 + 48;
        v36 = (void **)(a3 + 56);
        do
        {
          v37 = *v36++;
          v38 = *(void **)(v35 + 16);
          v50 = *(_OWORD *)v35;
          v51[0] = v38;
          v51[1] = v37;
          v39 = (_OWORD *)sub_22E78DF7C((uint64_t)&v52, (unint64_t)&v50, 1);
          v40 = (char *)v52 + 32 * v53;
          v41 = v39[1];
          *v40 = *v39;
          v40[1] = v41;
          LODWORD(v53) = v53 + 1;
          v35 += 24;
          --v34;
        }
        while (v34);
      }
      v50 = 0u;
      *(_OWORD *)v51 = 0u;
      sub_22E8ACE30((uint64_t)&v50, v44, v20);
      v42 = sub_22F345EB4((uint64_t)a1, (unsigned int *)&v50, 0, &v45, v21, v21, (uint64_t)&v52);
      v43 = v42;
      if ((v42 & 1) == 0 && a5)
        v43 = sub_22F34AF2C((uint64_t)a1, 0, 0, v42 & 0xFFFFFFFFFFFFFFFELL, 19, a5, 0, 0, 0);
      if (HIDWORD(v51[1]))
        free(v51[0]);
      if (v52 != v54)
        free(v52);
      v14 = 1;
      if (v43 >= 2 && (v43 & 1) == 0)
      {
        v14 = 0;
        *(_QWORD *)(a4 + 16 * *(unsigned int *)(a4 + 84) + 88) = v43 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 56);
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0)
      v9 = (_QWORD *)v9[4];
    *(_QWORD *)&v50 = *v9;
    *((_QWORD *)&v50 + 1) = v9 + 1;
    v10 = sub_22F116708((uint64_t *)&v50);
    sub_22E8FCA40(a1, v10, 0x13D6u, 0, (uint64_t)&v52);
    v11 = *(_QWORD *)(a4 + 56);
    v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 4) != 0)
      v12 = (uint64_t *)v12[4];
    v48 = *v12;
    v49 = v12 + 1;
    v13 = sub_22F116708(&v48);
    v47 = v13 | (sub_22F1167E8(&v48) << 32);
    sub_22E8906A0((uint64_t)&v52, (uint64_t *)&v47);
    sub_22E903BEC((unsigned int *)&v52);
    return 1;
  }
  return v14;
}

uint64_t sub_22F345BAC(_QWORD *a1, uint64_t *a2, unint64_t *a3, _DWORD *a4, int a5, unint64_t *a6)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;

  v12 = *a3;
  v8 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) & 3) != 1)
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 8);
  if ((v9 & 7) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  *a6 = v10;
  result = sub_22ED61690(a1, a2, &v12, a5, 0);
  if ((result & 1) == 0)
  {
    *a3 = v12;
    *a4 = 2;
  }
  return result;
}

void ***sub_22F345C28(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int32 v9;
  int8x8_t *v10;
  uint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  int v15;
  BOOL v17;
  unsigned int v18[24];
  unint64_t v19;

  v4 = *(_QWORD *)(a2 + 56);
  sub_22E99E680(&v19, *(_DWORD *)(v4 + 12) & 0x1FFFFFFF, 0);
  sub_22F347DFC(*((_QWORD *)a1 + 11), a2, (void ***)&v19);
  if ((*(_DWORD *)(v4 + 12) & 0x1FFFFFFF) != 0)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v4 + 16 + 8 * v5);
      if ((sub_22EFC78D8(v6) & 1) != 0 || sub_22EC624F8((uint64_t)a1, v6, 0))
        sub_22E54C570(&v19, v5);
      ++v5;
    }
    while (v5 != (*(_DWORD *)(v4 + 12) & 0x1FFFFFFF));
  }
  if ((sub_22E5CE22C(&v19) & 1) == 0)
  {
    if ((v19 & 1) != 0)
    {
      v7 = v19 >> 58;
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)((v19 >> 1) & ~(-1 << (v19 >> 58))));
      v14.i16[0] = vaddlv_u8(v14);
      v9 = v14.i32[0];
    }
    else
    {
      LODWORD(v7) = *(_DWORD *)(v19 + 64);
      v8 = *(unsigned int *)(v19 + 8);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *(int8x8_t **)v19;
        v11 = 8 * v8;
        do
        {
          v12 = *v10++;
          v13 = (uint8x8_t)vcnt_s8(v12);
          v13.i16[0] = vaddlv_u8(v13);
          v9 += v13.i32[0];
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
        v9 = 0;
      }
    }
    v15 = v7 - v9;
    sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0xC7Cu, 0, (uint64_t)v18);
    v17 = (v15 & 0xFFFFFFFE) != 0;
    sub_22E894E38((uint64_t)v18, (unsigned __int8 *)&v17);
    sub_22E903BEC(v18);
    sub_22ED64554(a1, v4, &v19);
  }
  return sub_22E54C5D0((void ***)&v19);
}

uint64_t sub_22F345DAC(unint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 120);
  if (!result)
  {
    v5 = sub_22EFC72E8(a1);
    result = sub_22E3CD3D4(v5 + 2032, 16, 3);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(a1 + 120) = result;
  }
  *(_DWORD *)(result + 12) = a2;
  return result;
}

unsigned int *sub_22F345DF8(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  unint64_t v8;
  unsigned int v9[24];
  uint64_t v10;

  v10 = a2;
  sub_22E8FCA40(a1, a3, 0x12DCu, 0, (uint64_t)v9);
  LODWORD(v8) = sub_22F31CFF0((uint64_t)a1, a2);
  v5 = sub_22E8900C4((uint64_t)v9, (int *)&v8);
  sub_22F30C54C(v5, &v10);
  sub_22E903BEC(v9);
  result = (unsigned int *)sub_22F0F08CC(&v10);
  if (result)
  {
    v7 = result;
    sub_22E8FCA40(a1, result[6], 0x17D6u, 0, (uint64_t)v9);
    v8 = **((unsigned int **)v7 + 7) | ((unint64_t)*(unsigned int *)(*((_QWORD *)v7 + 7) + 8) << 32);
    sub_22E8906A0((uint64_t)v9, (uint64_t *)&v8);
    return sub_22E903BEC(v9);
  }
  return result;
}

uint64_t sub_22F345EB4(uint64_t a1, unsigned int *a2, int a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  void *v36;
  uint64_t v37;
  _BYTE v38[104];
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  __int128 *v42;
  uint64_t v43;
  _QWORD v44[14];

  v44[12] = *MEMORY[0x24BDAC8D0];
  v42 = (__int128 *)v44;
  v43 = 0x400000000;
  if ((sub_22ED61988(a1, a6, *((unsigned int *)a4 + 2), a7, 0, &v42, 0, 0) & 1) != 0)
  {
    v14 = 1;
    goto LABEL_3;
  }
  v30 = a3;
  v31 = a5;
  v35[0] = 0;
  v35[1] = 0;
  v36 = v38;
  v37 = 0x400000000;
  v38[96] = 0;
  v39 = v41;
  v40 = 0x400000000;
  v16 = v42;
  if ((_DWORD)v43)
  {
    v17 = 24 * v43;
    while ((sub_22F0EEB00((uint64_t)v16) & 4) == 0)
    {
      v16 = (__int128 *)((char *)v16 + 24);
      v17 -= 24;
      if (!v17)
      {
        v16 = v42;
        v18 = v43;
        goto LABEL_12;
      }
    }
    v20 = 1;
  }
  else
  {
    v18 = 0;
LABEL_12:
    v34 = *(_QWORD *)(a6 + 64);
    if (*((_QWORD *)a2 + 1))
      v19 = a2;
    else
      v19 = (unsigned int *)a4 + 2;
    v14 = 1;
    if ((sub_22E9F3578(a1, a6, &v34, 1, v16, v18, *v19 | ((unint64_t)*(unsigned int *)(a7 + 276) << 32), v35) & 1) != 0)
      goto LABEL_22;
    v20 = 0;
  }
  v21 = *(_QWORD *)(a1 + 88);
  v23 = *((_QWORD *)a2 + 1);
  v22 = (uint64_t *)(a2 + 2);
  if (v23)
  {
    v24 = sub_22F0ABC50(v22, *(_QWORD *)(a1 + 88));
    v26 = v25;
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  v27 = *(_QWORD *)(a1 + 88);
  v32 = *a4;
  v33 = *((_QWORD *)a4 + 2);
  sub_22F0F043C(v27, a7);
  v29 = v35;
  if (v20)
    v29 = 0;
  v14 = sub_22F3C3E30(v21, v24, v26, v30, (uint64_t)&v32, v31, a6, v28, v42, v43, (uint64_t)v29);
LABEL_22:
  if (v39 != v41)
    free(v39);
  if (v36 != v38)
    free(v36);
LABEL_3:
  if (v42 != (__int128 *)v44)
    free(v42);
  return v14;
}

unsigned int *sub_22F346110(unsigned int *result, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 *v12;
  unint64_t v13;
  __int128 v14;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 24 * v8 == a2)
    return (unsigned int *)sub_22F25DE94((uint64_t)result, __src, a4);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v7) >> 3);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a4 - __src) >> 3);
  if (v10 + v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v11 = (char *)(v7 + 24 * v9);
  v12 = (__int128 *)(v7 + 24 * v8);
  v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v11) >> 3);
  if (v13 >= v10)
  {
    result = (unsigned int *)sub_22F2A390C((uint64_t)v6, (__int128 *)((char *)v12 - 8 * ((a4 - (_BYTE *)v5) >> 3)), v12);
    if ((char *)v12 - 8 * ((a4 - (_BYTE *)v5) >> 3) != v11)
      result = (unsigned int *)memmove(&v11[8 * ((a4 - (_BYTE *)v5) >> 3)], v11, (char *)v12 - 8 * ((a4 - (_BYTE *)v5) >> 3) - v11);
    if (v5 != (_QWORD *)a4)
      return (unsigned int *)memmove(v11, v5, a4 - (_BYTE *)v5);
  }
  else
  {
    v6[2] = v8 + v10;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 24 * (v8 + v10) - 8 * (((char *)v12 - v11) >> 3)), v11, (char *)v12 - v11);
      do
      {
        v14 = *(_OWORD *)v5;
        *((_QWORD *)v11 + 2) = v5[2];
        *(_OWORD *)v11 = v14;
        v11 += 24;
        v5 += 3;
        --v13;
      }
      while (v13);
    }
    if (v5 != (_QWORD *)a4)
      return (unsigned int *)memcpy(v12, v5, a4 - (_BYTE *)v5);
  }
  return result;
}

uint64_t sub_22F3462D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  void *v43[2];
  unint64_t v44;

  v5 = a3;
  v44 = a3;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 <= 3)
  {
    v8 = sub_22EF5F824(*(_QWORD *)(a1 + 88), a3);
LABEL_3:
    v5 = v8;
    v44 = v8;
    goto LABEL_4;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 <= 1)
  {
    v8 = sub_22EF5B848(*(_QWORD *)(a1 + 88), a3, 0);
    goto LABEL_3;
  }
LABEL_4:
  if (*(_DWORD *)a2 == 3)
  {
    v9 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 16, 3);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16824);
    *(_BYTE *)v9 = 0x80;
    if (byte_255E04EB3)
    {
      v11 = sub_22F0D3748(128);
      ++*((_DWORD *)v11 + 2);
    }
    v12 = *(_DWORD *)v9 & 0xFFFC00FF;
    *(_QWORD *)(v9 + 8) = v10;
    *(_DWORD *)v9 = v12;
    *(_DWORD *)(v9 + 4) = a4;
    v13 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v13 || *(_BYTE *)(v13 + 16) != 31)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
        v13 = sub_22F10CF48(v13);
      else
        v13 = 0;
    }
    if (v13)
      v14 = 15;
    else
      v14 = 14;
    return sub_22E90092C(a1, v9, v5, v14, 0, 0);
  }
  v16 = *(_QWORD *)(a2 + 16);
  v17 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v42 = 0u;
  *(_OWORD *)v43 = 0u;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v18 = *(_QWORD *)(a1 + 88);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) != 0)
      v20 = (_QWORD *)*v20;
    if (v20)
      v21 = (unint64_t)(v20 - 8);
    else
      v21 = 0;
    v22 = *(_QWORD *)(v21 + 48);
    if (!v22)
    {
      v22 = sub_22EF6462C(v18, v21);
      v18 = *(_QWORD *)(a1 + 88);
    }
    v23 = sub_22F0AAADC(v18, 0, 0, *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
    v24 = a4;
    sub_22F2F2C84((unint64_t *)&v42, *(_QWORD *)(a1 + 88), v23, a4 | ((unint64_t)a4 << 32));
  }
  else
  {
    v24 = a4;
  }
  v39 = *(_QWORD *)(v16 + 40);
  v40 = a4;
  sub_22EFC6D6C((uint64_t)&v41, v39);
  v25 = sub_22EB24A3C(a1, &v42, &v39, v16, 0, 0, 0);
  v26 = v25;
  if ((v25 & 1) != 0)
  {
LABEL_43:
    v26 = 1;
    goto LABEL_44;
  }
  v27 = sub_22F10CEE8(*(_QWORD *)(*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0;
  v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v28 == 39 && v27 != 0)
  {
    v37 = *(_QWORD *)(a1 + 88);
    v38 = sub_22F10ACF8(*v17);
    if (sub_22EF6845C(v37, v27, v38))
    {
      v30 = sub_22EB1922C(a1, (void *)(v26 & 0xFFFFFFFFFFFFFFFELL));
LABEL_37:
      v26 = v30;
      if ((v30 & 1) == 0)
      {
LABEL_38:
        v31 = *(_QWORD *)(a1 + 88);
        v32 = sub_22F1133DC((uint64_t *)&v44, v31);
        v33 = v26 & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if ((v34 & 7 | *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8)) != (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) | v32 & 7))
        {
          v35 = v32;
          v39 = 0;
          if (sub_22EF6845C(v31, v34, v32) || (sub_22ECFAE0C(a1, *(_QWORD *)(v33 + 8), v35, &v39) & 1) != 0)
          {
            v36 = 5;
          }
          else
          {
            sub_22F10DFD8(*v17);
            v36 = 1;
          }
          v26 = sub_22E90092C(a1, v26 & 0xFFFFFFFFFFFFFFFELL, v35, v36, (*(_DWORD *)v33 >> 8) & 3, 0);
        }
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v28 == 31)
  {
LABEL_36:
    v30 = sub_22EB2EA08(a1, v24, 4, v26 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_37;
  }
  if (v28 != 45)
  {
    if (v28 != 39)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_44:
  if (HIDWORD(v43[1]))
    free(v43[0]);
  return v26;
}

uint64_t sub_22F3466CC(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6, unint64_t a7)
{
  unint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21[24];
  uint64_t v22;
  unint64_t v23[12];
  __int128 v24;
  uint64_t v25;
  unsigned int v26[24];
  _BYTE v27[96];
  _BYTE v28[96];
  _BYTE v29[96];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[88];
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = a1[27];
  v15 = *(_WORD *)(sub_22EFCBB30(v14) + 8) & 0x7F;
  if (v15 != 16 && v15 != 83)
  {
    sub_22E8FCA40(a1, a6, 0xBE8u, 0, (uint64_t)v29);
    v16 = (unsigned int *)v29;
    goto LABEL_6;
  }
  if (a4 >= 2)
  {
    sub_22E8FCA40(a1, a6, 0xBE9u, 0, (uint64_t)v28);
    v16 = (unsigned int *)v28;
LABEL_6:
    sub_22E903BEC(v16);
    return 0;
  }
  if ((*(_DWORD *)(*a3 + 12) & 0x1FFFFFFF) == 0)
  {
    sub_22E8FCA40(a1, a6, 0xBEBu, 0, (uint64_t)v27);
    v16 = (unsigned int *)v27;
    goto LABEL_6;
  }
  if ((sub_22EE67384((uint64_t)a1, a7, 0) & 1) != 0)
    return 0;
  v17 = sub_22F3B8DF4(a1[11], v14, a6, a5, *a3, a7);
  if (sub_22EFE9310(v17))
  {
    sub_22E8FCA40(a1, a6, 0xBEAu, 0, (uint64_t)v26);
    sub_22E903BEC(v26);
    sub_22EFC77E8(v17, 1);
  }
  *(_QWORD *)&v24 = *(_QWORD *)(v17 + 40);
  DWORD2(v24) = a6;
  sub_22EFC6D6C((uint64_t)&v25, v24);
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  memset(&v33[64], 0, 24);
  v34 = a1;
  v35 = v24;
  v37 = 0;
  v38 = 0;
  v36 = v25;
  v39 = 1;
  v40 = 1;
  v41 = 0;
  sub_22EC56024((uint64_t)&v30);
  sub_22EC63520((uint64_t)a1, (uint64_t)&v30, a2, 0, 0);
  sub_22EA04CD4((uint64_t)a1, (uint64_t)&v30, v14, a2, 0, 0);
  if ((_DWORD)v32)
  {
    v19 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x1B)
      v20 = 4628;
    else
      v20 = 4629;
    sub_22E8FCA40(a1, a6, v20, 0, (uint64_t)v23);
    v22 = *(_QWORD *)(v17 + 40);
    sub_22E894538((uint64_t)v23, &v22);
    sub_22E903BEC((unsigned int *)v23);
    sub_22E8FCA40(a1, *(_DWORD *)(v19 + 24), 0x6Du, 0, (uint64_t)v21);
    sub_22E903BEC(v21);
  }
  v23[0] = v17;
  sub_22EA2DB10((unint64_t)a1, v23, 1uLL);
  sub_22EA0483C((uint64_t)a1, v17, a2, 1);
  sub_22E8BAFF0((uint64_t)&v30);
  return v17;
}

_QWORD *sub_22F3469AC(unint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v5;

  result = *(_QWORD **)(a1 + 160);
  if (!result)
  {
    v5 = sub_22EFC72E8(a1);
    result = (_QWORD *)sub_22E3CD3D4(v5 + 2032, 16, 3);
    *result = 0;
    result[1] = 0;
    *(_QWORD *)(a1 + 160) = result;
  }
  *((_DWORD *)result + 2) = a2;
  return result;
}

uint64_t *sub_22F3469F8(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if ((*((_BYTE *)result + 29) & 1) != 0)
  {
    v1 = result;
    sub_22EFC8E88((uint64_t)result);
    v3 = v2;
    result = sub_22EDA4B68(*(uint64_t **)v2, (uint64_t *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v2 + 8)));
    v4 = ((unint64_t)result - *(_QWORD *)v3) >> 3;
    *(_DWORD *)(v3 + 8) = v4;
    if (!(_DWORD)v4)
      *((_DWORD *)v1 + 7) &= ~0x100u;
  }
  return result;
}

unint64_t sub_22F346A54(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t *a5, uint64_t a6, int a7, int a8)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v13;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  _QWORD *v30;
  int64x2_t v31;
  _QWORD v32[10];

  v32[9] = *MEMORY[0x24BDAC8D0];
  v10 = a5 + 1;
  v9 = a5[1];
  if (!v9)
    return 0;
  v13 = dword_22F497FF8[a3 - 23];
  v29 = dword_22F497FF8[a3 - 23];
  if ((a4 - 1) <= 1)
  {
    v15 = a4 == 2;
    sub_22E8FCA40(a1, a8, 0xCA9u, 0, (uint64_t)&v30);
    v28 = v15;
    v16 = sub_22E894E38((uint64_t)&v30, (unsigned __int8 *)&v28);
    v17 = sub_22E8900C4(v16, &v29);
    v27 = *a5;
    sub_22E8906A0(v17, &v27);
    sub_22E903BEC((unsigned int *)&v30);
    return 0;
  }
  v21 = sub_22EF65A30(a1[11], v13, v9, a6, 0);
  v30 = v32;
  v31 = vdupq_n_s64(0x20uLL);
  v32[4] = 0;
  sub_22EEB5360((uint64_t)&v30, v21, 0x18uLL, 8);
  v23 = v22;
  v24 = 0;
  *(_DWORD *)v23 = a7;
  if (*v10)
    sub_22F0ABC50(v10, a1[11]);
  *(_QWORD *)(v23 + 8) = v24;
  *(_DWORD *)(v23 + 16) = a8;
  v25 = v31.i64[0] - v31.i64[1];
  v26 = sub_22EF5DB78(a1[11], v21, v31.i32[0] - v31.i32[2]);
  memcpy(v26 + 1, (char *)v30 + v31.i64[1], v25);
  v18 = sub_22EE7D030((uint64_t)a1, v21, (uint64_t)v26);
  if (v30 != v32 && v30)
    MEMORY[0x2348A0E84]();
  return v18;
}

uint64_t sub_22F346C38(uint64_t a1, unint64_t a2)
{
  __n128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  _DWORD v15[6];
  uint64_t v16;

  sub_22EFF605C(a2);
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = a1;
  v10 = 0;
  v11 = v15;
  v12 = v15;
  v4.n128_u64[0] = 2;
  v13 = 2;
  v14 = 0;
  v15[4] = v5;
  v16 = 0;
  sub_22ED725B0(v9, a2, v4);
  v7 = v6;
  sub_22F2F4694((uint64_t)v9);
  return v7;
}

uint64_t sub_22F346CB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    v13 = v4;
    v14 = v5;
    v9 = result;
    v10 = operator new();
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_QWORD *)(v10 + 112) = 0;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_QWORD *)v10 = v10 + 16;
    *(_QWORD *)(v10 + 8) = 0x400000000;
    sub_22E861244(v10, a4);
    *(_QWORD *)(v10 + 112) = a3;
    *(_QWORD *)&v12 = a2;
    *((_QWORD *)&v12 + 1) = v10;
    result = sub_22F2B3E04(v9 + 3096, &v12);
    v11 = (void **)*((_QWORD *)&v12 + 1);
    *((_QWORD *)&v12 + 1) = 0;
    if (v11)
    {
      if (*v11 != v11 + 2)
        free(*v11);
      result = MEMORY[0x2348A0E9C](v11, 0x10A0C400EB28923);
    }
    *(_QWORD *)(a2 + 80) |= 0x20000000uLL;
  }
  return result;
}

void sub_22F346DA4(uint64_t a1, uint64_t a2)
{
  if (a2)
    *(_QWORD *)(a2 + 80) &= ~0x20000000uLL;
}

uint64_t sub_22F346DB8(uint64_t a1)
{
  sub_22EDA48F0(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(288 * *(unsigned int *)(a1 + 16)));
  return a1;
}

_QWORD *sub_22F346E00(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F346EBC((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F346F70(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    v5[1] = v5 + 3;
    *(_OWORD *)(v5 + 33) = 0u;
    v5[2] = 0x800000000;
    v5[35] = 0;
  }
  return v5;
}

uint64_t sub_22F346EBC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_9;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 288 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 288 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_9;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F346F70(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 8;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_22EDA4974((uint64_t)a1, v4);
  v8 = 0;
  sub_22F346EBC(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_22F347030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 2312);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[36 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 36;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F346EBC(a1, v10, &v13);
        v11 = v13;
        *v13 = *(_QWORD *)v4;
        v11[1] = v11 + 3;
        v11[2] = 0x800000000;
        if (*(_DWORD *)(v4 + 16))
          sub_22ED7355C((uint64_t)(v11 + 1), v4 + 8);
        v11[35] = *(_QWORD *)(v4 + 280);
        *(_DWORD *)a1 += 2;
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 288;
    }
    while (v4 != a3);
  }
}

double sub_22F347148@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  double result;
  _BYTE v8[24];

  sub_22EF661A0(*(_QWORD *)(a1 + 88), a2, (uint64_t)v8);
  *(_QWORD *)&result = sub_22EDC0108(a1, (uint64_t)v8, a3, a4).n128_u64[0];
  return result;
}

void sub_22F3471A0(unint64_t a1, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;

  v4 = a2;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(a1 + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    sub_22F2F1F4C(a1);
    v7 = *(unsigned int *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)a1 + 32 * v7 + 8;
    do
    {
      v9 = (uint64_t *)(v4 + 8);
      v10 = *(_DWORD *)v4;
      v4 += 32;
      *(_DWORD *)(v8 - 8) = v10;
      v8 = sub_22E78D434(v8, v9) + 32;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 5);
}

uint64_t sub_22F347230(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD v9[3];
  __int16 v10;

  v3[1] = 0;
  v3[2] = 0;
  v3[0] = a1;
  v4 = 0;
  v5 = v9;
  v6 = v9;
  v7 = 2;
  v8 = 0;
  v9[2] = 0;
  v10 = 256;
  v1 = sub_22EDC913C(v3);
  sub_22F2F4694((uint64_t)v3);
  return v1;
}

uint64_t sub_22F34729C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[3];
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD v11[3];
  __int16 v12;

  v5[1] = 0;
  v5[2] = 0;
  v5[0] = a1;
  v6 = 0;
  v7 = v11;
  v8 = v11;
  v9 = 2;
  v10 = 0;
  v11[2] = a3;
  v12 = 256;
  v3 = sub_22EDC913C(v5);
  sub_22F2F4694((uint64_t)v5);
  return v3;
}

unint64_t *sub_22F347308(_QWORD *a1, uint64_t *a2)
{
  unint64_t *v2;
  _QWORD *v4[3];
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  __int16 v11;

  v4[1] = 0;
  v4[2] = 0;
  v4[0] = a1;
  v5 = 0;
  v6 = v10;
  v7 = v10;
  v8 = 2;
  v9 = 0;
  v10[2] = 0;
  v11 = 256;
  v2 = sub_22EDC9190(v4, a2);
  sub_22F2F4694((uint64_t)v4);
  return v2;
}

unint64_t sub_22F347374(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v5[3];
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD v11[3];
  __int16 v12;

  v5[1] = 0;
  v5[2] = 0;
  v5[0] = a1;
  v6 = 0;
  v7 = v11;
  v8 = v11;
  v9 = 2;
  v10 = 0;
  v11[2] = a3;
  v12 = 0;
  v3 = sub_22EDC913C(v5, a2);
  sub_22F2F4694((uint64_t)v5);
  return v3;
}

unint64_t *sub_22F3473DC(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t *v3;
  _QWORD *v5[3];
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD v11[3];
  __int16 v12;

  v5[1] = 0;
  v5[2] = 0;
  v5[0] = a1;
  v6 = 0;
  v7 = v11;
  v8 = v11;
  v9 = 2;
  v10 = 0;
  v11[2] = a3;
  v12 = 0;
  v3 = sub_22EDC9190(v5, a2);
  sub_22F2F4694((uint64_t)v5);
  return v3;
}

unsigned int *sub_22F347444(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21[24];

  if (*a3 == 180)
  {
    v5 = *(_DWORD *)(a2 + 24);
    v6 = 2892;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
    {
      if ((*(_BYTE *)(a2 + 98) & 1) != 0)
        v6 = 3606;
      else
        v6 = 2892;
    }
    sub_22E8FCA40(a1, v5, v6, 0, (uint64_t)v21);
    v20 = *(_QWORD *)(a2 + 40);
    v7 = sub_22E894538((uint64_t)v21, &v20);
    v19 = *(_QWORD *)(a2 + 48);
    v8 = sub_22E8901B8(v7, &v19);
    sub_22F0D4E74((uint64_t)a3);
    v18 = v9;
    v10 = &v18;
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 24);
    v12 = 2891;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
    {
      if ((*(_BYTE *)(a2 + 98) & 1) != 0)
        v12 = 3605;
      else
        v12 = 2891;
    }
    sub_22E8FCA40(a1, v11, v12, 0, (uint64_t)v21);
    v20 = *(_QWORD *)(a2 + 40);
    v13 = sub_22E894538((uint64_t)v21, &v20);
    v19 = *(_QWORD *)(a2 + 48);
    v14 = sub_22E8901B8(v13, &v19);
    v18 = *((_QWORD *)a3 + 1);
    v8 = sub_22E8901B8(v14, &v18);
    sub_22F0D4E74((uint64_t)a3);
    v17 = v15;
    v10 = &v17;
  }
  sub_22E8906A0(v8, v10);
  return sub_22E903BEC(v21);
}

uint64_t sub_22F34756C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  __int16 v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[24];
  void *v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[17];
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[12];
  _BYTE v36[104];
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 32);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 32);
  v21 = 0;
  v22 = a4;
  v23 = 0;
  v24 = 0;
  v25 = v27;
  v26 = 0x400000000;
  v27[16] = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v35;
  v34 = 0x800000000;
  v35[8] = 0;
  v35[9] = 0;
  v35[10] = v36;
  v35[11] = 0x400000000;
  v36[96] = 0;
  v37 = v39;
  v38 = 0x400000000;
  v9 = sub_22EDCA1F8(a1, v7, v8, a3, (uint64_t)&v21);
  v10 = sub_22EDCA1F8(a1, v8, v7, a2, (uint64_t)&v21);
  if (v9 || v10)
  {
    v11 = v9 && v10;
    if (v9)
      v12 = a2;
    else
      v12 = a3;
    if (v11 == 1)
    {
      v18 = v20;
      v19 = 0x300000000;
      v15 = v17;
      v16 = 0x300000000;
      sub_22EFE9164(*(_QWORD *)(a2 + 184), (uint64_t)&v18);
      sub_22EFE9164(*(_QWORD *)(a3 + 184), (uint64_t)&v15);
      v14 = 0;
      if ((sub_22E9F4DA0(a1, a2, (unsigned __int8 **)v18, v19, a3, (unsigned __int8 **)v15, v16, (char *)&v14 + 1) & 1) != 0|| (sub_22E9F4DA0(a1, a3, (unsigned __int8 **)v15, v16, a2, (unsigned __int8 **)v18, v19, (char *)&v14) & 1) != 0|| HIBYTE(v14) == v14)
      {
        v12 = 0;
      }
      else if (HIBYTE(v14))
      {
        v12 = a2;
      }
      else
      {
        v12 = a3;
      }
      if (v15 != v17)
        free(v15);
      if (v18 != v20)
        free(v18);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_22EDEA410((uint64_t)&v21);
  return v12;
}

uint64_t sub_22F347794(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v18;
  __int16 v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[24];
  void *v24;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[17];
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[12];
  _BYTE v42[104];
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[9];

  v45[8] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 112);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 4) != 0 && v9)
  {
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)v9 + 112);
      v9 = v18 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v18 & 4) != 0 && v9);
  }
  v20 = v9;
  sub_22EF65464(*(_QWORD *)(a1 + 88), &v20);
  v11 = v10;
  v12 = sub_22EF6512C(*(_QWORD *)(a1 + 88), v10, **(_QWORD **)(a2 + 128), *(unsigned int *)(*(_QWORD *)(a2 + 128) + 8), 0);
  v13 = sub_22EF6512C(*(_QWORD *)(a1 + 88), v11, **(_QWORD **)(a3 + 128), *(unsigned int *)(*(_QWORD *)(a3 + 128) + 8), 0);
  v27 = 0;
  v28 = a4;
  v29 = 0;
  v30 = 0;
  v31 = v33;
  v32 = 0x400000000;
  v33[16] = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = v41;
  v40 = 0x800000000;
  v41[8] = 0;
  v41[9] = 0;
  v41[10] = v42;
  v41[11] = 0x400000000;
  v42[96] = 0;
  v43 = v45;
  v44 = 0x400000000;
  v14 = sub_22EDCA828(a1, v12, v13, a3, (uint64_t)&v27);
  v15 = sub_22EDCA828(a1, v13, v12, a2, (uint64_t)&v27);
  if (v14 || (v16 = 0, v15))
  {
    v16 = v14 ? a2 : a3;
    if (v14 && v15)
    {
      v24 = v26;
      v25 = 0x300000000;
      v21 = v23;
      v22 = 0x300000000;
      sub_22EFE9164(*(_QWORD *)(a2 + 424), (uint64_t)&v24);
      sub_22EFE9164(*(_QWORD *)(a3 + 424), (uint64_t)&v21);
      v19 = 0;
      if ((sub_22E9F4DA0(a1, a2, v24, v25, a3, v21, v22, (char *)&v19 + 1) & 1) != 0
        || (sub_22E9F4DA0(a1, a3, v21, v22, a2, v24, v25, &v19) & 1) != 0
        || HIBYTE(v19) == v19)
      {
        v16 = 0;
      }
      else if (HIBYTE(v19))
      {
        v16 = a2;
      }
      else
      {
        v16 = a3;
      }
      if (v21 != v23)
        free(v21);
      if (v24 != v26)
        free(v24);
    }
  }
  sub_22EDEA410((uint64_t)&v27);
  return v16;
}

BOOL sub_22F347A30(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  uint64_t v27;
  _BOOL8 v28;
  int v29;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  _BYTE v40[32];
  __int128 v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _DWORD v45[2];
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[17];
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[12];
  _BYTE v57[104];
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[96];
  void *v64;
  uint64_t v65;
  _QWORD v66[26];

  v66[24] = *MEMORY[0x24BDAC8D0];
  v8 = (char *)(a1 + 10664);
  v9 = *(_QWORD *)(a1 + 88);
  v43 = (void *)(a3 & 0xFFFFFFFFFFFFFFF9);
  sub_22EF65464(v9, &v43);
  v36 = v10;
  v11 = *(_QWORD *)(a3 + 56);
  v64 = v66;
  v65 = 0x800000000;
  v37 = v11;
  sub_22EF66594(*(_QWORD *)(a1 + 88), v11, (uint64_t)&v64);
  v61 = v63;
  v62 = 0x400000000;
  v12 = *(_DWORD *)(a1 + 8456);
  v13 = v8[1288];
  v38 = *v8;
  v39 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
  sub_22EE03478(a1);
  if (!v14)
    v8[1288] = 1;
  *v8 = 0;
  sub_22EF66594(*(_QWORD *)(a1 + 88), a2, (uint64_t)&v61);
  v43 = v45;
  v15 = *(_QWORD *)(a2 + 4);
  v44 = 0x800000000;
  v56[3] = v15;
  v16 = *(_DWORD *)(a2 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = (uint64_t *)(a2 + 16);
    v19 = 24 * v16;
    do
    {
      v20 = *(_QWORD *)((char *)v61 + v17 + 16);
      v41 = *(_OWORD *)((char *)v61 + v17);
      v42 = v20;
      if ((_DWORD)v41 == 8)
      {
        v21 = **((_OWORD **)&v41 + 1);
        v42 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 16);
        v41 = v21;
      }
      v22 = *v18++;
      sub_22EDC0108(a1, (uint64_t)&v41, *(_DWORD *)(v22 + 24), (uint64_t)v40);
      v23 = (_OWORD *)sub_22E78DF7C((uint64_t)&v43, (unint64_t)v40, 1);
      v24 = (char *)v43 + 32 * v44;
      v25 = v23[1];
      *v24 = *v23;
      v24[1] = v25;
      LODWORD(v44) = v44 + 1;
      v17 += 24;
    }
    while (v19 != v17);
  }
  LODWORD(v62) = 0;
  v26 = a4;
  if ((sub_22ED61988(a1, a3, a4, &v43, 0, &v61, 1, 0) & 1) != 0 || *(_DWORD *)(a1 + 8456) > v12)
  {
    if (v43 != v45)
      free(v43);
    *(_DWORD *)(a1 + 8456) = v12;
    v8[1288] = v13;
    *v8 = v38;
    v27 = *(_QWORD *)(a1 + 104);
    if (*(_DWORD *)(v27 + 180) == 5)
      *(_BYTE *)(v27 + 170) = 1;
    v28 = 0;
    if (v39)
      v29 = 3;
    else
      v29 = 0;
    *(_DWORD *)(v27 + 180) = v29;
  }
  else
  {
    if (v43 != v45)
      free(v43);
    *(_DWORD *)(a1 + 8456) = v12;
    v8[1288] = v13;
    *v8 = v38;
    v31 = *(_QWORD *)(a1 + 104);
    if (*(_DWORD *)(v31 + 180) == 5)
      *(_BYTE *)(v31 + 170) = 1;
    if (v39)
      v32 = 3;
    else
      v32 = 0;
    *(_DWORD *)(v31 + 180) = v32;
    v33 = sub_22EF6512C(*(_QWORD *)(a1 + 88), v36, (uint64_t)v64, v65, 0);
    v34 = sub_22EF6512C(*(_QWORD *)(a1 + 88), v36, (uint64_t)v61, v62, 0);
    v35 = sub_22EFE90A8(v37);
    v43 = 0;
    LODWORD(v44) = v26;
    BYTE4(v44) = 0;
    v45[0] = v35;
    v45[1] = 0;
    v46 = v48;
    v47 = 0x400000000;
    v48[16] = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = v56;
    v55 = 0x800000000;
    v56[8] = 0;
    v56[9] = 0;
    v56[10] = v57;
    v56[11] = 0x400000000;
    v57[96] = 0;
    v58 = &v60;
    v59 = 0x400000000;
    v28 = sub_22EDCAD3C(a1, v34, v33, a3, (uint64_t)&v43);
    sub_22EDEA410((uint64_t)&v43);
  }
  if (v61 != v63)
    free(v61);
  if (v64 != v66)
    free(v64);
  return v28;
}

uint64_t sub_22F347DFC(uint64_t a1, uint64_t a2, void ***a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 56);
  sub_22EDCB260(a3);
  sub_22E97F810((unint64_t *)a3, *(_DWORD *)(v6 + 12) & 0x1FFFFFFF, 0);
  v7 = *(_QWORD *)(a2 + 48);
  result = sub_22EFBAACC(v7);
  if ((_DWORD)result)
  {
    v9 = 0;
    v10 = 8 * result;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 120) + v9) + 48);
      v12 = sub_22EFE90A8(v6);
      result = sub_22EDCB2BC(a1, v11, 1, v12, (unint64_t *)a3);
      v9 += 8;
    }
    while (v10 != v9);
  }
  return result;
}

void sub_22F347EA8(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F347F14((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F347F14(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 224 * v2;
    v6 = (_QWORD *)(a2 + 72);
    v7 = v4 + 72;
    do
    {
      *(_OWORD *)(v6 - 9) = *(_OWORD *)(v7 - 72);
      v8 = *(_OWORD *)(v7 - 56);
      v9 = *(_OWORD *)(v7 - 40);
      v10 = *(_OWORD *)(v7 - 24);
      *((_BYTE *)v6 - 8) = *(_BYTE *)(v7 - 8);
      *(_OWORD *)(v6 - 3) = v10;
      *(_OWORD *)(v6 - 5) = v9;
      *(_OWORD *)(v6 - 7) = v8;
      *v6 = v6 + 2;
      v6[1] = 0x400000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = (_QWORD *)sub_22F348004((uint64_t)v6, v7);
      v11 = v7 - 72;
      v6[18] = *(_QWORD *)(v7 + 144);
      v6 += 28;
      v7 += 224;
    }
    while (v11 + 224 != v5);
    v12 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v12)
    {
      v13 = *a1;
      v14 = 224 * v12;
      do
      {
        v15 = *(void **)(v13 + v14 - 152);
        if ((void *)(v13 + v14 - 136) != v15)
          free(v15);
        v14 -= 224;
      }
      while (v14);
    }
  }
}

uint64_t sub_22F348004(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 32 * v9 - 7);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 32 * v10 - 7);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 32 * v10), (const void *)(*(_QWORD *)a2 + 32 * v10), *(_QWORD *)a2 + 32 * v11 - (*(_QWORD *)a2 + 32 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22F348120(uint64_t result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
  v4 = *(unsigned int *)(result + 8);
  if (v3 + v4 > *(unsigned int *)(result + 12))
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    LODWORD(v3) = v9;
    a3 = v7;
    result = v10;
    v4 = *(unsigned int *)(v10 + 8);
  }
  if (a2 != a3)
  {
    v5 = *(_QWORD *)result + 32 * v4;
    do
    {
      v6 = *a2;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v6;
      *(_BYTE *)(v5 + 24) = 0;
      a2 = (__int128 *)((char *)a2 + 24);
      v5 += 32;
    }
    while (a2 != a3);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

uint64_t sub_22F3481D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_22F3481D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_22F3481E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_22F3481E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void sub_22F3481F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;

  v7 = *a2;
  v8 = 0;
  sub_22F2611B4(a1, &v7, &v8, (uint64_t)&v5);
  if (v6)
  {
    v4 = v5;
    sub_22EDCE918((uint64_t *)(a1 + 24), (uint64_t)a2);
    *(_DWORD *)(v4 + 8) = -1963413621 * ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  }
}

uint64_t *sub_22F348278(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(v6 + v7 - 280) = *(_QWORD *)(v4 + v7 - 280);
      result = (uint64_t *)(v6 + v7 - 272);
      *result = v6 + v7 - 256;
      *(_QWORD *)(v6 + v7 - 264) = 0x800000000;
      if (*(_DWORD *)(v4 + v7 - 264))
        result = (uint64_t *)sub_22F348004((uint64_t)result, v4 + v7 - 272);
      v7 -= 280;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F348360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22F246C54((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 280 * *(unsigned int *)(v5 + 8);
}

uint64_t sub_22F3483C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = a1 + 32;
  }
  else
  {
    v7 = a2;
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v3 = sub_22F2F1D6C(v5, &v8)[1] + 32 * *(unsigned int *)(a1 + 88) + 8;
    a2 = v7;
  }
  sub_22F0EFFCC(v3, a2);
  return a1;
}

uint64_t sub_22F348454(_DWORD *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_22F3484C0((uint64_t)a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F3485D0(a1, a2, v7);
    *(_DWORD *)v5 = *(_DWORD *)a2;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_22F3484C0(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 9) ^ a3 | ((unint64_t)(37 * a2) << 32))
     + ~((unint64_t)((a3 >> 9) ^ a3) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (int *)(v4 + 24 * v11);
  v13 = *v12;
  v14 = *((_QWORD *)v12 + 1);
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -1 || v14)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -1;
      if (v19 && v13 == -2)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (int *)(v4 + 24 * (v21 & v10));
      v13 = *v12;
      v14 = *((_QWORD *)v12 + 1);
      if (*v12 == a2 && v14 == a3)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t sub_22F3485D0(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EDFF780((uint64_t)a1, v6);
  v9 = 0;
  sub_22F3484C0((uint64_t)a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_6:
  *a1 += 2;
  if (*(_DWORD *)a3 != -1 || *(_QWORD *)(a3 + 8) != 0)
    --a1[1];
  return a3;
}

uint64_t sub_22F348698(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  unint64_t v11;
  _DWORD *v14;
  _DWORD *v15;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_OWORD *)(result + 8);
    v9 = (_OWORD *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_17;
    v8 = *(_OWORD **)(result + 8);
    v9 = (_OWORD *)((char *)v8 + 24 * v7);
  }
  do
  {
    *v8 = xmmword_22F499090;
    v8 = (_OWORD *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_DWORD *)a2 != -1 || v11 != 0) && (v10 != -2 || v11 != -1))
    {
      v15 = 0;
      result = sub_22F3484C0((uint64_t)v5, v10, v11, &v15);
      v14 = v15;
      *v15 = *(_DWORD *)a2;
      *((_QWORD *)v14 + 1) = *(_QWORD *)(a2 + 8);
      *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

_QWORD *sub_22F348780(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F3487F8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

_QWORD *sub_22F3487F8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EDFF92C(a1, v6);
  v8 = 0;
  sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F3488A8(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = *result;
    v8 = 56 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      v7 += 56;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_22F285220((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_QWORD *)v4;
        v10[2] = 0x100000000;
        v10[1] = v10 + 3;
        v11 = (unint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22E892224(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22E89277C((char **)(v4 + 8));
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F348994(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7[3];
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];
  unsigned int v14;
  uint64_t v15;
  char v16;

  v7[1] = 0;
  v7[2] = 0;
  v7[0] = a1;
  v8 = 0;
  v9 = v13;
  v10 = v13;
  v11 = 2;
  v12 = 0;
  v13[2] = a5;
  v14 = a2;
  v15 = 0;
  v5 = sub_22EE09844(v7, a2, a3, a4, &v16);
  sub_22F2F4694((uint64_t)v7);
  return v5;
}

void sub_22F348A0C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10[2];
  __int128 v11[3];
  void *v12[2];
  _OWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_22E4913B4(a3, (uint64_t)v12);
  v11[0] = v13[0];
  v11[1] = v13[1];
  v11[2] = v13[2];
  v12[0] = v13;
  v12[1] = (void *)0x400000000;
  v7 = a2[7];
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (uint64_t *)v8[4];
  v10[0] = *v8;
  v10[1] = (uint64_t)(v8 + 1);
  v9 = sub_22F1167E8(v10);
  if (sub_22F348994((uint64_t)a1, v9, (int *)v11, (uint64_t)v12, a4))
    LODWORD(v11[0]) = 0;
  sub_22EB149A8(a1, a2, v11);
  if (v12[0] != v13)
    free(v12[0]);
}

uint64_t sub_22F348B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __n128 v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  void *v27[2];
  _BYTE v28[256];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = *(uint64_t **)(a3 + 64);
  v27[0] = v28;
  v27[1] = (void *)0x800000000;
  v29 = 0;
  if (!v7)
    goto LABEL_4;
  v29 = *v7;
  v8 = v7 + 2;
  v9 = *((unsigned int *)v7 + 2);
  v18[1] = 0;
  v18[2] = 0;
  v18[0] = a1;
  v19 = 0;
  v20 = v24;
  v21 = v24;
  v22 = 2;
  v23 = 0;
  v24[2] = a4;
  v25 = 0;
  v26 = 0;
  v10 = sub_22EE0E8DC(v18, v8, &v8[4 * v9], v27);
  sub_22F2F4694((uint64_t)v18);
  if ((v10 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
LABEL_4:
    v12 = *(_QWORD *)a3;
    v13 = *(_QWORD *)(a3 + 8);
    v16 = *(__n128 *)(a3 + 24);
    v17 = *(_QWORD *)(a3 + 40);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 33) & 0x80) != 0)
      v14 = *(_DWORD *)(*(_QWORD *)(a3 + 72) + 20);
    else
      v14 = 0;
    v11 = sub_22F34561C(a1, v12, v13, &v16, *(_QWORD *)(a3 + 56), (uint64_t)v27, a2, v14);
  }
  if (v27[0] != v28)
    free(v27[0]);
  return v11;
}

void sub_22F348C88(unint64_t a1, unsigned __int32 a2, unint64_t a3, uint64_t a4)
{
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  sub_22EE007CC(a3, 0, 0, 0, (uint64_t)v8);
  sub_22EE0D944(a1, a2, a3, (uint64_t *)v8, a4);
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t sub_22F348D3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8[3];
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];
  int v15;
  uint64_t v16;

  if (!a3)
    return 0;
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = a1;
  v9 = 0;
  v10 = v14;
  v11 = v14;
  v12 = 2;
  v13 = 0;
  v14[2] = a5;
  v15 = 0;
  v16 = 0;
  v6 = sub_22EE11824(v8, a2, a3, a4, a6, 0);
  sub_22F2F4694((uint64_t)v8);
  return v6;
}

uint64_t sub_22F348DBC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v7[3];
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  unint64_t v16[2];

  v4 = a2;
  v16[0] = a2;
  v16[1] = (unint64_t)a3;
  if (a2)
  {
    v7[1] = 0;
    v7[2] = 0;
    v7[0] = a1;
    v8 = 0;
    v9 = v13;
    v10 = v13;
    v11 = 2;
    v12 = 0;
    v13[2] = a4;
    v14 = sub_22F0AB0EC(v16);
    v15 = 0;
    v4 = sub_22EE11C74((int)v7, v4, a3);
    sub_22F2F4694((uint64_t)v7);
  }
  return v4;
}

unint64_t sub_22F348E70(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  __int128 v11;
  void *v12[2];
  uint64_t v13[3];
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD v19[3];
  unsigned int v20;
  uint64_t v21;

  v13[1] = 0;
  v13[2] = 0;
  v13[0] = a1;
  v14 = 0;
  v15 = v19;
  v16 = v19;
  v17 = 2;
  v18 = 0;
  v19[2] = a6;
  v20 = a5;
  v21 = 0;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  sub_22E8ACE30((uint64_t)&v11, a2, a3);
  v9 = sub_22EE12674(v13, (uint64_t)&v11, a4, a5, 0, v8, 0);
  if (HIDWORD(v12[1]))
    free(v12[0]);
  sub_22F2F4694((uint64_t)v13);
  return v9;
}

_QWORD *sub_22F348F18(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F348F80(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F348F80(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EE23C3C(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t *sub_22F349030(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      v9 = *(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_22F24C318(*v4, *((_DWORD *)v4 + 4), v9, &v12);
        v11 = v12;
        *v12 = *(v8 - 1);
        v11[1] = *v8;
        *v8 = 0;
        ++*((_DWORD *)v4 + 2);
        result = sub_22F29CFE8(v8);
      }
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t sub_22F3490F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  uint64_t i;
  uint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 == a2)
    return (uint64_t)a1;
  v26 = *(_QWORD *)(*a1 + 12024);
  v6 = operator new();
  v3 = v6;
  v7 = *a1;
  v8 = *((_BYTE *)a1 + 113);
  *(_QWORD *)v6 = *a1;
  *(_QWORD *)(v6 + 8) = 1;
  v9 = (_DWORD *)(v6 + 8);
  for (i = 16; i != 80; i += 16)
    *(_QWORD *)(v6 + i) = -4096;
  *(_QWORD *)(v6 + 80) = v6 + 96;
  *(_QWORD *)(v6 + 88) = 0x100000000;
  *(_BYTE *)(v6 + 112) = 0;
  *(_BYTE *)(v6 + 113) = v8;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v7 + 12024) = v6;
  *(_QWORD *)(v6 + 104) = 0;
  v11 = a1[13];
  if (v11)
    *(_QWORD *)(v3 + 104) = sub_22F3490F8(v11, a2);
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 15);
  *(_DWORD *)(v3 + 136) = *((_DWORD *)a1 + 34);
  v12 = sub_22F2893E4((int *)a1 + 2);
  v13 = v12;
  v15 = v14;
  if ((a1[1] & 1) != 0)
  {
    v16 = a1 + 2;
    v17 = 4;
  }
  else
  {
    v16 = (uint64_t *)a1[2];
    v17 = *((unsigned int *)a1 + 6);
  }
  v18 = (int *)&v16[2 * v17];
  if (v18 != v12)
  {
    do
    {
      v27 = 0;
      v27 = *(_QWORD *)v13;
      v19 = sub_22EE1320C(v9, &v27);
      v20 = v19;
      v21 = *((_QWORD *)v13 + 1);
      v22 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0)
      {
        v23 = (_QWORD *)operator new();
        v24 = (unint64_t)v23;
        *v23 = v23 + 2;
        v23[1] = 0x400000000;
        if (*(_DWORD *)(v22 + 8))
          sub_22F24C890((uint64_t)v23, v22);
        v20[1] = v24 | 4;
        v25 = *(unsigned int *)(v3 + 88);
        if (v25 >= *(unsigned int *)(v3 + 92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(v3 + 88);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v25) = v24;
        ++*(_DWORD *)(v3 + 88);
      }
      else
      {
        v19[1] = v22;
      }
      while (1)
      {
        v13 += 4;
        if (v13 == v15)
          break;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_23;
      }
      v13 = v15;
LABEL_23:
      ;
    }
    while (v13 != v18);
  }
  *(_QWORD *)(*a1 + 12024) = v26;
  return v3;
}

uint64_t sub_22F34933C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_22EFBAACC(a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      v5 = result;
      sub_22EFC8E88(a2);
      result = sub_22EE667EC(v6);
      if (result)
      {
        v7 = result;
        v8 = 0;
        v9 = 8 * v5;
        do
        {
          sub_22EB31584(a1, *(_DWORD *)(v7 + 16), a2, *(_QWORD *)(*(_QWORD *)(a2 + 120) + v8));
          result = sub_22EB4E2D8(a1);
          v8 += 8;
        }
        while (v9 != v8);
      }
    }
  }
  return result;
}

unint64_t sub_22F3493CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(*a1 + 88);
  v4 = *(_QWORD *)(a2 + 40);
  if ((v4 & 7) != 0)
    v5 = 0;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_22F3AD3E8(v3, a1[3], *(_DWORD *)(a2 + 24), v5);
  sub_22EFCCFA0(a1[3], v6);
  return v6;
}

unint64_t sub_22F349424(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;

  v3 = *(_QWORD *)(*a1 + 88);
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_DWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 68);
  do
  {
    a2 = *(_QWORD *)(a2 + 88);
    if (a2)
      v10 = (*(_DWORD *)(a2 + 28) & 0x7F) == 17;
    else
      v10 = 0;
  }
  while (v10);
  if ((v5 & 7) != 0)
    v11 = 0;
  else
    v11 = v5 & 0xFFFFFFFFFFFFFFF8;
  v12 = sub_22EFD8CD4(v3, a1[3], v8, v4, v11, v6, v7, v9, a2);
  sub_22EFCCFA0(a1[3], v12);
  return v12;
}

uint64_t sub_22F3494A8(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;

  a1[1] = a2;
  v3 = sub_22E3CD31C((uint64_t *)(a2 + 64), a2);
  *a1 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  *((_DWORD *)a1 - 9) |= *(_DWORD *)(v3 + 28) & 0x260000;
  return sub_22E7B7A74(a1[1] + 64, (uint64_t)(a1 - 8));
}

_QWORD *sub_22F3494FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;

  v4 = *(_QWORD *)(*a1 + 88);
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 7) != 0)
    v6 = 0;
  else
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  v7 = sub_22F3B3140(v4, a1[3], *(_DWORD *)(a2 + 24), v6);
  if (sub_22EFC9194(a2))
    v8 = 2048;
  else
    v8 = 0;
  *((_DWORD *)v7 + 7) = *((_DWORD *)v7 + 7) & 0xFFFFF7FF | v8;
  sub_22EE0A7A4(*(_QWORD *)(*a1 + 12024), a2, (uint64_t)v7);
  return v7;
}

uint64_t sub_22F349588(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = a2;
  v4 = *(_QWORD *)(a2 + 56);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (uint64_t *)v5[4];
  v6 = *v5;
  v7 = *(_DWORD *)(*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v7 & 0x800) != 0)
  {
    sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 24), 0x11D6u, 0, (uint64_t)&v20);
    sub_22E9AEF84((uint64_t)&v20, &v22);
    goto LABEL_8;
  }
  v8 = *a1;
  if ((v7 & 0x200) != 0)
  {
    v16 = (uint64_t *)sub_22EE03524(v8, v5, a1[4], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), 0);
    if (!v16)
    {
      v17 = *(_QWORD *)(a2 + 56);
      v5 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v5 = (uint64_t *)v5[4];
      goto LABEL_9;
    }
    v5 = v16;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 > 1)
      goto LABEL_6;
    sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 24), 0xD25u, 0, (uint64_t)&v20);
    v19 = *v5;
    sub_22E8901B8((uint64_t)&v20, &v19);
LABEL_8:
    sub_22E903BEC((unsigned int *)&v20);
LABEL_9:
    v10 = 1;
    goto LABEL_10;
  }
  v9 = *(_DWORD *)(a2 + 24);
  v20 = *a1;
  v21 = v9;
  sub_22EB522D8((uint64_t)&v20, v6);
LABEL_6:
  v10 = 0;
LABEL_10:
  v11 = *(_QWORD *)(a2 + 56);
  if ((v11 & 4) != 0 && (v18 = v11 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v18 + 16)))
    v12 = **(int ***)(v18 + 24);
  else
    v12 = (int *)(a2 + 64);
  v13 = sub_22F3B3480(*(_QWORD *)(*a1 + 88), a1[3], *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), *v5, (uint64_t)v5, *v12, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  v14 = v22;
  sub_22EE33A90(*a1, a1[4], v22, v13, a1[5], (uint64_t *)a1[6]);
  if (v10)
    sub_22EFC77E8(v13, 1);
  *(_DWORD *)(v13 + 28) = *(_DWORD *)(v13 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(v14 + 28) >> 13) & 3) << 13);
  sub_22EFCCFA0(a1[3], v13);
  return v13;
}

uint64_t sub_22F349764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;

  v4 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8 * *(unsigned int *)(a2 + 64), 3);
  v5 = v4;
  v6 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v6)
  {
    v7 = *(unint64_t **)(a2 + 56);
    v8 = 8 * v6;
    v9 = 0xFFFFFFFF00000000;
    v10 = (_QWORD *)v4;
    while (1)
    {
      v11 = sub_22EE37A18(*(_QWORD *)a1, *(_DWORD *)(a2 + 24), *v7, *(_DWORD **)(a1 + 32), 0);
      if (!v11)
        return 0;
      *v10++ = v11;
      ++v7;
      v9 += 0x100000000;
      v8 -= 8;
      if (!v8)
      {
        v12 = *(_DWORD *)(a2 + 64);
        v13 = v9 >> 32;
        goto LABEL_6;
      }
    }
  }
  else
  {
    v12 = 0;
    v13 = -1;
LABEL_6:
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v13) + 48);
    v15 = *(_QWORD *)(a2 + 40);
    if ((v15 & 7) != 0)
      v16 = 0;
    else
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    v17 = sub_22F3AD82C(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 24), v16, v14, v5, v12);
    v18 = (uint64_t *)sub_22F255ABC(a2);
    if (v18 != v19)
    {
      do
      {
        v22 = v18 + 1;
        v23 = v19;
        v24 = sub_22EF9C5AC(*v18);
        sub_22EFCA95C(v17, v24);
        v19 = v23;
        v18 = v22;
      }
      while (v22 != v23);
    }
    v20 = *(_DWORD *)(v17 + 28) & 0xFFFFFDFF | (((*(_DWORD *)(a2 + 28) >> 9) & 1) << 9);
    *(_DWORD *)(v17 + 28) = v20;
    *(_DWORD *)(v17 + 28) = v20 & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
    sub_22EFCCFA0(*(_QWORD *)(a1 + 24), v17);
  }
  return v17;
}

unint64_t sub_22F3498DC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = *a1;
  sub_22EB48CC8(*a1, 4, 0, 3);
  v7 = sub_22EE0A68C(*a1, v4, a1[4], v6);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = sub_22EACEDFC(*a1, *(_DWORD *)(a2 + 24), (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD **)(a2 + 48), *(_DWORD *)(a2 + 56), (*(_QWORD *)(a2 + 40) & 2) != 0);
  sub_22EB48E64(v5);
  return v8;
}

unint64_t sub_22F349970(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD **a4, uint64_t *a5)
{
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28[5];

  v10 = *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 26;
  else
    v11 = 0;
  if (!v11)
    v10 = sub_22F10CF48(v10);
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v13 = *(_QWORD *)(v12 + 16400);
  v14 = (uint64_t *)(v10 + 40);
  v15 = (unsigned __int16)(*(_QWORD *)(v10 + 16) >> 38);
  sub_22E4913B4(v10, (uint64_t)v28);
  v16 = sub_22EF63D8C(v12, v13, v14, v15, v28, 0);
  *a3 = v16;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v19 = sub_22EF579A8(v17, v16, HIDWORD(v18));
  v20 = (uint64_t)(*a4 + 1);
  *(_QWORD *)&v28[0] = **a4;
  *((_QWORD *)&v28[0] + 1) = v20;
  result = sub_22F259410((unint64_t *)v28);
  if (*(_BYTE *)(result + 16) != 25)
  {
    v23 = *(_QWORD *)(result + 16);
    if ((v23 & 0x3FFFC000000000) != 0)
    {
      v24 = (uint64_t *)(v22 + 16);
      v25 = v19 + 3;
      v26 = (unsigned __int16)(v23 >> 38);
      do
      {
        v27 = *v24++;
        *v25++ = v27;
        --v26;
      }
      while (v26);
    }
  }
  *a4 = v19;
  *a5 = (*(_QWORD *)(*(_QWORD *)a1 + 88) + 15760) | 6;
  return result;
}

unint64_t sub_22F349AB8(uint64_t *a1, uint64_t a2)
{
  return sub_22EE3C878(a1, a2, 0, 0, 0, 0);
}

unint64_t sub_22F349ACC(uint64_t *a1, uint64_t a2)
{
  return sub_22EE09E08(*a1, a2, a1[4], 0, 0, 0);
}

uint64_t sub_22F349AE8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 33) & 0x80) == 0)
    return 0;
  if ((*(_BYTE *)(a1 + 60) & 4) == 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 144);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(v2 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2 + 16;
  v5 = 32 * v3 - 32;
  do
  {
    result = sub_22F0EECC0(v4);
    if ((result & 1) != 0)
      break;
    v4 += 32;
    v6 = v5;
    v5 -= 32;
  }
  while (v6);
  return result;
}

unint64_t sub_22F349B78(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  v4 = *(_QWORD *)(*a1 + 88);
  v5 = a1[3];
  v6 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 52);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = sub_22EFD8BB4(a2);
  v11 = sub_22EFD8AC4(v4, v5, v6, v7, v8, v9, v6, v10, *(_QWORD *)(a2 + 80));
  v12 = a1[3];
  v13 = *(_WORD *)(v12 + 8) & 0x7F;
  v14 = v13 > 0x18 || ((1 << v13) & 0x1000006) == 0;
  if (v14 && v13 - 52 >= 6)
    sub_22EFCCFA0(v12, v11);
  return v11;
}

uint64_t sub_22F349C4C(uint64_t *a1, uint64_t a2)
{
  return sub_22EE421CC(a1, a2, 0);
}

uint64_t sub_22F349C54(uint64_t *a1, uint64_t a2)
{
  return sub_22EE42624(a1, a2, 0);
}

unint64_t sub_22F349C5C(uint64_t *a1, uint64_t a2)
{
  return sub_22EE3C878(a1, *(_QWORD *)(a2 + 40), 0, *(uint64_t **)(a2 + 48), 1, 0);
}

unint64_t sub_22F349C74(uint64_t *a1, uint64_t a2, __n128 a3)
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v15[6];

  v15[5] = *MEMORY[0x24BDAC8D0];
  a3.n128_u64[0] = 0x500000000;
  v14 = 0;
  v5 = *(unsigned int **)(a2 + 40);
  v6 = v5[1];
  if ((_DWORD)v6)
  {
    v7 = (unint64_t *)&v5[2 * *v5 + 4];
    v8 = 8 * v6;
    do
    {
      v9 = sub_22EE0A68C(*a1, *v7, a1[4], a3);
      v10 = v14;
      if (v14 >= 5uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v11 = 0;
  }
  v12 = sub_22F33C468((_QWORD *)*a1, *(_DWORD *)(a2 + 24), v15, v11);
  *(_DWORD *)(v12 + 28) &= 0xFFFF9FFF;
  sub_22EFCCFA0(a1[3], v12);
  return v12;
}

unint64_t sub_22F349DB8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_22EE3DF6C(a1, a2, 0, 0);
  if (v4)
  {
    if (*(_QWORD *)(a2 + 144) < 8uLL || (*(_QWORD *)(a2 + 144) & 6) != 0)
      sub_22EFCCFA0(a1[3], v4);
  }
  return v4;
}

uint64_t sub_22F349E18(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42[24];
  unsigned int v43[25];
  char v44;
  unint64_t v45;
  uint64_t v46;
  void *v47[2];
  _QWORD v48[13];
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  void *v52[2];
  _QWORD v53[35];

  v53[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 152);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v5 + 152);
      v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v6 & 4) != 0 && v5);
  }
  v7 = sub_22EE37A18((uint64_t)*a1, *(_DWORD *)(a2 + 24), v5, a1[4], 0);
  if (!v7)
    return 0;
  v8 = (unint64_t)v7;
  v9 = *(_QWORD **)(a2 + 160);
  if (v9)
    v9 = (_QWORD *)*v9;
  v10 = (_QWORD *)*v9;
  v52[0] = v53;
  v11 = v9[2];
  v52[1] = (void *)0x800000000;
  v53[32] = v11;
  v49 = v51;
  v50 = 0x400000000;
  if (*((_DWORD *)v10 + 5))
  {
    v12 = 0;
    v13 = v9 + 3;
    do
    {
      v14 = v13[v12];
      v15 = (uint64_t)&v10[3 * v12 + 5];
      v16 = *(_OWORD *)v15;
      v17 = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v47 = v16;
      v48[0] = v17;
      v48[1] = v14;
      v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v49, (unint64_t)v47, 1);
      v19 = (char *)v49 + 32 * v50;
      v20 = v18[1];
      *v19 = *v18;
      v19[1] = v20;
      v21 = (v50 + 1);
      LODWORD(v50) = v50 + 1;
      ++v12;
    }
    while (v12 != *((_DWORD *)v10 + 5));
    v22 = v49;
  }
  else
  {
    v21 = 0;
    v22 = v51;
  }
  if ((sub_22EE09D78((uint64_t)*a1, (uint64_t)v22, v21, (uint64_t)a1[4]) & 1) == 0)
  {
    v47[0] = v48;
    v47[1] = (void *)0x400000000;
    v23 = 0;
    if ((sub_22ED61988(*a1, (int *)v8, *(_DWORD *)(a2 + 24), (uint64_t)v52, 0, (uint64_t)v47, 1, 0) & 1) != 0)
      goto LABEL_30;
    v46 = 0;
    v25 = sub_22EFE9F28(v8, (uint64_t)v47[0], LODWORD(v47[1]), (uint64_t)&v46);
    v45 = v25;
    v44 = 0;
    if (!v25)
      goto LABEL_26;
    sub_22ED6C90C((uint64_t)*a1, *(unsigned int *)(a2 + 24), *(_BYTE *)(a2 + 180) & 7, v25, *(_BYTE *)(v25 + 180) & 7, *(unsigned int *)(v25 + 176), &v44);
    if ((v26 & 1) == 0)
    {
      v27 = *(_QWORD *)(v25 + 128);
      if (!v27
        && (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v25 + 104) + 96), *(_QWORD *)(v25 + 104)),
            (v27 = *(_QWORD *)(v25 + 128)) == 0)
        || !*(_QWORD *)(v27 + 88)
        || (*(_BYTE *)(a2 + 74) & 1) == 0)
      {
LABEL_26:
        v23 = sub_22EFEB760((*a1)[11], (unsigned __int16)*(_DWORD *)(a2 + 72) >> 13, (uint64_t)a1[3], *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 24), v8, (__int128 *)v47[0], LODWORD(v47[1]), v25);
        if (!v25)
          sub_22EFEA2C8(v8, v23, v46);
        if (!sub_22EE2CDC8((uint64_t)*a1, (uint64_t)a1[4], a2, v23))
        {
          v31 = (*a1)[11];
          v32 = v8 & 0xFFFFFFFFFFFFFFF9;
          v33 = v47[0];
          v34 = LODWORD(v47[1]);
          v35 = sub_22EF6477C(v31, v23);
          v36 = sub_22EF6512C(v31, v32, (uint64_t)v33, v34, v35);
          v37 = sub_22EF64F48((*a1)[11], v32, *(_DWORD *)(a2 + 24), (uint64_t)v52, v36);
          *(_DWORD *)(v23 + 28) = *(_DWORD *)(v23 + 28) & 0xFFFF9FFF | (((*(_DWORD *)(a2 + 28) >> 13) & 3) << 13);
          sub_22F3B1D90(v23, a2, 1);
          *(_BYTE *)(v23 + 180) = *(_BYTE *)(v23 + 180) & 0xF8 | *(_BYTE *)(a2 + 180) & 7;
          sub_22ED6C768(v23, v37);
          v38 = *(_QWORD *)(a2 + 160);
          v39 = v38 ? *(_DWORD *)(v38 + 8) : 0;
          sub_22F3469AC(v23, v39);
          v40 = *(_QWORD *)(a2 + 160);
          v41 = v40 ? *(_DWORD *)(v40 + 12) : 0;
          sub_22ED6C8B0(v23, v41);
          sub_22EFCCFA0((uint64_t)a1[3], v23);
          if ((*(_BYTE *)(a2 + 74) & 1) == 0
            || (sub_22EE0B368((unint64_t)*a1, *(_DWORD *)(a2 + 24), (uint64_t *)v23, a2, a1[4], 1, 1) & 1) == 0)
          {
            goto LABEL_30;
          }
        }
        goto LABEL_29;
      }
      sub_22E8FCA40(*a1, *(_DWORD *)(a2 + 24), 0x1214u, 0, (uint64_t)v43);
      sub_22E890024((uint64_t)v43, (uint64_t *)&v45);
      sub_22E903BEC(v43);
      v28 = *a1;
      v29 = v45;
      v30 = *(_QWORD *)(v45 + 128);
      if (!v30)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v45 + 104) + 96), *(_QWORD *)(v45 + 104));
        v30 = *(_QWORD *)(v29 + 128);
      }
      sub_22E8FCA40(v28, *(_DWORD *)(*(_QWORD *)(v30 + 88) + 24), 0x6Du, 0, (uint64_t)v42);
      sub_22E903BEC(v42);
    }
LABEL_29:
    v23 = 0;
LABEL_30:
    if (v47[0] != v48)
      free(v47[0]);
    goto LABEL_14;
  }
  v23 = 0;
LABEL_14:
  if (v49 != v51)
    free(v49);
  if (v52[0] != v53)
    free(v52[0]);
  return v23;
}

uint64_t sub_22F34A298(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[96];
  void *v18[2];
  _BYTE v19[256];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  v20 = 0;
  v4 = *(_QWORD *)(a2 + 112);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)v5 + 112);
      v5 = v12 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v12 & 4) != 0 && v5);
  }
  v6 = (int *)sub_22EE37A18(*a1, *(_DWORD *)(a2 + 24), v5, (_DWORD *)a1[4], 0);
  if (v6
    && (v7 = v6,
        v20 = *(_QWORD *)(a2 + 408),
        (sub_22EE09D78(*a1, *(_QWORD *)(a2 + 136), *(unsigned int *)(a2 + 144), a1[4]) & 1) == 0))
  {
    v15 = v17;
    v16 = 0x400000000;
    v8 = 0;
    if ((sub_22ED61988((_QWORD *)*a1, v7, *(_DWORD *)(a2 + 24), (uint64_t)v18, 0, (uint64_t)&v15, 1, 0) & 1) == 0)
    {
      v14 = 0;
      v10 = sub_22EFEBC30((unint64_t)v7, (uint64_t)v15, v16, (uint64_t)&v14);
      v13 = 0;
      if (v10
        && (sub_22ED6C90C(*a1, *(unsigned int *)(a2 + 24), *(_BYTE *)(a2 + 420) & 7, v10, *(_BYTE *)(v10 + 420) & 7, *(unsigned int *)(v10 + 416), &v13), (v11 & 1) != 0))
      {
        v8 = 0;
      }
      else
      {
        v8 = sub_22EE439A0((unint64_t *)a1, (unint64_t)v7, a2, (uint64_t)v18, (__int128 *)v15, v16, v10);
      }
    }
    if (v15 != v17)
      free(v15);
  }
  else
  {
    v8 = 0;
  }
  if (v18[0] != v19)
    free(v18[0]);
  return v8;
}

uint64_t sub_22F34A478(_QWORD **a1, uint64_t a2)
{
  unsigned int v4;
  char *v6;
  unsigned int v7[24];

  v4 = sub_22F41A810(*(_QWORD *)((*a1)[13] + 32), 4, "cannot instantiate %0 yet", 0x19uLL);
  sub_22E8FCA40(*a1, *(_DWORD *)(a2 + 24), v4, 0, (uint64_t)v7);
  v6 = sub_22F3AEA44(a2);
  sub_22E8AECC4((uint64_t)v7, (uint64_t *)&v6);
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22F34A4FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v3 = a2[2];
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  return sub_22F3B1F5C(v2, (uint64_t)v4, v5);
}

_QWORD *sub_22F34A548(unint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = *(_QWORD **)(a1 + 120);
  if (!result)
  {
    v5 = sub_22EFC72E8(a1);
    result = (_QWORD *)sub_22E3CD3D4(v5 + 2032, 16, 3);
    *result = 0;
    result[1] = 0;
    *(_QWORD *)(a1 + 120) = result;
  }
  *result = a2;
  return result;
}

uint64_t sub_22F34A594(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int32x2_t v17;
  char v18;
  void *v19[2];
  _DWORD v20[17];
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[17];
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[12];
  _BYTE v37[104];
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[10];

  v40[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 48);
  v22 = 0;
  v23 = a4;
  v24 = 0;
  v25 = 0;
  v26 = v28;
  v27 = 0x400000000;
  v28[16] = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v36;
  v35 = 0x800000000;
  v36[8] = 0;
  v36[9] = 0;
  v36[10] = v37;
  v36[11] = 0x400000000;
  v37[96] = 0;
  v38 = v40;
  v39 = 0x400000000;
  sub_22EE013A8(&v17, a1, a4, a2, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), 3, (uint64_t)&v22, 0);
  v7 = 0;
  if (!v18)
  {
    v9 = *(_QWORD *)(a1 + 216);
    if (v6)
      v10 = v6 + 72;
    else
      v10 = 0;
    v11 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = 0;
    v12 = *(_QWORD *)(a1 + 10288);
    v13 = *(_DWORD *)(a1 + 1944);
    v14 = *(_DWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 216) = v10;
    *(_QWORD *)(a1 + 10288) = 0;
    *(_DWORD *)(a1 + 1944) = *(_DWORD *)(a1 + 1904);
    *(_DWORD *)(a1 + 2192) = *(_DWORD *)(a1 + 1960);
    v19[0] = v20;
    v19[1] = (void *)0x400000000;
    v20[16] = 0;
    v21 = 0;
    sub_22E9F7044((uint64_t)v19, (uint64_t *)a3);
    v15 = *(_QWORD *)(sub_22EFCAD5C(v6 + 72) + 16);
    v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((v15 & 4) != 0)
      v16 = (_QWORD *)*v16;
    v7 = sub_22EE43BF4(a1, v6, (uint64_t)v16, (uint64_t)v19);
    if (v19[0] != v20)
      free(v19[0]);
    if (v9)
    {
      *(_QWORD *)(a1 + 216) = v9;
      *(_QWORD *)(a1 + 3200) = v11;
      *(_QWORD *)(a1 + 10288) = v12;
      *(_DWORD *)(a1 + 1944) = v13;
      *(_DWORD *)(a1 + 2192) = v14;
    }
  }
  sub_22EE014E4(&v17);
  sub_22EDEA410((uint64_t)&v22);
  return v7;
}

uint64_t sub_22F34A788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22E3B9914(a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

unsigned int *sub_22F34A7EC(unsigned int *result, uint64_t a2, int *__src, int *a4)
{
  int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 4 * v8 == a2)
    return (unsigned int *)sub_22F3340DC((uint64_t)result, __src, a4);
  v9 = (a2 - v7) >> 2;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_DWORD *)(v7 + 4 * v9);
  v13 = (_BYTE *)(v7 + 4 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 2;
  if (v14 >= v11)
  {
    result = (unsigned int *)sub_22F34A978((uint64_t)v6, &v13[-4 * v11], (char *)(v7 + 4 * v8));
    if (&v13[-4 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-4 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 2);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 4 * v15 - 4 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

uint64_t sub_22F34A978(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 2) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_DWORD *)(*(_QWORD *)v5 + 4 * v7);
    do
    {
      v9 = *(_DWORD *)v4;
      v4 += 4;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 2);
  return result;
}

BOOL sub_22F34A9F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 341)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F34AA58(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  void **v9;
  char v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v12 = a3;
  if (sub_22F0F083C(&v12) || !sub_22F402030(&v12))
    return 0;
  v13 = v15;
  v14 = 0x200000000;
  v9 = &v13;
  v10 = 0;
  v11 = -1;
  sub_22EE733F4((uint64_t)&v9, v12);
  v7 = sub_22EE66E00(a1, a2, a4, (char *)v13, v14);
  if (v13 != v15)
    free(v13);
  return v7;
}

uint64_t sub_22F34AB40(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  int v6;

  v4 = a3;
  v5 = 0;
  v6 = -1;
  return sub_22EE72E1C((uint64_t)&v4, a2);
}

double sub_22F34AB70@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  double result;
  unint64_t *v10;
  char v11;
  unsigned int v12;
  uint64_t v15[12];
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    sub_22F0AB718(a4 + 24);
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(a2 + 48);
    return result;
  }
  if (*(_DWORD *)a2 == 1)
  {
    v7 = sub_22EE739C0(a1, v6, a3, 0);
    if ((v7 & 1) == 0)
    {
      v8 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)a4 = *(_DWORD *)a2;
      *(_QWORD *)(a4 + 8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      result = 0.0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_QWORD *)(a4 + 48) = v8;
      return result;
    }
    goto LABEL_15;
  }
  if (*(_DWORD *)a2)
  {
    v15[0] = v6;
    if ((sub_22F402030(v15) & 1) != 0)
    {
      sub_22F3455C8(a2, a3, a4);
      return result;
    }
    LODWORD(v16) = *(_DWORD *)(a2 + 48);
    HIDWORD(v16) = v16;
    if (*(_QWORD *)(a2 + 24))
      LODWORD(v16) = *(_DWORD *)(a2 + 16);
    sub_22E8FCA40(a1, a3, 0x1191u, 0, (uint64_t)v15);
    sub_22E8906A0((uint64_t)v15, &v16);
    sub_22E903BEC((unsigned int *)v15);
    goto LABEL_15;
  }
  v10 = sub_22F34ACC0(a1, v6, a3);
  if (v11)
  {
LABEL_15:
    *(_DWORD *)a4 = 0;
    result = 0.0;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    return result;
  }
  v12 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)a4 = *(_DWORD *)a2;
  *(_QWORD *)(a4 + 8) = v10;
  result = 0.0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)(a4 + 48) = v12;
  return result;
}

unint64_t *sub_22F34ACC0(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t *result;
  unint64_t *v6;

  v6 = 0;
  sub_22EE7D634(a2, &v6);
  if (!v6)
    return 0;
  result = sub_22F34AD38(a1, v6, a3, 0);
  if (result)
    return (unint64_t *)sub_22EE7D030((uint64_t)a1, *result, (uint64_t)result);
  return result;
}

_QWORD *sub_22F34AD38(_QWORD *a1, unint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v21[5] = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)(a2 + 1);
  v19 = (_QWORD *)*a2;
  v9 = (uint64_t)v19;
  v20.i64[0] = (uint64_t)(a2 + 1);
  v10 = sub_22F116708((uint64_t *)&v19);
  v11 = sub_22F1167E8((uint64_t *)&v19);
  v12 = sub_22F34AE9C(a1, v9, v10 | (v11 << 32), a3, a4);
  if (v12 < 0x10)
    return 0;
  v13 = v12;
  v19 = v21;
  v20 = vdupq_n_s64(0x20uLL);
  v21[4] = 0;
  sub_22EEB4368((uint64_t)&v19, *a2, v8);
  sub_22EEB5360((uint64_t)&v19, v13, 4uLL, 4);
  *v14 = a3;
  v15 = v20.i64[0] - v20.i64[1];
  v16 = sub_22EF5DB78(a1[11], v13, v20.i32[0] - v20.i32[2]);
  v17 = v19;
  memcpy(v16 + 1, (char *)v19 + v20.i64[1], v15);
  if (v17 != v21 && v17)
    MEMORY[0x2348A0E84](v17, 0x1000C8077774924);
  return v16;
}

unint64_t sub_22F34AE9C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13[24];
  uint64_t v14;

  v14 = a3;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v5 + 17) & 1) != 0)
    return sub_22EF663B4(a1[11], a2, a5);
  v11 = a5;
  v12 = a1;
  v9 = a2;
  v7 = sub_22F1104D8(v5);
  a2 = v9;
  v8 = v7;
  a5 = v11;
  a1 = v12;
  if (v8)
    return sub_22EF663B4(a1[11], a2, a5);
  sub_22E8FCA40(v12, a4, 0x1191u, 0, (uint64_t)v13);
  sub_22E8906A0((uint64_t)v13, &v14);
  sub_22E903BEC(v13);
  return 0;
}

uint64_t sub_22F34AF2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v17;

  v17 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
  return sub_22F34B0D0(v17, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_22F34AFD0(_QWORD *a1, unsigned int a2, int a3)
{
  int v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  unsigned int v14[24];

  switch(a3)
  {
    case 19:
      v6 = 150;
      return sub_22EBBA59C((uint64_t)a1, a2, v6);
    case 32:
      v8 = a1[11];
      v9 = *(_QWORD *)(v8 + 16392);
      v10 = sub_22E3CD3D4(v8 + 2032, 24, 3);
      v11 = sub_22EF579A8(a1[11], v9, a2);
      sub_22EBD096C(v10, v9, (uint64_t)v11, a2);
      break;
    case 20:
      v6 = 136;
      return sub_22EBBA59C((uint64_t)a1, a2, v6);
    default:
      sub_22E8FCA40(a1, a2, 0xD9Fu, 0, (uint64_t)v14);
      v13[0] = sub_22EFFBA38(a3);
      v13[1] = v12;
      sub_22F2F2210((uint64_t)v14, (uint64_t)v13);
      sub_22E903BEC(v14);
      return 1;
  }
  return v10;
}

uint64_t sub_22F34B0D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, uint64_t a10)
{
  int v18;

  *(_BYTE *)a1 = 124;
  if (byte_255E04EB3)
    sub_22F3F189C(124);
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a7;
  if ((a10 & 0xFF00000000) != 0)
    v18 = a10 + 1;
  else
    v18 = 0;
  *(_DWORD *)(a1 + 24) = a9;
  *(_DWORD *)(a1 + 28) = v18;
  *(_DWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a8;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AB234(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F34B190(uint64_t a1, const void **a2, const void **a3)
{
  const void **v5;
  const void *v6;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = *v5++;
      sub_22E3BA850(a1, v6);
    }
    while (v5 != a3);
  }
  return a1;
}

unint64_t sub_22F34B1F4(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, char a9)
{
  unint64_t v9;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unsigned int v17[25];
  char v18;

  v9 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0;
  if (a5)
  {
    v18 = 0;
    v13 = sub_22EF66DE0(a1[11], v9, a4, a5, &v18, 0);
    v9 = v13;
    if (v18)
    {
      sub_22E8FCA40(a1, 0, 0xE5Cu, 0, (uint64_t)v17);
      v16 = __PAIR64__(a8, a3);
      sub_22E8906A0((uint64_t)v17, (uint64_t *)&v16);
      sub_22E903BEC(v17);
      v14 = 0;
      if (!a9)
        return v9;
    }
    else
    {
      v14 = v13;
    }
    if (a9)
    {
      v9 = v14;
      if (v14 <= 0xF)
        return 0;
    }
    else
    {
      return v14;
    }
  }
  return v9;
}

unint64_t sub_22F34B2D0(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int *a5, uint64_t a6, int a7)
{
  unsigned int v8;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;

  v8 = a4;
  v11 = sub_22EF667E8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16888), 0, 0, a3, a4, 0);
  v12 = sub_22F36CC4C(*(_QWORD *)(a1 + 88), v11);
  v13 = sub_22EF5DB78(*(_QWORD *)(a1 + 88), v12, 0);
  v14 = *v13;
  *((_DWORD *)v13 + 2) = 0;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = sub_22F115954(v15);
  v17 = ((unint64_t)v13 + v16 + 11) / v16 * v16;
  *(_BYTE *)(v17 + 0x10) = 0;
  v18 = *(_QWORD *)(v15 + 24);
  v19 = ((HIWORD(*(_DWORD *)(v15 + 16)) & 0x3F8u) + 4 * (*(_DWORD *)(v15 + 16) >> 26) + 31) & 0x7F8;
  v20 = sub_22F115954(v18);
  sub_22F115E94(*(_QWORD *)(a1 + 88), v18, (_QWORD *)((v17 + v20 + v19 - 1) / v20 * v20), 0);
  *(_QWORD *)v17 = 0;
  *(_DWORD *)(v17 + 8) = a2;
  *(_DWORD *)(v17 + 12) = a7;
  v21 = v8;
  if (v8)
  {
    v22 = v17 + 24;
    do
    {
      v23 = *a5++;
      *(_DWORD *)(v22 + 8 * ((*(_QWORD *)(v15 + 16) >> 19) & 0x7FLL)) = v23;
      v22 += 4;
      --v21;
    }
    while (v21);
  }
  v24 = sub_22E3CD3D4(a1 + 8360, 32, 4);
  v25 = *(_DWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  if (v12 >= 0x10)
    v26 = v12;
  else
    v26 = v24 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v24 = v24;
  *(_QWORD *)(v24 + 8) = v26;
  *(_DWORD *)(v24 + 16) = v25 | *(_DWORD *)(v24 + 16) & 0xFFF80000 | 0x39;
  *(_QWORD *)(v24 + 24) = v13;
  return v24 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F34B478(uint64_t a1, uint64_t a2)
{
  return sub_22F36C098(*(_QWORD *)(a1 + 88), a2, 1);
}

unint64_t sub_22F34B484(uint64_t a1, uint64_t a2)
{
  return sub_22F36C098(*(_QWORD *)(a1 + 88), a2, 0);
}

unint64_t sub_22F34B490(_QWORD *a1, int a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14[24];
  unint64_t *v15;
  unsigned int v16;
  char v17;
  unsigned __int8 v18;

  v18 = a2;
  if ((a3[1] & 0x40) != 0)
    return sub_22F36C4B8(a1[11], a2, a3);
  v16 = 32;
  v15 = 0;
  v17 = 1;
  v7 = 0;
  if ((sub_22EB261BC((uint64_t)a1, (uint64_t)a3, (uint64_t)&v15, 1) & 1) == 0)
  {
    if (v16 >= 0x41)
      v8 = v15;
    else
      v8 = (unint64_t *)&v15;
    v9 = *v8;
    if ((a2 & 1) != 0 || v9 > 1)
    {
      if (!a2 || v9)
      {
        v11 = *(_QWORD *)(a1[11] + 15088);
        if (v9 <= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11))
        {
          v7 = sub_22F36C2DC(a1[11], a2, v9);
          goto LABEL_11;
        }
        sub_22E8FCA40(a1, a4, 0xB83u, 0, (uint64_t)v14);
        v12 = sub_22E894E38((uint64_t)v14, &v18);
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
        sub_22EE7E71C(v12, &v13);
        goto LABEL_10;
      }
      sub_22E8FCA40(a1, a4, 0xB82u, 0, (uint64_t)v14);
      LODWORD(v13) = 1;
    }
    else
    {
      sub_22E8FCA40(a1, a4, 0xB82u, 0, (uint64_t)v14);
      LODWORD(v13) = 0;
    }
    sub_22E8900C4((uint64_t)v14, (int *)&v13);
LABEL_10:
    sub_22E903BEC(v14);
    v7 = 0;
  }
LABEL_11:
  if (v16 >= 0x41)
  {
    if (v15)
      MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
  }
  return v7;
}

unint64_t sub_22F34B664(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned int v6[24];

  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 >= 2)
  {
    sub_22E8FCA40(a1, a3, 0xFD1u, 0, (uint64_t)v6);
    sub_22E903BEC(v6);
    return 0;
  }
  v4 = a2;
  if ((sub_22EE7E080(a1, a2, a3, 0) & 1) != 0)
    return 0;
  if ((*(_DWORD *)(a1[9] + 52) & 0x40000000) != 0)
    v4 = sub_22EE7E40C((uint64_t)a1, v4);
  return sub_22F36A4F8(a1[11], v4);
}

void sub_22F34B71C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F34B748()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 12912);
  if (!result)
  {
    result = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v0 + 80) + 544), "_Nonnull", 8uLL);
    *(_QWORD *)(v0 + 12912) = result;
  }
  return result;
}

unint64_t sub_22F34B7F0(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = sub_22F36E044(v4);
  v6 = *(_QWORD *)(v5 + 48);
  if (v6)
    v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  else
    v7 = sub_22EF6462C(v4, v5);
  v8 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v7, a2);
  v9 = sub_22E3CD3D4(a1 + 8360, 32, 4);
  v10 = *(_DWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  if (v7 >= 0x10)
    v11 = v7;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v9 = v9;
  *(_QWORD *)(v9 + 8) = v11;
  *(_DWORD *)(v9 + 16) = v10 | *(_DWORD *)(v9 + 16) & 0xFFF80000 | 0x39;
  *(_QWORD *)(v9 + 24) = v8;
  return v9 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F34B8AC(_QWORD *a1, uint64_t *a2, int a3, unsigned __int8 *a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v18[24];

  v8 = *a2;
  v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  if ((a4[2] & 1) == 0)
  {
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v11 & 8) != 0)
      v12 = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
    else
      v12 = 0;
    if (!sub_22EE8A0C4(a1, v12, a3, a5))
      return sub_22EF5DD84(a1[11], *a2, a3);
    return 0;
  }
  v13 = *(_QWORD *)v9;
  v14 = *(unsigned __int8 *)(*(_QWORD *)v9 + 16);
  if (v13)
    v15 = v14 == 16;
  else
    v15 = 0;
  if (v15)
  {
LABEL_10:
    sub_22E8FCA40(a1, a5, 0xADAu, 0, (uint64_t)v18);
    sub_22E903BEC(v18);
    return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 16)
  {
    if (sub_22F10CF48(v13))
      goto LABEL_10;
    v8 = *a2;
  }
  return sub_22F36BE34(a1[11], v8, a4, a5);
}

unint64_t sub_22F34B9D4(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, int a4)
{
  int v9;

  v9 = 0;
  if (sub_22EE8A134(a1, &v9, (uint64_t)a3, a4))
    return sub_22F34B8AC(a1, a2, v9, a3, a4);
  else
    return 0;
}

uint64_t sub_22F34BA4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  result = sub_22F10D774(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v4 = result;
    while (1)
    {
      v5 = sub_22F10D4DC(v4);
      if (v5 != sub_22F10D4DC(*v2))
        return 0;
      if ((sub_22F40A7F0(v4) & 1) != 0)
        break;
      v2 = (uint64_t *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
      result = sub_22F10D774(*v2);
      v4 = result;
      if (!result)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t sub_22F34BAD0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v7;

  sub_22EFF605C(a2);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
  {
    v7 = v4;
    sub_22EE8AB8C(a1, a2);
    v4 = v7;
    v5 = *(_QWORD *)(a2 + 8);
  }
  return sub_22EE8B0B0(a1, v4, v5);
}

uint64_t sub_22F34BB60(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  llvm *v4;
  void *v5;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD v17[2];
  unsigned int v18;

  v3 = a3;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  if (a3)
  {
    v8[0] = sub_22EFC72E8(a2);
    v8[1] = sub_22EFC72E8(v3);
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0;
    v14 = v17;
    v15 = 0;
    v16 = 65792;
    v3 = sub_22F3794DC((uint64_t)v8, a2, v3);
    sub_22F2BB8CC((uint64_t)v8);
    v5 = (void *)(16 * v18);
    v4 = (llvm *)v17[0];
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  llvm::deallocate_buffer(v4, v5);
  return v3;
}

unint64_t sub_22F34BC1C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13[24];
  uint64_t v14;
  _BYTE v15[100];
  int v16;
  uint64_t v17;

  v17 = a2;
  v16 = a4;
  v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v9 = a2;
  if ((*(_BYTE *)(v8 + 17) & 4) != 0)
    return sub_22F36D328(a1[11], a2, v9, 0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 44)
  {
    sub_22E8FCA40(a1, a4, 0x1119u, 0, (uint64_t)v15);
    v12 = (unsigned int *)v15;
LABEL_9:
    sub_22E903BEC(v12);
    return 0;
  }
  v14 = 0;
  if (sub_22F1110EC(v8, &v14))
  {
    sub_22E8FCA40(a1, a4, 0x13C1u, 0, (uint64_t)v13);
    sub_22E8901B8((uint64_t)v13, &v17);
    sub_22E903BEC(v13);
    sub_22E8FCA40(a1, *(_DWORD *)(v14 + 24), 0x66u, 0, (uint64_t)v13);
    sub_22E890024((uint64_t)v13, &v14);
    v12 = v13;
    goto LABEL_9;
  }
  v10 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
  sub_22EB17F48(a1, v10, &v16, 1, 0, 0, 0, 0);
  v9 = sub_22E496830(v10);
  return sub_22F36D328(a1[11], a2, v9, 0);
}

uint64_t sub_22F34BD7C(uint64_t result, char *a2, uint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = a2;
  v6 = result;
  v7 = a4 - a2;
  v8 = *(unsigned int *)(result + 8);
  if (v8 + ((a4 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v6 + 8);
  }
  if (v5 != a4)
  {
    v9 = (_QWORD *)(*(_QWORD *)v6 + 8 * v8);
    do
    {
      v10 = *(_QWORD *)v5;
      v5 += 8;
      *v9++ = v10;
    }
    while (v5 != a4);
  }
  *(_DWORD *)(v6 + 8) = v8 + (v7 >> 3);
  return result;
}

uint64_t sub_22F34BDFC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_22E817D2C(a2 + 2, a3);
  sub_22E817D2C(a2, a3);
  sub_22E828580(a1 + 24, a3);
  return sub_22E828580(a1 + 8, a3);
}

_DWORD *sub_22F34BE54(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = 0;
LABEL_8:
    v6 = sub_22F34BF00(a1, a2, v10);
    *v6 = *a2;
    v6[3] = 0;
    *(_QWORD *)(v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = *a2 & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v7 == -1;
      if (v12)
        v8 = v6;
      v13 = v5 + v9++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v10 = v8;
    else
      v10 = v6;
    goto LABEL_8;
  }
  return v6;
}

_DWORD *sub_22F34BF00(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_22EE93048(a1, v6);
    v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      v15 = v14 - 1;
      v16 = *a2 & v15;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v16);
      v17 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v18 = 1;
      while (v17)
      {
        if (v12)
          v19 = 0;
        else
          v19 = v17 == -1;
        if (v19)
          v12 = a3;
        v20 = v16 + v18++;
        v16 = v20 & v15;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v16);
        v17 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_24:
    a3 = 0;
    goto LABEL_3;
  }
  sub_22EE93048(a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_24;
  v9 = v8 - 1;
  v10 = *a2 & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11)
  {
    if (v12)
      v21 = 0;
    else
      v21 = v11 == -1;
    if (v21)
      v12 = a3;
    v22 = v10 + v13++;
    v10 = v22 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_10:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unsigned int *sub_22F34C070(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  uint64_t v8;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v8 = **(_QWORD **)(a1 + 16);
  sub_22E8901B8((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F34C0E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22F34C0FC(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  unsigned int v6[24];
  uint64_t v7;
  int v8;

  v7 = a4;
  sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 8), 0, (uint64_t)v6);
  v8 = **(_DWORD **)(a1 + 16);
  sub_22E8900C4((uint64_t)v6, &v8);
  sub_22E8901B8((uint64_t)v6, &v7);
  return sub_22E903BEC(v6);
}

void sub_22F34C170()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F34C184(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;

  v2 = a1[2];
  if (!v2)
  {
    v5 = a1[1];
    v6 = v5 + 1;
    do
    {
      v7 = v6 > 2 * v5;
      v5 *= 2;
    }
    while (v7);
    sub_22EEB52C0(a1, v5);
    v2 = a1[2];
  }
  v3 = v2 - 1;
  a1[2] = v3;
  return *a1 + v3;
}

uint64_t sub_22F34C1DC(uint64_t a1)
{
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;

  if (!*(_BYTE *)(a1 + 113))
  {
    v3 = *(_BYTE *)(a1 + 88);
    *(_BYTE *)(a1 + 88) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = sub_22EEB575C((uint64_t *)a1, &v14);
    v6 = sub_22EFC72E8(*(_QWORD *)(a1 + 8));
    sub_22EED0A54(v4, v5, v6, (_BYTE *)(a1 + 40), &v13);
    v7 = v13;
    v13 = 0;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    if (v8)
    {
      v9 = sub_22EEB7B04(v8);
      MEMORY[0x2348A0E9C](v9, 0x10A0C4073B7F643);
      v10 = v13;
      v13 = 0;
      if (v10)
      {
        v11 = sub_22EEB7B04((uint64_t)v10);
        MEMORY[0x2348A0E9C](v11, 0x10A0C4073B7F643);
      }
    }
    *(_BYTE *)(a1 + 113) = 1;
    v12 = *(uint64_t ***)(a1 + 120);
    if (v12)
      sub_22EEB5CAC(*(_QWORD *)(a1 + 24), v12);
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 88) = v3;
  }
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_22F34C2D0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1 + 128;
  result = *(_QWORD *)(a1 + 128);
  if (!result)
  {
    result = sub_22EEB5AAC(a1);
    if (result)
    {
      v4 = result;
      v5 = operator new();
      result = sub_22F34CDEC(v5, v4);
      v6 = *(_QWORD *)v3;
      *(_QWORD *)v3 = result;
      if (v6)
      {
        sub_22EEB7CA4(v3, v6);
        return *(_QWORD *)v3;
      }
    }
  }
  return result;
}

uint64_t sub_22F34C344(llvm *a1)
{
  llvm::raw_ostream *v2;
  uint64_t result;
  uint64_t (**v4)(void);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  v5[0] = &off_24FAB94F0;
  v6 = v5;
  sub_22EEB6CE0((uint64_t)a1, v2, (uint64_t)v5);
  result = (uint64_t)v6;
  if (v6 == v5)
  {
    v4 = (uint64_t (**)(void))(v5[0] + 32);
  }
  else
  {
    if (!v6)
      return result;
    v4 = (uint64_t (**)(void))(*v6 + 40);
  }
  return (*v4)();
}

_QWORD *sub_22F34C3EC(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22EEB7B50((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F34C448(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F34C448(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EEB7BE4((uint64_t)a1, v7);
  v9 = 0;
  sub_22EEB7B50((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

uint64_t sub_22F34C4F8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22EEB7B50(v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_22F34C5A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F34C5BC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FAB94F0;
  return result;
}

void sub_22F34C5E0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FAB94F0;
}

uint64_t sub_22F34C5FC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_22F25B234((uint64_t *)v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F34C6CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9[2];
  _QWORD v10[21];

  v10[20] = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  sub_22E47EDD0(a1, (a2 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  v9[0] = v10;
  v9[1] = (void *)0x1400000000;
  sub_22F34C798((uint64_t *)(a1 + 80), &v8, (uint64_t)v9);
  if (v9[0] != v10)
    free(v9[0]);
  return a1;
}

uint64_t *sub_22F34C798(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  *a1 = (uint64_t)(a1 + 2);
  a1[1] = 0x1400000000;
  if (*(_DWORD *)(a3 + 8))
  {
    sub_22F24C890((uint64_t)a1, a3);
    v6 = *a1;
    v7 = *((unsigned int *)a1 + 2);
    v8 = *a2;
    a1[22] = *a2;
    v12 = v8;
    if (v7 >= 2)
    {
      v9 = (unint64_t)(v7 - 2) >> 1;
      v10 = v9 + 1;
      v11 = (uint64_t *)(v6 + 8 * v9);
      do
      {
        sub_22EEBD550(v6, (uint64_t)&v12, v7, v11--);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    a1[22] = *a2;
  }
  return a1;
}

_QWORD *sub_22F34C854(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v2 = *(unsigned int *)(a2 + 48);
    v3 = v2 >> 6;
    v4 = *(_QWORD *)(*result + 8 * (v2 >> 6));
    v5 = 1 << v2;
    if ((v5 & v4) == 0)
    {
      *(_QWORD *)(*result + 8 * v3) = v5 | v4;
      return (_QWORD *)sub_22F34C88C(result + 10, a2);
    }
  }
  return result;
}

BOOL sub_22F34C88C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *((_DWORD *)a1 + 2);
  if (v4 >= *((_DWORD *)a1 + 3))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *((_DWORD *)a1 + 2);
  }
  *(_QWORD *)(*a1 + 8 * v4) = a2;
  v5 = (*((_DWORD *)a1 + 2) + 1);
  *((_DWORD *)a1 + 2) = v5;
  v6 = *a1;
  v7 = *a1 + 8 * v5;
  v9 = a1[22];
  return sub_22EEBD6B4(v6, v7, (uint64_t)&v9, v5);
}

uint64_t sub_22F34C908(uint64_t a1, llvm::raw_ostream *a2, _QWORD *a3, uint64_t a4)
{
  _BYTE *v7;
  _BYTE v9[72];

  sub_22EED1E00((uint64_t)v9, (uint64_t)a3, a4);
  sub_22EED2000(a2, a3, a1, (uint64_t)v9, 0);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v7 + 1;
    *v7 = 10;
  }
  return sub_22EED1FAC((uint64_t)v9);
}

uint64_t sub_22F34C998(uint64_t a1)
{
  _QWORD *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  _BYTE v6[864];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 112);
  sub_22F1D4454((uint64_t)v6);
  v4 = (llvm::raw_ostream *)llvm::errs(v3);
  sub_22F34C908(a1, v4, v2, (uint64_t)v6);
  return sub_22E54B4D4((uint64_t)v6);
}

uint64_t sub_22F34CA1C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = &a2[a3];
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a1 + 40;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (a3)
  {
    sub_22F3EA0C0(*a2);
    *(_OWORD *)v4 = v7;
    *(_QWORD *)(v4 + 16) = v8;
    sub_22F3EA0C0(**(_QWORD **)a1);
    *(_OWORD *)v5 = v9;
    *(_QWORD *)(v5 + 16) = v10;
    sub_22EED946C((uint64_t **)a1);
  }
  return a1;
}

uint64_t sub_22F34CAB4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F34CB34((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return result;
}

_QWORD *sub_22F34CB34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F33A234(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F34CBF0((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F34CBF0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 16;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EEDA2B4((uint64_t)a1, v6);
  v8 = 0;
  sub_22F33A234((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F34CCAC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F33A234((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F34CD6C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F33A3F0((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

uint64_t sub_22F34CDEC(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  sub_22E47EDD0(a1, (v3 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t sub_22F34CE40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;

  v6 = *(_DWORD *)(a3 + 48);
  if ((*(_QWORD *)(*a1 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
  {
    sub_22EEDEFF4((uint64_t)a1, a3);
    *(_QWORD *)(*a1 + 8 * ((unint64_t)v6 >> 6)) |= 1 << v6;
  }
  return (*(_QWORD *)(*((_QWORD *)sub_22F34CED8((uint64_t)(a1 + 9), (int *)&v6) + 1)
                    + (((unint64_t)*(unsigned int *)(a2 + 48) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(a2 + 48)) & 1;
}

_DWORD *sub_22F34CED8(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22EEDF2D0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F34CF58(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x600000000;
    v5[18] = 0;
  }
  return v5;
}

_DWORD *sub_22F34CF58(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_22EEDF36C(a1, v6);
    v8 = 0;
    sub_22EEDF2D0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F34D00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  void *v11;
  _DWORD *v12;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 80 * v6;
    do
    {
      *v7 = -1;
      v7 += 20;
      v8 -= 80;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_22EEDF2D0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
        v10 = v12;
        *v12 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 1) = v10 + 6;
        *((_QWORD *)v10 + 2) = 0x600000000;
        if (*(_DWORD *)(v4 + 16))
          sub_22E861AD8((uint64_t)(v10 + 2), v4 + 8);
        v10[18] = *(_DWORD *)(v4 + 72);
        ++*(_DWORD *)(a1 + 8);
        v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11)
          free(v11);
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

_DWORD *sub_22F34D108(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22EEDF2D0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F34CF58(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x600000000;
    v5[18] = 0;
  }
  return v5;
}

uint64_t sub_22F34D184(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    llvm::deallocate_buffer(*(llvm **)v2, (void *)(16 * *(unsigned int *)(v2 + 16)));
    MEMORY[0x2348A0E9C](v2, 0x1020C405AF6BDC9);
  }
  return a1;
}

uint64_t sub_22F34D1D8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a3;
  if (!a3)
  {
    v11 = sub_22F10B9CC(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v11 + 104) + 96), *(_QWORD *)(v11 + 104));
    if ((**(_QWORD **)(v11 + 128) & 0x100000000000) == 0)
    {
      v12 = *(_QWORD *)(a2 + 16);
      if ((v12 & 4) == 0 || !sub_22F3B2674(v12 & 0xFFFFFFFFFFFFFFF8))
        return 0;
    }
  }
  v8 = *(_QWORD *)(a2 + 16);
  if ((v8 & 4) != 0)
  {
    if (sub_22F3B2674(v8 & 0xFFFFFFFFFFFFFFF8))
      v5 = 0;
  }
  if (!a4)
  {
    v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
LABEL_7:
    result = sub_22E3CD3D4(v9, 32, 3);
    *(_DWORD *)(result + 8) = 5;
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = a2;
    *(_QWORD *)result = off_24FAB9760;
    return result;
  }
  v13 = a4[1];
  sub_22F34D2F8((uint64_t)a1, *a4);
  v15 = v14;
  v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v15)
    goto LABEL_7;
  result = sub_22E3CD3D4(v9, 48, 3);
  *(_DWORD *)(result + 8) = 6;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)result = off_24FAB9788;
  *(_QWORD *)(result + 32) = v13;
  *(_QWORD *)(result + 40) = v15;
  return result;
}

void sub_22F34D2F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F34D320(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  result = sub_22E3CD3D4(*a1 & 0xFFFFFFFFFFFFFFF8, 24, 3);
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)result = off_24FAB9878;
  return result;
}

void sub_22F34D3B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 20);
  v4 = sub_22E3CD3D4(*a1 & 0xFFFFFFFFFFFFFFF8, 32, 3);
  *(_DWORD *)(v4 + 8) = 10;
  *(_QWORD *)v4 = off_24FAB9850;
  *(_QWORD *)(v4 + 16) = v2;
  *(_DWORD *)(v4 + 24) = v3;
  JUMPOUT(0x22F34D3ACLL);
}

void sub_22F34D3F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = sub_22E3CD3D4(*a1 & 0xFFFFFFFFFFFFFFF8, 24, 3);
  *(_DWORD *)(v3 + 8) = 4;
  *(_QWORD *)v3 = off_24FAB98A0;
  *(_QWORD *)(v3 + 16) = v2;
  JUMPOUT(0x22F34D3ACLL);
}

void sub_22F34D428(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 20);
  v4 = sub_22E3CD3D4(*a1 & 0xFFFFFFFFFFFFFFF8, 40, 3);
  *(_DWORD *)(v4 + 8) = 9;
  *(_QWORD *)v4 = off_24FAB9800;
  *(_QWORD *)(v4 + 16) = v2;
  *(_DWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 32) = 0;
  JUMPOUT(0x22F34D3ACLL);
}

uint64_t sub_22F34D468(_QWORD *a1, uint64_t a2)
{
  return sub_22F34D1D8(a1, *(_QWORD *)(a2 + 8), 0, *(uint64_t **)a2);
}

uint64_t sub_22F34D480(_QWORD *a1, uint64_t *a2)
{
  return sub_22F34D498(a1, a2[1], *a2);
}

uint64_t sub_22F34D498(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
    __asm { BR              X10 }
  result = sub_22E3CD3D4(*a1 & 0xFFFFFFFFFFFFFFF8, 32, 3);
  *(_DWORD *)(result + 8) = 5;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_24FAB9760;
  return result;
}

uint64_t sub_22F34D610(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_22F34D1D8(a1, *(_QWORD *)(a3 + 8), v3, *(uint64_t **)a3);
}

uint64_t sub_22F34D62C()
{
  return 0;
}

void sub_22F34D638()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D650()
{
  JUMPOUT(0x2348A0E9CLL);
}

_BYTE *sub_22F34D664(uint64_t a1)
{
  _BYTE *result;

  result = (_BYTE *)sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  if (*result != 106)
    return 0;
  return result;
}

void sub_22F34D690()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D6A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D6C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F34D6D4(uint64_t a1)
{
  if (**(_BYTE **)(*(_QWORD *)(a1 + 16) + 8) == 106)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  else
    return 0;
}

void sub_22F34D6F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F34D704(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24) + 32);
  if (!v1)
    return 0;
  if (*v1 == 106)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24) + 32);
  return 0;
}

void sub_22F34D734()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D74C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D764()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D77C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F34D794()
{
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22F34D7A8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE v9[24];
  unsigned __int8 *v10;
  __int128 v11[3];
  uint64_t v12;

  result = sub_22EEDF554(a1, a2);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = a1 + 16;
  if (v7 + ((unint64_t)*(unsigned int *)(v6 + 16) << 6) != result)
  {
    v8 = result;
    v10 = sub_22EFFE844(a3);
    v11[0] = *(_OWORD *)(v8 + 8);
    v11[1] = *(_OWORD *)(v8 + 24);
    v11[2] = *(_OWORD *)(v8 + 40);
    v12 = *(_QWORD *)(v8 + 56);
    return sub_22F34E37C((uint64_t)v9, v6, (uint64_t *)&v10, v11);
  }
  return result;
}

_QWORD *sub_22F34D83C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  _QWORD *result;
  _QWORD *v8;
  int *v9;
  int v10;
  _BYTE v11[24];
  unsigned __int8 *v12;
  __int128 v13;

  result = (_QWORD *)sub_22EEDF554(a1, a2);
  if ((_QWORD *)(*(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6)) != result)
  {
    v8 = result;
    v9 = (int *)(result + 1);
    result = (_QWORD *)sub_22EEDF660((_DWORD *)result + 2, *(_QWORD *)(a1 + 8));
    if ((_DWORD)result)
    {
      v10 = (int)result;
      v12 = sub_22EFFE844(a3);
      LODWORD(v13) = 1;
      DWORD2(v13) = v10;
      result = (_QWORD *)sub_22F34E37C((uint64_t)v11, a1 + 16, (uint64_t *)&v12, &v13);
    }
    if (a4)
    {
      if ((*v9 & 0xFFFFFFFE) == 4)
        return sub_22EEDF734(*(_QWORD *)(a1 + 8), *v9, v8[2], a4);
    }
  }
  return result;
}

_QWORD *sub_22F34D928(uint64_t a1, unsigned __int8 *a2, int a3)
{
  _QWORD *result;
  int v7;
  _BYTE v8[24];
  unsigned __int8 *v9;
  __int128 v10;

  result = (_QWORD *)sub_22EEDF554(a1, a2);
  if ((_QWORD *)(*(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6)) == result)
  {
    if (a3)
    {
      v9 = sub_22EFFE844(a2);
      LODWORD(v10) = 1;
      DWORD2(v10) = a3;
      return (_QWORD *)sub_22F34E37C((uint64_t)v8, a1 + 16, (uint64_t *)&v9, &v10);
    }
  }
  else
  {
    v7 = *((_DWORD *)result + 2);
    if ((v7 & 0xFFFFFFFE) == 4)
      return sub_22EEDF734(*(_QWORD *)(a1 + 8), v7, result[2], a3);
  }
  return result;
}

uint64_t sub_22F34D9E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  __int128 v19;

  v6 = sub_22E8BBA74(a3);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    v6 = sub_22F10ACF8(v7);
  result = sub_22EEE0018(v6);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a3 + 29) & 1) == 0)
      goto LABEL_5;
    sub_22EFC8E88(a3);
    v11 = *(uint64_t **)v10;
    v12 = *(unsigned int *)(v10 + 8);
    v13 = *(uint64_t **)v10;
    if ((_DWORD)v12)
    {
      v16 = 8 * v12;
      v13 = *(uint64_t **)v10;
      while (*(_WORD *)(*v13 + 32) != 299)
      {
        ++v13;
        v16 -= 8;
        if (!v16)
          goto LABEL_5;
      }
    }
    if (v13 == &v11[v12])
    {
LABEL_5:
      v9 = sub_22EEE0080(v6);
    }
    else
    {
      do
      {
        v15 = *v11++;
        v14 = v15;
      }
      while (*(_WORD *)(v15 + 32) != 299);
      v9 = dword_22F49CA00[*(int *)(v14 + 36)];
    }
    v18 = a2;
    LODWORD(v19) = 1;
    DWORD2(v19) = v9;
    return sub_22F34E37C((uint64_t)v17, a1 + 16, &v18, &v19);
  }
  return result;
}

unint64_t sub_22F34DB08(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE v14[24];
  uint64_t v15;
  __int128 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 - 19 >= 2)
  {
    if (v4 < 2)
      return sub_22F34D7A8(result, *(unsigned __int8 **)(a2 + 16), (unsigned __int8 *)a2);
  }
  else
  {
    v5 = sub_22EEDF554(result, *(unsigned __int8 **)(a2 + 16));
    result = sub_22EEDF554(v3, *(unsigned __int8 **)(a2 + 24));
    v7 = *(_QWORD *)(v3 + 16);
    v6 = v3 + 16;
    v8 = v7 + ((unint64_t)*(unsigned int *)(v6 + 16) << 6);
    if (v8 == v5 || *(_DWORD *)(v5 + 8) != 2)
    {
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v5 + 24);
    }
    if (v8 == result || *(_DWORD *)(result + 8) != 2)
    {
      v11 = 0;
      v12 = 0;
    }
    else
    {
      v11 = *(_QWORD *)(result + 16);
      v12 = *(_QWORD *)(result + 24);
    }
    if (v9 | v11)
    {
      v13 = (*(_DWORD *)a2 & 0xFC0000) == 5242880;
      v15 = a2;
      LODWORD(v16) = 3;
      *((_QWORD *)&v16 + 1) = a2;
      v17 = v13;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      v21 = v12;
      return sub_22F34E37C((uint64_t)v14, v6, &v15, &v16);
    }
  }
  return result;
}

_QWORD *sub_22F34DC44(uint64_t *a1, unsigned __int8 *a2)
{
  _QWORD *result;
  unint64_t v5;

  result = (_QWORD *)sub_22EFFA604(*(unsigned __int8 **)&a2[a2[3]]);
  if (result)
  {
    v5 = (unint64_t)result;
    if ((*((_DWORD *)result + 7) & 0x7Eu) - 52 <= 5)
    {
      if (sub_22F000594((uint64_t)a2))
      {
        return sub_22F34D83C((uint64_t)a1, *(unsigned __int8 **)&a2[8 * (((unint64_t)*(unsigned int *)a2 >> 18) & 1)+ 8+ ((unint64_t)*(unsigned int *)a2 >> 24)], a2, 3);
      }
      else
      {
        sub_22EEDFA54(a1, a2, 0, v5);
        return (_QWORD *)sub_22F34D9E4((uint64_t)a1, (uint64_t)a2, v5);
      }
    }
  }
  return result;
}

_DWORD *sub_22F34DD00(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11;

  result = (_DWORD *)sub_22EEDF554(a1, *(unsigned __int8 **)(a2 + 24));
  v5 = a1 + 16;
  if ((_DWORD *)(*(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6)) != result)
  {
    v6 = result[2];
    result += 2;
    if ((v6 & 0xFFFFFFFE) != 2)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = sub_22EEDF660(result, v7);
      v10 = a2;
      *((_DWORD *)sub_22F29449C(v7 + 40, &v10) + 2) = v8;
      v10 = a2;
      LODWORD(v11) = 5;
      *((_QWORD *)&v11 + 1) = a2;
      return (_DWORD *)sub_22F34E37C((uint64_t)v9, v5, &v10, &v11);
    }
  }
  return result;
}

uint64_t sub_22F34DDB0(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned __int8 *v6;

  result = sub_22F060FB4((uint64_t)a2);
  if (result)
  {
    v5 = result;
    v6 = (unsigned __int8 *)sub_22F060ED0((uint64_t)a2);
    sub_22EEDFA54(a1, a2, v6, v5);
    return sub_22F34D9E4((uint64_t)a1, (uint64_t)a2, v5);
  }
  return result;
}

uint64_t sub_22F34DE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 48);
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v12 = *(uint64_t **)v11;
    v13 = *(unsigned int *)(v11 + 8);
    v14 = *(uint64_t **)v11;
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      v14 = *(uint64_t **)v11;
      while (*(_WORD *)(*v14 + 32) != 277)
      {
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_2;
      }
    }
    if (v14 != &v12[v13])
    {
      do
      {
        v17 = *v12++;
        v16 = v17;
      }
      while (*(_WORD *)(v17 + 32) != 277);
      v18 = dword_22F49CA00[*(int *)(v16 + 36)];
      goto LABEL_19;
    }
  }
LABEL_2:
  if (sub_22EEE0018(v4))
  {
    v19 = v4;
    goto LABEL_18;
  }
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  result = *(_QWORD *)v5;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v7 == 41)
  {
    v8 = sub_22F10ACF8(result);
    v9 = sub_22EEE0018(v8);
    result = *(_QWORD *)v5;
    if (!v9)
    {
      v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      goto LABEL_6;
    }
    v19 = sub_22F10ACF8(result);
LABEL_18:
    v18 = sub_22EEE0080(v19);
LABEL_19:
    v20 = *(_QWORD *)(a1 + 8);
    v21 = a2;
    result = (uint64_t)sub_22F29449C(v20 + 16, &v21);
    *(_DWORD *)(result + 8) = v18;
    return result;
  }
LABEL_6:
  if ((v7 & 0xFE) == 0x28)
  {
    v10 = sub_22F10ACF8(result);
    result = sub_22EEE0018(v10);
    if ((_DWORD)result)
    {
      v18 = 1;
      goto LABEL_19;
    }
  }
  return result;
}

void sub_22F34DF6C(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int v6;

  v4 = *(_DWORD *)(*(_QWORD *)a1 + 56);
  if (v4)
  {
    v5 = sub_22EEDF554(a1, *(unsigned __int8 **)(a2 + 8));
    if (*(_QWORD *)(a1 + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) != v5)
    {
      v6 = sub_22EEDF660((_DWORD *)(v5 + 8), *(_QWORD *)(a1 + 8));
      if (v6 != v4)
        (*(void (**)(_QWORD, _QWORD, char *, _QWORD, char *, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 64)
                                                                               + 56))(*(_QWORD *)(*(_QWORD *)a1 + 64), *(unsigned int *)(a2 + 4), off_24FAB9908[v4 - 1], qword_22F49C9C8[v4 - 1], off_24FAB9920[v6], qword_22F49C9E0[v6]);
    }
  }
  sub_22EEE0310(*(_QWORD *)(a1 + 8), *(_DWORD *)(a2 + 4), *(_QWORD *)(*(_QWORD *)a1 + 64));
}

unint64_t sub_22F34E030(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11[3];
  uint64_t v12;

  result = sub_22EEDF554(a1, *(unsigned __int8 **)(a2 + 16));
  v6 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 16;
  if (v6 + ((unint64_t)*(unsigned int *)(v5 + 16) << 6) != result)
  {
    v7 = (*(_DWORD *)a2 >> 18) & 0x1F;
    if (v7 != 9)
    {
      if (v7 != 4)
        return result;
      v10 = a2;
      v11[0] = *(_OWORD *)(result + 8);
      v11[1] = *(_OWORD *)(result + 24);
      v11[2] = *(_OWORD *)(result + 40);
      v12 = *(_QWORD *)(result + 56);
      v8 = v5;
      return sub_22F34E37C((uint64_t)v9, v8, &v10, v11);
    }
    if ((*(_DWORD *)(result + 8) & 0xFFFFFFFE) == 2)
    {
      sub_22F34E110((uint64_t)v11, result + 8);
      v10 = a2;
      v8 = v5;
      return sub_22F34E37C((uint64_t)v9, v8, &v10, v11);
    }
  }
  return result;
}

double sub_22F34E110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  double result;

  if (*(_DWORD *)a2 == 3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16) == 0;
    v6 = *(_QWORD *)(a2 + 24);
    v7 = dword_22F49CA10[*(int *)(a2 + 32)];
    v8 = *(_QWORD *)(a2 + 40);
    v9 = dword_22F49CA10[*(int *)(a2 + 48)];
    *(_DWORD *)a1 = 3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_DWORD *)(a1 + 48) = v9;
  }
  else if (*(_DWORD *)a2 == 2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    v3 = dword_22F49CA10[*(int *)(a2 + 16)];
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_22F34E1B4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 8 * a2);
  if (v6)
    return sub_22EEE0500(v6, a3);
  v8 = a2;
  v9 = *a4;
  if (*a4)
  {
    *a4 = 0;
    result = *(_QWORD *)(a1 + 8 * a2);
    *(_QWORD *)(a1 + 8 * a2) = v9;
    if (!result)
      return result;
LABEL_7:
    sub_22F2F206C(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  v10 = operator new();
  *(_BYTE *)v10 = *(_BYTE *)a3;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  sub_22E5D08E0(v10 + 16, a3 + 16);
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_DWORD *)(v10 + 56) = 0;
  result = *(_QWORD *)(a1 + 8 * v8);
  *(_QWORD *)(a1 + 8 * v8) = v10;
  if (result)
    goto LABEL_7;
  return result;
}

uint64_t sub_22F34E28C(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8 * a2);
  v6 = *a3;
  if (v5)
    return sub_22EEE0500(v5, v6);
  *a3 = 0;
  result = *(_QWORD *)(a1 + 8 * a2);
  *(_QWORD *)(a1 + 8 * a2) = v6;
  if (result)
  {
    sub_22F2F206C(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t sub_22F34E2E8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 6));
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 6));
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

uint64_t sub_22F34E37C(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  v15 = 0;
  result = sub_22F34E2E8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v15);
  v9 = v15;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F34E428(a2, a3, v15);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v12 = *a4;
    v13 = a4[1];
    v14 = a4[2];
    *(_QWORD *)(result + 56) = *((_QWORD *)a4 + 6);
    *(_OWORD *)(result + 40) = v14;
    *(_OWORD *)(result + 24) = v13;
    *(_OWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + ((unint64_t)*(unsigned int *)(a2 + 16) << 6);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F34E428(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EEE1F68(a1, v6);
  v8 = 0;
  sub_22F34E2E8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F34E4D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = v6 << 6;
    do
    {
      *v7 = -4096;
      v7 += 8;
      v8 -= 64;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v14 = 0;
      result = sub_22F34E2E8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v14);
      v10 = v14;
      *v14 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 40);
      v10[7] = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(v10 + 5) = v13;
      *(_OWORD *)(v10 + 3) = v12;
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 64;
  }
  return result;
}

uint64_t sub_22F34E5B0(uint64_t a1, uint64_t a2, const std::string::value_type *a3, std::string::size_type a4)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;

  v19 = *(_QWORD *)a2;
  v20 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v21 = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  LOBYTE(v19) = 1;
  sub_22F35AAFC(&v19, a3, a4, (uint64_t)&v22);
  v8 = v24;
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 4) = 172;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0xACu, v23);
  if (v25)
  {
    v11 = v24;
    if (v24)
    {
      v12 = (unsigned int *)(v24 + 8);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v25 = 0;
  }
  result = v21;
  if (v21)
  {
    v16 = (unsigned int *)(v21 + 8);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F34E6C4(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFD228(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 346;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x15Au, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F34E78C(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFD9B0(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 172;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0xACu, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

uint64_t sub_22F34E85C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = "any_dre";
  v5[1] = 7;
  v2 = sub_22F34E8E0(a1, (uint64_t)v5);
  if (a1 + 8 != v2)
  {
    v3 = *(unsigned int *)(v2 + 56);
    if ((_DWORD)v3)
    {
      if (v3 == 346)
        return *(_QWORD *)(v2 + 64);
      while (1)
      {
        v3 = dword_24FABB2A0[4 * v3];
        if (!(_DWORD)v3)
          break;
        if (v3 == 346)
          return *(_QWORD *)(v2 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34E8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_22E6D5F34(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_22E6D5FB8(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t sub_22F34E96C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = "any_ds";
  v5[1] = 6;
  v2 = sub_22F34E8E0(a1, (uint64_t)v5);
  if (a1 + 8 != v2)
  {
    v3 = *(unsigned int *)(v2 + 56);
    if ((_DWORD)v3)
    {
      if (v3 == 185)
        return *(_QWORD *)(v2 + 64);
      while (1)
      {
        v3 = dword_24FABB2A0[4 * v3];
        if (!(_DWORD)v3)
          break;
        if (v3 == 185)
          return *(_QWORD *)(v2 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34E9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = sub_22F34E8E0(a1, (uint64_t)v7);
  if (a1 + 8 != v4)
  {
    v5 = *(unsigned int *)(v4 + 56);
    if ((_DWORD)v5)
    {
      if (v5 == 172)
        return *(_QWORD *)(v4 + 64);
      while (1)
      {
        v5 = dword_24FABB2A0[4 * v5];
        if (!(_DWORD)v5)
          break;
        if (v5 == 172)
          return *(_QWORD *)(v4 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34EA68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = "op";
  v5[1] = 2;
  v2 = sub_22F34E8E0(a1, (uint64_t)v5);
  if (a1 + 8 != v2)
  {
    v3 = *(unsigned int *)(v2 + 56);
    if ((_DWORD)v3)
    {
      if (v3 == 421)
        return *(_QWORD *)(v2 + 64);
      while (1)
      {
        v3 = dword_24FABB2A0[4 * v3];
        if (!(_DWORD)v3)
          break;
        if (v3 == 421)
          return *(_QWORD *)(v2 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34EAEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = "arraySubscr";
  v5[1] = 11;
  v2 = sub_22F34E8E0(a1, (uint64_t)v5);
  if (a1 + 8 != v2)
  {
    v3 = *(unsigned int *)(v2 + 56);
    if ((_DWORD)v3)
    {
      if (v3 == 288)
        return *(_QWORD *)(v2 + 64);
      while (1)
      {
        v3 = dword_24FABB2A0[4 * v3];
        if (!(_DWORD)v3)
          break;
        if (v3 == 288)
          return *(_QWORD *)(v2 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34EB70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = "ptrAdd";
  v5[1] = 6;
  v2 = sub_22F34E8E0(a1, (uint64_t)v5);
  if (a1 + 8 != v2)
  {
    v3 = *(unsigned int *)(v2 + 56);
    if ((_DWORD)v3)
    {
      if (v3 == 293)
        return *(_QWORD *)(v2 + 64);
      while (1)
      {
        v3 = dword_24FABB2A0[4 * v3];
        if (!(_DWORD)v3)
          break;
        if (v3 == 293)
          return *(_QWORD *)(v2 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34EBF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = "ptrAddPtr";
  v5[1] = 9;
  v2 = sub_22F34E8E0(a1, (uint64_t)v5);
  if (a1 + 8 != v2)
  {
    v3 = *(unsigned int *)(v2 + 56);
    if ((_DWORD)v3)
    {
      if (v3 == 281)
        return *(_QWORD *)(v2 + 64);
      while (1)
      {
        v3 = dword_24FABB2A0[4 * v3];
        if (!(_DWORD)v3)
          break;
        if (v3 == 281)
          return *(_QWORD *)(v2 + 64);
      }
    }
  }
  return 0;
}

uint64_t sub_22F34EC78(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(172, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 172;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0xACu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F34ED14(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9AC0;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F34ED6C(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9AC0;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F34EDD4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F34EDE4()
{
  return 0;
}

uint64_t sub_22F34EDEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v16;
  unsigned __int8 *v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  _DWORD v21[7];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_QWORD *)v8 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v8 + 16) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v18[0] = v8;
  v18[1] = a3;
  v18[2] = a4;
  v19 = v21;
  v20 = 0x100000000;
  v21[6] = 1;
  v22 = 0;
  v16 = sub_22F379890(a2);
  v17 = a2;
  v12 = sub_22EEE8528((uint64_t)v18, &v16);
  v13 = (char *)v19;
  if ((_DWORD)v20)
  {
    v14 = 24 * v20;
    do
    {
      sub_22E5EFB0C((uint64_t)&v13[v14 - 24], *(char **)&v13[v14 - 16]);
      v14 -= 24;
    }
    while (v14);
    v13 = (char *)v19;
  }
  if (v13 != (char *)v21)
    free(v13);
  return v12;
}

BOOL sub_22F34EF24(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int *v4;
  uint64_t v5;
  _BOOL8 v6;
  char *v7;
  uint64_t v8;
  unsigned int v10;
  unsigned __int8 *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)(a1 + 16);
  v12 = v14;
  v13 = 0x100000000;
  if (v4[2])
    sub_22EEF4FFC((uint64_t)&v12, v4);
  v5 = *(_QWORD *)a1;
  v10 = sub_22F379890(a2);
  v11 = a2;
  v6 = 1;
  if (sub_22F35A7A4(v5, &v10, *(_QWORD *)(a1 + 8), (uint64_t)&v12))
  {
    sub_22F35AC10(a1 + 24, (uint64_t)&v12);
    *(_BYTE *)(a1 + 68) = 1;
    if (*(_DWORD *)(a1 + 64) != 1)
      v6 = 0;
  }
  v7 = (char *)v12;
  if ((_DWORD)v13)
  {
    v8 = 24 * v13;
    do
    {
      sub_22E5EFB0C((uint64_t)&v7[v8 - 24], *(char **)&v7[v8 - 16]);
      v8 -= 24;
    }
    while (v8);
    v7 = (char *)v12;
  }
  if (v7 != (char *)v14)
    free(v7);
  return v6;
}

void sub_22F34F048(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F34F0B4((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F34F0B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *a1;
    v5 = 24 * v2;
    do
    {
      v6 = (uint64_t *)(a2 + v3);
      *v6 = *(_QWORD *)(v4 + v3);
      v7 = (uint64_t *)(v4 + v3 + 8);
      v8 = *v7;
      *(_QWORD *)(a2 + v3 + 8) = *v7;
      v9 = a2 + v3 + 8;
      v10 = *(_QWORD *)(v4 + v3 + 16);
      v6[2] = v10;
      if (v10)
      {
        *(_QWORD *)(v8 + 16) = v9;
        *(_QWORD *)(v4 + v3) = v7;
        *v7 = 0;
        *(_QWORD *)(v4 + v3 + 16) = 0;
      }
      else
      {
        *v6 = v9;
      }
      v3 += 24;
    }
    while (v5 != v3);
    v11 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      v13 = 24 * v11;
      do
      {
        sub_22E5EFB0C(v12 + v13 - 24, *(char **)(v12 + v13 - 16));
        v13 -= 24;
      }
      while (v13);
    }
  }
}

uint64_t *sub_22F34F15C(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = sub_22E617DDC(a1, a2, &v13, &v12, a3);
  result = (uint64_t *)*v6;
  if (!*v6)
  {
    sub_22EEF53A0((uint64_t)a1, a4, (uint64_t)&v11);
    v8 = v13;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v8;
    *v6 = (uint64_t)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v9 = (uint64_t *)*v6;
    }
    sub_22E49FD00(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  return result;
}

uint64_t sub_22F34F204(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  if ((v2 & 0xFFFFFFFFFFFFFFFCLL) != 4 && (v2 & 4) != 0)
    a2 = v2 & 0xFFFFFFFFFFFFFFF8;
  return sub_22EEFB798(a1, a2);
}

uint64_t sub_22F34F228(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;

  if (!a2)
    return 1;
  result = sub_22F34F290(a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28);
    if ((v5 & 0x7Eu) - 52 >= 6)
    {
      v6 = v5 & 0x7F;
      if (v6 != 1 && v6 != 24)
        return sub_22EEF54B8(a1, a2);
    }
    return 1;
  }
  return result;
}

BOOL sub_22F34F290(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  _BOOL8 v6;
  char *v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)(a1 + 16);
  v12 = v14;
  v13 = 0x100000000;
  if (v4[2])
    sub_22EEF4FFC((uint64_t)&v12, v4);
  v5 = *(_QWORD *)a1;
  v10 = sub_22F379878(a2);
  v11 = a2;
  v6 = 1;
  if (sub_22F35A7A4(v5, &v10, *(_QWORD *)(a1 + 8), (uint64_t)&v12))
  {
    sub_22F35AC10(a1 + 24, (uint64_t)&v12);
    *(_BYTE *)(a1 + 68) = 1;
    if (*(_DWORD *)(a1 + 64) != 1)
      v6 = 0;
  }
  v7 = (char *)v12;
  if ((_DWORD)v13)
  {
    v8 = 24 * v13;
    do
    {
      sub_22E5EFB0C((uint64_t)&v7[v8 - 24], *(char **)&v7[v8 - 16]);
      v8 -= 24;
    }
    while (v8);
    v7 = (char *)v12;
  }
  if (v7 != (char *)v14)
    free(v7);
  return v6;
}

uint64_t sub_22F34F3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  if (sub_22EFCB718(a2))
    v4 = sub_22EFCAE04(a2);
  else
    v4 = 0;
  result = sub_22EEF8724(a1, v4);
  if ((_DWORD)result)
  {
    v6 = sub_22F255ABC(a2);
    if (v6 == v7)
    {
      return 1;
    }
    else
    {
      v8 = v7;
      v9 = v6 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 8;
      }
      while (!v10);
    }
  }
  return result;
}

uint64_t sub_22F34F444(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22EEF8724(a1, a2 + 40);
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F34F4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0 && v5)
  {
    if ((sub_22EEF7850(a1, *v5, (uint64_t)(v5 + 1)) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_22F34F228(a1);
    if (!(_DWORD)result)
      return result;
  }
  if (sub_22EFCB718(a2))
    v6 = sub_22EFCAE04(a2);
  else
    v6 = 0;
  result = sub_22EEF8724(a1, v6);
  if ((_DWORD)result)
  {
    v8 = sub_22F255ABC(a2);
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      v10 = v9;
      v11 = v8 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v11 - 8));
        if ((_DWORD)result)
          v12 = v11 == v10;
        else
          v12 = 1;
        v11 += 8;
      }
      while (!v12);
    }
  }
  return result;
}

uint64_t sub_22F34F584(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  result = sub_22F3506C8(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 80);
    v13 = *(_QWORD *)(a2 + 40);
    v14 = v5;
    v15 = v6;
    result = sub_22EEF7794(a1, &v13);
    if ((_DWORD)result)
    {
      v7 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22EEF8724(a1, v7);
      if ((_DWORD)result)
      {
        v8 = sub_22F255ABC(a2);
        if (v8 == v9)
        {
          return 1;
        }
        else
        {
          v10 = v9;
          v11 = v8 + 8;
          do
          {
            result = sub_22EEF87C8(a1, *(_QWORD *)(v11 - 8));
            if ((_DWORD)result)
              v12 = v11 == v10;
            else
              v12 = 1;
            v11 += 8;
          }
          while (!v12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34F654(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22EEF8724(a1, a2 + 48);
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F34F6C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22F3506C8(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F34F738(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;

  v4 = *(unint64_t **)(a2 + 64);
  if (v4)
  {
    if ((sub_22EEF7850(a1, *v4, (uint64_t)(v4 + 1)) & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 56));
    if (!(_DWORD)result)
      return result;
  }
  v5 = sub_22F255ABC(a2);
  if (v5 == v6)
    return 1;
  v7 = v6;
  v8 = v5 + 8;
  do
  {
    result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
    if ((_DWORD)result)
      v10 = v8 == v7;
    else
      v10 = 1;
    v8 += 8;
  }
  while (!v10);
  return result;
}

uint64_t sub_22F34F7D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22EEF91E8(a1, *(_QWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22EEF8724(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F34F86C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22EEF91E8(a1, a2[7]);
  if ((_DWORD)result)
  {
    result = sub_22F34F228(a1);
    if ((_DWORD)result)
    {
      if ((uint64_t *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2) != a2
        || (result = sub_22EEF92A8(a1, (unint64_t)a2), (_DWORD)result))
      {
        v5 = sub_22EFCB718((uint64_t)a2) ? sub_22EFCAE04((uint64_t)a2) : 0;
        result = sub_22EEF8724(a1, v5);
        if ((_DWORD)result)
        {
          v6 = sub_22F255ABC((uint64_t)a2);
          if (v6 == v7)
          {
            return 1;
          }
          else
          {
            v8 = v7;
            v9 = v6 + 8;
            do
            {
              result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
              if ((_DWORD)result)
                v10 = v9 == v8;
              else
                v10 = 1;
              v9 += 8;
            }
            while (!v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34F948(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22EEF91E8(a1, a2[7]);
  if ((_DWORD)result)
  {
    result = sub_22F34F228(a1);
    if ((_DWORD)result)
    {
      if ((uint64_t *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2) != a2
        || (result = sub_22EEF9388(a1, (unint64_t)a2), (_DWORD)result))
      {
        v5 = sub_22EFCB718((uint64_t)a2) ? sub_22EFCAE04((uint64_t)a2) : 0;
        result = sub_22EEF8724(a1, v5);
        if ((_DWORD)result)
        {
          v6 = sub_22F255ABC((uint64_t)a2);
          if (v6 == v7)
          {
            return 1;
          }
          else
          {
            v8 = v7;
            v9 = v6 + 8;
            do
            {
              result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
              if ((_DWORD)result)
                v10 = v9 == v8;
              else
                v10 = 1;
              v9 += 8;
            }
            while (!v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34FA24(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F34F228(a1);
  if ((_DWORD)result)
  {
    result = sub_22EEF91E8(a1, *(_QWORD *)(a2 + 56));
    if ((_DWORD)result)
    {
      v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22EEF8724(a1, v5);
      if ((_DWORD)result)
      {
        v6 = sub_22F255ABC(a2);
        if (v6 == v7)
        {
          return 1;
        }
        else
        {
          v8 = v7;
          v9 = v6 + 8;
          do
          {
            result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
            if ((_DWORD)result)
              v10 = v9 == v8;
            else
              v10 = 1;
            v9 += 8;
          }
          while (!v10);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34FAD0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22EEF91E8(a1, a2[7]);
  if ((_DWORD)result)
  {
    result = sub_22F34F228(a1);
    if ((_DWORD)result)
    {
      if ((uint64_t *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2) != a2
        || (result = sub_22EEF94C8(a1, (unint64_t)a2), (_DWORD)result))
      {
        v5 = sub_22EFCB718((uint64_t)a2) ? sub_22EFCAE04((uint64_t)a2) : 0;
        result = sub_22EEF8724(a1, v5);
        if ((_DWORD)result)
        {
          v6 = sub_22F255ABC((uint64_t)a2);
          if (v6 == v7)
          {
            return 1;
          }
          else
          {
            v8 = v7;
            v9 = v6 + 8;
            do
            {
              result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
              if ((_DWORD)result)
                v10 = v9 == v8;
              else
                v10 = 1;
              v9 += 8;
            }
            while (!v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34FBAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int *v12;

  result = sub_22F34F228(a1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 72) < 8uLL || (*(_QWORD *)(a2 + 72) & 6) == 2;
    if (v5 || (v12 = sub_22F259350(a2), result = sub_22EEF85E0(a1, (uint64_t)v12), (_DWORD)result))
    {
      result = sub_22EEF91E8(a1, *(_QWORD *)(a2 + 56));
      if ((_DWORD)result)
      {
        v6 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
        result = sub_22EEF8724(a1, v6);
        if ((_DWORD)result)
        {
          v7 = sub_22F255ABC(a2);
          if (v7 == v8)
          {
            return 1;
          }
          else
          {
            v9 = v8;
            v10 = v7 + 8;
            do
            {
              result = sub_22EEF87C8(a1, *(_QWORD *)(v10 - 8));
              if ((_DWORD)result)
                v11 = v10 == v9;
              else
                v11 = 1;
              v10 += 8;
            }
            while (!v11);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34FC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a2 + 120);
  if ((v4 & 4) != 0)
  {
    v14 = 0;
    while (1)
    {
      v15 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v14 >= *(unsigned int *)(v15 + 16))
        break;
      sub_22EEF91E8(a1, *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * v14++));
      v4 = *(_QWORD *)(a2 + 120);
      if ((v4 & 4) == 0)
        goto LABEL_2;
    }
    v5 = *(_QWORD *)v15;
    v6 = *(_QWORD *)(v15 + 8);
  }
  else
  {
LABEL_2:
    v5 = 0;
    v6 = 0;
  }
  result = sub_22F3506C8(a1, v5, v6);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(a2 + 128);
    if ((v8 & 4) == 0
      || (v8 & 0xFFFFFFFFFFFFFFF8) == 0
      || (result = sub_22EEF7850(a1, *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) + 8),
          (_DWORD)result))
    {
      result = sub_22EEF8724(a1, a2 + 64);
      if ((_DWORD)result)
      {
        v9 = sub_22F255ABC(a2);
        if (v9 == v10)
        {
          return 1;
        }
        else
        {
          v11 = v10;
          v12 = v9 + 8;
          do
          {
            result = sub_22EEF87C8(a1, *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v11;
            else
              v13 = 1;
            v12 += 8;
          }
          while (!v13);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34FD74(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22F350E04(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_22EEF8724(a1, a2 + 64);
    if ((_DWORD)result)
    {
      v5 = sub_22F255ABC(a2);
      if (v5 == v6)
      {
        return 1;
      }
      else
      {
        v7 = v6;
        v8 = v5 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
          if ((_DWORD)result)
            v9 = v8 == v7;
          else
            v9 = 1;
          v8 += 8;
        }
        while (!v9);
      }
    }
  }
  return result;
}

uint64_t sub_22F34FDF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22F350E7C(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_22EEF8724(a1, a2 + 64);
    if ((_DWORD)result)
    {
      v5 = sub_22F255ABC(a2);
      if (v5 == v6)
      {
        return 1;
      }
      else
      {
        v7 = v6;
        v8 = v5 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
          if ((_DWORD)result)
            v9 = v8 == v7;
          else
            v9 = 1;
          v8 += 8;
        }
        while (!v9);
      }
    }
  }
  return result;
}

uint64_t sub_22F34FE6C(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unint64_t ***)(a2 + 160);
  if (!v4 || !*v4 || (result = sub_22EEF7850(a1, **v4, (uint64_t)(*v4 + 1)), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 120);
    if ((v6 & 4) != 0)
    {
      v9 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      v7 = *v9;
      v8 = v9[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    result = sub_22F3506C8(a1, v7, v8);
    if ((_DWORD)result)
    {
      result = sub_22EEF8724(a1, a2 + 64);
      if ((_DWORD)result)
      {
        v10 = sub_22F255ABC(a2);
        if (v10 == v11)
        {
          return 1;
        }
        else
        {
          v12 = v11;
          v13 = v10 + 8;
          do
          {
            result = sub_22EEF87C8(a1, *(_QWORD *)(v13 - 8));
            if ((_DWORD)result)
              v14 = v13 == v12;
            else
              v14 = 1;
            v13 += 8;
          }
          while (!v14);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F34FF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_20;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EEF7850(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_20:
    if (sub_22EFCB718(a2))
      v7 = sub_22EFCAE04(a2);
    else
      v7 = 0;
    result = sub_22EEF8724(a1, v7);
    if ((_DWORD)result)
    {
      v8 = sub_22F255ABC(a2);
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        v10 = v9;
        v11 = v8 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v11 - 8));
          if ((_DWORD)result)
            v12 = v11 == v10;
          else
            v12 = 1;
          v11 += 8;
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F34FFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EEF7850(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
    v7 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22EEF8724(a1, v7);
    if ((_DWORD)result)
    {
      v8 = sub_22F255ABC(a2);
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        v10 = v9;
        v11 = v8 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v11 - 8));
          if ((_DWORD)result)
            v12 = v11 == v10;
          else
            v12 = 1;
          v11 += 8;
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F350094(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F3506C8(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22EEF8724(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F350134(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F3506C8(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22EEF8724(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F3501D4(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = sub_22EEF95B0(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22F255ABC(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v8 - 8));
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F350240(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22F350EF4(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22EEF8724(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F3502D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  result = sub_22EEF99DC(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
    result = sub_22EEF8724(a1, v5);
    if ((_DWORD)result)
    {
      v6 = sub_22F255ABC(a2);
      if (v6 == v7)
      {
        return 1;
      }
      else
      {
        v8 = v7;
        v9 = v6 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
          if ((_DWORD)result)
            v10 = v9 == v8;
          else
            v10 = 1;
          v9 += 8;
        }
        while (!v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F350370(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  result = sub_22EEF99DC(a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 100);
    if ((_DWORD)v5)
    {
      v6 = a2 + 104;
      v7 = 8 * v5;
      while ((sub_22F34F228(a1) & 1) != 0)
      {
        v6 += 8;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
      return 0;
    }
    else
    {
LABEL_6:
      if (sub_22EFCB718(a2))
        v8 = sub_22EFCAE04(a2);
      else
        v8 = 0;
      result = sub_22EEF8724(a1, v8);
      if ((_DWORD)result)
      {
        v9 = sub_22F255ABC(a2);
        if (v9 == v10)
        {
          return 1;
        }
        else
        {
          v11 = v10;
          v12 = v9 + 8;
          do
          {
            result = sub_22EEF87C8(a1, *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v11;
            else
              v13 = 1;
            v12 += 8;
          }
          while (!v13);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F35043C(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(unint64_t ***)(a2 + 120);
  if (!v4 || !*v4 || (result = sub_22EEF7850(a1, **v4, (uint64_t)(*v4 + 1)), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if ((v6 & 4) != 0)
    {
      v9 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      v7 = *v9;
      v8 = v9[1];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    result = sub_22F3506C8(a1, v7, v8);
    if ((_DWORD)result)
    {
      v10 = sub_22EFCB718(a2) ? sub_22EFCAE04(a2) : 0;
      result = sub_22EEF8724(a1, v10);
      if ((_DWORD)result)
      {
        v11 = sub_22F255ABC(a2);
        if (v11 == v12)
        {
          return 1;
        }
        else
        {
          v13 = v12;
          v14 = v11 + 8;
          do
          {
            result = sub_22EEF87C8(a1, *(_QWORD *)(v14 - 8));
            if ((_DWORD)result)
              v15 = v14 == v13;
            else
              v15 = 1;
            v14 += 8;
          }
          while (!v15);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F350518(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *(_DWORD **)(a2 + 56);
  v7 = *v4;
  v6 = (uint64_t *)(v4 + 4);
  v5 = v7;
  if (!v7)
    return sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 48));
  v8 = 8 * v5;
  while ((sub_22EEF9A60(a1, *v6) & 1) != 0)
  {
    ++v6;
    v8 -= 8;
    if (!v8)
      return sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 48));
  }
  return 0;
}

uint64_t sub_22F350588(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(_DWORD **)(a2 + 40);
  v7 = *v4;
  v6 = (uint64_t *)(v4 + 4);
  v5 = v7;
  if (v7)
  {
    v8 = 8 * v5;
    while ((sub_22EEF9A60(a1, *v6) & 1) != 0)
    {
      ++v6;
      v8 -= 8;
      if (!v8)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if (sub_22EFCB718(a2))
      v9 = sub_22EFCAE04(a2);
    else
      v9 = 0;
    result = sub_22EEF8724(a1, v9);
    if ((_DWORD)result)
    {
      v11 = sub_22F255ABC(a2);
      if (v11 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v12;
        v14 = v11 + 8;
        do
        {
          result = sub_22EEF87C8(a1, *(_QWORD *)(v14 - 8));
          if ((_DWORD)result)
            v15 = v14 == v13;
          else
            v15 = 1;
          v14 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

uint64_t sub_22F35064C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = sub_22EFCAE04(a2);
  result = sub_22EEF8724(a1, v4);
  if ((_DWORD)result)
  {
    v6 = sub_22F255ABC(a2);
    if (v6 == v7)
    {
      return 1;
    }
    else
    {
      v8 = v7;
      v9 = v6 + 8;
      do
      {
        result = sub_22EEF87C8(a1, *(_QWORD *)(v9 - 8));
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 8;
      }
      while (!v10);
    }
  }
  return result;
}

uint64_t sub_22F3506C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22F3506C8(a1, v5), (_DWORD)result))
  {
    v6 = sub_22F0AAB60(a2);
    if (v6 > 6)
      return 1;
    v7 = v6;
    result = 1;
    if (((1 << v7) & 0x67) == 0)
    {
      v9 = sub_22F0AB4E0((uint64_t)v11);
      result = sub_22EEF7850(a1, v9, v10);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22F350764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  return sub_22EEF7850(a1, v5, (a3 + (unint64_t)v6 + 11) / v6 * v6);
}

uint64_t sub_22F3507B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  return sub_22EEF7850(a1, v5, (a3 + (unint64_t)v6 + 7) / v6 * v6);
}

uint64_t sub_22F350804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_22F115954(v5);
  return sub_22EEF7850(a1, v5, (a3 + (unint64_t)v6 + 3) / v6 * v6);
}

uint64_t sub_22F350854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a3;
  result = sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 24));
  if ((_DWORD)result)
  {
    if (!*(_QWORD *)(a2 + 40))
      return 1;
    result = sub_22F3506C8(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
    if ((_DWORD)result)
    {
      sub_22F40B320(&v17, (uint64_t)v16);
      result = sub_22EEF7794(a1, v16);
      if ((_DWORD)result)
      {
        v7 = *(_DWORD *)(v17 + 20);
        if (!v7)
          return 1;
        v8 = 0;
        v9 = 24 * v7 - 24;
        v10 = 56;
        do
        {
          v11 = *(_QWORD *)(v18 + v10);
          v13 = *(_OWORD *)(v17 + v8 + 48);
          v14 = *(_QWORD *)(v17 + v8 + 64);
          v15 = v11;
          result = sub_22EEF85E0(a1, (uint64_t)&v13);
          if (!(_DWORD)result)
            break;
          v10 += 8;
          v12 = v9 == v8;
          v8 += 24;
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F350934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 32);
  if (!v6 || (result = sub_22F3506C8(a1, v6, *(_QWORD *)(a3 + 8)), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = sub_22F115954(v7);
    return sub_22EEF7850(a1, v7, (a3 + (unint64_t)v8 + 15) / v8 * v8);
  }
  return result;
}

uint64_t sub_22F3509B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = sub_22F115954(v5);
  return sub_22EEF7850(a1, v5, (a3 + (unint64_t)v6 + 3) / v6 * v6);
}

uint64_t sub_22F350A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;

  v6 = *(_QWORD **)(a3 + 8);
  if (v6)
  {
    if ((sub_22EEF7850(a1, *v6, v6 + 1) & 1) != 0)
    {
LABEL_3:
      v7 = *(_QWORD *)(a2 + 32);
      v8 = sub_22F115954(v7);
      return sub_22EEF7850(a1, v7, (a3 + (unint64_t)v8 + 15) / v8 * v8);
    }
  }
  else if (sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF0))
  {
    goto LABEL_3;
  }
  return 0;
}

uint64_t sub_22F350A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v15;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) == a2
    || (v7 = ((HIWORD(*(_DWORD *)(a2 + 16)) & 0x3F8u) + 4 * (*(_DWORD *)(a2 + 16) >> 26) + 31) & 0x7F8,
        v8 = sub_22F115954(*(_QWORD *)(a2 + 24)),
        result = sub_22EEF7850(a1, v6, (a3 + (unint64_t)v8 + v7 - 1) / v8 * v8),
        (_DWORD)result))
  {
    v10 = (*(_DWORD *)(a2 + 16) >> 19) & 0x7F;
    if ((_DWORD)v10)
    {
      v11 = (_QWORD *)(a3 + 24);
      v12 = v10 - 1;
      do
      {
        v13 = (_QWORD *)*v11++;
        result = sub_22EEF7850(a1, *v13, v13 + 1);
        v15 = v12-- != 0;
      }
      while ((_DWORD)result && v15);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F350B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_22F350CE8(a1, *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    v7 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)(a2 + 40);
      v9 = (uint64_t *)(a3 + 16);
      v10 = v7 - 1;
      do
      {
        v11 = *v9++;
        v14 = *v8;
        v15 = *((_QWORD *)v8 + 2);
        v16 = v11;
        result = sub_22EEF85E0(a1, (uint64_t)&v14);
        v13 = v10-- != 0;
        if (!(_DWORD)result)
          break;
        v8 = (__int128 *)((char *)v8 + 24);
      }
      while (v13);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F350BF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = a2[3];
  if (*(_QWORD **)(v4 & 0xFFFFFFFFFFFFFFF0) == a2 || (result = sub_22EEF7FC0(a1, v4), (_DWORD)result))
  {
    v6 = (a2[2] >> 19) & 0x7FLL;
    if (v6)
    {
      v7 = a2 + 6;
      v8 = 8 * v6 - 8;
      do
      {
        v9 = *v7++;
        result = sub_22EEF7FC0(a1, v9);
        if ((_DWORD)result)
          v10 = v8 == 0;
        else
          v10 = 1;
        v8 -= 8;
      }
      while (!v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F350C78(uint64_t a1, uint64_t a2)
{
  int v4;

  if ((*(_BYTE *)(a2 + 18) & 0x10) != 0)
  {
    do
    {
      a2 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (a2)
      {
        v4 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0xFE) == 0x28)
          continue;
      }
      a2 = sub_22F10CF48(a2);
      v4 = *(_DWORD *)(a2 + 16);
    }
    while ((v4 & 0x100000) != 0);
  }
  return sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 32));
}

uint64_t sub_22F350CE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_22F350CE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = a2;
  v3 = sub_22F0F09E0(&v6);
  if (v3)
    return (sub_22F350D60(a1, *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0;
  v4 = sub_22F0F0964(&v6);
  if (!v4)
    return 1;
  result = sub_22F350D60(a1, *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22F350D60(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t result;
  unint64_t v8;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22F350D60(a1, v4), (_DWORD)result))
  {
    v5 = sub_22F0AAB60(a2);
    if (v5 > 6)
      return 1;
    v6 = v5;
    result = 1;
    if (((1 << v6) & 0x67) == 0)
    {
      v8 = (*(_BYTE *)(a2 + 8) & 4) != 0 ? *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0 : 0;
      result = sub_22EEF7FC0(a1, v8);
      if ((_DWORD)result)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22F350DFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_22F350E04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v8 = 0;
    while (1)
    {
      v9 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v8 >= *(unsigned int *)(v9 + 16))
        break;
      sub_22EEF91E8(a1, *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8 * v8++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_2;
    }
    v4 = *(_QWORD *)v9;
    v5 = *(_QWORD *)(v9 + 8);
  }
  else
  {
LABEL_2:
    v4 = 0;
    v5 = 0;
  }
  return sub_22F3506C8(a1, v4, v5);
}

uint64_t sub_22F350E7C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22F350E04(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EEF7850(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22F350EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v9 = 0;
    while (1)
    {
      v10 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v9 >= *(unsigned int *)(v10 + 16))
        break;
      sub_22EEF91E8(a1, *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8 * v9++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_2;
    }
    v5 = *(_QWORD *)v10;
    v6 = *(_QWORD *)(v10 + 8);
  }
  else
  {
LABEL_2:
    v5 = 0;
    v6 = 0;
  }
  result = sub_22F3506C8(a1, v5, v6);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(a2 + 56);
    if ((v8 & 4) != 0)
    {
      v11 = *(unint64_t **)((v8 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (!v11)
      {
LABEL_6:
        result = sub_22EEF7FC0(a1, *(_QWORD *)(a2 + 48));
        if (!(_DWORD)result)
          return result;
        return 1;
      }
    }
    else
    {
      if (v8 < 8)
        goto LABEL_6;
      v11 = (unint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
    }
    return (sub_22EEF7850(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
  }
  return result;
}

uint64_t sub_22F350FC8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t *v19[3];

  v19[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_DWORD *)(v6 + 8) = 0;
  v7 = (unsigned int *)(v6 + 8);
  *(_QWORD *)v6 = &off_24FAB9AF8;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v6 + 32) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v16 = 0;
  v17 = vdup_n_s32(0x1A5u);
  v18 = v6;
  do
    v11 = __ldxr(v7);
  while (__stxr(v11 + 1, v7));
  v19[0] = a2;
  v19[1] = (uint64_t *)&v16;
  sub_22F3511B4(a1, v19, 2);
  result = v18;
  if (v18)
  {
    v13 = (unsigned int *)(v18 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3510EC(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFBA40(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 281;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x119u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

uint64_t sub_22F3511B4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F3512A0((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0xACu, v17[2]);
  *(_QWORD *)a1 = v4 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3512A0(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x1A5u, v27);
    *(_QWORD *)a1 = v26 | 0x1A500000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F351478((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F351478(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(421, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 421;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1A5u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F351514(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9AF8;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F35156C(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9AF8;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3515D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F3515E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v8 = a1 + 16;
  v9 = sub_22F379890(*(unsigned __int8 **)(a2 + 16));
  v10 = v4;
  return sub_22F35A7A4(v8, &v9, a3, a4);
}

BOOL sub_22F351678(uint64_t a1, _DWORD *a2)
{
  char *v3;
  size_t v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  char v9;
  int v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_22EFFA120((*a2 >> 18) & 0x1F);
  v5 = v4;
  v8 = *(const void **)(a1 + 16);
  v7 = a1 + 16;
  v6 = v8;
  v9 = *(_BYTE *)(v7 + 23);
  v10 = v9;
  if (v9 >= 0)
    v11 = (const void *)v7;
  else
    v11 = v6;
  v12 = *(_QWORD *)(v7 + 8);
  v13 = v9 & 0x7F;
  if (v10 >= 0)
    v12 = v13;
  if (v5 != v12)
    return 0;
  if (v5)
    return memcmp(v3, v11, v5) == 0;
  return 1;
}

_QWORD *sub_22F3516EC(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9B68;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F351744(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9B68;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3517AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F3517BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 16;
  v7 = sub_22EFFA6B0(a2);
  v9 = sub_22F379890(v7);
  v10 = v7;
  return sub_22F35A7A4(v6, &v9, a3, a4);
}

_QWORD *sub_22F351848(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9BA0;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F3518A0(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9BA0;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F351908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0x10)
    return 0;
  v6 = 6;
  v7 = v4;
  return sub_22F35A7A4(a1 + 16, &v6, a3, a4);
}

void sub_22F351978(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFC014(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 281;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x119u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F351A40(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFC288(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 288;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x120u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

uint64_t sub_22F351B08(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F351BF4((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0xACu, v17[2]);
  *(_QWORD *)a1 = v4 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F351BF4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x120u, v27);
    *(_QWORD *)a1 = v26 | 0x12000000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F351DCC((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F351DCC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(288, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 288;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x120u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F351E68(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9BD8;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F351EC0(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9BD8;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F351F28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

_QWORD *sub_22F351F38(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9C10;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F351F90(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9C10;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F351FF8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F3520E4((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0xACu, v17[2]);
  *(_QWORD *)a1 = v4 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3520E4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x16Fu, v27);
    *(_QWORD *)a1 = v26 | 0x16F00000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F3522BC((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F3522BC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(367, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 367;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x16Fu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F35235C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F352370(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F352380(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

BOOL sub_22F35238C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  _BOOL8 v7;
  _QWORD *v8;
  unsigned int v9;

  sub_22F257F94(a2 + 16, (llvm::APInt *)&v8);
  v3 = (_QWORD *)*(int *)(a1 + 12);
  v4 = v9;
  if (v9 < 0x41)
    return v8 == v3;
  if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v8) > 0x40)
  {
    v7 = 0;
    v5 = 0;
    if (!v8)
      return v5;
  }
  else
  {
    v7 = *v8 == (_QWORD)v3;
  }
  MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
  return v7;
}

void sub_22F35242C(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFC428(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 288;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x120u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F3524F4(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFC5C4(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 288;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x120u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F3525BC(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFC6D0(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 281;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x119u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F352684(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFC934(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 293;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x125u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F352750()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F352764(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2 + 8);
}

BOOL sub_22F352774(uint64_t a1, _QWORD *a2)
{
  return sub_22E479BE0(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F352784(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD v15[4];
  uint64_t v16;

  sub_22F352870((uint64_t)v15);
  v2 = v15[0];
  v3 = (unsigned int *)v16;
  if (v16)
  {
    v4 = (unsigned int *)(v16 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = sub_22EF95614(0x1A9u, v15[2]);
  *(_QWORD *)a1 = v2 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v7 = v3 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F352870(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  sub_22F3528F8((uint64_t)&v7);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v8;
  result = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F3528F8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(477, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 477;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1DDu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F352994(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &unk_24FAB9EB8;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F3529F0(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &unk_24FAB9EB8;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F352A5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_22F352A6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*a2 < 0x10uLL)
    return 0;
  v7 = a1 + 16;
  v8 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_22F37A00C(v8);
  v10 = v8;
  return sub_22F35A7A4(v7, &v9, a3, a4);
}

uint64_t sub_22F352B0C(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F352BF8((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0xACu, v17[2]);
  *(_QWORD *)a1 = v4 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F352BF8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x119u, v27);
    *(_QWORD *)a1 = v26 | 0x11900000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F352DD0((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F352DD0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(281, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 281;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x119u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F352E6C(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F352F58((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0xACu, v17[2]);
  *(_QWORD *)a1 = v4 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F352F58(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x125u, v27);
    *(_QWORD *)a1 = v26 | 0x12500000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F353130((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F353130(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(293, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 293;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x125u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3531CC(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFCAE4(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 293;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x125u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F353294(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFCFF4(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 293;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x125u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F35335C(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFCD38(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 293;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x125u, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

uint64_t sub_22F353424(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

BOOL sub_22F353434(uint64_t a1, _DWORD *a2)
{
  char *v3;
  size_t v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  char v9;
  int v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_22EFFBA38((*a2 >> 18) & 0x3F);
  v5 = v4;
  v8 = *(const void **)(a1 + 16);
  v7 = a1 + 16;
  v6 = v8;
  v9 = *(_BYTE *)(v7 + 23);
  v10 = v9;
  if (v9 >= 0)
    v11 = (const void *)v7;
  else
    v11 = v6;
  v12 = *(_QWORD *)(v7 + 8);
  v13 = v9 & 0x7F;
  if (v10 >= 0)
    v12 = v13;
  if (v5 != v12)
    return 0;
  if (v5)
    return memcmp(v3, v11, v5) == 0;
  return 1;
}

_QWORD *sub_22F3534A8(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9CF8;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F353500(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9CF8;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F353568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v8 = a1 + 16;
  v9 = sub_22F379890(*(unsigned __int8 **)(a2 + 16));
  v10 = v4;
  return sub_22F35A7A4(v8, &v9, a3, a4);
}

_QWORD *sub_22F3535FC(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9D30;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F353654(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9D30;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3536BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    return 0;
  v8 = a1 + 16;
  v9 = sub_22F379890(*(unsigned __int8 **)(a2 + 24));
  v10 = v4;
  return sub_22F35A7A4(v8, &v9, a3, a4);
}

uint64_t sub_22F353750(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(unsigned int **)(a1 + 144);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 120);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  sub_22EEFC8D4(a1 + 8);
  return a1;
}

uint64_t sub_22F3537D0(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F3538BC((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0xACu, v17[2]);
  *(_QWORD *)a1 = v4 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3538BC(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x15Au, v27);
    *(_QWORD *)a1 = v26 | 0x15A00000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F353A94((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F353A94(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(346, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 346;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x15Au, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F353B30(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9D68;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F353B88(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9D68;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F353BF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F353C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 16;
  v7 = sub_22F10CF48(a2);
  v9 = sub_22F37A00C(v7);
  v10 = v7;
  return sub_22F35A7A4(v6, &v9, a3, a4);
}

uint64_t sub_22F353C8C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD v15[4];
  uint64_t v16;

  sub_22F353D78((uint64_t)v15);
  v2 = v15[0];
  v3 = (unsigned int *)v16;
  if (v16)
  {
    v4 = (unsigned int *)(v16 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = sub_22EF95614(0x1A9u, v15[2]);
  *(_QWORD *)a1 = v2 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v7 = v3 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F353D78(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  sub_22F353E00((uint64_t)&v7);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v8;
  result = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F353E00(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(470, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 470;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1D6u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F353E9C(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F353F88((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0x1A9u, v17[2]);
  *(_QWORD *)a1 = v4 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F353F88(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x1BAu, v27);
    *(_QWORD *)a1 = v26 | 0x1BA00000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F354160((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F354160(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(442, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 442;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1BAu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3541FC(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(6u, v27);
    *(_QWORD *)a1 = v26 | 0x600000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F3543D0((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F3543D0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(6, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 6;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(6u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F35446C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9DA0;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F3544C4(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9DA0;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F35452C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F35453C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *(uint64_t (**)(_QWORD *))(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = v7(v9);
  if (v10 < 0x10)
    return 0;
  v12 = 6;
  v13 = v10;
  return sub_22F35A7A4(a1 + 16, &v12, a3, a4);
}

uint64_t sub_22F3545E8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F3546D4((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0x1A9u, v17[2]);
  *(_QWORD *)a1 = v4 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3546D4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x1ABu, v27);
    *(_QWORD *)a1 = v26 | 0x1AB00000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F3548AC((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F3548AC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(427, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 427;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1ABu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F354948(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9DD8;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F3549A0(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9DD8;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F354A08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F354A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 40);
  v6 = 6;
  v7 = v4;
  return sub_22F35A7A4(a1 + 16, &v6, a3, a4);
}

uint64_t sub_22F354A78(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F354B64((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0x1A9u, v17[2]);
  *(_QWORD *)a1 = v4 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F354B64(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x1C5u, v27);
    *(_QWORD *)a1 = v26 | 0x1C500000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F354D3C((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F354D3C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(453, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 453;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1C5u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F354DD8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[4];
  uint64_t v18;

  sub_22F354EC4((uint64_t)v17, a2, a3);
  v4 = v17[0];
  v5 = (unsigned int *)v18;
  if (v18)
  {
    v6 = (unsigned int *)(v18 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_22EF95614(0x1A9u, v17[2]);
  *(_QWORD *)a1 = v4 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v9 = v5 + 2;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
    {
      v11 = __ldaxr(v9);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v9));
    if (!v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  result = v18;
  if (v18)
  {
    v14 = (unsigned int *)(v18 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F354EC4(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  unsigned int *v25;
  void **v26;
  unsigned int v27;
  unsigned int *v28;
  __int128 v29;
  unsigned int *v30;
  void **v31;

  if (a3 == 1)
  {
    v15 = *a2;
    *(_QWORD *)a1 = **a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v15 + 2);
    v16 = v15[2];
    *(_QWORD *)(a1 + 16) = v16;
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else if (a3)
  {
    v29 = 0uLL;
    v30 = 0;
    sub_22EEFB89C(&v29, a2, &a2[a3], (8 * a3) >> 3);
    v24 = v29;
    v25 = v30;
    v29 = 0uLL;
    v30 = 0;
    sub_22F35A360(0);
    v4 = v28;
    if (v28)
    {
      v5 = v28 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = sub_22EF95614(0x1DBu, v27);
    *(_QWORD *)a1 = v26 | 0x1DB00000000;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v8 = v4 + 2;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
      {
        v10 = __ldaxr(v8);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v8));
      if (!v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    if (v28)
    {
      v12 = v28 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
    v31 = (void **)&v24;
    sub_22EEE8494(&v31);
    v26 = (void **)&v29;
    sub_22EEE8494(&v26);
  }
  else
  {
    sub_22F35509C((uint64_t)&v29);
    *(_QWORD *)a1 = v29;
    *(_DWORD *)(a1 + 8) = DWORD2(v29);
    v19 = v30;
    *(_QWORD *)(a1 + 16) = v30;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
      {
        v22 = __ldaxr(v20);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v20));
      if (!v23)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
}

uint64_t sub_22F35509C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(475, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 475;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1DBu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F355138(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9E10;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F355190(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9E10;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3551F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F355208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *(uint64_t (**)(_QWORD *))(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
  v10 = v7(v9);
  if (v10 < 0x10)
    return 0;
  v12 = 6;
  v13 = v10;
  return sub_22F35A7A4(a1 + 16, &v12, a3, a4);
}

uint64_t sub_22F3552B4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD v15[4];
  uint64_t v16;

  sub_22F3553A0((uint64_t)v15);
  v2 = v15[0];
  v3 = (unsigned int *)v16;
  if (v16)
  {
    v4 = (unsigned int *)(v16 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = sub_22EF95614(0x1A9u, v15[2]);
  *(_QWORD *)a1 = v2 | 0x1A900000000;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v7 = v3 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F3553A0(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  sub_22F355428((uint64_t)&v7);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v8;
  result = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F355428(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(428, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 428;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x1ACu, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_22F3554C4(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFD3D8(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 346;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x15Au, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

void sub_22F35558C(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD v11[4];
  unsigned int v12;
  uint64_t v13;
  void **v14;

  v3 = *a2;
  sub_22EEFD73C(v11, (uint64_t)a2);
  sub_22F35A360(v3);
  v4 = v13;
  *(_QWORD *)a1 = v11[3];
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 4) = 346;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x15Au, v12);
  v7 = v13;
  if (v13)
  {
    v8 = (unsigned int *)(v13 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v14 = (void **)v11;
  sub_22EEE8494(&v14);
}

_QWORD *sub_22F355654(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9E48;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F3556AC(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9E48;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F355714(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F355724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0x10)
    return 0;
  v6 = 6;
  v7 = v4;
  return sub_22F35A7A4(a1 + 16, &v6, a3, a4);
}

_QWORD *sub_22F355794(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FAB9E80;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F3557EC(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FAB9E80;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F355854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v8 = a1 + 16;
  v9 = sub_22F379878(*(_QWORD *)(a2 + 16));
  v10 = v4;
  return sub_22F35A7A4(v8, &v9, a3, a4);
}

uint64_t sub_22F3558E8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD v15[4];
  uint64_t v16;

  sub_22F3559D4((uint64_t)v15);
  v2 = v15[0];
  v3 = (unsigned int *)v16;
  if (v16)
  {
    v4 = (unsigned int *)(v16 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = sub_22EF95614(0x4Cu, v15[2]);
  *(_QWORD *)a1 = v2 | 0x4C00000000;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v7 = v3 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F3559D4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  sub_22F355A5C((uint64_t)&v7);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v8;
  result = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F355A5C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(148, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 148;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0x94u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F355AF8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD v15[4];
  uint64_t v16;

  sub_22F355BE4((uint64_t)v15);
  v2 = v15[0];
  v3 = (unsigned int *)v16;
  if (v16)
  {
    v4 = (unsigned int *)(v16 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = sub_22EF95614(0xACu, v15[2]);
  *(_QWORD *)a1 = v2 | 0xAC00000000;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v7 = v3 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
    {
      v9 = __ldaxr(v7);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v7));
    if (!v10)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  result = v16;
  if (v16)
  {
    v12 = (unsigned int *)(v16 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F355BE4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  sub_22F355C6C((uint64_t)&v7);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v8;
  result = v9;
  *(_QWORD *)(a1 + 16) = v9;
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_22F355C6C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sub_22F35A650(185, (uint64_t)&v9);
  v2 = v11;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_DWORD *)(a1 + 4) = 185;
  *(_DWORD *)(a1 + 8) = sub_22EF95614(0xB9u, v10);
  result = v11;
  if (v11)
  {
    v6 = (unsigned int *)(v11 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *sub_22F355D08(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v2 = (unsigned int *)a1[17];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[14];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[11];
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = (unsigned int *)a1[8];
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  v18 = (unsigned int *)a1[5];
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
  }
  v22 = (unsigned int *)a1[2];
  if (v22)
  {
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
  }
  return a1;
}

_QWORD *sub_22F355E30(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = (unsigned int *)a1[8];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[5];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[2];
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

_QWORD *sub_22F355ED4(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v2 = (unsigned int *)a1[14];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[11];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (unsigned int *)a1[8];
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = (unsigned int *)a1[5];
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  v18 = (unsigned int *)a1[2];
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
  }
  return a1;
}

uint64_t sub_22F355FD0(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 128))
  {
    if (*(_BYTE *)(result + 128))
    {
      return sub_22EEFDD0C(result, a2);
    }
    else
    {
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(a2 + 8))
        result = sub_22EEFDD0C(result, a2);
      *(_BYTE *)(result + 128) = 1;
    }
  }
  else if (*(_BYTE *)(result + 128))
  {
    result = (uint64_t)sub_22E3BB1BC((char **)result);
    *(_BYTE *)(result + 128) = 0;
  }
  return result;
}

uint64_t sub_22F356030(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 128))
    return sub_22EEFDD0C(result, a2);
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x200000000;
  if (*(_DWORD *)(a2 + 8))
    result = sub_22EEFDD0C(result, a2);
  *(_BYTE *)(result + 128) = 1;
  return result;
}

uint64_t sub_22F356078(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  int v23;
  __int128 v25;
  int v26;
  uint64_t v27;
  _QWORD v28[4];
  _QWORD v29[6];
  _QWORD v30[3];
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[2];
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  void *v55[6];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (!*a3)
  {
    v5 = operator new();
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    *a3 = v5;
  }
  v28[0] = 0;
  v28[1] = 0;
  v28[2] = v29;
  v28[3] = 0x400000000;
  v29[4] = v30;
  v29[5] = 0;
  v30[0] = 0;
  v30[1] = 1;
  v30[2] = v28;
  v31 = v28;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v7 = sub_22E3CD3D4((uint64_t)v28, 48, 3);
  *(_BYTE *)v7 = 5;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = "_x";
  *(_QWORD *)(v7 + 1) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = 2;
  *(_QWORD *)&v32 = v7;
  *(_WORD *)(v7 + 2) = 2;
  v48[0] = 0;
  v48[1] = 0;
  v47 = a2;
  v49 = 0;
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_QWORD *)(v8 + 16) = v8 + 32;
  *(_DWORD *)(v8 + 28) = 4;
  *(_QWORD *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_QWORD *)(v8 + 64) = v8 + 80;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 88) = 1;
  v50 = v8;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 1;
  memset(v55, 0, sizeof(v55));
  v27 = 0;
  v25 = 0uLL;
  v26 = 0;
  sub_22EF01568(v55, &v25);
  v9 = v27;
  if (v27)
  {
    v10 = *(_DWORD *)(v27 + 68) - 1;
    *(_DWORD *)(v27 + 68) = v10;
    if (!v10)
      sub_22F3563E0(v9);
  }
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = v5;
  sub_22EEFE184((uint64_t)v28, a1);
  v11 = *((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v12 = v58;
    v13 = (void *)*((_QWORD *)&v57 + 1);
    if ((_QWORD)v58 != *((_QWORD *)&v57 + 1))
    {
      do
        v12 = sub_22EF0189C(v12 - 96);
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)&v57 + 1);
    }
    *(_QWORD *)&v58 = v11;
    operator delete(v13);
  }
  v14 = (_QWORD *)v56;
  if ((_QWORD)v56)
  {
    v15 = (_QWORD *)*((_QWORD *)&v56 + 1);
    v16 = (void *)v56;
    if (*((_QWORD *)&v56 + 1) != (_QWORD)v56)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      while (v15 != v14);
      v16 = (void *)v56;
    }
    *((_QWORD *)&v56 + 1) = v14;
    operator delete(v16);
  }
  *(_QWORD *)&v25 = &v55[3];
  sub_22EF08074((void ***)&v25);
  v19 = (char *)v55[0];
  if (v55[0])
  {
    v20 = (char *)v55[1];
    v21 = v55[0];
    if (v55[1] != v55[0])
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        if (v22)
        {
          v23 = *(_DWORD *)(v22 + 68) - 1;
          *(_DWORD *)(v22 + 68) = v23;
          if (!v23)
            sub_22F3563E0(v22);
        }
        v20 -= 32;
      }
      while (v20 != v19);
      v21 = v55[0];
    }
    v55[1] = v19;
    operator delete(v21);
  }
  sub_22F3587E4((uint64_t)v48);
  sub_22F35885C((uint64_t)&v31);
  return sub_22E3B4EF4((uint64_t)v28);
}

uint64_t sub_22F3563B4(uint64_t result)
{
  if (result)
  {
    sub_22F358968(result);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

_QWORD *sub_22F3563E0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 68) - 1;
    *(_DWORD *)(v2 + 68) = v3;
    if (!v3)
      sub_22F3563E0();
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 68) - 1;
    *(_DWORD *)(v4 + 68) = v5;
    if (!v5)
      sub_22F3563E0();
  }
  if ((*(_BYTE *)(a1 + 43) & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      *(_QWORD *)(v10 + 32) = v9;
    }
    else
    {
      v11 = *(_QWORD *)a1;
      if ((*(_BYTE *)(a1 + 43) & 0x20) != 0)
      {
        v12 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v12 = sub_22EF016D0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a1 + 48);
        *(_DWORD *)(a1 + 64) = v12;
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
      }
      v13 = v12 & 0xFFFFFFFD;
      *(_QWORD *)(sub_22E3C32F4(v11, &v13) + 8) = v9;
    }
  }
  *(_DWORD *)(a1 + 40) &= ~0x10000000u;
  v6 = *(_QWORD *)a1;
  v7 = *(uint64_t **)(*(_QWORD *)a1 + 64);
  if ((unint64_t)v7 >= *(_QWORD *)(*(_QWORD *)a1 + 72))
  {
    result = sub_22E566A8C((void **)(v6 + 56), a1);
  }
  else
  {
    *v7 = a1;
    result = v7 + 1;
  }
  *(_QWORD *)(v6 + 64) = result;
  return result;
}

uint64_t sub_22F3564F4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  a1[1] = a2;
  result = sub_22EEB5AAC(a2);
  *a1 = result;
  if (result)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Fu) - 13 <= 0x3D)
    {
      v6 = sub_22EEBD4E0(a2);
      a1[2] = v6;
      return v6 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_22F356560(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 238)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F3565C0(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 4)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  v6 = (~(v5 << 16) & 0x780000) != 0
     ? ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF
     : sub_22F1BFAD0(a1);
  if (v6 == 5)
    return 1;
  v7 = *(unsigned __int8 *)(a1 + 30);
  v8 = (~(v7 << 16) & 0x780000) != 0
     ? ((*(unsigned __int16 *)(a1 + 28) | (v7 << 16)) >> 19) & 0xF
     : sub_22F1BFAD0(a1);
  if (v8 == 6)
    return 1;
  v9 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v9 << 16) & 0x780000) != 0)
    v10 = ((*(unsigned __int16 *)(a1 + 28) | (v9 << 16)) >> 19) & 0xF;
  else
    v10 = sub_22F1BFAD0(a1);
  return v10 == 7;
}

BOOL sub_22F3566A4(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 2)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  v6 = (~(v5 << 16) & 0x780000) != 0
     ? ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF
     : sub_22F1BFAD0(a1);
  if (v6 == 3)
    return 1;
  v7 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v7 << 16) & 0x780000) != 0)
    v8 = ((*(unsigned __int16 *)(a1 + 28) | (v7 << 16)) >> 19) & 0xF;
  else
    v8 = sub_22F1BFAD0(a1);
  return v8 == 5;
}

_QWORD *sub_22F356758(_QWORD *a1, uint64_t a2)
{
  void *v4;
  int v5;
  _QWORD v6[21];

  v6[20] = *MEMORY[0x24BDAC8D0];
  sub_22EF039CC((uint64_t *)&v4, a2);
  *a1 = a1 + 2;
  a1[1] = 0x1400000000;
  if (v5)
    sub_22E861AD8((uint64_t)a1, (uint64_t)&v4);
  if (v4 != v6)
    free(v4);
  return a1;
}

uint64_t sub_22F3567F4(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_22F356864((_QWORD *)a2, a4, a3);
  sub_22F356910(v6);
  result = (uint64_t)sub_22F356950((_QWORD *)a2);
  if (*(_BYTE *)(a2 + 80))
  {
    result = sub_22EF03B0C(a2, v6);
    v6 = result;
  }
  *a1 = v6;
  if (v6)
    ++*(_DWORD *)(v6 + 68);
  return result;
}

uint64_t sub_22F356864(_QWORD *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (!a3)
    return 0;
  v7 = a3 + 6;
  v6 = a3[6];
  if (*a2 == v6)
    return sub_22F3569C4(a1, a3[1], a3[2]);
  v8 = a3[1];
  if (*a2 >= v6)
  {
    v10 = sub_22F356864(a1);
    v11 = a1;
    v9 = v8;
  }
  else
  {
    v9 = sub_22F356864(a1);
    v10 = a3[2];
    v11 = a1;
  }
  return sub_22F356A34(v11, v9, v7, v10);
}

uint64_t sub_22F356910(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (result)
  {
    v1 = result;
    do
    {
      v2 = *(_DWORD *)(v1 + 40);
      if ((v2 & 0x10000000) == 0)
        break;
      *(_DWORD *)(v1 + 40) = v2 & 0xEFFFFFFF;
      result = sub_22F356910(*(_QWORD *)(v1 + 8));
      v1 = *(_QWORD *)(v1 + 16);
    }
    while (v1);
  }
  return result;
}

_QWORD *sub_22F356950(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = result[4];
  v3 = result[5] - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    v5 = (v3 >> 3);
    do
    {
      result = *(_QWORD **)(v1[4] + 8 * v4);
      if ((*((_BYTE *)result + 43) & 0x10) != 0 && !*((_DWORD *)result + 17))
        result = sub_22F3563E0((uint64_t)result);
      ++v4;
    }
    while (v5 != v4);
    v2 = v1[4];
  }
  v1[5] = v2;
  return result;
}

uint64_t sub_22F3569C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v3 = a3;
  if (!a2)
    return v3;
  if (!a3)
    return a2;
  v8 = 0;
  v7 = sub_22F356BFC(a1, a3, &v8);
  return sub_22F356A34(a1, a2, (_OWORD *)(v8 + 48), v7);
}

uint64_t sub_22F356A34(_QWORD *a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = a1;
  if (a2)
    v8 = *(_DWORD *)(a2 + 40) & 0xFFFFFFF;
  else
    v8 = 0;
  if (a4)
    v9 = *(_DWORD *)(a4 + 40) & 0xFFFFFFF;
  else
    v9 = 0;
  if (v8 <= v9 + 2)
  {
    if (v9 > v8 + 2)
    {
      v17 = *(_QWORD *)(a4 + 8);
      v16 = *(_QWORD *)(a4 + 16);
      if (v16)
        v18 = *(_DWORD *)(v16 + 40) & 0xFFFFFFF;
      else
        v18 = 0;
      if (v17)
        v19 = *(_DWORD *)(v17 + 40) & 0xFFFFFFF;
      else
        v19 = 0;
      if (v18 >= v19)
      {
        a2 = sub_22EF03E10(a1, a2, a3, *(_QWORD *)(a4 + 8));
        a3 = (_OWORD *)(v4 + 48);
        a1 = v7;
        a4 = v16;
      }
      else
      {
        v20 = *(_QWORD *)(v17 + 16);
        v21 = sub_22EF03E10(a1, a2, a3, *(_QWORD *)(v17 + 8));
        a4 = sub_22EF03E10(v7, v20, (_OWORD *)(v4 + 48), v16);
        a3 = (_OWORD *)(v17 + 48);
        a1 = v7;
        a2 = v21;
      }
    }
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    if (v11)
      v12 = *(_DWORD *)(v11 + 40) & 0xFFFFFFF;
    else
      v12 = 0;
    if (v10)
      v13 = *(_DWORD *)(v10 + 40) & 0xFFFFFFF;
    else
      v13 = 0;
    if (v12 >= v13)
    {
      a4 = sub_22EF03E10(a1, *(_QWORD *)(a2 + 16), a3, a4);
      a3 = (_OWORD *)(v6 + 48);
      a1 = v7;
      a2 = v11;
    }
    else
    {
      v14 = *(_QWORD *)(v10 + 16);
      v15 = sub_22EF03E10(a1, *(_QWORD *)(a2 + 8), (_OWORD *)(a2 + 48), *(_QWORD *)(v10 + 8));
      a4 = sub_22EF03E10(v7, v14, v5, v4);
      a3 = (_OWORD *)(v10 + 48);
      a1 = v7;
      a2 = v15;
    }
  }
  return sub_22EF03E10(a1, a2, a3, a4);
}

uint64_t sub_22F356BFC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;

  if (*(_QWORD *)(a2 + 8))
  {
    v6 = sub_22F356BFC();
    return sub_22F356A34(a1, v6, (_OWORD *)(a2 + 48), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *a3 = a2;
    return *(_QWORD *)(a2 + 16);
  }
}

uint64_t sub_22F356C4C(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;

  v9 = a4;
  v10 = a5;
  v7 = sub_22F356CCC((_QWORD *)a2, &v9, a3);
  sub_22F356910(v7);
  result = (uint64_t)sub_22F356950((_QWORD *)a2);
  if (*(_BYTE *)(a2 + 80))
  {
    result = sub_22EF03B0C(a2, v7);
    v7 = result;
  }
  *a1 = v7;
  if (v7)
    ++*(_DWORD *)(v7 + 68);
  return result;
}

uint64_t sub_22F356CCC(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (!a3)
  {
    v8 = 0;
    v10 = a2;
    v9 = 0;
    return sub_22EF03E10(a1, v8, v10, v9);
  }
  v7 = a3 + 6;
  v6 = a3[6];
  if (*a2 == v6)
  {
    v8 = a3[1];
    v9 = a3[2];
    v10 = a2;
    return sub_22EF03E10(a1, v8, v10, v9);
  }
  v12 = a3[1];
  if (*a2 >= v6)
  {
    v14 = sub_22F356CCC(a1, a2, a3[2]);
    v15 = a1;
    v13 = v12;
  }
  else
  {
    v13 = sub_22F356CCC(a1, a2, a3[1]);
    v14 = a3[2];
    v15 = a1;
  }
  return sub_22F356A34(v15, v13, v7, v14);
}

uint64_t sub_22F356D88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 - 8);
    v2 -= 16;
    *(_QWORD *)(a1 + 16) = v2;
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 68) - 1;
      *(_DWORD *)(v4 + 68) = v5;
      if (!v5)
      {
        sub_22F3563E0(v4);
        v2 = *(_QWORD *)(a1 + 16);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22F356DEC(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 32) == **(unsigned __int8 **)(*(_QWORD *)(a2 + 16) + 32)
    && sub_22EF04364()
    && **(unsigned __int8 **)(a1 + 24) == **(unsigned __int8 **)(a2 + 24))
  {
    return sub_22EF04364();
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F356E5C(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 16) == **(unsigned __int8 **)(a2 + 16)
    && sub_22EF04364()
    && **(unsigned __int8 **)(a1 + 24) == **(unsigned __int8 **)(a2 + 24))
  {
    return sub_22EF04364();
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F356EC4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v2 = *(unsigned __int8 **)(a1 + 16);
  v3 = *(unsigned __int8 **)(a2 + 16);
  if (*v2 == *v3
    && sub_22EF04364(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16))
    && (*(_QWORD *)(a1 + 24) ? (v6 = *(unsigned __int8 **)(a1 + 24)) : (v6 = v2),
        *(_QWORD *)(a2 + 24) ? (v7 = *(unsigned __int8 **)(a2 + 24)) : (v7 = v3),
        *v6 == *v7))
  {
    return sub_22EF04364(v6, v7);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F356F50(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  if (*(unsigned __int8 *)(a2 + 2) == *(unsigned __int8 *)(a1 + 2)
    && (v5 = *(unsigned __int8 **)(a1 + 16), v6 = *(unsigned __int8 **)(a2 + 16), *v5 == *v6)
    && sub_22EF04364(v5, v6)
    && (v7 = *(unsigned __int8 **)(a1 + 24), v8 = *(unsigned __int8 **)(a2 + 24), *v7 == *v8))
  {
    return sub_22EF04364(v7, v8);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F356FC8(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v4 = (unsigned __int8 *)a1[2];
  v5 = (unsigned __int8 *)a2[2];
  if (*v4 == *v5
    && sub_22EF04364(v4, v5)
    && (v6 = (unsigned __int8 *)a1[3], v7 = (unsigned __int8 *)a2[3], *v6 == *v7)
    && sub_22EF04364(v6, v7)
    && (v8 = (unsigned __int8 *)a1[4], v9 = (unsigned __int8 *)a2[4], *v8 == *v9))
  {
    return sub_22EF04364(v8, v9);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F357050(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE v4[16];
  _QWORD v5[14];
  uint64_t v6;
  __int16 v7;
  char v8;

  sub_22EF049E0((uint64_t)v4);
  v7 = 256;
  v8 = 1;
  sub_22F3570D0((uint64_t)&v7, a2, v5, 6u, 1);
  std::stringbuf::str();
  sub_22EF05460((uint64_t)v4);
  return MEMORY[0x2348A0E3C](&v6);
}

void sub_22F3570D0(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, unsigned int a4, char a5)
{
  unsigned __int8 *v7;
  int v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  if (a2)
  {
    v7 = a2;
    while (1)
    {
      if ((a5 & 1) != 0 && *((_QWORD *)v7 + 1))
      {
        if (*v7 != 5)
        {
          sub_22EF0506C(a3, (uint64_t)"_x", 2);
          std::ostream::operator<<();
          return;
        }
        v9 = 5;
      }
      else
      {
        v9 = *v7;
      }
      if (sub_22F3575B4(v9) > a4)
      {
        sub_22EF0506C(a3, (uint64_t)"(", 1);
        sub_22F3570D0(a1, v7, a3, 6, 1);
        v10 = ")";
LABEL_18:
        v11 = a3;
        v12 = 1;
        goto LABEL_13;
      }
      if (v9)
        break;
      a4 = 0;
      v7 = (unsigned __int8 *)*((_QWORD *)v7 + 3);
      a5 = 1;
      if (!v7)
        goto LABEL_12;
    }
    switch(v9)
    {
      case 1:
        v10 = "#undefined";
        v11 = a3;
        v12 = 10;
        goto LABEL_13;
      case 2:
        v10 = "*";
        goto LABEL_18;
      case 3:
        sub_22EF04AD8((uint64_t)v7, a3);
        break;
      case 4:
        sub_22EF04D98(*((_QWORD *)v7 + 2), a3);
        break;
      case 5:
        sub_22F3575DC(*(_BYTE *)(a1 + 2), (uint64_t)v7, a3);
        break;
      case 6:
        sub_22F35763C(a1, (uint64_t)v7, a3);
        break;
      case 7:
        sub_22F357710(a1, (uint64_t)v7, a3);
        break;
      case 8:
        sub_22F357788(a1, (uint64_t)v7, a3);
        break;
      case 9:
        sub_22F357808(a1, (uint64_t)v7, a3);
        break;
      case 10:
        sub_22F357888(a1, (uint64_t)v7, a3, 0);
        break;
      case 11:
        sub_22F35793C(a1, (uint64_t)v7, a3);
        break;
      case 12:
        sub_22EF04E00(a1, (uint64_t)v7, a3);
        break;
      case 13:
        sub_22F3579D4(a1, (uint64_t)v7, a3);
        break;
      case 14:
        sub_22EF04F4C(a1, (uint64_t)v7, a3);
        break;
      case 15:
        sub_22F357A34(a1, (uint64_t)v7, a3);
        break;
      case 16:
        sub_22F357A88(a1, (uint64_t)v7, a3);
        break;
      case 17:
        sub_22F357AEC(a1, (uint64_t)v7, a3);
        break;
      case 18:
        sub_22F357B64(a1, (uint64_t)v7, a3);
        break;
      case 19:
        sub_22EF04FA0(a1, (uint64_t)v7, (uint64_t)a3);
        break;
      case 20:
        sub_22F357BC8(a1, (uint64_t)v7, a3);
        break;
      case 21:
        sub_22F357C5C(a1, (uint64_t)v7, a3);
        break;
      case 22:
        sub_22F357D98(a1, (uint64_t)v7, a3);
        break;
      case 23:
        sub_22F357E20(a1, v7, a3);
        break;
      case 24:
        sub_22F357F6C(a1, (uint64_t)v7, a3);
        break;
      case 25:
        v13 = sub_22EF0506C(a3, (uint64_t)"goto ", 5);
        sub_22F35829C(v13, *((_QWORD *)v7 + 2), *((_DWORD *)v7 + 6));
        break;
      case 26:
        sub_22F35804C(a1, v7, a3);
        break;
      case 27:
        sub_22EF05018(a1, (uint64_t)v7, a3);
        break;
      case 28:
        std::ostream::write();
        break;
      case 29:
        sub_22F3580E0(a1, v7, a3);
        break;
      case 30:
        sub_22F3581F4(a1, (uint64_t)v7, a3);
        break;
      default:
        return;
    }
  }
  else
  {
LABEL_12:
    v10 = "#null";
    v11 = a3;
    v12 = 5;
LABEL_13:
    sub_22EF0506C(v11, (uint64_t)v10, v12);
  }
}

uint64_t sub_22F3575B4(unsigned __int8 a1)
{
  if (a1 > 0x1Eu)
    return 6;
  else
    return dword_22F49D6C4[(char)a1];
}

_QWORD *sub_22F3575DC(char a1, uint64_t a2, _QWORD *a3)
{
  if (a1 && *(_WORD *)(a2 + 2) == 2)
    return sub_22EF0506C(a3, (uint64_t)"this", 4);
  std::ostream::write();
  return (_QWORD *)std::ostream::operator<<();
}

uint64_t sub_22F35763C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v6;

  v6 = "\\(";
  do
  {
    sub_22EF0506C(a3, (uint64_t)v6, 2);
    sub_22F3575DC(*(_BYTE *)(a1 + 2), *(_QWORD *)(a2 + 16), a3);
    sub_22EF0506C(a3, (uint64_t)": ", 2);
    sub_22F3570D0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32), a3, 6, 1);
    a2 = *(_QWORD *)(a2 + 24);
    if (!a2)
      break;
    v6 = ", ";
  }
  while (*(_BYTE *)a2 == 6);
  sub_22EF0506C(a3, (uint64_t)")", 1);
  return sub_22F3570D0(a1, a2, a3, 5, 1);
}

uint64_t sub_22F357710(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22EF0506C(a3, (uint64_t)"@", 1);
  sub_22F3575DC(*(_BYTE *)(a1 + 2), *(_QWORD *)(a2 + 16), a3);
  sub_22EF0506C(a3, (uint64_t)" ", 1);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 5, 1);
}

uint64_t sub_22F357788(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22EF0506C(a3, (uint64_t)": ", 2);
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 4, 1);
  sub_22EF0506C(a3, (uint64_t)" -> ", 4);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 5, 1);
}

uint64_t sub_22F357808(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22EF0506C(a3, (uint64_t)": ", 2);
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 4, 1);
  sub_22EF0506C(a3, (uint64_t)" = ", 3);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 5, 1);
}

_QWORD *sub_22F357888(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  _BYTE *v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;

  v8 = *(_BYTE **)(a2 + 16);
  if (*v8 == 10)
  {
    sub_22F357888();
    v9 = ", ";
    v10 = a3;
    v11 = 2;
  }
  else
  {
    sub_22F3570D0(a1, v8, a3, 1, 1);
    v9 = "(";
    v10 = a3;
    v11 = 1;
  }
  sub_22EF0506C(v10, (uint64_t)v9, v11);
  result = (_QWORD *)sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 6, 1);
  if ((a4 & 1) == 0)
    return sub_22EF0506C(a3, (uint64_t)")$", 2);
  return result;
}

_QWORD *sub_22F35793C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t v7;

  result = (_QWORD *)sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 1, 1);
  if (*(_QWORD *)(a2 + 24))
  {
    sub_22EF0506C(a3, (uint64_t)"@(", 2);
    v7 = *(_QWORD *)(a2 + 24);
    if (!v7)
      v7 = *(_QWORD *)(a2 + 16);
    sub_22F3570D0(a1, v7, a3, 6, 1);
    return sub_22EF0506C(a3, (uint64_t)")", 1);
  }
  return result;
}

_QWORD *sub_22F3579D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_BYTE **)(a2 + 16);
  if (*v4 == 10)
  {
    sub_22F357888(a1, (uint64_t)v4, a3, 1);
    v5 = ")";
    v6 = a3;
    v7 = 1;
  }
  else
  {
    sub_22F3570D0(a1, v4, a3, 1, 1);
    v5 = "()";
    v6 = a3;
    v7 = 2;
  }
  return sub_22EF0506C(v6, (uint64_t)v5, v7);
}

_QWORD *sub_22F357A34(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 1, 1);
  if (!*(_BYTE *)(a1 + 2))
    return sub_22EF0506C(a3, (uint64_t)"^", 1);
  return result;
}

uint64_t sub_22F357A88(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 3, 1);
  sub_22EF0506C(a3, (uint64_t)" := ", 4);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 3, 1);
}

_QWORD *sub_22F357AEC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 1, 1);
  sub_22EF0506C(a3, (uint64_t)"[", 1);
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 6, 1);
  return sub_22EF0506C(a3, (uint64_t)"]", 1);
}

uint64_t sub_22F357B64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 1, 1);
  sub_22EF0506C(a3, (uint64_t)" + ", 3);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 0, 1);
}

uint64_t sub_22F357BC8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;

  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 2, 1);
  sub_22EF0506C(a3, (uint64_t)" ", 1);
  sub_22F3594DC(*(unsigned __int8 *)(a2 + 2));
  v6 = (_QWORD *)std::ostream::write();
  sub_22EF0506C(v6, (uint64_t)" ", 1);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 2, 1);
}

_QWORD *sub_22F357C5C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 2))
    return (_QWORD *)sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 2, 1);
  sub_22EF0506C(a3, (uint64_t)"cast[", 5);
  switch(*(_BYTE *)(a2 + 2))
  {
    case 0:
      v6 = "none";
      v7 = a3;
      v8 = 4;
      goto LABEL_11;
    case 1:
      v6 = "extendNum";
      v7 = a3;
      v8 = 9;
      goto LABEL_11;
    case 2:
      v6 = "truncNum";
      goto LABEL_10;
    case 3:
      v6 = "toFloat";
      v7 = a3;
      v8 = 7;
      goto LABEL_11;
    case 4:
      v6 = "toInt";
      v7 = a3;
      v8 = 5;
      goto LABEL_11;
    case 5:
      v6 = "objToPtr";
LABEL_10:
      v7 = a3;
      v8 = 8;
LABEL_11:
      sub_22EF0506C(v7, (uint64_t)v6, v8);
      break;
    default:
      break;
  }
  sub_22EF0506C(a3, (uint64_t)"](", 2);
  sub_22F3570D0(a1, *(_QWORD *)(a2 + 16), a3, 2, 1);
  return sub_22EF0506C(a3, (uint64_t)")", 1);
}

_QWORD *sub_22F357D98(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  sub_22EF0506C(a3, (uint64_t)"CFG {\n", 6);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
  {
    v7 = *(_QWORD ***)(a2 + 24);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      sub_22F357E20(a1, v9, a3);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = sub_22EF0506C(a3, (uint64_t)"}", 1);
  return sub_22EF0506C(v10, (uint64_t)"\n", 1);
}

_QWORD *sub_22F357E20(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v17;

  sub_22EF0506C(a3, (uint64_t)"BB_", 3);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_22EF0506C(v6, (uint64_t)":", 1);
  if (a2[16])
  {
    sub_22EF0506C(a3, (uint64_t)" BB_", 4);
    std::ostream::operator<<();
  }
  sub_22EF0506C(a3, (uint64_t)"\n", 1);
  v7 = a2[9];
  if (v7)
  {
    v8 = (unsigned __int8 **)a2[8];
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      sub_22EF0537C(a1, v10, a3);
      v9 -= 8;
    }
    while (v9);
  }
  v11 = a2[12];
  if (v11)
  {
    v12 = (unsigned __int8 **)a2[11];
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      sub_22EF0537C(a1, v14, a3);
      v13 -= 8;
    }
    while (v13);
  }
  v15 = a2[14];
  if (v15)
  {
    sub_22F3570D0(a1, v15, a3, 6, 0);
    v17 = sub_22EF0506C(a3, (uint64_t)";", 1);
    sub_22EF0506C(v17, (uint64_t)"\n", 1);
  }
  return sub_22EF0506C(a3, (uint64_t)"\n", 1);
}

_QWORD *sub_22F357F6C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_22EF0506C(a3, (uint64_t)"phi(", 4);
  v6 = *(_QWORD **)(a2 + 16);
  if (*(_WORD *)(a2 + 2) == 1)
  {
    sub_22F3570D0(a1, *v6, a3, 6, 1);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = v6[v8];
        if ((_DWORD)v8)
          sub_22EF0506C(a3, (uint64_t)", ", 2);
        sub_22F3570D0(a1, v10, a3, 6, 1);
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  return sub_22EF0506C(a3, (uint64_t)")", 1);
}

_QWORD *sub_22F35804C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;

  sub_22EF0506C(a3, (uint64_t)"branch (", 8);
  sub_22F3570D0(a1, a2[2], a3, 6, 1);
  v6 = sub_22EF0506C(a3, (uint64_t)") ", 2);
  sub_22F35829C(v6, a2[3], -1);
  v7 = sub_22EF0506C(a3, (uint64_t)" ", 1);
  return sub_22F35829C(v7, a2[4], -1);
}

uint64_t sub_22F3580E0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 2))
  {
    v6 = 2;
    sub_22F3570D0(a1, a2[2], a3, 2, 1);
    sub_22EF0506C(a3, (uint64_t)" ? ", 3);
    sub_22F3570D0(a1, a2[3], a3, 2, 1);
    v7 = " : ";
    v8 = a3;
    v9 = 3;
  }
  else
  {
    v6 = 4;
    sub_22EF0506C(a3, (uint64_t)"if (", 4);
    sub_22F3570D0(a1, a2[2], a3, 6, 1);
    sub_22EF0506C(a3, (uint64_t)") then ", 7);
    sub_22F3570D0(a1, a2[3], a3, 4, 1);
    v7 = " else ";
    v8 = a3;
    v9 = 6;
  }
  sub_22EF0506C(v8, (uint64_t)v7, v9);
  return sub_22F3570D0(a1, a2[4], a3, v6, 1);
}

uint64_t sub_22F3581F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sub_22EF0506C(a3, (uint64_t)"let ", 4);
  sub_22F3575DC(*(_BYTE *)(a1 + 2), *(_QWORD *)(a2 + 16), a3);
  sub_22EF0506C(a3, (uint64_t)" = ", 3);
  sub_22F3570D0(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32), a3, 4, 1);
  sub_22EF0506C(a3, (uint64_t)"; ", 2);
  return sub_22F3570D0(a1, *(_QWORD *)(a2 + 24), a3, 4, 1);
}

_QWORD *sub_22F35829C(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *result;

  if (!a2)
    return sub_22EF0506C(a1, (uint64_t)"BB_null", 7);
  sub_22EF0506C(a1, (uint64_t)"BB_", 3);
  result = (_QWORD *)std::ostream::operator<<();
  if ((a3 & 0x80000000) == 0)
  {
    sub_22EF0506C(a1, (uint64_t)":", 1);
    return (_QWORD *)std::ostream::operator<<();
  }
  return result;
}

uint64_t sub_22F358338(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 2 && v2 == 2;
  if (v2 == 2 || v3 == 2)
    return v4;
  if (v2 != v3)
    return 0;
  return sub_22EF0561C(a1, a2);
}

uint64_t sub_22F358378(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  v4 = **(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 32);
  if (v4 == 2)
    goto LABEL_3;
  v5 = **(unsigned __int8 **)(*(_QWORD *)(a2 + 16) + 32);
  if (v5 == 2)
    goto LABEL_3;
  if (v4 != v5)
    return 0;
  result = sub_22EF0561C();
  if ((_DWORD)result)
  {
LABEL_3:
    v6 = **(unsigned __int8 **)(a1 + 24);
    if (v6 == 2)
      return 1;
    v7 = **(unsigned __int8 **)(a2 + 24);
    if (v7 == 2)
      return 1;
    if (v6 == v7)
      return sub_22EF0561C();
    return 0;
  }
  return result;
}

uint64_t sub_22F358414(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  v4 = **(unsigned __int8 **)(a1 + 16);
  if (v4 == 2)
    goto LABEL_3;
  v5 = **(unsigned __int8 **)(a2 + 16);
  if (v5 == 2)
    goto LABEL_3;
  if (v4 != v5)
    return 0;
  result = sub_22EF0561C();
  if ((_DWORD)result)
  {
LABEL_3:
    v6 = **(unsigned __int8 **)(a1 + 24);
    if (v6 == 2)
      return 1;
    v7 = **(unsigned __int8 **)(a2 + 24);
    if (v7 == 2)
      return 1;
    if (v6 == v7)
      return sub_22EF0561C();
    return 0;
  }
  return result;
}

uint64_t sub_22F3584A8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t result;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 **)(a2 + 16);
  v6 = *v4;
  if (v6 == 2)
    goto LABEL_20;
  v7 = *v5;
  if (v7 == 2)
    goto LABEL_20;
  if (v6 != v7)
    return 0;
  result = sub_22EF0561C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
LABEL_20:
    if (*(_QWORD *)(a1 + 24))
      v8 = *(unsigned __int8 **)(a1 + 24);
    else
      v8 = v4;
    if (*(_QWORD *)(a2 + 24))
      v9 = *(unsigned __int8 **)(a2 + 24);
    else
      v9 = v5;
    v10 = *v8;
    if (v10 == 2)
      return 1;
    v11 = *v9;
    if (v11 == 2)
      return 1;
    if (v10 == v11)
      return sub_22EF0561C(v8, v9);
    return 0;
  }
  return result;
}

uint64_t sub_22F358560(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;

  if (*(unsigned __int8 *)(a2 + 2) != *(unsigned __int8 *)(a1 + 2))
    return 0;
  v5 = *(unsigned __int8 **)(a1 + 16);
  v6 = *v5;
  if (v6 == 2)
    goto LABEL_6;
  v7 = *(unsigned __int8 **)(a2 + 16);
  v8 = *v7;
  if (v8 == 2)
    goto LABEL_6;
  if (v6 != v8)
    return 0;
  result = sub_22EF0561C(v5, v7);
  if ((_DWORD)result)
  {
LABEL_6:
    v9 = *(unsigned __int8 **)(a1 + 24);
    v10 = *v9;
    if (v10 == 2)
      return 1;
    v11 = *(unsigned __int8 **)(a2 + 24);
    v12 = *v11;
    if (v12 == 2)
      return 1;
    if (v10 == v12)
      return sub_22EF0561C(v9, v11);
    return 0;
  }
  return result;
}

uint64_t sub_22F358604(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t result;

  v4 = (unsigned __int8 *)a1[2];
  v5 = *v4;
  if (v5 != 2)
  {
    v6 = (unsigned __int8 *)a2[2];
    v7 = *v6;
    if (v7 != 2)
    {
      if (v5 != v7)
        return 0;
      result = sub_22EF0561C(v4, v6);
      if (!(_DWORD)result)
        return result;
    }
  }
  v8 = (unsigned __int8 *)a1[3];
  v9 = *v8;
  if (v9 == 2 || (v10 = (unsigned __int8 *)a2[3], v11 = *v10, v11 == 2))
  {
LABEL_5:
    v12 = (unsigned __int8 *)a1[4];
    v13 = *v12;
    if (v13 == 2)
      return 1;
    v14 = (unsigned __int8 *)a2[4];
    v15 = *v14;
    if (v15 == 2)
      return 1;
    if (v13 == v15)
      return sub_22EF0561C(v12, v14);
    return 0;
  }
  if (v9 != v11)
    return 0;
  result = sub_22EF0561C(v8, v10);
  if ((_DWORD)result)
    goto LABEL_5;
  return result;
}

_QWORD *sub_22F3586CC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F358734(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F358734(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF05F60(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F3587E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 1) == 0)
  {
    v3 = sub_22E3B4EF4(v2 & 0xFFFFFFFFFFFFFFFELL);
    MEMORY[0x2348A0E9C](v3, 0x1090C40A49D047FLL);
  }
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v5);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F35885C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  sub_22F358904((_QWORD *)(a1 + 120));
  v7 = (void **)(a1 + 96);
  sub_22EF08100(&v7);
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(16 * *(unsigned int *)(a1 + 64)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  return a1;
}

_QWORD *sub_22F358904(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    if (*(_DWORD *)v1 > 1u)
    {
      --*(_DWORD *)v1;
    }
    else
    {
      v3 = *(void **)(v1 + 8);
      if (v3)
      {
        *(_QWORD *)(v1 + 16) = v3;
        operator delete(v3);
      }
      result = (_QWORD *)MEMORY[0x2348A0E9C](v1, 0x1020C40E72D6CFBLL);
    }
    *v2 = 0;
  }
  return result;
}

uint64_t sub_22F358968(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
  return sub_22EF08170(a1);
}

void sub_22F35899C(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(unsigned __int8 *)a1;
  if (v3 == 225)
  {
    *(_BYTE *)(a2 + 23) = 1;
    *(_WORD *)a2 = 34;
    std::string::append((std::string *)a2, (const std::string::value_type *)&a1[a1[1] + 5], ((*a1 >> 21) & 7u) * a1[4]);
    std::string::append((std::string *)a2, "\"");
  }
  else if (v3 == 181)
  {
    sub_22F257F94((uint64_t)(a1 + 4), (llvm::APInt *)&v4);
    sub_22EF081E0((_BYTE *)a2);
    if (v5 >= 0x41)
    {
      if (v4)
        MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 4;
    strcpy((char *)a2, "#lit");
  }
}

uint64_t sub_22F358A88(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (unsigned __int8 *)sub_22EF0870C(a1, *(_QWORD *)(a2 + 24));
  v5 = sub_22E3CD3D4(*a1, 32, 3);
  *(_BYTE *)v5 = 11;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 1) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16));
  v7 = sub_22E3CD3D4(*a1, 64, 3);
  *(_BYTE *)v7 = 12;
  *(_QWORD *)(v7 + 1) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = v5;
  *(_BYTE *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v6;
  if (sub_22EF090E4(v4))
    *(_WORD *)(v7 + 2) = 1;
  return v7;
}

uint64_t sub_22F358B48(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  unsigned int v29;
  unint64_t v30;
  char v31;

  v8 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if (!v8)
    goto LABEL_4;
  if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 52 > 5)
    goto LABEL_4;
  v9 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 112) + 104), *(_QWORD *)(v8 + 112));
  if ((*(_BYTE *)(v9 + 29) & 1) == 0)
    goto LABEL_4;
  sub_22EFC8E88(v9);
  v20 = *(uint64_t **)v19;
  v21 = *(unsigned int *)(v19 + 8);
  v22 = *(uint64_t **)v19;
  if ((_DWORD)v21)
  {
    v23 = 8 * v21;
    v22 = *(uint64_t **)v19;
    while (*(_WORD *)(*v22 + 32) != 197)
    {
      ++v22;
      v23 -= 8;
      if (!v23)
        goto LABEL_4;
    }
  }
  if (v22 != &v20[v21])
  {
    do
    {
      v25 = *v20++;
      v24 = v25;
    }
    while (*(_WORD *)(v25 + 32) != 197);
    v28[0] = a3;
    v31 = 0;
    v26 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
    if (v26)
    {
      if ((*(_DWORD *)(v26 + 28) & 0x7Eu) - 52 >= 6)
        v27 = 0;
      else
        v27 = v26;
    }
    else
    {
      v27 = 0;
    }
    v28[1] = v27;
    v28[2] = a4;
    v29 = a2[4];
    v30 = (unint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
    return sub_22EF085F4(a1, *(_QWORD *)(v24 + 40), v28);
  }
  else
  {
LABEL_4:
    v10 = sub_22EF0870C(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
    v11 = v10;
    v12 = a2[4];
    if ((_DWORD)v12)
    {
      v13 = (uint64_t *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        v16 = sub_22EF0870C(a1, v15);
        v17 = sub_22E3CD3D4(*a1, 32, 3);
        *(_BYTE *)v17 = 10;
        *(_QWORD *)(v17 + 1) = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = v11;
        v11 = v17;
        *(_QWORD *)(v17 + 24) = v16;
        v14 -= 8;
      }
      while (v14);
    }
    else
    {
      v17 = v10;
    }
    result = sub_22E3CD3D4(*a1, 32, 3);
    *(_BYTE *)result = 13;
    *(_QWORD *)(result + 1) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = v17;
    *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_22F358D40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int16 v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  int v11;

  switch((*(_DWORD *)a2 >> 18) & 0x3F)
  {
    case 2:
      v9 = 2;
      goto LABEL_37;
    case 3:
      v9 = 3;
      goto LABEL_37;
    case 4:
      v9 = 4;
      goto LABEL_37;
    case 5:
      v9 = 0;
      goto LABEL_37;
    case 6:
      v9 = 1;
      goto LABEL_37;
    case 7:
      v9 = 5;
      goto LABEL_37;
    case 8:
      v9 = 6;
      goto LABEL_37;
    case 9:
      v9 = 14;
      goto LABEL_37;
    case 0xA:
      v9 = 12;
      goto LABEL_37;
    case 0xB:
      v9 = 12;
      goto LABEL_29;
    case 0xC:
      v9 = 13;
      goto LABEL_37;
    case 0xD:
      v9 = 13;
LABEL_29:
      v10 = a2;
      v11 = 1;
      return sub_22F359098(a1, v9, v10, a3, v11);
    case 0xE:
      v9 = 10;
      goto LABEL_37;
    case 0xF:
      v9 = 11;
      goto LABEL_37;
    case 0x10:
      v9 = 7;
      goto LABEL_37;
    case 0x11:
      v9 = 8;
      goto LABEL_37;
    case 0x12:
      v9 = 9;
      goto LABEL_37;
    case 0x13:
      v9 = 15;
      goto LABEL_37;
    case 0x14:
      v9 = 16;
LABEL_37:
      v10 = a2;
      v11 = 0;
      return sub_22F359098(a1, v9, v10, a3, v11);
    case 0x15:
      v6 = 10;
      v7 = a2;
      v8 = 1;
      goto LABEL_15;
    case 0x16:
      v6 = 2;
      goto LABEL_14;
    case 0x17:
      v6 = 3;
      goto LABEL_14;
    case 0x18:
      v6 = 4;
      goto LABEL_14;
    case 0x19:
      v6 = 0;
      goto LABEL_14;
    case 0x1A:
      v6 = 1;
      goto LABEL_14;
    case 0x1B:
      v6 = 5;
      goto LABEL_14;
    case 0x1C:
      v6 = 6;
      goto LABEL_14;
    case 0x1D:
      v6 = 7;
      goto LABEL_14;
    case 0x1E:
      v6 = 8;
      goto LABEL_14;
    case 0x1F:
      v6 = 9;
LABEL_14:
      v7 = a2;
      v8 = 0;
LABEL_15:
      result = sub_22EF09190(a1, v6, v7, a3, v8);
      break;
    case 0x20:
      result = sub_22EF0870C(a1, *(_QWORD *)(a2 + 24));
      break;
    default:
      result = sub_22E3CD3D4(*a1, 24, 3);
      *(_BYTE *)result = 1;
      *(_QWORD *)(result + 1) = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = a2;
      break;
  }
  return result;
}

uint64_t sub_22F358EDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0)))
    v4 = 16;
  else
    v4 = 24;
  v5 = sub_22EF0870C(a1, *(_QWORD *)(a2 + v4));
  if (sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0)))
    v6 = 24;
  else
    v6 = 16;
  v7 = sub_22EF0870C(a1, *(_QWORD *)(a2 + v6));
  result = sub_22E3CD3D4(*a1, 32, 3);
  *(_BYTE *)result = 17;
  *(_QWORD *)(result + 1) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = v7;
  return result;
}

uint64_t sub_22F358F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 8);
  v13 = v3;
  if (v3)
    v4 = &v13;
  else
    v4 = 0;
  if ((v3 & 1) != 0)
    v5 = (uint64_t *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v5 = v4;
  if ((v3 & 1) != 0)
  {
    v6 = (uint64_t *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 8 + 8 * *(unsigned int *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else if (v3)
  {
    v6 = &v14;
  }
  else
  {
    v6 = 0;
  }
  while (1)
  {
    if (v5 == v6)
      return 0;
    v7 = *v5;
    if (*v5)
    {
      if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 60 <= 6)
      {
        v8 = sub_22EFBC5B4(*v5);
        v9 = sub_22EF0870C(a1, v8);
        v12 = *(_QWORD *)(v7 + 48);
        v10 = sub_22EFC72E8(v7);
        if ((sub_22F111768(&v12, v10) & 1) != 0)
          break;
      }
    }
    ++v5;
  }
  sub_22F359374(a1, v7, v9);
  return v9;
}

uint64_t sub_22F359098(uint64_t *a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v9 = sub_22EF0870C(a1, *(_QWORD *)(a3 + 16));
  v10 = sub_22EF0870C(a1, *(_QWORD *)(a3 + 24));
  result = sub_22E3CD3D4(*a1, 32, 3);
  *(_BYTE *)result = 20;
  *(_QWORD *)(result + 1) = 0;
  if (a5)
    v12 = v10;
  else
    v12 = v9;
  if (a5)
    v13 = v9;
  else
    v13 = v10;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v12;
  *(_QWORD *)(result + 24) = v13;
  *(_WORD *)(result + 2) = a2;
  return result;
}

uint64_t sub_22F35912C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_22F246C54((uint64_t *)(a1 + 48), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 16 * *(unsigned int *)(v6 + 8) + 8);
  }
  return result;
}

unsigned __int8 *sub_22F35919C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  _QWORD *v16;

  if (!a2)
    return 0;
  if (!*(_QWORD *)(a1 + 200) || *((_QWORD *)a2 + 1) || *a2 - 3 < 3)
    return a2;
  if (a3)
  {
    v8 = sub_22E3CD3D4(*(_QWORD *)a1, 48, 3);
    v5 = v8;
    v9 = 0;
    *(_BYTE *)v8 = 5;
    *(_QWORD *)(v8 + 1) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v10 = *(_QWORD *)(a3 + 40);
    v11 = "";
    if ((v10 & 7) == 0)
    {
      v12 = v10 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        v13 = *(_DWORD **)(v12 + 16);
        v14 = *v13;
        v11 = (const char *)(v13 + 4);
        v9 = v14;
      }
    }
    *(_QWORD *)(v8 + 16) = v11;
    *(_QWORD *)(v8 + 24) = v9;
    *(_QWORD *)(v8 + 32) = a2;
    *(_QWORD *)(v8 + 40) = a3;
  }
  else
  {
    v5 = (uint64_t)a2;
  }
  v15 = *(uint64_t **)(a1 + 160);
  if ((unint64_t)v15 >= *(_QWORD *)(a1 + 168))
  {
    v16 = sub_22E566A8C((void **)(a1 + 152), v5);
  }
  else
  {
    *v15 = v5;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 160) = v16;
  return (unsigned __int8 *)v5;
}

uint64_t sub_22F359284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (a3 && *(_BYTE *)a3 == 5 && !*(_QWORD *)(a3 + 40))
    *(_QWORD *)(a3 + 40) = a2;
  v10 = a2;
  v11 = 0;
  if (sub_22F246C54((uint64_t *)(a1 + 48), &v10, &v11)
    && (v6 = v11, v11 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
  {
    sub_22F359434(a1 + 120);
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 16 * *(unsigned int *)(v6 + 8) + 8);
    result = a3;
  }
  else
  {
    v7 = sub_22E3CD3D4(*(_QWORD *)a1, 24, 3);
    *(_BYTE *)v7 = 4;
    *(_QWORD *)(v7 + 1) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = a2;
    result = sub_22E3CD3D4(*(_QWORD *)a1, 32, 3);
    *(_BYTE *)result = 16;
    *(_QWORD *)(result + 1) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = v7;
    v9 = (uint64_t *)(result + 24);
  }
  *v9 = a3;
  return result;
}

uint64_t sub_22F359374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 && *(_BYTE *)a3 == 5 && !*(_QWORD *)(a3 + 40))
    *(_QWORD *)(a3 + 40) = a2;
  v6 = (uint64_t *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 120);
  v7 = a1 + 48;
  if (v5)
    v5 = ((*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4);
  v13 = a2;
  v14 = v5;
  sub_22F2611B4(v7, &v13, &v14, (uint64_t)&v12);
  sub_22F359434((uint64_t)v6);
  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  v8 = *v6;
  v9 = *(_OWORD **)(v8 + 16);
  if ((unint64_t)v9 >= *(_QWORD *)(v8 + 24))
  {
    v10 = sub_22E4D6CC4((void **)(v8 + 8), &v12);
  }
  else
  {
    *v9 = v12;
    v10 = v9 + 1;
  }
  *(_QWORD *)(v8 + 16) = v10;
  return a3;
}

uint64_t sub_22F359434(uint64_t result)
{
  uint64_t *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)result;
  v2 = *(_DWORD **)result;
  if (*(_QWORD *)result)
  {
    if (*v2 == 1)
      return result;
    --*v2;
    v3 = operator new();
    v4 = *v1;
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    result = (uint64_t)sub_22EF092E8((_QWORD *)(v3 + 8), *(_BYTE **)(v4 + 8), *(_BYTE **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 4);
  }
  else
  {
    result = operator new();
    v3 = result;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *v1 = v3;
  return result;
}

char *sub_22F3594DC(unsigned int a1)
{
  if (a1 > 0x10)
    return 0;
  else
    return off_24FAB9FB0[(char)a1];
}

BOOL sub_22F359510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 102)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F359570(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  char *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  const void *v25;

  v25 = a3;
  if (a3 && (v6 = (*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 48))(a3), (v6 & 0xFF00000000) != 0))
  {
    sub_22F3596B0(v6, a2, (uint64_t)&v22);
    v14 = *(_QWORD *)(a1 + 8);
    if (v14 >= *(_QWORD *)(a1 + 16))
    {
      v17 = sub_22EF25B18((void **)a1, (uint64_t)&v22, (uint64_t *)&v25);
      v18 = v24;
      *(_QWORD *)(a1 + 8) = v17;
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    else
    {
      v15 = v22;
      *(_DWORD *)(v14 + 8) = v23;
      *(_QWORD *)v14 = v15;
      v16 = v25;
      *(_QWORD *)(v14 + 16) = v24;
      *(_QWORD *)(v14 + 24) = v16;
      *(_QWORD *)(a1 + 8) = v14 + 32;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 >= *(_QWORD *)(a1 + 16))
    {
      v12 = sub_22EF25C54((char **)a1, a2, &v25);
    }
    else
    {
      v8 = *(_QWORD *)a2;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)v7 = v8;
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v7 + 16) = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      *(_QWORD *)(v7 + 24) = a3;
      v12 = (char *)(v7 + 32);
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
  return sub_22E3BA850(a1 + 192, v25);
}

uint64_t sub_22F3596B0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;

  v6 = operator new();
  *(_DWORD *)(v6 + 8) = 0;
  v7 = (unsigned int *)(v6 + 8);
  *(_QWORD *)v6 = &off_24FABA118;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v6 + 32) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_DWORD *)(v6 + 40) = a1;
  v20 = 0;
  v21 = 0xAC000000ACLL;
  v22 = v6;
  do
    v11 = __ldxr(v7);
  while (__stxr(v11 + 1, v7));
  sub_22F35A620(&v20, *(_DWORD *)(a2 + 8), (uint64_t)v23);
  sub_22F35A748((uint64_t)v23, 0xACu, a3);
  v12 = v24;
  if (v24)
  {
    v13 = (unsigned int *)(v24 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  result = v22;
  if (v22)
  {
    v17 = (unsigned int *)(v22 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

const char *sub_22F3597DC()
{
  return "<unknown>";
}

uint64_t sub_22F3597EC()
{
  return 0;
}

uint64_t sub_22F3597F4(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 200);
  if (v2 != *(void **)(a1 + 192))
    free(v2);
  v4 = (void **)(a1 + 168);
  sub_22EF0C9FC(&v4);
  v4 = (void **)(a1 + 144);
  sub_22EF0C9FC(&v4);
  v4 = (void **)(a1 + 120);
  sub_22EF0C9FC(&v4);
  v4 = (void **)(a1 + 96);
  sub_22EF0C9FC(&v4);
  v4 = (void **)(a1 + 72);
  sub_22EF0C9FC(&v4);
  v4 = (void **)(a1 + 48);
  sub_22EF0C9FC(&v4);
  v4 = (void **)(a1 + 24);
  sub_22EF0C9FC(&v4);
  v4 = (void **)a1;
  sub_22EF0C9FC(&v4);
  return a1;
}

double sub_22F3598AC(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 24 * v5;
    do
    {
      sub_22E5EFB0C((uint64_t)&v4[v6 - 24], *(char **)&v4[v6 - 16]);
      v6 -= 24;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F359930(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_22E5EFB0C(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

char **sub_22F359998(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      sub_22E5EFB0C((uint64_t)&v2[v4 - 24], *(char **)&v2[v4 - 16]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F359A04(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a1;
  if ((_DWORD)v3)
    v4 = v3 == v2;
  else
    v4 = 0;
  if (!v4)
    return (int)v3 < (int)v2;
  if (!*a2)
    goto LABEL_26;
  if (v2 == 6)
  {
    v8 = *((_QWORD *)a1 + 1) >= *((_QWORD *)a2 + 1);
    return !v8;
  }
  if (v2 == 72)
    goto LABEL_9;
  v9 = *a2;
  while (1)
  {
    v9 = dword_24FABB2A0[4 * v9];
    if (!(_DWORD)v9)
      break;
    if (v9 == 72)
      goto LABEL_9;
  }
  if (v2 == 5)
  {
LABEL_9:
    v6 = *((_QWORD *)a1 + 1);
    v7 = *((_QWORD *)a2 + 1);
    if (v6 < v7)
      return 1;
    v8 = v7 < v6 || *((_QWORD *)a1 + 2) >= *((_QWORD *)a2 + 2);
    return !v8;
  }
  if ((int)v2 >= 73)
  {
    v10 = *((_QWORD *)a1 + 1);
    LODWORD(v2) = 1;
    goto LABEL_27;
  }
  LODWORD(v2) = 0;
LABEL_26:
  v10 = 0;
LABEL_27:
  if (*((_QWORD *)a2 + 1) > v10)
    return v2;
  else
    return 0;
}

_DWORD *sub_22F359AD0(uint64_t a1, int *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v9 = 0;
LABEL_5:
    v6 = sub_22F359B80(a1, a2, v9);
    *v6 = *a2;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = *a2 & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 32 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v10 = 0;
    v11 = 1;
    while (v7)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v7 == 1072;
      if (v12)
        v10 = v6;
      v13 = v5 + v11++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 32 * v5);
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v6;
    goto LABEL_5;
  }
  return v6;
}

_DWORD *sub_22F359B80(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_22EF257E4(a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = *a2 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == 1072;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_22EF257E4(a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = *a2 & v16;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == 1072;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_20:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F359CD8(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD **)result;
    v5 = 32 * v3;
    do
    {
      *v4 = 0;
      v4 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if (*a2 && v8 != 1072)
      {
        v9 = v8 & v7;
        v10 = *(_QWORD *)result + 32 * v9;
        v11 = *(_DWORD *)v10;
        if (v8 != *(_DWORD *)v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == 1072;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = *(_QWORD *)result + 32 * v9;
            v11 = *(_DWORD *)v10;
            if (v8 == *(_DWORD *)v10)
              goto LABEL_9;
          }
          if (v12)
            v10 = v12;
        }
LABEL_9:
        *(_DWORD *)v10 = v8;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 2);
        *(_QWORD *)(v10 + 24) = *((_QWORD *)a2 + 3);
        ++v6;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *(_DWORD *)(result + 8) = v6;
      }
      a2 += 8;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_22F359DB0(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 49, 8);
  v11 = v10;
  v12 = v10 + 48;
  if (a3)
    memcpy((void *)(v10 + 48), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)(v11 + 40) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

BOOL sub_22F359EAC(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  v3 = *a1;
  if ((_DWORD)v3)
    v4 = v3 == v2;
  else
    v4 = 0;
  if (!v4)
    return 0;
  if (!*a2)
  {
    v7 = 0;
LABEL_13:
    if (v7)
      v8 = *((_QWORD *)a2 + 1);
    else
      v8 = 0;
    return v2 == v8;
  }
  if (v2 != 6)
  {
    if (v2 == 72)
      return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
    v9 = *a2;
    while (1)
    {
      v9 = dword_24FABB2A0[4 * v9];
      if (!(_DWORD)v9)
        break;
      if (v9 == 72)
        return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
    }
    if (v2 == 5)
      return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
    if ((int)v2 < 73)
    {
      v7 = 0;
      v2 = 0;
    }
    else
    {
      v2 = *((_QWORD *)a1 + 1);
      v7 = 1;
    }
    goto LABEL_13;
  }
  v2 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a2 + 1);
  return v2 == v8;
}

uint64_t sub_22F359F64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 49));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_22F359FDC(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_22F35A040(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  void *v5;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = *((_DWORD *)v3 - 4);
      if (v4 && v4 != 1072)
      {
        v5 = (void *)*(v3 - 1);
        if (v5)
        {
          *v3 = v5;
          operator delete(v5);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

_QWORD *sub_22F35A098(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_24FABA118;
  v2 = (unsigned int *)a1[4];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_22F35A0F0(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24FABA118;
  v1 = (unsigned int *)a1[4];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22F35A158(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((v2 & 0xFF00000000) != 0)
  {
    v3 = v2 & 0xFFFFFFFF00000000;
    v4 = v2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 40);
    v3 = 0x100000000;
  }
  return v3 & 0xFF00000000 | v2 & 0xFFFFFF0000000000 | v4;
}

uint64_t sub_22F35A1B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 16;
  v9 = sub_22F379890(a2);
  v10 = a2;
  return sub_22F35A7A4(v7, &v9, a3, a4);
}

void sub_22F35A23C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  const void ***v5;
  const void ***v6;
  char **v7;
  char *v8[2];

  v4 = *(_DWORD *)(a1 + 8);
  if (v4
    || (v8[0] = 0,
        v8[1] = 0,
        v7 = v8,
        sub_22F35A2EC(a1, (unint64_t)&v7),
        sub_22E5EFB0C((uint64_t)&v7, v8[0]),
        (v4 = *(_DWORD *)(a1 + 8)) != 0))
  {
    v5 = *(const void ****)a1;
    v6 = &v5[3 * v4];
    do
    {
      sub_22EEF5424((uint64_t)&v7, v5);
      (*(void (**)(uint64_t, char ***))(*(_QWORD *)a2 + 16))(a2, &v7);
      sub_22E5EFB0C((uint64_t)&v7, v8[0]);
      v5 += 3;
    }
    while (v5 != v6);
  }
}

_QWORD *sub_22F35A2EC(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  result = (_QWORD *)sub_22EF260F4(a1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8));
  *v4 = *result;
  v5 = result + 1;
  v6 = result[1];
  v4[1] = v6;
  v7 = v4 + 1;
  v8 = result[2];
  v4[2] = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *result = v5;
    *v5 = 0;
    result[2] = 0;
  }
  else
  {
    *v4 = v7;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F35A360(int a1)
{
  __asm { BR              X10 }
}

void sub_22F35A3A0()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  __int128 v10;
  unsigned int v11;

  v4 = *v2;
  v5 = v2[1];
  v6 = v1;
  if (*v2 != v5)
  {
    v6 = v1;
    do
    {
      v6 = sub_22EF95614(v6, *(_DWORD *)(v4 + 8));
      v4 += 24;
    }
    while (v4 != v5);
  }
  v7 = operator new();
  v8 = v2[2];
  *(_DWORD *)(v7 + 8) = 0;
  v9 = (unsigned int *)(v7 + 8);
  v10 = *(_OWORD *)v2;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)v7 = off_24FABA1B0;
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v3 - 72) = 0;
  *(_QWORD *)(v3 - 64) = 0;
  *(_QWORD *)(v3 - 80) = 0;
  do
    v11 = __ldxr(v9);
  while (__stxr(v11 + 1, v9));
  *(_BYTE *)v0 = 0;
  *(_DWORD *)(v0 + 4) = v1;
  *(_DWORD *)(v0 + 8) = v6;
  *(_QWORD *)(v0 + 16) = v7;
  *(_QWORD *)(v3 - 56) = v3 - 80;
  sub_22EEE8494((void ***)(v3 - 56));
}

_QWORD *sub_22F35A620@<X0>(_QWORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)a3 = *result;
  v3 = result[2];
  *(_QWORD *)(a3 + 16) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t sub_22F35A650@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;

  v2 = atomic_load((unsigned __int8 *)&qword_253E4C0F0);
  v3 = &qword_253E4C000;
  if ((v2 & 1) == 0)
  {
    v7 = result;
    v8 = a2;
    v9 = __cxa_guard_acquire(&qword_253E4C0F0);
    a2 = v8;
    v10 = v9;
    result = v7;
    if (v10)
    {
      v11 = (_QWORD *)operator new();
      *v11 = &off_24FABA150;
      qword_253E4C0E8 = (uint64_t)v11;
      v11[1] = 0;
      v12 = (unsigned int *)(v11 + 1);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      __cxa_atexit((void (*)(void *))sub_22EF25DC4, &qword_253E4C0E8, &dword_22E3A8000);
      __cxa_guard_release(&qword_253E4C0F0);
      a2 = v8;
      result = v7;
      v3 = &qword_253E4C000;
    }
  }
  v4 = v3[29];
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_22F35A748@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;

  *(_QWORD *)a3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a3 + 16) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a3 + 4) = a2;
  result = sub_22EF95614(a2, *(_DWORD *)(a1 + 8));
  *(_DWORD *)(a3 + 8) = result;
  return result;
}

uint64_t sub_22F35A7A4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v22[10];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  v10 = sub_22F365534(v8);
  v11 = v10;
  v12 = *(_DWORD *)(v10 + 8);
  if ((v9 & 0xFF00000000) != 0)
    *(_DWORD *)(v10 + 8) = v9;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (*(_DWORD *)(sub_22F365534(v13) + 8) != 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3) & 1) == 0)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    if (*(_DWORD *)(sub_22F365534(v15) + 8) == 1
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3) & 1) == 0)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
      v17 = sub_22F365534(v16);
      v18 = sub_22EFECD0C(v17, a2, (uint64_t)v22);
      v19 = v22[0];
      if (v22[0])
      {
        v20 = *(unsigned int *)(a1 + 8);
        if (*(_DWORD *)(a1 + 8))
        {
          if (v20 != v22[0])
          {
            do
              v19 = dword_24FABB2A0[4 * v19];
            while (v19 != v20 && v19 != 0);
          }
          if (v19 == v20
            && ((*(uint64_t (**)(_QWORD, _DWORD *, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v22, a3, a4, v18) & 1) != 0)
          {
            result = 1;
            goto LABEL_6;
          }
        }
      }
      sub_22F35AE18((uint64_t *)a4, *(_QWORD *)a4, (_QWORD *)(*(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8)));
    }
  }
  result = 0;
LABEL_6:
  *(_DWORD *)(v11 + 8) = v12;
  return result;
}

uint64_t sub_22F35A96C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  v10 = sub_22F365534(v8);
  v11 = v10;
  v12 = *(_DWORD *)(v10 + 8);
  if ((v9 & 0xFF00000000) != 0)
    *(_DWORD *)(v10 + 8) = v9;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (*(_DWORD *)(sub_22F365534(v13) + 8) == 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3) & 1) != 0
    || (v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3), *(_DWORD *)(sub_22F365534(v15) + 8) != 1)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v17 = sub_22F365534(v16);
    v18 = sub_22EFECD0C(v17, a2, (uint64_t)v20);
    v14 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v20, a3, a4, v18);
    if ((v14 & 1) == 0)
      sub_22F35AE18((uint64_t *)a4, *(_QWORD *)a4, (_QWORD *)(*(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8)));
  }
  *(_DWORD *)(v11 + 8) = v12;
  return v14;
}

void sub_22F35AAFC(uint64_t *a1@<X0>, const std::string::value_type *a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;

  if (*(_BYTE *)a1)
  {
    v13 = *a1;
    v14 = *((_DWORD *)a1 + 2);
    v7 = a1[2];
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = operator new();
    *(_DWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)(v10 + 8);
    *(_QWORD *)v10 = off_24FABA180;
    std::string::__init((std::string *)(v10 + 16), a2, a3);
    *(_QWORD *)(v10 + 40) = v7;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_QWORD *)a4 = v13;
    *(_DWORD *)(a4 + 8) = v14;
    *(_QWORD *)(a4 + 16) = v10;
    *(_BYTE *)(a4 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
}

void sub_22F35AC10(uint64_t a1, uint64_t a2)
{
  sub_22F35AC28(a1, *(const void ****)a2, (const void ***)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8)));
}

void sub_22F35AC28(uint64_t a1, const void ***a2, const void ***a3)
{
  const void ***v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 > *(unsigned int *)(a1 + 12))
  {
    sub_22F34F048(a1);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)a1 + 24 * v7;
    do
    {
      v9 = sub_22EEF5424(v8, v4);
      v4 += 3;
      v8 = v9 + 24;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

void sub_22F35ACC0(uint64_t a1, void *__src, size_t __len, __int128 *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 || (sub_22F35AD40(a1), (v8 = *(_DWORD *)(a1 + 8)) != 0))
  {
    v9 = *(_QWORD *)a1;
    v10 = v9 + 24 * v8;
    do
    {
      sub_22EF25F98(v9, __src, __len, a4);
      v9 += 24;
    }
    while (v9 != v10);
  }
}

uint64_t sub_22F35AD40(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F35AD7C(a1);
  v2 = (_QWORD *)(*(_QWORD *)a1 + 24 * v1);
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_22F35AD7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = (_QWORD *)(v2 + 24 * *(unsigned int *)(a1 + 8));
  v3[2] = 0;
  v3[1] = 0;
  *v3 = v3 + 1;
  sub_22F34F0B4((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  return v2 + 24 * v4 - 24;
}

uint64_t sub_22F35AE18(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *a1 + 24 * v6;
  if ((_QWORD *)v7 == a3)
  {
    v9 = a2;
  }
  else
  {
    v8 = a3;
    v9 = a2;
    do
    {
      sub_22F359930(v9, v8);
      v8 += 3;
      v9 += 24;
    }
    while (v8 != (_QWORD *)v7);
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
  }
  v10 = v5 + 24 * v6;
  if (v10 != v9)
  {
    do
    {
      v11 = v10 - 24;
      sub_22E5EFB0C(v10 - 24, *(char **)(v10 - 16));
      v10 = v11;
    }
    while (v11 != v9);
    v5 = *a1;
  }
  *((_DWORD *)a1 + 2) = -1431655765 * ((unint64_t)(v9 - v5) >> 3);
  return a2;
}

uint64_t sub_22F35AEE0(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23[5];
  uint64_t v24[5];
  _QWORD v25[2];
  char v26;
  _QWORD *v27;
  __int128 v28;
  _QWORD v29[17];

  v29[16] = *MEMORY[0x24BDAC8D0];
  v27 = v29;
  v28 = xmmword_22F44E310;
  sub_22E61131C((uint64_t)&v27, a2, &a2[a3]);
  v10 = "_private";
  if (a6)
    v10 = "";
  v22 = 261;
  v21[0] = a4;
  v21[1] = a5;
  v20 = 261;
  if (a6)
    v11 = 0;
  else
    v11 = 8;
  v19[0] = (uint64_t)v10;
  v19[1] = v11;
  sub_22E78CF44(v21, v19, (uint64_t)v23);
  v17 = ".";
  v18 = 259;
  sub_22E78CF44(v23, (uint64_t *)&v17, (uint64_t)v24);
  v15 = "apinotes";
  v16 = 259;
  sub_22E78CF44(v24, (uint64_t *)&v15, (uint64_t)v25);
  llvm::sys::path::append();
  sub_22F1D07D8(a1, v27, v28, 1, 1, (uint64_t)v25);
  v12 = v26;
  v13 = v25[0];
  if (v27 != v29)
    free(v27);
  if ((v12 & 1) != 0)
    return 0;
  else
    return v13;
}

uint64_t sub_22F35B058(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23[2];
  char v24;
  __int16 v25;
  uint64_t v26[2];
  char v27;
  __int16 v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*a1 + 16);
  v29 = v31;
  v30 = xmmword_22F44E310;
  sub_22E61131C((uint64_t)&v29, a2, &a2[a3]);
  v11 = v30;
  v26[0] = (uint64_t)"APINotes";
  v28 = 259;
  v22 = 257;
  v18 = 257;
  llvm::sys::path::append();
  v20 = 261;
  v19[0] = a4;
  v19[1] = a5;
  if (a6)
    v12 = ".";
  else
    v12 = "_private.";
  v17 = v12;
  v18 = 259;
  sub_22E78CF44(v19, (uint64_t *)&v17, (uint64_t)v21);
  v23[0] = (uint64_t)"apinotes";
  v25 = 259;
  sub_22E78CF44(v21, v23, (uint64_t)v26);
  llvm::sys::path::append();
  sub_22F1D07D8(v10, v29, v30, 0, 1, (uint64_t)v23);
  if ((v24 & 1) != 0)
    goto LABEL_12;
  sub_22E4CE690(&v29, v11);
  v13 = a6 ? "Headers" : "PrivateHeaders";
  v26[0] = (uint64_t)v13;
  v28 = 259;
  v22 = 257;
  v20 = 257;
  v18 = 257;
  llvm::sys::path::append();
  sub_22F1D0728(v10, (char *)v29, v30, 1, (uint64_t)v26);
  if ((v27 & 1) != 0)
  {
LABEL_12:
    v15 = 0;
  }
  else
  {
    v14 = v26[0];
    if (sub_22EF26D90(a1, v26[0], v23[0]))
      v15 = 0;
    else
      v15 = v14;
  }
  if (v29 != v31)
    free(v29);
  return v15;
}

BOOL sub_22F35B294(uint64_t a1, const void **a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  const void *v6;
  unsigned int v7;

  sub_22E3BA850(a1, *a2);
  v5 = v4;
  if (v4)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(a1 + 72);
    if (v7 >= *(_DWORD *)(a1 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 72);
  }
  return v5 != 0;
}

void **sub_22F35B314(uint64_t a1)
{
  void **result;
  uint64_t v3;
  uint64_t v4;

  result = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a1, *(void **)(*(_QWORD *)(a1 + 64) + 8 * *(unsigned int *)(a1 + 72) - 8));
  v3 = *(_QWORD *)(a1 + 8);
  v4 = 16;
  if (v3 == *(_QWORD *)a1)
    v4 = 20;
  if (result != (void **)(v3 + 8 * *(unsigned int *)(a1 + v4)))
  {
    *result = (void *)-2;
    ++*(_DWORD *)(a1 + 24);
  }
  --*(_DWORD *)(a1 + 72);
  return result;
}

void sub_22F35B388(int *a1)
{
  _DWORD *v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  __int128 v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  sub_22E74181C((uint64_t)a1, 0, 2u);
  v9 = v11;
  v10 = xmmword_22F44E300;
  sub_22EF27E34(a1, 8, "CONTROL_BLOCK", 0xDuLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 9uLL);
  *(_BYTE *)v9 = 1;
  *(_QWORD *)((char *)v9 + 1) = 0x415441444154454DLL;
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF2DA0C(&v9, 0xCuLL);
  *(_BYTE *)v9 = 2;
  v2 = v9;
  *(_QWORD *)((char *)v9 + 1) = *(_QWORD *)"MODULE_NAME";
  v2[2] = 1162690894;
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 9, "IDENTIFIER_BLOCK", 0x10uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x10uLL);
  *(_BYTE *)v9 = 1;
  v3 = v9;
  *(_QWORD *)((char *)v9 + 1) = *(_QWORD *)"IDENTIFIER_DATA";
  v3[1] = *(_QWORD *)"IER_DATA";
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 10, "OBJC_CONTEXT_BLOCK", 0x12uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x15uLL);
  *(_BYTE *)v9 = 1;
  v4 = (char *)v9;
  *(_OWORD *)((char *)v9 + 1) = *(_OWORD *)"OBJC_CONTEXT_ID_DATA";
  *(_DWORD *)(v4 + 17) = 1096040772;
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 11, "OBJC_PROPERTY_BLOCK", 0x13uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x13uLL);
  *(_BYTE *)v9 = 1;
  v5 = (char *)v9;
  *(_OWORD *)((char *)v9 + 1) = *(_OWORD *)"OBJC_PROPERTY_DATA";
  *(_WORD *)(v5 + 17) = 16724;
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 12, "OBJC_METHOD_BLOCK", 0x11uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x11uLL);
  *(_BYTE *)v9 = 1;
  *(_OWORD *)((char *)v9 + 1) = *(_OWORD *)"OBJC_METHOD_DATA";
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 13, "OBJC_SELECTOR_BLOCK", 0x13uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x13uLL);
  *(_BYTE *)v9 = 1;
  v6 = (char *)v9;
  *(_OWORD *)((char *)v9 + 1) = *(_OWORD *)"OBJC_SELECTOR_DATA";
  *(_WORD *)(v6 + 17) = 16724;
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 14, "GLOBAL_VARIABLE_BLOCK", 0x15uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x15uLL);
  *(_BYTE *)v9 = 1;
  v7 = (char *)v9;
  *(_OWORD *)((char *)v9 + 1) = *(_OWORD *)"GLOBAL_VARIABLE_DATA";
  *(_DWORD *)(v7 + 17) = 1096040772;
  sub_22F35C1BC(a1, 3u, &v9);
  sub_22EF27E34(a1, 15, "GLOBAL_FUNCTION_BLOCK", 0x15uLL, (uint64_t)&v9);
  sub_22EF2DA0C(&v9, 0x15uLL);
  *(_BYTE *)v9 = 1;
  v8 = (char *)v9;
  *(_OWORD *)((char *)v9 + 1) = *(_OWORD *)"GLOBAL_FUNCTION_DATA";
  *(_DWORD *)(v8 + 17) = 1096040772;
  sub_22F35C1BC(a1, 3u, &v9);
  if (v9 != v11)
    free(v9);
  sub_22E7416F4((uint64_t)a1);
}

void sub_22F35B73C(uint64_t a1, llvm::raw_ostream *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E74181C((uint64_t)a2, 8u, 3u);
  v4 = sub_22F35D3D0((uint64_t)a2);
  *(_DWORD *)(a1 + 64) = 0;
  sub_22F35D4F8(a2, a1 + 56, v4);
  v5 = sub_22F35D668((uint64_t)a2);
  *(_DWORD *)(a1 + 64) = 0;
  sub_22F35D788(a2, a1 + 56, v5, a1 + 584);
  if (*(_BYTE *)(a1 + 616))
  {
    v6 = sub_22F35D824((uint64_t)a2);
    *(_DWORD *)(a1 + 64) = 0;
    sub_22F35D944(a2, a1 + 56, v6, (unsigned __int8 *)(a1 + 616));
  }
  if (*(_QWORD *)(a1 + 608))
  {
    v7 = sub_22F35DA4C((uint64_t)a2);
    v8 = *(_QWORD *)(a1 + 608);
    v9 = *(_QWORD *)(v8 + 24);
    v10 = *(_QWORD *)(v8 + 32);
    v11 = v9;
    *(_DWORD *)(a1 + 64) = 0;
    sub_22F35DB74(a2, a1 + 56, v7, &v11, &v10);
  }
  sub_22E7416F4((uint64_t)a2);
}

uint64_t sub_22F35B82C(uint64_t *a1)
{
  int v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *((_DWORD *)a1 + 2);
  result = *a1;
  v4 = *((_DWORD *)a1 + 4);
  v5 = result + 176 * v4;
  if (!v2)
    return v5;
  if (v4)
  {
    v6 = 176 * v4;
    while (1)
    {
      v7 = *(unsigned __int8 *)(result + 4);
      if ((*(_DWORD *)result != -1 || v7 != 255) && (*(_DWORD *)result != -2 || v7 != 254))
        break;
      result += 176;
      v6 -= 176;
      if (!v6)
        return v5;
    }
  }
  return result;
}

uint64_t sub_22F35B890(uint64_t *a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)a1 + 2);
  result = *a1;
  v4 = *((unsigned int *)a1 + 4);
  v5 = result + 144 * v4;
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 144 * v4;
    while (1)
    {
      if (*(_DWORD *)result == -2)
      {
        if (*(_DWORD *)(result + 4) != -2 || *(unsigned __int8 *)(result + 8) != 254)
          return result;
      }
      else if (*(_DWORD *)result != -1 || *(_DWORD *)(result + 4) != -1 || *(unsigned __int8 *)(result + 8) != 255)
      {
        return result;
      }
      result += 144;
      v6 -= 144;
      if (!v6)
        return v5;
    }
  }
  return result;
}

uint64_t sub_22F35B914(uint64_t *a1)
{
  int v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)a1 + 2);
  result = *a1;
  v4 = *((_DWORD *)a1 + 4);
  v5 = result + 176 * v4;
  if (!v2)
    return v5;
  if (v4)
  {
    v6 = 176 * v4;
    while (1)
    {
      if (*(_DWORD *)result == -2)
      {
        if (*(_DWORD *)(result + 4) != -2 || *(unsigned __int8 *)(result + 8) != 254)
          return result;
      }
      else if (*(_DWORD *)result != -1 || *(_DWORD *)(result + 4) != -1 || *(unsigned __int8 *)(result + 8) != 255)
      {
        return result;
      }
      result += 176;
      v6 -= 176;
      if (!v6)
        return v5;
    }
  }
  return result;
}

uint64_t sub_22F35B998(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[2];

  v1 = *((_DWORD *)a1 + 2);
  v2 = *a1;
  result = *a1 + 48 * *((unsigned int *)a1 + 4);
  if (v1)
  {
    v4[0] = v2;
    v4[1] = result;
    sub_22F35D048((uint64_t)v4);
    return v4[0];
  }
  return result;
}

void sub_22F35B9E0(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v4;
  _QWORD v5[4];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12[3];
  uint64_t v13;

  v4 = 0;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &v13;
  v5[0] = v12;
  v5[1] = 0;
  v5[2] = 0x20000000;
  v5[3] = 0;
  v6 = 2;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  do
    sub_22E740F64((llvm::raw_ostream *)v5, byte_22F49E51A[v4++], 8);
  while (v4 != 4);
  sub_22F35B388((int *)v5);
  sub_22F35B73C(a1, (llvm::raw_ostream *)v5);
  sub_22EF27F1C();
  sub_22EF283F4();
  sub_22EF28FB8();
  sub_22EF29758();
  sub_22EF29E84();
  sub_22EF2A470();
  sub_22EF2ABCC();
  sub_22EF2B2E8();
  sub_22EF2BA30();
  sub_22EF2C194();
  sub_22E6C6130((uint64_t)v5);
  llvm::raw_ostream::write(a2, (const char *)v12[0]);
  if (*((_QWORD *)a2 + 4) != *((_QWORD *)a2 + 2))
    llvm::raw_ostream::flush_nonempty(a2);
  if (v12[0] != &v13)
    free(v12[0]);
}

uint64_t *sub_22F35BB40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    v3 = sub_22EF2DA8C(v2);
    MEMORY[0x2348A0E9C](v3, 0x10F2C4011BF7A9ELL);
  }
  return a1;
}

void sub_22F35BB80(uint64_t *a1, llvm::raw_ostream *a2)
{
  sub_22F35B9E0(*a1, a2);
}

uint64_t sub_22F35BB88(unsigned int *a1, const void *a2, size_t a3)
{
  int Key;
  uint64_t *v7;
  unint64_t v9;

  if (!a3)
    return 0;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)a1[2])
  {
    v9 = (unint64_t)(a1[3] + 1) << 33;
    v7 = sub_22F2775A8((llvm::StringMapImpl *)a1, a2, a3, (uint64_t *)&v9);
  }
  else
  {
    v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * Key);
  }
  return *(_QWORD *)(*v7 + 8);
}

uint64_t sub_22F35BC24(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  unsigned int v5;
  char v6;
  char v8;

  result = sub_22F35CB60(a1, a2);
  v4 = *(_BYTE *)(result + 120);
  if ((v4 & 1) == 0 && (*(_BYTE *)(a2 + 120) & 1) != 0)
  {
    v4 = v4 & 0xF8 | *(_BYTE *)(a2 + 120) & 6 | 1;
    *(_BYTE *)(result + 120) = v4;
  }
  if ((v4 & 0x10) == 0)
  {
    v4 = *(_BYTE *)(a2 + 120) & 0x10 | v4 & 0xCF | (32 * ((~*(unsigned __int8 *)(a2 + 120) & 0x30) == 0));
    *(_BYTE *)(result + 120) = v4;
  }
  if ((v4 & 0x40) == 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 120);
    v6 = v5 & 0x40;
    if ((v5 & 0x40) != 0 && v5 >= 0xC0)
      v8 = 0x80;
    else
      v8 = 0;
    v4 = v8 & 0xC0 | v4 & 0x3F | v6;
    *(_BYTE *)(result + 120) = v4;
  }
  *(_BYTE *)(result + 120) = *(_BYTE *)(a2 + 120) & 8 | v4;
  return result;
}

uint64_t sub_22F35BCC8(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;
  void *v19[2];
  _BYTE v20[16];
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  v23 = v25;
  v24 = 0x200000000;
  v22 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  if (v4 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *((_QWORD *)a2 + 2);
  }
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = v5 + 16 * v4;
    do
    {
      v7 = sub_22F35BB88((unsigned int *)a1, *(const void **)v5, *(_QWORD *)(v5 + 8));
      v8 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v24;
      }
      *((_QWORD *)v23 + v8) = v7;
      LODWORD(v24) = v24 + 1;
      v5 += 16;
    }
    while (v5 != v6);
  }
  v10 = (_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  v18 = 0;
  v11 = sub_22F35CC98(v9, *(_DWORD *)(a1 + 48), (uint64_t)&v22, &v18);
  v12 = *(_DWORD *)(a1 + 48);
  if (v11)
    v13 = v18;
  else
    v13 = *v10 + 48 * v12;
  if (v13 == *(_QWORD *)(a1 + 32) + 48 * v12)
  {
    v16 = *(unsigned int *)(a1 + 40);
    LODWORD(v18) = v22;
    v19[0] = v20;
    v19[1] = (void *)0x200000000;
    if ((_DWORD)v24)
      sub_22F24C890((uint64_t)v19, (uint64_t)&v23);
    v21 = v16 << 33;
    sub_22F35D080((uint64_t)v17, (uint64_t)v10, &v18, &v21);
    v13 = v17[0];
    if (v19[0] != v20)
      free(v19[0]);
  }
  v14 = *(_QWORD *)(v13 + 40);
  if (v23 != v25)
    free(v23);
  return v14;
}

uint64_t sub_22F35BE9C(unsigned int **a1, const void *a2, size_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15[124];
  int v16;

  v10 = sub_22F35BB88(*a1, a2, a3);
  v11 = (uint64_t)(*a1 + 186);
  v16 = v10 >> 33;
  v12 = sub_22F35EAF8(v11, &v16) + 2;
  v14[0] = a5;
  v14[1] = a6;
  sub_22EF2E040(v15, a4);
  sub_22EF2D7EC((uint64_t)v12, (unint64_t)v14);
  return sub_22EF2E11C((uint64_t)v15);
}

uint64_t sub_22F35BF28(unsigned int **a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[16];
  int v19;
  int v20;

  v10 = sub_22F35BB88(*a1, a2, a3);
  v11 = (uint64_t)(*a1 + 198);
  v20 = v10 >> 33;
  v12 = sub_22F35F14C(v11, &v20);
  v17[0] = a5;
  v17[1] = a6;
  sub_22F30BE10((uint64_t)v18, a4);
  v18[15] = *(_QWORD *)(a4 + 120);
  v19 = *(_DWORD *)(a4 + 128);
  v13 = sub_22EF4283C((uint64_t)(v12 + 2), (unint64_t)v17, 1);
  v14 = *((_QWORD *)v12 + 1) + 152 * v12[4];
  *(_OWORD *)v14 = *(_OWORD *)v13;
  sub_22E917140(v14 + 16, (__int128 *)(v13 + 16));
  v15 = *(_QWORD *)(v13 + 136);
  *(_DWORD *)(v14 + 144) = *(_DWORD *)(v13 + 144);
  *(_QWORD *)(v14 + 136) = v15;
  ++v12[4];
  return sub_22E9170C8((uint64_t)v18);
}

uint64_t sub_22F35C018(unsigned int **a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[16];
  int v18;

  v10 = sub_22F35BB88(*a1, a2, a3);
  v11 = (uint64_t)(*a1 + 204);
  v18 = v10 >> 33;
  v12 = sub_22F35F664(v11, &v18);
  v16[0] = a5;
  v16[1] = a6;
  sub_22F30BE10((uint64_t)v17, a4);
  v17[15] = *(_QWORD *)(a4 + 120);
  v13 = sub_22EF42A48((uint64_t)(v12 + 2), (unint64_t)v16, 1);
  v14 = *((_QWORD *)v12 + 1) + 144 * v12[4];
  *(_OWORD *)v14 = *(_OWORD *)v13;
  sub_22E917140(v14 + 16, (__int128 *)(v13 + 16));
  *(_QWORD *)(v14 + 136) = *(_QWORD *)(v13 + 136);
  ++v12[4];
  return sub_22E9170C8((uint64_t)v17);
}

uint64_t sub_22F35C0F8(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)result + 616) = a2 & 1;
  return result;
}

llvm::raw_ostream *sub_22F35C108(int *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  llvm::raw_ostream *result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 8);
  sub_22E740F64((llvm::raw_ostream *)a1, 3u, a1[8]);
  sub_22E740F64((llvm::raw_ostream *)a1, 1u, 6);
  v5 = v4;
  if (v4 >= 0x20)
  {
    v6 = v4;
    do
    {
      sub_22E740F64((llvm::raw_ostream *)a1, v6 & 0x1F | 0x20, 6);
      v5 = v6 >> 5;
      v7 = v6 > 0x3FF;
      v6 >>= 5;
    }
    while (v7);
  }
  result = sub_22E740F64((llvm::raw_ostream *)a1, v5, 6);
  if ((_DWORD)v4)
  {
    v9 = 0;
    v10 = 4 * v4;
    do
    {
      result = sub_22E742298((llvm::raw_ostream *)a1, *(unsigned int *)(*(_QWORD *)a2 + v9), 6);
      v9 += 4;
    }
    while (v10 != v9);
  }
  return result;
}

llvm::raw_ostream *sub_22F35C1BC(int *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  llvm::raw_ostream *result;
  uint64_t v11;

  v6 = a3[1];
  sub_22E740F64((llvm::raw_ostream *)a1, 3u, a1[8]);
  sub_22E740F64((llvm::raw_ostream *)a1, a2, 6);
  v7 = v6;
  if (v6 >= 0x20)
  {
    v8 = v6;
    do
    {
      sub_22E740F64((llvm::raw_ostream *)a1, v8 & 0x1F | 0x20, 6);
      v7 = v8 >> 5;
      v9 = v8 > 0x3FF;
      v8 >>= 5;
    }
    while (v9);
  }
  result = sub_22E740F64((llvm::raw_ostream *)a1, v7, 6);
  if ((_DWORD)v6)
  {
    v11 = 0;
    do
      result = sub_22E742298((llvm::raw_ostream *)a1, *(unsigned __int8 *)(*a3 + v11++), 6);
    while (v6 != v11);
  }
  return result;
}

void sub_22F35C274(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  v4 = v6;
  v5 = 0x200000000;
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      *(_DWORD *)(v3 - 24) = -1;
      *(_QWORD *)(v3 - 16) = v3;
      *(_QWORD *)(v3 - 8) = 0x200000000;
      if ((_DWORD)v5)
        sub_22F24C890(v3 - 16, (uint64_t)&v4);
      v3 += 48;
      v2 -= 48;
    }
    while (v2);
    if (v4 != v6)
      free(v4);
  }
}

uint64_t sub_22F35C358(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(llvm **)a1;
  if (v2)
  {
    v4 = 168 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
        v5 = sub_22F35C3D4(v5);
      v5 += 21;
      v4 -= 168;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 168 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

char **sub_22F35C3D4(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 128;
    v5 = 144 * v3;
    do
    {
      sub_22E9170C8((uint64_t)&v4[v5]);
      v5 -= 144;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F35C438(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(llvm **)a1;
  if (v2)
  {
    v4 = 176 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
        v5 = sub_22F35C4B4(v5);
      v5 += 22;
      v4 -= 176;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 176 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

char **sub_22F35C4B4(char **a1)
{
  char *v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = v2 - 136;
    v5 = 152 * v3;
    do
    {
      sub_22E9170C8((uint64_t)&v4[v5]);
      v5 -= 152;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F35C518(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 96 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
        v5 = sub_22F35C594(v5);
      v5 += 12;
      v4 -= 96;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 96 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

char **sub_22F35C594(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 56;
    v5 = 72 * v3;
    do
    {
      sub_22EF2DDE8((uint64_t)&v4[v5]);
      v5 -= 72;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F35C5F8(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 160 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
        v5 = sub_22F35C674(v5);
      v5 += 20;
      v4 -= 160;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 160 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

char **sub_22F35C674(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 120;
    v5 = 136 * v3;
    do
    {
      sub_22EF2E11C((uint64_t)&v4[v5]);
      v5 -= 136;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F35C6D8(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = v2 << 7;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
        v5 = sub_22E916354(v5);
      v5 += 16;
      v4 -= 128;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = (void *)((unint64_t)*(unsigned int *)(a1 + 16) << 7);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, v6);
  return a1;
}

char **sub_22F35C744(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 128;
    v5 = 144 * v3;
    do
    {
      sub_22EF2E11C((uint64_t)&v4[v5]);
      v5 -= 144;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_22F35C7A8(char **result)
{
  int v1;
  uint64_t v2;
  int v3;
  char **v4;
  int v5;

  v1 = *((_DWORD *)result + 4);
  if (v1)
  {
    v2 = (uint64_t)&(*result)[176 * v1];
    result = (char **)(*result + 16);
    do
    {
      v4 = result - 2;
      v3 = *((_DWORD *)result - 4);
      v5 = *((unsigned __int8 *)result - 12);
      if ((v3 != -1 || v5 != 255) && (v3 != -2 || v5 != 254))
        result = sub_22F35C3D4(result);
      result += 22;
    }
    while (v4 + 22 != (char **)v2);
  }
  return result;
}

void sub_22F35C820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      v4 = *(void **)(v3 - 16);
      if ((void *)v3 != v4)
        free(v4);
      v3 += 48;
      v2 -= 48;
    }
    while (v2);
  }
}

uint64_t sub_22F35C900(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  if (a1 != a2)
  {
    v5 = (char *)(a2 + 16);
    v4 = *(char **)a2;
    if (v4 != v5)
    {
      sub_22F35CAE4((char **)a1, (char **)a2);
      return a1;
    }
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      v19 = *(char **)a1;
      if (v6)
      {
        sub_22EF2DC74((uint64_t)&v30, (uint64_t)v4, (uint64_t)&v4[144 * v6], (uint64_t)v19);
        v21 = v20;
        v19 = *(char **)a1;
        LODWORD(v7) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v21 = *(char **)a1;
      }
      v22 = &v19[144 * v7];
      if (v22 != v21)
      {
        do
        {
          v23 = v22 - 144;
          sub_22E9170C8((uint64_t)(v22 - 128));
          v22 = v23;
        }
        while (v23 != v21);
      }
      *(_DWORD *)(a1 + 8) = v6;
      v24 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)a2 - 128;
        v26 = 144 * v24;
        do
        {
          sub_22E9170C8(v25 + v26);
          v26 -= 144;
        }
        while (v26);
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      if ((_DWORD)v7)
      {
        v28 = *(_QWORD *)a1 - 128;
        v29 = 144 * v7;
        do
        {
          sub_22E9170C8(v28 + v29);
          v29 -= 144;
        }
        while (v29);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BCBC(a1);
    }
    else if ((_DWORD)v7)
    {
      sub_22EF2DC74((uint64_t)&v31, (uint64_t)v4, (uint64_t)&v4[144 * v7], *(_QWORD *)a1);
LABEL_7:
      v8 = *(char **)a2;
      v9 = *(unsigned int *)(a2 + 8);
      if (v7 != v9)
      {
        v10 = &v8[144 * v9];
        v11 = 144 * v7 + 16;
        v12 = *(_QWORD *)a1 + v11;
        v13 = &v8[v11];
        do
        {
          *(_OWORD *)(v12 - 16) = *((_OWORD *)v13 - 1);
          sub_22E917140(v12, (__int128 *)v13);
          *(_BYTE *)(v14 + 120) = v13[120];
          v12 = v14 + 144;
          v15 = v13 + 128;
          v13 += 144;
        }
        while (v15 != v10);
        v8 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v6;
      v16 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v16)
      {
        v17 = v8 - 128;
        v18 = 144 * v16;
        do
        {
          sub_22E9170C8((uint64_t)&v17[v18]);
          v18 -= 144;
        }
        while (v18);
      }
LABEL_22:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    v7 = 0;
    goto LABEL_7;
  }
  return a1;
}

double sub_22F35CAE4(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 128;
    v7 = 144 * v5;
    do
    {
      sub_22E9170C8((uint64_t)&v6[v7]);
      v7 -= 144;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_22F35CB60(uint64_t a1, uint64_t a2)
{
  sub_22F35CBB0((std::string *)a1, (std::string *)a2);
  if (!*(_BYTE *)(a1 + 80))
    sub_22E91703C((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  if (!*(_BYTE *)(a1 + 112))
    sub_22E91703C((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  return a1;
}

std::string *sub_22F35CBB0(std::string *this, std::string *__str)
{
  std::string::size_type v4;

  if ((__str[1].__r_.__value_.__s.__data_[0] & 1) != 0)
  {
    this[1].__r_.__value_.__s.__data_[0] |= 1u;
    if (!(SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0
         ? this->__r_.__value_.__l.__size_
         : HIBYTE(this->__r_.__value_.__r.__words[2])))
      std::string::operator=(this, __str);
  }
  if ((__str[1].__r_.__value_.__s.__data_[0] & 2) != 0)
  {
    this[1].__r_.__value_.__s.__data_[0] |= 2u;
    if (!(SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0
         ? this->__r_.__value_.__l.__size_
         : HIBYTE(this->__r_.__value_.__r.__words[2])))
      std::string::operator=(this, __str);
  }
  if ((this[1].__r_.__value_.__s.__data_[0] & 4) == 0)
    this[1].__r_.__value_.__s.__data_[0] = this[1].__r_.__value_.__s.__data_[0] & 0xF3 | __str[1].__r_.__value_.__s.__data_[0] & 4 | __str[1].__r_.__value_.__s.__data_[0] & (2 * __str[1].__r_.__value_.__s.__data_[0]) & 8;
  if (this[2].__r_.__value_.__s.__data_[7] < 0)
    v4 = this[1].__r_.__value_.__r.__words[2];
  else
    v4 = this[2].__r_.__value_.__s.__data_[7];
  if (!v4)
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)__str + 32));
  return this;
}

uint64_t sub_22F35CC98(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unsigned int v10;
  int *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int i;
  unsigned int v17;
  int *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v10 = sub_22F35CF08((unsigned int *)a3);
    v11 = 0;
    v12 = a2 - 1;
    v13 = *(_DWORD *)a3;
    v14 = *(unsigned int *)(a3 + 16);
    v15 = *(_QWORD **)(a3 + 8);
    for (i = 1; ; ++i)
    {
      v17 = v10 & v12;
      v18 = (int *)(a1 + 48 * (v10 & v12));
      v19 = *v18;
      if (v13 == *v18 && (_DWORD)v14 == v18[4])
      {
        if (!(_DWORD)v14)
        {
LABEL_21:
          v5 = 1;
          goto LABEL_22;
        }
        v20 = (_QWORD *)*((_QWORD *)v18 + 1);
        v21 = 8 * v14;
        v22 = v15;
        while (*v22 >> 33 == *v20 >> 33)
        {
          ++v22;
          ++v20;
          v21 -= 8;
          if (!v21)
            goto LABEL_21;
        }
      }
      if (v19 == -1 && !v18[4])
        break;
      v23 = v19 == -2 && !v18[4];
      if (v23 && v11 == 0)
        v11 = (int *)(a1 + 48 * v17);
      v10 = v17 + i;
    }
    v5 = 0;
    if (v11)
      v18 = v11;
LABEL_22:
    *a4 = v18;
  }
  else
  {
    v5 = 0;
    *a4 = 0;
  }
  return v5;
}

unint64_t sub_22F35CF08(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = *a1;
  v3 = sub_22E72796C();
  v4 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v3 + 8 * v2)) ^ ((0x9DDFEA08EB382D69 * (v3 + 8 * v2)) >> 47));
  v10 = a1[4];
  v11 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  result = sub_22F35CFA8((uint64_t *)&v11, &v10);
  v11 = result;
  v6 = a1[4];
  if ((_DWORD)v6)
  {
    v7 = (unint64_t *)*((_QWORD *)a1 + 1);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      LODWORD(v10) = v9 >> 33;
      result = sub_22EF2DE28((uint64_t *)&v11, (int *)&v10);
      v11 = result;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

unint64_t sub_22F35CFA8(uint64_t *a1, uint64_t *a2)
{
  _OWORD v5[4];
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  v8 = sub_22E72796C();
  return sub_22E54EFD4((char *)v5, 0, v5, (char *)v6, a1, a2);
}

uint64_t sub_22F35D048(uint64_t result)
{
  _DWORD *v1;
  _DWORD *v2;

  v2 = *(_DWORD **)result;
  v1 = *(_DWORD **)(result + 8);
  while (v2 != v1 && *v2 >= 0xFFFFFFFE && !v2[4])
  {
    v2 += 12;
    *(_QWORD *)result = v2;
  }
  return result;
}

uint64_t sub_22F35D080(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_22F35CC98(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = sub_22F35D12C(a2, (uint64_t)a3, v12);
    *v9 = *a3;
    result = sub_22F24C77C((uint64_t)(v9 + 2), (uint64_t)(a3 + 2));
    *((_QWORD *)v9 + 5) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_DWORD *sub_22F35D12C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_9;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_9:
    sub_22EF2DF94(a1, v6);
    v8 = 0;
    sub_22F35CC98(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[4])
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F35D1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[16];
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  sub_22F35C274(a1);
  v19 = -1;
  v20 = v22;
  v21 = 0x200000000;
  v15 = -2;
  v16 = v18;
  v17 = 0x200000000;
  if (a2 == a3)
    goto LABEL_22;
  do
  {
    if (*(_DWORD *)a2 == v19)
    {
      v6 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v6 == (_DWORD)v21)
      {
        v7 = *(char **)(a2 + 8);
        if (!(_DWORD)v6)
          goto LABEL_15;
        v8 = 0;
        v9 = 8 * v6;
        while (*(_QWORD *)&v7[v8] >> 33 == *(_QWORD *)((char *)v20 + v8) >> 33)
        {
          v8 += 8;
          if (v9 == v8)
            goto LABEL_15;
        }
      }
    }
    if (*(_DWORD *)a2 == v15)
    {
      v10 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v10 == (_DWORD)v17)
      {
        v7 = *(char **)(a2 + 8);
        if (!(_DWORD)v10)
          goto LABEL_15;
        v11 = 0;
        v12 = 8 * v10;
        while (*(_QWORD *)&v7[v11] >> 33 == *(_QWORD *)((char *)v16 + v11) >> 33)
        {
          v11 += 8;
          if (v12 == v11)
            goto LABEL_15;
        }
      }
    }
    v14 = 0;
    sub_22F35CC98(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v14);
    v13 = v14;
    *v14 = *(_DWORD *)a2;
    sub_22F24C77C((uint64_t)(v13 + 2), a2 + 8);
    *((_QWORD *)v13 + 5) = *(_QWORD *)(a2 + 40);
    ++*(_DWORD *)(a1 + 8);
    v7 = *(char **)(a2 + 8);
LABEL_15:
    if (v7 != (char *)(a2 + 24))
      free(v7);
    a2 += 48;
  }
  while (a2 != a3);
  if (v16 != v18)
    free(v16);
LABEL_22:
  if (v20 != v22)
    free(v20);
}

uint64_t sub_22F35D3D0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x2000000000;
  sub_22EF2E188((uint64_t)(v2 + 24));
  sub_22EF2E1E8((uint64_t)(v2 + 24));
  sub_22EF2E1E8((uint64_t)(v2 + 24));
  v8 = v2 + 24;
  v9 = (std::__shared_weak_count *)v2;
  v3 = sub_22E74761C(a1, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

llvm::raw_ostream *sub_22F35D4F8(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;

  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = 1;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35D570(a1, a2, a3);
}

llvm::raw_ostream *sub_22F35D570(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;

  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = 0;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35D5E4(a1, a2, a3);
}

llvm::raw_ostream *sub_22F35D5E4(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;

  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = 24;
  v7 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v7;
  return sub_22E74241C(a1, a3, *(_QWORD *)a2, v7, 0, 0, 0);
}

uint64_t sub_22F35D668(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x2000000000;
  sub_22EF2E248((uint64_t)(v2 + 24));
  sub_22EF2E2A8((uint64_t)(v2 + 24));
  v8 = v2 + 24;
  v9 = (std::__shared_weak_count *)v2;
  v3 = sub_22E74761C(a1, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

llvm::raw_ostream *sub_22F35D788(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = 2;
  v9 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v9;
  v10 = *(_BYTE *)(a4 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (char *)a4;
  else
    v12 = *(char **)a4;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a4 + 8);
  else
    v14 = v13;
  return sub_22E74241C(a1, a3, *(_QWORD *)a2, v9, v12, v14, 0);
}

uint64_t sub_22F35D824(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x2000000000;
  sub_22EF2E308((uint64_t)(v2 + 24));
  sub_22EF2E368((uint64_t)(v2 + 24));
  v8 = v2 + 24;
  v9 = (std::__shared_weak_count *)v2;
  v3 = sub_22E74761C(a1, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

llvm::raw_ostream *sub_22F35D944(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  unsigned int v8;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = 3;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35D9C4(a1, a2, a3, *a4);
}

llvm::raw_ostream *sub_22F35D9C4(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned __int8 a4)
{
  unsigned int v8;
  uint64_t v9;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = a4;
  v9 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v9;
  return sub_22E74241C(a1, a3, *(_QWORD *)a2, v9, 0, 0, 0);
}

uint64_t sub_22F35DA4C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x2000000000;
  sub_22EF2E3C8((uint64_t)(v2 + 24));
  sub_22EF2E428((uint64_t)(v2 + 24));
  sub_22EF2E428((uint64_t)(v2 + 24));
  v8 = v2 + 24;
  v9 = (std::__shared_weak_count *)v2;
  v3 = sub_22E74761C(a1, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

llvm::raw_ostream *sub_22F35DB74(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v10;

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = 4;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35DC04(a1, a2, a3, *a4, a5);
}

llvm::raw_ostream *sub_22F35DC04(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v10;

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = a4;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35DC8C(a1, a2, a3, *a5);
}

llvm::raw_ostream *sub_22F35DC8C(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = a4;
  v9 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v9;
  return sub_22E74241C(a1, a3, *(_QWORD *)a2, v9, 0, 0, 0);
}

uint64_t sub_22F35DD10(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x2000000000;
  sub_22EF2E188((uint64_t)(v2 + 24));
  sub_22EF2E428((uint64_t)(v2 + 24));
  sub_22EF2E2A8((uint64_t)(v2 + 24));
  v8 = v2 + 24;
  v9 = (std::__shared_weak_count *)v2;
  v3 = sub_22E74761C(a1, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

llvm::raw_ostream *sub_22F35DE38(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v10;

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = 1;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35DEC8(a1, a2, a3, *a4, a5);
}

llvm::raw_ostream *sub_22F35DEC8(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = a4;
  v11 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v11;
  return sub_22E74241C(a1, a3, *(_QWORD *)a2, v11, *(char **)a5, *(_QWORD *)(a5 + 8), 0);
}

unint64_t sub_22F35DF58(int *a1, char *a2)
{
  _OWORD v5[4];
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  v8 = sub_22E72796C();
  return sub_22F35DFF8((char *)v5, 0, v5, (char *)v6, a1, a2);
}

unint64_t sub_22F35DFF8(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, char *a6)
{
  _BYTE *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_22E9FFF78(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = sub_22EF2E55C(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_22E54F2E8(a1, *(uint64_t *)v13, v10, a4);
}

uint64_t sub_22F35E070(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (char *)operator new(0x228uLL);
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x2000000000;
  sub_22EF2E248((uint64_t)(v2 + 24));
  sub_22EF2E428((uint64_t)(v2 + 24));
  sub_22EF2E2A8((uint64_t)(v2 + 24));
  v8 = v2 + 24;
  v9 = (std::__shared_weak_count *)v2;
  v3 = sub_22E74761C(a1, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

llvm::raw_ostream *sub_22F35E198(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v10;

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = 2;
  ++*(_DWORD *)(a2 + 8);
  return sub_22F35DEC8(a1, a2, a3, *a4, a5);
}

unint64_t sub_22F35E228(_DWORD *a1, int *a2, char *a3)
{
  _OWORD v7[4];
  _OWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  v10 = sub_22E72796C();
  LODWORD(v7[0]) = *a1;
  return sub_22F35DFF8((char *)v7, 0, (_DWORD *)v7 + 1, (char *)v8, a2, a3);
}

uint64_t sub_22F35E2DC(uint64_t a1, int a2, int a3, unsigned __int8 a4, int **a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v14;
  int v15;
  BOOL v16;
  int v18;

  if (a2)
  {
    v5 = ((37 * (char)a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * (char)a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v9 = (int *)(a1 + 176 * v8);
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 4);
    if (*v9 == a3 && v11 == a4)
    {
      v12 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v10 != -1 || (_BYTE)v11 != 0xFF)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v11 == 254;
        if (v16 && v10 == -2)
          v14 = v9;
        v18 = v15 + 1;
        v8 = (v8 + v15) & (a2 - 1);
        v9 = (int *)(a1 + 176 * v8);
        v10 = *v9;
        v11 = *((unsigned __int8 *)v9 + 4);
        ++v15;
        if (*v9 == a3)
        {
          v12 = 1;
          v15 = v18;
          if (v11 == a4)
            goto LABEL_5;
        }
      }
      v12 = 0;
      if (v14)
        v9 = v14;
    }
  }
  else
  {
    v9 = 0;
    v12 = 0;
  }
LABEL_5:
  *a5 = v9;
  return v12;
}

uint64_t sub_22F35E3F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  int *v9;
  char v10;
  uint64_t v11;
  int *v12;

  v12 = 0;
  result = sub_22F35E2DC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_DWORD *)a3, *(_BYTE *)(a3 + 4), &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F35E484(a2, v12, a3, a4);
    v9 = (int *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 176 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

int *sub_22F35E484(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  int *v6;

  v6 = sub_22F35E500(a1, a3, a2);
  *v6 = *(_DWORD *)a3;
  *((_BYTE *)v6 + 4) = *(_BYTE *)(a3 + 4);
  v6[2] = *a4;
  *((_QWORD *)v6 + 2) = v6 + 8;
  *((_QWORD *)v6 + 3) = 0x100000000;
  if (a4[4])
    sub_22F35C900((uint64_t)(v6 + 4), (uint64_t)(a4 + 2));
  return v6;
}

int *sub_22F35E500(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  unsigned int v6;
  int *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22EF40204(a1, v6);
    v8 = 0;
    sub_22F35E2DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(_BYTE *)(a2 + 4), &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || *((unsigned __int8 *)a3 + 4) != 255)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F35E5C0(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int *v12;
  char v13;
  uint64_t v14;
  int *v15;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 176 * v6;
    do
    {
      *(_QWORD *)v7 = 0xFFFFFFFFFFLL;
      v7 += 176;
      v8 -= 176;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      v10 = *(unsigned __int8 *)(v4 + 4);
      if ((*(_DWORD *)v4 != -1 || v10 != 255) && (v9 != -2 || v10 != 254))
      {
        v15 = 0;
        sub_22F35E2DC((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, v10, &v15);
        v11 = v15;
        v12 = v15;
        *v15 = *(_DWORD *)v4;
        v13 = *(_BYTE *)(v4 + 4);
        *((_QWORD *)v11 + 2) = v12 + 8;
        v14 = (uint64_t)(v11 + 4);
        *(_BYTE *)(v14 - 12) = v13;
        *(_DWORD *)(v14 - 8) = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v14 + 8) = 0x100000000;
        if (*(_DWORD *)(v4 + 24))
          sub_22F35C900(v14, v4 + 16);
        ++*((_DWORD *)v5 + 2);
        result = sub_22F35C3D4((char **)(v4 + 16));
      }
      v4 += 176;
    }
    while (v4 != a3);
  }
  return result;
}

int *sub_22F35E6D0(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  int *v7;

  v7 = 0;
  v4 = sub_22EF40338(a1, (int *)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35E7D0((uint64_t)a1, a2, (int *)a2, v7);
    *v5 = *(_DWORD *)a2;
    v5[1] = *(_DWORD *)(a2 + 4);
    *((_BYTE *)v5 + 8) = *(_BYTE *)(a2 + 8);
    *((_QWORD *)v5 + 2) = v5 + 8;
    *((_QWORD *)v5 + 3) = 0x100000000;
  }
  return v5;
}

uint64_t sub_22F35E754(int a1, char a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (0x2500000000 * a2 - 1) ^ ((unint64_t)(0x2500000000 * a2 - 1) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = ((v4 >> 31) ^ v4 | ((unint64_t)(37 * a1) << 32))
     + ~((unint64_t)((v4 >> 31) ^ v4) << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  return ((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27));
}

int *sub_22F35E7D0(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v6;
  unsigned int v7;
  int *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_10;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_10:
    sub_22EF4049C(a1, v7);
    v9 = 0;
    sub_22EF40338((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -1 || *((unsigned __int8 *)a4 + 8) != 255)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int *sub_22F35E898(uint64_t a1, uint64_t a2)
{
  char v4;
  int *v5;
  int *v7;

  v7 = 0;
  v4 = sub_22EF40AD4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (int *)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35E924(a1, (int *)a2, v7);
    *v5 = *(_DWORD *)a2;
    v5[1] = *(_DWORD *)(a2 + 4);
    *((_BYTE *)v5 + 8) = *(_BYTE *)(a2 + 8);
    *((_QWORD *)v5 + 2) = v5 + 8;
    *((_QWORD *)v5 + 3) = 0x100000000;
  }
  return v5;
}

int *sub_22F35E924(uint64_t a1, int *a2, int *a3)
{
  int v5;
  unsigned int v6;
  int *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_10;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_10:
    sub_22EF40C38(a1, v6);
    v8 = 0;
    sub_22EF40AD4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1 || a3[1] != -1 || *((unsigned __int8 *)a3 + 8) != 255)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

double sub_22F35E9F0(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 128;
    v7 = 144 * v5;
    do
    {
      sub_22EF2E11C((uint64_t)&v6[v7]);
      v7 -= 144;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

int *sub_22F35EA6C(uint64_t a1, uint64_t a2)
{
  char v4;
  int *v5;
  int *v7;

  v7 = 0;
  v4 = sub_22F35E2DC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(_BYTE *)(a2 + 4), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35E500(a1, a2, v7);
    *v5 = *(_DWORD *)a2;
    *((_BYTE *)v5 + 4) = *(_BYTE *)(a2 + 4);
    v5[2] = 0;
    *((_QWORD *)v5 + 2) = v5 + 8;
    *((_QWORD *)v5 + 3) = 0x100000000;
  }
  return v5;
}

_DWORD *sub_22F35EAF8(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F35EB74(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35EC10(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x100000000;
  }
  return v5;
}

uint64_t sub_22F35EB74(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 160 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 160 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F35EC10(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF41BF8(a1, v6);
  v8 = 0;
  sub_22F35EB74(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F35ECC0(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = *result;
    v8 = 160 * v6;
    do
    {
      *(_DWORD *)v7 = -1;
      v7 += 160;
      v8 -= 160;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_22F35EB74((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x100000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22EF41CC4(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22F35C674((char **)(v4 + 8));
      }
      v4 += 160;
    }
    while (v4 != a3);
  }
  return result;
}

double sub_22F35EDA8(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 120;
    v7 = 136 * v5;
    do
    {
      sub_22EF2E11C((uint64_t)&v6[v7]);
      v7 -= 136;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_DWORD *sub_22F35EE24(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F35EE98(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35EF3C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x100000000;
  }
  return v5;
}

uint64_t sub_22F35EE98(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 96 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 96 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_DWORD *sub_22F35EF3C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF42224(a1, v7);
  v9 = 0;
  sub_22F35EE98((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char **sub_22F35EFE8(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = *result;
    v8 = 96 * v6;
    do
    {
      *(_DWORD *)v7 = -1;
      v7 += 96;
      v8 -= 96;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v11 = 0;
        sub_22F35EE98((uint64_t *)v5, (_DWORD *)v4, &v11);
        v9 = v11;
        *v11 = *(_DWORD *)v4;
        *((_QWORD *)v9 + 2) = 0x100000000;
        *((_QWORD *)v9 + 1) = v9 + 6;
        v10 = (uint64_t)(v9 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22EF422F0(v10, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22F35C594((char **)(v4 + 8));
      }
      v4 += 96;
    }
    while (v4 != a3);
  }
  return result;
}

double sub_22F35F0D0(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 56;
    v7 = 72 * v5;
    do
    {
      sub_22EF2DDE8((uint64_t)&v6[v7]);
      v7 -= 72;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_DWORD *sub_22F35F14C(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F35F1C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35F264(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x100000000;
  }
  return v5;
}

uint64_t sub_22F35F1C8(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 176 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 176 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F35F264(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF42690(a1, v6);
  v8 = 0;
  sub_22F35F1C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F35F314(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 176 * v6;
    do
    {
      *(_DWORD *)v7 = -1;
      v7 += 176;
      v8 -= 176;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_22F35F1C8((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x100000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22F35F3FC(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22F35C4B4((char **)(v4 + 8));
      }
      v4 += 176;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F35F3FC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  if (a1 != a2)
  {
    v5 = (char *)(a2 + 16);
    v4 = *(char **)a2;
    if (v4 != v5)
    {
      sub_22F35F5E8((char **)a1, (char **)a2);
      return a1;
    }
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      v20 = *(char **)a1;
      if (v6)
      {
        sub_22EF4275C((uint64_t)&v31, (uint64_t)v4, (uint64_t)&v4[152 * v6], (uint64_t)v20);
        v22 = v21;
        v20 = *(char **)a1;
        LODWORD(v7) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v22 = *(char **)a1;
      }
      v23 = &v20[152 * v7];
      if (v23 != v22)
      {
        do
        {
          v24 = v23 - 152;
          sub_22E9170C8((uint64_t)(v23 - 136));
          v23 = v24;
        }
        while (v24 != v22);
      }
      *(_DWORD *)(a1 + 8) = v6;
      v25 = *(_DWORD *)(a2 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)a2 - 136;
        v27 = 152 * v25;
        do
        {
          sub_22E9170C8(v26 + v27);
          v27 -= 152;
        }
        while (v27);
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      if ((_DWORD)v7)
      {
        v29 = *(_QWORD *)a1 - 136;
        v30 = 152 * v7;
        do
        {
          sub_22E9170C8(v29 + v30);
          v30 -= 152;
        }
        while (v30);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BE6C(a1);
    }
    else if ((_DWORD)v7)
    {
      sub_22EF4275C((uint64_t)&v32, (uint64_t)v4, (uint64_t)&v4[152 * v7], *(_QWORD *)a1);
LABEL_7:
      v8 = *(char **)a2;
      v9 = *(unsigned int *)(a2 + 8);
      if (v7 != v9)
      {
        v10 = &v8[152 * v9];
        v11 = 152 * v7 + 16;
        v12 = *(_QWORD *)a1 + v11;
        v13 = &v8[v11];
        do
        {
          *(_OWORD *)(v12 - 16) = *((_OWORD *)v13 - 1);
          sub_22E917140(v12, (__int128 *)v13);
          v14 = *((_QWORD *)v13 + 15);
          *(_DWORD *)(v15 + 128) = *((_DWORD *)v13 + 32);
          *(_QWORD *)(v15 + 120) = v14;
          v12 = v15 + 152;
          v16 = v13 + 136;
          v13 += 152;
        }
        while (v16 != v10);
        v8 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v6;
      v17 = *(_DWORD *)(a2 + 8);
      if (v17)
      {
        v18 = v8 - 136;
        v19 = 152 * v17;
        do
        {
          sub_22E9170C8((uint64_t)&v18[v19]);
          v19 -= 152;
        }
        while (v19);
      }
LABEL_22:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    v7 = 0;
    goto LABEL_7;
  }
  return a1;
}

double sub_22F35F5E8(char **a1, char **a2)
{
  char *v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = v4 - 136;
    v7 = 152 * v5;
    do
    {
      sub_22E9170C8((uint64_t)&v6[v7]);
      v7 -= 152;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_DWORD *sub_22F35F664(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F35F6E0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F35F77C(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x100000000;
  }
  return v5;
}

uint64_t sub_22F35F6E0(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 168 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 168 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F35F77C(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF428A4(a1, v6);
  v8 = 0;
  sub_22F35F6E0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F35F82C(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 168 * v6;
    do
    {
      *(_DWORD *)v7 = -1;
      v7 += 168;
      v8 -= 168;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_22F35F6E0((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        v10 = v12;
        *v12 = *(_DWORD *)v4;
        *((_QWORD *)v10 + 2) = 0x100000000;
        *((_QWORD *)v10 + 1) = v10 + 6;
        v11 = (uint64_t)(v10 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22F35F914(v11, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22F35C3D4((char **)(v4 + 8));
      }
      v4 += 168;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F35F914(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  if (a1 != a2)
  {
    v5 = (char *)(a2 + 16);
    v4 = *(char **)a2;
    if (v4 != v5)
    {
      sub_22F35CAE4((char **)a1, (char **)a2);
      return a1;
    }
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      v19 = *(char **)a1;
      if (v6)
      {
        sub_22EF42970((uint64_t)&v30, (uint64_t)v4, (uint64_t)&v4[144 * v6], (uint64_t)v19);
        v21 = v20;
        v19 = *(char **)a1;
        LODWORD(v7) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v21 = *(char **)a1;
      }
      v22 = &v19[144 * v7];
      if (v22 != v21)
      {
        do
        {
          v23 = v22 - 144;
          sub_22E9170C8((uint64_t)(v22 - 128));
          v22 = v23;
        }
        while (v23 != v21);
      }
      *(_DWORD *)(a1 + 8) = v6;
      v24 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)a2 - 128;
        v26 = 144 * v24;
        do
        {
          sub_22E9170C8(v25 + v26);
          v26 -= 144;
        }
        while (v26);
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      if ((_DWORD)v7)
      {
        v28 = *(_QWORD *)a1 - 128;
        v29 = 144 * v7;
        do
        {
          sub_22E9170C8(v28 + v29);
          v29 -= 144;
        }
        while (v29);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BF74(a1);
    }
    else if ((_DWORD)v7)
    {
      sub_22EF42970((uint64_t)&v31, (uint64_t)v4, (uint64_t)&v4[144 * v7], *(_QWORD *)a1);
LABEL_7:
      v8 = *(char **)a2;
      v9 = *(unsigned int *)(a2 + 8);
      if (v7 != v9)
      {
        v10 = &v8[144 * v9];
        v11 = 144 * v7 + 16;
        v12 = *(_QWORD *)a1 + v11;
        v13 = &v8[v11];
        do
        {
          *(_OWORD *)(v12 - 16) = *((_OWORD *)v13 - 1);
          sub_22E917140(v12, (__int128 *)v13);
          *(_QWORD *)(v14 + 120) = *((_QWORD *)v13 + 15);
          v12 = v14 + 144;
          v15 = v13 + 128;
          v13 += 144;
        }
        while (v15 != v10);
        v8 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v6;
      v16 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v16)
      {
        v17 = v8 - 128;
        v18 = 144 * v16;
        do
        {
          sub_22E9170C8((uint64_t)&v17[v18]);
          v18 -= 144;
        }
        while (v18);
      }
LABEL_22:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    v7 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_22F35FAF8(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 9, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 88))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F35FE08(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  char *v32;
  char v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 10, 0);
  if (v36)
  {
    (*(void (**)(char *))(*(_QWORD *)v36 + 8))(v36);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v36);
  if ((v37 & 1) != 0)
  {
LABEL_21:
    v17 = v36;
    v36 = 0;
    v32 = v17;
    sub_22E6C5940(&v32, &v34);
    if (v32)
      (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
LABEL_23:
    v3 = 0;
    goto LABEL_24;
  }
  for (i = (int)v36; ; i = (int)v36)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_28;
      if (i == 1)
        goto LABEL_23;
      *((_DWORD *)a3 + 2) = 0;
      v34 = 0;
      v35 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v33 & 1) != 0)
      {
        v19 = v32;
        v32 = 0;
LABEL_30:
        v29 = v19;
        sub_22E6C5940(&v29, &v30);
        if (v29)
          (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
        v20 = 0;
        v3 = 0;
        goto LABEL_33;
      }
      if ((_DWORD)v32 == 2)
      {
        if (*(_QWORD *)(a1 + 104))
        {
LABEL_39:
          v20 = 0;
          v3 = 1;
          goto LABEL_33;
        }
        v22 = **a3;
        v23 = v34;
        v24 = v34 + 4;
        v25 = &v34[v22 + 8];
        v26 = *(_QWORD *)&v34[v22];
        v27 = (_QWORD *)operator new();
        *v27 = v26;
        v27[1] = v25;
        v27[2] = v23;
        v27[4] = v24;
        v16 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 104) = v27;
        if (v16)
LABEL_41:
          MEMORY[0x2348A0E9C](v16, 0x1050C407EF653B9);
      }
      else if ((_DWORD)v32 == 1)
      {
        if (*(_QWORD *)(a1 + 96))
          goto LABEL_39;
        v10 = **a3;
        v11 = v34;
        v12 = v34 + 4;
        v13 = &v34[v10 + 8];
        v14 = *(_QWORD *)&v34[v10];
        v15 = (_QWORD *)operator new();
        *v15 = v14;
        v15[1] = v13;
        v15[2] = v11;
        v15[4] = v12;
        v16 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v15;
        if (v16)
          goto LABEL_41;
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
      sub_22F361E60(&v36, &v30);
      if ((v31 & 1) != 0)
      {
        v28 = v30;
        v30 = 0;
        if (v28)
          (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
      }
      if ((v37 & 1) != 0)
      {
        v19 = v36;
        v36 = 0;
        goto LABEL_30;
      }
      v20 = 1;
      i = (int)v36;
LABEL_33:
      if ((v33 & 1) != 0)
      {
        v21 = v32;
        v32 = 0;
        if (v21)
          (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
      }
      if ((v20 & 1) == 0)
        goto LABEL_24;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v34);
    if (v34)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v34);
    sub_22F361E60(&v36, &v34);
    if ((v35 & 1) != 0)
    {
      v9 = v34;
      v34 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v37 & 1) != 0)
      goto LABEL_21;
  }
  (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
LABEL_28:
  v3 = 1;
LABEL_24:
  if ((v37 & 1) != 0)
  {
    v18 = v36;
    v36 = 0;
    if (v18)
      (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
  }
  return v3 & 1;
}

uint64_t sub_22F360178(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 11, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 112))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F360488(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 12, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 120))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F360798(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 13, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 128))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F360AA8(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 14, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 136))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F360DB8(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 15, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 144))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F3610C8(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 18, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 152))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F3613D8(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 16, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 160))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

uint64_t sub_22F3616E8(uint64_t a1, llvm::BitstreamCursor *this, unsigned int **a3)
{
  char v3;
  int i;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 17, 0);
  if (v30)
  {
    (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    v3 = 1;
    return v3 & 1;
  }
  sub_22E748020((uint64_t)this, 0, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
LABEL_19:
    v11 = v30;
    v30 = 0;
    v26 = v11;
    sub_22E6C5940(&v26, &v28);
    if (v26)
      (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
LABEL_21:
    v3 = 0;
    goto LABEL_22;
  }
  for (i = (int)v30; ; i = (int)v30)
  {
    while (i != 2)
    {
      if (!i)
        goto LABEL_26;
      if (i == 1)
        goto LABEL_21;
      *((_DWORD *)a3 + 2) = 0;
      v28 = 0;
      v29 = 0;
      llvm::BitstreamCursor::readRecord();
      if ((v27 & 1) != 0)
      {
        v13 = v26;
        v26 = 0;
LABEL_28:
        v23 = v13;
        sub_22E6C5940(&v23, &v24);
        if (v23)
          (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
        v10 = 0;
        v3 = 0;
        goto LABEL_31;
      }
      if ((_DWORD)v26 == 1)
      {
        if (*(_QWORD *)(a1 + 168))
        {
          v10 = 0;
          v3 = 1;
          goto LABEL_31;
        }
        v15 = **a3;
        v16 = v28;
        v17 = v28 + 4;
        v18 = &v28[v15 + 8];
        v19 = *(_QWORD *)&v28[v15];
        v20 = (_QWORD *)operator new();
        *v20 = v19;
        v20[1] = v18;
        v20[2] = v16;
        v20[4] = v17;
        v21 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v20;
        if (v21)
          MEMORY[0x2348A0E9C](v21, 0x1050C407EF653B9);
      }
      sub_22E748020((uint64_t)this, 0, (uint64_t)&v24);
      sub_22F361E60(&v30, &v24);
      if ((v25 & 1) != 0)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
      }
      if ((v31 & 1) != 0)
      {
        v13 = v30;
        v30 = 0;
        goto LABEL_28;
      }
      v10 = 1;
      i = (int)v30;
LABEL_31:
      if ((v27 & 1) != 0)
      {
        v14 = v26;
        v26 = 0;
        if (v14)
          (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
      }
      if ((v10 & 1) == 0)
        goto LABEL_22;
    }
    sub_22E746760((uint64_t)this, (uint64_t *)&v28);
    if (v28)
      break;
    sub_22E748020((uint64_t)this, 0, (uint64_t)&v28);
    sub_22F361E60(&v30, &v28);
    if ((v29 & 1) != 0)
    {
      v9 = v28;
      v28 = 0;
      if (v9)
        (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((v31 & 1) != 0)
      goto LABEL_19;
  }
  (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
LABEL_26:
  v3 = 1;
LABEL_22:
  if ((v31 & 1) != 0)
  {
    v12 = v30;
    v30 = 0;
    if (v12)
      (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  return v3 & 1;
}

_BYTE **sub_22F3619F8(_BYTE **a1)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *a1;
  if (!v2[8]
    || !*(_QWORD *)v2
    || ((*(void (**)(_QWORD))(**(_QWORD **)v2 + 8))(*(_QWORD *)v2), (v2 = *a1) != 0))
  {
    v3 = sub_22EF45CAC((uint64_t)v2);
    MEMORY[0x2348A0E9C](v3, 0x1032C40A04C97B9);
  }
  return a1;
}

uint64_t *sub_22F361A5C@<X0>(const llvm::MemoryBuffer **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v8;
  const llvm::MemoryBuffer *v9;
  uint64_t *result;
  _BYTE **v11;
  char v12;

  v12 = 0;
  v8 = (uint64_t *)operator new();
  v9 = *a1;
  *a1 = 0;
  result = sub_22EF42BA0(v8, v9, 1, a2, a3, &v12);
  if (v12)
  {
    v11 = sub_22F3619F8((_BYTE **)result);
    MEMORY[0x2348A0E9C](v11, 0x20C4093837F09);
    result = 0;
  }
  *a4 = result;
  return result;
}

uint64_t sub_22F361AF8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)a1 + 80);
}

uint64_t sub_22F361B04(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v11;
  _BYTE v12[8];
  int *v13;

  v3 = *a1;
  v4 = *(_QWORD *)(v3 + 96);
  if (!v4 || (v5 = sub_22EF42AB0(v3, a2, a3), !v6))
  {
    v7 = 0;
    goto LABEL_6;
  }
  LODWORD(v11) = v5 >> 33;
  BYTE4(v11) = 0;
  sub_22EF43474(v4, &v11, (uint64_t)v12);
  v7 = (uint64_t)v13;
  if (!v13)
  {
LABEL_6:
    LOBYTE(v8) = 0;
    v9 = 0;
    return v7 & 0x100000000 | v9 | v8;
  }
  v8 = *v13;
  v9 = *v13 & 0xFFFFFF00;
  v7 = 0x100000000;
  return v7 & 0x100000000 | v9 | v8;
}

void sub_22F361B8C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];
  unint64_t v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[19];

  v16[18] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*a1 + 104)
    && (v13 = sub_22F361B04(a1, a2, a3), HIDWORD(v13))
    && (sub_22EF43558(*(_QWORD *)(*a1 + 104), (unsigned int *)&v13, (uint64_t)v12), v12[1]))
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 12);
    v8 = *(_QWORD *)(v6 + 20);
    sub_22EF436B0((uint64_t)v12, &v14);
    sub_22F361ED0(a4, v7, v8, (uint64_t)&v14);
    v9 = v14;
    if (v15)
    {
      v10 = (char *)v14 - 128;
      v11 = 144 * v15;
      do
      {
        sub_22E9170C8((uint64_t)&v10[v11]);
        v11 -= 144;
      }
      while (v11);
      v9 = v14;
    }
    if (v9 != v16)
      free(v9);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 160) = 0;
  }
}

uint64_t sub_22F361CB0(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v11;
  _BYTE v12[8];
  int *v13;

  v3 = *a1;
  v4 = *(_QWORD *)(v3 + 96);
  if (!v4 || (v5 = sub_22EF42AB0(v3, a2, a3), !v6))
  {
    v7 = 0;
    goto LABEL_6;
  }
  LODWORD(v11) = v5 >> 33;
  BYTE4(v11) = 1;
  sub_22EF43474(v4, &v11, (uint64_t)v12);
  v7 = (uint64_t)v13;
  if (!v13)
  {
LABEL_6:
    LOBYTE(v8) = 0;
    v9 = 0;
    return v7 & 0x100000000 | v9 | v8;
  }
  v8 = *v13;
  v9 = *v13 & 0xFFFFFF00;
  v7 = 0x100000000;
  return v7 & 0x100000000 | v9 | v8;
}

void sub_22F361D3C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];
  unint64_t v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[19];

  v16[18] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*a1 + 104)
    && (v13 = sub_22F361CB0(a1, a2, a3), HIDWORD(v13))
    && (sub_22EF43558(*(_QWORD *)(*a1 + 104), (unsigned int *)&v13, (uint64_t)v12), v12[1]))
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 12);
    v8 = *(_QWORD *)(v6 + 20);
    sub_22EF436B0((uint64_t)v12, &v14);
    sub_22F361ED0(a4, v7, v8, (uint64_t)&v14);
    v9 = v14;
    if (v15)
    {
      v10 = (char *)v14 - 128;
      v11 = 144 * v15;
      do
      {
        sub_22E9170C8((uint64_t)&v10[v11]);
        v11 -= 144;
      }
      while (v11);
      v9 = v14;
    }
    if (v9 != v16)
      free(v9);
  }
  else
  {
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x100000000;
    *(_DWORD *)(a4 + 160) = 0;
  }
}

_BYTE *sub_22F361E60(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[8];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[8];
      }
    }
    v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    v6 = *(_QWORD *)a2;
    if ((v5 & 1) != 0)
      *(_QWORD *)a2 = 0;
    *(_QWORD *)v3 = v6;
  }
  return result;
}

uint64_t sub_22F361ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22F35C900(a1, a4);
    v8 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 160) = v8;
    v6 = (_DWORD *)(a1 + 160);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v5 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v9), &v10) & 1) != 0)
      {
        ++v5;
        v9 += 144;
        if (v8 == v5)
        {
          LODWORD(v5) = *v6;
          goto LABEL_3;
        }
      }
      *v6 = v5;
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    v6 = (_DWORD *)(a1 + 160);
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v5
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F361FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22EF40684(a1, a4);
    v5 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 128) = v5;
    v6 = (_DWORD *)(a1 + 128);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v7), &v10) & 1) != 0)
      {
        ++v8;
        v7 += 112;
        if (v5 == v8)
        {
          LODWORD(v8) = *v6;
          goto LABEL_9;
        }
      }
      *v6 = v8;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    v6 = (_DWORD *)(a1 + 128);
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v8
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F3620D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22EF40E2C(a1, a4);
    v5 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 160) = v5;
    v6 = (_DWORD *)(a1 + 160);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v7), &v10) & 1) != 0)
      {
        ++v8;
        v7 += 144;
        if (v5 == v8)
        {
          LODWORD(v8) = *v6;
          goto LABEL_9;
        }
      }
      *v6 = v8;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    v6 = (_DWORD *)(a1 + 160);
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v8
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F3621D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22EF417C4(a1, a4);
    v5 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 120) = v5;
    v6 = (_DWORD *)(a1 + 120);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v7), &v10) & 1) != 0)
      {
        ++v8;
        v7 += 104;
        if (v5 == v8)
        {
          LODWORD(v8) = *v6;
          goto LABEL_9;
        }
      }
      *v6 = v8;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    v6 = (_DWORD *)(a1 + 120);
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v8
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F3622D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22EF41CC4(a1, a4);
    v5 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 152) = v5;
    v6 = (_DWORD *)(a1 + 152);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v7), &v10) & 1) != 0)
      {
        ++v8;
        v7 += 136;
        if (v5 == v8)
        {
          LODWORD(v8) = *v6;
          goto LABEL_9;
        }
      }
      *v6 = v8;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    v6 = (_DWORD *)(a1 + 152);
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v8
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F3623D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22EF422F0(a1, a4);
    v5 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 88) = v5;
    v6 = (_DWORD *)(a1 + 88);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v7), &v10) & 1) != 0)
      {
        ++v8;
        v7 += 72;
        if (v5 == v8)
        {
          LODWORD(v8) = *v6;
          goto LABEL_9;
        }
      }
      *v6 = v8;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    v6 = (_DWORD *)(a1 + 88);
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v8
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F3624D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22F35F3FC(a1, a4);
    v8 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 168) = v8;
    v6 = (_DWORD *)(a1 + 168);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v5 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v9), &v10) & 1) != 0)
      {
        ++v5;
        v9 += 152;
        if (v8 == v5)
        {
          LODWORD(v5) = *v6;
          goto LABEL_3;
        }
      }
      *v6 = v5;
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
    *(_DWORD *)(a1 + 168) = 0;
    v6 = (_DWORD *)(a1 + 168);
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v5
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

uint64_t sub_22F3625D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = a3;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    sub_22F35F914(a1, a4);
    v8 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 160) = v8;
    v6 = (_DWORD *)(a1 + 160);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v5 = 0;
      while (!(v10 & 0x7FFFFFFFFFFFFFFFLL | v11 & 0x7FFFFFFF7FFFFFFFLL)
           || (sub_22E3B38EC((_DWORD *)(*(_QWORD *)a1 + v9), &v10) & 1) != 0)
      {
        ++v5;
        v9 += 144;
        if (v8 == v5)
        {
          LODWORD(v5) = *v6;
          goto LABEL_3;
        }
      }
      *v6 = v5;
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    v6 = (_DWORD *)(a1 + 160);
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v5
    && !(**(_QWORD **)a1 & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFF7FFFFFFFLL))
  {
    *v6 = 0;
  }
  return a1;
}

BOOL sub_22F3626D0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *a4, uint64_t (*a5)(llvm *a1), uint64_t a6)
{
  uint64_t (*v9)(llvm *);
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v16[2];
  int v17;
  __int128 v18;
  _OWORD v19[12];
  __int16 v20;
  _QWORD v21[2];
  uint64_t *v22;
  llvm::raw_ostream *v23;
  uint64_t (*v24)(llvm *);
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0u;
  memset(v19, 0, 32);
  if (a5)
    v9 = a5;
  else
    v9 = sub_22EF46990;
  memset(&v19[2], 0, 160);
  v20 = 0;
  if (sub_22EF46888(a1, a2, (uint64_t)v16, (uint64_t)v9, a6))
  {
    v10 = 1;
  }
  else
  {
    v21[0] = v16;
    v21[1] = a3;
    v23 = a4;
    v24 = v9;
    v25 = a6;
    v26 = 0;
    sub_22F35BB3C(&v27);
    v22 = &v27;
    sub_22EF4AE34((uint64_t)v21, (uint64_t *)v19, 0, 0);
    v11 = v21[0];
    if (*(_BYTE *)(v21[0] + 233))
      sub_22F35C0F8((uint64_t)v22, 1);
    v12 = *(_QWORD *)(v11 + 208);
    v13 = *(_QWORD *)(v11 + 216);
    while (v12 != v13)
    {
      sub_22EF4AE34((uint64_t)v21, (uint64_t *)(v12 + 16), *(int **)v12, *(_QWORD *)(v12 + 8));
      v12 += 184;
    }
    v14 = v26;
    if (!v26)
      sub_22F35BB80(v22, v23);
    v10 = v14 != 0;
    sub_22F35BB40(&v27);
  }
  sub_22EF46924(v16);
  return v10;
}

uint64_t sub_22F362834(llvm::yaml::IO *a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 1, 0, &v4, &v5);
  if ((_DWORD)result)
  {
    sub_22EF48A54(a1);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v5);
  }
  return result;
}

__n128 sub_22F3628A4(llvm::yaml::IO *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  _BOOL8 v9;
  __n128 result;
  char v11;
  uint64_t v12;

  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1)
    && (v8 = *(_QWORD *)(a3 + 8), v8 == *(_QWORD *)(a4 + 8)))
  {
    if (v8)
      v9 = memcmp(*(const void **)a3, *(const void **)a4, v8) == 0;
    else
      v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v12 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(llvm::yaml::IO *, uint64_t, _QWORD, _BOOL8, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v11, &v12))
  {
    sub_22EF48A54(a1);
    (*(void (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12);
  }
  else if (v11)
  {
    result = *(__n128 *)a4;
    *(_OWORD *)a3 = *(_OWORD *)a4;
  }
  return result;
}

uint64_t sub_22F362984(llvm::yaml::IO *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0;
  v8 = (*(uint64_t (**)(llvm::yaml::IO *))(*(_QWORD *)a1 + 16))(a1);
  if (*a3 == *a4)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v11, &v12);
  if ((_DWORD)result)
  {
    sub_22EF48D40(a1);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12);
  }
  else if (v11)
  {
    *a3 = *a4;
  }
  return result;
}

uint64_t sub_22F362A38(llvm::yaml::IO *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = 0;
  v3 = 0;
  result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Position", 1, 0, &v3, &v4);
  if ((_DWORD)result)
  {
    sub_22EF4A500(a1);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v4);
  }
  return result;
}

uint64_t sub_22F362AB0(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Nullability", 0, 0, &v5, &v6);
  if ((_DWORD)result)
  {
    sub_22F362B2C(a1, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
  }
  return result;
}

uint64_t sub_22F362B2C(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v5 = (a2[2] - *a2);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v11 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, i, &v11))
      {
        v7 = *(_QWORD *)a2;
        v8 = *((_QWORD *)a2 + 1);
        if (v8 - *(_QWORD *)a2 <= i)
        {
          sub_22EF4A660((uint64_t)a2, i + v7 - v8 + 1);
          v7 = *(_QWORD *)a2;
        }
        v9 = (_BYTE *)(v7 + i);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
        sub_22F362C50(a1, v9);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v11);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t sub_22F362C50(uint64_t a1, _BYTE *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Nonnull", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Optional", v7))
    *a2 = 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Unspecified", v9))
    *a2 = 2;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 3)
    v11 = v10;
  else
    v11 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "NullableResult", v11))
  {
    *a2 = 3;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v13 = v12;
  else
    v13 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "Scalar", v13))
    *a2 = 2;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v15 = 0;
  else
    v15 = v14;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "N", v15))
    *a2 = 0;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v17 = v16;
  else
    v17 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "O", v17))
    *a2 = 1;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v19 = v18;
  else
    v19 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "U", v19))
    *a2 = 2;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v21 = v20;
  else
    v21 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "S", v21);
  if ((_DWORD)result)
    *a2 = 2;
  return result;
}

uint64_t sub_22F362EA4(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "none", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "CFReturnsRetained", v7))
  {
    *a2 = 1;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "CFReturnsNotRetained", v9))
  {
    *a2 = 2;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 3)
    v11 = v10;
  else
    v11 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "NSReturnsRetained", v11))
  {
    *a2 = 3;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 4)
    v13 = v12;
  else
    v13 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "NSReturnsNotRetained", v13);
  if ((_DWORD)result)
    *a2 = 4;
  return result;
}

uint64_t sub_22F362FFC(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "none", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "open", v7))
    *a2 = 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "closed", v9);
  if ((_DWORD)result)
    *a2 = 2;
  return result;
}

uint64_t sub_22F3630D4(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "none", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "struct", v7))
    *a2 = 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "enum", v9);
  if ((_DWORD)result)
    *a2 = 2;
  return result;
}

uint64_t sub_22F3631AC(llvm::yaml::IO *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = 0;
  v3 = 0;
  result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "Version", 1, 0, &v3, &v4);
  if ((_DWORD)result)
  {
    sub_22EF4ABCC(a1);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v4);
  }
  return result;
}

uint64_t *sub_22F363224(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 17, 8);
  v11 = v10;
  v12 = v10 + 16;
  if (a3)
    memcpy((void *)(v10 + 16), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_WORD *)(v11 + 8) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F363314(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  char v5;

  result = sub_22F36337C(a1, a2);
  v4 = *(_BYTE *)(result + 88);
  if ((v4 & 1) == 0 && (*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    v5 = v4 | 1;
    *(_BYTE *)(result + 88) = v5;
    v4 = *(_BYTE *)(a2 + 88) & 2 | v5 & 0xFD;
    *(_BYTE *)(result + 88) = v4;
  }
  if ((v4 & 0x1C) == 0)
    *(_BYTE *)(result + 88) = *(_BYTE *)(a2 + 88) & 0x1C | v4 & 0xE3;
  return result;
}

uint64_t sub_22F36337C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22F35CBB0((std::string *)a1, (std::string *)a2);
  if ((*(_BYTE *)(a1 + 56) & 1) == 0 && (*(_BYTE *)(a2 + 56) & 1) != 0)
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 56) & 0xF8 | *(_BYTE *)(a2 + 56) & 6 | 1;
  if (*(char *)(a1 + 87) < 0)
    v4 = *(_QWORD *)(a1 + 72);
  else
    v4 = *(unsigned __int8 *)(a1 + 87);
  if (!v4)
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  return a1;
}

uint64_t sub_22F3633EC(uint64_t a1, unsigned int a2, const void *a3, size_t a4, char a5, char a6)
{
  int v6;
  uint64_t result;
  unint64_t v12;
  unsigned int v13;

  v6 = a2;
  v13 = a2;
  if (!a4)
    return 1;
  v12 = 0;
  if ((a5 & 1) == 0)
  {
    if ((sub_22F36349C((uint64_t *)a1, a2, &v12) & 1) != 0)
      goto LABEL_9;
LABEL_8:
    result = 0;
    *(_BYTE *)(a1 + 32) = 0;
    return result;
  }
  if (!sub_22F363564((_QWORD **)a1, a2, &v12, &v13))
    goto LABEL_8;
  v6 = v13;
LABEL_9:
  sub_22F363674(a1, v6, v12, a3, a4, a6);
  return 1;
}

uint64_t sub_22F36349C(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  _QWORD *v5;
  int v6;
  unsigned int v7;
  unint64_t v9;
  uint64_t result;
  unsigned int v11;

  v11 = a2;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) != 0)
  {
    sub_22F141B98(a2, *a1, a1[1], &v11);
    a2 = v11;
  }
  v5 = (_QWORD *)*a1;
  v6 = sub_22F423B3C((_QWORD *)*a1, a2);
  v11 = v6;
  if ((v6 & 0x80000000) == 0)
  {
LABEL_5:
    v7 = sub_22F1E361C(v5, v6);
    if (v7 == 3 || v7 == 0)
    {
      v9 = sub_22E677168((uint64_t)v5, v11);
      if ((_DWORD)v9)
      {
        *a3 = v9;
        return sub_22EF4D6B0((uint64_t)a1, v11, v9);
      }
    }
    return 0;
  }
  result = sub_22F141B98(v6, *a1, a1[1], &v11);
  if ((_DWORD)result)
  {
    v6 = v11;
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_22F363564(_QWORD **a1, int a2, unint64_t *a3, _DWORD *a4)
{
  unsigned int v4;
  int v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v14;
  unsigned int v15;

  v4 = a2;
  v15 = a2;
  if (!a2)
    return 0;
  v8 = a2;
  if (a2 < 0)
    v8 = sub_22F1E238C(*a1, a2);
  *a4 = sub_22F410BE8(v8, *a1, a1[1]) + v4;
  if ((v4 & 0x80000000) != 0)
  {
    sub_22F141AE0(v4, *a1, a1[1], &v15);
    v4 = v15;
  }
  v9 = *a1;
  v10 = sub_22F423B3C(*a1, v4);
  v15 = v10;
  if ((v10 & 0x80000000) == 0)
  {
LABEL_7:
    v11 = sub_22F1E361C(v9, v10);
    if (v11 == 3 || v11 == 0)
    {
      result = sub_22F141A3C(v15, 0, *a1, a1[1]);
      v15 = result;
      if (!(_DWORD)result)
        return result;
      v14 = sub_22E677168((uint64_t)v9, result);
      if ((_DWORD)v14)
      {
        *a3 = v14;
        return sub_22EF4D6B0((uint64_t)a1, v15, v14);
      }
    }
    return 0;
  }
  result = sub_22F141AE0(v10, *a1, a1[1], &v15);
  if ((_DWORD)result)
  {
    v10 = v15;
    goto LABEL_7;
  }
  return result;
}

__n128 sub_22F363674(uint64_t a1, int a2, uint64_t a3, const void *a4, size_t a5, char a6)
{
  void *v10;
  unint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  int v16;
  void *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  char v23;

  if (a5)
  {
    v21 = 0;
    v22 = 0;
    v16 = 0;
    v19 = a2;
    v20 = a3;
    v10 = (void *)sub_22E3CD3D4(a1 + 504, a5, 0);
    memmove(v10, a4, a5);
    v17 = v10;
    v18 = a5;
    v23 = a6;
    v11 = sub_22EF4D748(a1 + 40, (unint64_t)&v16, 1);
    v12 = *(_QWORD *)(a1 + 40) + 56 * *(unsigned int *)(a1 + 48);
    result = *(__n128 *)v11;
    v14 = *(_OWORD *)(v11 + 16);
    v15 = *(_OWORD *)(v11 + 32);
    *(_QWORD *)(v12 + 48) = *(_QWORD *)(v11 + 48);
    *(_OWORD *)(v12 + 16) = v14;
    *(_OWORD *)(v12 + 32) = v15;
    *(__n128 *)v12 = result;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_22F363738(uint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, char a5, char a6)
{
  int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;

  v8 = a3;
  v9 = a2;
  v17 = a2;
  v16 = 0;
  v15 = 0;
  if ((sub_22EF4D488(a1, a3, a4, &v16, &v15) & 1) == 0)
    goto LABEL_2;
  v14 = 0;
  if ((a5 & 1) != 0)
  {
    if (!sub_22F363564((_QWORD **)a1, v9, &v14, &v17))
      goto LABEL_2;
    v9 = v17;
  }
  else if ((sub_22F36349C((uint64_t *)a1, v9, &v14) & 1) == 0)
  {
    goto LABEL_2;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12 || (v13 = sub_22F415290(*(_QWORD *)(a1 + 16), v9), v13 == sub_22F415290(v12, v8)))
  {
    sub_22F363834(a1, v9, v14, v16, v15, a6);
    return 1;
  }
LABEL_2:
  result = 0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

__n128 sub_22F363834(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  unint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;

  if (a5)
  {
    v13 = 0;
    v14 = 0;
    v12 = 1;
    v15 = a2;
    v16 = a3;
    v17 = a4;
    v18 = a5;
    v19 = a6;
    v7 = sub_22EF4D748(a1 + 40, (unint64_t)&v12, 1);
    v8 = *(_QWORD *)(a1 + 40) + 56 * *(unsigned int *)(a1 + 48);
    result = *(__n128 *)v7;
    v10 = *(_OWORD *)(v7 + 16);
    v11 = *(_OWORD *)(v7 + 32);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v7 + 48);
    *(_OWORD *)(v8 + 16) = v10;
    *(_OWORD *)(v8 + 32) = v11;
    *(__n128 *)v8 = result;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_22F3638C0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  int v3;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v3 = a2;
  v8 = 0;
  v7 = 0;
  v5 = sub_22EF4D488(a1, a2, a3, (unint64_t *)&v8, &v7);
  if ((v5 & 1) != 0)
    sub_22F363930(a1, v3, v8, v7);
  else
    *(_BYTE *)(a1 + 32) = 0;
  return v5;
}

__n128 sub_22F363930(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;

  if (a4)
  {
    v11 = 0u;
    v14 = 0;
    v10 = 2;
    v12 = a2;
    v13 = a3;
    v15 = 0;
    v16 = a4;
    v5 = sub_22EF4D748(a1 + 40, (unint64_t)&v10, 1);
    v6 = *(_QWORD *)(a1 + 40) + 56 * *(unsigned int *)(a1 + 48);
    result = *(__n128 *)v5;
    v8 = *(_OWORD *)(v5 + 16);
    v9 = *(_OWORD *)(v5 + 32);
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(v5 + 48);
    *(_OWORD *)(v6 + 16) = v8;
    *(_OWORD *)(v6 + 32) = v9;
    *(__n128 *)v6 = result;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_22F3639B8(uint64_t a1, unint64_t a2, unsigned int a3, const void *a4, size_t a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (!a5)
    return sub_22F3638C0(a1, a2, a3);
  v14 = 0;
  v11 = a2;
  v13 = 0;
  if (sub_22F36349C((uint64_t *)a1, a2, (unint64_t *)&v14)
    && (sub_22EF4D488(a1, a2, a3, (unint64_t *)&v14, &v13) & 1) != 0)
  {
    v12 = v14;
    sub_22F363930(a1, v11, v14, v13);
    sub_22F363674(a1, v11, v12, a4, a5, 0);
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_22F363AA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, a3, 0, 0);
}

void sub_22F363ABC(_QWORD **a1, int a2, int *a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22F1E25A4(*a1, a2);
  v8 = sub_22F1E25A4(*a1, v7);
  *a3 = v8;
  if (sub_22F1E28D4(*a1, v8))
  {
    do
    {
      v9 = sub_22F1E25A4(*a1, *a3);
      *a3 = v9;
    }
    while (sub_22F1E28D4(*a1, v9));
  }
  v14 = v16;
  v15 = xmmword_22F45EE20;
  v10 = v7;
  if (v7 < 0)
    v10 = sub_22F1E238C(*a1, v7);
  v11 = sub_22F410A14(v10, (uint64_t *)&v14, *a1, a1[1], 0);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (v12)
  {
    v13 = sub_22E3CB704((llvm::StringMapImpl *)(a1 + 17), v11, v12);
    if (v7 < 0)
      v7 = sub_22F1E238C(*a1, v7);
    *(_QWORD *)a4 = v13;
    *(_DWORD *)(a4 + 8) = v8;
    *(_DWORD *)(a4 + 12) = v7;
  }
  if (v14 != v16)
    free(v14);
}

void *sub_22F363C18(uint64_t a1, const char **a2)
{
  const char *v3;
  uint64_t v4;
  size_t v5;
  const char *v6;
  void *v7;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = xmmword_22F44E310;
  v3 = sub_22E486DFC(a2, (uint64_t)&v9);
  v5 = v4;
  if (v4)
  {
    v6 = v3;
    v7 = (void *)sub_22E3CD3D4(a1 + 264, v4, 0);
    memmove(v7, v6, v5);
  }
  else
  {
    v7 = 0;
  }
  if (v9 != v11)
    free(v9);
  return v7;
}

unint64_t sub_22F363CE4(unint64_t result, int a2, __int128 *a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  __int128 v9;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v8 = a2;
    v9 = *a3;
    result = sub_22E5BBF6C(result, (unint64_t)&v8);
    v6 = *(_QWORD *)v3 + 24 * *(unsigned int *)(v3 + 8);
    v7 = *(_OWORD *)result;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v6 = v7;
  }
  else
  {
    v5 = *(_QWORD *)result + 24 * v4;
    *(_DWORD *)v5 = a2;
    *(_OWORD *)(v5 + 8) = *a3;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

BOOL sub_22F363D74(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32))
  {
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = *(_QWORD *)(a2 + 40);
      v7 = 56 * v4;
      do
      {
        v8 = *(_DWORD *)(v6 + v5);
        switch(v8)
        {
          case 2:
            sub_22EF4E0C8((uint64_t)a1, a2, *(_QWORD *)(v6 + v5 + 28), *(_DWORD *)(v6 + v5 + 44));
            break;
          case 1:
            sub_22EF4DBF8((uint64_t)a1, *(_DWORD *)(v6 + v5 + 24), *(_QWORD *)(v6 + v5 + 28), *(_QWORD *)(v6 + v5 + 36), *(_DWORD *)(v6 + v5 + 44), *(unsigned __int8 *)(v6 + v5 + 48));
            break;
          case 0:
            sub_22EF4DABC(a1, *(_DWORD *)(v6 + v5 + 24), *(_QWORD *)(v6 + v5 + 28), *(const void **)(v6 + v5 + 8), *(_QWORD *)(v6 + v5 + 16), *(unsigned __int8 *)(v6 + v5 + 48));
            break;
        }
        v5 += 56;
      }
      while (v7 != v5);
    }
    sub_22EF4D7C0((uint64_t)a1);
  }
  return v2 != 0;
}

_DWORD *sub_22F363E4C(uint64_t *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F363EBC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F363F94((uint64_t)a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = v5 + 6;
    *((_QWORD *)v5 + 2) = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F363EBC(uint64_t *a1, int *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v17 = *a2;
    v7 = sub_22F422E70(&v17);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_DWORD *)(v6 + 56 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -2;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_DWORD *)(v6 + 56 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_4;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v10;
  return result;
}

_DWORD *sub_22F363F94(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF4E8B4(a1, v6);
  v8 = 0;
  sub_22F363EBC((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F364040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  void *v11;
  _DWORD *v12;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -1;
      v7 += 14;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_22F363EBC((uint64_t *)a1, (int *)v4, &v12);
        v9 = v12;
        *v12 = *(_DWORD *)v4;
        *((_QWORD *)v9 + 2) = 0x200000000;
        *((_QWORD *)v9 + 1) = v9 + 6;
        v10 = (uint64_t)(v9 + 2);
        if (*(_DWORD *)(v4 + 16))
          sub_22F2528D0(v10, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11)
          free(v11);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

uint64_t *sub_22F364134(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = (uint64_t **)sub_22EF4E980(a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v8 = v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v9 = **a3;
    v6[6] = 0;
    v6[7] = 0;
    v6[4] = v9;
    v6[5] = 0;
    v10 = v13;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *v8 = v6;
    v11 = **(_QWORD **)a1;
    v12 = v6;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = *v8;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

char *sub_22F3641DC(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  void **v6;
  char *v7;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void **)sub_22EF4E9E4(a1, a2, &v14, &v13, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 4) = *(_QWORD *)a4;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v7 + 7) = *(_QWORD *)(a4 + 24);
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = v7;
    v11 = (_QWORD *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_22F364290(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, unint64_t **, double), uint64_t a4)
{
  _DWORD *v8;
  _QWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (sub_22EF4EB30((unint64_t *)&v8, a1, a2))
    sub_22EF4F144((uint64_t)v9, v8, a1, a3, a4);
  return sub_22F36430C((uint64_t)&v8);
}

uint64_t sub_22F36430C(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(40 * *(unsigned int *)(a1 + 48)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(40 * *(unsigned int *)(a1 + 24)));
  return a1;
}

llvm::raw_ostream *sub_22F36435C(_QWORD *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  const void **v7;
  __int16 v8;
  unint64_t v9;

  sub_22E47DAC0(a2, "typeid(");
  v9 = *a1 & 0xFFFFFFFFFFFFFFF0;
  v8 = 257;
  sub_22F119558((uint64_t *)&v9, (uint64_t **)a2, a3, &v7, 0);
  return sub_22E47DAC0(a2, ")");
}

uint64_t sub_22F3643DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  result = sub_22E3CF554(a2, *(_QWORD *)a1);
  if ((*(_QWORD *)a1 & 3) != 2 && (*(_QWORD *)a1 & 7) != 3)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = v6;
    v8 = *(_DWORD *)(a2 + 12);
    v9 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v9;
    v10 = *(_DWORD *)(a1 + 12);
    if (v9 >= v8)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v10;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_22F3644A4(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, char a5)
{
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  v5 = *(_BYTE *)(result + 52) & 0xFD;
  *(_BYTE *)(result + 52) = v5;
  *(_QWORD *)(result + 24) = *a4;
  v6 = *(_DWORD *)(result + 48);
  if (v6 != -1)
  {
    v9 = result;
    v8 = a5;
    if ((v6 - 3) <= 0xFFFFFFFB)
    {
      v7 = *(_QWORD *)(result + 56);
      if (v7)
      {
        MEMORY[0x2348A0E84](v7, 0x1000C8000313F17);
        v5 = *(_BYTE *)(v9 + 52);
      }
    }
    result = v9;
    *(_DWORD *)(v9 + 48) = -1;
    a5 = v8;
  }
  *(_BYTE *)(result + 52) = v5 & 0xF2 | a5;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_22F364544(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  result = sub_22F364DA4(a1, a2, a3, a5);
  if (a5)
  {
    v8 = result;
    v9 = 0;
    v10 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8 * v9) + 32))(*(_QWORD *)(a4 + 8 * v9));
      *(_QWORD *)(v8 + 8 * v9) = result;
      v9 = v10;
    }
    while (a5 != v10++);
  }
  return result;
}

unint64_t sub_22F3645B0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F3645BC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_22F3645C8(uint64_t a1)
{
  unsigned int v1;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 16);
  result = a1 + 24;
  if (v1 >= 7)
    return *(_QWORD *)result;
  return result;
}

unint64_t sub_22F3645E0(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t result;
  int v9;
  unint64_t v10;

  v4 = *(_DWORD *)(a2 + 8);
  while (1)
  {
    v5 = *a1;
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v4) = v5;
    v6 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v6;
    v7 = *a1;
    if ((_DWORD)v7 != 11)
      __asm { BR              X10 }
    result = *((_QWORD *)a1 + 1);
    if (!result)
      break;
    v9 = sub_22EFC306C(result);
    v10 = *(unsigned int *)(a2 + 8);
    if (v10 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(unsigned int *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = v9 + 1;
    v4 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v4;
    a1 = (unsigned int *)*((_QWORD *)a1 + 2);
  }
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = 0;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22F364C68(uint64_t a1, llvm::APInt *this, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  BOOL v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;

  if (*(_DWORD *)a1 == 7)
  {
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      v12 = sub_22EF741C8(a4, a3);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      if ((~*(_DWORD *)(a1 + 8) & 3) != 0)
      {
        if (v8 > 3)
          return 0;
      }
      else
      {
        if ((v8 & 4) != 0)
          v9 = v8 > 7;
        else
          v9 = (v8 & 0x7FFFFFFF8) != 0;
        if (v9)
          return 0;
      }
      v12 = *(_QWORD *)(a1 + 24);
    }
    sub_22EADFE6C(a4, v12, a3, (uint64_t)&v13);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x2348A0E84](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v13;
    *((_DWORD *)this + 2) = v14;
    v11 = v15;
    goto LABEL_15;
  }
  if (*(_DWORD *)a1 != 2)
    return 0;
  if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a1 + 16) > 0x40u)
  {
    llvm::APInt::assignSlowCase(this, (const llvm::APInt *)(a1 + 8));
  }
  else
  {
    *(_QWORD *)this = *(_QWORD *)(a1 + 8);
    *((_DWORD *)this + 2) = *(_DWORD *)(a1 + 16);
  }
  v11 = *(_BYTE *)(a1 + 20);
LABEL_15:
  *((_BYTE *)this + 12) = v11;
  return 1;
}

uint64_t sub_22F364DA4(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  v7 = 0;
  v8 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = (_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 12;
  if (a2)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 0xFFFFFFFFFFFFFFFBLL;
    v7 = *v9 & 3;
  }
  v10 = 4;
  if (!a3)
    v10 = 0;
  *(_QWORD *)(a1 + 8) = v7 | v8 | v10;
  sub_22F364E44((uint64_t)v9, a4);
  result = a1 + 24;
  if (*(_DWORD *)(a1 + 16) >= 7u)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_22F364E44(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(result + 8);
  if (v2 != a2)
  {
    v4 = result;
    if (v2 >= 7)
    {
      result = *(_QWORD *)(result + 16);
      if (result)
        result = MEMORY[0x2348A0E84](result, 0x60C8044C4A2DFLL);
    }
    *(_DWORD *)(v4 + 8) = a2;
    if (a2 >= 7)
    {
      result = operator new[]();
      *(_QWORD *)(v4 + 16) = result;
    }
  }
  return result;
}

uint64_t sub_22F364EC0(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      MEMORY[0x2348A0E84](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x2348A0E84](*(_QWORD *)a1, 0x1000C8000313F17);
  return a1;
}

const char *sub_22F364F30(int a1)
{
  const char *result;
  const char *v2;
  const char *v3;

  if (a1 > 33)
  {
    v2 = "\\'";
    v3 = "\\\\";
    if (a1 != 92)
      v3 = 0;
    if (a1 != 39)
      v2 = v3;
    if (a1 == 34)
      return "\\\"";
    else
      return v2;
  }
  else
  {
    switch(a1)
    {
      case 7:
        result = "\\a";
        break;
      case 8:
        result = "\\b";
        break;
      case 9:
        result = "\\t";
        break;
      case 10:
        result = "\\n";
        break;
      case 11:
        result = "\\v";
        break;
      case 12:
        result = "\\f";
        break;
      case 13:
        result = "\\r";
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_22F36500C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(unsigned int *)(a3 + 144);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xFE | *(_BYTE *)(a3 + 128);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = a2 + 2032;
    v8 = 1;
    do
    {
      v9 = (_QWORD *)(*(_QWORD *)(a3 + 136) + 16 * v6);
      v10 = v9[1];
      v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v10 & 2) != 0)
      {
        v12 = *(unsigned int *)(v11 + 16);
        v13 = (void *)sub_22E3CD3D4(v7, v12, 3);
        memcpy(v13, *(const void **)(v11 + 8), v12);
        v14 = sub_22E3CD3D4(v7, 24, 3);
        *(_DWORD *)v14 = *(_DWORD *)v11;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 16) = v12;
        v11 = v14 | 2;
        v4 = *(_QWORD *)a1;
      }
      v15 = (_QWORD *)(a1 + 16 + 16 * v6);
      *v15 = *v9;
      v15[1] = v11;
      v6 = v8;
    }
    while (v4 > v8++);
  }
  return a1;
}

uint64_t sub_22F3650F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22E3CD3D4(a1 + 2032, 16 * *(unsigned int *)(a2 + 144) + 16, 3);
  return sub_22F36500C(v4, a1, a2);
}

void sub_22F365138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  sub_22E3CF554(a1, a3);
  sub_22E3CF554(a1, a5);
  if (a5)
  {
    v9 = 24 * a5;
    do
    {
      sub_22F0EED38(a4, a1, a2);
      a4 += 24;
      v9 -= 24;
    }
    while (v9);
  }
}

void sub_22F3651AC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F3651C0(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int *v9;
  int v10;

  v4 = sub_22EF56224(a2, *(_QWORD **)(a1 + 1992));
  if (v4 < 1)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16048);
  if (v6 && !*(_BYTE *)(a1 + 16152))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 152))(v6);
    *(_BYTE *)(a1 + 16152) = 1;
  }
  if (*(_DWORD *)(a1 + 16088)
    && (v7 = sub_22E677168(*(_QWORD *)(a1 + 1992), v5)) != 0
    && (v10 = v7,
        v9 = sub_22F3F0A38((uint64_t *)(a1 + 16080), &v10),
        (int *)(*(_QWORD *)(a1 + 16080) + 32 * *(unsigned int *)(a1 + 16096)) != v9)
    && *((_QWORD *)v9 + 3))
  {
    return sub_22EF56004(a1, a2, v5, (_QWORD *)v9 + 1);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22F3652A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22F25AFD8((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

_QWORD *sub_22F36530C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  __int128 v7;

  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  sub_22F3653A4(a1 + 16160, &v7);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_QWORD *)&v7 = v5;
  *((_QWORD *)&v7 + 1) = a2;
  sub_22F3653A4(a1 + 16208, &v7);
  result = (_QWORD *)sub_22F3652A8(a1 + 16256, v5);
  if (*(_QWORD **)(a1 + 16288) != result)
    return (_QWORD *)sub_22EF76EC0(a1 + 16256, result);
  return result;
}

uint64_t sub_22F3653A4(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)a2;
  v10 = 0;
  result = sub_22F2899F0(a1, &v9, &v10, (uint64_t)&v7);
  if (v8)
  {
    v5 = v7;
    v6 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_22E4D6CC4((void **)(a1 + 24), a2);
    }
    else
    {
      *v6 = *a2;
      result = (uint64_t)(v6 + 1);
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 4) - 1;
  }
  return result;
}

int *sub_22F365440(uint64_t a1, unint64_t a2)
{
  int *result;

  result = (int *)sub_22F3651C0(a1, a2);
  if (result)
    return (int *)sub_22F3F08AC(result, a1, 0, a2);
  return result;
}

_QWORD *sub_22F365480(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 2000);
  if ((*(_BYTE *)(v1 + 1) & 1) == 0)
    return 0;
  if (*(_BYTE *)(v1 + 700))
    v2 = (_DWORD *)(v1 + 696);
  else
    v2 = (_DWORD *)(*(_QWORD *)(a1 + 15088) + 148);
  if (*v2 > 0xAu)
    return sub_22F3E888C(a1);
  else
    return sub_22F3E1480(a1);
}

_QWORD *sub_22F3654C0(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD **)(a1 + 15120);
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    result = sub_22F3CD344(v3, a1);
    v4 = *(_QWORD *)(a1 + 15120);
    *(_QWORD *)(a1 + 15120) = result;
    if (v4)
    {
      v5 = sub_22F3CD3F4(v4);
      MEMORY[0x2348A0E9C](v5, 0x1020C407DCD39BELL);
      return *(_QWORD **)(a1 + 15120);
    }
  }
  return result;
}

uint64_t sub_22F365534(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 15128);
  if (!result)
  {
    v3 = operator new();
    result = sub_22F3BA47C(v3, a1);
    v4 = *(_QWORD *)(a1 + 15128);
    *(_QWORD *)(a1 + 15128) = result;
    if (v4)
    {
      v5 = sub_22F3BA48C(v4);
      MEMORY[0x2348A0E9C](v5, 0x1020C4093CA8EA1);
      return *(_QWORD *)(a1 + 15128);
    }
  }
  return result;
}

uint64_t sub_22F3655A8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = sub_22F3AD0C8(a1);
  v3 = result;
  v4 = *(_QWORD *)(a1 + 19024);
  if (*(_QWORD *)(a1 + 19016) == v4 || (v6 = *(_QWORD *)(v4 - 8), v5 = *(_QWORD *)(a1 + 1960), v6 == v5))
  {
    v9 = result;
    result = (uint64_t)sub_22EF75668((char **)(a1 + 19016), &v9, &v10);
    v5 = *(_QWORD *)(a1 + 1960);
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 80);
    *(_QWORD *)(v3 + 80) = v7;
    v8 = sub_22E3CD31C((uint64_t *)(v7 + 72), v7);
    *(_QWORD *)(v3 + 72) = v8 & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v3 + 28) |= *(_DWORD *)(v8 + 28) & 0x260000;
    result = sub_22E7B7A74(*(_QWORD *)(v3 + 80) + 72, v3);
  }
  *(_QWORD *)(a1 + 1960) = v3;
  return result;
}

uint64_t sub_22F365698(uint64_t a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  llvm::raw_ostream *v33;
  llvm::raw_ostream *v34;
  llvm::raw_ostream *v35;
  llvm::raw_ostream *v36;
  llvm::raw_ostream *v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  llvm::raw_ostream *v47;
  llvm::raw_ostream *v48;
  llvm::raw_ostream *v49;
  llvm::raw_ostream *v50;
  llvm::raw_ostream *v51;
  llvm::raw_ostream *v52;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  llvm::raw_ostream *v55;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  llvm::raw_ostream *v58;
  llvm::raw_ostream *v59;
  llvm::raw_ostream *v60;
  llvm::raw_ostream *v61;
  llvm::raw_ostream *v62;
  llvm::raw_ostream *v63;
  llvm::raw_ostream *v64;
  llvm::raw_ostream *v65;
  llvm::raw_ostream *v66;
  llvm::raw_ostream *v67;
  llvm::raw_ostream *v68;
  llvm::raw_ostream *v69;
  llvm::raw_ostream *v70;
  llvm::raw_ostream *v71;
  llvm::raw_ostream *v72;
  llvm::raw_ostream *v73;
  llvm::raw_ostream *v74;
  llvm::raw_ostream *v75;
  llvm::raw_ostream *v76;
  llvm::raw_ostream *v77;
  llvm::raw_ostream *v78;
  llvm::raw_ostream *v79;
  llvm::raw_ostream *v80;
  llvm::raw_ostream *v81;
  llvm::raw_ostream *v82;
  llvm::raw_ostream *v83;
  llvm::raw_ostream *v84;
  llvm::raw_ostream *v85;
  llvm::raw_ostream *v86;
  llvm::raw_ostream *v87;
  llvm::raw_ostream *v88;
  llvm::raw_ostream *v89;
  llvm::raw_ostream *v90;
  llvm::raw_ostream *v91;
  llvm::raw_ostream *v92;
  llvm::raw_ostream *v93;
  llvm::raw_ostream *v94;
  llvm::raw_ostream *v95;
  llvm::raw_ostream *v96;
  llvm::raw_ostream *v97;
  llvm::raw_ostream *v98;
  llvm::raw_ostream *v99;
  llvm::raw_ostream *v100;
  llvm::raw_ostream *v101;
  llvm::raw_ostream *v102;
  llvm::raw_ostream *v103;
  llvm::raw_ostream *v104;
  llvm::raw_ostream *v105;
  llvm::raw_ostream *v106;
  llvm::raw_ostream *v107;
  llvm::raw_ostream *v108;
  llvm::raw_ostream *v109;
  llvm::raw_ostream *v110;
  llvm::raw_ostream *v111;
  llvm::raw_ostream *v112;
  llvm::raw_ostream *v113;
  llvm::raw_ostream *v114;
  llvm::raw_ostream *v115;
  llvm::raw_ostream *v116;
  llvm::raw_ostream *v117;
  llvm::raw_ostream *v118;
  llvm::raw_ostream *v119;
  llvm::raw_ostream *v120;
  llvm::raw_ostream *v121;
  llvm::raw_ostream *v122;
  llvm::raw_ostream *v123;
  llvm::raw_ostream *v124;
  llvm::raw_ostream *v125;
  llvm::raw_ostream *v126;
  llvm::raw_ostream *v127;
  llvm::raw_ostream *v128;
  llvm::raw_ostream *v129;
  llvm::raw_ostream *v130;
  llvm::raw_ostream *v131;
  llvm::raw_ostream *v132;
  llvm::raw_ostream *v133;
  llvm::raw_ostream *v134;
  llvm::raw_ostream *v135;
  llvm::raw_ostream *v136;
  llvm::raw_ostream *v137;
  llvm::raw_ostream *v138;
  llvm::raw_ostream *v139;
  llvm::raw_ostream *v140;
  llvm::raw_ostream *v141;
  llvm::raw_ostream *v142;
  llvm *v143;
  llvm::raw_ostream *v144;
  llvm::raw_ostream *v145;
  llvm::raw_ostream *v146;
  llvm::raw_ostream *v147;
  llvm::raw_ostream *v148;
  llvm::raw_ostream *v149;
  llvm::raw_ostream *v150;
  llvm::raw_ostream *v151;
  llvm::raw_ostream *v152;
  llvm::raw_ostream *v153;
  llvm::raw_ostream *v154;
  llvm::raw_ostream *v155;
  llvm::raw_ostream *v156;
  llvm::raw_ostream *v157;
  llvm::raw_ostream *v158;
  llvm::raw_ostream *v159;
  llvm::raw_ostream *v160;
  llvm::raw_ostream *v161;
  llvm::raw_ostream *v162;
  llvm::raw_ostream *v163;
  llvm::raw_ostream *v164;
  llvm::raw_ostream *v165;
  llvm::raw_ostream *v166;
  llvm::raw_ostream *v167;
  llvm::raw_ostream *v168;
  llvm::raw_ostream *v169;
  llvm::raw_ostream *v170;
  llvm::raw_ostream *v171;
  llvm::raw_ostream *v172;
  llvm::raw_ostream *v173;
  llvm::raw_ostream *v174;
  llvm::raw_ostream *v175;
  llvm::raw_ostream *v176;
  llvm::raw_ostream *v177;
  llvm::raw_ostream *v178;
  llvm::raw_ostream *v179;
  llvm::raw_ostream *v180;
  llvm::raw_ostream *v181;
  llvm::raw_ostream *v182;
  llvm::raw_ostream *v183;
  llvm::raw_ostream *v184;
  llvm::raw_ostream *v185;
  llvm::raw_ostream *v186;
  llvm::raw_ostream *v187;
  llvm::raw_ostream *v188;
  llvm::raw_ostream *v189;
  llvm::raw_ostream *v190;
  llvm::raw_ostream *v191;
  llvm::raw_ostream *v192;
  llvm::raw_ostream *v193;
  llvm::raw_ostream *v194;
  llvm::raw_ostream *v195;
  llvm::raw_ostream *v196;
  llvm::raw_ostream *v197;
  llvm::raw_ostream *v198;
  llvm::raw_ostream *v199;
  llvm::raw_ostream *v200;
  llvm::raw_ostream *v201;
  llvm::raw_ostream *v202;
  llvm::raw_ostream *v203;
  llvm::raw_ostream *v204;
  llvm::raw_ostream *v205;
  llvm::raw_ostream *v206;
  llvm::raw_ostream *v207;
  llvm::raw_ostream *v208;
  llvm::raw_ostream *v209;
  llvm::raw_ostream *v210;
  llvm::raw_ostream *v211;
  llvm::raw_ostream *v212;
  llvm::raw_ostream *v213;
  llvm::raw_ostream *v214;
  llvm::raw_ostream *v215;
  llvm::raw_ostream *v216;
  llvm::raw_ostream *v217;
  llvm::raw_ostream *v218;
  llvm::raw_ostream *v219;
  llvm::raw_ostream *v220;
  llvm::raw_ostream *v221;
  llvm::raw_ostream *v222;
  llvm::raw_ostream *v223;
  llvm::raw_ostream *v224;
  llvm::raw_ostream *v225;
  llvm::raw_ostream *v226;
  llvm::raw_ostream *v227;
  llvm::raw_ostream *v228;
  llvm::raw_ostream *v229;
  llvm::raw_ostream *v230;
  llvm::raw_ostream *v231;
  llvm::raw_ostream *v232;
  llvm::raw_ostream *v233;
  llvm::raw_ostream *v234;
  llvm::raw_ostream *v235;
  llvm::raw_ostream *v236;
  llvm::raw_ostream *v237;
  llvm::raw_ostream *v238;
  llvm::raw_ostream *v239;
  llvm::raw_ostream *v240;
  llvm::raw_ostream *v241;
  llvm::raw_ostream *v242;
  llvm::raw_ostream *v243;
  llvm::raw_ostream *v244;
  llvm::raw_ostream *v245;
  llvm::raw_ostream *v246;
  llvm::raw_ostream *v247;
  llvm::raw_ostream *v248;
  llvm::raw_ostream *v249;
  llvm::raw_ostream *v250;
  llvm::raw_ostream *v251;
  llvm::raw_ostream *v252;
  llvm::raw_ostream *v253;
  llvm::raw_ostream *v254;
  llvm::raw_ostream *v255;
  llvm::raw_ostream *v256;
  llvm::raw_ostream *v257;
  llvm::raw_ostream *v258;
  llvm::raw_ostream *v259;
  llvm::raw_ostream *v260;
  llvm::raw_ostream *v261;
  llvm::raw_ostream *v262;
  llvm::raw_ostream *v263;
  llvm::raw_ostream *v264;
  llvm::raw_ostream *v265;
  llvm::raw_ostream *v266;
  llvm::raw_ostream *v267;
  llvm::raw_ostream *v268;
  llvm::raw_ostream *v269;
  llvm::raw_ostream *v270;
  llvm::raw_ostream *v271;
  llvm::raw_ostream *v272;
  llvm::raw_ostream *v273;
  llvm::raw_ostream *v274;
  llvm::raw_ostream *v275;
  llvm::raw_ostream *v276;
  llvm::raw_ostream *v277;
  llvm::raw_ostream *v278;
  llvm::raw_ostream *v279;
  llvm::raw_ostream *v280;
  llvm::raw_ostream *v281;
  llvm::raw_ostream *v282;
  llvm::raw_ostream *v283;
  llvm::raw_ostream *v284;
  llvm::raw_ostream *v285;
  llvm::raw_ostream *v286;
  llvm::raw_ostream *v287;
  llvm::raw_ostream *v288;
  llvm::raw_ostream *v289;
  llvm::raw_ostream *v290;
  llvm::raw_ostream *v291;
  llvm::raw_ostream *v292;
  llvm::raw_ostream *v293;
  llvm::raw_ostream *v294;
  llvm::raw_ostream *v295;
  llvm::raw_ostream *v296;
  llvm::raw_ostream *v297;
  llvm::raw_ostream *v298;
  llvm::raw_ostream *v299;
  llvm::raw_ostream *v300;
  llvm::raw_ostream *v301;
  llvm::raw_ostream *v302;
  llvm::raw_ostream *v303;
  llvm::raw_ostream *v304;
  llvm::raw_ostream *v305;
  llvm::raw_ostream *v306;
  llvm::raw_ostream *v307;
  llvm::raw_ostream *v308;
  llvm::raw_ostream *v309;
  llvm::raw_ostream *v310;
  llvm::raw_ostream *v311;
  llvm::raw_ostream *v312;
  llvm::raw_ostream *v313;
  llvm::raw_ostream *v314;
  llvm::raw_ostream *v315;
  llvm::raw_ostream *v316;
  llvm::raw_ostream *v317;
  llvm::raw_ostream *v318;
  llvm::raw_ostream *v319;
  llvm::raw_ostream *v320;
  llvm::raw_ostream *v321;
  llvm::raw_ostream *v322;
  llvm::raw_ostream *v323;
  llvm::raw_ostream *v324;
  llvm::raw_ostream *v325;
  llvm::raw_ostream *v326;
  llvm::raw_ostream *v327;
  llvm::raw_ostream *v328;
  llvm::raw_ostream *v329;
  llvm::raw_ostream *v330;
  llvm::raw_ostream *v331;
  llvm::raw_ostream *v332;
  llvm::raw_ostream *v333;
  llvm::raw_ostream *v334;
  llvm::raw_ostream *v335;
  llvm::raw_ostream *v336;
  llvm::raw_ostream *v337;
  llvm::raw_ostream *v338;
  llvm::raw_ostream *v339;
  llvm::raw_ostream *v340;
  llvm::raw_ostream *v341;
  llvm::raw_ostream *v342;
  llvm::raw_ostream *v343;
  llvm::raw_ostream *v344;
  llvm::raw_ostream *v345;
  llvm::raw_ostream *v346;
  llvm::raw_ostream *v347;
  llvm::raw_ostream *v348;
  llvm::raw_ostream *v349;
  llvm::raw_ostream *v350;
  llvm::raw_ostream *v351;
  llvm::raw_ostream *v352;
  llvm::raw_ostream *v353;
  llvm::raw_ostream *v354;
  llvm::raw_ostream *v355;
  llvm::raw_ostream *v356;
  llvm::raw_ostream *v357;
  llvm::raw_ostream *v358;
  llvm::raw_ostream *v359;
  llvm::raw_ostream *v360;
  llvm::raw_ostream *v361;
  llvm::raw_ostream *v362;
  llvm::raw_ostream *v363;
  llvm::raw_ostream *v364;
  llvm::raw_ostream *v365;
  llvm::raw_ostream *v366;
  llvm::raw_ostream *v367;
  llvm::raw_ostream *v368;
  llvm::raw_ostream *v369;
  llvm::raw_ostream *v370;
  llvm::raw_ostream *v371;
  llvm::raw_ostream *v372;
  llvm::raw_ostream *v373;
  llvm::raw_ostream *v374;
  llvm::raw_ostream *v375;
  llvm::raw_ostream *v376;
  llvm::raw_ostream *v377;
  llvm::raw_ostream *v378;
  llvm::raw_ostream *v379;
  llvm::raw_ostream *v380;
  llvm::raw_ostream *v381;
  llvm::raw_ostream *v382;
  llvm::raw_ostream *v383;
  llvm::raw_ostream *v384;
  llvm::raw_ostream *v385;
  llvm::raw_ostream *v386;
  llvm::raw_ostream *v387;
  llvm::raw_ostream *v388;
  llvm::raw_ostream *v389;
  llvm::raw_ostream *v390;
  llvm::raw_ostream *v391;
  llvm::raw_ostream *v392;
  llvm::raw_ostream *v393;
  llvm::raw_ostream *v394;
  llvm::raw_ostream *v395;
  llvm::raw_ostream *v396;
  llvm::raw_ostream *v397;
  llvm::raw_ostream *v398;
  llvm::raw_ostream *v399;
  llvm::raw_ostream *v400;
  llvm::raw_ostream *v401;
  llvm::raw_ostream *v402;
  llvm::raw_ostream *v403;
  llvm::raw_ostream *v404;
  llvm::raw_ostream *v405;
  llvm::raw_ostream *v406;
  llvm::raw_ostream *v407;
  llvm::raw_ostream *v408;
  llvm::raw_ostream *v409;
  llvm::raw_ostream *v410;
  llvm::raw_ostream *v411;
  llvm *v412;
  llvm::raw_ostream *v413;
  llvm::raw_ostream *v414;
  llvm *v415;
  llvm::raw_ostream *v416;
  llvm::raw_ostream *v417;
  llvm *v418;
  llvm::raw_ostream *v419;
  llvm::raw_ostream *v420;
  llvm::raw_ostream *v421;
  llvm::raw_ostream *v422;
  llvm *v423;
  llvm::raw_ostream *v424;
  llvm::raw_ostream *v425;
  llvm::raw_ostream *v426;
  llvm::raw_ostream *v427;
  llvm *v428;
  llvm::raw_ostream *v429;
  llvm *v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  llvm *v436[2];
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  uint64_t v446;
  uint64_t v447;

  v447 = *MEMORY[0x24BDAC8D0];
  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v3 = sub_22E47DAC0(v2, "\n*** AST Context Stats:\n");
  v4 = (llvm::raw_ostream *)llvm::errs(v3);
  sub_22E47DAC0(v4, "  ");
  v5 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v6 = sub_22E47DAC0(v5, " types total.\n");
  v446 = 0;
  v444 = 0u;
  v445 = 0u;
  v442 = 0u;
  v443 = 0u;
  v440 = 0u;
  v441 = 0u;
  v438 = 0u;
  v439 = 0u;
  *(_OWORD *)v436 = 0u;
  v437 = 0u;
  v434 = 0u;
  v435 = 0u;
  v432 = 0u;
  v433 = 0u;
  v7 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a1 + 8);
    do
    {
      v9 = *v8++;
      ++*((_DWORD *)&v432 + *(unsigned __int8 *)(v9 + 16));
      --v7;
    }
    while (v7);
    if ((_DWORD)v432)
    {
      v10 = (llvm::raw_ostream *)llvm::errs(v6);
      sub_22E47DAC0(v10, "    ");
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v12 = sub_22E47DAC0(v11, " ");
      v13 = sub_22E47DAC0(v12, "Adjusted");
      sub_22E47DAC0(v13, " types, ");
      v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v15 = sub_22E47DAC0(v14, " each ");
      sub_22E47DAC0(v15, "(");
      v16 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
      v6 = sub_22E47DAC0(v16, " bytes)\n");
    }
  }
  if (DWORD1(v432))
  {
    v17 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v17, "    ");
    v18 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v19 = sub_22E47DAC0(v18, " ");
    v20 = sub_22E47DAC0(v19, "Decayed");
    sub_22E47DAC0(v20, " types, ");
    v21 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v22 = sub_22E47DAC0(v21, " each ");
    sub_22E47DAC0(v22, "(");
    v23 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v23, " bytes)\n");
  }
  if (DWORD2(v432))
  {
    v24 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v24, "    ");
    v25 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v26 = sub_22E47DAC0(v25, " ");
    v27 = sub_22E47DAC0(v26, "ConstantArray");
    sub_22E47DAC0(v27, " types, ");
    v28 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v29 = sub_22E47DAC0(v28, " each ");
    sub_22E47DAC0(v29, "(");
    v30 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v30, " bytes)\n");
  }
  if (HIDWORD(v432))
  {
    v31 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v31, "    ");
    v32 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v33 = sub_22E47DAC0(v32, " ");
    v34 = sub_22E47DAC0(v33, "DependentSizedArray");
    sub_22E47DAC0(v34, " types, ");
    v35 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v36 = sub_22E47DAC0(v35, " each ");
    sub_22E47DAC0(v36, "(");
    v37 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v37, " bytes)\n");
  }
  if ((_DWORD)v433)
  {
    v38 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v38, "    ");
    v39 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v40 = sub_22E47DAC0(v39, " ");
    v41 = sub_22E47DAC0(v40, "IncompleteArray");
    sub_22E47DAC0(v41, " types, ");
    v42 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v43 = sub_22E47DAC0(v42, " each ");
    sub_22E47DAC0(v43, "(");
    v44 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v44, " bytes)\n");
  }
  if (DWORD1(v433))
  {
    v45 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v45, "    ");
    v46 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v47 = sub_22E47DAC0(v46, " ");
    v48 = sub_22E47DAC0(v47, "VariableArray");
    sub_22E47DAC0(v48, " types, ");
    v49 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v50 = sub_22E47DAC0(v49, " each ");
    sub_22E47DAC0(v50, "(");
    v51 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v51, " bytes)\n");
  }
  if (DWORD2(v433))
  {
    v52 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v52, "    ");
    v53 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v54 = sub_22E47DAC0(v53, " ");
    v55 = sub_22E47DAC0(v54, "Atomic");
    sub_22E47DAC0(v55, " types, ");
    v56 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v57 = sub_22E47DAC0(v56, " each ");
    sub_22E47DAC0(v57, "(");
    v58 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v58, " bytes)\n");
  }
  if (HIDWORD(v433))
  {
    v59 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v59, "    ");
    v60 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v61 = sub_22E47DAC0(v60, " ");
    v62 = sub_22E47DAC0(v61, "Attributed");
    sub_22E47DAC0(v62, " types, ");
    v63 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v64 = sub_22E47DAC0(v63, " each ");
    sub_22E47DAC0(v64, "(");
    v65 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v65, " bytes)\n");
  }
  if ((_DWORD)v434)
  {
    v66 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v66, "    ");
    v67 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v68 = sub_22E47DAC0(v67, " ");
    v69 = sub_22E47DAC0(v68, "BTFTagAttributed");
    sub_22E47DAC0(v69, " types, ");
    v70 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v71 = sub_22E47DAC0(v70, " each ");
    sub_22E47DAC0(v71, "(");
    v72 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v72, " bytes)\n");
  }
  if (DWORD1(v434))
  {
    v73 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v73, "    ");
    v74 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v75 = sub_22E47DAC0(v74, " ");
    v76 = sub_22E47DAC0(v75, "BitInt");
    sub_22E47DAC0(v76, " types, ");
    v77 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v78 = sub_22E47DAC0(v77, " each ");
    sub_22E47DAC0(v78, "(");
    v79 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v79, " bytes)\n");
  }
  if (DWORD2(v434))
  {
    v80 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v80, "    ");
    v81 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v82 = sub_22E47DAC0(v81, " ");
    v83 = sub_22E47DAC0(v82, "BlockPointer");
    sub_22E47DAC0(v83, " types, ");
    v84 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v85 = sub_22E47DAC0(v84, " each ");
    sub_22E47DAC0(v85, "(");
    v86 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v86, " bytes)\n");
  }
  if (HIDWORD(v434))
  {
    v87 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v87, "    ");
    v88 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v89 = sub_22E47DAC0(v88, " ");
    v90 = sub_22E47DAC0(v89, "Builtin");
    sub_22E47DAC0(v90, " types, ");
    v91 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v92 = sub_22E47DAC0(v91, " each ");
    sub_22E47DAC0(v92, "(");
    v93 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v93, " bytes)\n");
  }
  if ((_DWORD)v435)
  {
    v94 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v94, "    ");
    v95 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v96 = sub_22E47DAC0(v95, " ");
    v97 = sub_22E47DAC0(v96, "Complex");
    sub_22E47DAC0(v97, " types, ");
    v98 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v99 = sub_22E47DAC0(v98, " each ");
    sub_22E47DAC0(v99, "(");
    v100 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v100, " bytes)\n");
  }
  if (DWORD1(v435))
  {
    v101 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v101, "    ");
    v102 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v103 = sub_22E47DAC0(v102, " ");
    v104 = sub_22E47DAC0(v103, "Decltype");
    sub_22E47DAC0(v104, " types, ");
    v105 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v106 = sub_22E47DAC0(v105, " each ");
    sub_22E47DAC0(v106, "(");
    v107 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v107, " bytes)\n");
  }
  if (DWORD2(v435))
  {
    v108 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v108, "    ");
    v109 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v110 = sub_22E47DAC0(v109, " ");
    v111 = sub_22E47DAC0(v110, "Auto");
    sub_22E47DAC0(v111, " types, ");
    v112 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v113 = sub_22E47DAC0(v112, " each ");
    sub_22E47DAC0(v113, "(");
    v114 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v114, " bytes)\n");
  }
  if (HIDWORD(v435))
  {
    v115 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v115, "    ");
    v116 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v117 = sub_22E47DAC0(v116, " ");
    v118 = sub_22E47DAC0(v117, "DeducedTemplateSpecialization");
    sub_22E47DAC0(v118, " types, ");
    v119 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v120 = sub_22E47DAC0(v119, " each ");
    sub_22E47DAC0(v120, "(");
    v121 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v121, " bytes)\n");
  }
  if (LODWORD(v436[0]))
  {
    v122 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v122, "    ");
    v123 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v124 = sub_22E47DAC0(v123, " ");
    v125 = sub_22E47DAC0(v124, "DependentAddressSpace");
    sub_22E47DAC0(v125, " types, ");
    v126 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v127 = sub_22E47DAC0(v126, " each ");
    sub_22E47DAC0(v127, "(");
    v128 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v128, " bytes)\n");
  }
  if (HIDWORD(v436[0]))
  {
    v129 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v129, "    ");
    v130 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v131 = sub_22E47DAC0(v130, " ");
    v132 = sub_22E47DAC0(v131, "DependentBitInt");
    sub_22E47DAC0(v132, " types, ");
    v133 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v134 = sub_22E47DAC0(v133, " each ");
    sub_22E47DAC0(v134, "(");
    v135 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v6 = sub_22E47DAC0(v135, " bytes)\n");
  }
  if (LODWORD(v436[1]))
  {
    v136 = (llvm::raw_ostream *)llvm::errs(v6);
    sub_22E47DAC0(v136, "    ");
    v137 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v138 = sub_22E47DAC0(v137, " ");
    v139 = sub_22E47DAC0(v138, "DependentName");
    sub_22E47DAC0(v139, " types, ");
    v140 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v141 = sub_22E47DAC0(v140, " each ");
    sub_22E47DAC0(v141, "(");
    v142 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v142, " bytes)\n");
  }
  v143 = (llvm *)HIDWORD(v436[1]);
  v431 = (llvm *)HIDWORD(v436[1]);
  if (HIDWORD(v436[1]))
  {
    v144 = (llvm::raw_ostream *)llvm::errs((llvm *)HIDWORD(v436[1]));
    sub_22E47DAC0(v144, "    ");
    v145 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v146 = sub_22E47DAC0(v145, " ");
    v147 = sub_22E47DAC0(v146, "DependentSizedExtVector");
    sub_22E47DAC0(v147, " types, ");
    v148 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v149 = sub_22E47DAC0(v148, " each ");
    sub_22E47DAC0(v149, "(");
    v150 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v150, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v437)
  {
    v151 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v151, "    ");
    v152 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v153 = sub_22E47DAC0(v152, " ");
    v154 = sub_22E47DAC0(v153, "DependentTemplateSpecialization");
    sub_22E47DAC0(v154, " types, ");
    v155 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v156 = sub_22E47DAC0(v155, " each ");
    sub_22E47DAC0(v156, "(");
    v157 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v157, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v437))
  {
    v158 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v158, "    ");
    v159 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v160 = sub_22E47DAC0(v159, " ");
    v161 = sub_22E47DAC0(v160, "DependentVector");
    sub_22E47DAC0(v161, " types, ");
    v162 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v163 = sub_22E47DAC0(v162, " each ");
    sub_22E47DAC0(v163, "(");
    v164 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v164, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v437))
  {
    v165 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v165, "    ");
    v166 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v167 = sub_22E47DAC0(v166, " ");
    v168 = sub_22E47DAC0(v167, "DynamicCountPointer");
    sub_22E47DAC0(v168, " types, ");
    v169 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v170 = sub_22E47DAC0(v169, " each ");
    sub_22E47DAC0(v170, "(");
    v171 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v171, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v437))
  {
    v172 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v172, "    ");
    v173 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v174 = sub_22E47DAC0(v173, " ");
    v175 = sub_22E47DAC0(v174, "DynamicRangePointer");
    sub_22E47DAC0(v175, " types, ");
    v176 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v177 = sub_22E47DAC0(v176, " each ");
    sub_22E47DAC0(v177, "(");
    v178 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v178, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v438)
  {
    v179 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v179, "    ");
    v180 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v181 = sub_22E47DAC0(v180, " ");
    v182 = sub_22E47DAC0(v181, "Elaborated");
    sub_22E47DAC0(v182, " types, ");
    v183 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v184 = sub_22E47DAC0(v183, " each ");
    sub_22E47DAC0(v184, "(");
    v185 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v185, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v438))
  {
    v186 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v186, "    ");
    v187 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v188 = sub_22E47DAC0(v187, " ");
    v189 = sub_22E47DAC0(v188, "FunctionNoProto");
    sub_22E47DAC0(v189, " types, ");
    v190 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v191 = sub_22E47DAC0(v190, " each ");
    sub_22E47DAC0(v191, "(");
    v192 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v192, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v438))
  {
    v193 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v193, "    ");
    v194 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v195 = sub_22E47DAC0(v194, " ");
    v196 = sub_22E47DAC0(v195, "FunctionProto");
    sub_22E47DAC0(v196, " types, ");
    v197 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v198 = sub_22E47DAC0(v197, " each ");
    sub_22E47DAC0(v198, "(");
    v199 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v199, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v438))
  {
    v200 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v200, "    ");
    v201 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v202 = sub_22E47DAC0(v201, " ");
    v203 = sub_22E47DAC0(v202, "InjectedClassName");
    sub_22E47DAC0(v203, " types, ");
    v204 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v205 = sub_22E47DAC0(v204, " each ");
    sub_22E47DAC0(v205, "(");
    v206 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v206, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v439)
  {
    v207 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v207, "    ");
    v208 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v209 = sub_22E47DAC0(v208, " ");
    v210 = sub_22E47DAC0(v209, "MacroQualified");
    sub_22E47DAC0(v210, " types, ");
    v211 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v212 = sub_22E47DAC0(v211, " each ");
    sub_22E47DAC0(v212, "(");
    v213 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v213, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v439))
  {
    v214 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v214, "    ");
    v215 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v216 = sub_22E47DAC0(v215, " ");
    v217 = sub_22E47DAC0(v216, "ConstantMatrix");
    sub_22E47DAC0(v217, " types, ");
    v218 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v219 = sub_22E47DAC0(v218, " each ");
    sub_22E47DAC0(v219, "(");
    v220 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v220, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v439))
  {
    v221 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v221, "    ");
    v222 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v223 = sub_22E47DAC0(v222, " ");
    v224 = sub_22E47DAC0(v223, "DependentSizedMatrix");
    sub_22E47DAC0(v224, " types, ");
    v225 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v226 = sub_22E47DAC0(v225, " each ");
    sub_22E47DAC0(v226, "(");
    v227 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v227, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v439))
  {
    v228 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v228, "    ");
    v229 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v230 = sub_22E47DAC0(v229, " ");
    v231 = sub_22E47DAC0(v230, "MemberPointer");
    sub_22E47DAC0(v231, " types, ");
    v232 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v233 = sub_22E47DAC0(v232, " each ");
    sub_22E47DAC0(v233, "(");
    v234 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v234, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v440)
  {
    v235 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v235, "    ");
    v236 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v237 = sub_22E47DAC0(v236, " ");
    v238 = sub_22E47DAC0(v237, "ObjCObjectPointer");
    sub_22E47DAC0(v238, " types, ");
    v239 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v240 = sub_22E47DAC0(v239, " each ");
    sub_22E47DAC0(v240, "(");
    v241 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v241, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v440))
  {
    v242 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v242, "    ");
    v243 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v244 = sub_22E47DAC0(v243, " ");
    v245 = sub_22E47DAC0(v244, "ObjCObject");
    sub_22E47DAC0(v245, " types, ");
    v246 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v247 = sub_22E47DAC0(v246, " each ");
    sub_22E47DAC0(v247, "(");
    v248 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v248, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v440))
  {
    v249 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v249, "    ");
    v250 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v251 = sub_22E47DAC0(v250, " ");
    v252 = sub_22E47DAC0(v251, "ObjCInterface");
    sub_22E47DAC0(v252, " types, ");
    v253 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v254 = sub_22E47DAC0(v253, " each ");
    sub_22E47DAC0(v254, "(");
    v255 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v255, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v440))
  {
    v256 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v256, "    ");
    v257 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v258 = sub_22E47DAC0(v257, " ");
    v259 = sub_22E47DAC0(v258, "ObjCTypeParam");
    sub_22E47DAC0(v259, " types, ");
    v260 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v261 = sub_22E47DAC0(v260, " each ");
    sub_22E47DAC0(v261, "(");
    v262 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v262, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v441)
  {
    v263 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v263, "    ");
    v264 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v265 = sub_22E47DAC0(v264, " ");
    v266 = sub_22E47DAC0(v265, "PackExpansion");
    sub_22E47DAC0(v266, " types, ");
    v267 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v268 = sub_22E47DAC0(v267, " each ");
    sub_22E47DAC0(v268, "(");
    v269 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v269, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v441))
  {
    v270 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v270, "    ");
    v271 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v272 = sub_22E47DAC0(v271, " ");
    v273 = sub_22E47DAC0(v272, "Paren");
    sub_22E47DAC0(v273, " types, ");
    v274 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v275 = sub_22E47DAC0(v274, " each ");
    sub_22E47DAC0(v275, "(");
    v276 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v276, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v441))
  {
    v277 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v277, "    ");
    v278 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v279 = sub_22E47DAC0(v278, " ");
    v280 = sub_22E47DAC0(v279, "Pipe");
    sub_22E47DAC0(v280, " types, ");
    v281 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v282 = sub_22E47DAC0(v281, " each ");
    sub_22E47DAC0(v282, "(");
    v283 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v283, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v441))
  {
    v284 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v284, "    ");
    v285 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v286 = sub_22E47DAC0(v285, " ");
    v287 = sub_22E47DAC0(v286, "Pointer");
    sub_22E47DAC0(v287, " types, ");
    v288 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v289 = sub_22E47DAC0(v288, " each ");
    sub_22E47DAC0(v289, "(");
    v290 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v290, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v442)
  {
    v291 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v291, "    ");
    v292 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v293 = sub_22E47DAC0(v292, " ");
    v294 = sub_22E47DAC0(v293, "LValueReference");
    sub_22E47DAC0(v294, " types, ");
    v295 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v296 = sub_22E47DAC0(v295, " each ");
    sub_22E47DAC0(v296, "(");
    v297 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v297, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v442))
  {
    v298 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v298, "    ");
    v299 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v300 = sub_22E47DAC0(v299, " ");
    v301 = sub_22E47DAC0(v300, "RValueReference");
    sub_22E47DAC0(v301, " types, ");
    v302 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v303 = sub_22E47DAC0(v302, " each ");
    sub_22E47DAC0(v303, "(");
    v304 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v304, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v442))
  {
    v305 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v305, "    ");
    v306 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v307 = sub_22E47DAC0(v306, " ");
    v308 = sub_22E47DAC0(v307, "SubstTemplateTypeParmPack");
    sub_22E47DAC0(v308, " types, ");
    v309 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v310 = sub_22E47DAC0(v309, " each ");
    sub_22E47DAC0(v310, "(");
    v311 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v311, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v442))
  {
    v312 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v312, "    ");
    v313 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v314 = sub_22E47DAC0(v313, " ");
    v315 = sub_22E47DAC0(v314, "SubstTemplateTypeParm");
    sub_22E47DAC0(v315, " types, ");
    v316 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v317 = sub_22E47DAC0(v316, " each ");
    sub_22E47DAC0(v317, "(");
    v318 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v318, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v443)
  {
    v319 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v319, "    ");
    v320 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v321 = sub_22E47DAC0(v320, " ");
    v322 = sub_22E47DAC0(v321, "Enum");
    sub_22E47DAC0(v322, " types, ");
    v323 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v324 = sub_22E47DAC0(v323, " each ");
    sub_22E47DAC0(v324, "(");
    v325 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v325, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v443))
  {
    v326 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v326, "    ");
    v327 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v328 = sub_22E47DAC0(v327, " ");
    v329 = sub_22E47DAC0(v328, "Record");
    sub_22E47DAC0(v329, " types, ");
    v330 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v331 = sub_22E47DAC0(v330, " each ");
    sub_22E47DAC0(v331, "(");
    v332 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v332, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v443))
  {
    v333 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v333, "    ");
    v334 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v335 = sub_22E47DAC0(v334, " ");
    v336 = sub_22E47DAC0(v335, "TemplateSpecialization");
    sub_22E47DAC0(v336, " types, ");
    v337 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v338 = sub_22E47DAC0(v337, " each ");
    sub_22E47DAC0(v338, "(");
    v339 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v339, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v443))
  {
    v340 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v340, "    ");
    v341 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v342 = sub_22E47DAC0(v341, " ");
    v343 = sub_22E47DAC0(v342, "TemplateTypeParm");
    sub_22E47DAC0(v343, " types, ");
    v344 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v345 = sub_22E47DAC0(v344, " each ");
    sub_22E47DAC0(v345, "(");
    v346 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v346, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v444)
  {
    v347 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v347, "    ");
    v348 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v349 = sub_22E47DAC0(v348, " ");
    v350 = sub_22E47DAC0(v349, "TypeOfExpr");
    sub_22E47DAC0(v350, " types, ");
    v351 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v352 = sub_22E47DAC0(v351, " each ");
    sub_22E47DAC0(v352, "(");
    v353 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v353, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v444))
  {
    v354 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v354, "    ");
    v355 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v356 = sub_22E47DAC0(v355, " ");
    v357 = sub_22E47DAC0(v356, "TypeOf");
    sub_22E47DAC0(v357, " types, ");
    v358 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v359 = sub_22E47DAC0(v358, " each ");
    sub_22E47DAC0(v359, "(");
    v360 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v360, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v444))
  {
    v361 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v361, "    ");
    v362 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v363 = sub_22E47DAC0(v362, " ");
    v364 = sub_22E47DAC0(v363, "Typedef");
    sub_22E47DAC0(v364, " types, ");
    v365 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v366 = sub_22E47DAC0(v365, " each ");
    sub_22E47DAC0(v366, "(");
    v367 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v367, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v444))
  {
    v368 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v368, "    ");
    v369 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v370 = sub_22E47DAC0(v369, " ");
    v371 = sub_22E47DAC0(v370, "UnaryTransform");
    sub_22E47DAC0(v371, " types, ");
    v372 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v373 = sub_22E47DAC0(v372, " each ");
    sub_22E47DAC0(v373, "(");
    v374 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v374, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v445)
  {
    v375 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v375, "    ");
    v376 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v377 = sub_22E47DAC0(v376, " ");
    v378 = sub_22E47DAC0(v377, "UnresolvedUsing");
    sub_22E47DAC0(v378, " types, ");
    v379 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v380 = sub_22E47DAC0(v379, " each ");
    sub_22E47DAC0(v380, "(");
    v381 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v381, " bytes)\n");
    v143 = v431;
  }
  if (DWORD1(v445))
  {
    v382 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v382, "    ");
    v383 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v384 = sub_22E47DAC0(v383, " ");
    v385 = sub_22E47DAC0(v384, "Using");
    sub_22E47DAC0(v385, " types, ");
    v386 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v387 = sub_22E47DAC0(v386, " each ");
    sub_22E47DAC0(v387, "(");
    v388 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v388, " bytes)\n");
    v143 = v431;
  }
  if (DWORD2(v445))
  {
    v389 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v389, "    ");
    v390 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v391 = sub_22E47DAC0(v390, " ");
    v392 = sub_22E47DAC0(v391, "ValueTerminated");
    sub_22E47DAC0(v392, " types, ");
    v393 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v394 = sub_22E47DAC0(v393, " each ");
    sub_22E47DAC0(v394, "(");
    v395 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v395, " bytes)\n");
    v143 = v431;
  }
  if (HIDWORD(v445))
  {
    v396 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v396, "    ");
    v397 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v398 = sub_22E47DAC0(v397, " ");
    v399 = sub_22E47DAC0(v398, "Vector");
    sub_22E47DAC0(v399, " types, ");
    v400 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v401 = sub_22E47DAC0(v400, " each ");
    sub_22E47DAC0(v401, "(");
    v402 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v402, " bytes)\n");
    v143 = v431;
  }
  if ((_DWORD)v446)
  {
    v403 = (llvm::raw_ostream *)llvm::errs(v143);
    sub_22E47DAC0(v403, "    ");
    v404 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v405 = sub_22E47DAC0(v404, " ");
    v406 = sub_22E47DAC0(v405, "ExtVector");
    sub_22E47DAC0(v406, " types, ");
    v407 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v408 = sub_22E47DAC0(v407, " each ");
    sub_22E47DAC0(v408, "(");
    v409 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v409, " bytes)\n");
    v143 = v431;
  }
  v410 = (llvm::raw_ostream *)llvm::errs(v143);
  sub_22E47DAC0(v410, "Total bytes = ");
  v411 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v412 = sub_22E47DAC0(v411, "\n");
  llvm::errs(v412);
  v413 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v413, "/");
  v414 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v415 = sub_22E47DAC0(v414, " implicit default constructors created\n");
  llvm::errs(v415);
  v416 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v416, "/");
  v417 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v418 = sub_22E47DAC0(v417, " implicit copy constructors created\n");
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 1) != 0)
  {
    llvm::errs(v418);
    v419 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v419, "/");
    v420 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v418 = sub_22E47DAC0(v420, " implicit move constructors created\n");
  }
  llvm::errs(v418);
  v421 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v421, "/");
  v422 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v423 = sub_22E47DAC0(v422, " implicit copy assignment operators created\n");
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 1) != 0)
  {
    llvm::errs(v423);
    v424 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    sub_22E47DAC0(v424, "/");
    v425 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
    v423 = sub_22E47DAC0(v425, " implicit move assignment operators created\n");
  }
  llvm::errs(v423);
  v426 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v426, "/");
  v427 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  v428 = sub_22E47DAC0(v427, " implicit destructors created\n");
  if (*(_QWORD *)(a1 + 16048))
  {
    v429 = (llvm::raw_ostream *)llvm::errs(v428);
    sub_22E47DAC0(v429, "\n");
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16048) + 184))(*(_QWORD *)(a1 + 16048));
  }
  return sub_22E9006C4(a1 + 2032);
}

uint64_t sub_22F367D88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  if (a4)
  {
    v7 = *(_QWORD *)(a1 + 16056);
    if (v7)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 176))(v7, a2, a3);
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = sub_22F348F18(a1 + 1536, &v10);
  return sub_22F2998B8((uint64_t)(v8 + 1), a3);
}

void sub_22F367E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 56))
  {
    v3 = *(_QWORD *)(a2 + 16048);
    v8 = v10;
    v9 = 0x400000000;
    sub_22E78FCDC((uint64_t)&v8, a1 + 48);
    *(_DWORD *)(a1 + 56) = 0;
    v4 = (unsigned int *)v8;
    if ((_DWORD)v9)
    {
      v5 = 4 * v9;
      do
      {
        v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, *v4);
        v7 = *(unsigned int *)(a1 + 8);
        if (v7 >= *(unsigned int *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = *(unsigned int *)(a1 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = v6;
        ++*(_DWORD *)(a1 + 8);
        ++v4;
        v5 -= 4;
      }
      while (v5);
      v4 = (unsigned int *)v8;
    }
    if (v4 != (unsigned int *)v10)
      free(v4);
  }
}

_BYTE *sub_22F367F28(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a2;
  v7 = sub_22F24C2B0(a1 + 1560, &v11);
  v8 = v7[1];
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 56);
  }
  else
  {
    v8 = sub_22E3CD3D4(a1 + 2032, 80, 3);
    v9 = 0;
    *(_QWORD *)v8 = v8 + 16;
    *(_QWORD *)(v8 + 8) = 0x400000000;
    *(_QWORD *)(v8 + 48) = v8 + 64;
    *(_QWORD *)(v8 + 56) = 0x400000000;
    v7[1] = v8;
  }
  return sub_22E7EF718(v8 + 48, *(_QWORD *)(v8 + 48) + 4 * v9, a3, &a3[4 * a4]);
}

uint64_t sub_22F367FCC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  v3 = sub_22E793870((uint64_t *)(a1 + 1560), &v6, &v7);
  result = 0;
  if (v3)
  {
    if (v7 != *(_QWORD *)(a1 + 1560) + 16 * *(unsigned int *)(a1 + 1576))
    {
      v5 = *(_QWORD *)(v7 + 8);
      sub_22F367E0C(v5, a1);
      return *(_QWORD *)v5;
    }
  }
  return result;
}

unint64_t sub_22F36804C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
  if (v6)
    v7 = v6 + 40;
  else
    v7 = 0;
  v8 = sub_22EFC7430(72, a1, v7, 0);
  v9 = sub_22F3B9C20(v8, a1, v7, a3, a2);
  *(_DWORD *)(v9 + 28) |= 0x200u;
  v10 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
  sub_22EFCCFA0(v10 + 40, v8);
  return v8;
}

unint64_t sub_22F3680F4(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 1976);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 1368);
    if (!v3)
    {
      v3 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), "__make_integer_seq", 0x12uLL);
      *(_QWORD *)(a1 + 1368) = v3;
    }
    result = sub_22F36804C(a1, 0, v3);
    *(_QWORD *)(a1 + 1976) = result;
  }
  return result;
}

unint64_t sub_22F368154(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 1984);
  if (!result)
  {
    v3 = *(_QWORD *)(a1 + 1376);
    if (!v3)
    {
      v3 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), "__type_pack_element", 0x13uLL);
      *(_QWORD *)(a1 + 1376) = v3;
    }
    result = sub_22F36804C(a1, 1, v3);
    *(_QWORD *)(a1 + 1984) = result;
  }
  return result;
}

uint64_t sub_22F3681B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  v7 = a2;
  *(_QWORD *)&v8 = 31;
  *((_QWORD *)&v8 + 1) = v4;
  sub_22EF757BC((_DWORD *)(a1 + 15144), &v7, &v8, (uint64_t)&v6);
  return 31;
}

uint64_t sub_22F368234(uint64_t a1, const void *a2, size_t a3, char a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  char v20;

  v8 = **(_QWORD **)(a1 + 2000);
  v9 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
  if (v9)
    v10 = v9 + 40;
  else
    v10 = 0;
  v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), a2, a3);
  if ((v8 & 0x100) != 0)
    v12 = sub_22EFCF6C0(a1, a4, v10, 0, 0, v11, 0, 0);
  else
    v12 = sub_22F3ACBB4(a1, a4, v10, 0, 0, v11, 0);
  v13 = v12;
  *(_DWORD *)(v12 + 28) |= 0x200u;
  v16 = 0uLL;
  v18 = 0;
  v17 = 0;
  v20 = 120;
  v19 = 0;
  v14 = sub_22F3A4468(a1, 0, &v16);
  sub_22EFCA95C(v13, v14);
  return v13;
}

uint64_t sub_22F368320(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1248);
  if (!result)
  {
    result = sub_22EF59578(a1, *(_QWORD *)(a1 + 16504), "__int128_t", 0xAuLL);
    *(_QWORD *)(a1 + 1248) = result;
  }
  return result;
}

uint64_t sub_22F368360(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1256);
  if (!result)
  {
    result = sub_22EF59578(a1, *(_QWORD *)(a1 + 16552), "__uint128_t", 0xBuLL);
    *(_QWORD *)(a1 + 1256) = result;
  }
  return result;
}

int32x2_t sub_22F3683A0(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  if (sub_22F25AFD8((uint64_t *)(a1 + 1488), &v6, &v7))
  {
    v4 = (_QWORD *)v7;
    if (v7 != *(_QWORD *)(a1 + 1488) + 16 * *(unsigned int *)(a1 + 1504))
    {
      v5 = *(void ***)(v7 + 8);
      if (*v5 != v5 + 2)
        free(*v5);
      *v4 = -8192;
      result = vadd_s32(*(int32x2_t *)(a1 + 1496), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 1496) = result;
    }
  }
  return result;
}

uint64_t *sub_22F368424(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;

  v10 = sub_22E3CD3D4(a1 + 2032, 16, 3);
  *(_QWORD *)v10 = a3 & 0xFFFFFFFFFFFFFFF9 | (2 * (a4 - 1));
  *(_DWORD *)(v10 + 8) = a5;
  v11 = v10 | 4;
  v13 = a2;
  result = sub_22EF77484(a1 + 1608, &v13);
  result[1] = v11;
  return result;
}

uint64_t *sub_22F3684A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22EF77484(a1 + 1608, &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F3684DC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_22F246C54((uint64_t *)(a1 + 1632), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 1632) + 16 * *(unsigned int *)(a1 + 1648))
      return *(_QWORD *)(v6 + 8);
  }
  return result;
}

_QWORD *sub_22F36853C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F25E108((uint64_t *)(a1 + 1632), &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F368574(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;

  v6 = 0;
  v3 = sub_22F24C318(*(_QWORD *)(a1 + 1656), *(_DWORD *)(a1 + 1672), a2, &v6);
  result = 0;
  if (v3)
    v5 = v6 == *(_QWORD *)(a1 + 1656) + 16 * *(unsigned int *)(a1 + 1672);
  else
    v5 = 1;
  if (!v5)
    return *(_QWORD *)(v6 + 8);
  return result;
}

_QWORD *sub_22F3685D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F24C2B0(a1 + 1656, &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F368610(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_22F246C54((uint64_t *)(a1 + 1680), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 1680) + 16 * *(unsigned int *)(a1 + 1696))
      return *(_QWORD *)(v6 + 8);
  }
  return result;
}

_QWORD *sub_22F368670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F24C2B0(a1 + 1680, &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F3686A8(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  v3 = sub_22F246C54((uint64_t *)(a1 + 1704), &v6, &v7);
  v4 = v7;
  if ((v3 & 1) == 0)
    v4 = *(_QWORD *)(a1 + 1704) + 16 * *(unsigned int *)(a1 + 1720);
  if (v4 == *(_QWORD *)(a1 + 1704) + 16 * *(unsigned int *)(a1 + 1720))
    return 0;
  else
    return *(_QWORD *)(v4 + 8);
}

_QWORD *sub_22F36870C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F370158(a1 + 1704, &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F368748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  v6 = a2;
  v4 = sub_22F3703B8((uint64_t *)(a1 + 1728), &v6);
  return sub_22F2998B8((uint64_t)(v4 + 1), a3);
}

unint64_t sub_22F368788(uint64_t a1)
{
  unint64_t v2;

  v2 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 224))(*(_QWORD *)(a1 + 15088));
  return v2 / sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22F3687D0(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_22F10D4DC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!v6 || (result = sub_22EFC8A80(*(_QWORD *)(v6 + 24)), !(_DWORD)result))
  {
    v8 = (uint64_t *)(sub_22EF5BA38(a1, a2) & 0xFFFFFFFFFFFFFFF0);
    v9 = sub_22F1110EC(*v8, 0);
    v10 = *v8;
    if ((v9 & 1) != 0)
    {
      v11 = sub_22F10D4DC(*v8);
      if (!v11 || (result = sub_22EFC8A80(*(_QWORD *)(v11 + 24)), !(_DWORD)result))
      {
        result = *v8;
        if (*v8)
        {
          if ((*(_DWORD *)(result + 16) & 0xFE) == 0x2C)
            goto LABEL_9;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          return 0;
        result = sub_22F10CF48(result);
        if (result)
        {
LABEL_9:
          v12 = sub_22F114198(*(_QWORD *)(result + 24));
          return sub_22EFC8A80(v12);
        }
      }
    }
    else if (a3)
    {
      return sub_22EF5C8B8(a1, v10);
    }
    else
    {
      sub_22EF5CDF0(a1, v10);
      return v13;
    }
  }
  return result;
}

unint64_t sub_22F3688D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_22EF5CFF4(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  return v3 / sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t sub_22F36891C(uint64_t a1)
{
  return sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 120));
}

uint64_t sub_22F368934(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 40);
}

uint64_t sub_22F36894C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = sub_22F0C975C(a1, a2);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 56);
  if (!v4)
    return 0;
  v5 = 0;
  do
  {
    v5 += sub_22E46A3EC(v3, v4);
    v3 = sub_22F0C975C(a1, v4);
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 56);
  }
  while (v4);
  return v5;
}

uint64_t sub_22F3689B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = sub_22F3645B0(a2);
  v5 = (uint64_t *)sub_22F3645C8(a2);
  v7 = v6;
  v8 = sub_22F3645BC(a2);
  v9 = *(_QWORD *)(v4 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  v11 = 0;
  v12 = v7;
  if (v7)
  {
    if (v10)
      v13 = v10 - 8;
    else
      v13 = 0;
    do
    {
      if (v8)
        v14 = *v5;
      else
        v14 = (uint64_t)v13;
      if (v8)
        v15 = (unint64_t)v13;
      else
        v15 = *v5;
      v16 = sub_22F0C975C(a1, v15);
      v11 += sub_22E46A3EC(v16, v14);
      v17 = (_QWORD *)*v5++;
      v13 = v17;
      --v12;
    }
    while (v12);
  }
  if (v8)
    return -v11;
  else
    return v11;
}

uint64_t sub_22F368A6C(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;

  v8 = sub_22F3B46CC(a2);
  if (v8)
    sub_22F368A6C(a1, v8, 0, a4);
  if ((a3 & 1) != 0)
  {
    result = sub_22EFDD1E0(a2);
    if (result)
    {
      v10 = result;
      v11 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = v10;
        v11 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v11;
        v10 = *(_QWORD *)(v10 + 80);
      }
      while (v10);
    }
  }
  else
  {
    v12 = sub_22F32C4AC(a2);
    if (!*(_QWORD *)(a2 + 120))
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
    return sub_22EF77BA4(a4, *(_QWORD *)a4 + 8 * *(unsigned int *)(a4 + 8), v12, 0);
  }
  return result;
}

uint64_t sub_22F368B68(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = sub_22EFCCC4C(a1 + 48);
  if (!v1)
    return 0;
  while ((*(_DWORD *)(v1 + 28) & 0x7F) != 0x33)
  {
    v1 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v1)
      return 0;
  }
  LODWORD(v2) = 0;
LABEL_6:
  v2 = (v2 + 1);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v1)
      return v2;
    if ((*(_DWORD *)(v1 + 28) & 0x7F) == 0x33)
      goto LABEL_6;
  }
}

uint64_t sub_22F368BD4(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_22F246C54((uint64_t *)(a1 + 1048), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 1048) + 16 * *(unsigned int *)(a1 + 1064))
      return *(_QWORD *)(v6 + 8);
  }
  return result;
}

uint64_t sub_22F368C34(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(a1 + 1048);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 238) & 1) != 0)
  {
    v8 = a2;
  }
  else
  {
    v4 = sub_22EFCC008(a2 + 48);
    v5 = v4 - 48;
    if (!v4)
      v5 = 0;
    v8 = v5;
  }
  v9 = 0;
  if ((sub_22F246C54(v3, &v8, &v9) & 1) != 0)
    v6 = v9;
  else
    v6 = *(_QWORD *)(a1 + 1048) + 16 * *(unsigned int *)(a1 + 1064);
  if (v6 == *(_QWORD *)(a1 + 1048) + 16 * *(unsigned int *)(a1 + 1064))
    return 0;
  else
    return *(_QWORD *)(v6 + 8);
}

_QWORD *sub_22F368CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F24C2B0(a1 + 1048, &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F368D0C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  v2 = sub_22F246C54((uint64_t *)(a1 + 1072), &v5, &v4);
  result = 0;
  if (v2)
    return *(_QWORD *)(v4 + 8);
  return result;
}

_QWORD *sub_22F368D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F37065C((uint64_t *)(a1 + 1072), &v5);
  result[1] = a3;
  return result;
}

uint64_t sub_22F368D84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_22F246C54((uint64_t *)(a1 + 1096), &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)(a1 + 1096);
    v5 = *(unsigned int *)(a1 + 1112);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 1096);
    v5 = *(unsigned int *)(a1 + 1112);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(v3 + 8);
}

uint64_t sub_22F368DF4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  if (!a2)
    a2 = *(_QWORD *)(a1 + 15088);
  v2 = *(_DWORD *)(a2 + 148);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8);
  if (v2 > 0xA)
    return sub_22F098760(a1, v3);
  else
    return sub_22F3E14E0(a1, v3);
}

void sub_22F368E18(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v4[3];
  uint64_t (**v5)();
  void *__p;
  void *v7;
  uint64_t v8;

  sub_22F40B7C0(v4, a1, a2);
  v4[0] = &off_24FAC7DA8;
  v5 = &off_24FAC7DF8;
  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_22F40B7D4((uint64_t)v4);
  sub_22F120A1C((uint64_t)v4, a3);
  v4[0] = &off_24FAC7DA8;
  v5 = &off_24FAC7DF8;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

uint64_t sub_22F368EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];
  uint64_t (**v5)();
  void *__p;
  void *v7;
  uint64_t v8;

  sub_22F40B7C0(v4, a1, a2);
  v4[0] = &off_24FAC7DA8;
  v5 = &off_24FAC7DF8;
  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_22F40B7D4((uint64_t)v4);
  v2 = sub_22F40B83C((uint64_t)v4);
  v4[0] = &off_24FAC7DA8;
  v5 = &off_24FAC7DF8;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v2;
}

unint64_t sub_22F368F30(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  char v8;
  _QWORD v10[2];
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int16 v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[48];
  void *v20;
  uint64_t v21;
  _WORD v22[28];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  if ((unint64_t)sub_22EF5CDF0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) >> 25)
  {
    v4 = sub_22F121C00(&v14);
    v5 = 0;
    v6 = 0;
  }
  else
  {
    sub_22F40B974((uint64_t)v10, a1, a2);
    sub_22F40B984(v10);
    v15 = &off_24FAC7DD0;
    v17 = v19;
    v7.n128_u64[0] = 0x200000000;
    v18 = 0x200000000;
    v20 = v22;
    v21 = 0x200000000;
    sub_22F40BA2C((uint64_t)&v15, &v14, &v11, v7);
    v6 = v22[24];
    v8 = v16;
    v4 = sub_22F121A08((uint64_t)&v15);
    v15 = &off_24FAC7DD0;
    if (v20 != v22)
      free(v20);
    if (v17 != v19)
      free(v17);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    v5 = (unint64_t)(v8 & 0xF) << 16;
  }
  return v5 | (v4 << 32) | v6;
}

unint64_t sub_22F369084(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t result;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (unint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0)
    v8 = (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 4) & 3;
  else
    v8 = 0;
  if (v8 == a3)
    return a2;
  result = *v6;
  if (!*v6 || *(_BYTE *)(result + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      goto LABEL_16;
    result = sub_22F10CF48(result);
    if (!result)
      goto LABEL_16;
  }
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16);
  if (v10 == 39 || v10 == 32)
  {
    v12 = sub_22F369084(a1);
    result = sub_22EF5B848(a1, v12, 0);
  }
  if (v10 != 32 && v10 != 39)
  {
LABEL_16:
    v13 = 0;
    v11 = sub_22E491354((unsigned int *)&v13, a2);
    LODWORD(v13) = v13 & 0xFFFFFFCF | (16 * a3);
    return sub_22EF5DBC4(a1, v11, v13);
  }
  return result;
}

unint64_t sub_22F3691BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t NodeOrInsertPos;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  void *v17[2];
  _QWORD v18[18];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  sub_22F408C04((uint64_t)v17, a2, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v13 = NodeOrInsertPos - 24;
  }
  else
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
    v13 = sub_22E3CD3D4(a1 + 2032, 8 * a6 + 64, 4);
    sub_22F40A5F8(v13, a2, v15, a3, a4, a5, a6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = v13;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v13 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F369338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t NodeOrInsertPos;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  void *v24[2];
  _QWORD v25[18];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v24[0] = v25;
  v24[1] = (void *)0x2000000000;
  sub_22F408C78((uint64_t)v24, a2, a3, a4, a6, a8);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v17 = NodeOrInsertPos - 24;
  }
  else
  {
    v23 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
    v19 = sub_22E3CD3D4(a1 + 2032, 8 * (a8 + a6) + 72, 4);
    v20 = a5;
    v17 = v19;
    sub_22F40A694(v19, a2, v23, a3, a4, v20, a6, v21, a7, a8);
    v22 = *(_DWORD *)(a1 + 16);
    if (v22 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22) = v17;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v24[0] != v25)
    free(v24[0]);
  return v17 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F3694D0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16[2];
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  sub_22F4088EC((uint64_t)v16, a1, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v7 = v10 & 0xFFFFFFFFFFFFFFF0;
    if (v9 >= 0x10)
      v13 = v9;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v13;
    v14 = v12 | *(_DWORD *)(v10 + 16) & 0xFFF80000 | 0x36;
    *(_QWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 32) = a2;
    *(_QWORD *)(v10 + 40) = a3;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v16[0] != v17)
    free(v16[0]);
  return v7;
}

uint64_t sub_22F369668(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(void);
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v4 = a2;
  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  v11 = a3;
  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((v7 && *(_BYTE *)(v7 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v7 = sub_22F10CF48(v7)) != 0)
    && ((*(_DWORD *)(v7 + 40) ^ a3) & 0x1F) != 0
    && !sub_22F409948(*v6))
  {
    v8 = operator new(0x28uLL);
    *v8 = &off_24FABA428;
    v8[1] = v14;
    v8[2] = a1;
    v8[3] = &v12;
    v8[4] = &v11;
    v15 = v8;
    v13 = v4;
    v4 = sub_22EF78140((uint64_t)v8, &v13);
    if (v15 == v14)
    {
      v9 = (void (**)(void))(v14[0] + 32);
      goto LABEL_8;
    }
    if (v15)
    {
      v9 = (void (**)(void))(*v15 + 40);
LABEL_8:
      (*v9)();
    }
  }
  return v4;
}

unint64_t sub_22F369798(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v16;
  void *v17[2];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  sub_22F36C75C((uint64_t)v17, a2, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v12 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v9 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8) | a4 & 7;
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v11 = *(_DWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v12 = v10 & 0xFFFFFFFFFFFFFFF0;
    if (v9 >= 0x10)
      v13 = v9;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = a3;
    *(_QWORD *)(v10 + 40) = a4;
    *(_DWORD *)(v10 + 16) = v11 | (a2 << 19) | 7;
    v14 = *(_DWORD *)(a1 + 16);
    if (v14 >= *(_DWORD *)(a1 + 20))
    {
      v16 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v16;
      v14 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = v10;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v12;
}

unint64_t sub_22F369930(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18[2];
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v18[0] = v19;
  v18[1] = (void *)0x2000000000;
  sub_22F36C024((uint64_t)v18, a2, *a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 32) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
      || (v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8), (v9 & 8) != 0)
      && (*(_WORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
    {
      v17 = sub_22EF63D48(a1, a2);
      v10 = sub_22F369930(a1, v17, a3);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    else
    {
      v10 = 0;
    }
    v11 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v12 = v11;
    v13 = *a3;
    v14 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1800;
    v7 = v11 & 0xFFFFFFFFFFFFFFF0;
    if (v10 >= 0x10)
      v15 = v10;
    else
      v15 = v11 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v11 = v11;
    *(_QWORD *)(v11 + 8) = v15;
    *(_DWORD *)(v11 + 16) = v14 | *(_DWORD *)(v11 + 16) & 0xFFF80000 | 0x19;
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 16) & 0xFFFFFFFF0007FFFFLL | (v13 << 19);
    *(_QWORD *)(v11 + 24) = a2;
    *(_QWORD *)(v11 + 32) = 0;
    v16 = *(_DWORD *)(a1 + 16);
    if (v16 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = v12;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v18[0] != v19)
    free(v18[0]);
  return v7;
}

uint64_t sub_22F369B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  char v10;
  uint64_t result;
  __int128 v12[5];

  v5 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 112) + 104), *(_QWORD *)(a2 + 112));
  do
  {
    v6 = v5;
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
      v8 = *(_BYTE *)(v7 + 16) == 26;
    else
      v8 = 0;
    if (!v8)
      v7 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0));
    sub_22E4913B4(v7, (uint64_t)v12);
    v9 = sub_22EF63D8C(a1, a3, (uint64_t *)(v7 + 40), (unsigned __int16)(*(_QWORD *)(v7 + 16) >> 38), v12, 0);
    v10 = *(_BYTE *)(v6 + 104);
    *(_QWORD *)(v6 + 48) = v9;
    if ((v10 & 3) != 0)
      break;
    v5 = sub_22E3CD31C((uint64_t *)(v6 + 104), v6);
  }
  while (v5);
  result = *(_QWORD *)(a1 + 16056);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 72))(result, v6, a3);
  return result;
}

unint64_t sub_22F369C08(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
  v8 = sub_22E3CD3D4(a1 + 2032, 40, 4);
  v9 = v8;
  v10 = *(_DWORD *)(*(_QWORD *)v6 + 16) & 0x1F00;
  v11 = v8 & 0xFFFFFFFFFFFFFFF0;
  if (v7 >= 0x10)
    v12 = v7;
  else
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v8 = v8;
  *(_QWORD *)(v8 + 8) = v12;
  *(_DWORD *)(v8 + 16) = v10 | *(_DWORD *)(v8 + 16) & 0xFFF80000 | 0x1C;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v13) = v9;
  ++*(_DWORD *)(a1 + 16);
  return v11;
}

unint64_t sub_22F369CEC(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  __int128 v17[5];
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v4)
    v6 = v5 == 26;
  else
    v6 = 0;
  if (v6)
    goto LABEL_7;
  v7 = a2;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
  {
LABEL_15:
    if (v5 != 25)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 25)
        return v7;
      v15 = sub_22F10CF48(v4);
      if (!v15)
        return v7;
      v4 = v15;
    }
    v16 = sub_22EF5F130(a1, *(_QWORD *)(v4 + 24));
    LOWORD(v18) = *(_DWORD *)(v4 + 16) >> 19;
    return sub_22F369930(a1, v16, (unsigned __int16 *)&v18);
  }
  v4 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (!v4)
  {
    v4 = *(_QWORD *)v3;
    v5 = *(unsigned __int8 *)(*(_QWORD *)v3 + 16);
    goto LABEL_15;
  }
LABEL_7:
  v8 = sub_22EF5F130(a1, *(_QWORD *)(v4 + 24));
  v9 = (_BYTE *)(v4 + 40 + 8 * (unsigned __int16)(*(_QWORD *)(v4 + 16) >> 38));
  v18 = v20;
  v19 = 0x1000000000;
  sub_22E3D0148((uint64_t)&v18, (_BYTE *)(v4 + 40), v9);
  v10 = (uint64_t *)v18;
  v11 = 0;
  if ((_DWORD)v19)
  {
    v12 = 8 * v19;
    do
    {
      v13 = sub_22EF5F130(a1, *(uint64_t *)((char *)v10 + v11));
      v10 = (uint64_t *)v18;
      *(_QWORD *)((char *)v18 + v11) = v13;
      v11 += 8;
    }
    while (v12 != v11);
    v11 = v19;
  }
  sub_22E4913B4(v4, (uint64_t)v17);
  v7 = sub_22EF63D8C(a1, v8, v10, v11, v17, 0);
  if (v18 != v20)
    free(v18);
  return v7;
}

BOOL sub_22F369EB8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  if ((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7) == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7))
    return 1;
  v6 = sub_22F369CEC(a1, a2);
  v7 = sub_22F369CEC(a1, a3);
  return (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) | v6 & 7) == (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) | v7 & 7);
}

unint64_t sub_22F369F4C(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v13, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v5 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v7 = 0;
    }
    else
    {
      v7 = sub_22F369F4C(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v8 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v9 = v8;
    v10 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v5 = v8 & 0xFFFFFFFFFFFFFFF0;
    if (v7 >= 0x10)
      v11 = v7;
    else
      v11 = v8 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v8 = v8;
    *(_QWORD *)(v8 + 8) = v11;
    *(_DWORD *)(v8 + 16) = v10 | *(_DWORD *)(v8 + 16) & 0xFFF80000 | 0xC;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = a2;
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v9;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v13[0] != v14)
    free(v13[0]);
  return v5;
}

unint64_t sub_22F36A110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16[2];
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v16, a2);
  sub_22E3CF554((uint64_t)v16, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
    llvm::FoldingSetBase::FindNodeOrInsertPos();
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v7 = v10 & 0xFFFFFFFFFFFFFFF0;
    if (v9 >= 0x10)
      v13 = v9;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v13;
    v14 = *(_DWORD *)(v10 + 16) & 0xFFF80000 | v12;
    *(_QWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 32) = a2;
    *(_QWORD *)(v10 + 40) = a3;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v16[0] != v17)
    free(v16[0]);
  return v7;
}

unint64_t sub_22F36A2BC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t NodeOrInsertPos;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17[2];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v4 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3)
  {
    v5 = 0;
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16);
  }
  else
  {
    v5 = sub_22EF5F824(a1, a2);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if ((v6 - 25) <= 1)
    v5 = sub_22EF5B848(a1, a2, 0);
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v17, a2);
  sub_22E3CF554((uint64_t)v17, v5);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v8 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) | v5 & 7;
    llvm::FoldingSetBase::FindNodeOrInsertPos();
    v11 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v12 = *(_DWORD *)(*(_QWORD *)v4 + 16) & 0x1F00;
    v8 = v11 & 0xFFFFFFFFFFFFFFF0;
    if (v10 >= 0x10)
      v13 = v10;
    else
      v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v11 = v11;
    *(_QWORD *)(v11 + 8) = v13;
    v14 = v12 | *(_DWORD *)(v11 + 16) & 0xFFF80000 | 1;
    *(_QWORD *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 16) = v14;
    *(_QWORD *)(v11 + 32) = a2;
    *(_QWORD *)(v11 + 40) = v5;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      v16 = v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v16;
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v8;
}

unint64_t sub_22F36A4F8(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v13, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v5 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v7 = 0;
    }
    else
    {
      v7 = sub_22F36A4F8(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v8 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v9 = v8;
    v10 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v5 = v8 & 0xFFFFFFFFFFFFFFF0;
    if (v7 >= 0x10)
      v11 = v7;
    else
      v11 = v8 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v8 = v8;
    *(_QWORD *)(v8 + 8) = v11;
    *(_DWORD *)(v8 + 16) = v10 | *(_DWORD *)(v8 + 16) & 0xFFF80000 | 0xA;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = a2;
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v9;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v13[0] != v14)
    free(v13[0]);
  return v5;
}

unint64_t sub_22F36A6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  void *v18[2];
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v18[0] = v19;
  v18[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v18, a2);
  sub_22E3CF554((uint64_t)v18, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_3;
  }
  if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) != (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
  {
    v9 = *(_QWORD *)(a3 + 8);
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(a3 + 8);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_16:
    v10 = sub_22F36A6C0(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
    llvm::FoldingSetBase::FindNodeOrInsertPos();
    goto LABEL_9;
  }
  v10 = 0;
LABEL_9:
  v11 = sub_22E3CD3D4(a1 + 2032, 48, 4);
  v12 = v11;
  v13 = *(_DWORD *)(a3 + 16) & 0x1700;
  v14 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
  v7 = v11 & 0xFFFFFFFFFFFFFFF0;
  if (v10 >= 0x10)
    v15 = v10;
  else
    v15 = v11 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v11 = v11;
  *(_QWORD *)(v11 + 8) = v15;
  v16 = *(_DWORD *)(v11 + 16) & 0xFFF80000;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 16) = v13 | v16 | v14 | 0x1F;
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(v11 + 40) = a3;
  v17 = *(_DWORD *)(a1 + 16);
  if (v17 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17) = v12;
  ++*(_DWORD *)(a1 + 16);
  llvm::FoldingSetBase::InsertNode();
LABEL_3:
  if (v18[0] != v19)
    free(v18[0]);
  return v7;
}

unint64_t sub_22F36A8C0(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v13, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v5 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v7 = 0;
    }
    else
    {
      v7 = sub_22F36A8C0(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v8 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v9 = v8;
    v10 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v5 = v8 & 0xFFFFFFFFFFFFFFF0;
    if (v7 >= 0x10)
      v11 = v7;
    else
      v11 = v8 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v8 = v8;
    *(_QWORD *)(v8 + 8) = v11;
    *(_DWORD *)(v8 + 16) = v10 | *(_DWORD *)(v8 + 16) & 0xFFF80000 | 6;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = a2;
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v9;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v13[0] != v14)
    free(v13[0]);
  return v5;
}

unint64_t sub_22F36AA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20[2];
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v20[0] = v21;
  v20[1] = (void *)0x2000000000;
  sub_22F36AC68((uint64_t)v20, a2, a3, a4, 0);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v14 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0)
         && (a2 & 0xF) == 0)
  {
    v16 = sub_22E3CD3D4(a1 + 2032, 56, 4);
    sub_22F40A6A0(v16, a2, 0, a3, a4, 0, 0, 0);
    llvm::FoldingSetBase::InsertNode();
    v17 = *(_DWORD *)(a1 + 16);
    if (v17 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v17) = v16;
    ++*(_DWORD *)(a1 + 16);
    v14 = v16 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    v11 = v10 | a2 & 7;
    if ((v10 & 8) != 0)
    {
      v18 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF0);
      v19 = v11 & 7;
      v11 = *v18;
      v12 = v18[3] | v19;
    }
    else
    {
      v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 7 | a2 & 7;
    }
    v13 = sub_22F36AA84(a1, v11 & 0xFFFFFFFFFFFFFFF0, a3, a4);
    v14 = sub_22EA28548(a1, v13, v12);
  }
  if (v20[0] != v21)
    free(v20[0]);
  return v14;
}

uint64_t sub_22F36AC68(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  result = sub_22E3CF554(a1, a2);
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v10) = a3;
  v11 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = a4;
  ++*(_DWORD *)(a1 + 8);
  if (a5)
    return sub_22E3CF554(a1, a5);
  return result;
}

void sub_22F36AD2C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F36AD68()
{
  int64x2_t *v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  int64x2_t v4;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 15088) + 16))(*(_QWORD *)(v1 + 15088), 8, 1);
  result = sub_22EF5B0AC(v1, v2);
  v4 = vdupq_n_s64(0x100000010uLL);
  v4.i64[0] = result;
  *v0 = v4;
  v0[1].i32[0] = 1;
  return result;
}

unint64_t sub_22F36B7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22EF6356C((uint64_t)v13, a2, a3, 55, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v9 = NodeOrInsertPos - 24;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v11 = 0;
    }
    else
    {
      v11 = sub_22F36B7E4(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, a3, a4);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v9 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    sub_22F408A90(v9, a2, a3, v11, a4);
    llvm::FoldingSetBase::InsertNode();
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v9;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v13[0] != v14)
    free(v13[0]);
  return v9 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F36B994(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t NodeOrInsertPos;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  _QWORD v25[17];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v24[0] = v25;
  v24[1] = (void *)0x2000000000;
  v10 = a2 & 0xFFFFFFFFFFFFFFF0;
  v11 = a2 & 7;
  sub_22F4087D4((uint64_t)v24, a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | v11, a3, a5);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v13 = NodeOrInsertPos - 24;
    v14 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    v15 = v14;
    v16 = v13 & 0xFFFFFFFFFFFFFFF0;
    v17 = a4;
    v18 = a1;
    v19 = a2;
LABEL_3:
    sub_22F4087CC(v14, v18, v19, v16, a3, v17, a5);
    goto LABEL_4;
  }
  v22 = *(_QWORD *)(v10 + 8) | v11;
  if (v22 != a2)
  {
    v23 = sub_22F36B994(a1, v22, a3, 0, a5);
    v14 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    v15 = v14;
    v17 = a4;
    v18 = a1;
    v19 = a2;
    v16 = v23;
    goto LABEL_3;
  }
  v15 = sub_22E3CD3D4(a1 + 2032, 64, 4);
  sub_22F4087CC(v15, a1, a2, 0, a3, a4, a5);
  llvm::FoldingSetBase::FindNodeOrInsertPos();
  llvm::FoldingSetBase::InsertNode();
LABEL_4:
  v20 = *(_DWORD *)(a1 + 16);
  if (v20 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20) = v15;
  ++*(_DWORD *)(a1 + 16);
  if (v24[0] != v25)
    free(v24[0]);
  return v15 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F36BBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22F36BD54((uint64_t)v13, a2, a3, a4, 29);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v9 = NodeOrInsertPos - 24;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v11 = 0;
    }
    else
    {
      v11 = sub_22F36BBA8(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, a3, a4);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v9 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    sub_22F4089C8(v9, a2, a3, a4, v11);
    llvm::FoldingSetBase::InsertNode();
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v9;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v13[0] != v14)
    free(v13[0]);
  return v9 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F36BD54(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = sub_22E3CF554(a1, a2);
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v10) = a3;
  v11 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v12) = a4;
  v13 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  if (v14 >= v13)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v14) = a5;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_22F36BE34(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  uint64_t NodeOrInsertPos;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v14;
  void *v15[2];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
  v15[0] = v16;
  v15[1] = (void *)0x2000000000;
  sub_22F4088EC((uint64_t)v15, a1, v8, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v10 = NodeOrInsertPos - 24;
  }
  else
  {
    v10 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    sub_22F4088E4(v10, a1, v8, 0, a3, a4);
    llvm::FoldingSetBase::InsertNode();
    v14 = *(_DWORD *)(a1 + 16);
    if (v14 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = v10;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v8 == a2 && *(unsigned __int8 **)(v10 + 40) == a3)
  {
    v11 = v10;
  }
  else
  {
    v11 = sub_22E3CD3D4(a1 + 2032, 64, 4);
    sub_22F4088E4(v11, a1, a2, v10 & 0xFFFFFFFFFFFFFFF0, a3, a4);
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v11;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v15[0] != v16)
    free(v15[0]);
  return v11 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F36C024(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned int v6;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = a3;
  ++*(_DWORD *)(a1 + 8);
  return sub_22E3CF554(a1, a2);
}

unint64_t sub_22F36C098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16[2];
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  sub_22F36C26C((uint64_t)v16, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v9 = 0;
    }
    else
    {
      v9 = sub_22F36C098(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, a3);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v7 = v10 & 0xFFFFFFFFFFFFFFF0;
    if (v9 >= 0x10)
      v13 = v9;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v13;
    v14 = v12 | *(_DWORD *)(v10 + 16) & 0xFFF80000 | 0x26;
    *(_QWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 32) = a2;
    *(_BYTE *)(v10 + 40) = a3;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v16[0] != v17)
    free(v16[0]);
  return v7;
}

uint64_t sub_22F36C26C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v6;

  result = sub_22E3CF554(a1, a2);
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = a3;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_22F36C2CC(uint64_t a1, uint64_t a2)
{
  return sub_22F36C098(a1, a2, 1);
}

unint64_t sub_22F36C2D4(uint64_t a1, uint64_t a2)
{
  return sub_22F36C098(a1, a2, 0);
}

unint64_t sub_22F36C2DC(uint64_t a1, int a2, int a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  unsigned int v9;
  void *v10[2];
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  v10[0] = v11;
  v10[1] = (void *)0x2000000000;
  sub_22F36C418((uint64_t)v10, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 24;
  }
  else
  {
    v7 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    sub_22F408AD4(v7, a2, a3);
    llvm::FoldingSetBase::InsertNode();
    v9 = *(_DWORD *)(a1 + 16);
    if (v9 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) = v7;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v10[0] != v11)
    free(v10[0]);
  return v7 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F36C418(uint64_t result, int a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = a2;
  v7 = *(_DWORD *)(v5 + 12);
  v8 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v8;
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v8) = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

unint64_t sub_22F36C4B8(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  unsigned int v9;
  void *v10[2];
  _QWORD v11[17];

  v11[16] = *MEMORY[0x24BDAC8D0];
  v10[0] = v11;
  v10[1] = (void *)0x2000000000;
  sub_22F408B6C((uint64_t)v10, a1, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 24;
  }
  else
  {
    v7 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    sub_22F408B08(v7, a1, a2, (unint64_t)a3);
    llvm::FoldingSetBase::InsertNode();
    v9 = *(_DWORD *)(a1 + 16);
    if (v9 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) = v7;
    ++*(_DWORD *)(a1 + 16);
  }
  if (v10[0] != v11)
    free(v10[0]);
  return v7 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F36C604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v11, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 24;
  }
  else
  {
    v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
    v7 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    sub_22F40A714(v7, a2, a3, v9);
    v10 = *(_DWORD *)(a1 + 16);
    if (v10 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = v7;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v11[0] != v12)
    free(v11[0]);
  return v7 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F36C75C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  int v10;

  v5 = a3;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v10 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v10;
    v5 = a3;
    v7 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = a2;
  ++*(_DWORD *)(a1 + 8);
  sub_22E3CF554(a1, v5);
  return sub_22E3CF554(a1, a4);
}

unint64_t sub_22F36C7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16[2];
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v16[0] = v17;
  v16[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v16, a3);
  sub_22E3CF554((uint64_t)v16, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v7 = v10 & 0xFFFFFFFFFFFFFFF0;
    if (v9 >= 0x10)
      v13 = v9;
    else
      v13 = v10 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v13;
    v14 = v12 | *(_DWORD *)(v10 + 16) & 0xFFF80000 | 8;
    *(_QWORD *)(v10 + 24) = 0;
    *(_DWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 32) = a3;
    *(_QWORD *)(v10 + 40) = a2;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v11;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v16[0] != v17)
    free(v16[0]);
  return v7;
}

unint64_t sub_22F36C984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  sub_22F1143F4((uint64_t)v11, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 24;
  }
  else
  {
    if (*(_QWORD *)(a2 + 8) == (a2 & 0xFFFFFFFFFFFFFFF0))
    {
      v9 = 0;
    }
    else
    {
      v9 = sub_22F36C984(a1, *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), a3);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v7 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    sub_22F40A81C(v7, a2, v9, a3);
    v10 = *(_DWORD *)(a1 + 16);
    if (v10 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = v7;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v11[0] != v12)
    free(v11[0]);
  return v7 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F36CB1C(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  void *v20;
  uint64_t v21;
  _QWORD v22[49];

  v22[48] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x1000000000;
  v9 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = 32 * v9;
    do
    {
      v13 = sub_22E4EF088((uint64_t)&v20, *(_QWORD *)a5 + v11, 1);
      v14 = (char *)v20 + 24 * v21;
      v15 = *(_OWORD *)v13;
      *((_QWORD *)v14 + 2) = *(_QWORD *)(v13 + 16);
      *(_OWORD *)v14 = v15;
      v16 = (v21 + 1);
      LODWORD(v21) = v21 + 1;
      v11 += 32;
    }
    while (v12 != v11);
    v17 = v20;
  }
  else
  {
    v16 = 0;
    v17 = v22;
  }
  v18 = sub_22EF65F64(a1, a2, a3, a4, (uint64_t)v17, v16);
  if (v20 != v22)
    free(v20);
  return v18;
}

unint64_t sub_22F36CC4C(uint64_t a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v13, a2);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v8 = (NodeOrInsertPos - 24) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    if (*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) == (*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0))
    {
      v5 = 0;
    }
    else
    {
      v5 = sub_22F36CC4C(a1, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7);
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    v6 = sub_22E3CD3D4(a1 + 2032, 40, 4);
    v7 = *(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x1F00;
    v8 = v6 & 0xFFFFFFFFFFFFFFF0;
    if (v5 >= 0x10)
      v9 = v5;
    else
      v9 = v6 & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)v6 = v6;
    *(_QWORD *)(v6 + 8) = v9;
    *(_DWORD *)(v6 + 16) = v7 | *(_DWORD *)(v6 + 16) & 0xFFF80000 | 0x20;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = a2;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10 >= *(_DWORD *)(a1 + 20))
    {
      v12 = v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = v12;
      v10 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = v6;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v13[0] != v14)
    free(v13[0]);
  return v8;
}

uint64_t sub_22F36CE1C(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 35 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return sub_22F409D44(v1);
}

unint64_t sub_22F36CE50(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  void *v18[2];
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v18[0] = v19;
  v18[1] = (void *)0x2000000000;
  sub_22F40AA38((uint64_t)v18, a2, *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8)), a3, a4);
  v17 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v9 = NodeOrInsertPos - 24;
  }
  else
  {
    v11 = *(_QWORD *)((*(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                                 + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0)
                    + 8);
    v12 = *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 7;
    v13 = v12 | v11;
    if (a4)
    {
      v14 = sub_22EF66DE0(a1, v12 | v11, a3, a4, &v16, 1);
      v13 = v14 & 7 | *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    v9 = sub_22E3CD3D4(a1 + 2032, (8 * a4 + 48), 4);
    sub_22F10E394(v9, a2, v13, a3, a4);
    v15 = *(_DWORD *)(a1 + 16);
    if (v15 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = v9;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v18[0] != v19)
    free(v18[0]);
  return v9 & 0xFFFFFFFFFFFFFFF0;
}

void sub_22F36D01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(a2 + 80)) & 8));
  v6 = sub_22F11598C(v5);
  v7 = sub_22E3CD3D4(a1 + 2032, v6 + 8, 3);
  *(_QWORD *)v7 = v5;
  sub_22F115E94(a1, v5, (_QWORD *)(v7 + 8), 0);
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(a3 + 80) & 3 | v7 & 0xFFFFFFFFFFFFFFFBLL;
  v8 = *(_QWORD *)(a3 + 48);
  if (v8)
  {
    v9 = v11;
    v10 = 0x800000000;
    sub_22F2633B0((uint64_t)&v9, (_BYTE *)(v8 + 48), (_BYTE *)(v8 + 48 + 8 * (*(_BYTE *)(v8 + 32) & 0x3F)));
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(sub_22F36CE50(a1, a3, (uint64_t *)v9, v10) & 0xFFFFFFFFFFFFFFF0);
    if (v9 != v11)
      free(v9);
  }
}

unint64_t sub_22F36D148(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t result;
  uint64_t *v5;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;

  v3 = a2[13];
  if (v3)
    return v3 & 0xFFFFFFFFFFFFFFF0;
  v5 = a2;
  if (a3)
  {
    a2[13] = *(_QWORD *)(a3 + 104);
    v3 = *(_QWORD *)(a3 + 104);
    return v3 & 0xFFFFFFFFFFFFFFF0;
  }
  v7 = a2[15];
  if (!v7)
  {
    sub_22E3CD31C((uint64_t *)(a2[12] + 88), a2[12]);
    v7 = v5[15];
  }
  if (v7 >= 8)
    v8 = *(uint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
  else
    v8 = 0;
  if (v8)
    v5 = v8;
  v9 = sub_22E3CD3D4(a1 + 2032, 48, 4);
  result = v9 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v9 = v9;
  *(_QWORD *)(v9 + 8) = v9 & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(v9 + 16) & 0xFFF80000 | 0x22;
  *(_QWORD *)(v9 + 16) &= 0xFFFFFFFE0007FFFFLL;
  *(_QWORD *)(v9 + 24) = v9 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v5;
  v5[13] = v9;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10 >= *(_DWORD *)(a1 + 20))
  {
    v12 = v9 & 0xFFFFFFFFFFFFFFF0;
    v11 = v9;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v11;
    result = v12;
    v10 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = v9;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

unint64_t sub_22F36D25C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;

  v4 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7;
  v6 = sub_22E3CD3D4(a1 + 2032, 32, 4);
  v7 = v6;
  v8 = *(_DWORD *)(*(_QWORD *)v4 + 16) & 0x1F00;
  v9 = v6 & 0xFFFFFFFFFFFFFFF0;
  if (v5 >= 0x10)
    v10 = v5;
  else
    v10 = v6 & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)v6 = v6;
  *(_QWORD *)(v6 + 8) = v10;
  *(_DWORD *)(v6 + 16) = v8 | *(_DWORD *)(v6 + 16) & 0xFFF80000 | 0x31;
  *(_QWORD *)(v6 + 24) = a2;
  v11 = *(_DWORD *)(a1 + 16);
  if (v11 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = v7;
  ++*(_DWORD *)(a1 + 16);
  return v9;
}

unint64_t sub_22F36D328(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t NodeOrInsertPos;
  uint64_t v14;
  void *v15[2];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    v15[0] = v16;
    v15[1] = (void *)0x2000000000;
    sub_22F36C26C((uint64_t)v15, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7, a4);
    NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
    if (NodeOrInsertPos)
    {
      v14 = NodeOrInsertPos - 48;
    }
    else
    {
      v14 = sub_22E3CD3D4(a1 + 2032, 56, 4);
      sub_22F40A7AC(v14, a1, *(_QWORD *)(v7 + 8) | a2 & 7, a4);
      llvm::FoldingSetBase::InsertNode();
    }
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    sub_22F40A768(v10, a2, 0, a4, v14 & 0xFFFFFFFFFFFFFFF0);
    if (v15[0] != v16)
      free(v15[0]);
  }
  else
  {
    v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
    v10 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    sub_22F40A768(v10, a2, a3, a4, v9);
  }
  v11 = *(_DWORD *)(a1 + 16);
  if (v11 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = v10;
  ++*(_DWORD *)(a1 + 16);
  return v10 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F36D4FC(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t NodeOrInsertPos;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  void *v13[2];
  _BYTE v14[128];
  void *v15[2];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15[0] = v16;
  v15[1] = (void *)0x2000000000;
  sub_22F36D688((uint64_t)v15, a2, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v9 = NodeOrInsertPos - 32;
  }
  else
  {
    v9 = sub_22E3CD3D4(a1 + 2032, 48, 4);
    v11 = sub_22F36FD7C(v9, a2, a3, a4);
    v13[0] = v14;
    v13[1] = (void *)0x2000000000;
    sub_22F36D688((uint64_t)v13, *(_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 24), (*(_DWORD *)(v11 + 16) & 0x400) != 0);
    v12 = *(_DWORD *)(a1 + 16);
    if (v12 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = v9;
    ++*(_DWORD *)(a1 + 16);
    llvm::FoldingSetBase::InsertNode();
    if (v13[0] != v14)
      free(v13[0]);
  }
  if (v15[0] != v16)
    free(v15[0]);
  return v9 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F36D688(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t result;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v10 = a2;
  sub_22E3CF554(a1, a2);
  if (a3 >= 0x10)
    a3 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
  result = sub_22E3CF554(a1, a3);
  if ((a4 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    result = sub_22F0F0B38(&v10);
    v8 = result;
  }
  v9 = *(_DWORD *)(a1 + 8);
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = v8;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_22F36D73C(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;

  result = *(_QWORD *)(a1 + 18576);
  if (result <= 0xF)
  {
    v3 = sub_22EF67C08(a1);
    result = sub_22EF5FB8C(a1, v3);
    *(_QWORD *)(a1 + 18576) = result;
  }
  return result;
}

uint64_t sub_22F36D77C(uint64_t a1)
{
  return sub_22EF5B0AC(a1, dword_22F49EF28[*(int *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 112) - 4]);
}

uint64_t sub_22F36D7A4(uint64_t a1)
{
  return sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 116));
}

uint64_t sub_22F36D7BC(uint64_t a1)
{
  return sub_22EF5B0AC(a1, dword_22F49EF64[*(int *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 116) - 1]);
}

uint64_t sub_22F36D7E4(uint64_t a1)
{
  return sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 124));
}

unint64_t sub_22F36D7FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_22EF5B0AC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 124));
  return sub_22EF67D20(a1, v2);
}

uint64_t sub_22F36D838(uint64_t a1)
{
  return sub_22EF5B0AC(a1, dword_22F49EF64[*(int *)(*(_QWORD *)(a1 + 15088) + *(_QWORD *)(**(_QWORD **)(a1 + 15088) - 24) + 120) - 1]);
}

unint64_t sub_22F36D860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  sub_22F401F94((uint64_t)v11, a1, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 8;
  }
  else
  {
    v7 = sub_22E3CD3D4(a1 + 2032, 32, 3);
    v9 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)v7 = (4 * *(_DWORD *)(a3 + 4)) | 3;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = a2;
    *(_QWORD *)(v7 + 24) = v9;
    llvm::FoldingSetBase::InsertNode();
  }
  sub_22F401FD4(&v10, v7);
  if (v11[0] != v12)
    free(v11[0]);
  return v10;
}

uint64_t sub_22F36D988(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (a2 < 0x10)
    return 0;
  while (1)
  {
    v4 = a2 & 0xFFFFFFFFFFFFFFF0;
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v5 & 8) != 0)
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      if ((v6 & 0x1C0) != 0)
        return (v6 >> 6) & 7;
    }
    result = *(_QWORD *)v4;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
    {
      v7 = *(unsigned __int8 *)(result + 16);
      if (v7 == 39)
      {
LABEL_8:
        a2 = *(_QWORD *)(result + 32);
        goto LABEL_9;
      }
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        result = sub_22F10CF48(result);
        if (result)
          goto LABEL_8;
        result = *(_QWORD *)v4;
        v7 = *(_DWORD *)(*(_QWORD *)v4 + 16);
      }
      if ((v7 & 0xFE) != 0x28)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          return 0;
        result = sub_22F10CF48(result);
        if (!result)
          return result;
      }
      if ((*(_BYTE *)(result + 18) & 0x10) != 0)
      {
        do
        {
          result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
          if (result)
          {
            v8 = *(_DWORD *)(result + 16);
            if ((v8 & 0xFE) == 0x28)
              continue;
          }
          result = sub_22F10CF48(result);
          v8 = *(_DWORD *)(result + 16);
        }
        while ((v8 & 0x100000) != 0);
      }
      goto LABEL_8;
    }
    a2 = sub_22EF5BA38(a1, a2);
LABEL_9:
    if (a2 <= 0xF)
      return 0;
  }
}

uint64_t sub_22F36DAB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1392);
  if (!result)
  {
    sub_22EF6A7F8(a1);
    return *(_QWORD *)(a1 + 1392);
  }
  return result;
}

unint64_t sub_22F36DAE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_22EF6A7F8(a1);
  return sub_22EF64680(a1, v2, 0);
}

unint64_t sub_22F36DB14(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 1408);
  if (result <= 0xF)
  {
    v3 = sub_22F368234(a1, "objc_super", 0xAuLL, 0);
    v4 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
    sub_22EFCCFA0(v4 + 40, v3);
    v5 = *(_QWORD *)(v3 + 48);
    if (v5)
      result = v5 & 0xFFFFFFFFFFFFFFF0;
    else
      result = sub_22EF6462C(a1, v3);
    *(_QWORD *)(a1 + 1408) = result;
  }
  return result;
}

uint64_t sub_22F36DB98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v3 || *(_BYTE *)(v3 + 16) != 50)
    v3 = sub_22F10CF48(v3);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 1400) = v4;
  result = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 80) & 0xFFFFFFFFFFFFFFF8)
                                                                                   + ((2
                                                                                     * *(_QWORD *)(v4 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 24));
  *(_QWORD *)(a1 + 1392) = result;
  return result;
}

unint64_t sub_22F36DC0C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1464);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    if (!v3)
      return sub_22EF6462C(a1, v2);
  }
  else
  {
    v5 = (_QWORD *)sub_22F368234(a1, "__block_descriptor", 0x12uLL, 0);
    sub_22EFC3340((unint64_t)v5);
    v6 = 0;
    v13[0] = *(_QWORD *)(a1 + 16536);
    v13[1] = v13[0];
    if (v5)
      v7 = (uint64_t)(v5 + 8);
    else
      v7 = 0;
    v8 = 1;
    do
    {
      v9 = v8;
      v10 = strlen(off_24FABA370[v6]);
      v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), off_24FABA370[v6], v10);
      v12 = sub_22EFC2D88(a1, v7, 0, 0, v11, v13[v6], 0, 0, 0, 0);
      *(_DWORD *)(v12 + 28) &= 0xFFFF9FFF;
      sub_22EFCCFA0((uint64_t)(v5 + 8), v12);
      v8 = 0;
      v6 = 1;
    }
    while ((v9 & 1) != 0);
    (*(void (**)(_QWORD *))(*v5 + 104))(v5);
    *(_QWORD *)(a1 + 1464) = v5;
    v3 = v5[6];
    if (!v3)
      return sub_22EF6462C(a1, (unint64_t)v5);
  }
  return v3 & 0xFFFFFFFFFFFFFFF0;
}

unint64_t sub_22F36DDB4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1472);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 48);
    if (!v3)
      return sub_22EF6462C(a1, v2);
  }
  else
  {
    v5 = (_QWORD *)sub_22F368234(a1, "__block_descriptor_withcopydispose", 0x22uLL, 0);
    sub_22EFC3340((unint64_t)v5);
    v11[0] = *(_QWORD *)(a1 + 16536);
    v11[1] = v11[0];
    v11[2] = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16816), 0);
    v6 = 0;
    v11[3] = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16816), 0);
    if (v5)
      v7 = (uint64_t)(v5 + 8);
    else
      v7 = 0;
    do
    {
      v8 = strlen(off_24FABA380[v6]);
      v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), off_24FABA380[v6], v8);
      v10 = sub_22EFC2D88(a1, v7, 0, 0, v9, v11[v6], 0, 0, 0, 0);
      *(_DWORD *)(v10 + 28) &= 0xFFFF9FFF;
      sub_22EFCCFA0((uint64_t)(v5 + 8), v10);
      ++v6;
    }
    while (v6 != 4);
    (*(void (**)(_QWORD *))(*v5 + 104))(v5);
    *(_QWORD *)(a1 + 1472) = v5;
    v3 = v5[6];
    if (!v3)
      return sub_22EF6462C(a1, (unint64_t)v5);
  }
  return v3 & 0xFFFFFFFFFFFFFFF0;
}

uint64_t sub_22F36DF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 15088);
  v3 = sub_22EF5CEF4(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 808))(v2, v3);
}

uint64_t sub_22F36DFB0(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v11;

  v4 = *(_QWORD *)(a1 + 2000);
  if ((*(_BYTE *)(v4 + 1) & 0x40) == 0 || (*(_BYTE *)(v4 + 246) & 6) != 0)
    return 0;
  *a4 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v6 + 16) == 45)
  {
    v7 = 0;
    *a4 = 1;
  }
  else
  {
    v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v8 & 8) != 0)
    {
      v11 = (*(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
      *a3 = v11;
      if (v11)
        return 1;
    }
    else
    {
      *a3 = 0;
    }
    v9 = *(unsigned __int8 *)(v6 + 16);
    v7 = v9 == 32 || v9 == 10;
  }
  *a3 = v7;
  return 1;
}

uint64_t sub_22F36E044(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = *(_QWORD *)(a1 + 1424);
  if (!result)
  {
    v3 = sub_22F36E1B8(a1);
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
      v5 = v4 & 0xFFFFFFFFFFFFFFF0;
    else
      v5 = sub_22EF6462C(a1, v3);
    result = sub_22EF59578(a1, v5, "instancetype", 0xCuLL);
    *(_QWORD *)(a1 + 1424) = result;
  }
  return result;
}

void sub_22F36E0AC(uint64_t a1, char a2, uint64_t a3, std::string *this)
{
  sub_22F36E11C(a1, a2, this);
  sub_22EF6B358(a1, a3);
}

void sub_22F36E11C(int a1, char a2, std::string *this)
{
  if ((a2 & 1) != 0)
    std::string::push_back(this, 110);
  if ((a2 & 2) != 0)
    std::string::push_back(this, 78);
  if ((a2 & 4) != 0)
    std::string::push_back(this, 111);
  if ((a2 & 8) != 0)
    std::string::push_back(this, 79);
  if ((a2 & 0x10) != 0)
    std::string::push_back(this, 82);
  if ((a2 & 0x20) != 0)
    std::string::push_back(this, 86);
}

uint64_t sub_22F36E1B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  result = *(_QWORD *)(a1 + 1280);
  if (!result)
  {
    v3 = sub_22EF667E8(a1, *(_QWORD *)(a1 + 16888), 0, 0, 0, 0, 0);
    v4 = sub_22F36CC4C(a1, v3);
    result = sub_22EF59578(a1, v4, "id", 2uLL);
    *(_QWORD *)(a1 + 1280) = result;
  }
  return result;
}

uint64_t sub_22F36E228(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = *(_QWORD *)(a1 + 1288);
  if (!result)
  {
    v3 = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16904), 0);
    result = sub_22EF59578(a1, v3, "SEL", 3uLL);
    *(_QWORD *)(a1 + 1288) = result;
  }
  return result;
}

uint64_t sub_22F36E27C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  result = *(_QWORD *)(a1 + 1296);
  if (!result)
  {
    v3 = sub_22EF667E8(a1, *(_QWORD *)(a1 + 16896), 0, 0, 0, 0, 0);
    v4 = sub_22F36CC4C(a1, v3);
    result = sub_22EF59578(a1, v4, "Class", 5uLL);
    *(_QWORD *)(a1 + 1296) = result;
  }
  return result;
}

uint64_t *sub_22F36E2EC(uint64_t a1)
{
  uint64_t *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(uint64_t **)(a1 + 1304);
  if (!result)
  {
    v3 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 1960) + 80));
    if (v3)
      v4 = v3 + 40;
    else
      v4 = 0;
    v5 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), "Protocol", 8uLL);
    result = sub_22F3B5B14(a1, v4, 0, v5, 0, 0, 0, 1);
    *(_QWORD *)(a1 + 1304) = result;
  }
  return result;
}

uint64_t sub_22F36E36C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = *(_QWORD *)(a1 + 1272);
  if (!result)
  {
    v3 = sub_22EF5B848(a1, *(_QWORD *)(a1 + 16408), 0);
    result = sub_22EF59578(a1, v3, "__builtin_ms_va_list", 0x14uLL);
    *(_QWORD *)(a1 + 1272) = result;
  }
  return result;
}

unint64_t sub_22F36E3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;

  v3 = sub_22E3CD3D4(a1 + 2032, 16, 3);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  sub_22F401FD4(&v5, v3);
  return v5;
}

unint64_t sub_22F36E410(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t NodeOrInsertPos;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  sub_22F36E53C((uint64_t)v13, a2, a3, a4);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    v10 = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 24, 3);
    NodeOrInsertPos = (uint64_t)v10;
    v11 = 4;
    if (!a3)
      v11 = 0;
    *v10 = 0;
    v10[1] = a2 & 0xFFFFFFFFFFFFFFFBLL | v11;
    v10[2] = a4;
    llvm::FoldingSetBase::InsertNode();
  }
  sub_22F401FE4(&v12, NodeOrInsertPos);
  if (v13[0] != v14)
    free(v13[0]);
  return v12;
}

uint64_t sub_22F36E53C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v7;

  sub_22E3CF554(a1, a2);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = a3;
  ++*(_DWORD *)(a1 + 8);
  return sub_22E3CF554(a1, a4);
}

uint64_t sub_22F36E5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *NodeOrInsertPos;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  sub_22F36E734((uint64_t)v11, a2, a3);
  NodeOrInsertPos = (_QWORD *)llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    v7 = sub_22EF65C10(a1, a2);
    if (v7 == a2)
    {
      NodeOrInsertPos = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 32, 3);
      *NodeOrInsertPos = 0;
      NodeOrInsertPos[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      NodeOrInsertPos[2] = a3;
      sub_22F401FF4(NodeOrInsertPos + 3, (uint64_t)NodeOrInsertPos);
    }
    else
    {
      v8 = sub_22F36E5B0(a1, v7, a3);
      NodeOrInsertPos = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 32, 3);
      *NodeOrInsertPos = 0;
      NodeOrInsertPos[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      NodeOrInsertPos[2] = a3;
      NodeOrInsertPos[3] = v8;
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    llvm::FoldingSetBase::InsertNode();
  }
  sub_22F401FF4(&v10, (uint64_t)NodeOrInsertPos);
  if (v11[0] != v12)
    free(v11[0]);
  return v10;
}

uint64_t sub_22F36E734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;

  sub_22E3CF554(a1, a2);
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v5) = 0;
  ++*(_DWORD *)(a1 + 8);
  return sub_22E3CF554(a1, a3);
}

uint64_t sub_22F36E79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  sub_22F36E924((uint64_t)v11, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    v8 = sub_22EF65C10(a1, a2);
    if (v8 == a2)
    {
      NodeOrInsertPos = sub_22E3CD3D4(a1 + 2032, 32, 3);
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_QWORD *)(NodeOrInsertPos + 8) = a2 | 4;
      *(_DWORD *)(NodeOrInsertPos + 16) = a3;
      sub_22F401FF4((uint64_t *)(NodeOrInsertPos + 24), NodeOrInsertPos);
    }
    else
    {
      v9 = sub_22F36E79C(a1, v8, a3);
      NodeOrInsertPos = sub_22E3CD3D4(a1 + 2032, 32, 3);
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_QWORD *)(NodeOrInsertPos + 8) = a2 | 4;
      *(_DWORD *)(NodeOrInsertPos + 16) = a3;
      *(_QWORD *)(NodeOrInsertPos + 24) = v9;
      llvm::FoldingSetBase::FindNodeOrInsertPos();
    }
    llvm::FoldingSetBase::InsertNode();
  }
  sub_22F401FF4(&v10, NodeOrInsertPos);
  if (v11[0] != v12)
    free(v11[0]);
  return v10;
}

uint64_t sub_22F36E924(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  result = sub_22E3CF554(a1, a2);
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = 1;
  v7 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = a3;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F36E9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = a1;
  if ((sub_22EF6E5C8(&v6, a2, a3) & 1) != 0)
    return 1;
  else
    return sub_22EF6E5C8(&v6, a3, a2);
}

uint64_t sub_22F36EA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = a1;
  if ((sub_22EF6E6F8(&v6, a2, a3) & 1) != 0)
    return 1;
  else
    return sub_22EF6E6F8(&v6, a3, a2);
}

uint64_t sub_22F36EA60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16[4];
  char v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v18 = a3;
  v17 = a4;
  v16[0] = (unsigned __int8 *)&v17;
  v16[1] = (unsigned __int8 *)&v18;
  v16[2] = (unsigned __int8 *)&v19;
  v16[3] = (unsigned __int8 *)a1;
  if ((sub_22F32EDD0(a3) & 1) != 0 || sub_22E5761BC(v19))
    return 1;
  if (sub_22F32EDD0(v19))
  {
    if ((sub_22F32EDD0(v18) & 1) == 0)
    {
      v8 = sub_22E491464(v18);
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  if (sub_22E491464(v19) || sub_22E491464(v18))
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 2000) + 148) & 0x40) == 0)
    {
      if (v17)
        v6 = v19;
      else
        v6 = v18;
      if (v17)
        v7 = v18;
      else
        v7 = v19;
LABEL_15:
      v8 = sub_22EF6E900(a1, v6, v7, 0);
LABEL_16:
      v9 = v8;
      return sub_22EF6F444(v16, v9);
    }
    if ((sub_22EF6E900(a1, v19, v18, 0) & 1) == 0)
    {
      if (v17)
      {
        v9 = 0;
        return sub_22EF6F444(v16, v9);
      }
      v6 = v18;
      v7 = v19;
      goto LABEL_15;
    }
LABEL_19:
    v9 = 1;
    return sub_22EF6F444(v16, v9);
  }
  v10 = sub_22F40A120(v19);
  v11 = sub_22F40A120(v18);
  result = 0;
  if (v10 && v11)
  {
    if (v10 == v11)
      return 1;
    v12 = sub_22F409D88(v10);
    v13 = sub_22F409D88(v11);
    if (sub_22E595B08(v12, v13))
    {
      v9 = v17 != 0;
      return sub_22EF6F444(v16, v9);
    }
    v14 = sub_22F409D88(v11);
    v15 = sub_22F409D88(v10);
    result = sub_22E595B08(v14, v15);
    if ((_DWORD)result)
    {
      v9 = v17 == 0;
      return sub_22EF6F444(v16, v9);
    }
  }
  return result;
}

uint64_t sub_22F36EC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || *(_BYTE *)(v5 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
      v5 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    else
      v5 = 0;
  }
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || *(_BYTE *)(v6 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v6 = sub_22F10CF48(v6);
  }
  result = 0;
  if (v5 && v6)
  {
    if ((sub_22EF6ED94(a1, v5, v6) & 1) != 0)
      return 1;
    else
      return sub_22EF6ED94(a1, v6, v5);
  }
  return result;
}

uint64_t sub_22F36ED18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = sub_22F36CC4C(a1, a2);
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || *(_BYTE *)(v6 + 16) != 32)
    v6 = sub_22F10CF48(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_22F36CC4C(a1, a3);
  v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if (!v8 || *(_BYTE *)(v8 + 16) != 32)
    v8 = sub_22F10CF48(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  return sub_22EF6ED94(a1, v6, v8);
}

BOOL sub_22F36EDA0(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 1) != 0)
    return (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 7) == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7);
  else
    return (unint64_t)sub_22EF6FF80(a1, a2, a3, 0, a4, 0) > 0xF;
}

unint64_t sub_22F36EE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;

  result = sub_22EF71198(a1, a2, a3, a4, a5);
  if (result <= 0xF)
  {
    result = sub_22EF71198(a1, a3, a2, a4, a5);
    if (result <= 0xF)
      return sub_22EF6FF80(a1, a2, a3, a4, a5, 0);
  }
  return result;
}

int *sub_22F36EE94(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  unsigned int v7;
  int *result;

  v5 = sub_22F286D5C((int *)a1);
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = a1 + 8;
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 4;
  result = (int *)(v6 + 8 * v7);
  if (result != v5)
  {
    while (*(_QWORD *)v5 != a2)
    {
      while (1)
      {
        v5 += 2;
        if (v5 == v4)
          break;
        if ((*(_QWORD *)v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_12;
      }
      v5 = v4;
LABEL_12:
      if (v5 == result)
        return result;
    }
    return v5;
  }
  return result;
}

uint64_t sub_22F36EF28(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = a1[2380];
  if (!result)
  {
    if (*(_DWORD *)(a1[1886] + 148) == 11)
    {
      result = operator new();
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 1;
      *(_QWORD *)result = &off_24FAC7E80;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 40) = a1;
      *(_DWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = 0;
      *(_DWORD *)(result + 88) = 0;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = 0;
      *(_DWORD *)(result + 112) = 0;
      *(_DWORD *)(result + 136) = 0;
      *(_QWORD *)(result + 120) = 0;
      *(_QWORD *)(result + 128) = 0;
    }
    else
    {
      v3 = (*(_QWORD *)(a1[250] + 208) >> 38) & 1;
      v4 = operator new();
      result = sub_22F40BF20(v4, (uint64_t)a1, v3);
    }
    v5 = a1[2380];
    a1[2380] = result;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      return a1[2380];
    }
  }
  return result;
}

uint64_t sub_22F36F010(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 148);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8);
  if (v2 > 0xA)
    return sub_22F098760(a1, v3);
  else
    return sub_22F3E1564(a1, v3, (uint64_t)sub_22EF76E84);
}

uint64_t sub_22F36F034(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t result;

  switch(sub_22F424980(*(llvm::APFloatBase **)(a1 + 15088), a2, a3))
  {
    case 0u:
      v4 = 16560;
      goto LABEL_8;
    case 1u:
      v4 = 16568;
      goto LABEL_8;
    case 2u:
      v4 = 16576;
      goto LABEL_8;
    case 3u:
      v4 = 16584;
      goto LABEL_8;
    case 4u:
      v4 = 16592;
LABEL_8:
      result = *(_QWORD *)(a1 + v4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22F36F0B0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F3722F4((uint64_t)&v11, a1, &v13, &v14);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 < *(_QWORD *)(a1 + 40))
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    else
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (((unint64_t)v6 - v7) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v11 + 8);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 16 * v8 + 8;
}

uint64_t sub_22F36F16C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v3 = sub_22F3724E8(a1 + 1752, &v9);
  result = v3[1];
  if (!result)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 15064) + 40))(&v8);
    v5 = v8;
    v8 = 0;
    v6 = v3[1];
    v3[1] = v5;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = v8;
      v8 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    return v3[1];
  }
  return result;
}

uint64_t sub_22F36F200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  v4 = sub_22F3726D0(a1 + 1776, &v10);
  result = v4[1];
  if (!result)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 15064) + 40))(&v9);
    v6 = v9;
    v9 = 0;
    v7 = v4[1];
    v4[1] = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    return v4[1];
  }
  return result;
}

_QWORD *sub_22F36F294(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_22F3728B8((uint64_t *)(a1 + 1920), &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_22F36F2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = a2;
  if (sub_22F25AFD8((uint64_t *)(a1 + 1920), &v6, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)(a1 + 1920) + 16 * *(unsigned int *)(a1 + 1936);
  return *(unsigned int *)(v3 + 8);
}

uint64_t sub_22F36F320(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int v10;

  v6 = sub_22F246F88((llvm::StringMapImpl *)(a1 + 1168), a2, a3);
  v7 = *v6;
  result = *(_QWORD *)(*v6 + 8);
  if (!result)
  {
    v9 = sub_22EF7411C(a1, *(_QWORD *)(a1 + 16408), a3);
    v10 = 0;
    result = sub_22EFF9708(a1, a2, a3, 0, 0, v9, &v10, 1u);
    *(_QWORD *)(v7 + 8) = result;
  }
  return result;
}

uint64_t sub_22F36F3A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12[2];
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12[0] = v13;
  v12[1] = (void *)0x2000000000;
  sub_22F2C4184((uint64_t)v12, a2, a3);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 56;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 18592);
    v10 = *(_QWORD *)(v9 + 48);
    if (v10)
      v11 = v10 & 0xFFFFFFFFFFFFFFF0;
    else
      v11 = sub_22EF6462C(a1, v9);
    v7 = sub_22F3B357C(a1, v11 | 1, a2, a3);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v12[0] != v13)
    free(v12[0]);
  return v7;
}

uint64_t sub_22F36F4C0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v9, a2);
  sub_22F3645E0(a3, (uint64_t)v9);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 56;
  }
  else
  {
    v7 = sub_22F3B37FC(a1, a2, (uint64_t)a3);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v9[0] != v10)
    free(v9[0]);
  return v7;
}

uint64_t sub_22F36F5C8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t NodeOrInsertPos;
  uint64_t v7;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v5 = a2 | 1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  sub_22E3CF554((uint64_t)v9, *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) | a2 & 6 | 1);
  sub_22F3645E0(a3, (uint64_t)v9);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v7 = NodeOrInsertPos - 56;
  }
  else
  {
    v7 = sub_22F3B9CDC(a1, v5, (uint64_t)a3);
    llvm::FoldingSetBase::InsertNode();
  }
  if (v9[0] != v10)
    free(v9[0]);
  return v7;
}

uint64_t sub_22F36F6E0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t OSVersion;
  uint64_t v16;

  result = 0;
  v4 = *(_QWORD *)(a1 + 15088);
  v5 = *(_DWORD *)(v4 + 68);
  if (v5 <= 0x21)
  {
    if (((1 << v5) & 0x3E0000808) == 0)
    {
      if (((1 << v5) & 0x10000080) == 0)
        return result;
      OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)(v4 + 32));
      v16 = v12;
      v13 = 7;
      v14 = 0;
      if ((sub_22E3B38EC(&OSVersion, &v13) & 1) != 0)
        goto LABEL_5;
      v5 = *(_DWORD *)(v4 + 68);
    }
    if ((v5 & 0xFFFFFFF7) != 3)
      return 0;
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)(v4 + 32));
    v16 = v7;
    v13 = 0x800000090000000ALL;
    v14 = 0;
    result = sub_22E3B38EC(&OSVersion, &v13);
    if (!(_DWORD)result)
      return result;
LABEL_5:
    v8 = (uint64_t *)(sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
    sub_22EF5CCD0(a1, *v8, (uint64_t)&OSVersion);
    v9 = OSVersion;
    sub_22EF5CDF0(a1, *v8);
    if (v9 == v10 / (unint64_t)sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)))
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 15088) + 95);
      return sub_22EF5CDF0(a1, *(_QWORD *)(*(_QWORD *)(a1 + 16408) & 0xFFFFFFFFFFFFFFF0)) * v9 > v11;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F36F850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 52) & 0x40000000) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 664))(a2, a3);
  if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 672))(a2, a3);
  if ((*(_BYTE *)(a1 + 104) & 0x20) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 680))(a2, a3);
  return (a3 + 27);
}

uint64_t sub_22F36F89C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_22F36F8D8
                            + 4
                            * byte_22F49EE54[((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 16) >> 19) & 0x1FF)
                                           - 186]))();
}

uint64_t sub_22F36F8D8@<X0>(_QWORD *a1@<X8>)
{
  return *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 37);
}

uint64_t sub_22F36F9F4(uint64_t a1, uint64_t a2)
{
  sub_22EF74318(a1, a2);
  return llvm::APFixedPoint::getMax();
}

uint64_t sub_22F36FA2C(uint64_t a1, uint64_t a2)
{
  sub_22EF74318(a1, a2);
  return llvm::APFixedPoint::getMin();
}

uint64_t sub_22F36FA64(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_22F36FA9C
                            + 4
                            * byte_22F49EE6C[((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                         + 16) >> 19) & 0x1FF)
                                           - 189]))();
}

uint64_t sub_22F36FA9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16600);
}

void sub_22F36FB08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3)
  {
    sub_22EF74614(a1, a2, a3, 0);
  }
  else
  {
    v3 = *(_QWORD **)(a1 + 15088);
    v4 = v3[2];
    v7 = *(_QWORD *)(v4 + 48);
    v5 = v4 + 48;
    v6 = v7;
    v8 = *(_BYTE *)(v5 + 23);
    v9 = v8;
    if (v8 >= 0)
      v10 = v5;
    else
      v10 = v6;
    v11 = v8 & 0x7F;
    if (v9 >= 0)
      v12 = v11;
    else
      v12 = *(_QWORD *)(v5 + 8);
    (*(void (**)(_QWORD, uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(*v3 + 440))(*(_QWORD *)(a1 + 15088), a2, *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8), v10, v12, v5 + 152);
  }
}

uint64_t sub_22F36FB58(uint64_t a1)
{
  unsigned int *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v8;

  v1 = (unsigned int *)(a1 + 19088);
  v2 = (uint64_t *)(a1 + 19080);
  v3 = (_QWORD *)operator new();
  *v3 = v3 + 2;
  v3[1] = 0x200000000;
  v8 = v3;
  v4 = *v1;
  if (v4 >= v1[1])
  {
    sub_22F372918((uint64_t)v2, &v8);
    v5 = *v2;
    v6 = *v1;
  }
  else
  {
    v5 = *v2;
    *(_QWORD *)(*v2 + 8 * v4) = v3;
    v6 = v4 + 1;
    *v1 = v6;
  }
  return *(_QWORD *)(v5 + 8 * v6 - 8);
}

unsigned __int8 **sub_22F36FBF4(unsigned __int8 **a1, const char **a2)
{
  const char *v3;
  unsigned __int8 *v4;
  char v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a1;
  if (*a2)
  {
    if (!v4)
    {
      v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
      *a1 = v4;
    }
    v5 = 11;
  }
  else
  {
    if (!v4)
    {
      v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
      *a1 = v4;
    }
    v3 = "a prior #pragma section";
    v5 = 1;
  }
  v4[*v4 + 1] = v5;
  v6 = *a1;
  v7 = **a1;
  *v6 = v7 + 1;
  *(_QWORD *)&v6[8 * v7 + 16] = v3;
  return a1;
}

unint64_t sub_22F36FC78(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  BOOL v5;

  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(*(_QWORD *)(sub_22F0C975C(a1, a2) + 72) + 48) & 0xFFFFFFFFFFFFFFF8;
    if (a2)
      v5 = v4 == a2;
    else
      v5 = 1;
    if (v5)
      break;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  }
  while ((**(_QWORD **)(a2 + 128) & 0x400) != 0);
  return v4;
}

uint64_t sub_22F36FCE4(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 56), (void *)(16 * *(unsigned int *)(a1 + 72)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 32), (void *)(16 * *(unsigned int *)(a1 + 48)));
  sub_22EF75734(a1 + 8);
  return a1;
}

uint64_t sub_22F36FD34(uint64_t a1)
{
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 808));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 792));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 40));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 24));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 8));
  return a1;
}

uint64_t sub_22F36FD7C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;

  v13 = a2;
  v7 = sub_22F0F0A4C(&v13);
  if (a3 > 0xF)
  {
    v10 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
    v8 = *(_BYTE *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 17) & 0x17;
    v9 = a1 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v8 = 0;
    v9 = a1 & 0xFFFFFFFFFFFFFFF0;
    v10 = a1 & 0xFFFFFFFFFFFFFFF0;
  }
  if (a4)
    v11 = 6;
  else
    v11 = 0;
  if (v10 >= 0x10)
    v9 = v10;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFFF80000 | ((v7 & 7 | v11 & 0xFFFFFFEF | (16 * ((v7 >> 3) & 1)) | v8) << 8) | 0xF;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v13;
  return a1;
}

void sub_22F36FE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22EF5693C(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8));
}

uint64_t sub_22F36FE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22EF5693C(a5, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F36FE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22EF5693C(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F36FED8(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t sub_22F36FF38(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
          llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 25));
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

void **sub_22F36FFB4(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char **v5;
  void **v6;
  char **v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v8 = result;
    v3 = 8 * v2;
    v4 = (char *)(v1 - 1);
    do
    {
      v5 = *(char ***)&v4[v3];
      *(_QWORD *)&v4[v3] = 0;
      if (v5)
      {
        v7 = sub_22F370048(v5);
        MEMORY[0x2348A0E9C](v7, 0x1080C40884E2F53);
      }
      v3 -= 8;
    }
    while (v3);
    result = v8;
    v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

char **sub_22F370048(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 128;
    v5 = 136 * v3;
    do
    {
      sub_22F2BF8FC((char **)&v4[v5]);
      v5 -= 136;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F3700AC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E610528(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F370158(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F3701BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F370250(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F3701BC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_22F370250(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EF77678(a1, v6);
  v8 = 0;
  sub_22F3701BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F370304(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F3701BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F3703B8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E793870(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F370414((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F370414(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF77738(a1, v6);
  v8 = 0;
  sub_22E793870((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t *sub_22F3704C0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_22E793870(v4, v8 - 1, &v11);
        v10 = v11;
        *v11 = *(v8 - 1);
        v10[1] = *v8;
        *v8 = 0;
        ++*((_DWORD *)v4 + 2);
        result = sub_22F29CFE8(v8);
      }
      v9 = v8 + 1;
      v8 += 2;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t sub_22F370588(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      ++v6;
      do
        v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v7 && (*(_DWORD *)(v7 + 28) & 0x7F) != 0x33);
    }
    while (v7 != a3);
  }
  v8 = *(unsigned int *)(result + 8);
  if (v6 + v8 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v9 = (unint64_t *)(*(_QWORD *)v5 + 8 * v8);
    do
    {
      *v9 = v4;
      do
        v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v4 && (*(_DWORD *)(v4 + 28) & 0x7F) != 0x33);
      ++v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v8 + v6;
  return result;
}

_QWORD *sub_22F37065C(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F247398((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_DWORD *sub_22F3706B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (uint64_t *)(a2 - 16);
  if (!a2)
    v4 = 0;
  v5 = *v4;
  v7 = v4[3];
  sub_22E3CF554(a3, v5);
  return sub_22EF76900(&v7, a3);
}

_QWORD *sub_22F370708(uint64_t a1, unint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F29DBCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F370774(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_22F370774(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF78004(a1, v6);
  v8 = 0;
  sub_22F29DBCC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F370820(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 + 1) >= 2)
    {
      v11 = 0;
      result = sub_22F29DBCC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F3708D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F408C04(a3, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 56), *(_DWORD *)(v3 + 16) >> 31);
}

uint64_t sub_22F3708F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F408C04(a5, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 56), *(_DWORD *)(v5 + 16) >> 31);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F408C04(a3, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 56), *(_DWORD *)(v4 + 16) >> 31);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F408C78(a3, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), HIWORD(*(_DWORD *)(v3 + 20)), (unsigned __int16)*(_DWORD *)(v3 + 20));
}

uint64_t sub_22F3709B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F408C78(a5, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), HIWORD(*(_DWORD *)(v5 + 20)), (unsigned __int16)*(_DWORD *)(v5 + 20));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F408C78(a3, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), HIWORD(*(_DWORD *)(v4 + 20)), (unsigned __int16)*(_DWORD *)(v4 + 20));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F370A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F4088EC(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(v3 + 32), *(unsigned __int8 **)(v3 + 40));
}

uint64_t sub_22F370A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F4088EC(a5, *(_QWORD *)(a1 + 16), *(_QWORD *)(v5 + 32), *(unsigned __int8 **)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F4088EC(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(v4 + 32), *(unsigned __int8 **)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E3CF554(a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_22F370B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E3CF554(a5, *(_QWORD *)(v5 + 32));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22EF5F720(a3, *(_QWORD *)(v3 + 32), *(_DWORD *)(v3 + 40));
}

uint64_t sub_22F370BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3CF554(a3, v5);
}

uint64_t sub_22F370BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2 - 24;
  if (!a2)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 40);
  sub_22E3CF554(a5, *(_QWORD *)(v6 + 32));
  sub_22E3CF554(a5, v7);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  sub_22E3CF554(a3, v5);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E3CF554(a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_22F370CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E3CF554(a5, *(_QWORD *)(v5 + 32));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E547B70(a3, *(_QWORD *)(v3 + 32), (*(_DWORD *)(v3 + 16) >> 19) & 1);
}

uint64_t sub_22F370D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E547B70(a3, *(_QWORD *)(v3 + 32), (*(_DWORD *)(v3 + 16) >> 19) & 1);
}

uint64_t sub_22F370D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3CF554(a3, v5);
}

uint64_t sub_22F370DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2 - 24;
  if (!a2)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 40);
  sub_22E3CF554(a5, *(_QWORD *)(v6 + 32));
  sub_22E3CF554(a5, v7);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  sub_22E3CF554(a3, v5);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F370E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22EF78570(v3, a3, *(_QWORD *)(a1 + 16));
}

void sub_22F370E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F10B5A4(a3, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 32), (*(_DWORD *)(v3 + 16) >> 22) & 7, (*(_DWORD *)(v3 + 16) >> 19) & 7, *(unsigned __int8 **)(v3 + 48));
}

unint64_t sub_22F370EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F10B5A4(a3, *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 32), (*(_DWORD *)(v4 + 16) >> 22) & 7, (*(_DWORD *)(v4 + 16) >> 19) & 7, *(unsigned __int8 **)(v4 + 48));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F36AC68(a3, *(_QWORD *)(v3 + 32), (*(_DWORD *)(v3 + 16) >> 22) & 7, (*(_DWORD *)(v3 + 16) >> 19) & 7, *(_QWORD *)(v3 + 40));
}

uint64_t sub_22F370F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F36AC68(a5, *(_QWORD *)(v5 + 32), (*(_DWORD *)(v5 + 16) >> 22) & 7, (*(_DWORD *)(v5 + 16) >> 19) & 7, *(_QWORD *)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F370F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F36AC68(a3, *(_QWORD *)(v4 + 32), (*(_DWORD *)(v4 + 16) >> 22) & 7, (*(_DWORD *)(v4 + 16) >> 19) & 7, *(_QWORD *)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F370FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22EF6356C(a3, *(_QWORD *)(v3 + 32), *(_DWORD *)(v3 + 20), *(_DWORD *)(v3 + 16), (*(_DWORD *)(v3 + 16) >> 19) & 0xF);
}

unint64_t sub_22F370FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22EF6356C(a3, *(_QWORD *)(v4 + 32), *(_DWORD *)(v4 + 20), *(_DWORD *)(v4 + 16), (*(_DWORD *)(v4 + 16) >> 19) & 0xF);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F37102C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F4087D4(a3, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(unsigned __int8 **)(v3 + 48), (*(_DWORD *)(v3 + 16) >> 19) & 0xF);
}

uint64_t sub_22F371050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F4087D4(a5, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(unsigned __int8 **)(v5 + 48), (*(_DWORD *)(v5 + 16) >> 19) & 0xF);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F37109C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F4087D4(a3, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(unsigned __int8 **)(v4 + 48), (*(_DWORD *)(v4 + 16) >> 19) & 0xF);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F3710EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F10B7B0(a3, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 48), *(unsigned __int8 **)(v3 + 40), *(_DWORD *)(v3 + 56));
}

unint64_t sub_22F37110C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F10B7B0(a3, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 48), *(unsigned __int8 **)(v4 + 40), *(_DWORD *)(v4 + 56));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F36BD54(a3, *(_QWORD *)(v3 + 32), *(_DWORD *)(v3 + 40), *(_DWORD *)(v3 + 44), *(unsigned __int8 *)(v3 + 16));
}

uint64_t sub_22F371178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F36BD54(a5, *(_QWORD *)(v5 + 32), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 44), *(unsigned __int8 *)(v5 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F3711C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F36BD54(a3, *(_QWORD *)(v4 + 32), *(_DWORD *)(v4 + 40), *(_DWORD *)(v4 + 44), *(unsigned __int8 *)(v4 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F37120C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F408A0C(a3, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 32), *(unsigned __int8 **)(v3 + 48), *(unsigned __int8 **)(v3 + 56));
}

uint64_t sub_22F371228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F408A0C(a5, *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 32), *(unsigned __int8 **)(v5 + 48), *(unsigned __int8 **)(v5 + 56));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F37126C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F408A0C(a3, *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 32), *(unsigned __int8 **)(v4 + 48), *(unsigned __int8 **)(v4 + 56));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F3712B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F4088EC(a3, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 48), *(unsigned __int8 **)(v3 + 40));
}

uint64_t sub_22F3712D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F4088EC(a5, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 48), *(unsigned __int8 **)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F4088EC(a3, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 48), *(unsigned __int8 **)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F37135C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 32;
  if (!a2)
    v3 = 0;
  return sub_22F36C024(a3, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16) >> 19);
}

uint64_t sub_22F371378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 32;
  if (!a2)
    v5 = 0;
  sub_22F36C024(a5, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 16) >> 19);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F3713BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 32;
  if (!a2)
    v4 = 0;
  sub_22F36C024(a3, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 16) >> 19);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F371404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 32;
  if (!a2)
    v3 = 0;
  sub_22F113F68(v3, a3, *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F371424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F36C26C(a3, *(_QWORD *)(v3 + 32), *(unsigned __int8 *)(v3 + 40));
}

uint64_t sub_22F371440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F36C26C(a5, *(_QWORD *)(v5 + 32), *(unsigned __int8 *)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F36C26C(a3, *(_QWORD *)(v4 + 32), *(unsigned __int8 *)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F3714CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F36C418(a3, *(_DWORD *)(v3 + 32) & 1, (*(_DWORD *)(v3 + 32) >> 1) & 0xFFFFFF);
}

uint64_t sub_22F3714EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F36C418(a5, *(_DWORD *)(v5 + 32) & 1, (*(_DWORD *)(v5 + 32) >> 1) & 0xFFFFFF);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F36C418(a3, *(_DWORD *)(v4 + 32) & 1, (*(_DWORD *)(v4 + 32) >> 1) & 0xFFFFFF);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F371580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F408B6C(a3, *(_QWORD *)(v3 + 32), (*(_QWORD *)(v3 + 40) >> 1) & 1, (unsigned __int8 *)(*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_22F3715A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  return sub_22EF78714(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a3, a5);
}

unint64_t sub_22F3715B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22EF78754(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_22F3715CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E3CF554(a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_22F3715E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E3CF554(a5, *(_QWORD *)(v5 + 32));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22F36C75C(a3, *(_DWORD *)(v3 + 16) >> 19, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t sub_22F371688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F36C75C(a5, *(_DWORD *)(v5 + 16) >> 19, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F3716D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F36C75C(a3, *(_DWORD *)(v4 + 16) >> 19, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F37171C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3CF554(a3, v5);
}

uint64_t sub_22F371758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2 - 24;
  if (!a2)
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 40);
  sub_22E3CF554(a5, *(_QWORD *)(v6 + 32));
  sub_22E3CF554(a5, v7);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F3717AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  sub_22E3CF554(a3, v5);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F3717FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 8);
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3CF554(a3, v5);
}

uint64_t sub_22F37183C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 24;
  else
    v3 = 0;
  return sub_22F40A86C(v3, a3);
}

uint64_t sub_22F371850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
    v5 = a2 - 24;
  else
    v5 = 0;
  sub_22F40A86C(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F37188C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  sub_22F40A86C(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F3718CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 24;
  else
    v3 = 0;
  return sub_22EF78A9C(v3, a3);
}

void sub_22F3718E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22EF78B74(v3, a3, *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F371900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = 0;
  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  v5 = *(_DWORD *)(v4 + 16);
  if ((v5 & 0x8000000) != 0)
    v3 = *(_QWORD *)(v4 + 48);
  return sub_22EF65834(a3, (v5 >> 19), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), v3);
}

uint64_t sub_22F37192C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E3CF554(a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_22F371944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22EF65DE8(a3, (*(_DWORD *)(v3 + 16) >> 19), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

void sub_22F371964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  sub_22F40A470(a3, *(_QWORD *)(a1 + 16), (*(_DWORD *)(v3 + 16) >> 19), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), v3 + 48, *(unsigned int *)(v3 + 20));
}

uint64_t sub_22F371990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22F40A470(a5, *(_QWORD *)(a1 + 16), (*(_DWORD *)(v5 + 16) >> 19), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), v5 + 48, *(unsigned int *)(v5 + 20));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F3719E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22F40A470(a3, *(_QWORD *)(a1 + 16), (*(_DWORD *)(v4 + 16) >> 19), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), v4 + 48, *(unsigned int *)(v4 + 20));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  if (a2)
    v3 = (_QWORD *)(a2 - 40);
  else
    v3 = 0;
  return sub_22F40AA14(v3, a3);
}

uint64_t sub_22F371A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  if (a2)
    v5 = (_QWORD *)(a2 - 40);
  else
    v5 = 0;
  sub_22F40AA14(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (a2)
    v4 = (_QWORD *)(a2 - 40);
  else
    v4 = 0;
  sub_22F40AA14(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 24;
  else
    v3 = 0;
  return sub_22F40AAA0(v3, a3);
}

uint64_t sub_22F371AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2)
    v5 = a2 - 24;
  else
    v5 = 0;
  sub_22F40AAA0(v5, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2)
    v4 = a2 - 24;
  else
    v4 = 0;
  sub_22F40AAA0(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E3CF554(a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_22F371B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E3CF554(a5, *(_QWORD *)(v5 + 32));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F371BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v3 = a2 - 32;
  if (!a2)
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *(unsigned __int8 **)(v3 + 24);
  v7 = 1;
  v6[0] = &off_24FAC6E70;
  v6[1] = a3;
  v8 = v4;
  sub_22F0E9FEC(v6, v5);
}

unint64_t sub_22F371C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v4 = a2 - 32;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(unsigned __int8 **)(v4 + 24);
  v9 = 1;
  v8[0] = &off_24FAC6E70;
  v8[1] = a3;
  v10 = v5;
  sub_22F0E9FEC(v8, v6);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F371CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v3 = a2 - 40;
  if (!a2)
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(unsigned __int8 **)(v3 + 24);
  v7 = 1;
  v6[0] = &off_24FAC6E70;
  v6[1] = a3;
  v8 = v4;
  sub_22F0E9FEC(v6, v5);
}

unint64_t sub_22F371CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v4 = a2 - 40;
  if (!a2)
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(unsigned __int8 **)(v4 + 24);
  v9 = 1;
  v8[0] = &off_24FAC6E70;
  v8[1] = a3;
  v10 = v5;
  sub_22F0E9FEC(v8, v6);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 48;
  if (!a2)
    v3 = 0;
  return sub_22F36C26C(a3, *(_QWORD *)(v3 + 24), *(_DWORD *)(v3 + 40));
}

uint64_t sub_22F371D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 48;
  if (!a2)
    v5 = 0;
  sub_22F36C26C(a5, *(_QWORD *)(v5 + 24), *(_DWORD *)(v5 + 40));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 48;
  if (!a2)
    v4 = 0;
  sub_22F36C26C(a3, *(_QWORD *)(v4 + 24), *(_DWORD *)(v4 + 40));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F371E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 32;
  if (!a2)
    v3 = 0;
  sub_22F115380(a3, *(_QWORD *)(a1 + 16), *(_QWORD *)(v3 + 24), (*(_DWORD *)(v3 + 16) >> 19) & 3, (*(_DWORD *)(v3 + 16) >> 10) & 1, *(_QWORD *)(v3 + 40), v3 + 48, *(unsigned int *)(v3 + 20));
}

unint64_t sub_22F371E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 32;
  if (!a2)
    v3 = 0;
  return sub_22EF790B8(v3, a3, *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F371E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 32;
  if (!a2)
    v3 = 0;
  return sub_22F36D688(a3, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 24), (*(_DWORD *)(v3 + 16) & 0x400) != 0);
}

uint64_t sub_22F371E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 32;
  if (!a2)
    v5 = 0;
  sub_22F36D688(a5, *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 24), (*(_DWORD *)(v5 + 16) & 0x400) != 0);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 32;
  if (!a2)
    v4 = 0;
  sub_22F36D688(a3, *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 24), (*(_DWORD *)(v4 + 16) & 0x400) != 0);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F371F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 24;
  if (!a2)
    v3 = 0;
  return sub_22E3CF554(a3, *(_QWORD *)(v3 + 32));
}

uint64_t sub_22F371F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 24;
  if (!a2)
    v5 = 0;
  sub_22E3CF554(a5, *(_QWORD *)(v5 + 32));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F371F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 24;
  if (!a2)
    v4 = 0;
  sub_22E3CF554(a3, *(_QWORD *)(v4 + 32));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t *sub_22F371FB0(_QWORD **a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t *result;

  v8 = (uint64_t *)operator new(0x30uLL);
  v8[4] = a3;
  v8[5] = a4;
  v9 = (uint64_t **)sub_22EF7910C(a1, a2, v8 + 2, a3);
  *v8 = 0;
  v8[1] = 0;
  *v9 = v8;
  v10 = (_QWORD *)**a1;
  if (v10)
  {
    *a1 = v10;
    v8 = *v9;
  }
  result = sub_22E49FD00(a1[1], v8);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_22F372040(_QWORD **a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t *result;

  v6 = (uint64_t *)operator new(0x30uLL);
  v6[4] = a3;
  v6[5] = 0;
  v7 = (uint64_t **)sub_22EF7910C(a1, a2, v6 + 2, a3);
  *v6 = 0;
  v6[1] = 0;
  *v7 = v6;
  v8 = (_QWORD *)**a1;
  if (v8)
  {
    *a1 = v8;
    v6 = *v7;
  }
  result = sub_22E49FD00(a1[1], v6);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_22F3720C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22F36E53C(a3, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(a2 + 8) >> 2) & 1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22F3720D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22F36E53C(a5, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(a2 + 8) >> 2) & 1, *(_QWORD *)(a2 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F372114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F36E53C(a3, *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8, (*(_QWORD *)(a2 + 8) >> 2) & 1, *(_QWORD *)(a2 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F372154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22F3721CC(a2, a3);
}

uint64_t sub_22F372160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22F3721CC(a2, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F372194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F3721CC(a2, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F3721CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    return sub_22F36E924(a2, v4, *(_DWORD *)(a1 + 16));
  else
    return sub_22F36E734(a2, v4, *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F3721F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
    v3 = a2 - 8;
  else
    v3 = 0;
  return sub_22F0F05E4(v3, a3);
}

unint64_t sub_22F372208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2)
    v4 = a2 - 8;
  else
    v4 = 0;
  sub_22F0F05E4(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F372248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 - 8;
  if (!a2)
    v3 = 0;
  sub_22F401F3C(v3, a3, *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F372268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2 - 8;
  if (!a2)
    v5 = 0;
  sub_22F401F3C(v5, a5, *(_QWORD *)(a1 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F3722AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2 - 8;
  if (!a2)
    v4 = 0;
  sub_22F401F3C(v4, a3, *(_QWORD *)(a1 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F3722F4(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22EF7922C((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F37238C(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F37238C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22EF792C8(a1, v7);
  v9 = 0;
  sub_22EF7922C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F37243C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22EF7922C((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F3724E8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22E5C4728(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F37254C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F37254C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF79388(a1, v6);
  v8 = 0;
  sub_22E5C4728(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F372600(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22E5C4728(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F3726D0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F372738(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F372738(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF79448(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F3727E8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22F24C318(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F3728B8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AFD8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22E4D1B3C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F372918(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unsigned int v5;

  v4 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v4[*(unsigned int *)(a1 + 8)] = *a2;
  sub_22F3729A8(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = 0;
  return (uint64_t)&v4[v5 - 1];
}

uint64_t sub_22F3729A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(char **)result;
    v4 = 8 * v2;
    v5 = 8 * v2;
    do
    {
      v6 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      v3 += 8;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        v8 = sub_22F370048((char **)result);
        result = MEMORY[0x2348A0E9C](v8, 0x1080C40884E2F53);
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_22F372A24(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v17;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = *(_DWORD *)(a3 + 8);
    v6 = ((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) & (a2 - 1);
    v7 = (uint64_t *)(a1 + 48 * v6);
    v8 = *v7;
    v9 = *((_DWORD *)v7 + 2);
    if (*(_QWORD *)a3 == *v7 && v5 == v9)
    {
      v11 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v8 || v9)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v9 == 0;
        if (v15 && v8 == -1)
          v13 = v7;
        v17 = v6 + v14++;
        v6 = v17 & v4;
        v7 = (uint64_t *)(a1 + 48 * (v17 & v4));
        v8 = *v7;
        v9 = *((_DWORD *)v7 + 2);
        v11 = 1;
        if (*(_QWORD *)a3 == *v7 && v5 == v9)
          goto LABEL_8;
      }
      v11 = 0;
      if (v13)
        v7 = v13;
    }
  }
  else
  {
    v7 = 0;
    v11 = 0;
  }
LABEL_8:
  *a4 = v7;
  return v11;
}

uint64_t sub_22F372ADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  void *v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(char ***)(*(_QWORD *)a1 + v3);
        if (v5 != (char **)-8 && v5 != 0)
        {
          v7 = *v5 + 73;
          sub_22E3B9848(v5 + 1);
          llvm::deallocate_buffer((llvm *)v5, v7);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *sub_22F372B6C(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 73, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 72;
  if (a3)
    memcpy((void *)(v10 + 72), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *v11 = a3;
  v11[1] = v11 + 3;
  v11[2] = 0x200000000;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F372C68(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22F372A24(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F372CE8(a1, a2, v8);
    v7 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = v7;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_DWORD *)(v5 + 36) = 8;
  }
  return v5;
}

uint64_t sub_22F372CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF79508(a1, v6);
  v8 = 0;
  sub_22F372A24(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 | *(unsigned int *)(a3 + 8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F372D9C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;

  result = sub_22EF82F70(a1, a2[7]);
  v5 = a2[6];
  if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v5 + 29) & 2) == 0)
  {
    result = sub_22EF814B0(a1 + 8, a1, v5);
    if (!*(_DWORD *)(a1 + 4))
    {
      v6 = *(uint64_t **)(sub_22F3B8610((unint64_t)a2) + 16);
      result = sub_22F3B8610((unint64_t)a2);
      v7 = *(_QWORD *)(result + 16) + 8 * *(unsigned int *)(result + 24);
      while (v6 != (uint64_t *)v7)
      {
        v8 = *v6++;
        v9 = sub_22E6939D8(v8);
        v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) != (_QWORD)a2;
        result = (uint64_t)sub_22EF85C60(a1, v9, v10);
      }
    }
  }
  return result;
}

uint64_t sub_22F372E5C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;

  result = sub_22EF82F70(a1, a2[7]);
  v5 = a2[6];
  if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v5 + 29) & 2) == 0)
  {
    result = sub_22EF814B0(a1 + 8, a1, v5);
    if (!*(_DWORD *)(a1 + 4))
    {
      v6 = *(uint64_t **)(sub_22F3B8610((unint64_t)a2) + 16);
      result = sub_22F3B8610((unint64_t)a2);
      v7 = *(_QWORD *)(result + 16) + 8 * *(unsigned int *)(result + 24);
      while (v6 != (uint64_t *)v7)
      {
        v8 = *v6++;
        v9 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 80) + 72), *(_QWORD *)(v8 + 80));
        v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) != (_QWORD)a2;
        result = (uint64_t)sub_22EF85D60(a1, v9, v10);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F372F24(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 8) != 0)
  {
    v4 = (_QWORD *)*v4;
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xCFFFFFFFFLL | a2 & 7;
  }
  else
  {
    v5 = a2 & 7;
  }
  v6 = (_BYTE *)(a1 + 8);
  if (v5)
    return sub_22EF85E60(v6, a1, a2);
  else
    return sub_22EF83028(v6, a1, (uint64_t)v4);
}

char **sub_22F372F68(uint64_t a1)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFFFF0;
  return sub_22EF80428((llvm *)&v2);
}

char **sub_22F372F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  v4 = a1 & 0xFFFFFFFFFFFFFFF0;
  return sub_22EF804D0((uint64_t *)&v4, a2, a3);
}

char **sub_22F372FB8(llvm *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = llvm::errs(a1);
  return sub_22EF805D0((uint64_t)a1, v2, 0, 0, v3, v4, v5, v6);
}

char **sub_22F372FE8(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22EF80AF4((uint64_t)a1, v2, 0, 0);
}

void sub_22F373018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6[11];

  v6[10] = *MEMORY[0x24BDAC8D0];
  v4 = (_BYTE *)(a1 + 8);
  v5 = a1;
  sub_22EF530AC((uint64_t)v6, a2);
  v6[9] = a3;
  sub_22F379024(v4, &v5);
  if (LODWORD(v6[0]) >= 2)
    sub_22EF53BC0(v6);
}

uint64_t sub_22F3730AC(uint64_t a1)
{
  void *v2;

  sub_22F097838((uint64_t **)(a1 + 1248));
  v2 = *(void **)(a1 + 1048);
  if (v2 != (void *)(a1 + 1064))
    free(v2);
  sub_22F271CAC((char **)(a1 + 8));
  return a1;
}

_BYTE *sub_22F3730F0(_BYTE *result, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v3;

  if (a2)
  {
    v2 = result;
    if (*result)
    {
      result = (_BYTE *)sub_22EFCCC4C(a2);
      v3 = (unint64_t)result;
    }
    else
    {
      v3 = *(_QWORD *)(a2 + 16);
    }
    for (; v3; v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8)
    {
      if (*((_DWORD *)v2 + 1) != 1 || (*(_BYTE *)(v3 + 29) & 2) == 0)
        result = (_BYTE *)sub_22EF814B0(v2 + 8, v2, v3);
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F37316C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;

  v4 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 72);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      if (*(_DWORD *)(a1 + 4) != 1 || (*(_BYTE *)(v7 + 29) & 2) == 0)
        sub_22EF814B0(a1 + 8, a1, v7);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v8)
  {
    v9 = *(__int128 **)(a2 + 104);
    v10 = 16 * v8;
    do
    {
      v11 = *v9++;
      v14 = a1;
      v15 = v11;
      sub_22EF8226C((_BYTE *)(a1 + 8), &v14);
      v10 -= 16;
    }
    while (v10);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  return sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, v12, a1);
}

unint64_t sub_22F373250(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t result;
  uint64_t *i;
  uint64_t v7;

  v4 = (uint64_t *)sub_22F3B6E50(a2);
  result = sub_22F3B6E50(a2);
  for (i = (uint64_t *)(result + 8 * *(unsigned int *)(a2 + 128)); v4 != i; ++v4)
  {
    v7 = *v4;
    if (*(_DWORD *)(a1 + 4) != 1 || (*(_WORD *)(v7 + 28) & 4) != 0)
      result = (unint64_t)sub_22EF82B78((_BYTE *)(a1 + 8), a1, (uint64_t *)v7);
  }
  return result;
}

llvm::raw_ostream *sub_22F3732D0(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  int *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;

  result = (llvm::raw_ostream *)sub_22EF82F70(a1, *(_QWORD *)(a2 + 56));
  if (*(_QWORD *)(a2 + 72) >= 8uLL)
  {
    v5 = sub_22F259350(a2);
    v6 = v5;
    v7 = *(_QWORD *)(a2 + 72);
    v8 = v7 & 6;
    v9 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if (v8 != 2 || v9 == 0)
    {
      if (v8 != 4 || v9 == 0)
        v9 = 0;
      else
        v9 = (_QWORD *)*v9;
    }
    if (v8 == 2)
      v12 = "inherited from";
    else
      v12 = "previous";
    sub_22F0EFE08((uint64_t)v5);
    v14 = *(_OWORD *)v6;
    v15 = *((_QWORD *)v6 + 2);
    v16 = a1;
    v17 = v14;
    v18 = v15;
    v19 = v13;
    v20 = v9;
    v21 = v12;
    return sub_22EF82658((_BYTE *)(a1 + 8), (uint64_t)&v16);
  }
  return result;
}

llvm::raw_ostream *sub_22F3733A0(llvm::raw_ostream *result, uint64_t a2)
{
  llvm::raw_ostream *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  llvm::raw_ostream *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;

  v3 = result;
  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
    result = sub_22EF8CE48((_BYTE *)result + 8, 0, 0, *(_QWORD *)(a2 + 152), (uint64_t)result);
  v6 = *(_QWORD *)(a2 + 72);
  v5 = (uint64_t *)(a2 + 72);
  v4 = v6;
  if (v6 >= 8)
  {
    v7 = v4 & 6;
    v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v7 == 2)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9 + 9;
    if (!v9)
      v10 = v5;
    v11 = *v10;
    v12 = v11 & 6;
    v13 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if (v12 == 4 && v13 != 0)
      v13 = (uint64_t *)v13[1];
    v15 = *v13;
    v16 = v8;
    if (!v9)
    {
      v16 = 0;
      if (v7 == 4)
      {
        if (v8)
          v16 = (_QWORD *)*v8;
      }
    }
    v18 = v3;
    v19 = 1;
    if (v7 == 2)
      v17 = "inherited from";
    else
      v17 = "previous";
    v20 = v15;
    v21 = 0;
    v22 = v16;
    v23 = v17;
    return sub_22EF82658((_BYTE *)v3 + 8, (uint64_t)&v18);
  }
  return result;
}

llvm::raw_ostream *sub_22F37348C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;

  result = (llvm::raw_ostream *)sub_22F2D6770(a2);
  if (result)
    result = sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, (uint64_t)result, a1);
  v7 = *(_QWORD *)(a2 + 72);
  v6 = (uint64_t *)(a2 + 72);
  v5 = v7;
  if (v7 >= 4)
  {
    v8 = v5 & 3;
    v9 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8 == 1)
      v10 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    else
      v10 = 0;
    v11 = (uint64_t *)(v10 + 72);
    if (!v10)
      v11 = v6;
    v12 = *v11;
    v13 = v12 & 3;
    v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (v13 == 2 && v14 != 0)
      v14 = *(_QWORD *)(v14 + 8);
    v16 = v9;
    if (!v10)
    {
      v16 = 0;
      if (v8 == 2)
      {
        if (v9)
          v16 = (_QWORD *)*v9;
      }
    }
    v18 = a1;
    v19 = 7;
    if (v8 == 1)
      v17 = "inherited from";
    else
      v17 = "previous";
    v20 = v14;
    v21 = 0;
    v22 = v16;
    v23 = v17;
    return sub_22EF82658((_BYTE *)(a1 + 8), (uint64_t)&v18);
  }
  return result;
}

llvm::raw_ostream *sub_22F373578(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;

  v2 = (uint64_t)result;
  if (*((_DWORD *)result + 1) == 1)
  {
    v3 = *(_DWORD *)(a2 + 28);
    if ((v3 & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 8) != 0)
      return result;
  }
  else
  {
    v3 = *(_DWORD *)(a2 + 28);
  }
  if (((v3 & 0x7F) != 0x40 || (*(_DWORD *)(a2 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF) && *(_QWORD *)(a2 + 88) >= 8uLL)
  {
    v4 = sub_22EFBC5B4(a2);
    return sub_22EF8CE48((_BYTE *)(v2 + 8), 0, 0, v4, v2);
  }
  return result;
}

llvm::raw_ostream *sub_22F373614(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  uint64_t v6;

  v4 = (_BYTE *)(a1 + 8);
  result = sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, *(_QWORD *)(a2 + 88), a1);
  v6 = *(_QWORD *)(a2 + 96);
  if (v6)
    return sub_22EF8CE48(v4, 0, 0, v6, a1);
  return result;
}

uint64_t sub_22F373680(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t **v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;

  v4 = (uint64_t *)sub_22F3F327C(*(unsigned int **)(a2 + 40));
  result = sub_22F3F327C(*(unsigned int **)(a2 + 40));
  v6 = *(_DWORD **)(a2 + 40);
  v7 = (uint64_t *)(result + 8 * v6[1]);
  if (v7 != v4)
  {
    do
    {
      v8 = *v4++;
      result = (uint64_t)sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, v8, a1);
    }
    while (v4 != v7);
    v6 = *(_DWORD **)(a2 + 40);
  }
  v11 = *v6;
  v10 = (unint64_t **)(v6 + 4);
  v9 = v11;
  if (v11)
  {
    v12 = 8 * v9;
    do
    {
      v13 = *v10++;
      result = (uint64_t)sub_22EF833F4((_BYTE *)(a1 + 8), a1, v13);
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_22F373728(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t *i;
  uint64_t v7;

  v4 = (uint64_t *)sub_22F3F327C(*(unsigned int **)(a2 + 40));
  result = sub_22F3F327C(*(unsigned int **)(a2 + 40));
  for (i = (uint64_t *)(result + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 40) + 4));
        v4 != i;
        result = (uint64_t)sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, v7, a1))
  {
    v7 = *v4++;
  }
  return result;
}

llvm::raw_ostream *sub_22F37379C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)(a1 + 8);
  sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, a1);
  return sub_22EF8CE48(v4, 0, 0, *(_QWORD *)(a2 + 48), a1);
}

void sub_22F3737F8(_QWORD *a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;

  v2 = *a1;
  v3 = (_BYTE *)(*a1 + 8);
  sub_22F402FF0((uint64_t)v3, a1 + 1);
  v4 = a1[2];
  if (v4)
    sub_22EF8CE48(v3, 0, 0, v4, v2);
}

void sub_22F373858(uint64_t a1, unsigned __int8 *a2)
{
  sub_22F373864(a1 + 8, *a2);
}

void sub_22F373864(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  std::string::value_type v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  char v29;

  v4 = *(llvm::raw_ostream ***)a1;
  v5 = **(llvm::raw_ostream ***)a1;
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = *v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = *v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = *v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (a2)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  if (*(char *)(a1 + 55) < 0)
    v15 = *(_QWORD *)(a1 + 40);
  else
    v15 = *(unsigned __int8 *)(a1 + 55);
  if (v15)
  {
    if (*(char *)(a1 + 55) >= 0)
      v16 = (const char *)(a1 + 32);
    else
      v16 = *(const char **)(a1 + 32);
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*v4, v16);
    sub_22E47DAC0(v17, ": ");
  }
  if (a2)
    v18 = 32;
  else
    v18 = 124;
  std::string::push_back((std::string *)(v4 + 133), v18);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v19 = *((_DWORD *)v4 + 6);
  sub_22F3737F8((_QWORD *)(a1 + 8));
LABEL_31:
  LODWORD(v20) = *((_DWORD *)v4 + 6);
  while (v19 < v20)
  {
    v21 = (uint64_t)v4[2] + 32 * v20;
    v29 = 1;
    v22 = *(_QWORD *)(v21 - 8);
    if (!v22)
    {
      sub_22E4A06C4();
      sub_22F373AB0(v27, v28);
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 48))(v22, &v29);
    v20 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v20;
    v23 = (uint64_t)v4[2] + 32 * v20;
    v24 = *(_QWORD **)(v23 + 24);
    if (v24 == (_QWORD *)v23)
    {
      v24 = (_QWORD *)((char *)v4[2] + 32 * v20);
      v25 = 4;
      goto LABEL_37;
    }
    if (v24)
    {
      v25 = 5;
LABEL_37:
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_31;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v26 = v4[134];
  else
    v26 = (llvm::raw_ostream *)*((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), (std::string::size_type)v26 - 2, 0);
}

llvm::raw_ostream *sub_22F373AB0(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v2 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v2)
    {
      v3 = result;
      v4 = a2 + 16;
      v5 = (char *)result + 8;
      v6 = 32 * v2;
      do
      {
        sub_22F0EFE08(v4);
        v9 = *(_OWORD *)v4;
        v10 = *(_QWORD *)(v4 + 16);
        v8 = v3;
        v11 = v7;
        v12 = 0;
        v13 = 0;
        result = sub_22EF82658(v5, (uint64_t)&v8);
        v4 += 32;
        v6 -= 32;
      }
      while (v6);
    }
  }
  return result;
}

void sub_22F373B44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(char **)(a1 + 48);
  if (v5)
    v6 = strlen(*(const char **)(a1 + 48));
  else
    v6 = 0;
  v7 = a1 + 8;
  sub_22F4026EC((llvm::raw_ostream **)(v2 + 8), v7, v3, v4, v5, v6);
  sub_22EF828D0(v2, v7);
}

void sub_22F373BB8(uint64_t a1, unsigned __int8 *a2)
{
  sub_22F373BC4(a1 + 8, *a2);
}

void sub_22F373BC4(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  std::string::value_type v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  char v27;

  v4 = *(llvm::raw_ostream ***)a1;
  v5 = **(llvm::raw_ostream ***)a1;
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = *v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = *v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = *v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (a2)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  if (*(char *)(a1 + 87) < 0)
    v15 = *(_QWORD *)(a1 + 72);
  else
    v15 = *(unsigned __int8 *)(a1 + 87);
  if (v15)
  {
    if (*(char *)(a1 + 87) >= 0)
      v16 = (const char *)(a1 + 64);
    else
      v16 = *(const char **)(a1 + 64);
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*v4, v16);
    sub_22E47DAC0(v17, ": ");
  }
  if (a2)
    v18 = 32;
  else
    v18 = 124;
  std::string::push_back((std::string *)(v4 + 133), v18);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v19 = *((_DWORD *)v4 + 6);
  sub_22F373B44(a1 + 8);
LABEL_31:
  LODWORD(v20) = *((_DWORD *)v4 + 6);
  while (v19 < v20)
  {
    v21 = (uint64_t)v4[2] + 32 * v20;
    v27 = 1;
    v22 = *(_QWORD *)(v21 - 8);
    if (!v22)
    {
      sub_22E4A06C4();
      sub_22F373E10();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 48))(v22, &v27);
    v20 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v20;
    v23 = (uint64_t)v4[2] + 32 * v20;
    v24 = *(_QWORD **)(v23 + 24);
    if (v24 == (_QWORD *)v23)
    {
      v24 = (_QWORD *)((char *)v4[2] + 32 * v20);
      v25 = 4;
      goto LABEL_37;
    }
    if (v24)
    {
      v25 = 5;
LABEL_37:
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_31;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v26 = v4[134];
  else
    v26 = (llvm::raw_ostream *)*((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), (std::string::size_type)v26 - 2, 0);
}

void sub_22F373E10(uint64_t a1, unsigned __int8 *a2)
{
  sub_22F373E1C(a1 + 8, *a2);
}

void sub_22F373E1C(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  std::string::value_type v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  char v30;

  v4 = *(llvm::raw_ostream ***)a1;
  v5 = **(llvm::raw_ostream ***)a1;
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = *v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = *v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = *v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (a2)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  if (*(char *)(a1 + 47) < 0)
    v15 = *(_QWORD *)(a1 + 32);
  else
    v15 = *(unsigned __int8 *)(a1 + 47);
  if (v15)
  {
    if (*(char *)(a1 + 47) >= 0)
      v16 = (const char *)(a1 + 24);
    else
      v16 = *(const char **)(a1 + 24);
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*v4, v16);
    sub_22E47DAC0(v17, ": ");
  }
  if (a2)
    v18 = 32;
  else
    v18 = 124;
  std::string::push_back((std::string *)(v4 + 133), v18);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v19 = *((_DWORD *)v4 + 6);
  v20 = *(_QWORD *)(a1 + 8);
  sub_22F0FD344(v20 + 8, *(uint64_t **)(a1 + 16));
  sub_22EF8CE48((_BYTE *)(v20 + 8), 0, 0, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v20);
LABEL_31:
  LODWORD(v21) = *((_DWORD *)v4 + 6);
  while (v19 < v21)
  {
    v22 = (uint64_t)v4[2] + 32 * v21;
    v30 = 1;
    v23 = *(_QWORD *)(v22 - 8);
    if (!v23)
    {
      sub_22E4A06C4();
      sub_22F374094(v28, v29);
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 48))(v23, &v30);
    v21 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v21;
    v24 = (uint64_t)v4[2] + 32 * v21;
    v25 = *(_QWORD **)(v24 + 24);
    if (v25 == (_QWORD *)v24)
    {
      v25 = (_QWORD *)((char *)v4[2] + 32 * v21);
      v26 = 4;
      goto LABEL_37;
    }
    if (v25)
    {
      v26 = 5;
LABEL_37:
      (*(void (**)(void))(*v25 + 8 * v26))();
      goto LABEL_31;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v27 = v4[134];
  else
    v27 = (llvm::raw_ostream *)*((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), (std::string::size_type)v27 - 2, 0);
}

llvm::raw_ostream *sub_22F374094(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  llvm::raw_ostream *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = (char *)result + 8;
    v7 = 24 * v2;
    do
    {
      v8 = (__int128 *)(*(_QWORD *)a2 + v5);
      v9 = *v8;
      v10 = *((_QWORD *)v8 + 2);
      v11 = v4;
      v12 = v9;
      v13 = v10;
      v15 = 0;
      v16 = 0;
      v14 = 0;
      result = sub_22EF82658(v6, (uint64_t)&v11);
      v5 += 24;
    }
    while (v7 != v5);
  }
  return result;
}

void sub_22F374138(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  sub_22F4028D4(*a1 + 8, a1[1]);
  v3 = a1[1];
  if (v3)
  {
    sub_22F37419C(v2, v3);
    v4 = sub_22F10D19C(a1[1]);
    if (v4 != (a1[1] & 0xFFFFFFFFFFFFFFF0))
      sub_22F372F24(v2, v4);
  }
}

void sub_22F37419C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22F3741F0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22EF8CE48((_BYTE *)(v0 + 8), 0, 0, *(_QWORD *)(v1 + 24), v0);
}

llvm::raw_ostream *sub_22F37421C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22EF83028((_BYTE *)(v0 + 8), v0, *(_QWORD *)(v1 + 32));
}

void sub_22F374240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;

  v17 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v17)
  {
    v18 = (__int128 *)(v16 + 40);
    v19 = 24 * v17;
    do
    {
      a11 = *v18;
      a12 = *((_QWORD *)v18 + 2);
      a10 = v15;
      a14 = 0;
      a15 = 0;
      a13 = 0;
      sub_22EF82658((_BYTE *)(v15 + 8), (uint64_t)&a10);
      v18 = (__int128 *)((char *)v18 + 24);
      v19 -= 24;
    }
    while (v19);
  }
  sub_22F3741D8();
}

llvm::raw_ostream *sub_22F37429C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F372F24(v0, *(_QWORD *)(v1 + 24));
}

llvm::raw_ostream *sub_22F374344()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F3743BC(v0, v1);
}

llvm::raw_ostream *sub_22F374364(uint64_t a1, _QWORD *a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_22F372F24(a1, a2[3]);
  v5 = (unsigned __int16)(a2[2] >> 38);
  if ((unsigned __int16)(a2[2] >> 38))
  {
    v6 = a2 + 5;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = sub_22F372F24(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

llvm::raw_ostream *sub_22F3743BC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_BYTE *)(a1 + 8);
  sub_22EF83028((_BYTE *)(a1 + 8), a1, *(_QWORD *)(a2 + 32));
  sub_22F40A854(a2, (uint64_t)&v6);
  v9 = v6;
  v8 = a1;
  v10 = v7;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  return sub_22EF82658(v4, (uint64_t)&v8);
}

llvm::raw_ostream *sub_22F374430(uint64_t a1, uint64_t a2)
{
  int v4;

  if ((*(_BYTE *)(a2 + 18) & 0x10) != 0)
  {
    do
    {
      a2 = *(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (a2)
      {
        v4 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0xFE) == 0x28)
          continue;
      }
      a2 = sub_22F10CF48(a2);
      v4 = *(_DWORD *)(a2 + 16);
    }
    while ((v4 & 0x100000) != 0);
  }
  return sub_22F372F24(a1, *(_QWORD *)(a2 + 32));
}

void sub_22F374498(uint64_t a1, unsigned __int8 *a2)
{
  sub_22F3744A4(a1 + 8, *a2);
}

void sub_22F3744A4(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  std::string::value_type v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  char v27;

  v4 = *(llvm::raw_ostream ***)a1;
  v5 = **(llvm::raw_ostream ***)a1;
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = *v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = *v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = *v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (a2)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  if (*(char *)(a1 + 47) < 0)
    v15 = *(_QWORD *)(a1 + 32);
  else
    v15 = *(unsigned __int8 *)(a1 + 47);
  if (v15)
  {
    if (*(char *)(a1 + 47) >= 0)
      v16 = (const char *)(a1 + 24);
    else
      v16 = *(const char **)(a1 + 24);
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*v4, v16);
    sub_22E47DAC0(v17, ": ");
  }
  if (a2)
    v18 = 32;
  else
    v18 = 124;
  std::string::push_back((std::string *)(v4 + 133), v18);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v19 = *((_DWORD *)v4 + 6);
  sub_22F374138((uint64_t *)(a1 + 8));
LABEL_31:
  LODWORD(v20) = *((_DWORD *)v4 + 6);
  while (v19 < v20)
  {
    v21 = (uint64_t)v4[2] + 32 * v20;
    v27 = 1;
    v22 = *(_QWORD *)(v21 - 8);
    if (!v22)
    {
      sub_22E4A06C4();
      sub_22F3746F0();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 48))(v22, &v27);
    v20 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v20;
    v23 = (uint64_t)v4[2] + 32 * v20;
    v24 = *(_QWORD **)(v23 + 24);
    if (v24 == (_QWORD *)v23)
    {
      v24 = (_QWORD *)((char *)v4[2] + 32 * v20);
      v25 = 4;
      goto LABEL_37;
    }
    if (v24)
    {
      v25 = 5;
LABEL_37:
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_31;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v26 = v4[134];
  else
    v26 = (llvm::raw_ostream *)*((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), (std::string::size_type)v26 - 2, 0);
}

void sub_22F3746F0(uint64_t a1, unsigned __int8 *a2)
{
  sub_22F3746FC(a1 + 8, *a2);
}

void sub_22F3746FC(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  std::string::value_type v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  char v29;

  v4 = *(llvm::raw_ostream ***)a1;
  v5 = **(llvm::raw_ostream ***)a1;
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = *v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = *v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = *v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (a2)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  if (*(char *)(a1 + 47) < 0)
    v15 = *(_QWORD *)(a1 + 32);
  else
    v15 = *(unsigned __int8 *)(a1 + 47);
  if (v15)
  {
    if (*(char *)(a1 + 47) >= 0)
      v16 = (const char *)(a1 + 24);
    else
      v16 = *(const char **)(a1 + 24);
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*v4, v16);
    sub_22E47DAC0(v17, ": ");
  }
  if (a2)
    v18 = 32;
  else
    v18 = 124;
  std::string::push_back((std::string *)(v4 + 133), v18);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v19 = *((_DWORD *)v4 + 6);
  sub_22EF8370C(a1 + 8);
LABEL_31:
  LODWORD(v20) = *((_DWORD *)v4 + 6);
  while (v19 < v20)
  {
    v21 = (uint64_t)v4[2] + 32 * v20;
    v29 = 1;
    v22 = *(_QWORD *)(v21 - 8);
    if (!v22)
    {
      sub_22E4A06C4();
      sub_22F374948(v27, v28);
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 48))(v22, &v29);
    v20 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v20;
    v23 = (uint64_t)v4[2] + 32 * v20;
    v24 = *(_QWORD **)(v23 + 24);
    if (v24 == (_QWORD *)v23)
    {
      v24 = (_QWORD *)((char *)v4[2] + 32 * v20);
      v25 = 4;
      goto LABEL_37;
    }
    if (v24)
    {
      v25 = 5;
LABEL_37:
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_31;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v26 = v4[134];
  else
    v26 = (llvm::raw_ostream *)*((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), (std::string::size_type)v26 - 2, 0);
}

llvm::raw_ostream *sub_22F374948(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t)result;
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 56);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      result = sub_22EF8CE48((_BYTE *)(v3 + 8), 0, 0, v7, v3);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a2 + 72);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      result = sub_22EF8CE48((_BYTE *)(v3 + 8), 0, 0, v11, v3);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

llvm::raw_ostream *sub_22F3749E0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)(a1 + 8);
  sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, *(_QWORD *)(a2 + 40), a1);
  return sub_22EF8CE48(v4, 0, 0, *(_QWORD *)(a2 + 48), a1);
}

llvm::raw_ostream *sub_22F374A38(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_BYTE *)(a1 + 8);
  result = sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, *(_QWORD *)(a2 + 40), a1);
  v6 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a2 + 56);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = sub_22EF8CE48(v4, 0, 0, v9, a1);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

llvm::raw_ostream *sub_22F374AAC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_BYTE *)(a1 + 8);
  result = sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, *(_QWORD *)(a2 + 40), a1);
  v6 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a2 + 64);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = sub_22EF8CE48(v4, 0, 0, v9, a1);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a2 + 80);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      result = sub_22EF8CE48(v4, 0, 0, v13, a1);
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

llvm::raw_ostream *sub_22F374B58(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (_BYTE *)(a1 + 8);
  result = sub_22EF8CE48((_BYTE *)(a1 + 8), 0, 0, *(_QWORD *)(a2 + 40), a1);
  v6 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a2 + 56);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = sub_22EF8CE48(v4, 0, 0, v9, a1);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a2 + 72);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      result = sub_22EF8CE48(v4, 0, 0, v13, a1);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(a2 + 88);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      result = sub_22EF8CE48(v4, 0, 0, v17, a1);
      v16 -= 8;
    }
    while (v16);
  }
  v18 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v18)
  {
    v19 = *(uint64_t **)(a2 + 104);
    v20 = 8 * v18;
    do
    {
      v21 = *v19++;
      result = sub_22EF8CE48(v4, 0, 0, v21, a1);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v22)
  {
    v23 = *(uint64_t **)(a2 + 136);
    v24 = 8 * v22;
    do
    {
      v25 = *v23++;
      result = sub_22EF8CE48(v4, 0, 0, v25, a1);
      v24 -= 8;
    }
    while (v24);
  }
  return result;
}

void sub_22F374C94(uint64_t a1, unsigned __int8 *a2)
{
  sub_22F374CA0(a1 + 8, *a2);
}

void sub_22F374CA0(uint64_t a1, int a2)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  int v8;
  llvm::raw_ostream *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  char v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  llvm::raw_ostream *v17;
  std::string::value_type v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  char v28;

  v4 = *(llvm::raw_ostream ***)a1;
  v5 = **(llvm::raw_ostream ***)a1;
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = 10;
  }
  v7 = *v4;
  v8 = *((unsigned __int8 *)v4 + 8);
  v9 = *v4;
  if (*((_BYTE *)v4 + 8))
  {
    (*(void (**)(llvm::raw_ostream *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 24))(*v4, 4, 0, 0);
    v9 = *v4;
  }
  if (*((char *)v4 + 1087) >= 0)
    v10 = (const char *)(v4 + 133);
  else
    v10 = (const char *)v4[133];
  v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v9, v10);
  if (a2)
    v12 = 96;
  else
    v12 = 124;
  v13 = (char *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v11 + 3))
  {
    v11 = (llvm::raw_ostream *)llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v13 + 1;
    *v13 = v12;
  }
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
  {
    llvm::raw_ostream::write(v11);
  }
  else
  {
    *((_QWORD *)v11 + 4) = v14 + 1;
    *v14 = 45;
  }
  if (*(char *)(a1 + 47) < 0)
    v15 = *(_QWORD *)(a1 + 32);
  else
    v15 = *(unsigned __int8 *)(a1 + 47);
  if (v15)
  {
    if (*(char *)(a1 + 47) >= 0)
      v16 = (const char *)(a1 + 24);
    else
      v16 = *(const char **)(a1 + 24);
    v17 = (llvm::raw_ostream *)llvm::raw_ostream::write(*v4, v16);
    sub_22E47DAC0(v17, ": ");
  }
  if (a2)
    v18 = 32;
  else
    v18 = 124;
  std::string::push_back((std::string *)(v4 + 133), v18);
  std::string::push_back((std::string *)(v4 + 133), 32);
  if (v8)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v7 + 32))(v7);
  *((_BYTE *)v4 + 1057) = 1;
  v19 = *((_DWORD *)v4 + 6);
  v20 = *(_QWORD *)(a1 + 8);
  sub_22F0F0DB8(v20 + 8, *(_QWORD *)(a1 + 16));
  sub_22EF83BF4(v20, *(_QWORD *)(a1 + 16));
LABEL_31:
  LODWORD(v21) = *((_DWORD *)v4 + 6);
  while (v19 < v21)
  {
    v22 = (uint64_t)v4[2] + 32 * v21;
    v28 = 1;
    v23 = *(_QWORD *)(v22 - 8);
    if (!v23)
    {
      sub_22E4A06C4();
      sub_22F374EFC();
      return;
    }
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 48))(v23, &v28);
    v21 = (*((_DWORD *)v4 + 6) - 1);
    *((_DWORD *)v4 + 6) = v21;
    v24 = (uint64_t)v4[2] + 32 * v21;
    v25 = *(_QWORD **)(v24 + 24);
    if (v25 == (_QWORD *)v24)
    {
      v25 = (_QWORD *)((char *)v4[2] + 32 * v21);
      v26 = 4;
      goto LABEL_37;
    }
    if (v25)
    {
      v26 = 5;
LABEL_37:
      (*(void (**)(void))(*v25 + 8 * v26))();
      goto LABEL_31;
    }
  }
  if (*((char *)v4 + 1087) < 0)
    v27 = v4[134];
  else
    v27 = (llvm::raw_ostream *)*((unsigned __int8 *)v4 + 1087);
  std::string::resize((std::string *)(v4 + 133), (std::string::size_type)v27 - 2, 0);
}

