uint64_t sub_22F225504(uint64_t a1, llvm::Module *a2)
{
  _DWORD *v3;
  uint64_t GlobalVariable;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  llvm::GlobalObject *v12;
  _QWORD *SectionImpl;
  uint64_t v15;
  BOOL v16;
  unsigned int v18;
  const char *v19;
  char *v20;
  __int16 v21;
  void *v22;
  void *v23;
  _QWORD v24[3];
  void **v25;

  if (!*(_BYTE *)(a1 + 448))
    return 0;
  v3 = (_DWORD *)(a1 + 480);
  memset(v24, 0, sizeof(v24));
  sub_22F2256C4();
  sub_22F22570C(v3);
  llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run();
  if (v23 != v22)
    free(v23);
  if (v20 != v19)
    free(v20);
  v25 = (void **)v24;
  sub_22E3B4AF8(&v25);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
    goto LABEL_30;
  v5 = GlobalVariable;
  if ((llvm::Constant::isNullValue(*(llvm::Constant **)(GlobalVariable - 32)) & 1) != 0)
    goto LABEL_30;
  v6 = *(_QWORD *)(v5 - 32);
  v7 = *(_DWORD *)(v6 + 20);
  if ((v7 & 0x40000000) == 0)
  {
    v8 = v7 & 0x7FFFFFF;
    v9 = v6 - 32 * v8;
    if (!v8)
      goto LABEL_30;
LABEL_13:
    v11 = 32 * v8;
    while (1)
    {
      v12 = *(llvm::GlobalObject **)(*(_QWORD *)v9 - 32 * (*(_DWORD *)(*(_QWORD *)v9 + 20) & 0x7FFFFFF) + 32);
      if (v12 && *((_BYTE *)v12 + 16) == 0)
      {
        if ((*((_BYTE *)v12 + 34) & 0x40) == 0)
          break;
        SectionImpl = (_QWORD *)llvm::GlobalObject::getSectionImpl(v12);
        if (v15 != 19)
          break;
        v16 = *SectionImpl == 0x5F736C742E726961 && SectionImpl[1] == 0x695F636974617473;
        if (!v16 || *(_QWORD *)((char *)SectionImpl + 11) != 0x74696E695F636974)
          break;
      }
      v9 += 32;
      v11 -= 32;
      if (!v11)
        goto LABEL_30;
    }
    v18 = 0;
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(v6 - 8);
  v8 = v7 & 0x7FFFFFF;
  if (v8)
    goto LABEL_13;
LABEL_30:
  v18 = 1;
LABEL_31:
  v19 = "air.function_constants";
  v21 = 259;
  if (llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v19))
    return 1;
  else
    return v18;
}

void sub_22F2256C4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0258);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F22570C(_DWORD *a1)
{
  sub_22F227A98((uint64_t)(a1 + 12));
  sub_22F227AEC(a1 + 6);
  sub_22F2295D0((uint64_t)(a1 + 30));
  sub_22F22973C(a1 + 24);
  sub_22F227A98((uint64_t)(a1 + 48));
  sub_22F2297E8(a1 + 42);
  sub_22F22988C((uint64_t)(a1 + 66));
  sub_22F2298E0(a1 + 60);
}

void sub_22F225764()
{
  _DWORD *v0;
  void **v1;
  uint64_t v2;
  void (**v3)(void);
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  char *v42;
  void **v43;
  void *v44;
  char v45;
  uint64_t v46;
  llvm *v47;
  unsigned int v48;
  char v49;
  llvm *v50;
  unsigned int v51;
  void *v52;
  _DWORD v53[34];
  _QWORD v54[3];
  _QWORD *v55;
  void *v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  _BYTE v81[24];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  llvm *v87;
  unsigned int v88;
  char v89;
  llvm *v90;
  unsigned int v91;
  void *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;

  v0 = (_DWORD *)MEMORY[0x24BDAC7A8]();
  v95 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  v41 = 0;
  v42 = 0;
  sub_22F225DDC();
  LOBYTE(v56[0]) = 1;
  sub_22F22145C((uint64_t)&v40, (char *)v56);
  sub_22F21E7F0();
  sub_22F21E838();
  sub_22F225E24();
  v54[0] = &off_24FCB0318;
  v54[1] = v0;
  v55 = v54;
  LOBYTE(v56[0]) = 0;
  v56[1] = &off_24FCB0318;
  v57 = (uint64_t)v0;
  *((_QWORD *)&v58 + 1) = &v56[1];
  v59 = 0uLL;
  *(_QWORD *)&v60 = 0x800000000;
  sub_22F21E87C((uint64_t)&v40, (char *)v56);
  sub_22E3B3AD0((uint64_t)&v59);
  v1 = (void **)*((_QWORD *)&v58 + 1);
  if (*((void ***)&v58 + 1) == &v56[1])
  {
    v2 = 4;
    v1 = &v56[1];
  }
  else
  {
    if (!*((_QWORD *)&v58 + 1))
      goto LABEL_6;
    v2 = 5;
  }
  (*((void (**)(void))*v1 + v2))();
LABEL_6:
  if (v55 == v54)
  {
    v3 = (void (**)(void))(v54[0] + 32);
  }
  else
  {
    if (!v55)
      goto LABEL_11;
    v3 = (void (**)(void))(*v55 + 40);
  }
  (*v3)();
LABEL_11:
  sub_22F225E6C();
  if (!getenv("AIR_ENABLE_VM"))
  {
    sub_22F2256C4();
    v4 = (_QWORD *)operator new();
    v5 = v4;
    *v4 = &off_24FCB03A0;
    v6 = v41;
    if (v41 < v42)
    {
      *(_QWORD *)v41 = v4;
      v14 = v6 + 8;
    }
    else
    {
      v7 = v40;
      v8 = (v41 - v40) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v42 - v40;
      if ((v42 - v40) >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
      if (v6 == v7)
      {
        v40 = v13;
        v41 = v13 + 8;
        v42 = &v12[8 * v11];
      }
      else
      {
        do
        {
          v15 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v13 - 1) = v15;
          v13 -= 8;
        }
        while (v6 != v7);
        v6 = v40;
        v16 = v41;
        v40 = v13;
        v41 = v14;
        v42 = &v12[8 * v11];
        while (v16 != v6)
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          v17 = v18;
          *(_QWORD *)v16 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      if (v6)
        operator delete(v6);
    }
    v41 = v14;
  }
  LODWORD(v56[0]) = 2;
  sub_22F225EB0((uint64_t)&v40, (int *)v56);
  v39 = 0;
  llvm::SimplifyCFGPass::SimplifyCFGPass((llvm::SimplifyCFGPass *)v56);
  v19 = operator new();
  *(_OWORD *)(v19 + 8) = *(_OWORD *)v56;
  *(_QWORD *)(v19 + 24) = v57;
  *(_QWORD *)v19 = &off_24FCB0420;
  v20 = operator new(8uLL);
  *v20 = v19;
  v37 = v20;
  v38 = v20 + 1;
  llvm::InstCombinePass::InstCombinePass((llvm::InstCombinePass *)&v44);
  v21 = operator new();
  sub_22F22A87C((uint64_t)v56, (uint64_t)&v44);
  v94 = v53[32];
  *(_QWORD *)v21 = off_24FCB0460;
  sub_22F22A87C(v21 + 8, (uint64_t)v56);
  *(_DWORD *)(v21 + 2376) = v94;
  v22 = operator new(0x10uLL);
  v23 = v22 + 2;
  v24 = *v20;
  *v20 = 0;
  *v22 = v24;
  v22[1] = v21;
  v25 = v37;
  v26 = v38;
  v37 = v22;
  v39 = v22 + 2;
  while (v26 != v25)
  {
    v28 = *--v26;
    v27 = v28;
    *v26 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  if (v25)
    operator delete(v25);
  v38 = v23;
  if (v92 != &v93)
    free(v92);
  if ((v89 & 1) == 0)
    llvm::deallocate_buffer(v90, (void *)(8 * v91));
  llvm::deallocate_buffer(v87, (void *)(16 * v88));
  if (v56[0] != &v57)
    free(v56[0]);
  if (v52 != v53)
    free(v52);
  if ((v49 & 1) == 0)
    llvm::deallocate_buffer(v50, (void *)(8 * v51));
  llvm::deallocate_buffer(v47, (void *)(16 * v48));
  if (v44 != &v46)
    free(v44);
  v29 = (_QWORD *)operator new();
  v30 = v37;
  v31 = v39;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  *v29 = &off_24FCB04A0;
  v29[1] = v30;
  v29[2] = v23;
  v29[3] = v31;
  v57 = 0;
  v56[0] = 0;
  v56[1] = 0;
  v45 = 0;
  v43 = v56;
  v44 = v29;
  sub_22E3B4AF8(&v43);
  sub_22E3B9034();
  v32 = v44;
  v44 = 0;
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  v56[0] = &v37;
  sub_22E3B4AF8((void ***)v56);
  v84 = 0;
  v86 = 0u;
  *(_OWORD *)&v81[8] = 0u;
  v79 = 1065353216;
  v74 = 0;
  v76 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v56[0] = (char *)&v58 + 8;
  v56[1] = (char *)&v58 + 8;
  v57 = 32;
  *(_QWORD *)&v76 = 0;
  v75 = 0;
  DWORD2(v76) = 0;
  v77 = 0u;
  v78 = 0u;
  v80 = 0u;
  *(_OWORD *)v81 = 0u;
  *(_DWORD *)&v81[16] = 1065353216;
  v83 = 0;
  v82 = 0;
  *(_QWORD *)&v86 = 0;
  v85 = 0;
  DWORD2(v86) = 0;
  sub_22F21EA64((uint64_t)&v40, (uint64_t)v56);
  sub_22F227708((uint64_t)v56);
  sub_22F21EB20();
  sub_22F21EB64();
  sub_22F21EBA8();
  sub_22F225F1C();
  sub_22F225F60();
  sub_22F225FA8();
  sub_22F22570C(v0);
  llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run();
  if (v36 != v35)
    free(v36);
  if (v34 != v33)
    free(v34);
  v56[0] = &v40;
  sub_22E3B4AF8((void ***)v56);
}

void sub_22F225DDC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0298);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F225E24()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB02D8);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F225E6C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0360);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F225EB0(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_22E3BB3A0();
  v5 = *a2;
  *(_QWORD *)v4 = &off_24FCB03E0;
  *(_DWORD *)(v4 + 8) = v5;
  v17 = v4;
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
  {
    v7 = sub_22E3BB35C(v4);
    v15 = sub_22E3BB33C((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
    if (v15)
      sub_22E3BB368(v15);
  }
  else
  {
    sub_22E3BB384(v4, v6);
  }
  sub_22E3BB350();
}

void sub_22F225F1C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB04E0);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F225F60()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0520);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F225FA8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = (_QWORD *)sub_22F22AFD4();
  v1 = sub_22F22AFF0(v0, (uint64_t)&off_24FCB0560);
  if (v3)
  {
    v4 = sub_22E3BB35C((uint64_t)v1);
    v12 = sub_22E3BB33C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
    if (v12)
      sub_22E3BB368(v12);
  }
  else
  {
    sub_22E3BB384((uint64_t)v1, v2);
  }
  sub_22E3BB350();
}

void sub_22F225FEC(_DWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void (**v4)(void);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD *v11;
  void **v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  sub_22F225DDC();
  LOBYTE(v12) = 1;
  sub_22F22145C((uint64_t)v9, (char *)&v12);
  sub_22F21E7F0();
  sub_22F21E838();
  sub_22F225E24();
  v10[0] = &off_24FCB05A0;
  v10[1] = a1;
  v11 = v10;
  LOBYTE(v12) = 0;
  v13[0] = &off_24FCB05A0;
  v13[1] = a1;
  v14 = v13;
  v15[0] = 0;
  v15[1] = 0;
  v15[2] = 0x800000000;
  sub_22F21E87C((uint64_t)v9, (char *)&v12);
  sub_22E3B3AD0((uint64_t)v15);
  v2 = v14;
  if (v14 == v13)
  {
    v3 = 4;
    v2 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v11 == v10)
  {
    v4 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v4 = (void (**)(void))(*v11 + 40);
  }
  (*v4)();
LABEL_11:
  sub_22F225E6C();
  LODWORD(v12) = 0;
  sub_22F225EB0((uint64_t)v9, (int *)&v12);
  sub_22F21EB20();
  sub_22F21EB64();
  sub_22F21EBA8();
  sub_22F225F1C();
  sub_22F225F60();
  sub_22F225FA8();
  sub_22F22570C(a1);
  llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run();
  if (v8 != v7)
    free(v8);
  if (v6 != v5)
    free(v6);
  v12 = (void **)v9;
  sub_22E3B4AF8(&v12);
}

uint64_t sub_22F2261C8(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  _BYTE v6[72];
  void *v7;
  __int128 v8;
  _QWORD v9[17];

  v9[16] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a2 + 8) - 18) < 0xFFFFFFF7
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
  {
    v7 = v9;
    v8 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)v6, (uint64_t)&v7);
    v5[0] = MEMORY[0x24BED83F8] + 16;
    v5[1] = v6;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v5);
    switch(*(_BYTE *)(a2 + 12))
    {
      case 0:
        llvm::air::ErrorHandler::error();
        break;
      case 1:
        llvm::air::ErrorHandler::warning();
        break;
      case 2:
        llvm::air::ErrorHandler::remark();
        break;
      case 3:
        llvm::air::ErrorHandler::note();
        break;
      default:
        break;
    }
    *(_BYTE *)(a1 + 24) |= *(_BYTE *)(a2 + 12) == 0;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v6);
    if (v7 != v9)
      free(v7);
  }
  return 1;
}

_QWORD *sub_22F226394(_QWORD *a1, void *__src, size_t __len, void *a4, size_t a5, void *a6, size_t a7)
{
  void *v7;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a1 = 1;
  v7 = a1 + 1;
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_26:
    abort();
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    v7 = operator new(v15 + 1);
    a1[2] = __len;
    a1[3] = v16 | 0x8000000000000000;
    a1[1] = v7;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 31) = __len;
  if (__len)
LABEL_8:
    memmove(v7, __src, __len);
  *((_BYTE *)v7 + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_26;
  if (a5 >= 0x17)
  {
    v18 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v18 = a5 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    a1[5] = a5;
    a1[6] = v19 | 0x8000000000000000;
    a1[4] = v17;
    goto LABEL_16;
  }
  v17 = a1 + 4;
  *((_BYTE *)a1 + 55) = a5;
  if (a5)
LABEL_16:
    memmove(v17, a4, a5);
  *((_BYTE *)v17 + a5) = 0;
  if (a7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_26;
  if (a7 >= 0x17)
  {
    v21 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v21 = a7 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    a1[8] = a7;
    a1[9] = v22 | 0x8000000000000000;
    a1[7] = v20;
  }
  else
  {
    v20 = a1 + 7;
    *((_BYTE *)a1 + 79) = a7;
    if (!a7)
      goto LABEL_25;
  }
  memmove(v20, a6, a7);
LABEL_25:
  *((_BYTE *)v20 + a7) = 0;
  a1[10] = 0;
  a1[11] = 0;
  *((_DWORD *)a1 + 24) = 0;
  *((_BYTE *)a1 + 104) = 1;
  a1[15] = 0;
  a1[16] = 0;
  a1[14] = 0;
  return a1;
}

uint64_t sub_22F226544(uint64_t a1, llvm **a2)
{
  llvm *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a2;
  llvm::StringMapImpl::RemoveKey();
  v3 = *(_QWORD *)v2;
  v4 = (_QWORD *)*((_QWORD *)v2 + 2);
  if (v4 != (_QWORD *)((char *)v2 + 32))
    free(v4);
  return llvm::deallocate_buffer(v2, (void *)(v3 + 97));
}

void sub_22F22658C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        sub_22E576240(&v6);
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        if (*((char *)v4 - 49) < 0)
          operator delete(*(v4 - 9));
        if (*((char *)v4 - 73) < 0)
          operator delete(*(v4 - 12));
        v4 -= 13;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_22F226630(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (void *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F442F18(a1, v4, &v4[2 * v3]);
    return (void *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      return memset(result, 255, 16 * v10);
  }
  return result;
}

void sub_22F2266F4(char **a1, char *a2, __int128 *a3, __int128 *a4)
{
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  _QWORD *v52;

  v8 = *a1;
  v7 = (unint64_t)a1[1];
  v9 = a2 - *a1;
  v10 = v9 / 48;
  v11 = (uint64_t)&(*a1)[48 * (v9 / 48)];
  v12 = (unint64_t)a1[2];
  if (v7 < v12)
  {
    if (v11 == v7)
    {
      v24 = *a3;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v11 = v24;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
      v25 = &v8[48 * v10];
      v26 = *a4;
      *((_QWORD *)v25 + 5) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(v25 + 24) = v26;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      a1[1] = (char *)(v11 + 48);
    }
    else
    {
      v49 = *((_QWORD *)a3 + 2);
      *(_OWORD *)v48 = *a3;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
      *(_OWORD *)__p = *a4;
      v51 = *((_QWORD *)a4 + 2);
      v52 = a1 + 2;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      v13 = (unint64_t)a1[1];
      v14 = v11 + 48;
      v15 = v13 - 48;
      if (v13 < 0x30)
      {
        v17 = a1[1];
      }
      else
      {
        v16 = v13 - 48;
        v17 = a1[1];
        do
        {
          v18 = *(_OWORD *)v16;
          *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
          *(_OWORD *)v17 = v18;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)v16 = 0;
          v19 = *(_OWORD *)(v16 + 24);
          *((_QWORD *)v17 + 5) = *(_QWORD *)(v16 + 40);
          *(_OWORD *)(v17 + 24) = v19;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 40) = 0;
          *(_QWORD *)(v16 + 24) = 0;
          v17 += 48;
          v16 += 48;
        }
        while (v16 < v13);
      }
      a1[1] = v17;
      if (v13 != v14)
      {
        v30 = 16 * ((uint64_t)(v13 - v14) >> 4);
        do
        {
          v15 = sub_22F226B24(v15, (__int128 *)&v8[48 * v10 - 48 + v30]) - 48;
          v30 -= 48;
        }
        while (v30);
      }
      sub_22F226B24(v11, (__int128 *)v48);
      if (SHIBYTE(v51) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v49) < 0)
        operator delete(v48[0]);
    }
    return;
  }
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v8) >> 4) + 1;
  if (v20 > 0x555555555555555)
    abort();
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v8) >> 4);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x2AAAAAAAAAAAAAALL)
    v22 = 0x555555555555555;
  else
    v22 = v20;
  if (v22)
  {
    if (v22 > 0x555555555555555)
      goto LABEL_55;
    v23 = (char *)operator new(48 * v22);
  }
  else
  {
    v23 = 0;
  }
  v27 = &v23[48 * v10];
  v28 = &v23[48 * v22];
  if (v10 == v22)
  {
    if (v9 >= 1)
    {
      v29 = v10 + 2;
      if (v10 >= -1)
        v29 = v10 + 1;
      v27 -= 48 * (v29 >> 1);
      goto LABEL_36;
    }
    v31 = 2 * v10;
    if (v8 == a2)
      v31 = 1;
    if (v31 <= 0x555555555555555)
    {
      v32 = v31 >> 2;
      v33 = 3 * v31;
      v34 = (char *)operator new(48 * v31);
      v27 = &v34[48 * v32];
      v28 = &v34[16 * v33];
      if (v23)
      {
        v35 = &v34[16 * v33];
        operator delete(v23);
        v28 = v35;
      }
      goto LABEL_36;
    }
LABEL_55:
    sub_22E3B3F8C();
  }
LABEL_36:
  *(_OWORD *)v27 = *a3;
  *((_QWORD *)v27 + 2) = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v36 = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v27 + 24) = *a4;
  *((_QWORD *)v27 + 5) = v36;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  v37 = v27 + 48;
  v38 = *a1;
  if (*a1 == (char *)v11)
  {
    v40 = v27;
  }
  else
  {
    v39 = v11;
    do
    {
      v40 = v27 - 48;
      v41 = *(_OWORD *)(v39 - 48);
      *((_QWORD *)v27 - 4) = *(_QWORD *)(v39 - 32);
      *((_OWORD *)v27 - 3) = v41;
      *(_QWORD *)(v39 - 40) = 0;
      *(_QWORD *)(v39 - 32) = 0;
      *(_QWORD *)(v39 - 48) = 0;
      v42 = *(_OWORD *)(v39 - 24);
      *((_QWORD *)v27 - 1) = *(_QWORD *)(v39 - 8);
      *(_OWORD *)(v27 - 24) = v42;
      *(_QWORD *)(v39 - 16) = 0;
      *(_QWORD *)(v39 - 8) = 0;
      *(_QWORD *)(v39 - 24) = 0;
      v39 -= 48;
      v27 -= 48;
    }
    while ((char *)v39 != v38);
  }
  v43 = a1[1];
  if (v43 != (char *)v11)
  {
    do
    {
      v44 = *(_OWORD *)v11;
      *((_QWORD *)v37 + 2) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v37 = v44;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v45 = *(_OWORD *)(v11 + 24);
      *((_QWORD *)v37 + 5) = *(_QWORD *)(v11 + 40);
      *(_OWORD *)(v37 + 24) = v45;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      v37 += 48;
      v11 += 48;
    }
    while ((char *)v11 != v43);
    v11 = (uint64_t)a1[1];
  }
  v46 = *a1;
  *a1 = v40;
  a1[1] = v37;
  a1[2] = v28;
  while ((char *)v11 != v46)
  {
    if (*(char *)(v11 - 1) < 0)
      operator delete(*(void **)(v11 - 24));
    if (*(char *)(v11 - 25) < 0)
      operator delete(*(void **)(v11 - 48));
    v11 -= 48;
  }
  if (v46)
    operator delete(v46);
}

uint64_t sub_22F226B24(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

uint64_t sub_22F226BA4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 72);
  sub_22E576240(&v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_22F226C0C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 4);
        if (v4 - 8 != v6)
          free(v6);
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22F226C88(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (a1)
  {
    sub_22F226C88(*a1);
    sub_22F226C88(a1[1]);
    v2 = (std::__shared_weak_count *)a1[7];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)a1[5];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(a1);
  }
}

uint64_t sub_22F226D30(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  sub_22F242DFC(a1 + 296, *(_QWORD **)(a1 + 304));
  if (*(_BYTE *)(a1 + 288))
  {
    llvm::SHA256::~SHA256((llvm::SHA256 *)(a1 + 280));
    *(_BYTE *)(a1 + 288) = 0;
  }
  sub_22E3B4EF4(a1 + 184);
  sub_22E3B4AB8(a1 + 160, *(_QWORD **)(a1 + 168));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD **)(a1 + 80);
  if (v4 == (_QWORD *)(a1 + 56))
  {
    v9 = 4;
    v4 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v4)
      goto LABEL_9;
    v9 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v9))();
LABEL_9:
  v5 = *(_QWORD **)(a1 + 48);
  if (v5 == (_QWORD *)(a1 + 24))
  {
    v10 = 4;
    v5 = (_QWORD *)(a1 + 24);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v10))();
LABEL_11:
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    v7 = sub_22E3B46CC(v6);
    MEMORY[0x2348A0E9C](v7, 0x1032C40B18B30E6);
  }
  return a1;
}

uint64_t sub_22F226E3C(uint64_t a1, int a2, __int128 *a3, void *__src, size_t __len, void *a6, size_t a7, int a8, void *__srca, size_t __lena)
{
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  size_t v27;

  *(_DWORD *)a1 = 2;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  v16 = a1 + 40;
  if (*((char *)a3 + 23) < 0)
  {
    sub_22E3BB2B4((_BYTE *)v16, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v16 = v17;
  }
  v18 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a1 + 64) = v18;
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_29:
    abort();
  if (__len >= 0x17)
  {
    v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v20 = __len | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    *(_QWORD *)(a1 + 96) = __len;
    *(_QWORD *)(a1 + 104) = v21 | 0x8000000000000000;
    *(_QWORD *)(a1 + 88) = v19;
    goto LABEL_11;
  }
  v19 = (void *)(a1 + 88);
  *(_BYTE *)(a1 + 111) = __len;
  if (__len)
LABEL_11:
    memmove(v19, __src, __len);
  *((_BYTE *)v19 + __len) = 0;
  if (a7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_29;
  if (a7 >= 0x17)
  {
    v23 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v23 = a7 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)(a1 + 120) = a7;
    *(_QWORD *)(a1 + 128) = v24 | 0x8000000000000000;
    *(_QWORD *)(a1 + 112) = v22;
    goto LABEL_19;
  }
  v22 = (void *)(a1 + 112);
  *(_BYTE *)(a1 + 135) = a7;
  if (a7)
LABEL_19:
    memmove(v22, a6, a7);
  *((_BYTE *)v22 + a7) = 0;
  if (__lena > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_29;
  if (__lena >= 0x17)
  {
    v26 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17)
      v26 = __lena | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *(_QWORD *)(a1 + 144) = __lena;
    *(_QWORD *)(a1 + 152) = v27 | 0x8000000000000000;
    *(_QWORD *)(a1 + 136) = v25;
  }
  else
  {
    v25 = (void *)(a1 + 136);
    *(_BYTE *)(a1 + 159) = __lena;
    if (!__lena)
      goto LABEL_28;
  }
  memmove(v25, __srca, __lena);
LABEL_28:
  *((_BYTE *)v25 + __lena) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = a1 + 480;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  return a1;
}

_QWORD *sub_22F227074(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

uint64_t *sub_22F2270F4(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_22E49FD00((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

char *sub_22F2271B0(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_22E3B3F8C();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  while (v2 != v3)
  {
    v13 = *((_OWORD *)v2 - 1);
    v2 -= 16;
    *((_OWORD *)v11 - 1) = v13;
    v11 -= 16;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  while (v15 != v14)
  {
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v15 -= 16;
  }
  if (v14)
    operator delete(v14);
  return v12;
}

uint64_t sub_22F2272D4(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

_QWORD *sub_22F227394(uint64_t a1, uint64_t a2, _OWORD **a3, _QWORD **a4)
{
  _QWORD *result;
  _QWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_22E80A9B4(a1, &v13, a2);
  if (!*result)
  {
    v8 = result;
    v9 = operator new(0x38uLL);
    v10 = *a4;
    v9[2] = **a3;
    *((_DWORD *)v9 + 12) = *v10;
    v11 = v13;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v8 = v9;
    v12 = **(_QWORD **)a1;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v9 = (_OWORD *)*v8;
    }
    result = sub_22E49FD00(*(uint64_t **)(a1 + 8), (uint64_t *)v9);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

void ***sub_22F227440(void ****a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  void ***v10;
  uint64_t v11;
  void ***v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  void ***v16;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_22E3B3F8C();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = (void ***)&v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = (void ***)(v9 + 8);
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = (void ***)v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = (uint64_t)*--v14;
      *v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = (void ***)v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
      v16 = sub_22E3B4A60(v16 - 1);
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_22F227538(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  a1[1] = v2;
}

uint64_t sub_22F2275AC(uint64_t a1)
{
  void *v2;

  llvm::air::AIRMDGlobalsHandler::eraseUnreachableGlobals((llvm::air::AIRMDGlobalsHandler *)a1);
  llvm::air::AIRMDGlobalsHandler::rebuildCompilerUsedListImpl((llvm::air::AIRMDGlobalsHandler *)a1);
  llvm::deallocate_buffer(*(llvm **)(a1 + 64), (void *)(8 * *(unsigned int *)(a1 + 80)));
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 16), (void *)(8 * *(unsigned int *)(a1 + 32)));
  return a1;
}

uint64_t sub_22F227614(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 504);
  if (v2 != (void *)(a1 + 520))
    free(v2);
  v3 = *(void **)(a1 + 456);
  if (v3 != (void *)(a1 + 472))
    free(v3);
  v4 = *(void **)(a1 + 408);
  if (v4 != (void *)(a1 + 424))
    free(v4);
  v5 = *(void **)(a1 + 360);
  if (v5 != (void *)(a1 + 376))
    free(v5);
  v6 = *(void **)(a1 + 280);
  if (v6 != (void *)(a1 + 296))
    free(v6);
  v7 = *(void **)(a1 + 200);
  if (v7 != (void *)(a1 + 216))
    free(v7);
  v8 = *(void **)(a1 + 168);
  if (v8 != (void *)(a1 + 184))
    free(v8);
  v9 = *(void **)(a1 + 120);
  if (v9 != (void *)(a1 + 136))
    free(v9);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22F227708(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;

  v2 = *(_DWORD *)(a1 + 432);
  v3 = *(llvm **)(a1 + 416);
  if (v2)
  {
    v22 = (void **)((char *)v3 + 16);
    v23 = 104 * v2;
    do
    {
      if (((unint64_t)*(v22 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v22 != *(v22 - 1))
        free(*v22);
      v22 += 13;
      v23 -= 104;
    }
    while (v23);
    v3 = *(llvm **)(a1 + 416);
    v4 = 104 * *(unsigned int *)(a1 + 432);
  }
  else
  {
    v4 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v4);
  v5 = *(unsigned int *)(a1 + 408);
  v6 = *(llvm **)(a1 + 392);
  if ((_DWORD)v5)
  {
    v24 = *(_QWORD *)(a1 + 392);
    v25 = 112 * v5;
    do
    {
      if ((*(_QWORD *)v24 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_22F258024(*(_QWORD **)(v24 + 96));
        v26 = *(void **)(v24 + 8);
        if ((void *)(v24 + 24) != v26)
          free(v26);
      }
      v24 += 112;
      v25 -= 112;
    }
    while (v25);
    v6 = *(llvm **)(a1 + 392);
    v7 = 112 * *(unsigned int *)(a1 + 408);
  }
  else
  {
    v7 = 0;
  }
  llvm::deallocate_buffer(v6, (void *)v7);
  v8 = *(_QWORD **)(a1 + 368);
  if (v8)
  {
    do
    {
      v27 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v27;
    }
    while (v27);
  }
  v9 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(_QWORD **)(a1 + 328);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      v12 = (void *)v10[4];
      if (v12 != (void *)v10[3])
        free(v12);
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v13 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v13)
    operator delete(v13);
  v14 = *(unsigned int *)(a1 + 304);
  v15 = *(llvm **)(a1 + 288);
  if ((_DWORD)v14)
  {
    v17 = (void **)((char *)v15 + 16);
    v18 = 72 * v14;
    do
    {
      v19 = (uint64_t)*(v17 - 2);
      if (v19 != -4096 && v19 != -8192 && *v17 != *(v17 - 1))
        free(*v17);
      v17 += 9;
      v18 -= 72;
    }
    while (v18);
    v15 = *(llvm **)(a1 + 288);
    v16 = 72 * *(unsigned int *)(a1 + 304);
  }
  else
  {
    v16 = 0;
  }
  llvm::deallocate_buffer(v15, (void *)v16);
  v20 = *(void **)(a1 + 8);
  if (v20 != *(void **)a1)
    free(v20);
  return a1;
}

uint64_t sub_22F2278FC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2224);
  if (v2 != (void *)(a1 + 2240))
    free(v2);
  if ((*(_BYTE *)(a1 + 2088) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 2096), (void *)(8 * *(unsigned int *)(a1 + 2104)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2064), (void *)(16 * *(unsigned int *)(a1 + 2080)));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22F227980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;

  *(_QWORD *)a1 = &off_24FCAFD08;
  v2 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v2)
  {
    v3 = sub_22E3B45BC(v2);
    MEMORY[0x2348A0E9C](v3, 0x10B2C408BDE5BD4);
  }
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  v5 = (void **)(a1 + 112);
  sub_22E3B4D60(&v5);
  v5 = (void **)(a1 + 88);
  sub_22F215374(&v5);
  *(_QWORD *)a1 = &unk_24FCAEDD8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_22F227A38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24FCAFD30;
  v2 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v2)
  {
    v3 = sub_22E3B46CC(v2);
    MEMORY[0x2348A0E9C](v3, 0x1032C40B18B30E6);
  }
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  return sub_22F215594(a1);
}

uint64_t sub_22F227A98(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(_DWORD *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if (v1)
      {
        v2 = *(_QWORD **)result;
        v3 = *(_QWORD *)result + 24 * v1;
        do
        {
          *v2 = -4096;
          v2[1] = -4096;
          v2 += 3;
        }
        while (v2 != (_QWORD *)v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22F227BA4(result);
    }
  }
  return result;
}

void sub_22F227AEC(_DWORD *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = a1[2];
  if (v1 || a1[3])
  {
    v2 = a1[4];
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_22F227CBC(a1);
      return;
    }
    if ((_DWORD)v2)
    {
      v3 = 32 * v2;
      v4 = (uint64_t *)(*(_QWORD *)a1 + 8);
      while (1)
      {
        v5 = *(v4 - 1);
        if (v5 == -8192)
          goto LABEL_11;
        if (v5 != -4096)
          break;
LABEL_12:
        v4 += 4;
        v3 -= 32;
        if (!v3)
          goto LABEL_13;
      }
      sub_22E3BADCC(v4);
LABEL_11:
      *(v4 - 1) = -4096;
      goto LABEL_12;
    }
LABEL_13:
    *((_QWORD *)a1 + 1) = 0;
  }
}

uint64_t sub_22F227BA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  int64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 24 * v2;
      v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *(int64x2_t *)v6 = v8;
        v6 = (llvm *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(24 * v2));
    if (v5)
    {
      v9 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v10;
      result = MEMORY[0x23489D23C](24 * v10, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v11 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v11)
      {
        v12 = 24 * v11;
        v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *(int64x2_t *)result = v13;
          result += 24;
          v12 -= 24;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

void sub_22F227CBC(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  llvm *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[4];
  v3 = a1[2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_22E3BADCC(v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
  {
    v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
    v8 = *(llvm **)a1;
    if (v7 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v9 = 32 * v7;
      do
      {
        *(_QWORD *)v8 = -4096;
        v8 = (llvm *)((char *)v8 + 32);
        v9 -= 32;
      }
      while (v9);
    }
    else
    {
      llvm::deallocate_buffer(v8, (void *)(32 * v2));
      v10 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      a1[4] = v11;
      v12 = (_QWORD *)MEMORY[0x23489D23C](32 * v11, 8);
      *(_QWORD *)a1 = v12;
      *((_QWORD *)a1 + 1) = 0;
      v13 = a1[4];
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          *v12 = -4096;
          v12 += 4;
          v14 -= 32;
        }
        while (v14);
      }
    }
  }
  else if (a1[4])
  {
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * v2));
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

uint64_t sub_22F227E14(uint64_t *a1, void *__src, size_t __n, char *a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  char *v19;
  void *__p;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v12 = 0x492492492492492;
  else
    v12 = v6;
  v25 = a1 + 2;
  if (v12)
  {
    if (v12 > 0x492492492492492)
      sub_22E3B3F8C();
    v13 = (char *)operator new(56 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[56 * v5];
  __p = v13;
  v22 = v14;
  v24 = &v13[56 * v12];
  *(_QWORD *)v14 = v14 + 24;
  *(_OWORD *)(v14 + 8) = xmmword_22F44E350;
  if (__n >= 0x11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v15 = *((_QWORD *)v14 + 1);
    goto LABEL_13;
  }
  v15 = 0;
  if (__n)
  {
LABEL_13:
    memcpy((void *)(*(_QWORD *)v14 + v15), __src, __n);
    v15 = *((_QWORD *)v14 + 1);
  }
  *((_QWORD *)v14 + 1) = v15 + __n;
  v14[40] = *a4;
  v16 = *a5;
  *a5 = 0;
  *((_QWORD *)v14 + 6) = v16;
  v23 = (uint64_t)(v14 + 56);
  sub_22F443444(a1, &__p);
  v17 = a1[1];
  v19 = v22;
  for (i = v23; (char *)i != v19; i = sub_22F440308(i - 56))
    ;
  if (__p)
    operator delete(__p);
  return v17;
}

uint64_t *sub_22F227FC8(uint64_t *result, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = v8 - 1;
    v11 = (37 * *a3) & (v8 - 1);
    v12 = *(_QWORD *)a2 + 16 * v11;
    v13 = *(_QWORD *)v12;
    if (*a3 == *(_QWORD *)v12)
    {
LABEL_3:
      v14 = 0;
      goto LABEL_10;
    }
    v16 = 0;
    v17 = 1;
    while (v13 != -4094)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v13 == -8190;
      if (v18)
        v16 = v12;
      v19 = v11 + v17++;
      v11 = v19 & v10;
      v12 = v9 + 16 * (v19 & v10);
      v13 = *(_QWORD *)v12;
      if (*a3 == *(_QWORD *)v12)
        goto LABEL_3;
    }
    if (v16)
      v12 = v16;
  }
  else
  {
    v12 = 0;
  }
  v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v8)
  {
    result = sub_22F228204(a2, 2 * v8);
    v20 = *(_DWORD *)(a2 + 16);
    if (v20)
    {
      v21 = v20 - 1;
      v22 = (37 * *a3) & (v20 - 1);
      v12 = *(_QWORD *)a2 + 16 * v22;
      v23 = *(_QWORD *)v12;
      if (*a3 == *(_QWORD *)v12)
        goto LABEL_7;
      v24 = 0;
      v25 = 1;
      while (v23 != -4094)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -8190;
        if (v26)
          v24 = v12;
        v27 = v22 + v25++;
        v22 = v27 & v21;
        v12 = *(_QWORD *)a2 + 16 * (v27 & v21);
        v23 = *(_QWORD *)v12;
        if (*a3 == *(_QWORD *)v12)
          goto LABEL_7;
      }
LABEL_46:
      if (v24)
        v12 = v24;
      goto LABEL_7;
    }
LABEL_45:
    v12 = 0;
    goto LABEL_7;
  }
  if (v8 + ~v15 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
    result = sub_22F228204(a2, v8);
    v28 = *(_DWORD *)(a2 + 16);
    if (v28)
    {
      v29 = v28 - 1;
      v30 = (37 * *a3) & (v28 - 1);
      v12 = *(_QWORD *)a2 + 16 * v30;
      v31 = *(_QWORD *)v12;
      if (*a3 == *(_QWORD *)v12)
        goto LABEL_7;
      v24 = 0;
      v32 = 1;
      while (v31 != -4094)
      {
        if (v24)
          v33 = 0;
        else
          v33 = v31 == -8190;
        if (v33)
          v24 = v12;
        v34 = v30 + v32++;
        v30 = v34 & v29;
        v12 = *(_QWORD *)a2 + 16 * (v34 & v29);
        v31 = *(_QWORD *)v12;
        if (*a3 == *(_QWORD *)v12)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v12 != -4094)
    --*(_DWORD *)(a2 + 12);
  *(_QWORD *)v12 = *a3;
  *(_DWORD *)(v12 + 8) = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v14 = 1;
LABEL_10:
  *v7 = v12;
  v7[1] = v9 + 16 * v8;
  *((_BYTE *)v7 + 16) = v14;
  return result;
}

_QWORD *sub_22F228204(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  llvm *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4094;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *(_QWORD *)v12;
        if ((*(_QWORD *)v12 | 0x1000) != 0xFFFFFFFFFFFFF002)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & (37 * v13);
          v16 = *(_QWORD *)a1 + 16 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4094)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8190;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *(_QWORD *)a1 + 16 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v12 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v12 = (llvm *)((char *)v12 + 16);
      }
      while (v12 != (llvm *)((char *)v4 + 16 * v3));
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 16 * v22;
      do
      {
        *result = -4094;
        result += 2;
        v23 -= 16;
      }
      while (v23);
    }
  }
  return result;
}

char *sub_22F228388(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8 >> 60)
    sub_22E3B3F8C();
  v10 = (char *)operator new(16 * v8);
  v11 = &v10[16 * v4];
  v12 = &v10[16 * v8];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v13 = v11 + 16;
  *(_QWORD *)(a2 + 8) = 2;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    if (!v2)
      return v13;
    goto LABEL_14;
  }
  v14 = v3;
  do
  {
    v15 = *(v14 - 2);
    v14 -= 2;
    *((_QWORD *)v11 - 2) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v14[1];
    v14[1] = 2;
  }
  while (v14 != v2);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v12;
  do
  {
    sub_22E3B4400(v3 - 1);
    v3 -= 2;
  }
  while (v3 != v2);
  if (v2)
LABEL_14:
    operator delete(v2);
  return v13;
}

void sub_22F228494(void **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  void **v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  void **v27;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v4 - (_BYTE *)*a1) >> 3);
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x276276276276276)
      abort();
    v12 = 0x4EC4EC4EC4EC4EC5 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    if (v11 > 0x276276276276276)
      sub_22E3B3F8C();
    v13 = 104 * v11;
    v14 = (char *)operator new(104 * v11);
    v15 = &v14[104 * v10];
    *(_QWORD *)v15 = *(_QWORD *)a2;
    v16 = &v14[v13];
    *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_OWORD *)v15 + 2) = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v15 + 6) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    v17 = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v15 + 9) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(v15 + 56) = v17;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *((_QWORD *)v15 + 11) = 0;
    *((_QWORD *)v15 + 12) = 0;
    *((_OWORD *)v15 + 5) = *(_OWORD *)(a2 + 80);
    *((_QWORD *)v15 + 12) = *(_QWORD *)(a2 + 96);
    v9 = v15 + 104;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    v18 = (char *)*a1;
    v19 = (void **)a1[1];
    if (v19 == *a1)
    {
      *a1 = v15;
      a1[1] = v9;
      a1[2] = v16;
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = &v15[v20 * 8];
        v22 = (char *)&v19[v20];
        *((_QWORD *)v21 - 13) = v19[v20 - 13];
        v23 = *(_OWORD *)&v19[v20 - 12];
        *((_QWORD *)v21 - 10) = v19[v20 - 10];
        *((_OWORD *)v21 - 6) = v23;
        *((_QWORD *)v22 - 11) = 0;
        *((_QWORD *)v22 - 10) = 0;
        *((_QWORD *)v22 - 12) = 0;
        v24 = *(_OWORD *)&v19[v20 - 9];
        *((_QWORD *)v21 - 7) = v19[v20 - 7];
        *(_OWORD *)(v21 - 72) = v24;
        *((_QWORD *)v22 - 8) = 0;
        *((_QWORD *)v22 - 7) = 0;
        *((_QWORD *)v22 - 9) = 0;
        v25 = *(_OWORD *)&v19[v20 - 6];
        *((_QWORD *)v21 - 4) = v19[v20 - 4];
        *((_OWORD *)v21 - 3) = v25;
        *((_QWORD *)v22 - 5) = 0;
        *((_QWORD *)v22 - 4) = 0;
        *((_QWORD *)v22 - 6) = 0;
        *(_OWORD *)(v21 - 24) = *(_OWORD *)&v19[v20 - 3];
        *((_QWORD *)v21 - 1) = v19[v20 - 1];
        *((_QWORD *)v22 - 3) = 0;
        *((_QWORD *)v22 - 2) = 0;
        *((_QWORD *)v22 - 1) = 0;
        v20 -= 13;
      }
      while (&v19[v20] != (void **)v18);
      v19 = (void **)*a1;
      v26 = (void **)a1[1];
      *a1 = &v15[v20 * 8];
      a1[1] = v9;
      a1[2] = v16;
      while (v26 != v19)
      {
        v27 = v26 - 3;
        sub_22E576240(&v27);
        if (*((char *)v26 - 25) < 0)
          operator delete(*(v26 - 6));
        if (*((char *)v26 - 49) < 0)
          operator delete(*(v26 - 9));
        if (*((char *)v26 - 73) < 0)
          operator delete(*(v26 - 12));
        v26 -= 13;
      }
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v6 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v4 + 2) = v7;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v8 = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v4 + 9) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(v4 + 56) = v8;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *((_QWORD *)v4 + 10) = 0;
    *((_QWORD *)v4 + 11) = 0;
    *((_QWORD *)v4 + 12) = 0;
    *((_OWORD *)v4 + 5) = *(_OWORD *)(a2 + 80);
    *((_QWORD *)v4 + 12) = *(_QWORD *)(a2 + 96);
    v9 = v4 + 104;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  a1[1] = v9;
}

void sub_22F228754(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (void *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_22F443928(a1, v4, &v4[v3]);
    llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      memset_pattern16(v9, &unk_22F54B070, 8 * v10);
  }
}

char *sub_22F22881C(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_22E3B3F8C();
  v8 = 3 * v5;
  v9 = (char *)operator new(24 * v5);
  v10 = &v9[24 * v4];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  v11 = v10 + 24;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (v2 != v3)
  {
    v12 = *((_QWORD *)v2 - 3);
    v2 -= 24;
    *((_QWORD *)v10 - 3) = v12;
    v10 -= 24;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)(v2 + 8);
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
  }
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[8 * v8];
  while (v14 != v13)
  {
    v15 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v14 -= 24;
  }
  if (v13)
    operator delete(v13);
  return v11;
}

char *sub_22F228968(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 **a6)
{
  __int128 v11;
  _BYTE *v12;
  __int128 v13;
  _BYTE *v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v11;
  }
  v12 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_22E3BB2B4(v12, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v12 = v13;
  }
  v14 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_22E3BB2B4(v14, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v15 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v14 = v15;
  }
  v16 = __dst + 72;
  if (*((char *)a5 + 23) < 0)
  {
    sub_22E3BB2B4(v16, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v17 = *a5;
    *((_QWORD *)__dst + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v16 = v17;
  }
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  *((_QWORD *)__dst + 12) = 0;
  sub_22E6C9644(__dst + 96, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (a6[1] - *a6));
  return __dst;
}

uint64_t sub_22F228A74(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 96);
  sub_22E576240(&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_22F228AEC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!a2)
    return (uint64_t *)(a1 + 16 * a2);
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  v4 = (uint64_t *)(a1 + 16 * v3);
  v5 = *v4;
  if (a3 != *v4)
  {
    v6 = 1;
    while (v5 != -4094)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v5 = *(_QWORD *)(a1 + 16 * v3);
      if (a3 == v5)
        return (uint64_t *)(a1 + 16 * v3);
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

_QWORD *sub_22F228B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    sub_22E3B3F8C();
  v12 = (char *)operator new(16 * v9);
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v16 = &v12[16 * v9];
  v17 = v13 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v4 - 1);
      v4 -= 2;
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 16;
      *v4 = 0;
      v4[1] = 0;
    }
    while (v4 != v3);
    v3 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    while (v19 != v3)
    {
      v20 = (std::__shared_weak_count *)*(v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 2;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_22F228C90()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F228CA4()
{
  return llvm::TracepointFinalizerPass::run();
}

uint64_t sub_22F228CB0()
{
  return 1;
}

char *sub_22F228CB8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x4F)
    v1 = v0;
  else
    v1 = 79;
  v2 = &aStringrefLlvmG_10[v1];
  v3 = 79 - v1;
  if ((unint64_t)(79 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 79 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F228D6C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F228D80()
{
  return llvm::air::AIRExternallyInitializedInitializationPass::run();
}

uint64_t sub_22F228D8C()
{
  return 1;
}

char *sub_22F228D94()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x67)
    v1 = v0;
  else
    v1 = 103;
  v2 = &aStringrefLlvmG_11[v1];
  v3 = 103 - v1;
  if ((unint64_t)(103 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 103 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F228E4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F228E60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FCAFFC8;
  result[1] = v3;
  return result;
}

uint64_t sub_22F228E94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FCAFFC8;
  a2[1] = v2;
  return result;
}

BOOL sub_22F228EB0(uint64_t a1, llvm::Value *this)
{
  uint64_t v3;
  _QWORD v4[3];

  if ((*((_DWORD *)this + 8) & 0xF) == 6)
    return 1;
  v3 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 4304);
  llvm::Value::getName(this);
  sub_22F2228A0(v4, v3);
  return v4[0] != *(_QWORD *)(v3 + 80) + 8 * *(unsigned int *)(v3 + 88);
}

void sub_22F228F28(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24FCB0010;
  sub_22E3B3AD0((uint64_t)(a1 + 6));
  v2 = (_QWORD *)a1[5];
  if (v2 == a1 + 2)
  {
    v3 = 4;
    v2 = a1 + 2;
  }
  else
  {
    if (!v2)
LABEL_7:
      JUMPOUT(0x2348A0E9CLL);
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_7;
}

uint64_t sub_22F228F98()
{
  return llvm::InternalizePass::run();
}

uint64_t sub_22F228FA4()
{
  return 0;
}

char *sub_22F228FAC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x47)
    v1 = v0;
  else
    v1 = 71;
  v2 = &aStringrefLlvmG_12[v1];
  v3 = 71 - v1;
  if ((unint64_t)(71 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 71 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_22F229060(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  result = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_DWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_DWORD *)(result + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a2 + 296) = 0;
  v4 = *(_DWORD *)(result + 300);
  *(_DWORD *)(result + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a2 + 300) = v4;
  v5 = *(_DWORD *)(result + 304);
  *(_DWORD *)(result + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = v5;
  v6 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(result + 312) = v6;
  *(_QWORD *)(result + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v7 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(result + 328) = v7;
  v8 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(result + 336) = v8;
  *(_DWORD *)(result + 344) = *(_DWORD *)(a2 + 344);
  if (v8)
  {
    v16 = *(_QWORD *)(v7 + 8);
    v17 = *(_QWORD *)(result + 320);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17)
        v16 %= v17;
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(_QWORD *)(v6 + 8 * v16) = result + 328;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
  }
  v9 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(result + 352) = v9;
  *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  v10 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(result + 368) = v10;
  v11 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(result + 376) = v11;
  *(_DWORD *)(result + 384) = *(_DWORD *)(a2 + 384);
  if (v11)
  {
    v18 = *(_QWORD *)(v10 + 8);
    v19 = *(_QWORD *)(result + 360);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19)
        v18 %= v19;
    }
    else
    {
      v18 &= v19 - 1;
    }
    *(_QWORD *)(v9 + 8 * v18) = result + 368;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 376) = 0;
  }
  *(_QWORD *)(result + 392) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_DWORD *)(result + 408) = 0;
  *(_QWORD *)(result + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  *(_DWORD *)(result + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a2 + 400) = 0;
  v12 = *(_DWORD *)(result + 404);
  *(_DWORD *)(result + 404) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a2 + 404) = v12;
  v13 = *(_DWORD *)(result + 408);
  *(_DWORD *)(result + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a2 + 408) = v13;
  *(_QWORD *)(result + 416) = 0;
  *(_QWORD *)(result + 424) = 0;
  *(_DWORD *)(result + 432) = 0;
  *(_QWORD *)(result + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_DWORD *)(result + 424) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a2 + 424) = 0;
  v14 = *(_DWORD *)(result + 428);
  *(_DWORD *)(result + 428) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a2 + 428) = v14;
  v15 = *(_DWORD *)(result + 432);
  *(_DWORD *)(result + 432) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a2 + 432) = v15;
  return result;
}

void sub_22F229234(_QWORD *a1)
{
  *a1 = &off_24FCB0050;
  sub_22F227708((uint64_t)(a1 + 1));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F229274()
{
  return llvm::GlobalDCEPass::run();
}

uint64_t sub_22F229280()
{
  return 0;
}

char *sub_22F229288()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x45)
    v1 = v0;
  else
    v1 = 69;
  v2 = &aStringrefLlvmG_13[v1];
  v3 = 69 - v1;
  if ((unint64_t)(69 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 69 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22933C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F229350()
{
  return llvm::air::AIRDyldTablePrunerPass::run();
}

uint64_t sub_22F22935C()
{
  return 1;
}

char *sub_22F229364()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x53)
    v1 = v0;
  else
    v1 = 83;
  v2 = &aStringrefLlvmG_14[v1];
  v3 = 83 - v1;
  if ((unint64_t)(83 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 83 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F229418()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22942C()
{
  return llvm::air::AIRMetadataPrunerPass::run();
}

uint64_t sub_22F229438()
{
  return 1;
}

char *sub_22F229440()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x52)
    v1 = v0;
  else
    v1 = 82;
  v2 = &aStringrefLlvmG_15[v1];
  v3 = 82 - v1;
  if ((unint64_t)(82 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 82 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F2294F4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F229508()
{
  return llvm::air::AIRFunctionConstantsRequiredPass::run();
}

uint64_t sub_22F229514()
{
  return 1;
}

char *sub_22F22951C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x5D)
    v1 = v0;
  else
    v1 = 93;
  v2 = &aStringrefLlvmG_16[v1];
  v3 = 93 - v1;
  if ((unint64_t)(93 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 93 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_22F2295D0(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  int64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  llvm *v14;
  uint64_t v15;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 16);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
LABEL_20:
      if (v3)
      {
        v14 = *(llvm **)result;
        v15 = *(_QWORD *)result + 24 * v3;
        do
        {
          *(_QWORD *)v14 = -4096;
          *((_QWORD *)v14 + 1) = -4096;
          v14 = (llvm *)((char *)v14 + 24);
        }
        while (v14 != (llvm *)v15);
      }
      *(_QWORD *)(result + 8) = 0;
      return result;
    }
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
  }
  else
  {
    if (!*(_DWORD *)(result + 12))
      return result;
    v3 = *(_DWORD *)(result + 16);
    if (v3 <= 0x40)
      goto LABEL_20;
    v5 = 0;
  }
  if (v5 == v3)
  {
    *(_QWORD *)(result + 8) = 0;
    v6 = *(_OWORD **)result;
    v7 = 24 * v3;
    v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v6 = v8;
      v6 = (_OWORD *)((char *)v6 + 24);
      v7 -= 24;
    }
    while (v7);
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(24 * v3));
    if (v5)
    {
      v9 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v10;
      result = MEMORY[0x23489D23C](24 * v10, 8);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v11 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v11)
      {
        v12 = 24 * v11;
        v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *(int64x2_t *)result = v13;
          result += 24;
          v12 -= 24;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

void sub_22F22973C(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_22F227CBC(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 32 * v3;
        v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
        do
        {
          v6 = *(v5 - 1);
          if (v6 != -4096)
          {
            if (v6 != -8192)
              sub_22E3BADCC(v5);
            *(v5 - 1) = -4096;
          }
          v5 += 4;
          v4 -= 32;
        }
        while (v4);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
}

void sub_22F2297E8(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_22F227CBC(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 32 * v3;
        v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
        do
        {
          v6 = *(v5 - 1);
          if (v6 != -4096)
          {
            if (v6 != -8192)
              sub_22E3BADCC(v5);
            *(v5 - 1) = -4096;
          }
          v5 += 4;
          v4 -= 32;
        }
        while (v4);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
}

uint64_t sub_22F22988C(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(_DWORD *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_22F227BA4(result);
    }
    else
    {
      if (v1)
      {
        v2 = *(_QWORD **)result;
        v3 = *(_QWORD *)result + 24 * v1;
        do
        {
          *v2 = -4096;
          v2[1] = -4096;
          v2 += 3;
        }
        while (v2 != (_QWORD *)v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

void sub_22F2298E0(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_22F227CBC(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 32 * v3;
        v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
        do
        {
          v6 = *(v5 - 1);
          if (v6 != -4096)
          {
            if (v6 != -8192)
              sub_22E3BADCC(v5);
            *(v5 - 1) = -4096;
          }
          v5 += 4;
          v4 -= 32;
        }
        while (v4);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
}

uint64_t sub_22F22998C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *(v4 - 3);
    v4 -= 3;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      v6 = MEMORY[0x23489F15C]();
      result = MEMORY[0x2348A0E9C](v6, 0x10B2C407FF26C1CLL);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *sub_22F2299F0(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a2[3];
    v5 = v3 - 1;
    v6 = ((v4 >> 4) ^ (v4 >> 9)) & v5;
    v7 = (_QWORD *)(*(_QWORD *)a1 + (v6 << 6));
    v8 = v7[3];
    if (v4 == v8)
      return v7;
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(*(_QWORD *)a1 + (v6 << 6));
      v8 = v7[3];
      if (v4 == v8)
        return v7;
    }
    if (v9)
      v13 = (uint64_t)v9;
    else
      v13 = (uint64_t)v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = (_QWORD *)sub_22E610DC0(a1, (uint64_t)a2, (uint64_t)a2, v13);
  v14 = v7[3];
  v15 = a2[3];
  if (v14 != v15)
  {
    v16 = v14 == -4096 || v14 == 0;
    if (!v16 && v14 != -8192)
    {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v7 + 1));
      v15 = a2[3];
    }
    v7[3] = v15;
    if (v15 != -4096 && v15 != -8192 && v15)
      llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)(v7 + 1), (llvm::ValueHandleBase **)(a2[1] & 0xFFFFFFFFFFFFFFF8));
  }
  v7[4] = a2[4];
  v7[5] = 6;
  v7[6] = 0;
  v7[7] = 0;
  return v7;
}

_QWORD *sub_22F229B18(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v5;
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    sub_22E3B3F8C();
  v11 = 3 * v7;
  v12 = (char *)operator new(24 * v7);
  v13 = &v12[24 * v4];
  v14 = &v12[8 * v11];
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)v13 = v15;
  *((_QWORD *)v13 + 1) = a3;
  *((_QWORD *)v13 + 2) = a4;
  v16 = v13 + 24;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 == *a1)
  {
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
  }
  else
  {
    do
    {
      v19 = *((_QWORD *)v18 - 3);
      v18 -= 24;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v13 - 3) = v19;
      v13 -= 24;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v18 + 8);
    }
    while (v18 != v17);
    v18 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    while (v20 != v18)
    {
      v21 = *((_QWORD *)v20 - 3);
      v20 -= 24;
      *(_QWORD *)v20 = 0;
      if (v21)
      {
        v22 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v22, 0x10B2C407FF26C1CLL);
      }
    }
  }
  if (v18)
    operator delete(v18);
  return v16;
}

void sub_22F229C64()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F229C78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FCB0150;
  result[1] = v3;
  return result;
}

uint64_t sub_22F229CAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FCB0150;
  a2[1] = v2;
  return result;
}

BOOL sub_22F229CC8(uint64_t a1, llvm::Value *a2)
{
  return sub_22F444018(*(uint64_t **)(*(_QWORD *)(a1 + 8) + 4304), a2);
}

void sub_22F229CD4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F229CE8()
{
  return llvm::AlwaysInlinerPass::run();
}

uint64_t sub_22F229CF4()
{
  return 1;
}

char *sub_22F229CFC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x49)
    v1 = v0;
  else
    v1 = 73;
  v2 = &aStringrefLlvmG_17[v1];
  v3 = 73 - v1;
  if ((unint64_t)(73 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 73 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F229DB4()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F229DC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FCB01D8;
  result[1] = v3;
  return result;
}

uint64_t sub_22F229DFC(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24FCB01D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_22F229E1C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *i;
  _QWORD *v6;
  llvm::Value *NamedValue;
  int Key;
  int v9;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v17;
  int v18;

  v3 = *(_QWORD *)(a1 + 8);
  sub_22F444150((llvm::StringMapImpl *)&v17, a3);
  if (v18)
  {
    for (i = v17; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = v17;
  }
  v6 = &v17[v18];
  while (i != v6)
  {
    NamedValue = (llvm::Value *)llvm::Module::getNamedValue();
    llvm::Value::getName(NamedValue);
    Key = llvm::StringMapImpl::FindKey();
    v9 = *((_DWORD *)NamedValue + 8);
    if (((v9 & 0x30) == 0x10 || Key == (unint64_t)*(unsigned int *)(v3 + 8) || Key == -1) && (v9 & 0xF) != 6)
    {
      *((_DWORD *)NamedValue + 8) = v9 & 0xFFFFFFF0 | 3;
      if ((v9 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(NamedValue) & 1) == 0)
        *((_DWORD *)NamedValue + 8) |= 0x4000u;
    }
    do
    {
      v14 = i[1];
      ++i;
      v13 = v14;
      if (v14)
        v15 = v13 == -8;
      else
        v15 = 1;
    }
    while (v15);
  }
  return sub_22E3B3AD0((uint64_t)&v17);
}

uint64_t sub_22F229F3C(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (a2 >= v8)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    sub_22E49FD00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

void sub_22F22A000(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void ***v14;
  void ***v15;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v3 - 3);
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v7;
          v12 = v3;
          v14 = a1;
          operator delete(v7);
          v3 = v12;
          a1 = v14;
        }
        v8 = (unint64_t *)*((_QWORD *)v3 - 6);
        if (v8)
        {
          v9 = v8 + 1;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            v13 = v3;
            v15 = a1;
            v11 = v2;
            v5 = (std::__shared_weak_count *)v8;
            (*(void (**)(unint64_t *))(*v8 + 16))(v8);
            v6 = v5;
            v2 = v11;
            std::__shared_weak_count::__release_weak(v6);
            v3 = v13;
            a1 = v15;
          }
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_22F22A0DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    MEMORY[0x23489F15C]();
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t *sub_22F22A114(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_22F22A1B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A1C8()
{
  return llvm::GlobalOptPass::run();
}

uint64_t sub_22F22A1D4()
{
  return 0;
}

char *sub_22F22A1DC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x45)
    v1 = v0;
  else
    v1 = 69;
  v2 = &aStringrefLlvmG_18[v1];
  v3 = 69 - v1;
  if ((unint64_t)(69 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 69 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22A290()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A2A4()
{
  return llvm::air::AIRCallGraphCheckerPass::run();
}

uint64_t sub_22F22A2B0()
{
  return 1;
}

char *sub_22F22A2B8()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x54)
    v1 = v0;
  else
    v1 = 84;
  v2 = &aStringrefLlvmG_19[v1];
  v3 = 84 - v1;
  if ((unint64_t)(84 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 84 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22A36C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A380()
{
  return llvm::TracepointWorkaroundsPass::run();
}

uint64_t sub_22F22A38C()
{
  return 1;
}

char *sub_22F22A394()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x51)
    v1 = v0;
  else
    v1 = 81;
  v2 = &aStringrefLlvmG_20[v1];
  v3 = 81 - v1;
  if ((unint64_t)(81 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 81 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22A44C()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F22A460(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FCB0318;
  result[1] = v3;
  return result;
}

uint64_t sub_22F22A494(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FCB0318;
  a2[1] = v2;
  return result;
}

BOOL sub_22F22A4B0(uint64_t a1, llvm::Value *a2)
{
  return sub_22F22A4BC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 4304), a2);
}

BOOL sub_22F22A4BC(uint64_t a1, llvm::Value *this)
{
  const void *Name;
  size_t v4;
  uint64_t v5;

  Name = (const void *)llvm::Value::getName(this);
  v4 = *(_QWORD *)(a1 + 8);
  if (v5 != v4)
    return 0;
  if (v4)
    return memcmp(Name, *(const void **)a1, v4) == 0;
  return 1;
}

void sub_22F22A510()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A524()
{
  return llvm::air::AIRFunctionPredicateResolverPass::run();
}

uint64_t sub_22F22A530()
{
  return 1;
}

char *sub_22F22A538()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x5D)
    v1 = v0;
  else
    v1 = 93;
  v2 = &aStringrefLlvmG_21[v1];
  v3 = 93 - v1;
  if ((unint64_t)(93 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 93 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22A5EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A600()
{
  return llvm::air::GlobalCtorOptPass::run();
}

uint64_t sub_22F22A60C()
{
  return 0;
}

char *sub_22F22A614()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x4E)
    v1 = v0;
  else
    v1 = 78;
  v2 = &aStringrefLlvmG_22[v1];
  v3 = 78 - v1;
  if ((unint64_t)(78 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 78 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22A6C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A6DC()
{
  return llvm::air::AIRInvarianceLateAttributesPass::run();
}

uint64_t sub_22F22A6E8()
{
  return 1;
}

char *sub_22F22A6F0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x5C)
    v1 = v0;
  else
    v1 = 92;
  v2 = &aStringrefLlvmG_23[v1];
  v3 = 92 - v1;
  if ((unint64_t)(92 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 92 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22A7A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22A7B8()
{
  return llvm::SimplifyCFGPass::run();
}

char *sub_22F22A7C0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x47)
    v1 = v0;
  else
    v1 = 71;
  v2 = &aStringrefLlvmG_24[v1];
  v3 = 71 - v1;
  if ((unint64_t)(71 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 71 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_22F22A874()
{
  return 0;
}

uint64_t sub_22F22A87C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x10000000000;
  if (*(_DWORD *)(a2 + 8))
  {
    v18 = a2;
    result = sub_22E5C3144(result, (const void **)a2);
    a2 = v18;
  }
  *(_DWORD *)(result + 2080) = 0;
  *(_OWORD *)(result + 2064) = 0u;
  *(_QWORD *)(result + 2064) = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a2 + 2064) = 0;
  *(_DWORD *)(result + 2072) = *(_DWORD *)(a2 + 2072);
  *(_DWORD *)(a2 + 2072) = 0;
  v2 = *(_DWORD *)(result + 2076);
  *(_DWORD *)(result + 2076) = *(_DWORD *)(a2 + 2076);
  *(_DWORD *)(a2 + 2076) = v2;
  v3 = *(_DWORD *)(result + 2080);
  *(_DWORD *)(result + 2080) = *(_DWORD *)(a2 + 2080);
  *(_DWORD *)(a2 + 2080) = v3;
  v4 = result + 2088;
  *(_QWORD *)(result + 2088) = 1;
  v5 = result + 2096;
  v6 = 2096;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(result + v6) = v7;
    v6 += 16;
  }
  while (v6 != 2224);
  v8 = *(_DWORD *)(a2 + 2088);
  *(_DWORD *)(a2 + 2088) = *(_DWORD *)(result + 2088) & 0xFFFFFFFE | v8 & 1;
  *(_DWORD *)(result + 2088) = v8 & 0xFFFFFFFE | *(_DWORD *)(result + 2088) & 1;
  v9 = *(_DWORD *)(result + 2092);
  *(_DWORD *)(result + 2092) = *(_DWORD *)(a2 + 2092);
  *(_DWORD *)(a2 + 2092) = v9;
  v10 = *(_DWORD *)(result + 2088);
  v11 = *(_DWORD *)(a2 + 2088);
  if ((v10 & 1) != 0)
  {
    v10 = *(_DWORD *)(a2 + 2088);
    v12 = a2 + 2088;
    if ((v11 & 1) != 0)
    {
      v13 = 0;
      v14 = a2 + 2096;
      do
      {
        v15 = *(_QWORD *)(v5 + v13);
        *(_QWORD *)(v5 + v13) = *(_QWORD *)(v14 + v13);
        *(_QWORD *)(v14 + v13) = v15;
        v13 += 8;
      }
      while (v13 != 128);
      goto LABEL_9;
    }
LABEL_14:
    v20 = *(_OWORD *)(v12 + 8);
    *(_DWORD *)v12 = v10 | 1;
    for (i = 8; i != 136; i += 8)
      *(_QWORD *)(v12 + i) = *(_QWORD *)(v4 + i);
    *(_DWORD *)v4 &= ~1u;
    *(_OWORD *)(v4 + 8) = v20;
    goto LABEL_9;
  }
  v12 = result + 2088;
  v4 = a2 + 2088;
  if ((v11 & 1) != 0)
    goto LABEL_14;
  v16 = *(_QWORD *)(result + 2096);
  *(_QWORD *)(result + 2096) = *(_QWORD *)(a2 + 2096);
  *(_QWORD *)(a2 + 2096) = v16;
  LODWORD(v16) = *(_DWORD *)(result + 2104);
  *(_DWORD *)(result + 2104) = *(_DWORD *)(a2 + 2104);
  *(_DWORD *)(a2 + 2104) = v16;
LABEL_9:
  *(_QWORD *)(result + 2224) = result + 2240;
  *(_QWORD *)(result + 2232) = 0x1000000000;
  if (*(_DWORD *)(a2 + 2232))
  {
    v19 = result;
    sub_22E5C3144(result + 2224, (const void **)(a2 + 2224));
    return v19;
  }
  return result;
}

void sub_22F22AA4C(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_24FCB0460;
  v2 = *(void **)(a1 + 2232);
  if (v2 != (void *)(a1 + 2248))
    free(v2);
  if ((*(_BYTE *)(a1 + 2096) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 2104), (void *)(8 * *(unsigned int *)(a1 + 2112)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2072), (void *)(16 * *(unsigned int *)(a1 + 2088)));
  v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a1 + 24))
    free(v3);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22AAEC()
{
  return llvm::InstCombinePass::run();
}

uint64_t sub_22F22AAF8()
{
  return 0;
}

char *sub_22F22AB00()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x47)
    v1 = v0;
  else
    v1 = 71;
  v2 = &aStringrefLlvmG_25[v1];
  v3 = 71 - v1;
  if ((unint64_t)(71 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 71 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22ABB4(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_24FCB04A0;
  v1 = (void **)(a1 + 8);
  sub_22E3B4AF8(&v1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22AC08()
{
  return llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::run();
}

char *sub_22F22AC10()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x4D)
    v1 = v0;
  else
    v1 = 77;
  v2 = &aStringrefLlvmG_26[v1];
  v3 = 77 - v1;
  if ((unint64_t)(77 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 77 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_22F22ACC4()
{
  return 1;
}

void sub_22F22ACCC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22ACE0()
{
  return llvm::air::AIRUnusedArgumentsPass::run();
}

uint64_t sub_22F22ACEC()
{
  return 1;
}

char *sub_22F22ACF4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x53)
    v1 = v0;
  else
    v1 = 83;
  v2 = &aStringrefLlvmG_27[v1];
  v3 = 83 - v1;
  if ((unint64_t)(83 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 83 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22ADA8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22ADBC()
{
  return llvm::air::AIRFixupMetadataPass::run();
}

uint64_t sub_22F22ADC8()
{
  return 1;
}

char *sub_22F22ADD0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x51)
    v1 = v0;
  else
    v1 = 81;
  v2 = &aStringrefLlvmG_28[v1];
  v3 = 81 - v1;
  if ((unint64_t)(81 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 81 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22AE84()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22AE98()
{
  return llvm::air::AIRDisabledEliminationPass::run();
}

uint64_t sub_22F22AEA4()
{
  return 1;
}

char *sub_22F22AEAC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;

  v0 = llvm::StringRef::find();
  if (v0 <= 0x57)
    v1 = v0;
  else
    v1 = 87;
  v2 = &aStringrefLlvmG_29[v1];
  v3 = 87 - v1;
  if ((unint64_t)(87 - v1) >= 0x12)
    v4 = 18;
  else
    v4 = 87 - v1;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_22F22AF64()
{
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F22AF78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FCB05A0;
  result[1] = v3;
  return result;
}

uint64_t sub_22F22AFAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FCB05A0;
  a2[1] = v2;
  return result;
}

BOOL sub_22F22AFC8(uint64_t a1, llvm::Value *a2)
{
  return sub_22F22A4BC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 4304), a2);
}

uint64_t sub_22F22AFD4()
{
  return operator new();
}

_QWORD *sub_22F22AFF0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *result = a2;
  return result;
}

void sub_22F22B004(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, int a5, _QWORD *a6, uint64_t a7)
{
  size_t v8;
  const void *v9;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  llvm::StringMapImpl *v19;
  uint64_t *v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  int v26;
  uint64_t *v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int Key;
  uint64_t v38;
  unsigned int v39;
  llvm::StringMapImpl *v40;
  uint64_t *v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[40];
  const void *v60;
  size_t v61;
  int v62;
  void *v63[2];
  _BYTE v64[64];
  const void *v65;
  size_t v66;
  int v67;
  void *v68[2];
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[3];

  v8 = a4;
  v9 = a3;
  v72[1] = *MEMORY[0x24BDAC8D0];
  if (a7 == 13
    && (*a6 == 0x74656D2E6D766C6CLL ? (v12 = *(_QWORD *)((char *)a6 + 5) == 0x617461646174656DLL) : (v12 = 0), v12)
    || a4 == 17
    && (*a3 == 0x6F6C672E6D766C6CLL ? (v13 = a3[1] == 0x726F74635F6C6162) : (v13 = 0),
        v13 ? (v14 = *((_BYTE *)a3 + 16) == 115) : (v14 = 0),
        v14
     || (*a3 == 0x6F6C672E6D766C6CLL ? (v15 = a3[1] == 0x726F74645F6C6162) : (v15 = 0),
         v15 ? (v16 = *((_BYTE *)a3 + 16) == 115) : (v16 = 0),
         v16)))
  {
    v19 = (llvm::StringMapImpl *)(a1 + 80);
    v53 = a5 | 8;
    v54 = &v56;
    v55 = 0x100000000;
    sub_22F22BC74((uint64_t)&v54, a2);
    v57 = v59;
    v58 = 0x100000000;
    v65 = v9;
    v66 = v8;
    v67 = v53;
    v68[0] = &v69;
    v68[1] = (void *)0x100000000;
    if ((_DWORD)v55)
    {
      sub_22F309A2C((uint64_t)v68, (uint64_t)&v54);
      v70 = v72;
      v71 = 0x100000000;
      if ((_DWORD)v58)
        sub_22F309A2C((uint64_t)&v70, (uint64_t)&v57);
    }
    else
    {
      v70 = v72;
      v71 = 0x100000000;
    }
    v20 = sub_22F22BEDC(v19, v65, v66, &v67);
    v22 = v21;
    if (v70 != v72)
      free(v70);
    if (v68[0] != &v69)
      free(v68[0]);
    if (v57 != v59)
      free(v57);
    if (v54 != &v56)
      free(v54);
    if (!v22)
    {
      v23 = *v20;
      v24 = *(_DWORD *)(v23 + 48);
      if (v24 >= *(_DWORD *)(v23 + 52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(_DWORD *)(v23 + 48);
      }
      *(_QWORD *)(*(_QWORD *)(v23 + 40) + 8 * v24) = a2;
      ++*(_DWORD *)(v23 + 48);
    }
    return;
  }
  if (a7 == 22)
  {
    v17 = *a6 == 0x657478652E726961 && a6[1] == 0x645F796C6C616E72;
    if (v17 && *(_QWORD *)((char *)a6 + 14) == 0x64656E696665645FLL)
      return;
  }
  if (a4 >= 5)
  {
    if (*(_DWORD *)a3 == 1836477548 && *((_BYTE *)a3 + 4) == 46)
      return;
  }
  else if (a4 != 4)
  {
    goto LABEL_52;
  }
  if (*(_DWORD *)a3 == 779250017)
    return;
LABEL_52:
  if ((a5 & 1) != 0)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 88))
    {
      v40 = (llvm::StringMapImpl *)(a1 + 16);
      v53 = a5;
      v54 = &v56;
      v55 = 0x800000000;
      sub_22F22BC74((uint64_t)&v54, a2);
      v60 = v9;
      v61 = v8;
      v62 = a5;
      v63[0] = v64;
      v63[1] = (void *)0x800000000;
      if ((_DWORD)v55)
      {
        sub_22F309A2C((uint64_t)v63, (uint64_t)&v54);
        v9 = v60;
        v8 = v61;
      }
      v41 = sub_22F444BF8(v40, v9, v8, &v62);
      v43 = v42;
      if (v63[0] != v64)
        free(v63[0]);
      if (v54 != &v56)
        free(v54);
      if (!v43)
      {
        v44 = *v41;
        v45 = *(_DWORD *)(v44 + 24);
        if (v45 >= *(_DWORD *)(v44 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v45 = *(_DWORD *)(v44 + 24);
        }
        *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * v45) = a2;
        ++*(_DWORD *)(v44 + 24);
      }
    }
    return;
  }
  if ((a5 & 2) == 0)
    return;
  v26 = llvm::StringMapImpl::FindKey();
  if (v26 != -1 && v26 != (unint64_t)*(unsigned int *)(a1 + 24))
    sub_22F226544(a1 + 16, (llvm **)(*(_QWORD *)(a1 + 16) + 8 * v26));
  v53 = a5 | 0x40;
  v54 = &v56;
  v55 = 0x100000000;
  sub_22F22BC74((uint64_t)&v54, a2);
  v57 = v59;
  v58 = 0x100000000;
  v47 = a5 | 0x40;
  v48[0] = &v49;
  v48[1] = (void *)0x100000000;
  if ((_DWORD)v55)
  {
    sub_22F309A2C((uint64_t)v48, (uint64_t)&v54);
    v50 = &v52;
    v51 = 0x100000000;
    if ((_DWORD)v58)
      sub_22F309A2C((uint64_t)&v50, (uint64_t)&v57);
  }
  else
  {
    v50 = &v52;
    v51 = 0x100000000;
  }
  v27 = sub_22F22BEDC((llvm::StringMapImpl *)(a1 + 80), v9, v8, &v47);
  v29 = v28;
  if (v50 != &v52)
    free(v50);
  if (v48[0] != &v49)
    free(v48[0]);
  if (v57 != v59)
    free(v57);
  if (v54 != &v56)
    free(v54);
  if (!v29)
  {
    if ((a5 & 4) != 0)
      return;
    v38 = *v27;
    if ((*(_BYTE *)(*v27 + 8) & 4) == 0)
    {
      v39 = *(_DWORD *)(v38 + 24);
      if (v39 >= *(_DWORD *)(v38 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v39 = *(_DWORD *)(v38 + 24);
      }
      *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * v39) = a2;
      ++*(_DWORD *)(v38 + 24);
      ++*(_DWORD *)(a1 + 112);
      return;
    }
    v53 = a5 | 0x40;
    v54 = &v56;
    v55 = 0x100000000;
    sub_22F22BC74((uint64_t)&v54, a2);
    v57 = v59;
    v58 = 0x100000000;
    v46 = *v27;
    *(_DWORD *)(v46 + 8) = v53;
    sub_22F309A2C(v46 + 16, (uint64_t)&v54);
    sub_22F309A2C(v46 + 40, (uint64_t)&v57);
    if (v57 != v59)
      free(v57);
    if (v54 != &v56)
      free(v54);
  }
  if ((a5 & 0x200) != 0)
    goto LABEL_81;
  v30 = *(_QWORD *)(a1 + 8);
  if (!v30)
    return;
  v31 = *(unsigned int *)(v30 + 40);
  v32 = *(_QWORD *)(v30 + 304);
  v33 = *(unsigned int *)(v30 + 312);
  if (!(_DWORD)v31)
  {
LABEL_77:
    if ((_DWORD)v33)
    {
      v36 = 96 * v33;
      while ((llvm::GlobPattern::match() & 1) == 0)
      {
        v32 += 96;
        v36 -= 96;
        if (!v36)
          goto LABEL_81;
      }
      return;
    }
LABEL_81:
    *(_DWORD *)(*v27 + 8) &= ~0x40u;
    return;
  }
  v34 = *(_QWORD *)(v30 + 32);
  v35 = v34 + 16 * v31;
  while (*(_QWORD *)(v34 + 8) != v8 || v8 && memcmp(*(const void **)v34, v9, v8))
  {
    v34 += 16;
    if (v34 == v35)
      goto LABEL_77;
  }
}

uint64_t sub_22F22B6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *Section;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[72];
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  __int128 v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v6 = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v17 = (_QWORD *)v4;
  v18 = v6;
  if (v4 != result)
  {
    v8 = (_QWORD *)result;
    v9 = a2 & 0xFFFFFFFFFFFFFFF9;
    do
    {
      v21 = v23;
      v22 = xmmword_22F44E300;
      sub_22F242C48((uint64_t)v16, (uint64_t)&v21);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v18 + 32))(&v19, v18, v16, v17);
      if (v19)
      {
        v15 = v19;
        v19 = 0;
        llvm::air::ErrorHandler::error();
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v10 = v19;
        if (!v19)
          goto LABEL_13;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v18 + 40))(&v19, v18, v17);
        if ((v20 & 1) != 0 && (v11 = v19, v19 = 0, v11))
        {
          v14 = v11;
          llvm::air::ErrorHandler::error();
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        else
        {
          Section = (_QWORD *)llvm::GlobalValue::getSection((llvm::GlobalValue *)(*v17 & 0xFFFFFFFFFFFFFFF8));
          sub_22F22B004(a1, v9, v21, v22, v19, Section, v13);
        }
        if ((v20 & 1) == 0)
          goto LABEL_13;
        v10 = v19;
        v19 = 0;
        if (!v10)
          goto LABEL_13;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_13:
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v16);
      if (v21 != v23)
        free(v21);
      result = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v18 + 24))(v18, &v17);
    }
    while (v17 != v8);
  }
  return result;
}

void sub_22F22B91C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  llvm::StringMapImpl *v21;
  uint64_t j;
  unint64_t v23;
  _DWORD *v24;
  int Key;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  char v30;
  char v31;
  llvm::StringMapImpl *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  __int128 v39;
  int v40;
  void *v41[2];
  _QWORD v42[11];

  v42[9] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a1 + 80);
  v5 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v5)
  {
    for (i = *(uint64_t **)(a1 + 80); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a1 + 80);
  }
  v8 = *(_QWORD *)(a1 + 80) + 8 * v5;
  if (i != (uint64_t *)v8)
  {
    v9 = *i;
    do
    {
      v10 = (_DWORD *)(v9 + 64);
      if (*(_QWORD *)v9 >= 5uLL)
      {
        if (*v10 == 1836477548 && *(_BYTE *)(v9 + 68) == 46)
          goto LABEL_29;
      }
      else if (*(_QWORD *)v9 != 4)
      {
        goto LABEL_20;
      }
      if (*v10 != 779250017)
      {
LABEL_20:
        v12 = *(_DWORD *)(v9 + 8);
        if ((v12 & 0x200) == 0)
        {
          v13 = *(unsigned int *)(a2 + 312);
          if ((_DWORD)v13)
          {
            v14 = *(_QWORD *)(a2 + 304);
            v15 = 96 * v13;
            while (!llvm::GlobPattern::match())
            {
              v14 += 96;
              v15 -= 96;
              if (!v15)
              {
                v12 = *(_DWORD *)(v9 + 8);
                goto LABEL_26;
              }
            }
            v16 = *(_DWORD *)(v9 + 8) | 0x40;
          }
          else
          {
LABEL_26:
            v16 = v12 & 0xFFFFFFBF;
          }
          *(_DWORD *)(v9 + 8) = v16;
        }
        goto LABEL_29;
      }
      do
      {
LABEL_29:
        v17 = i[1];
        ++i;
        v9 = v17;
        if (v17)
          v18 = v9 == -8;
        else
          v18 = 1;
      }
      while (v18);
    }
    while (i != (uint64_t *)v8);
  }
  v19 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD **)(a2 + 32);
    v21 = (llvm::StringMapImpl *)(a1 + 16);
    v35 = a2 | 6;
    for (j = 16 * v19; j; j -= 16)
    {
      v23 = v20[1];
      if (v23 >= 5)
      {
        v24 = (_DWORD *)*v20;
        if (*(_DWORD *)*v20 == 1836477548 && *(_BYTE *)(*v20 + 4) == 46)
          goto LABEL_48;
      }
      else
      {
        if (v23 != 4)
          goto LABEL_44;
        v24 = (_DWORD *)*v20;
      }
      if (*v24 != 779250017)
      {
LABEL_44:
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 88))
        {
          v36 = v38;
          v37 = 0x800000000;
          sub_22F22BC74((uint64_t)&v36, v35);
          v39 = *(_OWORD *)v20;
          v40 = 2;
          v41[0] = v42;
          v41[1] = (void *)0x800000000;
          if ((_DWORD)v37)
            sub_22F309A2C((uint64_t)v41, (uint64_t)&v36);
          v29 = sub_22F444BF8(v21, (const void *)v39, *((size_t *)&v39 + 1), &v40);
          v31 = v30;
          if (v41[0] != v42)
            free(v41[0]);
          if (v36 != v38)
            free(v36);
          if (!v31)
          {
            v32 = v21;
            v33 = *v29;
            v34 = *(unsigned int *)(*v29 + 24);
            if (v34 >= *(unsigned int *)(*v29 + 28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v34 = *(unsigned int *)(v33 + 24);
            }
            *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * v34) = v35;
            ++*(_DWORD *)(v33 + 24);
            v21 = v32;
          }
        }
        else
        {
          v27 = *(_QWORD *)(*v4 + 8 * Key);
          v28 = *(_DWORD *)(v27 + 8);
          if ((v28 & 0x200) == 0)
            *(_DWORD *)(v27 + 8) = v28 | 0x40;
        }
      }
LABEL_48:
      v20 += 2;
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_22F22BC74(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  v3 = result;
  if (!*(_DWORD *)(result + 12))
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_6:
    **(_QWORD **)v3 = a2;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(result + 8))
    goto LABEL_6;
  **(_QWORD **)result = a2;
  if (!*(_DWORD *)(result + 8))
    goto LABEL_6;
LABEL_7:
  *(_DWORD *)(v3 + 8) = 1;
  return result;
}

uint64_t **sub_22F22BCE0(uint64_t **a1, unint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_11;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_11:
    v13 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0xC0uLL);
    v10[4] = *a3;
    sub_22F444B68((uint64_t)(v10 + 5), a4);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v13;
    *v8 = (uint64_t *)v10;
    v14 = (uint64_t *)**a1;
    v15 = (uint64_t *)v10;
    if (v14)
    {
      *a1 = v14;
      v15 = *v8;
    }
    sub_22E49FD00(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t sub_22F22BDCC(uint64_t a1, uint64_t a2)
{
  void **v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void **v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v4 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0x400000000;
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
    v6 = a1 == a2;
  else
    v6 = 1;
  if (!v6)
  {
    v8 = *(_QWORD *)(a2 + 16);
    if (v8 != a2 + 32)
    {
      *(_QWORD *)(a1 + 16) = v8;
      v10 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a1 + 24) = v5;
      *(_DWORD *)(a1 + 28) = v10;
      *(_QWORD *)(a2 + 16) = a2 + 32;
      *(_DWORD *)(a2 + 28) = 0;
      goto LABEL_14;
    }
    if (v5 >= 5)
    {
      v11 = (void **)(a1 + 16);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = v11;
      v9 = *(unsigned int *)(a2 + 24);
      if (!(_DWORD)v9)
        goto LABEL_13;
    }
    else
    {
      v9 = *(unsigned int *)(a2 + 24);
    }
    memcpy(*v4, *(const void **)(a2 + 16), 8 * v9);
LABEL_13:
    *(_DWORD *)(a1 + 24) = v5;
LABEL_14:
    *(_DWORD *)(a2 + 24) = 0;
  }
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_DWORD *)(a2 + 72))
    sub_22E78E918(a1 + 64, a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

uint64_t *sub_22F22BEDC(llvm::StringMapImpl *a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v15 = i[1];
        ++i;
        v9 = v15;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v10 = MEMORY[0x23489D23C](a3 + 65, 8);
  v11 = v10;
  v12 = v10 + 64;
  if (a3)
    memcpy((void *)(v10 + 64), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 8) = *a4;
  *(_QWORD *)(v11 + 16) = v11 + 32;
  *(_QWORD *)(v11 + 24) = 0x100000000;
  if (a4[4])
    sub_22F309A2C(v11 + 16, (uint64_t)(a4 + 2));
  *(_QWORD *)(v11 + 40) = v11 + 56;
  *(_QWORD *)(v11 + 48) = 0x100000000;
  if (a4[10])
    sub_22F309A2C(v11 + 40, (uint64_t)(a4 + 8));
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F22C038(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::error_code v7;
  std::error_code v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[320];
  uint64_t v17;

  v1 = result;
  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 96);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) == 0 && v3)
  {
    v4 = *(_QWORD *)(result + 88);
    *(_QWORD *)(result + 88) = 2;
    v15 = v4 & 0xFFFFFFFFFFFFFFF8;
    MEMORY[0x23489E244](v16, &v15);
    v5 = v15;
    v15 = 0;
    if (v5)
    {
LABEL_4:
      v6 = sub_22E3B46CC(v5);
      MEMORY[0x2348A0E9C](v6, 0x1032C40B18B30E6);
    }
LABEL_5:
    v16[11] = *(_BYTE *)(v1 + 104);
    v7.__cat_ = (const std::error_category *)llvm::air::MetalLibObjectWriter::write((llvm::air::MetalLibObjectWriter *)v16);
    if (LODWORD(v7.__cat_))
    {
      *(_QWORD *)&v8.__val_ = *(_QWORD *)&v7.__val_;
      v11 = *(_QWORD *)(v1 + 16);
      v13 = "cannot write output file";
      v14 = 259;
      *(_QWORD *)&v7.__val_ = &v13;
      sub_22F43FCAC(v11, v7, v8);
    }
    return sub_22F226D30((uint64_t)v16);
  }
  if (v3)
    v9 = (*(_QWORD *)(result + 96) & 4) == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 88);
    *(_QWORD *)(result + 88) = 2;
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
    MEMORY[0x23489E250](v16, &v12);
    v5 = v12;
    v12 = 0;
    if (v5)
      goto LABEL_4;
    goto LABEL_5;
  }
  return result;
}

uint64_t *sub_22F22C168(uint64_t *result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::error_code v18;
  std::error_code v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::error_code v26;
  std::error_code v27;
  uint64_t v28;
  std::error_code v29;
  std::error_code v30;
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = result;
  v2 = *((_DWORD *)result + 27);
  if (v2 == 2)
  {
    v6 = result[12];
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) == 0 && v7)
    {
      v21 = result[11];
      result[11] = 2;
      v34 = v21 & 0xFFFFFFFFFFFFFFF8;
      v35 = v7;
      v36 = (_QWORD *)v7;
      if (*(_BYTE *)(v7 + 65))
      {
        v37 = 0;
        v40 = 0;
      }
      else
      {
        v22 = (_QWORD *)operator new();
        v23 = MEMORY[0x24BED83C0] + 16;
        *v22 = MEMORY[0x24BED83C0] + 16;
        v24 = (_QWORD *)sub_22F242C48((uint64_t)v22, (uint64_t)(v22 + 10));
        *v24 = v23;
        v24[9] = v7;
        v24[10] = v24 + 13;
        v24[11] = 0;
        v24[12] = 0;
        v40 = 0;
        v36 = v24;
        v37 = v24;
      }
      v41 = 0;
    }
    else
    {
      if (v7)
        v8 = (result[12] & 4) == 0;
      else
        v8 = 1;
      if (v8)
        return result;
      v9 = result[11];
      result[11] = 2;
      v34 = v9 & 0xFFFFFFFFFFFFFFF8;
      v35 = 0;
      v36 = (_QWORD *)v7;
      v37 = 0;
      v40 = 0;
      v41 = 0;
    }
    v39 = &v40;
    v29.__cat_ = (const std::error_category *)sub_22F444E58((uint64_t *)&v34);
    if (LODWORD(v29.__cat_))
    {
      *(_QWORD *)&v30.__val_ = *(_QWORD *)&v29.__val_;
      v31 = v1[2];
      v32[0] = "cannot write output file";
      v33 = 259;
      *(_QWORD *)&v29.__val_ = v32;
      sub_22F43FCAC(v31, v29, v30);
    }
    return (uint64_t *)sub_22F444EEC((uint64_t)&v34);
  }
  if (v2 == 1)
  {
    v10 = result[12];
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) == 0 && v11)
    {
      v13 = result[11];
      result[11] = 2;
      v34 = v13 & 0xFFFFFFFFFFFFFFF8;
      v35 = v11;
      v36 = (_QWORD *)v11;
      if (*(_BYTE *)(v11 + 65))
      {
        v37 = 0;
        v40 = 0;
      }
      else
      {
        v14 = (_QWORD *)operator new();
        v15 = MEMORY[0x24BED83C0] + 16;
        *v14 = MEMORY[0x24BED83C0] + 16;
        v16 = (_QWORD *)sub_22F242C48((uint64_t)v14, (uint64_t)(v14 + 10));
        *v16 = v15;
        v16[9] = v11;
        v16[10] = v16 + 13;
        v16[11] = 0;
        v16[12] = 0;
        v40 = 0;
        v36 = v16;
        v37 = v16;
      }
      v41 = 0;
    }
    else
    {
      if (v11)
        v12 = (result[12] & 4) == 0;
      else
        v12 = 1;
      if (v12)
        return result;
      v25 = result[11];
      result[11] = 2;
      v34 = v25 & 0xFFFFFFFFFFFFFFF8;
      v35 = 0;
      v36 = (_QWORD *)v11;
      v37 = 0;
      v40 = 0;
      v41 = 0;
    }
    v39 = &v40;
    v26.__cat_ = (const std::error_category *)sub_22F444DC4((uint64_t)&v34);
    if (LODWORD(v26.__cat_))
    {
      *(_QWORD *)&v27.__val_ = *(_QWORD *)&v26.__val_;
      v28 = v1[2];
      v32[0] = "cannot write output file";
      v33 = 259;
      *(_QWORD *)&v26.__val_ = v32;
      sub_22F43FCAC(v28, v26, v27);
    }
    return (uint64_t *)sub_22F444EEC((uint64_t)&v34);
  }
  if (v2)
    return result;
  v3 = result[12];
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) == 0 && v4)
  {
    v17 = result[11];
    result[11] = 2;
    v34 = v17 & 0xFFFFFFFFFFFFFFF8;
    v35 = v4;
  }
  else
  {
    if (!v4 || (v3 & 4) == 0)
      return result;
    v5 = result[11];
    result[11] = 2;
    v34 = v5 & 0xFFFFFFFFFFFFFFF8;
    v35 = 0;
  }
  v37 = 0;
  v38 = 0;
  v36 = (_QWORD *)v4;
  LODWORD(v39) = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v18.__cat_ = (const std::error_category *)sub_22F44181C((uint64_t *)&v34);
  if (LODWORD(v18.__cat_))
  {
    *(_QWORD *)&v19.__val_ = *(_QWORD *)&v18.__val_;
    v20 = v1[2];
    v32[0] = "cannot write output file";
    v33 = 259;
    *(_QWORD *)&v18.__val_ = v32;
    sub_22F43FCAC(v20, v18, v19);
  }
  return sub_22F442FCC((uint64_t *)&v34);
}

uint64_t sub_22F22C46C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FCB05E8;
  sub_22E3B4400((uint64_t *)(a1 + 88));
  *(_QWORD *)a1 = &unk_24FCAEDD8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_22F22C4BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FCB05E8;
  sub_22E3B4400((uint64_t *)(a1 + 88));
  *(_QWORD *)a1 = &unk_24FCAEDD8;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F22C51C(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  BOOL v36;
  void **v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *__p[2];
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54;
  unint64_t v55;
  char *v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD *v61[2];
  unint64_t v62;
  _OWORD *v63[2];
  char v64;
  char v65[3];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v61[0] = 0;
  v61[1] = 0;
  v60 = v61;
  v1 = *(_QWORD **)(*a1 + 112);
  v2 = *(_QWORD **)(*a1 + 120);
  if (v1 != v2)
  {
    do
    {
      v3 = v1[1];
      v53[0] = *v1;
      v53[1] = v3;
      __p[0] = v53;
      v4 = sub_22F446F58((uint64_t)&v60, (uint64_t)v53, (_OWORD **)__p);
      v5 = *((_QWORD *)v4 + 6);
      *((_QWORD *)v4 + 6) = v5 + 1;
      if ((unint64_t)(v5 + 1) < 2)
        v6 = v5 + 1;
      else
        v6 = 2;
      v7 = (void *)*v1;
      v8 = (void *)v1[1];
      v1 += 6;
      __p[0] = v7;
      __p[1] = v8;
      v57 = __p;
      *((_QWORD *)sub_22F446F58((uint64_t)&v60, (uint64_t)__p, (_OWORD **)&v57) + 6) = v6;
    }
    while (v1 != v2);
    v9 = *(_QWORD *)(*a1 + 112);
    v46 = *(_QWORD *)(*a1 + 120);
    if (v9 != v46)
    {
      v11 = 0;
      do
      {
        v57 = (void **)&v60;
        v58 = 0;
        v59 = 0;
        sub_22F242C48((uint64_t)v53, (uint64_t)&v57);
        v12 = *(void **)(v9 + 8);
        __p[0] = *(void **)v9;
        __p[1] = v12;
        v63[0] = __p;
        if (*((_QWORD *)sub_22F446F58((uint64_t)&v60, (uint64_t)__p, v63) + 6) != 1)
        {
          v13 = *(_OWORD **)(v9 + 8);
          v63[0] = *(_OWORD **)v9;
          v63[1] = v13;
          v62 = (unint64_t)v63;
          v14 = sub_22F446F58((uint64_t)&v60, (uint64_t)v63, (_OWORD **)&v62);
          ++*((_QWORD *)v14 + 6);
        }
        v62 = (*(_QWORD *)(v9 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        __p[0] = "#1/";
        v49 = &v62;
        LOWORD(v51) = 3075;
        llvm::Twine::print((llvm::Twine *)__p, (llvm::raw_ostream *)v53);
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        llvm::raw_ostream::operator<<();
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        getuid();
        llvm::raw_ostream::operator<<();
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        getgid();
        llvm::raw_ostream::operator<<();
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        __p[0] = &unk_24FCB0610;
        __p[1] = "%o";
        v49 = (void *)420;
        llvm::raw_ostream::operator<<();
        (*(void (**)(_QWORD *))(v53[0] + 80))(v53);
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        llvm::raw_ostream::indent((llvm::raw_ostream *)v53);
        if (v55 - (unint64_t)v56 > 1)
        {
          *(_WORD *)v56 = 2656;
          v56 += 2;
        }
        else
        {
        }
        v15 = (*(uint64_t (**)(_QWORD *))(v53[0] + 80))(v53);
        v16 = v56;
        v17 = *(const void **)v9;
        v18 = *(_QWORD *)(v9 + 8);
        v19 = v54;
        if (v18 <= v55 - (unint64_t)v56)
        {
          if (v18)
          {
            memcpy(v56, v17, *(_QWORD *)(v9 + 8));
            v56 += v18;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v53, (const char *)v17);
        }
        v20 = v62;
        v21 = (*(uint64_t (**)(_QWORD *))(v53[0] + 80))(v53);
        if (&v16[v15 + v20] - &v56[v19 + v21] + v54)
        {
          v22 = &v16[v54 + v15 + v20 - v21 - v19] - v56;
          do
          {
            v23 = v56;
            if ((unint64_t)v56 >= v55)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v53);
            }
            else
            {
              ++v56;
              *v23 = 0;
            }
            --v22;
          }
          while (v22);
        }
        v24 = (*(uint64_t (**)(_QWORD *))(v53[0] + 80))(v53);
        v25 = v56;
        v26 = v54;
        llvm::air::NormalizeModuleForAIRBitcode();
        llvm::air::WriteAIRBitcodeToFile();
        v27 = (*(uint64_t (**)(_QWORD *))(v53[0] + 80))(v53);
        v28 = &v56[v27 - v54];
        v29 = (unint64_t)(v28 + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((char *)v29 != v28)
        {
          v30 = &v56[v27 - v54 - v29];
          do
          {
            v31 = v56;
            if ((unint64_t)v56 >= v55)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v53);
            }
            else
            {
              ++v56;
              *v31 = 10;
            }
          }
          while (!__CFADD__(v30++, 1));
        }
        v33 = (*(uint64_t (**)(_QWORD *))(v53[0] + 80))(v53);
        v34 = (unint64_t)&v56[v26 - (_QWORD)&v25[v24] + v33 - v54 + v62];
        if (v34)
        {
          v35 = v65;
          do
          {
            *--v35 = (v34 % 0xA) | 0x30;
            v36 = v34 > 9;
            v34 /= 0xAuLL;
          }
          while (v36);
        }
        else
        {
          v64 = 48;
          v35 = &v64;
        }
        sub_22E3B4274(__p, v35, v65, v65 - v35);
        if (SHIBYTE(v49) >= 0)
          v37 = __p;
        else
          v37 = (void **)__p[0];
        if (SHIBYTE(v49) >= 0)
          v38 = (void *)(HIBYTE(v49) & 0x7F);
        else
          v38 = __p[1];
        (*(void (**)(_QWORD *, void **, void *, uint64_t))(v53[0] + 104))(v53, v37, v38, 48);
        if (SHIBYTE(v49) < 0)
          operator delete(__p[0]);
        v39 = *(void **)(v9 + 8);
        __p[0] = *(void **)v9;
        __p[1] = v39;
        v49 = &v52;
        v50 = 0;
        v51 = 0;
        if (v58)
          sub_22E3B2DB8((uint64_t)&v49, (uint64_t)&v57);
        v52 = v11;
        v63[0] = *(_OWORD **)(v9 + 40);
        v40 = sub_22F22CCDC(a1 + 3, (uint64_t *)v63);
        v41 = (_QWORD *)v40;
        *(_OWORD *)v40 = *(_OWORD *)__p;
        if ((void **)v40 != __p)
        {
          v42 = v50;
          if (v50)
          {
            v43 = *(_QWORD **)(v40 + 16);
            if (v43 != v41 + 5)
            {
              free(v43);
              v42 = v50;
            }
            v41[2] = v49;
            v41[3] = v42;
            v41[4] = v51;
            v49 = &v52;
            v50 = 0;
            v51 = 0;
          }
          else
          {
            *(_QWORD *)(v40 + 24) = 0;
          }
        }
        v44 = (uint64_t *)v49;
        v41[5] = v52;
        if (v44 != &v52)
          free(v44);
        v45 = *(_QWORD *)(a1[7] - 24);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v53);
        if (v57 != (void **)&v60)
          free(v57);
        v11 += v45;
        v9 += 48;
      }
      while (v9 != v46);
    }
  }
  std::system_category();
  sub_22F258024(v61[0]);
  return 0;
}

uint64_t sub_22F22CCDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *i;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t *v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;

  v29 = *a2;
  v30 = 0;
  sub_22F28430C((uint64_t)&v27, (uint64_t)a1, &v29, &v30);
  v4 = v27;
  if (v28)
  {
    v5 = a1[5];
    v6 = *a2;
    v23 = &v26;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v7 = a1[4];
    if (v7 >= v5)
    {
      v12 = a1[3];
      v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v12) >> 3);
      if ((unint64_t)(v13 + 1) > 0x492492492492492)
        abort();
      v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - v12) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x249249249249249)
        v16 = 0x492492492492492;
      else
        v16 = v15;
      v35 = a1 + 5;
      if (v16 > 0x492492492492492)
        sub_22E3B3F8C();
      v17 = 56 * v16;
      v18 = (char *)operator new(56 * v16);
      v19 = (uint64_t *)&v18[56 * v13];
      v31 = v18;
      v32 = v19;
      *v19 = v6;
      v19[1] = 0;
      v19[6] = 0;
      v19[2] = 0;
      v19[3] = (uint64_t)(v19 + 6);
      v19[4] = 0;
      v19[5] = 0;
      v33 = v19 + 7;
      v34 = &v18[v17];
      sub_22F447000(a1 + 3, &v31);
      v8 = a1[4];
      v20 = v32;
      for (i = v33; i != v20; i -= 7)
      {
        v22 = (uint64_t *)*(i - 4);
        if (i - 1 != v22)
          free(v22);
      }
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_QWORD *)v7 = v6;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(_QWORD *)(v7 + 24) = v7 + 48;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      if (v24)
        sub_22E3B2DB8(v7 + 24, (uint64_t)&v23);
      *(_QWORD *)(v7 + 48) = v26;
      v8 = v7 + 56;
    }
    a1[4] = v8;
    if (v23 != &v26)
      free(v23);
    v9 = a1[3];
    v10 = -1227133513 * ((unint64_t)(a1[4] - v9) >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v10;
  }
  else
  {
    v10 = *(_DWORD *)(v27 + 8);
    v9 = a1[3];
  }
  return v9 + 56 * v10 + 8;
}

uint64_t sub_22F22CF40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 56);
  if (v1 == v2)
  {
LABEL_9:
    std::system_category();
    return 0;
  }
  else
  {
    while (1)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(const void **)(v1 + 24);
      v6 = *(_QWORD *)(v1 + 32);
      v7 = *(void **)(v4 + 32);
      if (v6 <= *(_QWORD *)(v4 + 24) - (_QWORD)v7)
      {
        if (v6)
        {
          memcpy(v7, v5, *(_QWORD *)(v1 + 32));
          *(_QWORD *)(v4 + 32) += v6;
        }
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)v5);
      }
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        if (*(_DWORD *)(v8 + 72))
          return *(_QWORD *)(v8 + 72);
      }
      v1 += 56;
      if (v1 == v2)
        goto LABEL_9;
    }
  }
}

unint64_t sub_22F22CFE8(uint64_t a1)
{
  uint64_t v1;
  unint64_t *i;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;

  v1 = 8 * *(unsigned int *)(a1 + 88) + 8;
  sub_22F22D614((uint64_t)&v6, a1);
  for (i = v6; ; i = v7)
  {
LABEL_2:
    while (v8 != v10)
    {
      v1 += i[1] + 1;
      if (v8)
        goto LABEL_7;
LABEL_14:
      i += 3;
    }
    if (!v8)
      break;
    if (i == v9)
      return (v1 + 7) & 0xFFFFFFFFFFFFFFF8;
    v1 += i[1] + 1;
LABEL_7:
    v3 = i + 3;
    while (v3 != v7)
    {
      v4 = *v3;
      v3 += 3;
      if (v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v3 - 3;
        goto LABEL_2;
      }
    }
  }
  if (i != v9)
  {
    v1 += i[1] + 1;
    goto LABEL_14;
  }
  return (v1 + 7) & 0xFFFFFFFFFFFFFFF8;
}

unint64_t sub_22F22D0AC(uint64_t a1)
{
  size_t v2;
  const char *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  unint64_t *v20;
  unint64_t *v21;
  int v22;
  unint64_t *v23;
  int v24;
  const void *v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  unint64_t *v29;
  unint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  char *v45;
  BOOL v46;
  void *p_p;
  unint64_t *v48;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *__p;
  unint64_t *v60;
  unsigned __int8 v61;
  char v62;
  unint64_t *v63;
  unsigned __int8 v64;
  __n128 v65;
  char v66;
  char v67;
  char v68[16];

  *(_QWORD *)v68 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)a1 + 104))
    v2 = 16;
  else
    v2 = 9;
  if (*(_BYTE *)(*(_QWORD *)a1 + 104))
    v3 = "__.SYMDEF SORTED";
  else
    v3 = "__.SYMDEF";
  sub_22F445F54(&v65, a1, v3, v2);
  if ((v66 & 1) != 0)
  {
    LODWORD(v5) = v65.n128_u32[0];
    v4 = HIDWORD(v65.n128_u64[0]);
    if (v65.n128_u32[0])
      return v5 | ((unint64_t)v4 << 32);
  }
  else
  {
    std::system_category();
    LODWORD(v4) = 0;
  }
  v6 = *(_DWORD **)(a1 + 16);
  *(_DWORD *)(a1 + 32) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 80))(v6) + v6[8] - v6[4];
  v7 = *(_DWORD **)(a1 + 16);
  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 80))(v7);
  v9 = v7[8];
  v10 = v7[4];
  LODWORD(__p) = 8 * *(_DWORD *)(*(_QWORD *)a1 + 88);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)&__p);
  if (!*(_QWORD *)(a1 + 24))
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
        goto LABEL_64;
    }
  }
  v11 = *(unsigned int *)(*(_QWORD *)a1 + 88);
  if ((_DWORD)v11)
  {
    do
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF");
      if (!*(_QWORD *)(a1 + 24))
      {
        v12 = *(_QWORD *)(a1 + 8);
        if (v12)
        {
          if (*(_DWORD *)(v12 + 72))
            goto LABEL_64;
        }
      }
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF");
      if (!*(_QWORD *)(a1 + 24))
      {
        v12 = *(_QWORD *)(a1 + 8);
        if (v12)
        {
          if (*(_DWORD *)(v12 + 72))
            goto LABEL_64;
        }
      }
    }
    while (--v11);
  }
  v13 = *(_QWORD **)(a1 + 16);
  v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 80))(v13);
  v15 = v13[4];
  v16 = v13[2];
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF");
  if (!*(_QWORD *)(a1 + 24))
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
        goto LABEL_64;
    }
  }
  v56 = v16;
  v57 = v15;
  v58 = v14;
  v51 = v10;
  v52 = v9;
  v53 = v8;
  v54 = v4;
  v17 = *(_DWORD **)(a1 + 16);
  v55 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 80))(v17);
  v18 = v17[8];
  v19 = v17[4];
  sub_22F22D614((uint64_t)&__p, *(_QWORD *)a1);
  v20 = (unint64_t *)__p;
  v21 = v60;
  v22 = v61;
  v23 = v63;
  v24 = v64;
LABEL_21:
  while (v22 != v24 || v20 != v23)
  {
    v25 = (const void *)*v20;
    v26 = v20[1];
    v27 = *(llvm::raw_ostream **)(a1 + 16);
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (v26 <= *((_QWORD *)v27 + 3) - (_QWORD)v28)
    {
      if (v26)
      {
        memcpy(v28, v25, v20[1]);
        v28 = (_BYTE *)(*((_QWORD *)v27 + 4) + v26);
        *((_QWORD *)v27 + 4) = v28;
      }
    }
    else
    {
      v27 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)v25);
      v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    }
    if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
    {
      llvm::raw_ostream::write(v27);
    }
    else
    {
      *((_QWORD *)v27 + 4) = v28 + 1;
      *v28 = 0;
    }
    if (!*(_QWORD *)(a1 + 24))
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12)
      {
        if (*(_DWORD *)(v12 + 72))
          goto LABEL_64;
      }
    }
    if (v22)
    {
      v29 = v20 + 3;
      while (v29 != v21)
      {
        v30 = *v29;
        v29 += 3;
        if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = v29 - 3;
          goto LABEL_21;
        }
      }
      v20 = v21;
    }
    else
    {
      v20 += 3;
    }
  }
  v31 = *(_DWORD **)(a1 + 16);
  LODWORD(__p) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 80))(v31) + v31[8] - v31[4] + v19 - v18 - v55;
  (*(void (**)(_QWORD, void **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), &__p, 4, (v58 + v57 - v56));
  if (!*(_QWORD *)(a1 + 24))
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
        goto LABEL_64;
    }
  }
  v32 = *(_QWORD **)(a1 + 16);
  v33 = (*(uint64_t (**)(_QWORD *))(*v32 + 80))(v32);
  v34 = v32[4];
  v35 = v32[2];
  v36 = v34 - v35 + v33;
  v37 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v4) = v54;
  if (v37 != v36)
  {
    v38 = v33 + v34 - v35 - v37;
    do
    {
      v39 = *(llvm::raw_ostream **)(a1 + 16);
      v40 = (_BYTE *)*((_QWORD *)v39 + 4);
      if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
      {
        llvm::raw_ostream::write(v39);
      }
      else
      {
        *((_QWORD *)v39 + 4) = v40 + 1;
        *v40 = 0;
      }
    }
    while (!__CFADD__(v38++, 1));
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v12 = *(_QWORD *)(a1 + 8);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
      {
LABEL_64:
        v5 = *(_QWORD *)(v12 + 72);
        v4 = HIDWORD(v5);
        return v5 | ((unint64_t)v4 << 32);
      }
    }
  }
  v42 = *(_DWORD **)(a1 + 16);
  v43 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v42 + 80))(v42);
  v44 = v65.n128_u32[1] + v51 - v52 - v53 + v43 + v42[8] - v42[4];
  if ((_DWORD)v44)
  {
    v45 = v68;
    do
    {
      *--v45 = (v44 % 0xA) | 0x30;
      v46 = v44 > 9;
      v44 /= 0xAuLL;
    }
    while (v46);
  }
  else
  {
    v45 = &v67;
    v67 = 48;
  }
  sub_22E3B4274(&__p, v45, v68, v68 - v45);
  if (v62 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v62 >= 0)
    v48 = (unint64_t *)(v62 & 0x7F);
  else
    v48 = v60;
  (*(void (**)(_QWORD, void *, unint64_t *, _QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), p_p, v48, v65.n128_u32[0]);
  if (!*(_QWORD *)(a1 + 24) && (v50 = *(_QWORD *)(a1 + 8)) != 0 && *(_DWORD *)(v50 + 72))
  {
    v5 = *(_QWORD *)(v50 + 72);
    v4 = HIDWORD(v5);
    if (v62 < 0)
      operator delete(__p);
  }
  else
  {
    if (v62 < 0)
      operator delete(__p);
    std::system_category();
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)v4 << 32);
}

uint64_t sub_22F22D614(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;

  if (*(_BYTE *)(a2 + 104))
  {
    v2 = *(_QWORD *)(a2 + 80);
    v3 = *(unsigned int *)(a2 + 96);
    v4 = v2 + 24 * v3;
    if (*(_DWORD *)(a2 + 88))
    {
      if ((_DWORD)v3)
      {
        v5 = 24 * v3;
        v6 = *(_QWORD **)(a2 + 80);
        while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v6 += 3;
          v5 -= 24;
          if (!v5)
            goto LABEL_7;
        }
      }
      else
      {
        LODWORD(v3) = 0;
        v6 = *(_QWORD **)(a2 + 80);
      }
    }
    else
    {
LABEL_7:
      v6 = (_QWORD *)(v2 + 24 * v3);
    }
    v8 = (_QWORD *)(v2 + 24 * v3);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = *(_QWORD **)(a2 + 80);
    v4 = *(unsigned int *)(a2 + 88);
    v8 = &v6[3 * v4];
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v4;
  *(_BYTE *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = v8;
  *(_QWORD *)(result + 56) = v8;
  *(_BYTE *)(result + 64) = v7;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

unint64_t sub_22F22D6AC(uint64_t *a1)
{
  size_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  int v22;
  unint64_t *v23;
  int v24;
  const void *v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  BOOL v46;
  void *p_p;
  unint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *__p;
  unint64_t *v60;
  unsigned __int8 v61;
  char v62;
  unint64_t *v63;
  unsigned __int8 v64;
  _QWORD v65[2];
  char v66;
  char v67;
  char v68[16];

  *(_QWORD *)v68 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*a1 + 104))
    v2 = 19;
  else
    v2 = 12;
  if (*(_BYTE *)(*a1 + 104))
    v3 = "__.SYMDEF_64 SORTED";
  else
    v3 = "__.SYMDEF_64";
  sub_22F446580((uint64_t)v65, (uint64_t)a1, v3, v2);
  if ((v66 & 1) != 0)
  {
    LODWORD(v5) = v65[0];
    v4 = HIDWORD(v65[0]);
    if (LODWORD(v65[0]))
      return v5 | ((unint64_t)v4 << 32);
  }
  else
  {
    std::system_category();
    LODWORD(v4) = 0;
  }
  v6 = (_QWORD *)a1[2];
  a1[4] = (*(uint64_t (**)(_QWORD *))(*v6 + 80))(v6) + v6[4] - v6[2];
  v7 = (_QWORD *)a1[2];
  v8 = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
  v9 = v7[4];
  v10 = v7[2];
  __p = (void *)(16 * *(unsigned int *)(*a1 + 88));
  llvm::raw_ostream::write((llvm::raw_ostream *)a1[2], (const char *)&__p);
  if (!a1[3])
  {
    v12 = a1[1];
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
        goto LABEL_64;
    }
  }
  v11 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v11)
  {
    do
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1[2], "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF");
      if (!a1[3])
      {
        v12 = a1[1];
        if (v12)
        {
          if (*(_DWORD *)(v12 + 72))
            goto LABEL_64;
        }
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)a1[2], "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF");
      if (!a1[3])
      {
        v12 = a1[1];
        if (v12)
        {
          if (*(_DWORD *)(v12 + 72))
            goto LABEL_64;
        }
      }
    }
    while (--v11);
  }
  v13 = (_QWORD *)a1[2];
  v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 80))(v13);
  v15 = v13[4];
  v16 = v13[2];
  llvm::raw_ostream::write((llvm::raw_ostream *)a1[2], "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF");
  if (!a1[3])
  {
    v12 = a1[1];
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
        goto LABEL_64;
    }
  }
  v58 = v16;
  v17 = v15;
  v51 = v10;
  v52 = v9;
  v53 = v8;
  v54 = v4;
  v18 = (_QWORD *)a1[2];
  v19 = (*(uint64_t (**)(_QWORD *))(*v18 + 80))(v18);
  v56 = v18[4];
  v57 = v19;
  v55 = v18[2];
  sub_22F22D614((uint64_t)&__p, *a1);
  v20 = (unint64_t *)__p;
  v21 = v60;
  v22 = v61;
  v23 = v63;
  v24 = v64;
LABEL_21:
  while (v22 != v24 || v20 != v23)
  {
    v25 = (const void *)*v20;
    v26 = v20[1];
    v27 = (llvm::raw_ostream *)a1[2];
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (v26 <= *((_QWORD *)v27 + 3) - (_QWORD)v28)
    {
      if (v26)
      {
        memcpy(v28, v25, v20[1]);
        v28 = (_BYTE *)(*((_QWORD *)v27 + 4) + v26);
        *((_QWORD *)v27 + 4) = v28;
      }
    }
    else
    {
      v27 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)a1[2], (const char *)v25);
      v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    }
    if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
    {
      llvm::raw_ostream::write(v27);
    }
    else
    {
      *((_QWORD *)v27 + 4) = v28 + 1;
      *v28 = 0;
    }
    if (!a1[3])
    {
      v12 = a1[1];
      if (v12)
      {
        if (*(_DWORD *)(v12 + 72))
          goto LABEL_64;
      }
    }
    if (v22)
    {
      v29 = v20 + 3;
      while (v29 != v21)
      {
        v30 = *v29;
        v29 += 3;
        if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = v29 - 3;
          goto LABEL_21;
        }
      }
      v20 = v21;
    }
    else
    {
      v20 += 3;
    }
  }
  v31 = (_QWORD *)a1[2];
  __p = (void *)(v55 - (v57 + v56) + v31[4] + (*(uint64_t (**)(_QWORD *))(*v31 + 80))(v31) - v31[2]);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 104))(a1[2], &__p, 8, v14 + v17 - v58);
  if (!a1[3])
  {
    v12 = a1[1];
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
        goto LABEL_64;
    }
  }
  v32 = (_QWORD *)a1[2];
  v33 = (*(uint64_t (**)(_QWORD *))(*v32 + 80))(v32);
  v34 = v32[4];
  v35 = v32[2];
  v36 = v34 - v35 + v33;
  v37 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v4) = v54;
  if (v37 != v36)
  {
    v38 = v33 + v34 - v35 - v37;
    do
    {
      v39 = (llvm::raw_ostream *)a1[2];
      v40 = (_BYTE *)*((_QWORD *)v39 + 4);
      if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
      {
        llvm::raw_ostream::write(v39);
      }
      else
      {
        *((_QWORD *)v39 + 4) = v40 + 1;
        *v40 = 0;
      }
    }
    while (!__CFADD__(v38++, 1));
  }
  if (!a1[3])
  {
    v12 = a1[1];
    if (v12)
    {
      if (*(_DWORD *)(v12 + 72))
      {
LABEL_64:
        v5 = *(_QWORD *)(v12 + 72);
        v4 = HIDWORD(v5);
        return v5 | ((unint64_t)v4 << 32);
      }
    }
  }
  v42 = (_QWORD *)a1[2];
  v43 = (*(uint64_t (**)(_QWORD *))(*v42 + 80))(v42);
  v44 = v51 - (v53 + v52) + v42[4] + v43 - v42[2] + v65[1];
  if (v44)
  {
    v45 = v68;
    do
    {
      *--v45 = (v44 % 0xA) | 0x30;
      v46 = v44 > 9;
      v44 /= 0xAuLL;
    }
    while (v46);
  }
  else
  {
    v45 = &v67;
    v67 = 48;
  }
  sub_22E3B4274(&__p, v45, v68, v68 - v45);
  if (v62 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v62 >= 0)
    v48 = (unint64_t *)(v62 & 0x7F);
  else
    v48 = v60;
  (*(void (**)(uint64_t, void *, unint64_t *, _QWORD))(*(_QWORD *)a1[2] + 104))(a1[2], p_p, v48, v65[0]);
  if (!a1[3] && (v50 = a1[1]) != 0 && *(_DWORD *)(v50 + 72))
  {
    v5 = *(_QWORD *)(v50 + 72);
    v4 = HIDWORD(v5);
    if (v62 < 0)
      operator delete(__p);
  }
  else
  {
    if (v62 < 0)
      operator delete(__p);
    std::system_category();
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)v4 << 32);
}

unint64_t sub_22F22DC18(uint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v13;
  _DWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  int v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  void **v29;
  void *v30;
  uint64_t v31;
  char v32;
  unint64_t *i;
  void *__p[2];
  char v35;
  _QWORD **v36;
  _QWORD *v37[2];
  unint64_t v38;
  unint64_t v39;
  char v40;
  __n128 v41;
  char v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v37[0] = 0;
  v37[1] = 0;
  v36 = v37;
  v2 = *(unint64_t **)(*(_QWORD *)a1 + 112);
  v3 = *(unint64_t **)(*(_QWORD *)a1 + 120);
  if (v2 != v3)
  {
    do
    {
      v5 = v2[1];
      v41.n128_u64[0] = *v2;
      v41.n128_u64[1] = v5;
      v38 = (unint64_t)&v41;
      v6 = sub_22F446F58((uint64_t)&v36, (uint64_t)&v41, (_OWORD **)&v38);
      v7 = *((_QWORD *)v6 + 6);
      *((_QWORD *)v6 + 6) = v7 + 1;
      if ((unint64_t)(v7 + 1) < 2)
        v1 = v7 + 1;
      else
        v1 = 2;
      v8 = (_OWORD *)*v2;
      v9 = v2[1];
      v2 += 6;
      v38 = (unint64_t)v8;
      v39 = v9;
      __p[0] = &v38;
      *((_QWORD *)sub_22F446F58((uint64_t)&v36, (uint64_t)&v38, (_OWORD **)__p) + 6) = v1;
    }
    while (v2 != v3);
    v10 = *(unint64_t **)(*(_QWORD *)a1 + 112);
    for (i = *(unint64_t **)(*(_QWORD *)a1 + 120); v10 != i; v10 += 6)
    {
      v13 = v10[5];
      v14 = *(_DWORD **)(a1 + 16);
      LODWORD(v14) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 80))(v14) + v14[8] - v14[4];
      v15 = (uint64_t *)operator new(0x30uLL);
      v16 = v15;
      v15[4] = v13;
      *((_DWORD *)v15 + 10) = (_DWORD)v14;
      v17 = *(uint64_t **)(a1 + 48);
      v18 = (uint64_t **)(a1 + 48);
      v19 = (uint64_t **)(a1 + 48);
      if (v17)
      {
        while (1)
        {
          while (1)
          {
            v19 = (uint64_t **)v17;
            v20 = v17[4];
            if (v20 <= v13)
              break;
            v17 = (uint64_t *)*v17;
            v18 = v19;
            if (!*v19)
              goto LABEL_16;
          }
          if (v20 >= v13)
            break;
          v17 = (uint64_t *)v17[1];
          if (!v17)
          {
            v18 = v19 + 1;
            goto LABEL_16;
          }
        }
        operator delete(v15);
      }
      else
      {
LABEL_16:
        *v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v19;
        *v18 = v15;
        v21 = **(_QWORD **)(a1 + 40);
        if (v21)
        {
          *(_QWORD *)(a1 + 40) = v21;
          v16 = *v18;
        }
        sub_22E49FD00(*(uint64_t **)(a1 + 48), v16);
        ++*(_QWORD *)(a1 + 56);
      }
      v22 = v10[1];
      v41.n128_u64[0] = *v10;
      v41.n128_u64[1] = v22;
      v38 = (unint64_t)&v41;
      if (*((_QWORD *)sub_22F446F58((uint64_t)&v36, (uint64_t)&v41, (_OWORD **)&v38) + 6) != 1)
      {
        v23 = v10[1];
        v38 = *v10;
        v39 = v23;
        __p[0] = &v38;
        v24 = sub_22F446F58((uint64_t)&v36, (uint64_t)&v38, (_OWORD **)__p);
        ++*((_QWORD *)v24 + 6);
      }
      sub_22F445F54(&v41, a1, (const void *)*v10, v10[1]);
      if ((v42 & 1) != 0)
      {
        LODWORD(v11) = v41.n128_u32[0];
        if (v41.n128_u32[0])
        {
          v1 = HIDWORD(v41.n128_u64[0]);
          goto LABEL_8;
        }
      }
      else
      {
        std::system_category();
      }
      sub_22F446BAC((uint64_t)&v38, (_QWORD *)a1);
      if ((v40 & 1) != 0)
      {
        LODWORD(v11) = v38;
        v1 = HIDWORD(v38);
        if ((_DWORD)v38)
          goto LABEL_8;
        v25 = 0;
      }
      else
      {
        std::system_category();
        LODWORD(v1) = 0;
        LODWORD(v11) = 0;
        v25 = v38;
      }
      v26 = v41.n128_u32[1] + v25;
      if ((_DWORD)v26)
      {
        v27 = (char *)&v44;
        do
        {
          *--v27 = (v26 % 0xA) | 0x30;
          v28 = v26 > 9;
          v26 /= 0xAuLL;
        }
        while (v28);
      }
      else
      {
        v43 = 48;
        v27 = &v43;
      }
      sub_22E3B4274(__p, v27, (char *)&v44, (char *)&v44 - v27);
      if (v35 >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if (v35 >= 0)
        v30 = (void *)(v35 & 0x7F);
      else
        v30 = __p[1];
      (*(void (**)(_QWORD, void **, void *, _QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v29, v30, v41.n128_u32[0]);
      if (!*(_QWORD *)(a1 + 24) && (v31 = *(_QWORD *)(a1 + 8)) != 0 && *(_DWORD *)(v31 + 72))
      {
        v32 = 0;
        v11 = *(_QWORD *)(v31 + 72);
        v1 = HIDWORD(v11);
      }
      else
      {
        v32 = 1;
      }
      if (v35 < 0)
        operator delete(__p[0]);
      if ((v32 & 1) == 0)
        goto LABEL_8;
    }
  }
  std::system_category();
  LODWORD(v11) = 0;
LABEL_8:
  sub_22F258024(v37[0]);
  return v11 | ((unint64_t)v1 << 32);
}

unint64_t sub_22F22DFCC(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  void **v30;
  void *v31;
  uint64_t v32;
  char v33;
  unint64_t *i;
  void *__p[2];
  char v36;
  _QWORD **v37;
  _QWORD *v38[2];
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v38[0] = 0;
  v38[1] = 0;
  v37 = v38;
  v2 = *(unint64_t **)(*(_QWORD *)a1 + 112);
  v3 = *(unint64_t **)(*(_QWORD *)a1 + 120);
  if (v2 != v3)
  {
    do
    {
      v5 = v2[1];
      v42 = *v2;
      v43 = v5;
      v39 = (unint64_t)&v42;
      v6 = sub_22F446F58((uint64_t)&v37, (uint64_t)&v42, (_OWORD **)&v39);
      v7 = *((_QWORD *)v6 + 6);
      *((_QWORD *)v6 + 6) = v7 + 1;
      if ((unint64_t)(v7 + 1) < 2)
        v1 = v7 + 1;
      else
        v1 = 2;
      v8 = (_OWORD *)*v2;
      v9 = v2[1];
      v2 += 6;
      v39 = (unint64_t)v8;
      v40 = v9;
      __p[0] = &v39;
      *((_QWORD *)sub_22F446F58((uint64_t)&v37, (uint64_t)&v39, (_OWORD **)__p) + 6) = v1;
    }
    while (v2 != v3);
    v10 = *(unint64_t **)(*(_QWORD *)a1 + 112);
    for (i = *(unint64_t **)(*(_QWORD *)a1 + 120); v10 != i; v10 += 6)
    {
      v13 = v10[5];
      v14 = *(_QWORD **)(a1 + 16);
      v15 = (*(uint64_t (**)(_QWORD *))(*v14 + 80))(v14) + v14[4] - v14[2];
      v16 = (uint64_t *)operator new(0x30uLL);
      v17 = v16;
      v16[4] = v13;
      v16[5] = v15;
      v18 = *(uint64_t **)(a1 + 48);
      v19 = (uint64_t **)(a1 + 48);
      v20 = (uint64_t **)(a1 + 48);
      if (v18)
      {
        while (1)
        {
          while (1)
          {
            v20 = (uint64_t **)v18;
            v21 = v18[4];
            if (v21 <= v13)
              break;
            v18 = (uint64_t *)*v18;
            v19 = v20;
            if (!*v20)
              goto LABEL_16;
          }
          if (v21 >= v13)
            break;
          v18 = (uint64_t *)v18[1];
          if (!v18)
          {
            v19 = v20 + 1;
            goto LABEL_16;
          }
        }
        operator delete(v16);
      }
      else
      {
LABEL_16:
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v20;
        *v19 = v16;
        v22 = **(_QWORD **)(a1 + 40);
        if (v22)
        {
          *(_QWORD *)(a1 + 40) = v22;
          v17 = *v19;
        }
        sub_22E49FD00(*(uint64_t **)(a1 + 48), v17);
        ++*(_QWORD *)(a1 + 56);
      }
      v23 = v10[1];
      v42 = *v10;
      v43 = v23;
      v39 = (unint64_t)&v42;
      if (*((_QWORD *)sub_22F446F58((uint64_t)&v37, (uint64_t)&v42, (_OWORD **)&v39) + 6) != 1)
      {
        v24 = v10[1];
        v39 = *v10;
        v40 = v24;
        __p[0] = &v39;
        v25 = sub_22F446F58((uint64_t)&v37, (uint64_t)&v39, (_OWORD **)__p);
        ++*((_QWORD *)v25 + 6);
      }
      sub_22F446580((uint64_t)&v42, a1, (const void *)*v10, v10[1]);
      if ((v44 & 1) != 0)
      {
        LODWORD(v11) = v42;
        if ((_DWORD)v42)
        {
          v1 = HIDWORD(v42);
          goto LABEL_8;
        }
      }
      else
      {
        std::system_category();
      }
      sub_22F446D20((uint64_t)&v39, (_QWORD *)a1);
      if ((v41 & 1) != 0)
      {
        v11 = v39;
        v1 = HIDWORD(v39);
        if ((_DWORD)v39)
          goto LABEL_8;
        LODWORD(v26) = 0;
      }
      else
      {
        std::system_category();
        LODWORD(v1) = 0;
        LODWORD(v26) = 0;
        v11 = v39;
      }
      v27 = v43 + v11;
      if (v43 + v11)
      {
        v28 = (char *)&v46;
        do
        {
          *--v28 = (v27 % 0xA) | 0x30;
          v29 = v27 > 9;
          v27 /= 0xAuLL;
        }
        while (v29);
      }
      else
      {
        v45 = 48;
        v28 = &v45;
      }
      sub_22E3B4274(__p, v28, (char *)&v46, (char *)&v46 - v28);
      if (v36 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      if (v36 >= 0)
        v31 = (void *)(v36 & 0x7F);
      else
        v31 = __p[1];
      (*(void (**)(_QWORD, void **, void *, unint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v30, v31, v42);
      if (!*(_QWORD *)(a1 + 24) && (v32 = *(_QWORD *)(a1 + 8)) != 0 && *(_DWORD *)(v32 + 72))
      {
        v33 = 0;
        v26 = *(_QWORD *)(v32 + 72);
        v1 = HIDWORD(v26);
      }
      else
      {
        v33 = 1;
      }
      if (v36 < 0)
        operator delete(__p[0]);
      if ((v33 & 1) == 0)
      {
        LODWORD(v11) = v26;
        goto LABEL_8;
      }
    }
  }
  std::system_category();
  LODWORD(v11) = 0;
LABEL_8:
  sub_22F258024(v38[0]);
  return v11 | ((unint64_t)v1 << 32);
}

uint64_t sub_22F22E384(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  int v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v26;
  int v27;
  unint64_t *v28;
  int v29;
  _QWORD v30[2];
  unsigned __int8 v31;
  unint64_t *v32;
  unsigned __int8 v33;

  v2 = *(unsigned int *)(a1 + 32);
  sub_22F22D614((uint64_t)v30, *(_QWORD *)a1);
  v3 = (unint64_t *)v30[0];
  v4 = v31;
  v27 = v33;
  v26 = v32;
  if (v31 == v33 && v30[0] == (_QWORD)v32)
  {
LABEL_30:
    std::system_category();
    return 0;
  }
  else
  {
    v6 = 0;
    v7 = (unint64_t *)v30[1];
    v8 = v2 + 4;
    while (1)
    {
      v9 = v3[1];
      v10 = (uint64_t *)v3[2];
      v29 = v6;
      (*(void (**)(_QWORD, int *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), &v29, 4, v8);
      if (!*(_QWORD *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          if (*(_DWORD *)(v11 + 72))
            break;
        }
      }
      v12 = (uint64_t **)(a1 + 48);
      while (1)
      {
        v13 = *v12;
        v14 = v12;
        if (!*v12)
          break;
        while (1)
        {
          v12 = (uint64_t **)v13;
          v15 = v13[4];
          if (v15 > (unint64_t)v10)
            break;
          if (v15 >= (unint64_t)v10)
            goto LABEL_18;
          v13 = v12[1];
          if (!v13)
          {
            v14 = v12 + 1;
            goto LABEL_15;
          }
        }
      }
LABEL_15:
      v28 = v3;
      v16 = v8;
      v17 = v9;
      v18 = v6;
      v19 = v4;
      v20 = (uint64_t *)v12;
      v12 = (uint64_t **)operator new(0x30uLL);
      v12[4] = v10;
      *((_DWORD *)v12 + 10) = 0;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v20;
      *v14 = (uint64_t *)v12;
      v21 = **(_QWORD **)(a1 + 40);
      v22 = (uint64_t *)v12;
      if (v21)
      {
        *(_QWORD *)(a1 + 40) = v21;
        v22 = *v14;
      }
      sub_22E49FD00(*(uint64_t **)(a1 + 48), v22);
      ++*(_QWORD *)(a1 + 56);
      v4 = v19;
      v6 = v18;
      LODWORD(v9) = v17;
      v8 = v16;
      v3 = v28;
LABEL_18:
      v29 = *((_DWORD *)v12 + 10);
      (*(void (**)(_QWORD, int *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), &v29, 4, v8 + 4);
      if (!*(_QWORD *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          if (*(_DWORD *)(v11 + 72))
            break;
        }
      }
      if ((_DWORD)v4)
      {
        v23 = v3 + 3;
        while (v23 != v7)
        {
          v24 = *v23;
          v23 += 3;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v3 = v23 - 3;
            goto LABEL_28;
          }
        }
        v3 = v7;
      }
      else
      {
        v3 += 3;
      }
LABEL_28:
      v8 += 8;
      v6 += v9 + 1;
      if ((_DWORD)v4 == v27 && v3 == v26)
        goto LABEL_30;
    }
    return *(_QWORD *)(v11 + 72);
  }
}

uint64_t sub_22F22E598(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v26;
  int v27;
  unint64_t *v28;
  _QWORD v29[2];
  unsigned __int8 v30;
  unint64_t *v31;
  unsigned __int8 v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  sub_22F22D614((uint64_t)v29, *(_QWORD *)a1);
  v3 = (unint64_t *)v29[0];
  v4 = v30;
  v27 = v32;
  v26 = v31;
  if (v30 == v32 && v29[0] == (_QWORD)v31)
  {
LABEL_30:
    std::system_category();
    return 0;
  }
  else
  {
    v6 = 0;
    v7 = (unint64_t *)v29[1];
    v8 = v2 + 8;
    while (1)
    {
      v9 = v3[1];
      v10 = (uint64_t *)v3[2];
      v33[0] = v6;
      (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v33, 8, v8);
      if (!*(_QWORD *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          if (*(_DWORD *)(v11 + 72))
            break;
        }
      }
      v12 = (uint64_t **)(a1 + 48);
      while (1)
      {
        v13 = *v12;
        v14 = v12;
        if (!*v12)
          break;
        while (1)
        {
          v12 = (uint64_t **)v13;
          v15 = v13[4];
          if (v15 > (unint64_t)v10)
            break;
          if (v15 >= (unint64_t)v10)
            goto LABEL_18;
          v13 = v12[1];
          if (!v13)
          {
            v14 = v12 + 1;
            goto LABEL_15;
          }
        }
      }
LABEL_15:
      v28 = v3;
      v16 = v8;
      v17 = v9;
      v18 = v6;
      v19 = v4;
      v20 = (uint64_t *)v12;
      v12 = (uint64_t **)operator new(0x30uLL);
      v12[4] = v10;
      v12[5] = 0;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v20;
      *v14 = (uint64_t *)v12;
      v21 = **(_QWORD **)(a1 + 40);
      v22 = (uint64_t *)v12;
      if (v21)
      {
        *(_QWORD *)(a1 + 40) = v21;
        v22 = *v14;
      }
      sub_22E49FD00(*(uint64_t **)(a1 + 48), v22);
      ++*(_QWORD *)(a1 + 56);
      v4 = v19;
      v6 = v18;
      v9 = v17;
      v8 = v16;
      v3 = v28;
LABEL_18:
      v33[0] = v12[5];
      (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v33, 8, v8 + 8);
      if (!*(_QWORD *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          if (*(_DWORD *)(v11 + 72))
            break;
        }
      }
      if ((_DWORD)v4)
      {
        v23 = v3 + 3;
        while (v23 != v7)
        {
          v24 = *v23;
          v23 += 3;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v3 = v23 - 3;
            goto LABEL_28;
          }
        }
        v3 = v7;
      }
      else
      {
        v3 += 3;
      }
LABEL_28:
      v8 += 16;
      v6 += v9 + 1;
      if ((_DWORD)v4 == v27 && v3 == v26)
        goto LABEL_30;
    }
    return *(_QWORD *)(v11 + 72);
  }
}

unint64_t sub_22F22E7D4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *i;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  int v27;
  unint64_t *v28;
  int v29;
  const void *v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v49;
  char v50[8];
  char v51[4];
  char v52[8];
  unint64_t *v53;
  unsigned __int8 v54;
  unint64_t *v55;
  unsigned __int8 v56;

  v7 = *(_QWORD *)a1;
  v8 = sub_22F445938(*(_QWORD *)a1);
  *(_DWORD *)v52 = 8 * *(_DWORD *)(v7 + 88);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v52);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
    goto LABEL_64;
  v10 = *(_QWORD *)a1;
  sub_22F22D614((uint64_t)v52, *(_QWORD *)a1);
  v11 = *(unint64_t **)v52;
  v12 = v53;
  v13 = v54;
  v14 = v56;
  if (v54 != v56 || *(unint64_t **)v52 != v55)
  {
    v49 = v55;
    v15 = 0;
    v16 = a4 + ((a3 + 67) & 0xFFFFFFF8) + v8 + 8;
    do
    {
      v17 = v11[1];
      v18 = v11[2];
      *(_DWORD *)v50 = v15;
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v50);
      v9 = *(_QWORD *)(a1 + 8);
      if (v9 && *(_DWORD *)(v9 + 72))
        goto LABEL_64;
      *(_QWORD *)v50 = v18;
      *(_DWORD *)v51 = v16 + *(_DWORD *)(sub_22F22CCDC((uint64_t *)(a1 + 24), (uint64_t *)v50) + 40);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v51);
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        if (*(_DWORD *)(v9 + 72))
          goto LABEL_64;
      }
      if (v13)
      {
        v19 = v11 + 3;
        while (v19 != v12)
        {
          v20 = *v19;
          v19 += 3;
          if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v11 = v19 - 3;
            goto LABEL_17;
          }
        }
        v11 = v12;
      }
      else
      {
        v11 += 3;
      }
LABEL_17:
      v15 += v17 + 1;
    }
    while (v13 != v14 || v11 != v49);
    v10 = *(_QWORD *)a1;
  }
  sub_22F22D614((uint64_t)v52, v10);
  v21 = 0;
  for (i = *(unint64_t **)v52; ; i = v53)
  {
LABEL_21:
    while (v54 != v56)
    {
      v21 += *((_DWORD *)i + 2) + 1;
      if (v54)
        goto LABEL_26;
LABEL_33:
      i += 3;
    }
    if (!v54)
      break;
    if (i == v55)
      goto LABEL_34;
    v21 += *((_DWORD *)i + 2) + 1;
LABEL_26:
    v23 = i + 3;
    while (v23 != v53)
    {
      v24 = *v23;
      v23 += 3;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v23 - 3;
        goto LABEL_21;
      }
    }
  }
  if (i != v55)
  {
    v21 += *((_DWORD *)i + 2) + 1;
    goto LABEL_33;
  }
LABEL_34:
  *(_DWORD *)v52 = v21;
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v52);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
    goto LABEL_64;
  sub_22F22D614((uint64_t)v52, *(_QWORD *)a1);
  v26 = *(unint64_t **)v52;
  v25 = v53;
  v27 = v54;
  v28 = v55;
  v29 = v56;
LABEL_37:
  while (v27 != v29 || v26 != v28)
  {
    v30 = (const void *)*v26;
    v31 = v26[1];
    v32 = *(llvm::raw_ostream **)(a1 + 16);
    v33 = (_BYTE *)*((_QWORD *)v32 + 4);
    if (v31 <= *((_QWORD *)v32 + 3) - (_QWORD)v33)
    {
      if (v31)
      {
        memcpy(v33, v30, v26[1]);
        v33 = (_BYTE *)(*((_QWORD *)v32 + 4) + v31);
        *((_QWORD *)v32 + 4) = v33;
      }
    }
    else
    {
      v32 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)v30);
      v33 = (_BYTE *)*((_QWORD *)v32 + 4);
    }
    if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
    {
      llvm::raw_ostream::write(v32);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v33 + 1;
      *v33 = 0;
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 && *(_DWORD *)(v9 + 72))
      goto LABEL_64;
    if (v27)
    {
      v34 = v26 + 3;
      while (v34 != v25)
      {
        v35 = *v34;
        v34 += 3;
        if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v26 = v34 - 3;
          goto LABEL_37;
        }
      }
      v26 = v25;
    }
    else
    {
      v26 += 3;
    }
  }
  v36 = *(_QWORD **)(a1 + 16);
  v37 = (*(uint64_t (**)(_QWORD *))(*v36 + 80))(v36);
  v38 = v36[4];
  v39 = v36[2];
  v40 = v38 - v39 + v37;
  v41 = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v41 != v40)
  {
    v42 = v37 + v38 - v39 - v41;
    do
    {
      v43 = *(llvm::raw_ostream **)(a1 + 16);
      v44 = (_BYTE *)*((_QWORD *)v43 + 4);
      if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
      {
        llvm::raw_ostream::write(v43);
      }
      else
      {
        *((_QWORD *)v43 + 4) = v44 + 1;
        *v44 = 0;
      }
    }
    while (!__CFADD__(v42++, 1));
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
  {
LABEL_64:
    v46 = *(_QWORD *)(v9 + 72);
    v47 = v46 & 0xFFFFFFFF00000000;
  }
  else
  {
    std::system_category();
    LODWORD(v46) = 0;
    v47 = 0;
  }
  return v47 | v46;
}

unint64_t sub_22F22EB9C(uint64_t a1)
{
  uint64_t v1;
  unint64_t *i;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t *v9;
  char v10;

  v1 = 16 * *(unsigned int *)(a1 + 88) + 16;
  sub_22F22D614((uint64_t)&v6, a1);
  for (i = v6; ; i = v7)
  {
LABEL_2:
    while (v8 != v10)
    {
      v1 += i[1] + 1;
      if (v8)
        goto LABEL_7;
LABEL_14:
      i += 3;
    }
    if (!v8)
      break;
    if (i == v9)
      return (v1 + 7) & 0xFFFFFFFFFFFFFFF8;
    v1 += i[1] + 1;
LABEL_7:
    v3 = i + 3;
    while (v3 != v7)
    {
      v4 = *v3;
      v3 += 3;
      if (v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v3 - 3;
        goto LABEL_2;
      }
    }
  }
  if (i != v9)
  {
    v1 += i[1] + 1;
    goto LABEL_14;
  }
  return (v1 + 7) & 0xFFFFFFFFFFFFFFF8;
}

unint64_t sub_22F22EC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *i;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  int v27;
  unint64_t *v28;
  int v29;
  const void *v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v49;
  uint64_t v50;
  char v51[8];
  char v52[8];
  unint64_t *v53;
  unsigned __int8 v54;
  unint64_t *v55;
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)a1;
  v8 = sub_22F445938(*(_QWORD *)a1);
  *(_QWORD *)v52 = 16 * *(unsigned int *)(v7 + 88);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v52);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
    goto LABEL_64;
  v10 = *(_QWORD *)a1;
  sub_22F22D614((uint64_t)v52, *(_QWORD *)a1);
  v11 = *(unint64_t **)v52;
  v12 = v53;
  v13 = v54;
  v14 = v56;
  if (v54 != v56 || *(unint64_t **)v52 != v55)
  {
    v49 = v55;
    v15 = 0;
    v16 = a4 + ((a3 + 67) & 0xFFFFFFFFFFFFFFF8) + v8 + 8;
    do
    {
      v17 = v11[1];
      v18 = v11[2];
      *(_QWORD *)v51 = v15;
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v51);
      v9 = *(_QWORD *)(a1 + 8);
      if (v9 && *(_DWORD *)(v9 + 72))
        goto LABEL_64;
      v50 = v18;
      *(_QWORD *)v51 = v16 + *(_QWORD *)(sub_22F22CCDC((uint64_t *)(a1 + 24), &v50) + 40);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v51);
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        if (*(_DWORD *)(v9 + 72))
          goto LABEL_64;
      }
      if (v13)
      {
        v19 = v11 + 3;
        while (v19 != v12)
        {
          v20 = *v19;
          v19 += 3;
          if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v11 = v19 - 3;
            goto LABEL_17;
          }
        }
        v11 = v12;
      }
      else
      {
        v11 += 3;
      }
LABEL_17:
      v15 += v17 + 1;
    }
    while (v13 != v14 || v11 != v49);
    v10 = *(_QWORD *)a1;
  }
  sub_22F22D614((uint64_t)v52, v10);
  v21 = 0;
  for (i = *(unint64_t **)v52; ; i = v53)
  {
LABEL_21:
    while (v54 != v56)
    {
      v21 += i[1] + 1;
      if (v54)
        goto LABEL_26;
LABEL_33:
      i += 3;
    }
    if (!v54)
      break;
    if (i == v55)
      goto LABEL_34;
    v21 += i[1] + 1;
LABEL_26:
    v23 = i + 3;
    while (v23 != v53)
    {
      v24 = *v23;
      v23 += 3;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v23 - 3;
        goto LABEL_21;
      }
    }
  }
  if (i != v55)
  {
    v21 += i[1] + 1;
    goto LABEL_33;
  }
LABEL_34:
  *(_QWORD *)v52 = v21;
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), v52);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
    goto LABEL_64;
  sub_22F22D614((uint64_t)v52, *(_QWORD *)a1);
  v26 = *(unint64_t **)v52;
  v25 = v53;
  v27 = v54;
  v28 = v55;
  v29 = v56;
LABEL_37:
  while (v27 != v29 || v26 != v28)
  {
    v30 = (const void *)*v26;
    v31 = v26[1];
    v32 = *(llvm::raw_ostream **)(a1 + 16);
    v33 = (_BYTE *)*((_QWORD *)v32 + 4);
    if (v31 <= *((_QWORD *)v32 + 3) - (_QWORD)v33)
    {
      if (v31)
      {
        memcpy(v33, v30, v26[1]);
        v33 = (_BYTE *)(*((_QWORD *)v32 + 4) + v31);
        *((_QWORD *)v32 + 4) = v33;
      }
    }
    else
    {
      v32 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 16), (const char *)v30);
      v33 = (_BYTE *)*((_QWORD *)v32 + 4);
    }
    if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
    {
      llvm::raw_ostream::write(v32);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v33 + 1;
      *v33 = 0;
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 && *(_DWORD *)(v9 + 72))
      goto LABEL_64;
    if (v27)
    {
      v34 = v26 + 3;
      while (v34 != v25)
      {
        v35 = *v34;
        v34 += 3;
        if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v26 = v34 - 3;
          goto LABEL_37;
        }
      }
      v26 = v25;
    }
    else
    {
      v26 += 3;
    }
  }
  v36 = *(_QWORD **)(a1 + 16);
  v37 = (*(uint64_t (**)(_QWORD *))(*v36 + 80))(v36);
  v38 = v36[4];
  v39 = v36[2];
  v40 = v38 - v39 + v37;
  v41 = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v41 != v40)
  {
    v42 = v37 + v38 - v39 - v41;
    do
    {
      v43 = *(llvm::raw_ostream **)(a1 + 16);
      v44 = (_BYTE *)*((_QWORD *)v43 + 4);
      if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
      {
        llvm::raw_ostream::write(v43);
      }
      else
      {
        *((_QWORD *)v43 + 4) = v44 + 1;
        *v44 = 0;
      }
    }
    while (!__CFADD__(v42++, 1));
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_DWORD *)(v9 + 72))
  {
LABEL_64:
    v46 = *(_QWORD *)(v9 + 72);
    v47 = v46 & 0xFFFFFFFF00000000;
  }
  else
  {
    std::system_category();
    LODWORD(v46) = 0;
    v47 = 0;
  }
  return v47 | v46;
}

_QWORD *sub_22F22F054(_QWORD *result, void *__src, size_t __len)
{
  _QWORD *v3;
  __int128 *v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;

  v3 = result;
  if (!__src)
  {
    v20 = 0uLL;
    v21 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_31;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v20 + 1) = __len;
    v21 = v8 | 0x8000000000000000;
    *(_QWORD *)&v20 = v6;
  }
  else
  {
    HIBYTE(v21) = __len;
    v6 = &v20;
    if (!__len)
      goto LABEL_11;
  }
  result = memmove(v6, __src, __len);
LABEL_11:
  *((_BYTE *)v6 + __len) = 0;
LABEL_12:
  v9 = v3[3];
  v10 = v3[2];
  if (v10 < v9)
  {
    *(_OWORD *)v10 = v20;
    *(_QWORD *)(v10 + 16) = v21;
    v11 = v10 + 24;
    goto LABEL_30;
  }
  v12 = v3[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v12) >> 3) + 1;
  if (v13 > 0xAAAAAAAAAAAAAAALL)
LABEL_31:
    abort();
  if (0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3) > v13)
    v13 = 0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3) >= 0x555555555555555)
    v14 = 0xAAAAAAAAAAAAAAALL;
  else
    v14 = v13;
  v25 = v3 + 3;
  if (v14)
  {
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_22E3B3F8C();
    v15 = (char *)operator new(24 * v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
  *(_OWORD *)v16 = v20;
  *((_QWORD *)v16 + 2) = v21;
  if (v10 == v12)
  {
    v19 = vdupq_n_s64(v10);
    v17 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
  }
  else
  {
    v17 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
    do
    {
      v18 = *(_OWORD *)(v10 - 24);
      *((_QWORD *)v17 - 1) = *(_QWORD *)(v10 - 8);
      *(_OWORD *)(v17 - 24) = v18;
      v17 -= 24;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      *(_QWORD *)(v10 - 24) = 0;
      v10 -= 24;
    }
    while (v10 != v12);
    v19 = *(int64x2_t *)(v3 + 1);
    v9 = v3[3];
  }
  v11 = (unint64_t)(v16 + 24);
  v3[1] = v17;
  v3[2] = v16 + 24;
  v23 = v19;
  v3[3] = &v15[24 * v14];
  v24 = v9;
  v22 = v19.i64[0];
  result = (_QWORD *)sub_22E3B8B94((uint64_t)&v22);
LABEL_30:
  v3[2] = v11;
  return result;
}

uint64_t sub_22F22F244(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FCB0660;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_22F22F280(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FCB0660;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x2348A0E9CLL);
}

llvm::MDString *sub_22F22F2CC(uint64_t a1)
{
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v3;

  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    return (llvm::MDString *)(v3 == 21
                           && *String == 0x636E75662E726961
                           && String[1] == 0x6E6F635F6E6F6974
                           && *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63);
  }
  return result;
}

uint64_t sub_22F22F348(uint64_t a1, llvm::Value *this, int a3, uint64_t a4)
{
  uint64_t Name;
  unint64_t v8;
  const void *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  Name = llvm::Value::getName(this);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = (const void *)Name;
  v10 = v8;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v13 | 0x8000000000000000;
    *(_QWORD *)a1 = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v8;
    v11 = (void *)a1;
    if (!v8)
      goto LABEL_9;
  }
  memmove(v11, v9, v10);
LABEL_9:
  *((_BYTE *)v11 + v10) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = off_24FCB0660;
  *(_DWORD *)(a1 + 112) = -1;
  *(_BYTE *)(a1 + 143) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = off_24FCB0630;
  *(_DWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a4;
  *(_BYTE *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 256) = 63;
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

uint64_t sub_22F22F478()
{
  return llvm::Module::getFunction();
}

__n128 sub_22F22F4A4@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::insert(this, 0, __s);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_22F22F4E8(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  char *String;
  uint64_t v17;
  uint64_t v18;

  v17 = result;
  if (a2)
  {
    if (!*(_DWORD *)(result + 24))
    {
      v18 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v4 = a2 - 8 * *(unsigned int *)(a2 + 8);
          v5 = *(_QWORD *)(v4 + 8 * i);
          v6 = *(unsigned int *)(v5 + 8);
          if ((_DWORD)v6)
          {
            v7 = 0;
            v8 = *(_QWORD *)(v4 + 8 * i);
            do
            {
              result = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v5 + 8));
              if (!*(_BYTE *)result)
              {
                result = llvm::MDString::getString((llvm::MDString *)result);
                if (v9 == 29)
                {
                  v13 = *(_QWORD *)result == 0x646E65722E726961
                     && *(_QWORD *)(result + 8) == 0x65677261745F7265
                     && *(_QWORD *)(result + 16) == 0x5F79617272615F74
                     && *(_QWORD *)(result + 21) == 0x7865646E695F7961;
                  v7 |= v13;
                }
                else if ((v7 & (v9 == 17)) != 0)
                {
                  v14 = *(_QWORD *)result == 0x5F6772612E726961 && *(_QWORD *)(result + 8) == 0x6D616E5F65707974;
                  v15 = v14 && *(_BYTE *)(result + 16) == 101;
                  v7 = 1;
                  if (v15)
                  {
                    String = (char *)llvm::MDString::getString(*(llvm::MDString **)(v8
                                                                                  - 8 * *(unsigned int *)(v5 + 8)
                                                                                  + 8));
                    result = sub_22F448B68(String);
                    *(_BYTE *)(v17 + 232) = 1;
                    *(_DWORD *)(v17 + 236) = result;
                    return result;
                  }
                }
              }
              v8 += 8;
              --v6;
            }
            while (v6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F22F684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = 1;
  result = sub_22F4472C8(a2);
  if ((_DWORD)result == 1)
    v7 = 1;
  else
    v7 = 2;
  *(_DWORD *)(a1 + 4) = v7;
  if (*(_DWORD *)(a2 + 8) != 4)
  {
    LOBYTE(v10) = 63;
    goto LABEL_23;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 128);
  v9 = (_QWORD *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u)
    v9 = (_QWORD *)*v9;
  v10 = (_QWORD *)*v9;
  if (v10 <= 0x20)
  {
LABEL_23:
    *(_BYTE *)(a1 + 8) = (_BYTE)v10;
    if (a3)
      goto LABEL_9;
LABEL_24:
    v18 = 0;
    goto LABEL_25;
  }
  if (!a3)
    goto LABEL_24;
LABEL_9:
  v11 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v11)
    return result;
  for (i = a3; ; i += 8)
  {
    v13 = *(_QWORD *)(i - 8 * *(unsigned int *)(a3 + 8));
    result = llvm::air::AIArgument::classof();
    if (v13 && (_DWORD)result != 0)
    {
      result = (uint64_t)sub_22F22F2CC(v13);
      v15 = (_DWORD)result ? 32 : 16;
      v16 = *(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8) + v15);
      v17 = *(_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8) + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 128);
        if (v18)
          break;
      }
    }
    if (!--v11)
      return result;
  }
LABEL_25:
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

void sub_22F22F7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x2348A0E9CLL);
  }
}

uint64_t sub_22F22F810(uint64_t *a1)
{
  llvm::Module **v2;
  llvm::Module **v3;
  llvm::Module *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *i;
  llvm::Value *v10;
  _QWORD *j;
  llvm::Value *v12;
  llvm::Module *v14;

  v2 = (llvm::Module **)*a1;
  v3 = (llvm::Module **)a1[1];
  if ((llvm::Module **)*a1 != v3)
  {
    do
    {
      v4 = *v2;
      v14 = v4;
      v5 = sub_22F242538(v4);
      v7 = v6;
      v8 = sub_22F447CA8((uint64_t)(a1 + 5), (uint64_t *)&v14);
      v8[1] = v5;
      *((_DWORD *)v8 + 4) = v7;
      for (i = (_QWORD *)*((_QWORD *)v4 + 2); i != (_QWORD *)((char *)v4 + 8); i = (_QWORD *)i[1])
      {
        if (i)
          v10 = (llvm::Value *)(i - 7);
        else
          v10 = 0;
        sub_22F22F900((uint64_t)a1, v10);
      }
      for (j = (_QWORD *)*((_QWORD *)v4 + 4); j != (_QWORD *)((char *)v4 + 24); j = (_QWORD *)j[1])
      {
        if (j)
          v12 = (llvm::Value *)(j - 7);
        else
          v12 = 0;
        sub_22F22F900((uint64_t)a1, v12);
      }
      sub_22F4473D0((uint64_t)a1);
      ++v2;
    }
    while (v2 != v3);
  }
  return sub_22F22FF78(a1);
}

void sub_22F22F900(uint64_t a1, llvm::Value *this)
{
  uint64_t Name;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::GlobalValue *v20;
  llvm::GlobalValue *v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int isDeclaration;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  unsigned int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  llvm::raw_ostream *v64;
  const char *v65;
  size_t v66;
  llvm::raw_ostream *v67;
  char *v68;
  llvm::raw_ostream *v69;
  const char *v70;
  size_t v71;
  llvm::raw_ostream *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  void *__p[2];
  uint64_t v83;

  if ((*((_DWORD *)this + 8) & 0xF) == 7)
    return;
  Name = llvm::Value::getName(this);
  if (v5 == 17
    && (*(_QWORD *)Name == 0x6F6C672E6D766C6CLL ? (v37 = *(_QWORD *)(Name + 8) == 0x726F74635F6C6162) : (v37 = 0),
        v37 ? (v38 = *(_BYTE *)(Name + 16) == 115) : (v38 = 0),
        v38))
  {
    v39 = *(_DWORD *)(a1 + 920);
    if (v39 >= *(_DWORD *)(a1 + 924))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v39 = *(_DWORD *)(a1 + 920);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v39) = this;
    ++*(_DWORD *)(a1 + 920);
  }
  else
  {
    v6 = llvm::Value::getName(this);
    if (v7 == 18
      && (*(_QWORD *)v6 == 0x6D6F632E6D766C6CLL ? (v40 = *(_QWORD *)(v6 + 8) == 0x73752E72656C6970) : (v40 = 0),
          v40 ? (v41 = *(unsigned __int16 *)(v6 + 16) == 25701) : (v41 = 0),
          v41))
    {
      v42 = *(_DWORD *)(a1 + 1064);
      if (v42 >= *(_DWORD *)(a1 + 1068))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v42 = *(_DWORD *)(a1 + 1064);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 1056) + 8 * v42) = this;
      ++*(_DWORD *)(a1 + 1064);
    }
    else
    {
      v8 = llvm::Value::getName(this);
      if (v9 != 9 || (*(_QWORD *)v8 == 0x6573752E6D766C6CLL ? (v50 = *(_BYTE *)(v8 + 8) == 100) : (v50 = 0), !v50))
      {
        v10 = (const void *)llvm::Value::getName(this);
        v12 = v11;
        v13 = llvm::StringMapImpl::LookupBucketFor();
        v14 = *(_QWORD *)(a1 + 64);
        v15 = v13;
        v16 = *(_QWORD **)(v14 + 8 * v13);
        if (!v16)
        {
LABEL_6:
          v17 = MEMORY[0x23489D23C](v12 + 41, 8);
          v18 = (_QWORD *)v17;
          v19 = v17 + 40;
          if (v12)
            memcpy((void *)(v17 + 40), v10, v12);
          *(_BYTE *)(v19 + v12) = 0;
          *v18 = v12;
          v18[1] = this;
          v18[3] = 0;
          v18[4] = 0;
          v18[2] = 0;
          *(_QWORD *)(v14 + 8 * v15) = v18;
          ++*(_DWORD *)(a1 + 76);
          llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 64));
          return;
        }
        if (v16 == (_QWORD *)-8)
        {
          --*(_DWORD *)(a1 + 80);
          goto LABEL_6;
        }
        __p[0] = 0;
        __p[1] = 0;
        v83 = 0;
        v74 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 1;
        v76 = 0;
        v77 = 0;
        v75 = 0;
        v73 = MEMORY[0x24BED83D8] + 16;
        v81 = (uint64_t *)__p;
        llvm::raw_ostream::SetBufferAndMode();
        v20 = (llvm::GlobalValue *)v16[1];
        if ((*((_DWORD *)v20 + 8) & 0xF) == 1
          || (llvm::GlobalValue::isDeclaration(v20) & 1) != 0
          || (*((_DWORD *)this + 8) & 0xF) == 1
          || (llvm::GlobalValue::isDeclaration(this) & 1) != 0
          || ((*((_DWORD *)this + 8) ^ *(_DWORD *)(v16[1] + 32)) & 0xF) == 0)
        {
          v21 = (llvm::GlobalValue *)v16[1];
          if ((*((_DWORD *)v21 + 8) & 0xF) == 1)
          {
            v22 = *((_DWORD *)this + 8);
            goto LABEL_17;
          }
          isDeclaration = llvm::GlobalValue::isDeclaration(v21);
          v22 = *((_DWORD *)this + 8);
          if (isDeclaration)
          {
LABEL_17:
            if ((v22 & 0xF) == 1 || llvm::GlobalValue::isDeclaration(this))
            {
              v24 = (_QWORD *)v16[3];
              v23 = v16[4];
              if ((unint64_t)v24 < v23)
              {
LABEL_20:
                *v24 = this;
                v25 = v24 + 1;
LABEL_21:
                v16[3] = v25;
                goto LABEL_22;
              }
              v43 = (_QWORD *)v16[2];
              v44 = v24 - v43;
              v45 = v44 + 1;
              if (!((unint64_t)(v44 + 1) >> 61))
              {
                v46 = v23 - (_QWORD)v43;
                if (v46 >> 2 > v45)
                  v45 = v46 >> 2;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                  v47 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (!v47)
                {
                  v48 = 0;
                  goto LABEL_72;
                }
                if (!(v47 >> 61))
                {
                  v48 = (char *)operator new(8 * v47);
LABEL_72:
                  v34 = &v48[8 * v44];
                  v35 = &v48[8 * v47];
                  *(_QWORD *)v34 = this;
                  v25 = v34 + 8;
                  if (v24 == v43)
                    goto LABEL_75;
                  do
                  {
                    v49 = *--v24;
                    *((_QWORD *)v34 - 1) = v49;
                    v34 -= 8;
                  }
                  while (v24 != v43);
LABEL_74:
                  v24 = (_QWORD *)v16[2];
LABEL_75:
                  v16[2] = v34;
                  v16[3] = v25;
                  v16[4] = v35;
                  if (v24)
                    operator delete(v24);
                  goto LABEL_21;
                }
LABEL_108:
                sub_22E3B3F8C();
              }
LABEL_107:
              abort();
            }
            v52 = v16[1];
            v54 = (_QWORD *)v16[3];
            v53 = v16[4];
            if ((unint64_t)v54 >= v53)
            {
              v56 = (_QWORD *)v16[2];
              v57 = v54 - v56;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
                goto LABEL_107;
              v59 = v53 - (_QWORD)v56;
              if (v59 >> 2 > v58)
                v58 = v59 >> 2;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                v60 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                if (v60 >> 61)
                  goto LABEL_108;
                v61 = (char *)operator new(8 * v60);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[8 * v57];
              *(_QWORD *)v62 = v52;
              v55 = v62 + 8;
              if (v54 != v56)
              {
                do
                {
                  v63 = *--v54;
                  *((_QWORD *)v62 - 1) = v63;
                  v62 -= 8;
                }
                while (v54 != v56);
                v54 = (_QWORD *)v16[2];
              }
              v16[2] = v62;
              v16[3] = v55;
              v16[4] = &v61[8 * v60];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *v54 = v52;
              v55 = v54 + 1;
            }
            v16[3] = v55;
            v16[1] = this;
            goto LABEL_22;
          }
          if ((*((_DWORD *)this + 8) & 0xF) == 1 || llvm::GlobalValue::isDeclaration(this))
          {
            v24 = (_QWORD *)v16[3];
            v27 = v16[4];
            if ((unint64_t)v24 < v27)
              goto LABEL_20;
            v28 = (_QWORD *)v16[2];
            v29 = v24 - v28;
            v30 = v29 + 1;
            if (!((unint64_t)(v29 + 1) >> 61))
            {
              v31 = v27 - (_QWORD)v28;
              if (v31 >> 2 > v30)
                v30 = v31 >> 2;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                v32 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                if (v32 >> 61)
                  goto LABEL_108;
                v33 = (char *)operator new(8 * v32);
              }
              else
              {
                v33 = 0;
              }
              v34 = &v33[8 * v29];
              v35 = &v33[8 * v32];
              *(_QWORD *)v34 = this;
              v25 = v34 + 8;
              if (v24 == v28)
                goto LABEL_75;
              do
              {
                v36 = *--v24;
                *((_QWORD *)v34 - 1) = v36;
                v34 -= 8;
              }
              while (v24 != v28);
              goto LABEL_74;
            }
            goto LABEL_107;
          }
          if ((*((_BYTE *)this + 32) & 0xF) != 0)
          {
LABEL_22:
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v73);
            if (SHIBYTE(v83) < 0)
              operator delete(__p[0]);
            return;
          }
          v64 = sub_22E47DAC0((llvm::raw_ostream *)&v73, "multiple symbols ('");
          v65 = (const char *)llvm::Value::getName(this);
          v67 = sub_22F447370(v64, v65, v66);
          v68 = "')!";
        }
        else
        {
          v69 = sub_22E47DAC0((llvm::raw_ostream *)&v73, "multiple symbols ('");
          v70 = (const char *)llvm::Value::getName(this);
          v72 = sub_22F447370(v69, v70, v71);
          v67 = sub_22E47DAC0(v72, "') with ");
          v68 = "incompatible linkages!";
        }
        sub_22E47DAC0(v67, v68);
        sub_22F4472A8(v81);
      }
      v51 = *(_DWORD *)(a1 + 1208);
      if (v51 >= *(_DWORD *)(a1 + 1212))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = *(_DWORD *)(a1 + 1208);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 1200) + 8 * v51) = this;
      ++*(_DWORD *)(a1 + 1208);
    }
  }
}

uint64_t sub_22F22FF78(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    do
    {
      v1 += 8;
      llvm::TypeFinder::run();
    }
    while (v1 != v2);
  }
  return sub_22F236BB0((uint64_t)v4);
}

void sub_22F230068(uint64_t a1, uint64_t a2)
{
  uint64_t Name;
  uint64_t v4;
  uint64_t v5;
  llvm::Value **v6;
  uint64_t v7;
  llvm::GlobalVariable *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  void *v20;
  llvm::Type *v21;
  _QWORD v22[18];

  v22[16] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 8) >= 2u)
  {
    v20 = v22;
    v21 = (llvm::Type *)0x1000000000;
    Name = llvm::Value::getName(**(llvm::Value ***)a2);
    v16 = v4;
    v17 = Name;
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(llvm::Value ***)a2;
      v7 = *(_QWORD *)a2 + 8 * v5;
      do
      {
        llvm::ValueMapper::ValueMapper();
        v8 = (llvm::GlobalVariable *)llvm::ValueMapper::mapConstant();
        MEMORY[0x23489C744](v18);
        v9 = *((_QWORD *)v8 - 4);
        if (v9)
          v10 = *(_BYTE *)(v9 + 16) == 8;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(_DWORD *)(v9 + 20);
          v12 = v11 & 0x7FFFFFF;
          if ((v11 & 0x7FFFFFF) != 0)
          {
            v13 = v21;
            v14 = *((_QWORD *)v8 - 4);
            do
            {
              v15 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
              if (v13 >= HIDWORD(v21))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v13 = v21;
              }
              *((_QWORD *)v20 + v13) = v15;
              v13 = (_DWORD)v21 + 1;
              LODWORD(v21) = (_DWORD)v21 + 1;
              v14 += 32;
              --v12;
            }
            while (v12);
          }
        }
        llvm::GlobalVariable::eraseFromParent(v8);
        ++v6;
      }
      while (v6 != (llvm::Value **)v7);
    }
    if ((_DWORD)v21)
    {
      llvm::ArrayType::get(**(llvm::ArrayType ***)v20, (llvm::Type *)v21);
      llvm::User::operator new((llvm::User *)0x58);
      llvm::ConstantArray::get();
      v19 = 261;
      v18[0] = v17;
      v18[1] = v16;
      llvm::GlobalVariable::GlobalVariable();
    }
    if (v20 != v22)
      free(v20);
  }
}

void sub_22F2302C8(uint64_t *a1, uint64_t a2, llvm::Value *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  llvm **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueHandleBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  unsigned int v22;
  llvm *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  int Key;
  _QWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  _DWORD *v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string::size_type v69;
  uint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  void *v120;
  int v121;
  int v122;
  int v123;
  llvm::Module *v124;
  uint64_t v125;
  llvm::Module *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const llvm::DataLayout *DataLayout;
  void *v132;
  _QWORD *v133;
  void *v134;
  char v135;
  int v136;
  void *v137;
  size_t v138;
  size_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  BOOL v143;
  llvm::StructType *v144;
  llvm::StructType *v145;
  uint64_t v146;
  uint64_t v147;
  std::string::size_type v148;
  uint64_t v149;
  uint64_t v150;
  llvm::Function *v151;
  _QWORD *v152;
  uint64_t v153;
  llvm::ValueHandleBase *v154;
  uint64_t v155;
  llvm::StructType *v156;
  uint64_t v157;
  std::string::size_type v158;
  llvm::GlobalVariable *v159;
  std::string::size_type v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  void **v164;
  void **v165;
  void *v166;
  uint64_t v167;
  _QWORD *v169;
  uint64_t v170;
  llvm::GlobalValue **v172;
  llvm::GlobalValue **v173;
  llvm::GlobalValue *v174;
  int v175;
  BOOL v176;
  BOOL v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  llvm::Value *v182;
  uint64_t v183;
  llvm::Value *v184;
  uint64_t v185;
  llvm::Value *v186;
  uint64_t v187;
  std::string::size_type v188;
  _QWORD *v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  llvm::StructType *ValueAsType;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  _DWORD *v208;
  unint64_t v209;
  _QWORD *SectionImpl;
  uint64_t v211;
  BOOL v212;
  BOOL v213;
  uint64_t v214;
  llvm::Module *v215;
  std::string::size_type v216;
  char *v217;
  llvm::NamedMDNode *NamedMetadata;
  int NumOperands;
  int v220;
  int v221;
  uint64_t *v222;
  _QWORD *v223;
  uint64_t Operand;
  std::string::size_type v226;
  uint64_t *v227;
  uint64_t v228;
  BOOL v229;
  uint64_t v231;
  uint64_t v232;
  std::string *v233;
  uint64_t v234;
  std::string::size_type v235;
  uint64_t v236;
  llvm::MDString *v237;
  llvm::MDString *v238;
  uint64_t *v239;
  uint64_t v240;
  BOOL v241;
  uint64_t v243;
  uint64_t v244;
  std::string *v245;
  uint64_t v246;
  unsigned int *v247;
  uint64_t v248;
  uint64_t v249;
  llvm::MDString *v250;
  uint64_t v251;
  uint64_t v252;
  llvm::MDString *v253;
  llvm::LLVMContext *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t j;
  uint64_t v267;
  _QWORD *v268;
  llvm::Instruction *v269;
  uint64_t MetadataImpl;
  uint64_t *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  int v275;
  char *v276;
  uint64_t v277;
  uint64_t *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  char *v291;
  uint64_t *v292;
  uint64_t v293;
  BOOL v294;
  uint64_t v296;
  uint64_t v297;
  std::string *v298;
  uint64_t v299;
  uint64_t *v300;
  BOOL v301;
  uint64_t Impl;
  uint64_t v303;
  std::string::size_type v304;
  uint64_t v305;
  llvm::Module **v306;
  llvm::TracepointSet **v307;
  llvm::TracepointSet **v308;
  llvm::TracepointSet **v309;
  llvm::Module *v310;
  llvm::NamedMDNode *v311;
  llvm::NamedMDNode *v312;
  int v313;
  int v314;
  int v315;
  llvm::TracepointSet **v316;
  llvm::TracepointSet *v317;
  llvm::TracepointBaseID *BaseID;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  char *v330;
  llvm::TracepointSet **v331;
  llvm::TracepointSet *v332;
  llvm::TracepointSet **v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  BOOL v337;
  uint64_t v339;
  uint64_t v340;
  std::string *v341;
  uint64_t v342;
  std::string::size_type v343;
  uint64_t v344;
  llvm::Value *v345;
  llvm::MDString *v346;
  llvm::NamedMDNode *inserted;
  std::string::size_type v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  llvm **v360;
  llvm **v361;
  llvm *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  std::string::size_type v393;
  std::string::size_type v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  std::string::size_type v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  std::string::size_type v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  llvm::Value *v407;
  _DWORD *v408;
  unint64_t v409;
  std::string::size_type v411;
  uint64_t GlobalVariable;
  const llvm::Instruction *v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  llvm::Value **v417;
  llvm::Value **v418;
  uint64_t v419;
  const char *v420;
  char *v421;
  const char **v422;
  char *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  char *v428;
  const char **v429;
  const char *v430;
  const char **v431;
  const char **v432;
  const char *v433;
  _QWORD *v434;
  _QWORD *k;
  _QWORD *v436;
  _QWORD *v437;
  uint64_t v438;
  llvm *v439;
  uint64_t v440;
  int v441;
  llvm::Value *VariableAddress;
  uint64_t v443;
  std::string::size_type v444;
  uint64_t v445;
  _QWORD *v446;
  _QWORD *v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  char *v451;
  llvm *v452;
  unsigned int v453;
  unsigned int v454;
  uint64_t v455;
  llvm::Instruction *v456;
  uint64_t Function;
  unsigned int v458;
  uint64_t v459;
  int v460;
  unsigned int v461;
  const char *v462;
  llvm *v463;
  std::string::size_type v464;
  void *v465;
  uint64_t v466;
  llvm::Value **v467;
  std::string::size_type v468;
  llvm::Value **v469;
  llvm::Type **v470;
  char *v471;
  _BYTE *v472;
  uint64_t v473;
  llvm::Type *v474;
  llvm::GlobalVariable *v475;
  llvm::ArrayType *Int8PtrTy;
  unint64_t v477;
  uint64_t PointerCast;
  uint64_t v479;
  llvm::Type *v480;
  _QWORD *v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  void *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  int v491;
  uint64_t v492;
  int v493;
  llvm::NamedMDNode *v494;
  int v495;
  int v496;
  llvm::NamedMDNode *v497;
  int v498;
  uint64_t Name;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  std::string::size_type v503;
  const void *v504;
  std::string *v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  std::string *v514;
  std::string::size_type v515;
  std::string *v516;
  std::string::size_type v517;
  uint64_t OSName;
  unint64_t v519;
  std::string::size_type v520;
  std::string::size_type v521;
  char v522;
  std::string::size_type v523;
  const void *v524;
  std::string *v525;
  uint64_t v526;
  uint64_t v527;
  BOOL v528;
  std::string *v529;
  std::string::size_type v530;
  std::string::size_type v531;
  std::string *v532;
  std::string::size_type v533;
  std::string *v534;
  std::string::size_type v535;
  uint64_t v536;
  unint64_t v537;
  std::string::size_type v538;
  std::string::size_type v539;
  char v540;
  std::string::size_type v541;
  const void *v542;
  std::string *v543;
  uint64_t v544;
  uint64_t v545;
  BOOL v546;
  std::string *v547;
  std::string::size_type v548;
  std::string::size_type v549;
  std::string *v550;
  std::string::size_type v551;
  llvm **v552;
  std::string::size_type v553;
  std::string::size_type v554;
  const void *v555;
  std::string *p_dst;
  uint64_t v557;
  uint64_t v558;
  std::string *v559;
  std::string::size_type v560;
  std::string *v561;
  std::string::size_type v562;
  std::string *v563;
  std::string::size_type size;
  std::string *v565;
  std::string::size_type v566;
  std::string *v567;
  std::string::size_type v568;
  void *v569;
  size_t v570;
  uint64_t v571;
  llvm **v572;
  uint64_t v573;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t *v584;
  _QWORD *v585;
  llvm::Function *v586;
  uint64_t v587;
  const char **v588;
  void *__p;
  _QWORD *__pa;
  llvm::Module **__pb;
  const char *__pc;
  uint64_t *v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  llvm *v597;
  uint64_t v598;
  unsigned int v599;
  void *v600;
  const char **v601;
  const char **v602;
  std::string v603;
  unsigned int v604;
  const char *v605;
  char *v606;
  uint64_t v607;
  __int16 v608;
  llvm::NamedMDNode *v609;
  int v610;
  llvm::NamedMDNode *v611;
  int v612;
  std::string v613;
  std::string v614;
  std::string __dst;
  std::string v616;
  std::string v617;
  std::string v618;
  std::string v619;
  llvm *v620[2];
  uint64_t v621;
  void *v622;
  _BYTE *v623;
  uint64_t v624;
  std::string v625;
  __int16 v626;
  int v627;
  std::string v628;
  void *v629;
  char *v630;
  char *v631;
  void *v632;
  uint64_t v633;
  unsigned int v634;
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  unsigned int v638;
  uint64_t *v639;
  std::string::size_type v640;
  uint64_t v641;
  void *v642;
  uint64_t v643;
  uint64_t v644;
  _QWORD v645[4];
  uint64_t v646;
  void *v647;
  uint64_t v648;
  _QWORD v649[5];
  uint64_t v650;
  void *v651;
  uint64_t v652;
  _QWORD v653[5];
  uint64_t v654;
  _QWORD *v655;
  void *v656;
  uint64_t v657;
  int v658;
  _QWORD v659[5];
  _QWORD v660[6];
  _QWORD v661[23];

  v5 = a2;
  v661[21] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 624) = a3;
  *(_DWORD *)(a2 + 632) = a4;
  *(_QWORD *)(a2 + 640) = a5;
  v6 = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a2 + 648) = 0;
  if (v6)
  {
    v571 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v571, 0x10B2C407FF26C1CLL);
  }
  v7 = (llvm **)(v5 + 656);
  v8 = *(_DWORD *)(v5 + 664);
  if (!v8 && !*(_DWORD *)(v5 + 668))
    goto LABEL_48;
  v9 = *(unsigned int *)(v5 + 672);
  v10 = *(_QWORD *)(v5 + 656);
  if (v9 <= 4 * v8 || v9 < 0x41)
  {
    if ((_DWORD)v9)
    {
      v11 = (_QWORD *)(v10 + 32);
      v12 = v9 << 6;
      do
      {
        v13 = *(v11 - 1);
        if (v13 != -4096)
        {
          if (v13 == -8192)
            goto LABEL_22;
          v14 = v11[3];
          if (v14 && v14 != -8192 && v14 != -4096)
          {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v11 + 1));
            v13 = *(v11 - 1);
          }
          if (v13 != -4096)
          {
LABEL_22:
            if (v13 && v13 != -8192)
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v11 - 3));
            *(v11 - 1) = -4096;
          }
          *v11 = 0;
        }
        v11 += 8;
        v12 -= 64;
      }
      while (v12);
    }
LABEL_47:
    *(_QWORD *)(v5 + 664) = 0;
    goto LABEL_48;
  }
  v15 = (llvm::ValueHandleBase *)(v10 + 40);
  v16 = (void *)(v9 << 6);
  v17 = v9 << 6;
  do
  {
    v18 = *((_QWORD *)v15 - 2);
    if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v19 = *((_QWORD *)v15 + 2);
      if (v19)
      {
        if (v19 != -8192 && v19 != -4096)
        {
          llvm::ValueHandleBase::RemoveFromUseList(v15);
          v18 = *((_QWORD *)v15 - 2);
        }
      }
    }
    if (v18 != -4096 && v18 != -8192 && v18 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v15 - 32));
    v15 = (llvm::ValueHandleBase *)((char *)v15 + 64);
    v17 -= 64;
  }
  while (v17);
  if (v8)
  {
    v21 = 1 << (33 - __clz(v8 - 1));
    if (v21 <= 64)
      v22 = 64;
    else
      v22 = v21;
    v23 = *(llvm **)(v5 + 656);
    if (v22 == *(_DWORD *)(v5 + 672))
    {
      *(_QWORD *)(v5 + 664) = 0;
      v24 = (unint64_t)v22 << 6;
      v25 = (_QWORD *)((char *)v23 + 16);
      do
      {
        *v25 = 0;
        v25[1] = -4096;
        *(v25 - 2) = &unk_24FA66978;
        *(v25 - 1) = 2;
        v25[2] = 0;
        v25 += 8;
        v24 -= 64;
      }
      while (v24);
    }
    else
    {
      llvm::deallocate_buffer(v23, v16);
      v506 = (4 * v22 / 3 + 1) | ((unint64_t)(4 * v22 / 3 + 1) >> 1);
      v507 = v506 | (v506 >> 2) | ((v506 | (v506 >> 2)) >> 4);
      LODWORD(v507) = (((v507 | (v507 >> 8)) >> 16) | v507 | (v507 >> 8)) + 1;
      *(_DWORD *)(v5 + 672) = v507;
      v508 = MEMORY[0x23489D23C]((unint64_t)v507 << 6, 8);
      *(_QWORD *)(v5 + 656) = v508;
      *(_QWORD *)(v5 + 664) = 0;
      v509 = *(unsigned int *)(v5 + 672);
      if ((_DWORD)v509)
      {
        v510 = v509 << 6;
        v511 = (_QWORD *)(v508 + 16);
        do
        {
          *v511 = 0;
          v511[1] = -4096;
          *(v511 - 2) = &unk_24FA66978;
          *(v511 - 1) = 2;
          v511[2] = 0;
          v511 += 8;
          v510 -= 64;
        }
        while (v510);
      }
    }
    goto LABEL_48;
  }
  if (!*(_DWORD *)(v5 + 672))
    goto LABEL_47;
  llvm::deallocate_buffer(*v7, v16);
  *v7 = 0;
  *(_QWORD *)(v5 + 664) = 0;
  *(_DWORD *)(v5 + 672) = 0;
LABEL_48:
  if (*(_BYTE *)(v5 + 704))
  {
    sub_22E5E0E84(v5 + 680);
    llvm::deallocate_buffer(*(llvm **)(v5 + 680), (void *)(16 * *(unsigned int *)(v5 + 696)));
    *(_BYTE *)(v5 + 704) = 0;
  }
  v597 = 0;
  v598 = 0;
  v599 = 0;
  v26 = *(_QWORD *)(v5 + 624);
  v27 = (char *)operator new(0x30uLL);
  *((_QWORD *)v27 + 2) = v26;
  *((_QWORD *)v27 + 3) = 0;
  *((_QWORD *)v27 + 4) = 0;
  *((_QWORD *)v27 + 5) = 0;
  *(_QWORD *)v27 = &v605;
  *((_QWORD *)v27 + 1) = &v605;
  v605 = v27;
  v606 = v27;
  v28 = 1;
  v607 = 1;
  v29 = *(unsigned int *)(v5 + 920);
  v596 = v5 + 656;
  if ((_DWORD)v29)
  {
    v30 = *(uint64_t **)(v5 + 912);
    v31 = v29 + 0x1FFFFFFFFFFFFFFFLL;
    v32 = 8 * v29;
    do
    {
      v33 = v27;
      v34 = *v30++;
      v27 = (char *)operator new(0x30uLL);
      *((_QWORD *)v27 + 2) = v34;
      *((_QWORD *)v27 + 3) = 0;
      *((_QWORD *)v27 + 4) = 0;
      *((_QWORD *)v27 + 5) = 0;
      *(_QWORD *)v27 = v33;
      *((_QWORD *)v27 + 1) = &v605;
      *((_QWORD *)v33 + 1) = v27;
      v605 = v27;
      v32 -= 8;
    }
    while (v32);
    v28 = (v31 & 0x1FFFFFFFFFFFFFFFLL) + 2;
    v607 = v28;
  }
  v35 = *(unsigned int *)(v5 + 1064);
  if ((_DWORD)v35)
  {
    v36 = *(uint64_t **)(v5 + 1056);
    v37 = 8 * v35;
    do
    {
      v38 = v27;
      v39 = *v36++;
      v27 = (char *)operator new(0x30uLL);
      *((_QWORD *)v27 + 2) = v39;
      *((_QWORD *)v27 + 3) = 0;
      *((_QWORD *)v27 + 4) = 0;
      *((_QWORD *)v27 + 5) = 0;
      *(_QWORD *)v27 = v38;
      *((_QWORD *)v27 + 1) = &v605;
      *((_QWORD *)v38 + 1) = v27;
      ++v28;
      v605 = v27;
      v37 -= 8;
    }
    while (v37);
    v607 = v28;
  }
  v575 = v5 + 912;
  v576 = v5 + 1056;
  v577 = v5 + 1200;
  v40 = *(unsigned int *)(v5 + 1208);
  if ((_DWORD)v40)
  {
    v41 = *(uint64_t **)(v5 + 1200);
    v42 = 8 * v40;
    v28 += ((unint64_t)(8 * v40 - 8) >> 3) + 1;
    do
    {
      v43 = *v41++;
      v44 = (char *)operator new(0x30uLL);
      *((_QWORD *)v44 + 2) = v43;
      *((_QWORD *)v44 + 3) = 0;
      *((_QWORD *)v44 + 4) = 0;
      *((_QWORD *)v44 + 5) = 0;
      *(_QWORD *)v44 = v27;
      *((_QWORD *)v44 + 1) = &v605;
      *((_QWORD *)v27 + 1) = v44;
      v27 = v44;
      v605 = v44;
      v42 -= 8;
    }
    while (v42);
    v607 = v28;
  }
  v45 = 0;
  v46 = 0;
  v580 = 0;
  v585 = (_QWORD *)(v5 + 64);
  v581 = v5 + 40;
  v595 = v5;
  do
  {
    v47 = (char *)v605;
    v49 = *((_QWORD *)v605 + 2);
    v48 = (_BYTE *)*((_QWORD *)v605 + 3);
    v50 = (_BYTE *)*((_QWORD *)v605 + 4);
    v51 = v50 - v48;
    if (v50 == v48)
    {
      __p = 0;
    }
    else
    {
      if ((v51 & 0x8000000000000000) != 0)
        goto LABEL_896;
      __p = operator new(v50 - v48);
      memmove(__p, v48, v51);
      v48 = (_BYTE *)*((_QWORD *)v47 + 3);
    }
    v52 = *(_QWORD *)v47;
    *(_QWORD *)(v52 + 8) = *((_QWORD *)v47 + 1);
    **((_QWORD **)v47 + 1) = v52;
    v607 = v28 - 1;
    if (v48)
    {
      *((_QWORD *)v47 + 4) = v48;
      operator delete(v48);
    }
    operator delete(v47);
    v53 = v49;
    if ((*(_DWORD *)(v49 + 32) & 0xE) != 6)
    {
      llvm::Value::getName((llvm::Value *)v49);
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v5 + 72))
      {
        v53 = 0;
      }
      else
      {
        v55 = *(_QWORD **)(*v585 + 8 * Key);
        v53 = v55[1];
        v56 = v55[3] - v55[2];
        if (v56 && v56 < 0)
          goto LABEL_896;
      }
    }
    v57 = (_DWORD *)sub_22F2345DC(v581, *(_QWORD *)(v49 + 40));
    v59 = v57[2];
    v58 = v57[3];
    v60 = v57[4];
    v61 = (_DWORD *)sub_22F2345DC(v581, *(_QWORD *)(v53 + 40));
    v62 = v61[2];
    if (v59 < v62
      || v59 <= v62 && ((v63 = v61[3], v58 < v63) || (v58 <= v63 ? (v64 = v60 >= v61[4]) : (v64 = 1), !v64)))
    {
      *((_BYTE *)&v603.__r_.__value_.__s + 23) = 20;
      strcpy((char *)&v603, "Cannot link symbol '");
      v487 = *(_QWORD *)(v53 + 40);
      v488 = *(_QWORD *)(v49 + 40) + 216;
      v626 = 260;
      v625.__r_.__value_.__r.__words[0] = v488;
      MEMORY[0x23489F1BC](&v628, &v625);
      LOWORD(v623) = 260;
      v620[0] = (llvm *)(v487 + 216);
      MEMORY[0x23489F1BC](&v625, v620);
      v489 = sub_22F44916C((llvm::Triple *)&v628);
      v491 = v490;
      v492 = sub_22F44916C((llvm::Triple *)&v625);
      if (HIDWORD(v630) == v627 && v489 == v492 && v491 == v493)
      {
        v494 = sub_22F242640(*(llvm::Module **)(v49 + 40));
        v496 = v495;
        v611 = v494;
        v612 = v495;
        v497 = sub_22F242640(*(llvm::Module **)(v53 + 40));
        v609 = v497;
        v610 = v498;
        if (!(_DWORD)v494
          || !HIDWORD(v494)
          || !v496
          || !(_DWORD)v497
          || !HIDWORD(v497)
          || !v498
          || v494 == v497 && v496 == v498)
        {
          goto LABEL_933;
        }
        Name = llvm::Value::getName((llvm::Value *)v49);
        if (!Name)
        {
          memset(&__dst, 0, sizeof(__dst));
LABEL_943:
          v559 = std::string::append(&__dst, "': ");
          v560 = v559->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v616.__r_.__value_.__l.__data_ = *(_OWORD *)&v559->__r_.__value_.__l.__data_;
          v616.__r_.__value_.__r.__words[2] = v560;
          v559->__r_.__value_.__l.__size_ = 0;
          v559->__r_.__value_.__r.__words[2] = 0;
          v559->__r_.__value_.__r.__words[0] = 0;
          v561 = std::string::append(&v616, "Used from Metal ");
          v562 = v561->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v617.__r_.__value_.__l.__data_ = *(_OWORD *)&v561->__r_.__value_.__l.__data_;
          v617.__r_.__value_.__r.__words[2] = v562;
          v561->__r_.__value_.__l.__size_ = 0;
          v561->__r_.__value_.__r.__words[2] = 0;
          v561->__r_.__value_.__r.__words[0] = 0;
          sub_22F2427A4((unsigned int *)&v611, &v614);
          if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v563 = &v614;
          else
            v563 = (std::string *)v614.__r_.__value_.__r.__words[0];
          if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v614.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v614.__r_.__value_.__l.__size_;
          v565 = std::string::append(&v617, (const std::string::value_type *)v563, size);
          v566 = v565->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v618.__r_.__value_.__l.__data_ = *(_OWORD *)&v565->__r_.__value_.__l.__data_;
          v618.__r_.__value_.__r.__words[2] = v566;
          v565->__r_.__value_.__l.__size_ = 0;
          v565->__r_.__value_.__r.__words[2] = 0;
          v565->__r_.__value_.__r.__words[0] = 0;
          v567 = std::string::append(&v618, " but defined in Metal ");
          v568 = v567->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v619.__r_.__value_.__l.__data_ = *(_OWORD *)&v567->__r_.__value_.__l.__data_;
          v619.__r_.__value_.__r.__words[2] = v568;
          v567->__r_.__value_.__l.__size_ = 0;
          v567->__r_.__value_.__r.__words[2] = 0;
          v567->__r_.__value_.__r.__words[0] = 0;
          sub_22F2427A4((unsigned int *)&v609, &v613);
          if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v547 = &v613;
          else
            v547 = (std::string *)v613.__r_.__value_.__r.__words[0];
          if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v549 = *((_BYTE *)&v613.__r_.__value_.__s + 23) & 0x7F;
          else
            v549 = v613.__r_.__value_.__l.__size_;
LABEL_911:
          v550 = std::string::append(&v619, (const std::string::value_type *)v547, v549);
          v551 = v550->__r_.__value_.__r.__words[2];
          *(_OWORD *)v620 = *(_OWORD *)&v550->__r_.__value_.__l.__data_;
          v621 = v551;
          v550->__r_.__value_.__l.__size_ = 0;
          v550->__r_.__value_.__r.__words[2] = 0;
          v550->__r_.__value_.__r.__words[0] = 0;
          if (v621 >= 0)
            v552 = v620;
          else
            v552 = (llvm **)v620[0];
          if (v621 >= 0)
            v553 = HIBYTE(v621) & 0x7F;
          else
            v553 = (std::string::size_type)v620[1];
          std::string::append(&v603, (const std::string::value_type *)v552, v553);
          if (SHIBYTE(v621) < 0)
            operator delete(v620[0]);
          if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v613.__r_.__value_.__l.__data_);
          if (SHIBYTE(v619.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v619.__r_.__value_.__l.__data_);
          if (SHIBYTE(v618.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v618.__r_.__value_.__l.__data_);
          if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v614.__r_.__value_.__l.__data_);
          if (SHIBYTE(v617.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v617.__r_.__value_.__l.__data_);
          if (SHIBYTE(v616.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v616.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_933:
          sub_22F4472A8((uint64_t *)&v603);
        }
        v554 = v500;
        if (v500 <= 0x7FFFFFFFFFFFFFF7)
        {
          v555 = (const void *)Name;
          if (v500 >= 0x17)
          {
            v557 = (v500 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v500 | 7) != 0x17)
              v557 = v500 | 7;
            v558 = v557 + 1;
            p_dst = (std::string *)operator new(v557 + 1);
            __dst.__r_.__value_.__l.__size_ = v554;
            __dst.__r_.__value_.__r.__words[2] = v558 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v500;
            p_dst = &__dst;
            if (!v500)
              goto LABEL_942;
          }
          memmove(p_dst, v555, v554);
LABEL_942:
          p_dst->__r_.__value_.__s.__data_[v554] = 0;
          goto LABEL_943;
        }
LABEL_896:
        abort();
      }
      v501 = llvm::Value::getName((llvm::Value *)v49);
      if (!v501)
      {
        memset(&__dst, 0, sizeof(__dst));
        goto LABEL_876;
      }
      v503 = v502;
      if (v502 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_896;
      v504 = (const void *)v501;
      if (v502 >= 0x17)
      {
        v512 = (v502 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v502 | 7) != 0x17)
          v512 = v502 | 7;
        v513 = v512 + 1;
        v505 = (std::string *)operator new(v512 + 1);
        __dst.__r_.__value_.__l.__size_ = v503;
        __dst.__r_.__value_.__r.__words[2] = v513 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v505;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v502;
        v505 = &__dst;
        if (!v502)
          goto LABEL_875;
      }
      memmove(v505, v504, v503);
LABEL_875:
      v505->__r_.__value_.__s.__data_[v503] = 0;
LABEL_876:
      v514 = std::string::append(&__dst, "': ");
      v515 = v514->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v616.__r_.__value_.__l.__data_ = *(_OWORD *)&v514->__r_.__value_.__l.__data_;
      v616.__r_.__value_.__r.__words[2] = v515;
      v514->__r_.__value_.__l.__size_ = 0;
      v514->__r_.__value_.__r.__words[2] = 0;
      v514->__r_.__value_.__r.__words[0] = 0;
      v516 = std::string::append(&v616, "Used in deployment target ");
      v517 = v516->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v617.__r_.__value_.__l.__data_ = *(_OWORD *)&v516->__r_.__value_.__l.__data_;
      v617.__r_.__value_.__r.__words[2] = v517;
      v516->__r_.__value_.__l.__size_ = 0;
      v516->__r_.__value_.__r.__words[2] = 0;
      v516->__r_.__value_.__r.__words[0] = 0;
      OSName = llvm::Triple::getOSName((llvm::Triple *)&v628);
      if (!OSName)
      {
        v520 = 0;
        v521 = 0;
        v522 = 0;
        memset(&v614, 0, sizeof(v614));
        goto LABEL_887;
      }
      v523 = v519;
      if (v519 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_896;
      v524 = (const void *)OSName;
      if (v519 >= 0x17)
      {
        v526 = (v519 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v519 | 7) != 0x17)
          v526 = v519 | 7;
        v527 = v526 + 1;
        v525 = (std::string *)operator new(v526 + 1);
        v614.__r_.__value_.__l.__size_ = v523;
        v614.__r_.__value_.__r.__words[2] = v527 | 0x8000000000000000;
        v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v525;
      }
      else
      {
        *((_BYTE *)&v614.__r_.__value_.__s + 23) = v519;
        v525 = &v614;
        if (!v519)
          goto LABEL_886;
      }
      memmove(v525, v524, v523);
LABEL_886:
      v525->__r_.__value_.__s.__data_[v523] = 0;
      v522 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
      v520 = v614.__r_.__value_.__l.__size_;
      v521 = v614.__r_.__value_.__r.__words[0];
LABEL_887:
      v528 = v522 < 0;
      if (v522 >= 0)
        v529 = &v614;
      else
        v529 = (std::string *)v521;
      v530 = v522 & 0x7F;
      if (v528)
        v531 = v520;
      else
        v531 = v530;
      v532 = std::string::append(&v617, (const std::string::value_type *)v529, v531);
      v533 = v532->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v618.__r_.__value_.__l.__data_ = *(_OWORD *)&v532->__r_.__value_.__l.__data_;
      v618.__r_.__value_.__r.__words[2] = v533;
      v532->__r_.__value_.__l.__size_ = 0;
      v532->__r_.__value_.__r.__words[2] = 0;
      v532->__r_.__value_.__r.__words[0] = 0;
      v534 = std::string::append(&v618, " but defined in deployment target ");
      v535 = v534->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v619.__r_.__value_.__l.__data_ = *(_OWORD *)&v534->__r_.__value_.__l.__data_;
      v619.__r_.__value_.__r.__words[2] = v535;
      v534->__r_.__value_.__l.__size_ = 0;
      v534->__r_.__value_.__r.__words[2] = 0;
      v534->__r_.__value_.__r.__words[0] = 0;
      v536 = llvm::Triple::getOSName((llvm::Triple *)&v625);
      if (!v536)
      {
        v538 = 0;
        v539 = 0;
        v540 = 0;
        memset(&v613, 0, sizeof(v613));
LABEL_905:
        v546 = v540 < 0;
        if (v540 >= 0)
          v547 = &v613;
        else
          v547 = (std::string *)v539;
        v548 = v540 & 0x7F;
        if (v546)
          v549 = v538;
        else
          v549 = v548;
        goto LABEL_911;
      }
      v541 = v537;
      if (v537 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_896;
      v542 = (const void *)v536;
      if (v537 >= 0x17)
      {
        v544 = (v537 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v537 | 7) != 0x17)
          v544 = v537 | 7;
        v545 = v544 + 1;
        v543 = (std::string *)operator new(v544 + 1);
        v613.__r_.__value_.__l.__size_ = v541;
        v613.__r_.__value_.__r.__words[2] = v545 | 0x8000000000000000;
        v613.__r_.__value_.__r.__words[0] = (std::string::size_type)v543;
      }
      else
      {
        *((_BYTE *)&v613.__r_.__value_.__s + 23) = v537;
        v543 = &v613;
        if (!v537)
          goto LABEL_904;
      }
      memmove(v543, v542, v541);
LABEL_904:
      v543->__r_.__value_.__s.__data_[v541] = 0;
      v540 = HIBYTE(v613.__r_.__value_.__r.__words[2]);
      v538 = v613.__r_.__value_.__l.__size_;
      v539 = v613.__r_.__value_.__r.__words[0];
      goto LABEL_905;
    }
    v65 = v599;
    if (!v599)
      goto LABEL_85;
    v66 = (v599 - 1) & ((v53 >> 4) ^ (v53 >> 9));
    v67 = *((_QWORD *)v597 + 2 * v66);
    if (v53 != v67)
    {
      v122 = 1;
      while (v67 != -4096)
      {
        v123 = v66 + v122++;
        v66 = v123 & (v599 - 1);
        v67 = *((_QWORD *)v597 + 2 * v66);
        if (v53 == v67)
          goto LABEL_84;
      }
LABEL_85:
      v68 = ((char *)v46 - (char *)v45) >> 5;
      v628.__r_.__value_.__r.__words[0] = 0;
      if ((sub_22E7B57A0((uint64_t)v597, v599, v53, &v628) & 1) != 0)
      {
LABEL_91:
        if ((unint64_t)v46 >= v580)
        {
          v111 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 59)
            goto LABEL_896;
          if ((uint64_t)(v580 - (_QWORD)v45) >> 4 > v111)
            v111 = (uint64_t)(v580 - (_QWORD)v45) >> 4;
          if (v580 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
            v112 = 0x7FFFFFFFFFFFFFFLL;
          else
            v112 = v111;
          if (v112 >> 59)
LABEL_955:
            sub_22E3B3F8C();
          v113 = (char *)operator new(32 * v112);
          v114 = v113;
          v115 = (uint64_t *)&v113[32 * v68];
          *v115 = v53;
          v115[1] = 0;
          v115[2] = 0;
          v115[3] = 0;
          if (v46 == v45)
          {
            v119 = (uint64_t *)&v113[32 * v68];
          }
          else
          {
            v116 = 0;
            do
            {
              v117 = &v115[v116];
              v118 = &v46[v116];
              *(v117 - 4) = v46[v116 - 4];
              *(v117 - 3) = 0;
              *(v117 - 2) = 0;
              *(v117 - 1) = 0;
              *(_OWORD *)(v117 - 3) = *(_OWORD *)&v46[v116 - 3];
              *(v117 - 1) = v46[v116 - 1];
              *(v118 - 3) = 0;
              *(v118 - 2) = 0;
              *(v118 - 1) = 0;
              v116 -= 4;
            }
            while (&v46[v116] != v45);
            v119 = &v115[v116];
            do
            {
              v120 = (void *)*(v46 - 3);
              if (v120)
              {
                *(v46 - 2) = (uint64_t)v120;
                operator delete(v120);
              }
              v46 -= 4;
            }
            while (v46 != v45);
          }
          v580 = (unint64_t)&v114[32 * v112];
          v46 = v115 + 4;
          if (v45)
            operator delete(v45);
          v45 = v119;
        }
        else
        {
          *v46 = v53;
          v46[1] = 0;
          v46[2] = 0;
          v46[3] = 0;
          v46 += 4;
        }
        if (v49 != v53)
        {
          v70 = &v45[4 * v68];
          v72 = v70 + 3;
          v71 = v70[3];
          v73 = v70 + 2;
          v74 = (uint64_t *)v70[2];
          if ((unint64_t)v74 >= v71)
          {
            v593 = v46;
            v82 = v45;
            v85 = (uint64_t *)v70[1];
            v83 = (uint64_t **)(v70 + 1);
            v84 = v85;
            v86 = v74 - v85;
            v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 61)
              goto LABEL_896;
            v88 = v71 - (_QWORD)v84;
            if (v88 >> 2 > v87)
              v87 = v88 >> 2;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
              v89 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            if (v89)
            {
              if (v89 >> 61)
                goto LABEL_955;
              v90 = (char *)operator new(8 * v89);
            }
            else
            {
              v90 = 0;
            }
            v99 = (uint64_t *)&v90[8 * v86];
            *v99 = v49;
            v75 = v99 + 1;
            if (v74 != v84)
            {
              do
              {
                v100 = *--v74;
                *--v99 = v100;
              }
              while (v74 != v84);
              v74 = *v83;
            }
            *v83 = v99;
            *v73 = v75;
            *v72 = &v90[8 * v89];
            v45 = v82;
            if (v74)
              operator delete(v74);
            v46 = v593;
          }
          else
          {
            *v74 = v49;
            v75 = v74 + 1;
          }
          *v73 = v75;
          v5 = v595;
        }
        if (*(_BYTE *)(v53 + 16))
        {
          sub_22F23443C(v53, (uint64_t *)&v605);
        }
        else
        {
          v102 = v53 + 72;
          for (i = *(_QWORD *)(v53 + 80); i != v102; i = *(_QWORD *)(i + 8))
          {
            v104 = i - 24;
            if (!i)
              v104 = 0;
            v105 = *(_QWORD *)(v104 + 48);
            if (v105 != v104 + 40)
            {
              while (1)
              {
                if (v105)
                  v106 = v105 - 24;
                else
                  v106 = 0;
                sub_22F23443C(v106, (uint64_t *)&v605);
                v105 = *(_QWORD *)(v105 + 8);
                v107 = i - 24;
                if (!i)
                  v107 = 0;
                if (v105 == v107 + 40)
                  break;
LABEL_147:
                if (i == v102)
                  goto LABEL_127;
              }
              while (1)
              {
                i = *(_QWORD *)(i + 8);
                if (i == v102)
                  goto LABEL_127;
                v108 = i - 24;
                if (!i)
                  v108 = 0;
                v105 = *(_QWORD *)(v108 + 48);
                if (v105 != v108 + 40)
                  goto LABEL_147;
              }
            }
          }
        }
LABEL_127:
        v101 = __p;
        if (!__p)
          goto LABEL_129;
LABEL_128:
        operator delete(v101);
        goto LABEL_129;
      }
      if (4 * (int)v598 + 4 >= 3 * v65)
      {
        v121 = 2 * v65;
      }
      else
      {
        if (v65 + ~(_DWORD)v598 - HIDWORD(v598) > v65 >> 3)
        {
LABEL_88:
          v69 = v628.__r_.__value_.__r.__words[0];
          LODWORD(v598) = v598 + 1;
          if (*(_QWORD *)v628.__r_.__value_.__l.__data_ != -4096)
            --HIDWORD(v598);
          *(_QWORD *)v628.__r_.__value_.__l.__data_ = v53;
          *(_QWORD *)(v69 + 8) = v68;
          goto LABEL_91;
        }
        v121 = v65;
      }
      sub_22F23E724((uint64_t)&v597, v121);
      v628.__r_.__value_.__r.__words[0] = 0;
      sub_22E7B57A0((uint64_t)v597, v599, v53, &v628);
      goto LABEL_88;
    }
LABEL_84:
    if ((_DWORD)v66 == v599)
      goto LABEL_85;
    if (v49 == v53)
      goto LABEL_127;
    v583 = v45;
    v76 = &v45[4 * *((_QWORD *)v597 + 2 * v66 + 1)];
    v78 = v76 + 3;
    v77 = v76[3];
    v79 = v76 + 2;
    v80 = (uint64_t *)v76[2];
    if ((unint64_t)v80 >= v77)
    {
      v93 = (uint64_t *)v76[1];
      v91 = (uint64_t **)(v76 + 1);
      v92 = v93;
      v94 = v80 - v93;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 61)
        goto LABEL_896;
      v96 = v77 - (_QWORD)v92;
      if (v96 >> 2 > v95)
        v95 = v96 >> 2;
      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
        v97 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v97 = v95;
      if (v97)
      {
        if (v97 >> 61)
          goto LABEL_955;
        v98 = (char *)operator new(8 * v97);
      }
      else
      {
        v98 = 0;
      }
      v109 = (uint64_t *)&v98[8 * v94];
      *v109 = v49;
      v81 = v109 + 1;
      if (v80 != v92)
      {
        do
        {
          v110 = *--v80;
          *--v109 = v110;
        }
        while (v80 != v92);
        v80 = *v91;
      }
      *v91 = v109;
      *v79 = v81;
      *v78 = &v98[8 * v97];
      if (v80)
        operator delete(v80);
    }
    else
    {
      *v80 = v49;
      v81 = v80 + 1;
    }
    v101 = __p;
    *v79 = v81;
    v45 = v583;
    if (__p)
      goto LABEL_128;
LABEL_129:
    v28 = v607;
  }
  while (v607);
  v594 = v46;
  llvm::deallocate_buffer(v597, (void *)(16 * v599));
  v124 = (llvm::Module *)*((_QWORD *)a3 + 5);
  v125 = *(_QWORD *)v124;
  v126 = (llvm::Module *)operator new();
  v127 = llvm::Value::getName(a3);
  MEMORY[0x23489F150](v126, v127, v128, v125);
  v129 = *(_QWORD *)(v5 + 648);
  *(_QWORD *)(v5 + 648) = v126;
  if (v129)
  {
    v130 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v130, 0x10B2C407FF26C1CLL);
    v126 = *(llvm::Module **)(v5 + 648);
  }
  DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v124);
  llvm::Module::setDataLayout(v126, DataLayout);
  v134 = (void *)*((_QWORD *)v124 + 27);
  v133 = (_QWORD *)((char *)v124 + 216);
  v132 = v134;
  v135 = *((_BYTE *)v133 + 23);
  v136 = v135;
  if (v135 >= 0)
    v137 = v133;
  else
    v137 = v132;
  v138 = v135 & 0x7F;
  if (v136 >= 0)
    v139 = v138;
  else
    v139 = v133[1];
  sub_22E616030(*(_QWORD *)(v5 + 648), v137, v139);
  v584 = v45;
  if (v45 != v594)
  {
    v140 = v5 + 96;
    v141 = v584;
    while (1)
    {
      v142 = *v141;
      if (*v141)
        v143 = *(_BYTE *)(*v141 + 16) == 3;
      else
        v143 = 0;
      if (v143)
      {
        v155 = llvm::User::operator new((llvm::User *)0x58);
        v156 = *(llvm::StructType **)(v142 + 24);
        v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v630;
        v628.__r_.__value_.__l.__size_ = (std::string::size_type)&v630;
        v628.__r_.__value_.__r.__words[2] = 8;
        LODWORD(v629) = 0;
        sub_22F2417A4(v140, v156, (uint64_t)&v628);
        if (v628.__r_.__value_.__l.__size_ != v628.__r_.__value_.__r.__words[0])
          free((void *)v628.__r_.__value_.__l.__size_);
        v157 = llvm::Value::getName((llvm::Value *)v142);
        LOWORD(v630) = 261;
        v628.__r_.__value_.__r.__words[0] = v157;
        v628.__r_.__value_.__l.__size_ = v158;
        v159 = (llvm::GlobalVariable *)llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalVariable::copyAttributesFrom(v159, (const llvm::GlobalVariable *)v142);
        v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
        v628.__r_.__value_.__l.__size_ = 0x400000000;
        llvm::GlobalVariable::getDebugInfo();
        if (LODWORD(v628.__r_.__value_.__r.__words[1]))
        {
          v160 = v628.__r_.__value_.__r.__words[0];
          v161 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
          do
          {
            v160 += 8;
            llvm::GlobalVariable::addDebugInfo();
            v161 -= 8;
          }
          while (v161);
        }
        llvm::GlobalObject::setAlignment();
        if ((std::string::size_type *)v628.__r_.__value_.__l.__data_ != &v628.__r_.__value_.__r.__words[2])
          free(v628.__r_.__value_.__l.__data_);
        *(_OWORD *)&v628.__r_.__value_.__r.__words[1] = 2uLL;
        v629 = (void *)v142;
        if (v142 != -8192 && v142 != -4096 && v142)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
        v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24FA66978;
        v630 = (char *)v596;
        v162 = sub_22F2299F0(v596, &v628);
        if (v629 != (void *)-8192 && v629 != (void *)-4096 && v629)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
        v163 = v162[7];
        if (v163 == v155)
          goto LABEL_235;
        v154 = (llvm::ValueHandleBase *)(v162 + 5);
        if (v163 && v163 != -8192 && v163 != -4096)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v162 + 5));
        v162[7] = v155;
        if (v155 == -8192 || v155 == -4096 || !v155)
          goto LABEL_235;
      }
      else
      {
        v144 = *(llvm::StructType **)(v142 + 24);
        v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v630;
        v628.__r_.__value_.__l.__size_ = (std::string::size_type)&v630;
        v628.__r_.__value_.__r.__words[2] = 8;
        LODWORD(v629) = 0;
        v145 = sub_22F2417A4(v140, v144, (uint64_t)&v628);
        if (v628.__r_.__value_.__l.__size_ != v628.__r_.__value_.__r.__words[0])
          free((void *)v628.__r_.__value_.__l.__size_);
        v146 = *(_DWORD *)(v142 + 32) & 0xF;
        v147 = llvm::Value::getName((llvm::Value *)v142);
        LOWORD(v630) = 261;
        v628.__r_.__value_.__r.__words[0] = v147;
        v628.__r_.__value_.__l.__size_ = v148;
        v149 = *(_QWORD *)(v5 + 648);
        v150 = llvm::User::operator new((llvm::User *)0x78);
        v151 = (llvm::Function *)MEMORY[0x23489F6FC](v150, v145, v146, 0xFFFFFFFFLL, &v628, v149);
        llvm::Function::copyAttributesFrom(v151, (const llvm::Function *)v142);
        *(_OWORD *)&v628.__r_.__value_.__r.__words[1] = 2uLL;
        v629 = (void *)v142;
        if (v142 != -8192 && v142 != -4096 && v142)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
        v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24FA66978;
        v630 = (char *)v596;
        v152 = sub_22F2299F0(v596, &v628);
        if (v629 != (void *)-8192 && v629 != (void *)-4096 && v629)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
        v153 = v152[7];
        if (v153 == v150)
          goto LABEL_235;
        v154 = (llvm::ValueHandleBase *)(v152 + 5);
        if (v153 && v153 != -8192 && v153 != -4096)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v152 + 5));
        v152[7] = v150;
        if (v150 == -8192 || v150 == -4096 || !v150)
          goto LABEL_235;
      }
      llvm::ValueHandleBase::AddToUseList(v154);
LABEL_235:
      v164 = (void **)v141[1];
      v165 = (void **)v141[2];
      while (v164 != v165)
      {
        v166 = *v164;
        llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
        llvm::ValueMapper::ValueMapper();
        v167 = llvm::ValueMapper::mapConstant();
        MEMORY[0x23489C744](&v628);
        *(_OWORD *)&v628.__r_.__value_.__r.__words[1] = 2uLL;
        v629 = v166;
        if (v166 != (void *)-8192 && v166 != (void *)-4096 && v166 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
        v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24FA66978;
        v630 = (char *)v596;
        v169 = sub_22F2299F0(v596, &v628);
        if (v629 != (void *)-8192 && v629 != (void *)-4096 && v629)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
        v170 = v169[7];
        if (v170 != v167)
        {
          if (v170 && v170 != -8192 && v170 != -4096)
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v169 + 5));
          v169[7] = v167;
          if (v167 != -8192 && v167 != -4096 && v167 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v169 + 5));
        }
        ++v164;
      }
      v141 += 4;
      v5 = v595;
      if (v141 == v594)
      {
        v172 = (llvm::GlobalValue **)v584;
        v173 = (llvm::GlobalValue **)v594;
        while (1)
        {
          v174 = *v172;
          v175 = *((unsigned __int8 *)*v172 + 16);
          if (*v172)
            v176 = v175 == 3;
          else
            v176 = 0;
          if (v176)
          {
            if (((*((_DWORD *)v174 + 8) & 0xF) == 1 || llvm::GlobalValue::isDeclaration(*v172))
              && !*(_BYTE *)(v5 + 32))
            {
              goto LABEL_956;
            }
            if ((llvm::GlobalValue::isDeclaration(v174) & 1) == 0)
            {
              llvm::ValueMapper::ValueMapper();
              llvm::ValueMapper::mapConstant();
              MEMORY[0x23489C744](&v628);
              llvm::ValueMapper::ValueMapper();
              llvm::ValueMapper::mapConstant();
              MEMORY[0x23489C744](&v628);
              v173 = (llvm::GlobalValue **)v594;
              llvm::GlobalVariable::setInitializer();
            }
          }
          else
          {
            if (v174)
              v177 = v175 == 0;
            else
              v177 = 0;
            if (v177)
            {
              v178 = *((_DWORD *)v174 + 8);
              if ((v178 & 0xF) != 1)
              {
                if (!llvm::GlobalValue::isDeclaration(*v172))
                {
                  llvm::ValueMapper::ValueMapper();
                  v179 = llvm::ValueMapper::mapConstant();
                  MEMORY[0x23489C744](&v628);
                  if ((*(_WORD *)(v179 + 18) & 1) != 0)
                    llvm::Function::BuildLazyArguments((llvm::Function *)v179);
                  v586 = (llvm::Function *)v179;
                  v180 = *(_QWORD *)(v179 + 88);
                  v181 = sub_22F2342C8(v174);
                  if ((llvm::Value *)v181 != v182)
                  {
                    v183 = v181;
                    v184 = v182;
                    v185 = v180;
                    v186 = (llvm::Value *)v181;
                    do
                    {
                      v187 = llvm::Value::getName(v186);
                      LOWORD(v630) = 261;
                      v628.__r_.__value_.__r.__words[0] = v187;
                      v628.__r_.__value_.__l.__size_ = v188;
                      llvm::Value::setName();
                      *(_OWORD *)&v628.__r_.__value_.__r.__words[1] = 2uLL;
                      v629 = v186;
                      if (v183 != -8192 && v183 != -4096 && v183)
                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
                      v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24FA66978;
                      v630 = (char *)v596;
                      v189 = sub_22F2299F0(v596, &v628);
                      if (v629 != (void *)-8192 && v629 != (void *)-4096 && v629)
                        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v628.__r_.__value_.__r.__words[1]);
                      v190 = v189[7];
                      if (v185 != v190)
                      {
                        if (v190 && v190 != -8192 && v190 != -4096)
                          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v189 + 5));
                        v189[7] = v185;
                        if (v180 != -8192 && v180 != -4096 && v180)
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v189 + 5));
                      }
                      v185 += 40;
                      v186 = (llvm::Value *)((char *)v186 + 40);
                      v180 += 40;
                      v183 += 40;
                      v5 = v595;
                    }
                    while (v186 != v184);
                  }
                  v625.__r_.__value_.__r.__words[0] = (std::string::size_type)&v625.__r_.__value_.__r.__words[2];
                  v625.__r_.__value_.__l.__size_ = 0x800000000;
                  llvm::CloneFunctionInto();
                  llvm::Function::getContext(v586);
                  v605 = (const char *)*((_QWORD *)v174 + 14);
                  if (llvm::AttributeList::getNumAttrSets((llvm::AttributeList *)&v605))
                  {
                    v191 = 0;
                    do
                    {
                      v192 = 0;
                      *(_OWORD *)v620 = xmmword_22F54B090;
                      while (1)
                      {
                        if (llvm::AttributeList::hasAttributeAtIndex())
                        {
                          v628.__r_.__value_.__r.__words[0] = llvm::AttributeList::getAttributeAtIndex();
                          ValueAsType = (llvm::StructType *)llvm::Attribute::getValueAsType((llvm::Attribute *)&v628);
                          if (ValueAsType)
                            break;
                        }
                        v192 += 4;
                        if (v192 == 16)
                          goto LABEL_315;
                      }
                      v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v630;
                      v628.__r_.__value_.__l.__size_ = (std::string::size_type)&v630;
                      v628.__r_.__value_.__r.__words[2] = 8;
                      LODWORD(v629) = 0;
                      sub_22F2417A4(v140, ValueAsType, (uint64_t)&v628);
                      if (v628.__r_.__value_.__l.__size_ != v628.__r_.__value_.__r.__words[0])
                        free((void *)v628.__r_.__value_.__l.__size_);
                      v628.__r_.__value_.__r.__words[0] = llvm::AttributeList::getAttributeAtIndex();
                      v597 = (llvm *)llvm::AttributeList::removeAttributeAtIndex();
                      llvm::Attribute::getKindAsEnum((llvm::Attribute *)&v628);
                      llvm::Attribute::get();
                      v605 = (const char *)llvm::AttributeList::addAttributeAtIndex();
LABEL_315:
                      ++v191;
                    }
                    while (v191 < llvm::AttributeList::getNumAttrSets((llvm::AttributeList *)&v605));
                  }
                  *((_QWORD *)v586 + 14) = v605;
                  v194 = sub_22F2342C8(v174);
                  if (v194 == v195)
                  {
LABEL_339:
                    v173 = (llvm::GlobalValue **)v594;
                    if ((std::string::size_type *)v625.__r_.__value_.__l.__data_ != &v625.__r_.__value_.__r.__words[2])
                      free(v625.__r_.__value_.__l.__data_);
                    goto LABEL_341;
                  }
                  v196 = v194;
                  v197 = v195;
                  while (2)
                  {
                    v198 = *(_QWORD *)(v5 + 656);
                    v199 = *(unsigned int *)(v5 + 672);
                    if ((_DWORD)v199)
                    {
                      v200 = ((v196 >> 4) ^ (v196 >> 9)) & ((_DWORD)v199 - 1);
                      v201 = (_QWORD *)(v198 + (v200 << 6));
                      v202 = v201[3];
                      if (v202 != v196)
                      {
                        v203 = 1;
                        while (v202 != -4096)
                        {
                          v204 = v200 + v203++;
                          v200 = v204 & (v199 - 1);
                          v201 = (_QWORD *)(v198 + (v200 << 6));
                          v202 = v201[3];
                          if (v202 == v196)
                            goto LABEL_325;
                        }
                        goto LABEL_324;
                      }
                    }
                    else
                    {
LABEL_324:
                      v201 = (_QWORD *)(v198 + (v199 << 6));
                    }
LABEL_325:
                    if ((_QWORD *)(v198 + (v199 << 6)) != v201)
                    {
                      v205 = v201[7];
                      if (v205 && v205 != -8192 && v205 != -4096)
                        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v201 + 5));
                      v206 = v201[3];
                      if (v206 != -8192)
                      {
                        if (v206 != -4096 && v206 != 0)
                          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v201 + 1));
                        v201[3] = -8192;
                      }
                      v201[4] = 0;
                      *(int32x2_t *)(v5 + 664) = vadd_s32(*(int32x2_t *)(v5 + 664), (int32x2_t)0x1FFFFFFFFLL);
                    }
                    v196 += 40;
                    if (v196 == v197)
                      goto LABEL_339;
                    continue;
                  }
                }
                v178 = *((_DWORD *)v174 + 8);
              }
              if ((v178 & 0x2000) == 0)
              {
                v208 = (_DWORD *)llvm::Value::getName(v174);
                if (v209 < 4 || *v208 != 779250017)
                {
                  if ((*((_BYTE *)v174 + 34) & 0x40) == 0
                    || (SectionImpl = (_QWORD *)llvm::GlobalObject::getSectionImpl(v174), v211 != 22)
                    || (*SectionImpl == 0x657478652E726961
                      ? (v212 = SectionImpl[1] == 0x645F796C6C616E72)
                      : (v212 = 0),
                        v212 ? (v213 = *(_QWORD *)((char *)SectionImpl + 14) == 0x64656E696665645FLL) : (v213 = 0),
                        !v213))
                  {
                    if (*(llvm::GlobalValue **)(v5 + 640) != v174 && !*(_BYTE *)(v5 + 32))
                    {
LABEL_956:
                      v569 = (void *)llvm::Value::getName(v174);
                      sub_22F234224(&v625, v569, v570);
                      sub_22F22F4A4("Undefined symbol: ", &v625, &v628);
                      sub_22F4472A8((uint64_t *)&v628);
                    }
                  }
                }
              }
            }
          }
LABEL_341:
          v172 += 4;
          if (v172 == v173)
            goto LABEL_361;
        }
      }
    }
  }
LABEL_361:
  sub_22F230068(v5, v575);
  sub_22F230068(v5, v576);
  sub_22F230068(v5, v577);
  sub_22F234334(v5, "llvm.module.flags");
  sub_22F234334(v5, "llvm.ident");
  sub_22F234334(v5, "air.version");
  sub_22F234334(v5, "air.language_version");
  sub_22F234334(v5, "air.compile_options");
  v214 = *(int *)(v5 + 632);
  v215 = *(llvm::Module **)(*(_QWORD *)(v5 + 624) + 40);
  v216 = qword_22F54B100[v214];
  v217 = off_24FCB06B0[v214];
  LOWORD(v630) = 261;
  v628.__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
  v628.__r_.__value_.__l.__size_ = v216;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v215, (const llvm::Twine *)&v628);
  llvm::Module::getOrInsertNamedMetadata();
  NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
  if (NumOperands)
  {
    v220 = 0;
    v221 = NumOperands - 1;
    v222 = v584;
    v223 = &loc_22F44E000;
    do
      Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    while (*(_QWORD *)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128) != *(_QWORD *)(v5 + 624)
         && v221 != v220++);
  }
  else
  {
    v222 = v584;
    v223 = (_QWORD *)&loc_22F44E000;
  }
  llvm::ValueMapper::ValueMapper();
  llvm::ValueMapper::mapMDNode();
  MEMORY[0x23489C744](&v628);
  llvm::NamedMDNode::addOperand();
  v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
  v226 = v223[91];
  v628.__r_.__value_.__l.__size_ = v226;
  if (v222 != v594)
  {
    v227 = v222;
    do
    {
      v228 = *v227;
      if (*v227)
        v229 = *(_BYTE *)(*v227 + 16) == 3;
      else
        v229 = 0;
      if (v229)
      {
        v625.__r_.__value_.__r.__words[0] = 0;
        if (sub_22E7B6870(*(_QWORD *)(v5 + 864), *(_DWORD *)(v5 + 880), v228, &v625)
          && v625.__r_.__value_.__r.__words[0] != *(_QWORD *)(v5 + 864) + 16 * *(unsigned int *)(v5 + 880))
        {
          v231 = *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8);
          if (v231)
          {
            v232 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            if (LODWORD(v628.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v628.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v232 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            }
            *(_QWORD *)(v628.__r_.__value_.__r.__words[0] + 8 * v232) = v231;
            ++LODWORD(v628.__r_.__value_.__r.__words[1]);
          }
        }
      }
      v227 += 4;
    }
    while (v227 != v594);
    v233 = (std::string *)v628.__r_.__value_.__r.__words[0];
    if (LODWORD(v628.__r_.__value_.__r.__words[1]))
    {
      sub_22F23A454((int8x16_t *)v628.__r_.__value_.__l.__data_, (int8x16_t *)(v628.__r_.__value_.__r.__words[0] + 8 * LODWORD(v628.__r_.__value_.__r.__words[1])), 126 - 2 * __clz(LODWORD(v628.__r_.__value_.__r.__words[1])), 1);
      llvm::Module::getOrInsertNamedMetadata();
      v233 = (std::string *)v628.__r_.__value_.__r.__words[0];
      if (LODWORD(v628.__r_.__value_.__r.__words[1]))
      {
        v234 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
        do
        {
          v235 = v233->__r_.__value_.__r.__words[0];
          llvm::ValueMapper::ValueMapper();
          llvm::ValueMapper::mapConstant();
          MEMORY[0x23489C744](&v625);
          v236 = *(unsigned int *)(v235 + 8);
          v237 = *(llvm::MDString **)(v235 - 8 * v236 + 16);
          if (v237)
          {
            llvm::MDString::getString(v237);
            v236 = *(unsigned int *)(v235 + 8);
          }
          v238 = *(llvm::MDString **)(v235 - 8 * v236 + 24);
          if (v238)
            llvm::MDString::getString(v238);
          llvm::air::AIExternallyInitialized::getImpl();
          llvm::NamedMDNode::addOperand();
          v233 = (std::string *)((char *)v233 + 8);
          v234 -= 8;
          v5 = v595;
          v222 = v584;
        }
        while (v234);
        v233 = (std::string *)v628.__r_.__value_.__r.__words[0];
      }
    }
    if (v233 != (std::string *)&v628.__r_.__value_.__r.__words[2])
      free(v233);
    v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
    v628.__r_.__value_.__l.__size_ = v226;
    v239 = v222;
    do
    {
      v240 = *v239;
      if (*v239)
        v241 = *(_BYTE *)(*v239 + 16) == 3;
      else
        v241 = 0;
      if (v241)
      {
        v625.__r_.__value_.__r.__words[0] = 0;
        if (sub_22E7B57A0(*(_QWORD *)(v5 + 768), *(_DWORD *)(v5 + 784), v240, &v625)
          && v625.__r_.__value_.__r.__words[0] != *(_QWORD *)(v5 + 768) + 16 * *(unsigned int *)(v5 + 784))
        {
          v243 = *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8);
          if (v243)
          {
            v244 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            if (LODWORD(v628.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v628.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v244 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            }
            *(_QWORD *)(v628.__r_.__value_.__r.__words[0] + 8 * v244) = v243;
            ++LODWORD(v628.__r_.__value_.__r.__words[1]);
          }
        }
      }
      v239 += 4;
    }
    while (v239 != v594);
    v245 = (std::string *)v628.__r_.__value_.__r.__words[0];
    if (LODWORD(v628.__r_.__value_.__r.__words[1]))
    {
      sub_22F2375F0((uint64_t)v628.__r_.__value_.__l.__data_, (llvm::air::AIFunctionConstant **)(v628.__r_.__value_.__r.__words[0]+ 8 * LODWORD(v628.__r_.__value_.__r.__words[1])), 126 - 2 * __clz(LODWORD(v628.__r_.__value_.__r.__words[1])), 1);
      llvm::Module::getOrInsertNamedMetadata();
      v245 = (std::string *)v628.__r_.__value_.__r.__words[0];
      if (LODWORD(v628.__r_.__value_.__r.__words[1]))
      {
        v246 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
        do
        {
          v247 = (unsigned int *)v245->__r_.__value_.__r.__words[0];
          llvm::ValueMapper::ValueMapper();
          llvm::ValueMapper::mapConstant();
          MEMORY[0x23489C744](&v625);
          v625.__r_.__value_.__r.__words[0] = (std::string::size_type)&v625.__r_.__value_.__r.__words[2];
          v625.__r_.__value_.__l.__size_ = v226;
          v248 = llvm::ValueAsMetadata::get();
          v249 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          if (LODWORD(v625.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v625.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v249 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          }
          *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8 * v249) = v248;
          ++LODWORD(v625.__r_.__value_.__r.__words[1]);
          v250 = *(llvm::MDString **)&v247[-2 * v247[2] + 2];
          if (v250)
            llvm::MDString::getString(v250);
          v251 = llvm::MDString::get();
          v252 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          if (LODWORD(v625.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v625.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v252 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          }
          *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8 * v252) = v251;
          ++LODWORD(v625.__r_.__value_.__r.__words[1]);
          v253 = *(llvm::MDString **)&v247[-2 * v247[2] + 4];
          if (v253)
            llvm::MDString::getString(v253);
          v255 = llvm::MDString::get();
          v256 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          if (LODWORD(v625.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v625.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v256 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          }
          *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8 * v256) = v255;
          ++LODWORD(v625.__r_.__value_.__r.__words[1]);
          llvm::Type::getInt32Ty(*(llvm::Type **)(v5 + 24), v254);
          llvm::air::AIFunctionConstant::getIndex((llvm::air::AIFunctionConstant *)v247);
          llvm::ConstantInt::get();
          v257 = llvm::ValueAsMetadata::get();
          v258 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          if (LODWORD(v625.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v625.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v258 = LODWORD(v625.__r_.__value_.__r.__words[1]);
          }
          *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8 * v258) = v257;
          ++LODWORD(v625.__r_.__value_.__r.__words[1]);
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
          if ((std::string::size_type *)v625.__r_.__value_.__l.__data_ != &v625.__r_.__value_.__r.__words[2])
            free(v625.__r_.__value_.__l.__data_);
          v245 = (std::string *)((char *)v245 + 8);
          v246 -= 8;
        }
        while (v246);
        v245 = (std::string *)v628.__r_.__value_.__r.__words[0];
        v222 = v584;
      }
    }
    if (v245 != (std::string *)&v628.__r_.__value_.__r.__words[2])
      free(v245);
  }
  memset(&v628, 0, 20);
  v631 = 0;
  v629 = 0;
  v630 = 0;
  llvm::LLVMContext::getMDKindID();
  v259 = *(_QWORD *)(v5 + 648);
  v260 = *(_QWORD *)(v259 + 32);
  v579 = v259 + 24;
  if (v260 == v259 + 24)
  {
    LODWORD(v263) = 0;
    goto LABEL_496;
  }
  v261 = 0;
  v262 = 0;
  v263 = 0;
  while (2)
  {
    v264 = v260 - 56;
    v582 = v260;
    if (!v260)
      v264 = 0;
    v265 = v264 + 72;
    for (j = *(_QWORD *)(v264 + 80); ; j = *(_QWORD *)(j + 8))
    {
      if (j == v265)
        goto LABEL_488;
      v267 = j - 24;
      if (!j)
        v267 = 0;
      v268 = *(_QWORD **)(v267 + 48);
      if (v268 != (_QWORD *)(v267 + 40))
        break;
    }
    v587 = v265;
    while (2)
    {
      if (v268)
        v269 = (llvm::Instruction *)(v268 - 3);
      else
        v269 = 0;
      __pa = v268;
      if (*((_QWORD *)v269 + 6) || (*((_BYTE *)v269 + 23) & 0x20) != 0)
      {
        MetadataImpl = llvm::Instruction::getMetadataImpl(v269);
        if (MetadataImpl)
        {
          v271 = (uint64_t *)MetadataImpl;
          v272 = *(unsigned int *)(MetadataImpl + 8);
          if ((_DWORD)v272)
          {
            v273 = (uint64_t *)(MetadataImpl - 8 * v272);
            while (1)
            {
              v274 = *v273;
              v625.__r_.__value_.__r.__words[0] = 0;
              if ((sub_22F2382C0((uint64_t)v628.__r_.__value_.__l.__data_, v263, v274, &v625) & 1) == 0)
                break;
LABEL_477:
              if (++v273 == v271)
                goto LABEL_478;
            }
            if (4 * v262 + 4 >= (3 * v263))
            {
              v275 = 2 * v263;
LABEL_455:
              sub_22F238354((uint64_t)&v628, v275);
              v625.__r_.__value_.__r.__words[0] = 0;
              v263 = LODWORD(v628.__r_.__value_.__r.__words[2]);
              sub_22F2382C0((uint64_t)v628.__r_.__value_.__l.__data_, v628.__r_.__value_.__r.__words[2], v274, &v625);
            }
            else if ((int)v263 + ~v262 - HIDWORD(v628.__r_.__value_.__r.__words[1]) <= v263 >> 3)
            {
              v275 = v263;
              goto LABEL_455;
            }
            v262 = ++LODWORD(v628.__r_.__value_.__r.__words[1]);
            if (*(_QWORD *)v625.__r_.__value_.__l.__data_ != -4096)
              --HIDWORD(v628.__r_.__value_.__r.__words[1]);
            *(_QWORD *)v625.__r_.__value_.__l.__data_ = v274;
            v276 = v630;
            if (v630 >= v631)
            {
              v277 = v263;
              v278 = v271;
              v279 = (char *)v629;
              v280 = (v630 - (_BYTE *)v629) >> 3;
              v281 = v280 + 1;
              if ((unint64_t)(v280 + 1) >> 61)
                goto LABEL_896;
              v282 = v631 - (_BYTE *)v629;
              if ((v631 - (_BYTE *)v629) >> 2 > v281)
                v281 = v282 >> 2;
              if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8)
                v283 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v283 = v281;
              if (v283)
              {
                if (v283 >> 61)
                  goto LABEL_955;
                v284 = (char *)operator new(8 * v283);
              }
              else
              {
                v284 = 0;
              }
              v285 = (uint64_t *)&v284[8 * v280];
              *v285 = v274;
              v261 = (char *)(v285 + 1);
              if (v276 != v279)
              {
                do
                {
                  v286 = *((_QWORD *)v276 - 1);
                  v276 -= 8;
                  *--v285 = v286;
                }
                while (v276 != v279);
                v276 = (char *)v629;
              }
              v629 = v285;
              v631 = &v284[8 * v283];
              v271 = v278;
              if (v276)
                operator delete(v276);
              v263 = v277;
            }
            else
            {
              *(_QWORD *)v630 = v274;
              v261 = v276 + 8;
            }
            v630 = v261;
            goto LABEL_477;
          }
        }
      }
LABEL_478:
      v268 = (_QWORD *)__pa[1];
      v287 = j - 24;
      if (!j)
        v287 = 0;
      if (v268 != (_QWORD *)(v287 + 40))
      {
        v288 = v587;
LABEL_487:
        if (j == v288)
          goto LABEL_488;
        continue;
      }
      break;
    }
    v288 = v587;
    while (1)
    {
      j = *(_QWORD *)(j + 8);
      if (j == v587)
        break;
      v289 = j - 24;
      if (!j)
        v289 = 0;
      v268 = *(_QWORD **)(v289 + 48);
      if (v268 != (_QWORD *)(v289 + 40))
        goto LABEL_487;
    }
LABEL_488:
    v260 = *(_QWORD *)(v582 + 8);
    if (v260 != v579)
      continue;
    break;
  }
  v290 = (char *)v629;
  v5 = v595;
  if (v629 != v261)
  {
    llvm::Module::getOrInsertNamedMetadata();
    v291 = v290;
    do
    {
      v291 += 8;
      llvm::ValueMapper::ValueMapper();
      llvm::ValueMapper::mapMDNode();
      MEMORY[0x23489C744](&v625);
      llvm::NamedMDNode::addOperand();
    }
    while (v291 != v261);
  }
  if (v290)
    operator delete(v290);
  v222 = v584;
LABEL_496:
  llvm::deallocate_buffer((llvm *)v628.__r_.__value_.__l.__data_, (void *)(8 * v263));
  v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
  v628.__r_.__value_.__l.__size_ = v226;
  if (v222 == v594)
  {
    v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
    v628.__r_.__value_.__l.__size_ = v226;
  }
  else
  {
    v292 = v222;
    do
    {
      v293 = *v292;
      if (*v292)
        v294 = *(_BYTE *)(*v292 + 16) == 3;
      else
        v294 = 0;
      if (v294)
      {
        v625.__r_.__value_.__r.__words[0] = 0;
        if (sub_22E7B6870(*(_QWORD *)(v5 + 888), *(_DWORD *)(v5 + 904), v293, &v625)
          && v625.__r_.__value_.__r.__words[0] != *(_QWORD *)(v5 + 888) + 16 * *(unsigned int *)(v5 + 904))
        {
          v296 = *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8);
          if (v296)
          {
            v297 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            if (LODWORD(v628.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v628.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v297 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            }
            *(_QWORD *)(v628.__r_.__value_.__r.__words[0] + 8 * v297) = v296;
            ++LODWORD(v628.__r_.__value_.__r.__words[1]);
          }
        }
      }
      v292 += 4;
    }
    while (v292 != v594);
    v298 = (std::string *)v628.__r_.__value_.__r.__words[0];
    if (LODWORD(v628.__r_.__value_.__r.__words[1]))
    {
      sub_22F23C89C((int8x16_t *)v628.__r_.__value_.__l.__data_, (int8x16_t *)(v628.__r_.__value_.__r.__words[0] + 8 * LODWORD(v628.__r_.__value_.__r.__words[1])), 126 - 2 * __clz(LODWORD(v628.__r_.__value_.__r.__words[1])), 1);
      llvm::Module::getOrInsertNamedMetadata();
      v298 = (std::string *)v628.__r_.__value_.__r.__words[0];
      if (LODWORD(v628.__r_.__value_.__r.__words[1]))
      {
        v299 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
        do
        {
          llvm::ValueMapper::ValueMapper();
          llvm::ValueMapper::mapConstant();
          MEMORY[0x23489C744](&v625);
          llvm::ValueMapper::ValueMapper();
          llvm::ValueMapper::mapMDNode();
          MEMORY[0x23489C744](&v625);
          llvm::air::AIGlobalBinding::getImpl();
          llvm::NamedMDNode::addOperand();
          v298 = (std::string *)((char *)v298 + 8);
          v299 -= 8;
          v222 = v584;
        }
        while (v299);
        v298 = (std::string *)v628.__r_.__value_.__r.__words[0];
      }
    }
    if (v298 != (std::string *)&v628.__r_.__value_.__r.__words[2])
      free(v298);
    v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
    v628.__r_.__value_.__l.__size_ = v226;
    v300 = v222;
    do
    {
      if (*v300)
        v301 = *(_BYTE *)(*v300 + 16) == 3;
      else
        v301 = 0;
      if (v301 && llvm::air::AIRSamplerState::classof())
      {
        llvm::ValueMapper::ValueMapper();
        llvm::ValueMapper::mapConstant();
        MEMORY[0x23489C744](&v625);
        Impl = llvm::air::AISamplerState::getImpl();
        v303 = LODWORD(v628.__r_.__value_.__r.__words[1]);
        if (LODWORD(v628.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v628.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v303 = LODWORD(v628.__r_.__value_.__r.__words[1]);
        }
        *(_QWORD *)(v628.__r_.__value_.__r.__words[0] + 8 * v303) = Impl;
        ++LODWORD(v628.__r_.__value_.__r.__words[1]);
      }
      v300 += 4;
    }
    while (v300 != v594);
    if (LODWORD(v628.__r_.__value_.__r.__words[1]))
    {
      llvm::Module::getOrInsertNamedMetadata();
      if (LODWORD(v628.__r_.__value_.__r.__words[1]))
      {
        v304 = v628.__r_.__value_.__r.__words[0];
        v305 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
        do
        {
          v304 += 8;
          llvm::NamedMDNode::addOperand();
          v305 -= 8;
        }
        while (v305);
      }
    }
  }
  if ((std::string::size_type *)v628.__r_.__value_.__l.__data_ != &v628.__r_.__value_.__r.__words[2])
    free(v628.__r_.__value_.__l.__data_);
  v306 = *(llvm::Module ***)v5;
  __pb = *(llvm::Module ***)(v5 + 8);
  if (*(llvm::Module ***)v5 != __pb)
  {
    v307 = 0;
    v308 = 0;
    v309 = 0;
    while (1)
    {
      v310 = *v306;
      v628.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint.sets";
      LOWORD(v630) = 259;
      v311 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v310, (const llvm::Twine *)&v628);
      if (v311)
      {
        v312 = v311;
        v313 = llvm::NamedMDNode::getNumOperands(v311);
        if (v313)
          break;
      }
LABEL_571:
      if (++v306 == __pb)
      {
        if (v308 != v309)
        {
          llvm::Module::getOrInsertNamedMetadata();
          v333 = v308;
          do
          {
            ++v333;
            llvm::ValueMapper::ValueMapper();
            llvm::ValueMapper::mapMDNode();
            MEMORY[0x23489C744](&v628);
            llvm::NamedMDNode::addOperand();
          }
          while (v333 != v309);
        }
        v222 = v584;
        if (v308)
          operator delete(v308);
        goto LABEL_577;
      }
    }
    v314 = v313;
    v315 = 0;
    v316 = v309;
    while (2)
    {
      v317 = (llvm::TracepointSet *)llvm::NamedMDNode::getOperand(v312);
      BaseID = (llvm::TracepointBaseID *)llvm::TracepointSet::getBaseID(v317);
      v319 = llvm::TracepointBaseID::getBaseID(BaseID);
      v320 = *(_QWORD *)(v595 + 656);
      v321 = *(unsigned int *)(v595 + 672);
      if ((_DWORD)v321)
      {
        v322 = ((v319 >> 4) ^ (v319 >> 9)) & ((_DWORD)v321 - 1);
        v323 = v320 + (v322 << 6);
        v324 = *(_QWORD *)(v323 + 24);
        if (v319 != v324)
        {
          v325 = 1;
          while (v324 != -4096)
          {
            v326 = v322 + v325++;
            v322 = v326 & (v321 - 1);
            v323 = v320 + (v322 << 6);
            v324 = *(_QWORD *)(v323 + 24);
            if (v319 == v324)
              goto LABEL_550;
          }
          goto LABEL_549;
        }
      }
      else
      {
LABEL_549:
        v323 = v320 + (v321 << 6);
      }
LABEL_550:
      if (v323 == v320 + (v321 << 6))
      {
LABEL_553:
        v309 = v316;
      }
      else
      {
        if (v316 < v307)
        {
          *v316++ = v317;
          goto LABEL_553;
        }
        v327 = v316 - v308;
        v328 = v327 + 1;
        if ((unint64_t)(v327 + 1) >> 61)
          goto LABEL_896;
        if (((char *)v307 - (char *)v308) >> 2 > v328)
          v328 = ((char *)v307 - (char *)v308) >> 2;
        if ((unint64_t)((char *)v307 - (char *)v308) >= 0x7FFFFFFFFFFFFFF8)
          v329 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v329 = v328;
        if (v329)
        {
          if (v329 >> 61)
            goto LABEL_955;
          v330 = (char *)operator new(8 * v329);
        }
        else
        {
          v330 = 0;
        }
        v331 = (llvm::TracepointSet **)&v330[8 * v327];
        *v331 = v317;
        v309 = v331 + 1;
        while (v316 != v308)
        {
          v332 = *--v316;
          *--v331 = v332;
        }
        v307 = (llvm::TracepointSet **)&v330[8 * v329];
        if (v308)
          operator delete(v308);
        v308 = v331;
      }
      ++v315;
      v316 = v309;
      if (v314 == v315)
        goto LABEL_571;
      continue;
    }
  }
LABEL_577:
  v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
  v628.__r_.__value_.__l.__size_ = v226;
  v334 = v595;
  if (v222 != v594)
  {
    v335 = v222;
    do
    {
      v336 = *v335;
      if (*v335)
        v337 = *(_BYTE *)(*v335 + 16) == 0;
      else
        v337 = 0;
      if (v337)
      {
        v625.__r_.__value_.__r.__words[0] = 0;
        if (sub_22E7B57A0(*(_QWORD *)(v595 + 840), *(_DWORD *)(v595 + 856), v336, &v625)
          && v625.__r_.__value_.__r.__words[0] != *(_QWORD *)(v595 + 840) + 16 * *(unsigned int *)(v595 + 856))
        {
          v339 = *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8);
          if (v339)
          {
            v340 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            if (LODWORD(v628.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v628.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v340 = LODWORD(v628.__r_.__value_.__r.__words[1]);
            }
            *(_QWORD *)(v628.__r_.__value_.__r.__words[0] + 8 * v340) = v339;
            ++LODWORD(v628.__r_.__value_.__r.__words[1]);
          }
        }
      }
      v335 += 4;
    }
    while (v335 != v594);
    v341 = (std::string *)v628.__r_.__value_.__r.__words[0];
    if (LODWORD(v628.__r_.__value_.__r.__words[1]))
    {
      sub_22F238414((int8x16_t *)v628.__r_.__value_.__l.__data_, (int8x16_t *)(v628.__r_.__value_.__r.__words[0] + 8 * LODWORD(v628.__r_.__value_.__r.__words[1])), 126 - 2 * __clz(LODWORD(v628.__r_.__value_.__r.__words[1])), 1);
      llvm::Module::getOrInsertNamedMetadata();
      v341 = (std::string *)v628.__r_.__value_.__r.__words[0];
      if (LODWORD(v628.__r_.__value_.__r.__words[1]))
      {
        v342 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
        do
        {
          v343 = v341->__r_.__value_.__r.__words[0];
          v344 = *(_QWORD *)(v341->__r_.__value_.__r.__words[0]
                           - 8 * *(unsigned int *)(v341->__r_.__value_.__r.__words[0] + 8)
                           + 8);
          if (v344)
          {
            v345 = *(llvm::Value **)(v344 + 128);
            if (v345)
              llvm::Value::stripPointerCasts(v345);
          }
          llvm::ValueMapper::ValueMapper();
          llvm::ValueMapper::mapConstant();
          MEMORY[0x23489C744](&v625);
          v346 = *(llvm::MDString **)(v343 - 8 * *(unsigned int *)(v343 + 8) + 16);
          if (v346)
            llvm::MDString::getString(v346);
          llvm::air::AIVisibleFunctionReference::getImpl();
          llvm::NamedMDNode::addOperand();
          v341 = (std::string *)((char *)v341 + 8);
          v342 -= 8;
        }
        while (v342);
        v341 = (std::string *)v628.__r_.__value_.__r.__words[0];
      }
    }
    if (v341 != (std::string *)&v628.__r_.__value_.__r.__words[2])
      free(v341);
  }
  v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
  v628.__r_.__value_.__l.__size_ = 0x800000000;
  v632 = &v634;
  v633 = 0x800000000;
  v642 = &v644;
  v643 = 0x800000000;
  v647 = v649;
  v648 = 0x800000000;
  v651 = v653;
  v652 = 0x800000000;
  v655 = v659;
  v656 = v659;
  v657 = 32;
  v658 = 0;
  llvm::DebugInfoFinder::processModule();
  inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
  llvm::NamedMDNode::clearOperands(inserted);
  v620[1] = 0;
  v620[0] = 0;
  LODWORD(v621) = 0;
  if (LODWORD(v628.__r_.__value_.__r.__words[1]))
  {
    v572 = (llvm **)v628.__r_.__value_.__r.__words[0];
    v573 = 8 * LODWORD(v628.__r_.__value_.__r.__words[1]);
    v334 = v595;
    v222 = v584;
    do
    {
      v597 = *v572;
      sub_22F275184((uint64_t)v620, &v597, (uint64_t)&v625);
      if (v625.__r_.__value_.__s.__data_[16])
        llvm::NamedMDNode::addOperand();
      ++v572;
      v573 -= 8;
    }
    while (v573);
  }
  if (!llvm::NamedMDNode::getNumOperands(inserted))
    llvm::NamedMDNode::eraseFromParent(inserted);
  llvm::deallocate_buffer(v620[0], (void *)(8 * v621));
  if (v656 != v655)
    free(v656);
  if (v651 != v653)
    free(v651);
  if (v647 != v649)
    free(v647);
  if (v642 != &v644)
    free(v642);
  if (v632 != &v634)
    free(v632);
  if ((std::string::size_type *)v628.__r_.__value_.__l.__data_ != &v628.__r_.__value_.__r.__words[2])
    free(v628.__r_.__value_.__l.__data_);
  v628.__r_.__value_.__r.__words[0] = (std::string::size_type)&v628.__r_.__value_.__r.__words[2];
  v628.__r_.__value_.__l.__size_ = 0x800000000;
  v639 = &v641;
  v640 = v226;
  v643 = (uint64_t)v645;
  v644 = 0x200000000;
  v645[2] = &v646;
  v645[3] = 0x800000000;
  v649[3] = &v650;
  v649[4] = 0x800000000;
  v653[3] = &v654;
  v653[4] = v226;
  v656 = &v658;
  v657 = v226;
  v659[3] = v660;
  v659[4] = v226;
  v660[4] = v661;
  v660[5] = v226;
  llvm::air::AIRInfoFinder::processModule();
  v620[1] = 0;
  v620[0] = 0;
  LODWORD(v621) = 0;
  v624 = 0;
  v622 = 0;
  v623 = 0;
  v603.__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&v603.__r_.__value_.__l.__data_ = (unint64_t)v620;
  v604 = 0;
  v348 = v628.__r_.__value_.__r.__words[0];
  v349 = v632;
  if ((_DWORD)v632 != HIDWORD(v632))
  {
    v350 = (uint64_t *)(v628.__r_.__value_.__r.__words[0] + 8 * v632);
    v351 = 8 * HIDWORD(v632) - 8 * v632;
    do
    {
      v352 = *v350++;
      sub_22F233FBC((uint64_t *)&v603, v352);
      v351 -= 8;
    }
    while (v351);
    v348 = v628.__r_.__value_.__r.__words[0];
    v349 = HIDWORD(v632);
  }
  if ((_DWORD)v349 != (_DWORD)v633)
  {
    v353 = (uint64_t *)(v348 + 8 * v349);
    v354 = 8 * v633 - 8 * v349;
    do
    {
      v355 = *v353++;
      sub_22F233FBC((uint64_t *)&v603, v355);
      v354 -= 8;
    }
    while (v354);
    v348 = v628.__r_.__value_.__r.__words[0];
    v349 = v633;
  }
  if ((_DWORD)v349 != HIDWORD(v633))
  {
    v356 = (uint64_t *)(v348 + 8 * v349);
    v357 = 8 * HIDWORD(v633) - 8 * v349;
    do
    {
      v358 = *v356++;
      sub_22F233FBC((uint64_t *)&v603, v358);
      v357 -= 8;
    }
    while (v357);
    v348 = v628.__r_.__value_.__r.__words[0];
  }
  v359 = v635;
  if (v635 != v636)
  {
    v360 = (llvm **)(v348 + 8 * v636);
    v361 = (llvm **)(v348 + 8 * v635);
    do
    {
      v362 = *v361;
      v597 = *v361;
      sub_22F235AFC((uint64_t)&v625, (uint64_t)&v603.__r_.__value_.__l.__size_, (uint64_t *)&v597);
      if (v625.__r_.__value_.__s.__data_[16])
      {
        v363 = *((unsigned int *)v362 + 2);
        v364 = ((_QWORD *)v362 - v363)[1];
        if (v364)
          v365 = (uint64_t *)(v364 - 8 * *(unsigned int *)(v364 + 8));
        else
          v365 = 0;
        if (v365 == (uint64_t *)v364)
        {
          v367 = -v363;
        }
        else
        {
          do
          {
            v366 = *v365++;
            sub_22F234A88((uint64_t *)&v603, v366);
          }
          while (v365 != (uint64_t *)v364);
          v363 = *((unsigned int *)v362 + 2);
          v367 = -v363;
        }
        v368 = *((_QWORD *)v362 + v367 + 2);
        if (v368)
          v369 = (uint64_t *)(v368 - 8 * *(unsigned int *)(v368 + 8));
        else
          v369 = 0;
        if (v369 != (uint64_t *)v368)
        {
          do
          {
            v370 = *v369++;
            sub_22F234EFC((uint64_t *)&v603, v370);
          }
          while (v369 != (uint64_t *)v368);
          LODWORD(v363) = *((_DWORD *)v362 + 2);
        }
        if ((_DWORD)v363 == 4)
        {
          v371 = *((_QWORD *)v362 - 1);
          if (v371)
          {
            v372 = *(unsigned int *)(v371 + 8);
            v373 = *(_QWORD *)(v371 - 8 * v372 + 8);
            if (v373)
            {
              sub_22F2368D4((uint64_t *)&v603, *(_QWORD *)(v373 - 8 * *(unsigned int *)(v373 + 8) + 8));
              v372 = *(unsigned int *)(v371 + 8);
            }
            v374 = -v372;
            if (v371 + 8 * v374 + 16 != v371)
            {
              v375 = 8 * v374 + 16;
              do
              {
                v376 = *(_QWORD *)(*(_QWORD *)(v371 + v375) - 8 * *(unsigned int *)(*(_QWORD *)(v371 + v375) + 8) + 8);
                sub_22F2368D4((uint64_t *)&v603, *(_QWORD *)(v376 - 8 * *(unsigned int *)(v376 + 8) + 8));
                v375 += 8;
              }
              while (v375);
            }
          }
        }
      }
      ++v361;
    }
    while (v361 != v360);
    v348 = v628.__r_.__value_.__r.__words[0];
    v359 = v636;
  }
  if (v359 != v637)
  {
    v377 = (uint64_t *)(v348 + 8 * v359);
    v378 = 8 * v637 - 8 * v359;
    do
    {
      v379 = *v377++;
      sub_22F233FBC((uint64_t *)&v603, v379);
      v378 -= 8;
    }
    while (v378);
    v348 = v628.__r_.__value_.__r.__words[0];
  }
  v380 = HIDWORD(v633);
  if (HIDWORD(v633) != v634)
  {
    v381 = (uint64_t *)(v348 + 8 * HIDWORD(v633));
    v382 = 8 * v634 - 8 * HIDWORD(v633);
    do
    {
      v383 = *v381++;
      sub_22F233FBC((uint64_t *)&v603, v383);
      v382 -= 8;
    }
    while (v382);
    v348 = v628.__r_.__value_.__r.__words[0];
    v380 = v634;
  }
  if ((_DWORD)v380 != v635)
  {
    v384 = (uint64_t *)(v348 + 8 * v380);
    v385 = 8 * v635 - 8 * v380;
    do
    {
      v386 = *v384++;
      sub_22F233FBC((uint64_t *)&v603, v386);
      v385 -= 8;
    }
    while (v385);
    v348 = v628.__r_.__value_.__r.__words[0];
  }
  if (v637 != v638)
  {
    v387 = (uint64_t *)(v348 + 8 * v637);
    v388 = 8 * v638 - 8 * v637;
    do
    {
      v389 = *v387++;
      sub_22F233FBC((uint64_t *)&v603, v389);
      v388 -= 8;
    }
    while (v388);
  }
  if ((_DWORD)v657)
  {
    v390 = (uint64_t *)v656;
    v391 = 8 * v657;
    do
    {
      v392 = *v390++;
      sub_22F234EFC((uint64_t *)&v603, *(_QWORD *)(v392 - 8 * *(unsigned int *)(v392 + 8) + 16));
      v391 -= 8;
    }
    while (v391);
  }
  if (v635 != v636)
  {
    v393 = v628.__r_.__value_.__r.__words[0] + 8 * v636;
    v394 = v628.__r_.__value_.__r.__words[0] + 8 * v635;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v394 + 8) == 4)
      {
        v395 = *(_QWORD *)(*(_QWORD *)v394 - 8);
        if (v395)
        {
          v396 = *(_QWORD *)(v395 - 8 * *(unsigned int *)(v395 + 8) + 8);
          if (v396)
          {
            v625.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v396 - 8 * *(unsigned int *)(v396 + 8) + 16)
                                                          + 128);
            sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
            v625.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v396 - 8 * *(unsigned int *)(v396 + 8) + 24)
                                                          + 128);
            sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
            v625.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v396 - 8 * *(unsigned int *)(v396 + 8) + 32)
                                                          + 128);
            sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
            v397 = *(_QWORD *)(v396 - 8 * *(unsigned int *)(v396 + 8) + 40);
            if (v397)
            {
              v398 = *(_QWORD *)(v397 + 128);
              if (v398)
              {
                v625.__r_.__value_.__r.__words[0] = v398;
                sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
              }
            }
          }
          v399 = *(unsigned int *)(v395 + 8);
          if (v395 - 8 * v399 + 16 != v395)
          {
            v400 = 16 - 8 * v399;
            do
            {
              v401 = *(_QWORD *)(*(_QWORD *)(v395 + v400) - 8 * *(unsigned int *)(*(_QWORD *)(v395 + v400) + 8) + 8);
              v625.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v401 - 8 * *(unsigned int *)(v401 + 8) + 16)
                                                            + 128);
              sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
              v625.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v401 - 8 * *(unsigned int *)(v401 + 8) + 24)
                                                            + 128);
              sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
              v625.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v401 - 8 * *(unsigned int *)(v401 + 8) + 32)
                                                            + 128);
              sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
              v402 = *(_QWORD *)(v401 - 8 * *(unsigned int *)(v401 + 8) + 40);
              if (v402)
              {
                v403 = *(_QWORD *)(v402 + 128);
                if (v403)
                {
                  v625.__r_.__value_.__r.__words[0] = v403;
                  sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
                }
              }
              v400 += 8;
            }
            while (v400);
          }
        }
      }
      v394 += 8;
    }
    while (v394 != v393);
  }
  v404 = *(_QWORD *)(v334 + 648);
  v405 = v404 + 24;
  v406 = *(_QWORD *)(v404 + 32);
  if (v406 != v404 + 24)
  {
    do
    {
      if (v406)
        v407 = (llvm::Value *)(v406 - 56);
      else
        v407 = 0;
      v408 = (_DWORD *)llvm::Value::getName(v407);
      if (v409 >= 7 && *v408 == 1952804191 && *(_DWORD *)((char *)v408 + 3) == 1600938356)
      {
        v625.__r_.__value_.__r.__words[0] = llvm::Value::getName(v407);
        v625.__r_.__value_.__l.__size_ = v411;
        if (llvm::StringRef::find() != -1)
        {
          v625.__r_.__value_.__r.__words[0] = (std::string::size_type)v407;
          sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
        }
      }
      v406 = *(_QWORD *)(v406 + 8);
    }
    while (v406 != v405);
  }
  v597 = 0;
  v598 = 0;
  v599 = 0;
  v601 = 0;
  v602 = 0;
  v600 = 0;
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    if (*(_BYTE *)(*(_QWORD *)(GlobalVariable - 32) + 16) == 8)
      v414 = *(_QWORD *)(GlobalVariable - 32);
    else
      v414 = 0;
    v415 = *(_DWORD *)(v414 + 20);
    if ((v415 & 0x40000000) != 0)
    {
      v417 = *(llvm::Value ***)(v414 - 8);
      v416 = v415 & 0x7FFFFFF;
      if (!v416)
        goto LABEL_821;
    }
    else
    {
      v416 = v415 & 0x7FFFFFF;
      v417 = (llvm::Value **)(v414 - 32 * v416);
      if (!v416)
        goto LABEL_821;
    }
    v418 = &v417[4 * v416];
    do
    {
      if (*v417)
      {
        v419 = llvm::Value::stripPointerCasts(*v417);
        v420 = *(_BYTE *)(v419 + 16) ? 0 : (const char *)v419;
        v605 = v420;
        if (v420)
        {
          if (llvm::Value::getMetadata())
          {
            sub_22F448270((uint64_t)&v625, (uint64_t)&v597, (uint64_t *)&v605);
            if (v625.__r_.__value_.__s.__data_[16])
            {
              v421 = (char *)v601;
              if (v601 >= v602)
              {
                v423 = (char *)v600;
                v424 = ((char *)v601 - (_BYTE *)v600) >> 3;
                v425 = v424 + 1;
                if ((unint64_t)(v424 + 1) >> 61)
                  goto LABEL_896;
                v426 = (char *)v602 - (_BYTE *)v600;
                if (((char *)v602 - (_BYTE *)v600) >> 2 > v425)
                  v425 = v426 >> 2;
                if ((unint64_t)v426 >= 0x7FFFFFFFFFFFFFF8)
                  v427 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v427 = v425;
                if (v427)
                {
                  if (v427 >> 61)
                    goto LABEL_955;
                  v428 = (char *)operator new(8 * v427);
                }
                else
                {
                  v428 = 0;
                }
                v429 = (const char **)&v428[8 * v424];
                *v429 = v420;
                v422 = v429 + 1;
                if (v421 != v423)
                {
                  do
                  {
                    v430 = (const char *)*((_QWORD *)v421 - 1);
                    v421 -= 8;
                    *--v429 = v430;
                  }
                  while (v421 != v423);
                  v421 = (char *)v600;
                }
                v600 = v429;
                v602 = (const char **)&v428[8 * v427];
                if (v421)
                  operator delete(v421);
                v222 = v584;
              }
              else
              {
                *v601 = v420;
                v422 = (const char **)(v421 + 8);
              }
              v601 = v422;
              v334 = v595;
            }
          }
        }
      }
      v417 += 4;
    }
    while (v417 != v418);
    v432 = (const char **)v600;
    v431 = v601;
    v588 = v601;
    while (v432 != v431)
    {
      v433 = *v432;
      v605 = 0;
      v606 = 0;
      LODWORD(v607) = 0;
      v434 = v433 + 72;
      memset(&v619, 0, 20);
      __pc = v433;
      for (k = (_QWORD *)*((_QWORD *)v433 + 10); ; k = (_QWORD *)k[1])
      {
        if (k == v434)
        {
          v438 = 0;
          v439 = 0;
LABEL_779:
          v450 = (uint64_t)v439 + 8 * v438;
          v448 = (const char *)v450;
          goto LABEL_780;
        }
        v436 = k - 3;
        if (!k)
          v436 = 0;
        v437 = (_QWORD *)v436[6];
        if (v437 != v436 + 5)
          break;
      }
      while (1)
      {
        v440 = v437 ? (uint64_t)(v437 - 3) : 0;
        v441 = llvm::TracepointCallInst::classof((llvm::TracepointCallInst *)v440, v413);
        if (v437 && v441)
        {
          if (llvm::TracepointVariableCallInst::classof((llvm::TracepointVariableCallInst *)v440, v413))
          {
            VariableAddress = (llvm::Value *)llvm::TracepointVariableCallInst::getVariableAddress((llvm::TracepointVariableCallInst *)v440);
            v443 = llvm::Value::stripPointerCasts(VariableAddress);
            v444 = *(_BYTE *)(v443 + 16) == 3 ? v443 : 0;
            v618.__r_.__value_.__r.__words[0] = v444;
            if (v444)
              sub_22F25884C((uint64_t)&v625, (uint64_t)&v619, (uint64_t *)&v618);
          }
        }
        else if (v437)
        {
          if (*(_BYTE *)(v440 + 16) == 84)
          {
            v618.__r_.__value_.__r.__words[0] = 0;
            v445 = *(_QWORD *)(v440 - 32);
            if (v445)
            {
              if (!*(_BYTE *)(v445 + 16) && *(_QWORD *)(v445 + 24) == *(_QWORD *)(v440 + 72))
              {
                v618.__r_.__value_.__r.__words[0] = *(_QWORD *)(v440 - 32);
                sub_22F448270((uint64_t)&v625, (uint64_t)&v605, (uint64_t *)&v618);
              }
            }
          }
        }
        v437 = (_QWORD *)v437[1];
        v446 = k - 3;
        if (!k)
          v446 = 0;
        if (v437 == v446 + 5)
          break;
LABEL_772:
        if (k == v434)
          goto LABEL_773;
      }
      while (1)
      {
        k = (_QWORD *)k[1];
        if (k == v434)
          break;
        v447 = k - 3;
        if (!k)
          v447 = 0;
        v437 = (_QWORD *)v447[6];
        if (v437 != v447 + 5)
          goto LABEL_772;
      }
LABEL_773:
      v439 = (llvm *)v605;
      v438 = v607;
      if (!(_DWORD)v606)
        goto LABEL_779;
      v448 = &v605[8 * v607];
      if ((_DWORD)v607)
      {
        v449 = 0;
        while ((*(_QWORD *)&v605[v449] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v449 += 8;
          if (8 * v607 == v449)
          {
            v450 = (uint64_t)&v605[8 * v607];
            goto LABEL_780;
          }
        }
        v450 = (uint64_t)&v605[v449];
      }
      else
      {
        v450 = (uint64_t)v605;
      }
LABEL_780:
      v451 = (char *)v439 + 8 * v438;
      if ((char *)v450 != v451)
      {
        v452 = v597;
        v453 = v599;
        v454 = v599 - 1;
        while (1)
        {
          v455 = *(_QWORD *)(*(_QWORD *)v450 + 8);
          if (v455)
            break;
LABEL_793:
          v462 = (const char *)(v450 + 8);
          v450 = (uint64_t)v448;
          if (v462 != v448)
          {
            while ((*(_QWORD *)v462 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v462 += 8;
              if (v462 == v448)
              {
                v450 = (uint64_t)v448;
                goto LABEL_798;
              }
            }
            v450 = (uint64_t)v462;
          }
LABEL_798:
          if ((char *)v450 == v451)
            goto LABEL_801;
        }
        while (1)
        {
          v456 = *(llvm::Instruction **)(v455 + 24);
          if (v456 && *((_BYTE *)v456 + 16) == 84)
          {
            Function = llvm::Instruction::getFunction(v456);
            if (!v453)
              goto LABEL_800;
            v458 = ((Function >> 4) ^ (Function >> 9)) & v454;
            v459 = *((_QWORD *)v452 + v458);
            if (Function != v459)
              break;
          }
LABEL_787:
          v455 = *(_QWORD *)(v455 + 8);
          if (!v455)
            goto LABEL_793;
        }
        v460 = 1;
        while (v459 != -4096)
        {
          v461 = v458 + v460++;
          v458 = v461 & v454;
          v459 = *((_QWORD *)v452 + v458);
          if (Function == v459)
            goto LABEL_787;
        }
LABEL_800:
        v625.__r_.__value_.__r.__words[0] = (std::string::size_type)__pc;
        sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
      }
LABEL_801:
      v463 = (llvm *)v619.__r_.__value_.__r.__words[0];
      v464 = v619.__r_.__value_.__r.__words[0] + 8 * LODWORD(v619.__r_.__value_.__r.__words[2]);
      v465 = (void *)(8 * LODWORD(v619.__r_.__value_.__r.__words[2]));
      if (LODWORD(v619.__r_.__value_.__r.__words[1]))
      {
        v334 = v595;
        v222 = v584;
        if (LODWORD(v619.__r_.__value_.__r.__words[2]))
        {
          v466 = 8 * LODWORD(v619.__r_.__value_.__r.__words[2]);
          v467 = (llvm::Value **)v619.__r_.__value_.__r.__words[0];
          while (((unint64_t)*v467 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            ++v467;
            v466 -= 8;
            if (!v466)
            {
              v467 = (llvm::Value **)(v619.__r_.__value_.__r.__words[0]
                                    + 8 * LODWORD(v619.__r_.__value_.__r.__words[2]));
              break;
            }
          }
        }
        else
        {
          v467 = (llvm::Value **)v619.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        v467 = (llvm::Value **)(v619.__r_.__value_.__r.__words[0] + 8 * LODWORD(v619.__r_.__value_.__r.__words[2]));
        v334 = v595;
        v222 = v584;
      }
      v468 = v619.__r_.__value_.__r.__words[0] + 8 * LODWORD(v619.__r_.__value_.__r.__words[2]);
LABEL_810:
      while (v467 != (llvm::Value **)v468)
      {
        if ((llvm::Value::hasNUsesOrMore(*v467) & 1) != 0)
        {
          v625.__r_.__value_.__r.__words[0] = (std::string::size_type)__pc;
          sub_22F234080((uint64_t)v620, (uint64_t *)&v625);
          break;
        }
        v469 = v467 + 1;
        v467 = (llvm::Value **)v464;
        if (v469 != (llvm::Value **)v464)
        {
          v467 = v469;
          while (((unint64_t)*v467 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if (++v467 == (llvm::Value **)v464)
            {
              v467 = (llvm::Value **)v464;
              goto LABEL_810;
            }
          }
        }
      }
      llvm::deallocate_buffer(v463, v465);
      llvm::deallocate_buffer(v439, (void *)(8 * v438));
      ++v432;
      v431 = v588;
    }
  }
LABEL_821:
  v470 = *(llvm::Type ***)(v334 + 648);
  v471 = (char *)v622;
  v472 = v623;
  v473 = llvm::Module::getGlobalVariable();
  v475 = (llvm::GlobalVariable *)v473;
  if (v472 == v471)
  {
    v482 = a1;
    if (v473)
    {
      if (*(_QWORD *)(v473 + 8))
      {
        llvm::Constant::getNullValue(*(llvm::Constant **)v473, v474);
        llvm::Value::replaceAllUsesWith();
      }
      llvm::GlobalVariable::eraseFromParent(v475);
    }
  }
  else
  {
    Int8PtrTy = (llvm::ArrayType *)llvm::Type::getInt8PtrTy(*v470, 0);
    v625.__r_.__value_.__r.__words[0] = (std::string::size_type)&v625.__r_.__value_.__r.__words[2];
    v625.__r_.__value_.__l.__size_ = 0x800000000;
    v477 = (v472 - v471) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      PointerCast = llvm::ConstantExpr::getPointerCast();
      v479 = LODWORD(v625.__r_.__value_.__r.__words[1]);
      if (LODWORD(v625.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v625.__r_.__value_.__r.__words[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v479 = LODWORD(v625.__r_.__value_.__r.__words[1]);
      }
      *(_QWORD *)(v625.__r_.__value_.__r.__words[0] + 8 * v479) = PointerCast;
      v480 = (llvm::Type *)++LODWORD(v625.__r_.__value_.__r.__words[1]);
      v471 += 8;
      v477 -= 8;
    }
    while (v477);
    llvm::ArrayType::get(Int8PtrTy, v480);
    llvm::ConstantArray::get();
    v481 = (_QWORD *)llvm::User::operator new((llvm::User *)0x58);
    v605 = "llvm.compiler.used";
    v608 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v482 = a1;
    v222 = v584;
    if (v475)
    {
      llvm::Value::takeName();
      if (*(_QWORD *)v475 != *v481)
        llvm::ConstantExpr::getPointerCast();
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalVariable::eraseFromParent(v475);
    }
    if ((std::string::size_type *)v625.__r_.__value_.__l.__data_ != &v625.__r_.__value_.__r.__words[2])
      free(v625.__r_.__value_.__l.__data_);
  }
  llvm::ValueMapper::ValueMapper();
  v483 = llvm::ValueMapper::mapConstant();
  MEMORY[0x23489C744](&v625);
  v484 = *(_QWORD *)(v334 + 648);
  *(_QWORD *)(v334 + 648) = 0;
  *v482 = v483;
  v482[1] = v484;
  if (v600)
    operator delete(v600);
  llvm::deallocate_buffer(v597, (void *)(8 * v599));
  llvm::deallocate_buffer((llvm *)v603.__r_.__value_.__l.__size_, (void *)(8 * v604));
  v485 = v594;
  if (v622)
  {
    v623 = v622;
    operator delete(v622);
  }
  llvm::deallocate_buffer(v620[0], (void *)(8 * v621));
  sub_22F227614((uint64_t)&v628);
  if (v222)
  {
    if (v222 != v594)
    {
      do
      {
        v486 = (void *)*(v485 - 3);
        if (v486)
        {
          *(v485 - 2) = (uint64_t)v486;
          operator delete(v486);
        }
        v485 -= 4;
      }
      while (v485 != v222);
    }
    operator delete(v222);
  }
}

void sub_22F233FBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v11 = a2;
  sub_22F235AFC((uint64_t)v12, (uint64_t)(a1 + 1), &v11);
  if (v12[16])
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(_QWORD *)(a2 - 8 * v4 + 8);
    if (v5)
      v6 = (uint64_t *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    else
      v6 = 0;
    if (v6 != (uint64_t *)v5)
    {
      do
      {
        v7 = *v6++;
        sub_22F234A88(a1, v7);
      }
      while (v6 != (uint64_t *)v5);
      v4 = *(unsigned int *)(a2 + 8);
    }
    v8 = *(_QWORD *)(a2 - 8 * v4 + 16);
    if (v8)
      v9 = (uint64_t *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    else
      v9 = 0;
    while (v9 != (uint64_t *)v8)
    {
      v10 = *v9++;
      sub_22F234EFC(a1, v10);
    }
  }
}

void sub_22F234080(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  v18 = 0;
  if ((sub_22F237338(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v18) & 1) != 0)
    return;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 8);
  if (4 * v5 + 4 >= 3 * v4)
  {
    v4 *= 2;
LABEL_6:
    sub_22F2373CC(a1, v4);
    v18 = 0;
    sub_22F237338(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v18);
    goto LABEL_7;
  }
  if (v4 + ~v5 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
    goto LABEL_6;
LABEL_7:
  v6 = v18;
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v8 = *(uint64_t **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_22E3B3F8C();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)&v15[8 * v11];
    *v16 = *a2;
    v9 = v16 + 1;
    if (v8 != v10)
    {
      do
      {
        v17 = *--v8;
        *--v16 = v17;
      }
      while (v8 != v10);
      v8 = *(uint64_t **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = *a2;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v9;
}

_QWORD *sub_22F234224(_QWORD *__dst, void *__src, size_t __n)
{
  _QWORD *v3;
  size_t v6;
  size_t v7;
  _QWORD *v8;

  v3 = __dst;
  if (!__src)
  {
    *__dst = 0;
    __dst[1] = 0;
    __dst[2] = 0;
    return __dst;
  }
  if (__n >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__n >= 0x17)
  {
    v6 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v6 = __n | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = __n;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __n;
    if (!__n)
      goto LABEL_11;
  }
  __dst = memcpy(v3, __src, __n);
LABEL_11:
  *((_BYTE *)v3 + __n) = 0;
  return __dst;
}

uint64_t sub_22F2342C8(llvm::Function *this)
{
  uint64_t result;
  uint64_t v3;

  if ((*((_WORD *)this + 9) & 1) == 0)
    return *((_QWORD *)this + 11);
  llvm::Function::BuildLazyArguments(this);
  result = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 11);
    llvm::Function::BuildLazyArguments(this);
    return v3;
  }
  return result;
}

uint64_t sub_22F234334(uint64_t a1, const char *a2)
{
  llvm::Module *v3;
  char v4;
  uint64_t result;
  llvm::NamedMDNode *v6;
  int v7;
  int i;
  _QWORD v9[4];
  char v10;
  char v11;

  v3 = *(llvm::Module **)(*(_QWORD *)(a1 + 624) + 40);
  v4 = 1;
  v11 = 1;
  if (*a2)
  {
    v9[0] = a2;
    v4 = 3;
  }
  v10 = v4;
  result = llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)v9);
  if (result)
  {
    v6 = (llvm::NamedMDNode *)result;
    strlen(a2);
    llvm::Module::getOrInsertNamedMetadata();
    result = llvm::NamedMDNode::getNumOperands(v6);
    if ((_DWORD)result)
    {
      v7 = result;
      for (i = 0; i != v7; ++i)
      {
        llvm::NamedMDNode::getOperand(v6);
        llvm::ValueMapper::ValueMapper();
        llvm::ValueMapper::mapMDNode();
        MEMORY[0x23489C744](v9);
        result = llvm::NamedMDNode::addOperand();
      }
    }
  }
  return result;
}

void sub_22F23443C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  v4 = (uint64_t *)operator new(0x18uLL);
  v4[2] = a1;
  *v4 = (uint64_t)v22;
  v4[1] = (uint64_t)v22;
  v5 = 1;
  v22[0] = v4;
  v22[1] = v4;
  do
  {
    v6 = v4[2];
    v7 = *v4;
    *(_QWORD *)(v7 + 8) = v4[1];
    *(_QWORD *)v4[1] = v7;
    v23 = v5 - 1;
    operator delete(v4);
    v8 = *(_DWORD *)(v6 + 20);
    if ((v8 & 0x40000000) != 0)
    {
      v10 = *(uint64_t **)(v6 - 8);
      v9 = v8 & 0x7FFFFFF;
    }
    else
    {
      v9 = v8 & 0x7FFFFFF;
      v10 = (uint64_t *)(v6 - 32 * v9);
    }
    v4 = (uint64_t *)v22[0];
    v5 = v23;
    if (v9)
    {
      v11 = 32 * v9;
      do
      {
        v12 = *v10;
        v13 = *(unsigned __int8 *)(*v10 + 16);
        if (v13 <= 0x1B)
        {
          if (v13 - 21 >= 7)
          {
            v14 = (uint64_t *)operator new(0x18uLL);
            v14[1] = (uint64_t)v22;
            v14[2] = v12;
            *v14 = (uint64_t)v4;
            v4[1] = (uint64_t)v14;
            ++v5;
            v22[0] = v14;
            v23 = v5;
            v12 = *v10;
            v13 = *(unsigned __int8 *)(*v10 + 16);
            v4 = v14;
          }
          if (v13 == 23)
          {
            v15 = *(_QWORD *)(v12 + 24);
            if (*(_BYTE *)v15 == 1)
            {
              v16 = *(_QWORD *)(v15 + 128);
              if (v16)
              {
                v17 = (uint64_t *)operator new(0x18uLL);
                v17[1] = (uint64_t)v22;
                v17[2] = v16;
                *v17 = (uint64_t)v4;
                v4[1] = (uint64_t)v17;
                ++v5;
                v4 = v17;
                v22[0] = v17;
                v23 = v5;
              }
            }
          }
        }
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
    }
    v18 = *(unsigned __int8 *)(v6 + 16);
    if (v18 <= 3 && v18 != 1)
    {
      v20 = operator new(0x30uLL);
      v20[2] = v6;
      v20[3] = 0;
      v20[4] = 0;
      v20[5] = 0;
      v21 = *a2;
      *v20 = *a2;
      v20[1] = a2;
      *(_QWORD *)(v21 + 8) = v20;
      *a2 = (uint64_t)v20;
      ++a2[2];
    }
  }
  while (v5);
  sub_22F447C48(v25[0]);
}

uint64_t sub_22F2345DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_22F237054(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

void sub_22F234634(_QWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::Value *Function;
  int v15;
  uint64_t Name;
  size_t v17;
  const void **v18;
  const void **v19;
  const void *v20;
  size_t v21;
  char v22;
  BOOL v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Module *v28;
  llvm::Module *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Module *v41;
  uint64_t v42;
  llvm::Module *v43;
  void *__p;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  uint64_t v50[170];

  v50[168] = *MEMORY[0x24BDAC8D0];
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = (_QWORD *)a1[15];
  v7 = (_QWORD *)a1[16];
  if (v6 == v7)
  {
    v8 = 0;
    v10 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (_QWORD *)(*v6 + 72);
      if ((unint64_t)v8 >= v49)
        v8 = sub_22E4A02B0(&v47, v9);
      else
        *v8++ = *v9;
      v48 = v8;
      ++v6;
    }
    while (v6 != v7);
    v10 = v47;
  }
  sub_22F448594((uint64_t)v50, v10, (uint64_t)v8, a2, a3);
  sub_22F22F810(v50);
  __p = 0;
  v45 = 0;
  v46 = 0;
  v11 = a1[12];
  v12 = a1[13];
  if (v11 != v12)
  {
    v13 = 0;
    do
    {
      Function = (llvm::Value *)llvm::Module::getFunction();
      v15 = *(_DWORD *)(v11 + 24);
      Name = llvm::Value::getName(Function);
      v18 = (const void **)a1[12];
      v19 = (const void **)a1[13];
      if (v18 == v19)
      {
LABEL_53:
        v26 = 0;
      }
      else
      {
        v20 = (const void *)Name;
        v21 = v17;
        while (1)
        {
          v22 = *((_BYTE *)v18 + 23);
          v23 = v22 < 0;
          if (v22 >= 0)
            v24 = v18;
          else
            v24 = *v18;
          v25 = (const void *)(v22 & 0x7F);
          if (v23)
            v25 = v18[1];
          if (v25 == (const void *)v21 && (!v21 || !memcmp(v24, v20, v21)))
            break;
          v18 += 34;
          if (v18 == v19)
            goto LABEL_53;
        }
        v26 = (uint64_t)v18[33];
      }
      sub_22F2302C8(&v42, (uint64_t)v50, Function, v15, v26);
      v27 = operator new();
      v28 = v43;
      v43 = 0;
      v41 = v28;
      sub_22F241744(v27, &v41);
      v29 = v41;
      v41 = 0;
      if (v29)
      {
        v30 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v30, 0x10B2C407FF26C1CLL);
      }
      if (v13 >= v46)
      {
        v31 = (uint64_t *)__p;
        v32 = ((char *)v13 - (_BYTE *)__p) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          abort();
        v34 = (char *)v46 - (_BYTE *)__p;
        if (((char *)v46 - (_BYTE *)__p) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
            sub_22E3B3F8C();
          v36 = (char *)operator new(8 * v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = (uint64_t *)&v36[8 * v32];
        *v37 = v27;
        v38 = v37 + 1;
        if (v13 != v31)
        {
          do
          {
            v39 = *--v13;
            *--v37 = v39;
          }
          while (v13 != v31);
          v13 = (uint64_t *)__p;
        }
        __p = v37;
        v45 = v38;
        v46 = (uint64_t *)&v36[8 * v35];
        if (v13)
          operator delete(v13);
        v13 = v38;
      }
      else
      {
        *v13++ = v27;
      }
      v45 = v13;
      if (v43)
      {
        v40 = MEMORY[0x23489F15C]();
        MEMORY[0x2348A0E9C](v40, 0x10B2C407FF26C1CLL);
      }
      v11 += 272;
    }
    while (v11 != v12);
  }
  sub_22F234960((uint64_t)a1, &__p);
  if (__p)
    operator delete(__p);
  sub_22F236C30((uint64_t)v50);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

uint64_t sub_22F234960(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 120);
  v5 = *(_QWORD *)(result + 128);
  if (v5 == v4)
  {
    v4 = *(_QWORD *)(result + 128);
  }
  else
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = *(_QWORD *)(v4 + 8 * v6);
      if (result)
      {
        if (*(_BYTE *)(result + 80))
        {
          v17 = *(_QWORD *)(result + 72);
          if (v17)
          {
            v18 = MEMORY[0x23489F15C](v17);
            MEMORY[0x2348A0E9C](v18, 0x10B2C407FF26C1CLL);
          }
        }
        result = MEMORY[0x2348A0E9C]();
        v4 = v3[15];
        v5 = v3[16];
      }
      v6 = v7++;
    }
    while (v6 < (v5 - v4) >> 3);
  }
  v3[16] = v4;
  v3[15] = *a2;
  *a2 = v4;
  v8 = v3[16];
  v3[16] = a2[1];
  a2[1] = v8;
  v9 = v3[17];
  v3[17] = a2[2];
  a2[2] = v9;
  v11 = v3[12];
  v10 = v3[13];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = 0;
    v14 = 0xF0F0F0F0F0F0F0F1 * (v12 >> 4);
    v15 = v3[15];
    v16 = (_QWORD *)(v11 + 240);
    do
    {
      *v16 = *(_QWORD *)(v15 + 8 * v13++);
      v16 += 34;
    }
    while (v14 > v13);
  }
  return result;
}

void sub_22F234A88(uint64_t *a1, uint64_t a2)
{
  llvm::MDString *v4;
  _QWORD *String;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  llvm::MDString *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  llvm::MDString *v45;
  const void *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[2];
  char v63;

  v61 = a2;
  sub_22F235AFC((uint64_t)v62, (uint64_t)(a1 + 1), &v61);
  if (v63)
  {
    v4 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (v4)
    {
      String = (_QWORD *)llvm::MDString::getString(v4);
      if (v6 == 21)
      {
        v35 = *String == 0x636E75662E726961 && String[1] == 0x6E6F635F6E6F6974;
        if (v35 && *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63)
        {
          v37 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8));
            if (v38)
            {
              v39 = *(_QWORD *)(v38 + 128);
              if (*(_BYTE *)(v39 + 16) == 3)
              {
                v40 = *a1;
                v62[0] = v39;
                sub_22F234080(v40, v62);
              }
            }
          }
        }
      }
    }
    if (llvm::air::AIReturnType::classof())
    {
      v7 = sub_22F2362F4(a2);
      v8 = 8;
      if (v7)
        v8 = 24;
      v9 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v8);
      if (v9)
      {
        if (*(_BYTE *)v9 == 1)
        {
          v10 = *(_QWORD *)(v9 + 128);
          if (*(_BYTE *)(v10 + 16) == 3)
          {
            v11 = *a1;
            v62[0] = v10;
            sub_22F234080(v11, v62);
          }
        }
      }
      v12 = sub_22F2362F4(a2);
      v13 = 16;
      if (v12)
        v13 = 32;
      v14 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v13);
      if (*(_BYTE *)v14 == 1 && *(_BYTE *)(*(_QWORD *)(v14 + 128) + 16) == 16)
        goto LABEL_19;
      v15 = sub_22F2362F4(a2);
      v16 = 16;
      if (v15)
        v16 = 32;
      v17 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v16);
      if (*(_BYTE *)v17 == 1 && *(_BYTE *)(*(_QWORD *)(v17 + 128) + 16) == 3)
      {
LABEL_19:
        v18 = sub_22F2362F4(a2);
        v19 = 16;
        if (v18)
          v19 = 32;
        v20 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v19);
        if (v20)
        {
          if (*(_BYTE *)v20 == 1)
          {
            v21 = *(_QWORD *)(v20 + 128);
            if (*(_BYTE *)(v21 + 16) == 3)
            {
              v22 = *a1;
              v62[0] = v21;
              sub_22F234080(v22, v62);
            }
          }
        }
      }
      v23 = sub_22F2362F4(a2);
      v24 = 24;
      if (v23)
        v24 = 40;
      v25 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + v24);
      if (v25)
      {
        v26 = (_QWORD *)llvm::MDString::getString(v25);
        if (v27 == 22)
        {
          v28 = *v26 == 0x747361722E726961 && v26[1] == 0x726564726F5F7265;
          if (v28 && *(_QWORD *)((char *)v26 + 14) == 0x70756F72675F7265)
          {
            v30 = sub_22F2362F4(a2);
            v31 = 32;
            if (v30)
              v31 = 48;
            v32 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v31);
            if (v32 && *(_BYTE *)v32 == 1)
            {
              v33 = *(_QWORD *)(v32 + 128);
              if (*(_BYTE *)(v33 + 16) == 3)
              {
                v34 = *a1;
                v62[0] = v33;
                sub_22F234080(v34, v62);
              }
            }
          }
        }
      }
    }
    else if (llvm::air::AIReturnType::classof())
    {
      v41 = sub_22F2362F4(a2);
      v42 = sub_22F447634(a2);
      v43 = 2;
      if (!v42)
        v43 = 0;
      v44 = 5;
      if (v41)
        v44 = 7;
      v45 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v43 + v44));
      if (!*(_BYTE *)v45)
      {
        v46 = (const void *)llvm::MDString::getString(v45);
        if (v47 == 43 && !memcmp(v46, "air.alias_implicit_imageblock_render_target", 0x2BuLL))
        {
          v48 = sub_22F2362F4(a2);
          v49 = sub_22F447634(a2);
          v50 = 2;
          if (!v49)
            v50 = 0;
          v51 = 6;
          if (v48)
            v51 = 8;
          v52 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v50 + v51));
          if (v52)
          {
            if (*(_BYTE *)v52 == 1)
            {
              v53 = *(_QWORD *)(v52 + 128);
              if (*(_BYTE *)(v53 + 16) == 3)
              {
                v54 = *a1;
                v62[0] = v53;
                sub_22F234080(v54, v62);
              }
            }
          }
        }
      }
      v55 = sub_22F2362F4(a2);
      v56 = 32;
      if (v55)
        v56 = 48;
      v57 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v56);
      if (v57)
        sub_22F235D64(a1, v57);
      if (sub_22F447634(a2))
      {
        v58 = sub_22F2362F4(a2);
        v59 = 48;
        if (v58)
          v59 = 64;
        v60 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v59);
        if (v60)
          sub_22F235D64(a1, v60);
      }
    }
  }
}

void sub_22F234EFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  llvm::MDString *v5;
  _QWORD *String;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::MDString *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  llvm::MDString *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  unsigned int v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  llvm::MDString *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  llvm::MDString *v104;
  const void *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  llvm::MDString *v122;
  const void *v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  BOOL v137;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153[2];
  char v154;

  v4 = (uint64_t)(a1 + 1);
  v152 = a2;
  sub_22F235AFC((uint64_t)v153, (uint64_t)(a1 + 1), &v152);
  if (!v154)
    return;
  v5 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  if (v5)
  {
    String = (_QWORD *)llvm::MDString::getString(v5);
    if (v7 == 21)
    {
      v75 = *String == 0x636E75662E726961 && String[1] == 0x6E6F635F6E6F6974;
      if (v75 && *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63)
      {
        v77 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
        if (v77)
        {
          v78 = *(_QWORD *)(v77 - 8 * *(unsigned int *)(v77 + 8));
          if (v78)
          {
            v79 = *(_QWORD *)(v78 + 128);
            if (*(_BYTE *)(v79 + 16) == 3)
            {
              v80 = *a1;
              v153[0] = v79;
              sub_22F234080(v80, v153);
            }
          }
        }
      }
    }
  }
  if (llvm::air::AIArgument::classof())
  {
    v64 = sub_22F22F2CC(a2);
    v65 = 16;
    if (v64)
      v65 = 32;
    v66 = *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + v65);
    v67 = *v66;
    v68 = *((_QWORD *)v66 + 16);
    if (v67 == 1 && *(_BYTE *)(v68 + 16) == 3)
    {
      v70 = *a1;
      v153[0] = v68;
      sub_22F234080(v70, v153);
    }
    if (!sub_22F447A2C(a2))
      return;
    goto LABEL_103;
  }
  if ((llvm::air::AIArgument::classof() & 1) != 0
    || (llvm::air::AIArgument::classof() & 1) != 0
    || (llvm::air::AIArgument::classof() & 1) != 0
    || (llvm::air::AIArgument::classof() & 1) != 0
    || (llvm::air::AIArgument::classof() & 1) != 0
    || llvm::air::AIArgument::classof())
  {
    v8 = sub_22F22F2CC(a2);
    v9 = sub_22F2365A0(a2);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v11 = 3;
    if (v8)
      v11 = 5;
    v12 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v10 + v11));
    if (v12)
    {
      if (*(_BYTE *)v12 == 1)
      {
        v13 = *(_QWORD *)(v12 + 128);
        if (*(_BYTE *)(v13 + 16) == 3)
        {
          v14 = *a1;
          v153[0] = v13;
          sub_22F234080(v14, v153);
        }
      }
    }
    v15 = sub_22F22F2CC(a2);
    v16 = sub_22F2365A0(a2);
    v17 = 2;
    if (!v16)
      v17 = 0;
    v18 = 4;
    if (v15)
      v18 = 6;
    v19 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v17 + v18));
    if (v19)
    {
      if (*(_BYTE *)v19 == 1)
      {
        v20 = *(_QWORD *)(v19 + 128);
        if (*(_BYTE *)(v20 + 16) == 3)
        {
          v21 = *a1;
          v153[0] = v20;
          sub_22F234080(v21, v153);
        }
      }
    }
    v22 = sub_22F22F2CC(a2);
    v23 = 2;
    if (sub_22F2365A0(a2))
      v24 = 2;
    else
      v24 = 0;
    if (sub_22F236628(a2))
      v25 = 2;
    else
      v25 = 0;
    if ((sub_22F2366D4(a2) & 1) == 0)
    {
      if (sub_22F2367A0(a2))
        v23 = 2;
      else
        v23 = 0;
    }
    v26 = 6;
    if (v22)
      v26 = 8;
    v27 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v24 + v26 + v25 + v23));
    if (v27)
    {
      v28 = (_QWORD *)llvm::MDString::getString(v27);
      if (v29 == 22)
      {
        v137 = *v28 == 0x747361722E726961 && v28[1] == 0x726564726F5F7265;
        if (v137 && *(_QWORD *)((char *)v28 + 14) == 0x70756F72675F7265)
        {
          v139 = sub_22F22F2CC(a2);
          v140 = 2;
          if (sub_22F2365A0(a2))
            v141 = 2;
          else
            v141 = 0;
          if (sub_22F236628(a2))
            v142 = 2;
          else
            v142 = 0;
          if ((sub_22F2366D4(a2) & 1) == 0)
          {
            if (sub_22F2367A0(a2))
              v140 = 2;
            else
              v140 = 0;
          }
          v143 = 7;
          if (v139)
            v143 = 9;
          v144 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v141 + v143 + v142 + v140));
          if (v144)
          {
            if (*(_BYTE *)v144 == 1)
            {
              v145 = *(_QWORD *)(v144 + 128);
              if (*(_BYTE *)(v145 + 16) == 3)
              {
                v146 = *a1;
                v153[0] = v145;
                sub_22F234080(v146, v153);
              }
            }
          }
        }
      }
    }
    if (sub_22F2366D4(a2))
    {
      v147 = sub_22F22F2CC(a2);
      if (sub_22F2365A0(a2))
        v148 = 2;
      else
        v148 = 0;
      if (sub_22F236628(a2))
        v149 = 2;
      else
        v149 = 0;
      v150 = 7;
      if (v147)
        v150 = 9;
      v151 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v148 + v150 + v149));
      if (v151)
      {
        sub_22F236370((uint64_t)a1, v151);
        return;
      }
    }
    if (!sub_22F2367A0(a2))
      return;
    v30 = sub_22F22F2CC(a2);
    if (sub_22F2365A0(a2))
      v31 = 2;
    else
      v31 = 0;
    if (sub_22F236628(a2))
      v32 = 2;
    else
      v32 = 0;
    v33 = 7;
    if (v30)
      v33 = 9;
    v34 = v31 + v33 + v32;
    goto LABEL_52;
  }
  if (llvm::air::AIArgument::classof())
  {
LABEL_55:
    v36 = sub_22F22F2CC(a2);
    v37 = 24;
    if (v36)
      v37 = 40;
    v38 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v37);
    if (v38)
    {
      if (*(_BYTE *)v38 == 1)
      {
        v39 = *(_QWORD *)(v38 + 128);
        if (*(_BYTE *)(v39 + 16) == 3)
        {
          v40 = *a1;
          v153[0] = v39;
          sub_22F234080(v40, v153);
        }
      }
    }
LABEL_103:
    v71 = sub_22F22F2CC(a2);
    v59 = a2 - 8 * *(unsigned int *)(a2 + 8);
    v60 = v71 == 0;
    v61 = 32;
    v62 = 48;
    goto LABEL_104;
  }
  if (llvm::air::AIArgument::classof())
  {
    v41 = sub_22F22F2CC(a2);
    v42 = 24;
    if (v41)
      v42 = 40;
    v43 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v42);
    if (v43)
    {
      if (*(_BYTE *)v43 == 1)
      {
        v44 = *(_QWORD *)(v43 + 128);
        if (*(_BYTE *)(v44 + 16) == 3)
        {
          v45 = *a1;
          v153[0] = v44;
          sub_22F234080(v45, v153);
        }
      }
    }
    v46 = sub_22F22F2CC(a2);
    v47 = 32;
    if (v46)
      v47 = 48;
    v48 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v47);
    if (v48)
    {
      if (*(_BYTE *)v48 == 1)
      {
        v49 = *(_QWORD *)(v48 + 128);
        if (*(_BYTE *)(v49 + 16) == 3)
        {
          v50 = *a1;
          v153[0] = v49;
          sub_22F234080(v50, v153);
        }
      }
    }
    v51 = sub_22F22F2CC(a2);
    v52 = 48;
    if (v51)
      v52 = 64;
    v53 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + v52);
    if (!v53)
      return;
    v54 = (_QWORD *)llvm::MDString::getString(v53);
    if (v55 != 22)
      return;
    v56 = *v54 == 0x747361722E726961 && v54[1] == 0x726564726F5F7265;
    if (!v56 || *(_QWORD *)((char *)v54 + 14) != 0x70756F72675F7265)
      return;
    v58 = sub_22F22F2CC(a2);
    v59 = a2 - 8 * *(unsigned int *)(a2 + 8);
    v60 = v58 == 0;
    v61 = 56;
    v62 = 72;
LABEL_104:
    if (!v60)
      v61 = v62;
    v72 = *(_QWORD *)(v59 + v61);
    if (v72)
    {
      if (*(_BYTE *)v72 == 1)
      {
        v73 = *(_QWORD *)(v72 + 128);
        if (*(_BYTE *)(v73 + 16) == 3)
        {
          v74 = *a1;
          v153[0] = v73;
          sub_22F234080(v74, v153);
        }
      }
    }
    return;
  }
  if (llvm::air::AIArgument::classof())
    goto LABEL_55;
  if (llvm::air::AIArgument::classof()
    || (llvm::air::AIArgument::classof() & 1) != 0
    || llvm::air::AIArgument::classof())
  {
    goto LABEL_93;
  }
  if (llvm::air::AIArgument::classof())
  {
    v88 = sub_22F4478F4(a2);
    if ((uint64_t *)v88 != v89)
    {
      v90 = (uint64_t *)v88;
      v91 = v89;
      do
      {
        v92 = sub_22F447998(*v90);
        if (v92)
        {
          v93 = *((_QWORD *)v92 - *((unsigned int *)v92 + 2));
          if (v93)
          {
            v94 = *(_QWORD *)(v93 + 128);
            if (*(_BYTE *)(v94 + 16) == 3)
            {
              v95 = *a1;
              v153[0] = v94;
              sub_22F234080(v95, v153);
            }
          }
        }
        ++v90;
      }
      while (v90 != v91);
    }
    return;
  }
  if (llvm::air::AIArgument::classof())
  {
LABEL_93:
    v63 = sub_22F22F2CC(a2);
    v59 = a2 - 8 * *(unsigned int *)(a2 + 8);
    v60 = v63 == 0;
    v61 = 24;
    v62 = 40;
    goto LABEL_104;
  }
  if (!llvm::air::AIArgument::classof())
  {
    if (llvm::air::AIArgument::classof())
    {
      v118 = sub_22F22F2CC(a2);
      v119 = sub_22F447BA8(a2);
      v120 = 2;
      if (!v119)
        v120 = 0;
      v121 = 6;
      if (v118)
        v121 = 8;
      v122 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v120 + v121));
      if (!*(_BYTE *)v122)
      {
        v123 = (const void *)llvm::MDString::getString(v122);
        if (v124 == 43 && !memcmp(v123, "air.alias_implicit_imageblock_render_target", 0x2BuLL))
        {
          v125 = sub_22F22F2CC(a2);
          v126 = sub_22F447BA8(a2);
          v127 = 2;
          if (!v126)
            v127 = 0;
          v128 = 7;
          if (v125)
            v128 = 9;
          v129 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v127 + v128));
          if (v129)
          {
            if (*(_BYTE *)v129 == 1)
            {
              v130 = *(_QWORD *)(v129 + 128);
              if (*(_BYTE *)(v130 + 16) == 3)
              {
                v131 = *a1;
                v153[0] = v130;
                sub_22F234080(v131, v153);
              }
            }
          }
        }
      }
      v132 = sub_22F22F2CC(a2);
      v133 = 40;
      if (v132)
        v133 = 56;
      v134 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v133);
      if (v134)
        sub_22F235D64(a1, v134);
      if (sub_22F447BA8(a2))
      {
        v135 = sub_22F22F2CC(a2);
        v136 = 56;
        if (v135)
          v136 = 72;
        v35 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v136);
        if (v35)
          goto LABEL_53;
      }
    }
    else if (llvm::air::AIArgument::classof())
    {
      v81 = sub_22F22F2CC(a2);
      v82 = a2 - 8 * *(unsigned int *)(a2 + 8);
      v83 = 16;
      if (v81)
        v83 = 32;
      v84 = *(_QWORD *)(v82 + v83);
      if (v84)
      {
        v152 = *(_QWORD *)(v82 + v83);
        sub_22F235AFC((uint64_t)v153, v4, &v152);
        if (v154)
        {
          v85 = *(unsigned int *)(v84 + 8);
          v86 = *(_QWORD *)(v84 - 8 * v85 + 8);
          if (v86)
            v87 = (uint64_t *)(v86 - 8 * *(unsigned int *)(v86 + 8));
          else
            v87 = 0;
          if (v87 != (uint64_t *)v86)
          {
            do
            {
              v96 = *v87++;
              sub_22F234A88(a1, v96);
            }
            while (v87 != (uint64_t *)v86);
            v85 = *(unsigned int *)(v84 + 8);
          }
          v97 = *(_QWORD *)(v84 - 8 * v85 + 16);
          if (v97)
            v98 = (uint64_t *)(v97 - 8 * *(unsigned int *)(v97 + 8));
          else
            v98 = 0;
          while (v98 != (uint64_t *)v97)
          {
            v99 = *v98++;
            sub_22F234A88(a1, v99);
          }
        }
      }
    }
    return;
  }
  v100 = sub_22F22F2CC(a2);
  if (sub_22F447AC8(a2))
    v101 = 3;
  else
    v101 = 0;
  v102 = sub_22F447B38(a2);
  v103 = 4;
  if (v100)
    v103 = 6;
  v104 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v101 + v103 + v102));
  if (!*(_BYTE *)v104)
  {
    v105 = (const void *)llvm::MDString::getString(v104);
    if (v106 == 43 && !memcmp(v105, "air.alias_implicit_imageblock_render_target", 0x2BuLL))
    {
      v107 = sub_22F22F2CC(a2);
      if (sub_22F447AC8(a2))
        v108 = 3;
      else
        v108 = 0;
      v109 = sub_22F447B38(a2);
      v110 = 5;
      if (v107)
        v110 = 7;
      v111 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v108 + v110 + v109));
      if (v111)
      {
        if (*(_BYTE *)v111 == 1)
        {
          v112 = *(_QWORD *)(v111 + 128);
          if (*(_BYTE *)(v112 + 16) == 3)
          {
            v113 = *a1;
            v153[0] = v112;
            sub_22F234080(v113, v153);
          }
        }
      }
    }
  }
  v114 = sub_22F22F2CC(a2);
  v115 = sub_22F447AC8(a2);
  v116 = 2;
  if (!v115)
    v116 = 0;
  v117 = 4;
  if (v114)
    v117 = 6;
  v34 = v116 + v117;
LABEL_52:
  v35 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v34);
  if (v35)
LABEL_53:
    sub_22F235D64(a1, v35);
}

uint64_t sub_22F235AFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_22E7927BC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v7 = v12;
  v8 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_7;
  }
  v9 = *(_DWORD *)(a2 + 8);
  if (4 * v9 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_10;
  }
  if (v8 + ~v9 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_10:
    sub_22F235C00(a2, v8);
    v12 = 0;
    result = sub_22E7927BC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v8 = *(_DWORD *)(a2 + 16);
  v10 = 1;
LABEL_7:
  v11 = *(_QWORD *)a2 + 8 * v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F235C00(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F235CC0(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F235CC0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E7927BC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void sub_22F235D64(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t *v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v51 = a2;
  sub_22F235AFC((uint64_t)&v15, (uint64_t)(a1 + 1), (uint64_t *)&v51);
  if ((_BYTE)v16)
  {
    *(_QWORD *)&v51 = a2 - 8 * *(unsigned int *)(a2 + 8);
    *((_QWORD *)&v51 + 1) = a2;
    v52 = 0uLL;
    v53 = 0;
    v56 = 0;
    v54 = &v56;
    v55 = xmmword_22F44E360;
    v57 = 0;
    v58 = &v60;
    v59 = xmmword_22F44E360;
    LODWORD(v61) = 0;
    llvm::air::AIStructTypeInfoFieldIterator::initialize((llvm::air::AIStructTypeInfoFieldIterator *)&v51);
    *(_QWORD *)&v39 = a2;
    *((_QWORD *)&v39 + 1) = a2;
    v40 = 0uLL;
    v41 = 0;
    v44 = 0;
    v42 = &v44;
    v43 = xmmword_22F44E360;
    v45 = 0;
    v46 = &v48;
    v47 = xmmword_22F44E360;
    LODWORD(v49) = 0;
    llvm::air::AIStructTypeInfoFieldIterator::initialize((llvm::air::AIStructTypeInfoFieldIterator *)&v39);
    v15 = v51;
    v16 = v52;
    v17 = v53;
    v18 = &v20;
    v19 = xmmword_22F44E360;
    if ((_QWORD)v55)
      sub_22E3B2DB8((uint64_t)&v18, (uint64_t)&v54);
    v21 = v57;
    v22 = &v24;
    v23 = xmmword_22F44E360;
    if ((_QWORD)v59)
      sub_22E3B2DB8((uint64_t)&v22, (uint64_t)&v58);
    v25 = v61;
    v26 = v62;
    v27 = v39;
    v28 = v40;
    v29 = v41;
    v30 = &v32;
    v31 = xmmword_22F44E360;
    if ((_QWORD)v43)
      sub_22E3B2DB8((uint64_t)&v30, (uint64_t)&v42);
    v33 = v45;
    v34 = &v36;
    v35 = xmmword_22F44E360;
    if ((_QWORD)v47)
      sub_22E3B2DB8((uint64_t)&v34, (uint64_t)&v46);
    v37 = v49;
    v38 = v50;
    if (v46 != &v48)
      free(v46);
    if (v42 != &v44)
      free(v42);
    if (v58 != &v60)
      free(v58);
    if (v54 != &v56)
      free(v54);
    v51 = v15;
    v52 = v16;
    v53 = v17;
    v54 = &v56;
    v55 = xmmword_22F44E360;
    if ((_QWORD)v19)
      sub_22E3B3B4C((uint64_t)&v54, (uint64_t)&v18);
    v57 = v21;
    v58 = &v60;
    v59 = xmmword_22F44E360;
    if ((_QWORD)v23)
      sub_22E3B3B4C((uint64_t)&v58, (uint64_t)&v22);
    v61 = v25;
    v62 = v26;
    v39 = v27;
    v40 = v28;
    v41 = v29;
    v42 = &v44;
    v43 = xmmword_22F44E360;
    if ((_QWORD)v31)
      sub_22E3B3B4C((uint64_t)&v42, (uint64_t)&v30);
    v45 = v33;
    v46 = &v48;
    v47 = xmmword_22F44E360;
    if ((_QWORD)v35)
      sub_22E3B3B4C((uint64_t)&v46, (uint64_t)&v34);
    v49 = v37;
    v50 = v38;
    while (v51 != v39)
    {
      if (((_DWORD)v61 == 4 || (_DWORD)v61 == 3 || (_DWORD)v61 == 2) && DWORD2(v61) == 2 && v62 != 0)
      {
        v5 = *a1;
        v14 = v62;
        sub_22F234080(v5, &v14);
      }
      v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      if ((v52 & 4) != 0 || !v6)
      {
        if (v6)
          v7 = (v52 & 4) == 0;
        else
          v7 = 1;
        if (!v7)
          sub_22F235D64(a1, v6);
      }
      else
      {
        sub_22F236370((uint64_t)a1, v6);
      }
      v8 = v61;
      if ((_DWORD)v61 == 1)
      {
        sub_22F234EFC(a1, *((uint64_t *)&v61 + 1));
        v8 = v61;
      }
      v9 = 5;
      if ((unint64_t)v52 > 7)
        v9 = 7;
      v10 = vceqq_s32(vdupq_n_s32(v8), (int32x4_t)xmmword_22F4946E0);
      v11.i64[0] = v10.u32[0];
      v11.i64[1] = v10.u32[1];
      v12 = v11;
      v11.i64[0] = v10.u32[2];
      v11.i64[1] = v10.u32[3];
      v13 = (int8x16_t)vdupq_n_s64(2uLL);
      *(_QWORD *)&v51 = v51
                      + 8 * (vaddvq_s64(vaddq_s64((int64x2_t)vandq_s8(v12, v13), (int64x2_t)vandq_s8(v11, v13))) + v9);
      llvm::air::AIStructTypeInfoFieldIterator::initialize((llvm::air::AIStructTypeInfoFieldIterator *)&v51);
    }
    if (v46 != &v48)
      free(v46);
    if (v42 != &v44)
      free(v42);
    if (v58 != &v60)
      free(v58);
    if (v54 != &v56)
      free(v54);
    if (v34 != &v36)
      free(v34);
    if (v30 != &v32)
      free(v30);
    if (v22 != &v24)
      free(v22);
    if (v18 != &v20)
      free(v18);
  }
}

llvm::MDString *sub_22F2362F4(uint64_t a1)
{
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v3;

  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    return (llvm::MDString *)(v3 == 21
                           && *String == 0x636E75662E726961
                           && String[1] == 0x6E6F635F6E6F6974
                           && *(_QWORD *)((char *)String + 13) == 0x746E6174736E6F63);
  }
  return result;
}

uint64_t sub_22F236370(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v12 = a2;
  result = sub_22F235AFC((uint64_t)v13, a1 + 8, &v12);
  if (v13[16])
  {
    if (sub_22F4476D0(a2))
    {
      if (sub_22F4476D0(a2))
      {
        v5 = sub_22F236510(a2);
        v6 = 8;
        if (v5)
          v6 = 24;
        v7 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v6);
      }
      else
      {
        v7 = 0;
      }
      sub_22F236370(a1, v7);
    }
    else if (sub_22F23647C(a2))
    {
      if (sub_22F23647C(a2))
      {
        v8 = sub_22F236510(a2);
        v9 = 8;
        if (v8)
          v9 = 24;
        v10 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + v9);
      }
      else
      {
        v10 = 0;
      }
      sub_22F235D64(a1, v10);
    }
    result = sub_22F447788(a2);
    if ((_DWORD)result)
    {
      v11 = sub_22F447874(a2);
      return sub_22F234EFC(a1, v11);
    }
  }
  return result;
}

BOOL sub_22F23647C(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  llvm::MDString *v4;
  uint64_t String;
  uint64_t v6;

  v2 = sub_22F236510(a1);
  v3 = 16;
  if (!v2)
    v3 = 0;
  v4 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (*(_BYTE *)v4)
    return 0;
  String = llvm::MDString::getString(v4);
  if (v6 != 20)
    return 0;
  return *(_QWORD *)String == 0x757274732E726961
      && *(_QWORD *)(String + 8) == 0x5F657079745F7463
      && *(_DWORD *)(String + 16) == 1868983913;
}

BOOL sub_22F236510(uint64_t a1)
{
  llvm::MDString *v1;
  uint64_t String;
  uint64_t v3;

  v1 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (*(_BYTE *)v1)
    return 0;
  String = llvm::MDString::getString(v1);
  if (v3 != 17)
    return 0;
  return *(_QWORD *)String == 0x726464612E726961
      && *(_QWORD *)(String + 8) == 0x636170735F737365
      && *(_BYTE *)(String + 16) == 101;
}

uint64_t sub_22F236584(unsigned __int8 a1)
{
  return (a1 < 0x23u) & (0x7FFFFFFF0uLL >> a1);
}

llvm::MDString *sub_22F2365A0(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  llvm::MDString *result;
  _QWORD *String;
  uint64_t v6;

  v2 = sub_22F22F2CC(a1);
  v3 = 16;
  if (v2)
    v3 = 32;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + v3);
  if (result)
  {
    String = (_QWORD *)llvm::MDString::getString(result);
    return (llvm::MDString *)(v6 == 15
                           && *String == 0x666675622E726961
                           && *(_QWORD *)((char *)String + 7) == 0x657A69735F726566);
  }
  return result;
}

llvm::MDString *sub_22F236628(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MDString *result;
  uint64_t String;
  uint64_t v8;

  v2 = sub_22F22F2CC(a1);
  v3 = sub_22F2365A0(a1);
  v4 = 2;
  if (!v3)
    v4 = 0;
  v5 = 6;
  if (v2)
    v5 = 8;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v4 + v5));
  if (result)
  {
    String = llvm::MDString::getString(result);
    return (llvm::MDString *)(v8 == 17
                           && *(_QWORD *)String == 0x726464612E726961
                           && *(_QWORD *)(String + 8) == 0x636170735F737365
                           && *(_BYTE *)(String + 16) == 101);
  }
  return result;
}

llvm::MDString *sub_22F2366D4(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MDString *result;
  uint64_t String;
  uint64_t v8;

  v2 = sub_22F22F2CC(a1);
  if (sub_22F2365A0(a1))
    v3 = 2;
  else
    v3 = 0;
  if (sub_22F236628(a1))
    v4 = 2;
  else
    v4 = 0;
  v5 = 6;
  if (v2)
    v5 = 8;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v3 + v5 + v4));
  if (result)
  {
    String = llvm::MDString::getString(result);
    return (llvm::MDString *)(v8 == 20
                           && *(_QWORD *)String == 0x696C6E692E726961
                           && *(_QWORD *)(String + 8) == 0x5F657079745F656ELL
                           && *(_DWORD *)(String + 16) == 1868983913);
  }
  return result;
}

llvm::MDString *sub_22F2367A0(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MDString *result;
  uint64_t String;
  uint64_t v8;

  v2 = sub_22F22F2CC(a1);
  if (sub_22F2365A0(a1))
    v3 = 2;
  else
    v3 = 0;
  if (sub_22F236628(a1))
    v4 = 2;
  else
    v4 = 0;
  v5 = 6;
  if (v2)
    v5 = 8;
  result = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v3 + v5 + v4));
  if (result)
  {
    String = llvm::MDString::getString(result);
    return (llvm::MDString *)(v8 == 20
                           && *(_QWORD *)String == 0x757274732E726961
                           && *(_QWORD *)(String + 8) == 0x5F657079745F7463
                           && *(_DWORD *)(String + 16) == 1868983913);
  }
  return result;
}

BOOL sub_22F23686C(uint64_t a1, llvm::MDString *this)
{
  const void *String;
  size_t v4;
  uint64_t v5;

  if (!this)
    return 0;
  if (*(_BYTE *)this)
    return 0;
  String = (const void *)llvm::MDString::getString(this);
  v4 = *(_QWORD *)(a1 + 8);
  if (v5 != v4)
    return 0;
  if (v4)
    return memcmp(String, *(const void **)a1, v4) == 0;
  return 1;
}

void sub_22F2368D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  char v32;

  v2 = a2;
  v4 = (uint64_t)(a1 + 1);
  v30 = a2;
  sub_22F235AFC((uint64_t)v31, (uint64_t)(a1 + 1), &v30);
  if (!v32)
    return;
  while (1)
  {
    v5 = llvm::air::AIRecordType::classof();
    if (v2)
    {
      if (v5)
        break;
    }
    v6 = llvm::air::AIType::classof();
    if (v2 && v6)
    {
      sub_22F2368D4(a1, *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 32));
LABEL_12:
      v8 = 5;
      goto LABEL_13;
    }
    v7 = llvm::air::AIType::classof();
    if (!v2 || !v7)
    {
      v9 = llvm::air::AIType::classof();
      if (!v2 || !v9)
        return;
      goto LABEL_12;
    }
    v8 = 4;
LABEL_13:
    v2 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 8 * v8);
    v30 = v2;
    sub_22F235AFC((uint64_t)v31, v4, &v30);
    if (!v32)
      return;
  }
  v10 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 40);
  if (v10)
    v11 = (uint64_t *)(v10 - 8 * *(unsigned int *)(v10 + 8));
  else
    v11 = 0;
  if (v11 != (uint64_t *)v10)
  {
    while (1)
    {
      v12 = *v11;
      sub_22F2368D4(a1, *(_QWORD *)(*v11 - 8 * *(unsigned int *)(*v11 + 8) + 24));
      v13 = llvm::air::AIRecordMember::classof();
      if (v12 && v13 != 0)
        break;
LABEL_48:
      if (++v11 == (uint64_t *)v10)
        return;
    }
    v15 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 40);
    if (v15)
      v16 = (uint64_t *)(v15 - 8 * *(unsigned int *)(v15 + 8));
    else
      v16 = 0;
    while (2)
    {
      if (v16 == (uint64_t *)v15)
        goto LABEL_48;
      v17 = *v16;
      v30 = *v16;
      sub_22F235AFC((uint64_t)v31, v4, &v30);
      if (v32)
      {
        v18 = llvm::air::AIAttr::classof();
        if (v17)
          v19 = v18 == 0;
        else
          v19 = 1;
        if (v19)
        {
          v20 = llvm::air::AIAttr::classof();
          if (v17 && v20)
          {
            v21 = *(unsigned int *)(v17 + 8);
            v22 = -v21;
            v23 = *(_QWORD *)(v17 - 8 * v21 + 8);
            if (v23)
            {
              if (*(_BYTE *)v23 == 1)
              {
                v24 = *(_QWORD *)(v23 + 128);
                if (*(_BYTE *)(v24 + 16) == 3)
                {
                  v25 = *a1;
                  v31[0] = v24;
                  sub_22F234080(v25, v31);
                  v22 = -(uint64_t)*(unsigned int *)(v17 + 8);
                }
              }
            }
            v26 = *(_QWORD *)(v17 + 8 * v22 + 16);
            if (v26)
            {
LABEL_43:
              if (*(_BYTE *)v26 == 1)
              {
                v28 = *(_QWORD *)(v26 + 128);
                if (*(_BYTE *)(v28 + 16) == 3)
                {
                  v29 = *a1;
                  v31[0] = v28;
                  sub_22F234080(v29, v31);
                }
              }
            }
          }
          else
          {
            v27 = llvm::air::AIAttr::classof();
            if (v17 && v27)
              goto LABEL_42;
          }
        }
        else
        {
LABEL_42:
          v26 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8);
          if (v26)
            goto LABEL_43;
        }
      }
      ++v16;
      continue;
    }
  }
}

uint64_t sub_22F236BB0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 72), (void *)(8 * *(unsigned int *)(a1 + 88)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 48), (void *)(8 * *(unsigned int *)(a1 + 64)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(8 * *(unsigned int *)(a1 + 40)));
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F236C30(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v2 = *(void **)(a1 + 1200);
  if (v2 != (void *)(a1 + 1216))
    free(v2);
  v3 = *(void **)(a1 + 1056);
  if (v3 != (void *)(a1 + 1072))
    free(v3);
  v4 = *(void **)(a1 + 912);
  if (v4 != (void *)(a1 + 928))
    free(v4);
  llvm::deallocate_buffer(*(llvm **)(a1 + 888), (void *)(16 * *(unsigned int *)(a1 + 904)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 864), (void *)(16 * *(unsigned int *)(a1 + 880)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 840), (void *)(16 * *(unsigned int *)(a1 + 856)));
  v5 = *(void **)(a1 + 792);
  if (v5 != (void *)(a1 + 808))
    free(v5);
  llvm::deallocate_buffer(*(llvm **)(a1 + 768), (void *)(16 * *(unsigned int *)(a1 + 784)));
  sub_22F447C48(*(_QWORD **)(a1 + 752));
  sub_22F447C48(*(_QWORD **)(a1 + 728));
  sub_22F236D98(a1 + 680);
  sub_22F236DDC(a1 + 656);
  llvm::deallocate_buffer(*(llvm **)(a1 + 656), (void *)((unint64_t)*(unsigned int *)(a1 + 672) << 6));
  v6 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;
  if (v6)
  {
    v9 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v9, 0x10B2C407FF26C1CLL);
  }
  sub_22F236E6C(a1 + 96);
  sub_22F236FB4(a1 + 64);
  llvm::deallocate_buffer(*(llvm **)(a1 + 40), (void *)(24 * *(unsigned int *)(a1 + 56)));
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_22F236D98(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result;
    sub_22E5E0E84(result);
    result = llvm::deallocate_buffer(*(llvm **)v1, (void *)(16 * *(unsigned int *)(v1 + 16)));
    *(_BYTE *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t sub_22F236DDC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = v1 << 6;
    v3 = (llvm::ValueHandleBase *)(*(_QWORD *)result + 40);
    do
    {
      v4 = *((_QWORD *)v3 - 2);
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = *((_QWORD *)v3 + 2);
        if (v5)
        {
          if (v5 != -8192 && v5 != -4096)
          {
            result = llvm::ValueHandleBase::RemoveFromUseList(v3);
            v4 = *((_QWORD *)v3 - 2);
          }
        }
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v3 - 32));
      v3 = (llvm::ValueHandleBase *)((char *)v3 + 64);
      v2 -= 64;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22F236E6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &unk_24FCB0690;
  sub_22F236F54(a1 + 480);
  v2 = *(void **)(a1 + 328);
  if (v2 != *(void **)(a1 + 320))
    free(v2);
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 32);
  if (v4 != (void *)(a1 + 48))
    free(v4);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(16 * *(unsigned int *)(a1 + 24)));
  return a1;
}

llvm::StructType *sub_22F236EF8(uint64_t a1, llvm::StructType *a2)
{
  llvm::StructType *result;
  llvm::StructType *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  _BYTE v8[64];

  v4 = v8;
  v5 = v8;
  v6 = 8;
  v7 = 0;
  result = sub_22F2417A4(a1, a2, (uint64_t)&v4);
  if (v5 != v4)
  {
    v3 = result;
    free(v5);
    return v3;
  }
  return result;
}

uint64_t sub_22F236F54(uint64_t a1)
{
  void *v2;

  if (*(_DWORD *)(a1 + 40))
  {
    sub_22F448D58();
    sub_22F448D60();
    v2 = (void *)(8 * *(unsigned int *)(a1 + 40));
  }
  else
  {
    v2 = 0;
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), v2);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F236FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = (llvm *)((char *)v5 + 8) == 0;
        else
          v6 = 1;
        if (!v6)
        {
          v7 = *(_QWORD *)v5;
          v8 = (void *)*((_QWORD *)v5 + 2);
          if (v8)
          {
            *((_QWORD *)v5 + 3) = v8;
            operator delete(v8);
          }
          llvm::deallocate_buffer(v5, (void *)(v7 + 41));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F237054(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2370EC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F447DC4(a1, (uint64_t)v4, (uint64_t)v4 + 24 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F2371B8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E7B5AB8(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *sub_22F237278(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F4480AC(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F237338(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_QWORD *sub_22F2373CC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F23748C(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F23748C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F237338(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_22F237530(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F448444(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F2375F0(uint64_t result, llvm::air::AIFunctionConstant **a2, uint64_t a3, char a4)
{
  llvm::air::AIFunctionConstant **v7;
  llvm::air::AIFunctionConstant **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  llvm::air::AIFunctionConstant **v12;
  llvm::air::AIFunctionConstant *v13;
  llvm::air::AIFunctionConstant *v14;
  unsigned int v15;
  uint64_t v16;
  llvm::air::AIFunctionConstant *v17;
  unsigned int v18;
  llvm::air::AIFunctionConstant **v19;
  llvm::air::AIFunctionConstant **v20;
  llvm::air::AIFunctionConstant *v21;
  unsigned int v22;
  llvm::air::AIFunctionConstant *v23;
  unsigned int v24;
  llvm::air::AIFunctionConstant **v25;
  llvm::air::AIFunctionConstant *v26;
  llvm::air::AIFunctionConstant *v27;
  unsigned int v28;
  llvm::air::AIFunctionConstant *v29;
  unsigned int v30;
  llvm::air::AIFunctionConstant **v31;
  BOOL v32;
  llvm::air::AIFunctionConstant *v33;
  llvm::air::AIFunctionConstant *v34;
  unsigned int v35;
  llvm::air::AIFunctionConstant *v36;
  unsigned int v37;
  llvm::air::AIFunctionConstant **v38;
  llvm::air::AIFunctionConstant *v39;
  unsigned int v40;
  llvm::air::AIFunctionConstant **v41;
  llvm::air::AIFunctionConstant *v42;
  unsigned int v43;
  llvm::air::AIFunctionConstant *v44;
  llvm::air::AIFunctionConstant *v45;
  unsigned int v46;
  llvm::air::AIFunctionConstant *v47;
  unsigned int v48;
  llvm::air::AIFunctionConstant **v49;
  llvm::air::AIFunctionConstant *v50;
  unsigned int Index;
  llvm::air::AIFunctionConstant *v52;
  llvm::air::AIFunctionConstant **v53;
  BOOL v55;
  uint64_t v56;
  llvm::air::AIFunctionConstant **v57;
  llvm::air::AIFunctionConstant *v58;
  llvm::air::AIFunctionConstant *v59;
  unsigned int v60;
  llvm::air::AIFunctionConstant *v61;
  uint64_t v62;
  llvm::air::AIFunctionConstant *v63;
  unsigned int v64;
  llvm::air::AIFunctionConstant **v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  llvm::air::AIFunctionConstant **v70;
  uint64_t v71;
  llvm::air::AIFunctionConstant *v72;
  unsigned int v73;
  llvm::air::AIFunctionConstant **v74;
  llvm::air::AIFunctionConstant *v75;
  unsigned int v76;
  llvm::air::AIFunctionConstant *v77;
  llvm::air::AIFunctionConstant **v78;
  uint64_t v79;
  uint64_t v80;
  llvm::air::AIFunctionConstant *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  llvm::air::AIFunctionConstant **v85;
  uint64_t v86;
  llvm::air::AIFunctionConstant **v87;
  llvm::air::AIFunctionConstant **v88;
  uint64_t v89;
  uint64_t v90;
  llvm::air::AIFunctionConstant *v91;
  unsigned int v92;
  llvm::air::AIFunctionConstant **v93;
  llvm::air::AIFunctionConstant **v94;
  uint64_t v95;
  unint64_t v96;
  llvm::air::AIFunctionConstant **v97;
  llvm::air::AIFunctionConstant *v98;
  unsigned int v99;
  llvm::air::AIFunctionConstant *v100;
  llvm::air::AIFunctionConstant **v101;
  unsigned int v102;
  BOOL v103;
  llvm::air::AIFunctionConstant *v104;
  llvm::air::AIFunctionConstant *v105;
  unsigned int v106;
  llvm::air::AIFunctionConstant *v107;
  llvm::air::AIFunctionConstant **v108;
  llvm::air::AIFunctionConstant **v109;
  llvm::air::AIFunctionConstant *v110;
  llvm::air::AIFunctionConstant *v111;
  unsigned int v112;
  int64_t v113;
  llvm::air::AIFunctionConstant *v114;
  llvm::air::AIFunctionConstant *v115;
  llvm::air::AIFunctionConstant **v116;

  v7 = (llvm::air::AIFunctionConstant **)result;
  while (2)
  {
    v8 = v7;
    v9 = (char *)a2 - (char *)v7;
    v10 = a2 - v7;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v50 = *v8;
        Index = llvm::air::AIFunctionConstant::getIndex(*(a2 - 1));
        result = llvm::air::AIFunctionConstant::getIndex(v50);
        if (Index < result)
        {
          v52 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v52;
        }
        return result;
      case 3:
        return sub_22F237F20(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_22F2381F4(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_22F237E18(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          v116 = v8;
          if (!a3)
          {
            if (v8 != a2)
            {
              v66 = (unint64_t)(v10 - 2) >> 1;
              v67 = v66;
              do
              {
                v68 = v67;
                if (v66 >= v67)
                {
                  v113 = v67;
                  v69 = (2 * v67) | 1;
                  v70 = &v8[v69];
                  v71 = 2 * v67 + 2;
                  if (v71 < v10)
                  {
                    v72 = v70[1];
                    v73 = llvm::air::AIFunctionConstant::getIndex(*v70);
                    if (v73 < llvm::air::AIFunctionConstant::getIndex(v72))
                    {
                      ++v70;
                      v69 = v71;
                    }
                  }
                  v68 = v113;
                  v74 = &v8[v113];
                  v75 = *v74;
                  v76 = llvm::air::AIFunctionConstant::getIndex(*v70);
                  result = llvm::air::AIFunctionConstant::getIndex(v75);
                  if (v76 >= result)
                  {
                    v77 = *v74;
                    v114 = *v74;
                    do
                    {
                      v78 = v70;
                      *v74 = *v70;
                      if (v66 < v69)
                        break;
                      v79 = (2 * v69) | 1;
                      v70 = &v116[v79];
                      v80 = 2 * v69 + 2;
                      if (v80 < v10)
                      {
                        v81 = v70[1];
                        v82 = llvm::air::AIFunctionConstant::getIndex(*v70);
                        v83 = llvm::air::AIFunctionConstant::getIndex(v81);
                        if (v82 < v83)
                          ++v70;
                        v77 = v114;
                        if (v82 < v83)
                          v79 = v80;
                      }
                      v84 = llvm::air::AIFunctionConstant::getIndex(*v70);
                      result = llvm::air::AIFunctionConstant::getIndex(v77);
                      v74 = v78;
                      v69 = v79;
                    }
                    while (v84 >= result);
                    *v78 = v77;
                    v8 = v116;
                    v68 = v113;
                  }
                }
                v67 = v68 - 1;
              }
              while (v68);
              do
              {
                v85 = a2;
                v86 = 0;
                v115 = *v8;
                v87 = v8;
                do
                {
                  v88 = &v87[v86 + 1];
                  v89 = (2 * v86) | 1;
                  v90 = 2 * v86 + 2;
                  if (v90 < v10)
                  {
                    v91 = v87[v86 + 2];
                    v92 = llvm::air::AIFunctionConstant::getIndex(*v88);
                    result = llvm::air::AIFunctionConstant::getIndex(v91);
                    if (v92 < result)
                    {
                      ++v88;
                      v89 = v90;
                    }
                  }
                  *v87 = *v88;
                  v87 = v88;
                  v86 = v89;
                }
                while (v89 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
                v93 = v85 - 1;
                if (v88 == v93)
                {
                  v94 = v93;
                  v8 = v116;
                  *v88 = v115;
                }
                else
                {
                  *v88 = *v93;
                  v94 = v93;
                  v8 = v116;
                  *v93 = v115;
                  v95 = (char *)v88 - (char *)v116 + 8;
                  if (v95 >= 9)
                  {
                    v96 = (((unint64_t)v95 >> 3) - 2) >> 1;
                    v97 = &v116[v96];
                    v98 = *v88;
                    v99 = llvm::air::AIFunctionConstant::getIndex(*v97);
                    result = llvm::air::AIFunctionConstant::getIndex(v98);
                    if (v99 < result)
                    {
                      v100 = *v88;
                      do
                      {
                        v101 = v97;
                        *v88 = *v97;
                        if (!v96)
                          break;
                        v96 = (v96 - 1) >> 1;
                        v97 = &v116[v96];
                        v102 = llvm::air::AIFunctionConstant::getIndex(*v97);
                        result = llvm::air::AIFunctionConstant::getIndex(v100);
                        v88 = v101;
                      }
                      while (v102 < result);
                      *v101 = v100;
                    }
                  }
                }
                v103 = v10-- <= 2;
                a2 = v94;
              }
              while (!v103);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          if ((unint64_t)v9 < 0x401)
          {
            sub_22F237F20(v12, v8, a2 - 1);
          }
          else
          {
            sub_22F237F20(v8, v12, a2 - 1);
            sub_22F237F20(v8 + 1, v12 - 1, a2 - 2);
            sub_22F237F20(v8 + 2, &v8[v11 + 1], a2 - 3);
            sub_22F237F20(v12 - 1, v12, &v8[v11 + 1]);
            v13 = *v8;
            *v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) != 0
            || (v14 = *v8,
                v15 = llvm::air::AIFunctionConstant::getIndex(*(v8 - 1)),
                v15 < llvm::air::AIFunctionConstant::getIndex(v14)))
          {
            v16 = 0;
            v17 = *v8;
            do
              v18 = llvm::air::AIFunctionConstant::getIndex(v8[++v16]);
            while (v18 < llvm::air::AIFunctionConstant::getIndex(v17));
            v19 = &v8[v16];
            v20 = a2;
            if (v16 == 1)
            {
              v20 = a2;
              do
              {
                if (v19 >= v20)
                  break;
                v23 = *--v20;
                v24 = llvm::air::AIFunctionConstant::getIndex(v23);
              }
              while (v24 >= llvm::air::AIFunctionConstant::getIndex(v17));
            }
            else
            {
              do
              {
                v21 = *--v20;
                v22 = llvm::air::AIFunctionConstant::getIndex(v21);
              }
              while (v22 >= llvm::air::AIFunctionConstant::getIndex(v17));
            }
            v7 = &v8[v16];
            if (v19 < v20)
            {
              v25 = v20;
              do
              {
                v26 = *v7;
                *v7 = *v25;
                *v25 = v26;
                do
                {
                  v27 = v7[1];
                  ++v7;
                  v28 = llvm::air::AIFunctionConstant::getIndex(v27);
                }
                while (v28 < llvm::air::AIFunctionConstant::getIndex(v17));
                do
                {
                  v29 = *--v25;
                  v30 = llvm::air::AIFunctionConstant::getIndex(v29);
                }
                while (v30 >= llvm::air::AIFunctionConstant::getIndex(v17));
              }
              while (v7 < v25);
            }
            v31 = v7 - 1;
            if (v7 - 1 != v116)
              *v116 = *v31;
            *v31 = v17;
            if (v19 < v20)
              goto LABEL_29;
            v32 = sub_22F238038(v116, v7 - 1);
            result = sub_22F238038(v7, a2);
            if (!(_DWORD)result)
            {
              if (v32)
                continue;
LABEL_29:
              result = sub_22F2375F0(v116, v7 - 1, a3, a4 & 1);
              a4 = 0;
              continue;
            }
            a2 = v7 - 1;
            v7 = v116;
            if (v32)
              return result;
          }
          else
          {
            v33 = *v8;
            v34 = *(a2 - 1);
            v35 = llvm::air::AIFunctionConstant::getIndex(*v8);
            result = llvm::air::AIFunctionConstant::getIndex(v34);
            if (v35 >= result)
            {
              v38 = v8 + 1;
              do
              {
                v7 = v38;
                if (v38 >= a2)
                  break;
                ++v38;
                v39 = *v7;
                v40 = llvm::air::AIFunctionConstant::getIndex(v33);
                result = llvm::air::AIFunctionConstant::getIndex(v39);
              }
              while (v40 >= result);
            }
            else
            {
              v7 = v8;
              do
              {
                v36 = v7[1];
                ++v7;
                v37 = llvm::air::AIFunctionConstant::getIndex(v33);
                result = llvm::air::AIFunctionConstant::getIndex(v36);
              }
              while (v37 >= result);
            }
            v41 = a2;
            if (v7 < a2)
            {
              v41 = a2;
              do
              {
                v42 = *--v41;
                v43 = llvm::air::AIFunctionConstant::getIndex(v33);
                result = llvm::air::AIFunctionConstant::getIndex(v42);
              }
              while (v43 < result);
            }
            while (v7 < v41)
            {
              v44 = *v7;
              *v7 = *v41;
              *v41 = v44;
              do
              {
                v45 = v7[1];
                ++v7;
                v46 = llvm::air::AIFunctionConstant::getIndex(v33);
              }
              while (v46 >= llvm::air::AIFunctionConstant::getIndex(v45));
              do
              {
                v47 = *--v41;
                v48 = llvm::air::AIFunctionConstant::getIndex(v33);
                result = llvm::air::AIFunctionConstant::getIndex(v47);
              }
              while (v48 < result);
            }
            v49 = v7 - 1;
            if (v7 - 1 != v116)
              *v116 = *v49;
            a4 = 0;
            *v49 = v33;
          }
          continue;
        }
        v53 = v8 + 1;
        v55 = v8 == a2 || v53 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v55)
          {
            v56 = 0;
            v57 = v8;
            do
            {
              v59 = *v57;
              v58 = v57[1];
              v57 = v53;
              v60 = llvm::air::AIFunctionConstant::getIndex(v58);
              result = llvm::air::AIFunctionConstant::getIndex(v59);
              if (v60 < result)
              {
                v61 = *v57;
                v62 = v56;
                while (1)
                {
                  *(llvm::air::AIFunctionConstant **)((char *)v8 + v62 + 8) = *(llvm::air::AIFunctionConstant **)((char *)v8 + v62);
                  if (!v62)
                    break;
                  v63 = *(llvm::air::AIFunctionConstant **)((char *)v8 + v62 - 8);
                  v64 = llvm::air::AIFunctionConstant::getIndex(v61);
                  result = llvm::air::AIFunctionConstant::getIndex(v63);
                  v62 -= 8;
                  if (v64 >= result)
                  {
                    v65 = (llvm::air::AIFunctionConstant **)((char *)v8 + v62 + 8);
                    goto LABEL_71;
                  }
                }
                v65 = v8;
LABEL_71:
                *v65 = v61;
              }
              v53 = v57 + 1;
              v56 += 8;
            }
            while (v57 + 1 != a2);
          }
        }
        else if (!v55)
        {
          do
          {
            v105 = *v8;
            v104 = v8[1];
            v8 = v53;
            v106 = llvm::air::AIFunctionConstant::getIndex(v104);
            result = llvm::air::AIFunctionConstant::getIndex(v105);
            if (v106 < result)
            {
              v107 = *v8;
              v108 = v8;
              do
              {
                v109 = v108;
                v110 = *--v108;
                *v109 = v110;
                v111 = *(v109 - 2);
                v112 = llvm::air::AIFunctionConstant::getIndex(v107);
                result = llvm::air::AIFunctionConstant::getIndex(v111);
              }
              while (v112 < result);
              *v108 = v107;
            }
            v53 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_22F237E18(llvm::air::AIFunctionConstant **a1, llvm::air::AIFunctionConstant **a2, llvm::air::AIFunctionConstant **a3, llvm::air::AIFunctionConstant **a4, llvm::air::AIFunctionConstant **a5)
{
  llvm::air::AIFunctionConstant *v10;
  unsigned int Index;
  uint64_t result;
  llvm::air::AIFunctionConstant *v13;
  llvm::air::AIFunctionConstant *v14;
  unsigned int v15;
  llvm::air::AIFunctionConstant *v16;
  llvm::air::AIFunctionConstant *v17;
  unsigned int v18;
  llvm::air::AIFunctionConstant *v19;
  llvm::air::AIFunctionConstant *v20;
  unsigned int v21;
  llvm::air::AIFunctionConstant *v22;

  sub_22F2381F4(a1, a2, a3, a4);
  v10 = *a4;
  Index = llvm::air::AIFunctionConstant::getIndex(*a5);
  result = llvm::air::AIFunctionConstant::getIndex(v10);
  if (Index < result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = *a3;
    v15 = llvm::air::AIFunctionConstant::getIndex(*a4);
    result = llvm::air::AIFunctionConstant::getIndex(v14);
    if (v15 < result)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      v18 = llvm::air::AIFunctionConstant::getIndex(*a3);
      result = llvm::air::AIFunctionConstant::getIndex(v17);
      if (v18 < result)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = *a1;
        v21 = llvm::air::AIFunctionConstant::getIndex(*a2);
        result = llvm::air::AIFunctionConstant::getIndex(v20);
        if (v21 < result)
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F237F20(llvm::air::AIFunctionConstant **a1, llvm::air::AIFunctionConstant **a2, llvm::air::AIFunctionConstant **a3)
{
  llvm::air::AIFunctionConstant *v6;
  unsigned int Index;
  llvm::air::AIFunctionConstant *v8;
  unsigned int v9;
  uint64_t result;
  llvm::air::AIFunctionConstant *v11;
  llvm::air::AIFunctionConstant *v12;
  llvm::air::AIFunctionConstant *v13;
  unsigned int v14;
  llvm::air::AIFunctionConstant *v15;
  unsigned int v16;
  llvm::air::AIFunctionConstant *v17;

  v6 = *a1;
  Index = llvm::air::AIFunctionConstant::getIndex(*a2);
  LODWORD(v6) = llvm::air::AIFunctionConstant::getIndex(v6);
  v8 = *a2;
  v9 = llvm::air::AIFunctionConstant::getIndex(*a3);
  result = llvm::air::AIFunctionConstant::getIndex(v8);
  if (Index >= v6)
  {
    if (v9 < result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = *a1;
      v14 = llvm::air::AIFunctionConstant::getIndex(*a2);
      result = llvm::air::AIFunctionConstant::getIndex(v13);
      if (v14 < result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  else
  {
    v11 = *a1;
    if (v9 >= result)
    {
      *a1 = *a2;
      *a2 = v11;
      v16 = llvm::air::AIFunctionConstant::getIndex(*a3);
      result = llvm::air::AIFunctionConstant::getIndex(v11);
      if (v16 < result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v11;
    }
  }
  return result;
}

BOOL sub_22F238038(llvm::air::AIFunctionConstant **a1, llvm::air::AIFunctionConstant **a2)
{
  uint64_t v4;
  _BOOL8 result;
  llvm::air::AIFunctionConstant *v6;
  unsigned int Index;
  llvm::air::AIFunctionConstant *v8;
  llvm::air::AIFunctionConstant **v9;
  llvm::air::AIFunctionConstant **v10;
  uint64_t v11;
  int v12;
  llvm::air::AIFunctionConstant *v13;
  unsigned int v14;
  llvm::air::AIFunctionConstant *v15;
  uint64_t v16;
  llvm::air::AIFunctionConstant *v17;
  unsigned int v18;
  llvm::air::AIFunctionConstant **v19;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      Index = llvm::air::AIFunctionConstant::getIndex(*(a2 - 1));
      if (Index < llvm::air::AIFunctionConstant::getIndex(v6))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_22F237F20(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_22F2381F4(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_22F237E18(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      sub_22F237F20(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    v14 = llvm::air::AIFunctionConstant::getIndex(*v10);
    if (v14 < llvm::air::AIFunctionConstant::getIndex(v13))
    {
      v15 = *v10;
      v16 = v11;
      while (1)
      {
        *(llvm::air::AIFunctionConstant **)((char *)a1 + v16 + 24) = *(llvm::air::AIFunctionConstant **)((char *)a1 + v16 + 16);
        if (v16 == -16)
          break;
        v17 = *(llvm::air::AIFunctionConstant **)((char *)a1 + v16 + 8);
        v18 = llvm::air::AIFunctionConstant::getIndex(v15);
        v16 -= 8;
        if (v18 >= llvm::air::AIFunctionConstant::getIndex(v17))
        {
          v19 = (llvm::air::AIFunctionConstant **)((char *)a1 + v16 + 24);
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *v19 = v15;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_22F2381F4(llvm::air::AIFunctionConstant **a1, llvm::air::AIFunctionConstant **a2, llvm::air::AIFunctionConstant **a3, llvm::air::AIFunctionConstant **a4)
{
  llvm::air::AIFunctionConstant *v8;
  unsigned int Index;
  uint64_t result;
  llvm::air::AIFunctionConstant *v11;
  llvm::air::AIFunctionConstant *v12;
  unsigned int v13;
  llvm::air::AIFunctionConstant *v14;
  llvm::air::AIFunctionConstant *v15;
  unsigned int v16;
  llvm::air::AIFunctionConstant *v17;

  sub_22F237F20(a1, a2, a3);
  v8 = *a3;
  Index = llvm::air::AIFunctionConstant::getIndex(*a4);
  result = llvm::air::AIFunctionConstant::getIndex(v8);
  if (Index < result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = *a2;
    v13 = llvm::air::AIFunctionConstant::getIndex(*a3);
    result = llvm::air::AIFunctionConstant::getIndex(v12);
    if (v13 < result)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = *a1;
      v16 = llvm::air::AIFunctionConstant::getIndex(*a2);
      result = llvm::air::AIFunctionConstant::getIndex(v15);
      if (v16 < result)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_22F2382C0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_22F238354(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F4484F0(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

int8x16_t sub_22F238414(int8x16_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int8x16_t result;
  uint64_t v13;
  uint64_t v14;
  llvm::MDString *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  llvm::MDString *v19;
  const void *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  llvm::MDString *v27;
  const void *v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MDString *v35;
  const void *v36;
  size_t v37;
  size_t v38;
  llvm::MDString *v39;
  const void *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  int v44;
  int v45;
  unint64_t v46;
  __int8 *v47;
  int8x16_t *v48;
  llvm::MDString *v49;
  const void *v50;
  size_t v51;
  size_t v52;
  llvm::MDString *v53;
  const void *v54;
  size_t v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  __int8 *v60;
  llvm::MDString *v61;
  const void *v62;
  size_t v63;
  size_t v64;
  llvm::MDString *v65;
  const void *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  int8x16_t *v72;
  uint64_t v73;
  int8x16_t *v74;
  llvm::MDString *v75;
  const void *v76;
  size_t v77;
  size_t v78;
  llvm::MDString *v79;
  const void *v80;
  size_t v81;
  size_t v82;
  size_t v83;
  int v84;
  int v85;
  int8x16_t *v86;
  llvm::MDString *v87;
  const void *v88;
  size_t v89;
  size_t v90;
  llvm::MDString *v91;
  const void *v92;
  size_t v93;
  size_t v94;
  size_t v95;
  int v96;
  int v97;
  uint64_t *v98;
  BOOL v99;
  llvm::MDString *v100;
  const void *v101;
  size_t v102;
  size_t v103;
  size_t v104;
  int v105;
  int8x16_t *v106;
  uint64_t v107;
  llvm::MDString *v108;
  const void *v109;
  unint64_t v110;
  unint64_t v111;
  llvm::MDString *v112;
  const void *v113;
  unint64_t v114;
  unint64_t v115;
  size_t v116;
  int v117;
  int v118;
  int8x16_t *v119;
  uint64_t v120;
  llvm::MDString *v121;
  const void *v122;
  size_t v123;
  size_t v124;
  llvm::MDString *v125;
  const void *v126;
  size_t v127;
  size_t v128;
  size_t v129;
  int v130;
  int v131;
  int8x16_t *v132;
  uint64_t *v133;
  uint64_t v134;
  llvm::MDString *v135;
  const void *v136;
  size_t v137;
  size_t v138;
  llvm::MDString *v139;
  const void *v140;
  size_t v141;
  size_t v142;
  size_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int8x16_t *v148;
  uint64_t v149;
  llvm::MDString *v150;
  const void *v151;
  size_t v152;
  size_t v153;
  llvm::MDString *v154;
  const void *v155;
  size_t v156;
  size_t v157;
  size_t v158;
  int v159;
  int v160;
  int8x16_t *v161;
  uint64_t v162;
  llvm::MDString *v163;
  const void *v164;
  size_t v165;
  size_t v166;
  llvm::MDString *v167;
  const void *v168;
  size_t v169;
  size_t v170;
  size_t v171;
  int v172;
  int v173;
  uint64_t *v174;
  uint64_t v175;
  llvm::MDString *v176;
  const void *String;
  size_t v178;
  size_t v179;
  uint64_t *v180;
  uint64_t *v181;
  __int8 *v182;
  uint64_t v183;
  llvm::MDString *v184;
  const void *v185;
  size_t v186;
  size_t v187;
  int8x16_t *v188;
  BOOL v189;
  char v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  llvm::MDString *v195;
  const void *v196;
  size_t v197;
  size_t v198;
  llvm::MDString *v199;
  const void *v200;
  size_t v201;
  size_t v202;
  size_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int8x16_t *v208;
  uint64_t v209;
  uint64_t v210;
  llvm::MDString *v211;
  const void *v212;
  size_t v213;
  size_t v214;
  llvm::MDString *v215;
  const void *v216;
  size_t v217;
  size_t v218;
  size_t v219;
  int v220;
  int v221;
  uint64_t *v222;
  int64_t v223;
  int64_t v224;
  int8x16_t *v225;
  int64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  llvm::MDString *v230;
  const void *v231;
  size_t v232;
  size_t v233;
  llvm::MDString *v234;
  const void *v235;
  size_t v236;
  size_t v237;
  size_t v238;
  int v239;
  int v240;
  uint64_t *v241;
  uint64_t v242;
  llvm::MDString *v243;
  const void *v244;
  unint64_t v245;
  unint64_t v246;
  llvm::MDString *v247;
  const void *v248;
  unint64_t v249;
  unint64_t v250;
  size_t v251;
  int v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  llvm::MDString *v257;
  const void *v258;
  size_t v259;
  size_t v260;
  llvm::MDString *v261;
  const void *v262;
  size_t v263;
  size_t v264;
  size_t v265;
  int v266;
  int v267;
  llvm::MDString *v268;
  const void *v269;
  size_t v270;
  size_t v271;
  llvm::MDString *v272;
  const void *v273;
  size_t v274;
  size_t v275;
  size_t v276;
  int v277;
  int v278;
  uint64_t v279;
  int8x16_t *v280;
  _QWORD *i64;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  llvm::MDString *v286;
  const void *v287;
  size_t v288;
  size_t v289;
  llvm::MDString *v290;
  const void *v291;
  size_t v292;
  size_t v293;
  size_t v294;
  int v295;
  int v296;
  uint64_t *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  llvm::MDString *v302;
  const void *v303;
  size_t v304;
  size_t v305;
  llvm::MDString *v306;
  const void *v307;
  size_t v308;
  size_t v309;
  size_t v310;
  int v311;
  int8x16_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  llvm::MDString *v316;
  const void *v317;
  unint64_t v318;
  unint64_t v319;
  llvm::MDString *v320;
  const void *v321;
  unint64_t v322;
  unint64_t v323;
  size_t v324;
  int v325;
  int v326;
  uint64_t *v328;
  uint64_t v329;
  llvm::MDString *v330;
  const void *v331;
  size_t v332;
  size_t v333;
  int8x16_t *v334;
  llvm::MDString *v335;
  const void *v336;
  size_t v337;
  size_t v338;
  size_t v339;
  int v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  llvm::MDString *v347;
  const void *v348;
  size_t v349;
  size_t v350;
  llvm::MDString *v351;
  const void *v352;
  size_t v353;
  size_t v354;
  size_t v355;
  int v356;
  int v357;
  llvm::MDString *v358;
  const void *v359;
  size_t v360;
  size_t v361;
  llvm::MDString *v362;
  const void *v363;
  size_t v364;
  size_t v365;
  size_t v366;
  int v367;
  uint64_t v368;
  size_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  llvm::MDString *v373;
  const void *v374;
  size_t v375;
  size_t v376;
  llvm::MDString *v377;
  const void *v378;
  size_t v379;
  size_t v380;
  size_t v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  llvm::MDString *v386;
  const void *v387;
  size_t v388;
  size_t v389;
  llvm::MDString *v390;
  const void *v391;
  size_t v392;
  size_t v393;
  size_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  llvm::MDString *v399;
  const void *v400;
  size_t v401;
  size_t v402;
  llvm::MDString *v403;
  const void *v404;
  size_t v405;
  size_t v406;
  size_t v407;
  int v408;
  int64_t v409;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;

uint64_t sub_22F239A0C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::MDString *v7;
  const void *String;
  size_t v9;
  size_t v10;
  llvm::MDString *v11;
  const void *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  llvm::MDString *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  llvm::MDString *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  uint64_t result;
  const void *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::MDString *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  const void *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  llvm::MDString *v43;
  const void *v44;
  size_t v45;
  size_t v46;
  const void *v47;
  size_t v48;
  size_t v49;
  const void *v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  uint64_t v55;

  v4 = a2;
  v5 = a1;
  v6 = *a1;
  v7 = *(llvm::MDString **)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16);
  if (v7)
  {
    String = (const void *)llvm::MDString::getString(v7);
    v10 = v9;
  }
  else
  {
    v10 = 0;
    String = 0;
  }
  v11 = *(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 16);
  if (v11)
  {
    v12 = (const void *)llvm::MDString::getString(v11);
    v14 = v13;
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  if (v14 >= v10)
    v15 = v10;
  else
    v15 = v14;
  if (v15 && (v16 = memcmp(String, v12, v15)) != 0)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if (v10 >= v14)
  {
LABEL_13:
    v17 = *v4;
    v18 = *(llvm::MDString **)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 16);
    if (v18)
    {
      v19 = (const void *)llvm::MDString::getString(v18);
      v21 = v20;
    }
    else
    {
      v21 = 0;
      v19 = 0;
    }
    result = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 16);
    if (result)
    {
      result = llvm::MDString::getString((llvm::MDString *)result);
      v28 = (const void *)result;
      v30 = v29;
    }
    else
    {
      v30 = 0;
      v28 = 0;
    }
    if (v30 >= v21)
      v31 = v21;
    else
      v31 = v30;
    if (v31 && (result = memcmp(v19, v28, v31), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v21 >= v30)
    {
      return result;
    }
    v32 = *v4;
    *v4 = *a3;
    *a3 = v32;
    v33 = *v5;
    v34 = *(llvm::MDString **)(*v4 - 8 * *(unsigned int *)(*v4 + 8) + 16);
    if (v34)
    {
      v35 = (const void *)llvm::MDString::getString(v34);
      v37 = v36;
    }
    else
    {
      v37 = 0;
      v35 = 0;
    }
    result = *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8) + 16);
    if (result)
    {
      result = llvm::MDString::getString((llvm::MDString *)result);
      v47 = (const void *)result;
      v49 = v48;
    }
    else
    {
      v49 = 0;
      v47 = 0;
    }
    if (v49 >= v37)
      v53 = v37;
    else
      v53 = v49;
    if (!v53 || (result = memcmp(v35, v47, v53), !(_DWORD)result))
    {
      if (v37 >= v49)
        return result;
      goto LABEL_68;
    }
LABEL_67:
    if ((result & 0x80000000) == 0)
      return result;
    goto LABEL_68;
  }
  v22 = *v4;
  v23 = *(llvm::MDString **)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 16);
  if (v23)
  {
    v24 = (const void *)llvm::MDString::getString(v23);
    v26 = v25;
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  result = *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 16);
  if (result)
  {
    result = llvm::MDString::getString((llvm::MDString *)result);
    v38 = (const void *)result;
    v40 = v39;
  }
  else
  {
    v40 = 0;
    v38 = 0;
  }
  if (v40 >= v26)
    v41 = v26;
  else
    v41 = v40;
  if (!v41 || (result = memcmp(v24, v38, v41), !(_DWORD)result))
  {
    if (v26 >= v40)
      goto LABEL_42;
LABEL_45:
    v4 = a3;
    goto LABEL_68;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_45;
LABEL_42:
  v42 = *v5;
  *v5 = *v4;
  *v4 = v42;
  v43 = *(llvm::MDString **)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 16);
  if (v43)
  {
    v44 = (const void *)llvm::MDString::getString(v43);
    v46 = v45;
  }
  else
  {
    v46 = 0;
    v44 = 0;
  }
  result = *(_QWORD *)(v42 - 8 * *(unsigned int *)(v42 + 8) + 16);
  if (result)
  {
    result = llvm::MDString::getString((llvm::MDString *)result);
    v50 = (const void *)result;
    v52 = v51;
  }
  else
  {
    v52 = 0;
    v50 = 0;
  }
  if (v52 >= v46)
    v54 = v46;
  else
    v54 = v52;
  if (v54)
  {
    result = memcmp(v44, v50, v54);
    if ((_DWORD)result)
    {
      v5 = v4;
      v4 = a3;
      goto LABEL_67;
    }
  }
  v5 = v4;
  v4 = a3;
  if (v46 >= v52)
    return result;
LABEL_68:
  v55 = *v5;
  *v5 = *v4;
  *v4 = v55;
  return result;
}

BOOL sub_22F239D0C(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  llvm::MDString *v7;
  const void *String;
  size_t v9;
  size_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  llvm::MDString *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  llvm::MDString *v20;
  const void *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MDString *v31;
  const void *v32;
  size_t v33;
  size_t v34;
  llvm::MDString *v35;
  const void *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  int v40;
  int v41;
  uint64_t *v42;
  int8x16_t *v43;
  __int8 *v44;
  uint64_t v45;
  llvm::MDString *v46;
  const void *v47;
  size_t v48;
  size_t v49;
  llvm::MDString *v50;
  const void *v51;
  size_t v52;
  size_t v53;
  llvm::MDString *v54;
  const void *v55;
  size_t v56;
  size_t v57;
  size_t v58;
  int v59;
  uint64_t v60;
  size_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  llvm::MDString *v65;
  const void *v66;
  size_t v67;
  size_t v68;
  llvm::MDString *v69;
  const void *v70;
  size_t v71;
  size_t v72;
  size_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::MDString *v78;
  const void *v79;
  size_t v80;
  size_t v81;
  llvm::MDString *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  size_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  llvm::MDString *v91;
  const void *v92;
  size_t v93;
  size_t v94;
  llvm::MDString *v95;
  const void *v96;
  size_t v97;
  size_t v98;
  size_t v99;
  int v100;
  int8x16_t *v101;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a1->i64[0];
      v7 = *(llvm::MDString **)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 16);
      if (v7)
      {
        String = (const void *)llvm::MDString::getString(v7);
        v10 = v9;
      }
      else
      {
        v10 = 0;
        String = 0;
      }
      v50 = *(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 16);
      if (v50)
      {
        v51 = (const void *)llvm::MDString::getString(v50);
        v53 = v52;
      }
      else
      {
        v53 = 0;
        v51 = 0;
      }
      if (v53 >= v10)
        v58 = v10;
      else
        v58 = v53;
      if (v58 && (v59 = memcmp(String, v51, v58)) != 0)
      {
        if ((v59 & 0x80000000) == 0)
          return 1;
      }
      else if (v10 >= v53)
      {
        return 1;
      }
      v60 = a1->i64[0];
      a1->i64[0] = v2[-1].i64[1];
      v2[-1].i64[1] = v60;
      return 1;
    case 3:
      sub_22F239A0C(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      sub_22F23A254(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v43 = a1 + 1;
      v44 = &a1[1].i8[8];
      sub_22F23A254(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      v45 = a1[1].i64[1];
      v46 = *(llvm::MDString **)(v2[-1].i64[1] - 8 * *(unsigned int *)(v2[-1].i64[1] + 8) + 16);
      if (v46)
      {
        v47 = (const void *)llvm::MDString::getString(v46);
        v49 = v48;
      }
      else
      {
        v49 = 0;
        v47 = 0;
      }
      v54 = *(llvm::MDString **)(v45 - 8 * *(unsigned int *)(v45 + 8) + 16);
      if (v54)
      {
        v55 = (const void *)llvm::MDString::getString(v54);
        v57 = v56;
      }
      else
      {
        v57 = 0;
        v55 = 0;
      }
      if (v57 >= v49)
        v61 = v49;
      else
        v61 = v57;
      if (v61 && (v62 = memcmp(v47, v55, v61)) != 0)
      {
        if ((v62 & 0x80000000) == 0)
          return 1;
      }
      else if (v49 >= v57)
      {
        return 1;
      }
      v63 = *(_QWORD *)v44;
      *(_QWORD *)v44 = v2[-1].i64[1];
      v2[-1].i64[1] = v63;
      v64 = v43->i64[0];
      v65 = *(llvm::MDString **)(*(_QWORD *)v44 - 8 * *(unsigned int *)(*(_QWORD *)v44 + 8) + 16);
      if (v65)
      {
        v66 = (const void *)llvm::MDString::getString(v65);
        v68 = v67;
      }
      else
      {
        v68 = 0;
        v66 = 0;
      }
      v69 = *(llvm::MDString **)(v64 - 8 * *(unsigned int *)(v64 + 8) + 16);
      if (v69)
      {
        v70 = (const void *)llvm::MDString::getString(v69);
        v72 = v71;
      }
      else
      {
        v72 = 0;
        v70 = 0;
      }
      if (v72 >= v68)
        v73 = v68;
      else
        v73 = v72;
      if (v73 && (v74 = memcmp(v66, v70, v73)) != 0)
      {
        if ((v74 & 0x80000000) == 0)
          return 1;
      }
      else if (v68 >= v72)
      {
        return 1;
      }
      v75 = v43->i64[0];
      v76 = *(_QWORD *)v44;
      v43->i64[0] = *(_QWORD *)v44;
      *(_QWORD *)v44 = v75;
      v77 = a1->i64[1];
      v78 = *(llvm::MDString **)(v76 - 8 * *(unsigned int *)(v76 + 8) + 16);
      if (v78)
      {
        v79 = (const void *)llvm::MDString::getString(v78);
        v81 = v80;
      }
      else
      {
        v81 = 0;
        v79 = 0;
      }
      v82 = *(llvm::MDString **)(v77 - 8 * *(unsigned int *)(v77 + 8) + 16);
      if (v82)
      {
        v83 = (const void *)llvm::MDString::getString(v82);
        v85 = v84;
      }
      else
      {
        v85 = 0;
        v83 = 0;
      }
      if (v85 >= v81)
        v86 = v81;
      else
        v86 = v85;
      if (v86 && (v87 = memcmp(v79, v83, v86)) != 0)
      {
        if ((v87 & 0x80000000) == 0)
          return 1;
      }
      else if (v81 >= v85)
      {
        return 1;
      }
      v89 = a1->i64[1];
      v88 = a1[1].i64[0];
      v90 = a1->i64[0];
      a1->i64[1] = v88;
      a1[1].i64[0] = v89;
      v91 = *(llvm::MDString **)(v88 - 8 * *(unsigned int *)(v88 + 8) + 16);
      if (v91)
      {
        v92 = (const void *)llvm::MDString::getString(v91);
        v94 = v93;
      }
      else
      {
        v94 = 0;
        v92 = 0;
      }
      v95 = *(llvm::MDString **)(v90 - 8 * *(unsigned int *)(v90 + 8) + 16);
      if (v95)
      {
        v96 = (const void *)llvm::MDString::getString(v95);
        v98 = v97;
      }
      else
      {
        v98 = 0;
        v96 = 0;
      }
      if (v98 >= v94)
        v99 = v94;
      else
        v99 = v98;
      if (v99 && (v100 = memcmp(v92, v96, v99)) != 0)
      {
        if ((v100 & 0x80000000) == 0)
          return 1;
      }
      else if (v94 >= v98)
      {
        return 1;
      }
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    default:
      v11 = a1 + 1;
      sub_22F239A0C(a1->i64, &a1->i64[1], a1[1].i64);
      v12 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v13 = 0;
      v14 = 16;
      v101 = v2;
      break;
  }
  do
  {
    v15 = v11->i64[0];
    v16 = *(llvm::MDString **)(v12->i64[0] - 8 * *(unsigned int *)(v12->i64[0] + 8) + 16);
    if (v16)
    {
      v17 = (const void *)llvm::MDString::getString(v16);
      v19 = v18;
    }
    else
    {
      v19 = 0;
      v17 = 0;
    }
    v20 = *(llvm::MDString **)(v15 - 8 * *(unsigned int *)(v15 + 8) + 16);
    if (v20)
    {
      v21 = (const void *)llvm::MDString::getString(v20);
      v23 = v22;
    }
    else
    {
      v23 = 0;
      v21 = 0;
    }
    if (v23 >= v19)
      v24 = v19;
    else
      v24 = v23;
    if (v24 && (v25 = memcmp(v17, v21, v24)) != 0)
    {
      if ((v25 & 0x80000000) == 0)
        goto LABEL_40;
    }
    else if (v19 >= v23)
    {
      goto LABEL_40;
    }
    v26 = v12->i64[0];
    v27 = v12->i64[0] + 16;
    v28 = v14;
    while (1)
    {
      v29 = v28;
      *(uint64_t *)((char *)&a1->i64[1] + v28) = *(uint64_t *)((char *)a1->i64 + v28);
      if (!v28)
        break;
      v30 = *(uint64_t *)((char *)&a1->i64[-1] + v28);
      v31 = *(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v26 + 8));
      if (v31)
      {
        v32 = (const void *)llvm::MDString::getString(v31);
        v34 = v33;
      }
      else
      {
        v34 = 0;
        v32 = 0;
      }
      v35 = *(llvm::MDString **)(v30 - 8 * *(unsigned int *)(v30 + 8) + 16);
      if (v35)
      {
        v36 = (const void *)llvm::MDString::getString(v35);
        v38 = v37;
      }
      else
      {
        v38 = 0;
        v36 = 0;
      }
      if (v38 >= v34)
        v39 = v34;
      else
        v39 = v38;
      if (v39 && (v40 = memcmp(v32, v36, v39)) != 0)
      {
        v41 = (v40 >> 31) | 1;
      }
      else
      {
        if (v34 >= v38)
          goto LABEL_37;
        v41 = -1;
      }
      v28 = v29 - 8;
      if (v41 != -1)
      {
LABEL_37:
        v42 = (uint64_t *)((char *)a1->i64 + v29);
        goto LABEL_39;
      }
    }
    v42 = (uint64_t *)a1;
LABEL_39:
    v2 = v101;
    *v42 = v26;
    if (++v13 == 8)
      return &v12->u64[1] == (unint64_t *)v101;
LABEL_40:
    v11 = v12;
    v14 += 8;
    v12 = (int8x16_t *)((char *)v12 + 8);
  }
  while (v12 != v2);
  return 1;
}

uint64_t sub_22F23A254(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  llvm::MDString *v9;
  const void *String;
  size_t v11;
  size_t v12;
  uint64_t result;
  const void *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MDString *v20;
  const void *v21;
  size_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::MDString *v30;
  const void *v31;
  size_t v32;
  size_t v33;
  const void *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  uint64_t v38;

  sub_22F239A0C(a1, a2, a3);
  v8 = *a3;
  v9 = *(llvm::MDString **)(*a4 - 8 * *(unsigned int *)(*a4 + 8) + 16);
  if (v9)
  {
    String = (const void *)llvm::MDString::getString(v9);
    v12 = v11;
  }
  else
  {
    v12 = 0;
    String = 0;
  }
  result = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8) + 16);
  if (result)
  {
    result = llvm::MDString::getString((llvm::MDString *)result);
    v14 = (const void *)result;
    v16 = v15;
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  if (v16 >= v12)
    v17 = v12;
  else
    v17 = v16;
  if (v17 && (result = memcmp(String, v14, v17), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v16)
  {
    return result;
  }
  v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  v19 = *a2;
  v20 = *(llvm::MDString **)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 16);
  if (v20)
  {
    v21 = (const void *)llvm::MDString::getString(v20);
    v23 = v22;
  }
  else
  {
    v23 = 0;
    v21 = 0;
  }
  result = *(_QWORD *)(v19 - 8 * *(unsigned int *)(v19 + 8) + 16);
  if (result)
  {
    result = llvm::MDString::getString((llvm::MDString *)result);
    v24 = (const void *)result;
    v26 = v25;
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  if (v26 >= v23)
    v27 = v23;
  else
    v27 = v26;
  if (v27 && (result = memcmp(v21, v24, v27), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v23 >= v26)
  {
    return result;
  }
  v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  v29 = *a1;
  v30 = *(llvm::MDString **)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16);
  if (v30)
  {
    v31 = (const void *)llvm::MDString::getString(v30);
    v33 = v32;
  }
  else
  {
    v33 = 0;
    v31 = 0;
  }
  result = *(_QWORD *)(v29 - 8 * *(unsigned int *)(v29 + 8) + 16);
  if (result)
  {
    result = llvm::MDString::getString((llvm::MDString *)result);
    v34 = (const void *)result;
    v36 = v35;
  }
  else
  {
    v36 = 0;
    v34 = 0;
  }
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  if (v37 && (result = memcmp(v31, v34, v37), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v33 >= v36)
  {
    return result;
  }
  v38 = *a1;
  *a1 = *a2;
  *a2 = v38;
  return result;
}

int8x16_t sub_22F23A454(int8x16_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v6;
  int8x16_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Value *v41;
  const void *v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::Value *v47;
  const void *v48;
  size_t v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  unint64_t v54;
  __int8 *v55;
  int8x16_t *v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  const void *v60;
  size_t v61;
  size_t v62;
  uint64_t v63;
  llvm::Value *v64;
  llvm::Value *v65;
  const void *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  __int8 *v72;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  const void *v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  llvm::Value *v80;
  llvm::Value *v81;
  const void *v82;
  size_t v83;
  size_t v84;
  size_t v85;
  int v86;
  int v87;
  int8x16_t *v88;
  uint64_t v89;
  int8x16_t *v90;
  uint64_t v91;
  llvm::Value *v92;
  llvm::Value *v93;
  const void *v94;
  size_t v95;
  size_t v96;
  uint64_t v97;
  llvm::Value *v98;
  llvm::Value *v99;
  const void *v100;
  size_t v101;
  size_t v102;
  size_t v103;
  int v104;
  int v105;
  int8x16_t *v106;
  uint64_t v107;
  llvm::Value *v108;
  llvm::Value *v109;
  const void *v110;
  size_t v111;
  size_t v112;
  uint64_t v113;
  llvm::Value *v114;
  llvm::Value *v115;
  const void *v116;
  size_t v117;
  size_t v118;
  size_t v119;
  int v120;
  int v121;
  uint64_t *v122;
  BOOL v123;
  BOOL v124;
  int8x16_t result;
  uint64_t v126;
  const void *v127;
  size_t v128;
  size_t v129;
  uint64_t v130;
  llvm::Value *v131;
  llvm::Value *v132;
  uint64_t *v133;
  const void *v134;
  size_t v135;
  size_t v136;
  size_t v137;
  int v138;
  int8x16_t *v139;
  uint64_t v140;
  uint64_t v141;
  llvm::Value *v142;
  uint64_t v143;
  const void *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  llvm::Value *v149;
  const void *v150;
  unint64_t v151;
  unint64_t v152;
  size_t v153;
  int v154;
  int v155;
  int8x16_t *v156;
  uint64_t v157;
  llvm::Value *v158;
  llvm::Value *v159;
  uint64_t v160;
  const void *v161;
  size_t v162;
  size_t v163;
  uint64_t v164;
  llvm::Value *v165;
  llvm::Value *v166;
  const void *v167;
  size_t v168;
  size_t v169;
  size_t v170;
  int v171;
  int v172;
  int8x16_t *v173;
  uint64_t *v174;
  uint64_t v175;
  llvm::Value *v176;
  llvm::Value *v177;
  uint64_t v178;
  const void *v179;
  size_t v180;
  size_t v181;
  uint64_t v182;
  llvm::Value *v183;
  llvm::Value *v184;
  const void *v185;
  size_t v186;
  size_t v187;
  size_t v188;
  int v189;
  int v190;
  uint64_t v191;
  int8x16_t *v192;
  uint64_t v193;
  uint64_t v194;
  llvm::Value *v195;
  llvm::Value *v196;
  const void *v197;
  size_t v198;
  size_t v199;
  uint64_t v200;
  llvm::Value *v201;
  llvm::Value *v202;
  const void *v203;
  size_t v204;
  size_t v205;
  size_t v206;
  int v207;
  int v208;
  int8x16_t *v209;
  uint64_t v210;
  uint64_t v211;
  llvm::Value *v212;
  llvm::Value *v213;
  const void *v214;
  size_t v215;
  size_t v216;
  uint64_t v217;
  llvm::Value *v218;
  llvm::Value *v219;
  const void *v220;
  size_t v221;
  size_t v222;
  size_t v223;
  int v224;
  int v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  llvm::Value *v229;
  llvm::Value *v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  llvm::Value *v236;
  llvm::Value *v237;
  uint64_t *v238;
  BOOL v239;
  char v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  llvm::Value *v245;
  llvm::Value *v246;
  uint64_t v247;
  const void *v248;
  size_t v249;
  size_t v250;
  uint64_t v251;
  llvm::Value *v252;
  llvm::Value *v253;
  int8x16_t *v254;
  const void *v255;
  size_t v256;
  size_t v257;
  size_t v258;
  int v259;
  uint64_t v260;
  unsigned int *v261;
  uint64_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  llvm::Value *v266;
  llvm::Value *v267;
  uint64_t v268;
  const void *v269;
  size_t v270;
  size_t v271;
  uint64_t v272;
  llvm::Value *v273;
  llvm::Value *v274;
  const void *v275;
  size_t v276;
  size_t v277;
  size_t v278;
  int v279;
  int v280;
  uint64_t *v281;
  int64_t v282;
  int64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  uint64_t v287;
  llvm::Value *v288;
  llvm::Value *v289;
  uint64_t v290;
  const void *v291;
  size_t v292;
  size_t v293;
  uint64_t v294;
  llvm::Value *v295;
  llvm::Value *v296;
  const void *v297;
  size_t v298;
  size_t v299;
  size_t v300;
  int v301;
  int v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  llvm::Value *v306;
  llvm::Value *v307;
  const void *v308;
  size_t v309;
  size_t v310;
  uint64_t v311;
  llvm::Value *v312;
  llvm::Value *v313;
  const void *v314;
  size_t v315;
  size_t v316;
  size_t v317;
  int v318;
  unsigned int *v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  llvm::Value *v327;
  uint64_t v328;
  const void *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  llvm::Value *v334;
  const void *v335;
  unint64_t v336;
  unint64_t v337;
  size_t v338;
  int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  llvm::Value *v343;
  const void *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  llvm::Value *v349;
  const void *v350;
  unint64_t v351;
  unint64_t v352;
  size_t v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  llvm::Value *v362;
  llvm::Value *v363;
  uint64_t v364;
  const void *v365;
  size_t v366;
  size_t v367;
  uint64_t v368;
  llvm::Value *v369;
  llvm::Value *v370;
  const void *v371;
  size_t v372;
  size_t v373;
  size_t v374;
  int v375;
  int v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  llvm::Value *v382;
  llvm::Value *v383;
  uint64_t v384;
  const void *v385;
  size_t v386;
  size_t v387;
  uint64_t v388;
  llvm::Value *v389;
  llvm::Value *v390;
  const void *v391;
  size_t v392;
  size_t v393;
  size_t v394;
  int v395;
  unsigned int *v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  llvm::Value *v400;
  const void *v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  llvm::Value *v406;
  const void *v407;
  unint64_t v408;
  unint64_t v409;
  size_t v410;
  int v411;
  int v412;
  uint64_t *v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t *v417;
  llvm::Value *v418;
  llvm::Value *v419;
  uint64_t v420;
  const void *v421;
  size_t v422;
  size_t v423;
  uint64_t v424;
  llvm::Value *v425;
  llvm::Value *v426;
  const void *v427;
  size_t v428;
  size_t v429;
  size_t v430;
  int v431;
  uint64_t v432;
  unsigned int *v433;
  uint64_t *v434;
  uint64_t v435;
  llvm::Value *v436;
  llvm::Value *v437;
  uint64_t v438;
  const void *v439;
  size_t v440;
  size_t v441;
  uint64_t v442;
  llvm::Value *v443;
  llvm::Value *v444;
  const void *v445;
  size_t v446;
  size_t v447;
  size_t v448;
  int v449;
  int v450;
  const void *Name;
  size_t v452;
  size_t v453;
  uint64_t v454;
  llvm::Value *v455;
  llvm::Value *v456;
  const void *v457;
  size_t v458;
  size_t v459;
  uint64_t v460;
  llvm::Value *v461;
  llvm::Value *v462;
  const void *v463;
  size_t v464;
  size_t v465;
  size_t v466;
  int v467;
  uint64_t v468;
  const void *v469;
  size_t v470;
  size_t v471;
  size_t v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  llvm::Value *v477;
  llvm::Value *v478;
  const void *v479;
  size_t v480;
  size_t v481;
  uint64_t v482;
  llvm::Value *v483;
  llvm::Value *v484;
  const void *v485;
  size_t v486;
  size_t v487;
  size_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  llvm::Value *v494;
  llvm::Value *v495;
  const void *v496;
  size_t v497;
  size_t v498;
  uint64_t v499;
  llvm::Value *v500;
  llvm::Value *v501;
  const void *v502;
  size_t v503;
  size_t v504;
  size_t v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  llvm::Value *v511;
  llvm::Value *v512;
  const void *v513;
  size_t v514;
  size_t v515;
  uint64_t v516;
  llvm::Value *v517;
  llvm::Value *v518;
  const void *v519;
  size_t v520;
  size_t v521;
  size_t v522;
  int v523;
  uint64_t v524;
  int64_t v526;
  uint64_t *v527;
  int64_t v528;
  uint64_t v529;
  uint64_t v530;
  int8x16_t *v532;
  uint64_t v533;

uint64_t sub_22F23BCEC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  const void *Name;
  size_t v11;
  size_t v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Value *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Value *v28;
  const void *v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t result;
  size_t v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Value *v42;
  llvm::Value *v43;
  const void *v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Value *v49;
  size_t v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Value *v56;
  const void *v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  llvm::Value *v61;
  llvm::Value *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::Value *v68;
  size_t v69;
  size_t v70;
  size_t v71;
  size_t v72;
  size_t v73;
  size_t v74;
  uint64_t v75;

  v4 = a2;
  v5 = a1;
  v6 = *a1;
  v7 = *(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 8);
  if (v7)
  {
    v8 = *(llvm::Value **)(v7 + 128);
    if (*((_BYTE *)v8 + 16) == 3)
      v9 = v8;
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  Name = (const void *)llvm::Value::getName(v9);
  v12 = v11;
  v13 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
  if (v13)
  {
    v14 = *(llvm::Value **)(v13 + 128);
    if (*((_BYTE *)v14 + 16) == 3)
      v15 = v14;
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  v16 = (const void *)llvm::Value::getName(v15);
  v18 = v17;
  if (v17 >= v12)
    v19 = v12;
  else
    v19 = v17;
  if (v19 && (v20 = memcmp(Name, v16, v19)) != 0)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if (v12 >= v18)
  {
LABEL_17:
    v21 = *v4;
    v22 = *(_QWORD *)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 8);
    if (v22)
    {
      v23 = *(llvm::Value **)(v22 + 128);
      if (*((_BYTE *)v23 + 16) == 3)
        v24 = v23;
      else
        v24 = 0;
    }
    else
    {
      v24 = 0;
    }
    v29 = (const void *)llvm::Value::getName(v24);
    v31 = v30;
    v32 = *(_QWORD *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 8);
    if (v32)
    {
      v33 = *(llvm::Value **)(v32 + 128);
      if (*((_BYTE *)v33 + 16) == 3)
        v34 = v33;
      else
        v34 = 0;
    }
    else
    {
      v34 = 0;
    }
    result = llvm::Value::getName(v34);
    v37 = v36;
    if (v36 >= v31)
      v38 = v31;
    else
      v38 = v36;
    if (v38 && (result = memcmp(v29, (const void *)result, v38), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v31 >= v37)
    {
      return result;
    }
    v39 = *v4;
    *v4 = *a3;
    *a3 = v39;
    v40 = *v5;
    v41 = *(_QWORD *)(*v4 - 8 * *(unsigned int *)(*v4 + 8) + 8);
    if (v41)
    {
      v42 = *(llvm::Value **)(v41 + 128);
      if (*((_BYTE *)v42 + 16) == 3)
        v43 = v42;
      else
        v43 = 0;
    }
    else
    {
      v43 = 0;
    }
    v57 = (const void *)llvm::Value::getName(v43);
    v59 = v58;
    v60 = *(_QWORD *)(v40 - 8 * *(unsigned int *)(v40 + 8) + 8);
    if (v60)
    {
      v61 = *(llvm::Value **)(v60 + 128);
      if (*((_BYTE *)v61 + 16) == 3)
        v62 = v61;
      else
        v62 = 0;
    }
    else
    {
      v62 = 0;
    }
    result = llvm::Value::getName(v62);
    v70 = v69;
    if (v69 >= v59)
      v71 = v59;
    else
      v71 = v69;
    if (!v71 || (result = memcmp(v57, (const void *)result, v71), !(_DWORD)result))
    {
      if (v59 >= v70)
        return result;
      goto LABEL_88;
    }
LABEL_87:
    if ((result & 0x80000000) == 0)
      return result;
    goto LABEL_88;
  }
  v25 = *v4;
  v26 = *(_QWORD *)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 8);
  if (v26)
  {
    v27 = *(llvm::Value **)(v26 + 128);
    if (*((_BYTE *)v27 + 16) == 3)
      v28 = v27;
    else
      v28 = 0;
  }
  else
  {
    v28 = 0;
  }
  v44 = (const void *)llvm::Value::getName(v28);
  v46 = v45;
  v47 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8) + 8);
  if (v47)
  {
    v48 = *(llvm::Value **)(v47 + 128);
    if (*((_BYTE *)v48 + 16) == 3)
      v49 = v48;
    else
      v49 = 0;
  }
  else
  {
    v49 = 0;
  }
  result = llvm::Value::getName(v49);
  v51 = v50;
  if (v50 >= v46)
    v52 = v46;
  else
    v52 = v50;
  if (!v52 || (result = memcmp(v44, (const void *)result, v52), !(_DWORD)result))
  {
    if (v46 >= v51)
      goto LABEL_56;
LABEL_61:
    v4 = a3;
    goto LABEL_88;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_61;
LABEL_56:
  v53 = *v5;
  *v5 = *v4;
  *v4 = v53;
  v54 = *(_QWORD *)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 8);
  if (v54)
  {
    v55 = *(llvm::Value **)(v54 + 128);
    if (*((_BYTE *)v55 + 16) == 3)
      v56 = v55;
    else
      v56 = 0;
  }
  else
  {
    v56 = 0;
  }
  v63 = (const void *)llvm::Value::getName(v56);
  v65 = v64;
  v66 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8) + 8);
  if (v66)
  {
    v67 = *(llvm::Value **)(v66 + 128);
    if (*((_BYTE *)v67 + 16) == 3)
      v68 = v67;
    else
      v68 = 0;
  }
  else
  {
    v68 = 0;
  }
  result = llvm::Value::getName(v68);
  v73 = v72;
  if (v72 >= v65)
    v74 = v65;
  else
    v74 = v72;
  if (v74)
  {
    result = memcmp(v63, (const void *)result, v74);
    if ((_DWORD)result)
    {
      v5 = v4;
      v4 = a3;
      goto LABEL_87;
    }
  }
  v5 = v4;
  v4 = a3;
  if (v65 >= v73)
    return result;
LABEL_88:
  v75 = *v5;
  *v5 = *v4;
  *v4 = v75;
  return result;
}

BOOL sub_22F23C064(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __int8 *v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t v37;
  const void *v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  llvm::Value *v42;
  llvm::Value *v43;
  const void *v44;
  size_t v45;
  size_t v46;
  size_t v47;
  int v48;
  int v49;
  uint64_t *v50;
  int8x16_t *v51;
  __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Value *v56;
  const void *Name;
  size_t v58;
  size_t v59;
  uint64_t v60;
  llvm::Value *v61;
  llvm::Value *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::Value *v68;
  const void *v69;
  size_t v70;
  size_t v71;
  size_t v72;
  int v73;
  uint64_t v74;
  const void *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Value *v83;
  llvm::Value *v84;
  const void *v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  llvm::Value *v89;
  llvm::Value *v90;
  const void *v91;
  size_t v92;
  size_t v93;
  size_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Value *v100;
  llvm::Value *v101;
  const void *v102;
  size_t v103;
  size_t v104;
  uint64_t v105;
  llvm::Value *v106;
  llvm::Value *v107;
  const void *v108;
  size_t v109;
  size_t v110;
  size_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::Value *v117;
  llvm::Value *v118;
  const void *v119;
  size_t v120;
  size_t v121;
  uint64_t v122;
  llvm::Value *v123;
  llvm::Value *v124;
  const void *v125;
  size_t v126;
  size_t v127;
  size_t v128;
  int v129;
  int8x16_t *v130;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a1->i64[0];
      v7 = *(_QWORD *)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 8);
      if (v7)
      {
        v8 = *(llvm::Value **)(v7 + 128);
        if (*((_BYTE *)v8 + 16) == 3)
          v9 = v8;
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      Name = (const void *)llvm::Value::getName(v9);
      v59 = v58;
      v60 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
      if (v60)
      {
        v61 = *(llvm::Value **)(v60 + 128);
        if (*((_BYTE *)v61 + 16) == 3)
          v62 = v61;
        else
          v62 = 0;
      }
      else
      {
        v62 = 0;
      }
      v69 = (const void *)llvm::Value::getName(v62);
      v71 = v70;
      if (v70 >= v59)
        v72 = v59;
      else
        v72 = v70;
      if (v72 && (v73 = memcmp(Name, v69, v72)) != 0)
      {
        if ((v73 & 0x80000000) == 0)
          return 1;
      }
      else if (v59 >= v71)
      {
        return 1;
      }
      v74 = a1->i64[0];
      a1->i64[0] = v2[-1].i64[1];
      v2[-1].i64[1] = v74;
      return 1;
    case 3:
      sub_22F23BCEC(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      sub_22F23C654(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v51 = a1 + 1;
      v52 = &a1[1].i8[8];
      sub_22F23C654(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      v53 = a1[1].i64[1];
      v54 = *(_QWORD *)(v2[-1].i64[1] - 8 * *(unsigned int *)(v2[-1].i64[1] + 8) + 8);
      if (v54)
      {
        v55 = *(llvm::Value **)(v54 + 128);
        if (*((_BYTE *)v55 + 16) == 3)
          v56 = v55;
        else
          v56 = 0;
      }
      else
      {
        v56 = 0;
      }
      v63 = (const void *)llvm::Value::getName(v56);
      v65 = v64;
      v66 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8) + 8);
      if (v66)
      {
        v67 = *(llvm::Value **)(v66 + 128);
        if (*((_BYTE *)v67 + 16) == 3)
          v68 = v67;
        else
          v68 = 0;
      }
      else
      {
        v68 = 0;
      }
      v75 = (const void *)llvm::Value::getName(v68);
      v77 = v76;
      if (v76 >= v65)
        v78 = v65;
      else
        v78 = v76;
      if (v78 && (v79 = memcmp(v63, v75, v78)) != 0)
      {
        if ((v79 & 0x80000000) == 0)
          return 1;
      }
      else if (v65 >= v77)
      {
        return 1;
      }
      v80 = *(_QWORD *)v52;
      *(_QWORD *)v52 = v2[-1].i64[1];
      v2[-1].i64[1] = v80;
      v81 = v51->i64[0];
      v82 = *(_QWORD *)(*(_QWORD *)v52 - 8 * *(unsigned int *)(*(_QWORD *)v52 + 8) + 8);
      if (v82)
      {
        v83 = *(llvm::Value **)(v82 + 128);
        if (*((_BYTE *)v83 + 16) == 3)
          v84 = v83;
        else
          v84 = 0;
      }
      else
      {
        v84 = 0;
      }
      v85 = (const void *)llvm::Value::getName(v84);
      v87 = v86;
      v88 = *(_QWORD *)(v81 - 8 * *(unsigned int *)(v81 + 8) + 8);
      if (v88)
      {
        v89 = *(llvm::Value **)(v88 + 128);
        if (*((_BYTE *)v89 + 16) == 3)
          v90 = v89;
        else
          v90 = 0;
      }
      else
      {
        v90 = 0;
      }
      v91 = (const void *)llvm::Value::getName(v90);
      v93 = v92;
      if (v92 >= v87)
        v94 = v87;
      else
        v94 = v92;
      if (v94 && (v95 = memcmp(v85, v91, v94)) != 0)
      {
        if ((v95 & 0x80000000) == 0)
          return 1;
      }
      else if (v87 >= v93)
      {
        return 1;
      }
      v96 = v51->i64[0];
      v97 = *(_QWORD *)v52;
      v51->i64[0] = *(_QWORD *)v52;
      *(_QWORD *)v52 = v96;
      v98 = a1->i64[1];
      v99 = *(_QWORD *)(v97 - 8 * *(unsigned int *)(v97 + 8) + 8);
      if (v99)
      {
        v100 = *(llvm::Value **)(v99 + 128);
        if (*((_BYTE *)v100 + 16) == 3)
          v101 = v100;
        else
          v101 = 0;
      }
      else
      {
        v101 = 0;
      }
      v102 = (const void *)llvm::Value::getName(v101);
      v104 = v103;
      v105 = *(_QWORD *)(v98 - 8 * *(unsigned int *)(v98 + 8) + 8);
      if (v105)
      {
        v106 = *(llvm::Value **)(v105 + 128);
        if (*((_BYTE *)v106 + 16) == 3)
          v107 = v106;
        else
          v107 = 0;
      }
      else
      {
        v107 = 0;
      }
      v108 = (const void *)llvm::Value::getName(v107);
      v110 = v109;
      if (v109 >= v104)
        v111 = v104;
      else
        v111 = v109;
      if (v111 && (v112 = memcmp(v102, v108, v111)) != 0)
      {
        if ((v112 & 0x80000000) == 0)
          return 1;
      }
      else if (v104 >= v110)
      {
        return 1;
      }
      v114 = a1->i64[1];
      v113 = a1[1].i64[0];
      v115 = a1->i64[0];
      a1->i64[1] = v113;
      a1[1].i64[0] = v114;
      v116 = *(_QWORD *)(v113 - 8 * *(unsigned int *)(v113 + 8) + 8);
      if (v116)
      {
        v117 = *(llvm::Value **)(v116 + 128);
        if (*((_BYTE *)v117 + 16) == 3)
          v118 = v117;
        else
          v118 = 0;
      }
      else
      {
        v118 = 0;
      }
      v119 = (const void *)llvm::Value::getName(v118);
      v121 = v120;
      v122 = *(_QWORD *)(v115 - 8 * *(unsigned int *)(v115 + 8) + 8);
      if (v122)
      {
        v123 = *(llvm::Value **)(v122 + 128);
        if (*((_BYTE *)v123 + 16) == 3)
          v124 = v123;
        else
          v124 = 0;
      }
      else
      {
        v124 = 0;
      }
      v125 = (const void *)llvm::Value::getName(v124);
      v127 = v126;
      if (v126 >= v121)
        v128 = v121;
      else
        v128 = v126;
      if (v128 && (v129 = memcmp(v119, v125, v128)) != 0)
      {
        if ((v129 & 0x80000000) == 0)
          return 1;
      }
      else if (v121 >= v127)
      {
        return 1;
      }
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    default:
      v10 = a1 + 1;
      sub_22F23BCEC(a1->i64, &a1->i64[1], a1[1].i64);
      v11 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v12 = 0;
      v13 = 16;
      v130 = v2;
      break;
  }
  do
  {
    v14 = *(_QWORD *)(v11->i64[0] - 8 * *(unsigned int *)(v11->i64[0] + 8) + 8);
    if (v14)
    {
      v15 = *(llvm::Value **)(v14 + 128);
      if (*((_BYTE *)v15 + 16) == 3)
        v16 = v15;
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    v17 = v10->i64[0];
    v18 = (const void *)llvm::Value::getName(v16);
    v20 = v19;
    v21 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8);
    if (v21)
    {
      v22 = *(llvm::Value **)(v21 + 128);
      if (*((_BYTE *)v22 + 16) == 3)
        v23 = v22;
      else
        v23 = 0;
    }
    else
    {
      v23 = 0;
    }
    v24 = (const void *)llvm::Value::getName(v23);
    v26 = v25;
    if (v25 >= v20)
      v27 = v20;
    else
      v27 = v25;
    if (v27 && (v28 = memcmp(v18, v24, v27)) != 0)
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_50;
    }
    else if (v20 >= v26)
    {
      goto LABEL_50;
    }
    v29 = v11->i64[0];
    v30 = (unsigned int *)(v11->i64[0] + 8);
    v31 = v13;
    while (1)
    {
      v32 = v31;
      v33 = &a1->i8[v31];
      *(uint64_t *)((char *)&a1->i64[1] + v31) = *(uint64_t *)((char *)a1->i64 + v31);
      if (!v31)
        break;
      v34 = *(_QWORD *)&v30[-2 * *v30];
      if (v34)
      {
        v35 = *(llvm::Value **)(v34 + 128);
        if (*((_BYTE *)v35 + 16) == 3)
          v36 = v35;
        else
          v36 = 0;
      }
      else
      {
        v36 = 0;
      }
      v37 = *((_QWORD *)v33 - 1);
      v38 = (const void *)llvm::Value::getName(v36);
      v40 = v39;
      v41 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8) + 8);
      if (v41)
      {
        v42 = *(llvm::Value **)(v41 + 128);
        if (*((_BYTE *)v42 + 16) == 3)
          v43 = v42;
        else
          v43 = 0;
      }
      else
      {
        v43 = 0;
      }
      v44 = (const void *)llvm::Value::getName(v43);
      v46 = v45;
      if (v45 >= v40)
        v47 = v40;
      else
        v47 = v45;
      if (v47 && (v48 = memcmp(v38, v44, v47)) != 0)
      {
        v49 = (v48 >> 31) | 1;
      }
      else
      {
        if (v40 >= v46)
          goto LABEL_47;
        v49 = -1;
      }
      v31 = v32 - 8;
      if (v49 != -1)
      {
LABEL_47:
        v50 = (uint64_t *)((char *)a1->i64 + v32);
        goto LABEL_49;
      }
    }
    v50 = (uint64_t *)a1;
LABEL_49:
    v2 = v130;
    *v50 = v29;
    if (++v12 == 8)
      return &v11->u64[1] == (unint64_t *)v130;
LABEL_50:
    v10 = v11;
    v13 += 8;
    v11 = (int8x16_t *)((char *)v11 + 8);
  }
  while (v11 != v2);
  return 1;
}

uint64_t sub_22F23C654(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Value *v11;
  const void *Name;
  size_t v13;
  size_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t result;
  size_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::Value *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value *v39;
  llvm::Value *v40;
  const void *v41;
  size_t v42;
  size_t v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  size_t v47;
  size_t v48;
  size_t v49;
  uint64_t v50;

  sub_22F23BCEC(a1, a2, a3);
  v8 = *a3;
  v9 = *(_QWORD *)(*a4 - 8 * *(unsigned int *)(*a4 + 8) + 8);
  if (v9)
  {
    v10 = *(llvm::Value **)(v9 + 128);
    if (*((_BYTE *)v10 + 16) == 3)
      v11 = v10;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  Name = (const void *)llvm::Value::getName(v11);
  v14 = v13;
  v15 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8);
  if (v15)
  {
    v16 = *(llvm::Value **)(v15 + 128);
    if (*((_BYTE *)v16 + 16) == 3)
      v17 = v16;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  result = llvm::Value::getName(v17);
  v20 = v19;
  if (v19 >= v14)
    v21 = v14;
  else
    v21 = v19;
  if (v21 && (result = memcmp(Name, (const void *)result, v21), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v20)
  {
    return result;
  }
  v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  v23 = *a2;
  v24 = *(_QWORD *)(*a3 - 8 * *(unsigned int *)(*a3 + 8) + 8);
  if (v24)
  {
    v25 = *(llvm::Value **)(v24 + 128);
    if (*((_BYTE *)v25 + 16) == 3)
      v26 = v25;
    else
      v26 = 0;
  }
  else
  {
    v26 = 0;
  }
  v27 = (const void *)llvm::Value::getName(v26);
  v29 = v28;
  v30 = *(_QWORD *)(v23 - 8 * *(unsigned int *)(v23 + 8) + 8);
  if (v30)
  {
    v31 = *(llvm::Value **)(v30 + 128);
    if (*((_BYTE *)v31 + 16) == 3)
      v32 = v31;
    else
      v32 = 0;
  }
  else
  {
    v32 = 0;
  }
  result = llvm::Value::getName(v32);
  v34 = v33;
  if (v33 >= v29)
    v35 = v29;
  else
    v35 = v33;
  if (v35 && (result = memcmp(v27, (const void *)result, v35), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v29 >= v34)
  {
    return result;
  }
  v36 = *a2;
  *a2 = *a3;
  *a3 = v36;
  v37 = *a1;
  v38 = *(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 8);
  if (v38)
  {
    v39 = *(llvm::Value **)(v38 + 128);
    if (*((_BYTE *)v39 + 16) == 3)
      v40 = v39;
    else
      v40 = 0;
  }
  else
  {
    v40 = 0;
  }
  v41 = (const void *)llvm::Value::getName(v40);
  v43 = v42;
  v44 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8) + 8);
  if (v44)
  {
    v45 = *(llvm::Value **)(v44 + 128);
    if (*((_BYTE *)v45 + 16) == 3)
      v46 = v45;
    else
      v46 = 0;
  }
  else
  {
    v46 = 0;
  }
  result = llvm::Value::getName(v46);
  v48 = v47;
  if (v47 >= v43)
    v49 = v43;
  else
    v49 = v47;
  if (v49 && (result = memcmp(v41, (const void *)result, v49), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v43 >= v48)
  {
    return result;
  }
  v50 = *a1;
  *a1 = *a2;
  *a2 = v50;
  return result;
}

int8x16_t sub_22F23C89C(int8x16_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v6;
  int8x16_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Value *v41;
  const void *v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::Value *v47;
  const void *v48;
  size_t v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  unint64_t v54;
  __int8 *v55;
  int8x16_t *v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  const void *v60;
  size_t v61;
  size_t v62;
  uint64_t v63;
  llvm::Value *v64;
  llvm::Value *v65;
  const void *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  __int8 *v72;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  const void *v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  llvm::Value *v80;
  llvm::Value *v81;
  const void *v82;
  size_t v83;
  size_t v84;
  size_t v85;
  int v86;
  int v87;
  int8x16_t *v88;
  uint64_t v89;
  int8x16_t *v90;
  uint64_t v91;
  llvm::Value *v92;
  llvm::Value *v93;
  const void *v94;
  size_t v95;
  size_t v96;
  uint64_t v97;
  llvm::Value *v98;
  llvm::Value *v99;
  const void *v100;
  size_t v101;
  size_t v102;
  size_t v103;
  int v104;
  int v105;
  int8x16_t *v106;
  uint64_t v107;
  llvm::Value *v108;
  llvm::Value *v109;
  const void *v110;
  size_t v111;
  size_t v112;
  uint64_t v113;
  llvm::Value *v114;
  llvm::Value *v115;
  const void *v116;
  size_t v117;
  size_t v118;
  size_t v119;
  int v120;
  int v121;
  uint64_t *v122;
  BOOL v123;
  BOOL v124;
  int8x16_t result;
  uint64_t v126;
  const void *v127;
  size_t v128;
  size_t v129;
  uint64_t v130;
  llvm::Value *v131;
  llvm::Value *v132;
  uint64_t *v133;
  const void *v134;
  size_t v135;
  size_t v136;
  size_t v137;
  int v138;
  int8x16_t *v139;
  uint64_t v140;
  uint64_t v141;
  llvm::Value *v142;
  uint64_t v143;
  const void *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  llvm::Value *v149;
  const void *v150;
  unint64_t v151;
  unint64_t v152;
  size_t v153;
  int v154;
  int v155;
  int8x16_t *v156;
  uint64_t v157;
  llvm::Value *v158;
  llvm::Value *v159;
  uint64_t v160;
  const void *v161;
  size_t v162;
  size_t v163;
  uint64_t v164;
  llvm::Value *v165;
  llvm::Value *v166;
  const void *v167;
  size_t v168;
  size_t v169;
  size_t v170;
  int v171;
  int v172;
  int8x16_t *v173;
  uint64_t *v174;
  uint64_t v175;
  llvm::Value *v176;
  llvm::Value *v177;
  uint64_t v178;
  const void *v179;
  size_t v180;
  size_t v181;
  uint64_t v182;
  llvm::Value *v183;
  llvm::Value *v184;
  const void *v185;
  size_t v186;
  size_t v187;
  size_t v188;
  int v189;
  int v190;
  uint64_t v191;
  int8x16_t *v192;
  uint64_t v193;
  uint64_t v194;
  llvm::Value *v195;
  llvm::Value *v196;
  const void *v197;
  size_t v198;
  size_t v199;
  uint64_t v200;
  llvm::Value *v201;
  llvm::Value *v202;
  const void *v203;
  size_t v204;
  size_t v205;
  size_t v206;
  int v207;
  int v208;
  int8x16_t *v209;
  uint64_t v210;
  uint64_t v211;
  llvm::Value *v212;
  llvm::Value *v213;
  const void *v214;
  size_t v215;
  size_t v216;
  uint64_t v217;
  llvm::Value *v218;
  llvm::Value *v219;
  const void *v220;
  size_t v221;
  size_t v222;
  size_t v223;
  int v224;
  int v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  llvm::Value *v229;
  llvm::Value *v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  llvm::Value *v236;
  llvm::Value *v237;
  uint64_t *v238;
  BOOL v239;
  char v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  llvm::Value *v245;
  llvm::Value *v246;
  uint64_t v247;
  const void *v248;
  size_t v249;
  size_t v250;
  uint64_t v251;
  llvm::Value *v252;
  llvm::Value *v253;
  int8x16_t *v254;
  const void *v255;
  size_t v256;
  size_t v257;
  size_t v258;
  int v259;
  uint64_t v260;
  unsigned int *v261;
  uint64_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  llvm::Value *v266;
  llvm::Value *v267;
  uint64_t v268;
  const void *v269;
  size_t v270;
  size_t v271;
  uint64_t v272;
  llvm::Value *v273;
  llvm::Value *v274;
  const void *v275;
  size_t v276;
  size_t v277;
  size_t v278;
  int v279;
  int v280;
  uint64_t *v281;
  int64_t v282;
  int64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  uint64_t v287;
  llvm::Value *v288;
  llvm::Value *v289;
  uint64_t v290;
  const void *v291;
  size_t v292;
  size_t v293;
  uint64_t v294;
  llvm::Value *v295;
  llvm::Value *v296;
  const void *v297;
  size_t v298;
  size_t v299;
  size_t v300;
  int v301;
  int v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  llvm::Value *v306;
  llvm::Value *v307;
  const void *v308;
  size_t v309;
  size_t v310;
  uint64_t v311;
  llvm::Value *v312;
  llvm::Value *v313;
  const void *v314;
  size_t v315;
  size_t v316;
  size_t v317;
  int v318;
  unsigned int *v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  llvm::Value *v327;
  uint64_t v328;
  const void *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  llvm::Value *v334;
  const void *v335;
  unint64_t v336;
  unint64_t v337;
  size_t v338;
  int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  llvm::Value *v343;
  const void *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  llvm::Value *v349;
  const void *v350;
  unint64_t v351;
  unint64_t v352;
  size_t v353;
  int v354;
  int v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  llvm::Value *v362;
  llvm::Value *v363;
  uint64_t v364;
  const void *v365;
  size_t v366;
  size_t v367;
  uint64_t v368;
  llvm::Value *v369;
  llvm::Value *v370;
  const void *v371;
  size_t v372;
  size_t v373;
  size_t v374;
  int v375;
  int v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  llvm::Value *v382;
  llvm::Value *v383;
  uint64_t v384;
  const void *v385;
  size_t v386;
  size_t v387;
  uint64_t v388;
  llvm::Value *v389;
  llvm::Value *v390;
  const void *v391;
  size_t v392;
  size_t v393;
  size_t v394;
  int v395;
  unsigned int *v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  llvm::Value *v400;
  const void *v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  llvm::Value *v406;
  const void *v407;
  unint64_t v408;
  unint64_t v409;
  size_t v410;
  int v411;
  int v412;
  uint64_t *v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t *v417;
  llvm::Value *v418;
  llvm::Value *v419;
  uint64_t v420;
  const void *v421;
  size_t v422;
  size_t v423;
  uint64_t v424;
  llvm::Value *v425;
  llvm::Value *v426;
  const void *v427;
  size_t v428;
  size_t v429;
  size_t v430;
  int v431;
  uint64_t v432;
  unsigned int *v433;
  uint64_t *v434;
  uint64_t v435;
  llvm::Value *v436;
  llvm::Value *v437;
  uint64_t v438;
  const void *v439;
  size_t v440;
  size_t v441;
  uint64_t v442;
  llvm::Value *v443;
  llvm::Value *v444;
  const void *v445;
  size_t v446;
  size_t v447;
  size_t v448;
  int v449;
  int v450;
  const void *Name;
  size_t v452;
  size_t v453;
  uint64_t v454;
  llvm::Value *v455;
  llvm::Value *v456;
  const void *v457;
  size_t v458;
  size_t v459;
  uint64_t v460;
  llvm::Value *v461;
  llvm::Value *v462;
  const void *v463;
  size_t v464;
  size_t v465;
  size_t v466;
  int v467;
  uint64_t v468;
  const void *v469;
  size_t v470;
  size_t v471;
  size_t v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  llvm::Value *v477;
  llvm::Value *v478;
  const void *v479;
  size_t v480;
  size_t v481;
  uint64_t v482;
  llvm::Value *v483;
  llvm::Value *v484;
  const void *v485;
  size_t v486;
  size_t v487;
  size_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  llvm::Value *v494;
  llvm::Value *v495;
  const void *v496;
  size_t v497;
  size_t v498;
  uint64_t v499;
  llvm::Value *v500;
  llvm::Value *v501;
  const void *v502;
  size_t v503;
  size_t v504;
  size_t v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  llvm::Value *v511;
  llvm::Value *v512;
  const void *v513;
  size_t v514;
  size_t v515;
  uint64_t v516;
  llvm::Value *v517;
  llvm::Value *v518;
  const void *v519;
  size_t v520;
  size_t v521;
  size_t v522;
  int v523;
  uint64_t v524;
  int64_t v526;
  uint64_t *v527;
  int64_t v528;
  uint64_t v529;
  uint64_t v530;
  int8x16_t *v532;
  uint64_t v533;

BOOL sub_22F23E134(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  const void *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __int8 *v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t v37;
  const void *v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  llvm::Value *v42;
  llvm::Value *v43;
  const void *v44;
  size_t v45;
  size_t v46;
  size_t v47;
  int v48;
  int v49;
  uint64_t *v50;
  int8x16_t *v51;
  __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Value *v56;
  const void *Name;
  size_t v58;
  size_t v59;
  uint64_t v60;
  llvm::Value *v61;
  llvm::Value *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::Value *v68;
  const void *v69;
  size_t v70;
  size_t v71;
  size_t v72;
  int v73;
  uint64_t v74;
  const void *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Value *v83;
  llvm::Value *v84;
  const void *v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  llvm::Value *v89;
  llvm::Value *v90;
  const void *v91;
  size_t v92;
  size_t v93;
  size_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  llvm::Value *v100;
  llvm::Value *v101;
  const void *v102;
  size_t v103;
  size_t v104;
  uint64_t v105;
  llvm::Value *v106;
  llvm::Value *v107;
  const void *v108;
  size_t v109;
  size_t v110;
  size_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  llvm::Value *v117;
  llvm::Value *v118;
  const void *v119;
  size_t v120;
  size_t v121;
  uint64_t v122;
  llvm::Value *v123;
  llvm::Value *v124;
  const void *v125;
  size_t v126;
  size_t v127;
  size_t v128;
  int v129;
  int8x16_t *v130;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a1->i64[0];
      v7 = *(_QWORD *)(a2[-1].i64[1] - 8 * *(unsigned int *)(a2[-1].i64[1] + 8) + 8);
      if (v7)
      {
        v8 = *(llvm::Value **)(v7 + 128);
        if (*((_BYTE *)v8 + 16) == 3)
          v9 = v8;
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      Name = (const void *)llvm::Value::getName(v9);
      v59 = v58;
      v60 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
      if (v60)
      {
        v61 = *(llvm::Value **)(v60 + 128);
        if (*((_BYTE *)v61 + 16) == 3)
          v62 = v61;
        else
          v62 = 0;
      }
      else
      {
        v62 = 0;
      }
      v69 = (const void *)llvm::Value::getName(v62);
      v71 = v70;
      if (v70 >= v59)
        v72 = v59;
      else
        v72 = v70;
      if (v72 && (v73 = memcmp(Name, v69, v72)) != 0)
      {
        if ((v73 & 0x80000000) == 0)
          return 1;
      }
      else if (v59 >= v71)
      {
        return 1;
      }
      v74 = a1->i64[0];
      a1->i64[0] = v2[-1].i64[1];
      v2[-1].i64[1] = v74;
      return 1;
    case 3:
      sub_22F23BCEC(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      sub_22F23C654(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v51 = a1 + 1;
      v52 = &a1[1].i8[8];
      sub_22F23C654(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      v53 = a1[1].i64[1];
      v54 = *(_QWORD *)(v2[-1].i64[1] - 8 * *(unsigned int *)(v2[-1].i64[1] + 8) + 8);
      if (v54)
      {
        v55 = *(llvm::Value **)(v54 + 128);
        if (*((_BYTE *)v55 + 16) == 3)
          v56 = v55;
        else
          v56 = 0;
      }
      else
      {
        v56 = 0;
      }
      v63 = (const void *)llvm::Value::getName(v56);
      v65 = v64;
      v66 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8) + 8);
      if (v66)
      {
        v67 = *(llvm::Value **)(v66 + 128);
        if (*((_BYTE *)v67 + 16) == 3)
          v68 = v67;
        else
          v68 = 0;
      }
      else
      {
        v68 = 0;
      }
      v75 = (const void *)llvm::Value::getName(v68);
      v77 = v76;
      if (v76 >= v65)
        v78 = v65;
      else
        v78 = v76;
      if (v78 && (v79 = memcmp(v63, v75, v78)) != 0)
      {
        if ((v79 & 0x80000000) == 0)
          return 1;
      }
      else if (v65 >= v77)
      {
        return 1;
      }
      v80 = *(_QWORD *)v52;
      *(_QWORD *)v52 = v2[-1].i64[1];
      v2[-1].i64[1] = v80;
      v81 = v51->i64[0];
      v82 = *(_QWORD *)(*(_QWORD *)v52 - 8 * *(unsigned int *)(*(_QWORD *)v52 + 8) + 8);
      if (v82)
      {
        v83 = *(llvm::Value **)(v82 + 128);
        if (*((_BYTE *)v83 + 16) == 3)
          v84 = v83;
        else
          v84 = 0;
      }
      else
      {
        v84 = 0;
      }
      v85 = (const void *)llvm::Value::getName(v84);
      v87 = v86;
      v88 = *(_QWORD *)(v81 - 8 * *(unsigned int *)(v81 + 8) + 8);
      if (v88)
      {
        v89 = *(llvm::Value **)(v88 + 128);
        if (*((_BYTE *)v89 + 16) == 3)
          v90 = v89;
        else
          v90 = 0;
      }
      else
      {
        v90 = 0;
      }
      v91 = (const void *)llvm::Value::getName(v90);
      v93 = v92;
      if (v92 >= v87)
        v94 = v87;
      else
        v94 = v92;
      if (v94 && (v95 = memcmp(v85, v91, v94)) != 0)
      {
        if ((v95 & 0x80000000) == 0)
          return 1;
      }
      else if (v87 >= v93)
      {
        return 1;
      }
      v96 = v51->i64[0];
      v97 = *(_QWORD *)v52;
      v51->i64[0] = *(_QWORD *)v52;
      *(_QWORD *)v52 = v96;
      v98 = a1->i64[1];
      v99 = *(_QWORD *)(v97 - 8 * *(unsigned int *)(v97 + 8) + 8);
      if (v99)
      {
        v100 = *(llvm::Value **)(v99 + 128);
        if (*((_BYTE *)v100 + 16) == 3)
          v101 = v100;
        else
          v101 = 0;
      }
      else
      {
        v101 = 0;
      }
      v102 = (const void *)llvm::Value::getName(v101);
      v104 = v103;
      v105 = *(_QWORD *)(v98 - 8 * *(unsigned int *)(v98 + 8) + 8);
      if (v105)
      {
        v106 = *(llvm::Value **)(v105 + 128);
        if (*((_BYTE *)v106 + 16) == 3)
          v107 = v106;
        else
          v107 = 0;
      }
      else
      {
        v107 = 0;
      }
      v108 = (const void *)llvm::Value::getName(v107);
      v110 = v109;
      if (v109 >= v104)
        v111 = v104;
      else
        v111 = v109;
      if (v111 && (v112 = memcmp(v102, v108, v111)) != 0)
      {
        if ((v112 & 0x80000000) == 0)
          return 1;
      }
      else if (v104 >= v110)
      {
        return 1;
      }
      v114 = a1->i64[1];
      v113 = a1[1].i64[0];
      v115 = a1->i64[0];
      a1->i64[1] = v113;
      a1[1].i64[0] = v114;
      v116 = *(_QWORD *)(v113 - 8 * *(unsigned int *)(v113 + 8) + 8);
      if (v116)
      {
        v117 = *(llvm::Value **)(v116 + 128);
        if (*((_BYTE *)v117 + 16) == 3)
          v118 = v117;
        else
          v118 = 0;
      }
      else
      {
        v118 = 0;
      }
      v119 = (const void *)llvm::Value::getName(v118);
      v121 = v120;
      v122 = *(_QWORD *)(v115 - 8 * *(unsigned int *)(v115 + 8) + 8);
      if (v122)
      {
        v123 = *(llvm::Value **)(v122 + 128);
        if (*((_BYTE *)v123 + 16) == 3)
          v124 = v123;
        else
          v124 = 0;
      }
      else
      {
        v124 = 0;
      }
      v125 = (const void *)llvm::Value::getName(v124);
      v127 = v126;
      if (v126 >= v121)
        v128 = v121;
      else
        v128 = v126;
      if (v128 && (v129 = memcmp(v119, v125, v128)) != 0)
      {
        if ((v129 & 0x80000000) == 0)
          return 1;
      }
      else if (v121 >= v127)
      {
        return 1;
      }
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    default:
      v10 = a1 + 1;
      sub_22F23BCEC(a1->i64, &a1->i64[1], a1[1].i64);
      v11 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v12 = 0;
      v13 = 16;
      v130 = v2;
      break;
  }
  do
  {
    v14 = *(_QWORD *)(v11->i64[0] - 8 * *(unsigned int *)(v11->i64[0] + 8) + 8);
    if (v14)
    {
      v15 = *(llvm::Value **)(v14 + 128);
      if (*((_BYTE *)v15 + 16) == 3)
        v16 = v15;
      else
        v16 = 0;
    }
    else
    {
      v16 = 0;
    }
    v17 = v10->i64[0];
    v18 = (const void *)llvm::Value::getName(v16);
    v20 = v19;
    v21 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8);
    if (v21)
    {
      v22 = *(llvm::Value **)(v21 + 128);
      if (*((_BYTE *)v22 + 16) == 3)
        v23 = v22;
      else
        v23 = 0;
    }
    else
    {
      v23 = 0;
    }
    v24 = (const void *)llvm::Value::getName(v23);
    v26 = v25;
    if (v25 >= v20)
      v27 = v20;
    else
      v27 = v25;
    if (v27 && (v28 = memcmp(v18, v24, v27)) != 0)
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_50;
    }
    else if (v20 >= v26)
    {
      goto LABEL_50;
    }
    v29 = v11->i64[0];
    v30 = (unsigned int *)(v11->i64[0] + 8);
    v31 = v13;
    while (1)
    {
      v32 = v31;
      v33 = &a1->i8[v31];
      *(uint64_t *)((char *)&a1->i64[1] + v31) = *(uint64_t *)((char *)a1->i64 + v31);
      if (!v31)
        break;
      v34 = *(_QWORD *)&v30[-2 * *v30];
      if (v34)
      {
        v35 = *(llvm::Value **)(v34 + 128);
        if (*((_BYTE *)v35 + 16) == 3)
          v36 = v35;
        else
          v36 = 0;
      }
      else
      {
        v36 = 0;
      }
      v37 = *((_QWORD *)v33 - 1);
      v38 = (const void *)llvm::Value::getName(v36);
      v40 = v39;
      v41 = *(_QWORD *)(v37 - 8 * *(unsigned int *)(v37 + 8) + 8);
      if (v41)
      {
        v42 = *(llvm::Value **)(v41 + 128);
        if (*((_BYTE *)v42 + 16) == 3)
          v43 = v42;
        else
          v43 = 0;
      }
      else
      {
        v43 = 0;
      }
      v44 = (const void *)llvm::Value::getName(v43);
      v46 = v45;
      if (v45 >= v40)
        v47 = v40;
      else
        v47 = v45;
      if (v47 && (v48 = memcmp(v38, v44, v47)) != 0)
      {
        v49 = (v48 >> 31) | 1;
      }
      else
      {
        if (v40 >= v46)
          goto LABEL_47;
        v49 = -1;
      }
      v31 = v32 - 8;
      if (v49 != -1)
      {
LABEL_47:
        v50 = (uint64_t *)((char *)a1->i64 + v32);
        goto LABEL_49;
      }
    }
    v50 = (uint64_t *)a1;
LABEL_49:
    v2 = v130;
    *v50 = v29;
    if (++v12 == 8)
      return &v11->u64[1] == (unint64_t *)v130;
LABEL_50:
    v10 = v11;
    v13 += 8;
    v11 = (int8x16_t *)((char *)v11 + 8);
  }
  while (v11 != v2);
  return 1;
}

_QWORD *sub_22F23E724(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = 16 * v3;
      v14 = (uint64_t *)v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          v16 = v20;
          v17 = v14[1];
          *v20 = *v14;
          v16[1] = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 16 * v18;
      do
      {
        *result = -4096;
        result += 2;
        v19 -= 16;
      }
      while (v19);
    }
  }
  return result;
}

_QWORD *sub_22F23E860(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22F23E8E0(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  llvm::GlobalValue *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  llvm *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::GlobalValue *v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  llvm *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void ***v28;
  void ***v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  __int32 v33;
  int8x8_t *v34;
  uint64_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  uint8x8_t v38;
  int v39;
  unint64_t v40;
  int v41;
  _DWORD *v42;
  llvm *v43;
  llvm *v44;
  unsigned int v45;
  llvm *v46;
  llvm *v47;
  llvm *v48;
  void **v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  void **v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  char *v57;
  _OWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  void ***v69;
  void **v70;
  int v71;
  llvm *v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  void **v76;
  void **v77;
  unint64_t v78;

  v6 = a2 + 8;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 != a2 + 8)
  {
    while (1)
    {
      v8 = v7 ? (llvm::GlobalValue *)(v7 - 56) : 0;
      if (!sub_22F44885C((uint64_t)a1, v8))
      {
        sub_22F23F4D0((uint64_t)&v72, (uint64_t)a1, v8);
        if ((_BYTE)v73)
          break;
      }
LABEL_13:
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v6)
        goto LABEL_24;
    }
    v9 = v77;
    if ((unint64_t)v77 >= v78)
    {
      v11 = (void **)sub_22F240DD0((uint64_t)&v76, (uint64_t *)&v72);
LABEL_11:
      v77 = v11;
      if ((_BYTE)v73)
        sub_22E54C5D0((void ***)&v72);
      goto LABEL_13;
    }
    *v77 = (void *)1;
    v10 = (uint64_t)v72;
    if ((v72 & 1) != 0)
    {
LABEL_9:
      *v9 = v10;
      v11 = (void **)(v9 + 1);
      goto LABEL_11;
    }
    v10 = operator new();
    v12 = v72;
    v13 = (void *)(v10 + 16);
    *(_QWORD *)v10 = v10 + 16;
    *(_QWORD *)(v10 + 8) = 0x600000000;
    if ((llvm *)v10 == v12 || (v14 = *((unsigned int *)v12 + 2), !*((_DWORD *)v12 + 2)))
    {
LABEL_23:
      *(_DWORD *)(v10 + 64) = *((_DWORD *)v12 + 16);
      goto LABEL_9;
    }
    if (v14 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *((unsigned int *)v12 + 2);
      if (!(_DWORD)v15)
      {
LABEL_22:
        *(_DWORD *)(v10 + 8) = v14;
        goto LABEL_23;
      }
      v13 = *(void **)v10;
    }
    else
    {
      v15 = *((unsigned int *)v12 + 2);
    }
    memcpy(v13, *(const void **)v12, 8 * v15);
    goto LABEL_22;
  }
LABEL_24:
  v16 = a2 + 24;
  v17 = *(_QWORD *)(a2 + 32);
  if (v17 != a2 + 24)
  {
    while (1)
    {
      v18 = v17 ? (llvm::GlobalValue *)(v17 - 56) : 0;
      sub_22F23F4D0((uint64_t)&v72, (uint64_t)a1, v18);
      if ((_BYTE)v73)
        break;
LABEL_35:
      v17 = *(_QWORD *)(v17 + 8);
      if (v17 == v16)
        goto LABEL_46;
    }
    v19 = v77;
    if ((unint64_t)v77 >= v78)
    {
      v21 = (void **)sub_22F240DD0((uint64_t)&v76, (uint64_t *)&v72);
LABEL_33:
      v77 = v21;
      if ((_BYTE)v73)
        sub_22E54C5D0((void ***)&v72);
      goto LABEL_35;
    }
    *v77 = (void *)1;
    v20 = (uint64_t)v72;
    if ((v72 & 1) != 0)
    {
LABEL_31:
      *v19 = v20;
      v21 = (void **)(v19 + 1);
      goto LABEL_33;
    }
    v20 = operator new();
    v22 = v72;
    v23 = (void *)(v20 + 16);
    *(_QWORD *)v20 = v20 + 16;
    *(_QWORD *)(v20 + 8) = 0x600000000;
    if ((llvm *)v20 == v22 || (v24 = *((unsigned int *)v22 + 2), !*((_DWORD *)v22 + 2)))
    {
LABEL_45:
      *(_DWORD *)(v20 + 64) = *((_DWORD *)v22 + 16);
      goto LABEL_31;
    }
    if (v24 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *((unsigned int *)v22 + 2);
      if (!(_DWORD)v25)
      {
LABEL_44:
        *(_DWORD *)(v20 + 8) = v24;
        goto LABEL_45;
      }
      v23 = *(void **)v20;
    }
    else
    {
      v25 = *((unsigned int *)v22 + 2);
    }
    memcpy(v23, *(const void **)v22, 8 * v25);
    goto LABEL_44;
  }
LABEL_46:
  v26 = (a1[1] - *a1) >> 3;
  if (v26 > 0x39)
  {
    v27 = operator new();
    *(_QWORD *)v27 = v27 + 16;
    *(_QWORD *)(v27 + 8) = 0x600000000;
    sub_22E47EDD0(v27, (v26 + 63) >> 6, 0);
    *(_DWORD *)(v27 + 64) = v26;
  }
  else
  {
    v27 = ((unint64_t)v26 << 58) | 1;
  }
  v75 = v27;
  v28 = (void ***)v76;
  v29 = (void ***)v77;
  if (v76 != v77)
  {
LABEL_49:
    v72 = 0;
    v73 = 0;
    v30 = (unint64_t *)v28;
    v74 = 0;
    while (1)
    {
      v31 = *v30;
      if ((*v30 & 1) != 0)
        break;
      v32 = *(unsigned int *)(v31 + 8);
      if ((_DWORD)v32)
      {
        v33 = 0;
        v34 = *(int8x8_t **)v31;
        v35 = 8 * v32;
        do
        {
          v36 = *v34++;
          v37 = (uint8x8_t)vcnt_s8(v36);
          v37.i16[0] = vaddlv_u8(v37);
          v33 += v37.i32[0];
          v35 -= 8;
        }
        while (v35);
LABEL_56:
        if (v33 == 1)
        {
          sub_22EF0ADFC(&v75, v30);
          v31 = *v30;
        }
      }
      if ((v31 & 1) == 0)
      {
        v39 = sub_22E9A4F54(v31);
        goto LABEL_63;
      }
      v40 = (v31 >> 1) & ~(-1 << (v31 >> 58));
      if (v40)
      {
        v41 = __clz(__rbit64(v40));
        do
        {
          v71 = v41;
          v42 = sub_22E742CE8((uint64_t)&v72, &v71);
          ++v42[1];
          v39 = sub_22F240F84(*v30, v41);
LABEL_63:
          v41 = v39;
        }
        while (v39 != -1);
      }
      if (++v30 == (unint64_t *)v29)
      {
        if ((_DWORD)v73)
        {
          if (v74)
          {
            v54 = 8 * v74;
            v43 = v72;
            while (*(_DWORD *)v43 >= 0xFFFFFFFE)
            {
              v43 = (llvm *)((char *)v43 + 8);
              v54 -= 8;
              if (!v54)
                goto LABEL_66;
            }
          }
          else
          {
            v43 = v72;
          }
        }
        else
        {
LABEL_66:
          v43 = (llvm *)((char *)v72 + 8 * v74);
        }
        v44 = (llvm *)((char *)v72 + 8 * v74);
        if (v43 != v44)
        {
          v46 = v43;
          while (1)
          {
            v47 = (llvm *)((char *)v46 + 8);
            while (1)
            {
              v48 = v47;
              if (v47 == (llvm *)((char *)v72 + 8 * v74))
                break;
              v47 = (llvm *)((char *)v47 + 8);
              if (*(_DWORD *)v48 <= 0xFFFFFFFD)
              {
                v46 = v48;
                goto LABEL_78;
              }
            }
            v46 = (llvm *)((char *)v72 + 8 * v74);
LABEL_78:
            if (v46 == v44)
              break;
            if (*((_DWORD *)v43 + 1) < *((_DWORD *)v48 + 1))
              v43 = v46;
          }
        }
        v45 = *(_DWORD *)v43;
        if ((v75 & 1) != 0)
          v75 = v75 & 0xFC00000000000000 | (2
                                            * (((v75 >> 1) & ~(-1 << (v75 >> 58)) | (1 << v45)) & ~(-1 << (v75 >> 58)))) | 1;
        else
          *(_QWORD *)(*(_QWORD *)v75 + 8 * (v45 >> 6)) |= 1 << v45;
        if (v28 == v29)
        {
LABEL_87:
          v28 = v29;
        }
        else
        {
          v49 = (void **)v75;
          v50 = (unint64_t *)v28;
          while (1)
          {
            v51 = *v50++;
            if (sub_22F241068((unint64_t)v49, v51))
              break;
            v28 = (void ***)v50;
            if (v50 == (unint64_t *)v29)
              goto LABEL_87;
          }
          if (v50 != (unint64_t *)v29)
          {
            v52 = (unint64_t *)(v28 + 1);
            do
            {
              if ((sub_22F241068(v75, *v52) & 1) == 0)
              {
                if (v52 != (unint64_t *)v28)
                {
                  sub_22EDCB260(v28);
                  v53 = *v28;
                  *v28 = (void **)*v52;
                  *v52 = (unint64_t)v53;
                }
                ++v28;
              }
              ++v52;
            }
            while (v52 != (unint64_t *)v29);
            v29 = (void ***)v77;
          }
        }
        sub_22F4488C0(&v76, v28, v29);
        llvm::deallocate_buffer(v72, (void *)(8 * v74));
        v28 = (void ***)v76;
        v29 = (void ***)v77;
        if (v76 == v77)
        {
          v27 = v75;
          goto LABEL_102;
        }
        goto LABEL_49;
      }
    }
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)((v31 >> 1) & ~(-1 << (v31 >> 58))));
    v38.i16[0] = vaddlv_u8(v38);
    v33 = v38.i32[0];
    goto LABEL_56;
  }
LABEL_102:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((v27 & 1) != 0)
  {
    v56 = (v27 >> 1) & ~(-1 << (v27 >> 58));
    if (!v56)
      goto LABEL_127;
    v55 = __clz(__rbit64(v56));
  }
  else
  {
    v55 = sub_22E9A4F54(v27);
    if (v55 == -1)
      goto LABEL_127;
  }
  v57 = 0;
  do
  {
    v58 = (_OWORD *)(a1[3] + 16 * v55);
    v59 = (unint64_t)a3[2];
    if ((unint64_t)v57 >= v59)
    {
      v61 = *a3;
      v62 = (v57 - *a3) >> 4;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60)
        abort();
      v64 = v59 - (_QWORD)v61;
      if (v64 >> 3 > v63)
        v63 = v64 >> 3;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
        v65 = 0xFFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        if (v65 >> 60)
          sub_22E3B3F8C();
        v66 = (char *)operator new(16 * v65);
      }
      else
      {
        v66 = 0;
      }
      v67 = &v66[16 * v62];
      *(_OWORD *)v67 = *v58;
      v68 = v67;
      if (v57 != v61)
      {
        do
        {
          *((_OWORD *)v68 - 1) = *((_OWORD *)v57 - 1);
          v68 -= 16;
          v57 -= 16;
        }
        while (v57 != v61);
        v57 = *a3;
      }
      v60 = v67 + 16;
      *a3 = v68;
      a3[1] = v67 + 16;
      a3[2] = &v66[16 * v65];
      if (v57)
        operator delete(v57);
    }
    else
    {
      *(_OWORD *)v57 = *v58;
      v60 = v57 + 16;
    }
    a3[1] = v60;
    v55 = sub_22F240F84(v75, v55);
    v57 = v60;
  }
  while (v55 != -1);
  v28 = (void ***)v76;
LABEL_127:
  sub_22E54C5D0((void ***)&v75);
  if (v28)
  {
    v69 = (void ***)v77;
    v70 = (void **)v28;
    if (v77 != (void **)v28)
    {
      do
        v69 = sub_22E54C5D0(v69 - 1);
      while (v69 != v28);
      v70 = v76;
    }
    v77 = (void **)v28;
    operator delete(v70);
  }
}

void sub_22F23F018(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Module *v5;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *Name;
  size_t v11;
  const void *v12;
  size_t v13;
  _QWORD *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t j;
  llvm::Value *v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  _QWORD *v23;
  llvm::NamedMDNode *v24;
  int NumOperands;
  int v26;
  int i;
  uint64_t Operand;
  uint64_t v29;
  char *v30;
  llvm::StringMapImpl *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  const void *v35;
  size_t v36;
  const char *v37;
  __int16 v38;
  void **v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x24BDAC8D0];
  v40 = v42;
  v41 = 0x800000000;
  sub_22E99E680((unint64_t *)&v39, (a1[1] - *a1) >> 3, 0);
  v2 = a1[1] - *a1;
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    v4 = (v2 >> 3);
    do
    {
      v5 = *(llvm::Module **)(*a1 + 8 * v3);
      v37 = "air.function_constants";
      v38 = 259;
      NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v5, (const llvm::Twine *)&v37);
      if (NamedMetadata)
      {
        v24 = NamedMetadata;
        NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
        if (NumOperands)
        {
          v26 = NumOperands;
          for (i = 0; i != v26; ++i)
          {
            Operand = llvm::NamedMDNode::getOperand(v24);
            v29 = v41;
            if (v41 >= (unint64_t)HIDWORD(v41))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = v41;
            }
            *((_QWORD *)v40 + v29) = Operand;
            LODWORD(v41) = v41 + 1;
          }
        }
      }
      v7 = *(_QWORD *)(*a1 + 8 * v3);
      v8 = v7 + 8;
      v9 = *(_QWORD *)(v7 + 16);
      if (v9 != v7 + 8)
      {
        do
        {
          if (v9)
            v15 = (llvm::Value *)(v9 - 56);
          else
            v15 = 0;
          if ((llvm::GlobalValue::isDeclaration(v15) & 1) == 0 && (*((_DWORD *)v15 + 8) & 0xE) != 6)
          {
            Name = (const void *)llvm::Value::getName(v15);
            sub_22F23F33C((llvm::StringMapImpl *)(a1 + 6), Name, v11, (uint64_t *)&v39);
            v12 = (const void *)llvm::Value::getName(v15);
            v14 = sub_22F240CD8((llvm::StringMapImpl *)(a1 + 6), v12, v13);
            sub_22E54C570((unint64_t *)(*v14 + 8), v3);
          }
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9 != v8);
        v7 = *(_QWORD *)(*a1 + 8 * v3);
      }
      v16 = v7 + 24;
      for (j = *(_QWORD *)(v7 + 32); j != v16; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v18 = (llvm::Value *)(j - 56);
        else
          v18 = 0;
        if ((llvm::GlobalValue::isDeclaration(v18) & 1) == 0 && (*((_DWORD *)v18 + 8) & 0xE) != 6)
        {
          v19 = (const void *)llvm::Value::getName(v18);
          sub_22F23F33C((llvm::StringMapImpl *)(a1 + 6), v19, v20, (uint64_t *)&v39);
          v21 = (const void *)llvm::Value::getName(v18);
          v23 = sub_22F240CD8((llvm::StringMapImpl *)(a1 + 6), v21, v22);
          sub_22E54C570((unint64_t *)(*v23 + 8), v3);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  if ((_DWORD)v41)
  {
    v30 = (char *)v40;
    v31 = (llvm::StringMapImpl *)(a1 + 10);
    v32 = 8 * v41;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)v30 - 8 * *(unsigned int *)(*(_QWORD *)v30 + 8));
      if (v33)
      {
        v34 = *(llvm::Value **)(v33 + 128);
        if (*((_BYTE *)v34 + 16) == 3)
        {
          v35 = (const void *)llvm::Value::getName(v34);
          sub_22E3B39D4(v31, v35, v36);
        }
      }
      v30 += 8;
      v32 -= 8;
    }
    while (v32);
  }
  sub_22E54C5D0(&v39);
  if (v40 != v42)
    free(v40);
}

uint64_t sub_22F23F33C(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *i;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;

  result = llvm::StringMapImpl::LookupBucketFor();
  v9 = *(_QWORD *)a1;
  v10 = result;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v11)
  {
    if (v11 != -8)
      return result;
    --*((_DWORD *)a1 + 4);
  }
  v12 = MEMORY[0x23489D23C](a3 + 17, 8);
  v13 = (_QWORD *)v12;
  v14 = v12 + 16;
  if (a3)
    memcpy((void *)(v12 + 16), a2, a3);
  *(_BYTE *)(v14 + a3) = 0;
  *v13 = a3;
  v15 = *a4;
  if ((*a4 & 1) == 0)
  {
    v15 = operator new();
    v18 = *a4;
    v19 = (void *)(v15 + 16);
    *(_QWORD *)v15 = v15 + 16;
    *(_QWORD *)(v15 + 8) = 0x600000000;
    if (v15 == v18)
      goto LABEL_17;
    v20 = *(_DWORD *)(v18 + 8);
    if (!v20)
      goto LABEL_17;
    if (v20 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(v18 + 8);
      if (!v21)
        goto LABEL_16;
      v19 = *(void **)v15;
    }
    else
    {
      v21 = *(_DWORD *)(v18 + 8);
    }
    memcpy(v19, *(const void **)v18, 8 * v21);
LABEL_16:
    *(_DWORD *)(v15 + 8) = v20;
LABEL_17:
    *(_DWORD *)(v15 + 64) = *(_DWORD *)(v18 + 64);
  }
  v13[1] = v15;
  *(_QWORD *)(v9 + 8 * v10) = v13;
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

uint64_t sub_22F23F4D0(uint64_t a1, uint64_t a2, llvm::GlobalValue *this)
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v14;

  result = llvm::GlobalValue::isDeclaration(this);
  if ((result & 1) == 0 && (*((_DWORD *)this + 8) & 0xE) != 6)
  {
    llvm::Value::getName(this);
    result = llvm::StringMapImpl::FindKey();
    if ((_DWORD)result != -1 && (int)result != (unint64_t)*(unsigned int *)(a2 + 56))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (int)result);
      v9 = *(_QWORD *)(v8 + 8);
      if ((v9 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)a1 = v9;
        v7 = 1;
        goto LABEL_6;
      }
      result = operator new();
      v9 = result;
      v10 = *(_QWORD *)(v8 + 8);
      v11 = (void *)(result + 16);
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x600000000;
      v12 = *(_DWORD *)(v10 + 8);
      if (result == v10 || v12 == 0)
      {
LABEL_19:
        *(_DWORD *)(v9 + 64) = *(_DWORD *)(v10 + 64);
        goto LABEL_8;
      }
      if (v12 >= 7)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(_DWORD *)(v10 + 8);
        if (!v14)
        {
LABEL_18:
          *(_DWORD *)(v9 + 8) = v12;
          goto LABEL_19;
        }
        v11 = *(void **)v9;
      }
      else
      {
        v14 = *(_DWORD *)(v10 + 8);
      }
      result = (uint64_t)memcpy(v11, *(const void **)v10, 8 * v14);
      goto LABEL_18;
    }
  }
  v7 = 0;
  *(_BYTE *)a1 = 0;
LABEL_6:
  *(_BYTE *)(a1 + 8) = v7;
  return result;
}

uint64_t sub_22F23F610(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, llvm::Module **a6, uint64_t a7)
{
  unint64_t v9;
  uint64_t v11;
  int64_t v12;
  int v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v23;
  int v24;
  uint64_t v25;
  size_t v26;
  const char *v27;
  __int128 *p_dst;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  _OWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  void **v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Module **v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  __int16 v86;
  __int16 v87;
  int v88;
  char *v89;
  _WORD *v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  __int16 v95;
  int v96;
  char *v97;
  _WORD *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  char v104;
  uint64_t OSVersion;
  int v106;
  unint64_t v107;
  char v108;
  _QWORD *v109;
  _BYTE *v110;
  llvm::Module **v111;
  unint64_t v113;
  uint64_t v115;
  int v117;
  void *v118[2];
  char v119;
  int v120;
  int v121;
  __int128 __dst;
  unint64_t v123;
  void *__p[3];
  _OWORD v125[2];
  __int16 v126;
  uint64_t v127;

  v9 = a3;
  v127 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 1112298573;
  *(_DWORD *)(a1 + 4) = 131073;
  *(_WORD *)(a1 + 8) = 6;
  *(_DWORD *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 14) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 252) = 16;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 8;
  v110 = (_BYTE *)(a1 + 10);
  if (a3)
  {
    v11 = *a2;
    if (*(char *)(*a2 + 239) < 0)
    {
      sub_22E3BB2B4(v125, *(void **)(v11 + 216), *(_QWORD *)(v11 + 224));
    }
    else
    {
      v125[0] = *(_OWORD *)(v11 + 216);
      *(_QWORD *)&v125[1] = *(_QWORD *)(v11 + 232);
    }
  }
  else
  {
    BYTE7(v125[1]) = 18;
    strcpy((char *)v125, "air64-apple-ios8.0");
  }
  v115 = a7;
  v111 = a6;
  v109 = (_QWORD *)(a1 + 184);
  LOWORD(__p[1]) = 260;
  *(_QWORD *)&__dst = v125;
  MEMORY[0x23489F1BC](v118, &__dst);
  if (SBYTE7(v125[1]) < 0)
    operator delete(*(void **)&v125[0]);
  v12 = sub_22F242884((llvm::Triple *)v118);
  v14 = v12 & 0x7FFF;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 4) & 0x8000 | v12 & 0x7FFF;
  if (v12 < 0)
    v15 = WORD2(v12);
  else
    v15 = 0;
  *(_WORD *)(a1 + 6) = v15;
  if (v13 < 0)
    v16 = v13;
  else
    v16 = 0;
  *(_WORD *)(a1 + 8) = v16;
  v17 = operator new(6uLL);
  *v17 = v14;
  v17[1] = v15;
  v17[2] = v16;
  v18 = operator new(6uLL);
  v19 = 0;
  *(_DWORD *)v18 = 131073;
  v18[2] = 3;
  do
  {
    v20 = (unsigned __int16)v17[v19];
    v21 = (unsigned __int16)v18[v19];
  }
  while (v21 == v20 && v19++ != 2);
  operator delete(v18);
  operator delete(v17);
  if (v9)
  {
    v23 = 0;
    v24 = 0;
    v113 = v9;
    do
    {
      v117 = v24;
      if (v9 == a5)
      {
        v25 = a4 + 16 * v23;
        v27 = *(const char **)v25;
        v26 = *(_QWORD *)(v25 + 8);
        if (v20 < v21 || !v27)
          goto LABEL_31;
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_170;
        if (v26 >= 0x17)
        {
          v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v29 = v26 | 7;
          v30 = v29 + 1;
          p_dst = (__int128 *)operator new(v29 + 1);
          *((_QWORD *)&__dst + 1) = v26;
          v123 = v30 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
LABEL_36:
          memmove(p_dst, v27, v26);
          goto LABEL_37;
        }
        HIBYTE(v123) = *(_QWORD *)(v25 + 8);
        p_dst = &__dst;
        if (v26)
          goto LABEL_36;
      }
      else
      {
        if (v20 < v21)
        {
          v26 = 0;
          v27 = "";
LABEL_31:
          *(_QWORD *)((char *)v125 + 7) = 0;
          *(_QWORD *)&v125[0] = 0;
          goto LABEL_39;
        }
        v26 = 0;
        HIBYTE(v123) = 0;
        p_dst = &__dst;
        v27 = "";
      }
LABEL_37:
      *((_BYTE *)p_dst + v26) = 0;
      *(_QWORD *)&v125[0] = 0;
      *(_QWORD *)((char *)v125 + 7) = 0;
      if (SHIBYTE(v123) < 0)
        operator delete((void *)__dst);
LABEL_39:
      if (v27)
      {
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_170;
        if (v26 >= 0x17)
        {
          v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v32 = v26 | 7;
          v33 = v32 + 1;
          v31 = (__int128 *)operator new(v32 + 1);
          *((_QWORD *)&__dst + 1) = v26;
          v123 = v33 | 0x8000000000000000;
          *(_QWORD *)&__dst = v31;
        }
        else
        {
          HIBYTE(v123) = v26;
          v31 = &__dst;
          if (!v26)
            goto LABEL_49;
        }
        memmove(v31, v27, v26);
LABEL_49:
        *((_BYTE *)v31 + v26) = 0;
        goto LABEL_50;
      }
      __dst = 0uLL;
      v123 = 0;
LABEL_50:
      __p[0] = 0;
      __p[1] = *(void **)&v125[0];
      *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v125 + 7);
      HIBYTE(__p[2]) = 0;
      *(_QWORD *)&v125[0] = 0;
      *(_QWORD *)((char *)v125 + 7) = 0;
      v35 = *(void ***)(a1 + 152);
      v34 = *(_QWORD *)(a1 + 160);
      if ((unint64_t)v35 >= v34)
      {
        v37 = *(char **)(a1 + 144);
        v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - v37) >> 4) + 1;
        if (v38 > 0x555555555555555)
          goto LABEL_170;
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v37) >> 4);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x2AAAAAAAAAAAAAALL)
          v40 = 0x555555555555555;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 > 0x555555555555555)
            goto LABEL_171;
          v41 = (char *)operator new(48 * v40);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[16 * (((char *)v35 - v37) >> 4)];
        *((_QWORD *)v42 + 2) = v123;
        *(_OWORD *)v42 = __dst;
        v43 = &v41[48 * v40];
        v123 = 0;
        __dst = 0uLL;
        *(_OWORD *)(v42 + 24) = *(_OWORD *)__p;
        *((void **)v42 + 5) = __p[2];
        memset(__p, 0, sizeof(__p));
        v36 = v42 + 48;
        if (v35 == (void **)v37)
        {
          *(_QWORD *)(a1 + 144) = v42;
          *(_QWORD *)(a1 + 152) = v36;
          *(_QWORD *)(a1 + 160) = v43;
        }
        else
        {
          do
          {
            v48 = *((_OWORD *)v35 - 3);
            *((_QWORD *)v42 - 4) = *(v35 - 4);
            *((_OWORD *)v42 - 3) = v48;
            *(v35 - 5) = 0;
            *(v35 - 4) = 0;
            *(v35 - 6) = 0;
            v49 = *(_OWORD *)(v35 - 3);
            *((_QWORD *)v42 - 1) = *(v35 - 1);
            *(_OWORD *)(v42 - 24) = v49;
            v42 -= 48;
            *(v35 - 2) = 0;
            *(v35 - 1) = 0;
            *(v35 - 3) = 0;
            v35 -= 6;
          }
          while (v35 != (void **)v37);
          v35 = *(void ***)(a1 + 144);
          v50 = *(void ***)(a1 + 152);
          *(_QWORD *)(a1 + 144) = v42;
          *(_QWORD *)(a1 + 152) = v36;
          *(_QWORD *)(a1 + 160) = v43;
          while (v50 != v35)
          {
            if (*((char *)v50 - 1) < 0)
              operator delete(*(v50 - 3));
            if (*((char *)v50 - 25) < 0)
              operator delete(*(v50 - 6));
            v50 -= 6;
          }
        }
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_OWORD *)v35 = __dst;
        v35[2] = (void *)v123;
        v123 = 0;
        __dst = 0uLL;
        *(_OWORD *)(v35 + 3) = *(_OWORD *)__p;
        v35[5] = __p[2];
        memset(__p, 0, sizeof(__p));
        v36 = v35 + 6;
      }
      *(_QWORD *)(a1 + 152) = v36;
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v123) < 0)
        operator delete((void *)__dst);
      v44 = operator new();
      sub_22F448BEC(v44, (llvm::Module *)a2[v23]);
      v46 = *(uint64_t **)(a1 + 128);
      v45 = *(_QWORD *)(a1 + 136);
      if ((unint64_t)v46 >= v45)
      {
        v51 = *(_QWORD **)(a1 + 120);
        v52 = v46 - v51;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61)
LABEL_170:
          abort();
        v54 = v45 - (_QWORD)v51;
        if (v54 >> 2 > v53)
          v53 = v54 >> 2;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 61)
LABEL_171:
            sub_22E3B3F8C();
          v56 = (char *)operator new(8 * v55);
        }
        else
        {
          v56 = 0;
        }
        v57 = (uint64_t *)&v56[8 * v52];
        *v57 = v44;
        v47 = v57 + 1;
        if (v46 == v51)
        {
          v9 = v113;
        }
        else
        {
          v9 = v113;
          do
          {
            v58 = *--v46;
            *--v57 = v58;
          }
          while (v46 != v51);
          v46 = *(uint64_t **)(a1 + 120);
        }
        *(_QWORD *)(a1 + 120) = v57;
        *(_QWORD *)(a1 + 128) = v47;
        *(_QWORD *)(a1 + 136) = &v56[8 * v55];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v46 = v44;
        v47 = v46 + 1;
        v9 = v113;
      }
      *(_QWORD *)(a1 + 128) = v47;
      if (v20 >= v21)
      {
        v60 = *(_QWORD *)(a1 + 144);
        if (*(char *)(v60 + 48 * v23 + 47) < 0)
          v61 = *(_QWORD *)(v60 + 48 * v23 + 32);
        else
          v61 = *(unsigned __int8 *)(v60 + 48 * v23 + 47);
        v59 = v61 != 0;
      }
      else
      {
        v59 = 0;
      }
      *(_BYTE *)(a1 + 168) |= v59;
      v23 = (v117 + 1);
      v24 = v117 + 1;
    }
    while (v9 > v23);
  }
  if (v115)
  {
    v62 = v111;
    do
    {
      v63 = operator new();
      sub_22F448BEC(v63, *v62);
      v65 = *(uint64_t **)(a1 + 128);
      v64 = *(_QWORD *)(a1 + 136);
      if ((unint64_t)v65 >= v64)
      {
        v67 = *(_QWORD **)(a1 + 120);
        v68 = v65 - v67;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_170;
        v70 = v64 - (_QWORD)v67;
        if (v70 >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        if (v71)
        {
          if (v71 >> 61)
            goto LABEL_171;
          v72 = (char *)operator new(8 * v71);
        }
        else
        {
          v72 = 0;
        }
        v73 = (uint64_t *)&v72[8 * v68];
        *v73 = v63;
        v66 = v73 + 1;
        if (v65 != v67)
        {
          do
          {
            v74 = *--v65;
            *--v73 = v74;
          }
          while (v65 != v67);
          v65 = *(uint64_t **)(a1 + 120);
        }
        *(_QWORD *)(a1 + 120) = v73;
        *(_QWORD *)(a1 + 128) = v66;
        *(_QWORD *)(a1 + 136) = &v72[8 * v71];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v65 = v63;
        v66 = v65 + 1;
      }
      *(_QWORD *)(a1 + 128) = v66;
      ++v62;
    }
    while (v62 != &v111[v115]);
  }
  if (v20 >= v21)
  {
    if ((_DWORD)a5)
    {
      v75 = 0;
      v76 = (uint64_t *)(a4 + 8);
      do
      {
        sub_22F4487DC((uint64_t)v109, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + v75) + 72), *(v76 - 1), *v76);
        v75 += 8;
        v76 += 2;
      }
      while (8 * a5 != v75);
    }
    v77 = (uint64_t *)v111;
    if (v115)
    {
      v78 = 8 * v115;
      do
      {
        v79 = *v77++;
        sub_22F4487DC((uint64_t)v109, v79, (uint64_t)"", 0);
        v78 -= 8;
      }
      while (v78);
    }
    sub_22F23F018(v109);
  }
  v81 = *(_QWORD *)(a1 + 120);
  v80 = *(_QWORD *)(a1 + 128);
  if (v80 != v81)
  {
    while (1)
    {
      v82 = *(_QWORD *)(*(_QWORD *)v81 + 72) + 216;
      v126 = 260;
      *(_QWORD *)&v125[0] = v82;
      MEMORY[0x23489F1BC](&__dst, v125);
      v84 = HIDWORD(__p[1]);
      v83 = (int)__p[2];
      if (SHIBYTE(v123) < 0)
        operator delete((void *)__dst);
      if ((v84 & 0xFFFFFFF7) != 3 && v83 != 21)
        break;
      v81 += 8;
      if (v81 == v80)
      {
        v86 = 0x8000;
        goto LABEL_143;
      }
    }
  }
  v86 = 0;
LABEL_143:
  v87 = *(_WORD *)(a1 + 4) & 0x7FFF;
  *(_WORD *)(a1 + 4) = v87 | v86;
  v88 = *(_DWORD *)(a1 + 6);
  v89 = (char *)operator new(6uLL);
  *(_WORD *)v89 = v87;
  *(_DWORD *)(v89 + 2) = v88;
  v90 = operator new(6uLL);
  v91 = 0;
  *(_DWORD *)v90 = 131073;
  v90[2] = 4;
  do
  {
    v92 = *(unsigned __int16 *)&v89[v91 * 2];
    v93 = (unsigned __int16)v90[v91];
  }
  while (v93 == v92 && v91++ != 2);
  operator delete(v90);
  operator delete(v89);
  if (v92 >= v93)
    *v110 = 0;
  v95 = *(_WORD *)(a1 + 4) & 0x7FFF;
  v96 = *(_DWORD *)(a1 + 6);
  v97 = (char *)operator new(6uLL);
  *(_WORD *)v97 = v95;
  *(_DWORD *)(v97 + 2) = v96;
  v98 = operator new(6uLL);
  v99 = 0;
  *(_DWORD *)v98 = 131073;
  v98[2] = 6;
  do
  {
    v100 = *(unsigned __int16 *)&v97[v99 * 2];
    v101 = (unsigned __int16)v98[v99];
  }
  while (v101 == v100 && v99++ != 2);
  operator delete(v98);
  operator delete(v97);
  if (v100 >= v101)
  {
    if (llvm::Triple::isArch64Bit((llvm::Triple *)v118))
      v104 = 0x80;
    else
      v104 = 0;
    *(_BYTE *)(a1 + 11) = v104 & 0x80 | *(_BYTE *)(a1 + 11) & 0x7F;
    sub_22F448960(a1, v120, v121);
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)v118);
    *(_WORD *)(a1 + 12) = OSVersion;
    v107 = HIDWORD(OSVersion);
    if (OSVersion >= 0)
      LOBYTE(v107) = 0;
    *(_BYTE *)(a1 + 14) = v107;
    if (v106 < 0)
      v108 = v106;
    else
      v108 = 0;
    *(_BYTE *)(a1 + 15) = v108;
  }
  if (v119 < 0)
    operator delete(v118[0]);
  return a1;
}

uint64_t sub_22F24001C(uint64_t result, const void *a2, size_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::Value *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::Value *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  const void *Name;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Value *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::Value *v69;
  const void *v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  llvm::Value *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  const void *v81;
  uint64_t v82;
  llvm::Value *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  const void *v87;
  uint64_t v88;
  llvm::Value *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  void **v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _QWORD v120[2];
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD v132[6];
  _QWORD v133[4];
  _QWORD v134[10];
  _QWORD v135[10];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];

  v139[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(result + 120);
  v95 = *(uint64_t **)(result + 128);
  if (v3 != v95)
  {
    v4 = result;
    v94 = (void **)(result + 96);
    do
    {
      v96 = v3;
      v5 = *v3;
      v120[0] = &v121;
      v120[1] = 0x800000000;
      v130 = v132;
      v131 = 0x400000000;
      v132[4] = v133;
      v132[5] = 0x200000000;
      v133[2] = v134;
      v133[3] = 0x800000000;
      v134[8] = v135;
      v134[9] = 0x800000000;
      v135[8] = v136;
      v135[9] = 0x400000000;
      v136[4] = v137;
      v136[5] = 0x400000000;
      v137[4] = v138;
      v137[5] = 0x400000000;
      v138[4] = v139;
      v138[5] = 0x400000000;
      v98 = v5;
      llvm::air::AIRInfoFinder::processModule();
      v6 = v120[0];
      if (v124 == v125)
        goto LABEL_16;
      v7 = v120[0] + 8 * v124;
      v8 = 8 * v125 - 8 * v124;
      do
      {
        v9 = *(_QWORD *)v7;
        v10 = *(_QWORD *)(*(_QWORD *)v7 - 8 * *(unsigned int *)(*(_QWORD *)v7 + 8));
        if (v10)
        {
          v11 = *(llvm::Value **)(v10 + 128);
          if (v11)
          {
            if ((*((_BYTE *)v11 + 32) & 0x30) == 0)
            {
              if (!a3)
                goto LABEL_9;
              Name = (const void *)llvm::Value::getName(v11);
              if (a3 != v54 || memcmp(a2, Name, a3))
                goto LABEL_13;
              v10 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8));
              if (v10)
LABEL_9:
                v12 = *(llvm::Value **)(v10 + 128);
              else
                v12 = 0;
              sub_22F22F348((uint64_t)&v99, v12, 2, v98);
              v13 = *(_QWORD *)(v4 + 104);
              if (v13 >= *(_QWORD *)(v4 + 112))
              {
                v15 = sub_22F241284(v94, (uint64_t)&v99);
              }
              else
              {
                sub_22F2415A8(v13, &v99);
                v15 = (char *)(v14 + 272);
              }
              *(_QWORD *)(v4 + 104) = v15;
              sub_22F240AF8((uint64_t)&v99);
            }
          }
        }
LABEL_13:
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
      v6 = v120[0];
LABEL_16:
      v16 = v122;
      if (v122 == v123)
        goto LABEL_17;
      v42 = (uint64_t *)(v6 + 8 * v122);
      v43 = 8 * v123 - 8 * v122;
      while (2)
      {
        v44 = *v42;
        v45 = *(_QWORD *)(*v42 - 8 * *(unsigned int *)(*v42 + 8));
        if (v45)
        {
          v46 = *(llvm::Value **)(v45 + 128);
          if (v46)
          {
            if ((*((_BYTE *)v46 + 32) & 0x30) == 0)
            {
              if (!a3)
                goto LABEL_53;
              v72 = (const void *)llvm::Value::getName(v46);
              if (a3 == v73 && !memcmp(a2, v72, a3))
              {
                v45 = *(_QWORD *)(v44 - 8 * *(unsigned int *)(v44 + 8));
                if (v45)
LABEL_53:
                  v47 = *(llvm::Value **)(v45 + 128);
                else
                  v47 = 0;
                sub_22F22F348((uint64_t)&v99, v47, 0, v98);
                sub_22F22F4E8((uint64_t)&v99, *(_QWORD *)(v44 - 8 * *(unsigned int *)(v44 + 8) + 8));
                if (*(_DWORD *)(v44 + 8) == 4)
                {
                  v74 = *(_QWORD *)(v44 - 8);
                  if (v74)
                    sub_22F22F684((uint64_t)&v118, v74, *(_QWORD *)(v44 - 16));
                }
                v48 = *(_QWORD *)(v4 + 104);
                if (v48 < *(_QWORD *)(v4 + 112))
                {
                  sub_22F2415A8(v48, &v99);
                  v49 = (char *)(v50 + 272);
                }
                else
                {
                  v49 = sub_22F241284(v94, (uint64_t)&v99);
                }
                *(_QWORD *)(v4 + 104) = v49;
                sub_22F240AF8((uint64_t)&v99);
              }
            }
          }
        }
        ++v42;
        v43 -= 8;
        if (v43)
          continue;
        break;
      }
      v6 = v120[0];
      v16 = v123;
LABEL_17:
      if ((_DWORD)v16 == v124)
        goto LABEL_18;
      v33 = (uint64_t *)(v6 + 8 * v16);
      v34 = 8 * v124 - 8 * v16;
      while (2)
      {
        v35 = *v33;
        v36 = *(_QWORD *)(*v33 - 8 * *(unsigned int *)(*v33 + 8));
        if (v36)
        {
          v37 = *(llvm::Value **)(v36 + 128);
          if (v37)
          {
            if ((*((_BYTE *)v37 + 32) & 0x30) == 0)
            {
              if (!a3)
                goto LABEL_40;
              v70 = (const void *)llvm::Value::getName(v37);
              if (a3 == v71 && !memcmp(a2, v70, a3))
              {
                v36 = *(_QWORD *)(v35 - 8 * *(unsigned int *)(v35 + 8));
                if (v36)
LABEL_40:
                  v38 = *(llvm::Value **)(v36 + 128);
                else
                  v38 = 0;
                sub_22F22F348((uint64_t)&v99, v38, 1, v98);
                v39 = *(_QWORD *)(v4 + 104);
                if (v39 >= *(_QWORD *)(v4 + 112))
                {
                  v41 = sub_22F241284(v94, (uint64_t)&v99);
                }
                else
                {
                  sub_22F2415A8(v39, &v99);
                  v41 = (char *)(v40 + 272);
                }
                *(_QWORD *)(v4 + 104) = v41;
                sub_22F240AF8((uint64_t)&v99);
              }
            }
          }
        }
        ++v33;
        v34 -= 8;
        if (v34)
          continue;
        break;
      }
      v6 = v120[0];
LABEL_18:
      v17 = v127;
      if (v127 == v128)
        goto LABEL_30;
      v18 = (uint64_t *)(v6 + 8 * v127);
      v19 = 8 * v128 - 8 * v127;
      while (2)
      {
        v20 = *v18;
        v21 = *(_QWORD *)(*v18 - 8 * *(unsigned int *)(*v18 + 8));
        if (v21)
        {
          v22 = *(llvm::Value **)(v21 + 128);
          if (v22)
          {
            if ((*((_BYTE *)v22 + 32) & 0x30) == 0)
            {
              if (!a3)
                goto LABEL_24;
              v51 = (const void *)llvm::Value::getName(v22);
              if (a3 == v52 && !memcmp(a2, v51, a3))
              {
                v21 = *(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8));
                if (v21)
LABEL_24:
                  v23 = *(llvm::Value **)(v21 + 128);
                else
                  v23 = 0;
                sub_22F22F348((uint64_t)&v99, v23, 4, v98);
                v24 = *(_QWORD *)(v4 + 104);
                if (v24 >= *(_QWORD *)(v4 + 112))
                {
                  v31 = sub_22F241284(v94, (uint64_t)&v99);
                }
                else
                {
                  v25 = v99;
                  *(_QWORD *)(v24 + 16) = v100;
                  *(_OWORD *)v24 = v25;
                  v99 = 0uLL;
                  v26 = v102;
                  *(_OWORD *)(v24 + 24) = v101;
                  *(_OWORD *)(v24 + 40) = v26;
                  *(_QWORD *)(v24 + 64) = 0;
                  *(_QWORD *)(v24 + 72) = 0;
                  *(_QWORD *)(v24 + 56) = 0;
                  *(_OWORD *)(v24 + 56) = v103;
                  *(_QWORD *)(v24 + 72) = v104;
                  *(_QWORD *)(v24 + 80) = 0;
                  v103 = 0uLL;
                  v104 = 0;
                  *(_QWORD *)(v24 + 88) = 0;
                  *(_QWORD *)(v24 + 96) = 0;
                  *(_OWORD *)(v24 + 80) = v105;
                  v105 = 0uLL;
                  *(_QWORD *)(v24 + 96) = v106;
                  v106 = 0;
                  *(_QWORD *)(v24 + 104) = off_24FCB0660;
                  *(_DWORD *)(v24 + 112) = v107;
                  v27 = v108;
                  *(_QWORD *)(v24 + 136) = v109;
                  *(_OWORD *)(v24 + 120) = v27;
                  v109 = 0;
                  v108 = 0uLL;
                  *(_QWORD *)(v24 + 144) = off_24FCB0630;
                  *(_QWORD *)(v24 + 152) = 0;
                  *(_QWORD *)(v24 + 160) = 0;
                  *(_QWORD *)(v24 + 168) = 0;
                  *(_OWORD *)(v24 + 152) = v110;
                  *(_QWORD *)(v24 + 168) = v111;
                  *(_QWORD *)(v24 + 176) = 0;
                  v110 = 0uLL;
                  v111 = 0;
                  *(_QWORD *)(v24 + 184) = 0;
                  *(_QWORD *)(v24 + 192) = 0;
                  *(_OWORD *)(v24 + 176) = v112;
                  *(_QWORD *)(v24 + 192) = v113;
                  v112 = 0uLL;
                  v113 = 0;
                  *(_QWORD *)(v24 + 208) = 0;
                  *(_QWORD *)(v24 + 216) = 0;
                  *(_QWORD *)(v24 + 224) = 0;
                  v28 = v114;
                  v100 = 0;
                  *(_QWORD *)&v114 = 0;
                  *(_OWORD *)(v24 + 200) = v28;
                  *(_QWORD *)(v24 + 216) = v115;
                  *(_QWORD *)(v24 + 224) = v116;
                  *((_QWORD *)&v114 + 1) = 0;
                  v115 = 0;
                  v116 = 0;
                  v29 = v117;
                  v30 = v118;
                  *(_QWORD *)(v24 + 264) = v119;
                  *(_OWORD *)(v24 + 248) = v30;
                  *(_OWORD *)(v24 + 232) = v29;
                  v31 = (char *)(v24 + 272);
                }
                *(_QWORD *)(v4 + 104) = v31;
                sub_22F240AF8((uint64_t)&v99);
              }
            }
          }
        }
        ++v18;
        v19 -= 8;
        if (v19)
          continue;
        break;
      }
      v6 = v120[0];
      v17 = v128;
LABEL_30:
      if ((_DWORD)v17 == v129)
        goto LABEL_31;
      v55 = (uint64_t *)(v6 + 8 * v17);
      v56 = 8 * v129 - 8 * v17;
      while (2)
      {
        v57 = *v55;
        v58 = *(_QWORD *)(*v55 - 8 * *(unsigned int *)(*v55 + 8));
        if (v58)
        {
          v59 = *(llvm::Value **)(v58 + 128);
          if (v59)
          {
            if ((*((_BYTE *)v59 + 32) & 0x30) == 0)
            {
              if (!a3)
                goto LABEL_104;
              v75 = (const void *)llvm::Value::getName(v59);
              if (a3 != v76 || memcmp(a2, v75, a3))
                goto LABEL_76;
              v58 = *(_QWORD *)(v57 - 8 * *(unsigned int *)(v57 + 8));
              if (!v58)
                v77 = 0;
              else
LABEL_104:
                v77 = *(llvm::Value **)(v58 + 128);
              sub_22F22F348((uint64_t)&v99, v77, 6, v98);
              v78 = *(_QWORD *)(v4 + 104);
              if (v78 >= *(_QWORD *)(v4 + 112))
              {
                v80 = sub_22F241284(v94, (uint64_t)&v99);
              }
              else
              {
                sub_22F2415A8(v78, &v99);
                v80 = (char *)(v79 + 272);
              }
              *(_QWORD *)(v4 + 104) = v80;
              sub_22F240AF8((uint64_t)&v99);
            }
          }
        }
LABEL_76:
        ++v55;
        v56 -= 8;
        if (v56)
          continue;
        break;
      }
      v6 = v120[0];
LABEL_31:
      v32 = v125;
      if (v125 == v126)
        goto LABEL_32;
      v60 = (uint64_t *)(v6 + 8 * v125);
      v61 = 8 * v126 - 8 * v125;
      while (2)
      {
        v62 = *v60;
        v63 = *(_QWORD *)(*v60 - 8 * *(unsigned int *)(*v60 + 8));
        if (v63)
        {
          v64 = *(llvm::Value **)(v63 + 128);
          if (v64)
          {
            if ((*((_BYTE *)v64 + 32) & 0x30) == 0)
            {
              if (!a3)
                goto LABEL_111;
              v81 = (const void *)llvm::Value::getName(v64);
              if (a3 != v82 || memcmp(a2, v81, a3))
                goto LABEL_82;
              v63 = *(_QWORD *)(v62 - 8 * *(unsigned int *)(v62 + 8));
              if (!v63)
                v83 = 0;
              else
LABEL_111:
                v83 = *(llvm::Value **)(v63 + 128);
              sub_22F22F348((uint64_t)&v99, v83, 7, v98);
              v84 = *(_QWORD *)(v4 + 104);
              if (v84 >= *(_QWORD *)(v4 + 112))
              {
                v86 = sub_22F241284(v94, (uint64_t)&v99);
              }
              else
              {
                sub_22F2415A8(v84, &v99);
                v86 = (char *)(v85 + 272);
              }
              *(_QWORD *)(v4 + 104) = v86;
              sub_22F240AF8((uint64_t)&v99);
            }
          }
        }
LABEL_82:
        ++v60;
        v61 -= 8;
        if (v61)
          continue;
        break;
      }
      v6 = v120[0];
      v32 = v126;
LABEL_32:
      if ((_DWORD)v32 != v127)
      {
        v65 = (uint64_t *)(v6 + 8 * v32);
        v66 = 8 * v127 - 8 * v32;
        while (1)
        {
          v67 = *v65;
          v68 = *(_QWORD *)(*v65 - 8 * *(unsigned int *)(*v65 + 8));
          if (v68)
          {
            v69 = *(llvm::Value **)(v68 + 128);
            if (v69)
            {
              if ((*((_BYTE *)v69 + 32) & 0x30) == 0)
              {
                if (!a3)
                  goto LABEL_118;
                v87 = (const void *)llvm::Value::getName(v69);
                if (a3 == v88 && !memcmp(a2, v87, a3))
                  break;
              }
            }
          }
LABEL_88:
          ++v65;
          v66 -= 8;
          if (!v66)
            goto LABEL_33;
        }
        v68 = *(_QWORD *)(v67 - 8 * *(unsigned int *)(v67 + 8));
        if (v68)
LABEL_118:
          v89 = *(llvm::Value **)(v68 + 128);
        else
          v89 = 0;
        sub_22F22F348((uint64_t)&v99, v89, 8, v98);
        v90 = *(_QWORD *)(v4 + 104);
        if (v90 >= *(_QWORD *)(v4 + 112))
        {
          v92 = sub_22F241284(v94, (uint64_t)&v99);
        }
        else
        {
          sub_22F2415A8(v90, &v99);
          v92 = (char *)(v91 + 272);
        }
        *(_QWORD *)(v4 + 104) = v92;
        sub_22F240AF8((uint64_t)&v99);
        goto LABEL_88;
      }
LABEL_33:
      result = sub_22F227614((uint64_t)v120);
      v3 = v96 + 1;
    }
    while (v96 + 1 != v95);
  }
  return result;
}

void sub_22F2409A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  if (v3 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v6 = v4 - v3;
    v7 = v6 >> 3;
    if (v6 < 0)
      v8 = -1;
    else
      v8 = v6;
    v9 = (void *)operator new[]();
    bzero(v9, v8);
    v10 = *(uint64_t **)(a1 + 120);
    v11 = *(uint64_t **)(a1 + 128);
    if (v10 != v11)
    {
      v12 = v9;
      do
      {
        v13 = *v10++;
        v14 = *(_QWORD *)(v13 + 72);
        *(_BYTE *)(v13 + 80) = 0;
        MEMORY[0x2348A0E9C]();
        *v12++ = v14;
      }
      while (v10 != v11);
      v10 = *(uint64_t **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v10;
    *a2 = v9;
    a2[1] = v7;
  }
}

uint64_t sub_22F240A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void ***v5;
  BOOL v6;
  void *v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(void ****)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = v5 + 1 == 0;
        else
          v6 = 1;
        if (!v6)
        {
          v7 = (char *)*v5 + 17;
          sub_22E54C5D0(v5 + 1);
          llvm::deallocate_buffer((llvm *)v5, v7);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F240AF8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (**v15)(_QWORD);
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void (**v21)(_QWORD);
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  void *v24;
  void (***v25)(_QWORD);
  void (***v26)(_QWORD);
  void (**v27)(_QWORD);
  void **v29;

  v2 = *(uint64_t **)(a1 + 208);
  if (v2)
  {
    v3 = *(uint64_t **)(a1 + 216);
    v4 = *(void **)(a1 + 208);
    if (v3 != v2)
    {
      v5 = v3 - 1;
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          sub_22F22F7B0((uint64_t)v5, v6);
        v7 = v5-- == v2;
      }
      while (!v7);
      v4 = *(void **)(a1 + 208);
    }
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v4);
  }
  v8 = *(uint64_t **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v8)
  {
    v9 = *v8;
    *v8 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    MEMORY[0x2348A0E9C](v8, 0x20C4093837F09);
  }
  v10 = *(void (****)(_QWORD))(a1 + 176);
  if (v10)
  {
    v11 = *(void (****)(_QWORD))(a1 + 184);
    v12 = *(void **)(a1 + 176);
    if (v11 != v10)
    {
      v13 = v11 - 6;
      v14 = v11 - 6;
      do
      {
        v15 = *v14;
        v14 -= 6;
        (*v15)(v13);
        v7 = v13 == v10;
        v13 = v14;
      }
      while (!v7);
      v12 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v10;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 144) = off_24FCB0630;
  v29 = (void **)(a1 + 152);
  sub_22E3B3CC8(&v29);
  *(_QWORD *)(a1 + 104) = off_24FCB0660;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  v16 = *(void (****)(_QWORD))(a1 + 80);
  if (v16)
  {
    v17 = *(void (****)(_QWORD))(a1 + 88);
    v18 = *(void **)(a1 + 80);
    if (v17 != v16)
    {
      v19 = v17 - 2;
      v20 = v17 - 2;
      do
      {
        v21 = *v20;
        v20 -= 2;
        (*v21)(v19);
        v7 = v19 == v16;
        v19 = v20;
      }
      while (!v7);
      v18 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v16;
    operator delete(v18);
  }
  v22 = *(void (****)(_QWORD))(a1 + 56);
  if (v22)
  {
    v23 = *(void (****)(_QWORD))(a1 + 64);
    v24 = *(void **)(a1 + 56);
    if (v23 != v22)
    {
      v25 = v23 - 6;
      v26 = v23 - 6;
      do
      {
        v27 = *v26;
        v26 -= 6;
        (*v27)(v25);
        v7 = v25 == v22;
        v25 = v26;
      }
      while (!v7);
      v24 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v22;
    operator delete(v24);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22F240CD8(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;

  result = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *result;
  if (*result == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = result[1];
      ++result;
      v7 = v8;
    }
    return result;
  }
  v13 = result;
  v9 = MEMORY[0x23489D23C](a3 + 17, 8);
  v10 = (_QWORD *)v9;
  v11 = v9 + 16;
  if (a3)
    memcpy((void *)(v9 + 16), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *v10 = a3;
  v10[1] = 1;
  *v13 = v10;
  ++*((_DWORD *)a1 + 3);
  for (result = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1));
        !*result || *result == -8;
  return result;
}

_QWORD *sub_22F240DD0(uint64_t a1, uint64_t *a2)
{
  void ***v2;
  void ***v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void ***v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;

  v2 = *(void ****)a1;
  v3 = *(void ****)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_22E3B3F8C();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (uint64_t *)&v10[8 * v4];
  *v11 = 1;
  v12 = *a2;
  if ((*a2 & 1) == 0)
  {
    v12 = operator new();
    v18 = *a2;
    v19 = (void *)(v12 + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)(v12 + 8) = 0x600000000;
    if (v12 == v18)
      goto LABEL_30;
    v20 = *(_DWORD *)(v18 + 8);
    if (!v20)
      goto LABEL_30;
    if (v20 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(v18 + 8);
      if (!v21)
      {
LABEL_29:
        *(_DWORD *)(v12 + 8) = v20;
LABEL_30:
        *(_DWORD *)(v12 + 64) = *(_DWORD *)(v18 + 64);
        v2 = *(void ****)a1;
        v3 = *(void ****)(a1 + 8);
        goto LABEL_12;
      }
      v19 = *(void **)v12;
    }
    else
    {
      v21 = *(_DWORD *)(v18 + 8);
    }
    memcpy(v19, *(const void **)v18, 8 * v21);
    goto LABEL_29;
  }
LABEL_12:
  v13 = &v10[8 * v9];
  *v11 = v12;
  v14 = v11 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    if (!v2)
      return v14;
    goto LABEL_18;
  }
  v15 = v3;
  do
  {
    v16 = (uint64_t)*--v15;
    *--v11 = v16;
    *v15 = (void **)1;
  }
  while (v15 != v2);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  do
    sub_22E54C5D0(--v3);
  while (v3 != v2);
  if (v2)
LABEL_18:
    operator delete(v2);
  return v14;
}

uint64_t sub_22F240F84(unint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;

  if ((a1 & 1) != 0)
  {
    v20 = (a1 >> 1) & ~(-1 << (a1 >> 58)) & (-1 << (a2 + 1));
    v21 = __clz(__rbit64(v20));
    if (v20)
      v22 = v21;
    else
      v22 = -1;
    if (a1 >> 58 > (a2 + 1))
      return v22;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v2 = a2 + 1;
    v3 = *(_DWORD *)(a1 + 64);
    if (a2 + 1 == v3)
      return 0xFFFFFFFFLL;
    v4 = v2 >> 6;
    v5 = v3 - 1;
    if (v2 >> 6 > (v3 - 1) >> 6)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v6 = 0;
      v7 = v5 >> 6;
      v9 = v2 & 0x3F;
      v8 = v9 == 0;
      v10 = -1;
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
      v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v5;
      if (!v8)
        v10 = ~v11;
      v13 = -64 * v4;
      v14 = v7 - v4;
      v15 = *(_QWORD *)a1 + 8 * v4;
      while (1)
      {
        v16 = v6 ? -1 : v10;
        v17 = v14 == v6 ? v12 : -1;
        v18 = v16 & v17 & *(_QWORD *)(v15 + 8 * v6);
        if (v18)
          break;
        v13 -= 64;
        if (v14 + 1 == ++v6)
          return 0xFFFFFFFFLL;
      }
      return __clz(__rbit64(v18)) - v13;
    }
  }
}

uint64_t sub_22F241068(unint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;

  if ((a1 & 1) != 0)
  {
    v14 = a1 >> 58;
    if ((a2 & 1) != 0)
      return (~((-1 << (a2 >> 58)) | (-1 << v14)) & ((a2 & a1) >> 1)) != 0;
    v15 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      v2 = *(_DWORD *)(a1 + 8);
      v3 = *(_DWORD *)(a2 + 8);
      if (v3 >= v2)
        v4 = v2;
      else
        v4 = v3;
      if ((_DWORD)v4)
      {
        v5 = *(uint64_t **)a1;
        v6 = *(uint64_t **)a2;
        v7 = v4 - 1;
        do
        {
          v9 = *v5++;
          v8 = v9;
          v10 = *v6++;
          v11 = v10 & v8;
          result = v11 != 0;
          if (v11)
            v13 = 1;
          else
            v13 = v7 == 0;
          --v7;
        }
        while (!v13);
        return result;
      }
      return 0;
    }
    v14 = *(unsigned int *)(a1 + 64);
    v15 = a2 >> 58;
  }
  if (v15 < v14)
    v14 = v15;
  if (!v14)
    return 0;
  v16 = 0;
  while (1)
  {
    v17 = v16;
    v18 = (a1 >> 1) & ~(-1 << (a1 >> 58));
    if ((a1 & 1) == 0)
    {
      v17 = v16 & 0x3F;
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v16 >> 6));
    }
    if (((v18 >> v17) & 1) != 0)
    {
      v19 = v16;
      v20 = (a2 >> 1) & ~(-1 << (a2 >> 58));
      if ((a2 & 1) == 0)
      {
        v19 = v16 & 0x3F;
        v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v16 >> 6));
      }
      if (((v20 >> v19) & 1) != 0)
        break;
    }
    if (v14 == ++v16)
      return 0;
  }
  return 1;
}

void sub_22F24118C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_22F240AF8(v4 - 272);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22F2411FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0)
          operator delete(*(void **)(v3 - 40));
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_22F241284(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v2 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x78787878787878)
    v6 = 0xF0F0F0F0F0F0F0;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xF0F0F0F0F0F0F0)
      sub_22E3B3F8C();
    v7 = (char *)operator new(272 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[272 * v2];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  v9 = &v7[272 * v6];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *((_QWORD *)v8 + 11) = 0;
  *((_QWORD *)v8 + 12) = 0;
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *((_QWORD *)v8 + 12) = v10;
  *((_QWORD *)v8 + 13) = off_24FCB0660;
  *((_DWORD *)v8 + 28) = *(_DWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(v8 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *((_QWORD *)v8 + 17) = v11;
  *((_QWORD *)v8 + 18) = off_24FCB0630;
  *((_QWORD *)v8 + 20) = 0;
  *((_QWORD *)v8 + 21) = 0;
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + 152);
  *((_QWORD *)v8 + 21) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *((_QWORD *)v8 + 23) = 0;
  *((_QWORD *)v8 + 24) = 0;
  *((_OWORD *)v8 + 11) = *(_OWORD *)(a2 + 176);
  *((_QWORD *)v8 + 24) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *((_QWORD *)v8 + 27) = 0;
  *((_QWORD *)v8 + 28) = 0;
  v12 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(v8 + 200) = v12;
  *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  v13 = *(_OWORD *)(a2 + 232);
  v14 = *(_OWORD *)(a2 + 248);
  *((_QWORD *)v8 + 33) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(v8 + 248) = v14;
  *(_OWORD *)(v8 + 232) = v13;
  v15 = v8 + 272;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v8;
    a1[1] = v15;
    a1[2] = v9;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = &v8[v18];
      v20 = &v17[v18];
      v21 = &v17[v18 - 272];
      v22 = *(_OWORD *)v21;
      *((_QWORD *)v19 - 32) = *(_QWORD *)&v17[v18 - 256];
      *(_OWORD *)&v8[v18 - 272] = v22;
      *(_OWORD *)(v21 + 8) = 0uLL;
      *(_QWORD *)v21 = 0;
      v23 = *(_OWORD *)&v17[v18 - 248];
      *(_OWORD *)(v19 - 232) = *(_OWORD *)&v17[v18 - 232];
      *(_OWORD *)(v19 - 248) = v23;
      *((_QWORD *)v19 - 27) = 0;
      *((_OWORD *)v19 - 13) = 0uLL;
      *(_OWORD *)(v19 - 216) = *(_OWORD *)&v17[v18 - 216];
      *((_QWORD *)v19 - 25) = *(_QWORD *)&v17[v18 - 200];
      *((_QWORD *)v20 - 25) = 0;
      *(_OWORD *)(v20 - 216) = 0uLL;
      *((_QWORD *)v19 - 22) = 0;
      *((_OWORD *)v19 - 12) = 0uLL;
      *((_OWORD *)v19 - 12) = *(_OWORD *)&v17[v18 - 192];
      *((_QWORD *)v19 - 22) = *(_QWORD *)&v17[v18 - 176];
      *((_QWORD *)v20 - 22) = 0;
      *((_OWORD *)v20 - 12) = 0uLL;
      *((_QWORD *)v19 - 21) = off_24FCB0660;
      *((_DWORD *)v19 - 40) = *(_DWORD *)&v17[v18 - 160];
      v24 = *(_OWORD *)&v17[v18 - 152];
      *((_QWORD *)v19 - 17) = *(_QWORD *)&v17[v18 - 136];
      *(_OWORD *)(v19 - 152) = v24;
      *((_OWORD *)v20 - 9) = 0uLL;
      *((_QWORD *)v20 - 19) = 0;
      *((_QWORD *)v19 - 16) = off_24FCB0630;
      *((_QWORD *)v19 - 15) = 0;
      *((_OWORD *)v19 - 7) = 0uLL;
      *(_OWORD *)(v19 - 120) = *(_OWORD *)&v17[v18 - 120];
      *((_QWORD *)v19 - 13) = *(_QWORD *)&v17[v18 - 104];
      *((_QWORD *)v20 - 13) = 0;
      *(_OWORD *)(v20 - 120) = 0uLL;
      *((_QWORD *)v19 - 10) = 0;
      *((_OWORD *)v19 - 6) = 0uLL;
      *((_OWORD *)v19 - 6) = *(_OWORD *)&v17[v18 - 96];
      *((_QWORD *)v19 - 10) = *(_QWORD *)&v17[v18 - 80];
      v25 = *(_QWORD *)&v17[v18 - 72];
      *((_OWORD *)v20 - 6) = 0uLL;
      *((_OWORD *)v20 - 5) = 0uLL;
      *((_QWORD *)v19 - 9) = v25;
      *((_QWORD *)v19 - 8) = 0;
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v17[v18 - 64];
      *((_QWORD *)v19 - 6) = *(_QWORD *)&v17[v18 - 48];
      *((_QWORD *)v20 - 8) = 0;
      *((_QWORD *)v20 - 7) = 0;
      v26 = *(_OWORD *)&v17[v18 - 40];
      v27 = *(_OWORD *)&v17[v18 - 24];
      v28 = *(_QWORD *)&v17[v18 - 8];
      *((_QWORD *)v20 - 6) = 0;
      *((_QWORD *)v19 - 1) = v28;
      *(_OWORD *)(v19 - 24) = v27;
      *(_OWORD *)(v19 - 40) = v26;
      v18 -= 272;
    }
    while (&v17[v18] != v16);
    v17 = (char *)*a1;
    v29 = (uint64_t)a1[1];
    *a1 = &v8[v18];
    a1[1] = v15;
    a1[2] = v9;
    while ((char *)v29 != v17)
      v29 = sub_22F240AF8(v29 - 272);
  }
  if (v17)
    operator delete(v17);
  return v15;
}

__n128 sub_22F2415A8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(__int128 *)((char *)a2 + 8) = 0u;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = 0;
  *(__int128 *)((char *)a2 + 56) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  a2[5] = 0u;
  *(_QWORD *)(a1 + 104) = off_24FCB0660;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  v4 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)(a1 + 120) = v4;
  a2[8] = 0u;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)(a1 + 144) = off_24FCB0630;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = 0;
  *(__int128 *)((char *)a2 + 152) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  v5 = *((_QWORD *)a2 + 25);
  a2[11] = 0u;
  a2[12] = 0u;
  *(_QWORD *)(a1 + 200) = v5;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  result = *(__n128 *)((char *)a2 + 232);
  v7 = *(__int128 *)((char *)a2 + 248);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *(_OWORD *)(a1 + 248) = v7;
  *(__n128 *)(a1 + 232) = result;
  return result;
}

uint64_t sub_22F2416CC(uint64_t a1, llvm::Module **a2)
{
  llvm::Module *v3;
  int v4;
  int v5;

  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 16) = xmmword_22F54B150;
  *(_OWORD *)(a1 + 32) = unk_22F54B160;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 72) = v3;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 48) = sub_22F242538(v3);
  *(_DWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 60) = sub_22F242640(*(llvm::Module **)(a1 + 72));
  *(_DWORD *)(a1 + 68) = v5;
  return a1;
}

uint64_t sub_22F241744(uint64_t a1, llvm::Module **a2)
{
  llvm::Module *v3;
  uint64_t v5;
  llvm::Module *v6;

  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  sub_22F2416CC(a1, &v6);
  if (v6)
  {
    v5 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v5, 0x10B2C407FF26C1CLL);
  }
  return a1;
}

llvm::StructType *sub_22F2417A4(uint64_t a1, llvm::StructType *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  llvm::StructType **v10;
  llvm::StructType *v11;
  llvm::StructType **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  llvm::StructType *v16;
  int v17;
  char v18;
  unsigned int v19;
  llvm::StructType *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  llvm::StructType **v31;
  llvm::StructType *v32;
  llvm::StructType **v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  llvm::StructType *v37;
  llvm::StructType **v39;
  llvm::StructType **v40;
  llvm::StructType *v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[5];

  v44[4] = *MEMORY[0x24BDAC8D0];
  v41 = a2;
  v6 = a1 + 8;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
    v10 = (llvm::StructType **)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_11;
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::StructType *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::StructType *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (llvm::StructType **)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_11;
    }
    if (v12)
      v39 = v12;
    else
      v39 = v10;
  }
  else
  {
    v39 = 0;
  }
  v10 = (llvm::StructType **)sub_22F241FD8(a1 + 8, (uint64_t)&v41, &v41, v39);
  *v10 = v41;
  v10[1] = 0;
LABEL_11:
  v16 = v10[1];
  if (v16)
    return v16;
  v16 = v41;
  v17 = *((_DWORD *)v41 + 2) & 0x4FF;
  if (v17 == 16)
  {
    sub_22E3BA850(a3, v41);
    if (!v18)
    {
      v16 = (llvm::StructType *)llvm::StructType::create();
      v10[1] = v16;
      return v16;
    }
    v42 = v44;
    v43 = 0x400000000;
    v19 = *((_DWORD *)v41 + 3);
LABEL_16:
    sub_22E50D8F0((uint64_t)&v42, v19);
    v20 = v41;
    v21 = *((unsigned int *)v41 + 3);
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = 0;
      v24 = *((_QWORD *)v41 + 2);
      v25 = 8 * v21;
      do
      {
        v26 = sub_22F2417A4(a1, *(_QWORD *)(v24 + v22), a3);
        *(_QWORD *)((char *)v42 + v22) = v26;
        v20 = v41;
        v24 = *((_QWORD *)v41 + 2);
        v23 |= *(_QWORD *)((char *)v42 + v22) != *(_QWORD *)(v24 + v22);
        v22 += 8;
      }
      while (v25 != v22);
    }
    else
    {
      v23 = 0;
    }
    v27 = *(_DWORD *)(a1 + 24);
    if (v27)
    {
      v28 = *(_QWORD *)(a1 + 8);
      v29 = v27 - 1;
      v30 = ((v20 >> 4) ^ (v20 >> 9)) & v29;
      v31 = (llvm::StructType **)(v28 + 16 * v30);
      v32 = *v31;
      if (v20 == *v31)
        goto LABEL_31;
      v33 = 0;
      v34 = 1;
      while (v32 != (llvm::StructType *)-4096)
      {
        if (v33)
          v35 = 0;
        else
          v35 = v32 == (llvm::StructType *)-8192;
        if (v35)
          v33 = v31;
        v36 = v30 + v34++;
        v30 = v36 & v29;
        v31 = (llvm::StructType **)(v28 + 16 * v30);
        v32 = *v31;
        if (v20 == *v31)
          goto LABEL_31;
      }
      if (v33)
        v40 = v33;
      else
        v40 = v31;
    }
    else
    {
      v40 = 0;
    }
    v31 = (llvm::StructType **)sub_22F241FD8(v6, (uint64_t)&v41, &v41, v40);
    *v31 = v41;
    v31[1] = 0;
LABEL_31:
    v16 = v31[1];
    if (v16)
    {
      if ((*((_DWORD *)v16 + 2) & 0x1FF) == 0x10)
      {
        sub_22F448C58(a1, (uint64_t)v31[1], v41);
        v16 = v31[1];
      }
    }
    else
    {
      v37 = v41;
      if ((v17 == 16) | v23 & 1)
        __asm { BR              X11 }
      v31[1] = v41;
      v16 = v37;
    }
    goto LABEL_39;
  }
  v42 = v44;
  v43 = 0x400000000;
  v19 = *((_DWORD *)v41 + 3);
  if (v19)
    goto LABEL_16;
  v10[1] = v41;
LABEL_39:
  if (v42 != v44)
    free(v42);
  return v16;
}

uint64_t sub_22F241D8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5;
  uint64_t result;
  _QWORD v7[2];
  char v8;
  uint64_t *v9;

  v7[0] = a2;
  v7[1] = a3;
  v8 = a4;
  v9 = 0;
  v5 = sub_22F242428((uint64_t *)(a1 + 24), (uint64_t)v7, &v9);
  result = 0;
  if (v5)
  {
    if (v9 != (uint64_t *)(*(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 40)))
      return *v9;
  }
  return result;
}

unint64_t sub_22F241DF4(_QWORD *a1, _BYTE *a2)
{
  unsigned __int8 v2;
  unint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _OWORD __src[4];
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(__src, 0, sizeof(__src));
  v2 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  v3 = 0x253E4A000uLL;
  if ((v2 & 1) == 0)
  {
    v8 = a2;
    v9 = a1;
    v5 = __cxa_guard_acquire(&qword_253E4AB98);
    v3 = 0x253E4A000uLL;
    v6 = v5;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      v7 = *MEMORY[0x24BED7368];
      if (!*MEMORY[0x24BED7368])
        v7 = 0xFF51AFD7ED558CCDLL;
      qword_253E4AB90 = v7;
      __cxa_guard_release(&qword_253E4AB98);
      v3 = 0x253E4A000;
      a2 = v8;
      a1 = v9;
    }
  }
  v13 = *(_QWORD *)(v3 + 2960);
  *(_QWORD *)&__src[0] = *a1;
  BYTE8(__src[0]) = *a2;
  return sub_22E54F2E8((char *)__src, 0, (char *)((unint64_t)__src | 9), (char *)v11);
}

BOOL sub_22F241EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (*(_BYTE *)(a1 + 16) == ((*(_DWORD *)(a2 + 8) >> 9) & 1))
  {
    v3 = *(unsigned int *)(a2 + 12);
    if (*(_QWORD *)(a1 + 8) == v3)
      return memcmp(*(const void **)a1, *(const void **)(a2 + 16), 8 * v3) == 0;
  }
  return 0;
}

BOOL sub_22F241F64(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  if (a2 == -8192)
    return a1 == -8192;
  if (a2 == -4096)
    return a1 == -4096;
  result = 0;
  if (((*(_DWORD *)(a2 + 8) ^ *(_DWORD *)(a1 + 8)) & 0x200) == 0)
  {
    v5 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 12))
      return memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), 8 * v5) == 0;
  }
  return result;
}

_QWORD *sub_22F241FD8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22EF772EC(a1, v7);
  v9 = 0;
  sub_22F25AFD8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

unint64_t sub_22F242088(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4[8];
  unint64_t v5;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 12);
  v4[0] = (*(_DWORD *)(a1 + 8) & 0x200) != 0;
  v5 = sub_22E3D0BF8(v2, (uint64_t)&v2[v3]);
  return sub_22F241DF4(&v5, v4);
}

_QWORD *sub_22F2420E0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F448F80(a1, v4, &v4[v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F2421A0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v11 = 0;
        else
          v11 = v7 == -8192;
        if (v11)
          v8 = v6;
        v12 = v5 + v9++;
        v5 = v12 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v12 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_14;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_22F242234@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F2421A0((uint64_t)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2422B8(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * a1[4];
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_22F2422B8(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22F242368((uint64_t)a1, v7);
  v9 = 0;
  sub_22F2421A0((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_22F242368(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F449024(a1, v4, (_QWORD *)v4 + v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22F242428(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t *v18;
  unint64_t v19;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v19 = sub_22E3D0BF8(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
    v7 = v4 - 1;
    v8 = (v4 - 1) & sub_22F241DF4(&v19, (_BYTE *)(a2 + 16));
    v9 = (uint64_t *)(v6 + 8 * v8);
    v10 = *v9;
    if (sub_22F241EFC(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v10 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v10 == -8192;
        if (v14)
          v12 = v9;
        v18 = v12;
        v15 = v13 + 1;
        v8 = (v8 + v13) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v10 = *v9;
        v16 = sub_22F241EFC(a2, *v9);
        v12 = v18;
        v17 = v16;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v9 = v12;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

uint64_t sub_22F242538(llvm::Module *a1)
{
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v13;
  __int16 v14;

  v13 = "air.version";
  v14 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v13);
  if (!NamedMetadata)
    sub_22F447350("Module is missing AIR version number");
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (!Operand)
    sub_22F447350("Module missing AIR version number metadata node");
  if (*(_DWORD *)(Operand + 8) != 3
    || ((v3 = *(_QWORD *)(*(_QWORD *)(Operand - 24) + 128)) != 0 ? (v4 = *(_BYTE *)(v3 + 16) == 16) : (v4 = 0),
        !v4
     || ((v5 = *(_QWORD *)(*(_QWORD *)(Operand - 16) + 128)) != 0 ? (v6 = *(_BYTE *)(v5 + 16) == 16) : (v6 = 0),
         !v6
      || ((v7 = *(_QWORD *)(*(_QWORD *)(Operand - 8) + 128)) != 0 ? (v8 = *(_BYTE *)(v7 + 16) == 16) : (v8 = 0), !v8))))
  {
    sub_22F447350("AIR version metadata node is malformed");
  }
  v9 = (unsigned int *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v9 = *(unsigned int **)v9;
  v10 = *v9;
  v11 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v11 = (_QWORD *)*v11;
  return v10 | (*v11 << 32);
}

llvm::NamedMDNode *sub_22F242640(llvm::Module *a1)
{
  llvm::NamedMDNode *result;
  uint64_t Operand;
  uint64_t v4;
  llvm::MDString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t String;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  __int16 v19;

  v18 = "air.language_version";
  v19 = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v18);
  if (result)
  {
    Operand = llvm::NamedMDNode::getOperand(result);
    v4 = Operand;
    v5 = *(llvm::MDString **)(Operand - 32);
    if (!*(_BYTE *)v5)
    {
      String = llvm::MDString::getString(*(llvm::MDString **)(Operand - 32));
      if (v13 != 5 || (*(_DWORD *)String == 1635018061 ? (v14 = *(_BYTE *)(String + 4) == 108) : (v14 = 0), !v14))
      {
        v15 = llvm::MDString::getString(v5);
        if (v16 == 5 && *(_DWORD *)v15 == 1096041805 && *(_BYTE *)(v15 + 4) == 76)
          sub_22F242538(a1);
      }
    }
    v6 = v4 - 8 * *(unsigned int *)(v4 + 8);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 128) + 16) == 16)
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 128);
    else
      v7 = 0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 128) + 16) == 16)
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 128);
    else
      v8 = 0;
    v9 = (unsigned int *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u)
      v9 = *(unsigned int **)v9;
    v10 = *v9;
    v11 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v11 = (_QWORD *)*v11;
    return (llvm::NamedMDNode *)(v10 | (*v11 << 32));
  }
  return result;
}

void sub_22F2427A4(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v3;
  std::string *v4;
  std::string::size_type v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string __p;
  std::string v10;
  std::string v11;

  v3 = a1[1];
  std::to_string(&v10, *a1);
  v4 = std::string::append(&v10, ".");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

unint64_t sub_22F242884(llvm::Triple *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  void *__p[2];
  char v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t OSVersion;
  uint64_t v28;

  llvm::Triple::getEffectiveMacCatalystVariant(a1);
  if (v24 <= 27)
  {
    if (v24 != 7)
    {
      OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
      v28 = v15;
      v25 = 0x8000000E0000000ALL;
      v26 = 0;
      if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
      {
        OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
        v28 = v16;
        v25 = 0x8000000F0000000ALL;
        v26 = 0;
        if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
        {
          OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
          v28 = v17;
          v25 = 11;
          v26 = 0;
          if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
          {
            OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
            v28 = v18;
            v25 = 12;
            v26 = 0;
            if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
            {
              OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
              v28 = v20;
              v6 = 13;
              goto LABEL_33;
            }
            goto LABEL_25;
          }
          goto LABEL_23;
        }
        goto LABEL_21;
      }
LABEL_19:
      v9 = 0x8000000200000001;
      v8 = 2;
      goto LABEL_27;
    }
LABEL_10:
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
    v28 = v7;
    v25 = 9;
    v26 = 0;
    if ((sub_22E3B38EC(&OSVersion, &v25) & 1) != 0)
    {
      v8 = 1;
LABEL_26:
      v9 = 0x8000000200000001;
      goto LABEL_27;
    }
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
    v28 = v10;
    v25 = 12;
    v26 = 0;
    if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
    {
      OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
      v28 = v11;
      v25 = 13;
      v26 = 0;
      if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
      {
        OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
        v28 = v12;
        v25 = 14;
        v26 = 0;
        if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
        {
          OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
          v28 = v13;
          v25 = 15;
          v26 = 0;
          if ((sub_22E3B38EC(&OSVersion, &v25) & 1) == 0)
          {
            OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
            v28 = v14;
            v6 = 16;
            goto LABEL_33;
          }
          goto LABEL_25;
        }
        goto LABEL_23;
      }
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v24 == 33)
  {
    v9 = 0;
    v8 = 0;
    goto LABEL_27;
  }
  if (v24 != 29)
    goto LABEL_10;
  OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
  v28 = v1;
  v25 = 5;
  v26 = 0;
  if ((sub_22E3B38EC(&OSVersion, &v25) & 1) != 0)
    goto LABEL_19;
  OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
  v28 = v2;
  v25 = 6;
  v26 = 0;
  if ((sub_22E3B38EC(&OSVersion, &v25) & 1) != 0)
  {
LABEL_21:
    v8 = 3;
    goto LABEL_26;
  }
  OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
  v28 = v3;
  v25 = 7;
  v26 = 0;
  if ((sub_22E3B38EC(&OSVersion, &v25) & 1) != 0)
  {
LABEL_23:
    v8 = 4;
    goto LABEL_26;
  }
  OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
  v28 = v4;
  v25 = 8;
  v26 = 0;
  if ((sub_22E3B38EC(&OSVersion, &v25) & 1) != 0)
  {
LABEL_25:
    v8 = 5;
    goto LABEL_26;
  }
  OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
  v28 = v5;
  v6 = 9;
LABEL_33:
  v25 = v6;
  v26 = 0;
  v21 = sub_22E3B38EC(&OSVersion, &v25);
  if (v21)
    v9 = 0x8000000200000001;
  else
    v9 = 0;
  if (v21)
    v8 = 6;
  else
    v8 = 0;
LABEL_27:
  if (v23 < 0)
    operator delete(__p[0]);
  if (v9 & 0x200000001 | v8 & 7)
    return v9;
  else
    return 0x8000000200000001;
}

char *sub_22F242B9C(int a1)
{
  return off_24FA2E250[a1];
}

char *sub_22F242BB8(uint64_t a1)
{
  return sub_22F242B9C(*(_DWORD *)(a1 + 8));
}

uint64_t sub_22F242BC0(int64x2_t *a1, uint64_t a2, int *a3, char *a4, unsigned __int8 *a5)
{
  unint64_t v6;
  uint64_t v7;
  int v9;
  char v10;
  unsigned __int8 v11;

  v6 = a1->u64[1];
  if (v6 < a1[1].i64[0])
  {
    v9 = *a3;
    v10 = *a4;
    v11 = *a5;
    std::string::__init((std::string *)a1->i64[1], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    *(_DWORD *)(v6 + 24) = v9;
    *(_BYTE *)(v6 + 28) = v10 | (2 * v11) | *(_BYTE *)(v6 + 28) & 0xFC;
    v7 = v6 + 32;
  }
  else
  {
    v7 = sub_22E3B3D9C(a1, a2, a3, a4, a5);
  }
  a1->i64[1] = v7;
  return v7 - 32;
}

uint64_t sub_22F242C48(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = MEMORY[0x24BED83E0] + 16;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetBufferAndMode();
  return a1;
}

uint64_t sub_22F242CA8(uint64_t a1, uint64_t a2)
{
  llvm *v4;
  uint64_t v5;

  v4 = (llvm *)llvm::outs((llvm *)a1);
  v5 = llvm::errs(v4);
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_22F44E360;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  *(_QWORD *)(a1 + 56) = 850045863;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_DWORD *)(a1 + 124) = 20;
  *(_QWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 536) = a2;
  *(_DWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 644) = 16;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 684) = 8;
  return a1;
}

uint64_t sub_22F242DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    v3 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v3, 0x10B2C407FF26C1CLL);
  }
  if (*(_QWORD *)a1 != a1 + 24)
    free(*(void **)a1);
  return a1;
}

void sub_22F242DFC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_22F242DFC(a1, *a2);
    sub_22F242DFC(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_22F242E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(*(_DWORD *)a1)
  {
    case 0:
      v4 = a1 + 8;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v5)
        sub_22E3B4BE4(v4, v5);
      break;
    case 1:
    case 3:
    case 5:
    case 7:
      v2 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      break;
    case 2:
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v6)
      {
        v7 = MEMORY[0x23489F15C]();
        v8 = 2146593820;
        goto LABEL_11;
      }
      break;
    case 4:
      v9 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v9)
      {
        v7 = sub_22E3B45BC(v9);
        v8 = -1948361772;
LABEL_11:
        v10 = v8 | 0x10B2C4000000000;
        goto LABEL_12;
      }
      break;
    case 6:
      v11 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v11)
      {
        v7 = sub_22E3B46CC(v11);
        v10 = 0x1032C40B18B30E6;
LABEL_12:
        MEMORY[0x2348A0E9C](v7, v10);
      }
      break;
    default:
      return a1;
  }
  return a1;
}

char **sub_22F242F1C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void **v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    v5 = v2 - 96;
    do
    {
      v7 = (void **)&v5[v4];
      sub_22E3B4C44(&v7);
      v4 -= 96;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F242F90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void **v9;

  sub_22E3B3AD0(a1 + 664);
  sub_22F243074(a1 + 624);
  v2 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = 0;
  if (v2)
    sub_22E3B4CBC(a1 + 616, v2);
  sub_22E3B4400((uint64_t *)(a1 + 608));
  v3 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v3)
    sub_22E3B4D0C(a1 + 600, v3);
  v9 = (void **)(a1 + 576);
  sub_22E3B4D60(&v9);
  v4 = *(unsigned int **)(a1 + 568);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  v9 = (void **)(a1 + 544);
  sub_22E3B4AF8(&v9);
  sub_22E3B4DD0(a1 + 128);
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  if (*(_QWORD *)a1 != a1 + 24)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22F243074(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(uint64_t **)(*(_QWORD *)a1 + v4);
        if (v6 != (uint64_t *)-8 && v6 != 0)
        {
          v8 = (void *)(*v6 + 17);
          sub_22E3B4400(v6 + 1);
          llvm::deallocate_buffer((llvm *)v6, v8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_22F243108(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA2E228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22F243118(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FA2E228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F243148(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_22F243174(a1 + 56);
  return sub_22F243174(v1);
}

uint64_t sub_22F243174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
        {
          v8 = *(_QWORD *)v5;
          v7 = *((_QWORD *)v5 + 1);
          *((_QWORD *)v5 + 1) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          llvm::deallocate_buffer(v5, (void *)(v8 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F243214(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_QWORD *)(a2 + 96) & 0x3000000000) != 0)
    return llvm::embedBitcodeInModule();
  return result;
}

void sub_22F243268(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F24328C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char **sub_22F2432A8@<X0>(char **a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  char **v5;
  char *v6;
  char *v7;
  std::string *v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  v8 = (std::string *)v10;
  v9 = 0x200000000;
  v3 = *a1;
  *a1 = 0;
  v5 = (char **)&v8;
  v6 = v3;
  sub_22F243554(&v6, (uint64_t *)&v5, &v7);
  if (v6)
    (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  sub_22E3B976C(v8, &v8[v9], "\n", 1uLL, a2);
  return sub_22E3B9848((char **)&v8);
}

void sub_22F24336C()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)operator new() = &off_24FA2E4A0;
  sub_22E3BB374();
  if (v2)
  {
    v3 = sub_22E3BB35C(v0);
    v11 = sub_22E3BB33C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
    if (v11)
      sub_22E3BB368(v11);
  }
  else
  {
    sub_22E3BB384(v0, v1);
  }
  sub_22E3BB350();
}

void sub_22F2433CC(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_22E3BB3A0();
  v4 = *a2;
  *(_QWORD *)v3 = &off_24FA2E4E0;
  *(_DWORD *)(v3 + 8) = v4;
  sub_22E3BB374();
  if (v7)
  {
    v8 = sub_22E3BB35C(v5);
    v16 = sub_22E3BB33C((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_22E3BB368(v16);
  }
  else
  {
    sub_22E3BB384(v5, v6);
  }
  sub_22E3BB350();
}

void sub_22F243430(uint64_t a1, char *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_22E3BB3A0();
  v4 = *a2;
  *(_QWORD *)v3 = &off_24FA2E520;
  *(_BYTE *)(v3 + 8) = v4;
  sub_22E3BB374();
  if (v7)
  {
    v8 = sub_22E3BB35C(v5);
    v16 = sub_22E3BB33C((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
    if (v16)
      sub_22E3BB368(v16);
  }
  else
  {
    sub_22E3BB384(v5, v6);
  }
  sub_22E3BB350();
}

void sub_22F243494()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_22E3BB390();
  v1 = operator new();
  *(_QWORD *)v1 = &off_24FA2E560;
  *(_OWORD *)(v1 + 8) = *v0;
  sub_22E3BB374();
  if (v4)
  {
    v5 = sub_22E3BB35C(v2);
    v13 = sub_22E3BB33C((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
    if (v13)
      sub_22E3BB368(v13);
  }
  else
  {
    sub_22E3BB384(v2, v3);
  }
  sub_22E3BB350();
}

void sub_22F2434F8()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_22E3BB390();
  v1 = sub_22E3BB3AC();
  *(_QWORD *)v1 = &off_24FA2E5A0;
  *(_OWORD *)(v1 + 8) = *v0;
  sub_22E3BB374();
  if (v4)
  {
    v5 = sub_22E3BB35C(v2);
    v13 = sub_22E3BB33C((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
    if (v13)
      sub_22E3BB368(v13);
  }
  else
  {
    sub_22E3BB384(v2, v3);
  }
  sub_22E3BB350();
}

char **sub_22F243554@<X0>(char **result@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  char *v4;
  char **v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;

  v4 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(char *, _QWORD))(*(_QWORD *)v4 + 48))(v4, MEMORY[0x24BED7780]))
    {
      *a3 = 0;
      v6 = (char **)*((_QWORD *)v4 + 1);
      v7 = (char **)*((_QWORD *)v4 + 2);
      if (v6 != v7)
      {
        v8 = 0;
        v9 = MEMORY[0x24BED5A38];
        do
        {
          v12 = v8;
          v10 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v9))
          {
            sub_22E3B95FC(a2, (uint64_t)v10);
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
            v10 = 0;
          }
          v11 = v10;
          sub_22F2436E4(&v12, &v11, &v13);
          v8 = v13;
          *a3 = v13;
          v13 = 0;
          if (v11)
            (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
          if (v12)
            (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
          ++v6;
        }
        while (v6 != v7);
      }
      return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    }
    else
    {
      result = (char **)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v4 + 48))(v4, MEMORY[0x24BED5A38]);
      if ((_DWORD)result)
      {
        sub_22E3B95FC(a2, (uint64_t)v4);
        *a3 = 0;
        return (char **)(*(uint64_t (**)(char *))(*(_QWORD *)v4 + 8))(v4);
      }
      else
      {
        *a3 = v4;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

char *sub_22F2436E4@<X0>(char **a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;

  result = *a1;
  v7 = *a2;
  if (!result)
  {
LABEL_21:
    *a3 = v7;
    *a2 = 0;
    return result;
  }
  if (!v7)
  {
    *a3 = result;
LABEL_15:
    *a1 = 0;
    return result;
  }
  if ((*(unsigned int (**)(char *, _QWORD))(*(_QWORD *)result + 48))(result, MEMORY[0x24BED7780]))
  {
    v8 = *a1;
    result = *a2;
    if (*a2)
    {
      result = (char *)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)result + 48))(result, MEMORY[0x24BED7780]);
      v9 = *a2;
      if ((_DWORD)result)
      {
        *a2 = 0;
        v10 = (uint64_t *)*((_QWORD *)v9 + 1);
        v11 = (uint64_t *)*((_QWORD *)v9 + 2);
        if (v10 == v11)
          goto LABEL_13;
        result = (char *)*((_QWORD *)v8 + 2);
        do
        {
          if ((unint64_t)result >= *((_QWORD *)v8 + 3))
          {
            result = sub_22E3B94F4((char **)v8 + 1, v10);
          }
          else
          {
            v12 = *v10;
            *v10 = 0;
            *(_QWORD *)result = v12;
            result += 8;
          }
          *((_QWORD *)v8 + 2) = result;
          ++v10;
        }
        while (v10 != v11);
        if (v9)
LABEL_13:
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 8))(v9);
LABEL_28:
        *a3 = *a1;
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    v22 = v9;
    *a2 = 0;
    v15 = (char **)*((_QWORD *)v8 + 2);
    if ((unint64_t)v15 >= *((_QWORD *)v8 + 3))
    {
      v16 = sub_22E3B94F4((char **)v8 + 1, (uint64_t *)&v22);
      result = v22;
      *((_QWORD *)v8 + 2) = v16;
      v22 = 0;
      if (result)
        result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      *v15 = v9;
      *((_QWORD *)v8 + 2) = v15 + 1;
    }
    goto LABEL_28;
  }
  if (*a2 && (*(unsigned int (**)(char *, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x24BED7780]))
  {
    v13 = (uint64_t **)(*a2 + 8);
    v14 = *v13;
    v22 = *a1;
    *a1 = 0;
    sub_22E3B9294(v13, (uint64_t)v14, (uint64_t *)&v22);
    result = v22;
    v22 = 0;
    if (result)
      result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    v7 = *a2;
    goto LABEL_21;
  }
  v17 = operator new();
  v18 = (uint64_t)*a1;
  *a1 = 0;
  v20 = *a2;
  v21 = (char *)v18;
  *a2 = 0;
  *a3 = sub_22F243A94(v17, (uint64_t *)&v21, (uint64_t *)&v20);
  v19 = (uint64_t)v20;
  v20 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = v21;
  v21 = 0;
  if (result)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22F243914(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_BYTE **)(a1 + 16);
  if (v4 == *(_BYTE **)(a1 + 24))
  {
    v7 = *(_BYTE **)a1;
    v8 = *(_QWORD **)(a1 + 8);
    if ((unint64_t)v8 <= *(_QWORD *)a1)
    {
      if (v4 == v7)
        v15 = 1;
      else
        v15 = (v4 - v7) >> 2;
      if (v15 >> 61)
        sub_22E3B3F8C();
      v16 = (char *)operator new(8 * v15);
      v17 = &v16[8 * (v15 >> 2)];
      v18 = &v16[8 * v15];
      v19 = v4 - (_BYTE *)v8;
      if (v4 == (_BYTE *)v8)
      {
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
      }
      else
      {
        v20 = v19 >> 3;
        v21 = &v17[v19 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * v20;
        v23 = 8 * (v15 >> 2);
        do
        {
          v24 = *v8;
          *v8++ = 0;
          *(_QWORD *)&v16[v23] = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
        v7 = *(_BYTE **)a1;
        v25 = *(_QWORD **)(a1 + 8);
        v26 = *(_QWORD **)(a1 + 16);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v18;
        while (v26 != v25)
        {
          v28 = *--v26;
          v27 = v28;
          *v26 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
      if (v7)
        operator delete(v7);
    }
    else
    {
      v9 = ((uint64_t)v8 - *(_QWORD *)a1) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = -(v10 >> 1);
      if (v8 == (_QWORD *)v4)
      {
        v14 = &v8[-(v10 >> 1)];
      }
      else
      {
        do
        {
          v12 = *v8;
          *v8 = 0;
          v13 = v8[v11];
          v8[v11] = v12;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          ++v8;
        }
        while (v8 != (_QWORD *)v4);
        v4 = *(_BYTE **)(a1 + 8);
        v14 = &v8[v11];
      }
      *(_QWORD *)(a1 + 8) = &v4[8 * v11];
      *(_QWORD *)(a1 + 16) = v14;
    }
  }
  v5 = *(_QWORD **)(a1 + 16);
  v6 = *a2;
  *a2 = 0;
  *v5 = v6;
  *(_QWORD *)(a1 + 16) += 8;
}

uint64_t sub_22F243A94(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char **v5;
  char *v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)a1 = MEMORY[0x24BED8418] + 16;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = sub_22E3B94F4((char **)(a1 + 8), a2);
  *(_QWORD *)(a1 + 16) = v6;
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 24))
  {
    v8 = sub_22E3B94F4(v5, a3);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v6 = v7;
    v8 = v6 + 8;
  }
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

void sub_22F243B14(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E3B96F0((__int128 **)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F243B84(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_22E3B9914(v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F243C54(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24FA2E2E8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_22F243CB4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24FA2E2E8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
LABEL_7:
      JUMPOUT(0x2348A0E9CLL);
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_7;
}

_QWORD *sub_22F243D28(_QWORD *a1)
{
  *a1 = &unk_24FA2E318;
  llvm::TargetTransformInfo::~TargetTransformInfo((llvm::TargetTransformInfo *)(a1 + 1));
  return a1;
}

uint64_t *sub_22F243D5C(uint64_t *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = (uint64_t)v3;
    operator delete(v3);
  }
  sub_22E3B9CA0(a1 + 15);
  return a1;
}

uint64_t sub_22F243DAC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24FA2E340;
  if (*(_BYTE *)(a1 + 208))
  {
    sub_22F243D5C((uint64_t *)(a1 + 8));
    *(_BYTE *)(a1 + 208) = 0;
  }
  return a1;
}

void sub_22F243DF4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24FA2E340;
  if (*(_BYTE *)(a1 + 208))
  {
    sub_22F243D5C((uint64_t *)(a1 + 8));
    *(_BYTE *)(a1 + 208) = 0;
  }
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F243E4C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_24FA2E370;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_22F243E90(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F243EFC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F243EFC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 32 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    v8 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v4;
      v10 = 32 * v8;
      while (1)
      {
        result = *(_QWORD *)(v9 + v10 - 8);
        if (v9 + v10 - 32 == result)
          break;
        if (result)
        {
          v11 = 5;
LABEL_16:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
        }
        v10 -= 32;
        if (!v10)
          return result;
      }
      result = v9 + v10 - 32;
      v11 = 4;
      goto LABEL_16;
    }
  }
  return result;
}

void sub_22F243FD4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F243FE8()
{
  return llvm::TracepointInstrumentPass::run();
}

void *sub_22F243FF0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F24400C(a2, a3, a4);
}

uint64_t sub_22F244004()
{
  return 1;
}

void *sub_22F24400C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA10C();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

_QWORD *sub_22F2440A4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_24FA2E420;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_22F2440E8()
{
  return llvm::ModuleToFunctionPassAdaptor::printPipeline();
}

void sub_22F2440F4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F244108()
{
  return llvm::MemProfilerPass::run();
}

void *sub_22F244110(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F24412C(a2, a3, a4);
}

uint64_t sub_22F244124()
{
  return 1;
}

void *sub_22F24412C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA2DC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void sub_22F2441C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2441DC()
{
  return llvm::ModuleMemProfilerPass::run();
}

void *sub_22F2441E4(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F244200(a2, a3, a4);
}

uint64_t sub_22F2441F8()
{
  return 1;
}

void *sub_22F244200(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA390();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void sub_22F24429C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2442B0()
{
  return llvm::air::AIRVerifierPass::run();
}

void *sub_22F2442B8(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F2442D4(a2, a3, a4);
}

uint64_t sub_22F2442CC()
{
  return 1;
}

void *sub_22F2442D4(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA444();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void sub_22F244370()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F244384()
{
  return llvm::VerifierPass::run();
}

void *sub_22F24438C(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F2443A8(a2, a3, a4);
}

uint64_t sub_22F2443A0()
{
  return 1;
}

void *sub_22F2443A8(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA4F8();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void sub_22F244444()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F244458()
{
  return llvm::ThinLTOBitcodeWriterPass::run();
}

void *sub_22F244460(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F24447C(a2, a3, a4);
}

uint64_t sub_22F244474()
{
  return 0;
}

void *sub_22F24447C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA5AC();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

void sub_22F244518()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F24452C()
{
  return llvm::BitcodeWriterPass::run();
}

void *sub_22F244534(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F244550(a2, a3, a4);
}

uint64_t sub_22F244548()
{
  return 1;
}

void *sub_22F244550(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA660();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t sub_22F2445E8()
{
  return llvm::PrintModulePass::run();
}

void *sub_22F2445F0(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  return sub_22F24460C(a2, a3, a4);
}

uint64_t sub_22F244604()
{
  return 1;
}

void *sub_22F24460C(llvm::raw_ostream *a1, uint64_t (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  void *result;

  v6 = sub_22E3BA79C();
  v9 = (const char *)a2(a3, v6, v7);
  v10 = v8;
  result = (void *)*((_QWORD *)a1 + 4);
  if (v8 > *((_QWORD *)a1 + 3) - (_QWORD)result)
    return (void *)llvm::raw_ostream::write(a1, v9);
  if (v8)
  {
    result = memcpy(result, v9, v8);
    *((_QWORD *)a1 + 4) += v10;
  }
  return result;
}

uint64_t sub_22F2446A4(uint64_t a1)
{
  sub_22F244794((void **)(a1 + 1904));
  sub_22F244794((void **)(a1 + 1824));
  sub_22F244794((void **)(a1 + 1744));
  sub_22F244834((char **)(a1 + 1664));
  sub_22F244794((void **)(a1 + 1584));
  sub_22F244794((void **)(a1 + 1504));
  sub_22F244794((void **)(a1 + 1424));
  sub_22F244794((void **)(a1 + 1344));
  sub_22F244834((char **)(a1 + 1264));
  sub_22F244834((char **)(a1 + 1184));
  sub_22F244834((char **)(a1 + 1104));
  sub_22E3BA9A8((char **)(a1 + 1024));
  sub_22E3BA9A8((char **)(a1 + 944));
  sub_22E3BA9A8((char **)(a1 + 864));
  sub_22E3BA9A8((char **)(a1 + 784));
  sub_22E3BA9A8((char **)(a1 + 704));
  sub_22E3BA9A8((char **)(a1 + 624));
  sub_22F244794((void **)(a1 + 544));
  sub_22F244794((void **)(a1 + 464));
  sub_22F244794((void **)(a1 + 384));
  sub_22F244794((void **)(a1 + 304));
  sub_22F244794((void **)(a1 + 224));
  sub_22F244794((void **)(a1 + 144));
  if (*(_BYTE *)(a1 + 128))
  {
    sub_22E3B9218(a1 + 32);
    *(_BYTE *)(a1 + 128) = 0;
  }
  return a1;
}

void **sub_22F244794(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void **v6;
  char *v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if (!(_DWORD)v2)
    goto LABEL_2;
  v7 = (char *)*result;
  v8 = result;
  v3 = 32 * v2;
  do
  {
    v4 = *(char **)&v7[v3 - 8];
    if (&v7[v3 - 32] == v4)
    {
      v4 = &v7[v3 - 32];
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_11;
      v5 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
    v3 -= 32;
  }
  while (v3);
  result = v8;
  v1 = (void **)*v8;
LABEL_2:
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

char **sub_22F244834(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 8];
      if (&v2[v4 - 32] == v5)
      {
        v5 = &v2[v4 - 32];
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v4 -= 32;
      if (!v4)
      {
        v2 = *a1;
        break;
      }
    }
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22F2448C4(_QWORD *a1)
{
  _QWORD *v2;

  MEMORY[0x23489D6E0](a1 + 80);
  llvm::InLineChangePrinter::~InLineChangePrinter((llvm::InLineChangePrinter *)(a1 + 73));
  sub_22F244924((uint64_t)(a1 + 69));
  llvm::IRChangedPrinter::~IRChangedPrinter((llvm::IRChangedPrinter *)(a1 + 63));
  v2 = (_QWORD *)a1[45];
  if (v2 != a1 + 47)
    free(v2);
  sub_22F244A04((llvm::TimePassesHandler *)(a1 + 16));
}

uint64_t sub_22F244924(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;
  void *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
        {
          v8 = (void *)(*(_QWORD *)v6 + 49);
          sub_22F2449BC((uint64_t)v6 + 8);
          llvm::deallocate_buffer(v6, v8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2449BC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_22F244A04(llvm::TimePassesHandler *a1)
{
  _QWORD *v2;

  llvm::TimePassesHandler::print(a1);
  v2 = (_QWORD *)*((_QWORD *)a1 + 16);
  if (v2 != (_QWORD *)((char *)a1 + 144))
    free(v2);
  sub_22F244A48((uint64_t)a1 + 96);
  JUMPOUT(0x23489C234);
}

uint64_t sub_22F244A48(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  void *v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(char ***)(*(_QWORD *)a1 + v4);
        if (v6 != (char **)-8 && v6 != 0)
        {
          v8 = *v6 + 57;
          sub_22F244AE0(v6 + 1);
          llvm::deallocate_buffer((llvm *)v6, v8);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

char **sub_22F244AE0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = MEMORY[0x23489EEC8]();
        MEMORY[0x2348A0E9C](v7, 0x10B2C402AE41D3ELL);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F244B5C(uint64_t a1, _DWORD *a2)
{
  int v4;

  if (*(_DWORD *)(a1 + 48)
    && !(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 104))(a2)
    && (llvm::isIRPrintingPass() & 1) == 0
    && !llvm::isBitcodeWriterPass())
  {
    v4 = a2[6];
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    if (v4 == 4)
    {
      createDebugifyModulePass();
      llvm::legacy::PassManager::add();
      llvm::legacy::PassManager::add();
      createCheckDebugifyModulePass();
    }
    else if (v4 == 2)
    {
      createDebugifyFunctionPass();
      llvm::legacy::PassManager::add();
      llvm::legacy::PassManager::add();
      createCheckDebugifyFunctionPass();
    }
  }
  return llvm::legacy::PassManager::add();
}

void sub_22F244CA0(llvm::legacy::PassManager *a1)
{
  llvm::legacy::PassManager::~PassManager(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F244CC4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v5 = v3[2];
        v3[2] = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

uint64_t sub_22F244D40(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F244D84(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22E3BB22C(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F244DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

llvm::StringMapImpl *sub_22F244E48(llvm::StringMapImpl *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;

  llvm::StringMapImpl::StringMapImpl(a1);
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      v8 = *a2;
      v7 = a2[1];
      a2 += 2;
      v10 = v7;
      sub_22F244EBC(a1, (const void *)v8, *((size_t *)&v8 + 1), &v10);
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

uint64_t *sub_22F244EBC(llvm::StringMapImpl *a1, const void *a2, size_t a3, _OWORD *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x23489D23C](a3 + 25, 8);
  v12 = v11;
  v13 = v11 + 24;
  if (a3)
    memcpy((void *)(v11 + 24), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  *(_QWORD *)v12 = a3;
  *(_OWORD *)(v12 + 8) = *a4;
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

unint64_t sub_22F244FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[3];
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[6];
  char v30;
  _QWORD v31[6];
  char v32;
  _QWORD *v33[7];
  int v34;

  sub_22E3BDFA0((uint64_t)v33, a1, (int *)a3);
  if (v34 == 2)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 6)
    {
      v9 = 0;
    }
    else
    {
      v11 = sub_22E3C0F00((uint64_t)v33);
      sub_22E3C1028((uint64_t)v33, (uint64_t)&v20);
      v12 = v27;
      *(_OWORD *)(a3 + 96) = v26;
      *(_OWORD *)(a3 + 112) = v12;
      *(_QWORD *)(a3 + 128) = v28;
      v13 = v23;
      *(_OWORD *)(a3 + 32) = v22;
      *(_OWORD *)(a3 + 48) = v13;
      v14 = v25;
      *(_OWORD *)(a3 + 64) = v24;
      *(_OWORD *)(a3 + 80) = v14;
      v15 = v21;
      if (v11)
        v9 = 4;
      else
        v9 = 0;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v15;
    }
    v16 = *(_OWORD *)(a3 + 24);
    v17[0] = *(_OWORD *)(a3 + 8);
    v17[1] = v16;
    v17[2] = *(_OWORD *)(a3 + 40);
    v18 = *(_QWORD *)(a3 + 72);
    v19 = v9;
    return sub_22E4EF100(a1, a2, v17);
  }
  else
  {
    if (v34 == 1)
    {
      v29[0] = sub_22F262930(a1, (unsigned __int8 *)a2, 0, 0);
      v29[1] = v7;
      v30 = 2;
      v8 = v29;
    }
    else
    {
      *(_QWORD *)&v20 = a1;
      *((_QWORD *)&v20 + 1) = a1 + 272;
      LOBYTE(v21) = 0;
      *((_QWORD *)&v21 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v31[0] = sub_22E50E974(&v20, a2, v6);
      v31[1] = 0;
      v32 = 0;
      v8 = v31;
    }
    return sub_22E3C0294(v33, v8);
  }
}

__n128 sub_22F24512C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  __int16 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD v15[4];
  _OWORD v16[8];
  uint64_t v17;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  if (v5 == 6)
    v6 = (*(_DWORD *)(a2 + 72) >> 2) & 1;
  else
    v6 = 1;
  if (v5 == 6)
    v7 = 7;
  else
    v7 = 4;
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 112);
  v16[6] = *(_OWORD *)(a2 + 96);
  v16[7] = v9;
  v17 = *(_QWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 48);
  v16[2] = *(_OWORD *)(a2 + 32);
  v16[3] = v10;
  v16[4] = *(_OWORD *)(a2 + 64);
  v16[5] = v8;
  v11 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v11;
  v12 = a4[1];
  v15[0] = *a4;
  v15[1] = v12;
  v13 = a4[3];
  v15[2] = a4[2];
  v15[3] = v13;
  sub_22F2451CC(a1, (int *)v16, a3, v7, v6, (uint64_t)v15, a5);
  return result;
}

void sub_22F2451CC(uint64_t a1@<X0>, int *a2@<X1>, unsigned int a3@<W2>, __int16 a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  llvm::Type **v15;
  char v16;
  uint64_t *v17;
  _QWORD *v18[7];
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[3];
  _BYTE v28[48];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_22E3BDFA0((uint64_t)v18, a1, a2);
  v12 = *(_QWORD *)a6;
  v13 = *(_OWORD *)(a6 + 24);
  v29 = *(_OWORD *)(a6 + 8);
  v30 = v13;
  v31 = *(_OWORD *)(a6 + 40);
  v32 = *(_QWORD *)(a6 + 56);
  if (v20)
  {
    memset(v28, 0, 28);
    *(_QWORD *)&v28[32] = 0;
    *(_QWORD *)&v28[40] = 0;
    if (v21 || !v12)
    {
      sub_22E3BE6A4((uint64_t)v18, (uint64_t)v28);
    }
    else
    {
      v14 = *(_OWORD *)(a6 + 24);
      *(_OWORD *)&v28[8] = *(_OWORD *)(a6 + 8);
      *(_OWORD *)&v28[24] = v14;
      *(_QWORD *)&v28[40] = *(_QWORD *)(a6 + 40);
      *(_QWORD *)v28 = v12;
    }
    if ((v28[24] & 3) != 0)
      v17 = (uint64_t *)sub_22F28ABCC(v28, v18[0]);
    else
      v17 = *(uint64_t **)v28;
    sub_22E3C367C(v18, v17);
    v27[0] = *(_OWORD *)v28;
    v27[1] = *(_OWORD *)&v28[16];
    v27[2] = *(_OWORD *)&v28[32];
    v23 = v29;
    v24 = v30;
    v25 = v31;
    v22 = v12;
    v26 = v32;
    sub_22E3C3A20((uint64_t)v18, v27, (uint64_t)&v22, a3, 1, a7);
  }
  else
  {
    v15 = (llvm::Type **)sub_22E3C3D48((uint64_t)v18, a4, a5);
    if (v19 != 2 || v12)
    {
      v23 = v29;
      v24 = v30;
      v25 = v31;
      v22 = v12;
      v26 = v32;
      sub_22E3C3E04((uint64_t)v18, v15, &v22, a3, 1, a7);
    }
    else
    {
      v16 = *(_BYTE *)(a7 + 48) & 0xF8 | 4;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      *(_QWORD *)a7 = 0;
      *(_DWORD *)(a7 + 24) = 0;
      *(_QWORD *)(a7 + 32) = 0;
      *(_QWORD *)(a7 + 40) = 0;
      *(_BYTE *)(a7 + 48) = v16;
    }
  }
}

__n128 sub_22F2453C8(_QWORD *a1, uint64_t a2, __int128 *a3, int a4)
{
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  _OWORD v17[8];
  uint64_t v18;
  __int128 v19[3];
  uint64_t v20;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3[4] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  if (v5 == 6)
    v6 = (*((_DWORD *)a3 + 18) >> 2) & 1;
  else
    v6 = 1;
  if (v5 == 6)
    v7 = 7;
  else
    v7 = 5;
  v8 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v8;
  v19[2] = *(_OWORD *)(a2 + 32);
  v20 = *(_QWORD *)(a2 + 48);
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[3];
  v17[2] = a3[2];
  v17[3] = v11;
  v17[0] = v9;
  v17[1] = v10;
  v13 = a3[4];
  v12 = a3[5];
  v14 = a3[6];
  v15 = a3[7];
  v18 = *((_QWORD *)a3 + 16);
  v17[6] = v14;
  v17[7] = v15;
  v17[4] = v13;
  v17[5] = v12;
  sub_22E3BF7BC(a1, v19, (uint64_t)v17, v7, v6, a4);
  return result;
}

void sub_22F245468(uint64_t a1@<X0>, int *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>)
{
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  llvm::Type **v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27[7];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37[3];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  sub_22E3BDFA0((uint64_t)v27, a1, a2);
  v23 = *a4;
  v24 = a4[1];
  v25 = a4[2];
  v26 = *((_QWORD *)a4 + 6);
  if (v28)
  {
    v14 = a3[1];
    v44 = *a3;
    v45 = v14;
    v46 = a3[2];
    v47 = *((_QWORD *)a3 + 6);
    sub_22E3C0548((uint64_t *)v27, (uint64_t)&v44, &v48);
    v38 = v23;
    v39 = v24;
    v40 = v25;
    v41 = v26;
    sub_22E3C0548((uint64_t *)v27, (uint64_t)&v38, &v42);
    if ((BYTE8(v49) & 3) != 0)
      v15 = (uint64_t *)sub_22F28ABCC(&v48, v27[0]);
    else
      v15 = (uint64_t *)v48;
    if ((v43 & 3) != 0)
      v16 = (uint64_t *)sub_22F28ABCC(&v42, v27[0]);
    else
      v16 = (uint64_t *)v42;
    v17 = sub_22E3C46B8(v27, v15, v16);
    v37[0] = v48;
    v37[1] = v49;
    v37[2] = v50;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v32 = 0;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    v36 = 0;
    sub_22E3C3A20((uint64_t)v27, v37, (uint64_t)&v29, 0, 0, a8);
  }
  else
  {
    v18 = a3[1];
    v44 = *a3;
    v45 = v18;
    v46 = a3[2];
    v47 = *((_QWORD *)a3 + 6);
    v19 = sub_22E3C06F4((uint64_t)v27, (uint64_t)&v44);
    v38 = v23;
    v39 = v24;
    v40 = v25;
    v41 = v26;
    v20 = (uint64_t *)sub_22E3C06F4((uint64_t)v27, (uint64_t)&v38);
    v21 = (llvm::Type **)sub_22E3C4CE4(v27, v19, v20, a5, a6, a7);
    v17 = v22;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v32 = 0;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    v36 = 0;
    sub_22E3C3E04((uint64_t)v27, v21, &v29, 0, 0, a8);
  }
  *(_QWORD *)(a8 + 56) = v17;
}

_QWORD *sub_22F245688@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  char *v4;

  if (a1)
  {
    if (a1 == 2)
    {
      result = (_QWORD *)operator new();
      v4 = (char *)&unk_24FA2E690;
    }
    else
    {
      result = (_QWORD *)operator new();
      v4 = (char *)&unk_24FA2E650;
    }
    *result = v4 + 16;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void sub_22F24570C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F245720(uint64_t a1, int a2)
{
  return (a2 + 4);
}

BOOL sub_22F245728(uint64_t a1, int a2)
{
  return (a2 - 1) < 4;
}

void *sub_22F245738()
{
  return &unk_22F44E5E8;
}

uint64_t sub_22F245748()
{
  return 3;
}

void sub_22F245754()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F245768(uint64_t a1, int a2)
{
  return (a2 - 1);
}

BOOL sub_22F245770(uint64_t a1, int a2)
{
  return (a2 - 1) < 5;
}

void *sub_22F245780()
{
  return &unk_22F44E5F8;
}

uint64_t sub_22F245790()
{
  return 5;
}

uint64_t sub_22F245798(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;

  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  v11 = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t *, uint64_t **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, &v11, 1, 0);
  if (!result)
  {
    v10 = llvm::User::operator new((llvm::User *)0x50);
    sub_22E3C1470(v10, (uint64_t)a2, a3, &v11, 1);
    return sub_22E3C12C8((uint64_t *)a1, v10, a5);
  }
  return result;
}

double sub_22F245864@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v12;
  int v13;
  __int128 v14;
  double result;
  _OWORD v16[3];
  __int128 v17[3];

  v12 = *(_DWORD *)(llvm::PointerType::get() + 8);
  v13 = *(_DWORD *)(a3 + 8);
  if ((v13 & 0xFE) == 0x12)
    v13 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
  v14 = a2[1];
  if ((v13 ^ v12) > 0xFF)
  {
    v16[0] = *a2;
    v16[1] = v14;
    v16[2] = a2[2];
    *(_QWORD *)&result = sub_22E3C1624(a1, (uint64_t)v16, a3, a4, a5, a6).n128_u64[0];
  }
  else
  {
    v17[0] = *a2;
    v17[1] = v14;
    v17[2] = a2[2];
    *(_QWORD *)&result = sub_22E3BEE6C(a1, v17, a4, a5, a6).n128_u64[0];
  }
  return result;
}

uint64_t sub_22F245944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 a5)
{
  llvm::Module *Module;
  uint64_t DataLayout;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  if ((a5 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
    DataLayout = llvm::Module::getDataLayout(Module);
    sub_22E3C304C(DataLayout, *a4);
    v13[0] = (unint64_t)(v9 + 7) >> 3;
    v13[1] = v10 == 1;
    llvm::TypeSize::operator unsigned long long();
  }
  v11 = llvm::User::operator new((llvm::User *)0x40);
  llvm::AtomicCmpXchgInst::AtomicCmpXchgInst();
  v14 = 257;
  return sub_22F245A34((uint64_t *)a1, v11, (uint64_t)v13);
}

uint64_t sub_22F245A34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t sub_22F245AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 a5)
{
  llvm::Module *Module;
  uint64_t DataLayout;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  if ((a5 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
    DataLayout = llvm::Module::getDataLayout(Module);
    sub_22E3C304C(DataLayout, *a4);
    v13[0] = (unint64_t)(v9 + 7) >> 3;
    v13[1] = v10 == 1;
    llvm::TypeSize::operator unsigned long long();
  }
  v11 = llvm::User::operator new((llvm::User *)0x40);
  llvm::AtomicRMWInst::AtomicRMWInst();
  v14 = 257;
  return sub_22F245A34((uint64_t *)a1, v11, (uint64_t)v13);
}

uint64_t sub_22F245B80(uint64_t a1, llvm::LLVMContext *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v5 = *((_OWORD *)a2 + 1);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  v9[2] = *((_OWORD *)a2 + 2);
  if ((BYTE8(v5) & 3) != 0)
    sub_22F28ABCC(v9, *(_QWORD *)(a1 + 136));
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  v8[2] = a3[2];
  if ((BYTE8(v6) & 3) != 0)
    sub_22F28ABCC(v8, *(_QWORD *)(a1 + 136));
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateMemTransferInst();
}

uint64_t sub_22F245CA0(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

uint64_t sub_22F245D1C(_QWORD *a1)
{
  uint64_t result;
  llvm::Value *v3;

  result = a1[422];
  if (!result)
  {
    v3 = (llvm::Value *)sub_22E62E820(a1, "_NSConcreteGlobalBlock", 22, a1[12], 0, 0, 0);
    a1[422] = v3;
    sub_22E3CCAB0(a1, v3);
    return a1[422];
  }
  return result;
}

uint64_t sub_22F245D78(_QWORD *a1)
{
  uint64_t result;
  llvm::Value *v3;

  result = a1[423];
  if (!result)
  {
    v3 = (llvm::Value *)sub_22E62E820(a1, "_NSConcreteStackBlock", 21, a1[12], 0, 0, 0);
    a1[423] = v3;
    sub_22E3CCAB0(a1, v3);
    return a1[423];
  }
  return result;
}

uint64_t sub_22F245DD4(uint64_t a1, int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if ((a2 - 3) < 2 || a2 != 2)
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 8) >> 44) & 1;
  v3 = *(_QWORD *)(a1 + 144);
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 152) + 8) & 0x100000000000) == 0)
    return 0;
  return (*(unsigned __int8 *)(*(_QWORD *)(v3 + 184) + 1) >> 1) & 1;
}

uint64_t sub_22F245E28(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 3424);
  if (!result)
  {
    sub_22E66CB04(a1 + 280, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16536));
    *(_QWORD *)(a1 + 3424) = llvm::StructType::create();
    result = llvm::PointerType::get();
    *(_QWORD *)(a1 + 3424) = result;
  }
  return result;
}

uint64_t sub_22F245EDC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t Int8PtrTy;
  uint64_t v7;
  uint64_t v8;
  void *__src;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 3432);
  if (!result)
  {
    v3 = sub_22F245E28(a1);
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 152) + 52) & 0x40000000) != 0)
    {
      v5 = *(void **)(a1 + 72);
      Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(*(_QWORD *)(*(_QWORD *)(a1 + 792) + 8) + 232), (llvm::LLVMContext *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 792)+ 8)+ 144)+ 15072)+ 20));
      v12 = &v14;
      v14 = (uint64_t)v5;
      v15 = v5;
      v16 = Int8PtrTy;
      v13 = 0x800000003;
      v7 = sub_22E699F3C((_QWORD *)a1);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 272))(v7);
      if (v8)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v8 + 16))(&__src);
        sub_22F247178((unsigned int *)&v12, (uint64_t)v12 + 8 * v13, (uint64_t *)__src, (uint64_t *)__src + v10);
        if (__src != &v11)
          free(__src);
      }
      result = llvm::StructType::create();
      *(_QWORD *)(a1 + 3432) = result;
      if (v12 != &v14)
      {
        free(v12);
        return *(_QWORD *)(a1 + 3432);
      }
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 72);
      v12 = *(void **)(a1 + 96);
      v13 = v4;
      v14 = v4;
      v15 = v12;
      v16 = v3;
      result = llvm::StructType::create();
      *(_QWORD *)(a1 + 3432) = result;
    }
  }
  return result;
}

uint64_t sub_22F246068@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  llvm::GetElementPtrInst *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Type *Int8PtrTy;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int16 v75;
  unint64_t v76;
  _OWORD v77[3];
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD v81[154];
  _QWORD v82[26];
  _QWORD v83[4];
  _QWORD v84[8];

  v84[5] = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3));
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 10;
  else
    v11 = 0;
  if (!v11)
  {
    v10 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0));
    v9 = *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3));
  }
  v12 = (uint64_t *)sub_22E50E93C(a1, v9, 0, a5);
  v13 = (llvm::LLVMContext *)sub_22F245EDC(*(_QWORD *)(a1 + 144));
  v14 = *(_QWORD *)(v10 + 32);
  v15 = *(_QWORD **)(a1 + 144);
  v16 = v15[18];
  v79 = v81;
  v80 = 0x800000000;
  v81[152] = v82;
  v81[153] = 0x100000000;
  v82[24] = v83;
  v82[25] = 0x100000000;
  v83[2] = v84;
  v83[3] = 0x200000000;
  v84[4] = 0;
  if ((*(_DWORD *)(v15[19] + 52) & 0x40000000) != 0)
  {
    Int8PtrTy = (llvm::Type *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(*(_QWORD *)(v15[99] + 8) + 232), (llvm::LLVMContext *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[99] + 8)+ 144)+ 15072)+ 20));
    LOWORD(v72) = 257;
    v44 = sub_22E3CA9BC((uint64_t *)(a1 + 272), (uint64_t)v12, (uint64_t)Int8PtrTy, (uint64_t)&v68);
    v45 = sub_22EF5DD84(v16, *(_QWORD *)(v16 + 16392), 5);
    v46 = sub_22EF5B848(v16, v45, 0);
    v68 = (const char *)v44;
    v69 = 0;
    v74 = 0;
    v75 = 0;
    v76 = v46;
    v47 = sub_22E3C187C((uint64_t)&v79, (unint64_t)&v68, 1);
    v48 = &v79[19 * v80];
    v49 = *(_OWORD *)(v47 + 16);
    *(_OWORD *)v48 = *(_OWORD *)v47;
    *((_OWORD *)v48 + 1) = v49;
    v50 = *(_QWORD *)(v47 + 144);
    v51 = *(_OWORD *)(v47 + 128);
    v52 = *(_OWORD *)(v47 + 96);
    *((_OWORD *)v48 + 7) = *(_OWORD *)(v47 + 112);
    *((_OWORD *)v48 + 8) = v51;
    v48[18] = v50;
    *((_OWORD *)v48 + 6) = v52;
    v53 = *(_OWORD *)(v47 + 80);
    v54 = *(_OWORD *)(v47 + 32);
    v55 = *(_OWORD *)(v47 + 48);
    *((_OWORD *)v48 + 4) = *(_OWORD *)(v47 + 64);
    *((_OWORD *)v48 + 5) = v53;
    *((_OWORD *)v48 + 2) = v54;
    *((_OWORD *)v48 + 3) = v55;
    LODWORD(v80) = v80 + 1;
    v32 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF0);
    v56 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
    if (!v56 || *(_BYTE *)(v56 + 16) != 26)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v56 = sub_22F10CF48(v56);
      else
        v56 = 0;
    }
    v57 = (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
    sub_22E477B1C(a1, (uint64_t)&v79, v56 & 0xFFFFFFFFFFFFFFFBLL, v57, (unint64_t *)(v57 + 8 * a2[4]), 0, 0, 0);
    if ((*(_DWORD *)(sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3))) + 28) & 0x7F) == 0x40)
    {
      LOWORD(v72) = 257;
      v19 = sub_22E3C4170((uint64_t *)(a1 + 272), v13, v12, 0, 2, (uint64_t)&v68);
      v58 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
      LOWORD(v72) = 257;
      v42 = sub_22E3C3200((uint64_t *)(a1 + 272), Int8PtrTy, (uint64_t)v19, v58, 0, (uint64_t)&v68);
    }
    else
    {
      v42 = sub_22F27A0D8(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 792), *(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
      v19 = 0;
    }
  }
  else
  {
    v17 = llvm::PointerType::get();
    v68 = "block.literal";
    LOWORD(v72) = 259;
    v18 = (uint64_t *)sub_22E3CA9BC((uint64_t *)(a1 + 272), (uint64_t)v12, v17, (uint64_t)&v68);
    LOWORD(v72) = 257;
    v19 = sub_22E3C4170((uint64_t *)(a1 + 272), v13, v18, 0, 3, (uint64_t)&v68);
    v20 = *(_QWORD *)(a1 + 96);
    LOWORD(v72) = 257;
    v21 = sub_22E3CA9BC((uint64_t *)(a1 + 272), (uint64_t)v18, v20, (uint64_t)&v68);
    v22 = *(_QWORD *)(v16 + 16816);
    v68 = (const char *)v21;
    v69 = 0;
    v74 = 0;
    v75 = 0;
    v76 = v22;
    v23 = sub_22E3C187C((uint64_t)&v79, (unint64_t)&v68, 1);
    v24 = &v79[19 * v80];
    v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v24 = *(_OWORD *)v23;
    *((_OWORD *)v24 + 1) = v25;
    v26 = *(_QWORD *)(v23 + 144);
    v27 = *(_OWORD *)(v23 + 128);
    v28 = *(_OWORD *)(v23 + 96);
    *((_OWORD *)v24 + 7) = *(_OWORD *)(v23 + 112);
    *((_OWORD *)v24 + 8) = v27;
    v24[18] = v26;
    *((_OWORD *)v24 + 6) = v28;
    v29 = *(_OWORD *)(v23 + 80);
    v30 = *(_OWORD *)(v23 + 32);
    v31 = *(_OWORD *)(v23 + 48);
    *((_OWORD *)v24 + 4) = *(_OWORD *)(v23 + 64);
    *((_OWORD *)v24 + 5) = v29;
    *((_OWORD *)v24 + 2) = v30;
    *((_OWORD *)v24 + 3) = v31;
    LODWORD(v80) = v80 + 1;
    v32 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF0);
    v33 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
    if (!v33 || *(_BYTE *)(v33 + 16) != 26)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        v33 = sub_22F10CF48(v33);
      else
        v33 = 0;
    }
    v34 = (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
    sub_22E477B1C(a1, (uint64_t)&v79, v33 & 0xFFFFFFFFFFFFFFFBLL, v34, (unint64_t *)(v34 + 8 * a2[4]), 0, 0, 0);
    v35 = *(llvm::Type **)(a1 + 96);
    v36 = (63 - __clz(*(unsigned __int8 *)(a1 + 130))) | 0x100;
    LOWORD(v72) = 257;
    v42 = sub_22E3C3200((uint64_t *)(a1 + 272), v35, (uint64_t)v19, v36, 0, (uint64_t)&v68);
  }
  v59 = *v32;
  if (!*v32 || *(unsigned __int8 *)(v59 + 16) - 27 <= 0xFFFFFFFD)
    v59 = sub_22F10CF48(*v32);
  v60 = sub_22F24E098((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), (unsigned int *)&v79, v59, v37, v38, v39, v40, v41);
  sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v60);
  v61 = llvm::PointerType::get();
  LOWORD(v72) = 257;
  v62 = sub_22E3CA9BC((uint64_t *)(a1 + 272), v42, v61, (uint64_t)&v68);
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  if ((*(_BYTE *)(v63 + 1352) & 3) != 0)
  {
    v65 = sub_22F289D78((_QWORD *)a1, (_BYTE *)(v63 + 1352), (uint64_t)v19);
  }
  else
  {
    v64 = 0;
    v65 = 0;
  }
  v69 = 0;
  v70 = 0;
  v68 = (const char *)v62;
  v71 = 0;
  v72 = v65;
  v73 = v64;
  v66 = *(_OWORD *)(a3 + 16);
  v77[0] = *(_OWORD *)a3;
  v77[1] = v66;
  v77[2] = *(_OWORD *)(a3 + 32);
  v78 = *(_QWORD *)(a3 + 48);
  sub_22E47A004(a4, a1, v60, &v68, v77, &v79, 0, 0, 0, 0);
  return sub_22E3CEBAC((uint64_t)&v79);
}

uint64_t sub_22F246644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];
  int v13;
  _QWORD v14[776];
  _QWORD v15[2];
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v23[280];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v29 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(v0 + 3352);
  v14[0] = v5;
  v15[0] = 0;
  if ((sub_22F246C54((uint64_t *)(v0 + 3352), v14, v15) & 1) == 0 || (v9 = *(_QWORD *)(v15[0] + 8)) == 0)
  {
    v11 = *(_QWORD *)(v6 + 16);
    v15[0] = v4;
    v15[1] = v2;
    v16 = 0;
    v17 = 0;
    v19 = 0;
    v18 = 0;
    v20 = 0;
    v21 = v23;
    v22 = 0x400000000;
    memset(&v23[256], 0, 24);
    v24 = v11;
    v26 = 0u;
    v27 = 0u;
    v28 = 0;
    v25 = v6;
    sub_22E3C6AA8(v7, 0, (uint64_t)v15);
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    sub_22E618EBC((uint64_t)v14, v7, 0);
    sub_22E3C7AD4((uint64_t)v14, 0, 0, (uint64_t)v15, (uint64_t)v12, 0, 1);
    sub_22E619434((uint64_t)v14);
    llvm::deallocate_buffer(0, 0);
    v14[0] = v6;
    v12[0] = 0;
    v9 = 0;
    if (sub_22F246C54(v8, v14, v12))
      v9 = *(_QWORD *)(v12[0] + 8);
    sub_22E3CE2D4((uint64_t)v15);
  }
  return v9;
}

uint64_t sub_22F246808(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

unint64_t sub_22F246888(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;
  BOOL v3;

  result = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    {
      return 0;
    }
    else
    {
      result = sub_22EFD10F8(result);
      if (result)
      {
        v2 = *(_QWORD *)(*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v2)
          v3 = *(_BYTE *)(v2 + 16) == 26;
        else
          v3 = 0;
        if (!v3)
          v2 = sub_22F10CF48(v2);
        return sub_22F113A44(v2) != 0;
      }
    }
  }
  return result;
}

uint64_t sub_22F2468FC(_QWORD *a1)
{
  uint64_t v3;
  llvm::Value *v4;

  if (a1[425])
    return a1[424];
  v3 = llvm::FunctionType::get();
  a1[424] = sub_22E633A04(a1, v3, "_Block_object_assign", 20, 0, 0, 0);
  a1[425] = v4;
  sub_22E3CCAB0(a1, v4);
  return a1[424];
}

double sub_22F2469BC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, std::string::size_type a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  __int128 v11;
  unint64_t v12;
  unsigned int *v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD v19[4];
  __int16 v20;
  _OWORD v21[3];

  v10 = (uint64_t *)sub_22E3CAE34(a1, a3);
  v11 = a2[1];
  v21[0] = *a2;
  v21[1] = v11;
  v21[2] = a2[2];
  v12 = *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(a3 + 40) & 7) != 0 || v12 == 0)
  {
    v16 = 0;
    v15 = &unk_22F54C66D;
  }
  else
  {
    v14 = *(unsigned int **)(v12 + 16);
    v17 = *v14;
    v15 = v14 + 4;
    v16 = v17;
  }
  v20 = 261;
  v19[0] = v15;
  v19[1] = v16;
  return sub_22E3CB2EC(a1, (uint64_t)v21, v10, a4, (uint64_t)v19, a5);
}

llvm::Value *sub_22F246A70(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  uint64_t v10;
  llvm::Value *result;
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22F246B88(*(_QWORD **)(a1 + 144));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 96);
  v13 = 257;
  v14[0] = sub_22E3C1740((uint64_t *)(a1 + 272), 49, a2, v10, (uint64_t)v12);
  v14[1] = llvm::ConstantInt::get();
  v13 = 257;
  if (!a4)
    return sub_22F24EEDC(a1, v7, v9, (uint64_t)v14, 2, (uint64_t)v12);
  result = (llvm::Value *)sub_22F24F1F4((_QWORD *)a1, v7, v9, (uint64_t)v14, 2, (uint64_t)v12);
  *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
  return result;
}

uint64_t sub_22F246B88(_QWORD *a1)
{
  uint64_t v3;
  llvm::Value *v4;

  if (a1[427])
    return a1[426];
  v3 = llvm::FunctionType::get();
  a1[426] = sub_22E633A04((uint64_t)a1, v3, "_Block_object_dispose", 0x15uLL, 0, 0, 0);
  a1[427] = v4;
  sub_22E3CCAB0(a1, v4);
  return a1[426];
}

uint64_t sub_22F246C44()
{
  return 1;
}

uint64_t sub_22F246C4C()
{
  return 1;
}

uint64_t sub_22F246C54(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F246CF0(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F246D4C((uint64_t)a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F246D4C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E3CD5D8(a1, v6);
  v8 = 0;
  sub_22F246C54((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F246DF8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F246C54((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F246EA4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  result = sub_22F29F7BC((uint64_t)a1, a2);
  v4 = result;
  v5 = *a1;
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 >= *(_DWORD *)(v5 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t sub_22F246F08(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  result = llvm::ConstantInt::get();
  v3 = *a1;
  v4 = *(_DWORD *)(v3 + 16);
  if (v4 >= *(_DWORD *)(v3 + 20))
  {
    v5 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v5;
    v4 = *(_DWORD *)(v3 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4) = result;
  ++*(_DWORD *)(v3 + 16);
  return result;
}

uint64_t *sub_22F246F88(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v9 = MEMORY[0x23489D23C](a3 + 17, 8);
  v10 = (_QWORD *)v9;
  v11 = v9 + 16;
  if (a3)
    memcpy((void *)(v9 + 16), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *v10 = a3;
  v10[1] = 0;
  *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F247080(uint64_t *a1, llvm::ConstantPointerNull *this)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  result = llvm::ConstantPointerNull::get(this, this);
  v4 = *a1;
  v5 = *(_DWORD *)(v4 + 16);
  if (v5 >= *(_DWORD *)(v4 + 20))
  {
    v6 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v6;
    v5 = *(_DWORD *)(v4 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5) = result;
  ++*(_DWORD *)(v4 + 16);
  return result;
}

uint64_t sub_22F2470F8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

unsigned int *sub_22F247178(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return (unsigned int *)sub_22E3D0148((uint64_t)result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = (unsigned int *)sub_22F246808((uint64_t)v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

uint64_t sub_22F247304(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F247398(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F247398(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E3D01CC(a1, v6);
  v8 = 0;
  sub_22F246C54((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F247444(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F246C54((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F2474F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;

  if (a2)
    v4 = (uint64_t *)(a2 - 8);
  else
    v4 = 0;
  sub_22E3CF554(a3, v4[4]);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*v4 + 16))(v4, a3);
}

uint64_t sub_22F24753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;

  if (a2)
    v6 = (uint64_t *)(a2 - 8);
  else
    v6 = 0;
  sub_22E3CF554(a5, v6[4]);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, a5);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F247598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;

  if (a2)
    v4 = (uint64_t *)(a2 - 8);
  else
    v4 = 0;
  sub_22E3CF554(a3, v4[4]);
  (*(void (**)(uint64_t *, uint64_t))(*v4 + 16))(v4, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F2475F0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_22F24768C(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_22F2475F0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F24772C(a2, a3, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v12 = *a4;
    *(_OWORD *)(result + 24) = a4[1];
    *(_OWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F24772C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E3D1240(a1, v6);
  v8 = 0;
  sub_22F2475F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2477DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2475F0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v10 + 3) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_22F24789C()
{
  return 0;
}

uint64_t *sub_22F2478A8(int a1)
{
  int v1;
  uint64_t *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t *v6;

  v6 = 0;
  v1 = sub_22F24BBC0(a1, &v6);
  v2 = &qword_253E4BBE0;
  if ((qword_253E4BBD8 & 1) != 0)
  {
    v3 = 8;
  }
  else
  {
    v2 = (uint64_t *)qword_253E4BBE0;
    v3 = qword_253E4BBE8;
  }
  v4 = &v2[3 * v3];
  if (v1)
    return v6;
  else
    return v4;
}

llvm::Value *sub_22F247904(uint64_t a1, llvm::Value *this)
{
  uint64_t v3;
  _BYTE *Name;
  char v6;
  uint64_t Declaration;
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;
  llvm::Value *v12;

  v12 = this;
  v3 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)this != v3)
  {
    Name = (_BYTE *)llvm::Value::getName(this);
    v6 = 1;
    HIBYTE(v11) = 1;
    if (*Name)
    {
      v10[0] = Name;
      v6 = 3;
    }
    LOBYTE(v11) = v6;
    v12 = (llvm::Value *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)this, v3, (uint64_t)v10);
  }
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v8 = *(_QWORD *)(Declaration + 24);
  else
    v8 = 0;
  v11 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v8, Declaration, (uint64_t)&v12, 1, (uint64_t)v10, 0);
}

llvm::Value *sub_22F2479EC(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, _QWORD *a5, int a6, int a7, int a8)
{
  uint64_t v14;

  v14 = 0;
  if ((sub_22F3C4410((uint64_t)a2, &v14, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a3, (int)a5, a6, a7, a8) & 1) != 0)
    return (llvm::Value *)llvm::ConstantInt::get();
  else
    return sub_22E3D17A0(a1, a2, a3, a4, a5);
}

uint64_t sub_22F247A84(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_22F24BEB4(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 2;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

llvm::Constant **sub_22F247B00(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  llvm::Constant **v6;
  llvm::Type *v7;
  uint64_t NullValue;
  int v9;
  llvm::LLVMContext *v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 272;
  v12 = a1;
  *(_QWORD *)&v13 = a1 + 272;
  BYTE8(v13) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v6 = (llvm::Constant **)sub_22E50E974(&v12, a2, a3);
  if ((*(_BYTE *)(a1 + 1866) & 4) != 0
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 280))(*(_QWORD *)(a1 + 152)))
  {
    sub_22E61F030(&v16, a1);
    NullValue = llvm::Constant::getNullValue(*v6, v7);
    v15 = 257;
    v12 = sub_22E3C18F4(v5, 33, (uint64_t *)v6, NullValue, (uint64_t)&v12);
    v13 = xmmword_22F454908;
    sub_22EFF605C(a2);
    v17[0] = sub_22E4DE978(a1, v9);
    llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), v10);
    v17[1] = llvm::ConstantInt::get();
    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&v12, 1, 8u, (uint64_t)v17, 2, 0, 0);
    sub_22E61F040((uint64_t)&v16);
  }
  return v6;
}

uint64_t sub_22F247C50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  __int128 v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
  {
    result = (uint64_t)sub_22F28AAB4((_QWORD *)a2, a3, *(_QWORD *)(a1[18] + 8), (uint64_t)a1);
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_OWORD *)(a5 + 16) = v10;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    v13 = *(uint64_t **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v14 = (uint64_t *)llvm::ConstantInt::get();
    result = sub_22E42129C(a1, v12, v13, v14, a4);
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a2 + 16) | a3;
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = v15;
    *(_QWORD *)(a5 + 16) = v16 & -v16;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

llvm::Value *sub_22F247D1C(uint64_t a1, uint64_t a2, unsigned int *a3, __n128 a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Declaration;
  uint64_t v14;
  llvm::Value *result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v17 = a2;
  v18 = a2 + 272;
  v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v8 = (uint64_t *)sub_22E50E974(&v17, v7, a4);
  v9 = *(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 4] + ((unint64_t)*a3 >> 24));
  v17 = a2;
  v18 = a2 + 272;
  v19 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v11 = sub_22E50E974(&v17, v9, v10);
  v22 = *v8;
  v21 = 257;
  v12 = sub_22E3BF45C((uint64_t *)(a2 + 272), v11, v22, 0, (uint64_t)&v17);
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v14 = *(_QWORD *)(Declaration + 24);
  else
    v14 = 0;
  v23[0] = v8;
  v23[1] = v8;
  v23[2] = v12;
  v21 = 257;
  result = sub_22E462B78((uint64_t *)(a2 + 272), v14, Declaration, (uint64_t)v23, 3, (uint64_t)&v17, 0);
  v16 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v16 & 0xF8;
  return result;
}

uint64_t sub_22F247E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  result = sub_22E3C19FC((uint64_t *)a1, 24, a2, a3, a4);
  if (!result)
  {
    v7 = llvm::BinaryOperator::Create();
    if (*(_QWORD *)(a1 + 88))
      llvm::Instruction::setMetadata();
    llvm::Instruction::setFastMathFlags();
    return sub_22E3C12C8((uint64_t *)a1, v7, a4);
  }
  return result;
}

double sub_22F247F68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _BYTE v11[40];
  __int128 v12[3];

  sub_22E3D2FA0(a1, a2, a3, a4, 0, 0, 0, v12);
  sub_22E6281E0(*(_QWORD **)(a1 + 144), a3, (uint64_t)v11);
  return sub_22E462E84(a1, v12, a3, a5, (uint64_t)v11, a6);
}

llvm::Value *sub_22F247FE0(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  uint64_t Declaration;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v12[3] = llvm::FixedVectorType::get();
  v12[0] = a2;
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v8);
  v12[1] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v9);
  v12[2] = llvm::ConstantInt::get();
  Declaration = llvm::Intrinsic::getDeclaration();
  return sub_22E462B78(*a1, *(_QWORD *)(Declaration + 24), Declaration, (uint64_t)v12, 3, a5, 0);
}

llvm::Value *sub_22F2480E0(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  llvm::LLVMContext *v12;
  llvm::LLVMContext *v13;
  llvm::LLVMContext *v14;
  uint64_t Declaration;
  llvm::Value *v16;
  _QWORD v18[6];

  v18[5] = *MEMORY[0x24BDAC8D0];
  llvm::FixedVectorType::get();
  v18[0] = a3;
  v18[1] = a5;
  llvm::Type::getInt1Ty((llvm::Type *)(*a1)[8], v12);
  v18[2] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v13);
  v18[3] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v14);
  v18[4] = llvm::ConstantInt::get();
  Declaration = llvm::Intrinsic::getDeclaration();
  v16 = sub_22E462B78(*a1, *(_QWORD *)(Declaration + 24), Declaration, (uint64_t)v18, 5, a9, 0);
  llvm::Value::getContext(v16);
  llvm::Attribute::getWithAlignment();
  llvm::Value::getContext(v16);
  *((_QWORD *)v16 + 8) = llvm::AttributeList::addParamAttribute();
  return v16;
}

llvm::Value *sub_22F248264(uint64_t **a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  llvm::LLVMContext *v10;
  llvm::LLVMContext *v11;
  uint64_t Declaration;
  llvm::Value *v13;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a5;
  llvm::Type::getInt1Ty((llvm::Type *)(*a1)[8], a2);
  v15[3] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v10);
  v15[4] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v11);
  v15[5] = llvm::ConstantInt::get();
  Declaration = llvm::Intrinsic::getDeclaration();
  v13 = sub_22E462B78(*a1, *(_QWORD *)(Declaration + 24), Declaration, (uint64_t)v15, 6, a9, 0);
  llvm::Value::getContext(v13);
  llvm::Attribute::getWithAlignment();
  llvm::Value::getContext(v13);
  *((_QWORD *)v13 + 8) = llvm::AttributeList::addParamAttribute();
  return v13;
}

uint64_t sub_22F2483D8(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  if ((BYTE8(v2) & 3) != 0)
    sub_22F28ABCC(v4, *(_QWORD *)(a1 + 136));
  return llvm::IRBuilderBase::CreateMemSet();
}

uint64_t sub_22F248470(uint64_t a1, llvm::LLVMContext *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v5 = *((_OWORD *)a2 + 1);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  v9[2] = *((_OWORD *)a2 + 2);
  if ((BYTE8(v5) & 3) != 0)
    sub_22F28ABCC(v9, *(_QWORD *)(a1 + 136));
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  v8[2] = a3[2];
  if ((BYTE8(v6) & 3) != 0)
    sub_22F28ABCC(v8, *(_QWORD *)(a1 + 136));
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateMemCpyInline();
}

uint64_t sub_22F24857C(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  __int128 v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  v9[2] = a2[2];
  if ((BYTE8(v5) & 3) != 0)
    sub_22F28ABCC(v9, *(_QWORD *)(a1 + 136));
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  v8[2] = a3[2];
  if ((BYTE8(v6) & 3) != 0)
    sub_22F28ABCC(v8, *(_QWORD *)(a1 + 136));
  return llvm::IRBuilderBase::CreateMemMove();
}

uint64_t sub_22F24866C(uint64_t a1)
{
  llvm::UnreachableInst *v2;
  _BYTE v4[32];
  __int16 v5;

  v2 = (llvm::UnreachableInst *)llvm::User::operator new((llvm::User *)0x40);
  llvm::UnreachableInst::UnreachableInst(v2, *(llvm::LLVMContext **)(a1 + 64), 0);
  v5 = 257;
  return sub_22F245A34((uint64_t *)a1, (uint64_t)v2, (uint64_t)v4);
}

void *sub_22F2486C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  llvm::Type *v10;
  llvm::DataLayout *DataLayout;
  uint64_t v12;
  uint64_t v13;
  void *result;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v10 = *(llvm::Type **)(a2 + 8);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1[6] + 56) + 40));
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v10);
  llvm::DataLayout::getABITypeAlignment(DataLayout, v10);
  v12 = llvm::TypeSize::operator unsigned long long();
  v13 = v12;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
  {
    result = sub_22F28AAB4((_QWORD *)a2, v12 * a3, (uint64_t)v10, (uint64_t)a1);
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_OWORD *)(a5 + 16) = v15;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    v16 = *(uint64_t **)a2;
    v17 = (uint64_t *)llvm::ConstantInt::get();
    result = sub_22E3E5044(a1, (uint64_t)v10, v16, v17, a4);
    v18 = *(_QWORD *)(a2 + 16) | (v13 * a3);
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v18 & -v18;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

uint64_t sub_22F248800(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Type *v8;
  uint64_t NullValue;
  uint64_t result;
  char v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t *v16[4];
  llvm::Constant *v17;

  sub_22E43E0B0((uint64_t)v16, a3, a2);
  v5 = v16[0];
  if (*((_BYTE *)v16[1] + 8) == 15)
  {
    v14[0] = "src_addr";
    v15 = 259;
    v5 = (uint64_t *)sub_22E3D3028((uint64_t *)(a2 + 272), v16[0], (uint64_t)v17, (uint64_t)v14);
  }
  v6 = a2 + 272;
  v14[0] = "set_bits";
  v15 = 259;
  v7 = (uint64_t *)sub_22E3E49C4(v6, (uint64_t)v5, (uint64_t)v16[3], (uint64_t)v14);
  NullValue = llvm::Constant::getNullValue(v17, v8);
  v12 = "is_aligned";
  v13 = 259;
  result = sub_22E3C18F4(v6, 32, v7, NullValue, (uint64_t)&v12);
  v11 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v11 & 0xF8;
  return result;
}

uint64_t sub_22F2488E4(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  llvm::Type **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  uint64_t *v21[4];
  __int16 v22;
  uint64_t *v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  __int16 v27;

  sub_22E43E0B0((uint64_t)v23, a3, a2);
  v8 = v23[0];
  if (*(_BYTE *)(*v23[0] + 8) == 15)
  {
    v26[0] = "intptr";
    v27 = 259;
    v8 = (uint64_t *)sub_22E3C1740((uint64_t *)(a2 + 272), 47, (uint64_t)v23[0], v25, (uint64_t)v26);
  }
  v9 = (uint64_t)v8;
  if (a4)
  {
    v21[0] = (uint64_t *)"over_boundary";
    v22 = 259;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 344) + 16))(*(_QWORD *)(a2 + 344), v8, v24, 0, 0);
    if (!v9)
    {
      v27 = 257;
      v10 = llvm::BinaryOperator::Create();
      v9 = sub_22E3C12C8((uint64_t *)(a2 + 272), v10, (uint64_t)v21);
    }
  }
  v26[0] = "inverted_mask";
  v27 = 259;
  v11 = sub_22E3BECF4(a2 + 272, v24, (uint64_t)v26);
  v26[0] = "aligned_result";
  v27 = 259;
  result = sub_22E3E49C4(a2 + 272, v9, v11, (uint64_t)v26);
  v13 = (llvm::Type **)result;
  if (*(_BYTE *)(*v23[0] + 8) == 15)
  {
    v26[0] = "aligned_intptr";
    v27 = 259;
    llvm::Value::setName();
    v26[0] = "diff";
    v27 = 259;
    v14 = (uint64_t *)sub_22E3E48CC(a2 + 272, (uint64_t)v13, (uint64_t)v8, (uint64_t)v26, 0, 0);
    v21[0] = v14;
    v15 = (uint64_t *)sub_22F25E214((_QWORD *)a2, v23[0]);
    v16 = *(_QWORD *)(a2 + 8);
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 248) & 0xC00) == 0x400)
    {
      v26[0] = "aligned_result";
      v27 = 259;
      v17 = sub_22E42129C((uint64_t *)(a2 + 272), v16, v15, v14, (uint64_t)v26);
    }
    else
    {
      sub_22EFF605C((uint64_t)a3);
      v26[0] = "aligned_result";
      v27 = 259;
      v17 = (uint64_t)sub_22E513CE8(a2, v16, v15, v21, 1, 1, a4 ^ 1u, v18, (uint64_t)v26);
    }
    v27 = 257;
    v13 = (llvm::Type **)sub_22E3CA9BC((uint64_t *)(a2 + 272), v17, (uint64_t)v23[1], (uint64_t)v26);
    sub_22EFF605C((uint64_t)a3);
    result = (uint64_t)sub_22E621528(a2, v13, (unsigned __int8 *)a3, v19, (llvm::Type **)v23[2], 0);
  }
  v20 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v20 & 0xF8;
  return result;
}

BOOL sub_22F248BA8(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 3)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  v6 = (~(v5 << 16) & 0x780000) != 0
     ? ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF
     : sub_22F1BFAD0(a1);
  if (v6 == 4)
    return 1;
  v7 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v7 << 16) & 0x780000) != 0)
    v8 = ((*(unsigned __int16 *)(a1 + 28) | (v7 << 16)) >> 19) & 0xF;
  else
    v8 = sub_22F1BFAD0(a1);
  return v8 == 5;
}

void sub_22F248C5C(uint64_t a1, llvm::LLVMContext *a2, llvm::LLVMContext *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD v11[3];
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 15208) + 8);
  if (v5 + 2024 <= (unint64_t)a2)
  {
    a2 = (llvm::LLVMContext *)((_DWORD)a2 - v5);
    v10 = *(_OWORD *)(a4 + 16);
    v13[0] = *(_OWORD *)a4;
    v13[1] = v10;
    v7 = *(__n128 *)(a4 + 32);
    v13[2] = v7;
    v14 = *(_QWORD *)(a4 + 48);
    v8 = *(_DWORD *)(*(_QWORD *)(v4 + 15096) + 56);
    v9 = v13;
  }
  else
  {
    v6 = *(_OWORD *)(a4 + 16);
    v11[0] = *(_OWORD *)a4;
    v11[1] = v6;
    v7 = *(__n128 *)(a4 + 32);
    v11[2] = v7;
    v12 = *(_QWORD *)(a4 + 48);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 56);
    v9 = v11;
  }
  sub_22E3E629C(a1, a2, a3, (uint64_t)v9, v8, v7);
}

uint64_t sub_22F248CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  llvm::ShuffleVectorInst::getShuffleMask();
  return sub_22E3ED3CC(a1, a2, a3, (uint64_t)v10, 0, a5);
}

llvm::Value *sub_22F248DB0(uint64_t a1, llvm::Function *this, uint64_t a3, _BYTE *a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v23[4];
  char v24;
  char v25;

  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 11);
LABEL_3:
    v10 = v9;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  v9 = (uint64_t *)*((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_3;
  llvm::Function::BuildLazyArguments(this);
  v10 = (uint64_t *)*((_QWORD *)this + 11);
LABEL_4:
  v11 = &v10[5 * *((_QWORD *)this + 12)];
  if (v9 != v11)
  {
    v12 = 0;
    do
    {
      if (!llvm::Function::isConstrainedFPIntrinsic(this) || *(_BYTE *)(*v9 + 8) != 9)
      {
        if (a5 && a5 == v12)
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * a5) = llvm::ConstantInt::get();
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v12);
          v14 = *v9;
          v15 = 1;
          v25 = 1;
          if (*a4)
          {
            v23[0] = a4;
            v15 = 3;
          }
          v24 = v15;
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v13, v14, (uint64_t)v23);
        }
      }
      v9 += 5;
      ++v12;
    }
    while (v9 != v11);
  }
  if ((llvm::Function::isConstrainedFPIntrinsic(this) & 1) != 0)
  {
    v16 = 1;
    v25 = 1;
    if (*a4)
    {
      v23[0] = a4;
      v16 = 3;
    }
    v24 = v16;
    return (llvm::Value *)llvm::IRBuilderBase::CreateConstrainedFPCall();
  }
  else
  {
    if (this)
      v18 = *((_QWORD *)this + 3);
    else
      v18 = 0;
    v19 = *(_QWORD *)a3;
    v20 = *(unsigned int *)(a3 + 8);
    v21 = 1;
    v25 = 1;
    if (*a4)
    {
      v23[0] = a4;
      v21 = 3;
    }
    v24 = v21;
    return sub_22E462B78((uint64_t *)(a1 + 272), v18, (uint64_t)this, v19, v20, (uint64_t)v23, 0);
  }
}

uint64_t sub_22F248FD0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *this, int a5, _BYTE *a6)
{
  unsigned int v11;
  uint64_t v12;
  int ScalarSizeInBits;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  __int16 v20;

  v11 = *(_DWORD *)(a3 + 32);
  if (v11 > 0x40)
    v12 = **(_QWORD **)(a3 + 24);
  else
    v12 = (uint64_t)(*(_QWORD *)(a3 + 24) << -(char)v11) >> -(char)v11;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  v14 = (uint64_t *)(a1 + 272);
  v20 = 257;
  v15 = sub_22E3C1740(v14, 49, a2, (uint64_t)this, (uint64_t)v19);
  if (ScalarSizeInBits == (_DWORD)v12)
  {
    if (a5)
      return llvm::ConstantAggregateZero::get();
    llvm::ConstantInt::get();
  }
  v17 = llvm::ConstantInt::get();
  v18 = 1;
  if (a5)
  {
    HIBYTE(v20) = 1;
    if (*a6)
    {
      v19[0] = a6;
      v18 = 3;
    }
    LOBYTE(v20) = v18;
    return sub_22E3E4A40((uint64_t)v14, v15, v17, (uint64_t)v19, 0);
  }
  else
  {
    HIBYTE(v20) = 1;
    if (*a6)
    {
      v19[0] = a6;
      v18 = 3;
    }
    LOBYTE(v20) = v18;
    return sub_22E3EA5BC((uint64_t)v14, v15, v17, (uint64_t)v19, 0);
  }
}

uint64_t sub_22F24914C(uint64_t a1, int a2, __int16 a3, llvm::Type *this, uint64_t a5)
{
  char v6;
  int v8;
  unsigned int v9;
  uint64_t v10;
  llvm::LLVMContext *v12;
  llvm::Type *v13;
  uint64_t v14;
  int v15;
  _QWORD v16[4];

  v6 = a3;
  v16[3] = *MEMORY[0x24BDAC8D0];
  v8 = a3 & 0x180;
  v15 = 0;
  if ((a3 & 1) != 0)
  {
    v12 = (llvm::LLVMContext *)sub_22EFFA9C0(a5, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
    v13 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v12);
    v14 = (uint64_t)v13;
    if ((v6 & 8) != 0)
    {
      if (v8)
      {
        llvm::Type::getPrimitiveSizeInBits(v13);
        llvm::TypeSize::operator unsigned long long();
      }
      v14 = llvm::FixedVectorType::get();
    }
    v16[0] = v14;
    v9 = 1;
    v15 = 1;
  }
  else
  {
    v9 = 0;
  }
  if ((v6 & 0x10) != 0)
  {
    if (v8)
    {
      llvm::Type::getPrimitiveSizeInBits(this);
      llvm::TypeSize::operator unsigned long long();
    }
    this = (llvm::Type *)llvm::FixedVectorType::get();
    v9 = v15;
  }
  if ((v6 & 6) != 0)
  {
    v16[v9] = this;
    v9 = ++v15;
  }
  if ((v6 & 4) != 0)
  {
    if (v9 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = v15;
    }
    v16[v9] = this;
    v9 = ++v15;
  }
  if ((v6 & 0x20) != 0)
  {
    v10 = *(_QWORD *)(a1 + 56);
    if (v9 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = v15;
    }
    v16[v9] = v10;
  }
  return llvm::Intrinsic::getDeclaration();
}

llvm::Value *sub_22F2493CC(uint64_t a1, int a2)
{
  uint64_t Declaration;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *result;
  _WORD v7[20];
  uint64_t v8;

  switch(a2)
  {
    case 3025:
    case 3026:
    case 3027:
    case 3028:
    case 3029:
    case 3030:
LABEL_3:
      Declaration = llvm::Intrinsic::getDeclaration();
      v4 = Declaration;
      if (Declaration)
        v5 = *(_QWORD *)(Declaration + 24);
      else
        v5 = 0;
      v8 = llvm::ConstantInt::get();
      v7[16] = 257;
      result = sub_22E462B78((uint64_t *)(a1 + 272), v5, v4, (uint64_t)&v8, 1, (uint64_t)v7, 0);
      break;
    default:
      switch(a2)
      {
        case 6167:
        case 6168:
        case 6169:
        case 6170:
        case 6171:
          goto LABEL_3;
        default:
          result = 0;
          break;
      }
      break;
  }
  return result;
}

uint64_t sub_22F2494E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;

  llvm::FixedVectorType::get();
  v4 = *(_QWORD *)(a1 + 16);
  v10 = 257;
  v5 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, a2, v4, (uint64_t)v9);
  v6 = llvm::UndefValue::get();
  v7 = llvm::ConstantInt::get();
  v10 = 257;
  return sub_22E3ED5D4((uint64_t *)(a1 + 272), v6, v5, v7, (uint64_t)v9);
}

uint64_t sub_22F249590(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_22F2495C0
                            + 4
                            * byte_22F451FDE[((*(_QWORD *)(a2 + 240) & *(_QWORD *)a2) >> *(_DWORD *)(a2 + 12))]))();
}

uint64_t sub_22F2495C0(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F2495C8(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt16Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F2495D0(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F2495D8(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F2495E4(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_22F249614
                            + 4
                            * byte_22F451FE3[((*(_QWORD *)(a2 + 104) & *(_QWORD *)a2) >> *(_DWORD *)(a2 + 8))
                                           - 1]))();
}

uint64_t sub_22F249614(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F24961C(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F249624(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt16Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F24962C(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F249634(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F24963C(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getHalfTy(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F249644(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getFloatTy(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F24964C(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getBFloatTy(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F249654(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::Type::getDoubleTy(*(llvm::Type **)(a1 + 336), a2);
}

uint64_t sub_22F24965C(uint64_t a1, llvm::LLVMContext *a2)
{
  llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 336), a2);
  return llvm::ScalableVectorType::get();
}

void sub_22F2496AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22F2496E4(uint64_t a1, llvm::LLVMContext *a2)
{
  llvm::Type::getInt8Ty(*(llvm::Type **)(a1 + 336), a2);
  return llvm::ScalableVectorType::get();
}

llvm::Value *sub_22F249788(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t Declaration;
  llvm::LLVMContext *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];
  __int16 v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = sub_22F24965C(a1, a2);
  Declaration = llvm::Intrinsic::getDeclaration();
  v5 = Declaration;
  if (Declaration)
    v6 = *(_QWORD *)(Declaration + 24);
  else
    v6 = 0;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v4);
  v10[0] = llvm::ConstantInt::get();
  v9 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v6, v5, (uint64_t)v10, 1, (uint64_t)v8, 0);
}

llvm::Value *sub_22F249858(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t Declaration;
  uint64_t v10;
  char v12[32];
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;

  v4 = a2;
  v15 = a2;
  llvm::IntegerType::get();
  v6 = llvm::VectorType::get();
  v7 = *v4;
  if (*v4 != v6)
  {
    *((_QWORD *)&v8 + 1) = *(unsigned int *)(a3 + 32);
    *(_QWORD *)&v8 = *((_QWORD *)&v8 + 1) - 2;
    if ((unint64_t)(v8 >> 1) != 7)
      v7 = v6;
    v14 = v7;
    Declaration = llvm::Intrinsic::getDeclaration();
    if (Declaration)
      v10 = *(_QWORD *)(Declaration + 24);
    else
      v10 = 0;
    v13 = 257;
    return sub_22E462B78((uint64_t *)(a1 + 272), v10, Declaration, (uint64_t)&v15, 1, (uint64_t)v12, 0);
  }
  return (llvm::Value *)v4;
}

uint64_t sub_22F249934(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Declaration;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_22F2496AC(a1, (uint64_t)a2);
  v7 = v6;
  sub_22F249590(a1, (uint64_t)a2);
  v8 = llvm::ScalableVectorType::get();
  **(_QWORD **)a3 = sub_22F249858(a1, **(uint64_t ***)a3, v8);
  v9 = **(_QWORD **)(*(_QWORD *)a3 + 8);
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
  {
    v23[0] = v8;
    v23[1] = v9;
  }
  else
  {
    v23[0] = v8;
  }
  Declaration = llvm::Intrinsic::getDeclaration();
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    v11 = llvm::ConstantInt::get();
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
    ++*(_DWORD *)(a3 + 8);
  }
  if ((a2[28] & *a2) == 0 && (*(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 8) + 8) & 0xFE) == 0x12)
  {
    llvm::Type::getScalarSizeInBits(*(llvm::Type **)(v8 + 24));
    v21 = llvm::ConstantInt::get();
    v22 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    v24 = 257;
    *(_QWORD *)(*(_QWORD *)a3 + 16) = sub_22E3BDEA8(a1 + 272, v22, v21, (uint64_t)v23, 0, 0);
  }
  v13 = (uint64_t *)(a1 + 272);
  if (Declaration)
    v14 = *(_QWORD *)(Declaration + 24);
  else
    v14 = 0;
  v15 = *(uint64_t ***)a3;
  v16 = *(unsigned int *)(a3 + 8);
  v24 = 257;
  v17 = sub_22E462B78(v13, v14, Declaration, (uint64_t)v15, v16, (uint64_t)v23, 0);
  if ((a2[22] & *a2) != 0)
  {
    v24 = 257;
    v18 = v13;
    v19 = 39;
  }
  else
  {
    v24 = 257;
    v18 = v13;
    v19 = 40;
  }
  return sub_22E3C1740(v18, v19, (uint64_t)v17, v7, (uint64_t)v23);
}

llvm::Value *sub_22F249B84(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Declaration;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_22F2496AC(a1, (uint64_t)a2);
  sub_22F249590(a1, (uint64_t)a2);
  v6 = llvm::ScalableVectorType::get();
  v7 = (uint64_t)*a3;
  v8 = *((unsigned int *)a3 + 2);
  v9 = (*a3)[v8 - 1];
  *((_DWORD *)a3 + 2) = v8 - 1;
  v21[0] = v9;
  sub_22F24C084((uint64_t *)a3, v7, v21);
  v10 = *(_QWORD *)(*a3)[2];
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
  {
    v21[0] = v6;
    v21[1] = v10;
  }
  else
  {
    v21[0] = v6;
  }
  Declaration = llvm::Intrinsic::getDeclaration();
  if (*((_DWORD *)a3 + 2) == 3)
  {
    v12 = llvm::ConstantInt::get();
    v13 = *((_DWORD *)a3 + 2);
    if (v13 >= *((_DWORD *)a3 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *((_DWORD *)a3 + 2);
    }
    (*a3)[v13] = v12;
    ++*((_DWORD *)a3 + 2);
  }
  v14 = **a3;
  v22 = 257;
  **a3 = sub_22E3C1740((uint64_t *)(a1 + 272), 38, v14, v6, (uint64_t)v21);
  (*a3)[1] = (uint64_t)sub_22F249858(a1, (uint64_t *)(*a3)[1], v6);
  if ((a2[28] & *a2) == 0 && (*(_DWORD *)(*(_QWORD *)(*a3)[2] + 8) & 0xFE) == 0x12)
  {
    llvm::Type::getScalarSizeInBits(*(llvm::Type **)(v6 + 24));
    v19 = llvm::ConstantInt::get();
    v20 = (*a3)[3];
    v22 = 257;
    (*a3)[3] = (uint64_t)sub_22E3BDEA8(a1 + 272, v20, v19, (uint64_t)v21, 0, 0);
  }
  if (Declaration)
    v15 = *(_QWORD *)(Declaration + 24);
  else
    v15 = 0;
  v16 = (uint64_t)*a3;
  v17 = *((unsigned int *)a3 + 2);
  v22 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v15, Declaration, v16, v17, (uint64_t)v21, 0);
}

llvm::Value *sub_22F249DE0(uint64_t a1, uint64_t a2, int8x16_t **a3)
{
  uint64_t **v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t Declaration;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  v6 = (uint64_t **)*a3;
  v7 = *(_QWORD *)(*a3)->i64[1];
  if (v7)
    v8 = *(_BYTE *)(v7 + 8) == 19;
  else
    v8 = 0;
  if (!v8)
    v7 = *v6[2];
  (*a3)->i64[0] = (uint64_t)sub_22F249858(a1, *v6, v7);
  if ((*(_DWORD *)(*(_QWORD *)(*a3)->i64[1] + 8) & 0xFE) == 0x12)
  {
    if (*((_DWORD *)a3 + 2) == 3)
    {
      v9 = llvm::ConstantInt::get();
      v10 = *((_DWORD *)a3 + 2);
      if (v10 >= *((_DWORD *)a3 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = *((_DWORD *)a3 + 2);
      }
      (*a3)->i64[v10] = v9;
      ++*((_DWORD *)a3 + 2);
      (*a3)[1] = vextq_s8((*a3)[1], (*a3)[1], 8uLL);
    }
    else
    {
      v16 = (llvm::Type *)sub_22F249590(a1, a2);
      v20[0] = llvm::Type::getPrimitiveSizeInBits(v16);
      v20[1] = v17;
      llvm::TypeSize::operator unsigned long long();
      v18 = llvm::ConstantInt::get();
      v19 = (*a3)[1].i64[0];
      v21 = 257;
      (*a3)[1].i64[0] = (uint64_t)sub_22E3BDEA8(a1 + 272, v19, v18, (uint64_t)v20, 0, 0);
    }
  }
  v20[0] = v7;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v12 = *(_QWORD *)(Declaration + 24);
  else
    v12 = 0;
  v13 = (uint64_t)*a3;
  v14 = *((unsigned int *)a3 + 2);
  v21 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v12, Declaration, v13, v14, (uint64_t)v20, 0);
}

llvm::Value *sub_22F249F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Declaration;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_22F2496AC(a1, a2);
  v6 = v5;
  v7 = llvm::PointerType::get();
  v8 = llvm::PointerType::get();
  v9 = llvm::VectorType::get();
  v10 = sub_22F249858(a1, **(uint64_t ***)a3, v6);
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v22 = 257;
  v13 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v11, v7, (uint64_t)v21);
  if (*(_DWORD *)(a3 + 8) < 3u)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
    v14 = (uint64_t *)llvm::ConstantInt::get();
  }
  else
  {
    v14 = *(uint64_t **)(*(_QWORD *)a3 + 16);
  }
  v22 = 257;
  v15 = sub_22E42129C((uint64_t *)(a1 + 272), v6, v13, v14, (uint64_t)v21);
  v22 = 257;
  v16 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v15, v8, (uint64_t)v21);
  v21[0] = v9;
  v21[1] = *(_QWORD *)v10;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v18 = *(_QWORD *)(Declaration + 24);
  else
    v18 = 0;
  v20[0] = v10;
  v20[1] = v16;
  v22 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v18, Declaration, (uint64_t)v20, 2, (uint64_t)v21, 0);
}

llvm::Value *sub_22F24A184(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  uint64_t Declaration;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t v33;
  llvm::Value *v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[2];
  void *v38;
  uint64_t v39;
  _BYTE v40[16];
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_22F2496AC(a1, a2);
  v8 = v7;
  v9 = llvm::PointerType::get();
  v10 = llvm::PointerType::get();
  v11 = (a4 - 1094);
  v12 = llvm::VectorType::get();
  v34 = sub_22F249858(a1, **(uint64_t ***)a3, v8);
  v13 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v41 = 257;
  v15 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v13, v9, (uint64_t)&v38);
  v16 = *(_DWORD *)(a3 + 8);
  if (v16 < 4)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v14);
    v18 = (uint64_t *)llvm::ConstantInt::get();
    v17 = *(uint64_t ***)a3;
    v16 = *(_DWORD *)(a3 + 8);
  }
  else
  {
    v17 = *(uint64_t ***)a3;
    v18 = *(uint64_t **)(*(_QWORD *)a3 + 16);
  }
  v19 = v17[v16 - 1];
  v41 = 257;
  v20 = sub_22E42129C((uint64_t *)(a1 + 272), v8, v15, v18, (uint64_t)&v38);
  v41 = 257;
  v33 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v20, v10, (uint64_t)&v38);
  v38 = v40;
  v39 = 0x500000000;
  v35[0] = v8;
  v35[1] = v12;
  Declaration = llvm::Intrinsic::getDeclaration();
  v23 = 0;
  do
  {
    if (Declaration)
      v24 = *(_QWORD *)(Declaration + 24);
    else
      v24 = 0;
    v37[0] = v19;
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v21);
    v37[1] = llvm::ConstantInt::get();
    v36 = 257;
    v25 = sub_22E462B78((uint64_t *)(a1 + 272), v24, Declaration, (uint64_t)v37, 2, (uint64_t)v35, 0);
    v26 = v39;
    if (v39 >= (unint64_t)HIDWORD(v39))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = v39;
    }
    *((_QWORD *)v38 + v26) = v25;
    v27 = (v39 + 1);
    LODWORD(v39) = v39 + 1;
    ++v23;
  }
  while (v11 != v23);
  if (v27 + 2 > (unint64_t)HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = v39;
  }
  v28 = (llvm::Value **)((char *)v38 + 8 * v27);
  *v28 = v34;
  v28[1] = (llvm::Value *)v33;
  LODWORD(v39) = v39 + 2;
  v35[0] = v8;
  v29 = llvm::Intrinsic::getDeclaration();
  if (v29)
    v30 = *(_QWORD *)(v29 + 24);
  else
    v30 = 0;
  v36 = 257;
  v31 = sub_22E462B78((uint64_t *)(a1 + 272), v30, v29, (uint64_t)v38, v39, (uint64_t)v35, 0);
  if (v38 != v40)
    free(v38);
  return v31;
}

uint64_t sub_22F24A490(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v6;
  unsigned int v7;
  llvm::Type **v8;
  uint64_t v9;
  uint64_t Declaration;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  _QWORD v15[4];
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 256) & *(_QWORD *)a2;
  if (v6)
  {
    v7 = (v6 >> *(_DWORD *)(a2 + 20)) - 1;
    v8 = (llvm::Type **)*((_QWORD *)*a3 + v7);
    llvm::Type::getScalarSizeInBits(*v8);
    v9 = llvm::ScalableVectorType::get();
    *((_QWORD *)*a3 + v7) = sub_22F24AD94(a1, (uint64_t)v8, v9);
  }
  v15[0] = **(_QWORD **)*a3;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v11 = *(_QWORD *)(Declaration + 24);
  else
    v11 = 0;
  v17 = **a3;
  v16 = 257;
  v12 = sub_22E462B78((uint64_t *)(a1 + 272), v11, Declaration, (uint64_t)&v17, 2, (uint64_t)v15, 0);
  sub_22F2496AC(a1, a2);
  v16 = 257;
  return sub_22E3C1740((uint64_t *)(a1 + 272), 49, (uint64_t)v12, v13, (uint64_t)v15);
}

llvm::Value *sub_22F24A5F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t Declaration;
  llvm::LLVMContext *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_22F2496AC(a1, a2);
  v13 = v5;
  Declaration = llvm::Intrinsic::getDeclaration();
  v8 = Declaration;
  if (Declaration)
    v9 = *(_QWORD *)(Declaration + 24);
  else
    v9 = 0;
  v14[0] = *a3;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v7);
  v14[1] = llvm::ConstantInt::get();
  v12 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v9, v8, (uint64_t)v14, 2, (uint64_t)v11, 0);
}

llvm::Value *sub_22F24A6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type *v5;
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Declaration;
  uint64_t v16;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v5 = (llvm::Type *)sub_22F249590(a1, a2);
  llvm::Type::getScalarSizeInBits(v5);
  llvm::ScalableVectorType::get();
  v6 = llvm::ScalableVectorType::get();
  v7 = sub_22F249858(a1, **(uint64_t ***)a3, v6);
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (*(_DWORD *)(a3 + 8) >= 4u)
  {
    v9 = llvm::PointerType::get();
    v19 = 257;
    v10 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v8, v9, (uint64_t)v18);
    v11 = *(uint64_t **)(*(_QWORD *)a3 + 16);
    v19 = 257;
    v8 = sub_22E42129C((uint64_t *)(a1 + 272), v6, v10, v11, (uint64_t)v18);
  }
  v12 = llvm::PointerType::get();
  v19 = 257;
  v13 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v8, v12, (uint64_t)v18);
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8) - 8);
  v18[0] = *(_QWORD *)v7;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v16 = *(_QWORD *)(Declaration + 24);
  else
    v16 = 0;
  v20[0] = v7;
  v20[1] = v13;
  v20[2] = v14;
  v19 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v16, Declaration, (uint64_t)v20, 3, (uint64_t)v18, 0);
}

uint64_t sub_22F24A894(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  llvm::Type ***v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::LLVMContext *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Declaration;
  uint64_t v23;
  llvm::Value *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v9 = (llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280);
  v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]
                                          + ((unint64_t)*a2 >> 24))
                              + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  if (!*v10 || *(_BYTE *)(v11 + 16) != 39)
    v11 = sub_22F10CF48(v11);
  sub_22E66CB04(v9, *(llvm::LLVMContext **)(v11 + 32));
  v12 = llvm::ScalableVectorType::get();
  v13 = sub_22F249858(a1, **(uint64_t ***)a4, v12);
  v14 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  v15 = llvm::PointerType::get();
  LOWORD(v35) = 257;
  v17 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v14, v15, (uint64_t)v34);
  v30 = a3;
  if (*(_DWORD *)(a4 + 8) < 3u)
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v16);
    v18 = (uint64_t *)llvm::ConstantInt::get();
  }
  else
  {
    v18 = *(uint64_t **)(*(_QWORD *)a4 + 16);
  }
  LOWORD(v35) = 257;
  v19 = sub_22E42129C((uint64_t *)(a1 + 272), v12, v17, v18, (uint64_t)v34);
  v20 = llvm::PointerType::get();
  LOWORD(v35) = 257;
  v21 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v19, v20, (uint64_t)v34);
  *(_QWORD *)&v34[0] = v12;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v23 = *(_QWORD *)(Declaration + 24);
  else
    v23 = 0;
  v36[0] = v13;
  v36[1] = v21;
  LOWORD(v35) = 257;
  v24 = sub_22E462B78((uint64_t *)(a1 + 272), v23, Declaration, (uint64_t)v36, 2, (uint64_t)v34, 0);
  v25 = *(_QWORD **)(a1 + 144);
  v26 = sub_22F10ACF8(*v10);
  sub_22E6281E0(v25, v26, (uint64_t)v34);
  v27 = *(_QWORD *)(a1 + 144);
  v32[0] = v34[0];
  v32[1] = v34[1];
  v33 = v35;
  sub_22E6282B8(v27, (uint64_t)v24, (uint64_t)v32);
  v37 = 257;
  if (a6)
    v28 = 39;
  else
    v28 = 40;
  return sub_22E3C1740((uint64_t *)(a1 + 272), v28, (uint64_t)v24, v30, (uint64_t)v36);
}

llvm::Value *sub_22F24AB18(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  llvm::Type ***v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::LLVMContext *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Declaration;
  uint64_t v21;
  llvm::Value *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[2];
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  v5 = (llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280);
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]
                                         + ((unint64_t)*a2 >> 24))
                             + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  if (!*v6 || *(_BYTE *)(v7 + 16) != 39)
    v7 = sub_22F10CF48(v7);
  sub_22E66CB04(v5, *(llvm::LLVMContext **)(v7 + 32));
  v8 = llvm::ScalableVectorType::get();
  v9 = sub_22F249858(a1, **(uint64_t ***)a3, v8);
  v10 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v11 = llvm::PointerType::get();
  LOWORD(v30) = 257;
  v13 = (uint64_t *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, v10, v11, (uint64_t)v29);
  if (*(_DWORD *)(a3 + 8) == 4)
  {
    v14 = *(uint64_t **)(*(_QWORD *)a3 + 16);
  }
  else
  {
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
    v14 = (uint64_t *)llvm::ConstantInt::get();
  }
  LOWORD(v30) = 257;
  v15 = sub_22E42129C((uint64_t *)(a1 + 272), v8, v13, v14, (uint64_t)v29);
  v16 = *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8) - 8);
  LOWORD(v30) = 257;
  v17 = sub_22E3C1740((uint64_t *)(a1 + 272), 38, v16, v8, (uint64_t)v29);
  v18 = llvm::PointerType::get();
  LOWORD(v30) = 257;
  v19 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v15, v18, (uint64_t)v29);
  *(_QWORD *)&v29[0] = v8;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v21 = *(_QWORD *)(Declaration + 24);
  else
    v21 = 0;
  v31[0] = v17;
  v31[1] = v9;
  v31[2] = v19;
  LOWORD(v30) = 257;
  v22 = sub_22E462B78((uint64_t *)(a1 + 272), v21, Declaration, (uint64_t)v31, 3, (uint64_t)v29, 0);
  v23 = *(_QWORD **)(a1 + 144);
  v24 = sub_22F10ACF8(*v6);
  sub_22E6281E0(v23, v24, (uint64_t)v29);
  v25 = *(_QWORD *)(a1 + 144);
  v27[0] = v29[0];
  v27[1] = v29[1];
  v28 = v30;
  sub_22E6282B8(v25, (uint64_t)v22, (uint64_t)v27);
  return v22;
}

llvm::Value *sub_22F24AD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Declaration;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a3;
  v10 = a2;
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v5 = *(_QWORD *)(Declaration + 24);
  else
    v5 = 0;
  v8 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v5, Declaration, (uint64_t)&v10, 1, (uint64_t)v7, 0);
}

void sub_22F24AE08(_QWORD *a1, uint64_t a2, llvm::LLVMContext *a3, uint64_t a4, uint64_t **a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if ((*((_QWORD *)a3 + 6) & *(_QWORD *)a3) == 0)
  {
    sub_22F2496AC(a2, (uint64_t)a3);
    v14 = *(_QWORD *)a3;
    if ((*((_QWORD *)a3 + 29) & *(_QWORD *)a3) != 0)
    {
      v15 = a5[1];
    }
    else
    {
      if ((*((_QWORD *)a3 + 16) & v14) == 0)
      {
        if ((*((_QWORD *)a3 + 20) & v14) != 0 || (*((_QWORD *)a3 + 12) & v14) != 0)
        {
          v18 = *a5[a6 - 1];
          a1[2] = **a5;
          *a1 = a1 + 2;
          a1[3] = v18;
          goto LABEL_8;
        }
        if ((*((_QWORD *)a3 + 17) & v14) == 0 && (*((_QWORD *)a3 + 5) & v14) == 0)
        {
          a1[2] = v13;
          *a1 = a1 + 2;
          v7 = 0x200000001;
          goto LABEL_3;
        }
        v16 = **a5;
        a1[2] = a4;
        v17 = a1 + 2;
LABEL_7:
        *a1 = v17;
        a1[3] = v16;
LABEL_8:
        v7 = 0x200000002;
        goto LABEL_3;
      }
      v13 = sub_22F24965C(a2, a3);
      v15 = *a5;
    }
    v16 = *v15;
    a1[2] = v13;
    v17 = a1 + 2;
    goto LABEL_7;
  }
  *a1 = a1 + 2;
  v7 = 0x200000000;
LABEL_3:
  a1[1] = v7;
}

uint64_t sub_22F24AF4C(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _WORD v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = a2;
    v5 = 0;
    v6 = a3;
    do
    {
      v7 = *(unsigned __int8 *)(a2[v5 / 8] + 16);
      if (8 * a3 - 8 == v5)
        break;
      v5 += 8;
    }
    while (v7 < 0x15);
    if (v7 >= 0x15)
    {
      llvm::FixedVectorType::get();
      v10 = llvm::UndefValue::get();
      for (i = 0; i != v6; ++i)
      {
        v14 = v3[i];
        llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
        v15 = llvm::ConstantInt::get();
        v18[8] = 257;
        v10 = sub_22E3ED5D4((uint64_t *)(a1 + 272), v10, v14, v15, (uint64_t)&v16);
      }
      return v10;
    }
    v8 = 0;
    v16 = v18;
    v17 = 0x1000000000;
    do
    {
      v9 = *v3;
      if (v8 >= HIDWORD(v17))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v17;
      }
      *((_QWORD *)v16 + v8) = v9;
      v8 = v17 + 1;
      LODWORD(v17) = v17 + 1;
      ++v3;
      --v6;
    }
    while (v6);
  }
  else
  {
    v16 = v18;
    v17 = 0x1000000000;
  }
  v10 = llvm::ConstantVector::get();
  if (v16 != v18)
    free(v16);
  return v10;
}

uint64_t sub_22F24B10C(uint64_t a1)
{
  llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(a1 + 24));
  llvm::TypeSize::operator unsigned long long();
  llvm::IntegerType::get();
  return llvm::VectorType::get();
}

uint64_t sub_22F24B168(uint64_t a1)
{
  llvm::LLVMContext *v2;

  llvm::IRBuilderBase::CreateGlobalString();
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 64), v2);
  llvm::ConstantInt::get();
  return llvm::ConstantExpr::getGetElementPtr();
}

uint64_t sub_22F24B1F8(uint64_t a1, unsigned int *a2)
{
  unint64_t CpuSupportsMask;

  sub_22EFFBBCC(*(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]
                                    + ((unint64_t)*a2 >> 24)));
  CpuSupportsMask = llvm::X86::getCpuSupportsMask();
  return sub_22F24B298(a1, CpuSupportsMask);
}

uint64_t sub_22F24B268(uint64_t a1)
{
  unint64_t CpuSupportsMask;

  CpuSupportsMask = llvm::X86::getCpuSupportsMask();
  return sub_22F24B298(a1, CpuSupportsMask);
}

uint64_t sub_22F24B298(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t *v5;
  uint64_t True;
  llvm::ArrayType *v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::LLVMContext *v11;
  llvm::LLVMContext *v12;
  llvm::LLVMContext *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::LLVMContext *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::LLVMContext *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _BYTE v27[32];
  __int16 v28;
  uint64_t *v29[3];
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;

  v2 = a2;
  v32 = *MEMORY[0x24BDAC8D0];
  v4 = HIDWORD(a2);
  v5 = (uint64_t *)(a1 + 272);
  True = llvm::ConstantInt::getTrue();
  if (v2)
  {
    v8 = *(llvm::ArrayType **)(a1 + 24);
    v30[0] = v8;
    v30[1] = v8;
    v30[2] = v8;
    v30[3] = llvm::ArrayType::get(v8, (llvm::Type *)1);
    v9 = llvm::StructType::get();
    v10 = sub_22F29B660(*(_QWORD *)(a1 + 144), v9, (uint64_t)"__cpu_model", 11);
    *((_DWORD *)v10 + 8) |= 0x4000u;
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v11);
    v29[0] = (uint64_t *)llvm::ConstantInt::get();
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v12);
    v29[1] = (uint64_t *)llvm::ConstantInt::get();
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v13);
    v29[2] = (uint64_t *)llvm::ConstantInt::get();
    v31 = 257;
    sub_22E42F314(v5, v9, (uint64_t *)v10, v29, 3, (uint64_t)v30);
    v28 = 257;
    v14 = llvm::User::operator new((llvm::User *)0x40);
    v31 = 257;
    llvm::LoadInst::LoadInst();
    v15 = sub_22E3C12C8(v5, v14, (uint64_t)v27);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v16);
    v17 = llvm::ConstantInt::get();
    v31 = 257;
    v18 = (uint64_t *)sub_22E3E49C4((uint64_t)v5, v15, v17, (uint64_t)v30);
    v31 = 257;
    v19 = sub_22E3C18F4((uint64_t)v5, 32, v18, v17, (uint64_t)v30);
    v31 = 257;
    True = sub_22E3E49C4((uint64_t)v5, True, v19, (uint64_t)v30);
  }
  if (v4)
  {
    v20 = sub_22F29B660(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 24), (uint64_t)"__cpu_features2", 15);
    *((_DWORD *)v20 + 8) |= 0x4000u;
    v28 = 257;
    v21 = llvm::User::operator new((llvm::User *)0x40);
    v31 = 257;
    llvm::LoadInst::LoadInst();
    v22 = sub_22E3C12C8(v5, v21, (uint64_t)v27);
    llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v23);
    v24 = llvm::ConstantInt::get();
    v31 = 257;
    v25 = (uint64_t *)sub_22E3E49C4((uint64_t)v5, v22, v24, (uint64_t)v30);
    v31 = 257;
    v26 = sub_22E3C18F4((uint64_t)v5, 32, v25, v24, (uint64_t)v30);
    v31 = 257;
    return sub_22E3E49C4((uint64_t)v5, True, v26, (uint64_t)v30);
  }
  return True;
}

llvm::Value *sub_22F24B598(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v2 = llvm::FunctionType::get();
  v3 = sub_22E633A04(*(_QWORD *)(a1 + 144), v2, "__cpu_indicator_init", 20, 0, 0, 0);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v4 + 32) & 0xFFFFBCFF | 0x4000;
  v7 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v3, v4, 0, 0, (uint64_t)v6, 0);
}

uint64_t sub_22F24B62C(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

_QWORD *sub_22F24B660(unint64_t *a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = 0;
  v2 = sub_22F24B6B8(*a1, &v5);
  v3 = v5;
  if ((v2 & 1) == 0)
  {
    v3 = sub_22F24B754(a1, v5);
    *v3 = *a1;
    v3[1] = 0;
  }
  return v3;
}

uint64_t sub_22F24B6B8(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  v2 = dword_253E4BBD0;
  if (dword_253E4BBD0)
  {
    v3 = dword_253E4BBD0 - 1;
    v4 = (dword_253E4BBD0 - 1) & ((a1 >> 9) ^ a1);
    v5 = (_QWORD *)(qword_253E4BBC0 + 16 * v4);
    v6 = *v5;
    if (*v5 == a1)
    {
      v2 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v6)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v6 == -1;
        if (v10)
          v8 = v5;
        v11 = v4 + v9++;
        v4 = v11 & v3;
        v5 = (_QWORD *)(qword_253E4BBC0 + 16 * (v11 & v3));
        v6 = *v5;
        v2 = 1;
        if (*v5 == a1)
          goto LABEL_4;
      }
      v2 = 0;
      if (v8)
        v5 = v8;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_4:
  *a2 = v5;
  return v2;
}

_QWORD *sub_22F24B754(unint64_t *a1, _QWORD *a2)
{
  int v3;
  _QWORD *v5;

  v3 = dword_253E4BBD0;
  if (4 * (int)qword_253E4BBC8 + 4 >= (3 * dword_253E4BBD0))
  {
    v3 = 2 * dword_253E4BBD0;
  }
  else if (dword_253E4BBD0 + ~(_DWORD)qword_253E4BBC8 - HIDWORD(qword_253E4BBC8) > dword_253E4BBD0 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4630AC(v3);
  v5 = 0;
  sub_22F24B6B8(*a1, &v5);
  a2 = v5;
LABEL_3:
  LODWORD(qword_253E4BBC8) = qword_253E4BBC8 + 1;
  if (*a2)
    --HIDWORD(qword_253E4BBC8);
  return a2;
}

uint64_t sub_22F24B800(uint64_t result, unint64_t *a2)
{
  unint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;

  v3 = (unint64_t *)result;
  qword_253E4BBC8 = 0;
  if (dword_253E4BBD0)
  {
    v4 = (_QWORD *)qword_253E4BBC0;
    v5 = 16 * dword_253E4BBD0;
    do
    {
      *v4 = 0;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if ((unint64_t *)result != a2)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3 + 1 >= 2)
      {
        v10 = 0;
        result = sub_22F24B6B8(v7, &v10);
        v8 = v10;
        v9 = v3[1];
        *v10 = v7;
        v8[1] = v9;
        LODWORD(qword_253E4BBC8) = ++v6;
      }
      v3 += 2;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_22F24B8B8(uint64_t a1, llvm::LLVMContext *a2)
{
  unsigned __int8 *v3;
  unsigned int v4;
  llvm::Type *v5;

  v3 = *(unsigned __int8 **)(a1 + 24);
  v4 = v3[8];
  if (v4 > 6)
  {
    llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v3);
    llvm::TypeSize::operator unsigned long long();
    llvm::IntegerType::get();
  }
  else
  {
    v5 = *(llvm::Type **)a1;
    if (v4 == 3)
      llvm::Type::getFloatTy(v5, a2);
    else
      llvm::Type::getHalfTy(v5, a2);
  }
  return llvm::VectorType::get();
}

uint64_t sub_22F24B940()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::User::operator new((llvm::User *)0x60);
  v1 = llvm::Instruction::Instruction();
  *(_QWORD *)(v1 + 64) = v1 + 80;
  *(_QWORD *)(v1 + 72) = 0x400000000;
  llvm::InsertValueInst::init();
  return v0;
}

uint64_t sub_22F24B9E0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10[24];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v5 = v4 | (v4 >> 1) | ((v4 | (v4 >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  result = sub_22F24BA70((((v6 | (v6 >> 16)) >> 32) | v6 | (v6 >> 16)) + 1);
  v8 = *a1;
  v9 = *a2;
  while (v8 != v9)
  {
    result = sub_22F24BB18((uint64_t)v10, (int *)v8, (_OWORD *)(v8 + 8));
    v8 += 24;
  }
  return result;
}

uint64_t sub_22F24BA70(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  if (result <= 8)
  {
    v2 = &qword_253E4BBE0;
    qword_253E4BBD8 = 1;
    v3 = &qword_253E4BCA0;
  }
  else
  {
    LODWORD(qword_253E4BBD8) = qword_253E4BBD8 & 0xFFFFFFFE;
    v1 = result;
    result = MEMORY[0x23489D23C](24 * result, 8);
    qword_253E4BBE0 = result;
    v2 = &qword_253E4BBE0;
    qword_253E4BBE8 = v1;
    qword_253E4BBD8 &= 1u;
    if ((_DWORD)qword_253E4BBD8)
      v3 = &qword_253E4BCA0;
    else
      v3 = (uint64_t *)(result + 24 * v1);
    if (!(_DWORD)qword_253E4BBD8)
      v2 = (uint64_t *)result;
  }
  do
  {
    *(_DWORD *)v2 = -1;
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_22F24BB18(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t *v11;

  v11 = 0;
  result = sub_22F24BBC0(*a2, &v11);
  v7 = v11;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F24BC80(a2, v11);
    v7 = (uint64_t *)result;
    *(_DWORD *)result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    v8 = 1;
  }
  v9 = &qword_253E4BBE0;
  if ((qword_253E4BBD8 & 1) != 0)
  {
    v10 = 8;
  }
  else
  {
    v9 = (uint64_t *)qword_253E4BBE0;
    v10 = qword_253E4BBE8;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = &v9[3 * v10];
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F24BBC0(int a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  int v7;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v2 = &qword_253E4BBE0;
  if ((qword_253E4BBD8 & 1) != 0)
  {
    LODWORD(v3) = 8;
  }
  else
  {
    v3 = qword_253E4BBE8;
    if (!(_DWORD)qword_253E4BBE8)
    {
      v6 = 0;
      goto LABEL_7;
    }
    v2 = (uint64_t *)qword_253E4BBE0;
  }
  v4 = v3 - 1;
  v5 = (v3 - 1) & (37 * a1);
  v6 = &v2[3 * v5];
  v7 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 == a1)
  {
    v3 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -2;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = &v2[3 * (v12 & v4)];
      v7 = *(_DWORD *)v6;
      v3 = 1;
      if (*(_DWORD *)v6 == a1)
        goto LABEL_7;
    }
    v3 = 0;
    if (v9)
      v6 = v9;
  }
LABEL_7:
  *a2 = v6;
  return v3;
}

uint64_t *sub_22F24BC80(int *a1, uint64_t *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v6;

  v3 = qword_253E4BBD8 >> 1;
  if ((qword_253E4BBD8 & 1) != 0)
    v4 = 8;
  else
    v4 = qword_253E4BBE8;
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - HIDWORD(qword_253E4BBD8) > v4 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E4646E4(v4);
  v6 = 0;
  sub_22F24BBC0(*a1, &v6);
  a2 = v6;
LABEL_6:
  LODWORD(qword_253E4BBD8) = qword_253E4BBD8 + 2;
  if (*(_DWORD *)a2 != -1)
    --HIDWORD(qword_253E4BBD8);
  return a2;
}

uint64_t sub_22F24BD40(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;

  v3 = result;
  v4 = qword_253E4BBD8;
  qword_253E4BBD8 &= 1u;
  if ((v4 & 1) != 0)
  {
    v5 = &qword_253E4BBE0;
    v6 = &qword_253E4BCA0;
  }
  else
  {
    if (!(_DWORD)qword_253E4BBE8)
      goto LABEL_6;
    v5 = (uint64_t *)qword_253E4BBE0;
    v6 = (uint64_t *)(qword_253E4BBE0 + 24 * qword_253E4BBE8);
  }
  do
  {
    *(_DWORD *)v5 = -1;
    v5 += 3;
  }
  while (v5 != v6);
LABEL_6:
  if (result != a2)
  {
    do
    {
      v7 = *(_DWORD *)v3;
      if (*(_DWORD *)v3 <= 0xFFFFFFFD)
      {
        v9 = 0;
        result = sub_22F24BBC0(v7, &v9);
        v8 = v9;
        *(_DWORD *)v9 = v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v3 + 8);
        LODWORD(qword_253E4BBD8) = qword_253E4BBD8 + 2;
      }
      v3 += 24;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_22F24BE18(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(24 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t *sub_22F24BE58(int *a1)
{
  char v2;
  uint64_t *v3;
  uint64_t *v5;

  v5 = 0;
  v2 = sub_22F24BBC0(*a1, &v5);
  v3 = v5;
  if ((v2 & 1) == 0)
  {
    v3 = sub_22F24BC80(a1, v5);
    *(_DWORD *)v3 = *a1;
    v3[1] = 0;
    v3[2] = 0;
  }
  return v3;
}

uint64_t sub_22F24BEB4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_22F24BF64(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_22F24BFC0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  llvm::Type *v3;
  __int16 v4;
  _BYTE v6[32];
  __int16 v7;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 4) != 0)
  {
    v3 = *(llvm::Type **)(v2 + 64);
    v4 = *(_WORD *)(v2 + 18) & 0x3F | 0x100;
    v7 = 257;
    return sub_22E3C3200((uint64_t *)(a1 + 272), v3, v2, v4, 0, (uint64_t)v6);
  }
  return v2;
}

void sub_22F24C010(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22F24C084(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;

  v5 = *a1;
  v6 = *((unsigned int *)a1 + 2);
  if (*a1 + 8 * v6 == a2)
  {
    v11 = *a3;
    if (v6 >= *((_DWORD *)a1 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
      v6 = *((unsigned int *)a1 + 2);
    }
    *(_QWORD *)(v5 + 8 * v6) = v11;
    v12 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v12;
    return *a1 + 8 * v12 - 8;
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= *((_DWORD *)a1 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *a1;
      v6 = *((unsigned int *)a1 + 2);
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 2) = v6 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t sub_22F24C18C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24FA62E78;
  *(_QWORD *)(v2 + 8) = a1;
  v3 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(v2 + 72) = v3;
  *(_QWORD *)(v2 + 80) = v2 + 96;
  *(_QWORD *)(v2 + 88) = 0x1000000000;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 360) = 0;
  *(_DWORD *)(v2 + 368) = 0;
  *(_DWORD *)(v2 + 392) = 0;
  *(_QWORD *)(v2 + 376) = 0;
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 400) = v2 + 416;
  *(_QWORD *)(v2 + 408) = 0x1000000000;
  *(_QWORD *)(v2 + 800) = 0;
  v4 = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(v2 + 808) = (*(_WORD *)(*(_QWORD *)(a1 + 152) + 96) & 0x800) != 0;
  v5 = *(_QWORD *)(v4 + 15096);
  if (v5 && *(_DWORD *)(*(_QWORD *)(v4 + 15088) + 148) == 11 && *(_DWORD *)(v5 + 148) <= 0xAu)
    v6 = sub_22F36F010(v4, v5);
  else
    v6 = sub_22F368DF4(v4, v5);
  *(_QWORD *)(v2 + 816) = v6;
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v2 + 24) = v8;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)a1;
  sub_22E66CB04((llvm::Type ***)(a1 + 280), *(llvm::LLVMContext **)(v7 + 16408));
  *(_QWORD *)(v2 + 40) = llvm::PointerType::get();
  *(_QWORD *)(v2 + 48) = sub_22E66CB04((llvm::Type ***)(a1 + 280), *(llvm::LLVMContext **)(v7 + 16816));
  *(_QWORD *)(v2 + 56) = llvm::PointerType::get();
  return v2;
}

_QWORD *sub_22F24C2B0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F24C3AC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F24C318(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F24C3AC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E466D04(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F24C45C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F24C318(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F24C510(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_22E4699FC(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_22F24C77C((uint64_t)result, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F24C574(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  void **v7;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = *a2 + 80 * v4;
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(v5 - 72))
  {
    sub_22F24C77C((uint64_t)a1, v5 - 80);
    v4 = *((_DWORD *)a2 + 2);
    v3 = *a2;
  }
  v6 = v4 - 1;
  *((_DWORD *)a2 + 2) = v6;
  v7 = (void **)(v3 + 80 * v6);
  if (*v7 != v7 + 2)
    free(*v7);
}

_QWORD *sub_22F24C5F4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_22E4699FC(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_22F24C890((uint64_t)result, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F24C658(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F24C6C4(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F24C6C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 80 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x800000000;
      if (*(_DWORD *)(v5 + 8))
        sub_22F24C77C((uint64_t)a2, v5);
      v5 += 80;
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 80 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 80);
        if ((void *)(v8 + v9 - 64) != v10)
          free(v10);
        v9 -= 80;
      }
      while (v9);
    }
  }
}

uint64_t sub_22F24C77C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 8 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 8 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v11 - (*(_QWORD *)a2 + 8 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22F24C890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

char **sub_22F24C958(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5)
        free(v5);
      v4 -= 80;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F24C9CC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_22F24C9FC@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t result;
  char v12;
  const char *v13;
  __int16 v14;
  _OWORD v15[2];
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v8 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v13 = "kcall.end";
  v14 = 259;
  v9 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v18 = a1[40];
  sub_22E61F8F8(a1, *(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3) + 8), (uint64_t)v9, (uint64_t)v8, 0, 0);
  if (!a1[729])
    a1[729] = (uint64_t)&v18;
  sub_22E5ED9B4(a1, v8, 0);
  v10 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v10;
  v16 = *(__n128 *)(a3 + 32);
  v17 = *(_QWORD *)(a3 + 48);
  sub_22F260B3C(a1, a2, (uint64_t)v15, &v13, v16);
  sub_22E5EDA70((uint64_t)a1);
  result = sub_22E5ED9B4(a1, v9, 0);
  if ((uint64_t *)a1[729] == &v18)
    a1[729] = 0;
  v12 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 48) = v12 & 0xF8;
  return result;
}

llvm::GlobalValue *sub_22F24CB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::GlobalValue *v7;
  llvm::GlobalValue *v8;
  int v9;
  _BYTE v11[6208];
  uint64_t v12;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (uint64_t *)v0;
  v12 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E46C584((_QWORD **)(v0 + 280), v3, v1);
  sub_22E46A4BC((uint64_t)v5, v4, v2, v6, 0, 1, 1);
  v8 = v7;
  v9 = sub_22E629EF0((uint64_t)v5, v4);
  sub_22E46AC38(v8, v9);
  sub_22E619430((uint64_t)v11, (uint64_t)v5, 0);
  sub_22E61E740((uint64_t)v11, v4, v2, (uint64_t)v8, v6);
  sub_22E619908((uint64_t)v11);
  sub_22E62B944(v5, v4, v2, (uint64_t)v8);
  sub_22E62A5F4(v5, v4 & 0xFFFFFFFFFFFFFFF8, v8);
  return v8;
}

uint64_t sub_22F24CCB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;

  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = sub_22E46C584((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), a2 & 0xFFFFFFFFFFFFFFF8 | 1, 0);
  sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v10);
  return sub_22E46A78C(a1, v9 | a3, 0, a4, a5);
}

unint64_t sub_22F24CD30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(v2 + 24);
  if ((v3 & 1) != 0)
    v3 = sub_22EFCF510(v2);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return v3 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 16);
}

uint64_t sub_22F24CD8C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E46AA2C((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F24CE30(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  llvm::GetElementPtrInst *v11;
  uint64_t *v12;

  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  v12 = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, &v12, 1, 1);
  if (!result)
  {
    v10 = llvm::User::operator new((llvm::User *)0x50);
    v11 = (llvm::GetElementPtrInst *)sub_22E3C1470(v10, (uint64_t)a2, a3, &v12, 1);
    llvm::GetElementPtrInst::setIsInBounds(v11);
    return sub_22E3C12C8((uint64_t *)a1, v10, a5);
  }
  return result;
}

_QWORD *sub_22F24CF04(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F24CF64((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F24CF64(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E46ACAC(a1, v7);
  v9 = 0;
  sub_22F246C54((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F24D010(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22F246C54((uint64_t *)v5, a2, &v12);
      v9 = v12;
      *v12 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
      {
        v11 = sub_22F40BEC8(result);
        result = MEMORY[0x2348A0E9C](v11, 0x10F0C40DF88B1A7);
      }
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F24D0EC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = (37 * v6)
       + ~((unint64_t)(37 * v6) << 32)
       + ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v14 = *v13;
    v15 = v13[1];
    if (*a2 == *v13 && v6 == v15)
    {
      result = 1;
    }
    else
    {
      v18 = 0;
      v19 = 1;
      while (v14 != -4096 || v15 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v15 == 0x8000000000000000;
        if (v20 && v14 == -8192)
          v18 = v13;
        v22 = v12 + v19++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v14 = *v13;
        v15 = v13[1];
        result = 1;
        if (v5 == *v13 && v6 == v15)
          goto LABEL_8;
      }
      result = 0;
      if (v18)
        v13 = v18;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v13;
  return result;
}

unint64_t sub_22F24D1F4@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;

  v4 = a1[525];
  v5 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a1[524] + 48) & 0xFFFFFFFFFFFFFFF0));
  return sub_22E3D2FA0((uint64_t)a1, v4, v5, a1[527], 0, 0, 0, a2);
}

uint64_t sub_22F24D254(uint64_t a1)
{
  uint64_t v1;
  llvm::Type ***v2;
  llvm::LLVMContext *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (llvm::Type ***)(v1 + 280);
  v3 = (llvm::LLVMContext *)sub_22F36891C(*(_QWORD *)(v1 + 144));
  return sub_22E66CB04(v2, v3);
}

uint64_t sub_22F24D284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Constant *v19;
  llvm::Type *v20;
  uint64_t result;
  _OWORD v22[3];
  _QWORD v23[6];

  sub_22E46AD6C(a1, a2, "calls through member pointers", 0x1DuLL);
  v12 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 40) + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
  v13 = a3[1];
  v22[0] = *a3;
  v22[1] = v13;
  v22[2] = a3[2];
  v14 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v12);
  sub_22E5E0440(a2, (uint64_t)v22, v14, v23);
  *a4 = v23[0];
  v15 = *(_QWORD *)(*(_QWORD *)(a5 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(_BYTE *)(v15 + 16) == 26;
  else
    v16 = 0;
  if (!v16)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v15 = sub_22F10CF48(v15);
    else
      v15 = 0;
  }
  v17 = *(_QWORD *)(a1 + 8) + 280;
  v18 = sub_22E46C2C0(v17, v12, v15, 0);
  sub_22E46F2EC(v17, v18);
  v19 = (llvm::Constant *)llvm::PointerType::get();
  result = llvm::Constant::getNullValue(v19, v20);
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v15;
  *(_QWORD *)(a6 + 16) = 0;
  *(_DWORD *)(a6 + 24) = 0;
  *(_DWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  return result;
}

uint64_t sub_22F24D3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::Constant *v8;
  llvm::Type *v9;

  sub_22E46AD6C(a1, a2, "loads of member pointers", 0x18uLL);
  sub_22E619D5C(a2, *(llvm::LLVMContext **)(a6 + 32));
  llvm::PointerType::get();
  v8 = (llvm::Constant *)llvm::PointerType::get();
  return llvm::Constant::getNullValue(v8, v9);
}

uint64_t sub_22F24D43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Constant *v5;
  llvm::Type *v6;

  sub_22E46AD6C(a1, a2, "member function pointer conversions", 0x23uLL);
  v5 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(a3 + 8));
  return llvm::Constant::getNullValue(v5, v6);
}

uint64_t sub_22F24D47C(uint64_t a1, uint64_t a2)
{
  llvm::Constant *v2;
  llvm::Type *v3;

  v2 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), *(llvm::LLVMContext **)(a2 + 8));
  return llvm::Constant::getNullValue(v2, v3);
}

uint64_t sub_22F24D49C(uint64_t a1, uint64_t a2)
{
  sub_22E46AD6C(a1, a2, "member function pointer comparison", 0x22uLL);
  return llvm::ConstantInt::getFalse();
}

uint64_t sub_22F24D4CC(uint64_t a1, uint64_t a2)
{
  sub_22E46AD6C(a1, a2, "member function pointer null testing", 0x24uLL);
  return llvm::ConstantInt::getFalse();
}

uint64_t sub_22F24D4FC(uint64_t a1, uint64_t a2)
{
  llvm::Constant *v2;
  llvm::Type *v3;

  v2 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)(a2 & 0xFFFFFFFFFFFFFFF0));
  return llvm::Constant::getNullValue(v2, v3);
}

uint64_t sub_22F24D51C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  llvm::LLVMContext *v8;
  llvm::Constant *v9;
  llvm::Type *v10;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    v6 = (_QWORD *)*v6;
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  v8 = (llvm::LLVMContext *)sub_22F36A6C0(v3, v4, v7[6]);
  v9 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), v8);
  return llvm::Constant::getNullValue(v9, v10);
}

uint64_t sub_22F24D590(uint64_t a1, uint64_t a2)
{
  llvm::Constant *v2;
  llvm::Type *v3;

  v2 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), (llvm::LLVMContext *)(a2 & 0xFFFFFFFFFFFFFFF0));
  return llvm::Constant::getNullValue(v2, v3);
}

uint64_t sub_22F24D5B0(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  llvm::Constant *v3;
  llvm::Type *v4;

  v3 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), a3);
  return llvm::Constant::getNullValue(v3, v4);
}

uint64_t sub_22F24D5D0()
{
  return 1;
}

_QWORD *sub_22F24D5D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __int128 v4;
  _OWORD v6[3];
  uint64_t v7;

  v4 = *(_OWORD *)(a3 + 16);
  v6[0] = *(_OWORD *)a3;
  v6[1] = v4;
  v6[2] = *(_OWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 48);
  return sub_22E5EDC68(a2, (uint64_t)v6, a4);
}

uint64_t sub_22F24D618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v4 || *(_BYTE *)(v4 + 16) != 39)
    v4 = sub_22F10CF48(v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 664))(a1, *(_QWORD *)(v4 + 32));
}

uint64_t sub_22F24D688()
{
  return 0;
}

uint64_t sub_22F24D690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_22E46AD6C(a1, a2, "array cookie initialization", 0x1BuLL);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  return result;
}

BOOL sub_22F24D6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(_BYTE *)(a2 + 2) & 0x20) != 0 || sub_22F115260(a3) != 0;
}

BOOL sub_22F24D6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
    return 1;
  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v2 || *(_BYTE *)(v2 + 16) != 39)
    v2 = sub_22F10CF48(v2);
  return sub_22F115260(*(_QWORD *)(v2 + 32)) != 0;
}

void *sub_22F24D74C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *result;
  __int128 v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
  {
    result = sub_22F28AAB4((_QWORD *)a2, a3, *(_QWORD *)(a1[18] + 8), (uint64_t)a1);
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_OWORD *)(a5 + 16) = v10;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    v13 = *(uint64_t **)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v14 = (uint64_t *)llvm::ConstantInt::get();
    result = sub_22E3E5044(a1, v12, v13, v14, a4);
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a2 + 16) | a3;
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = v15;
    *(_QWORD *)(a5 + 16) = v16 & -v16;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

uint64_t sub_22F24D818(uint64_t a1, uint64_t a2)
{
  sub_22E46AD6C(a1, a2, "reading a new[] cookie", 0x16uLL);
  return llvm::ConstantInt::get();
}

uint64_t sub_22F24D850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a2;
  if ((*(_DWORD *)a2 & 0x1FC0000) == 0x440000)
    v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 31;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(v5);
  v7 = sub_22F10C2A4(*(_QWORD *)(v5 + 40));
  if (v7)
  {
    if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 35 >= 3)
      v8 = 0;
    else
      v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (uint64_t *)sub_22EFFB554((unsigned __int8 *)a2);
  v11 = (uint64_t *)(sub_22EFFB554((unsigned __int8 *)a2) + 8 * *(unsigned int *)(a2 + 4));
  return sub_22F25009C(v9, v8, v10, v11);
}

uint64_t sub_22F24D904(uint64_t a1, uint64_t a2)
{
  sub_22E46AD6C(a1, a2, "complete object detection in ctor", 0x21uLL);
  return 0;
}

void sub_22F24D928(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_22E628990(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_22F24D930(uint64_t a1, int a2, unint64_t a3)
{
  return sub_22E629FAC(*(_QWORD **)(a1 + 8), a3, a2, 0);
}

uint64_t sub_22F24D948()
{
  return 0;
}

llvm::Value *sub_22F24D950(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::Value *v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = sub_22F25C210(*(_QWORD *)(a2 + 144));
  v7 = 257;
  return sub_22F24EE8C(a2, v3, v4, (uint64_t)v6);
}

uint64_t sub_22F24D9A0()
{
  return 0;
}

void sub_22F24D9AC(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_22F24D9B8()
{
  return 0;
}

uint64_t sub_22F24D9C0()
{
  return 1;
}

uint64_t sub_22F24D9C8()
{
  return 0;
}

uint64_t sub_22F24D9D0()
{
  return 1;
}

uint64_t sub_22F24D9D8()
{
  return 1;
}

uint64_t sub_22F24D9E0()
{
  return 0;
}

__n128 sub_22F24D9EC@<Q0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t sub_22F24DA00()
{
  return 0;
}

uint64_t sub_22F24DA0C(uint64_t a1, uint64_t a2)
{
  return sub_22E46BBB8(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 24) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 0, 0, 0, 0, *(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16) >> 19);
}

void sub_22F24DA5C(uint64_t *a1, uint64_t a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  void *v12;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 + v6 == a2)
  {
    sub_22F24DB7C(a1, a3);
  }
  else
  {
    v7 = a2 - v5;
    if (v6 + a3 > a1[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v5 = *a1;
      v6 = a1[1];
    }
    v8 = (char *)(v5 + v7);
    v9 = (char *)(v5 + v6);
    v10 = v6 - v7;
    if (a3 <= v6 - v7)
    {
      sub_22F24FBF8((uint64_t)a1, &v9[-a3], (char *)(v5 + v6));
      if (&v9[-a3] != v8)
        memmove(&v8[a3], v8, &v9[-a3] - v8);
      v12 = v8;
      v11 = a3;
      goto LABEL_9;
    }
    a1[1] = v6 + a3;
    if (v7 != v6)
    {
      memcpy((void *)(v5 + a3 + v7), v8, v6 - v7);
      bzero(v8, v10);
    }
    v11 = a3 - v10;
    if (a3 != v10)
    {
      v12 = v9;
LABEL_9:
      bzero(v12, v11);
    }
  }
}

void sub_22F24DB7C(_QWORD *a1, size_t a2)
{
  uint64_t v4;

  v4 = a1[1];
  if (v4 + a2 > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = a1[1];
  }
  if (a2)
  {
    bzero((void *)(*a1 + v4), a2);
    v4 = a1[1];
  }
  a1[1] = v4 + a2;
}

BOOL sub_22F24DBE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 477)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F24DC44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 59)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F24DCA4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  unsigned int v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  sub_22E46D8C4(*(_QWORD *)(a1 + 8), a3, (uint64_t)&v8);
  v6 = sub_22E46BBB8((_QWORD **)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 0, 0, (uint64_t *)v8, v9, 0, v5, 0, 0, -1);
  if (v8 != v10)
    free(v8);
  return v6;
}

uint64_t sub_22F24DD70(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if (v4 >= 0x10)
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF0;
    if (*(_BYTE *)(*(_QWORD *)v6 + 16) == 26)
      v5 = v6;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  if (v8)
    v9 = (unint64_t)(v8 - 8);
  else
    v9 = 0;
  v12[0] = sub_22E46BAF0(a1, v9, a2);
  return sub_22E46BBB8((_QWORD **)a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16392), 0, 0, v12, 1, *(_QWORD *)(*(_QWORD *)v5 + 16) >> 19, v10, 0, 0, 1);
}

uint64_t sub_22F24DE6C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if (v6 >= 0x10)
  {
    v8 = v6 & 0xFFFFFFFFFFFFFFF0;
    if (*(_BYTE *)(*(_QWORD *)v8 + 16) == 26)
      v7 = v8;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  if (v10)
    v11 = (unint64_t)(v10 - 8);
  else
    v11 = 0;
  v18[0] = sub_22E46BAF0(a1, v11, a2);
  v17 = 1;
  if (a3 == 3)
  {
    v18[1] = *(_QWORD *)(*(_QWORD *)v7 + 40);
    v17 = 2;
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v11 + 104) + 96), *(_QWORD *)(v11 + 104));
  if (*(_DWORD *)(*(_QWORD *)(v11 + 128) + 20))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16480);
    v13 = v17;
    if (v17 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = v17;
    }
    v18[v13] = v12;
    ++v17;
  }
  v14 = sub_22EF72F20(*(_QWORD *)(a1 + 8), 0, 1, 0);
  return sub_22E46BBB8((_QWORD **)a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16392), 1, 0, v18, v17, v14, v15, 0, 0, -1);
}

uint64_t sub_22F24E098(_QWORD **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_22E46D9A0((uint64_t)a1, *a1, a2, a3, 1u, 0, a7, a8);
}

uint64_t sub_22F24E0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  __int128 v21;
  _QWORD v22[4];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a3 + 8);
  v20 = (unsigned __int8 *)v22;
  v21 = xmmword_22F44E350;
  if ((*(_BYTE *)(a2 + 23) & 4) != 0)
    sub_22E46CE38(&v20, a2, 1u, v6);
  sub_22E46DBB8(*(_QWORD *)(a1 + 8), (uint64_t *)a3, (uint64_t)&v17);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  v8 = (uint64_t *)v17;
  v9 = v18;
  v10 = *(_QWORD *)(a2 + 16) >> 19;
  v11 = v20;
  v12 = v21;
  v13 = sub_22E46DC6C(a2, 1);
  v15 = sub_22E46BBB8((_QWORD **)a1, v7, 0, 0, v8, v9, v10, v14, v11, v12, v13);
  if (v17 != &v19)
    free(v17);
  if (v20 != (unsigned __int8 *)v22)
    free(v20);
  return v15;
}

uint64_t sub_22F24E200(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v10 = a3[2];
  if (v10)
  {
    v11 = 152 * v10;
    v12 = (uint64_t *)(*(_QWORD *)a3 + 144);
    do
    {
      v13 = *v12;
      v12 += 19;
      v14 = sub_22EF64498(*(_QWORD *)(a1 + 8), v13);
      v15 = v18;
      if (v18 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v18;
      }
      v19[v15] = v14;
      v16 = ++v18;
      v11 -= 152;
    }
    while (v11);
  }
  else
  {
    v16 = 0;
  }
  return sub_22E46BBB8((_QWORD **)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 0, 0, v19, v16, 0, a8, 0, 0, -1);
}

uint64_t sub_22F24E348(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  unsigned int v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  sub_22E46DBB8(*(_QWORD *)(a1 + 8), a3, (uint64_t)&v8);
  v6 = sub_22E46BBB8((_QWORD **)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 0, 0, (uint64_t *)v8, v9, 0, v5, 0, 0, -1);
  if (v8 != v10)
    free(v8);
  return v6;
}

_QWORD *sub_22F24E414(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  if (result[2] < (unint64_t)(v7 + a3 - __src))
  {
    result = (_QWORD *)llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

uint64_t sub_22F24E490(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a2 + 72);
  if (v2 != 2 && (v2 != 8 || (*(_WORD *)(a2 + 73) & 2) == 0))
    return 0;
  v4 = sub_22E699F3C(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4);
}

uint64_t sub_22F24E4D4(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 26;
  else
    v7 = 0;
  if (!v7)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v6 = sub_22F10CF48(v6);
    else
      v6 = 0;
  }
  if ((sub_22E66D770((uint64_t)a1, v6) & 1) == 0)
    return llvm::StructType::get();
  v8 = sub_22E46D978(a1, a2, a3);
  return sub_22E46F2EC((uint64_t)a1, v8);
}

void sub_22F24E58C(uint64_t a1, llvm::Function *this)
{
  void *Name;
  size_t v5;
  size_t v6;
  char hasFnAttribute;
  uint64_t Context;
  void *v9;
  uint64_t v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  Context = llvm::Function::getContext(this);
  v9 = v11;
  v10 = 0x800000000;
  Name = (void *)llvm::Value::getName(this);
  v6 = v5;
  hasFnAttribute = llvm::Function::hasFnAttribute();
  sub_22E46FABC(a1, Name, v6, hasFnAttribute, 0);
  llvm::Function::addFnAttrs(this, (const llvm::AttrBuilder *)&Context);
  if (v9 != v11)
    free(v9);
}

uint64_t sub_22F24E664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *DataLayout;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v19;
  __int16 v20;
  void *v21[2];
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  DataLayout = (_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
  sub_22E3C304C((uint64_t)DataLayout, a3);
  v9 = llvm::TypeSize::operator unsigned long long();
  v21[0] = v22;
  v21[1] = (void *)0x400000000;
  sub_22E47EDD0((uint64_t)v21, (int)v9, 0);
  sub_22E475914(*(_QWORD *)(a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), 0, v21);
  v10 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  v11 = (uint64_t *)v21[0];
  v12 = 0;
  if (*DataLayout)
  {
    if (v9 << 32)
    {
      v13 = 8 * (int)v9;
      do
      {
        v14 = *v11++;
        v12 = v14 | (v12 << v10);
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    v15 = 8 * (int)v9;
    do
    {
      v12 = *(_QWORD *)((char *)v21[0] + v15 - 8) | (v12 << v10);
      v15 -= 8;
    }
    while (v15);
  }
  v19 = "cmse.clear";
  v20 = 259;
  v16 = llvm::ConstantInt::get();
  v17 = sub_22E3E49C4(a1 + 272, a2, v16, (uint64_t)&v19);
  if (v21[0] != v22)
    free(v21[0]);
  return v17;
}

uint64_t sub_22F24E820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int ScalarSizeInBits;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *DataLayout;
  _QWORD v28[4];
  __int16 v29;
  int v30;
  void *v31[2];
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  DataLayout = (_BYTE *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
  sub_22E3C304C((uint64_t)DataLayout, a3);
  v7 = llvm::TypeSize::operator unsigned long long();
  v31[0] = v32;
  v31[1] = (void *)0x1000000000;
  sub_22E47EDD0((uint64_t)v31, v7, 0);
  sub_22E475914(*(_QWORD *)(a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), 0, v31);
  v8 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(**(llvm::Type ***)(a3 + 16));
  v10 = llvm::UndefValue::get();
  v11 = *(_DWORD *)(a3 + 32);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = (int)(ScalarSizeInBits / v8);
    v15 = a1 + 272;
    do
    {
      v16 = (uint64_t *)((char *)v31[0] + 8 * v12);
      v17 = &v16[v14];
      if (*DataLayout)
      {
        if (ScalarSizeInBits >= v8)
        {
          v20 = 0;
          do
          {
            v21 = *v16++;
            v20 = v21 | (v20 << v8);
          }
          while (v16 != v17);
        }
      }
      else
      {
        v18 = 0;
        do
        {
          v19 = *--v17;
          v18 = v19 | (v18 << v8);
        }
        while (v17 != v16);
      }
      v12 += v14;
      v30 = v13;
      v29 = 257;
      v22 = sub_22E3C2EA8(v15, a2, (uint64_t)&v30, 1, (uint64_t)v28);
      v28[0] = "cmse.clear";
      v29 = 259;
      v23 = llvm::ConstantInt::get();
      v24 = sub_22E3E49C4(v15, v22, v23, (uint64_t)v28);
      v30 = v13;
      v29 = 257;
      v10 = sub_22E4210EC(v15, v10, v24, (uint64_t)&v30, 1, (uint64_t)v28);
      ++v13;
    }
    while (v13 != v11);
  }
  if (v31[0] != v32)
    free(v31[0]);
  return v10;
}

unint64_t sub_22F24EA94(unint64_t a1, unint64_t a2)
{
  unint64_t i;
  unint64_t v5;
  unint64_t v6;
  int v7;

  for (i = a1; (i & 0xF) == 0; a2 = v6 / v5 * v5)
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((v7 - 25) < 2)
      break;
    if (i && v7 == 37 || i && v7 == 7)
    {
      i = *(_QWORD *)(i + 32);
      v5 = sub_22F115954(i);
      v6 = a2 + v5 + 7;
    }
    else if (i && v7 == 8)
    {
      i = *(_QWORD *)(i + 32);
      v5 = sub_22F115954(i);
      v6 = a2 + v5;
    }
    else if (i && v7 == 24)
    {
      i = *(_QWORD *)(i + 40);
      v5 = sub_22F115954(i);
      v6 = a2 + v5 + 15;
    }
    else if (!i || (v7 & 0xFE) != 0)
    {
      if (!i || v7 != 28)
        break;
      i = *(_QWORD *)(i + 24);
      v5 = sub_22F115954(i);
      v6 = a2 + v5 + 3;
    }
    else
    {
      i = *(_QWORD *)(i + 32);
      v5 = sub_22F115954(i);
      v6 = a2 + v5 - 1;
    }
  }
  if ((i & 0xF) != 0)
    return 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16) - 25 >= 2)
    return 0;
  return i;
}

BOOL sub_22F24EBE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 80)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

llvm::Value *sub_22F24EC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Value *result;
  const char *v7;
  __int16 v8;

  v4 = sub_22F29B990();
  if (v4)
    v5 = *(_QWORD *)(v4 + 24);
  else
    v5 = 0;
  v7 = "inalloca.save";
  v8 = 259;
  result = sub_22E462B78((uint64_t *)(a2 + 272), v5, v4, 0, 0, (uint64_t)&v7, 0);
  *(_QWORD *)(a1 + 1520) = result;
  return result;
}

void sub_22F24ECC4(uint64_t a1, _OWORD *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  __int128 v11;
  uint64_t v12;
  _OWORD v13[3];
  _QWORD v14[6];
  char v15;

  if (a5 && (*(_BYTE *)(a1 + 1867) & 5) != 0)
  {
    v11 = a2[1];
    v13[0] = *a2;
    v13[1] = v11;
    v13[2] = a2[2];
    if ((BYTE8(v11) & 3) != 0)
      v12 = sub_22F28ABCC(v13, a1);
    else
      v12 = *(_QWORD *)&v13[0];
    v14[0] = v12;
    v14[1] = 0;
    v15 = 0;
    sub_22E47770C(a1, (uint64_t)v14, a3, a4, a5, a6);
  }
}

uint64_t sub_22F24ED70(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 68);
  result = *(_QWORD *)(a2 + 8);
  if (v3 == 15)
  {
    if (sub_22E479BE0(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0))
      && (v6 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)), v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v6 < *(unsigned __int8 *)(*(_QWORD *)(v7 + 15088) + *(_QWORD *)(**(_QWORD **)(v7 + 15088) - 24)))&& sub_22EFFBE1C(a2, v7, 2))
    {
      return sub_22F36D7E4(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144));
    }
    else
    {
      return *(_QWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t sub_22F24EE14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 144);
  v2 = *(_QWORD *)(v1 + 184);
  if ((*(_BYTE *)(v2 + 33) & 0x18) != 0 && (*(_BYTE *)(v2 + 1) & 2) == 0)
  {
    if (!*(_QWORD *)(v1 + 840))
      *(_QWORD *)(v1 + 840) = llvm::MDTuple::getImpl();
    return llvm::Instruction::setMetadata();
  }
  return result;
}

llvm::Value *sub_22F24EE8C(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Value *v4;

  v4 = sub_22E479C7C(a1, a2, a3, 0, 0, a4);
  llvm::Value::getContext(v4);
  *((_QWORD *)v4 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return v4;
}

llvm::Value *sub_22F24EEDC(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::Value *v6;

  v6 = sub_22E479C7C(a1, a2, a3, a4, a5, a6);
  llvm::Value::getContext(v6);
  *((_QWORD *)v6 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return v6;
}

void sub_22F24EF20(uint64_t a1, uint64_t a2, llvm::Value *this, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  llvm::Value *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];
  __int16 v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x24BDAC8D0];
  sub_22E479DA0(this, a1, &v24);
  v10 = *(_QWORD *)(a1 + 2016);
  if (!v10)
    goto LABEL_2;
  while (1)
  {
    v15 = *(_QWORD *)(a1 + 1992) - v10;
    if ((*(_BYTE *)(v15 + 24) & 7) != 0 || (*(_BYTE *)(v15 + 24) & 0x40) == 0)
      break;
    v10 = *(_QWORD *)(v15 + 16);
    if (!v10)
      goto LABEL_2;
  }
  if (sub_22F25CF64(a1))
  {
    v17 = sub_22F24F15C(a1);
    v18 = *(_QWORD *)(a1 + 2016);
    if (v18)
    {
      while (1)
      {
        v21 = *(_QWORD *)(a1 + 1992) - v18;
        if ((*(_BYTE *)(v21 + 24) & 7) != 0 || (*(_BYTE *)(v21 + 24) & 0x40) == 0)
          break;
        v18 = *(_QWORD *)(v21 + 16);
        if (!v18)
          goto LABEL_16;
      }
      v19 = sub_22F25CF64(a1);
    }
    else
    {
LABEL_16:
      v19 = 0;
    }
    v23 = 257;
    v20 = sub_22F24F614(a1 + 272, a2, (uint64_t)this, v17, v19, a4, a5, v16, (uint64_t)v24, v25, (uint64_t)v22);
    llvm::Value::getContext((llvm::Value *)v20);
    *(_QWORD *)(v20 + 64) = llvm::AttributeList::addAttributeAtIndex();
    *(_WORD *)(v20 + 18) = *(_WORD *)(v20 + 18) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
  }
  else
  {
LABEL_2:
    v23 = 257;
    v11 = sub_22E47DDEC((uint64_t *)(a1 + 272), a2, (uint64_t)this, a4, a5, (uint64_t)v24, v25, (uint64_t)v22, 0);
    llvm::Value::getContext(v11);
    *((_QWORD *)v11 + 8) = llvm::AttributeList::addAttributeAtIndex();
    *((_WORD *)v11 + 9) = *((_WORD *)v11 + 9) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
    sub_22F24866C(a1 + 272);
  }
  v12 = v24;
  if (v25)
  {
    v13 = 48 * v25;
    v14 = (char *)v24 - 48;
    do
    {
      sub_22E47FB08((uint64_t)&v14[v13]);
      v13 -= 48;
    }
    while (v13);
    v12 = v24;
  }
  if (v12 != v26)
    free(v12);
}

uint64_t sub_22F24F15C(uint64_t a1)
{
  uint64_t result;
  llvm::UnreachableInst *v3;

  result = *(_QWORD *)(a1 + 4160);
  if (!result)
  {
    operator new();
    *(_QWORD *)(a1 + 4160) = llvm::BasicBlock::BasicBlock();
    v3 = (llvm::UnreachableInst *)llvm::User::operator new((llvm::User *)0x40);
    llvm::UnreachableInst::UnreachableInst(v3, *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 144) + 232), *(llvm::BasicBlock **)(a1 + 4160));
    return *(_QWORD *)(a1 + 4160);
  }
  return result;
}

uint64_t sub_22F24F1F4(_QWORD *a1, uint64_t a2, llvm::Value *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  _QWORD v24[7];

  v24[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1[252];
  if (!v12)
  {
LABEL_5:
    sub_22E479DA0(this, (uint64_t)a1, &v22);
LABEL_6:
    v14 = (uint64_t)sub_22E47DDEC(a1 + 34, a2, (uint64_t)this, a4, a5, (uint64_t)v22, v23, a6, 0);
    goto LABEL_7;
  }
  while (1)
  {
    v13 = a1[249] - v12;
    if ((*(_BYTE *)(v13 + 24) & 7) != 0 || (*(_BYTE *)(v13 + 24) & 0x40) == 0)
      break;
    v12 = *(_QWORD *)(v13 + 16);
    if (!v12)
      goto LABEL_5;
  }
  v19 = sub_22F25CF64(a1);
  sub_22E479DA0(this, (uint64_t)a1, &v22);
  if (!v19)
    goto LABEL_6;
  v20 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v14 = sub_22F24F614((uint64_t)(a1 + 34), a2, (uint64_t)this, (uint64_t)v20, v19, a4, a5, v21, (uint64_t)v22, v23, a6);
  sub_22E5ED9B4(a1, v20, 0);
LABEL_7:
  if ((*(_WORD *)(*(_QWORD *)(a1[18] + 152) + 148) & 2) != 0)
    sub_22F24EE14((uint64_t)a1);
  v15 = v22;
  if (v23)
  {
    v16 = 48 * v23;
    v17 = (char *)v22 - 48;
    do
    {
      sub_22E47FB08((uint64_t)&v17[v16]);
      v16 -= 48;
    }
    while (v16);
    v15 = v22;
  }
  if (v15 != v24)
    free(v15);
  return v14;
}

uint64_t sub_22F24F400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v4 = a1 + 6064;
  v6[0] = 6;
  v6[1] = 0;
  v7 = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v6);
    a2 = v7;
  }
  v8[0] = 6;
  v8[1] = 0;
  v9 = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToExistingUseList((llvm::ValueHandleBase *)v8, (llvm::ValueHandleBase **)(v6[0] & 0xFFFFFFFFFFFFFFF8));
  v10 = a3;
  result = (uint64_t)sub_22E479F7C(v4, (char *)v8);
  if (v9 != -8192 && v9 != -4096 && v9)
    result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  if (v7 != -8192 && v7 != -4096)
  {
    if (v7)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t *sub_22F24F4D8(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *((_DWORD *)a1 + 2);
  if (v3 >= *((_DWORD *)a1 + 3))
    return (uint64_t *)sub_22F24FED4(a1, a2, a3);
  v4 = (_QWORD *)(*a1 + 24 * v3);
  v5 = *a3;
  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *v4 = &unk_24FA632F8;
  v4[1] = v6;
  v4[2] = v5;
  *((_DWORD *)a1 + 2) = v3 + 1;
  return a1;
}

llvm::raw_ostream *sub_22F24F520(llvm::raw_ostream *a1, llvm::Type *this)
{
  llvm::Type::print(this, a1);
  return a1;
}

BOOL sub_22F24F554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 178)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F24F5B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 47)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F24F614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  llvm::Value *v12;
  uint64_t v13;

  v12 = (llvm::Value *)sub_22F24FA94(a2, a3, a4, a5, a6, a7, a9, a10);
  v13 = (uint64_t)v12;
  if (*(_BYTE *)(a1 + 100))
  {
    llvm::Value::getContext(v12);
    *(_QWORD *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex();
  }
  return sub_22F245A34((uint64_t *)a1, v13, a11);
}

uint64_t sub_22F24F6B8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  char v13;
  _OWORD v14[3];

  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
    sub_22F297C7C(v14);
  else
    sub_22F297BAC(a1, (uint64_t)v14);
  v6 = v14[1];
  *a3 = v14[0];
  a3[1] = v6;
  a3[2] = v14[2];
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 320);
  if ((*(_QWORD *)(a2 + 24) & 4) != 0)
    v8 = (uint64_t *)&v13;
  else
    v8 = &v12;
  v9 = 56;
  if ((*(_QWORD *)(a2 + 24) & 4) == 0)
    v9 = 40;
  v10 = a3[1];
  *(_OWORD *)v8 = *a3;
  *((_OWORD *)v8 + 1) = v10;
  *((_OWORD *)v8 + 2) = a3[2];
  return (*(uint64_t (**)(void))(*v7 + v9))();
}

uint64_t sub_22F24F778(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  if ((unint64_t)(v2 + 1) > *(_QWORD *)(result + 16))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v2 = v1[1];
  }
  *(_BYTE *)(*v1 + v2) = 0;
  ++v1[1];
  return result;
}

uint64_t sub_22F24F7D0(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::LLVMContext *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13[3];

  v13[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 64), a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 64), v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t *, uint64_t **, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, v13, 2, 0);
  if (!result)
  {
    v12 = llvm::User::operator new((llvm::User *)0x50);
    sub_22E3C1470(v12, (uint64_t)a2, a3, v13, 2);
    return sub_22E3C12C8((uint64_t *)a1, v12, a6);
  }
  return result;
}

llvm::raw_ostream *sub_22F24F8E4(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  unint64_t v4;
  size_t v5;
  char *v6;
  void *v7;
  _BYTE *v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  void *v12;

  v3 = result;
  v4 = *(char *)result;
  if (v4 <= 2)
  {
    v5 = qword_22F4557B0[v4];
    v6 = off_24FA63398[v4];
    v7 = (void *)*((_QWORD *)this + 4);
    if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v7)
    {
      result = (llvm::raw_ostream *)memcpy(v7, v6, v5);
      *((_QWORD *)this + 4) += v5;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, v6);
      this = result;
    }
  }
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v8 >= *((_QWORD *)this + 3))
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
    this = result;
  }
  else
  {
    *((_QWORD *)this + 4) = v8 + 1;
    *v8 = 44;
  }
  v9 = *((char *)v3 + 1);
  if (v9 <= 2)
  {
    v10 = qword_22F4557B0[v9];
    v11 = off_24FA63398[v9];
    v12 = (void *)*((_QWORD *)this + 4);
    if (v10 <= *((_QWORD *)this + 3) - (_QWORD)v12)
    {
      result = (llvm::raw_ostream *)memcpy(v12, v11, v10);
      *((_QWORD *)this + 4) += v10;
    }
    else
    {
      return (llvm::raw_ostream *)llvm::raw_ostream::write(this, v11);
    }
  }
  return result;
}

uint64_t sub_22F24F9F4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 40 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 40 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_22F24FA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v8 = 0;
  if (a8)
  {
    v9 = 48 * a8;
    v10 = (_QWORD *)(a7 + 32);
    do
    {
      v8 += (*v10 - *(v10 - 1)) >> 3;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
  }
  v11 = llvm::User::operator new((llvm::User *)0x50);
  *(_QWORD *)(llvm::Instruction::Instruction() + 64) = 0;
  llvm::InvokeInst::init();
  return v11;
}

void sub_22F24FB88(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v2 = a1[1];
      }
      if (a2 != v2)
        bzero((void *)(*a1 + v2), a2 - v2);
    }
    a1[1] = a2;
  }
}

uint64_t sub_22F24FBF8(uint64_t result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;

  v4 = a2;
  v5 = (_QWORD *)result;
  v6 = a3 - a2;
  v7 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) < (unint64_t)(v7 + a3 - a2))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v5[1];
  }
  if (v4 != a3)
  {
    v8 = (_BYTE *)(*v5 + v7);
    do
    {
      v9 = *v4++;
      *v8++ = v9;
    }
    while (v4 != a3);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

uint64_t sub_22F24FC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E47F0A8(a2, a3);
}

unint64_t sub_22F24FC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E47F0A8(a2, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F24FCBC(uint64_t result, char *a2, uint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = a2;
  v6 = result;
  v7 = a4 - a2;
  v8 = *(unsigned int *)(result + 8);
  if (v8 + ((a4 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v6 + 8);
  }
  if (v5 != a4)
  {
    v9 = (_QWORD *)(*(_QWORD *)v6 + 8 * v8);
    do
    {
      v10 = *(_QWORD *)v5;
      v5 += 8;
      *v9++ = *(_QWORD *)(v10 + 48);
    }
    while (v5 != a4);
    LODWORD(v8) = *(_DWORD *)(v6 + 8);
  }
  *(_DWORD *)(v6 + 8) = v8 + (v7 >> 3);
  return result;
}

uint64_t sub_22F24FD44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v6 = *(_DWORD *)(a2 + 24);
  if ((v6 & 0x30000000) != 0)
  {
    v8 = sub_22F24BFC0(a1, *(_QWORD *)(a2 + 32));
    HIDWORD(v9) = v6;
    LODWORD(v9) = v6;
    v7 = (v9 >> 28);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = sub_22F24BFC0(a1, *(_QWORD *)a2);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  result = sub_22F24BFC0(a1, *(_QWORD *)(a2 + 40));
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v12;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = result;
  return result;
}

void sub_22F24FDD8(uint64_t a1)
{
  llvm::ValueHandleBase *v2;

  v2 = (llvm::ValueHandleBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F24FE44(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F24FE44(uint64_t result, llvm::ValueHandleBase *this)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD **)result;
    v6 = 32 * v2;
    do
    {
      result = (uint64_t)sub_22E47FD64(this, v5);
      v5 += 4;
      this = (llvm::ValueHandleBase *)((char *)this + 32);
      v6 -= 32;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 32 * v7;
      do
      {
        v10 = *(_QWORD *)(v8 + v9 - 16);
        if (v10 != -8192 && v10 != -4096 && v10 != 0)
          result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v8 + v9 - 32));
        v9 -= 32;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_22F24FED4(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = *((unsigned int *)a1 + 2);
  v8 = (_QWORD *)(v6 + 24 * v7);
  v9 = *a3;
  v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *v8 = &unk_24FA632F8;
  v8[1] = v10;
  v8[2] = v9;
  v11 = (char *)*a1;
  if ((_DWORD)v7)
  {
    v12 = 24 * v7;
    v13 = (__int128 *)(v11 + 8);
    v14 = v6;
    do
    {
      *(_QWORD *)v14 = &unk_24FA632F8;
      v15 = *v13;
      v13 = (__int128 *)((char *)v13 + 24);
      *(_OWORD *)(v14 + 8) = v15;
      v14 += 24;
      v12 -= 24;
    }
    while (v12);
    v11 = (char *)*a1;
  }
  if (v11 != (char *)(a1 + 2))
    free(v11);
  *a1 = v6;
  v16 = *((_DWORD *)a1 + 2) + 1;
  *((_DWORD *)a1 + 2) = v16;
  *((_DWORD *)a1 + 3) = 0;
  return v6 + 24 * v16 - 24;
}

uint64_t sub_22F24FFB8()
{
  return 1;
}

uint64_t sub_22F24FFC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = sub_22F24BFC0((uint64_t)a2, *(_QWORD *)(a1 + 24));
  return sub_22E4C9DFC(a2, v4, v3 & 0xFFFFFFFFFFFFFFF8);
}

unint64_t sub_22F24FFF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1[199];
  if (!a1[528])
  {
    v5 = a1[18];
    v6 = *(_QWORD *)(sub_22EFCAD5C(v4 + 72) + 16);
    v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 4) != 0)
      v7 = (_QWORD *)*v7;
    if (v7)
      v8 = (unint64_t)(v7 - 8);
    else
      v8 = 0;
    a1[528] = sub_22E47FE60(v5, v8);
  }
  v9 = a1[526];
  v10 = sub_22EFD7558(v4);
  v11 = sub_22F10ACF8(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
  return sub_22E3D2FA0((uint64_t)a1, v9, v11, a1[528], 0, 0, 0, a2);
}

uint64_t sub_22F25009C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  llvm::LLVMContext *v6;

  result = sub_22E4800F0(a1, a2, a3, a4);
  if (result)
  {
    v6 = (llvm::LLVMContext *)sub_22F36891C(*(_QWORD *)(a1 + 144));
    sub_22E66CB04((llvm::Type ***)(a1 + 280), v6);
    return llvm::ConstantInt::get();
  }
  return result;
}

uint64_t sub_22F2500F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104)),
        (v3 = *(_QWORD *)(a2 + 128)) != 0))
  {
    v3 = *(_QWORD *)(v3 + 88);
  }
  v6 = v3;
  return sub_22F251E98((uint64_t *)(*(_QWORD *)(a1 + 72) + 88), &v6)[1];
}

uint64_t sub_22F250154(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::LLVMContext *v20;
  uint64_t *v21;
  llvm::LLVMContext *v22;
  _BYTE v23[32];
  __int16 v24;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1[18] + 224) + 656))(*(_QWORD *)(a1[18] + 224)))
    return 0;
  v9 = *(_QWORD *)(sub_22EFCAD5C(a1[200] + 72) + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  if (v10)
    v11 = v10 - 8;
  else
    v11 = 0;
  v12 = *(_QWORD *)(sub_22EFCAD5C((a2 & 0xFFFFFFFFFFFFFFF8) + 72) + 16);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (_QWORD *)*v13;
  if (v13)
    v14 = (uint64_t)(v13 - 8);
  else
    v14 = 0;
  if (a5)
    return a1[728];
  if (v11 == (uint64_t *)v14)
  {
    v16 = 0;
  }
  else
  {
    v17 = sub_22F0C975C(*(_QWORD *)(a1[18] + 144), (unint64_t)v11);
    if (a4)
      v18 = sub_22F2500F4(v17, v14);
    else
      v18 = sub_22E46A3EC(v17, v14);
    v16 = sub_22E60CAA4(a1[18] + 704, v11, v14, v18);
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[18] + 224) + 656))(*(_QWORD *)(a1[18] + 224), a1[211], a1[212]))
  {
    v19 = (uint64_t *)a1[728];
    v20 = (llvm::LLVMContext *)a1[12];
    v24 = 257;
    return sub_22F24CE30((uint64_t)(a1 + 34), v20, v19, v16, (uint64_t)v23);
  }
  else
  {
    v21 = (uint64_t *)sub_22E60C93C((uint64_t *)(a1[18] + 704), (unint64_t)v11);
    v22 = (llvm::LLVMContext *)v21[3];
    v24 = 257;
    return sub_22F2502D4((uint64_t)(a1 + 34), v22, v21, v16, (uint64_t)v23);
  }
}

uint64_t sub_22F2502D4(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  llvm::LLVMContext *v9;
  uint64_t result;
  uint64_t v11;
  llvm::GetElementPtrInst *v12;
  uint64_t *v13[3];

  v13[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), v9);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  result = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, v13, 2, 1);
  if (!result)
  {
    v11 = llvm::User::operator new((llvm::User *)0x50);
    v12 = (llvm::GetElementPtrInst *)sub_22E3C1470(v11, (uint64_t)a2, a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    return sub_22E3C12C8((uint64_t *)a1, v11, a5);
  }
  return result;
}

double sub_22F2503EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  double result;
  _BOOL4 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29[3];
  _OWORD v30[3];
  uint64_t v31;
  char v32;
  _OWORD v33[8];
  uint64_t v34;
  _OWORD v35[8];
  uint64_t v36;
  _QWORD v37[6];
  char v38;
  _OWORD v39[8];
  uint64_t v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v8 = sub_22EF5DD84(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(a2 + 48), *(_DWORD *)(a3 + 72) >> 11);
  v9 = sub_22E619D68(v8);
  if (v9)
  {
    if (v9 == 2)
    {
      v17 = sub_22E4EF360(a1, a2);
      v18 = *(_OWORD *)(a3 + 24);
      v30[0] = *(_OWORD *)(a3 + 8);
      v30[1] = v18;
      v30[2] = *(_OWORD *)(a3 + 40);
      if (v17)
        v19 = 49;
      else
        v19 = 33;
      v31 = *(_QWORD *)(a3 + 72);
      v32 = v19;
      sub_22E4EF100(a1, a4, v30);
    }
    else if (v9 == 1)
    {
      v25 = *(_OWORD *)(a3 + 112);
      v33[6] = *(_OWORD *)(a3 + 96);
      v33[7] = v25;
      v34 = *(_QWORD *)(a3 + 128);
      v26 = *(_OWORD *)(a3 + 48);
      v33[2] = *(_OWORD *)(a3 + 32);
      v33[3] = v26;
      v27 = *(_OWORD *)(a3 + 80);
      v33[4] = *(_OWORD *)(a3 + 64);
      v33[5] = v27;
      v28 = *(_OWORD *)(a3 + 16);
      v33[0] = *(_OWORD *)a3;
      v33[1] = v28;
      sub_22F262998(a1, a4, (uint64_t)v33, 1);
    }
  }
  else if (*(_DWORD *)a3)
  {
    v41[0] = a1;
    v41[1] = a1 + 272;
    v42 = 0;
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v37[0] = sub_22E50E974(v41, a4, v10);
    v37[1] = 0;
    v38 = 0;
    v21 = *(_OWORD *)(a3 + 112);
    v35[6] = *(_OWORD *)(a3 + 96);
    v35[7] = v21;
    v36 = *(_QWORD *)(a3 + 128);
    v22 = *(_OWORD *)(a3 + 48);
    v35[2] = *(_OWORD *)(a3 + 32);
    v35[3] = v22;
    v23 = *(_OWORD *)(a3 + 80);
    v35[4] = *(_OWORD *)(a3 + 64);
    v35[5] = v23;
    v24 = *(_OWORD *)(a3 + 16);
    v35[0] = *(_OWORD *)a3;
    v35[1] = v24;
    sub_22E4DAAE0(a1, v37, v35, 0, *(double *)&v24);
  }
  else
  {
    v11 = *(_OWORD *)(a3 + 112);
    v39[6] = *(_OWORD *)(a3 + 96);
    v39[7] = v11;
    v40 = *(_QWORD *)(a3 + 128);
    v12 = *(_OWORD *)(a3 + 48);
    v39[2] = *(_OWORD *)(a3 + 32);
    v39[3] = v12;
    v13 = *(_OWORD *)(a3 + 80);
    v39[4] = *(_OWORD *)(a3 + 64);
    v39[5] = v13;
    v14 = *(_OWORD *)(a3 + 16);
    v39[0] = *(_OWORD *)a3;
    v39[1] = v14;
    sub_22E4CB220(a1, a4, a2, v39, 0);
  }
  v15 = sub_22F115260(v8);
  if (sub_22F245DD4(a1, v15))
  {
    v20 = *(_OWORD *)(a3 + 24);
    v29[0] = *(_OWORD *)(a3 + 8);
    v29[1] = v20;
    v29[2] = *(_OWORD *)(a3 + 40);
    return sub_22F259DCC(a1, v15, v29, v8);
  }
  return result;
}

BOOL sub_22F2505EC(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *(_QWORD *)(sub_22EFCAD5C(a1 + 72) + 16);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)*v3;
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  sub_22E3CD31C((uint64_t *)(v4[13] + 96), v4[13]);
  if (*(_DWORD *)(v4[16] + 20))
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 26;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(v5);
  if ((*(_BYTE *)(v5 + 23) & 8) != 0)
    return 0;
  if ((*(_QWORD *)(a1 + 80) & 0x1FFFFF0000000000) == 0x10000000000)
  {
    v7 = sub_22EFD7ED0(a1);
    if ((**(_BYTE **)v7 & 6) == 0)
      return (*(_WORD *)(*(_QWORD *)v7 + 28) & 1) == 0;
  }
  return 1;
}

uint64_t sub_22F2506BC(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  _QWORD v32[6];
  char v33;
  __int16 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[154];
  _QWORD v39[26];
  _QWORD v40[4];
  _QWORD v41[6];

  LODWORD(v5) = a5;
  v41[5] = *MEMORY[0x24BDAC8D0];
  v36 = v38;
  v37 = 0x800000000;
  v38[152] = v39;
  v38[153] = 0x100000000;
  v39[24] = v40;
  v39[25] = 0x100000000;
  v40[2] = v41;
  v40[3] = 0x200000000;
  v41[4] = 0;
  v9 = *a4;
  v10 = *((unsigned int *)a4 + 2);
  sub_22F24FFF8(a1, &v28);
  v31[0] = v28;
  v31[1] = v29;
  v31[2] = v30;
  v11 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 48) & 0xFFFFFFFFFFFFFFF0));
  sub_22E5E0440((uint64_t)a1, (uint64_t)v31, v11, v32);
  v12 = *(_QWORD *)(*(_QWORD *)v9 + 48);
  v32[1] = 0;
  v33 = 0;
  v34 = 0;
  v35 = v12;
  v13 = sub_22E3C187C((uint64_t)&v36, (unint64_t)v32, 1);
  v14 = &v36[19 * v37];
  v15 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v13;
  *((_OWORD *)v14 + 1) = v15;
  v16 = *(_QWORD *)(v13 + 144);
  v17 = *(_OWORD *)(v13 + 128);
  v18 = *(_OWORD *)(v13 + 96);
  *((_OWORD *)v14 + 7) = *(_OWORD *)(v13 + 112);
  *((_OWORD *)v14 + 8) = v17;
  v14[18] = v16;
  *((_OWORD *)v14 + 6) = v18;
  v19 = *(_OWORD *)(v13 + 80);
  v20 = *(_OWORD *)(v13 + 32);
  v21 = *(_OWORD *)(v13 + 48);
  *((_OWORD *)v14 + 4) = *(_OWORD *)(v13 + 64);
  *((_OWORD *)v14 + 5) = v19;
  *((_OWORD *)v14 + 2) = v20;
  *((_OWORD *)v14 + 3) = v21;
  LODWORD(v37) = v37 + 1;
  if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[18] + 224) + 656))(*(_QWORD *)(a1[18] + 224), a1[211], a1[212]))
  {
    v22 = 2;
  }
  else
  {
    v22 = 1;
  }
  if (v22 == v10)
  {
    v5 = v5;
  }
  else
  {
    v23 = (uint64_t *)(v9 + 8 * v22);
    v5 = v5;
    v24 = 8 * v10 - 8 * v22;
    do
    {
      v25 = *v23++;
      sub_22E477344((uint64_t)a1, (uint64_t)&v36, v25, v5);
      v24 -= 8;
    }
    while (v24);
  }
  v27[0] = v28;
  v27[1] = v29;
  v27[2] = v30;
  sub_22E484118((uint64_t)a1, a2, a3, 0, 1, v27, &v36, 1, v5, SHIDWORD(v5), 1);
  return sub_22E3CEBAC((uint64_t)&v36);
}

double sub_22F2508EC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v14[3];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  sub_22F24FFF8(a1, &v20);
  v17 = v20;
  v18 = v21;
  v19 = v22;
  v4 = *(_QWORD *)(*(_QWORD *)sub_22EFD7ED0(a2) + 8);
  v14[0] = v17;
  v14[1] = v18;
  v14[2] = v19;
  v15 = 0;
  v16 = 49;
  sub_22E4EF100(a1, v4, v14);
  v5 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v7 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    v7 = (_QWORD *)*v7;
  if (v7)
    v8 = v7 - 8;
  else
    v8 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(a1[18] + 152) + 8) & 0x100000000000) != 0)
  {
    v9 = (unint64_t)v8;
    sub_22E3CD31C((uint64_t *)(v8[13] + 96), v8[13]);
    if ((**(_QWORD **)(v9 + 128) & 0x100000000000) == 0)
    {
      if ((a1[211] & 7) != 0)
        v10 = 2;
      else
        v10 = 1;
      v11 = sub_22EFD10F8(v9);
      v23 = v20;
      v24 = v21;
      v25 = v22;
      v12 = sub_22E4899EC(a1 + 248, 1, 72);
      *(_QWORD *)v12 = off_24FA634D8;
      *(_QWORD *)(v12 + 8) = v11;
      v13 = v24;
      *(_OWORD *)(v12 + 16) = v23;
      *(_OWORD *)(v12 + 32) = v13;
      result = *(double *)&v25;
      *(_OWORD *)(v12 + 48) = v25;
      *(_DWORD *)(v12 + 64) = v10;
    }
  }
  return result;
}

uint64_t sub_22F250A24(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  _QWORD v9[21];

  v9[20] = *MEMORY[0x24BDAC8D0];
  result = sub_22E463414(a2);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[18] + 224) + 496))(*(_QWORD *)(a1[18] + 224), a2))
    {
      sub_22F251340(&v7, (uint64_t)a1, a2);
      v5 = v7;
      if (v8)
      {
        v6 = 40 * v8;
        do
        {
          sub_22E48532C(a1, v5);
          v5 += 5;
          v6 -= 40;
        }
        while (v6);
        v5 = v7;
      }
      if (v5 != v9)
        free(v5);
    }
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    if (*(_DWORD *)(*(_QWORD *)(a2 + 128) + 20))
      return (*(uint64_t (**)(_QWORD, _QWORD *, unint64_t))(**(_QWORD **)(a1[18] + 224) + 360))(*(_QWORD *)(a1[18] + 224), a1, a2);
  }
  return result;
}

void sub_22F250B44(uint64_t a1)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD v35[3];
  _OWORD v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v2 = (_WORD *)(*(_QWORD *)(a1 + 1688) & 0xFFFFFFFFFFFFFFF8);
  v3 = *(_QWORD *)(a1 + 1688) & 7;
  if ((_DWORD)v3 != 2)
  {
    v6 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)(v2 + 36)) + 16);
    v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 4) != 0)
      v7 = (_QWORD *)*v7;
    v8 = v7 ? (uint64_t)(v7 - 8) : 0;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x800) != 0)
    {
      v9 = sub_22F260198(a1);
      llvm::Value::getContext(v9);
      *((_QWORD *)v9 + 8) = llvm::AttributeList::addAttributeAtIndex();
      llvm::Value::getContext(v9);
      *((_QWORD *)v9 + 8) = llvm::AttributeList::addAttributeAtIndex();
      sub_22F24866C(a1 + 272);
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
      return;
    }
  }
  v4 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v2 + 64))(v2);
  if (v4)
  {
    sub_22E3CB7B0((_QWORD *)a1, v4, 0);
    if ((_DWORD)v3)
    {
      if (*(_BYTE *)v4 == 6)
      {
        v5 = 1;
        sub_22F25C748(a1, v4);
        goto LABEL_15;
      }
LABEL_14:
      v5 = 0;
LABEL_15:
      sub_22E48114C(a1, 0);
      v10 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
      v11 = *(_QWORD *)(a1 + 2312);
      v12 = *(_BYTE *)(a1 + 2893);
      *(_BYTE *)(a1 + 2893) = 0;
      v13 = *(_QWORD *)(a1 + 2872);
      *(_QWORD *)(a1 + 2872) = v10;
      if ((_DWORD)v3 != 2)
      {
        if ((_DWORD)v3 != 1)
        {
LABEL_42:
          *(_BYTE *)(a1 + 2893) = v12;
          sub_22E48B274(a1, v10, v11, 0, 0);
          *(_QWORD *)(a1 + 2872) = v13;
          if (v5)
            sub_22E4D2C10(a1, v4, 1);
          return;
        }
        sub_22E482158((_QWORD *)a1, v2, 1);
        if ((v5 & 1) == 0)
        {
          v31 = sub_22EFD7784((uint64_t)v2);
          sub_22F24FFF8((_QWORD *)a1, v35);
          v32 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
          v37 = v35[0];
          v38 = v35[1];
          v39 = v35[2];
          (*(void (**)(uint64_t, uint64_t, _WORD *, uint64_t, _QWORD, _QWORD, __int128 *, uint64_t))(*(_QWORD *)v32 + 472))(v32, a1, v2, 2, 0, 0, &v37, v31);
          *(_BYTE *)(a1 + 2893) = v12;
          sub_22E48B274(a1, v10, v11, 0, 0);
          *(_QWORD *)(a1 + 2872) = v13;
          return;
        }
      }
      sub_22E482158((_QWORD *)a1, v2, 2);
      v14 = (uint64_t)(v2 + 36);
      v15 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)(v2 + 36)) + 16);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
      if ((v15 & 4) != 0)
        v16 = (_QWORD *)*v16;
      if (v16)
        v17 = (uint64_t)(v16 - 8);
      else
        v17 = 0;
      if (sub_22E463414(v17) && (sub_22EFD61B0(v17) & 1) == 0)
      {
        v18 = (_BYTE *)(*(uint64_t (**)(_WORD *))(*(_QWORD *)v2 + 64))(v2);
        if (!v18 || *v18 != 8 || *(_DWORD *)v18 > 0xFFu)
          goto LABEL_28;
        v33 = sub_22EFC3B90(v17);
        if (!v33)
          goto LABEL_37;
        v34 = v33;
        if (sub_22E488788(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v33 + 48)))
        {
          while (1)
          {
            v34 = *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v34)
              break;
            if ((*(_DWORD *)(v34 + 28) & 0x7Fu) - 49 <= 2
              && (sub_22E488788(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v34 + 48)) & 1) == 0)
            {
              goto LABEL_28;
            }
          }
        }
        else
        {
LABEL_28:
          v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 32);
          if ((v19 & 0x400000000000000) != 0 && (v19 & 0x1800) != 0)
            *(_QWORD *)(a1 + 4208) = llvm::IRBuilderBase::CreateLaunderInvariantGroup();
          v20 = *(_QWORD *)(sub_22EFCAD5C(v14) + 16);
          v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 4) != 0)
            v21 = (_QWORD *)*v21;
          if (v21)
            v22 = (unint64_t)(v21 - 8);
          else
            v22 = 0;
          sub_22F250A24((_QWORD *)a1, v22);
        }
      }
LABEL_37:
      if (v5)
      {
        v23 = *(unsigned __int8 **)(v4 + 16);
        v24 = a1;
      }
      else
      {
        if (!v4)
        {
LABEL_40:
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 8) & 0x2000000000) != 0)
            llvm::Function::addFnAttr();
          goto LABEL_42;
        }
        v24 = a1;
        v23 = (unsigned __int8 *)v4;
      }
      sub_22E5E5158(v24, v23, 0, 0);
      goto LABEL_40;
    }
  }
  else if ((_DWORD)v3)
  {
    goto LABEL_14;
  }
  v25 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v26 = *(_QWORD *)(a1 + 2312);
  v27 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v28 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v25;
  sub_22E482158((_QWORD *)a1, v2, 0);
  if (*(_QWORD *)(a1 + 320))
  {
    v29 = sub_22EFD7784((uint64_t)v2);
    sub_22F24FFF8((_QWORD *)a1, v36);
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
    v37 = v36[0];
    v38 = v36[1];
    v39 = v36[2];
    (*(void (**)(uint64_t, uint64_t, _WORD *, uint64_t, _QWORD, _QWORD, __int128 *, uint64_t))(*(_QWORD *)v30 + 472))(v30, a1, v2, 1, 0, 0, &v37, v29);
  }
  *(_BYTE *)(a1 + 2893) = v27;
  sub_22E48B274(a1, v25, v26, 0, 0);
  *(_QWORD *)(a1 + 2872) = v28;
}

llvm::APInt *sub_22F250FD0(uint64_t a1, unint64_t a2, llvm::LLVMContext *a3, _OWORD *a4, uint64_t a5, int a6, int a7)
{
  llvm::Instruction *v13;
  __int128 v14;
  _OWORD v16[3];
  uint64_t v17;

  v17 = 0;
  v13 = sub_22E620E9C(a1, a3, &v17, (uint64_t)a4);
  v14 = a4[1];
  v16[0] = *a4;
  v16[1] = v14;
  v16[2] = a4[2];
  return sub_22E483158(a1, a2, (uint64_t)v13, (uint64_t)v16, a5, a6, a7);
}

uint64_t sub_22F25105C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  _OWORD v10[3];

  v6 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v7 = sub_22EFD10F8(v6);
  v8 = a2[1];
  v10[0] = *a2;
  v10[1] = v8;
  v10[2] = a2[2];
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 472))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, v7, 1, 0, 0, v10, a3);
}

void sub_22F2510F0(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[3];
  void *v10;
  unsigned int v11;
  _QWORD v12[21];

  v12[20] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1[18] + 224) + 496))(*(_QWORD *)(a1[18] + 224)))
  {
    sub_22F251340(&v10, (uint64_t)a1, a2);
    v6 = v10;
    if (v11)
    {
      v7 = 40 * v11;
      do
      {
        v8 = a3[1];
        v9[0] = *a3;
        v9[1] = v8;
        v9[2] = a3[2];
        sub_22F251234(a1, v6, v9);
        v6 += 5;
        v7 -= 40;
      }
      while (v7);
      v6 = v10;
    }
    if (v6 != v12)
      free(v6);
  }
}

uint64_t sub_22F2511E0(uint64_t a1, uint64_t a2)
{
  sub_22F252258(a1, a2);
  sub_22F25232C(a1 + 1232, a2 + 1232);
  sub_22F252404(a1 + 1440, a2 + 1440);
  sub_22F252404(a1 + 1472, a2 + 1472);
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
  return a1;
}

uint64_t sub_22F251234(_QWORD *a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t result;
  llvm::Type **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  _OWORD v13[3];
  _OWORD v14[3];
  _OWORD v15[2];
  __int128 v16;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[18] + 224) + 504))(*(_QWORD *)(a1[18] + 224), *a2, a2[1], a2[4]);
  if (result)
  {
    v7 = (llvm::Type **)result;
    v8 = a2[1];
    if (v8)
    {
      v9 = a3[1];
      v14[0] = *a3;
      v14[1] = v9;
      v14[2] = a3[2];
      sub_22E48094C((uint64_t)v15, (uint64_t)a1, (uint64_t)v14, v8, 0, a2[4], a2[2]);
      v10 = v15[1];
      *a3 = v15[0];
      a3[1] = v10;
      a3[2] = v16;
    }
    v11 = a3[1];
    v13[0] = *a3;
    v13[1] = v11;
    v13[2] = a3[2];
    v12 = sub_22E484FA4(a1, (uint64_t)v13, *v7, a2[4], 0);
    *(_QWORD *)&v15[0] = "cmp.vtables";
    LOWORD(v16) = 259;
    sub_22E3C18F4((uint64_t)(a1 + 34), 32, v12, (uint64_t)v7, (uint64_t)v15);
    return llvm::IRBuilderBase::CreateAssumption();
  }
  return result;
}

void sub_22F251340(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BYTE v7[32];

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v3 = v7;
  v4 = v7;
  v5 = 4;
  v6 = 0;
  sub_22E485620(a2, a3, 0, 0, 0, 0, a3, (uint64_t)&v3, (uint64_t)a1);
  if (v4 != v3)
    free(v4);
}

uint64_t sub_22F2513C0(uint64_t a1, unint64_t a2, __int128 *a3, __int128 *a4, unsigned __int8 *a5)
{
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  llvm::LLVMContext *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  __int128 v41;
  unsigned int v42;
  _OWORD v44[3];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  char v51;
  __int16 v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[154];
  _QWORD v57[26];
  _QWORD v58[4];
  _QWORD v59[6];

  v59[5] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 26;
  else
    v11 = 0;
  if (!v11)
    v10 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
  v54 = v56;
  v55 = 0x800000000;
  v56[152] = v57;
  v56[153] = 0x100000000;
  v57[24] = v58;
  v57[25] = 0x100000000;
  v58[2] = v59;
  v58[3] = 0x200000000;
  v59[4] = 0;
  v12 = a3[1];
  v45 = *a3;
  v46 = v12;
  v47 = a3[2];
  v13 = sub_22EFD7558(a2);
  sub_22E5E0440(a1, (uint64_t)&v45, v13, &v48);
  v14 = v48;
  v15 = sub_22EFD7558(a2);
  v48 = v14;
  v49 = 0;
  v51 = 0;
  v52 = 0;
  v53 = v15;
  v16 = sub_22E3C187C((uint64_t)&v54, (unint64_t)&v48, 1);
  v17 = &v54[19 * v55];
  v18 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v16;
  *((_OWORD *)v17 + 1) = v18;
  v19 = *(_QWORD *)(v16 + 144);
  v20 = *(_OWORD *)(v16 + 128);
  v21 = *(_OWORD *)(v16 + 96);
  *((_OWORD *)v17 + 7) = *(_OWORD *)(v16 + 112);
  *((_OWORD *)v17 + 8) = v20;
  v17[18] = v19;
  *((_OWORD *)v17 + 6) = v21;
  v22 = *(_OWORD *)(v16 + 80);
  v23 = *(_OWORD *)(v16 + 32);
  v24 = *(_OWORD *)(v16 + 48);
  *((_OWORD *)v17 + 4) = *(_OWORD *)(v16 + 64);
  *((_OWORD *)v17 + 5) = v22;
  *((_OWORD *)v17 + 2) = v23;
  *((_OWORD *)v17 + 3) = v24;
  LODWORD(v55) = v55 + 1;
  v25 = *(llvm::LLVMContext **)(v10 + 40);
  v26 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v25);
  v27 = a4[1];
  v45 = *a4;
  v46 = v27;
  v47 = a4[2];
  v28 = sub_22EFD7558(a2);
  sub_22E5E0440(a1, (uint64_t)&v45, v28, &v48);
  v50 = 257;
  v48 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v48, v26, (uint64_t)&v48);
  v49 = 0;
  v51 = 0;
  v52 = 0;
  v53 = (unint64_t)v25;
  v29 = sub_22E3C187C((uint64_t)&v54, (unint64_t)&v48, 1);
  v30 = &v54[19 * v55];
  v31 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v29;
  *((_OWORD *)v30 + 1) = v31;
  v32 = *(_QWORD *)(v29 + 144);
  v33 = *(_OWORD *)(v29 + 128);
  v34 = *(_OWORD *)(v29 + 96);
  *((_OWORD *)v30 + 7) = *(_OWORD *)(v29 + 112);
  *((_OWORD *)v30 + 8) = v33;
  v30[18] = v32;
  *((_OWORD *)v30 + 6) = v34;
  v35 = *(_OWORD *)(v29 + 80);
  v36 = *(_OWORD *)(v29 + 32);
  v37 = *(_OWORD *)(v29 + 48);
  *((_OWORD *)v30 + 4) = *(_OWORD *)(v29 + 64);
  *((_OWORD *)v30 + 5) = v35;
  *((_OWORD *)v30 + 2) = v36;
  *((_OWORD *)v30 + 3) = v37;
  LODWORD(v55) = v55 + 1;
  LODWORD(v30) = *a5;
  v38 = (_DWORD)v30 == 119;
  if ((_DWORD)v30 == 119)
    v39 = a5;
  else
    v39 = 0;
  v40 = v39 + 48;
  if (!v38)
    v40 = a5 + 40;
  sub_22E477B1C(a1, (uint64_t)&v54, v10 & 0xFFFFFFFFFFFFFFFBLL, (uint64_t)(v40 + 8), (unint64_t *)&v40[8 * *((unsigned int *)a5 + 8)], *((_QWORD *)a5 + 2), 1u, 0);
  v41 = a3[1];
  v44[0] = *a3;
  v44[1] = v41;
  v44[2] = a3[2];
  sub_22EFF605C((uint64_t)a5);
  sub_22E484118(a1, a2, 0, 0, 0, v44, &v54, 1, v42, 0, 0);
  return sub_22E3CEBAC((uint64_t)&v54);
}

__n128 sub_22F2516B8(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;

  v6 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v6)
  {
    v8 = v6;
    if ((*(_DWORD *)(v6 + 28) & 0x7Fu) - 35 <= 2)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104));
      if ((**(_QWORD **)(v8 + 128) & 0x100000000000) == 0)
      {
        v9 = sub_22EFD10F8(v8);
        v11 = *a3;
        v12 = a3[1];
        v13 = a3[2];
        v10 = sub_22E4899EC(a1 + 1984, 3u, 72);
        *(_QWORD *)v10 = off_24FA63500;
        *((_QWORD *)v10 + 1) = v9;
        *((__n128 *)v10 + 1) = v11;
        *((__n128 *)v10 + 2) = v12;
        result = v13;
        *((__n128 *)v10 + 3) = v13;
        *((_QWORD *)v10 + 8) = a2;
      }
    }
  }
  return result;
}

void sub_22F25177C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Declaration;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;
  _QWORD v19[3];

  v5 = a2;
  v19[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1[233];
  if ((v7 & 0x4000000000000) != 0)
  {
    if ((v7 & 0x100000000000) == 0)
      v5 = sub_22E485904(a2);
    sub_22E485A60((uint64_t)a1, v5, a3, 0, a4);
  }
  else
  {
    v8 = a1[18];
    if ((*(_WORD *)(*(_QWORD *)(v8 + 184) + 64) & 0x200) != 0 && !sub_22E60FF1C(v8, a2))
    {
      sub_22E6371C0(a1[18], *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0, a1[18] + 3552, "", 0);
      v9 = llvm::MetadataAsValue::get();
      v10 = a1[12];
      v18 = 257;
      v11 = sub_22E3C1740(a1 + 34, 49, a3, v10, (uint64_t)v17);
      Declaration = llvm::Intrinsic::getDeclaration();
      if (Declaration)
        v13 = *(_QWORD *)(Declaration + 24);
      else
        v13 = 0;
      v19[0] = v11;
      v19[1] = v9;
      v18 = 257;
      v19[0] = sub_22E462B78(a1 + 34, v13, Declaration, (uint64_t)v19, 2, (uint64_t)v17, 0);
      v14 = llvm::Intrinsic::getDeclaration();
      if (v14)
        v15 = *(_QWORD *)(v14 + 24);
      else
        v15 = 0;
      v18 = 257;
      sub_22E462B78(a1 + 34, v15, v14, (uint64_t)v19, 1, (uint64_t)v17, 0);
    }
  }
}

void sub_22F251958(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  if ((*(_BYTE *)(a1 + 1869) & 0x10) == 0)
    a2 = sub_22E485904(a2);
  sub_22E485A60(a1, a2, a3, a4, a5);
}

void sub_22F2519AC(uint64_t *a1)
{
  uint64_t v2;
  std::string::size_type v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _OWORD v24[3];
  _OWORD v25[3];
  _QWORD v26[6];
  char v27;
  __int16 v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[154];
  _QWORD v33[26];
  _QWORD v34[4];
  _QWORD v35[6];

  v35[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1[239] + 352);
  v3 = **(_QWORD **)(v2 + 104) & 0xFFFFFFFFFFFFFFF8;
  v4 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0));
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 >= 3)
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = (_QWORD *)sub_22EFD4788(v5);
  if (sub_22EFBF68C((uint64_t)v6))
  {
    sub_22E6285D0(a1[18], a1[200], "lambda conversion to variadic function");
  }
  else
  {
    v30 = v32;
    v31 = 0x800000000;
    v32[152] = v33;
    v32[153] = 0x100000000;
    v33[24] = v34;
    v33[25] = 0x100000000;
    v34[2] = v35;
    v34[3] = 0x200000000;
    v35[4] = 0;
    v7 = *(_QWORD *)(a1[18] + 144);
    v8 = sub_22EF6477C(v7, v5);
    v9 = sub_22EF5B848(v7, v8, 0);
    sub_22E3CAAF4((uint64_t)a1, v3, (uint64_t)v24);
    v25[0] = v24[0];
    v25[1] = v24[1];
    v25[2] = v24[2];
    sub_22E5E0440((uint64_t)a1, (uint64_t)v25, v9, v26);
    v26[1] = 0;
    v27 = 0;
    v28 = 0;
    v29 = v9;
    v10 = sub_22E3C187C((uint64_t)&v30, (unint64_t)v26, 1);
    v11 = &v30[19 * v31];
    v12 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v11 = *(_OWORD *)v10;
    *((_OWORD *)v11 + 1) = v12;
    v13 = *(_QWORD *)(v10 + 144);
    v14 = *(_OWORD *)(v10 + 128);
    v15 = *(_OWORD *)(v10 + 96);
    *((_OWORD *)v11 + 7) = *(_OWORD *)(v10 + 112);
    *((_OWORD *)v11 + 8) = v14;
    v11[18] = v13;
    *((_OWORD *)v11 + 6) = v15;
    v16 = *(_OWORD *)(v10 + 80);
    v17 = *(_OWORD *)(v10 + 32);
    v18 = *(_OWORD *)(v10 + 48);
    *((_OWORD *)v11 + 4) = *(_OWORD *)(v10 + 64);
    *((_OWORD *)v11 + 5) = v16;
    *((_OWORD *)v11 + 2) = v17;
    *((_OWORD *)v11 + 3) = v18;
    LODWORD(v31) = v31 + 1;
    v19 = *(unsigned int *)(v2 + 80);
    if ((_DWORD)v19)
    {
      v20 = *(uint64_t **)(v2 + 72);
      v21 = 8 * v19;
      do
      {
        v22 = *v20++;
        v23 = sub_22EFBB464(v22);
        sub_22E477344(a1, &v30, v22, v23);
        v21 -= 8;
      }
      while (v21);
    }
    sub_22E4863A0((uint64_t)a1, v6, (uint64_t)&v30);
    sub_22E3CEBAC((uint64_t)&v30);
  }
}

uint64_t sub_22F251C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::LLVMContext *v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v29[6];
  char v30;
  __int16 v31;
  llvm::LLVMContext *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[154];
  _QWORD v36[26];
  _QWORD v37[4];
  _QWORD v38[6];

  v38[5] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(sub_22EFCAD5C(a2 + 72) + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  if (v5)
    v6 = (unint64_t)(v5 - 8);
  else
    v6 = 0;
  v33 = v35;
  v34 = 0x800000000;
  v35[152] = v36;
  v35[153] = 0x100000000;
  v36[24] = v37;
  v36[25] = 0x100000000;
  v37[2] = v38;
  v37[3] = 0x200000000;
  v38[4] = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v8 = sub_22EF6477C(v7, v6);
  v9 = (llvm::LLVMContext *)sub_22EF5B848(v7, v8, 0);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v9);
  v29[0] = llvm::UndefValue::get();
  v29[1] = 0;
  v30 = 0;
  v31 = 0;
  v32 = v9;
  v10 = sub_22E3C187C((uint64_t)&v33, (unint64_t)v29, 1);
  v11 = &v33[19 * v34];
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *((_OWORD *)v11 + 1) = v12;
  v13 = *(_QWORD *)(v10 + 144);
  v14 = *(_OWORD *)(v10 + 128);
  v15 = *(_OWORD *)(v10 + 96);
  *((_OWORD *)v11 + 7) = *(_OWORD *)(v10 + 112);
  *((_OWORD *)v11 + 8) = v14;
  v11[18] = v13;
  *((_OWORD *)v11 + 6) = v15;
  v16 = *(_OWORD *)(v10 + 80);
  v17 = *(_OWORD *)(v10 + 32);
  v18 = *(_OWORD *)(v10 + 48);
  *((_OWORD *)v11 + 4) = *(_OWORD *)(v10 + 64);
  *((_OWORD *)v11 + 5) = v16;
  *((_OWORD *)v11 + 2) = v17;
  *((_OWORD *)v11 + 3) = v18;
  LODWORD(v34) = v34 + 1;
  v19 = *(uint64_t **)(a2 + 120);
  v20 = sub_22EFBAACC(a2);
  if (v20)
  {
    v21 = 8 * v20;
    do
    {
      v22 = *v19++;
      v23 = sub_22EFBB464(v22);
      sub_22E477344(a1, (uint64_t)&v33, v22, v23);
      v21 -= 8;
    }
    while (v21);
  }
  v24 = (_QWORD *)sub_22EFD4788(v6);
  if ((sub_22EFD4600(v6) & 1) != 0)
  {
    v25 = sub_22EFBF664(a2);
    v26 = v24[18];
    if ((v26 & 6) != 0)
      v27 = 0;
    else
      v27 = v26 & 0xFFFFFFFFFFFFFFF8;
    v29[0] = 0;
    v24 = (_QWORD *)sub_22EFE9880(v27, *(_QWORD *)v25, *(unsigned int *)(v25 + 8), (uint64_t)v29);
  }
  sub_22E4863A0(a1, v24, (uint64_t)&v33);
  return sub_22E3CEBAC((uint64_t)&v33);
}

void sub_22F251E48(uint64_t a1, uint64_t a2)
{
  if (sub_22EFBF68C(a2))
    sub_22E6285D0(*(_QWORD *)(a1 + 144), a2, "lambda conversion to variadic function");
  else
    sub_22F251C1C(a1, a2);
}

_QWORD *sub_22F251E98(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F251EFC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F251FA0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_22F251EFC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F251FA0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E486BE8(a1, v7);
  v9 = 0;
  sub_22F251EFC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25204C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F251EFC((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

void sub_22F252104(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, const char **a7@<X6>, _OWORD *a8@<X8>)
{
  llvm::DataLayout *DataLayout;
  uint64_t v15;
  llvm::Type *v16;
  const char *v17;
  std::string::size_type v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *v25;
  __int128 v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56)
                                                                                + 40));
  v15 = *(_QWORD *)(a2 + 8) | 4;
  v16 = (llvm::Type *)llvm::PointerType::get();
  v25 = v27;
  v26 = xmmword_22F4559F0;
  v17 = sub_22E486DFC(a7, (uint64_t)&v25);
  v20 = sub_22E486EB0(a1, DataLayout, (uint64_t)a3, v15, a3, &a3[a4], v16, v19, v17, v18, a6, 0);
  sub_22F28AB18((_QWORD *)a2, v20, v21, a1, a5);
  v22 = *(_OWORD *)(a2 + 16);
  *a8 = *(_OWORD *)a2;
  a8[1] = v22;
  a8[2] = *(_OWORD *)(a2 + 32);
  if (v25 != v27)
    free(v25);
}

uint64_t sub_22F252258(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, 152 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 152 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 152 * v5), (const void *)(*(_QWORD *)a2 + 152 * v5), *(_QWORD *)a2 + 152 * v6 - (*(_QWORD *)a2 + 152 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22F25232C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 192 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 192 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 192 * v5), (const void *)(*(_QWORD *)a2 + 192 * v5), *(_QWORD *)a2 + 192 * v6 - (*(_QWORD *)a2 + 192 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22F252404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_22F2524CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1688);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 1592);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 4192);
  v8 = *(_QWORD *)(a2 + 4216);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 4208);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 4224);
  v9 = a2 + 1736;
  v10 = *(_OWORD *)(a2 + 1736);
  v11 = *(_OWORD *)(a2 + 1768);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 1752);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 1616);
  sub_22F2525B0((_QWORD *)(a1 + 136), a2 + 4288);
  *(_QWORD *)(a2 + 1688) = a3;
  *(_DWORD *)(a2 + 1696) = a4;
  *(_QWORD *)(a2 + 1600) = a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 1592) = a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(a2 + 1616) = 0;
  *(_DWORD *)(a2 + 4296) = 0;
  *(_QWORD *)(a2 + 1736) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a2 + 1744) = 0;
  *(_DWORD *)(a2 + 1760) = 0;
  *(_QWORD *)(a2 + 1776) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_OWORD *)(a2 + 4192) = 0u;
  *(_OWORD *)(a2 + 4208) = 0u;
  *(_QWORD *)(a2 + 4224) = 0;
  return a1;
}

_QWORD *sub_22F2525B0(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F25268C((uint64_t)a1, a2);
  a1[154] = a1 + 156;
  a1[155] = 0x100000000;
  if (*(_DWORD *)(a2 + 1240))
    sub_22F2527AC((uint64_t)(a1 + 154), a2 + 1232);
  a1[180] = a1 + 182;
  a1[181] = 0x100000000;
  if (*(_DWORD *)(a2 + 1448))
    sub_22F2528D0((uint64_t)(a1 + 180), a2 + 1440);
  a1[184] = a1 + 186;
  a1[185] = 0x200000000;
  if (*(_DWORD *)(a2 + 1480))
    sub_22F2528D0((uint64_t)(a1 + 184), a2 + 1472);
  a1[190] = *(_QWORD *)(a2 + 1520);
  return a1;
}

uint64_t sub_22F25268C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if (v9)
        memmove(*(void **)a1, v4, 152 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 152 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 152 * v10), (const void *)(*(_QWORD *)a2 + 152 * v10), *(_QWORD *)a2 + 152 * v11 - (*(_QWORD *)a2 + 152 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22F2527AC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 192 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 192 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 192 * v10), (const void *)(*(_QWORD *)a2 + 192 * v10), *(_QWORD *)a2 + 192 * v11 - (*(_QWORD *)a2 + 192 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22F2528D0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 16 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 16 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v10), (const void *)(*(_QWORD *)a2 + 16 * v10), *(_QWORD *)a2 + 16 * v11 - (*(_QWORD *)a2 + 16 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t *sub_22F2529E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  *(_DWORD *)(v2 + 1696) = *((_DWORD *)a1 + 4);
  *(_QWORD *)(v2 + 1688) = v3;
  v4 = *a1;
  *(_OWORD *)(*a1 + 1592) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(v4 + 4192) = *(_OWORD *)(a1 + 5);
  v5 = a1[8];
  *(_QWORD *)(v4 + 4208) = a1[7];
  *(_QWORD *)(v4 + 4216) = v5;
  *(_QWORD *)(v4 + 4224) = a1[9];
  v4 += 1736;
  v6 = *((_OWORD *)a1 + 5);
  v7 = *((_OWORD *)a1 + 7);
  *(_OWORD *)(v4 + 16) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)v4 = v6;
  v8 = *a1;
  *(_QWORD *)(v8 + 1616) = a1[16];
  v9 = (uint64_t)(a1 + 17);
  sub_22F252A7C(v8 + 4288, (uint64_t)(a1 + 17));
  sub_22E3CEBAC(v9);
  return a1;
}

uint64_t sub_22F252A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22F25268C(a1, a2);
  sub_22F2527AC(v4 + 1232, a2 + 1232);
  sub_22F2528D0(a1 + 1440, a2 + 1440);
  sub_22F2528D0(a1 + 1472, a2 + 1472);
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
  return a1;
}

_QWORD *sub_22F252AD0(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24BEB4((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F252B30(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F252B30(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 2;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E489580((uint64_t)a1, v7);
  v9 = 0;
  sub_22F24BEB4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22F252BEC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F24BEB4((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

BOOL sub_22F252CB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *a1;
  if (*a1 && *(unsigned __int8 *)(v1 + 16) >= 0x1Cu)
  {
    v2 = *(_QWORD *)(v1 + 40);
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 80);
    v4 = v3 ? v3 - 24 : 0;
    if (v2 != v4)
      return 1;
  }
  v6 = a1[5];
  if (v6 && *(unsigned __int8 *)(v6 + 16) >= 0x1Cu)
  {
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 80);
    v9 = v8 ? v8 - 24 : 0;
    if (v7 != v9)
      return 1;
  }
  v10 = a1[4];
  v11 = (a1[3] & 3) == 0 || v10 == 0;
  if (v11 || *(unsigned __int8 *)(v10 + 16) < 0x1Cu)
    return 0;
  v12 = *(_QWORD *)(v10 + 40);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = v13 ? v13 - 24 : 0;
  return v12 != v14;
}

uint64_t sub_22F252D74@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];
  _OWORD v17[3];
  _OWORD v18[3];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if ((a2[3] & 6) == 2)
  {
    v11 = *((_QWORD *)a2 + 1);
    v12 = sub_22E4648A4(a1, *(_QWORD *)a2);
    result = sub_22E4648A4(a1, v11);
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = result;
    v13 = *(_BYTE *)(a3 + 56) & 0xF8 | 4;
  }
  else
  {
    if ((a2[3] & 6) != 0)
    {
      v14 = a2[1];
      v20 = *a2;
      v21 = v14;
      v22 = a2[2];
      v17[0] = v20;
      v17[1] = v14;
      v17[2] = v22;
      sub_22E47F9F4(a1, (uint64_t)v17, (uint64_t)v18);
      v16[0] = v20;
      v16[1] = v21;
      v16[2] = v22;
      result = sub_22F252CB8((uint64_t *)v16);
      v15 = v18[1];
      *(_OWORD *)a3 = v18[0];
      *(_OWORD *)(a3 + 16) = v15;
      *(_OWORD *)(a3 + 32) = v18[2];
      *(_QWORD *)(a3 + 48) = v19;
      if ((_DWORD)result)
        v10 = 3;
      else
        v10 = 2;
    }
    else
    {
      v5 = *(_QWORD *)a2;
      result = sub_22E4648A4(a1, *(_QWORD *)a2);
      if (v5 && *(unsigned __int8 *)(v5 + 16) >= 0x1Cu)
      {
        v7 = *(_QWORD *)(v5 + 40);
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 80);
        if (v8)
          v9 = v8 - 24;
        else
          v9 = 0;
        v10 = v7 != v9;
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
    }
    v13 = *(_BYTE *)(a3 + 56) & 0xF8 | v10;
  }
  *(_BYTE *)(a3 + 56) = v13;
  return result;
}

uint64_t sub_22F252EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  char v11;
  __int128 v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  _OWORD v16[3];
  uint64_t v17;
  _OWORD v18[3];

  v6 = *(_BYTE *)(a1 + 56) & 7;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (v7)
  {
    if (v8 >= 2)
    {
      v15 = sub_22F24BFC0(a2, *(_QWORD *)a1);
      result = sub_22F24BFC0(a2, *(_QWORD *)(a1 + 8));
      LOBYTE(v14) = *(_BYTE *)(a3 + 48);
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = result;
      LOBYTE(v14) = v14 & 0xF8 | 2;
    }
    else
    {
      v9 = *(_OWORD *)(a1 + 16);
      v16[0] = *(_OWORD *)a1;
      v16[1] = v9;
      v16[2] = *(_OWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 48);
      result = sub_22F24FD44(a2, (uint64_t)v16, (uint64_t *)v18);
      v10 = *(unsigned __int8 *)(a1 + 56);
      v11 = *(_BYTE *)(a3 + 48);
      v12 = v18[1];
      *(_OWORD *)a3 = v18[0];
      *(_OWORD *)(a3 + 16) = v12;
      *(_OWORD *)(a3 + 32) = v18[2];
      v14 = v11 & 0xF8 | (v10 >> 3) & 1 | 4;
    }
  }
  else
  {
    result = sub_22F24BFC0(a2, *(_QWORD *)a1);
    LOBYTE(v14) = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = 0;
    LOBYTE(v14) = v14 & 0xF8;
  }
  *(_BYTE *)(a3 + 48) = v14;
  return result;
}

void sub_22F252FA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = llvm::FunctionType::get();
  v4[0] = sub_22E633A04(a1[18], v2, "llvm.seh.scope.begin", 0x14uLL, 0, 0, 0);
  v4[1] = v3;
  sub_22E48BFB0(a1, (uint64_t)v4);
}

char *sub_22F25300C(uint64_t *a1, unsigned int a2)
{
  char *result;

  result = sub_22E489830(a1, 8 * a2 + 32);
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = 0;
  result[24] = result[24] & 0xF8 | 3;
  *((_DWORD *)result + 6) = *((_DWORD *)result + 6) & 7 | (8 * a2);
  a1[4] = a1[1] - a1[2];
  return result;
}

uint64_t sub_22F253068(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = v1 + (((*(_DWORD *)(v1 + 24) & 0xFFFFFFF8) + 39) & 0x1FFFFFFF8);
  *(_QWORD *)(result + 32) = *(_QWORD *)(v1 + 16);
  return result;
}

char *sub_22F253090(uint64_t *a1, unsigned int a2)
{
  char *result;
  uint64_t v5;

  result = sub_22E489830(a1, 24 * a2 + 32);
  v5 = a1[4];
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = v5;
  result[24] = result[24] & 0xF8 | 1;
  *((_DWORD *)result + 6) = *((_DWORD *)result + 6) & 7 | (8 * a2);
  a1[4] = a1[1] - a1[2];
  return result;
}

char *sub_22F2530F4(uint64_t *a1)
{
  char *result;
  uint64_t v3;

  result = sub_22E489830(a1, 32);
  v3 = a1[4];
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = v3;
  result[24] = result[24] & 0xF8 | 2;
  a1[4] = a1[1] - a1[2];
  return result;
}

uint64_t sub_22F253140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = llvm::User::operator new((llvm::User *)0x40);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    sub_22F28ABCC(a3, a4);
  result = llvm::StoreInst::StoreInst();
  *(_WORD *)(v6 + 18) = *(_WORD *)(v6 + 18) & 0xFF81 | (2 * (63 - __clz(*(_QWORD *)(a3 + 16))));
  return result;
}

uint64_t sub_22F2531F0(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(result + 2000);
  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = 1 << (a3 & 7 | (8 * (a2 & 7)));
  if (a2 < 8)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  *(_QWORD *)(v3 + 56) = v5;
  *(_QWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 72) = v6;
  *(_DWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  v7 = *(_DWORD *)(v3 + 24);
  if ((v7 & 0x18) != 0)
    *(_DWORD *)(v3 + 24) = (16 * v7) & 0x180 | v7;
  return result;
}

uint64_t sub_22F253250(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = llvm::FunctionType::get();
  v5[0] = sub_22E633A04(*(_QWORD *)(a1 + 144), v2, "llvm.seh.scope.end", 18, 0, 0, 0);
  v5[1] = v3;
  return sub_22E48BFB0(a1, v5);
}

uint64_t sub_22F2532B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = llvm::FunctionType::get();
  v5[0] = sub_22E633A04(*(_QWORD *)(a1 + 144), v2, "llvm.seh.try.end", 16, 0, 0, 0);
  v5[1] = v3;
  return sub_22E48BFB0(a1, v5);
}

uint64_t sub_22F253320(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = llvm::User::operator new((llvm::User *)0x40);
  llvm::FuncletPadInst::FuncletPadInst();
  return sub_22F245A34(a1, v7, a5);
}

uint64_t sub_22F2533B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;

  if (a3)
    v6 = 2;
  else
    v6 = 1;
  v7 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489D350](v7, a2, a3, v6, 0);
  v10 = 257;
  return sub_22F245A34(a1, v7, (uint64_t)v9);
}

_QWORD *sub_22F25343C(_QWORD *a1, llvm::LLVMContext *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;

  v4 = a1[249];
  v5 = v4 - (_QWORD)a2;
  if ((llvm::LLVMContext *)(v4 - a1[250]) == a2 && a1[359] < (uint64_t)a2)
  {
    if ((*(_BYTE *)(v5 + 24) & 8) == 0 && (*(_QWORD *)(*(_QWORD *)(a1[18] + 152) + 8) & 0x800000000000) != 0)
    {
      return sub_22E48A190((uint64_t)a1, 0);
    }
    else
    {
      v6 = a1[40];
      v7 = a1[41];
      a1[40] = 0;
      a1[41] = 0;
      result = sub_22E48A190((uint64_t)a1, 0);
      if (v6)
      {
        return (_QWORD *)sub_22E3CB840((uint64_t)(a1 + 34), v6, v7);
      }
      else
      {
        a1[40] = 0;
        a1[41] = 0;
      }
    }
  }
  else
  {
    result = (_QWORD *)sub_22E48BCD0((uint64_t)a1, a2, 1, a3);
    *(_DWORD *)(v5 + 24) &= ~0x20u;
  }
  return result;
}

double sub_22F253510(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v6[3];

  v4 = a4[1];
  v6[0] = *a4;
  v6[1] = v4;
  v6[2] = a4[2];
  return sub_22F259E14(a1, 3, v6, a3, (uint64_t)sub_22F25105C, 1);
}

uint64_t sub_22F253558(uint64_t a1, llvm::Value *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Context;

  Context = llvm::Value::getContext(this);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = Context;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 128) = &off_24FA66C70;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_22E48C138(a1, (uint64_t)this);
  return a1;
}

double sub_22F253610@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  _OWORD v14[4];
  _BYTE v15[136];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = *(unsigned int **)(a1 + 1680);
  v9 = *v8;
  v10 = a3[1];
  v14[0] = *a3;
  v14[1] = v10;
  v11 = a3[3];
  v14[2] = a3[2];
  v14[3] = v11;
  sub_22E48C224(a1, (uint64_t)v8, a2, v9, v14, a4, 0, (uint64_t)v15);
  v12 = v17;
  *(_OWORD *)a5 = v16;
  *(_OWORD *)(a5 + 16) = v12;
  result = *(double *)&v18;
  *(_OWORD *)(a5 + 32) = v18;
  *(_QWORD *)(a5 + 48) = v19;
  return result;
}

__n128 sub_22F253690@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD v18[8];
  uint64_t v19;

  v5 = *(unsigned int **)(a1 + 1680);
  v6 = *v5;
  v12 = 0;
  v11 = 0uLL;
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = 0;
  sub_22E48C224(a1, (uint64_t)v5, a2, v6, &v11, 0, 1, (uint64_t)v18);
  v7 = v18[7];
  *(_OWORD *)(a3 + 96) = v18[6];
  *(_OWORD *)(a3 + 112) = v7;
  *(_QWORD *)(a3 + 128) = v19;
  v8 = v18[3];
  *(_OWORD *)(a3 + 32) = v18[2];
  *(_OWORD *)(a3 + 48) = v8;
  v9 = v18[5];
  *(_OWORD *)(a3 + 64) = v18[4];
  *(_OWORD *)(a3 + 80) = v9;
  result = (__n128)v18[1];
  *(_OWORD *)a3 = v18[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

__n128 sub_22F253714@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD v17[8];
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 1680);
  v11 = 0;
  v10 = 0uLL;
  v12 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 0;
  sub_22E48C224(a1, v5, a2, 2u, &v10, 0, 1, (uint64_t)v17);
  v6 = v17[7];
  *(_OWORD *)(a3 + 96) = v17[6];
  *(_OWORD *)(a3 + 112) = v6;
  *(_QWORD *)(a3 + 128) = v18;
  v7 = v17[3];
  *(_OWORD *)(a3 + 32) = v17[2];
  *(_OWORD *)(a3 + 48) = v7;
  v8 = v17[5];
  *(_OWORD *)(a3 + 64) = v17[4];
  *(_OWORD *)(a3 + 80) = v8;
  result = (__n128)v17[1];
  *(_OWORD *)a3 = v17[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t sub_22F253798(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3)
{
  uint64_t v5;

  llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 64), a2);
  v5 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  return sub_22E3C12C8((uint64_t *)a1, v5, a3);
}

void sub_22F253824(uint64_t a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  llvm::ConstantPointerNull *Int8PtrTy;
  llvm::PointerType *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Declaration;
  uint64_t v27;
  llvm::Value *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v36 = v38;
  a5.n128_u64[0] = 0x800000000;
  v37 = 0x800000000;
  if (a3 <= 33)
  {
    if (a3 != 21 && a3 != 29)
      goto LABEL_16;
    goto LABEL_10;
  }
  switch(a3)
  {
    case '0':
      goto LABEL_14;
    case '#':
LABEL_10:
      v15 = *(_QWORD *)(a1 + 1680);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 88);
        if (v16)
        {
          v38[0] = v16;
          v17 = 1;
LABEL_15:
          LODWORD(v37) = v17;
          break;
        }
      }
      v18 = *(_QWORD *)(a1 + 144);
      sub_22EFFAE7C(a2);
      sub_22E628310(v18, v19, "this builtin expect that __builtin_coro_id has been used earlier in this function", 0x51uLL);
LABEL_14:
      *((_QWORD *)v36 + v37) = llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(*(_QWORD *)(a1 + 144) + 232), (llvm::LLVMContext *)a2);
      v17 = v37 + 1;
      goto LABEL_15;
    case '"':
      v9 = *(_QWORD *)(a1 + 1680);
      if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      {
        v11 = *(_QWORD *)(a1 + 144);
        sub_22EFFAE7C(a2);
        sub_22E628310(v11, v12, "this builtin expect that __builtin_coro_begin has been used earlier in this function", 0x54uLL);
        Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1 + 336), 0);
        v10 = llvm::ConstantPointerNull::get(Int8PtrTy, v14);
      }
      goto LABEL_27;
  }
LABEL_16:
  v20 = a2[4];
  if ((_DWORD)v20)
  {
    v21 = (uint64_t *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
    v22 = 8 * v20;
    do
    {
      v23 = *v21;
      v32[0] = a1;
      v32[1] = a1 + 272;
      v33 = 0;
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
      v24 = sub_22E50E974(v32, v23, a5);
      v25 = v37;
      if (v37 >= (unint64_t)HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v37;
      }
      *((_QWORD *)v36 + v25) = v24;
      LODWORD(v37) = v37 + 1;
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v27 = *(_QWORD *)(Declaration + 24);
  else
    v27 = 0;
  v35 = 257;
  v28 = sub_22E462B78((uint64_t *)(a1 + 272), v27, Declaration, (uint64_t)v36, v37, (uint64_t)v32, 0);
  v10 = (uint64_t)v28;
  switch(a3)
  {
    case 29:
      v30 = *(_QWORD *)(a1 + 1680);
      if (v30)
        *(_QWORD *)(v30 + 96) = v28;
      break;
    case 35:
      v31 = *(_QWORD *)(a1 + 1680);
      if (v31)
        *(_QWORD *)(v31 + 104) = v28;
      break;
    case 36:
      sub_22E48D868(*(_QWORD *)(a1 + 144), (uint64_t *)(a1 + 1680), (uint64_t)v28, a2);
      break;
  }
LABEL_27:
  v29 = *(_BYTE *)(a4 + 48);
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 48) = v29 & 0xF8;
  if (v36 != v38)
    free(v36);
}

uint64_t sub_22F253B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[56];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[24];

  if (sub_22F253D04(a2))
  {
    sub_22E4D8D7C(&v16);
    v28 = v21;
    v29 = v22;
    v30 = v23;
    *(_OWORD *)&v25[24] = v17;
    *(_OWORD *)&v25[40] = v18;
    v26 = v19;
    v27 = v20;
    *(_QWORD *)v25 = a2;
    v31 = v24;
    *(_OWORD *)&v25[8] = v16;
    sub_22F253D5C(a1 + 4064, v25, (uint64_t)&v25[8], (uint64_t)v32);
    result = 0;
    v9 = 1;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v11 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v15 = 0;
    sub_22E4D79C0(&v16, a1, a3, v10, 0);
    *(_OWORD *)&v25[8] = v16;
    *(_OWORD *)&v25[24] = v17;
    *(_OWORD *)&v25[40] = v18;
    *(_QWORD *)v25 = a2;
    *(_QWORD *)&v26 = v19;
    sub_22F25406C(a1 + 4088, v25, (__int128 *)&v25[8], (uint64_t)v32);
    *(_OWORD *)v25 = v16;
    *(_OWORD *)&v25[16] = v17;
    *(_OWORD *)&v25[32] = v18;
    *(_QWORD *)&v25[48] = v19;
    result = sub_22F297CB8(a1, v25);
    v9 = 0;
  }
  *(_QWORD *)a4 = a2;
  *(_BYTE *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = result;
  return result;
}

uint64_t sub_22F253C78(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  llvm::Type::getInt1Ty(*(llvm::Type **)(a1 + 64), a2);
  llvm::ConstantInt::get();
  v3 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  v6 = 257;
  return sub_22E3C12C8((uint64_t *)a1, v3, (uint64_t)v5);
}

BOOL sub_22F253D04(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 1) & 3) != 0)
    return 1;
  v2 = *(_QWORD *)(a1 + 8);
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 < 2
      || sub_22E619D68(v2) == 2;
}

uint64_t sub_22F253D5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;

  v18 = 0;
  result = sub_22F253E24((uint64_t *)a1, a2, &v18);
  v9 = v18;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F253EC8(a1, (uint64_t)a2, a2, v18);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v12 = *(_OWORD *)(a3 + 80);
    v13 = *(_OWORD *)(a3 + 96);
    v14 = *(_OWORD *)(a3 + 112);
    *(_QWORD *)(result + 136) = *(_QWORD *)(a3 + 128);
    *(_OWORD *)(result + 120) = v14;
    *(_OWORD *)(result + 104) = v13;
    *(_OWORD *)(result + 88) = v12;
    v15 = *(_OWORD *)(a3 + 16);
    v16 = *(_OWORD *)(a3 + 32);
    v17 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(result + 72) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(result + 56) = v17;
    *(_OWORD *)(result + 40) = v16;
    *(_OWORD *)(result + 24) = v15;
    *(_OWORD *)(result + 8) = *(_OWORD *)a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 144 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F253E24(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 144 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 144 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F253EC8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E48D9C0(a1, v7);
  v9 = 0;
  sub_22F253E24((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F253F74(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 144 * v6;
    do
    {
      *v7 = -4096;
      v7 += 18;
      v8 -= 144;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v16 = 0;
      result = sub_22F253E24((uint64_t *)v5, (_QWORD *)a2, &v16);
      v9 = v16;
      *v16 = *(_QWORD *)a2;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v10 = *(_OWORD *)(a2 + 24);
      v11 = *(_OWORD *)(a2 + 40);
      v12 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v9 + 9) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(v9 + 7) = v12;
      *(_OWORD *)(v9 + 5) = v11;
      *(_OWORD *)(v9 + 3) = v10;
      v13 = *(_OWORD *)(a2 + 88);
      v14 = *(_OWORD *)(a2 + 104);
      v15 = *(_OWORD *)(a2 + 120);
      v9[17] = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(v9 + 15) = v15;
      *(_OWORD *)(v9 + 13) = v14;
      *(_OWORD *)(v9 + 11) = v13;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 144;
  }
  return result;
}

uint64_t sub_22F25406C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  v15 = 0;
  result = sub_22F254110((uint64_t *)a1, a2, &v15);
  v9 = v15;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2541AC(a1, (uint64_t)a2, a2, v15);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v12 = *a3;
    v13 = a3[1];
    v14 = a3[2];
    *(_QWORD *)(result + 56) = *((_QWORD *)a3 + 6);
    *(_OWORD *)(result + 40) = v14;
    *(_OWORD *)(result + 24) = v13;
    *(_OWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 16) << 6);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F254110(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + (v6 << 6));
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + (v6 << 6));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F2541AC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E48DA8C(a1, v7);
  v9 = 0;
  sub_22F254110((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F254258(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = v6 << 6;
    do
    {
      *v7 = -4096;
      v7 += 8;
      v8 -= 64;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_22F254110((uint64_t *)v5, (_QWORD *)a2, &v13);
      v9 = v13;
      *v13 = *(_QWORD *)a2;
      v10 = *(_OWORD *)(a2 + 8);
      v11 = *(_OWORD *)(a2 + 24);
      v12 = *(_OWORD *)(a2 + 40);
      v9[7] = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(v9 + 5) = v12;
      *(_OWORD *)(v9 + 3) = v11;
      *(_OWORD *)(v9 + 1) = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 64;
  }
  return result;
}

int32x2_t sub_22F254324(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v5;

  if (*(_BYTE *)(a1 + 8))
  {
    v5 = 0;
    if (sub_22F253E24((uint64_t *)(a2 + 4064), (_QWORD *)a1, &v5))
    {
      *v5 = -8192;
      result = vadd_s32(*(int32x2_t *)(a2 + 4072), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a2 + 4072) = result;
    }
  }
  else
  {
    v5 = 0;
    if (sub_22F254110((uint64_t *)(a2 + 4088), (_QWORD *)a1, &v5))
    {
      *v5 = -8192;
      *(int32x2_t *)(a2 + 4096) = vadd_s32(*(int32x2_t *)(a2 + 4096), (int32x2_t)0x1FFFFFFFFLL);
    }
    sub_22F297D28(a2, *(llvm::Instruction **)(a1 + 16));
  }
  return result;
}

uint64_t sub_22F2543D4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F24C318(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F24C3AC(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F25446C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  llvm::deallocate_buffer(*(llvm **)(a1 + 2712), (void *)(16 * *(unsigned int *)(a1 + 2728)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2688), (void *)(16 * *(unsigned int *)(a1 + 2704)));
  sub_22F257FC4(a1 + 2664);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2664), (void *)(16 * *(unsigned int *)(a1 + 2680)));
  sub_22F257FC4(a1 + 2640);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2640), (void *)(16 * *(unsigned int *)(a1 + 2656)));
  sub_22F257FC4(a1 + 2616);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2616), (void *)(16 * *(unsigned int *)(a1 + 2632)));
  sub_22F257FC4(a1 + 2592);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2592), (void *)(16 * *(unsigned int *)(a1 + 2608)));
  sub_22F257FC4(a1 + 2568);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2568), (void *)(16 * *(unsigned int *)(a1 + 2584)));
  sub_22F257FC4(a1 + 2544);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2544), (void *)(16 * *(unsigned int *)(a1 + 2560)));
  sub_22F257FC4(a1 + 2520);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2520), (void *)(16 * *(unsigned int *)(a1 + 2536)));
  sub_22E3B4EF4(a1 + 2408);
  v2 = *(void **)(a1 + 2384);
  if (v2)
  {
    *(_QWORD *)(a1 + 2392) = v2;
    operator delete(v2);
  }
  sub_22F257FC4(a1 + 2360);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2360), (void *)(16 * *(unsigned int *)(a1 + 2376)));
  v6 = (void **)(a1 + 2336);
  sub_22E49FBA4(&v6);
  v6 = (void **)(a1 + 2312);
  sub_22E49FB24(&v6);
  v6 = (void **)(a1 + 2288);
  sub_22E49FB24(&v6);
  v3 = *(void **)(a1 + 2264);
  if (v3)
  {
    *(_QWORD *)(a1 + 2272) = v3;
    operator delete(v3);
  }
  sub_22F257FC4(a1 + 2240);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2240), (void *)(16 * *(unsigned int *)(a1 + 2256)));
  sub_22F25805C((unsigned int *)(a1 + 2216));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2216), (void *)(32 * *(unsigned int *)(a1 + 2232)));
  v4 = *(void **)(a1 + 1432);
  if (v4 != (void *)(a1 + 1448))
    free(v4);
  sub_22E49FAE8(a1 + 1344);
  sub_22F258024(*(_QWORD **)(a1 + 1328));
  sub_22F257FC4(a1 + 1296);
  llvm::deallocate_buffer(*(llvm **)(a1 + 1296), (void *)(16 * *(unsigned int *)(a1 + 1312)));
  sub_22E49F0A8(a1 + 16);
  return a1;
}

uint64_t sub_22F254674(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  _BYTE v8[12];

  result = sub_22E48F304(a1, a3);
  v6 = *(_DWORD *)(a1 + 560);
  if (v6 >= 1 && *(_QWORD *)(a1 + 2336) != *(_QWORD *)(a1 + 2344))
  {
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v6, *(unsigned __int8 *)(a1 + 13), (uint64_t)v8);
    sub_22E491214((unsigned __int8 *)a1, *(_DWORD *)(a1 + 560), 0);
    llvm::DILocation::getImpl();
    llvm::DebugLoc::DebugLoc();
    result = sub_22E3CF21C(a2, 0, v7);
    if (v7)
      return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t sub_22F254754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 2892))
      v4 = 0;
    else
      v4 = *(_QWORD *)(v2 + 2880);
    sub_22F2547B4(v4, v2 + 272);
    sub_22F254674(v4, *(_QWORD *)(a1 + 8) + 272, *(_DWORD *)a1);
  }
  return a1;
}

uint64_t sub_22F2547B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  sub_22F256A70((_QWORD *)a1, a2, 0);
  llvm::DebugLoc::DebugLoc((llvm::DebugLoc *)&v4, *(const llvm::MDNode **)(a1 + 568));
  result = llvm::DebugLoc::getInlinedAt((llvm::DebugLoc *)&v4);
  *(_QWORD *)(a1 + 568) = result;
  if (v4)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_22F254808(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;

  v3 = (uint64_t *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_22E49FE98(a1, a2);
  }
  else
  {
    *v3 = a2;
    if (a2)
      llvm::MetadataTracking::track();
    result = (uint64_t)(v3 + 1);
  }
  a1[1] = result;
  return result;
}

uint64_t sub_22F254858(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  llvm *v16;
  llvm *TimeTraceProfilerInstance;
  _QWORD *v18;
  uint64_t v19[2];
  uint64_t v20;
  unint64_t v21;

  v20 = a2;
  if (a2 < 0x10)
    return 0;
  v19[0] = (uint64_t)&v20;
  v19[1] = (uint64_t)a1;
  if (llvm::getTimeTraceProfilerInstance((llvm *)a1))
    llvm::timeTraceProfilerBegin();
  v7 = v20;
  v8 = *(_QWORD *)(*a1 + 144);
  v19[0] = 0;
  while (2)
  {
    v9 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if ((v7 & 8) != 0)
    {
      v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v21 = v10 | v11 | v7 & 7;
    v12 = sub_22F257E74((unsigned int *)v19, (unsigned int *)&v21);
    sub_22E49FA0C(v19, v12);
    sub_22E49FA0C(v19, v21);
    v13 = *v9;
    v14 = *(_DWORD *)(*v9 + 16);
    switch((char)v14)
    {
      case '%':
      case '3':
      case '6':
LABEL_14:
        v7 = *(_QWORD *)(v13 + 32);
        continue;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
      case '-':
      case '/':
      case '2':
      case '4':
        goto LABEL_18;
      case '+':
        goto LABEL_12;
      case '.':
        if ((v14 & 0x80000) == 0)
        {
LABEL_12:
          v7 = *(_QWORD *)(v13 + 8);
          continue;
        }
LABEL_18:
        if ((v19[0] & 0xCFFFFFFF8) != 0)
          v15 = sub_22EF5DBC4(v8, v13, v19[0]);
        else
          v15 = v13 & 0xFFFFFFFFFFFFFFF0 | v19[0] & 7;
        v20 = v15;
        v16 = (llvm *)sub_22E491A8C((uint64_t)a1, v15);
        v3 = (uint64_t)v16;
        if (!v16)
        {
          v3 = sub_22E4969AC((uint64_t)a1, v20, a3);
          v19[0] = v20;
          v18 = sub_22F258670(a1 + 162, v19);
          v16 = (llvm *)sub_22E4911C0(v18 + 1, v3);
        }
        TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v16);
        if (TimeTraceProfilerInstance)
          llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
        return v3;
      case '0':
        v7 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
        continue;
      case '1':
LABEL_15:
        v7 = *(_QWORD *)(v13 + 24);
        continue;
      case '5':
        v7 = sub_22F40A754(*v9);
        continue;
      default:
        switch(*(_DWORD *)(*v9 + 16))
        {
          case 7u:
          case 0x18u:
            goto LABEL_17;
          case 8u:
          case 0xDu:
          case 0x16u:
          case 0x17u:
            goto LABEL_14;
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
            goto LABEL_18;
          case 0xEu:
          case 0xFu:
          case 0x1Cu:
            goto LABEL_15;
          default:
            if (*(_DWORD *)(*v9 + 16) >= 2u)
              goto LABEL_18;
LABEL_17:
            v7 = *(_QWORD *)(v13 + 40);
            break;
        }
        continue;
    }
  }
}

uint64_t sub_22F254A5C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  a3[1] = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 76);
  if ((v4 & 0x2000000000) != 0 || (v5 = 0, (v4 & 0x1C00000000uLL) >> 34 >= 5))
  {
    sub_22E490D40(*(_QWORD **)(*(_QWORD *)(a1 + 144) + 1992), a2, 0, &v8);
    if (v9)
    {
      v10[0] = llvm::MD5::hash();
      v10[1] = v7;
      sub_22E490DA4((unsigned __int8 *)v10, 16, a3);
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
  }
  return v5 | (v5 << 32);
}

const char *sub_22F254B20(const char *result, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;

  v4 = (char *)result;
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 184) + 92) & 0x400) != 0
    && (*(_DWORD *)(*(_QWORD *)(a2 + 216) + 56) & 0xFFFFFFFE) != 0x30)
  {
    v7 = 0;
    result = sub_22F1E1E1C(a3, a4, &v7);
    if (v7)
    {
      v6 = 0;
      *v4 = 0;
    }
    else
    {
      *(_QWORD *)v4 = result;
      *((_QWORD *)v4 + 1) = v5;
      v6 = 1;
    }
    v4[16] = v6;
  }
  else
  {
    *result = 0;
    *((_BYTE *)result + 16) = 0;
  }
  return result;
}

uint64_t sub_22F254BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v5 = sub_22E491354((unsigned int *)&v9, a2);
  v6 = v9;
  LODWORD(v9) = v9 & 7;
  if ((v6 & 1) != 0)
  {
    LODWORD(v9) = v6 & 6;
LABEL_7:
    v8 = sub_22F40A8E8((unsigned int *)&v9, *(_QWORD *)(*(_QWORD *)a1 + 144), v5);
    sub_22F254858(a1, v8, a3);
    return llvm::DIBuilder::createQualifiedType();
  }
  if ((v6 & 4) != 0)
  {
    LODWORD(v9) = v6 & 3;
    goto LABEL_7;
  }
  if ((v6 & 2) != 0)
  {
    LODWORD(v9) = v6 & 5;
    goto LABEL_7;
  }
  if ((v9 & 0xC00000000) == 0)
    return sub_22F254858(a1, v5 & 0xFFFFFFFFFFFFFFF0, a3);
  HIDWORD(v9) = 0;
  sub_22F254858(a1, v5 & 0xFFFFFFFFFFFFFFF0, a3);
  return llvm::DIBuilder::createPtrAuthQualifiedType();
}

uint64_t sub_22F254CE0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11[5];

  sub_22E4913B4((uint64_t)a2, (uint64_t)v11);
  if ((BYTE4(v11[0]) & 1) != 0)
  {
    v7 = 6;
LABEL_9:
    v8 = v7 & DWORD1(v11[0]);
    v9 = *a1;
    DWORD1(v11[0]) = v8;
    v10 = sub_22EF63D8C(*(_QWORD *)(v9 + 144), a2[3], a2 + 5, (unsigned __int16)(a2[2] >> 38), v11, 0);
    sub_22F254858(a1, v10, a3);
    return llvm::DIBuilder::createQualifiedType();
  }
  if ((BYTE4(v11[0]) & 4) != 0)
  {
    v7 = 3;
    goto LABEL_9;
  }
  if ((BYTE4(v11[0]) & 2) != 0)
  {
    v7 = 5;
    goto LABEL_9;
  }
  return 0;
}

uint64_t sub_22F254DAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (!sub_22E491464(a2))
    return sub_22E4914E8(a1, 15, a2, *(_QWORD *)(a2 + 32), a3);
  v7 = *(_QWORD *)(*a1 + 144);
  v8 = sub_22F36E1B8(v7);
  v9 = *(_QWORD *)(v8 + 48);
  if (v9)
    v10 = v9 & 0xFFFFFFFFFFFFFFF0;
  else
    v10 = sub_22EF6462C(v7, v8);
  return sub_22F254858(a1, v10, a3);
}

uint64_t sub_22F254E40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t result;

  v4 = (uint64_t *)a1[1];
  if ((unint64_t)v4 >= a1[2])
  {
    result = sub_22E4A003C(a1, a2, a3);
  }
  else
  {
    *v4 = a2;
    v4[1] = a3;
    if (a3)
      llvm::MetadataTracking::track();
    result = (uint64_t)(v4 + 2);
  }
  a1[1] = result;
  return result;
}

uint64_t sub_22F254E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t MemberType;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;

  v32 = 0;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  if ((*(_DWORD *)(*(_QWORD *)(v8 + 152) + 52) & 0x40000000) != 0)
  {
    v27 = *(_QWORD *)(v9 + 16480);
    v28 = sub_22E491C48(a1, a3, v27, (uint64_t)"__size", 6, &v32);
    v29 = *(_DWORD *)(a5 + 8);
    if (v29 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v29 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v29) = v28;
    ++*(_DWORD *)(a5 + 8);
    v30 = sub_22E491C48(a1, a3, v27, (uint64_t)"__align", 7, &v32);
    v31 = *(_DWORD *)(a5 + 8);
    if (v31 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v31 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v31) = v30;
    ++*(_DWORD *)(a5 + 8);
    return v32;
  }
  else
  {
    v11 = sub_22EF5B848(v9, *(_QWORD *)(v9 + 16392), 0);
    v12 = sub_22E491C48(a1, a3, v11, (uint64_t)"__isa", 5, &v32);
    v13 = *(_DWORD *)(a5 + 8);
    if (v13 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v13) = v12;
    ++*(_DWORD *)(a5 + 8);
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16480);
    v15 = sub_22E491C48(a1, a3, v14, (uint64_t)"__flags", 7, &v32);
    v16 = *(_DWORD *)(a5 + 8);
    if (v16 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v16) = v15;
    ++*(_DWORD *)(a5 + 8);
    v17 = sub_22E491C48(a1, a3, v14, (uint64_t)"__reserved", 10, &v32);
    v18 = *(_DWORD *)(a5 + 8);
    if (v18 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v18) = v17;
    ++*(_DWORD *)(a5 + 8);
    v19 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(a2 + 32), 0);
    v20 = sub_22E491C48(a1, a3, v19, (uint64_t)"__FuncPtr", 9, &v32);
    v21 = *(_DWORD *)(a5 + 8);
    if (v21 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v21) = v20;
    ++*(_DWORD *)(a5 + 8);
    sub_22EF5B848(*(_QWORD *)(*(_QWORD *)a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16392), 0);
    v22 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
    sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
    v23 = v32;
    MemberType = llvm::DIBuilder::createMemberType();
    v25 = *(_DWORD *)(a5 + 8);
    if (v25 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = MemberType;
    ++*(_DWORD *)(a5 + 8);
    return v23 + v22;
  }
}

uint64_t sub_22F255224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t PointerType;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15 = v17;
  v16 = 0x800000000;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 16536);
  v7 = sub_22E491C48(a1, a3, v6, (uint64_t)"reserved", 8, &v14);
  v8 = v16;
  if (v16 >= HIDWORD(v16))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v16;
  }
  *((_QWORD *)v15 + v8) = v7;
  LODWORD(v16) = v16 + 1;
  v9 = sub_22E491C48(a1, a3, v6, (uint64_t)"Size", 4, &v14);
  v10 = v16;
  if (v16 >= HIDWORD(v16))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v16;
  }
  *((_QWORD *)v15 + v10) = v9;
  LODWORD(v16) = v16 + 1;
  llvm::DIBuilder::getOrCreateArray();
  LODWORD(v16) = 0;
  llvm::DIBuilder::createStructType();
  sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
  PointerType = llvm::DIBuilder::createPointerType();
  sub_22F254E98(a1, a2, a3, PointerType, (uint64_t)&v15);
  llvm::DIBuilder::getOrCreateArray();
  llvm::DIBuilder::createStructType();
  v12 = llvm::DIBuilder::createPointerType();
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22F2554B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t Typedef;
  unint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE v12[64];
  unint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  _QWORD v17[18];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v5 = a2 + 40;
  Typedef = sub_22F254858(a1, *(_QWORD *)(a2 + 40 + 24 * *(unsigned int *)(a2 + 20)), a3);
  v15 = *(void **)(a2 + 32);
  v7 = *(_QWORD *)(sub_22F0F08CC((uint64_t *)&v15) + 48);
  if (!sub_22F2556D0(v7))
  {
    v15 = v17;
    v16 = xmmword_22F44E310;
    sub_22F242C48((uint64_t)v12, (uint64_t)&v15);
    v11 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) >> 1) & 0x1000000000;
    v14 = a1 + 1416;
    sub_22F402048(&v11, (llvm::raw_ostream *)v12, (uint64_t)&v13, 0);
    v9 = *(unsigned int *)(a2 + 20);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 15104) & 0xFFFF65FFDFFFBFFFLL | 0x120020000000 | (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 76) >> 1) & 0x1000000000;
    v14 = a1 + 1416;
    sub_22F117B8C((llvm::raw_ostream *)v12, v5, v9, (uint64_t)&v13, 0, 0, 0);
    v10 = *(_DWORD *)(v7 + 24);
    sub_22E48F44C((uint64_t *)a1, v10);
    if (v10)
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v10, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v13);
    sub_22E48FAEC(a1, v7);
    Typedef = llvm::DIBuilder::createTypedef();
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v12);
    if (v15 != v17)
      free(v15);
  }
  return Typedef;
}

BOOL sub_22F2556D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 225)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F255730(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    result = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)result + 144), a2);
    v7 = result;
  }
  if (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 27)
  {
    v8 = sub_22E48F44C(v5, *(_DWORD *)(a2 + 24));
    result = sub_22F254858(v5, v7, v8);
    v9 = result;
    v10 = *(_DWORD *)(a3 + 8);
    if (v10 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    ++*(_DWORD *)(a3 + 8);
  }
  return result;
}

uint64_t sub_22F2557F4(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  BOOL v9;
  unint64_t v10;

  v8 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (!v9)
    v8 = sub_22F10CF48(*(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0));
  if (sub_22EFD642C(a2))
    return sub_22F254858(a1, v8 & 0xFFFFFFFFFFFFFFF0, a3);
  v10 = sub_22EFD7558((uint64_t)a2);
  return sub_22E4929D8(a1, v10, (_QWORD *)v8, a3, a4);
}

int *sub_22F25589C(int *result, unint64_t a2)
{
  int *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (result[2] >= 4)
  {
    v3 = result;
    sub_22E4947E0((uint64_t)result, a2);
    v4 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)v3 + 144), a2);
    v6 = v4;
    v5 = (unint64_t *)*((_QWORD *)v3 + 284);
    if ((unint64_t)v5 >= *((_QWORD *)v3 + 285))
    {
      result = (int *)sub_22E4A02B0((void **)v3 + 283, &v6);
    }
    else
    {
      *v5 = v4;
      result = (int *)(v5 + 1);
    }
    *((_QWORD *)v3 + 284) = result;
  }
  return result;
}

uint64_t sub_22F255914(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  llvm *v15[2];
  unsigned int v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v13 = sub_22E46A3A0(a2);
  v14 = v10;
  sub_22E4935C4(a1, a2, a3, a4, a5, (uint64_t *)&v13, (uint64_t)v15, 0);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 184) + 80) & 0x20) != 0)
  {
    v13 = sub_22E483108(a2);
    v14 = v11;
    sub_22E4935C4(a1, a2, a3, a4, a5, (uint64_t *)&v13, (uint64_t)v15, 36);
  }
  return llvm::deallocate_buffer(v15[0], (void *)(8 * v16));
}

BOOL sub_22F2559E0(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 26;
  else
    v2 = 0;
  if (!v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v1 = sub_22F10CF48(v1);
    else
      v1 = 0;
  }
  return v1 == 0;
}

uint64_t sub_22F255A38(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = sub_22EFC1868(a2);
  if ((_DWORD)result == 3)
  {
    v5 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a2 + 144) & 6) != 4)
      v5 = 0;
    v6 = *(_QWORD *)((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 56);
    result = sub_22EFBF664(a2);
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 24) = v9;
  return result;
}

uint64_t sub_22F255ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v4;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v1 = *v4;
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    sub_22EFC8E88(a1);
  return v1;
}

uint64_t sub_22F255B14(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = a1[72];
  if (!result)
  {
    v4 = *(_QWORD *)(*a1 + 144);
    sub_22F254858(a1, *(_QWORD *)(v4 + 16480), a2);
    llvm::DIBuilder::getOrCreateTypeArray();
    llvm::DIBuilder::createSubroutineType();
    sub_22EF5CDF0(v4, *(_QWORD *)(*(_QWORD *)(v4 + 16816) & 0xFFFFFFFFFFFFFFF0));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 216) + 816))(*(_QWORD *)(*a1 + 216));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*a1 + 216) + 824))(*(_QWORD *)(*a1 + 216), v5);
    llvm::DIBuilder::createPointerType();
    result = llvm::DIBuilder::createPointerType();
    a1[72] = result;
  }
  return result;
}

uint64_t sub_22F255C30(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t PointerType;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  result = sub_22E463414(a2);
  if ((_DWORD)result)
  {
    result = sub_22F0C975C(*(_QWORD *)(*a1 + 144), a2);
    v9 = *(_QWORD *)(result + 72);
    if ((*(_BYTE *)(v9 + 40) & 2) != 0)
    {
      v10 = *a1;
      if ((*(_BYTE *)(*(_QWORD *)(*a1 + 184) + 80) & 0x20) != 0
        && *(_DWORD *)(*(_QWORD *)(v10 + 216) + 148) == 11)
      {
        v11 = result;
        sub_22EF5CDF0(*(_QWORD *)(v10 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 144) + 16816) & 0xFFFFFFFFFFFFFFF0));
        sub_22F40C388(*(_QWORD *)(*a1 + 712), a2, 0);
        v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 216) + 816))(*(_QWORD *)(*a1 + 216));
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*a1 + 216) + 824))(*(_QWORD *)(*a1 + 216), v12);
        PointerType = llvm::DIBuilder::createPointerType();
        v14 = *(_DWORD *)(a4 + 8);
        if (v14 >= *(_DWORD *)(a4 + 12))
        {
          v18 = PointerType;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          PointerType = v18;
          v14 = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v14) = PointerType;
        ++*(_DWORD *)(a4 + 8);
        result = llvm::DIBuilder::createPointerType();
        v15 = result;
        v9 = *(_QWORD *)(v11 + 72);
      }
      else
      {
        v15 = 0;
      }
      if (*(_QWORD *)(v9 + 48) <= 7uLL)
      {
        if (!v15)
          sub_22F255B14(a1, a3);
        sub_22EF5CDF0(*(_QWORD *)(*a1 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 144) + 16816) & 0xFFFFFFFFFFFFFFF0));
        sub_22E494390((uint64_t)a1, a2);
        result = llvm::DIBuilder::createMemberType();
        v16 = result;
        v17 = *(_DWORD *)(a4 + 8);
        if (v17 >= *(_DWORD *)(a4 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v17) = v16;
        ++*(_DWORD *)(a4 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_22F255EA8(uint64_t *a1, unint64_t a2, int a3)
{
  uint64_t v5;

  v5 = sub_22E48F44C(a1, a3);
  return sub_22F254858(a1, a2, v5);
}

uint64_t sub_22F255EDC(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v10;

  v5 = sub_22E48F44C((uint64_t *)a1, a3);
  v6 = sub_22F254858((uint64_t *)a1, a2, v5);
  v10 = a2;
  v7 = *(unint64_t **)(a1 + 2272);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 2280))
  {
    v8 = sub_22E4A02B0((void **)(a1 + 2264), &v10);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 2272) = v8;
  return v6;
}

int *sub_22F255F58(int *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (result[2] >= 4)
  {
    v2 = (uint64_t)result;
    v3 = sub_22EF64864(*(_QWORD *)(*(_QWORD *)result + 144), a2);
    v7 = v3;
    v8 = v3;
    v4 = (uint64_t *)(v2 + 1296);
    v9 = 0;
    result = (int *)sub_22F246C54((uint64_t *)(v2 + 1296), &v8, &v9);
    if ((_DWORD)result)
    {
      if (v9 != *(_QWORD *)(v2 + 1296) + 16 * *(unsigned int *)(v2 + 1312)
        && (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 28) & 4) != 0)
      {
        v5 = sub_22E494514(v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
        v6 = sub_22F258670(v4, &v7);
        return (int *)sub_22E4911C0(v6 + 1, v5);
      }
    }
  }
  return result;
}

uint64_t sub_22F256020(uint64_t a1, unint64_t a2)
{
  if (*(int *)(a1 + 8) > 5 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 1) & 1) == 0)
    return sub_22F256044(a1, a2);
  return a1;
}

uint64_t sub_22F256044(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22E494ED0(*(_DWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 12), a2, *(_QWORD *)(*(_QWORD *)a1 + 152));
  if ((result & 1) == 0)
  {
    v5 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)a1 + 144), a2);
    result = sub_22E491A8C(a1, v5);
    if (result)
    {
      if ((*(_BYTE *)(result + 28) & 4) != 0)
        return sub_22E4947E0(a1, a2);
    }
  }
  return result;
}

llvm::MDNode *sub_22F2560BC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  llvm::MDNode *result;

  v4 = sub_22F114198(*(_QWORD *)(a2 + 24));
  result = (llvm::MDNode *)sub_22E491A8C(a1, a2 & 0xFFFFFFFFFFFFFFF0);
  if (!result)
  {
    if (sub_22E494ED0(*(_DWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 12), v4, *(_QWORD *)(*(_QWORD *)a1 + 152)))
    {
      sub_22E48FAEC(a1, v4);
      return (llvm::MDNode *)sub_22E49177C(a1, a2);
    }
    else
    {
      return sub_22E494AD0(a1, a2);
    }
  }
  return result;
}

uint64_t sub_22F25615C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 = sub_22E491A8C(a1, a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || (v6 = v5, (*(_BYTE *)(v5 + 28) & 4) != 0))
  {
    v10 = sub_22E499368(a1, a2);
    llvm::DIBuilder::replaceArrays();
    v9 = v4;
    v8 = sub_22F258670((uint64_t *)(a1 + 1296), &v9);
    sub_22E4911C0(v8 + 1, v10);
    return v10;
  }
  return v6;
}

int32x2_t sub_22F256214(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = v5;
    if (v5[1])
      llvm::MetadataTracking::untrack();
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_22F256284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BYTE v8[12];

  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_DWORD *)(v5 + 24);
  sub_22F254858(a1, *(_QWORD *)((*(_QWORD *)(v5 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v5 + 80)) & 8)), a3);
  sub_22E48F44C((uint64_t *)a1, v6);
  if (v6)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v6, *(unsigned __int8 *)(a1 + 13), (uint64_t)v8);
  sub_22E48FAEC(a1, *(_QWORD *)(a2 + 40));
  return llvm::DIBuilder::createTypedef();
}

unint64_t sub_22F256388(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x19)
      break;
  }
  return result;
}

uint64_t sub_22F2563DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F258D20(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_22F256438(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v10;

  v6 = *(_QWORD *)(*a1 + 184);
  v7 = 66;
  if ((*(_WORD *)(v6 + 64) & 2) != 0)
  {
    if ((*(_BYTE *)(v6 + 80) & 0x10) != 0)
      v7 = 66;
    else
      v7 = 16;
  }
  v8 = a2;
  if ((*(_BYTE *)(a2 + 18) & 0x10) != 0)
  {
    v8 = a2;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v8)
      {
        v10 = *(_DWORD *)(v8 + 16);
        if ((v10 & 0xFE) == 0x28)
          continue;
      }
      v8 = sub_22F10CF48(v8);
      v10 = *(_DWORD *)(v8 + 16);
    }
    while ((v10 & 0x100000) != 0);
  }
  return sub_22E4914E8(a1, v7, a2, *(_QWORD *)(v8 + 32), a3);
}

uint64_t sub_22F2564E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t Function;
  uint64_t v26;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  _QWORD v38[2];
  _QWORD v39[2];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  v39[1] = 0;
  v40 = 0;
  v38[1] = 0;
  v39[0] = 0;
  v38[0] = 0;
  v37 = 0;
  v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = sub_22E48F44C((uint64_t *)a1, v9);
  v36 = v10;
  if (v9)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v9, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v41);
  v11 = v10;
  sub_22E499774(a1, a2, a3, v10, (uint64_t)v39, (uint64_t)v38, &v36, &v40, &v37);
  v41 = v43;
  v42 = 0x1000000000;
  v12 = v8[15];
  v13 = sub_22EFBAACC((uint64_t)v8);
  if (v13)
  {
    v18 = v42;
    v19 = 8 * v13;
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)v12 + 48);
      if (v18 >= HIDWORD(v42))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v42;
      }
      v41[v18] = v20;
      v18 = v42 + 1;
      LODWORD(v42) = v42 + 1;
      v12 += 8;
      v19 -= 8;
    }
    while (v19);
  }
  v14 = *(_QWORD *)(v8[6] & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(v14 + 16) - 27;
  if (v14)
    v16 = v15 > 0xFFFFFFFD;
  else
    v16 = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v8[6] & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v17 = sub_22F10CF48(v14);
    v14 = *(_QWORD *)(v8[6] & 0xFFFFFFFFFFFFFFF0);
    v15 = *(unsigned __int8 *)(v14 + 16) - 27;
  }
  v21 = *(_DWORD *)(v17 + 16);
  v22 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  if (v15 <= 0xFFFFFFFD)
    v14 = sub_22F10CF48(v14);
  v23 = *(_QWORD *)(v14 + 24);
  v28 = (v21 >> 19) & 0x1F;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v24 = sub_22EF63D8C(v22, v23, v41, v42, (__int128 *)&v28, 0);
  sub_22EFB948C((uint64_t)v8);
  if ((a4 & 1) != 0)
  {
    sub_22F256890((_DWORD *)a1);
    sub_22E499D0C((uint64_t *)a1, (uint64_t)v8, v24, v11);
    sub_22E49A37C(a1, v8);
    Function = llvm::DIBuilder::createFunction();
  }
  else
  {
    sub_22E499D0C((uint64_t *)a1, (uint64_t)v8, v24, v11);
    sub_22E49A37C(a1, v8);
    Function = llvm::DIBuilder::createTempFunctionFwdDecl();
    v26 = (*(uint64_t (**)(uint64_t *))(*v8 + 32))(v8);
    sub_22F254E40((uint64_t *)(a1 + 2312), v26, Function);
  }
  if (v41 != v43)
    free(v41);
  return Function;
}

uint64_t sub_22F256890(_DWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 28) & 8) == 0 || a1[2] < 2u)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  v3 = *(_QWORD *)(v2 + 76) & 0x1C00000000;
  if (v3 == 0x1000000000)
  {
    if ((*(_QWORD *)(v2 + 96) >> 61) - 1 < 2)
      return 0x20000000;
    return 0;
  }
  if (v3 >> 34 < 5)
    return 0;
  return 0x20000000;
}

unint64_t sub_22F2568F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x24BDAC8D0];
  if (a2 && (v7 = sub_22E49A914(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0))) != 0)
    v8 = (*(_DWORD *)(v7 + 16) >> 19) & 0x1F;
  else
    LOWORD(v8) = 0;
  v26 = v28;
  v27 = 0x1000000000;
  v9 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = 0;
    v11 = *a4;
    v12 = 8 * v9;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 48);
      if (v10 >= HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v10) = v27;
      }
      *((_QWORD *)v26 + v10) = v13;
      v10 = (v27 + 1);
      LODWORD(v27) = v27 + 1;
      v11 += 8;
      v12 -= 8;
    }
    while (v12);
    v14 = (uint64_t *)v26;
  }
  else
  {
    v10 = 0;
    v14 = v28;
  }
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v18 = v8;
  v19 = 0;
  v21 = 0;
  v20 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v16 = sub_22EF63D8C(v15, a3, v14, v10, (__int128 *)&v18, 0);
  if (v26 != v28)
    free(v26);
  return v16;
}

_QWORD *sub_22F256A70(_QWORD *result, uint64_t a2, llvm::Function *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t)result;
  v5 = result[299];
  v6 = *(unsigned int *)(v5 - 4);
  if (v6 != (uint64_t)(result[293] - result[292]) >> 3)
  {
    do
    {
      result = (_QWORD *)sub_22F254674(v4, a2, *(_DWORD *)(v4 + 560));
      v8 = *(_QWORD *)(v4 + 2344);
      v10 = *(_QWORD *)(v8 - 8);
      v9 = v8 - 8;
      if (v10)
        result = (_QWORD *)llvm::MetadataTracking::untrack();
      *(_QWORD *)(v4 + 2344) = v9;
    }
    while (v6 != (v9 - *(_QWORD *)(v4 + 2336)) >> 3);
    v5 = *(_QWORD *)(v4 + 2392);
  }
  *(_QWORD *)(v4 + 2392) = v5 - 4;
  if (this)
  {
    result = (_QWORD *)llvm::Function::getSubprogram(this);
    if (result)
    {
      llvm::Function::getSubprogram(this);
      return (_QWORD *)llvm::DIBuilder::finalizeSubprogram();
    }
  }
  return result;
}

uint64_t sub_22F256B3C(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  int v4;
  uint64_t LexicalBlock;
  _BYTE v7[12];

  v2 = (uint64_t *)(a1 + 2336);
  sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a1 + 560));
  v3 = *(_DWORD *)(a1 + 560);
  if (v3)
  {
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v3, *(unsigned __int8 *)(a1 + 13), (uint64_t)v7);
    v4 = *(_DWORD *)(a1 + 560);
  }
  else
  {
    v4 = 0;
  }
  sub_22E491214((unsigned __int8 *)a1, v4, 0);
  LexicalBlock = llvm::DIBuilder::createLexicalBlock();
  return sub_22F254808(v2, LexicalBlock);
}

uint64_t sub_22F256C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((result & 0xFF00000000) != 0)
  {
    v5 = result;
    v6 = *(_DWORD *)(a3 + 8);
    if (v6 >= *(_DWORD *)(a3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = 16;
    v7 = *(_DWORD *)(a3 + 12);
    v8 = *(_DWORD *)(a3 + 8) + 1;
    *(_DWORD *)(a3 + 8) = v8;
    if (v8 >= v7)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v5;
    v9 = *(_DWORD *)(a3 + 12);
    v10 = *(_DWORD *)(a3 + 8) + 1;
    *(_DWORD *)(a3 + 8) = v10;
    if (v10 >= v9)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = 22;
    v11 = *(_DWORD *)(a3 + 12);
    v12 = *(_DWORD *)(a3 + 8) + 1;
    *(_DWORD *)(a3 + 8) = v12;
    if (v12 >= v11)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = 24;
    ++*(_DWORD *)(a3 + 8);
  }
  return result;
}

uint64_t sub_22F256D30(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[12];

  v5 = a3;
  sub_22E48F304((uint64_t)a1, a3);
  if (v5)
    sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v5, a1[13], (uint64_t)v8);
  sub_22E491214(a1, v5, 0);
  llvm::DILocation::getImpl();
  llvm::DebugLoc::DebugLoc();
  result = sub_22E3CF21C(a2, 0, v7);
  if (v7)
    result = llvm::MetadataTracking::untrack();
  if (*((int *)a1 + 2) >= 4)
    return sub_22F256B3C((uint64_t)a1);
  return result;
}

uint64_t sub_22F256E20(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_22F254674(a1, a2, a3);
  if (*(int *)(a1 + 8) >= 4)
  {
    v5 = *(_QWORD *)(a1 + 2344);
    v7 = *(_QWORD *)(v5 - 8);
    v6 = v5 - 8;
    if (v7)
      result = llvm::MetadataTracking::untrack();
    *(_QWORD *)(a1 + 2344) = v6;
  }
  return result;
}

uint64_t sub_22F256E68(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  _BYTE v7[12];

  result = sub_22F2556D0(a2);
  if ((result & 1) == 0)
  {
    sub_22E48F44C((uint64_t *)a1, *(_DWORD *)(a2 + 24));
    v5 = *(_DWORD *)(a2 + 24);
    if (v5)
    {
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v5, *(unsigned __int8 *)(a1 + 13), (uint64_t)v7);
      v6 = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v6 = 0;
    }
    sub_22E491214((unsigned __int8 *)a1, v6, 0);
    llvm::DIBuilder::createLabel();
    llvm::DILocation::getImpl();
    return llvm::DIBuilder::insertLabel();
  }
  return result;
}

uint64_t sub_22F256FA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;

  v12 = 8 * a5[2];
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 52) & 0x40000000) != 0)
  {
    v26 = sub_22E491F64(a1, (uint64_t)"__size", 6, *(_QWORD *)(a3 + 16480), a4, 0, v12, 0, a6);
    v27 = *(_DWORD *)(a7 + 8);
    if (v27 >= *(_DWORD *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = *(_DWORD *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v27) = v26;
    ++*(_DWORD *)(a7 + 8);
    result = sub_22E491F64(a1, (uint64_t)"__align", 7, *(_QWORD *)(a3 + 16480), a4, 0, 8 * a5[3], 0, a6);
  }
  else
  {
    v15 = sub_22E491F64(a1, (uint64_t)"__isa", 5, *(_QWORD *)(a3 + 16816), a4, 0, v12, 0, a6);
    v16 = *(_DWORD *)(a7 + 8);
    if (v16 >= *(_DWORD *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(_DWORD *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v16) = v15;
    ++*(_DWORD *)(a7 + 8);
    v17 = sub_22E491F64(a1, (uint64_t)"__flags", 7, *(_QWORD *)(a3 + 16480), a4, 0, 8 * a5[3], 0, a6);
    v18 = *(_DWORD *)(a7 + 8);
    if (v18 >= *(_DWORD *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v18) = v17;
    ++*(_DWORD *)(a7 + 8);
    v19 = sub_22E491F64(a1, (uint64_t)"__reserved", 10, *(_QWORD *)(a3 + 16480), a4, 0, 8 * a5[4], 0, a6);
    v20 = *(_DWORD *)(a7 + 8);
    if (v20 >= *(_DWORD *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v20) = v19;
    ++*(_DWORD *)(a7 + 8);
    v21 = sub_22F3C22A4(*(_QWORD *)(a2 + 360));
    v22 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)a1 + 144), v21 & 0xFFFFFFFFFFFFFFF0, 0);
    v23 = sub_22E491F64(a1, (uint64_t)"__FuncPtr", 9, v22, a4, 0, 8 * a5[5], 0, a6);
    v24 = *(_DWORD *)(a7 + 8);
    if (v24 >= *(_DWORD *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v24) = v23;
    ++*(_DWORD *)(a7 + 8);
    if ((*(_WORD *)(a2 + 20) & 2) != 0)
      v25 = sub_22F36DDB4(a3);
    else
      v25 = sub_22F36DC0C(a3);
    v29 = sub_22EF5B848(a3, v25, 0);
    result = sub_22E491F64(a1, (uint64_t)"__descriptor", 12, v29, a4, 0, 8 * a5[6], 0, a6);
  }
  v30 = result;
  v31 = *(_DWORD *)(a7 + 8);
  if (v31 >= *(_DWORD *)(a7 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = *(_DWORD *)(a7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a7 + 8 * v31) = v30;
  ++*(_DWORD *)(a7 + 8);
  return result;
}

uint64_t sub_22F257330(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
    return 0;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  if ((*(_WORD *)(v6 + 8) & 0x7Eu) - 34 > 3)
    return 0;
  v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v9 = 0;
  if (sub_22F24C318(*(_QWORD *)(a1 + 2664), *(_DWORD *)(a1 + 2680), v7, &v9))
    v8 = v9 == *(_QWORD *)(a1 + 2664) + 16 * *(unsigned int *)(a1 + 2680);
  else
    v8 = 1;
  if (!v8)
    return *(_QWORD *)(v9 + 8);
  sub_22E48FAEC(a1, a2);
  return sub_22E4920F4(a1, a2);
}

uint64_t sub_22F257430(uint64_t *a1, unint64_t a2)
{
  uint64_t GlobalVariableExpression;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];
  const void *v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[6];

  v19[4] = *MEMORY[0x24BDAC8D0];
  if (sub_22F2556D0(a2))
    return 0;
  v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v17 = 0;
  if (sub_22F24C318(a1[321], *((_DWORD *)a1 + 646), v6, &v17))
    v7 = v17 == (_QWORD *)(a1[321] + 16 * *((unsigned int *)a1 + 646));
  else
    v7 = 1;
  if (!v7)
    return v17[1];
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v10 = 0;
  v11 = 0;
  sub_22E4999B8((uint64_t)a1, a2, &v16, &v14, &v11, v13, (uint64_t)v12, &v10, &v15);
  v17 = v19;
  v18 = 0x400000000;
  (*(void (**)(_QWORD, unint64_t, _QWORD **))(**(_QWORD **)(*a1 + 800) + 80))(*(_QWORD *)(*a1 + 800), a2, &v17);
  sub_22F254858(a1, v11, v16);
  if ((_DWORD)v18)
    llvm::DIBuilder::createExpression();
  GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression();
  v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = sub_22F25827C((uint64_t)(a1 + 321), &v9);
  sub_22E4911C0(v8 + 1, GlobalVariableExpression);
  if (v17 != v19)
    free(v17);
  return GlobalVariableExpression;
}

uint64_t sub_22F257650(uint64_t result, llvm::Value *a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  void *Name;
  size_t v8;
  uint64_t v9;
  int v10;
  uint64_t ImportedDeclaration;
  _QWORD *v12;
  unint64_t v13;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 184) + 96) & 0x1800000000000000) != 0)
  {
    v4 = result;
    v5 = (_DWORD *)(a3 & 0xFFFFFFFFFFFFFFF8);
    result = sub_22F2556D0(a3 & 0xFFFFFFFFFFFFFFF8);
    if ((result & 1) == 0)
    {
      v6 = *(_QWORD *)v4;
      Name = (void *)llvm::Value::getName(a2);
      result = sub_22F299840(v6, Name, v8);
      if (result)
      {
        v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF8) + 32))(result & 0xFFFFFFFFFFFFFFF8);
        result = sub_22E49A564(v4, v9 & 0xFFFFFFFFFFFFFFF8);
        if (result)
        {
          sub_22E48FAEC(v4, (unint64_t)v5);
          v10 = v5[6];
          sub_22E48F44C((uint64_t *)v4, v10);
          if (v10)
            sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 144) + 1992), v10, *(unsigned __int8 *)(v4 + 13), (uint64_t)&v13);
          ImportedDeclaration = llvm::DIBuilder::createImportedDeclaration();
          v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5) & 0xFFFFFFFFFFFFFFF8;
          v12 = sub_22F25827C(v4 + 2592, (uint64_t *)&v13);
          return (uint64_t)sub_22E4911C0(v12 + 1, ImportedDeclaration);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22F2577D0(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _BYTE v10[12];

  if ((*(_QWORD *)(*(_QWORD *)(*result + 184) + 96) & 0x1800000000000000) != 0)
  {
    v3 = (uint64_t)result;
    result = (_QWORD *)sub_22EFD8BB4(a2);
    v4 = (uint64_t)result;
    v5 = result[5] >= 8uLL && (result[5] & 7) == 0;
    if (v5 || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v3 + 184) + 64) & 0x10) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      if (!v6)
        v6 = *(_DWORD *)(v3 + 560);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v8 = (_QWORD *)*v8;
      v9 = sub_22EFCAD5C((uint64_t)v8);
      sub_22E49E668((_QWORD *)v3, v9);
      sub_22E48FE84(v3, v4);
      sub_22E48F44C((uint64_t *)v3, v6);
      if (v6)
        sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 144) + 1992), v6, *(unsigned __int8 *)(v3 + 13), (uint64_t)v10);
      return (_QWORD *)llvm::DIBuilder::createImportedModule();
    }
  }
  return result;
}

uint64_t sub_22F2578F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _BYTE v13[12];

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  v5 = v4 > 0x2F;
  v6 = (1 << v4) & 0xC00000060000;
  if (!v5 && v6 != 0)
    a2 = sub_22EFBAEA4(a2);
  result = sub_22E49A564(a1, a2);
  if (result)
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(_QWORD *)(v2 + 16);
    v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 4) != 0)
      v11 = (_QWORD *)*v11;
    v12 = sub_22EFCAD5C((uint64_t)v11);
    sub_22E49E668((_QWORD *)a1, v12);
    sub_22E48F44C((uint64_t *)a1, v9);
    if (v9)
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 144) + 1992), v9, *(unsigned __int8 *)(a1 + 13), (uint64_t)v13);
    return llvm::DIBuilder::createImportedDeclaration();
  }
  return result;
}

uint64_t sub_22F2579F4(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 184) + 96) & 0x1800000000000000) != 0)
  {
    v2 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = result;
      do
      {
        result = sub_22F2578F0(v3, v2);
        v2 = *(_QWORD *)(v2 + 72);
      }
      while (v2 && (*(_DWORD *)(v2 + 28) & 0x7E) == 0x2E);
    }
  }
  return result;
}

uint64_t sub_22F257A54(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE v9[12];
  _OWORD v10[5];
  _OWORD v11[5];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 184) + 96) >> 61 == 2)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if (v3)
    {
      v4 = result;
      sub_22F420190((uint64_t)v11, v3);
      v5 = *(_DWORD *)(a2 + 24);
      v6 = *(_QWORD *)(a2 + 16);
      v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 4) != 0)
        v7 = (_QWORD *)*v7;
      v8 = sub_22EFCAD5C((uint64_t)v7);
      sub_22E49E668((_QWORD *)v4, v8);
      v10[2] = v11[2];
      v10[3] = v11[3];
      v10[4] = v11[4];
      v10[0] = v11[0];
      v10[1] = v11[1];
      sub_22E495A4C(v4, (uint64_t)v10, *(unsigned __int8 *)(v4 + 12));
      sub_22E48F44C((uint64_t *)v4, v5);
      if (v5)
        sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 144) + 1992), v5, *(unsigned __int8 *)(v4 + 13), (uint64_t)v9);
      return llvm::DIBuilder::createImportedDeclaration();
    }
  }
  return result;
}

uint64_t sub_22F257BAC@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v3;
  _BYTE v5[12];

  if (*(_QWORD *)(result + 2336) == *(_QWORD *)(result + 2344))
  {
    *a3 = 0;
  }
  else
  {
    v3 = (unsigned __int8 *)result;
    if (a2)
      sub_22F1E2F68(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 144) + 1992), a2, *(unsigned __int8 *)(result + 13), (uint64_t)v5);
    sub_22E491214(v3, a2, 0);
    llvm::DILocation::getImpl();
    return llvm::DebugLoc::DebugLoc();
  }
  return result;
}

void sub_22F257C74(void *__src@<X1>, size_t __len@<X2>, uint64_t a3@<X0>, _QWORD *a4@<X8>)
{
  sub_22E490E28(a4, *(_QWORD **)(a3 + 8), __src, __len);
}

uint64_t sub_22F257C88()
{
  return 0;
}

char **sub_22F257C90(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      if (*(_QWORD *)&v5[v4])
        llvm::MetadataTracking::untrack();
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F257CF8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F257D3C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (((v1 >> 54) & 0xF) - 6 <= 2)
    return *(_QWORD *)(((a1 + 8 * (unsigned __int16)(v1 >> 38) + 4 * ((v1 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8)
                     + 8 * ((v1 & 0x3C0000000000000) == 0x80000000000000)
                     + 8 * sub_22E49F5F8(a1));
  else
    return 0;
}

uint64_t sub_22F257DA4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  if ((v1 & 0x3C0000000000000) != 0x280000000000000)
    return 0;
  v3 = ((a1 + 8 * (unsigned __int16)(v1 >> 38) + 4 * ((v1 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8)
     + 8 * sub_22E49F5F8(a1);
  return *(_QWORD *)(v3 + 8 * ((unint64_t)sub_22E49F5F8(a1) >> 32) + 8);
}

uint64_t sub_22F257E10(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)(v3 + 56);
}

uint64_t sub_22F257E74(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  v2 = a1[1];
  if ((_DWORD)v2 == a2[1])
  {
    a1[1] = 0;
    a2[1] = 0;
    v3 = v2 << 32;
  }
  else
  {
    v3 = 0;
  }
  v4 = *a1;
  v5 = *a2 & *a1;
  if (*a1 <= 7 && *a2 <= 7)
  {
    v12 = ~v5;
    v13 = v5 ^ v4;
LABEL_17:
    *a1 = v13;
    *a2 &= v12;
    return v3 | v5;
  }
  v5 &= 7u;
  *a1 = v5 ^ v4;
  v7 = *a2;
  v8 = *a2 & ~v5;
  *a2 = v8;
  v9 = *a1;
  v10 = (*a1 >> 4) & 3;
  if (v10 == ((v7 >> 4) & 3))
  {
    v5 |= 16 * v10;
    *a1 = v9 & 0xFFFFFFCF;
    v8 = *a2 & 0xFFFFFFCF;
    *a2 = v8;
    v9 = *a1;
  }
  v11 = (v9 >> 6) & 7;
  if (v11 == ((v8 >> 6) & 7))
  {
    v5 |= v11 << 6;
    *a1 = v9 & 0xFFFFFE3F;
    v8 = *a2 & 0xFFFFFE3F;
    *a2 = v8;
    v9 = *a1;
  }
  if ((v9 ^ v8) <= 0x7FF)
  {
    v5 |= v9 & 0xFFFFF800;
    *a1 = v9 & 0x7FF;
    v8 = *a2 & 0x7FF;
    *a2 = v8;
    v9 = *a1;
  }
  if (((v9 >> 9) & 3) == ((v8 >> 9) & 3))
  {
    v5 = v5 & 0xFFFFF9FF | (((v9 >> 9) & 3) << 9);
    v13 = v9 & 0xFFFFF9FF;
    v12 = -1537;
    goto LABEL_17;
  }
  return v3 | v5;
}

llvm::APInt *sub_22F257F94@<X0>(uint64_t a1@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = (unint64_t)(v2 + 63) >> 6;
  if (v3 < 2)
    return sub_22E49FA8C(a2, v2, *(_QWORD *)a1);
  else
    return (llvm::APInt *)llvm::APInt::APInt(a2, v2, v3, *(const unint64_t **)a1);
}

uint64_t sub_22F257FC4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*v3)
          result = llvm::MetadataTracking::untrack();
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_22F258024(_QWORD *a1)
{
  if (a1)
  {
    sub_22F258024(*a1);
    sub_22F258024(a1[1]);
    operator delete(a1);
  }
}

void sub_22F25805C(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

_OWORD *sub_22F2580BC(uint64_t a1, void *__s1, unint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = (void **)sub_22E49FC24(a1, &v13, __s1, a3);
  v7 = *v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v10 = v13;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = v7;
    v11 = **(_QWORD **)a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *(_QWORD *)a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v12);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t *sub_22F258168(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = (_QWORD *)*result;
  v4 = result[1];
  v6 = (_QWORD *)a2[1];
  if (v4 != *result)
  {
    v7 = (_QWORD *)(v4 - 8);
    v8 = v6 - 1;
    do
    {
      *v8 = *v7;
      if (*v7)
      {
        result = (uint64_t *)llvm::MetadataTracking::retrack();
        *v7 = 0;
      }
      --v8;
    }
    while (v7-- != v5);
    v6 = v8 + 1;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F258220(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 8;
      *(_QWORD *)(a1 + 16) = v2 - 8;
      if (*(_QWORD *)(v2 - 8))
      {
        llvm::MetadataTracking::untrack();
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_22F25827C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2582E4(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F2582E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E49FF7C(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F258394(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      v9 = *(v8 - 1);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        result = sub_22F24C318(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), v9, &v12);
        v11 = v12;
        *v12 = *(v8 - 1);
        v11[1] = *v8;
        if (*v8)
        {
          result = llvm::MetadataTracking::retrack();
          *v8 = 0;
        }
        ++*(_DWORD *)(v4 + 8);
      }
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t *sub_22F258464(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = (_QWORD *)*result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = (_QWORD *)(v4 - 8);
    v8 = v6 - 8;
    do
    {
      *(_OWORD *)(v8 - 8) = *(_OWORD *)(v7 - 1);
      if (*v7)
      {
        result = (uint64_t *)llvm::MetadataTracking::retrack();
        *v7 = 0;
      }
      v9 = v7 - 1;
      v7 -= 2;
      v8 -= 16;
    }
    while (v9 != v5);
    v6 = v8 + 8;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_22F25851C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 16;
    if (*(_QWORD *)(v2 - 8))
    {
      llvm::MetadataTracking::untrack();
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_22F258578(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result + 8 * v6 == a2)
  {
    v10 = *a3;
    if (v6 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_QWORD *)v4;
      v6 = *(unsigned int *)(v4 + 8);
    }
    *(_QWORD *)(v5 + 8 * v6) = v10;
    ++*(_DWORD *)(v4 + 8);
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_QWORD *)v4;
      v6 = *(unsigned int *)(v4 + 8);
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *(_QWORD *)v4 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      result = (uint64_t)memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    *(_DWORD *)(v4 + 8) = v6 + 1;
    *v8 = *a3;
  }
  return result;
}

_QWORD *sub_22F258670(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2586D0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F2586D0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4A0130(a1, v7);
  v9 = 0;
  sub_22F246C54((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25877C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        result = sub_22F246C54((uint64_t *)v4, v8 - 1, &v11);
        v10 = v11;
        *v11 = *(v8 - 1);
        v10[1] = *v8;
        if (*v8)
        {
          result = llvm::MetadataTracking::retrack();
          *v8 = 0;
        }
        ++*(_DWORD *)(v4 + 8);
      }
      v9 = v8 + 1;
      v8 += 2;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t sub_22F25884C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F2588D8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F25896C(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F2588D8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F25896C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4A01F0(a1, v6);
  v8 = 0;
  sub_22F2588D8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F258A1C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F2588D8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F258AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v10 = 0;
  result = sub_22F258B60(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_BYTE *)a3, *(_QWORD *)(a3 + 8), &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F258C60(a2, a3, v10);
    v7 = (unsigned __int8 *)result;
    *(_BYTE *)result = *(_BYTE *)a3;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F258B60(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((0x2500000000 * (char)a3) | (a4 >> 4) ^ (a4 >> 9))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (unsigned __int8 *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = *((_QWORD *)v10 + 1);
    if (v11 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while ((_BYTE)v11 != 0xFF || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == 254)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (unsigned __int8 *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = *((_QWORD *)v10 + 1);
        v14 = 1;
        if (v11 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

unsigned __int8 *sub_22F258C60(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  unsigned int v6;
  unsigned __int8 *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22E4A0388(a1, v6);
    v8 = 0;
    sub_22F258B60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_BYTE *)a2, *(_QWORD *)(a2 + 8), &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 255 || *((_QWORD *)a3 + 1) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F258D20(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((*a2 >> 9) ^ *a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -1;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F258DCC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F258ECC(a1, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F258E38(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

_QWORD *sub_22F258ECC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4A05D4(a1, v6);
  v8 = 0;
  sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F258F7C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F258E38(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = 0;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_22F259044(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)(v3 + 8);
}

uint64_t sub_22F2590A8(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)(v3 + 16);
}

uint64_t sub_22F25910C(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)(v3 + 16) + 8 * *(unsigned int *)(v3 + 24);
}

uint64_t sub_22F259178(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)(v3 + 32);
}

uint64_t sub_22F2591DC(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  return *(_QWORD *)(v3 + 32) + 4 * *(unsigned int *)(v3 + 24);
}

uint64_t sub_22F259248(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 104);
  }
  if (v2 >= 8)
    return *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v2)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
  if (*(_QWORD *)(a1 + 104) < 8uLL)
    return 0;
  return 0;
}

uint64_t sub_22F2592CC(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 104);
  }
  if (v2 >= 8)
    return *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v2)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
  if (*(_QWORD *)(a1 + 104) < 8uLL)
    return 0;
  return 0;
}

int *sub_22F259350(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *result;
  int v11;
  uint64_t v12;

  v1 = atomic_load((unsigned __int8 *)&qword_255DFECA0);
  if ((v1 & 1) == 0)
  {
    v12 = a1;
    v11 = __cxa_guard_acquire(&qword_255DFECA0);
    a1 = v12;
    if (v11)
    {
      dword_255DFEC80 = 0;
      qword_255DFEC88 = 0;
      qword_255DFEC98 = 0;
      __cxa_guard_release(&qword_255DFECA0);
      a1 = v12;
    }
  }
  v4 = *(_QWORD *)(a1 + 72);
  v2 = (uint64_t *)(a1 + 72);
  v3 = v4;
  if (v4 < 8)
    return &dword_255DFEC80;
  v5 = v3 & 6;
  v6 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (v5 != 2)
    v6 = 0;
  if (v6)
    v7 = (uint64_t *)(v6 + 72);
  else
    v7 = v2;
  v8 = *v7;
  result = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 6) == 4 && result != 0)
    return (int *)*((_QWORD *)result + 1);
  return result;
}

unint64_t sub_22F259410(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *a1;
  v2 = a1[1];
  while ((v1 & 0xF) == 0)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v3 == 26)
      break;
    v8 = v2;
    if (v1 && v3 == 37 || v1 && v3 == 7)
    {
      v7 = *(_QWORD *)(v1 + 32);
      v5 = sub_22F115954(v7);
      v6 = v8 + v5 + 7;
    }
    else if (v1 && v3 == 8)
    {
      v7 = *(_QWORD *)(v1 + 32);
      v5 = sub_22F115954(v7);
      v6 = v8 + v5;
    }
    else if (v1 && v3 == 24)
    {
      v7 = *(_QWORD *)(v1 + 40);
      v5 = sub_22F115954(v7);
      v6 = v8 + v5 + 15;
    }
    else if (!v1 || (v3 & 0xFE) != 0)
    {
      if (!v1 || v3 != 28)
        break;
      v7 = *(_QWORD *)(v1 + 24);
      v5 = sub_22F115954(v7);
      v6 = v8 + v5 + 3;
    }
    else
    {
      v7 = *(_QWORD *)(v1 + 32);
      v5 = sub_22F115954(v7);
      v6 = v8 + v5 - 1;
    }
    v2 = v6 / v5 * v5;
    v1 = v7;
  }
  if ((v1 & 0xF) != 0)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    return v1;
  return 0;
}

uint64_t sub_22F259578(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  if (a3 == a2)
    v6 = 0;
  else
    v6 = ((unint64_t)(a3 - a2 - 8) >> 3) + 1;
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22F259604(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 152);
  if (*(_DWORD *)(v3 + 72))
  {
    v6 = result;
    if ((*(_QWORD *)(v3 + 20) & 0x40000000000) != 0)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 808) + 72))(*(_QWORD *)(v6 + 808), a3, a2);
    result = sub_22EFC9084(a2, 1);
    if ((_DWORD)result)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 808) + 72))(*(_QWORD *)(v6 + 808), a3, a2);
  }
  return result;
}

void sub_22F259678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 152);
  v3 = *(_QWORD *)(v2 + 72);
  if ((_DWORD)v3)
    v4 = (v3 & 0x200000000) == 0;
  else
    v4 = 0;
  if (v4 && ((*(_QWORD *)(v2 + 20) & 0x40000000000) != 0 || sub_22EFC9084(a2, 1)))
    sub_22E5B2624();
}

double sub_22F2596F0(_QWORD *a1, unint64_t a2)
{
  double result;
  _BYTE v4[96];

  sub_22E4C8440((uint64_t)a1, a2, (uint64_t)v4);
  sub_22E4C9320(a1, v4);
  *(_QWORD *)&result = sub_22E4C9A74((uint64_t)a1, (uint64_t)v4).n128_u64[0];
  return result;
}

uint64_t sub_22F259734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::GlobalVariable *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  v20[0] = *(_QWORD *)(a1 + 144);
  v20[1] = a1;
  v21 = 0;
  v22 = 0;
  v23 = v25;
  v24 = 0x400000000;
  v6 = (_QWORD *)sub_22E5074F8(v20);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 24) != *v6)
    {
      v12 = llvm::User::operator new((llvm::User *)0x58);
      v13 = llvm::GlobalVariable::GlobalVariable();
      sub_22E4C73E8(v13, (*(_DWORD *)(a3 + 32) >> 4) & 3);
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 32) & 0xFFFFBFFF | (((*(_DWORD *)(a3 + 32) >> 14) & 1) << 14);
      llvm::GlobalObject::setComdat();
      llvm::Value::takeName();
      llvm::ConstantExpr::getBitCast();
      llvm::Value::replaceAllUsesWith();
      v14 = (llvm::GlobalVariable *)a3;
      a3 = v12;
      llvm::GlobalVariable::eraseFromParent(v14);
    }
    *(_BYTE *)(a3 + 80) = *(_BYTE *)(a3 + 80) & 0xFE | sub_22E62D664(*(_QWORD *)(a1 + 144), *(_QWORD *)(a2 + 48), 1);
    llvm::GlobalVariable::setInitializer();
    sub_22E507758((uint64_t)v20, a3);
    if (sub_22EFBEA2C(a2, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144)) == 1 && *(_QWORD *)(a1 + 320))
    {
      v15 = a1;
      v16 = a2;
      v17 = a3;
      v18 = 0;
LABEL_13:
      sub_22F25B764(v15, v16, v17, v18);
      goto LABEL_5;
    }
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 152) + 1) & 1) == 0)
  {
    v9 = sub_22EFBC5B4(a2);
    v10 = "constant l-value expression";
    v11 = v8;
LABEL_10:
    sub_22E628400(v11, v9, v10);
    goto LABEL_5;
  }
  if (sub_22EFBEA80(a2, *(_QWORD *)(v8 + 144)))
  {
    v19 = *(_QWORD *)(a1 + 144);
    v9 = sub_22EFBC5B4(a2);
    v10 = "flexible array initializer";
    v11 = v19;
    goto LABEL_10;
  }
  if (*(_QWORD *)(a1 + 320))
  {
    *(_BYTE *)(a3 + 80) &= ~1u;
    v15 = a1;
    v16 = a2;
    v17 = a3;
    v18 = 1;
    goto LABEL_13;
  }
LABEL_5:
  if (v23 != v25)
    free(v23);
  return a3;
}

uint64_t sub_22F2599E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22E4CDD34(a1, a2, a3);
  v4 = (uint64_t *)(*(_QWORD *)a1 + 16 * v3);
  *v4 = a2;
  v4[1] = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

llvm::Value *sub_22F259A08(llvm::Value *result, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;
  unsigned int v4;
  int v5;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  llvm::InlineAsm *v10;
  uint64_t v11;
  uint64_t FunctionType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  __int16 v18;
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a2 + 8);
  if ((*(_DWORD *)(v2 + 8) & 0xFC | 2) == 0x12)
    return result;
  v3 = result;
  v4 = *(_DWORD *)(v2 + 8);
  v5 = 1;
  if (v4 > 0xF || ((1 << v4) & 0x800C) == 0)
  {
    if (v4 != 13)
      return result;
    v5 = 0;
  }
  v7 = (uint64_t *)((char *)result + 272);
  v8 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v8;
  v19[2] = *(_OWORD *)(a2 + 32);
  v9 = sub_22E3C43AC((uint64_t *)result + 34, (uint64_t)v19, "fake.use");
  v20 = v9;
  if (v5)
  {
    v21 = v2;
LABEL_9:
    llvm::FunctionType::get();
    v10 = (llvm::InlineAsm *)llvm::InlineAsm::get();
    v11 = (uint64_t)v10;
    if (v10)
      FunctionType = llvm::InlineAsm::getFunctionType(v10);
    else
      FunctionType = 0;
    v18 = 257;
    return sub_22E462B78(v7, FunctionType, v11, (uint64_t)&v20, 1, (uint64_t)v17, 0);
  }
  v13 = v9;
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 18) + 144) + 15088);
  result = (llvm::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 240))(v14);
  v15 = 24;
  if ((_DWORD)result == 64)
    v15 = 32;
  v16 = *(_QWORD *)((char *)v3 + v15);
  if (*(_DWORD *)(v2 + 8) >> 8 <= *(_DWORD *)(v16 + 8) >> 8)
  {
    v21 = *(_QWORD *)((char *)v3 + v15);
    v18 = 257;
    v20 = sub_22E3D3108((uint64_t *)v3 + 34, v13, v16, (uint64_t)v17);
    goto LABEL_9;
  }
  return result;
}

double sub_22F259BA4(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v6 = (__int128 *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 64))
  {
    v28 = *v6;
    v29 = v7;
    v30 = *(_OWORD *)(a2 + 40);
    *(double *)&v8 = sub_22F2469BC(a1, &v28, *(_QWORD *)a2, 0, (uint64_t)&v25);
  }
  else
  {
    v25 = *v6;
    v26 = v7;
    v8 = *(_OWORD *)(a2 + 40);
    v27 = v8;
  }
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  if (a3 == 4)
  {
    v17 = *(_QWORD *)(a2 + 56);
    if (v17)
    {
      v28 = v25;
      v29 = v26;
      v30 = v27;
      v18 = sub_22E4899EC(a1 + 1984, 3, 72);
      v19 = v29;
      *(_OWORD *)(v18 + 16) = v28;
      *(_OWORD *)(v18 + 32) = v19;
      *(_QWORD *)&v8 = v30;
      *(_OWORD *)(v18 + 48) = v30;
      *(_QWORD *)(v18 + 64) = v10;
      *(_QWORD *)v18 = off_24FA636F0;
      *(_QWORD *)(v18 + 8) = v17;
      return *(double *)&v8;
    }
    v21 = sub_22E54F920;
    goto LABEL_21;
  }
  if (a3 == 2)
  {
    if (*(char *)(v9 + 96) < 0)
      return *(double *)&v8;
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 144) + 184) & 0x200) != 0)
      v20 = 3;
    else
      v20 = 2;
    if (sub_22E4CBAA4(v9))
      v21 = sub_22F273CC4;
    else
      v21 = sub_22F273CF8;
LABEL_22:
    v28 = v25;
    v29 = v26;
    v30 = v27;
    v22 = sub_22E4899EC(a1 + 1984, v20, 80);
    *(_QWORD *)v22 = off_24FA63728;
    v23 = v29;
    *(_OWORD *)(v22 + 8) = v28;
    *(_OWORD *)(v22 + 24) = v23;
    *(_QWORD *)&v8 = v30;
    *(_OWORD *)(v22 + 40) = v30;
    *(_QWORD *)(v22 + 56) = v10;
    *(_QWORD *)(v22 + 64) = v21;
    *(_BYTE *)(v22 + 72) = v20 & 1;
    return *(double *)&v8;
  }
  if (a3 != 1)
  {
    v21 = sub_22F273D2C;
LABEL_21:
    v20 = 3;
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a2 + 56))
  {
    v21 = sub_22F25105C;
    goto LABEL_21;
  }
  v11 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
  if (v11 && (*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3)
    v11 = 0;
  v12 = sub_22EFD10F8(v11);
  v13 = a1 + 1984;
  v28 = v25;
  v29 = v26;
  v30 = v27;
  v14 = *(_QWORD *)(a2 + 56);
  v15 = sub_22E4899EC(v13, 3, 80);
  v16 = v29;
  *(_OWORD *)(v15 + 16) = v28;
  *(_OWORD *)(v15 + 32) = v16;
  *(_QWORD *)&v8 = v30;
  *(_OWORD *)(v15 + 48) = v30;
  *(_QWORD *)v15 = off_24FA636B8;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 64) = v10;
  *(_QWORD *)(v15 + 72) = v12;
  return *(double *)&v8;
}

uint64_t (*sub_22F259DB8(uint64_t a1, int a2))()
{
  return off_24FA638A8[a2 - 1];
}

double sub_22F259DCC(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  __int128 v4;
  __int128 v6[3];

  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  v6[2] = a3[2];
  return sub_22F259E14(a1, 1, v6, a4, (uint64_t)off_24FA638A8[a2 - 1], 1);
}

double sub_22F259E14(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, char a6)
{
  __int128 v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  unint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  _OWORD v18[3];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v11 = a3[1];
  if (*(_QWORD *)(a1 + 5832))
  {
    v20 = *a3;
    v21 = v11;
    v22 = a3[2];
    sub_22E47F9F4(a1, (uint64_t)&v20, (uint64_t)v18);
    v20 = v18[0];
    v21 = v18[1];
    v22 = v18[2];
    v23 = v19;
    v12 = sub_22E4899EC(a1 + 1984, a2, 88);
    *(_QWORD *)v12 = off_24FA637A0;
    *(_OWORD *)(v12 + 8) = v20;
    *(_OWORD *)(v12 + 24) = v21;
    *(_OWORD *)(v12 + 40) = v22;
    *(_QWORD *)(v12 + 56) = v23;
    *(_QWORD *)(v12 + 64) = a4;
    *(_QWORD *)(v12 + 72) = a5;
    *(_BYTE *)(v12 + 80) = a6;
    v14 = sub_22E489C10(a1, v13);
    sub_22F2531F0(a1, v14, v15);
  }
  else
  {
    v20 = *a3;
    v21 = v11;
    v22 = a3[2];
    v17 = sub_22E4899EC(a1 + 1984, a2, 80);
    *(_QWORD *)v17 = off_24FA63728;
    *(_OWORD *)(v17 + 8) = v20;
    *(_OWORD *)(v17 + 24) = v21;
    result = *(double *)&v22;
    *(_OWORD *)(v17 + 40) = v22;
    *(_QWORD *)(v17 + 56) = a4;
    *(_QWORD *)(v17 + 64) = a5;
    *(_BYTE *)(v17 + 72) = a6;
  }
  return result;
}

double sub_22F259F50(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v12[3];

  v8 = sub_22F245DD4(a1, a2);
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v12[2] = a3[2];
  if (v8)
    v10 = 3;
  else
    v10 = 2;
  return sub_22F259E14(a1, v10, v12, a4, (uint64_t)off_24FA638A8[a2 - 1], v10 & 1);
}

double sub_22F259FCC(_QWORD *a1, llvm::LLVMContext *a2, __int128 *a3, uint64_t a4, uint64_t a5, char a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v10 = (int)a2;
  if (a1[729])
  {
    v12 = sub_22E489C10((uint64_t)a1, a2);
    v14 = 0;
    if (v12 <= 7)
      v15 = 0;
    else
      v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (v12 <= 7)
      v16 = 0;
    else
      v16 = v13 & 0xFFFFFFFFFFFFFFF8;
    if (v12 >= 8)
      v14 = 1 << (v13 & 7 | (8 * (v12 & 7)));
    v17 = a3[1];
    v37 = *a3;
    v38 = v17;
    v39 = a3[2];
    sub_22E47F9F4((uint64_t)a1, (uint64_t)&v37, (uint64_t)&v33);
    if ((v10 & 1) != 0)
    {
      v37 = v33;
      v38 = v34;
      v39 = v35;
      v40 = v36;
      v18 = sub_22E4899EC(a1 + 248, v10 & 0xFFFFFFFD, 88);
      *(_QWORD *)v18 = off_24FA637A0;
      *(_OWORD *)(v18 + 8) = v37;
      *(_OWORD *)(v18 + 24) = v38;
      *(_OWORD *)(v18 + 40) = v39;
      *(_QWORD *)(v18 + 56) = v40;
      *(_QWORD *)(v18 + 64) = a4;
      *(_QWORD *)(v18 + 72) = a5;
      *(_BYTE *)(v18 + 80) = a6;
      if (v15)
        v19 = v16;
      else
        v19 = 0;
      v20 = v15;
      if (v15 && v14)
      {
        v21 = __clz(v14) ^ 0x3F;
        v20 = (v21 >> 3) | v15;
        v19 |= v21 & 7;
      }
      sub_22F2531F0((uint64_t)a1, v20, v19);
    }
    if (v15)
    {
      if (v14)
      {
        v22 = __clz(v14) ^ 0x3F;
        v15 |= v22 >> 3;
        v16 |= v22 & 7;
      }
    }
    else
    {
      v16 = 0;
    }
    v37 = v33;
    v38 = v34;
    v39 = v35;
    v40 = v36;
    v23 = v10 & 0x7FFFFFFF | ((v15 > 7) << 31);
    v24 = a1[289];
    v25 = 96;
    if (v15 > 7)
      v25 = 112;
    sub_22E4CE690(a1 + 288, v24 + v25);
    v26 = a1[288] + v24;
    *(_DWORD *)v26 = 88;
    *(_DWORD *)(v26 + 4) = v23;
    *(_QWORD *)(v26 + 8) = off_24FA637A0;
    *(_OWORD *)(v26 + 16) = v37;
    *(_OWORD *)(v26 + 32) = v38;
    result = *(double *)&v39;
    *(_OWORD *)(v26 + 48) = v39;
    *(_QWORD *)(v26 + 64) = v40;
    *(_QWORD *)(v26 + 72) = a4;
    *(_QWORD *)(v26 + 80) = a5;
    *(_BYTE *)(v26 + 88) = a6;
    if (v15 >= 8)
    {
      *(_QWORD *)(v26 + 96) = v15;
      *(_QWORD *)(v26 + 104) = v16;
    }
  }
  else
  {
    if ((a2 & 1) != 0)
    {
      v28 = a3[1];
      v37 = *a3;
      v38 = v28;
      v39 = a3[2];
      v29 = sub_22E4899EC(a1 + 248, a2 & 0xFFFFFFFD, 80);
      *(_QWORD *)v29 = off_24FA63728;
      *(_OWORD *)(v29 + 8) = v37;
      *(_OWORD *)(v29 + 24) = v38;
      *(_OWORD *)(v29 + 40) = v39;
      *(_QWORD *)(v29 + 56) = a4;
      *(_QWORD *)(v29 + 64) = a5;
      *(_BYTE *)(v29 + 72) = a6;
    }
    v30 = a3[1];
    v37 = *a3;
    v38 = v30;
    v39 = a3[2];
    v31 = a1[289];
    sub_22E4CE690(a1 + 288, v31 + 88);
    v32 = a1[288] + v31;
    *(_DWORD *)v32 = 80;
    *(_DWORD *)(v32 + 4) = v10 & 0x7FFFFFFF;
    *(_QWORD *)(v32 + 8) = off_24FA63728;
    *(_OWORD *)(v32 + 16) = v37;
    *(_OWORD *)(v32 + 32) = v38;
    result = *(double *)&v39;
    *(_OWORD *)(v32 + 48) = v39;
    *(_QWORD *)(v32 + 64) = a4;
    *(_QWORD *)(v32 + 72) = a5;
    *(_BYTE *)(v32 + 80) = a6;
  }
  return result;
}

llvm::APInt *sub_22F25A27C(_QWORD *a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD *, void **, uint64_t), int a5)
{
  llvm::LLVMContext *v10;
  llvm::Instruction *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  llvm::APInt *result;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  llvm::GetElementPtrInst *v22;
  _QWORD v23[4];
  __int16 v24;
  _OWORD v25[3];
  unint64_t v26;

  v26 = a3;
  v10 = (llvm::LLVMContext *)sub_22EF5C728(*(_QWORD *)(a1[18] + 144), a3);
  if (!v10)
  {
    v18 = *(_OWORD *)(a2 + 16);
    v25[0] = *(_OWORD *)a2;
    v25[1] = v18;
    v25[2] = *(_OWORD *)(a2 + 32);
    return (llvm::APInt *)((uint64_t (*)(_QWORD *, _OWORD *, unint64_t))a4)(a1, v25, a3);
  }
  v11 = sub_22E620E9C((uint64_t)a1, v10, &v26, a2);
  v12 = *(_QWORD *)(a2 + 16);
  sub_22EF5CCD0(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v23);
  v13 = v23[0];
  v14 = *((_BYTE *)v11 + 16) != 16 || v11 == 0;
  v15 = v14;
  if (!v14)
  {
    result = (llvm::Instruction *)((char *)v11 + 24);
    v17 = *((_DWORD *)v11 + 8);
    if (v17 > 0x40)
    {
      result = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase(result);
      if ((_DWORD)result == v17)
        return result;
    }
    else if (!*(_QWORD *)result)
    {
      return result;
    }
  }
  v19 = (v13 | v12) & -(v13 | v12);
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v20 = (uint64_t *)sub_22F28ABCC(a2, a1);
  else
    v20 = *(uint64_t **)a2;
  v21 = *(_QWORD *)(a2 + 8);
  v24 = 257;
  v22 = sub_22E3E5044(a1 + 34, v21, v20, (uint64_t *)v11, (uint64_t)v23);
  return (llvm::APInt *)sub_22F25A3F8(a1, v20, (uint64_t)v22, v26, v19, a4, v15, a5);
}

uint64_t sub_22F25A3F8(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, void **, uint64_t), int a7, int a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::PHINode *v19;
  uint64_t *v20;
  uint64_t v21;
  llvm::GetElementPtrInst *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;

  v13 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v36[0] = "arraydestroy.done";
  v37 = 259;
  v14 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  if (a7)
  {
    v36[0] = "arraydestroy.isempty";
    v37 = 259;
    v15 = sub_22E3C18F4((uint64_t)(a1 + 34), 32, a2, a3, (uint64_t)v36);
    v16 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x23489C09C](v16, v14, v13, v15, 0);
    v37 = 257;
    sub_22E3C12C8(a1 + 34, v16, (uint64_t)v36);
  }
  v17 = a1[40];
  sub_22E5ED9B4(a1, v13, 0);
  v18 = *a2;
  v36[0] = "arraydestroy.elementPast";
  v37 = 259;
  v19 = (llvm::PHINode *)sub_22E3C4B80(a1 + 34, v18, 2, (uint64_t)v36);
  sub_22E3C4C50(v19, a3, v17);
  v20 = (uint64_t *)llvm::ConstantInt::get();
  v21 = sub_22E66C868(a1[18] + 280, a4, 0);
  v36[0] = "arraydestroy.element";
  v37 = 259;
  v22 = sub_22E3E5044(a1 + 34, v21, (uint64_t *)v19, v20, (uint64_t)v36);
  v23 = (uint64_t *)v22;
  if (a8)
  {
    sub_22F25A708((uint64_t)a1, (uint64_t)a2, (uint64_t)v22, a4, a5, (uint64_t)a6);
    v30 = v23;
    v31 = v21;
    v32 = a5;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    a6(a1, &v30, a4);
    sub_22E48A190((uint64_t)a1, 0);
  }
  else
  {
    v30 = v22;
    v31 = v21;
    v32 = a5;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    a6(a1, &v30, a4);
  }
  v36[0] = "arraydestroy.done";
  v37 = 259;
  v24 = sub_22E3C18F4((uint64_t)(a1 + 34), 32, v23, (uint64_t)a2, (uint64_t)v36);
  v25 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v25, v14, v13, v24, 0);
  v37 = 257;
  sub_22E3C12C8(a1 + 34, v25, (uint64_t)v36);
  sub_22E3C4C50(v19, (uint64_t)v23, a1[40]);
  return sub_22E5ED9B4(a1, v14, 0);
}

_QWORD *sub_22F25A708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  llvm::LLVMContext *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *result;

  if (*(_QWORD *)(a1 + 5832))
  {
    v12 = sub_22E4648A4(a1, a2);
    v13 = sub_22E4648A4(a1, a3);
    v14 = (_QWORD *)sub_22E4899EC(a1 + 1984, 1, 48);
    *v14 = off_24FA63868;
    v14[1] = v12;
    v14[2] = v13;
    v14[3] = a4;
    v14[4] = a5;
    v14[5] = a6;
    v16 = sub_22E489C10(a1, v15);
    return (_QWORD *)sub_22F2531F0(a1, v16, v17);
  }
  else
  {
    result = (_QWORD *)sub_22E4899EC(a1 + 1984, 1, 48);
    *result = off_24FA63840;
    result[1] = a2;
    result[2] = a3;
    result[3] = a4;
    result[4] = a6;
    result[5] = a5;
  }
  return result;
}

double sub_22F25A7E8(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  llvm::LLVMContext *v13;
  unint64_t v14;
  uint64_t v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v19 = *a3;
  v20 = a3[1];
  v21 = a3[2];
  if (*(_QWORD *)(a1 + 5832))
  {
    v11 = sub_22E4648A4(a1, a2);
    v24 = v19;
    v25 = v20;
    v26 = v21;
    sub_22E47F9F4(a1, (uint64_t)&v24, (uint64_t)v22);
    v24 = v22[0];
    v25 = v22[1];
    v26 = v22[2];
    v27 = v23;
    v12 = sub_22E4899EC(a1 + 1984, 1, 96);
    *(_QWORD *)v12 = off_24FA63818;
    *(_QWORD *)(v12 + 8) = v11;
    *(_OWORD *)(v12 + 16) = v24;
    *(_OWORD *)(v12 + 32) = v25;
    *(_OWORD *)(v12 + 48) = v26;
    *(_QWORD *)(v12 + 64) = v27;
    *(_QWORD *)(v12 + 72) = a4;
    *(_QWORD *)(v12 + 80) = a5;
    *(_QWORD *)(v12 + 88) = a6;
    v14 = sub_22E489C10(a1, v13);
    sub_22F2531F0(a1, v14, v15);
  }
  else
  {
    v17 = a3[1];
    v24 = *a3;
    v25 = v17;
    v26 = a3[2];
    v18 = sub_22E4899EC(a1 + 1984, 1, 88);
    *(_QWORD *)v18 = off_24FA637F0;
    *(_QWORD *)(v18 + 8) = a2;
    *(_OWORD *)(v18 + 16) = v24;
    *(_OWORD *)(v18 + 32) = v25;
    result = *(double *)&v26;
    *(_OWORD *)(v18 + 48) = v26;
    *(_QWORD *)(v18 + 64) = a4;
    *(_QWORD *)(v18 + 72) = a6;
    *(_QWORD *)(v18 + 80) = a5;
  }
  return result;
}

uint64_t sub_22F25A940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  uint64_t v7;
  llvm::GlobalValue *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  llvm::GlobalVariable *v12;

  v4 = sub_22F3F327C(*(unsigned int **)(a2 + 40));
  result = sub_22F3F327C(*(unsigned int **)(a2 + 40));
  for (i = result + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 40) + 4); v4 != i; v4 += 8)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    result = sub_22E3CB5E0(v7);
    if ((result & 1) == 0)
    {
      sub_22E624994(a1, v7, 0);
      result = sub_22E62492C();
      if (result)
      {
        v8 = (llvm::GlobalValue *)result;
        v9 = *(_QWORD *)(v7 + 48);
        result = sub_22E633E44(a1, v7);
        v10 = result - 27;
        if (result < 0x1B)
          v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 15072) + 4 * result);
        if (v10 != *(_DWORD *)(*(_QWORD *)v8 + 8) >> 8)
        {
          sub_22E66C868(a1 + 280, v9, 0);
          v11 = llvm::PointerType::get();
          v12 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          llvm::GlobalValue::getAddressSpace(v8);
          llvm::GlobalVariable::GlobalVariable();
          llvm::Value::replaceAllUsesWith();
          *(_QWORD *)v8 = v11;
          llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
          llvm::Value::replaceAllUsesWith();
          result = llvm::GlobalVariable::eraseFromParent(v12);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22F25AAF8(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F258D20((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25AB54(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F25AB54(_DWORD *a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E4CC6C8((uint64_t)a1, v6);
  v8 = 0;
  sub_22F258D20((uint64_t)a1, a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3)
    --a1[1];
  return a3;
}

uint64_t sub_22F25AC0C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 0;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((unint64_t)(*a2 + 1) >= 2)
    {
      v12 = 0;
      result = sub_22F258D20((uint64_t)v5, a2, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

__n128 sub_22F25ACCC(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_22F25AD1C(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AD78(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25AE14((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F25AD78(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F25AE14(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4CDBB4(a1, v7);
  v9 = 0;
  sub_22F25AD78((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25AEC4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F25AD78((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F25AF78(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AFD8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25B074((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F25AFD8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F25B074(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4CDC74(a1, v7);
  v9 = 0;
  sub_22F25AFD8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25B124(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F25AFD8((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F25B1D8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25B234(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25B2D0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F25B234(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_8;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v4;
  return result;
}

_QWORD *sub_22F25B2D0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_22E4CDDAC(a1, v7);
    v9 = 0;
    sub_22F25B234((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25B380(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F25B234((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

llvm::Value *sub_22F25B434(uint64_t a1, llvm::Value *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = *(_OWORD *)(a1 + 24);
  v4[0] = *(_OWORD *)(a1 + 8);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 40);
  return sub_22F259A08(a2, (uint64_t)v4);
}

_QWORD *sub_22F25B470(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25B4D4((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = -1;
  }
  return v5;
}

_QWORD *sub_22F25B4D4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4CEA44(a1, v7);
  v9 = 0;
  sub_22F246C54((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25B580(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F246C54((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

BOOL sub_22F25B62C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 247)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

llvm::Value *sub_22F25B68C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *v7;
  _QWORD *v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10[0] = *a2;
  v4 = llvm::FunctionType::get();
  v5 = sub_22E633A04(*(_QWORD *)(a1 + 144), v4, "unatexit", 8uLL, 0, 0, 0);
  v7 = v6;
  llvm::Function::addFnAttr();
  v9 = a2;
  v11 = 257;
  return sub_22F24EEDC(a1, v5, v7, (uint64_t)&v9, 1, (uint64_t)v10);
}

uint64_t sub_22F25B764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 184) + 6) & 1) != 0)
  {
    sub_22E628310(v8, *(_DWORD *)(a2 + 24), "this initialization requires a guard variable, which the kernel does not support", 0x50uLL);
    v8 = *(_QWORD *)(a1 + 144);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v8 + 224) + 680))(*(_QWORD *)(v8 + 224), a1, a2, a3, a4);
}

uint64_t sub_22F25B7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t BranchWeights;
  uint64_t v13;

  if (a5 != 1)
  {
    if (!a5 && !sub_22E3CEC2C(a6))
    {
      BranchWeights = 0;
      return sub_22E3D26FC((uint64_t *)(a1 + 272), a2, a3, a4, BranchWeights, 0);
    }
    sub_22EFBB794(a6);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  BranchWeights = llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)&v13);
  return sub_22E3D26FC((uint64_t *)(a1 + 272), a2, a3, a4, BranchWeights, 0);
}

uint64_t sub_22F25B890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6[4];
  __int16 v7;

  v4 = llvm::User::operator new((llvm::User *)0x58);
  v7 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v6[0] = v4;
  result = sub_22E62C508((uint64_t *)(a1 + 1416), v6);
  if (*(_QWORD *)(a2 + 48))
    return llvm::GlobalObject::setComdat();
  return result;
}

uint64_t sub_22F25B94C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 224) + 696))(*(_QWORD *)(a1 + 224), a1);
  *(_QWORD *)(a1 + 2088) = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2064) = *(_QWORD *)(a1 + 2056);
  return result;
}

uint64_t sub_22F25B9C4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_22F25BF3C(a1, a2, a3);
  v5 = *(_QWORD *)a1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 40 * v4);
  *v6 = *a2;
  v6[1] = 6;
  v7 = *a3;
  v6[2] = 0;
  v6[3] = v7;
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v6 + 1));
    v4 = *(_DWORD *)(a1 + 8);
    v5 = *(_QWORD *)a1;
  }
  v6[4] = 0;
  v9 = v4 + 1;
  *(_DWORD *)(a1 + 8) = v9;
  return v5 + 40 * v9 - 40;
}

_QWORD *sub_22F25BA64(uint64_t a1, llvm::Value *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32[2];
  uint64_t v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v33[0] = 0;
  v33[1] = a1;
  sub_22E48EE24(v33, 0, 1);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 144) + 16392);
  v17 = sub_22E46DE30(v8 + 280, v10, v11, v12, v13, v14, v15, v16);
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34[0] = &v35;
  v34[1] = (void *)0x1000000000;
  sub_22E61A8FC(a1, 0, 0, v9, a2, v17, (uint64_t *)v34, 0, (int8x16_t)0x1000000000uLL, 0);
  if (v34[0] != &v35)
    free(v34[0]);
  v32[0] = 0;
  v32[1] = a1;
  sub_22E48EE24(v32, 0, 0);
  v18 = a4;
  if (a4)
  {
    v19 = a4 - 1;
    do
    {
      v20 = (uint64_t *)(a3 + 40 * v19);
      v21 = *v20;
      v23 = v20[3];
      v22 = v20[4];
      if (v22)
      {
        v31 = v22;
        LOWORD(v36) = 257;
        v24 = &v31;
        v25 = (uint64_t *)(a1 + 272);
        v26 = v23;
        v27 = 1;
      }
      else
      {
        LOWORD(v36) = 257;
        v25 = (uint64_t *)(a1 + 272);
        v26 = v23;
        v24 = 0;
        v27 = 0;
      }
      v28 = sub_22E462B78(v25, v21, v26, (uint64_t)v24, v27, (uint64_t)v34, 0);
      if (*(_BYTE *)(v23 + 16))
        v29 = 1;
      else
        v29 = v23 == 0;
      if (!v29)
        *((_WORD *)v28 + 9) = (*(_WORD *)(v23 + 18) >> 2) & 0xFFC | *((_WORD *)v28 + 9) & 0xF003;
      --v19;
      --v18;
    }
    while (v18);
  }
  sub_22E48F084(v32);
  sub_22E48F084(v33);
  return sub_22E619DE8(a1, 0);
}

llvm::Value *sub_22F25BC50(uint64_t a1, _OWORD *a2, unint64_t a3, void (*a4)(_QWORD *, void **, uint64_t), int a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  int8x16_t v19;
  uint64_t v20;
  _DWORD *v21;
  __int128 v22;
  unint64_t v24;
  _OWORD v25[3];
  uint64_t v26[4];
  __int16 v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[18];

  v40[16] = *MEMORY[0x24BDAC8D0];
  v38 = v40;
  v39 = 0x1000000000;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v13 = *(_QWORD *)(v12 + 16816);
  sub_22EA41AB8((uint64_t)v28, 62, 0, 0);
  v30 = 0;
  v31 = v13;
  v32 = 0;
  v33 = 0;
  v34 = v12 | 2;
  v35 = v28;
  v36 = 0;
  v28[0] = &off_24FAC3008;
  v37 = 1310720;
  v29 |= 0x200u;
  v14 = v39;
  if (v39 >= HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v39;
  }
  *((_QWORD *)v38 + v14) = v28;
  LODWORD(v39) = v39 + 1;
  v15 = sub_22F24E348(*(_QWORD *)(a1 + 144) + 280, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16392), (uint64_t *)&v38);
  v16 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, v15);
  v17 = *(_QWORD *)(a1 + 144);
  v26[0] = (uint64_t)"__cxx_global_array_dtor";
  v27 = 259;
  v18 = sub_22E4CF82C(v17, v16, (uint64_t)v26, v15, *(_DWORD *)(a6 + 24), 0, 7);
  v20 = *(_QWORD *)(a6 + 56);
  if ((v20 & 4) != 0 && (v24 = v20 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v24 + 16)))
    v21 = **(_DWORD ***)(v24 + 24);
  else
    v21 = (_DWORD *)(a6 + 64);
  *(_DWORD *)(a1 + 5848) = *v21;
  sub_22E61A8FC(a1, a6 & 0xFFFFFFFFFFFFFFF8 | 3, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16392), v18, v15, (uint64_t *)&v38, 0, v19, 0);
  v26[0] = 0;
  v26[1] = a1;
  sub_22E48EE24(v26, 0, 0);
  v22 = a2[1];
  v25[0] = *a2;
  v25[1] = v22;
  v25[2] = a2[2];
  sub_22F25A27C((_QWORD *)a1, (uint64_t)v25, a3, a4, a5);
  sub_22E619DE8(a1, 0);
  sub_22E48F084(v26);
  if (v38 != v40)
    free(v38);
  return v18;
}

unint64_t sub_22F25BEB0(uint64_t a1)
{
  llvm::PointerType::get();
  return llvm::ConstantExpr::getBitCast() & 0xFFFFFFFFFFFFFFF8 | ((__clz(1 << (*(_BYTE *)(a1 + 8) & 7 | (8 * (*(_DWORD *)a1 & 7u)))) ^ 0x3F) >> 3);
}

uint64_t sub_22F25BF3C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v10;

  v6 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = &v6[5 * *(unsigned int *)(a1 + 8)];
  *v7 = *a2;
  v7[1] = 6;
  v8 = *a3;
  v7[2] = 0;
  v7[3] = v8;
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v7 + 1));
  v7[4] = 0;
  sub_22F25C014(a1, v6);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = 0;
  return (uint64_t)&v6[5 * v10 - 5];
}

uint64_t sub_22F25C014(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD **)result;
    v6 = 40 * v2;
    do
    {
      result = (uint64_t)sub_22F25C0B0(a2, v5);
      v5 += 5;
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 40 * v7;
      do
      {
        v10 = *(_QWORD *)(v8 + v9 - 16);
        if (v10 != -8192 && v10 != -4096 && v10 != 0)
          result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v8 + v9 - 32));
        v9 -= 40;
      }
      while (v9);
    }
  }
  return result;
}

_QWORD *sub_22F25C0B0(_QWORD *a1, _QWORD *a2)
{
  llvm::ValueHandleBase *v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = 6;
  v4 = (llvm::ValueHandleBase *)(a1 + 1);
  v5 = a2[3];
  a1[2] = 0;
  a1[3] = v5;
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(v4, (llvm::ValueHandleBase **)(a2[1] & 0xFFFFFFFFFFFFFFF8));
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_22F25C114(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
    return 1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  if (v4 < v3)
    return 1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= v6)
    return v6 < v5;
  else
    return 0xFFFFFFFFLL;
}

void **sub_22F25C174(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;
  void **v7;
  char *v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v7 = result;
    v8 = (char *)*result;
    v3 = 40 * v2;
    do
    {
      v4 = *(_QWORD *)&v8[v3 - 16];
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v8[v3 - 32]);
      v3 -= 40;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_22F25C210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  size_t v5;
  unsigned int v7;
  unsigned int v8;
  char v9;

  v2 = llvm::FunctionType::get();
  v3 = *(_QWORD *)(a1 + 152);
  if ((*(_QWORD *)v3 & 0x100) == 0)
    goto LABEL_18;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 148);
  if (v7 < 0xB)
  {
    v4 = "_ZSt9terminatev";
    v5 = 15;
    return sub_22E633A04(a1, v2, v4, v5, 0, 0, 0);
  }
  if (v7 == 11)
  {
    v8 = *(_DWORD *)(v3 + 192);
    if (v8 <= 0xB532B7F)
      v4 = "?terminate@@YAXXZ";
    else
      v4 = "__std_terminate";
    if (v8 <= 0xB532B7F)
      v5 = 17;
    else
      v5 = 15;
  }
  else
  {
LABEL_18:
    if ((*(_QWORD *)v3 & 0x4000) != 0 && (sub_22F25C2E0(v3 + 400), (v9 & 1) != 0))
    {
      v4 = "objc_terminate";
      v5 = 14;
    }
    else
    {
      v4 = "abort";
      v5 = 5;
    }
  }
  return sub_22E633A04(a1, v2, v4, v5, 0, 0, 0);
}

void sub_22F25C2E0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_22F25C310()
{
  return 0;
}

void sub_22F25C344()
{
  JUMPOUT(0x22F25C328);
}

char **sub_22F25C350(char **result)
{
  char *v1;
  char **v2;
  const char **v3;
  const char *v4;
  llvm::Function *v5;
  int v6;
  uint64_t v7;

  v1 = result[19];
  if ((~*(_DWORD *)v1 & 0x4100) == 0 && (*((_QWORD *)v1 + 1) & 0x100000000000) != 0 && *((_DWORD *)v1 + 100) <= 4u)
  {
    v7 = (uint64_t)result;
    v2 = sub_22E4D1D58((uint64_t)result, 0);
    result = sub_22E4D1F38(*(_QWORD *)(v7 + 216), *(_QWORD *)(v7 + 152));
    if (v2 != result)
    {
      v3 = (const char **)result;
      v4 = *v2;
      if (v4)
        strlen(v4);
      result = (char **)llvm::Module::getFunction();
      if (result)
      {
        v5 = (llvm::Function *)result;
        if (result[1])
        {
          v6 = sub_22E4D1FE4((uint64_t)result);
          result = (char **)v7;
          if (v6)
          {
            result = (char **)sub_22E4D21C8(v7, v3);
            if (*(char **)v5 == *result)
            {
              llvm::Value::replaceAllUsesWith();
              return (char **)llvm::Function::eraseFromParent(v5);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F25C464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  llvm::Type *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  result = *(_QWORD *)(a1 + 2656);
  if (!result)
  {
    v5 = *(llvm::Type **)(a1 + 96);
    v8 = "exn.slot";
    v9 = 259;
    result = sub_22E4D8348(a1, v5, (uint64_t)&v8, 0);
    *(_QWORD *)(a1 + 2656) = result;
  }
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(unsigned __int8 *)(a1 + 130);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_22F25C4D8(uint64_t a1)
{
  uint64_t *v1;
  _BYTE v3[48];

  v1 = (uint64_t *)(a1 + 272);
  sub_22F25C464(a1, (uint64_t)v3);
  return sub_22E3C43AC(v1, (uint64_t)v3, "exn");
}

uint64_t sub_22F25C518(_QWORD *a1)
{
  uint64_t v2;
  llvm::Type *v3;
  uint64_t v4;
  _QWORD v6[3];
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v2 = a1[333];
  if (!v2)
  {
    v3 = (llvm::Type *)a1[3];
    v10 = "ehselector.slot";
    v11 = 259;
    v2 = sub_22E4D8348((uint64_t)a1, v3, (uint64_t)&v10, 0);
    a1[333] = v2;
  }
  v4 = a1[3];
  v6[0] = v2;
  v6[1] = v4;
  v6[2] = 4;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  return sub_22E3C43AC(a1 + 34, (uint64_t)v6, "sel");
}

uint64_t sub_22F25C5A0(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  __int16 v15;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 32)
    {
      sub_22EFF605C(a2);
      v7 = v6;
      LOBYTE(v12) = 89;
      if (byte_255E04EB3)
        sub_22F3F189C(89);
      v14 = v5;
      v13 = v7;
      v8 = a1[18];
      v9 = *(_QWORD *)(v8 + 784);
      if (!v9)
      {
        sub_22F298C2C((_QWORD *)a1[18]);
        v9 = *(_QWORD *)(v8 + 784);
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *, const char **, _QWORD))(*(_QWORD *)v9 + 288))(v9, a1, &v12, 0);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1[18] + 224) + 224))(*(_QWORD *)(a1[18] + 224), a1, a2);
    }
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1[18] + 224) + 216))(*(_QWORD *)(a1[18] + 224), a1, 1);
  }
  if (a3)
  {
    v12 = "throw.cont";
    v15 = 259;
    v11 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    return sub_22E5ED9B4(a1, v11, 0);
  }
  return result;
}

void sub_22F25C700(uint64_t a1, uint64_t a2)
{
  sub_22F25C748(a1, a2);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 16), 0, 0);
  sub_22E4D2C10(a1, a2, 0);
}

uint64_t sub_22F25C748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;

  v4 = *(unsigned int *)(a2 + 12);
  result = (uint64_t)sub_22F253090((uint64_t *)(a1 + 1984), *(_DWORD *)(a2 + 12));
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)(result + 48);
    v7 = (uint64_t *)(a2 + 24);
    do
    {
      v8 = *v7;
      v24[0] = "catch";
      v25 = 259;
      v9 = operator new();
      llvm::BasicBlock::BasicBlock();
      if (*(_QWORD *)(v8 + 16))
      {
        v24[0] = 0;
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
        v23 = sub_22F3F2D3C(v8);
        v11 = sub_22E4D27F8(&v23);
        v12 = sub_22EF67F34(v10, v11, v24);
        v13 = *(_QWORD *)(a1 + 144);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 32)
        {
          v14 = *(_QWORD *)(v13 + 784);
          if (!v14)
          {
            sub_22F298C2C(*(_QWORD **)(a1 + 144));
            v14 = *(_QWORD *)(v13 + 784);
          }
          result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 48))(v14, v12);
          v15 = 0;
        }
        else
        {
          v21 = *(_QWORD *)(v13 + 224);
          v22 = sub_22F3F2D3C(v8);
          result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v21 + 272))(v21, v12, v22);
        }
        *(v6 - 2) = result;
        *(v6 - 1) = v15;
        *v6 = v9;
      }
      else
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 280))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224));
        *(v6 - 2) = result;
        *(v6 - 1) = v16;
        *v6 = v9;
        v17 = *(_QWORD *)(a1 + 144);
        if ((*(_QWORD *)(*(_QWORD *)(v17 + 152) + 8) & 0x800000000000) != 0)
        {
          v18 = llvm::FunctionType::get();
          v19 = sub_22E633A04(v17, v18, "llvm.seh.try.begin", 18, 0, 0, 0);
          v25 = 257;
          result = sub_22F24F1F4((_QWORD *)a1, v19, v20, 0, 0, (uint64_t)v24);
          *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
        }
      }
      v6 += 3;
      ++v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

llvm::BasicBlock *sub_22F25C964(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v11;
  llvm::BasicBlock *result;

  v4 = a1[200];
  if (!v4)
    v4 = a1[236];
  v5 = a1[18];
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 52 >= 6)
      v6 = 0;
    else
      v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = sub_22E4D1D58(v5, v6);
  if (v7 == &off_24FA63A70 || v7 == &off_24FA63A60 || v7 == &off_24FA63A80 || v7 == &off_24FA63A90)
    return sub_22F25CB00(a1, a2);
  if (!a2)
    return (llvm::BasicBlock *)sub_22E4D3138(a1, 1);
  v11 = a1[249] - a2;
  result = *(llvm::BasicBlock **)(v11 + 8);
  if (!result)
  {
    switch(*(_BYTE *)(v11 + 24) & 7)
    {
      case 0:
      case 3:
        goto LABEL_27;
      case 1:
        if ((*(_DWORD *)(v11 + 24) & 0xFFFFFFF8) == 8 && !*(_QWORD *)(v11 + 32))
        {
          result = *(llvm::BasicBlock **)(v11 + 48);
        }
        else
        {
LABEL_27:
          operator new();
          result = (llvm::BasicBlock *)llvm::BasicBlock::BasicBlock();
        }
        break;
      case 2:
        result = (llvm::BasicBlock *)sub_22F25CCB4(a1);
        break;
      default:
        result = 0;
        break;
    }
    *(_QWORD *)(v11 + 8) = result;
  }
  return result;
}

llvm::BasicBlock *sub_22F25CB00(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  llvm::BasicBlock *v4;
  int v6;
  void *v7[2];
  _WORD v8[16];
  llvm::BasicBlock *v9;
  char *v10;
  uint64_t Context;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v3 = a1[249] - a2;
  v4 = *(llvm::BasicBlock **)(v3 + 8);
  if (!v4)
  {
    if ((*(_BYTE *)(v3 + 24) & 7) == 2)
    {
      v4 = (llvm::BasicBlock *)sub_22F25CDF4(a1);
    }
    else
    {
      v8[8] = 257;
      v4 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
    }
    v7[0] = v8;
    v7[1] = (void *)0x200000000;
    Context = llvm::BasicBlock::getContext(v4);
    v12 = &v20;
    v13 = v21;
    v14 = 0;
    v15 = 0;
    v16 = 512;
    v17 = 7;
    v18 = 0;
    v19 = 0;
    v20 = MEMORY[0x24BED83B8] + 16;
    v21[0] = &off_24FA66C70;
    v9 = v4;
    v10 = (char *)v4 + 40;
    v21[1] = 0;
    v21[2] = a1;
    v6 = *(_BYTE *)(v3 + 24) & 7;
    if ((*(_BYTE *)(v3 + 24) & 7) == 0 || v6 == 2 || v6 == 1)
      llvm::Value::setName();
    *(_QWORD *)(v3 + 8) = v4;
    sub_22E4D6138(v7);
  }
  return v4;
}

uint64_t sub_22F25CCB4(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  _QWORD v9[4];
  __int16 v10;

  result = a1[746];
  if (!result)
  {
    v9[0] = "terminate.handler";
    v10 = 259;
    operator new();
    v3 = llvm::BasicBlock::BasicBlock();
    a1[746] = v3;
    v5 = a1[40];
    v4 = a1[41];
    a1[40] = v3;
    a1[41] = v3 + 40;
    v6 = a1[18];
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 152) + 1) & 1) != 0)
    {
      sub_22F25C464((uint64_t)a1, (uint64_t)v9);
      v7 = sub_22E3C43AC(a1 + 34, (uint64_t)v9, "exn");
      v6 = a1[18];
    }
    else
    {
      v7 = 0;
    }
    v8 = (llvm::Value *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 224) + 256))(*(_QWORD *)(v6 + 224), a1, v7);
    llvm::Value::getContext(v8);
    *((_QWORD *)v8 + 8) = llvm::AttributeList::addAttributeAtIndex();
    sub_22F24866C((uint64_t)(a1 + 34));
    if (v5)
    {
      sub_22E3CB840((uint64_t)(a1 + 34), v5, v4);
    }
    else
    {
      a1[40] = 0;
      a1[41] = 0;
    }
    return a1[746];
  }
  return result;
}

uint64_t sub_22F25CDF4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10[4];
  __int16 v11;

  v10[0] = a1[327];
  v2 = (uint64_t *)sub_22F25D678((uint64_t)(a1 + 751), v10);
  result = *v2;
  if (!*v2)
  {
    v5 = a1[40];
    v4 = a1[41];
    a1[40] = 0;
    a1[41] = 0;
    v10[0] = (uint64_t)"terminate.handler";
    v11 = 259;
    operator new();
    v6 = llvm::BasicBlock::BasicBlock();
    *v2 = v6;
    a1[40] = v6;
    a1[41] = v6 + 40;
    v7 = a1[327];
    v8 = v7;
    if (!v7)
      v8 = llvm::ConstantTokenNone::get(*(llvm::ConstantTokenNone **)(a1[18] + 232), 0);
    v11 = 257;
    a1[327] = sub_22F253320(a1 + 34, v8, 0, 0, (uint64_t)v10);
    v9 = (llvm::Value *)(*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1[18] + 224) + 256))(*(_QWORD *)(a1[18] + 224), a1, 0);
    llvm::Value::getContext(v9);
    *((_QWORD *)v9 + 8) = llvm::AttributeList::addAttributeAtIndex();
    sub_22F24866C((uint64_t)(a1 + 34));
    if (v5)
    {
      sub_22E3CB840((uint64_t)(a1 + 34), v5, v4);
    }
    else
    {
      a1[40] = 0;
      a1[41] = 0;
    }
    result = *v2;
    a1[327] = v7;
  }
  return result;
}

uint64_t sub_22F25CF64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  llvm::Function *v8;
  llvm::Constant *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(v2 + 152);
  if ((*(_QWORD *)(v3 + 8) & 0x1100000000000) != 0x100000000000
    && ((*(_BYTE *)v3 & 0xA0) == 0 || !*(_QWORD *)(a1 + 1888))
    || (*(_BYTE *)(v3 + 68) & 0x20) != 0 && (*(_WORD *)(v3 + 96) & 0x80) != 0)
  {
    return 0;
  }
  v4 = **(_QWORD **)(a1 + 2000);
  if (!v4)
  {
    v5 = *(_QWORD *)(a1 + 1600);
    if (!v5)
      v5 = *(_QWORD *)(a1 + 1888);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 28) & 0x7Eu) - 52 >= 6)
        v6 = 0;
      else
        v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    v7 = sub_22E4D1D58(v2, v6);
    v8 = *(llvm::Function **)(a1 + 1624);
    if ((*((_WORD *)v8 + 9) & 8) == 0)
    {
      v9 = (llvm::Constant *)sub_22E4D3430(*(_QWORD *)(a1 + 144), (const char **)v7);
      llvm::Function::setPersonalityFn(v8, v9);
    }
    if (v7 == &off_24FA63A70 || v7 == &off_24FA63A60 || v7 == &off_24FA63A80 || v7 == &off_24FA63A90)
      v10 = (uint64_t)sub_22F25C964((_QWORD *)a1, *(_QWORD *)(a1 + 2016));
    else
      v10 = sub_22E4D3488(a1);
    v4 = v10;
    v11 = *(_QWORD *)(a1 + 2000);
    for (i = v11; ; v11 = i)
    {
      *(_QWORD *)v11 = v4;
      if ((*(_DWORD *)(v11 + 24) & 0x17) != 0)
        break;
      sub_22E47E120(&i);
    }
  }
  return v4;
}

uint64_t sub_22F25D0D4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  llvm::Function *v9;
  llvm::Constant *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::PointerType *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  _DWORD v17[8];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 5960);
  if (!result)
  {
    v4 = *(_QWORD *)(a1 + 320);
    v3 = *(_QWORD *)(a1 + 328);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    v19[0] = "terminate.lpad";
    v20 = 259;
    operator new();
    v5 = llvm::BasicBlock::BasicBlock();
    v6 = 0;
    *(_QWORD *)(a1 + 5960) = v5;
    *(_QWORD *)(a1 + 320) = v5;
    *(_QWORD *)(a1 + 328) = v5 + 40;
    v7 = *(_QWORD *)(a1 + 1600);
    if (!v7)
      v7 = *(_QWORD *)(a1 + 1888);
    if (v7)
    {
      if ((*(_DWORD *)(v7 + 28) & 0x7Eu) - 52 >= 6)
        v6 = 0;
      else
        v6 = v7;
    }
    v8 = sub_22E4D1D58(*(_QWORD *)(a1 + 144), v6);
    v9 = *(llvm::Function **)(a1 + 1624);
    if ((*((_WORD *)v9 + 9) & 8) == 0)
    {
      v10 = (llvm::Constant *)sub_22E4D3430(*(_QWORD *)(a1 + 144), (const char **)v8);
      llvm::Function::setPersonalityFn(v9, v10);
    }
    v11 = *(_QWORD *)(a1 + 24);
    v19[0] = *(_QWORD *)(a1 + 96);
    v19[1] = v11;
    llvm::StructType::get();
    v18 = 257;
    v20 = 257;
    v12 = llvm::LandingPadInst::Create();
    sub_22F245A34((uint64_t *)(a1 + 272), v12, (uint64_t)v17);
    llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a1 + 96), v13);
    llvm::LandingPadInst::addClause();
    v14 = *(_QWORD *)(a1 + 144);
    if ((*(_BYTE *)(*(_QWORD *)(v14 + 152) + 1) & 1) != 0)
    {
      v17[0] = 0;
      v20 = 257;
      v15 = sub_22E3C2EA8(a1 + 272, v12, (uint64_t)v17, 1, (uint64_t)v19);
      v14 = *(_QWORD *)(a1 + 144);
    }
    else
    {
      v15 = 0;
    }
    v16 = (llvm::Value *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 224) + 256))(*(_QWORD *)(v14 + 224), a1, v15);
    llvm::Value::getContext(v16);
    *((_QWORD *)v16 + 8) = llvm::AttributeList::addAttributeAtIndex();
    sub_22F24866C(a1 + 272);
    if (v4)
    {
      sub_22E3CB840(a1 + 272, v4, v3);
    }
    else
    {
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
    }
    return *(_QWORD *)(a1 + 5960);
  }
  return result;
}

uint64_t sub_22F25D300(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 24);
  if (v1 >= 8)
  {
    v2 = v1 >> 3;
    v3 = (uint64_t *)(result + 48);
    do
    {
      result = *v3;
      if (*v3)
      {
        v4 = MEMORY[0x23489C078]();
        result = MEMORY[0x2348A0E9C](v4, 0x1020C4012B667A0);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

char *sub_22F25D358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  llvm::LLVMContext *v19;
  llvm::Type *Int1Ty;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *result;
  _QWORD v26[4];
  __int16 v27;

  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_DWORD *)(a9 + 12) != 1)
  {
    v15 = *(llvm::Type **)(a2 + 96);
    v26[0] = "finally.exn";
    v27 = 259;
    *(_QWORD *)(a1 + 48) = sub_22E4D8348(a2, v15, (uint64_t)v26, 0);
  }
  v16 = sub_22F24F15C(a2);
  v17 = *(_QWORD *)(a2 + 2008);
  v18 = *(_DWORD *)(a2 + 2640);
  *(_DWORD *)(a2 + 2640) = v18 + 1;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 16) = v18;
  Int1Ty = (llvm::Type *)llvm::Type::getInt1Ty(*(llvm::Type **)(a2 + 336), v19);
  v26[0] = "finally.for-eh";
  v27 = 259;
  *(_QWORD *)(a1 + 40) = sub_22E4D8348(a2, Int1Ty, (uint64_t)v26, 0);
  sub_22F253C78(a2 + 272, 0);
  v22 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  v23 = sub_22E4899EC(a2 + 1984, 2u, 64);
  *(_QWORD *)v23 = off_24FA639F8;
  *((_QWORD *)v23 + 1) = a3;
  *((_QWORD *)v23 + 2) = v22;
  *((_QWORD *)v23 + 3) = a6;
  *((_QWORD *)v23 + 4) = a7;
  *((_QWORD *)v23 + 5) = a9;
  *((_QWORD *)v23 + 6) = a10;
  *((_QWORD *)v23 + 7) = v21;
  v26[0] = "finally.catchall";
  v27 = 259;
  v24 = operator new();
  llvm::BasicBlock::BasicBlock();
  result = sub_22F253090((uint64_t *)(a2 + 1984), 1u);
  *((_QWORD *)result + 4) = 0;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = v24;
  return result;
}

_QWORD *sub_22F25D4E4(__int128 *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::Type **v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;

  v4 = *(_QWORD **)(*(_QWORD *)(a2 + 2000) + 48);
  sub_22E4D3A14((_QWORD *)a2);
  if (v4[1])
  {
    v8 = *(_QWORD *)(a2 + 320);
    v7 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
    sub_22E5ED9B4((_QWORD *)a2, v4, 0);
    v15 = 0;
    if (*((_QWORD *)a1 + 4))
    {
      sub_22F25C464(a2, (uint64_t)v16);
      v15 = sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v16, "exn");
      v9 = *((_QWORD *)a1 + 3);
      v10 = (llvm::Value *)*((_QWORD *)a1 + 4);
      v17 = 257;
      sub_22F24EEDC(a2, v9, v10, (uint64_t)&v15, 1, (uint64_t)v16);
    }
    v11 = *((_QWORD *)a1 + 6);
    if (v11)
    {
      v12 = (llvm::Type **)v15;
      if (!v15)
      {
        sub_22F25C464(a2, (uint64_t)v16);
        v12 = (llvm::Type **)sub_22E3C43AC((uint64_t *)(a2 + 272), (uint64_t)v16, "exn");
        v15 = (uint64_t)v12;
        v11 = *((_QWORD *)a1 + 6);
      }
      sub_22E3C1B6C((uint64_t *)(a2 + 272), v12, v11, (63 - __clz(*(unsigned __int8 *)(a2 + 130))) | 0x100);
    }
    sub_22F253C78(a2 + 272, (llvm::LLVMContext *)1);
    v13 = *a1;
    v14 = *((_QWORD *)a1 + 2);
    sub_22E48BA00((_QWORD *)a2, (uint64_t)&v13);
    if (v8)
    {
      sub_22E3CB840(a2 + 272, v8, v7);
    }
    else
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
    }
  }
  else
  {
    v5 = MEMORY[0x23489C078](v4);
    MEMORY[0x2348A0E9C](v5, 0x1020C4012B667A0);
  }
  return sub_22E48A190(a2, 0);
}

uint64_t sub_22F25D678(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F25DF2C((uint64_t)&v11, a1, &v13, &v14);
  v4 = v11;
  if (v12)
  {
    v10 = (unint64_t)*a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

_QWORD *sub_22F25D734(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _WORD v20[64];
  _QWORD *v21[2];
  int v22;

  sub_22E4D4524();
  v20[0] = 261;
  v16 = "__try.__leave";
  v17 = 13;
  operator new();
  v4 = (_QWORD *)llvm::BasicBlock::BasicBlock();
  v5 = *(_QWORD **)(a1 + 2008);
  v6 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v6 + 1;
  v21[0] = v4;
  v21[1] = v5;
  v22 = v6;
  v7 = *(_DWORD *)(a1 + 2592);
  if (v7 >= *(_DWORD *)(a1 + 2596))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a1 + 2592);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 2584) + 8 * v7) = v21;
  ++*(_DWORD *)(a1 + 2592);
  v8 = *(_QWORD *)(a1 + 144);
  if ((*(_QWORD *)(*(_QWORD *)(v8 + 152) + 8) & 0x800000000000) != 0
    && (v11 = llvm::FunctionType::get(),
        v12 = sub_22E633A04(v8, v11, "llvm.seh.try.begin", 18, 0, 0, 0),
        v20[0] = 257,
        v14 = sub_22F24F1F4((_QWORD *)a1, v12, v13, 0, 0, (uint64_t)&v16),
        *(_WORD *)(v14 + 18) = *(_WORD *)(v14 + 18) & 0xF003 | (4 * *(_WORD *)(a1 + 136)),
        *(_DWORD *)(a1 + 2592) == 1))
  {
    v15 = *(_QWORD **)(a1 + 320);
    sub_22E5E5158(a1, *(_QWORD *)(a2 + 16), 0, 0);
    if (v15)
    {
      v16 = (const char *)v20;
      v17 = (uint64_t)v20;
      v18 = 16;
      v19 = 0;
      sub_22E4D48D4(a1, v15, (uint64_t)&v16);
      if ((const char *)v17 != v16)
        free((void *)v17);
    }
  }
  else
  {
    sub_22E5E5158(a1, *(_QWORD *)(a2 + 16), 0, 0);
  }
  --*(_DWORD *)(a1 + 2592);
  if (v21[0][1])
  {
    sub_22E5ED9B4((_QWORD *)a1, v21[0], 1);
  }
  else
  {
    v10 = MEMORY[0x23489C078](v21[0]);
    MEMORY[0x2348A0E9C](v10, 0x1020C4012B667A0);
  }
  return sub_22E4D4B00(a1, a2);
}

uint64_t sub_22F25D960(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;

  sub_22E4D56A4(a1, a2, 0, a3);
  sub_22E5E5158(a1, a3, 0, 0);
  sub_22F0D60E4((uint64_t)a3);
  sub_22E619DE8(a1, v5);
  return *(_QWORD *)(a1 + 1624);
}

uint64_t sub_22F25D9B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v2 = *(_QWORD *)(a1 + 1624);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 1624));
  v3 = *(_QWORD *)(v2 + 88);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = 257;
  return sub_22E3C1740((uint64_t *)(a1 + 272), 39, v3, v4, (uint64_t)v6);
}

_QWORD *sub_22F25DA10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *result;
  __int128 v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 320))
    sub_22E5E5100(a1, a2);
  v3 = *(unsigned int *)(a1 + 2592);
  if ((_DWORD)v3)
  {
    v4 = *(__int128 **)(*(_QWORD *)(a1 + 2584) + 8 * v3 - 8);
    v5 = *((_QWORD *)v4 + 2);
    v7 = *v4;
    v8 = v5;
    return sub_22E48BA00((_QWORD *)a1, (uint64_t)&v7);
  }
  else
  {
    result = (_QWORD *)sub_22F24866C(a1 + 272);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  return result;
}

uint64_t sub_22F25DA88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = llvm::User::operator new((llvm::User *)0x40);
  llvm::FuncletPadInst::FuncletPadInst();
  sub_22F245A34(a1, v7, a5);
  return v7;
}

uint64_t sub_22F25DB24(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  _BYTE v7[24];

  result = (uint64_t)sub_22F25DBA4((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

_QWORD *sub_22F25DBA4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F25DC64(a2, a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F25DD14((_DWORD *)a2, (uint64_t)a3, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F25DC64(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F25DD14(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E4D61F4((uint64_t)a1, v7);
  v9 = 0;
  sub_22F25DC64((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22F25DDD0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F25DC64((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F25DE94(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a3 - __src) >> 3);
  v8 = *(unsigned int *)(result + 8);
  if (v7 + v8 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 24 * v8), __src, v6);
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v8 + v7;
  return result;
}

uint64_t sub_22F25DF2C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_22E4D6980(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E4D6A14(a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F25DFC4(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E4D6DA8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E4D6E3C(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F25E05C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E4D6DA8(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F25E108(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25E168((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F25E168(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E3D01CC(a1, v7);
  v9 = 0;
  sub_22F246C54((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F25E214(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t Int8PtrTy;
  _BYTE v8[32];
  __int16 v9;

  v2 = a2;
  v4 = *a2;
  v5 = *(_DWORD *)(*a2 + 8);
  if (v5 >= 0x100)
  {
    Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a1[18] + 232), (llvm::LLVMContext *)(v5 >> 8));
    v4 = *v2;
  }
  else
  {
    Int8PtrTy = a1[12];
  }
  if (v4 != Int8PtrTy)
  {
    v9 = 257;
    return sub_22E3C1740(a1 + 34, 49, (uint64_t)v2, Int8PtrTy, (uint64_t)v8);
  }
  return (uint64_t)v2;
}

uint64_t sub_22F25E298(uint64_t a1, uint64_t a2, int a3)
{
  const void *v6;
  size_t v7;
  size_t v8;

  v6 = (const void *)sub_22F29EDF0(dword_22F457698[a3]);
  v8 = v7;
  sub_22F29EE0C(a3);
  return sub_22E4EA298(a1, a2, 0x19u, v6, v8);
}

uint64_t sub_22F25E308(uint64_t a1, llvm::APInt *this, llvm::Constant *a3)
{
  unsigned int v6;
  llvm::DataLayout *DataLayout;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v6 = *((_DWORD *)this + 2);
  if (v6 <= 0x40)
  {
    if (*(_QWORD *)this)
      goto LABEL_3;
    return llvm::Constant::getNullValue(a3, this);
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v6)
    return llvm::Constant::getNullValue(a3, this);
LABEL_3:
  if (*((_BYTE *)a3 + 8) == 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 200));
    llvm::DataLayout::getIntPtrType(DataLayout, a3);
    v8 = llvm::ConstantInt::get();
    v11 = 257;
    return sub_22E3C1740((uint64_t *)(a1 + 272), 48, v8, (uint64_t)a3, (uint64_t)v10);
  }
  else if (*((_BYTE *)this + 12))
  {
    return llvm::ConstantInt::get();
  }
  else
  {
    return llvm::ConstantInt::getSigned();
  }
}

uint64_t sub_22F25E470(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1848);
  if (!result)
  {
    *(_QWORD *)(a1 + 1848) = llvm::Instruction::clone(*(llvm::Instruction **)(a1 + 1840));
    llvm::Value::setName();
    llvm::Instruction::insertAfter(*(llvm::Instruction **)(a1 + 1848), *(llvm::Instruction **)(a1 + 1840));
    return *(_QWORD *)(a1 + 1848);
  }
  return result;
}

unint64_t sub_22F25E4D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v8;

  v8 = sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
  return sub_22E4D85B8(a1, a2, v8, a3, a4);
}

unint64_t sub_22F25E524(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  llvm::Type *v7;

  v7 = (llvm::Type *)sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a2, 0);
  return sub_22E4D82D4(a1, v7, a3, a4, 0);
}

_QWORD *sub_22F25E574(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v20;
  _QWORD v22[3];
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  __int16 v36;
  _QWORD v37[3];
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v5 = *(_QWORD *)(a3 + 8);
  if (sub_22E619D68(v5) == 2)
  {
    v35 = "agg.tmp";
    v36 = 259;
    sub_22E4211F0((uint64_t)a2, v5, (uint64_t)&v35, 0, (uint64_t)v37);
    v8 = v37[0];
    v7 = v37[1];
    v9 = v37[2];
    v10 = v38;
    v6 = v39;
    v12 = v40;
    v11 = v41;
    v13 = v42;
    v14 = v43;
    v15 = a2[18];
    if ((*(_BYTE *)(*(_QWORD *)(v15 + 152) + 104) & 0x20) != 0)
    {
      v20 = v39;
      v16 = sub_22EF5BA38(*(_QWORD *)(v15 + 144), *(_QWORD *)(a3 + 8));
      v17 = sub_22F10C618(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0));
      v6 = v20;
      if (v17)
      {
        v18 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)&v29 = v8;
        *((_QWORD *)&v29 + 1) = v7;
        v30 = v9;
        v31 = v10;
        v32 = v20;
        v33 = v12;
        v34 = v11;
        sub_22E486680(a2, v18, &v29, 0);
        v6 = v20;
      }
    }
  }
  else
  {
    v13 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v9 = 0;
    v7 = 0;
    v8 = 0;
    v14 = 0;
  }
  v22[0] = v8;
  v22[1] = v7;
  v22[2] = v9;
  v23 = v10;
  v24 = v6;
  v25 = v12;
  v26 = v11;
  v27 = v13;
  v28 = v14;
  return sub_22E4D79C0(a1, a2, a3, v22, 0);
}

uint64_t sub_22F25E6C8(unsigned int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  result = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v4 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 <= 2
      && (*(_QWORD *)(result + 128)
       || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 104) + 96), *(_QWORD *)(result + 104)), *(_QWORD *)(v4 + 128)))
      && (sub_22E463414(v4) ? (v5 = a1 > 0xB) : (v5 = 1), !v5))
    {
      return (0xAD8u >> a1) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Value *sub_22F25E758(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  llvm::Value *v5;
  uint64_t *v7;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t String;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 144);
  v17 = (void *)a2;
  v5 = (llvm::Value *)sub_22F2613A4((uint64_t *)(v4 + 1984), &v17)[1];
  if (!v5)
  {
    v7 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22E479BE0(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)))
    {
      __clz(sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *v7));
      sub_22F110930(*v7);
    }
    else if (sub_22F10E0EC(*v7))
    {
      sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *v7);
    }
    v17 = v19;
    v18 = xmmword_22F44E330;
    (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 208) + 200))(9, a2, 0, 0, 0, 0, 0, 0, &v17, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 208) + 192), 0, 0);
    llvm::Type::getInt16Ty(*(llvm::Type **)(a1 + 336), v8);
    v14 = llvm::ConstantInt::get();
    llvm::Type::getInt16Ty(*(llvm::Type **)(a1 + 336), v9);
    v15 = llvm::ConstantInt::get();
    String = llvm::ConstantDataArray::getString();
    llvm::ConstantStruct::getTypeForElements();
    llvm::ConstantStruct::get();
    v5 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
    v13 = 257;
    v10 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 + 32) & 0xFFFFFF3F | 0x80;
    sub_22F2A2EA8(*(uint64_t **)(*(_QWORD *)(a1 + 144) + 3480), v5);
    v11 = *(_QWORD *)(a1 + 144);
    v12[0] = a2;
    sub_22F2613A4((uint64_t *)(v11 + 1984), v12)[1] = v5;
    if (v17 != v19)
      free(v17);
  }
  return v5;
}

uint64_t sub_22F25E99C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  const char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v36[8];
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v10 = *(_OWORD *)(a3 + 112);
  v43 = *(_OWORD *)(a3 + 96);
  v44 = v10;
  v45 = *(_QWORD *)(a3 + 128);
  v11 = *(_OWORD *)(a3 + 48);
  v39 = *(_OWORD *)(a3 + 32);
  v40 = v11;
  v12 = *(_OWORD *)(a3 + 80);
  v41 = *(_OWORD *)(a3 + 64);
  v42 = v12;
  v13 = *(_OWORD *)(a3 + 16);
  v38[0] = *(_OWORD *)a3;
  v38[1] = v13;
  v14 = *(_DWORD *)(a2 + 4);
  v15 = (uint64_t *)(a1 + 272);
  v46 = a1;
  v47 = a1 + 272;
  v48 = 0;
  v16 = sub_22E5027E0((uint64_t)&v46, (uint64_t)v38, v14);
  v18 = v17;
  if (*(_BYTE *)(*(_QWORD *)v16 + 8) == 13)
  {
    v19 = a4 == 0;
    v20 = 1;
    if (v19)
      v21 = "dec";
    else
      v21 = "inc";
    v22 = llvm::ConstantInt::get();
    v50 = 1;
    if (*v21)
    {
      v46 = (uint64_t)v21;
      v20 = 3;
    }
    v49 = v20;
    v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), v16, v22, 0, 0);
    if (!v23)
    {
      LOWORD(v39) = 257;
      v24 = llvm::BinaryOperator::Create();
      v23 = sub_22E3C12C8(v15, v24, (uint64_t)&v46);
    }
  }
  else
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v25 || *(_BYTE *)(v25 + 16) != 12)
      v25 = sub_22F10CF48(v25);
    v26 = sub_22EF5B2E0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v25 + 32));
    v27 = 1;
    sub_22E4EEC3C((llvm::APFloatBase *)&v47, v26);
    if ((a4 & 1) != 0)
    {
      v28 = "inc";
    }
    else
    {
      sub_22E4DFCA0(&v46);
      v28 = "dec";
    }
    v29 = llvm::ConstantFP::get();
    BYTE1(v39) = 1;
    if (*v28)
    {
      *(_QWORD *)&v38[0] = v28;
      v27 = 3;
    }
    LOBYTE(v39) = v27;
    v23 = sub_22E42067C((uint64_t)v15, v16, v29, (uint64_t)v38, 0);
    sub_22E4EEC9C(&v47);
  }
  v30 = *(_OWORD *)(a3 + 112);
  v36[6] = *(_OWORD *)(a3 + 96);
  v36[7] = v30;
  v37 = *(_QWORD *)(a3 + 128);
  v31 = *(_OWORD *)(a3 + 48);
  v36[2] = *(_OWORD *)(a3 + 32);
  v36[3] = v31;
  v32 = *(_OWORD *)(a3 + 80);
  v36[4] = *(_OWORD *)(a3 + 64);
  v36[5] = v32;
  v33 = *(_OWORD *)(a3 + 16);
  v36[0] = *(_OWORD *)a3;
  v36[1] = v33;
  sub_22F262A44(a1, v23, v18, (uint64_t)v36, 0);
  v34 = *(_QWORD *)(a1 + 144);
  if (*(_DWORD *)(*(_QWORD *)(v34 + 152) + 72))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v34 + 808) + 616))(*(_QWORD *)(v34 + 808), a1, *(_QWORD *)(a2 + 16));
  if (a5)
    return v23;
  else
    return v16;
}

uint64_t sub_22F25EC48(llvm::Type *a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Constant **v4;
  uint64_t v5;
  BOOL v6;
  uint64_t NullValue;
  _BYTE v9[32];
  __int16 v10;

  v4 = *(llvm::Constant ***)a2;
  v5 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_BYTE *)(v5 + 16) == 31;
  else
    v6 = 0;
  if (v6)
    return (*(uint64_t (**)(_QWORD, llvm::Type *, llvm::Constant **, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 18) + 224)
                                                                                       + 200))(*(_QWORD *)(*((_QWORD *)a1 + 18) + 224), a1, v4, v5);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
  {
    v5 = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    if (v5)
      return (*(uint64_t (**)(_QWORD, llvm::Type *, llvm::Constant **, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 18) + 224)
                                                                                         + 200))(*(_QWORD *)(*((_QWORD *)a1 + 18) + 224), a1, v4, v5);
  }
  NullValue = llvm::Constant::getNullValue(*v4, a2);
  v10 = 257;
  return sub_22E3C18F4((uint64_t)a1 + 272, 33, (uint64_t *)v4, NullValue, (uint64_t)v9);
}

double sub_22F25ED04(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[40];
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  sub_22F297870(a2, a3, a4);
  v7 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), *(llvm::LLVMContext **)(a3 + 8));
  llvm::PointerType::get();
  v8 = llvm::UndefValue::get();
  v9 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v12 = v8;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = 1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v9, (uint64_t)v11);
  return sub_22E462E84(a2, &v12, v9, 2, (uint64_t)v11, a1);
}

double sub_22F25EDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[3];
  _BYTE v11[40];
  __int128 v12[3];

  v6 = *(_QWORD *)(a2 + 144);
  v7 = *(_QWORD *)(v6 + 784);
  if (!v7)
  {
    sub_22F298C2C(*(_QWORD **)(a2 + 144));
    v7 = *(_QWORD *)(v6 + 784);
  }
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v10, v7, a2, *(_QWORD *)(a3 + 16));
  v12[0] = v10[0];
  v12[1] = v10[1];
  v12[2] = v10[2];
  v8 = *(_QWORD *)(a3 + 8);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v8, (uint64_t)v11);
  return sub_22E462E84(a2, v12, v8, 0, (uint64_t)v11, a1);
}

double sub_22F25EE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[40];
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E6363A4(*(_QWORD *)(a2 + 144), a3);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = 1 << (v7 & 7 | (8 * (v6 & 7)));
  if (v6 < 8)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  v11 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v14 = v9;
  *((_QWORD *)&v14 + 1) = v8;
  v15 = v10;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v11, (uint64_t)v13);
  return sub_22E462E84(a2, &v14, v11, 0, (uint64_t)v13, a1);
}

double sub_22F25EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[40];
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_22E636808(*(_QWORD **)(a2 + 144), a3);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = 1 << (v7 & 7 | (8 * (v6 & 7)));
  if (v6 < 8)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  v11 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v14 = v9;
  *((_QWORD *)&v14 + 1) = v8;
  v15 = v10;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v11, (uint64_t)v13);
  return sub_22E462E84(a2, &v14, v11, 0, (uint64_t)v13, a1);
}

_QWORD *sub_22F25EFB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a3 + 1) & 3) != 0)
    return sub_22E4D8D7C(a1);
  else
    return (_QWORD *)sub_22F261638(a2, a3, (uint64_t)a1);
}

double sub_22F25EFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[40];
  __int128 v15[2];
  __int128 v16;

  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v15[0] = "tmp";
  LOWORD(v16) = 259;
  sub_22E4211F0(a2, v6, (uint64_t)v15, 0, (uint64_t)&v10);
  v9[0] = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  sub_22E4FC408(a2, a3, (uint64_t)v9);
  v15[0] = v10;
  v15[1] = v11;
  v16 = v12;
  v7 = *(_QWORD *)(a3 + 8);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v7, (uint64_t)v14);
  return sub_22E462E84(a2, v15, v7, 0, (uint64_t)v14, a1);
}

double sub_22F25F0B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12[3];
  _OWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[40];
  __int128 v19[2];
  __int128 v20;

  v6 = a3[1];
  *(_QWORD *)&v19[0] = "temp.lvalue";
  LOWORD(v20) = 259;
  sub_22E4211F0(a2, v6, (uint64_t)v19, 0, (uint64_t)&v14);
  BYTE8(v17) |= 1u;
  v7 = a3[3];
  v13[0] = v14;
  v13[1] = v15;
  v13[2] = v16;
  v13[3] = v17;
  sub_22E4EF100(a2, v7, v13);
  v9 = a3[1];
  v8 = a3[2];
  v12[0] = v14;
  v12[1] = v15;
  v12[2] = v16;
  sub_22F253510(a2, v8, v9, v12);
  v19[0] = v14;
  v19[1] = v15;
  v20 = v16;
  v10 = a3[1];
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v10, (uint64_t)v18);
  return sub_22E462E84(a2, v19, v10, 0, (uint64_t)v18, a1);
}

double sub_22F25F1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD v8[3];
  _BYTE v9[40];
  __int128 v10[3];

  sub_22E4EE438((uint64_t)v8, a2, a3);
  v6 = *(_QWORD *)(a3 + 8);
  v10[0] = v8[0];
  v10[1] = v8[1];
  v10[2] = v8[2];
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v6, (uint64_t)v9);
  return sub_22E462E84(a2, v10, v6, 0, (uint64_t)v9, a1);
}

void sub_22F25F230(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[13];

  v17[12] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x400000000;
  if ((*(_DWORD *)(a3 + 4) & 0x7FFFFFFF) != 2)
  {
    v6 = (uint64_t *)(a3 + 32);
    v7 = 8 * ((*(_DWORD *)(a3 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v8 = *v6++;
      sub_22F253B0C(a2, v8, *(_QWORD *)(v8 + 16), (uint64_t)&v14);
      v9 = sub_22E4EF088((uint64_t)&v15, (unint64_t)&v14, 1);
      v10 = (char *)v15 + 24 * v16;
      v11 = *(_OWORD *)v9;
      *((_QWORD *)v10 + 2) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v10 = v11;
      LODWORD(v16) = v16 + 1;
      v7 -= 8;
    }
    while (v7);
  }
  v14 = *(_OWORD *)(a2 + 1864);
  *(_QWORD *)(a2 + 1864) &= 0xF4FFF8103C207FFFLL;
  sub_22E4DFC28((_QWORD *)a2, *(_QWORD *)(a3 + 24), 1);
  *(_OWORD *)(a2 + 1864) = v14;
  sub_22E4D8D7C(a1);
  v12 = (char *)v15;
  if ((_DWORD)v16)
  {
    v13 = 24 * v16;
    do
    {
      sub_22F254324((uint64_t)v12, a2);
      v12 += 24;
      v13 -= 24;
    }
    while (v13);
    v12 = (char *)v15;
  }
  if (v12 != (char *)v17)
    free(v12);
}

_QWORD *sub_22F25F3B8(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t Declaration;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v13[20];
  llvm::Value *v14;

  Declaration = llvm::Intrinsic::getDeclaration();
  v7 = (uint64_t *)(a3 + 6);
  if (((*a3 >> 18) & 0xF) != 1)
  {
    v8 = Declaration;
    v9 = 8 * (((*a3 >> 18) & 0xFu) - 1);
    do
    {
      if (v8)
        v10 = *(_QWORD *)(v8 + 24);
      else
        v10 = 0;
      v11 = *v7++;
      v14 = sub_22E4D86E0(a2, v11);
      v13[16] = 257;
      sub_22E462B78(a2 + 34, v10, v8, (uint64_t)&v14, 1, (uint64_t)v13, 0);
      v9 -= 8;
    }
    while (v9);
  }
  return sub_22E4D8D7C(a1);
}

double sub_22F25F4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD v13[3];
  char v14;
  _BYTE v15[40];
  __int128 v16[3];

  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_22E55C6BC(a2, a3, (uint64_t)v8, (uint64_t)v13);
  if ((v14 & 6) == 0)
    return sub_22E619C24(*(uint64_t *)&v13[0], *(_QWORD *)(a3 + 8), 1, 1, a2, a1);
  v16[0] = v13[0];
  v16[1] = v13[1];
  v16[2] = v13[2];
  v6 = *(_QWORD *)(a3 + 8);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v6, (uint64_t)v15);
  return sub_22E462E84(a2, v16, v6, 0, (uint64_t)v15, a1);
}

void sub_22F25F56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  _OWORD v20[3];
  llvm::Value *v21;

  v6 = *(_QWORD *)(a3 + 24);
  if ((*(_BYTE *)(a3 + 40) & 1) != 0)
  {
    v15 = a2;
    *(_QWORD *)&v16 = a2 + 272;
    BYTE8(v16) = 0;
    *(_QWORD *)&v17 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
    v7 = sub_22E50E974(&v15, (unsigned __int8 *)v6);
    v8 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0));
  }
  else
  {
    sub_22E4D8D7C(&v15);
    v20[0] = v16;
    v20[1] = v17;
    v20[2] = v18;
    sub_22E5E0440(a2, (uint64_t)v20, v19, &v21);
    v7 = v21;
    v8 = *(_QWORD *)(v6 + 8);
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v9 & 8) != 0)
    v10 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    LOBYTE(v10) = 0;
  v11 = v10 | (v9 | v8) & 7;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a2 + 144);
  v14 = *(_QWORD *)(v13 + 784);
  if (!v14)
  {
    sub_22F298C2C(*(_QWORD **)(a2 + 144));
    v14 = *(_QWORD *)(v13 + 784);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v14 + 336))(v14, a2, v8, v7, v12, v11 & 7);
  sub_22E4E9E9C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), (unsigned __int8 *)a3, a1, 0);
}

double sub_22F25F6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD v8[3];
  _BYTE v9[40];
  __int128 v10[3];

  sub_22F25E574(v8, (_QWORD *)a2, a3);
  v10[0] = v8[0];
  v10[1] = v8[1];
  v10[2] = v8[2];
  v6 = *(_QWORD *)(a3 + 8);
  sub_22E6281E0(*(_QWORD **)(a2 + 144), v6, (uint64_t)v9);
  return sub_22E462E84(a2, v10, v6, 0, (uint64_t)v9, a1);
}

uint64_t sub_22F25F748(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  __int128 v7;
  int v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[3];

  v3 = *(_OWORD *)(a2 + 24);
  v12[0] = *(_OWORD *)(a2 + 8);
  v12[1] = v3;
  v12[2] = *(_OWORD *)(a2 + 40);
  v4 = (*(_DWORD *)(a2 + 72) >> 2) & 1;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_DWORD *)(a2 + 84);
  v7 = *(_OWORD *)(a2 + 104);
  v10[0] = *(_OWORD *)(a2 + 88);
  v10[1] = v7;
  v8 = (*(unsigned __int8 *)(a2 + 80) >> 6) & 1;
  v11 = *(_QWORD *)(a2 + 120);
  return sub_22E4E6994(a1, (uint64_t)v12, v4, v5, a3, v6, (uint64_t)v10, v8);
}

uint64_t sub_22F25F7B4(uint64_t a1, uint64_t a2, uint64_t a3, llvm::LLVMContext *a4)
{
  llvm::Type *v6;
  uint64_t IntPtrType;
  llvm::DataLayout *DataLayout;
  uint64_t Declaration;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  _BYTE v16[32];
  __int16 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v6 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a4);
  IntPtrType = (uint64_t)v6;
  if (*((_BYTE *)v6 + 8) == 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a2 + 144) + 296));
    IntPtrType = llvm::DataLayout::getIntPtrType(DataLayout, v6);
  }
  v18[1] = IntPtrType;
  Declaration = llvm::Intrinsic::getDeclaration();
  v10 = Declaration;
  v11 = (uint64_t *)(a2 + 272);
  if (Declaration)
    v12 = *(_QWORD *)(Declaration + 24);
  else
    v12 = 0;
  v18[0] = llvm::MetadataAsValue::get();
  v17 = 257;
  result = (uint64_t)sub_22E462B78(v11, v12, v10, (uint64_t)v18, 1, (uint64_t)v16, 0);
  v14 = result;
  if (*((_BYTE *)v6 + 8) == 15)
  {
    v17 = 257;
    result = sub_22E3C1740(v11, 48, result, (uint64_t)v6, (uint64_t)v16);
    v14 = result;
  }
  v15 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v15 & 0xF8;
  return result;
}

uint64_t sub_22F25F908(uint64_t *a1, llvm::Type **a2)
{
  uint64_t v4;
  llvm::LLVMContext *ScalarSizeInBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[32];
  __int16 v10;

  v4 = *a1;
  ScalarSizeInBits = (llvm::LLVMContext *)llvm::Type::getScalarSizeInBits(*a2);
  llvm::Type::getIntNTy(*(llvm::Type **)(v4 + 64), ScalarSizeInBits);
  v6 = llvm::ConstantInt::get();
  v7 = *a1;
  v10 = 257;
  result = sub_22E3C18F4(v7, 36, (uint64_t *)a2, v6, (uint64_t)v9);
  if (*(_BYTE *)(result + 16) != 16)
    return llvm::IRBuilderBase::CreateAssumption();
  return result;
}

llvm::Value *sub_22F25F9A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::Type *v5;
  uint64_t IntPtrType;
  llvm::DataLayout *DataLayout;
  uint64_t Declaration;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v5 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a3 + 64));
  IntPtrType = (uint64_t)v5;
  if (*((_BYTE *)v5 + 8) == 15)
  {
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1 + 144) + 296));
    IntPtrType = llvm::DataLayout::getIntPtrType(DataLayout, v5);
  }
  v14[2] = IntPtrType;
  Declaration = llvm::Intrinsic::getDeclaration();
  v9 = *a2;
  if (*((_BYTE *)v5 + 8) == 15)
  {
    v13 = 257;
    v9 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, v9, IntPtrType, (uint64_t)v12);
  }
  if (Declaration)
    v10 = *(_QWORD *)(Declaration + 24);
  else
    v10 = 0;
  v14[0] = llvm::MetadataAsValue::get();
  v14[1] = v9;
  v13 = 257;
  return sub_22E462B78((uint64_t *)(a1 + 272), v10, Declaration, (uint64_t)v14, 2, (uint64_t)v12, 0);
}

double sub_22F25FAEC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[40];
  int v24;
  _BYTE v25[32];
  __int16 v26;
  _OWORD v27[3];

  v24 = 2;
  *(_DWORD *)v23 = 0;
  memset(&v23[8], 0, 32);
  v7 = a2[1];
  v27[0] = *a2;
  v27[1] = v7;
  v27[2] = a2[2];
  v26 = 257;
  v8 = sub_22E3C2A7C((uint64_t *)(a1 + 272), (uint64_t)v27, (uint64_t)v25);
  v9 = *(_QWORD *)(a3 + 32);
  v10 = sub_22E62D754(*(_QWORD **)(a1 + 144), v9, &v24, (uint64_t)v23, 1);
  v11 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, v9, 0);
  v12 = sub_22E5DE820(*(_QWORD *)(a1 + 144), v9);
  *(_QWORD *)&v18 = v8;
  *((_QWORD *)&v18 + 1) = v11;
  v19 = v10;
  v20 = v12;
  v21 = v13;
  v22 = 0;
  v14 = *(_QWORD *)(a3 + 32);
  v16[0] = *(_OWORD *)v23;
  v16[1] = *(_OWORD *)&v23[16];
  v17 = *(_QWORD *)&v23[32];
  return sub_22E462E84(a1, &v18, v14, v24, (uint64_t)v16, a4);
}

uint64_t sub_22F25FBF0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inserted;
  llvm::Value *v17;
  llvm::Value *v18;
  _QWORD *v19;
  const char **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  llvm::GlobalValue *v27;
  llvm::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  _QWORD v38[3];
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v39 = "cfi.slowpath";
  v13 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v14 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v14, v12, v13, a4, 0);
  v42 = 257;
  sub_22E3C12C8(a1 + 34, v14, (uint64_t)&v39);
  v35 = *(_QWORD *)(a1[18] + 232);
  llvm::MDBuilder::createBranchWeights((llvm::MDBuilder *)&v35);
  llvm::Instruction::setMetadata();
  sub_22E5ED9B4(a1, v13, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1[18] + 184) + 1256) & a2 | *(_QWORD *)(*(_QWORD *)(a1[18] + 184) + 1264) & a3)
  {
    v15 = a1[12];
    v39 = (const char *)a1[4];
    v40 = v15;
    llvm::FunctionType::get();
    inserted = llvm::Module::getOrInsertFunction();
    v18 = v17;
    v36[0] = a5;
    v36[1] = a6;
    v42 = 257;
    v19 = v36;
    v20 = &v39;
    v21 = a1 + 34;
    v22 = inserted;
    v23 = (uint64_t)v18;
    v24 = 2;
  }
  else
  {
    llvm::ConstantStruct::getTypeForElements();
    llvm::ConstantStruct::get();
    v29 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
    v42 = 257;
    v30 = llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(v30 + 32) = *(_DWORD *)(v30 + 32) & 0xFFFFFF3F | 0x80;
    sub_22F2A2EA8(*(uint64_t **)(a1[18] + 3480), v29);
    v31 = a1[12];
    v39 = (const char *)a1[4];
    v40 = v31;
    v41 = v31;
    llvm::FunctionType::get();
    v32 = llvm::Module::getOrInsertFunction();
    v18 = v33;
    v38[0] = a5;
    v38[1] = a6;
    v34 = a1[12];
    v42 = 257;
    v38[2] = sub_22E3C1740(a1 + 34, 49, (uint64_t)v29, v34, (uint64_t)&v39);
    v37 = 257;
    v19 = v38;
    v20 = (const char **)v36;
    v21 = a1 + 34;
    v22 = v32;
    v23 = (uint64_t)v18;
    v24 = 3;
  }
  v25 = sub_22E462B78(v21, v22, v23, (uint64_t)v19, v24, (uint64_t)v20, 0);
  v26 = a1[18];
  v27 = (llvm::GlobalValue *)llvm::Value::stripPointerCasts(v18);
  sub_22E62876C(v26, v27);
  llvm::Value::getContext(v25);
  *((_QWORD *)v25 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return sub_22E5ED9B4(a1, v12, 0);
}

uint64_t sub_22F25FF80(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::GlobalValue *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1[18] + 200);
  v3 = *v2;
  v4 = a1[12];
  v12 = a1[4];
  v13 = v4;
  v14 = v4;
  v5 = llvm::FunctionType::get();
  v10 = "__cfi_check";
  v11 = 259;
  v6 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x23489F6FC](v6, v5, 4, 0xFFFFFFFFLL, &v10, v2);
  sub_22E62876C(a1[18], v6);
  v10 = "entry";
  v11 = 259;
  v7 = operator new();
  llvm::BasicBlock::BasicBlock();
  llvm::Intrinsic::getDeclaration();
  v11 = 257;
  llvm::User::operator new((llvm::User *)0x50);
  llvm::CallInst::CallInst();
  v8 = llvm::User::operator new((llvm::User *)0x40);
  return MEMORY[0x23489C174](v8, v3, 0, v7);
}

uint64_t sub_22F260104(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t False;
  __int128 v7;

  if ((*(_BYTE *)(a1 + 1868) & 0x40) != 0)
  {
    *(_BYTE *)(a1 + 1880) = 1;
    False = llvm::ConstantInt::getFalse();
    v7 = xmmword_22F457630;
    v5 = sub_22E4DE978(a1, a2);
    sub_22E4DEC4C((_QWORD *)a1, (uint64_t)&False, 1, 1u, (uint64_t)&v5, 1, 0, 0);
    *(_BYTE *)(a1 + 1880) = 0;
  }
  return sub_22F24866C(a1 + 272);
}

llvm::Value *sub_22F260198(uint64_t a1)
{
  uint64_t *v2;
  uint64_t Declaration;
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;

  v2 = (uint64_t *)(a1 + 272);
  Declaration = llvm::Intrinsic::getDeclaration();
  if (Declaration)
    v4 = *(_QWORD *)(Declaration + 24);
  else
    v4 = 0;
  v10 = 257;
  v5 = sub_22E462B78(v2, v4, Declaration, 0, 0, (uint64_t)v9, 0);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 184);
  if (*(char *)(v6 + 687) < 0)
    v7 = *(_QWORD *)(v6 + 672);
  else
    v7 = *(unsigned __int8 *)(v6 + 687);
  if (v7)
  {
    llvm::Attribute::get();
    llvm::Value::getContext(v5);
    *((_QWORD *)v5 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  return v5;
}

double sub_22F260294(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD v31[3];
  _OWORD v32[3];
  _QWORD v33[2];
  char v34;
  uint64_t v35;
  __int16 v36;
  _OWORD v37[3];
  _QWORD v38[3];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v8 = (uint64_t *)(a3 + 16);
  v9 = (uint64_t *)(a3 + 24);
  v10 = sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) & 0xFFFFFFFFFFFFFFF0));
  v11 = 24;
  if (v10)
    v11 = 16;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + v11) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || *(_BYTE *)(v12 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v12 = sub_22F10CF48(v12);
    else
      v12 = 0;
  }
  if (sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0)))
    v13 = v8;
  else
    v13 = v9;
  v14 = *v13;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v43 = 0;
  sub_22E4D79C0(&v44, a2, v14, v38, 0);
  v37[0] = v44;
  v37[1] = v45;
  v37[2] = v46;
  v15 = (uint64_t *)sub_22E4D73E0((uint64_t)a2, v37, 0);
  if (sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0)))
    v17 = v9;
  else
    v17 = v8;
  v18 = *v17;
  v33[0] = a2;
  v33[1] = a2 + 34;
  v34 = 0;
  v35 = *(_QWORD *)(a2[18] + 232);
  v19 = (uint64_t *)sub_22E50E974(v33, v18, v16);
  if (sub_22E479BE0(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0)))
    v20 = v9;
  else
    v20 = v8;
  v21 = sub_22F110A40(*(_QWORD *)(*(_QWORD *)(*v20 + 8) & 0xFFFFFFFFFFFFFFF0));
  v22 = a2[11];
  if (*v19 != v22)
  {
    v33[0] = "idxprom";
    v36 = 259;
    v19 = (uint64_t *)sub_22E3BF45C(a2 + 34, (uint64_t)v19, v22, v21, (uint64_t)v33);
  }
  v23 = sub_22E66C868(a2[18] + 280, *(_QWORD *)(v12 + 32), 0);
  v36 = 257;
  v24 = (uint64_t *)sub_22E42129C(a2 + 34, v23, v15, v19, (uint64_t)v33);
  if (a4)
  {
    v32[0] = v44;
    v32[1] = v45;
    v32[2] = v46;
    v25 = (uint64_t *)sub_22E4D73E0((uint64_t)a2, v32, 1);
    v31[0] = v44;
    v31[1] = v45;
    v31[2] = v46;
    v26 = (uint64_t *)sub_22E4D73E0((uint64_t)a2, v31, 2);
    sub_22E4D7560(a2, v24, v25, v26, 0);
  }
  v27 = sub_22EF5B848(*(_QWORD *)(a2[18] + 144), *(_QWORD *)(v12 + 32), 0);
  v28 = *(_QWORD *)(v12 + 32);
  v29 = sub_22E637464((_QWORD *)a2[18], v27, 0, 0);
  return sub_22F247F68((uint64_t)a2, (uint64_t)v24, v28, v29, 2, a1);
}

__n128 sub_22F260568(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = 5;
  *(_QWORD *)(a1 + 56) = a3;
  v6 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0)
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2[1];
  *(_OWORD *)(a1 + 8) = *a2;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = a2[2];
  result = *(__n128 *)a6;
  v11 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a6;
  v12 = v7 | v8 | (v6 | a4) & 7;
  *(_OWORD *)(a1 + 104) = v11;
  v13 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = v12;
  *(_DWORD *)(a1 + 84) = a5;
  *(_BYTE *)(a1 + 80) &= 0x80u;
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

double sub_22F2605EC@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD v14[8];
  uint64_t v15;
  _OWORD v16[8];
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  v8 = (*(_WORD *)(v7 + 8) & 0x7E) - 34;
  if (v7)
    v9 = v7 - 64;
  else
    v9 = 0;
  if (v8 >= 4)
    v10 = 0;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v10 + 48);
  if (v11)
    v12 = v11 & 0xFFFFFFFFFFFFFFF0;
  else
    v12 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v10);
  sub_22E619C24(*(_QWORD *)(a1 + 4200), v12, 0, 1, a1, (uint64_t)v16);
  v14[6] = v16[6];
  v14[7] = v16[7];
  v15 = v17;
  v14[2] = v16[2];
  v14[3] = v16[3];
  v14[4] = v16[4];
  v14[5] = v16[5];
  v14[0] = v16[0];
  v14[1] = v16[1];
  return sub_22E4DD05C(a1, (uint64_t)v14, a2, a3);
}

uint64_t sub_22F2606D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[3];

  v8 = *(_QWORD *)(a3 + 8);
  llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40));
  v9 = *(_QWORD *)(llvm::DataLayout::getStructLayout() + 8 * a4 + 16);
  v10 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v10;
  v14[2] = *(_OWORD *)(a3 + 32);
  if ((BYTE8(v10) & 3) != 0)
    sub_22F28ABCC(v14, *(_QWORD *)(a2 + 136));
  result = llvm::IRBuilderBase::CreatePreserveStructAccessIndex();
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * a4);
  v13 = *(_QWORD *)(a3 + 16) | v9;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v13 & -v13;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

__n128 sub_22F2607C4@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;

  *(_DWORD *)a6 = 2;
  *(_QWORD *)(a6 + 56) = a2;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v6 & 8) != 0)
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = a1[1];
  *(_OWORD *)(a6 + 8) = *a1;
  *(_OWORD *)(a6 + 24) = v9;
  *(_OWORD *)(a6 + 40) = a1[2];
  result = *(__n128 *)a5;
  v11 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 88) = *(_OWORD *)a5;
  v12 = v8 | v7 | (v6 | a3) & 7;
  *(_OWORD *)(a6 + 104) = v11;
  v13 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a6 + 64) = a3;
  *(_QWORD *)(a6 + 72) = v12;
  *(_DWORD *)(a6 + 84) = a4;
  *(_BYTE *)(a6 + 80) &= 0x80u;
  *(_QWORD *)(a6 + 120) = v13;
  *(_QWORD *)(a6 + 128) = 0;
  return result;
}

_QWORD *sub_22F260848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v17 = 0;
  result = (_QWORD *)sub_22F254110((uint64_t *)(a1 + 4088), &v16, &v17);
  if (!(_DWORD)result
    || (v7 = v17, v17 == *(_QWORD *)(a1 + 4088) + ((unint64_t)*(unsigned int *)(a1 + 4104) << 6)))
  {
    v9 = *(_QWORD *)(a2 + 16);
    memset(v10, 0, sizeof(v10));
    v11 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v15 = 0;
    return sub_22E4D79C0((_QWORD *)a3, a1, v9, v10, 0);
  }
  else
  {
    v8 = *(_OWORD *)(v17 + 24);
    *(_OWORD *)a3 = *(_OWORD *)(v17 + 8);
    *(_OWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 40);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(v7 + 56);
  }
  return result;
}

void sub_22F2608FC(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[48];
  _OWORD v22[8];
  uint64_t v23;
  _OWORD v24[8];
  uint64_t v25;
  _OWORD v26[4];
  __int128 v27;
  _BYTE v28[48];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v9 = *(_QWORD *)(a3 + 48);
  v10 = *(_OWORD *)(a2 + 112);
  v24[6] = *(_OWORD *)(a2 + 96);
  v24[7] = v10;
  v25 = *(_QWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 48);
  v24[2] = *(_OWORD *)(a2 + 32);
  v24[3] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v24[4] = *(_OWORD *)(a2 + 64);
  v24[5] = v12;
  v13 = *(_OWORD *)(a2 + 16);
  v24[0] = *(_OWORD *)a2;
  v24[1] = v13;
  sub_22E4DD05C((uint64_t)a1, (uint64_t)v24, a3, (uint64_t)v26);
  v14 = sub_22E619D68(v9);
  if (v14)
  {
    if (v14 == 2)
    {
      v15 = *(_OWORD *)((char *)&v26[1] + 8);
      *(_OWORD *)a5 = *(_OWORD *)((char *)v26 + 8);
      *(_OWORD *)(a5 + 16) = v15;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)((char *)&v26[2] + 8);
      v16 = *(_BYTE *)(a5 + 48) & 0xF8 | (BYTE8(v27) >> 2) & 1 | 4;
    }
    else
    {
      v36 = *(_OWORD *)&v28[16];
      v37 = *(_OWORD *)&v28[32];
      v38 = v29;
      v32 = v26[2];
      v33 = v26[3];
      v34 = v27;
      v35 = *(_OWORD *)v28;
      v30 = v26[0];
      v31 = v26[1];
      *(_QWORD *)&v39 = a1;
      *((_QWORD *)&v39 + 1) = a1 + 34;
      LOWORD(v40) = 0;
      v18 = sub_22E5027E0((uint64_t)&v39, (uint64_t)&v30, a4);
      LOBYTE(v16) = *(_BYTE *)(a5 + 48);
      *(_QWORD *)a5 = v18;
      *(_QWORD *)(a5 + 8) = v19;
      LOBYTE(v16) = v16 & 0xF8 | 2;
    }
  }
  else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFE) == 0x28)
  {
    v39 = *(_OWORD *)((char *)v26 + 8);
    v40 = *(_OWORD *)((char *)&v26[1] + 8);
    v41 = *(_OWORD *)((char *)&v26[2] + 8);
    sub_22E5E0440((uint64_t)a1, (uint64_t)&v39, v27, &v30);
    v17 = *(_BYTE *)(a5 + 48);
    *(_QWORD *)a5 = v30;
    *(_QWORD *)(a5 + 8) = 0;
    LOBYTE(v16) = v17 & 0xF8;
  }
  else
  {
    if (LODWORD(v26[0]) == 2)
    {
      v22[6] = *(_OWORD *)&v28[16];
      v22[7] = *(_OWORD *)&v28[32];
      v23 = v29;
      v22[2] = v26[2];
      v22[3] = v26[3];
      v22[4] = v27;
      v22[5] = *(_OWORD *)v28;
      v22[0] = v26[0];
      v22[1] = v26[1];
      sub_22E4D7B28(a1, (uint64_t)v22, a4, a5);
      return;
    }
    *(_QWORD *)v21 = *((_QWORD *)&v26[0] + 1);
    *(_OWORD *)&v21[8] = v26[1];
    *(_OWORD *)&v21[24] = v26[2];
    *(_QWORD *)&v21[40] = *(_QWORD *)&v26[3];
    v39 = *(_OWORD *)&v28[8];
    v40 = *(_OWORD *)&v28[24];
    *(_QWORD *)&v41 = *(_QWORD *)&v28[40];
    v30 = *(_OWORD *)v21;
    v31 = *(_OWORD *)&v21[16];
    v32 = *(_OWORD *)&v21[32];
    v20 = sub_22E4E6994((uint64_t)a1, (uint64_t)&v30, (DWORD2(v27) >> 2) & 1, v27, a4, *(int *)&v28[4], (uint64_t)&v39, (v28[0] >> 6) & 1);
    LOBYTE(v16) = *(_BYTE *)(a5 + 48);
    *(_QWORD *)a5 = v20;
    *(_QWORD *)(a5 + 8) = 0;
    LOBYTE(v16) = v16 & 0xF8;
  }
  *(_BYTE *)(a5 + 48) = v16;
}

void sub_22F260B3C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  __int128 v10;
  _OWORD v11[3];
  uint64_t v12;
  _BYTE v13[88];

  sub_22E4ECEB0(a1, *(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)), (uint64_t)v13, a5);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + *(unsigned __int8 *)(a2 + 3)) + 8);
  v10 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v10;
  v11[2] = *(_OWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a3 + 48);
  sub_22E4ED3C4((uint64_t)a1, v9, (uint64_t)v13, (unsigned int *)a2, (uint64_t)v11, 0, a4);
}

void sub_22F260BC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;

  v3 = a2;
  if (sub_22E462B18(a2))
    v3 = v3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v3) + 96) & 0x80) == 0);
  sub_22E4EDEB0(a1, v3, 0, a3);
}

BOOL sub_22F260C28(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL8 v11;
  _BOOL4 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 184) + 1348);
  if ((v4 & 3) == 0 || ((v4 >> 9) & 0xF) != sub_22E4EE114(*(_QWORD *)(a1 + 144), a3))
    return 0;
  v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((sub_22E4EE1BC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0 || sub_22E4EE230(*v8))
  {
    a2 = sub_22F10ACF8(*v8);
    v8 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
    v9 = 0;
  else
    v9 = sub_22EF5DF94(*(_QWORD *)(a1 + 144), a2);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    if (!v9)
      return sub_22EFFBE1C(a4, *(_QWORD *)(a1 + 144), 0) != 0;
    return 0;
  }
  if (!sub_22E479BE0(v10))
    return 0;
  v14 = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  v13 = sub_22F00554C(a4, (uint64_t)&v14, *(_QWORD *)(a1 + 144), 0, 0);
  v11 = 0;
  if (v13)
    v11 = sub_22E42E5EC((uint64_t)v17, v9);
  if (v16 >= 2)
    sub_22EF53BC0(&v16);
  return v11;
}

void sub_22F260DC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 *v9;
  llvm::Value *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18[3];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[112];

  if ((*(_DWORD *)a2 & 0xFC0000) == 0x40000)
  {
    sub_22E4DFD40(v24, a1);
    v15 = *(_OWORD *)v24;
    v7 = *(_QWORD *)&v24[24];
    v6 = *(_QWORD *)&v24[16];
    v8 = *(_OWORD *)&v24[32];
  }
  else
  {
    sub_22E4D8D7C(v24);
    v15 = *(_OWORD *)&v24[8];
    v6 = *(_QWORD *)&v24[24];
    v7 = *(_QWORD *)&v24[32];
    v8 = *(_OWORD *)&v24[40];
  }
  v14 = v8;
  v9 = *(unsigned __int8 **)(a2 + 24);
  *(_QWORD *)v24 = a1;
  *(_QWORD *)&v24[8] = a1 + 272;
  v24[16] = 0;
  *(_QWORD *)&v24[24] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v10 = sub_22E50E974((uint64_t *)v24, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 31;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF0));
  v23 = 2;
  *(_DWORD *)v24 = 0;
  memset(&v24[8], 0, 32);
  v19 = v15;
  v20 = v6;
  v21 = v7;
  v22 = v14;
  sub_22E47FFCC(a1, a2, &v19, (uint64_t)v10, v11, &v23, (uint64_t)v24, (uint64_t)v18);
  v13 = *(_QWORD *)(v11 + 32);
  v16[0] = *(_OWORD *)v24;
  v16[1] = *(_OWORD *)&v24[16];
  v17 = *(_QWORD *)&v24[32];
  sub_22E462E84(a1, v18, v13, v23, (uint64_t)v16, a3);
}

uint64_t sub_22F260F50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = a2;
  if (sub_22F253D04(a2))
  {
    v6 = 0;
    result = sub_22F253E24((uint64_t *)(a1 + 4064), &v5, &v6);
    if (!(_DWORD)result)
      return result;
    *v6 = -8192;
    --*(_DWORD *)(a1 + 4072);
    v4 = (_DWORD *)(a1 + 4076);
  }
  else
  {
    v6 = 0;
    result = sub_22F254110((uint64_t *)(a1 + 4088), &v5, &v6);
    if (!(_DWORD)result)
      return result;
    *v6 = -8192;
    --*(_DWORD *)(a1 + 4096);
    v4 = (_DWORD *)(a1 + 4100);
  }
  ++*v4;
  return result;
}

uint64_t sub_22F261000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(a1 + 144);
  v7 = v6[98];
  if (!v7)
  {
    sub_22F298C2C(v6);
    v7 = v6[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 344))(v7, a1, a2, a3);
}

uint64_t sub_22F26105C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;

  v10 = *(_QWORD **)(a1 + 144);
  v11 = v10[98];
  if (!v11)
  {
    sub_22F298C2C(v10);
    v11 = v10[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 336))(v11, a1, a2, a3, a4, a5);
}

uint64_t sub_22F2610E0(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a3 != 0.0)
  {
    v5[3] = v3;
    v5[4] = v4;
    if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
    {
      v5[0] = *(_QWORD *)(*(_QWORD *)(result + 144) + 232);
      llvm::MDBuilder::createFPMath((llvm::MDBuilder *)v5, a3);
      return llvm::Instruction::setMetadata();
    }
  }
  return result;
}

double sub_22F261140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double result;

  *(_DWORD *)a1 = 4;
  v3 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0)
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = v4 | v5 | (v3 | a3) & 7;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 80) &= 0x80u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t sub_22F2611B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F261244(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22F261244(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4EEE00(a1, v7);
  v9 = 0;
  sub_22F246C54((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F2612F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F246C54((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F2613A4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F261404(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F26149C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F261404(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (v3 - 1) & ((*a2 >> 9) ^ *a2);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -1;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F26149C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E4EEEC0(a1, v7);
  v9 = 0;
  sub_22F261404((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F261544(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((unint64_t)(*a2 + 1) >= 2)
    {
      v11 = 0;
      result = sub_22F261404((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F2615EC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
  }
  else
  {
    if (!v2)
      return a1;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  return a1;
}

uint64_t sub_22F261638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v15[3];
  uint64_t v16;
  char v17;
  _BYTE v18[40];
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v19 = "tmp";
  LOWORD(v22) = 259;
  v7 = sub_22F25E4D4(a1, v6, (uint64_t)&v19, 0);
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  v10 = v7 & 0xFFFFFFFFFFFFFFF8;
  v11 = 1 << (v8 & 7 | (8 * (v7 & 7)));
  if (v7 < 8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v19 = v10;
  *((_QWORD *)&v19 + 1) = v9;
  v20 = v11;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  sub_22E6281E0(*(_QWORD **)(a1 + 144), v12, (uint64_t)v18);
  sub_22E462E84(a1, &v19, v12, 2, (uint64_t)v18, a3);
  v13 = *(_OWORD *)(a3 + 24);
  v15[0] = *(_OWORD *)(a3 + 8);
  v15[1] = v13;
  v15[2] = *(_OWORD *)(a3 + 40);
  v16 = *(_QWORD *)(a3 + 72);
  v17 = 0;
  return sub_22E4EF100(a1, a2, v15);
}

BOOL sub_22F261728(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 1) != 0)
    return 1;
  v6 = sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a2);
  v7 = sub_22E46A3EC(v6, a3);
  return *(_QWORD *)sub_22F0C975C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), a3) + v7 > **(_QWORD **)(v6 + 72);
}

_DWORD *sub_22F2617A0(llvm::APInt *this, uint64_t a2)
{
  _DWORD *result;
  BOOL v4;
  const llvm::APInt *v5;
  unsigned int v6;

  result = *(_DWORD **)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v4 = (result[4] & 0xFEu) - 6 > 0xFFFFFFFB;
  else
    v4 = 0;
  if (!v4)
    result = (_DWORD *)sub_22F10CF48((uint64_t)result);
  v5 = (const llvm::APInt *)(result + 10);
  v6 = result[12];
  *((_DWORD *)this + 2) = v6;
  if (v6 > 0x40)
    return (_DWORD *)llvm::APInt::initSlowCase(this, v5);
  *(_QWORD *)this = *(_QWORD *)v5;
  return result;
}

llvm::Instruction *sub_22F26180C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Instruction *v6;
  uint64_t v7;

  v6 = (llvm::Instruction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
  if (!v6)
  {
    v7 = llvm::BinaryOperator::Create();
    v6 = (llvm::Instruction *)sub_22E3C12C8((uint64_t *)a1, v7, a4);
    llvm::Instruction::setHasNoUnsignedWrap(v6);
  }
  return v6;
}

BOOL sub_22F2618AC(uint64_t a1)
{
  return (sub_22F1110EC(a1, 0) & 1) != 0
      || (sub_22F1113D4(a1) & 1) != 0
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2;
}

uint64_t sub_22F261904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 *a10)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  llvm::LLVMContext *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  _QWORD v40[154];
  _QWORD v41[26];
  _QWORD v42[4];
  _QWORD v43[7];

  v43[5] = *MEMORY[0x24BDAC8D0];
  v16 = a2 & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v17 & 8) != 0)
    v18 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v18 = 0;
  v19 = sub_22E46BB88(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)v18 != v19 >> 11)
  {
    v31 = v19 >> 11;
    v20 = (llvm::LLVMContext *)sub_22EFD7558(v16);
    v21 = a8;
    v22 = a3;
    v23 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v20);
    v24 = sub_22E699F3C(*(_QWORD **)(a1 + 144));
    v25 = v23;
    a3 = v22;
    a8 = v21;
    a5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 216))(v24, a1, a5, v18, v31, v25, 0);
  }
  v39[0] = v40;
  v39[1] = 0x800000000;
  v40[152] = v41;
  v40[153] = 0x100000000;
  v41[24] = v42;
  v41[25] = 0x100000000;
  v42[2] = v43;
  v42[3] = 0x200000000;
  v43[4] = 0;
  sub_22E4FA41C(a1, v16, a5, a7, a8, a10, (uint64_t)v39, 0);
  v26 = sub_22E46C584((_QWORD **)(*(_QWORD *)(a1 + 144) + 280), a2, a3);
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  if (a10)
  {
    v27 = *(_QWORD *)(a1 + 1904) == (_QWORD)a10;
    sub_22EFF605C((uint64_t)a10);
    v29 = v28;
  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  sub_22E47A004(a9, a1, v26, a4, v34, v39, 0, v27, v29, 0);
  return sub_22E3CEBAC((uint64_t)v39);
}

uint64_t sub_22F261B1C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  llvm::Constant **v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned int *v38;
  unsigned int v39;
  int v41;
  _OWORD v43[3];
  uint64_t v44;
  _OWORD v45[3];
  _QWORD v46[11];
  uint64_t v47;
  llvm::Value *v48[2];
  __int128 v49;
  __int128 v50;
  _QWORD v51[6];
  char v52;
  __int16 v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[26];
  _QWORD v62[4];
  _QWORD v63[8];

  v63[5] = *MEMORY[0x24BDAC8D0];
  v7 = sub_22EFFE844(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  v8 = *((_QWORD *)v7 + 3);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 31;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
  v48[0] = 0;
  v48[1] = 0;
  DWORD2(v49) = 0;
  *(_QWORD *)&v49 = 0;
  v50 = 0uLL;
  if ((*(_DWORD *)v7 & 0xFC0000) == 0x40000)
  {
    sub_22E4DFD40(v48, a1);
  }
  else
  {
    sub_22E4D8D7C(&v55);
    *(_OWORD *)v48 = v56;
    v49 = v57;
    v50 = v58;
  }
  sub_22EFF605C(*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  v15 = v14;
  if (!v14)
  {
    sub_22EFFAE7C(a2);
    v15 = v16;
  }
  if ((BYTE8(v49) & 3) != 0)
    v17 = (llvm::Constant **)sub_22F28ABCC(v48, a1);
  else
    v17 = (llvm::Constant **)v48[0];
  sub_22E4DDC84(a1, 4u, v15, v17, *(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFFFF0, 0, 0, 0, 0);
  v55 = (char *)a1;
  *(_QWORD *)&v56 = a1 + 272;
  BYTE8(v56) = 0;
  *(_QWORD *)&v57 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  v19 = sub_22E50E974(&v55, v8, v18);
  v47 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 224);
  v45[0] = *(_OWORD *)v48;
  v45[1] = v49;
  v45[2] = v50;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, unsigned __int8 *, _OWORD *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v20 + 112))(v46, v20, a1, v7, v45, &v47, v19, v9);
  v55 = (char *)&v56 + 8;
  *(_QWORD *)&v56 = 0x800000000;
  v59 = v61;
  v60 = 0x100000000;
  v61[24] = v62;
  v61[25] = 0x100000000;
  v62[2] = v63;
  v62[3] = 0x200000000;
  v63[4] = 0;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v22 = *(_QWORD *)(v13 + 48);
  if (v22)
    v23 = v22 & 0xFFFFFFFFFFFFFFF0;
  else
    v23 = sub_22EF6462C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v13);
  v24 = sub_22EF5B848(v21, v23, 0);
  v51[0] = v47;
  v51[1] = 0;
  v52 = 0;
  v53 = 0;
  v54 = v24;
  v25 = sub_22E3C187C((uint64_t)&v55, (unint64_t)v51, 1);
  v26 = &v55[152 * v56];
  v27 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v25;
  *((_OWORD *)v26 + 1) = v27;
  v28 = *(_QWORD *)(v25 + 144);
  v29 = *(_OWORD *)(v25 + 128);
  v30 = *(_OWORD *)(v25 + 96);
  *((_OWORD *)v26 + 7) = *(_OWORD *)(v25 + 112);
  *((_OWORD *)v26 + 8) = v29;
  *((_QWORD *)v26 + 18) = v28;
  *((_OWORD *)v26 + 6) = v30;
  v31 = *(_OWORD *)(v25 + 80);
  v32 = *(_OWORD *)(v25 + 32);
  v33 = *(_OWORD *)(v25 + 48);
  *((_OWORD *)v26 + 4) = *(_OWORD *)(v25 + 64);
  *((_OWORD *)v26 + 5) = v31;
  *((_OWORD *)v26 + 2) = v32;
  *((_OWORD *)v26 + 3) = v33;
  LODWORD(v56) = v56 + 1;
  v34 = sub_22E46DC6C(v11, 1);
  v35 = (uint64_t)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24);
  sub_22E477B1C(a1, (uint64_t)&v55, v11 & 0xFFFFFFFFFFFFFFFBLL, v35, (unint64_t *)(v35 + 8 * a2[4]), 0, 0, 0);
  v36 = sub_22E46DCFC(*(_QWORD *)(a1 + 144) + 280, &v55, v11, v34, 0);
  v37 = *(_OWORD *)(a3 + 16);
  v43[0] = *(_OWORD *)a3;
  v43[1] = v37;
  v43[2] = *(_OWORD *)(a3 + 32);
  v44 = *(_QWORD *)(a3 + 48);
  v38 = *(unsigned int **)(a1 + 1904);
  sub_22EFF605C(*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if (!v39)
    sub_22EFFAE7C(a2);
  LOBYTE(v41) = 0;
  sub_22E47A004(a4, a1, v36, v46, v43, &v55, 0, v38 == a2, v39, v41);
  return sub_22E3CEBAC((uint64_t)&v55);
}

uint64_t sub_22F261F20(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  llvm::Instruction *v25;
  llvm::LLVMContext **v26;
  llvm::LLVMContext *v27;
  llvm::LLVMContext *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  llvm::LLVMContext *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  llvm::LLVMContext *v54;
  llvm::Type *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t *v69;
  _BYTE v71[32];
  __int16 v72;
  const char *v73;
  llvm::Type *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  __int16 v80;
  llvm::LLVMContext *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD v84[154];
  _QWORD v85[26];
  _QWORD v86[4];
  _QWORD v87[7];

  v87[5] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (!v12)
    v11 = sub_22F10CF48(v11);
  v82 = v84;
  v83 = 0x800000000;
  v84[152] = v85;
  v84[153] = 0x100000000;
  v85[24] = v86;
  v85[25] = 0x100000000;
  v86[2] = v87;
  v86[3] = 0x200000000;
  v87[4] = 0;
  v13 = sub_22E4FFE1C(a2);
  v14 = *(llvm::LLVMContext **)(v11 + 40);
  v15 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v14);
  LOWORD(v77) = 257;
  v69 = (uint64_t *)(a1 + 272);
  v73 = (const char *)sub_22E3C1740((uint64_t *)(a1 + 272), 49, a3, v15, (uint64_t)&v73);
  v74 = 0;
  v79 = 0;
  v80 = 0;
  v81 = v14;
  v16 = sub_22E3C187C((uint64_t)&v82, (unint64_t)&v73, 1);
  v17 = &v82[19 * v83];
  v18 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v16;
  *((_OWORD *)v17 + 1) = v18;
  v19 = *(_QWORD *)(v16 + 144);
  v20 = *(_OWORD *)(v16 + 128);
  v21 = *(_OWORD *)(v16 + 96);
  *((_OWORD *)v17 + 7) = *(_OWORD *)(v16 + 112);
  *((_OWORD *)v17 + 8) = v20;
  v17[18] = v19;
  *((_OWORD *)v17 + 6) = v21;
  v22 = *(_OWORD *)(v16 + 80);
  v23 = *(_OWORD *)(v16 + 32);
  v24 = *(_OWORD *)(v16 + 48);
  *((_OWORD *)v17 + 4) = *(_OWORD *)(v16 + 64);
  *((_OWORD *)v17 + 5) = v22;
  *((_OWORD *)v17 + 2) = v23;
  *((_OWORD *)v17 + 3) = v24;
  LODWORD(v83) = v83 + 1;
  if ((v13 & 1) != 0)
  {
    v54 = *(llvm::LLVMContext **)(v11 + 48);
    v55 = (llvm::Type *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v54);
    v56 = a4;
    v57 = a6;
    v58 = sub_22E62D754(*(_QWORD **)(a1 + 144), (unint64_t)v54, 0, 0, 0);
    v73 = "destroying.delete.tag";
    LOWORD(v77) = 259;
    v59 = sub_22E4D8348(a1, v55, (uint64_t)&v73, 0);
    *(_WORD *)(v59 + 18) = *(_WORD *)(v59 + 18) & 0xFFC0 | (63 - __clz(v58));
    v73 = (const char *)v59;
    v74 = v55;
    v75 = v58;
    a6 = v57;
    a4 = v56;
    v26 = (llvm::LLVMContext **)(v11 + 56);
    v25 = (llvm::Instruction *)v59;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 4;
    v80 = 0;
    v81 = v54;
    v60 = sub_22E3C187C((uint64_t)&v82, (unint64_t)&v73, 1);
    v61 = &v82[19 * v83];
    v62 = *(_OWORD *)(v60 + 16);
    *(_OWORD *)v61 = *(_OWORD *)v60;
    *((_OWORD *)v61 + 1) = v62;
    v63 = *(_QWORD *)(v60 + 144);
    v64 = *(_OWORD *)(v60 + 128);
    v65 = *(_OWORD *)(v60 + 96);
    *((_OWORD *)v61 + 7) = *(_OWORD *)(v60 + 112);
    *((_OWORD *)v61 + 8) = v64;
    v61[18] = v63;
    *((_OWORD *)v61 + 6) = v65;
    v66 = *(_OWORD *)(v60 + 80);
    v67 = *(_OWORD *)(v60 + 32);
    v68 = *(_OWORD *)(v60 + 48);
    *((_OWORD *)v61 + 4) = *(_OWORD *)(v60 + 64);
    *((_OWORD *)v61 + 5) = v66;
    *((_OWORD *)v61 + 2) = v67;
    *((_OWORD *)v61 + 3) = v68;
    LODWORD(v83) = v83 + 1;
  }
  else
  {
    v25 = 0;
    v26 = (llvm::LLVMContext **)(v11 + 48);
  }
  if ((v13 & 0x100) != 0)
  {
    v28 = *v26++;
    v27 = v28;
    sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v73);
    sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v28);
    v29 = llvm::ConstantInt::get();
    if (a5)
    {
      LOWORD(v77) = 257;
      v29 = (uint64_t)sub_22E3BDEA8((uint64_t)v69, v29, a5, (uint64_t)&v73, 0, 0);
    }
    if (a6)
    {
      v30 = llvm::ConstantInt::get();
      v72 = 257;
      v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344), v29, v30, 0, 0);
      if (!v31)
      {
        LOWORD(v77) = 257;
        v32 = llvm::BinaryOperator::Create();
        v31 = sub_22E3C12C8(v69, v32, (uint64_t)v71);
      }
      v29 = v31;
    }
    v73 = (const char *)v29;
    v74 = 0;
    v79 = 0;
    v80 = 0;
    v81 = v27;
    v33 = sub_22E3C187C((uint64_t)&v82, (unint64_t)&v73, 1);
    v34 = &v82[19 * v83];
    v35 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v35;
    v36 = *(_QWORD *)(v33 + 144);
    v37 = *(_OWORD *)(v33 + 128);
    v38 = *(_OWORD *)(v33 + 96);
    *((_OWORD *)v34 + 7) = *(_OWORD *)(v33 + 112);
    *((_OWORD *)v34 + 8) = v37;
    v34[18] = v36;
    *((_OWORD *)v34 + 6) = v38;
    v39 = *(_OWORD *)(v33 + 80);
    v40 = *(_OWORD *)(v33 + 32);
    v41 = *(_OWORD *)(v33 + 48);
    *((_OWORD *)v34 + 4) = *(_OWORD *)(v33 + 64);
    *((_OWORD *)v34 + 5) = v39;
    *((_OWORD *)v34 + 2) = v40;
    *((_OWORD *)v34 + 3) = v41;
    LODWORD(v83) = v83 + 1;
  }
  if ((v13 & 0xFFFFFF) >= 0x10000)
  {
    v42 = *v26;
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    sub_22F3687D0(v43, a4, 1);
    sub_22EF5CDF0(v43, *(_QWORD *)(*(_QWORD *)(v43 + 16408) & 0xFFFFFFFFFFFFFFF0));
    sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), v42);
    v73 = (const char *)llvm::ConstantInt::get();
    v74 = 0;
    v79 = 0;
    v80 = 0;
    v81 = v42;
    v44 = sub_22E3C187C((uint64_t)&v82, (unint64_t)&v73, 1);
    v45 = &v82[19 * v83];
    v46 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)v45 = *(_OWORD *)v44;
    *((_OWORD *)v45 + 1) = v46;
    v47 = *(_QWORD *)(v44 + 144);
    v48 = *(_OWORD *)(v44 + 128);
    v49 = *(_OWORD *)(v44 + 96);
    *((_OWORD *)v45 + 7) = *(_OWORD *)(v44 + 112);
    *((_OWORD *)v45 + 8) = v48;
    v45[18] = v47;
    *((_OWORD *)v45 + 6) = v49;
    v50 = *(_OWORD *)(v44 + 80);
    v51 = *(_OWORD *)(v44 + 32);
    v52 = *(_OWORD *)(v44 + 48);
    *((_OWORD *)v45 + 4) = *(_OWORD *)(v44 + 64);
    *((_OWORD *)v45 + 5) = v50;
    *((_OWORD *)v45 + 2) = v51;
    *((_OWORD *)v45 + 3) = v52;
    LODWORD(v83) = v83 + 1;
  }
  sub_22E4FD1B4(&v73, a1, a2, v11, (unsigned int *)&v82);
  if (v25 && !*((_QWORD *)v25 + 1))
    llvm::Instruction::eraseFromParent(v25);
  return sub_22E3CEBAC((uint64_t)&v82);
}

uint64_t sub_22F262468(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = a2;
  v5 = result;
  v6 = 0x86BCA1AF286BCA1BLL * ((a3 - a2) >> 3);
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)v5 + 152 * v7;
    do
    {
      v9 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v4;
      *(_OWORD *)(v8 + 16) = v9;
      v10 = *(_OWORD *)(v4 + 32);
      v11 = *(_OWORD *)(v4 + 48);
      v12 = *(_OWORD *)(v4 + 80);
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(v4 + 64);
      *(_OWORD *)(v8 + 80) = v12;
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      v13 = *(_OWORD *)(v4 + 96);
      v14 = *(_OWORD *)(v4 + 112);
      v15 = *(_OWORD *)(v4 + 128);
      *(_QWORD *)(v8 + 144) = *(_QWORD *)(v4 + 144);
      *(_OWORD *)(v8 + 112) = v14;
      *(_OWORD *)(v8 + 128) = v15;
      *(_OWORD *)(v8 + 96) = v13;
      v4 += 152;
      v8 += 152;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22F262534(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = a2;
  v5 = result;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 6);
  v7 = *(unsigned int *)(result + 8);
  if (v6 + v7 > *(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_OWORD *)(*(_QWORD *)v5 + 192 * v7);
    do
    {
      v9 = *(_OWORD *)v4;
      v10 = *((_OWORD *)v4 + 1);
      v11 = *((_OWORD *)v4 + 3);
      v8[2] = *((_OWORD *)v4 + 2);
      v8[3] = v11;
      *v8 = v9;
      v8[1] = v10;
      v12 = *((_OWORD *)v4 + 4);
      v13 = *((_OWORD *)v4 + 5);
      v14 = *((_OWORD *)v4 + 7);
      v8[6] = *((_OWORD *)v4 + 6);
      v8[7] = v14;
      v8[4] = v12;
      v8[5] = v13;
      v15 = *((_OWORD *)v4 + 8);
      v16 = *((_OWORD *)v4 + 9);
      v17 = *((_OWORD *)v4 + 11);
      v8[10] = *((_OWORD *)v4 + 10);
      v8[11] = v17;
      v8[8] = v15;
      v8[9] = v16;
      v4 += 192;
      v8 += 12;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

uint64_t sub_22F2625F8(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 4) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_OWORD *)(*(_QWORD *)v5 + 16 * v7);
    do
    {
      v9 = *(_OWORD *)v4;
      v4 += 16;
      *v8++ = v9;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 4);
  return result;
}

uint64_t sub_22F26267C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
    return sub_22E4CDD34(result, a2, *a3);
  v4 = (uint64_t *)(*(_QWORD *)result + 16 * v3);
  *v4 = a2;
  v4[1] = *a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

double sub_22F2626B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  uint64_t Name;
  uint64_t v8;
  double result;
  _QWORD v10[4];
  __int16 v11;
  _OWORD v12[3];

  v4 = (uint64_t *)(a1 + 272);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v5;
  v12[2] = v6;
  Name = llvm::Value::getName(*(llvm::Value **)a2);
  v11 = 773;
  v10[0] = Name;
  v10[1] = v8;
  v10[2] = ".realp";
  *(_QWORD *)&result = sub_22E3C408C(v4, (uint64_t)v12, 0, (uint64_t)v10, a3).n128_u64[0];
  return result;
}

double sub_22F262720@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  uint64_t Name;
  uint64_t v8;
  double result;
  _QWORD v10[4];
  __int16 v11;
  _OWORD v12[3];

  v4 = (uint64_t *)(a1 + 272);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v5;
  v12[2] = v6;
  Name = llvm::Value::getName(*(llvm::Value **)a2);
  v11 = 773;
  v10[0] = Name;
  v10[1] = v8;
  v10[2] = ".imagp";
  *(_QWORD *)&result = sub_22E3C408C(v4, (uint64_t)v12, 1, (uint64_t)v10, a3).n128_u64[0];
  return result;
}

uint64_t sub_22F262790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;

  v7 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 12;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(v7);
  v9 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(v7 + 32));
  if (a2)
  {
    v11[0] = "unpromotion";
    v12 = 259;
    a2 = sub_22E3E5FFC(a1 + 272, a2, v9, (uint64_t)v11);
  }
  if (a3)
  {
    v11[0] = "unpromotion";
    v12 = 259;
    sub_22E3E5FFC(a1 + 272, a3, v9, (uint64_t)v11);
  }
  return a2;
}

uint64_t sub_22F262860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;

  v7 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 12;
  else
    v8 = 0;
  if (!v8)
    v7 = sub_22F10CF48(v7);
  v9 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(v7 + 32));
  if (a2)
  {
    v11[0] = "ext";
    v12 = 259;
    a2 = sub_22E3E6054(a1 + 272, a2, v9, (uint64_t)v11);
  }
  if (a3)
  {
    v11[0] = "ext";
    v12 = 259;
    sub_22E3E6054(a1 + 272, a3, v9, (uint64_t)v11);
  }
  return a2;
}

uint64_t sub_22F262930(uint64_t a1, unsigned __int8 *a2, char a3, char a4)
{
  uint64_t v5;
  uint64_t v7[2];
  char v8;
  char v9;
  uint64_t v10[2];

  v7[0] = a1;
  v7[1] = a1 + 272;
  v8 = a3;
  v9 = a4;
  sub_22E48EF80(v10, a1, (uint64_t)a2);
  v5 = sub_22E5048E4(v7, a2);
  sub_22E48F084(v10);
  return v5;
}

uint64_t sub_22F262998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17[2];
  __int16 v18;
  uint64_t v19[2];

  v17[0] = a1;
  v17[1] = a1 + 272;
  v18 = 0;
  sub_22E48EF80(v19, a1, a2);
  v7 = sub_22E5048E4(v17, a2);
  v9 = v8;
  sub_22E48F084(v19);
  v10 = *(_OWORD *)(a3 + 112);
  v15[6] = *(_OWORD *)(a3 + 96);
  v15[7] = v10;
  v16 = *(_QWORD *)(a3 + 128);
  v11 = *(_OWORD *)(a3 + 48);
  v15[2] = *(_OWORD *)(a3 + 32);
  v15[3] = v11;
  v12 = *(_OWORD *)(a3 + 80);
  v15[4] = *(_OWORD *)(a3 + 64);
  v15[5] = v12;
  v13 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v13;
  return sub_22E5025C8(v17, v7, v9, (uint64_t)v15, a4);
}

uint64_t sub_22F262A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[8];
  uint64_t v11;
  uint64_t v12[2];
  __int16 v13;

  v12[0] = a1;
  v12[1] = a1 + 272;
  v13 = 0;
  v5 = *(_OWORD *)(a4 + 112);
  v10[6] = *(_OWORD *)(a4 + 96);
  v10[7] = v5;
  v11 = *(_QWORD *)(a4 + 128);
  v6 = *(_OWORD *)(a4 + 48);
  v10[2] = *(_OWORD *)(a4 + 32);
  v10[3] = v6;
  v7 = *(_OWORD *)(a4 + 80);
  v10[4] = *(_OWORD *)(a4 + 64);
  v10[5] = v7;
  v8 = *(_OWORD *)(a4 + 16);
  v10[0] = *(_OWORD *)a4;
  v10[1] = v8;
  return sub_22E5025C8(v12, a2, a3, (uint64_t)v10, a5);
}

uint64_t sub_22F262A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];
  __int16 v8;
  uint64_t v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v7[0] = a1;
  v7[1] = a1 + 272;
  v8 = 0;
  result = sub_22E502A30((uint64_t)v7, a2, v9, a3);
  v6 = *(_QWORD *)(a1 + 144);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 152) + 72))
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 808) + 616))(*(_QWORD *)(v6 + 808), a1, *(_QWORD *)(a2 + 16));
  return result;
}

void sub_22F262B08(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_22F262B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v4[2];
  __int16 v5;
  uint64_t v6;

  v4[0] = a1;
  v4[1] = a1 + 272;
  v5 = 0;
  return sub_22E502B04((uint64_t)v4, a2, (uint64_t (*)(_QWORD *, llvm::Value **))sub_22E503A6C, 0, (uint64_t)&v6, a3);
}

void sub_22F262B8C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_22F262BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD v5[2];
  __int16 v6;
  _QWORD v7[11];

  v7[0] = 0;
  v7[1] = 0;
  v5[0] = a1;
  v5[1] = a1 + 272;
  v6 = 0;
  result = sub_22E502B04((uint64_t)v5, a2, (uint64_t (*)(_QWORD *, llvm::Value **))sub_22E503A6C, 0, (uint64_t)v7, a3);
  *v3 = v7[0];
  return result;
}

uint64_t sub_22F262C28(char *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17[2];
  void *v18[10];

  v18[9] = *(void **)MEMORY[0x24BDAC8D0];
  if (sub_22EF5EB64(*(_QWORD *)(*(_QWORD *)a1 + 144), a3))
    return 0;
  LOWORD(v17[0]) = 0;
  v17[1] = 0;
  LODWORD(v18[0]) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    v11 = sub_22F005B20((uint64_t)a2, v17, v10, 0, v6, v7, v8, v9);
  else
    v11 = sub_22F005120(a2, (uint64_t)v17, v10, a1[20]);
  if (v11)
    v12 = LOBYTE(v17[0]) == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = sub_22E50650C(a1, v18, a3);
  }
  else
  {
    v16[0] = *(_QWORD *)a1;
    v16[1] = a1;
    v16[2] = *(_QWORD *)(v16[0] + 232);
    v13 = sub_22E507A30((uint64_t)v16, a2);
  }
  v14 = v13;
  if (LODWORD(v18[0]) >= 2)
    sub_22EF53BC0((uint64_t *)v18);
  return v14;
}

uint64_t sub_22F262D70(_QWORD **a1, int a2, int a3, unint64_t a4)
{
  char v7;
  uint64_t result;

  v7 = *((_BYTE *)a1 + 16);
  *((_BYTE *)a1 + 16) = 1;
  result = sub_22E50650C();
  *((_BYTE *)a1 + 16) = v7;
  if (!result)
  {
    sub_22E628310((uint64_t)*a1, a2, "internal error: could not emit constant value \"abstractly\"", 0x3AuLL);
    return sub_22E507208(*a1, a4);
  }
  return result;
}

uint64_t sub_22F262DEC(_QWORD **a1, uint64_t a2, unint64_t a3)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v6 = *((_BYTE *)a1 + 16);
  *((_BYTE *)a1 + 16) = 1;
  result = sub_22F262C28();
  *((_BYTE *)a1 + 16) = v6;
  if (!result)
  {
    v8 = (uint64_t)*a1;
    sub_22EFF605C(a2);
    sub_22E628310(v8, v9, "internal error: could not emit constant value \"abstractly\"", 0x3AuLL);
    return sub_22E507208(*a1, a3);
  }
  return result;
}

llvm::Constant *sub_22F262E6C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6;
  llvm::Constant *result;

  v6 = sub_22E50794C(*a1, a3);
  result = (llvm::Constant *)sub_22F262C28((char *)a1, a2, v6);
  if (result)
    return (llvm::Constant *)sub_22E5082B4(*a1, result, a3);
  return result;
}

uint64_t sub_22F262ED4(uint64_t a1, uint64_t a2, int a3)
{
  *(_BYTE *)(a1 + 17) = 1;
  *(_DWORD *)(a1 + 24) = a3;
  return sub_22E507554();
}

llvm::Constant *sub_22F262EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  llvm::Constant *result;

  v6 = sub_22E50794C(*(_QWORD *)a1, a3);
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = 1;
  result = (llvm::Constant *)sub_22F262C28(a1, a2, v6);
  *(_BYTE *)(a1 + 16) = v7;
  if (result)
    return (llvm::Constant *)sub_22E5082B4(*(_QWORD *)a1, result, a3);
  return result;
}

llvm::Constant *sub_22F262F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  llvm::Constant *result;

  v6 = sub_22E50794C(*(_QWORD *)a1, a3);
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = 1;
  result = (llvm::Constant *)sub_22E50650C(a1, a2, v6);
  *(_BYTE *)(a1 + 16) = v7;
  if (result)
    return (llvm::Constant *)sub_22E5082B4(*(_QWORD *)a1, result, a3);
  return result;
}

uint64_t sub_22F262FD8(uint64_t a1, llvm::Value *a2, unsigned __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a3 & 2) != 0)
  {
    if (*(_BYTE *)(a1 + 16))
      return 0;
    v6 = sub_22E5075BC(a1);
  }
  else
  {
    v6 = 0;
  }
  v7 = llvm::ConstantInt::get();
  v8 = sub_22E5DF610(*(uint64_t **)a1, a2, a3 >> 6, v6, v7);
  if ((a3 & 2) != 0)
    sub_22E507698(a1, v8);
  return v8;
}

_DWORD *sub_22F26307C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;

  v2 = result;
  v4 = result[2];
  v9 = v4;
  v5 = (uint64_t *)result;
  if (v4 >= 0x41)
  {
    v5 = &v8;
    result = (_DWORD *)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const llvm::APInt *)result);
    v4 = v9;
  }
  v6 = *v5;
  v7 = (v2[4] & 0x20000000) == 0;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 12) = v7;
  return result;
}

uint64_t sub_22F2630F0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F25E168(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

unsigned int *sub_22F263188(unsigned int *result, uint64_t *__dst, uint64_t *a3, uint64_t *__src, uint64_t *a5)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = result;
  while (__src != a5)
  {
    if (__dst == a3)
      return sub_22F263224(result, (uint64_t)a3, __src, a5);
    v7 = *__src++;
    *__dst++ = v7;
  }
  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)result + 8 * result[2];
  v10 = v9 - (_QWORD)a3;
  if ((uint64_t *)v9 != a3)
  {
    result = (unsigned int *)memmove(__dst, a3, v9 - (_QWORD)a3);
    v8 = *(_QWORD *)v6;
  }
  v6[2] = ((unint64_t)__dst + v10 - v8) >> 3;
  return result;
}

unsigned int *sub_22F263224(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return (unsigned int *)sub_22F2633B0((uint64_t)result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = (unsigned int *)sub_22F246808((uint64_t)v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

uint64_t sub_22F2633B0(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

llvm::Value *sub_22F263430(uint64_t a1, llvm::Value *a2, llvm::Value *a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v7[0] = a1;
  v7[1] = a1 + 272;
  v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
  return sub_22E50FC50(v7, a2, a3, a4, a5, a6);
}

unint64_t sub_22F26346C(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7 = a2;
    v8 = xmmword_22F4583A8;
    result = sub_22E4EF088(result, (unint64_t)&v7, 1);
    v5 = *(_QWORD *)v2 + 24 * *(unsigned int *)(v2 + 8);
    v6 = *(_OWORD *)result;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v5 = v6;
  }
  else
  {
    v4 = *(_QWORD *)result + 24 * v3;
    *(_QWORD *)v4 = a2;
    *(_OWORD *)(v4 + 8) = xmmword_22F4583A8;
  }
  ++*(_DWORD *)(v2 + 8);
  return result;
}

llvm::Instruction *sub_22F263510(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  llvm::Instruction *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  llvm::Constant **v14;
  uint64_t v15;
  uint64_t BinaryIntrinsic;
  _BYTE v18[32];
  __int16 v19;
  unsigned int v20;
  __int32 v21[8];
  __int16 v22;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v20 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = sub_22E51B708(a1, a2, a3, (__int32 *)&v20, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v20, 0);
  if ((v20 & 0x40000000) != 0)
  {
    v22 = 257;
    BinaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic();
    goto LABEL_5;
  }
  v13 = *a1;
  v19 = 257;
  v14 = (llvm::Constant **)(*(uint64_t (**)(_QWORD, llvm::Instruction *, llvm::Instruction *, _QWORD, _QWORD))(**(_QWORD **)(v13 + 72) + 16))(*(_QWORD *)(v13 + 72), v11, v12, 0, 0);
  if (!v14)
  {
    v22 = 257;
    v15 = llvm::BinaryOperator::Create();
    BinaryIntrinsic = sub_22E3C12C8((uint64_t *)v13, v15, (uint64_t)v18);
LABEL_5:
    v14 = (llvm::Constant **)BinaryIntrinsic;
  }
  v21[0] = llvm::FixedPointSemantics::getCommonSemantics();
  return sub_22E51B708(a1, v14, &v20, v21, 0);
}

llvm::Instruction *sub_22F263698(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  llvm::Instruction *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  llvm::Constant **BinaryIntrinsic;
  llvm::Type *v15;
  uint64_t *Select;
  uint64_t NullValue;
  uint64_t v18;
  __int32 v20[8];
  __int16 v21;
  unsigned int v22;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v22 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = sub_22E51B708(a1, a2, a3, (__int32 *)&v22, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v22, 0);
  if ((v22 & 0x40000000) != 0)
  {
    v21 = 257;
    BinaryIntrinsic = (llvm::Constant **)llvm::IRBuilderBase::CreateBinaryIntrinsic();
  }
  else
  {
    v13 = *a1;
    v21 = 257;
    BinaryIntrinsic = (llvm::Constant **)sub_22E3E48CC(v13, (uint64_t)v11, (uint64_t)v12, (uint64_t)v20, 0, 0);
  }
  Select = (uint64_t *)BinaryIntrinsic;
  if (v22 >> 30 == 3)
  {
    NullValue = llvm::Constant::getNullValue(*BinaryIntrinsic, v15);
    v18 = *a1;
    v21 = 257;
    sub_22E3C18F4(v18, 40, Select, NullValue, (uint64_t)v20);
    Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect();
  }
  v20[0] = llvm::FixedPointSemantics::getCommonSemantics();
  return sub_22E51B708(a1, (llvm::Constant **)Select, &v22, v20, 0);
}

llvm::Instruction *sub_22F263858(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  llvm::Instruction *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  llvm::Constant **Intrinsic;
  __int32 v17[8];
  __int16 v18;
  unsigned int v19;
  llvm::Instruction *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v19 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = sub_22E51B708(a1, a2, a3, (__int32 *)&v19, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v19, 0);
  v13 = *a1;
  v23 = *(_QWORD *)v11;
  v20 = v11;
  v21 = v12;
  llvm::Type::getInt32Ty(*(llvm::Type **)(v13 + 64), v14);
  v22 = llvm::ConstantInt::get();
  v18 = 257;
  Intrinsic = (llvm::Constant **)llvm::IRBuilderBase::CreateIntrinsic();
  v17[0] = llvm::FixedPointSemantics::getCommonSemantics();
  return sub_22E51B708(a1, Intrinsic, &v19, v17, 0);
}

llvm::Instruction *sub_22F2639E4(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  llvm::Instruction *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  llvm::Constant **Intrinsic;
  __int32 v17[8];
  __int16 v18;
  unsigned int v19;
  llvm::Instruction *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v19 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = sub_22E51B708(a1, a2, a3, (__int32 *)&v19, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v19, 0);
  v13 = *a1;
  v23 = *(_QWORD *)v11;
  v20 = v11;
  v21 = v12;
  llvm::Type::getInt32Ty(*(llvm::Type **)(v13 + 64), v14);
  v22 = llvm::ConstantInt::get();
  v18 = 257;
  Intrinsic = (llvm::Constant **)llvm::IRBuilderBase::CreateIntrinsic();
  v17[0] = llvm::FixedPointSemantics::getCommonSemantics();
  return sub_22E51B708(a1, Intrinsic, &v19, v17, 0);
}

llvm::Instruction *sub_22F263B70(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;

  v7 = *a1;
  v8 = *a2;
  v13 = 257;
  v9 = sub_22E3BF45C(v7, a4, v8, 0, (uint64_t)v12);
  if ((*(_BYTE *)(a3 + 3) & 0x40) != 0)
  {
    v13 = 257;
    return (llvm::Instruction *)llvm::IRBuilderBase::CreateBinaryIntrinsic();
  }
  else
  {
    v10 = (uint64_t)*a1;
    v13 = 257;
    return sub_22E3ED744(v10, (uint64_t)a2, v9, (uint64_t)v12, 0, 0);
  }
}

uint64_t sub_22F263C34(uint64_t **a1, uint64_t *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;

  v7 = *a1;
  v8 = *a2;
  v13 = 257;
  v9 = sub_22E3BF45C(v7, a4, v8, 0, (uint64_t)v12);
  v10 = (uint64_t)*a1;
  if ((*a3 & 0x20000000) != 0)
  {
    v13 = 257;
    return sub_22E3EA5BC(v10, (uint64_t)a2, v9, (uint64_t)v12, 0);
  }
  else
  {
    v13 = 257;
    return sub_22E3E4A40(v10, (uint64_t)a2, v9, (uint64_t)v12, 0);
  }
}

uint64_t sub_22F263CC4(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  uint64_t *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v16[22];
  unsigned int v17;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v17 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = (uint64_t *)sub_22E51B708(a1, a2, a3, (__int32 *)&v17, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v17, 0);
  v13 = *a1;
  v16[16] = 257;
  if ((v17 & 0x20000000) != 0)
    v14 = 40;
  else
    v14 = 36;
  return sub_22E3C18F4(v13, v14, v11, (uint64_t)v12, (uint64_t)v16);
}

uint64_t sub_22F263DA8(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  uint64_t *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v16[22];
  unsigned int v17;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v17 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = (uint64_t *)sub_22E51B708(a1, a2, a3, (__int32 *)&v17, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v17, 0);
  v13 = *a1;
  v16[16] = 257;
  if ((v17 & 0x20000000) != 0)
    v14 = 38;
  else
    v14 = 34;
  return sub_22E3C18F4(v13, v14, v11, (uint64_t)v12, (uint64_t)v16);
}

uint64_t sub_22F263E8C(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  uint64_t *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v16[22];
  unsigned int v17;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v17 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = (uint64_t *)sub_22E51B708(a1, a2, a3, (__int32 *)&v17, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v17, 0);
  v13 = *a1;
  v16[16] = 257;
  if ((v17 & 0x20000000) != 0)
    v14 = 41;
  else
    v14 = 37;
  return sub_22E3C18F4(v13, v14, v11, (uint64_t)v12, (uint64_t)v16);
}

uint64_t sub_22F263F70(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  uint64_t *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v16[22];
  unsigned int v17;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v17 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = (uint64_t *)sub_22E51B708(a1, a2, a3, (__int32 *)&v17, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v17, 0);
  v13 = *a1;
  v16[16] = 257;
  if ((v17 & 0x20000000) != 0)
    v14 = 39;
  else
    v14 = 35;
  return sub_22E3C18F4(v13, v14, v11, (uint64_t)v12, (uint64_t)v16);
}

uint64_t sub_22F264054(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  uint64_t *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  _WORD v15[22];
  unsigned int v16;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v16 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = (uint64_t *)sub_22E51B708(a1, a2, a3, (__int32 *)&v16, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v16, 0);
  v13 = *a1;
  v15[16] = 257;
  return sub_22E3C18F4(v13, 32, v11, (uint64_t)v12, (uint64_t)v15);
}

uint64_t sub_22F26411C(uint64_t *a1, llvm::Constant **a2, unsigned __int32 *a3, llvm::Constant **a4, unsigned __int32 *a5)
{
  unsigned int CommonSemantics;
  uint64_t *v11;
  llvm::Instruction *v12;
  uint64_t v13;
  _WORD v15[22];
  unsigned int v16;

  CommonSemantics = llvm::FixedPointSemantics::getCommonSemantics();
  v16 = *a3 & *a5 & 0x80000000 | CommonSemantics & 0x7FFF0000 | (unsigned __int16)(((CommonSemantics >> 30) & ((*a3 & *a5 & 0x80000000) != 0))
                                                                                 + CommonSemantics);
  v11 = (uint64_t *)sub_22E51B708(a1, a2, a3, (__int32 *)&v16, 0);
  v12 = sub_22E51B708(a1, a4, a5, (__int32 *)&v16, 0);
  v13 = *a1;
  v15[16] = 257;
  return sub_22E3C18F4(v13, 33, v11, (uint64_t)v12, (uint64_t)v15);
}

uint64_t sub_22F2641E4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;

  if ((*(_BYTE *)(a1 + 3) & 1) != 0)
  {
    v3 = *(_DWORD *)(a1 + 24);
    v4 = *(_DWORD *)(a1 + 28);
    sub_22E51A8D0(&v5, a2);
    return v5 & ~v4 | v4 & v3;
  }
  else
  {
    sub_22E51A8D0(&v6, a2);
    return v6;
  }
}

uint64_t sub_22F264238(uint64_t *a1, llvm::Type **a2, unsigned __int16 *a3)
{
  _QWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t IntNTy;
  uint64_t v14;
  llvm::Constant **Intrinsic;
  llvm::Type *v16;
  uint64_t *v17;
  uint64_t NullValue;
  uint64_t v19;
  _BYTE v21[32];
  __int16 v22;
  const char *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2;
  v27 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)a3;
  v7 = sub_22F264530(*a2);
  if (v7 != *v4)
  {
    v8 = *a1;
    v22 = 257;
    v4 = (_QWORD *)sub_22E3E6054(v8, (uint64_t)v4, v7, (uint64_t)v21);
  }
  v9 = v6 & 0xA0000000;
  v10 = *a1;
  exp2((double)(a3[1] & 0x1FFF));
  v11 = llvm::ConstantFP::get();
  v22 = 257;
  v12 = sub_22E4207BC(v10, (uint64_t)v4, v11, (uint64_t)v21, 0);
  IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(*a1 + 64), (llvm::LLVMContext *)*a3);
  if ((*((_BYTE *)a3 + 3) & 0x40) != 0)
  {
    v23 = (const char *)IntNTy;
    v24 = v7;
    v26 = v12;
    v22 = 257;
    Intrinsic = (llvm::Constant **)llvm::IRBuilderBase::CreateIntrinsic();
  }
  else
  {
    v14 = *a1;
    v22 = 257;
    if (v9)
      Intrinsic = (llvm::Constant **)sub_22E3ED374(v14, v12, IntNTy, (uint64_t)v21);
    else
      Intrinsic = (llvm::Constant **)sub_22E3ED31C(v14, v12, IntNTy, (uint64_t)v21);
  }
  v17 = (uint64_t *)Intrinsic;
  if (*(_DWORD *)a3 >> 30 == 3)
  {
    NullValue = llvm::Constant::getNullValue(*Intrinsic, v16);
    v19 = *a1;
    v22 = 257;
    sub_22E3C18F4(v19, 40, v17, NullValue, (uint64_t)v21);
    v23 = "satmin";
    v25 = 259;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return (uint64_t)v17;
}

uint64_t sub_22F264434(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;

  v8 = sub_22F264530(a4);
  v9 = *a1;
  if ((*(_DWORD *)a3 & 0x20000000) != 0)
  {
    v18 = 257;
    v10 = sub_22E3ED280(v9, a2, v8, (uint64_t)v17);
  }
  else
  {
    v18 = 257;
    v10 = sub_22E3ED228(v9, a2, v8, (uint64_t)v17);
  }
  v11 = v10;
  v12 = *a1;
  ldexp(1.0, -(*(_WORD *)(a3 + 2) & 0x1FFF));
  v13 = llvm::ConstantFP::get();
  v18 = 257;
  v14 = sub_22E4207BC(v12, v11, v13, (uint64_t)v17, 0);
  if ((llvm::Type *)v8 != a4)
  {
    v15 = *a1;
    v18 = 257;
    return sub_22E3E5FFC(v15, v14, (uint64_t)a4, (uint64_t)v17);
  }
  return v14;
}

uint64_t sub_22F264530(llvm::Type *a1)
{
  llvm::Type::getFltSemantics(a1);
  if ((llvm::FixedPointSemantics::fitsInFloatSemantics() & 1) == 0)
  {
    do
      llvm::APFixedPoint::promoteFloatSemantics();
    while (!llvm::FixedPointSemantics::fitsInFloatSemantics());
  }
  return llvm::Type::getFloatingPointTy();
}

unint64_t sub_22F264594(unint64_t result, __int128 *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    result = sub_22E4EF088(result, (unint64_t)&v7, 1);
    v4 = *(_QWORD *)v2 + 24 * *(unsigned int *)(v2 + 8);
    v5 = *(_OWORD *)result;
    v6 = *(_QWORD *)(result + 16);
  }
  else
  {
    v4 = *(_QWORD *)result + 24 * v3;
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

llvm::Value *sub_22F264628(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::LLVMContext *v11;
  llvm::LLVMContext *v12;
  llvm::LLVMContext *v13;
  uint64_t Declaration;
  _QWORD v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  llvm::FixedVectorType::get();
  v16[0] = a2;
  v16[1] = a3;
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v11);
  v16[2] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v12);
  v16[3] = llvm::ConstantInt::get();
  llvm::Type::getInt32Ty((llvm::Type *)(*a1)[8], v13);
  v16[4] = llvm::ConstantInt::get();
  Declaration = llvm::Intrinsic::getDeclaration();
  return sub_22E462B78(*a1, *(_QWORD *)(Declaration + 24), Declaration, (uint64_t)v16, 5, a7, 0);
}

llvm::Instruction *sub_22F264768(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v4 = sub_22F264804((uint64_t)a1, a2, a3);
  v6 = v4;
  if ((*(_DWORD *)(*(_QWORD *)v4 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8);
  else
    v7 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  v8 = *a1;
  v11 = 257;
  if (v7 > 6)
    return sub_22E3BDEA8(v8, v6, v5, (uint64_t)v10, 0, 0);
  else
    return (llvm::Instruction *)sub_22E4207BC(v8, v6, v5, (uint64_t)v10, 0);
}

uint64_t sub_22F264804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a2;
  v4 = *(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    if (v4 != 18)
      llvm::IRBuilderBase::CreateVectorSplat();
  }
  else if (v4 == 18)
  {
    return llvm::IRBuilderBase::CreateVectorSplat();
  }
  return v3;
}

uint64_t sub_22F2648E0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t VectorSplat;
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;

  v10[0] = "scalar.splat";
  v11 = 259;
  VectorSplat = llvm::IRBuilderBase::CreateVectorSplat();
  v8 = *a1;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 8) > 6u)
  {
    v11 = 257;
    if (a4)
      return sub_22E4DF3BC(v8, a2, VectorSplat, (uint64_t)v10, 0);
    else
      return sub_22E5047C0(v8, a2, VectorSplat, (uint64_t)v10, 0);
  }
  else
  {
    v11 = 257;
    return sub_22E42E65C(v8, a2, VectorSplat, (uint64_t)v10, 0);
  }
}

uint64_t sub_22F2649B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = sub_22E3C19FC(a1, 23, a2, a3, a4);
  if (!result)
  {
    v7 = llvm::BinaryOperator::Create();
    return sub_22E3C12C8(a1, v7, a4);
  }
  return result;
}

uint64_t sub_22F264A38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t VectorSplat;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _WORD v10[20];
  const char *v11;
  __int16 v12;

  VectorSplat = a3;
  v4 = a2;
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    if (v6 != 18)
    {
      v11 = "scalar.splat";
      v12 = 259;
      VectorSplat = llvm::IRBuilderBase::CreateVectorSplat();
    }
  }
  else if (v6 == 18)
  {
    v11 = "scalar.splat";
    v12 = 259;
    v4 = llvm::IRBuilderBase::CreateVectorSplat();
  }
  v7 = *a1;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8) > 6u)
  {
    v10[16] = 257;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v7 + 72) + 16))(*(_QWORD *)(v7 + 72), v4, VectorSplat, 0, 0);
    if (!result)
    {
      v12 = 257;
      v9 = llvm::BinaryOperator::Create();
      return sub_22E3C12C8((uint64_t *)v7, v9, (uint64_t)v10);
    }
  }
  else
  {
    v12 = 257;
    return sub_22E42067C(v7, v4, VectorSplat, (uint64_t)&v11, 0);
  }
  return result;
}

llvm::Instruction *sub_22F264BAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t VectorSplat;
  uint64_t v4;
  int v6;
  uint64_t v7;
  _QWORD v9[4];
  __int16 v10;

  VectorSplat = a3;
  v4 = a2;
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    if (v6 != 18)
    {
      v9[0] = "scalar.splat";
      v10 = 259;
      VectorSplat = llvm::IRBuilderBase::CreateVectorSplat();
    }
  }
  else if (v6 == 18)
  {
    v9[0] = "scalar.splat";
    v10 = 259;
    v4 = llvm::IRBuilderBase::CreateVectorSplat();
  }
  v7 = *a1;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 8) > 6u)
  {
    v10 = 257;
    return sub_22E3E48CC(v7, v4, VectorSplat, (uint64_t)v9, 0, 0);
  }
  else
  {
    v10 = 257;
    return (llvm::Instruction *)sub_22E4208FC(v7, v4, VectorSplat, (uint64_t)v9, 0);
  }
}

void sub_22F264CE4(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::Type **v6;
  llvm::LLVMContext *v7;
  uint64_t v8;
  uint64_t Function;
  const char *v10;
  __int16 v11;
  uint64_t Int8PtrTy;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *(llvm::Type ***)(*(_QWORD *)(a1 + 144) + 200);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*v6, 0);
  v13 = llvm::Type::getInt8PtrTy(*v6, 0);
  llvm::Type::getInt32Ty(*v6, v7);
  v8 = llvm::FunctionType::get();
  Function = llvm::Module::getFunction();
  if (!Function)
  {
    v10 = "vprintf";
    v11 = 259;
    Function = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](Function, v8, 0, 0xFFFFFFFFLL, &v10, v6);
  }
  sub_22E521C44(a2, a1, Function, 0, a3);
}

uint64_t sub_22F264E00@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v29[6];
  char v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[154];
  _QWORD v45[26];
  _QWORD v46[4];
  _QWORD v47[6];

  v47[5] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x800000000;
  v44[152] = v45;
  v44[153] = 0x100000000;
  v45[24] = v46;
  v45[25] = 0x100000000;
  v46[2] = v47;
  v46[3] = 0x200000000;
  v47[4] = 0;
  v6 = *a2;
  v7 = v6 >> 24;
  v8 = sub_22EFFA604(*(unsigned __int8 **)((char *)a2 + (v6 >> 24)));
  if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 52 >= 6)
    v9 = 0;
  else
    v9 = v8;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 26;
  else
    v11 = 0;
  if (!v11)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      v10 = sub_22F10CF48(v10);
      v6 = *a2;
      v7 = v6 >> 24;
    }
    else
    {
      v10 = 0;
    }
  }
  v12 = v10 & 0xFFFFFFFFFFFFFFFBLL;
  v13 = (unsigned __int8 **)((char *)a2 + v7);
  v14 = (uint64_t)&a2[2 * ((v6 >> 18) & 1) + 2] + v7;
  v15 = (unint64_t *)(v14 + 8 * a2[4]);
  v16 = sub_22EFFA604(*v13);
  if (v16)
  {
    if ((*(_DWORD *)(v16 + 28) & 0x7Eu) - 52 >= 6)
      v17 = 0;
    else
      v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  sub_22E477B1C(a1, (uint64_t)&v42, v12, v14, v15, v17, 0, 0);
  v39 = v41;
  v40 = 0x800000000;
  if ((_DWORD)v43)
  {
    v18 = v42;
    v19 = 152 * v43;
    while (1)
    {
      v35 = *((_OWORD *)v18 + 6);
      v36 = *((_OWORD *)v18 + 7);
      v37 = *((_OWORD *)v18 + 8);
      v38 = v18[18];
      v31[2] = *((_OWORD *)v18 + 2);
      v32 = *((_OWORD *)v18 + 3);
      v33 = *((_OWORD *)v18 + 4);
      v34 = *((_OWORD *)v18 + 5);
      v31[0] = *(_OWORD *)v18;
      v31[1] = *((_OWORD *)v18 + 1);
      sub_22E479748((uint64_t)v31, a1, (uint64_t)v29);
      if ((v30 & 6) != 0)
        break;
      sub_22E479748((uint64_t)v31, a1, (uint64_t)v29);
      v20 = v29[0];
      v21 = v40;
      if (v40 >= (unint64_t)HIDWORD(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = v40;
      }
      *((_QWORD *)v39 + v21) = v20;
      LODWORD(v40) = v40 + 1;
      v18 += 19;
      v19 -= 152;
      if (!v19)
        goto LABEL_21;
    }
    sub_22E628400(*(_QWORD *)(a1 + 144), (uint64_t)a2, "non-scalar arg to printf");
    v26 = llvm::ConstantInt::get();
    v27 = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = v26;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 48) = v27 & 0xF8;
  }
  else
  {
LABEL_21:
    v22 = a1 + 272;
    sub_22E522324((uint64_t)v31, *(llvm::BasicBlock **)(a1 + 320), *(_QWORD *)(a1 + 328), 0, 0, 0);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
    sub_22E3CF21C((uint64_t)v31, 0, v28);
    if (v28)
      llvm::MetadataTracking::untrack();
    v23 = llvm::emitAMDGPUPrintfCall();
    sub_22E3CB840(v22, v32, *((uint64_t *)&v32 + 1));
    v24 = *(_BYTE *)(a3 + 48);
    *(_QWORD *)a3 = v23;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 48) = v24 & 0xF8;
    sub_22E5222DC((void **)v31);
  }
  if (v39 != v41)
    free(v39);
  return sub_22E3CEBAC((uint64_t)&v42);
}

void sub_22F265154(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm::Type **v7;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t Function;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t Int8PtrTy;
  uint64_t v16;
  uint64_t Int32Ty;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(llvm::Type ***)(v6 + 200);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*v7, 0);
  v16 = llvm::Type::getInt8PtrTy(*v7, 0);
  Int32Ty = llvm::Type::getInt32Ty(*v7, v8);
  llvm::Type::getInt32Ty(*v7, v9);
  v10 = llvm::FunctionType::get();
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v12 = Function;
    if (*(_QWORD *)(Function + 24) != v10)
    {
      sub_22E628310(v6, 0, "Invalid type declaration for __llvm_omp_vprintf", 0x2FuLL);
      v12 = 0;
    }
  }
  else
  {
    v13 = "__llvm_omp_vprintf";
    v14 = 259;
    v12 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v12, v10, 0, 0xFFFFFFFFLL, &v13, v7);
  }
  sub_22E521C44(a2, a1, v12, 1, a3);
}

_QWORD *sub_22F2652A8(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F252258((uint64_t)a1, a2);
  a1[154] = a1 + 156;
  a1[155] = 0x100000000;
  if (*(_DWORD *)(a2 + 1240))
    sub_22F25232C((uint64_t)(a1 + 154), a2 + 1232);
  a1[180] = a1 + 182;
  a1[181] = 0x100000000;
  if (*(_DWORD *)(a2 + 1448))
    sub_22F252404((uint64_t)(a1 + 180), a2 + 1440);
  a1[184] = a1 + 186;
  a1[185] = 0x200000000;
  if (*(_DWORD *)(a2 + 1480))
    sub_22F252404((uint64_t)(a1 + 184), a2 + 1472);
  a1[190] = *(_QWORD *)(a2 + 1520);
  return a1;
}

void sub_22F265384(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v4[*(unsigned int *)(a1 + 8)] = *a2;
  sub_22F265410(a1, v4);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F265410(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = v4;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        v9 = v7;
        v10 = v4;
        v8 = sub_22E524758(result);
        result = MEMORY[0x2348A0E9C](v8, 0x1020C40A35F0548);
        v7 = v9;
        v4 = v10;
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

void sub_22F265494()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2654AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E4C6660(a2, a3);
}

void sub_22F2654BC(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6[2];
  _BYTE v7[72];
  void *v8;
  __int128 v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v7, (uint64_t)&v8);
  v6[0] = *(_QWORD *)(a2 + 8);
  v6[1] = (uint64_t)v7;
  sub_22E5254A4(v6, a3);
  std::string::__init(a1, (const std::string::value_type *)v8, v9);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v7);
  if (v8 != v10)
    free(v8);
}

uint64_t sub_22F265588()
{
  return llvm::air::AIRTypeFactory::getType();
}

uint64_t sub_22F265624(uint64_t a1, llvm::LLVMContext *a2, uint64_t a3)
{
  uint64_t v5;
  llvm::Constant *v7;
  llvm::Type *v8;
  uint64_t v9;

  if (*(_DWORD *)a3 == 7 && (*(_BYTE *)(a3 + 52) & 1) != 0)
  {
    v7 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), a2);
    return llvm::Constant::getNullValue(v7, v8);
  }
  else
  {
    v9 = a3;
    v5 = sub_22E526130(a1, (uint64_t)&v9);
    sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 8) + 280), a2);
    if (*(_BYTE *)(*(_QWORD *)v5 + 8) == 13)
      return llvm::ConstantExpr::getIntToPtr();
    else
      return llvm::ConstantExpr::getBitCast();
  }
}

void sub_22F2656E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;

  v4 = (unint64_t)&a4[2 * (((unint64_t)*a4 >> 18) & 1)] + ((unint64_t)*a4 >> 24);
  sub_22E5362CC(a1, a2, a3, a4, (uint64_t)&unk_22F45903C+ 16* (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 16) >> 19) & 0x1FF)- 3632, *((_QWORD *)a4 + 1), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8), 0);
}

void sub_22F265738(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;

  v4 = (unint64_t)&a4[2 * (((unint64_t)*a4 >> 18) & 1)] + ((unint64_t)*a4 >> 24);
  sub_22E5362CC(a1, a2, a3, a4, (uint64_t)&unk_22F45967C+ 16* (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 16) >> 19) & 0x1FF)- 3632, *((_QWORD *)a4 + 1), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8), 1);
}

void sub_22F26578C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD *v4;

  v4 = (_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1)] + ((unint64_t)*a4 >> 24));
  sub_22E5362CC(a1, a2, a3, a4, (uint64_t)&unk_22F45971C+ 16* (((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4[1] + 8) & 0xFFFFFFFFFFFFFFF0)+ 8) & 0xFFFFFFFFFFFFFFF0)+ 16) >> 19) & 0x1FF)- 3632, *(_QWORD *)(v4[2] + 8), *(_QWORD *)(v4[3] + 8), 0);
}

void sub_22F2657E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Declaration;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  llvm::Value *v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  llvm::Value *v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x24BDAC8D0];
  sub_22F00905C(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v29);
  if (v30 >= 0x41)
    v8 = v29;
  else
    v8 = (uint64_t *)&v29;
  v9 = *(unsigned int *)v8;
  if (v30 >= 0x41 && v31 != 0 && v29 != 0)
    MEMORY[0x2348A0E84]();
  v12 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                  + 8);
  v13 = sub_22F10ACF8(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
  v14 = v13;
  if ((v13 & 4) != 0)
  {
    v15 = v9 == 0;
  }
  else
  {
    v15 = v9 == 0;
    if ((*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
    {
      v16 = 9473;
      v17 = 9468;
      goto LABEL_17;
    }
  }
  v16 = 9474;
  v17 = 9469;
LABEL_17:
  if (v15)
    v18 = v16;
  else
    v18 = v17;
  v19 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 256))(v19, *(_QWORD *)(a2 + 8), v14);
  v21 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 256))(v21, *(_QWORD *)(a2 + 8), v12);
  v35 = v37;
  v37[0] = v20;
  v37[1] = v22;
  v36 = 0x200000002;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), v18);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v24 = Declaration;
  if (Declaration)
    v25 = *(_QWORD *)(Declaration + 24);
  else
    v25 = 0;
  v26 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v29 = (uint64_t *)a3;
  v30 = a3 + 272;
  v31 = 0;
  v32 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v34 = sub_22E50E974((uint64_t *)&v29, v26);
  v33 = 257;
  v27 = sub_22E462B78((uint64_t *)(a3 + 272), v25, v24, (uint64_t)&v34, 1, (uint64_t)&v29, 0);
  *((_QWORD *)v27 + 8) = *(_QWORD *)(v24 + 112);
  v28 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v28 & 0xF8;
  if (v35 != v37)
    free(v35);
}

void sub_22F265A58(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Declaration;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[2];
  void *v34;
  uint64_t v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  sub_22F00905C(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v28);
  if (v29 >= 0x41)
    v8 = v28;
  else
    v8 = (uint64_t *)&v28;
  v9 = *(unsigned int *)v8;
  if (v29 >= 0x41 && v30 != 0 && v28 != 0)
    MEMORY[0x2348A0E84]();
  v12 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24))
                  + 8);
  v13 = sub_22F10ACF8(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
  if ((v13 & 4) != 0)
  {
    v14 = v9 == 0;
  }
  else
  {
    v14 = v9 == 0;
    if ((*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
    {
      v15 = 10307;
      v16 = 10300;
      goto LABEL_17;
    }
  }
  v15 = 10308;
  v16 = 10301;
LABEL_17:
  if (v14)
    v17 = v15;
  else
    v17 = v16;
  v18 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v19 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 256))(v18, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]+ ((unint64_t)*a4 >> 24))+ 8));
  v20 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 256))(v20, *(_QWORD *)(a2 + 8), v12);
  v34 = v36;
  v36[0] = v19;
  v36[1] = v21;
  v35 = 0x200000002;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), v17);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v23 = Declaration;
  if (Declaration)
    v24 = *(_QWORD *)(Declaration + 24);
  else
    v24 = 0;
  v25 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v28 = (uint64_t *)a3;
  v29 = a3 + 272;
  v30 = 0;
  v31 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v33[0] = sub_22E50E974((uint64_t *)&v28, v25);
  v26 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  v28 = (uint64_t *)a3;
  v29 = a3 + 272;
  v30 = 0;
  v31 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v33[1] = sub_22E50E974((uint64_t *)&v28, v26);
  v32 = 257;
  *((_QWORD *)sub_22E462B78((uint64_t *)(a3 + 272), v24, v23, (uint64_t)v33, 2, (uint64_t)&v28, 0) + 8) = *(_QWORD *)(v23 + 112);
  v27 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v27 & 0xF8;
  if (v34 != v36)
    free(v34);
}

void sub_22F265D10(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Declaration;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[6];

  v34[5] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v33 = 0x500000000;
  v8 = a4[4];
  if ((_DWORD)v8)
  {
    v26 = a5;
    v10 = 0;
    v11 = 8 * v8;
    do
    {
      if (v10 != 24 || (v27 = 0x8000000600000002, v28 = 0, (sub_22E3B38EC((_DWORD *)(a2 + 16), &v27) & 1) == 0))
      {
        v12 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v10 / 4]
                                  + ((unint64_t)*a4 >> 24));
        v27 = a3;
        v28 = a3 + 272;
        v29 = 0;
        v30 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
        v13 = sub_22E50E974(&v27, v12);
        v14 = v33;
        if (v33 >= (unint64_t)HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = v33;
        }
        *((_QWORD *)v32 + v14) = v13;
        LODWORD(v33) = v33 + 1;
      }
      v10 += 8;
    }
    while (v11 != v10);
    a5 = v26;
  }
  if (a5 == 1574)
    v15 = 10191;
  else
    v15 = 10207;
  v16 = llvm::PointerType::get();
  v17 = (uint64_t *)(a3 + 272);
  v18 = *((_QWORD *)v32 + 2);
  v31 = 257;
  v19 = sub_22E3C1740((uint64_t *)(a3 + 272), 49, v18, v16, (uint64_t)&v27);
  *((_QWORD *)v32 + 2) = v19;
  v20 = *(_QWORD *)(a2 + 472);
  v27 = v16;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 64))(v20, v15);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v22 = Declaration;
  if (Declaration)
    v23 = *(_QWORD *)(Declaration + 24);
  else
    v23 = 0;
  v31 = 257;
  v24 = sub_22E462B78(v17, v23, Declaration, (uint64_t)v32, v33, (uint64_t)&v27, 0);
  *((_QWORD *)v24 + 8) = *(_QWORD *)(v22 + 112);
  v25 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v25 & 0xF8;
  if (v32 != v34)
    free(v32);
}

char **sub_22F265F94(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t *v10;
  llvm::Value *v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 *v21;
  void (**v22)(__int128 *);
  int v23;
  void **v24;
  void (**v25)(void **);
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void (**v39)(void);
  __int128 v40;
  _OWORD *v42;
  _OWORD v44[8];
  uint64_t v45;
  _QWORD v46[3];
  char v47;
  _QWORD v48[3];
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  __int16 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v10 = (uint64_t *)(a3 + 272);
  v64 = (char *)a3;
  v65 = a3 + 272;
  v66 = 0;
  v67 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v11 = sub_22E50E974((uint64_t *)&v64, v9);
  v12 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  v64 = (char *)a3;
  v65 = (uint64_t)v10;
  v66 = 0;
  v67 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v13 = sub_22E50E974((uint64_t *)&v64, v12);
  v14 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 6] + ((unint64_t)*a4 >> 24))
                  + 8);
  v15 = sub_22F26CE18(a2, v14);
  v16 = v15;
  if (v15)
    v17 = *(_QWORD *)(v15 + 24);
  else
    v17 = 0;
  *(_QWORD *)&v55 = v13;
  *((_QWORD *)&v55 + 1) = v11;
  v68 = 257;
  v18 = sub_22E462B78(v10, v17, v15, (uint64_t)&v55, 2, (uint64_t)&v64, 0);
  *((_QWORD *)v18 + 8) = *(_QWORD *)(v16 + 112);
  v19 = operator new(0x50uLL);
  *v19 = &off_24FA64108;
  v19[1] = a3;
  v20 = *(_OWORD *)(a5 + 16);
  *((_OWORD *)v19 + 1) = *(_OWORD *)a5;
  *((_OWORD *)v19 + 2) = v20;
  *((_OWORD *)v19 + 3) = *(_OWORD *)(a5 + 32);
  v42 = (_OWORD *)a5;
  *((_BYTE *)v19 + 64) = *(_BYTE *)(a5 + 48);
  v19[9] = v14;
  *((_QWORD *)&v56 + 1) = v19;
  v64 = &v66;
  v65 = 0x800000000;
  sub_22F271B4C((uint64_t)&v64, (uint64_t)&v55, 1);
  v21 = (__int128 *)*((_QWORD *)&v56 + 1);
  if (*((__int128 **)&v56 + 1) == &v55)
  {
    v22 = (void (**)(__int128 *))(v55 + 32);
    v21 = &v55;
  }
  else
  {
    if (!*((_QWORD *)&v56 + 1))
      goto LABEL_7;
    v22 = (void (**)(__int128 *))(**((_QWORD **)&v56 + 1) + 40);
  }
  (*v22)(v21);
LABEL_7:
  v23 = 0;
  do
  {
    sub_22F26D1AC((uint64_t)&v50, (uint64_t *)&v64);
    if (!v53)
      sub_22E4A06C4();
    (*((void (**)(__int128 *__return_ptr))*v53 + 6))(&v55);
    v24 = v53;
    if (v53 == &v50)
    {
      v25 = (void (**)(void **))((char *)v50 + 32);
      v24 = &v50;
    }
    else
    {
      if (!v53)
        goto LABEL_12;
      v25 = (void (**)(void **))((char *)*v53 + 40);
    }
    (*v25)(v24);
LABEL_12:
    v26 = sub_22F10C2A4(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0));
    if (v26 && (*(_DWORD *)(v26 + 28) & 0x7Fu) - 35 <= 2)
    {
      v27 = sub_22EFC3B90(v26);
      v50 = &v52;
      v51 = 0x800000000;
      sub_22F271D38((uint64_t)&v50, v27, 0);
      v28 = (uint64_t *)v50;
      if ((_DWORD)v51)
      {
        v29 = v10;
        v30 = 8 * v51;
        v31 = (char *)v50 - 8;
        while (1)
        {
          v32 = *(_QWORD *)&v31[v30];
          v33 = operator new(0xA0uLL);
          *v33 = &off_24FA64150;
          v33[1] = a3;
          v34 = v62;
          *((_OWORD *)v33 + 7) = v61;
          *((_OWORD *)v33 + 8) = v34;
          v35 = v63;
          v36 = v58;
          *((_OWORD *)v33 + 3) = v57;
          *((_OWORD *)v33 + 4) = v36;
          v37 = v60;
          *((_OWORD *)v33 + 5) = v59;
          *((_OWORD *)v33 + 6) = v37;
          v38 = v56;
          *((_OWORD *)v33 + 1) = v55;
          *((_OWORD *)v33 + 2) = v38;
          v33[18] = v35;
          v33[19] = v32;
          v49 = v33;
          sub_22E536AAC((uint64_t)&v64, (unint64_t)v48);
          if (v49 == v48)
            break;
          if (v49)
          {
            v39 = (void (**)(void))(*v49 + 40);
LABEL_24:
            (*v39)();
          }
          v30 -= 8;
          if (!v30)
          {
            v28 = (uint64_t *)v50;
            v10 = v29;
            goto LABEL_28;
          }
        }
        v39 = (void (**)(void))(v48[0] + 32);
        goto LABEL_24;
      }
LABEL_28:
      if (v28 != &v52)
        free(v28);
    }
    else
    {
      LODWORD(v48[0]) = v23;
      v54 = 257;
      v46[0] = sub_22E3C2EA8((uint64_t)v10, (uint64_t)v18, (uint64_t)v48, 1, (uint64_t)&v50);
      v46[1] = 0;
      v47 &= 0xF8u;
      v44[6] = v61;
      v44[7] = v62;
      v45 = v63;
      v44[2] = v57;
      v44[3] = v58;
      v44[4] = v59;
      v44[5] = v60;
      v44[0] = v55;
      v44[1] = v56;
      sub_22E4DAAE0(a3, (uint64_t)v46, (uint64_t)v44, 1u);
      ++v23;
    }
  }
  while ((_DWORD)v65);
  v40 = v42[1];
  *(_OWORD *)a1 = *v42;
  *(_OWORD *)(a1 + 16) = v40;
  *(_OWORD *)(a1 + 32) = v42[2];
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xF8 | 4;
  return sub_22F271CAC(&v64);
}

void sub_22F266408(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t Declaration;
  uint64_t v18;
  llvm::Value *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x24BDAC8D0];
  v26 = v28;
  v27 = 0x800000000;
  v10 = a4[4];
  v21 = 0x8000000100000002;
  v22 = 0;
  v11 = sub_22E3B38EC((_DWORD *)(a2 + 16), &v21);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = 8 * (v10 - v11);
    do
    {
      v14 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v12 / 4]
                                + ((unint64_t)*a4 >> 24));
      v21 = a3;
      v22 = a3 + 272;
      v23 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v15 = sub_22E50E974(&v21, v14);
      v16 = v27;
      if (v27 >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v27;
      }
      *((_QWORD *)v26 + v16) = v15;
      LODWORD(v27) = v27 + 1;
      v12 += 8;
    }
    while (v13 != v12);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), a5);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v18 = *(_QWORD *)(Declaration + 24);
  else
    v18 = 0;
  v25 = 257;
  v19 = sub_22E462B78((uint64_t *)(a3 + 272), v18, Declaration, (uint64_t)v26, v27, (uint64_t)&v21, 0);
  *((_QWORD *)v19 + 8) = *(_QWORD *)(Declaration + 112);
  v20 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v20 & 0xF8;
  if (v26 != v28)
    free(v26);
}

void sub_22F2665F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  unsigned __int8 *v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t Declaration;
  uint64_t v17;
  llvm::Value *v18;
  char v19;
  uint64_t v20[2];
  char v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = 0x200000000;
  v9 = a4[4];
  v10 = v9 - 1;
  if (v9 != 1)
  {
    v12 = 0;
    do
    {
      v13 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4 + 2 * v12]
                                + ((unint64_t)*a4 >> 24));
      v20[0] = a3;
      v20[1] = a3 + 272;
      v21 = 0;
      v22 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v14 = sub_22E50E974(v20, v13);
      v15 = v25;
      if (v25 >= (unint64_t)HIDWORD(v25))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v25;
      }
      *((_QWORD *)v24 + v15) = v14;
      LODWORD(v25) = v25 + 1;
      ++v12;
    }
    while (v10 != (_DWORD)v12);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), a5);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v17 = *(_QWORD *)(Declaration + 24);
  else
    v17 = 0;
  v23 = 257;
  v18 = sub_22E462B78((uint64_t *)(a3 + 272), v17, Declaration, (uint64_t)v24, v25, (uint64_t)v20, 0);
  *((_QWORD *)v18 + 8) = *(_QWORD *)(Declaration + 112);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v19 & 0xF8;
  if (v24 != v26)
    free(v24);
}

uint64_t sub_22F2667B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  llvm::LLVMContext *v10;
  llvm::LLVMContext *v11;
  llvm::LLVMContext *v12;
  uint64_t Declaration;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20[2];
  char v21;
  uint64_t v22;
  __int16 v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  v9 = (uint64_t *)(a3 + 272);
  v20[0] = a3;
  v20[1] = a3 + 272;
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v24[0] = sub_22E50E974(v20, v8);
  llvm::Type::getInt16Ty(*(llvm::Type **)(a3 + 336), v10);
  llvm::ConstantInt::get();
  v23 = 257;
  v24[1] = llvm::IRBuilderBase::CreateVectorSplat();
  llvm::Type::getInt32Ty(*(llvm::Type **)(a3 + 336), v11);
  v24[2] = llvm::ConstantInt::get();
  llvm::Type::getInt16Ty(*(llvm::Type **)(a3 + 336), v12);
  v24[3] = llvm::ConstantInt::get();
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), 9013);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v14 = Declaration;
  if (Declaration)
    v15 = *(_QWORD *)(Declaration + 24);
  else
    v15 = 0;
  v23 = 257;
  v16 = sub_22E462B78(v9, v15, Declaration, (uint64_t)v24, 4, (uint64_t)v20, 0);
  *((_QWORD *)v16 + 8) = *(_QWORD *)(v14 + 112);
  v17 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 8) + 280), *((llvm::LLVMContext **)a4 + 1));
  v23 = 257;
  result = sub_22E3C1740(v9, 49, (uint64_t)v16, v17, (uint64_t)v20);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v19 & 0xF8;
  return result;
}

uint64_t sub_22F26697C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t Declaration;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 6] + ((unint64_t)*a4 >> 24));
  v9 = (uint64_t *)(a3 + 272);
  v19 = a3;
  v20 = (uint64_t *)(a3 + 272);
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v24[0] = sub_22E50E974(&v19, v8);
  v10 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  v19 = a3;
  v20 = v9;
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v24[1] = sub_22E50E974(&v19, v10);
  v11 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 8] + ((unint64_t)*a4 >> 24));
  v19 = a3;
  v20 = v9;
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v24[2] = sub_22E50E974(&v19, v11);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), 9012);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v13 = Declaration;
  if (Declaration)
    v14 = *(_QWORD *)(Declaration + 24);
  else
    v14 = 0;
  v23 = 257;
  v15 = sub_22E462B78(v9, v14, Declaration, (uint64_t)v24, 3, (uint64_t)&v19, 0);
  *((_QWORD *)v15 + 8) = *(_QWORD *)(v13 + 112);
  v16 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 8) + 280), *((llvm::LLVMContext **)a4 + 1));
  v23 = 257;
  result = sub_22E3C1740(v9, 49, (uint64_t)v15, v16, (uint64_t)&v19);
  v18 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v18 & 0xF8;
  return result;
}

void sub_22F266B48(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Declaration;
  uint64_t v22;
  llvm::Value *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LLVMContext *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  llvm::Value *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int16 v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                  + 8);
  v11 = sub_22E3E4B64(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
  if (v11)
    v10 = *(_QWORD *)(v11 + 32);
  v37 = v39;
  v38 = 0x800000000;
  v12 = a4[4];
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 8 * v12;
    do
    {
      v15 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v13 / 4]
                                + ((unint64_t)*a4 >> 24));
      v32 = a3;
      v33 = a3 + 272;
      v34 = 0;
      v35 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v16 = sub_22E50E974((uint64_t *)&v32, v15);
      v17 = v38;
      if (v38 >= (unint64_t)HIDWORD(v38))
      {
        v31 = v16;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v31;
        v17 = v38;
      }
      *((_QWORD *)v37 + v17) = v16;
      LODWORD(v38) = v38 + 1;
      v13 += 8;
    }
    while (v14 != v13);
  }
  if ((a5 & 0xFFFFFFFE) == 0x640)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 216);
    v26 = 8;
    if ((*(_DWORD *)(v25 + 68) & 0xFFFFFFF7) != 3)
    {
      if (*(_DWORD *)(v25 + 72) == 21)
        v26 = 8;
      else
        v26 = 11;
    }
    v32 = (v26 << 32) | 0x8000000000000001;
    v33 = 0;
    if ((sub_22E3B38EC((_DWORD *)(a2 + 16), &v32) & 1) == 0)
    {
      llvm::Type::getInt1Ty(*(llvm::Type **)(a3 + 336), v27);
      v28 = llvm::ConstantInt::get();
      v29 = v38;
      if (v38 >= HIDWORD(v38))
      {
        v30 = v28;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v30;
        v29 = v38;
      }
      *((_QWORD *)v37 + v29) = v28;
      LODWORD(v38) = v38 + 1;
    }
  }
  v18 = dword_22F4597BC[2 * (a5 - 1597) + sub_22F110B50(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0))];
  v19 = *(_QWORD *)(a2 + 472);
  v20 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 256))(v20, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]+ ((unint64_t)*a4 >> 24))+ 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 64))(v19, v18);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v22 = *(_QWORD *)(Declaration + 24);
  else
    v22 = 0;
  v36 = 257;
  v23 = sub_22E462B78((uint64_t *)(a3 + 272), v22, Declaration, (uint64_t)v37, v38, (uint64_t)&v32, 0);
  *((_QWORD *)v23 + 8) = *(_QWORD *)(Declaration + 112);
  v24 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v24 & 0xF8;
  if (v37 != v39)
    free(v37);
}

void sub_22F266E4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;

  sub_22F00905C(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]] + ((unint64_t)*a4 >> 24)), a2, 0, (uint64_t)&v13);
  v6 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v9 = a3;
  v10 = a3 + 272;
  v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  sub_22E50E974(&v9, v6);
  v7 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  v9 = a3;
  v10 = a3 + 272;
  v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  sub_22E50E974(&v9, v7);
  if (v14 >= 0x41)
    v8 = v13;
  else
    v8 = &v13;
  __asm { BR              X11 }
}

uint64_t sub_22F266F44@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _WORD v15[20];
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  char v24;

  v7 = a1 & 0xFFFFC0FC | 0x3902;
  v16 = v2;
  v17 = 4;
  LOBYTE(v19) = 0;
  v24 = 0;
  sub_22E61990C((uint64_t)&v16, v7);
  v15[16] = 257;
  result = sub_22E42E65C(v3, v4, v5, (uint64_t)v15, 0);
  v9 = result;
  if ((*(_DWORD *)(*(_QWORD *)result + 8) & 0xFE) == 0x12)
    v10 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
  else
    v10 = *(_DWORD *)(*(_QWORD *)result + 8);
  if (v10 == 2 && (v7 & 0x1000) != 0)
    result = sub_22F2610E0(v2, result, 0.0);
  v12 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)v1 = v9;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 48) = v12 & 0xF8;
  v13 = v16;
  *(_DWORD *)(v16 + 2788) = v17;
  *(_WORD *)(v13 + 373) = v18;
  if (v24)
  {
    v14 = v19;
    *(_DWORD *)(v19 + 96) = v20;
    *(_QWORD *)(v14 + 88) = v21;
    *(_BYTE *)(v14 + 100) = v22;
    *(_WORD *)(v14 + 101) = v23;
  }
  if (*(_BYTE *)(v6 - 72) && *(_DWORD *)(v6 - 80) >= 0x41u)
  {
    result = *(_QWORD *)(v6 - 88);
    if (result)
      return MEMORY[0x2348A0E84](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_22F2670B0(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  unsigned int v17;
  char v18;

  v10 = *((_QWORD *)a5 + 1);
  sub_22F00905C(*(_QWORD *)((char *)&a5[2 * (((unint64_t)*a5 >> 18) & 1) + 4] + ((unint64_t)*a5 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v16);
  v10 &= 0xFFFFFFFFFFFFFFF0;
  sub_22E3E4B64(*(_QWORD *)v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144);
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v12 == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v11 + 16792) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
    || (v17 >= 0x41 ? (v13 = v16) : (v13 = &v16),
        !*v13
     && v12 == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v11 + 16560) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
     || (v15[0] = 0x8000000800000001, v15[1] = 0, (sub_22E3B38EC((_DWORD *)(a2 + 16), v15) & 1) == 0)
     && ((v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 216), (*(_DWORD *)(v14 + 68) & 0xFFFFFFF7) == 3)
      || *(_DWORD *)(v14 + 72) == 21)))
  {
    sub_22E5306A0(a1, a2, a3, a5, 1678);
  }
  else
  {
    sub_22E524F38(a2, a3, a4, 0x68Eu, a5, a1);
  }
  if (v18 && v17 >= 0x41)
  {
    if (v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
}

uint64_t sub_22F26724C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  char v30;
  uint64_t *v31;
  unsigned int v32;
  char v33;

  sub_22F00905C(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v31);
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 8) + 280), *((llvm::LLVMContext **)a4 + 1));
  v8 = llvm::ConstantFP::get();
  v9 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v23 = a3;
  v24 = a3 + 272;
  LOBYTE(v25) = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v10 = sub_22E50E974(&v23, v9);
  if (v32 >= 0x41)
    v11 = v31;
  else
    v11 = (uint64_t *)&v31;
  v12 = *v11;
  v13 = dword_22F45AC00[*v11];
  v14 = flt_22F45AC10[*v11];
  v23 = a3;
  LODWORD(v24) = 4;
  LOBYTE(v25) = 0;
  v30 = 0;
  sub_22E61990C((uint64_t)&v23, v13);
  v22 = 257;
  result = sub_22E42E65C(a3 + 272, v8, (uint64_t)v10, (uint64_t)v21, 0);
  v16 = result;
  if ((*(_DWORD *)(*(_QWORD *)result + 8) & 0xFE) == 0x12)
    v17 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
  else
    v17 = *(_DWORD *)(*(_QWORD *)result + 8);
  if ((v12 & 0xFFFFFFFFFFFFFFFDLL) == 0 && v17 == 2)
    result = sub_22F2610E0(a3, result, v14);
  v18 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v18 & 0xF8;
  v19 = v23;
  *(_DWORD *)(v23 + 2788) = v24;
  *(_WORD *)(v19 + 373) = WORD2(v24);
  if (v30)
  {
    v20 = v25;
    *(_DWORD *)(v25 + 96) = v26;
    *(_QWORD *)(v20 + 88) = v27;
    *(_BYTE *)(v20 + 100) = v28;
    *(_WORD *)(v20 + 101) = v29;
  }
  if (v33 && v32 >= 0x41)
  {
    result = (uint64_t)v31;
    if (v31)
      return MEMORY[0x2348A0E84](v31, 0x1000C8000313F17);
  }
  return result;
}

void sub_22F267460(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Declaration;
  uint64_t v24;
  llvm::Value *v25;
  char v26;
  llvm::Value *v27;
  uint64_t v28[2];
  char v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v9 = a5 - 1731;
  v10 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                  + 8);
  v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (v11 && *(_BYTE *)(v11 + 16) == 56
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
    && (v11 = sub_22F10CF48(v11)) != 0)
  {
    v10 = *(_QWORD *)(v11 + 32);
  }
  v12 = (unsigned int *)((char *)&unk_22F459C94 + 12 * v9);
  v32 = v34;
  v33 = 0x200000000;
  v13 = a4[4];
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 8 * v13;
    do
    {
      v16 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v14 / 4]
                                + ((unint64_t)*a4 >> 24));
      v28[0] = a3;
      v28[1] = a3 + 272;
      v29 = 0;
      v30 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v17 = sub_22E50E974(v28, v16);
      v18 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        v27 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v27;
        v18 = v33;
      }
      *((_QWORD *)v32 + v18) = v17;
      LODWORD(v33) = v33 + 1;
      v14 += 8;
    }
    while (v15 != v14);
  }
  v19 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22F10E0EC(v19))
  {
    if (sub_22F110930(v19))
      ++v12;
    else
      v12 += 2;
  }
  v20 = *v12;
  v21 = *(_QWORD *)(a2 + 472);
  v22 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v28[0] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 256))(v22, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]+ ((unint64_t)*a4 >> 24))+ 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 64))(v21, v20);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v24 = *(_QWORD *)(Declaration + 24);
  else
    v24 = 0;
  v31 = 257;
  v25 = sub_22E462B78((uint64_t *)(a3 + 272), v24, Declaration, (uint64_t)v32, v33, (uint64_t)v28, 0);
  *((_QWORD *)v25 + 8) = *(_QWORD *)(Declaration + 112);
  v26 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v26 & 0xF8;
  if (v32 != v34)
    free(v32);
}

void sub_22F2676FC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t Declaration;
  uint64_t v30;
  llvm::Value *v31;
  char v32;
  uint64_t v33;
  _BYTE v34[32];
  __int16 v35;
  void *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[6];

  v42[4] = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]
                                          + ((unint64_t)*a4 >> 24))
                              + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v10 || *(_BYTE *)(v10 + 16) != 56)
    v10 = sub_22F10CF48(v10);
  v33 = *(_QWORD *)(v10 + 32);
  v40 = v42;
  v41 = 0x400000000;
  v11 = a4[4];
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    do
    {
      v14 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v12 / 4]
                                + ((unint64_t)*a4 >> 24));
      v36 = a3;
      v37 = (uint64_t)(a3 + 34);
      v38 = 0;
      v39 = *(_QWORD *)(a3[18] + 232);
      v15 = sub_22E50E974((uint64_t *)&v36, v14);
      v16 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v41;
      }
      *((_QWORD *)v40 + v16) = v15;
      LODWORD(v41) = v41 + 1;
      v12 += 8;
    }
    while (v13 != v12);
  }
  v36 = &v38;
  v37 = 0x400000000;
  v17 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 256))(v17, *(_QWORD *)(a2 + 8), *((_QWORD *)a4 + 1));
  v19 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v37;
  }
  v20 = a5 - 1805;
  *((_QWORD *)v36 + v19) = v18;
  LODWORD(v37) = v37 + 1;
  v21 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 256))(v21, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]+ ((unint64_t)*a4 >> 24))+ 8));
  v23 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = v37;
  }
  v24 = (unsigned int *)((char *)&unk_22F459DD8 + 12 * v20);
  *((_QWORD *)v36 + v23) = v22;
  LODWORD(v37) = v37 + 1;
  v25 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v26 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 256))(v25, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]]+ ((unint64_t)*a4 >> 24))+ 8));
  v27 = v37;
  if (v37 >= HIDWORD(v37))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = v37;
  }
  *((_QWORD *)v36 + v27) = v26;
  LODWORD(v37) = v37 + 1;
  v28 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22F10E0EC(v28))
  {
    if (sub_22F110930(v28))
      ++v24;
    else
      v24 += 2;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), *v24);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v30 = *(_QWORD *)(Declaration + 24);
  else
    v30 = 0;
  v35 = 257;
  v31 = sub_22E462B78(a3 + 34, v30, Declaration, (uint64_t)v40, v41, (uint64_t)v34, 0);
  *((_QWORD *)v31 + 8) = *(_QWORD *)(Declaration + 112);
  v32 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v32 & 0xF8;
  if (v36 != &v38)
    free(v36);
  if (v40 != v42)
    free(v40);
}

void sub_22F267AC8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Declaration;
  uint64_t v24;
  llvm::Value *v25;
  char v26;
  llvm::Value *v27;
  uint64_t v28[2];
  char v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v9 = a5 - 1819;
  v10 = *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24))
                  + 8);
  v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (v11 && *(_BYTE *)(v11 + 16) == 56
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56
    && (v11 = sub_22F10CF48(v11)) != 0)
  {
    v10 = *(_QWORD *)(v11 + 32);
  }
  v12 = (unsigned int *)((char *)&unk_22F459DF0 + 12 * v9);
  v32 = v34;
  v33 = 0x200000000;
  v13 = a4[4];
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 8 * v13;
    do
    {
      v16 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v14 / 4]
                                + ((unint64_t)*a4 >> 24));
      v28[0] = a3;
      v28[1] = a3 + 272;
      v29 = 0;
      v30 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v17 = sub_22E50E974(v28, v16);
      v18 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        v27 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v27;
        v18 = v33;
      }
      *((_QWORD *)v32 + v18) = v17;
      LODWORD(v33) = v33 + 1;
      v14 += 8;
    }
    while (v15 != v14);
  }
  v19 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22F10E0EC(v19))
  {
    if (sub_22F110930(v19))
      ++v12;
    else
      v12 += 2;
  }
  v20 = *v12;
  v21 = *(_QWORD *)(a2 + 472);
  v22 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v28[0] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 256))(v22, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2]+ ((unint64_t)*a4 >> 24))+ 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 64))(v21, v20);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v24 = *(_QWORD *)(Declaration + 24);
  else
    v24 = 0;
  v31 = 257;
  v25 = sub_22E462B78((uint64_t *)(a3 + 272), v24, Declaration, (uint64_t)v32, v33, (uint64_t)v28, 0);
  *((_QWORD *)v25 + 8) = *(_QWORD *)(Declaration + 112);
  v26 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v26 & 0xF8;
  if (v32 != v34)
    free(v32);
}

uint64_t sub_22F267D68(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  llvm::Type **v10;
  uint64_t result;
  uint64_t v12;
  uint64_t Declaration;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17[2];
  char v18;
  uint64_t v19;
  __int16 v20;
  llvm::Type **v21;

  v8 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24));
  v9 = (uint64_t *)(a3 + 272);
  v17[0] = a3;
  v17[1] = a3 + 272;
  v18 = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v10 = (llvm::Type **)sub_22E50E974(v17, v8);
  v21 = v10;
  result = llvm::Type::isIntegerTy(*v10);
  if ((result & 1) == 0)
  {
    v12 = *(_QWORD *)(a2 + 472);
    v17[0] = (uint64_t)*v10;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 64))(v12, a5);
    Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
    v14 = Declaration;
    if (Declaration)
      v15 = *(_QWORD *)(Declaration + 24);
    else
      v15 = 0;
    v20 = 257;
    result = (uint64_t)sub_22E462B78(v9, v15, Declaration, (uint64_t)&v21, 1, (uint64_t)v17, 0);
    v10 = (llvm::Type **)result;
    *(_QWORD *)(result + 64) = *(_QWORD *)(v14 + 112);
  }
  v16 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v16 & 0xF8;
  return result;
}

void sub_22F267E88(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t Declaration;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t v21;
  char v22;
  uint64_t v23[2];
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t Int8PtrTy;
  void *v28;
  uint64_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 8) + 280), *(llvm::LLVMContext **)(*(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * a4[4]]+ ((unint64_t)*a4 >> 24))+ 8));
  v9 = v8;
  v10 = (uint64_t *)(a3 + 272);
  v11 = *(_DWORD *)(v8 + 8);
  if ((v11 & 0xFE) == 0x12)
    v11 = *(_DWORD *)(**(_QWORD **)(v8 + 16) + 8);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a3 + 336), (llvm::LLVMContext *)(v11 >> 8));
  v28 = v30;
  v29 = 0x200000000;
  if (a4[4] != 1)
  {
    v12 = 0;
    v13 = 8 * (a4[4] - 1);
    do
    {
      v14 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v12 / 4]
                                + ((unint64_t)*a4 >> 24));
      v23[0] = a3;
      v23[1] = a3 + 272;
      v24 = 0;
      v25 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v15 = sub_22E50E974(v23, v14);
      v16 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v29;
      }
      *((_QWORD *)v28 + v16) = v15;
      LODWORD(v29) = v29 + 1;
      v12 += 8;
    }
    while (v13 != v12);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), 6771);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v18 = Declaration;
  if (Declaration)
    v19 = *(_QWORD *)(Declaration + 24);
  else
    v19 = 0;
  v26 = 257;
  v20 = sub_22E462B78(v10, v19, Declaration, (uint64_t)v28, v29, (uint64_t)v23, 0);
  *((_QWORD *)v20 + 8) = *(_QWORD *)(v18 + 112);
  v26 = 257;
  v21 = sub_22E3C1740(v10, 49, (uint64_t)v20, v9, (uint64_t)v23);
  v22 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v22 & 0xF8;
  if (v28 != v30)
    free(v28);
}

void sub_22F2680C8(uint64_t a1, _QWORD **a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v8;
  uint64_t Declaration;
  unsigned int v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21[2];
  char v22;
  uint64_t v23;
  __int16 v24;
  uint64_t Int8PtrTy;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(a3 + 272);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a3 + 336), (llvm::LLVMContext *)1);
  (*(void (**)(_QWORD *, uint64_t))(*a2[59] + 64))(a2[59], 6771);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v26 = v28;
  v27 = 0x200000000;
  if (a4[4])
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * v10]
                                + ((unint64_t)*a4 >> 24));
      v21[0] = a3;
      v21[1] = (uint64_t)v8;
      v22 = 0;
      v23 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v12 = sub_22E50E974(v21, v11);
      v13 = v27;
      if (v27 >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v27;
      }
      *((_QWORD *)v26 + v13) = v12;
      v14 = (v27 + 1);
      LODWORD(v27) = v27 + 1;
      ++v10;
    }
    while (v10 != a4[4]);
  }
  else
  {
    v14 = 0;
  }
  if (Declaration)
    v15 = *(_QWORD *)(Declaration + 24);
  else
    v15 = 0;
  v24 = 257;
  v16 = sub_22E462B78(v8, v15, Declaration, (uint64_t)v26, v14, (uint64_t)v21, 0);
  v17 = sub_22EFFA9C0((uint64_t)a4, *(_QWORD *)(*(_QWORD *)(a3 + 144) + 144));
  v18 = ((uint64_t (*)(_QWORD **, _QWORD))(*a2)[2])(a2, *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0));
  v24 = 257;
  v19 = sub_22E3C1740(v8, 49, (uint64_t)v16, v18, (uint64_t)v21);
  v20 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v20 & 0xF8;
  if (v26 != v28)
    free(v26);
}

void sub_22F2682DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t *v8;
  uint64_t Declaration;
  unsigned int v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20[2];
  char v21;
  uint64_t v22;
  __int16 v23;
  uint64_t Int8PtrTy;
  void *v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(a3 + 272);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)(a3 + 336), (llvm::LLVMContext *)1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 472) + 64))(*(_QWORD *)(a2 + 472), 10184);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v25 = v27;
  v26 = 0x200000000;
  if (a4[4])
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * v10]
                                + ((unint64_t)*a4 >> 24));
      v20[0] = a3;
      v20[1] = (uint64_t)v8;
      v21 = 0;
      v22 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v12 = sub_22E50E974(v20, v11);
      v13 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = v26;
      }
      *((_QWORD *)v25 + v13) = v12;
      LODWORD(v26) = v26 + 1;
      ++v10;
    }
    while (v10 != a4[4]);
    v14 = v25;
  }
  else
  {
    v14 = v27;
  }
  v15 = v14[1];
  v23 = 257;
  v16 = sub_22E3C1740(v8, 49, v15, Int8PtrTy, (uint64_t)v20);
  v17 = v25;
  *((_QWORD *)v25 + 1) = v16;
  if (Declaration)
    v18 = *(_QWORD *)(Declaration + 24);
  else
    v18 = 0;
  v23 = 257;
  sub_22E462B78(v8, v18, Declaration, (uint64_t)v17, v26, (uint64_t)v20, 0);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v19 & 0xF8;
  if (v25 != v27)
    free(v25);
}

void sub_22F2684D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v9;
  unsigned __int8 *v10;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t ReleaseIntersectPayloadDeclaration;
  uint64_t v14;
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v20);
  if (v21 >= 0x41 && v20 != 0)
    MEMORY[0x2348A0E84]();
  v20 = v22;
  v21 = 0x800000000;
  if (a4[4] != 1)
  {
    v9 = 1;
    do
    {
      v10 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * v9]
                                + ((unint64_t)*a4 >> 24));
      v16[0] = a3;
      v16[1] = a3 + 272;
      v17 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v11 = sub_22E50E974(v16, v10);
      v12 = v21;
      if (v21 >= (unint64_t)HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v21;
      }
      *((_QWORD *)v20 + v12) = v11;
      LODWORD(v21) = v21 + 1;
      ++v9;
    }
    while (v9 != a4[4]);
  }
  ReleaseIntersectPayloadDeclaration = llvm::air::AIRFunctionInfo::getReleaseIntersectPayloadDeclaration(*(llvm::air::AIRFunctionInfo **)(a2 + 472), *(llvm::Module **)(*(_QWORD *)(a3 + 144) + 200));
  if (ReleaseIntersectPayloadDeclaration)
    v14 = *(_QWORD *)(ReleaseIntersectPayloadDeclaration + 24);
  else
    v14 = 0;
  v19 = 257;
  *((_QWORD *)sub_22E462B78((uint64_t *)(a3 + 272), v14, ReleaseIntersectPayloadDeclaration, (uint64_t)v20, v21, (uint64_t)v16, 0)+ 8) = *(_QWORD *)(ReleaseIntersectPayloadDeclaration + 112);
  v15 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v15 & 0xF8;
  if (v20 != v22)
    free(v20);
}

void sub_22F2686DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  int *v9;
  int v10;
  unsigned int v12;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t IntersectionResultFunctionDeclaration;
  uint64_t v21;
  llvm::Value *v22;
  char v23;
  llvm::Value *v24;
  uint64_t v25[2];
  char v26;
  uint64_t v27;
  __int16 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v29);
  if (v30 >= 0x41)
    v9 = (int *)v29;
  else
    v9 = (int *)&v29;
  v10 = *v9;
  if (v30 >= 0x41 && v29 != 0)
    MEMORY[0x2348A0E84]();
  v29 = v31;
  v30 = 0x800000000;
  v12 = a4[4];
  v14 = (v10 & 2) == 0 && (a5 - 1963) < 2;
  v15 = v12 - v14;
  if (v12 - v14 != 1)
  {
    v16 = 1;
    do
    {
      v17 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + 2 * v16]
                                + ((unint64_t)*a4 >> 24));
      v25[0] = a3;
      v25[1] = a3 + 272;
      v26 = 0;
      v27 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v18 = sub_22E50E974(v25, v17);
      v19 = v30;
      if (v30 >= (unint64_t)HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v30;
      }
      *((_QWORD *)v29 + v19) = v18;
      LODWORD(v30) = v30 + 1;
      ++v16;
    }
    while (v15 != v16);
  }
  IntersectionResultFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionResultFunctionDeclaration();
  if (IntersectionResultFunctionDeclaration)
    v21 = *(_QWORD *)(IntersectionResultFunctionDeclaration + 24);
  else
    v21 = 0;
  v28 = 257;
  v22 = sub_22E462B78((uint64_t *)(a3 + 272), v21, IntersectionResultFunctionDeclaration, (uint64_t)v29, v30, (uint64_t)v25, 0);
  *((_QWORD *)v22 + 8) = *(_QWORD *)(IntersectionResultFunctionDeclaration + 112);
  v23 = *(_BYTE *)(a1 + 48) & 0xF8;
  if (*(_BYTE *)(*(_QWORD *)v22 + 8) == 7)
    v24 = 0;
  else
    v24 = v22;
  *(_QWORD *)a1 = v24;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v23;
  if (v29 != v31)
    free(v29);
}

void sub_22F26892C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 *v8;
  llvm::Value *v9;
  int v10;
  uint64_t IntersectionResultFunctionDeclaration;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];
  _BYTE v24[40];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[10];

  v30[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v28);
  if (v29 >= 0x41 && v28 != 0)
    MEMORY[0x2348A0E84]();
  v28 = v30;
  v29 = 0x800000000;
  v8 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  *(_QWORD *)&v25 = a3;
  *((_QWORD *)&v25 + 1) = a3 + 272;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v9 = sub_22E50E974((uint64_t *)&v25, v8);
  v10 = v29;
  if (v29 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v29;
  }
  v28[v10] = v9;
  LODWORD(v29) = v29 + 1;
  IntersectionResultFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionResultFunctionDeclaration();
  v12 = IntersectionResultFunctionDeclaration;
  if (IntersectionResultFunctionDeclaration)
    v13 = *(_QWORD *)(IntersectionResultFunctionDeclaration + 24);
  else
    v13 = 0;
  LOWORD(v27) = 257;
  v14 = sub_22E462B78((uint64_t *)(a3 + 272), v13, IntersectionResultFunctionDeclaration, (uint64_t)v28, v29, (uint64_t)&v25, 0);
  v15 = 0;
  *((_QWORD *)v14 + 8) = *(_QWORD *)(v12 + 112);
  do
  {
    v16 = *(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 6 + 2 * v15] + ((unint64_t)*a4 >> 24));
    LODWORD(v23[0]) = v15;
    LOWORD(v27) = 257;
    v17 = sub_22E3C2EA8(a3 + 272, (uint64_t)v14, (uint64_t)v23, 1, (uint64_t)&v25);
    sub_22E4DFD40(a3, (unsigned __int8 *)v16, 0, 0, 0, 0, (uint64_t)v23);
    v20 = v23[0];
    v21 = v23[1];
    v22 = v23[2];
    v18 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0));
    v25 = v20;
    v26 = v21;
    v27 = v22;
    sub_22E6281E0(*(_QWORD **)(a3 + 144), v18, (uint64_t)v24);
    sub_22E4E8134(a3, v17, (uint64_t)&v25, 0, v18, 2, (uint64_t)v24, 0, 0);
    ++v15;
  }
  while (v15 != 4);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v19 & 0xF8;
  if (v28 != v30)
    free(v28);
}

void sub_22F268C0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5)
{
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t IntersectionQueryFunctionDeclaration;
  uint64_t v19;
  llvm::Value *v20;
  char v21;
  llvm::Value *v22;
  uint64_t v23[2];
  char v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x24BDAC8D0];
  v8 = a5 - 1970;
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v27);
  if (v28 >= 0x41)
    v9 = (unsigned int *)v27;
  else
    v9 = (unsigned int *)&v27;
  v10 = *v9;
  if (v28 >= 0x41 && v27 != 0)
    MEMORY[0x2348A0E84]();
  v27 = v29;
  v28 = 0x800000000;
  v12 = a4[4];
  if (v8 <= 0x1E)
  {
    if (((1 << v8) & 0x60030000) != 0)
    {
      v12 = ((v10 >> 1) & 1) + v12 - 1;
    }
    else if (!v8)
    {
      v12 = ((v10 >> 1) & 1) + v12 - 1;
    }
  }
  v13 = v12 - 1;
  if (v12 != 1)
  {
    v14 = 0;
    do
    {
      v15 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4 + 2 * v14]
                                + ((unint64_t)*a4 >> 24));
      v23[0] = a3;
      v23[1] = a3 + 272;
      v24 = 0;
      v25 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
      v16 = sub_22E50E974(v23, v15);
      v17 = v28;
      if (v28 >= (unint64_t)HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v28;
      }
      *((_QWORD *)v27 + v17) = v16;
      LODWORD(v28) = v28 + 1;
      ++v14;
    }
    while (v13 != (_DWORD)v14);
  }
  IntersectionQueryFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration();
  if (IntersectionQueryFunctionDeclaration)
    v19 = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 24);
  else
    v19 = 0;
  v26 = 257;
  v20 = sub_22E462B78((uint64_t *)(a3 + 272), v19, IntersectionQueryFunctionDeclaration, (uint64_t)v27, v28, (uint64_t)v23, 0);
  *((_QWORD *)v20 + 8) = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 112);
  v21 = *(_BYTE *)(a1 + 48) & 0xF8;
  if (*(_BYTE *)(*(_QWORD *)v20 + 8) == 7)
    v22 = 0;
  else
    v22 = v20;
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v21;
  if (v27 != v29)
    free(v27);
}

void sub_22F268E80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int *v7;
  int v8;
  uint64_t v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t IntersectionQueryFunctionDeclaration;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v23);
  if (v24 >= 0x41)
    v7 = (int *)v23;
  else
    v7 = (int *)&v23;
  v8 = *v7;
  if (v24 >= 0x41 && v23 != 0)
    MEMORY[0x2348A0E84]();
  v23 = v25;
  v24 = 0x800000000;
  v10 = 2;
  while (1)
  {
    switch((int)v10)
    {
      case 8:
      case 18:
        if ((v8 & 1) == 0)
          goto LABEL_15;
        goto LABEL_12;
      case 15:
      case 16:
      case 17:
        v18 = 0x8000000600000002;
        v19 = 0;
        if ((sub_22E3B38EC((_DWORD *)(a2 + 16), &v18) & 1) == 0)
          goto LABEL_12;
        goto LABEL_15;
      case 20:
        IntersectionQueryFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration();
        if (IntersectionQueryFunctionDeclaration)
          v15 = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 24);
        else
          v15 = 0;
        v22 = 257;
        *((_QWORD *)sub_22E462B78((uint64_t *)(a3 + 272), v15, IntersectionQueryFunctionDeclaration, (uint64_t)v23, v24, (uint64_t)&v18, 0)+ 8) = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 112);
        v16 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 48) = v16 & 0xF8;
        if (v23 != v25)
          free(v23);
        return;
      default:
LABEL_12:
        v11 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * v10]
                                  + ((unint64_t)*a4 >> 24));
        v18 = a3;
        v19 = a3 + 272;
        v20 = 0;
        v21 = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
        v12 = sub_22E50E974(&v18, v11);
        v13 = v24;
        if (v24 >= (unint64_t)HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v24;
        }
        *((_QWORD *)v23 + v13) = v12;
        LODWORD(v24) = v24 + 1;
LABEL_15:
        ++v10;
        break;
    }
  }
}

void sub_22F2690D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD **v7;
  unsigned __int8 *v9;
  llvm::Value *v10;
  int v11;
  uint64_t IntersectionQueryFunctionDeclaration;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  int v16;
  _DWORD *v17;
  uint64_t i;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  _BYTE v30[40];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[10];

  v36[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v34);
  if (v35 >= 0x41)
    v7 = (_QWORD **)v34;
  else
    v7 = &v34;
  v25 = *(_DWORD *)v7;
  if (v35 >= 0x41 && v34 != 0)
    MEMORY[0x2348A0E84]();
  v34 = v36;
  v35 = 0x800000000;
  v9 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  *(_QWORD *)&v31 = a3;
  *((_QWORD *)&v31 + 1) = a3 + 272;
  LOBYTE(v32) = 0;
  *((_QWORD *)&v32 + 1) = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v10 = sub_22E50E974((uint64_t *)&v31, v9);
  v11 = v35;
  if (v35 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v35;
  }
  v34[v11] = v10;
  LODWORD(v35) = v35 + 1;
  IntersectionQueryFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration();
  v13 = IntersectionQueryFunctionDeclaration;
  if (IntersectionQueryFunctionDeclaration)
    v14 = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 24);
  else
    v14 = 0;
  LOWORD(v33) = 257;
  v15 = sub_22E462B78((uint64_t *)(a3 + 272), v14, IntersectionQueryFunctionDeclaration, (uint64_t)v34, v35, (uint64_t)&v31, 0);
  v16 = 0;
  *((_QWORD *)v15 + 8) = *(_QWORD *)(v13 + 112);
  v17 = (_DWORD *)(a2 + 16);
  for (i = 3; ; ++i)
  {
    if ((i - 9) < 3)
    {
      v31 = 0x8000000600000002;
      if ((sub_22E3B38EC(v17, &v31) & 1) == 0)
        goto LABEL_19;
      continue;
    }
    if ((_DWORD)i != 12)
      break;
    if ((v25 & 1) != 0)
      goto LABEL_19;
LABEL_20:
    ;
  }
  if ((_DWORD)i != 14)
  {
LABEL_19:
    v19 = *(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 * i] + ((unint64_t)*a4 >> 24));
    v20 = v16 + 1;
    LODWORD(v29[0]) = v16;
    LOWORD(v33) = 257;
    v21 = sub_22E3C2EA8(a3 + 272, (uint64_t)v15, (uint64_t)v29, 1, (uint64_t)&v31);
    sub_22E4DFD40(a3, (unsigned __int8 *)v19, 0, 0, 0, 0, (uint64_t)v29);
    v26 = v29[0];
    v27 = v29[1];
    v28 = v29[2];
    v22 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0));
    v31 = v26;
    v32 = v27;
    v33 = v28;
    sub_22E6281E0(*(_QWORD **)(a3 + 144), v22, (uint64_t)v30);
    sub_22E4E8134(a3, v21, (uint64_t)&v31, 0, v22, 2, (uint64_t)v30, 0, 0);
    v16 = v20;
    goto LABEL_20;
  }
  v23 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v23 & 0xF8;
  if (v34 != v36)
    free(v34);
}

void sub_22F269418(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 *v8;
  llvm::Value *v9;
  int v10;
  uint64_t IntersectionQueryFunctionDeclaration;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];
  _BYTE v24[40];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[10];

  v30[8] = *MEMORY[0x24BDAC8D0];
  sub_22F007D7C(*(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2] + ((unint64_t)*a4 >> 24)), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 144), 0, (uint64_t)&v28);
  if (v29 >= 0x41 && v28 != 0)
    MEMORY[0x2348A0E84]();
  v28 = v30;
  v29 = 0x800000000;
  v8 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 4] + ((unint64_t)*a4 >> 24));
  *(_QWORD *)&v25 = a3;
  *((_QWORD *)&v25 + 1) = a3 + 272;
  LOBYTE(v26) = 0;
  *((_QWORD *)&v26 + 1) = *(_QWORD *)(*(_QWORD *)(a3 + 144) + 232);
  v9 = sub_22E50E974((uint64_t *)&v25, v8);
  v10 = v29;
  if (v29 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = v29;
  }
  v28[v10] = v9;
  LODWORD(v29) = v29 + 1;
  IntersectionQueryFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration();
  v12 = IntersectionQueryFunctionDeclaration;
  if (IntersectionQueryFunctionDeclaration)
    v13 = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 24);
  else
    v13 = 0;
  LOWORD(v27) = 257;
  v14 = sub_22E462B78((uint64_t *)(a3 + 272), v13, IntersectionQueryFunctionDeclaration, (uint64_t)v28, v29, (uint64_t)&v25, 0);
  v15 = 0;
  *((_QWORD *)v14 + 8) = *(_QWORD *)(v12 + 112);
  do
  {
    v16 = *(_QWORD *)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 6 + 2 * v15] + ((unint64_t)*a4 >> 24));
    LODWORD(v23[0]) = v15;
    LOWORD(v27) = 257;
    v17 = sub_22E3C2EA8(a3 + 272, (uint64_t)v14, (uint64_t)v23, 1, (uint64_t)&v25);
    sub_22E4DFD40(a3, (unsigned __int8 *)v16, 0, 0, 0, 0, (uint64_t)v23);
    v20 = v23[0];
    v21 = v23[1];
    v22 = v23[2];
    v18 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0));
    v25 = v20;
    v26 = v21;
    v27 = v22;
    sub_22E6281E0(*(_QWORD **)(a3 + 144), v18, (uint64_t)v24);
    sub_22E4E8134(a3, v17, (uint64_t)&v25, 0, v18, 2, (uint64_t)v24, 0, 0);
    ++v15;
  }
  while (v15 != 4);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v19 & 0xF8;
  if (v28 != v30)
    free(v28);
}

void sub_22F2696F8(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t Declaration;
  uint64_t v13;
  char v14;
  __int128 *v15;
  void (**v16)(__int128 *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  void (**v48)(_QWORD *);
  char v49;
  int v50;
  _OWORD v53[8];
  uint64_t v54;
  _OWORD v55[8];
  uint64_t v56;
  _OWORD v57[8];
  uint64_t v58;
  _OWORD v59[8];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  _BYTE v81[64];
  _QWORD v82[3];
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[320];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (!sub_22E536DC0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&a4[2
                                                                                  * (((unint64_t)*a4 >> 18) & 1)
                                                                                  + 6]
                                                                      + ((unint64_t)*a4 >> 24))
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)))
  {
    *(_QWORD *)&v88 = &off_24FA64078;
    *((_QWORD *)&v88 + 1) = a3;
    *(_QWORD *)&v89 = a4;
    *((_QWORD *)&v89 + 1) = &v88;
    *(_QWORD *)&v90 = 0;
    v85 = v87;
    v86 = 0x800000000;
    sub_22F271E14((uint64_t)&v85, (uint64_t)&v88, 1);
    v15 = (__int128 *)*((_QWORD *)&v89 + 1);
    if (*((__int128 **)&v89 + 1) == &v88)
    {
      v16 = (void (**)(__int128 *))(v88 + 32);
      v15 = &v88;
    }
    else
    {
      if (!*((_QWORD *)&v89 + 1))
        goto LABEL_16;
      v16 = (void (**)(__int128 *))(**((_QWORD **)&v89 + 1) + 40);
    }
    (*v16)(v15);
LABEL_16:
    v50 = 0;
    while (1)
    {
      sub_22F26D4A4((uint64_t)v82, (uint64_t *)&v85);
      if (!v83)
        sub_22E4A06C4();
      (*(void (**)(__int128 *__return_ptr))(*v83 + 48))(&v70);
      v17 = v84;
      v18 = sub_22F10C2A4(*(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0));
      if (v18 && (*(_DWORD *)(v18 + 28) & 0x7Fu) - 35 <= 2)
      {
        v22 = sub_22EFC3B90(v18);
        v79 = v81;
        v80 = 0x800000000;
        sub_22F271D38((uint64_t)&v79, v22, 0);
        v23 = v79;
        if ((_DWORD)v80)
        {
          v24 = v86;
          v25 = HIDWORD(v86);
          v26 = 8 * v80;
          v27 = (char *)v79 - 8;
          do
          {
            v28 = *(_QWORD *)&v27[v26];
            v67 = v76;
            v68 = v77;
            v69 = v78;
            v63 = v72;
            v64 = v73;
            v65 = v74;
            v66 = v75;
            v61 = v70;
            v62 = v71;
            if (v24 >= v25)
            {
              *(_QWORD *)&v88 = 0;
              v36 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
              v37 = &v36[40 * v86];
              *((_QWORD *)v37 + 3) = 0;
              v38 = operator new(0xA0uLL);
              *v38 = &off_24FA64198;
              v38[1] = a3;
              v39 = v68;
              *((_OWORD *)v38 + 7) = v67;
              *((_OWORD *)v38 + 8) = v39;
              v40 = v69;
              v41 = v64;
              *((_OWORD *)v38 + 3) = v63;
              *((_OWORD *)v38 + 4) = v41;
              v42 = v66;
              *((_OWORD *)v38 + 5) = v65;
              *((_OWORD *)v38 + 6) = v42;
              v43 = v62;
              *((_OWORD *)v38 + 1) = v61;
              *((_OWORD *)v38 + 2) = v43;
              v38[18] = v40;
              v38[19] = v28;
              *((_QWORD *)v37 + 3) = v38;
              *((_QWORD *)v37 + 4) = v28;
              sub_22F271F18((uint64_t)&v85, (uint64_t)v36);
              v25 = v88;
              if (v85 != v87)
                free(v85);
              v85 = v36;
              v24 = v86 + 1;
              HIDWORD(v86) = v25;
            }
            else
            {
              v94 = v76;
              v95 = v77;
              v96 = v78;
              v90 = v72;
              v91 = v73;
              v92 = v74;
              v93 = v75;
              v88 = v70;
              v89 = v71;
              v29 = (char *)v85 + 40 * v24;
              *((_QWORD *)v29 + 3) = 0;
              v30 = operator new(0xA0uLL);
              *v30 = &off_24FA64198;
              v30[1] = a3;
              v31 = v95;
              *((_OWORD *)v30 + 7) = v94;
              *((_OWORD *)v30 + 8) = v31;
              v32 = v96;
              v33 = v91;
              *((_OWORD *)v30 + 3) = v90;
              *((_OWORD *)v30 + 4) = v33;
              v34 = v93;
              *((_OWORD *)v30 + 5) = v92;
              *((_OWORD *)v30 + 6) = v34;
              v35 = v89;
              *((_OWORD *)v30 + 1) = v88;
              *((_OWORD *)v30 + 2) = v35;
              v30[18] = v32;
              v30[19] = v28;
              *((_QWORD *)v29 + 3) = v30;
              *((_QWORD *)v29 + 4) = v28;
              ++v24;
            }
            LODWORD(v86) = v24;
            v26 -= 8;
          }
          while (v26);
          v23 = v79;
        }
        if (v23 != v81)
          free(v23);
      }
      else
      {
        v19 = sub_22E532CBC(v17);
        v20 = v19;
        if (v19)
        {
          v44 = (*(uint64_t (**)(uint64_t *, _QWORD *, _QWORD))(*a2 + 128))(a2, a3, *(_QWORD *)(v19 + 40));
          *(_QWORD *)&v88 = "fcp.guarded.vertex";
          LOWORD(v90) = 259;
          v45 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          *(_QWORD *)&v88 = "fcp.guarded.cont";
          LOWORD(v90) = 259;
          v21 = (_QWORD *)operator new();
          llvm::BasicBlock::BasicBlock();
          v46 = llvm::User::operator new((llvm::User *)0x40);
          MEMORY[0x23489C09C](v46, v45, v21, v44, 0);
          LOWORD(v90) = 257;
          sub_22E3C12C8(a3 + 34, v46, (uint64_t)&v88);
          sub_22E5ED9B4(a3, v45, 0);
        }
        else
        {
          v21 = (_QWORD *)a3[40];
        }
        if (sub_22E536E34(v17))
        {
          v59[6] = v76;
          v59[7] = v77;
          v60 = v78;
          v59[2] = v72;
          v59[3] = v73;
          v59[4] = v74;
          v59[5] = v75;
          v59[0] = v70;
          v59[1] = v71;
          sub_22E536E94(a2[59], (uint64_t)a3, a4, v17, (uint64_t)v59);
        }
        else if (sub_22E53742C(v17))
        {
          v57[6] = v76;
          v57[7] = v77;
          v58 = v78;
          v57[2] = v72;
          v57[3] = v73;
          v57[4] = v74;
          v57[5] = v75;
          v57[0] = v70;
          v57[1] = v71;
          sub_22F26D570(a2[59], a3, a4, (uint64_t)v57);
        }
        else if (sub_22E53748C(v17))
        {
          v55[6] = v76;
          v55[7] = v77;
          v56 = v78;
          v55[2] = v72;
          v55[3] = v73;
          v55[4] = v74;
          v55[5] = v75;
          v55[0] = v70;
          v55[1] = v71;
          sub_22F26D79C(a2[59], a3, a4, (uint64_t)v55);
        }
        else
        {
          v53[6] = v76;
          v53[7] = v77;
          v54 = v78;
          v53[2] = v72;
          v53[3] = v73;
          v53[4] = v74;
          v53[5] = v75;
          v53[0] = v70;
          v53[1] = v71;
          sub_22F26D9C8(a2[59], (uint64_t)a3, a4, (uint64_t)v53);
          ++v50;
        }
        if (v20)
        {
          sub_22E5EDA70((uint64_t)a3);
          sub_22E5ED9B4(a3, v21, 0);
        }
      }
      v47 = v83;
      if (v83 == v82)
      {
        v48 = (void (**)(_QWORD *))(v82[0] + 32);
        v47 = v82;
      }
      else
      {
        if (!v83)
          goto LABEL_39;
        v48 = (void (**)(_QWORD *))(*v83 + 40);
      }
      (*v48)(v47);
LABEL_39:
      if (!(_DWORD)v86)
      {
        v49 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 48) = v49 & 0xF8;
        sub_22F271FFC((char **)&v85);
        return;
      }
    }
  }
  v85 = v87;
  v86 = 0x800000000;
  v6 = a4[4];
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 8 * v6;
    do
    {
      v9 = *(unsigned __int8 **)((char *)&a4[2 * (((unint64_t)*a4 >> 18) & 1) + 2 + v7 / 4]
                               + ((unint64_t)*a4 >> 24));
      *(_QWORD *)&v88 = a3;
      *((_QWORD *)&v88 + 1) = a3 + 34;
      LOBYTE(v89) = 0;
      *((_QWORD *)&v89 + 1) = *(_QWORD *)(a3[18] + 232);
      v10 = sub_22E50E974((uint64_t *)&v88, v9);
      v11 = v86;
      if (v86 >= (unint64_t)HIDWORD(v86))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v86;
      }
      *((_QWORD *)v85 + v11) = v10;
      LODWORD(v86) = v86 + 1;
      v7 += 8;
    }
    while (v8 != v7);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2[59] + 64))(a2[59], 10198);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  if (Declaration)
    v13 = *(_QWORD *)(Declaration + 24);
  else
    v13 = 0;
  LOWORD(v90) = 257;
  *((_QWORD *)sub_22E462B78(a3 + 34, v13, Declaration, (uint64_t)v85, v86, (uint64_t)&v88, 0) + 8) = *(_QWORD *)(Declaration + 112);
  v14 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v14 & 0xF8;
  if (v85 != v87)
    free(v85);
}

char **sub_22F269E58(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4)
{
  __int128 *v6;
  void (**v7)(__int128 *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  void (**v39)(_QWORD *);
  char v40;
  int v43;
  _OWORD v45[8];
  uint64_t v46;
  _OWORD v47[8];
  uint64_t v48;
  _OWORD v49[8];
  uint64_t v50;
  _OWORD v51[8];
  uint64_t v52;
  _OWORD v53[8];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[64];
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  _BYTE v81[320];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v82 = &off_24FA640C0;
  *((_QWORD *)&v82 + 1) = a3;
  *(_QWORD *)&v83 = a4;
  *((_QWORD *)&v83 + 1) = &v82;
  *(_QWORD *)&v84 = 0;
  v79 = v81;
  v80 = 0x800000000;
  sub_22F271E14((uint64_t)&v79, (uint64_t)&v82, 1);
  v6 = (__int128 *)*((_QWORD *)&v83 + 1);
  if (*((__int128 **)&v83 + 1) == &v82)
  {
    v7 = (void (**)(__int128 *))(v82 + 32);
    v6 = &v82;
  }
  else
  {
    if (!*((_QWORD *)&v83 + 1))
      goto LABEL_4;
    v7 = (void (**)(__int128 *))(**((_QWORD **)&v83 + 1) + 40);
  }
  (*v7)(v6);
LABEL_4:
  v43 = 0;
  do
  {
    sub_22F26D4A4((uint64_t)v76, (uint64_t *)&v79);
    if (!v77)
      sub_22E4A06C4();
    (*(void (**)(__int128 *__return_ptr))(*v77 + 48))(&v64);
    v8 = v78;
    v9 = sub_22F10C2A4(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0));
    if (v9 && (*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 <= 2)
    {
      v13 = sub_22EFC3B90(v9);
      v73 = v75;
      v74 = 0x800000000;
      sub_22F271D38((uint64_t)&v73, v13, 0);
      v14 = v73;
      if ((_DWORD)v74)
      {
        v15 = v80;
        v16 = HIDWORD(v80);
        v17 = 8 * v74;
        v18 = (char *)v73 - 8;
        do
        {
          v19 = *(_QWORD *)&v18[v17];
          v61 = v70;
          v62 = v71;
          v63 = v72;
          v57 = v66;
          v58 = v67;
          v59 = v68;
          v60 = v69;
          v55 = v64;
          v56 = v65;
          if (v15 >= v16)
          {
            *(_QWORD *)&v82 = 0;
            v27 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
            v28 = &v27[40 * v80];
            *((_QWORD *)v28 + 3) = 0;
            v29 = operator new(0xA0uLL);
            *v29 = &off_24FA641E0;
            v29[1] = a3;
            v30 = v62;
            *((_OWORD *)v29 + 7) = v61;
            *((_OWORD *)v29 + 8) = v30;
            v31 = v63;
            v32 = v58;
            *((_OWORD *)v29 + 3) = v57;
            *((_OWORD *)v29 + 4) = v32;
            v33 = v60;
            *((_OWORD *)v29 + 5) = v59;
            *((_OWORD *)v29 + 6) = v33;
            v34 = v56;
            *((_OWORD *)v29 + 1) = v55;
            *((_OWORD *)v29 + 2) = v34;
            v29[18] = v31;
            v29[19] = v19;
            *((_QWORD *)v28 + 3) = v29;
            *((_QWORD *)v28 + 4) = v19;
            sub_22F271F18((uint64_t)&v79, (uint64_t)v27);
            v16 = v82;
            if (v79 != v81)
              free(v79);
            v79 = v27;
            v15 = v80 + 1;
            HIDWORD(v80) = v16;
          }
          else
          {
            v88 = v70;
            v89 = v71;
            v90 = v72;
            v84 = v66;
            v85 = v67;
            v86 = v68;
            v87 = v69;
            v82 = v64;
            v83 = v65;
            v20 = (char *)v79 + 40 * v15;
            *((_QWORD *)v20 + 3) = 0;
            v21 = operator new(0xA0uLL);
            *v21 = &off_24FA641E0;
            v21[1] = a3;
            v22 = v89;
            *((_OWORD *)v21 + 7) = v88;
            *((_OWORD *)v21 + 8) = v22;
            v23 = v90;
            v24 = v85;
            *((_OWORD *)v21 + 3) = v84;
            *((_OWORD *)v21 + 4) = v24;
            v25 = v87;
            *((_OWORD *)v21 + 5) = v86;
            *((_OWORD *)v21 + 6) = v25;
            v26 = v83;
            *((_OWORD *)v21 + 1) = v82;
            *((_OWORD *)v21 + 2) = v26;
            v21[18] = v23;
            v21[19] = v19;
            *((_QWORD *)v20 + 3) = v21;
            *((_QWORD *)v20 + 4) = v19;
            ++v15;
          }
          LODWORD(v80) = v15;
          v17 -= 8;
        }
        while (v17);
        v14 = v73;
      }
      if (v14 != v75)
        free(v14);
    }
    else
    {
      v10 = sub_22E532CBC(v8);
      v11 = v10;
      if (v10)
      {
        v35 = (*(uint64_t (**)(uint64_t *, _QWORD *, _QWORD))(*a2 + 128))(a2, a3, *(_QWORD *)(v10 + 40));
        *(_QWORD *)&v82 = "fcp.guarded.primitive";
        LOWORD(v84) = 259;
        v36 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        *(_QWORD *)&v82 = "fcp.guarded.cont";
        LOWORD(v84) = 259;
        v12 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v37 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v37, v36, v12, v35, 0);
        LOWORD(v84) = 257;
        sub_22E3C12C8(a3 + 34, v37, (uint64_t)&v82);
        sub_22E5ED9B4(a3, v36, 0);
      }
      else
      {
        v12 = (_QWORD *)a3[40];
      }
      if (sub_22E5374EC(v8))
      {
        v53[6] = v70;
        v53[7] = v71;
        v54 = v72;
        v53[2] = v66;
        v53[3] = v67;
        v53[4] = v68;
        v53[5] = v69;
        v53[0] = v64;
        v53[1] = v65;
        sub_22F26DC9C(a2[59], a3, a4, (uint64_t)v53);
      }
      else if (sub_22E53754C(v8))
      {
        v51[6] = v70;
        v51[7] = v71;
        v52 = v72;
        v51[2] = v66;
        v51[3] = v67;
        v51[4] = v68;
        v51[5] = v69;
        v51[0] = v64;
        v51[1] = v65;
        sub_22F26DEC8(a2[59], a3, a4, (uint64_t)v51);
      }
      else if (sub_22E5375AC(v8))
      {
        v49[6] = v70;
        v49[7] = v71;
        v50 = v72;
        v49[2] = v66;
        v49[3] = v67;
        v49[4] = v68;
        v49[5] = v69;
        v49[0] = v64;
        v49[1] = v65;
        sub_22F26E0F4(a2[59], a3, a4, (uint64_t)v49);
      }
      else if (sub_22F26E334(v8))
      {
        v47[6] = v70;
        v47[7] = v71;
        v48 = v72;
        v47[2] = v66;
        v47[3] = v67;
        v47[4] = v68;
        v47[5] = v69;
        v47[0] = v64;
        v47[1] = v65;
        sub_22F26E394(a2[59], a3, a4, (uint64_t)v47);
      }
      else
      {
        v45[6] = v70;
        v45[7] = v71;
        v46 = v72;
        v45[2] = v66;
        v45[3] = v67;
        v45[4] = v68;
        v45[5] = v69;
        v45[0] = v64;
        v45[1] = v65;
        sub_22F26E5D4(a2[59], (uint64_t)a3, a4, (uint64_t)v45);
        ++v43;
      }
      if (v11)
      {
        sub_22E5EDA70((uint64_t)a3);
        sub_22E5ED9B4(a3, v12, 0);
      }
    }
    v38 = v77;
    if (v77 == v76)
    {
      v39 = (void (**)(_QWORD *))(v76[0] + 32);
      v38 = v76;
LABEL_26:
      (*v39)(v38);
      continue;
    }
    if (v77)
    {
      v39 = (void (**)(_QWORD *))(*v77 + 40);
      goto LABEL_26;
    }
  }
  while ((_DWORD)v80);
  v40 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v40 & 0xF8;
  return sub_22F271FFC((char **)&v79);
}

uint64_t sub_22F26A47C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  sub_22F26A504(a2);
  v6 = llvm::ConstantInt::get();
  sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2, 0);
  sub_22F26A558(a3, v6, *(_QWORD *)(a2 + 48));
  result = sub_22E532CBC(a2);
  if (result)
    *(_QWORD *)(a3 + 128) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_22F26A504(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(uint64_t **)v2;
  if (sub_22F271604(*(uint64_t **)v2, (uint64_t *)(*(_QWORD *)v2 + 8 * *(unsigned int *)(v2 + 8))))
    return 0;
  do
    v4 = *v3++;
  while (!sub_22F3A7D7C(v4));
  return *(v3 - 1);
}

double sub_22F26A558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  double result;

  *(_DWORD *)a1 = 6;
  v3 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v3 & 8) != 0)
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = v4 | v5 | (v3 | a3) & 7;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 80) &= 0x80u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

void sub_22F26A5CC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;

  if (a3 <= 436)
  {
    if (a3 == 391)
      v3 = 1;
    else
      v3 = 2;
    if (a3 == 390)
      v4 = 0;
    else
      v4 = v3;
    sub_22F26A6A8(*(_QWORD *)(a1 + 472), a2 + 272, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200), v4);
  }
  else
  {
    ((void (*)(void))((char *)&loc_22F26A5F4 + 4 * byte_22F458D12[a3 - 437]))();
  }
}

void sub_22F26A62C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A634()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A63C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A644()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A64C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A654()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A65C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A664()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A66C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A674()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A67C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A684()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A68C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A694()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A69C()
{
  JUMPOUT(0x22F26A614);
}

void sub_22F26A6A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

llvm::Value *sub_22F26A6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;

  return sub_22E54D7A8(&v6, 7151, a5);
}

void sub_22F26A764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_22F271674((_QWORD **)va, 7149, a5);
  JUMPOUT(0x22F26A758);
}

uint64_t sub_22F26A7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v4 = *(unsigned __int16 *)(sub_22F26A504(a2) + 32);
  if (v4 > 0x1B4)
    __asm { BR              X10 }
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = 144;
  ++*(_DWORD *)(a3 + 8);
  result = llvm::air::getDWARFRegisterNumber();
  v7 = result;
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22F26A954(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[64];
  unint64_t v11;
  void *v12;
  __int128 v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v4 = a1 + 584;
  v5 = sub_22F270A24(a1 + 584, a2);
  if (v5)
    return v5;
  v12 = (void *)0x8000000000000002;
  *(_QWORD *)&v13 = 0;
  if (sub_22E3B38EC((_DWORD *)(a1 + 16), &v12))
  {
    v7 = sub_22E6315B8(*(_QWORD *)(a1 + 8), a2, 0, 0);
    *(_QWORD *)sub_22F270A9C(v4, &v11) = v7;
  }
  else
  {
    v12 = v14;
    v13 = xmmword_22F44E300;
    sub_22F242C48((uint64_t)v10, (uint64_t)&v12);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224) + 16);
    (*(void (**)(uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v6 + 200))(v6, a2, v10);
    v9[0] = 0x8000000500000002;
    v9[1] = 0;
    sub_22E3B38EC((_DWORD *)(a1 + 16), v9);
    v7 = (uint64_t)sub_22F270B54(a1, a2);
    *(_QWORD *)sub_22F270A9C(v4, &v11) = v7;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v10);
    if (v12 != v14)
      free(v12);
  }
  return v7;
}

llvm::Value *sub_22F26AADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *IntersectionQueryFunctionDeclaration;
  uint64_t v6;
  llvm::LLVMContext *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *result;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v4 = sub_22F26ABD4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  sub_22F26AC2C(v4);
  IntersectionQueryFunctionDeclaration = (_QWORD *)llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration();
  v6 = IntersectionQueryFunctionDeclaration[3];
  if (IntersectionQueryFunctionDeclaration[12])
  {
    sub_22F40947C(v4);
    llvm::Type::getInt8Ty(*(llvm::Type **)(a2 + 336), v7);
    v16 = llvm::ConstantInt::get();
    v15 = 257;
    v8 = &v16;
    v9 = (uint64_t *)(a2 + 272);
    v10 = v6;
    v11 = (uint64_t)IntersectionQueryFunctionDeclaration;
    v12 = 1;
  }
  else
  {
    v15 = 257;
    v9 = (uint64_t *)(a2 + 272);
    v10 = v6;
    v11 = (uint64_t)IntersectionQueryFunctionDeclaration;
    v8 = 0;
    v12 = 0;
  }
  result = sub_22E462B78(v9, v10, v11, (uint64_t)v8, v12, (uint64_t)&v14, 0);
  *((_QWORD *)result + 8) = IntersectionQueryFunctionDeclaration[14];
  return result;
}

uint64_t sub_22F26ABD4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10C618(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10C618(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22F26AC2C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = sub_22F40947C(a1);
  if ((v2 & 0xFF00000000) != 0 && v2 > 2)
  {
    v3 = 4;
  }
  else if (sub_22F10BA34(a1))
  {
    v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  if (sub_22F10C320(a1))
    v3 |= 8u;
  if (sub_22F10C39C(a1))
    return v3 | 0x10;
  else
    return v3;
}

llvm::Value *sub_22F26ACA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t IntersectionQueryFunctionDeclaration;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *result;
  _WORD v10[20];
  uint64_t v11;

  v11 = a4;
  v5 = sub_22F26ABD4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  sub_22F26AC2C(v5);
  IntersectionQueryFunctionDeclaration = llvm::air::AIRFunctionInfo::getIntersectionQueryFunctionDeclaration();
  v7 = IntersectionQueryFunctionDeclaration;
  if (IntersectionQueryFunctionDeclaration)
    v8 = *(_QWORD *)(IntersectionQueryFunctionDeclaration + 24);
  else
    v8 = 0;
  v10[16] = 257;
  result = sub_22E462B78((uint64_t *)(a2 + 272), v8, IntersectionQueryFunctionDeclaration, (uint64_t)&v11, 1, (uint64_t)v10, 0);
  *((_QWORD *)result + 8) = *(_QWORD *)(v7 + 112);
  return result;
}

uint64_t sub_22F26AD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::Constant **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t BitCast;
  unint64_t v13[4];
  __int16 v14;
  _BYTE v15[72];
  void *v16;
  __int128 v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v16 = v18;
  v17 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v15, (uint64_t)&v16);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 224) + 16);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v6 + 224))(v6, a2, v15);
  if (!a3 || (v7 = a3, *(_BYTE *)(a3 + 8) != 14))
    v7 = llvm::FunctionType::get();
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = (llvm::Constant **)sub_22F26AF40(a1 + 776, v13);
  if (!*v8 || *((_QWORD *)*v8 + 3) != v7)
  {
    v14 = 261;
    v13[0] = (unint64_t)v16;
    v13[1] = v17;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
    v10 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v10, v7, 0, 0xFFFFFFFFLL, v13, v9);
    llvm::GlobalObject::setSection();
    if (*v8)
    {
      llvm::Value::takeName();
      llvm::ConstantExpr::getBitCast();
      llvm::Value::replaceAllUsesWith();
      llvm::Constant::removeDeadConstantUsers(*v8);
      if (!*((_QWORD *)*v8 + 1))
        llvm::Function::eraseFromParent(*v8);
    }
    *v8 = (llvm::Constant *)v10;
  }
  llvm::PointerType::get();
  BitCast = llvm::ConstantExpr::getBitCast();
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v15);
  if (v16 != v18)
    free(v16);
  return BitCast;
}

uint64_t sub_22F26AF40(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22F271708((_DWORD *)a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (((unint64_t)v6 - v7) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v11 + 8);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 16 * v8 + 8;
}

uint64_t sub_22F26AFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module::getOrInsertNamedMetadata();
  sub_22E534160(a1, a3);
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26B058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module::getOrInsertNamedMetadata();
  sub_22E534350(a1, a3);
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26B0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module::getOrInsertNamedMetadata();
  sub_22F26B118(a1, a3);
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26B118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = sub_22EFBAACC(a2);
  sub_22E53827C(a1, v6, v7);
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_11;
  sub_22EFC8E88(a2);
  v9 = *(uint64_t **)v8;
  v10 = *(unsigned int *)(v8 + 8);
  v11 = *(uint64_t **)v8;
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    v11 = *(uint64_t **)v8;
    while (*(_WORD *)(*v11 + 32) != 414)
    {
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_11;
    }
  }
  if (v11 == &v9[v10])
  {
LABEL_11:
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 96))
      llvm::air::AIWorkgroupMaxSize::getImpl();
  }
  else
  {
    do
    {
      v15 = *v9++;
      v14 = v15;
    }
    while (*(_WORD *)(v15 + 32) != 414);
    sub_22F007D7C(*(unsigned __int8 **)(v14 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v16);
    llvm::air::AIWorkgroupMaxSize::getImpl();
    if (v17 >= 0x41 && v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
  return llvm::air::AIKernelFunction::getImpl();
}

uint64_t sub_22F26B2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module::getOrInsertNamedMetadata();
  sub_22E53486C(a1, a3);
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26B344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module::getOrInsertNamedMetadata();
  sub_22F26B3A4(a1, a3);
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26B3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = sub_22EFBAACC(a2);
  sub_22E53827C(a1, v6, v7);
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_7;
  sub_22EFC8E88(a2);
  v10 = *(uint64_t **)v9;
  v11 = *(unsigned int *)(v9 + 8);
  v12 = *(uint64_t **)v9;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = *(uint64_t **)v9;
    while (*(_WORD *)(*v12 + 32) != 414)
    {
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_7;
    }
  }
  if (v12 == &v10[v11])
  {
LABEL_7:
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 96))
      llvm::air::AIWorkgroupMaxSize::getImpl();
  }
  else
  {
    do
    {
      v15 = *v10++;
      v14 = v15;
    }
    while (*(_WORD *)(v15 + 32) != 414);
    sub_22F007D7C(*(unsigned __int8 **)(v14 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v16);
    llvm::air::AIWorkgroupMaxSize::getImpl();
    if (v17 >= 0x41 && v16)
      MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
  }
  return llvm::air::AIMeshFunction::getImpl();
}

uint64_t sub_22F26B560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module::getOrInsertNamedMetadata();
  sub_22F26B5C0(a1, a3);
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26B5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = sub_22EFBAACC(a2);
  sub_22E53827C(a1, v6, v7);
  if ((*(_BYTE *)(a2 + 29) & 1) == 0)
    goto LABEL_7;
  sub_22EFC8E88(a2);
  v10 = *(uint64_t **)v9;
  v11 = *(unsigned int *)(v9 + 8);
  v12 = *(uint64_t **)v9;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = *(uint64_t **)v9;
    while (*(_WORD *)(*v12 + 32) != 414)
    {
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_7;
    }
  }
  if (v12 == &v10[v11])
  {
LABEL_7:
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 184) + 96))
      llvm::air::AIWorkgroupMaxSize::getImpl();
  }
  else
  {
    do
    {
      v20 = *v10++;
      v19 = v20;
    }
    while (*(_WORD *)(v20 + 32) != 414);
    sub_22F007D7C(*(unsigned __int8 **)(v19 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v23);
    llvm::air::AIWorkgroupMaxSize::getImpl();
    if (v24 >= 0x41 && v23)
      MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v15 = *(uint64_t **)v14;
    v16 = *(unsigned int *)(v14 + 8);
    i = *(uint64_t **)v14;
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      for (i = *(uint64_t **)v14; *(_WORD *)(*i + 32) != 413; ++i)
      {
        v18 -= 8;
        if (!v18)
          return llvm::air::AIObjectFunction::getImpl();
      }
    }
    if (i != &v15[v16])
    {
      do
      {
        v22 = *v15++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 413);
      sub_22F007D7C(*(unsigned __int8 **)(v21 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v23);
      llvm::air::AIMaxMeshWorkgroups::getImpl();
      if (v24 >= 0x41 && v23)
        MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
    }
  }
  return llvm::air::AIObjectFunction::getImpl();
}

uint64_t sub_22F26B864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  llvm::Module::getOrInsertNamedMetadata();
  result = sub_22F26B8D8(a1, a3);
  if (result)
    return llvm::NamedMDNode::addOperand();
  return result;
}

uint64_t sub_22F26B8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  unint64_t *v6;
  unsigned int v7;

  *(_QWORD *)(a1 + 824) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 27 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(v4);
  sub_22E537774(a1, *(_QWORD *)(v4 + 24));
  v6 = *(unint64_t **)(a2 + 120);
  v7 = sub_22EFBAACC(a2);
  sub_22E53827C(a1, v6, v7);
  return llvm::air::AICIFunction::getImpl();
}

void sub_22F26B97C(uint64_t a1, llvm::Value *this, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t Impl;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = 0x800000000;
  if (a4)
  {
    v6 = a1 + 680;
    v7 = 16 * a4;
    do
    {
      v12 = *a3;
      v8 = (uint64_t *)sub_22F26BAD8(v6, &v12);
      Impl = *v8;
      if (!*v8)
      {
        v10 = v8;
        llvm::Value::getContext(this);
        Impl = llvm::air::AIFunctionGroup::getImpl();
        *v10 = Impl;
      }
      v11 = v14;
      if (v14 >= (unint64_t)HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      *((_QWORD *)v13 + v11) = Impl;
      LODWORD(v14) = v14 + 1;
      ++a3;
      v7 -= 16;
    }
    while (v7);
  }
  llvm::Value::getContext(this);
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  if (v13 != v15)
    free(v13);
}

uint64_t sub_22F26BAD8(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _DWORD v15[4];

  v14 = *a2;
  v15[0] = 0;
  sub_22F2718F4((uint64_t)&v12, a1, &v14, v15);
  v4 = v12;
  if (v13)
  {
    v10 = *a2;
    v11 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E54DBA4((void **)(a1 + 24), (uint64_t)&v10);
    }
    else
    {
      *(_OWORD *)v5 = v10;
      *(_QWORD *)(v5 + 16) = v11;
      v6 = (char *)(v5 + 24);
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = -1431655765 * ((unint64_t)&v6[-v8] >> 3) - 1;
    *(_DWORD *)(v4 + 16) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v12 + 16);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 24 * v7 + 16;
}

uint64_t sub_22F26BBB0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22E54DCBC(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

uint64_t sub_22F26BC68(_QWORD *a1)
{
  sub_22F26BCB4((uint64_t)a1);
  sub_22F26BE30((uint64_t)a1);
  sub_22F26BEB0((uint64_t)a1);
  sub_22F26BF30((uint64_t)a1);
  sub_22F26BFB0((uint64_t)a1);
  sub_22F26C068(a1);
  return sub_22F26C1A4((uint64_t)a1);
}

uint64_t sub_22F26BCB4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;

  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  v2 = *(_QWORD *)(a1 + 8);
  v3 = "air.compile.fast_math_disable";
  if ((*(_DWORD *)(*(_QWORD *)(v2 + 152) + 52) & 0x400) != 0 && (*(_BYTE *)(*(_QWORD *)(v2 + 184) + 32) & 2) == 0)
    v3 = "air.compile.fast_math_enable";
  strlen(v3);
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F26BE30(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;

  if (*(_QWORD *)(result + 608) != *(_QWORD *)(result + 616))
  {
    v1 = result;
    result = llvm::Module::getOrInsertNamedMetadata();
    v2 = *(uint64_t **)(v1 + 608);
    for (i = *(uint64_t **)(v1 + 616); v2 != i; result = llvm::NamedMDNode::addOperand())
    {
      v4 = *v2;
      v2 += 2;
      sub_22E53760C(v1, v4);
    }
  }
  return result;
}

uint64_t sub_22F26BEB0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(result + 704) != *(_QWORD *)(result + 712))
  {
    v1 = result;
    result = llvm::Module::getOrInsertNamedMetadata();
    v2 = *(_QWORD *)(v1 + 704);
    for (i = *(_QWORD *)(v1 + 712); v2 != i; v2 += 24)
      result = llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t sub_22F26BF30(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(result + 752) != *(_QWORD *)(result + 760))
  {
    v1 = result;
    result = llvm::Module::getOrInsertNamedMetadata();
    v2 = *(_QWORD *)(v1 + 752);
    for (i = *(_QWORD *)(v1 + 760); v2 != i; v2 += 16)
      result = llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t sub_22F26BFB0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[2];

  v5[0] = 0x8000000000000002;
  v5[1] = 0;
  result = sub_22E3B38EC((_DWORD *)(a1 + 16), v5);
  if ((result & 1) == 0 && *(_QWORD *)(a1 + 560) != *(_QWORD *)(a1 + 568))
  {
    result = llvm::Module::getOrInsertNamedMetadata();
    v3 = *(_QWORD *)(a1 + 560);
    for (i = *(_QWORD *)(a1 + 568); v3 != i; v3 += 32)
    {
      llvm::air::AISamplerState::getImpl();
      result = llvm::NamedMDNode::addOperand();
    }
  }
  return result;
}

void sub_22F26C068(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  _BYTE v5[72];
  void *v6;
  __int128 v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x24BDAC8D0];
  if (a1[100] != a1[101])
  {
    llvm::Module::getOrInsertNamedMetadata();
    v2 = (_QWORD *)a1[100];
    for (i = (_QWORD *)a1[101]; v2 != i; v2 += 2)
    {
      v6 = v8;
      v7 = xmmword_22F44E300;
      sub_22F242C48((uint64_t)v5, (uint64_t)&v6);
      v4 = *(_QWORD *)(*(_QWORD *)(a1[1] + 224) + 16);
      (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v4 + 216))(v4, *v2, v5);
      llvm::air::AIVisibleFunctionReference::getImpl();
      llvm::NamedMDNode::addOperand();
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v5);
      if (v6 != v8)
        free(v6);
    }
  }
}

uint64_t sub_22F26C1A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v10, *(void ***)(a1 + 480));
  v2 = v10;
  v9 = v10;
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v10, (void **)(*(_QWORD *)(a1 + 480) + 8 * *(unsigned int *)(a1 + 488)));
  v3 = v10;
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 24);
    if ((*(_BYTE *)(v4 + 1) & 0x7F) == 2 || *(_DWORD *)(v4 + 12))
      llvm::MDNode::resolveCycles((llvm::MDNode *)v4);
    llvm::FoldingSetIteratorImpl::advance((llvm::FoldingSetIteratorImpl *)&v9);
    v2 = v9;
  }
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v10, *(void ***)(a1 + 496));
  v5 = v10;
  v9 = v10;
  result = llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v10, (void **)(*(_QWORD *)(a1 + 496) + 8 * *(unsigned int *)(a1 + 504)));
  v7 = v10;
  while (v5 != v7)
  {
    v8 = *(_QWORD *)(v5 + 24);
    if (v8 && ((*(_BYTE *)(v8 + 1) & 0x7F) == 2 || *(_DWORD *)(v8 + 12)))
      llvm::MDNode::resolveCycles((llvm::MDNode *)v8);
    result = llvm::FoldingSetIteratorImpl::advance((llvm::FoldingSetIteratorImpl *)&v9);
    v5 = v9;
  }
  return result;
}

uint64_t sub_22F26C2A4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 536;
  v4 = sub_22F270CA8(a1 + 536, (uint64_t)a2);
  if (!v4)
  {
    v4 = llvm::air::AIRSamplerState::create();
    *(_QWORD *)sub_22F270D1C(v3, a2) = v4;
  }
  return v4;
}

double sub_22F26C30C(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24))+ 8));
  v8 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 256))(v8, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 4] + ((unint64_t)*a3 >> 24))+ 8));
  a1[2] = v7;
  *a1 = a1 + 2;
  a1[3] = v9;
  *(_QWORD *)&result = 0x800000002;
  a1[1] = 0x800000002;
  return result;
}

double sub_22F26C3B8(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  a1[2] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2]+ ((unint64_t)*a3 >> 24))+ 8));
  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x800000001;
  a1[1] = 0x800000001;
  return result;
}

double sub_22F26C42C(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 12]+ ((unint64_t)*a3 >> 24))+ 8));
  v8 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 256))(v8, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 14]+ ((unint64_t)*a3 >> 24))+ 8));
  v10 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 256))(v10, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 20]+ ((unint64_t)*a3 >> 24))+ 8));
  a1[2] = v7;
  *a1 = a1 + 2;
  a1[3] = v9;
  a1[4] = v11;
  *(_QWORD *)&result = 0x800000003;
  a1[1] = 0x800000003;
  return result;
}

double sub_22F26C514(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  a1[2] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 10]+ ((unint64_t)*a3 >> 24))+ 8));
  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x800000001;
  a1[1] = 0x800000001;
  return result;
}

double sub_22F26C588(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 12]+ ((unint64_t)*a3 >> 24))+ 8));
  v8 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 256))(v8, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 18]+ ((unint64_t)*a3 >> 24))+ 8));
  a1[2] = v7;
  *a1 = a1 + 2;
  a1[3] = v9;
  *(_QWORD *)&result = 0x800000002;
  a1[1] = 0x800000002;
  return result;
}

double sub_22F26C634(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  a1[2] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 4]+ ((unint64_t)*a3 >> 24))+ 8));
  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x800000001;
  a1[1] = 0x800000001;
  return result;
}

double sub_22F26C6A8(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  a1[2] = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 6]+ ((unint64_t)*a3 >> 24))+ 8));
  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x800000001;
  a1[1] = 0x800000001;
  return result;
}

double sub_22F26C71C(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24))+ 8));
  v8 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 256))(v8, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 4] + ((unint64_t)*a3 >> 24))+ 8));
  v10 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 256))(v10, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 6]+ ((unint64_t)*a3 >> 24))+ 8));
  a1[2] = v7;
  *a1 = a1 + 2;
  a1[3] = v9;
  a1[4] = v11;
  *(_QWORD *)&result = 0x800000003;
  a1[1] = 0x800000003;
  return result;
}

double sub_22F26C804(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *((_QWORD *)a3 + 1));
  v8 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 256))(v8, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24))+ 8));
  v10 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 256))(v10, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 4]+ ((unint64_t)*a3 >> 24))+ 8));
  v12 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 256))(v12, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 6]+ ((unint64_t)*a3 >> 24))+ 8));
  a1[2] = v7;
  *a1 = a1 + 2;
  a1[3] = v9;
  a1[4] = v11;
  a1[5] = v13;
  *(_QWORD *)&result = 0x800000004;
  a1[1] = 0x800000004;
  return result;
}

llvm::Value *sub_22F26C910(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  char v5;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Declaration;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t DataLayout;
  uint64_t v19;
  int v20;
  llvm::DataLayout *v21;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];

  v5 = a5;
  v28[2] = *MEMORY[0x24BDAC8D0];
  if (a5)
    v9 = 9472;
  else
    v9 = 9471;
  if (a5)
    v10 = 9469;
  else
    v10 = 9468;
  if (a4 != 1)
    v10 = 0;
  if (a4 == 2)
    v11 = v9;
  else
    v11 = v10;
  v12 = *(_QWORD *)(a3 + 8);
  v26 = v28;
  v28[0] = v12;
  v28[1] = llvm::PointerType::get();
  v27 = 0x200000002;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), v11);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v14 = Declaration;
  if (Declaration)
    v15 = *(_QWORD *)(Declaration + 24);
  else
    v15 = 0;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v16 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v16 = *(_QWORD *)a3;
  v25 = v16;
  v24 = 257;
  v17 = sub_22E462B78(a2 + 34, v15, v14, (uint64_t)&v25, 1, (uint64_t)v23, 0);
  *((_QWORD *)v17 + 8) = *(_QWORD *)(v14 + 112);
  llvm::Value::getContext(v17);
  *((_QWORD *)v17 + 8) = llvm::AttributeList::addAttributeAtIndex();
  if ((v5 & 1) == 0)
  {
    llvm::Value::getContext(v17);
    DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(a2[18] + 200));
    sub_22E3C304C(DataLayout, *(_QWORD *)(a3 + 8));
    v23[0] = (unint64_t)(v19 + 7) >> 3;
    v23[1] = v20 == 1;
    llvm::TypeSize::operator unsigned long long();
    llvm::Attribute::get();
    LODWORD(v25) = 0;
    llvm::Value::getContext(v17);
    *((_QWORD *)v17 + 8) = llvm::AttributeList::addParamAttribute();
  }
  llvm::Value::getContext(v17);
  v21 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a2[18] + 200));
  llvm::DataLayout::getABITypeAlignment(v21, *(llvm::Type **)(a3 + 8));
  llvm::Attribute::get();
  LODWORD(v23[0]) = 0;
  llvm::Value::getContext(v17);
  *((_QWORD *)v17 + 8) = llvm::AttributeList::addParamAttribute();
  if (v26 != v28)
    free(v26);
  return v17;
}

llvm::Value *sub_22F26CB8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  char v6;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Declaration;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t DataLayout;
  uint64_t v21;
  int v22;
  llvm::DataLayout *v23;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[2];
  void *v28;
  uint64_t v29;
  _QWORD v30[3];

  v6 = a6;
  v30[2] = *MEMORY[0x24BDAC8D0];
  if (a6)
    v11 = 10306;
  else
    v11 = 10305;
  if (a6)
    v12 = 10301;
  else
    v12 = 10300;
  if (a5 != 1)
    v12 = 0;
  if (a5 == 2)
    v13 = v11;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a4 + 8);
  v28 = v30;
  v30[0] = v14;
  v30[1] = llvm::PointerType::get();
  v29 = 0x200000002;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 472) + 64))(*(_QWORD *)(a1 + 472), v13);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v16 = Declaration;
  if (Declaration)
    v17 = *(_QWORD *)(Declaration + 24);
  else
    v17 = 0;
  v27[0] = a3;
  if ((*(_BYTE *)(a4 + 24) & 3) != 0)
    v18 = sub_22F28ABCC((_OWORD *)a4, a2);
  else
    v18 = *(_QWORD *)a4;
  v27[1] = v18;
  v26 = 257;
  v19 = sub_22E462B78(a2 + 34, v17, v16, (uint64_t)v27, 2, (uint64_t)v25, 0);
  *((_QWORD *)v19 + 8) = *(_QWORD *)(v16 + 112);
  llvm::Value::getContext(v19);
  *((_QWORD *)v19 + 8) = llvm::AttributeList::addAttributeAtIndex();
  if ((v6 & 1) == 0)
  {
    llvm::Value::getContext(v19);
    DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(a2[18] + 200));
    sub_22E3C304C(DataLayout, *(_QWORD *)(a4 + 8));
    v25[0] = (unint64_t)(v21 + 7) >> 3;
    v25[1] = v22 == 1;
    llvm::TypeSize::operator unsigned long long();
    llvm::Attribute::get();
    LODWORD(v27[0]) = 1;
    llvm::Value::getContext(v19);
    *((_QWORD *)v19 + 8) = llvm::AttributeList::addParamAttribute();
  }
  llvm::Value::getContext(v19);
  v23 = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(a2[18] + 200));
  llvm::DataLayout::getABITypeAlignment(v23, *(llvm::Type **)(a4 + 8));
  llvm::Attribute::get();
  LODWORD(v25[0]) = 1;
  llvm::Value::getContext(v19);
  *((_QWORD *)v19 + 8) = llvm::AttributeList::addParamAttribute();
  if (v28 != v30)
    free(v28);
  return v19;
}

uint64_t sub_22F26CE18(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  _QWORD v29[10];
  void *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD v33[8];
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v26 = v4;
  v27 = 0;
  if ((sub_22F24C318(a1[82], *((_DWORD *)a1 + 168), v4, &v27) & 1) == 0 || (v5 = *((_QWORD *)v27 + 1)) == 0)
  {
    v7 = (uint64_t)(a1 + 82);
    v34 = v36;
    v35 = 0x800000000;
    v30 = v33;
    v32 = 8;
    v33[0] = a2;
    v8 = 1;
    do
    {
      v9 = (llvm::LLVMContext *)*((_QWORD *)v30 + v8 - 1);
      v31 = v8 - 1;
      v10 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF0));
      if (v10 && (*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 <= 2)
      {
        v13 = sub_22EFC3B90(v10);
        v27 = (char *)&v28 + 8;
        *(_QWORD *)&v28 = 0x800000000;
        sub_22F271D38((uint64_t)&v27, v13, 0);
        v14 = (char *)v27;
        if ((_DWORD)v28)
        {
          v15 = v31;
          v16 = 8 * v28;
          v17 = (char *)v27 - 8;
          do
          {
            v18 = *(_QWORD *)(*(_QWORD *)&v17[v16] + 48);
            if (v15 >= v32)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v15 = v31;
            }
            *((_QWORD *)v30 + v15) = v18;
            v15 = ++v31;
            v16 -= 8;
          }
          while (v16);
          v14 = (char *)v27;
        }
        if (v14 != (char *)&v28 + 8)
          free(v14);
      }
      else
      {
        v11 = sub_22E66CB04((llvm::Type ***)(a1[1] + 280), v9);
        v12 = v35;
        if (v35 >= (unint64_t)HIDWORD(v35))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v35;
        }
        v34[v12] = v11;
        LODWORD(v35) = v35 + 1;
      }
      v8 = v31;
    }
    while (v31);
    llvm::StructType::get();
    v20 = *a1;
    v19 = a1[1];
    v29[8] = *(_QWORD *)(v19 + 24);
    v29[9] = (*(uint64_t (**)(uint64_t *, _QWORD))(v20 + 16))(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 144) + 17528) & 0xFFFFFFFFFFFFFFF0));
    v21 = llvm::FunctionType::get();
    v27 = v29;
    v28 = xmmword_22F44E300;
    sub_22F242C48((uint64_t)v24, (uint64_t)&v27);
    v22 = *(_QWORD *)(*(_QWORD *)(a1[1] + 224) + 16);
    (*(void (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v22 + 192))(v22, v4 & 0xFFFFFFFFFFFFFFF0, v24);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v24);
    v25 = 261;
    v24[0] = v27;
    v24[1] = v28;
    v23 = *(_QWORD *)(a1[1] + 200);
    v5 = llvm::User::operator new((llvm::User *)0x78);
    MEMORY[0x23489F6FC](v5, v21, 0, 0xFFFFFFFFLL, v24, v23);
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::GlobalObject::setSection();
    sub_22F24C2B0(v7, &v26)[1] = v5;
    if (v27 != v29)
      free(v27);
    if (v30 != v33)
      free(v30);
    if (v34 != v36)
      free(v34);
  }
  return v5;
}

_QWORD *sub_22F26D1AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;

  v4 = *a2;
  v5 = *((unsigned int *)a2 + 2);
  v6 = *a2 + 32 * v5;
  v7 = *(_QWORD *)(v6 - 8);
  if (v7)
  {
    if (v7 == v6 - 32)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      LODWORD(v5) = *((_DWORD *)a2 + 2);
      v4 = *a2;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(v6 - 8) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = (v5 - 1);
  *((_DWORD *)a2 + 2) = v8;
  v9 = (_QWORD *)(v4 + 32 * v8);
  result = (_QWORD *)v9[3];
  if (result == v9)
  {
    v11 = 4;
    result = v9;
  }
  else
  {
    if (!result)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

double sub_22F26D258(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v6 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 256))(v6, *(_QWORD *)(a2 + 8), *((_QWORD *)a3 + 1));
  v8 = sub_22E699F3C(*(_QWORD **)(a2 + 8));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 256))(v8, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24))+ 8));
  a1[2] = v7;
  *a1 = a1 + 2;
  a1[3] = v9;
  *(_QWORD *)&result = 0x800000002;
  a1[1] = 0x800000002;
  return result;
}

uint64_t sub_22F26D2F0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD v4[2];

  v4[0] = 0x8000000300000002;
  v4[1] = 0;
  result = sub_22E3B38EC((_DWORD *)(a1 + 16), v4);
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 216);
    return (*(_DWORD *)(v3 + 68) & 0xFFFFFFF7) == 3 || (*(_DWORD *)(v3 + 72) & 0xFFFFFFFE) == 20;
  }
  return result;
}

uint64_t sub_22F26D368@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  llvm::Type *v10;
  llvm::DataLayout *DataLayout;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(llvm::Type **)(a2 + 8);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1[6] + 56) + 40));
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v10);
  llvm::DataLayout::getABITypeAlignment(DataLayout, v10);
  v12 = llvm::TypeSize::operator unsigned long long();
  v13 = v12;
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
  {
    result = (uint64_t)sub_22F28AAB4((_QWORD *)a2, v12 * a3, (uint64_t)v10, (uint64_t)a1);
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_OWORD *)(a5 + 16) = v15;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    v16 = *(uint64_t **)a2;
    v17 = (uint64_t *)llvm::ConstantInt::get();
    result = sub_22E42129C(a1, (uint64_t)v10, v16, v17, a4);
    v18 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 16) | (v13 * a3);
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = v18;
    *(_QWORD *)(a5 + 16) = v19 & -v19;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

_QWORD *sub_22F26D4A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *a2 + 40 * v5;
  v7 = *(_QWORD *)(v6 - 16);
  if (v7)
  {
    if (v7 == v6 - 40)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a1);
      v5 = *((_DWORD *)a2 + 2);
      v4 = *a2;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(v6 - 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 - 8);
  v8 = v5 - 1;
  *((_DWORD *)a2 + 2) = v8;
  v9 = (_QWORD *)(v4 + 40 * v8);
  result = (_QWORD *)v9[3];
  if (result == v9)
  {
    v11 = 4;
    result = v9;
  }
  else
  {
    if (!result)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_22F26D570(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v8;
  uint64_t *v9;
  llvm::Value *v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  llvm::Value *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  llvm::Value **v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10197);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v8 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v9 = a2 + 34;
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v10 = sub_22E50E974((uint64_t *)&v26, v8);
  v11 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v12 = sub_22E50E974((uint64_t *)&v26, v11);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v26 = &v28;
  v28 = v10;
  v29 = v12;
  v27 = 0x800000002;
  v13 = *(_OWORD *)(a4 + 112);
  v22[6] = *(_OWORD *)(a4 + 96);
  v22[7] = v13;
  v23 = *(_QWORD *)(a4 + 128);
  v14 = *(_OWORD *)(a4 + 48);
  v22[2] = *(_OWORD *)(a4 + 32);
  v22[3] = v14;
  v15 = *(_OWORD *)(a4 + 80);
  v22[4] = *(_OWORD *)(a4 + 64);
  v22[5] = v15;
  v16 = *(_OWORD *)(a4 + 16);
  v22[0] = *(_OWORD *)a4;
  v22[1] = v16;
  sub_22E4D7B28(a2, (uint64_t)v22, v17, (uint64_t)v24);
  v18 = (llvm::Value *)v24[0];
  v19 = v27;
  if (v27 >= HIDWORD(v27))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v27;
  }
  v26[v19] = v18;
  v20 = (v27 + 1);
  LODWORD(v27) = v27 + 1;
  if (Declaration)
    v21 = *(_QWORD *)(Declaration + 24);
  else
    v21 = 0;
  v25 = 257;
  *((_QWORD *)sub_22E462B78(v9, v21, Declaration, (uint64_t)v26, v20, (uint64_t)v24, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v26 != &v28)
    free(v26);
}

void sub_22F26D79C(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v8;
  uint64_t *v9;
  llvm::Value *v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  llvm::Value *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  llvm::Value **v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10198);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v8 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v9 = a2 + 34;
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v10 = sub_22E50E974((uint64_t *)&v26, v8);
  v11 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v12 = sub_22E50E974((uint64_t *)&v26, v11);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v26 = &v28;
  v28 = v10;
  v29 = v12;
  v27 = 0x800000002;
  v13 = *(_OWORD *)(a4 + 112);
  v22[6] = *(_OWORD *)(a4 + 96);
  v22[7] = v13;
  v23 = *(_QWORD *)(a4 + 128);
  v14 = *(_OWORD *)(a4 + 48);
  v22[2] = *(_OWORD *)(a4 + 32);
  v22[3] = v14;
  v15 = *(_OWORD *)(a4 + 80);
  v22[4] = *(_OWORD *)(a4 + 64);
  v22[5] = v15;
  v16 = *(_OWORD *)(a4 + 16);
  v22[0] = *(_OWORD *)a4;
  v22[1] = v16;
  sub_22E4D7B28(a2, (uint64_t)v22, v17, (uint64_t)v24);
  v18 = (llvm::Value *)v24[0];
  v19 = v27;
  if (v27 >= HIDWORD(v27))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v27;
  }
  v26[v19] = v18;
  v20 = (v27 + 1);
  LODWORD(v27) = v27 + 1;
  if (Declaration)
    v21 = *(_QWORD *)(Declaration + 24);
  else
    v21 = 0;
  v25 = 257;
  *((_QWORD *)sub_22E462B78(v9, v21, Declaration, (uint64_t)v26, v20, (uint64_t)v24, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v26 != &v28)
    free(v26);
}

void sub_22F26D9C8(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v9;
  uint64_t *v10;
  llvm::Value *v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  unsigned int v14;
  unsigned int v15;
  llvm::LLVMContext *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  llvm::Value *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[8];
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  llvm::Value **v32;
  uint64_t v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v32 = (llvm::Value **)sub_22E619D5C(a2, *(llvm::LLVMContext **)(a4 + 64));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10208);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v9 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v10 = (uint64_t *)(a2 + 272);
  v32 = (llvm::Value **)a2;
  v33 = a2 + 272;
  LOBYTE(v34) = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v11 = sub_22E50E974((uint64_t *)&v32, v9);
  v12 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v32 = (llvm::Value **)a2;
  v33 = a2 + 272;
  LOBYTE(v34) = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v13 = sub_22E50E974((uint64_t *)&v32, v12);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v15 = v14;
  v32 = &v34;
  v34 = v11;
  v33 = 0x800000001;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v16);
  v17 = llvm::ConstantInt::get();
  v18 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = v33;
  }
  v32[v18] = (llvm::Value *)v17;
  v19 = v33 + 1;
  LODWORD(v33) = v19;
  if (v19 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v33;
  }
  v32[v19] = v13;
  LODWORD(v33) = v33 + 1;
  v20 = *(_OWORD *)(a4 + 112);
  v28[6] = *(_OWORD *)(a4 + 96);
  v28[7] = v20;
  v29 = *(_QWORD *)(a4 + 128);
  v21 = *(_OWORD *)(a4 + 48);
  v28[2] = *(_OWORD *)(a4 + 32);
  v28[3] = v21;
  v22 = *(_OWORD *)(a4 + 80);
  v28[4] = *(_OWORD *)(a4 + 64);
  v28[5] = v22;
  v23 = *(_OWORD *)(a4 + 16);
  v28[0] = *(_OWORD *)a4;
  v28[1] = v23;
  sub_22E4D7B28((_QWORD *)a2, (uint64_t)v28, v15, (uint64_t)v30);
  v24 = (llvm::Value *)v30[0];
  v25 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = v33;
  }
  v32[v25] = v24;
  v26 = (v33 + 1);
  LODWORD(v33) = v33 + 1;
  if (Declaration)
    v27 = *(_QWORD *)(Declaration + 24);
  else
    v27 = 0;
  v31 = 257;
  *((_QWORD *)sub_22E462B78(v10, v27, Declaration, (uint64_t)v32, v26, (uint64_t)v30, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v32 != &v34)
    free(v32);
}

void sub_22F26DC9C(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v8;
  uint64_t *v9;
  llvm::Value *v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  llvm::Value *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  llvm::Value **v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10200);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v8 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v9 = a2 + 34;
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v10 = sub_22E50E974((uint64_t *)&v26, v8);
  v11 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v12 = sub_22E50E974((uint64_t *)&v26, v11);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v26 = &v28;
  v28 = v10;
  v29 = v12;
  v27 = 0x800000002;
  v13 = *(_OWORD *)(a4 + 112);
  v22[6] = *(_OWORD *)(a4 + 96);
  v22[7] = v13;
  v23 = *(_QWORD *)(a4 + 128);
  v14 = *(_OWORD *)(a4 + 48);
  v22[2] = *(_OWORD *)(a4 + 32);
  v22[3] = v14;
  v15 = *(_OWORD *)(a4 + 80);
  v22[4] = *(_OWORD *)(a4 + 64);
  v22[5] = v15;
  v16 = *(_OWORD *)(a4 + 16);
  v22[0] = *(_OWORD *)a4;
  v22[1] = v16;
  sub_22E4D7B28(a2, (uint64_t)v22, v17, (uint64_t)v24);
  v18 = (llvm::Value *)v24[0];
  v19 = v27;
  if (v27 >= HIDWORD(v27))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v27;
  }
  v26[v19] = v18;
  v20 = (v27 + 1);
  LODWORD(v27) = v27 + 1;
  if (Declaration)
    v21 = *(_QWORD *)(Declaration + 24);
  else
    v21 = 0;
  v25 = 257;
  *((_QWORD *)sub_22E462B78(v9, v21, Declaration, (uint64_t)v26, v20, (uint64_t)v24, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v26 != &v28)
    free(v26);
}

void sub_22F26DEC8(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v8;
  uint64_t *v9;
  llvm::Value *v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  llvm::Value *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  llvm::Value **v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10202);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v8 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v9 = a2 + 34;
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v10 = sub_22E50E974((uint64_t *)&v26, v8);
  v11 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v26 = (llvm::Value **)a2;
  v27 = (uint64_t)(a2 + 34);
  LOBYTE(v28) = 0;
  v29 = *(llvm::Value **)(a2[18] + 232);
  v12 = sub_22E50E974((uint64_t *)&v26, v11);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v26 = &v28;
  v28 = v10;
  v29 = v12;
  v27 = 0x800000002;
  v13 = *(_OWORD *)(a4 + 112);
  v22[6] = *(_OWORD *)(a4 + 96);
  v22[7] = v13;
  v23 = *(_QWORD *)(a4 + 128);
  v14 = *(_OWORD *)(a4 + 48);
  v22[2] = *(_OWORD *)(a4 + 32);
  v22[3] = v14;
  v15 = *(_OWORD *)(a4 + 80);
  v22[4] = *(_OWORD *)(a4 + 64);
  v22[5] = v15;
  v16 = *(_OWORD *)(a4 + 16);
  v22[0] = *(_OWORD *)a4;
  v22[1] = v16;
  sub_22E4D7B28(a2, (uint64_t)v22, v17, (uint64_t)v24);
  v18 = (llvm::Value *)v24[0];
  v19 = v27;
  if (v27 >= HIDWORD(v27))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v27;
  }
  v26[v19] = v18;
  v20 = (v27 + 1);
  LODWORD(v27) = v27 + 1;
  if (Declaration)
    v21 = *(_QWORD *)(Declaration + 24);
  else
    v21 = 0;
  v25 = 257;
  *((_QWORD *)sub_22E462B78(v9, v21, Declaration, (uint64_t)v26, v20, (uint64_t)v24, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v26 != &v28)
    free(v26);
}

void sub_22F26E0F4(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v9;
  uint64_t *v10;
  llvm::Value *v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  llvm::Value *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[8];
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;
  llvm::Value **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v27 = (llvm::Value **)sub_22E619D5C((uint64_t)a2, *(llvm::LLVMContext **)(a4 + 64));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10203);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v9 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v10 = a2 + 34;
  v27 = (llvm::Value **)a2;
  v28 = (uint64_t)(a2 + 34);
  LOBYTE(v29) = 0;
  v30 = *(llvm::Value **)(a2[18] + 232);
  v11 = sub_22E50E974((uint64_t *)&v27, v9);
  v12 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v27 = (llvm::Value **)a2;
  v28 = (uint64_t)(a2 + 34);
  LOBYTE(v29) = 0;
  v30 = *(llvm::Value **)(a2[18] + 232);
  v13 = sub_22E50E974((uint64_t *)&v27, v12);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v27 = &v29;
  v29 = v11;
  v30 = v13;
  v28 = 0x800000002;
  v14 = *(_OWORD *)(a4 + 112);
  v23[6] = *(_OWORD *)(a4 + 96);
  v23[7] = v14;
  v24 = *(_QWORD *)(a4 + 128);
  v15 = *(_OWORD *)(a4 + 48);
  v23[2] = *(_OWORD *)(a4 + 32);
  v23[3] = v15;
  v16 = *(_OWORD *)(a4 + 80);
  v23[4] = *(_OWORD *)(a4 + 64);
  v23[5] = v16;
  v17 = *(_OWORD *)(a4 + 16);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v17;
  sub_22E4D7B28(a2, (uint64_t)v23, v18, (uint64_t)v25);
  v19 = (llvm::Value *)v25[0];
  v20 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = v28;
  }
  v27[v20] = v19;
  v21 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (Declaration)
    v22 = *(_QWORD *)(Declaration + 24);
  else
    v22 = 0;
  v26 = 257;
  *((_QWORD *)sub_22E462B78(v10, v22, Declaration, (uint64_t)v27, v21, (uint64_t)v25, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v27 != &v29)
    free(v27);
}

BOOL sub_22F26E334(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 471)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

void sub_22F26E394(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v9;
  uint64_t *v10;
  llvm::Value *v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  llvm::Value *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[8];
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;
  llvm::Value **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v27 = (llvm::Value **)sub_22E619D5C((uint64_t)a2, *(llvm::LLVMContext **)(a4 + 64));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10209);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v9 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v10 = a2 + 34;
  v27 = (llvm::Value **)a2;
  v28 = (uint64_t)(a2 + 34);
  LOBYTE(v29) = 0;
  v30 = *(llvm::Value **)(a2[18] + 232);
  v11 = sub_22E50E974((uint64_t *)&v27, v9);
  v12 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v27 = (llvm::Value **)a2;
  v28 = (uint64_t)(a2 + 34);
  LOBYTE(v29) = 0;
  v30 = *(llvm::Value **)(a2[18] + 232);
  v13 = sub_22E50E974((uint64_t *)&v27, v12);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v27 = &v29;
  v29 = v11;
  v30 = v13;
  v28 = 0x800000002;
  v14 = *(_OWORD *)(a4 + 112);
  v23[6] = *(_OWORD *)(a4 + 96);
  v23[7] = v14;
  v24 = *(_QWORD *)(a4 + 128);
  v15 = *(_OWORD *)(a4 + 48);
  v23[2] = *(_OWORD *)(a4 + 32);
  v23[3] = v15;
  v16 = *(_OWORD *)(a4 + 80);
  v23[4] = *(_OWORD *)(a4 + 64);
  v23[5] = v16;
  v17 = *(_OWORD *)(a4 + 16);
  v23[0] = *(_OWORD *)a4;
  v23[1] = v17;
  sub_22E4D7B28(a2, (uint64_t)v23, v18, (uint64_t)v25);
  v19 = (llvm::Value *)v25[0];
  v20 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = v28;
  }
  v27[v20] = v19;
  v21 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (Declaration)
    v22 = *(_QWORD *)(Declaration + 24);
  else
    v22 = 0;
  v26 = 257;
  *((_QWORD *)sub_22E462B78(v10, v22, Declaration, (uint64_t)v27, v21, (uint64_t)v25, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v27 != &v29)
    free(v27);
}

void sub_22F26E5D4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t Declaration;
  unsigned __int8 *v9;
  uint64_t *v10;
  llvm::Value *v11;
  unsigned __int8 *v12;
  llvm::Value *v13;
  unsigned int v14;
  unsigned int v15;
  llvm::LLVMContext *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  llvm::Value *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[8];
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  llvm::Value **v32;
  uint64_t v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v32 = (llvm::Value **)sub_22E619D5C(a2, *(llvm::LLVMContext **)(a4 + 64));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 10201);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v9 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2] + ((unint64_t)*a3 >> 24));
  v10 = (uint64_t *)(a2 + 272);
  v32 = (llvm::Value **)a2;
  v33 = a2 + 272;
  LOBYTE(v34) = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v11 = sub_22E50E974((uint64_t *)&v32, v9);
  v12 = *(unsigned __int8 **)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) - 2 + 2 * a3[4]]
                            + ((unint64_t)*a3 >> 24));
  v32 = (llvm::Value **)a2;
  v33 = a2 + 272;
  LOBYTE(v34) = 0;
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
  v13 = sub_22E50E974((uint64_t *)&v32, v12);
  sub_22EFF605C(*(_QWORD *)((char *)&a3[2 * (((unint64_t)*a3 >> 18) & 1) + 2 * a3[4]]
                          + ((unint64_t)*a3 >> 24)));
  v15 = v14;
  v32 = &v34;
  v34 = v11;
  v33 = 0x800000001;
  llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v16);
  v17 = llvm::ConstantInt::get();
  v18 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = v33;
  }
  v32[v18] = (llvm::Value *)v17;
  v19 = v33 + 1;
  LODWORD(v33) = v19;
  if (v19 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = v33;
  }
  v32[v19] = v13;
  LODWORD(v33) = v33 + 1;
  v20 = *(_OWORD *)(a4 + 112);
  v28[6] = *(_OWORD *)(a4 + 96);
  v28[7] = v20;
  v29 = *(_QWORD *)(a4 + 128);
  v21 = *(_OWORD *)(a4 + 48);
  v28[2] = *(_OWORD *)(a4 + 32);
  v28[3] = v21;
  v22 = *(_OWORD *)(a4 + 80);
  v28[4] = *(_OWORD *)(a4 + 64);
  v28[5] = v22;
  v23 = *(_OWORD *)(a4 + 16);
  v28[0] = *(_OWORD *)a4;
  v28[1] = v23;
  sub_22E4D7B28((_QWORD *)a2, (uint64_t)v28, v15, (uint64_t)v30);
  v24 = (llvm::Value *)v30[0];
  v25 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = v33;
  }
  v32[v25] = v24;
  v26 = (v33 + 1);
  LODWORD(v33) = v33 + 1;
  if (Declaration)
    v27 = *(_QWORD *)(Declaration + 24);
  else
    v27 = 0;
  v31 = 257;
  *((_QWORD *)sub_22E462B78(v10, v27, Declaration, (uint64_t)v32, v26, (uint64_t)v30, 0) + 8) = *(_QWORD *)(Declaration + 112);
  if (v32 != &v34)
    free(v32);
}

BOOL sub_22F26E8A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 394)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26E908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 448)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22F26E968(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 439)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26E9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 381)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22F26EA28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 380)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26EA88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 383)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

BOOL sub_22F26EAE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 382)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26EB48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 446)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26EBA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 445)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26EC08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 395)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F26EC68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 375)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F26ECC8(uint64_t a1, uint64_t a2)
{
  if (sub_22F26E9C8(a2) || sub_22F26EA28(a2))
    return 1;
  if (sub_22F26EA88(a2) || sub_22F26EAE8(a2))
    return 2;
  if (sub_22F26EB48(a2) || sub_22F26EBA8(a2))
    return 3;
  if (*(_BYTE *)(a1 + 840))
    return *(unsigned int *)(a1 + 832);
  if (sub_22F26EC08(a2))
    return 0;
  return sub_22F1105F0(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) ^ 1;
}

uint64_t sub_22F26ED80(uint64_t a1, uint64_t a2)
{
  if (sub_22F26E9C8(a2) || sub_22F26EA88(a2) || sub_22F26EB48(a2))
    return 1;
  if (sub_22F26EA28(a2) || sub_22F26EAE8(a2) || sub_22F26EBA8(a2))
    return 3;
  if (sub_22F26EC08(a2))
    return 2;
  if (*(_BYTE *)(a1 + 840))
    return *(unsigned int *)(a1 + 836);
  if (sub_22F1105F0(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)))
    return 2;
  return 1;
}

uint64_t sub_22F26EE38(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), "patch_control_point", 19, 1, 3);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "patch_control_point", 19, 1, 3))return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22F26EED0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10B8E0(a1, "interpolant", 11, 1, 0);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0), "interpolant", 11, 1, 0))
    return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22F26EF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_22E547D54(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  sub_22F10C6FC(v3);
  v4 = sub_22F40960C(v3);
  sub_22F26F000(a1, v4);
  v5 = sub_22F409760(v3);
  sub_22F26F148(a1, v5);
  sub_22F409794(v3);
  sub_22F409818(v3);
  return llvm::air::AIMeshTypeInfo::getImpl();
}

uint64_t sub_22F26F000(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Impl;
  int v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x1000000000;
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22E536DC0(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)))
  {
    *((_QWORD *)v10 + v11) = sub_22E539DDC(a1, a2);
    LODWORD(v11) = v11 + 1;
  }
  else
  {
    v5 = sub_22F10C2A4(*v4);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3)
        v6 = 0;
      else
        v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    sub_22E547DA8(a1, v6, &v9, (uint64_t)&v10);
  }
  Impl = llvm::MDTuple::getImpl();
  if (v10 != v12)
    free(v10);
  return Impl;
}

uint64_t sub_22F26F148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Impl;
  int v6;
  void *v7[2];
  _QWORD v8[17];

  v8[16] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7[0] = v8;
  v7[1] = (void *)0x1000000000;
  v3 = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v3 && (*(_DWORD *)(v3 + 28) & 0x7Fu) - 35 <= 2)
    sub_22E548060(a1, v3, &v6, (uint64_t)v7);
  Impl = llvm::MDTuple::getImpl();
  if (v7[0] != v8)
    free(v7[0]);
  return Impl;
}

uint64_t sub_22F26F220(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((v7 & 8) != 0)
    v8 = (_QWORD *)*v8;
  sub_22EF5D174(v6, (uint64_t)v8);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v9 = sub_22E3E4B64((uint64_t)v8);
  sub_22E54A534(a1, *(_QWORD *)(v9 + 32), 0);
  return llvm::air::AIPackedVectorType::getImpl();
}

uint64_t sub_22F26F2D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((v7 & 8) != 0)
    v8 = (_QWORD *)*v8;
  sub_22EF5D174(v6, (uint64_t)v8);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v9 = sub_22E3E4B64((uint64_t)v8);
  sub_22E54A534(a1, *(_QWORD *)(v9 + 32), 0);
  return llvm::air::AIVectorType::getImpl();
}

uint64_t sub_22F26F38C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((v7 & 8) != 0)
    v8 = (_QWORD *)*v8;
  v9 = sub_22E54A900((uint64_t)v8);
  v10 = sub_22F40960C(v9);
  v11 = sub_22F4096D0(v9);
  v12 = sub_22EF63724(v6, v10, v11, 0);
  sub_22EF5D174(v6, *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v13 = sub_22F40960C(v9);
  sub_22E54A534(a1, v13, 0);
  sub_22F409640(v9);
  sub_22F4096D0(v9);
  return llvm::air::AIMatrixType::getImpl();
}

uint64_t sub_22F26F494(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = v7 & 0xFFFFFFFFFFFFFFF0;
  if ((v7 & 8) != 0)
    v8 = *(_QWORD *)v8;
  sub_22EF5D174(v6, v8);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if (!v9)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v8 = sub_22F10CF48(v8);
    else
      v8 = 0;
  }
  sub_22E5484B4(a1, *(_QWORD *)(v8 + 24), 0);
  v17 = 0;
  v10 = *(_QWORD *)(v8 + 16);
  if ((unsigned __int16)(v10 >> 38) >= 9uLL)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_QWORD *)(v8 + 16);
  }
  v11 = (unsigned __int16)(v10 >> 38);
  if (v11)
  {
    v12 = (_QWORD *)(v8 + 40);
    v13 = 8 * v11;
    do
    {
      v14 = sub_22E5484B4(a1, *v12, 0);
      v15 = v17;
      if (v17 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v17;
      }
      v18[v15] = v14;
      ++v17;
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  return llvm::air::AIFunctionType::getImpl();
}

uint64_t sub_22F26F694(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  if ((v6 & 8) != 0)
    v7 = *(_QWORD *)v7;
  sub_22E54A994(a1, v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  if (!v7 || *(_BYTE *)(v7 + 16) != 39)
    v7 = sub_22F10CF48(v7);
  sub_22E5484B4(a1, *(_QWORD *)(v7 + 32), 1);
  return llvm::air::AIPointerLikeType::getImpl();
}

uint64_t sub_22F26F780(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  if ((v6 & 8) != 0)
    v7 = *(_QWORD *)v7;
  sub_22E54A994(a1, v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  if (!v7 || *(_BYTE *)(v7 + 16) != 40)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 40)
      v7 = sub_22F10CF48(v7);
    else
      v7 = 0;
  }
  if ((*(_BYTE *)(v7 + 18) & 0x10) != 0)
  {
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v7)
      {
        v9 = *(_DWORD *)(v7 + 16);
        if ((v9 & 0xFE) == 0x28)
          continue;
      }
      v7 = sub_22F10CF48(v7);
      v9 = *(_DWORD *)(v7 + 16);
    }
    while ((v9 & 0x100000) != 0);
  }
  sub_22E5484B4(a1, *(_QWORD *)(v7 + 32), 1);
  return llvm::air::AIPointerLikeType::getImpl();
}

uint64_t sub_22F26F8CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  if ((v6 & 8) != 0)
    v7 = *(_QWORD *)v7;
  sub_22E54A994(a1, v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  if (!v7 || *(_BYTE *)(v7 + 16) != 41)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 41)
      v7 = sub_22F10CF48(v7);
    else
      v7 = 0;
  }
  if ((*(_BYTE *)(v7 + 18) & 0x10) != 0)
  {
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v7)
      {
        v9 = *(_DWORD *)(v7 + 16);
        if ((v9 & 0xFE) == 0x28)
          continue;
      }
      v7 = sub_22F10CF48(v7);
      v9 = *(_DWORD *)(v7 + 16);
    }
    while ((v9 & 0x100000) != 0);
  }
  sub_22E5484B4(a1, *(_QWORD *)(v7 + 32), 1);
  return llvm::air::AIPointerLikeType::getImpl();
}

uint64_t sub_22F26FA18(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E53C624((uint64_t)v7);
  v9 = sub_22F40960C(v8);
  sub_22E5484B4(a1, v9, 0);
  sub_22F10C9BC(v8);
  if ((sub_22F10B8E0((uint64_t)v7, "texture1d", 9, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture1d_array", 15, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture2d", 9, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture2d_array", 15, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture3d", 9, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texturecube", 11, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texturecube_array", 17, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture2d_ms", 12, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture2d_ms_array", 18, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "texture_buffer", 14, 0, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "depth2d", 7, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "depth2d_array", 13, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "depthcube", 9, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "depthcube_array", 15, 1, 0) & 1) == 0
    && (sub_22F10B8E0((uint64_t)v7, "depth2d_ms", 10, 1, 0) & 1) == 0)
  {
    sub_22F10B8E0((uint64_t)v7, "depth2d_ms_array", 16, 1, 0);
  }
  return llvm::air::AITextureType::getImpl();
}

uint64_t sub_22F26FDF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22F270974((uint64_t)v7);
  v9 = sub_22F40960C(v8);
  sub_22E5484B4(a1, v9, 0);
  if ((sub_22E54AA64((uint64_t)v7) & 1) == 0
    && (sub_22E54AAB4((uint64_t)v7) & 1) == 0
    && (sub_22E54AB04((uint64_t)v7) & 1) == 0
    && (sub_22E54AB4C((uint64_t)v7) & 1) == 0
    && (sub_22E54AB94((uint64_t)v7) & 1) == 0
    && (sub_22E54ABDC((uint64_t)v7) & 1) == 0
    && (sub_22E54AC24((uint64_t)v7) & 1) == 0
    && (sub_22E54AC78((uint64_t)v7) & 1) == 0
    && (sub_22E54ACCC((uint64_t)v7) & 1) == 0
    && (sub_22E54AD20((uint64_t)v7) & 1) == 0
    && (sub_22E54AD74((uint64_t)v7) & 1) == 0
    && (sub_22E54ADD4((uint64_t)v7) & 1) == 0
    && (sub_22E54AE34((uint64_t)v7) & 1) == 0
    && (sub_22E54AE94((uint64_t)v7) & 1) == 0
    && (sub_22E54AEE4((uint64_t)v7) & 1) == 0)
  {
    sub_22E54AF2C((uint64_t)v7);
  }
  return llvm::air::AIPixelDataType::getImpl();
}

uint64_t sub_22F270050(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E545730((uint64_t)v7);
  v9 = sub_22F10C2A4(v8);
  if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
    v10 = 0;
  else
    v10 = v9;
  sub_22E5484B4(a1, *(_QWORD *)(**(_QWORD **)(v10 + 168) + 8), 8);
  sub_22F40929C(v8, 0);
  return llvm::air::AIImageblockType::getImpl();
}

uint64_t sub_22F27014C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22F26EE38((uint64_t)v7);
  v9 = sub_22F10C2A4(v8);
  if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
    v10 = 0;
  else
    v10 = v9;
  sub_22E5484B4(a1, *(_QWORD *)(**(_QWORD **)(v10 + 168) + 8), 18);
  return llvm::air::AIPatchControlPointType::getImpl();
}

uint64_t sub_22F270228(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22F26EED0((uint64_t)v7);
  v9 = sub_22F10C2A4(v8);
  if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
    v10 = 0;
  else
    v10 = v9;
  sub_22E5484B4(a1, *(_QWORD *)(**(_QWORD **)(v10 + 168) + 8), 0);
  sub_22F409390(v8, 0);
  return llvm::air::AIInterpolantType::getImpl();
}

uint64_t sub_22F27031C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22F2709CC((uint64_t)v7);
  v9 = sub_22F40960C(v8);
  sub_22F26F494(a1, v9, 0);
  return llvm::air::AIVisibleFunctionTableType::getImpl();
}

uint64_t sub_22F2703DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E54AF78((uint64_t)v7);
  v9 = sub_22F40947C(v8);
  if ((v9 & 0xFF00000000) == 0 || v9 <= 2)
    sub_22F10BA34(v8);
  sub_22F10C320(v8);
  sub_22F10C39C(v8);
  sub_22F10C418(v8);
  sub_22F10C0BC(v8);
  sub_22F10C138(v8);
  sub_22F10C494(v8);
  return llvm::air::AIIntersectionFunctionTableType::getImpl();
}

uint64_t sub_22F270534(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E54AFCC((uint64_t)v7);
  sub_22F10BA34(v8);
  sub_22F10C0BC(v8);
  sub_22F10C138(v8);
  return llvm::air::AIAccelerationStructureType::getImpl();
}

uint64_t sub_22F270618(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E547D54((uint64_t)v7);
  v9 = sub_22F40960C(v8);
  sub_22E5484B4(a1, v9, 116);
  v10 = sub_22F409760(v8);
  sub_22E5484B4(a1, v10, 116);
  sub_22F10C6FC(v8);
  sub_22F409794(v8);
  sub_22F409818(v8);
  return llvm::air::AIMeshType::getImpl();
}

uint64_t sub_22F270744(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E5453EC((uint64_t)v7);
  v9 = sub_22F10C2A4(v8);
  if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
    v10 = 0;
  else
    v10 = v9;
  sub_22E5484B4(a1, *(_QWORD *)(**(_QWORD **)(v10 + 168) + 8), 0);
  sub_22F409218(v8);
  return llvm::air::AIArrayOfType::getImpl();
}

uint64_t sub_22F270834(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  v8 = sub_22E5457C4((uint64_t)v7);
  v9 = sub_22F10C2A4(v8);
  if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
    v10 = 0;
  else
    v10 = v9;
  sub_22E5484B4(a1, *(_QWORD *)(**(_QWORD **)(v10 + 168) + 8), 1);
  return llvm::air::AIArrayRefOfType::getImpl();
}

BOOL sub_22F270914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 374)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22F270974(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10C8DC(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10C8DC(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22F2709CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = a1;
  v2 = sub_22F10CDF4(a1);
  if (v1 && (v2 & 1) != 0)
    return v1;
  if (!sub_22F10CDF4(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0)))
    return 0;
  return sub_22F10CF48(v1);
}

uint64_t sub_22F270A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_22F25AFD8((uint64_t *)a1, &v8, &v7))
  {
    v5 = v7;
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 16);
    v5 = *(_QWORD *)a1 + 16 * v4;
  }
  if (v5 == v3 + 16 * v4)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8) + 8);
}

uint64_t sub_22F270A9C(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_22E54DCBC(a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = *a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_22E4D6CC4((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (((unint64_t)v6 - v7) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v11 + 8);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 16 * v8 + 8;
}

llvm::GlobalValue *sub_22F270B54(uint64_t a1, unint64_t a2)
{
  llvm::GlobalValue *v4;
  int v5;
  unsigned int v6;

  sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, *(_QWORD *)(a2 + 48), 0);
  v4 = (llvm::GlobalValue *)llvm::User::operator new((llvm::User *)0x58);
  llvm::UndefValue::get();
  llvm::GlobalVariable::GlobalVariable();
  sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2, 0);
  llvm::GlobalObject::setAlignment();
  llvm::GlobalObject::setSection();
  v5 = *((_DWORD *)v4 + 8);
  v6 = v5 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v4 + 8) = v6;
  if ((v5 & 0xFu) - 7 < 2)
    goto LABEL_4;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v4) & 1) == 0)
  {
    v6 = *((_DWORD *)v4 + 8);
LABEL_4:
    *((_DWORD *)v4 + 8) = v6 | 0x4000;
  }
  return v4;
}

uint64_t sub_22F270CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_22E54EDAC((uint64_t *)a1, a2, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 32 * v5;
  }
  if (v3 == v4 + 32 * v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * *(unsigned int *)(v3 + 24) + 24);
}

uint64_t sub_22F270D1C(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  v17 = 0;
  sub_22F2724E4(a1, (uint64_t)&v15, &v17, (uint64_t)&v13);
  v4 = v13;
  if (v14)
  {
    v11 = *a2;
    v12 = *((unint64_t *)a2 + 2);
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 < *(_QWORD *)(a1 + 40))
    {
      v10 = v12;
      *v5 = v11;
      v5[1] = v10;
      v6 = v5 + 2;
    }
    else
    {
      v6 = sub_22E54F840((void **)(a1 + 24), &v11);
    }
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (((unint64_t)v6 - v7) >> 5) - 1;
    *(_DWORD *)(v4 + 24) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v13 + 24);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 32 * v8 + 24;
}

uint64_t sub_22F270DE8()
{
  return 0;
}

uint64_t sub_22F270DF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  sub_22F26A558(a2, 0, *(_QWORD *)(a1 + 48));
  result = sub_22E532CBC(a1);
  if (result)
    *(_QWORD *)(a2 + 128) = *(_QWORD *)(result + 40);
  return result;
}

void sub_22F270E34(uint64_t a1@<X8>)
{
  char v1;

  v1 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = v1 & 0xF8;
}

uint64_t sub_22F270E4C()
{
  return 0;
}

uint64_t sub_22F270E54()
{
  return 0;
}

uint64_t sub_22F270E60()
{
  return 0;
}

uint64_t sub_22F270E68()
{
  return 0;
}

uint64_t sub_22F270E70()
{
  return 0;
}

uint64_t sub_22F270E78()
{
  return 0;
}

uint64_t sub_22F270E84()
{
  return 0;
}

void sub_22F270EBC(uint64_t a1)
{
  sub_22E54D64C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F270EE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_22F25AD78((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F270F6C(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    v12 = *a3;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22F270F6C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_22E54B414(a1, v7);
    v9 = 0;
    sub_22F25AD78((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F27101C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F25AD78((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F2710C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = 0x100000001;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 28) = 0x100000008;
  v2 = (_QWORD *)(a1 + 40);
  v3 = llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)a1);
  sub_22E54C320((llvm::APFloatBase *)(a1 + 48), v3);
  sub_22E54C2C8(v2);
  sub_22E54C320((llvm::APFloatBase *)(a1 + 80), v3);
  sub_22E54C37C((_QWORD *)(a1 + 72));
  *(_QWORD *)(a1 + 104) = 0;
  sub_22E54C320((llvm::APFloatBase *)(a1 + 120), v3);
  sub_22E54C2C8((_QWORD *)(a1 + 112));
  return a1;
}

uint64_t sub_22F271194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7;
  int v8;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 840))
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 832);
    *(_BYTE *)(a1 + 16) = 1;
  }
  if (sub_22F271228(a3))
  {
    v7 = sub_22F26ECC8(a2, a3);
    v8 = sub_22F26ED80(a2, a3);
    *(_DWORD *)(a2 + 832) = v7;
    *(_DWORD *)(a2 + 836) = v8;
    *(_BYTE *)(a2 + 840) = 1;
  }
  return a1;
}

BOOL sub_22F271228(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  return !sub_22E54CE5C(*(uint64_t **)v1, (uint64_t *)(*(_QWORD *)v1 + 8 * *(unsigned int *)(v1 + 8)));
}

uint64_t sub_22F271264(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  return llvm::air::AITagOnlyCustomType::getImpl();
}

uint64_t sub_22F271300(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  return llvm::air::AITagOnlyCustomType::getImpl();
}

uint64_t sub_22F27139C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  return llvm::air::AITagOnlyCustomType::getImpl();
}

uint64_t sub_22F271438(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  return llvm::air::AITagOnlyCustomType::getImpl();
}

uint64_t sub_22F2714D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 8) != 0)
    v7 = (_QWORD *)*v7;
  sub_22E54A994(a1, (uint64_t)v7);
  sub_22E54A7A4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  return llvm::air::AITagOnlyCustomType::getImpl();
}

uint64_t sub_22F271570(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F2715B8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(24 * *(unsigned int *)(a1 + 16)));
  return a1;
}

BOOL sub_22F271604(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = a2;
  v3 = a1;
  if (a1 >= a2)
  {
    while (v2 != v3)
    {
      if ((sub_22F3A7D7C(*v2) & 1) != 0)
        return v3 == v2;
      ++v2;
    }
    v2 = v3;
  }
  else
  {
    while ((sub_22F3A7D7C(*v3) & 1) == 0)
    {
      if (++v3 == v2)
      {
        v3 = v2;
        return v3 == v2;
      }
    }
  }
  return v3 == v2;
}

llvm::Value *sub_22F271674(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t Declaration;
  uint64_t *v5;
  uint64_t v6;
  _WORD v8[20];
  uint64_t v9;

  v9 = a3;
  (*(void (**)(_QWORD))(*(_QWORD *)**a1 + 64))(**a1);
  Declaration = llvm::air::AIRFunctionInfo::getDeclaration();
  v5 = a1[2];
  if (Declaration)
    v6 = *(_QWORD *)(Declaration + 24);
  else
    v6 = 0;
  v8[16] = 257;
  return sub_22E462B78(v5, v6, Declaration, 0, 0, (uint64_t)v8, 0);
}

uint64_t sub_22F271708@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22E3B9914((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F271798(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_22F271798(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E54D95C((uint64_t)a1, v7);
  v9 = 0;
  sub_22E3B9914((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

uint64_t sub_22F271848(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E3B9914(v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F2718F4(uint64_t a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F271990((uint64_t *)a2, (uint64_t)a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F271AA0(a2, (uint64_t)a3, (uint64_t)a3, v12);
    v9 = (_QWORD *)result;
    *(_OWORD *)result = *a3;
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F271990(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t result;
  BOOL v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue();
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = v6 + 24 * (HashValue & v9);
      v13 = *(const void **)v12;
      if (*(_QWORD *)v12 == -2)
      {
        if (*(_QWORD *)a2 == -2)
          goto LABEL_18;
      }
      else if (v13 == (const void *)-1)
      {
        if (*(_QWORD *)a2 == -1)
          goto LABEL_18;
      }
      else
      {
        v14 = *(_QWORD *)(a2 + 8);
        if (v14 == *(_QWORD *)(v12 + 8) && (!v14 || !memcmp(*(const void **)a2, *(const void **)v12, v14)))
        {
LABEL_18:
          result = 1;
          goto LABEL_19;
        }
      }
      if (v13 == (const void *)-1)
        break;
      if (v8)
        v16 = 0;
      else
        v16 = v13 == (const void *)-2;
      if (v16)
        v8 = v6 + 24 * v11;
      HashValue = i + v11;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_19:
  *a3 = v12;
  return result;
}

_QWORD *sub_22F271AA0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E54DA1C(a1, v7);
  v9 = 0;
  sub_22F271990((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_22F271B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 32 * v6;
    while (1)
    {
      v9 = *(_QWORD **)(v7 + v8 - 8);
      if ((_QWORD *)(v7 + v8 - 32) == v9)
        break;
      if (v9)
      {
        v10 = 5;
LABEL_7:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
      v8 -= 32;
      if (!v8)
        goto LABEL_9;
    }
    v9 = (_QWORD *)(v7 + v8 - 32);
    v10 = 4;
    goto LABEL_7;
  }
LABEL_9:
  *(_DWORD *)(a1 + 8) = 0;
  sub_22F271BDC(a1, a2, a2 + 32 * a3);
}

void sub_22F271BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(a1 + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    sub_22F243E90(a1);
    v7 = *(unsigned int *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = *(_QWORD *)a1 + 32 * v7;
    do
    {
      v9 = *(_QWORD *)(v4 + 24);
      if (v9)
      {
        if (v4 == v9)
        {
          *(_QWORD *)(v8 + 24) = v8;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 24) + 24))(*(_QWORD *)(v4 + 24), v8);
        }
        else
        {
          *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      else
      {
        *(_QWORD *)(v8 + 24) = 0;
      }
      v4 += 32;
      v8 += 32;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 5);
}

char **sub_22F271CAC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 8];
      if (&v2[v4 - 32] == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_7:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
      }
      v4 -= 32;
      if (!v4)
      {
        v2 = *a1;
        goto LABEL_10;
      }
    }
    v5 = &v2[v4 - 32];
    v6 = 4;
    goto LABEL_7;
  }
LABEL_10:
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F271D38(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      ++v6;
      do
        v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v7 && (*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v7 != a3);
  }
  v8 = *(unsigned int *)(result + 8);
  if (v6 + v8 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v9 = (unint64_t *)(*(_QWORD *)v5 + 8 * v8);
    do
    {
      *v9 = v4;
      do
        v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v4 && (*(_DWORD *)(v4 + 28) & 0x7Fu) - 49 > 2);
      ++v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v8 + v6;
  return result;
}

void sub_22F271E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a1;
    v8 = 40 * v6;
    while (1)
    {
      v9 = *(_QWORD **)(v7 + v8 - 16);
      if ((_QWORD *)(v7 + v8 - 40) == v9)
        break;
      if (v9)
      {
        v10 = 5;
LABEL_7:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
      v8 -= 40;
      if (!v8)
        goto LABEL_9;
    }
    v9 = (_QWORD *)(v7 + v8 - 40);
    v10 = 4;
    goto LABEL_7;
  }
LABEL_9:
  *(_DWORD *)(a1 + 8) = 0;
  sub_22E54E464(a1, a2, a2 + 40 * a3);
}

void sub_22F271EAC(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F271F18(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F271F18(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 40 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v5 + 32);
      v5 += 40;
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
    v8 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v4;
      v10 = 40 * v8;
      while (1)
      {
        result = *(_QWORD *)(v9 + v10 - 16);
        if (v9 + v10 - 40 == result)
          break;
        if (result)
        {
          v11 = 5;
LABEL_16:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
        }
        v10 -= 40;
        if (!v10)
          return result;
      }
      result = v9 + v10 - 40;
      v11 = 4;
      goto LABEL_16;
    }
  }
  return result;
}

char **sub_22F271FFC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    while (1)
    {
      v5 = *(char **)&v2[v4 - 16];
      if (&v2[v4 - 40] == v5)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_7:
        (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
      }
      v4 -= 40;
      if (!v4)
      {
        v2 = *a1;
        goto LABEL_10;
      }
    }
    v5 = &v2[v4 - 40];
    v6 = 4;
    goto LABEL_7;
  }
LABEL_10:
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F27208C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E547B70(a3, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
}

uint64_t sub_22F2720A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22E547B70(a5, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22F2720DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E547B70(a3, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

void sub_22F27211C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E54E9F8((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

_BYTE *sub_22F272188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v6;

  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_22E3CF554(a3, v4);
  return sub_22E54D3B4(&v6, a3);
}

unint64_t sub_22F2721D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v6;

  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_22E3CF554(a3, v4);
  sub_22E54D3B4(&v6, a3);
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8));
}

uint64_t sub_22F272228(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_QWORD *sub_22F2722BC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F272228(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F272320(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F272320(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E54ECEC(a1, v6);
  v8 = 0;
  sub_22F272228(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2723D4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F272228(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F272488(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F25AFD8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F25B074((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F2724E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  result = sub_22E54EDAC((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = sub_22E54F5D4(a1, a2, a2, v13);
    v9 = result;
    v10 = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)result = v10;
    *(_DWORD *)(result + 24) = *a3;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_22F27257C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(a2 + 16));
  sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a1 + 144) + 280), *(llvm::LLVMContext **)(a2 + 8));
  return llvm::ConstantExpr::getBitCast();
}

uint64_t sub_22F2725F0(int *a1)
{
  int v1;
  _DWORD *v2;
  unint64_t v3;
  _QWORD v5[2];

  v1 = *a1;
  if (*a1 == 3)
  {
    v2 = a1 + 1;
    v3 = 2;
  }
  else if (v1 == 2)
  {
    v2 = a1 + 1;
    v3 = 9;
  }
  else
  {
    if (v1)
      return 0;
    v2 = a1 + 1;
    v3 = 0x8000000B0000000ALL;
  }
  v5[0] = v3;
  v5[1] = 0;
  return sub_22E3B38EC(v2, v5) ^ 1;
}

uint64_t sub_22F272660(uint64_t result)
{
  while (1)
  {
    result = sub_22E4EBB74(*(_QWORD *)(*(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      break;
    if (*(_BYTE *)(result + 16) == 34)
      return sub_22F409D88(result);
  }
  return result;
}

llvm::Value *sub_22F272698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Value *Declaration;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 832);
  Declaration = *(llvm::Value **)(v6 + 360);
  if (Declaration
    || (Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(), (*(_QWORD *)(v6 + 360) = Declaration) != 0))
  {
    v8 = *((_QWORD *)Declaration + 3);
  }
  else
  {
    v8 = 0;
  }
  v11 = 257;
  return sub_22F24EEDC(a1, v8, Declaration, a2, a3, (uint64_t)v10);
}

uint64_t sub_22F272720(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(v5, a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22F272774(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 152))(v5, a1, *(_QWORD *)(a2 + 16));
}

BOOL sub_22F2727C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 218)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F272828(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BYTE v8[136];
  uint64_t v9;
  _BYTE v10[32];

  v2 = a1[199];
  v3 = *(_QWORD *)(v2 + 120);
  v4 = *(_QWORD *)(a1[18] + 144);
  v5 = v2 != a1[200];
  v6 = *(_QWORD *)(v3 + 48);
  v9 = 0;
  sub_22EFF69F0((uint64_t)v10, v4, v3, v5, v6, 1, 0, &v9, 0);
  sub_22E4E2474((uint64_t)a1, (uint64_t)v10, (uint64_t)v8);
  return sub_22F25F748((uint64_t)a1, (uint64_t)v8, 0);
}

uint64_t sub_22F2728A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
    return sub_22E563CC4(a1, a3, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 272), 224, 0);
  if (*(_BYTE *)(a3 + 16) != 19)
  {
    v4 = *(_QWORD *)a3;
    v5 = a1[12];
    v11 = 257;
    v6 = sub_22E3C1740(a1 + 34, 49, a3, v5, (uint64_t)v10);
    v7 = sub_22E563CC4(a1, v6, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 296), 227, 0);
    v8 = sub_22E563CC4(a1, v7, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 168), 208, 0);
    v11 = 257;
    return sub_22E3C1740(a1 + 34, 49, v8, v4, (uint64_t)v10);
  }
  return a3;
}

_QWORD *sub_22F2729BC(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v4 = sub_22EFDC9F0((uint64_t)a2);
  sub_22E55D600(a1, (unint64_t)a2, v4);
  sub_22E654990((uint64_t *)(a1 + 3904), (uint64_t)a2, 0, *(llvm::Value **)(a1 + 1624));
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  sub_22E3CB7B0((_QWORD *)a1, v5, 0);
  v6 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  v11 = 0;
  v10 = 0uLL;
  v12 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 0;
  sub_22E5ED794(a1, v6, 0, &v10, (uint64_t)&v9);
  v7 = sub_22EFCAEA8(a2);
  return sub_22E619DE8(a1, v7);
}

_QWORD *sub_22F272A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE v11[6208];
  uint64_t v12;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v12 = *MEMORY[0x24BDAC8D0];
  sub_22E619430((uint64_t)v11, *(_QWORD *)(v0 + 144), 0);
  v6 = sub_22E55D9C0((uint64_t)v11, v2);
  sub_22E619908((uint64_t)v11);
  v7 = *(_DWORD **)(v2 + 64);
  sub_22E55D600(v5, (unint64_t)v7, *(_QWORD *)(v4 + 88));
  sub_22E55E27C(v5, v4, v2, (uint64_t)v7, v6);
  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 64))(v7);
  if (v8)
    sub_22F0D60E4(v8);
  else
    v9 = v7[27];
  return sub_22E619DE8(v5, v9);
}

_QWORD *sub_22F272B84()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE v11[6208];
  uint64_t v12;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v12 = *MEMORY[0x24BDAC8D0];
  sub_22E619430((uint64_t)v11, *(_QWORD *)(v0 + 144), 0);
  v6 = sub_22E561950((uint64_t)v11, (uint64_t)v2);
  sub_22E619908((uint64_t)v11);
  v7 = (_DWORD *)v2[9];
  sub_22E55D600(v5, (unint64_t)v7, *(_QWORD *)(v4 + 88));
  sub_22E55FD2C(v5, v4, v2, v6);
  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 64))(v7);
  if (v8)
    sub_22F0D60E4(v8);
  else
    v9 = v7[27];
  return sub_22E619DE8(v5, v9);
}

_QWORD *sub_22F272C80(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t **v8;
  unint64_t i;
  uint64_t v10;
  llvm::Type ***v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm::LLVMContext *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  void *v24;
  unsigned __int8 v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[6];
  char v40;
  _OWORD v41[3];
  uint64_t v42;
  char v43;
  _BYTE v44[8];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  sub_22F3B5618(a3, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(uint64_t **)(a2 + 88));
  sub_22E55D600(a1, a3, *(_QWORD *)(a2 + 88));
  if (a4)
  {
    *(_BYTE *)(a1 + 1882) = 0;
    v8 = (uint64_t **)sub_22F3B6E50(a2);
    for (i = sub_22F3B6E50(a2) + 8 * *(unsigned int *)(a2 + 128); v8 != (uint64_t **)i; ++v8)
    {
      v27 = *v8;
      v28 = **v8;
      if ((v28 & 6) == 4)
      {
        v30 = *(_QWORD *)(*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 56)
                        + 8 * *(unsigned int *)((v28 & 0xFFFFFFFFFFFFFFF8) + 64)
                        - 8);
      }
      else
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((**v8 & 6) == 2)
          v30 = v29;
        else
          v30 = 0;
      }
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1592) + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 32);
      v32 = sub_22F272828((_QWORD *)a1);
      sub_22F26105C(a1, v31, v32, v30, 0);
      v33 = v27[1];
      v41[0] = v45;
      v41[1] = v46;
      v41[2] = v47;
      v42 = v48;
      v43 = v43 & 0xC0 | 1;
      sub_22E4EF100(a1, v33, (uint64_t)v41);
    }
    v10 = *(_QWORD *)(a1 + 144);
    v11 = (llvm::Type ***)(v10 + 280);
    v12 = *(_QWORD *)(v10 + 144);
    v13 = sub_22F36E1B8(v12);
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
      v15 = (llvm::LLVMContext *)(v14 & 0xFFFFFFFFFFFFFFF0);
    else
      v15 = (llvm::LLVMContext *)sub_22EF6462C(v12, v13);
    v34 = sub_22F272828((_QWORD *)a1);
    v35 = sub_22E66CB04(v11, v15);
    WORD4(v46) = 257;
    v39[0] = sub_22E3C1740((uint64_t *)(a1 + 272), 49, v34, v35, (uint64_t)v44);
    v39[1] = 0;
    v40 = 0;
    sub_22E5EDC68(a1, (uint64_t)v39, (unint64_t)v15);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    v17 = *(_QWORD *)(a1 + 2312);
    v18 = *(_BYTE *)(a1 + 2893);
    *(_BYTE *)(a1 + 2893) = 0;
    v37 = *(_QWORD *)(a1 + 2872);
    v38 = v17;
    *(_QWORD *)(a1 + 2872) = v16;
    v19 = sub_22F272828((_QWORD *)a1);
    v20 = sub_22EFDD1E0(*(_QWORD *)(a2 + 88));
    if (v20)
    {
      v21 = v20;
      do
      {
        v22 = sub_22F115260(*(_QWORD *)(v21 + 48));
        if (v22)
        {
          v23 = v22;
          v24 = sub_22E565344;
          if (v22 != 2)
            v24 = sub_22F259DB8(a1, v22);
          if (sub_22F245DD4(a1, v23))
            v25 = 3;
          else
            v25 = 2;
          v26 = sub_22E4899EC(a1 + 1984, v25, 40);
          *(_QWORD *)v26 = off_24FA643A0;
          *((_QWORD *)v26 + 1) = v19;
          *((_QWORD *)v26 + 2) = v21;
          *((_QWORD *)v26 + 3) = v24;
          v26[32] = v25 & 1;
        }
        v21 = *(_QWORD *)(v21 + 80);
      }
      while (v21);
    }
    *(_BYTE *)(a1 + 2893) = v18;
    sub_22E48B274((_QWORD *)a1, v16, v38, 0, 0);
    *(_QWORD *)(a1 + 2872) = v37;
  }
  return sub_22E619DE8(a1, 0);
}

uint64_t sub_22F272F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  llvm::LLVMContext *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 1) & 2) != 0)
    v5 = 3;
  else
    v5 = 2;
  if (*(_QWORD *)(a1 + 5832))
  {
    v6 = sub_22E4648A4(a1, a3);
    v7 = (_QWORD *)sub_22E4899EC(a1 + 1984, v5, 16);
    *v7 = off_24FA64418;
    v7[1] = v6;
    v9 = sub_22E489C10(a1, v8);
    sub_22F2531F0(a1, v9, v10);
  }
  else
  {
    v12 = (_QWORD *)sub_22E4899EC(a1 + 1984, v5, 16);
    *v12 = off_24FA643F0;
    v12[1] = a3;
  }
  return a3;
}

uint64_t sub_22F273024(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 280))(v5, a1, a2);
}

uint64_t sub_22F273078(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 288))(v5, a1, a2, 1);
}

uint64_t sub_22F2730D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(a1 + 144);
  v5 = v4[98];
  if (!v5)
  {
    sub_22F298C2C(v4);
    v5 = v4[98];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 272))(v5, a1, a2);
}

llvm::Value *sub_22F273124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Value *Declaration;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 832);
  Declaration = *(llvm::Value **)(v6 + 368);
  if (Declaration
    || (Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(), (*(_QWORD *)(v6 + 368) = Declaration) != 0))
  {
    v8 = *((_QWORD *)Declaration + 3);
  }
  else
  {
    v8 = 0;
  }
  v11 = 257;
  return sub_22F24EEDC(a1, v8, Declaration, a2, a3, (uint64_t)v10);
}

unsigned __int8 *sub_22F2731AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    return sub_22F2731F8(a1, a3, 0);
  else
    return (unsigned __int8 *)sub_22E563CC4(a1, a3, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 248), 222, 0);
}

unsigned __int8 *sub_22F2731F8(_QWORD *a1, uint64_t a2, char a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v4 = (unsigned __int8 *)sub_22E563CC4(a1, a2, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 296), 227, 0);
  v5 = v4;
  if ((a3 & 1) == 0 && v4[16] >= 0x1Cu)
  {
    llvm::Value::stripPointerCasts((llvm::Value *)v4);
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
  }
  return v5;
}

llvm::Value *sub_22F27328C(llvm::Value *result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Declaration;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  _BYTE v12[32];
  __int16 v13;
  uint64_t v14;

  if (*(_BYTE *)(a2 + 16) != 19)
  {
    v5 = (uint64_t)result;
    v6 = *((_QWORD *)result + 18);
    v7 = *(_QWORD *)(v6 + 832);
    if (!*(_QWORD *)(v7 + 304))
    {
      Declaration = llvm::Intrinsic::getDeclaration();
      sub_22E565438(v6, Declaration);
      *(_QWORD *)(v7 + 304) = Declaration;
    }
    v9 = *(_QWORD *)(v5 + 96);
    v13 = 257;
    v14 = sub_22E3C1740((uint64_t *)(v5 + 272), 49, a2, v9, (uint64_t)v12);
    v10 = *(llvm::Value **)(v7 + 304);
    if (v10)
      v11 = *((_QWORD *)v10 + 3);
    else
      v11 = 0;
    v13 = 257;
    result = sub_22F24EEDC(v5, v11, v10, (uint64_t)&v14, 1, (uint64_t)v12);
    if (!a3)
    {
      llvm::MDTuple::getImpl();
      return (llvm::Value *)llvm::Instruction::setMetadata();
    }
  }
  return result;
}

uint64_t sub_22F273398(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Declaration;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v8 = a1[18];
  v9 = *(_QWORD *)(v8 + 832);
  if (!*(_QWORD *)(v9 + 328))
  {
    Declaration = llvm::Intrinsic::getDeclaration();
    sub_22E565438(v8, Declaration);
    *(_QWORD *)(v9 + 328) = Declaration;
  }
  if ((*(_BYTE *)(a2 + 24) & 3) != 0)
    v11 = sub_22F28ABCC(a2, a1);
  else
    v11 = *(_QWORD *)a2;
  v12 = a1[13];
  v20 = 257;
  v21[0] = sub_22E3C1740(a1 + 34, 49, v11, v12, (uint64_t)v19);
  v13 = a1[12];
  v18 = 257;
  v21[1] = sub_22E3C1740(a1 + 34, 49, a3, v13, (uint64_t)v17);
  v14 = *(llvm::Value **)(v9 + 328);
  if (v14)
    v15 = *((_QWORD *)v14 + 3);
  else
    v15 = 0;
  v20 = 257;
  sub_22F24EEDC((uint64_t)a1, v15, v14, (uint64_t)v21, 2, (uint64_t)v19);
  if (a4)
    return 0;
  else
    return a3;
}

uint64_t sub_22F2734E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  __int128 v20;
  _OWORD v21[8];
  uint64_t v22;
  _OWORD v23[8];
  uint64_t v24;
  _OWORD v25[3];

  v6 = *(_QWORD *)(a2 + 64);
  v7 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10;
  if (v7 || (v19 = *(_QWORD *)(a2 + 24)) != 0 && v19 < *(unsigned __int8 *)(a1 + 130))
  {
    v8 = sub_22F2731AC((_QWORD *)a1, v6, a3);
    v9 = *(_OWORD *)(a2 + 112);
    v23[6] = *(_OWORD *)(a2 + 96);
    v23[7] = v9;
    v24 = *(_QWORD *)(a2 + 128);
    v10 = *(_OWORD *)(a2 + 48);
    v23[2] = *(_OWORD *)(a2 + 32);
    v23[3] = v10;
    v11 = *(_OWORD *)(a2 + 80);
    v23[4] = *(_OWORD *)(a2 + 64);
    v23[5] = v11;
    v12 = *(_OWORD *)(a2 + 16);
    v23[0] = *(_OWORD *)a2;
    v23[1] = v12;
    v13 = sub_22F25F748(a1, (uint64_t)v23, 0);
    v14 = *(_OWORD *)(a2 + 112);
    v21[6] = *(_OWORD *)(a2 + 96);
    v21[7] = v14;
    v22 = *(_QWORD *)(a2 + 128);
    v15 = *(_OWORD *)(a2 + 48);
    v21[2] = *(_OWORD *)(a2 + 32);
    v21[3] = v15;
    v16 = *(_OWORD *)(a2 + 80);
    v21[4] = *(_OWORD *)(a2 + 64);
    v21[5] = v16;
    v17 = *(_OWORD *)(a2 + 16);
    v21[0] = *(_OWORD *)a2;
    v21[1] = v17;
    sub_22E4E87FC(a1, v8, v21, 0);
    sub_22F27328C((llvm::Value *)a1, v13, (*(_BYTE *)(a2 + 80) & 0x20) == 0);
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 24);
    v25[0] = *(_OWORD *)(a2 + 8);
    v25[1] = v20;
    v25[2] = *(_OWORD *)(a2 + 40);
    return sub_22F273398((_QWORD *)a1, (uint64_t)v25, a3, a4);
  }
  return (uint64_t)v8;
}

uint64_t sub_22F27362C(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = a4[1];
  v11 = *a4;
  v12 = v6;
  v13 = a4[2];
  v7 = (uint64_t *)sub_22E564218(a1, (uint64_t)&v11, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 232));
  sub_22F272F6C((uint64_t)a1, v8, (uint64_t)v7);
  v9 = a3[1];
  v11 = *a3;
  v12 = v9;
  v13 = a3[2];
  return sub_22E56435C(a1, (uint64_t)&v11, v7, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 336), 230, 0);
}

llvm::Value *sub_22F2736C8(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[3];
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = a4[1];
  v14 = *a4;
  v15 = v7;
  v16 = a4[2];
  v8 = (uint64_t *)sub_22E564218(a1, (uint64_t)&v14, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 232));
  sub_22F272F6C((uint64_t)a1, v9, (uint64_t)v8);
  v10 = a3[1];
  v14 = *a3;
  v15 = v10;
  v16 = a3[2];
  sub_22E56435C(a1, (uint64_t)&v14, v8, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 336), 230, 0);
  v11 = a4[1];
  v13[0] = *a4;
  v13[1] = v11;
  v13[2] = a4[2];
  return sub_22E56455C(a1, (uint64_t)v13);
}

llvm::Value *sub_22F273784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Value *Declaration;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(v2 + 832);
  Declaration = *(llvm::Value **)(v3 + 160);
  if (Declaration
    || (Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(),
        sub_22E565438(v2, (uint64_t)Declaration),
        (*(_QWORD *)(v3 + 160) = Declaration) != 0))
  {
    v5 = *((_QWORD *)Declaration + 3);
  }
  else
  {
    v5 = 0;
  }
  v8 = 257;
  return sub_22F24EE8C(a1, v5, Declaration, (uint64_t)v7);
}

llvm::Value *sub_22F273810(uint64_t a1, uint64_t a2)
{
  llvm::LLVMContext *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *Declaration;
  uint64_t v7;
  llvm::Value *result;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;

  v16 = a2;
  if (sub_22E4899B0(a1 + 1984) && sub_22F25CF64(a1))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 832);
    v10 = *(llvm::Value **)(v9 + 72);
    if (!v10)
    {
      llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 336), v3);
      v14[0] = *(_QWORD *)(a1 + 96);
      v11 = llvm::FunctionType::get();
      *(_QWORD *)(v9 + 64) = sub_22E633A04(*(_QWORD *)(a1 + 144), v11, "objc_autoreleasePoolPop", 0x17uLL, 0, 0, 0);
      *(_QWORD *)(v9 + 72) = v12;
      sub_22E565438(*(_QWORD *)(a1 + 144), v12);
      v10 = *(llvm::Value **)(v9 + 72);
    }
    v13 = *(_QWORD *)(v9 + 64);
    v15 = 257;
    result = (llvm::Value *)sub_22F24F1F4((_QWORD *)a1, v13, v10, (uint64_t)&v16, 1, (uint64_t)v14);
    *((_WORD *)result + 9) = *((_WORD *)result + 9) & 0xF003 | (4 * *(_WORD *)(a1 + 136));
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(_QWORD *)(v4 + 832);
    Declaration = *(llvm::Value **)(v5 + 56);
    if (Declaration)
    {
      v7 = *(_QWORD *)(v5 + 48);
    }
    else
    {
      Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration();
      sub_22E565438(v4, (uint64_t)Declaration);
      if (Declaration)
        v7 = *((_QWORD *)Declaration + 3);
      else
        v7 = 0;
      *(_QWORD *)(v5 + 48) = v7;
      *(_QWORD *)(v5 + 56) = Declaration;
    }
    v15 = 257;
    return sub_22E479C7C(a1, v7, Declaration, (uint64_t)&v16, 1, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_22F273964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD v25[7];
  _QWORD v26[3];
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[7];
  _QWORD v32[2];
  _QWORD v33[154];
  _QWORD v34[26];
  _QWORD v35[4];
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(v2 + 784);
  if (!v3)
  {
    sub_22F298C2C(*(_QWORD **)(a1 + 144));
    v3 = *(_QWORD *)(v2 + 784);
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 256))(v3, a1);
  v5 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "alloc", 5uLL);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = v5 | 1;
  v32[0] = v33;
  v32[1] = 0x800000000;
  v33[152] = v34;
  v33[153] = 0x100000000;
  v34[24] = v35;
  v34[25] = 0x100000000;
  v35[2] = v36;
  v35[3] = 0x200000000;
  v36[4] = 0;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v8 = *(_QWORD *)(v6 + 144);
  v9 = sub_22F36E1B8(v8);
  v10 = *(_QWORD *)(v9 + 48);
  if (v10)
    v11 = v10 & 0xFFFFFFFFFFFFFFF0;
  else
    v11 = sub_22EF6462C(v8, v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v3 + 136))(v31, v3, a1, v26, v11, v7, v4, v32, 0, 0);
  v12 = v31[0];
  v13 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "init", 4uLL);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v15 = sub_22F36E1B8(v14);
  v16 = *(_QWORD *)(v15 + 48);
  if (v16)
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
  else
    v17 = sub_22EF6462C(v14, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v3 + 136))(v25, v3, a1, v20, v17, v13 | 1, v12, v32, 0, 0);
  v18 = v25[0];
  sub_22E3CEBAC((uint64_t)v32);
  return v18;
}

uint64_t sub_22F273B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[7];
  _QWORD v9[3];
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  _QWORD v15[154];
  _QWORD v16[26];
  _QWORD v17[4];
  _QWORD v18[6];

  v18[5] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "drain", 5uLL);
  v5 = *(_QWORD **)(a1 + 144);
  v14[0] = v15;
  v14[1] = 0x800000000;
  v15[152] = v16;
  v15[153] = 0x100000000;
  v16[24] = v17;
  v16[25] = 0x100000000;
  v17[2] = v18;
  v17[3] = 0x200000000;
  v18[4] = 0;
  v6 = v5[98];
  if (!v6)
  {
    sub_22F298C2C(v5);
    v6 = v5[98];
    v5 = *(_QWORD **)(a1 + 144);
  }
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v6 + 136))(v8, v6, a1, v9, *(_QWORD *)(v5[18] + 16392), v4 | 1, a2, v14, 0, 0);
  return sub_22E3CEBAC((uint64_t)v14);
}

llvm::Value *sub_22F273CC4(uint64_t *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return sub_22E564168(a1, (uint64_t)v4, 1);
}

llvm::Value *sub_22F273CF8(uint64_t *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return sub_22E564168(a1, (uint64_t)v4, 0);
}

llvm::Value *sub_22F273D2C(_QWORD *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return sub_22E56455C(a1, (uint64_t)v4);
}

char *sub_22F273D5C(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  char *result;
  uint64_t (**v5)();

  v3 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 148);
  result = sub_22E4899EC(a1 + 1984, 2u, 16);
  v5 = off_24FA64440;
  if ((v3 & 2) == 0)
    v5 = off_24FA64468;
  *(_QWORD *)result = v5;
  *((_QWORD *)result + 1) = a2;
  return result;
}

uint64_t sub_22F273DB8(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  if (a3 && sub_22F273EA4((int *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 400)))
  {
    v12 = a1;
    v13 = a1 + 272;
    v14 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v6 = sub_22E50E974(&v12, a2, a4);
    return sub_22E5654B8(a1, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_22E5657C0, (uint64_t)&v12, sub_22E5657D0, (uint64_t)&v11);
  }
  else
  {
    v12 = a1;
    v13 = a1 + 272;
    v14 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v8 = sub_22E50E974(&v12, a2, a4);
    v7 = sub_22E5654B8(a1, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_22E5657D8, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_22E5657E8, (uint64_t)&v11);
    sub_22F272F6C(a1, v9, v7);
  }
  return v7;
}

uint64_t sub_22F273EA4(int *a1)
{
  int v1;
  _DWORD *v2;
  unint64_t v3;
  _QWORD v5[2];

  v1 = *a1;
  if (*a1 < 2)
  {
    v2 = a1 + 1;
    v3 = 0x8000000B0000000ALL;
  }
  else if ((v1 - 3) >= 2)
  {
    if (v1 != 2)
      return 0;
    v2 = a1 + 1;
    v3 = 9;
  }
  else
  {
    v2 = a1 + 1;
    v3 = 2;
  }
  v5[0] = v3;
  v5[1] = 0;
  return sub_22E3B38EC(v2, v5) ^ 1;
}

uint64_t sub_22F273F1C(_QWORD *a1, unsigned __int8 *a2)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9[2];
  char v10;
  uint64_t v11;

  if (sub_22E564A68(a2))
  {
    v9[0] = (uint64_t)a1;
    v9[1] = (uint64_t)(a1 + 34);
    v10 = 0;
    v11 = *(_QWORD *)(a1[18] + 232);
    v5 = sub_22E50E974(v9, a2, v4);
  }
  else
  {
    v9[0] = (uint64_t)a1;
    v8 = sub_22E56580C(v9, a2, v4);
    v5 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      goto LABEL_4;
  }
  v5 = sub_22E563CC4(a1, v5, (uint64_t *)(*(_QWORD *)(a1[18] + 832) + 296), 227, 0);
LABEL_4:
  sub_22F272F6C((uint64_t)a1, v6, v5);
  return v5;
}

llvm::Value *sub_22F273FC8(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5[2];
  char v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 144);
  if ((*(_WORD *)(*(_QWORD *)(v3 + 152) + 148) & 2) != 0)
    return (llvm::Value *)sub_22E564980(a1, a2, a3);
  v5[0] = a1;
  v5[1] = a1 + 272;
  v6 = 0;
  v7 = *(_QWORD *)(v3 + 232);
  return sub_22E50E974(v5, a2);
}

__n128 sub_22F274020@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD v15[8];
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v7 = *(unsigned __int8 **)(a2 + 24);
  if (a3)
  {
    v8 = sub_22E564B88(a1, v7, a5);
  }
  else
  {
    *(_QWORD *)&v17 = a1;
    *((_QWORD *)&v17 + 1) = a1 + 272;
    v18.n128_u8[0] = 0;
    v18.n128_u64[1] = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
    v8 = sub_22E50E974(&v17, v7, a5);
  }
  v9 = v8;
  sub_22E4D8D7C(&v17);
  v15[6] = v23;
  v15[7] = v24;
  v16 = v25;
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  sub_22E4E87FC(a1, v9, v15, 0);
  v10 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v10;
  v11 = v25;
  v12 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v13;
  result = v18;
  *(_OWORD *)a4 = v17;
  *(__n128 *)(a4 + 16) = result;
  *(_QWORD *)(a4 + 128) = v11;
  *(_QWORD *)(a4 + 136) = v9;
  return result;
}

__n128 sub_22F27410C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  _OWORD v12[8];
  uint64_t v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v6 = sub_22E564980(a1, *(unsigned __int8 **)(a2 + 24), a4);
  sub_22E4D8D7C(&v14);
  v12[6] = v20;
  v12[7] = v21;
  v13 = v22;
  v12[2] = v16;
  v12[3] = v17;
  v12[4] = v18;
  v12[5] = v19;
  v12[0] = v14;
  v12[1] = v15;
  sub_22E4E87FC(a1, v6, v12, 0);
  v7 = v21;
  *(_OWORD *)(a3 + 96) = v20;
  *(_OWORD *)(a3 + 112) = v7;
  v8 = v22;
  v9 = v17;
  *(_OWORD *)(a3 + 32) = v16;
  *(_OWORD *)(a3 + 48) = v9;
  v10 = v19;
  *(_OWORD *)(a3 + 64) = v18;
  *(_OWORD *)(a3 + 80) = v10;
  result = v15;
  *(_OWORD *)a3 = v14;
  *(__n128 *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 128) = v8;
  *(_QWORD *)(a3 + 136) = v6;
  return result;
}

uint64_t sub_22F2741CC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t (**v13)();
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v3 = *(unsigned int **)(a2 + 16);
  if (*(_BYTE *)(a1 + 2892))
  {
    v4 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 2880);
    if (v4)
    {
      sub_22F256D30(*(unsigned __int8 **)(a1 + 2880), a1 + 272, v3[1]);
      v5 = 0;
      goto LABEL_6;
    }
  }
  v5 = 1;
LABEL_6:
  v6 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v7 = *(_QWORD *)(a1 + 2312);
  v8 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v9 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v6;
  sub_22F274330(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 400);
  if (v10)
  {
    v11 = (uint64_t)sub_22F273784(a1);
    v12 = (uint64_t (***)())sub_22E4899EC(a1 + 1984, 2, 16);
    v13 = off_24FA64440;
  }
  else
  {
    v11 = sub_22F273964(a1);
    v12 = (uint64_t (***)())sub_22E4899EC(a1 + 1984, 2, 16);
    v13 = off_24FA64468;
  }
  *v12 = v13;
  v12[1] = (uint64_t (**)())v11;
  v15 = (uint64_t *)(v3 + 4);
  v14 = *v3;
  if (v14 >= 0x100)
  {
    v16 = 8 * (v14 >> 8);
    do
    {
      v17 = *v15++;
      sub_22E5E5158(a1, v17, 0, 0);
      v16 -= 8;
    }
    while (v16);
  }
  if ((v5 & 1) == 0)
    sub_22F256E20(v4, a1 + 272, v3[2]);
  *(_BYTE *)(a1 + 2893) = v8;
  result = sub_22E48B274(a1, v6, v7, 0, 0);
  *(_QWORD *)(a1 + 2872) = v9;
  return result;
}

void sub_22F274330(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_22F274360@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];

  v2[0] = 0x800000070000000ALL;
  v2[1] = 0;
  return sub_22E3B38EC((_DWORD *)(a1 + 4), v2) ^ 1;
}

void sub_22F27438C()
{
  JUMPOUT(0x22F274370);
}

void sub_22F274398()
{
  JUMPOUT(0x22F274380);
}

void sub_22F2743A0()
{
  JUMPOUT(0x22F274370);
}

llvm::Value *sub_22F2743B0(uint64_t a1, uint64_t a2)
{
  llvm::InlineAsm *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t FunctionType;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;

  v9[0] = *(_QWORD *)(a1 + 96);
  llvm::FunctionType::get();
  v4 = (llvm::InlineAsm *)llvm::InlineAsm::get();
  v5 = *(_QWORD *)(a1 + 96);
  v10 = 257;
  v6 = sub_22E3C1740((uint64_t *)(a1 + 272), 49, a2, v5, (uint64_t)v9);
  FunctionType = 0;
  v11 = v6;
  if (v4)
    FunctionType = llvm::InlineAsm::getFunctionType(v4);
  v10 = 257;
  return sub_22F24EEDC(a1, FunctionType, v4, (uint64_t)&v11, 1, (uint64_t)v9);
}

uint64_t sub_22F274480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[7];
  _BYTE *v24;
  uint64_t v25;
  _BYTE v26[1216];
  _BYTE *v27;
  uint64_t v28;
  _BYTE v29[192];
  _BYTE *v30;
  uint64_t v31;
  _BYTE v32[16];
  _BYTE *v33;
  uint64_t v34;
  _BYTE v35[32];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "copy", 4uLL);
  v7 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 15192), "autorelease", 0xBuLL);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(v8 + 784);
  if (!v9)
  {
    sub_22F298C2C(*(_QWORD **)(a1 + 144));
    v9 = *(_QWORD *)(v8 + 784);
  }
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v24 = v26;
  v25 = 0x800000000;
  v27 = v29;
  v28 = 0x100000000;
  v30 = v32;
  v31 = 0x100000000;
  v33 = v35;
  v34 = 0x200000000;
  v36 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, _BYTE **, _QWORD, _QWORD))(*(_QWORD *)v9 + 136))(v23, v9, a1, v18, a3, v6 | 1, a2, &v24, 0, 0);
  v10 = v23[0];
  sub_22E3CEBAC((uint64_t)&v24);
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v24 = v26;
  v25 = 0x800000000;
  v27 = v29;
  v28 = 0x100000000;
  v30 = v32;
  v31 = 0x100000000;
  v33 = v35;
  v34 = 0x200000000;
  v36 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, _BYTE **, _QWORD, _QWORD))(*(_QWORD *)v9 + 136))(v23, v9, a1, v13, a3, v7 | 1, v10, &v24, 0, 0);
  v11 = v23[0];
  sub_22E3CEBAC((uint64_t)&v24);
  return v11;
}

uint64_t sub_22F274688(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t *v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t *v28;
  llvm::Type *v29;
  uint64_t NullValue;
  uint64_t v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[2];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_DWORD *)(*(_QWORD *)(v5 + 216) + 68);
  if (v6 > 0x21 || ((1 << v6) & 0x3F0000888) == 0)
  {
    if (!*(_QWORD *)(v5 + 3752))
    {
      v40 = *(void **)(a1 + 24);
      v41 = (uint64_t)v40;
      v42[0] = v40;
      v21 = llvm::FunctionType::get();
      v22 = sub_22E633A04(*(_QWORD *)(a1 + 144), v21, "__isOSVersionAtLeast", 20, 0, 0, 0);
      v23 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(v23 + 3744) = v22;
      *(_QWORD *)(v23 + 3752) = v24;
    }
    v32 = llvm::ConstantInt::get();
    v33 = llvm::ConstantInt::get();
    v34 = llvm::ConstantInt::get();
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(_QWORD *)(v25 + 3744);
    v27 = *(llvm::Value **)(v25 + 3752);
    v43 = 257;
    v28 = (uint64_t *)sub_22F24EEDC(a1, v26, v27, (uint64_t)&v32, 3, (uint64_t)&v40);
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 24), v29);
    v43 = 257;
    return sub_22E3C18F4(a1 + 272, 33, v28, NullValue, (uint64_t)&v40);
  }
  else
  {
    v40 = v42;
    v41 = 0x800000000;
    v31[0] = (uint64_t)&v40;
    v31[1] = v5;
    if (*a2 & 0x7FFFFFFFFFFFFFFFLL | a2[1] & 0x7FFFFFFF7FFFFFFFLL)
      sub_22E5667BC(v31);
    if (*a3 & 0x7FFFFFFFFFFFFFFFLL | a3[1] & 0x7FFFFFFF7FFFFFFFLL)
      sub_22E5667BC(v31);
    if (!*(_QWORD *)(v5 + 3768))
    {
      v32 = *(_QWORD *)(v5 + 24);
      v33 = v32;
      v34 = v32;
      v35 = v32;
      v8 = llvm::FunctionType::get();
      *(_QWORD *)(v5 + 3760) = sub_22E633A04(v5, v8, "__isPlatformVersionAtLeast", 26, 0, 0, 0);
      *(_QWORD *)(v5 + 3768) = v9;
      v32 = *(_QWORD *)(v5 + 24);
      v33 = v32;
      v34 = v32;
      v35 = v32;
      v36 = v32;
      v37 = v32;
      v38 = v32;
      v39 = v32;
      v10 = llvm::FunctionType::get();
      *(_QWORD *)(v5 + 3776) = sub_22E633A04(v5, v10, "__isPlatformOrVariantPlatformVersionAtLeast", 43, 0, 0, 0);
      *(_QWORD *)(v5 + 3784) = v11;
    }
    v12 = v5 + 3776;
    v13 = 3776;
    if ((_DWORD)v41 == 4)
    {
      v13 = 3760;
      v12 = v5 + 3760;
    }
    v14 = *(_QWORD *)(v5 + v13);
    v15 = *(llvm::Value **)(v12 + 8);
    LOWORD(v36) = 257;
    v16 = (uint64_t *)sub_22F24EEDC(a1, v14, v15, (uint64_t)v40, v41, (uint64_t)&v32);
    v18 = llvm::Constant::getNullValue(*(llvm::Constant **)(v5 + 24), v17);
    LOWORD(v36) = 257;
    v19 = sub_22E3C18F4(a1 + 272, 33, v16, v18, (uint64_t)&v32);
    if (v40 != v42)
      free(v40);
  }
  return v19;
}

uint64_t sub_22F2749C4()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t Impl;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Value *v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::GlobalValue *v14;
  int v15;
  unsigned int v16;
  int hasExternalWeakLinkage;
  unsigned int v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t NullValue;
  _OWORD v23[2];
  __int16 v24;
  _OWORD v25[9];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = MEMORY[0x24BDAC7A8]();
  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(result + 3768))
    return result;
  v1 = result;
  v2 = *(_QWORD *)(result + 216);
  result = *(unsigned int *)(v2 + 68);
  if (result > 0x21 || ((1 << result) & 0x3F0000888) == 0)
    return result;
  v25[0] = *(_OWORD *)(v2 + 240);
  result = sub_22E564F04(result, v25);
  if ((result & 1) != 0)
  {
    v4 = v1;
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 216);
    if (!*(_QWORD *)(v20 + 264))
      return result;
    v21 = v20 + 304;
    if (!*(_BYTE *)(v20 + 352))
      v21 = 0;
    v23[0] = *(_OWORD *)(v20 + 272);
    result = sub_22E564F04(*(_DWORD *)(v21 + 36), v23);
    v4 = v1;
    if ((result & 1) == 0)
      return result;
  }
  v5 = v4;
  v29 = llvm::MDString::get();
  v30 = llvm::MDString::get();
  Impl = llvm::MDTuple::getImpl();
  v7 = *(_DWORD *)(v5 + 3016);
  if (v7 >= *(_DWORD *)(v5 + 3020))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v1 + 3016);
  }
  *(_QWORD *)(*(_QWORD *)(v1 + 3008) + 8 * v7) = Impl;
  ++*(_DWORD *)(v1 + 3016);
  *(_QWORD *)&v25[0] = *(_QWORD *)(v1 + 96);
  v8 = llvm::FunctionType::get();
  v9 = sub_22E633A04(v1, v8, "CFBundleGetVersionNumber", 0x18uLL, 0, 0, 0);
  v11 = v10;
  v12 = llvm::FunctionType::get();
  sub_22E633A04(v1, v12, "__clang_at_available_requires_core_foundation_framework", 0x37uLL, 0, 1, 0);
  result = llvm::Value::stripPointerCasts(v13);
  if (*(_QWORD *)(result + 72) == result + 72)
  {
    v14 = (llvm::GlobalValue *)result;
    v15 = *(_DWORD *)(result + 32);
    v16 = v15 & 0xFFFFFFF0 | 2;
    *(_DWORD *)(result + 32) = v16;
    if ((v15 & 0x30) != 0)
    {
      hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
      v16 = *((_DWORD *)v14 + 8);
      if (!hasExternalWeakLinkage)
        v16 |= 0x4000u;
    }
    v18 = v16 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v14 + 8) = v18;
    if ((v16 & 0xF) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v14) & 1) != 0)
        goto LABEL_17;
      v18 = *((_DWORD *)v14 + 8);
    }
    *((_DWORD *)v14 + 8) = v18 | 0x4000;
LABEL_17:
    sub_22E619430((uint64_t)v25, v1, 0);
    v24 = 257;
    operator new();
    v27 = llvm::BasicBlock::BasicBlock();
    v28 = v27 + 40;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v1 + 96), v19);
    v24 = 257;
    sub_22F24EEDC((uint64_t)v25, v9, v11, (uint64_t)&NullValue, 1, (uint64_t)v23);
    sub_22F24866C((uint64_t)&v26);
    sub_22E6242E0((uint64_t *)v1, (uint64_t)v14);
    return sub_22E619908((uint64_t)v25);
  }
  return result;
}

uint64_t sub_22F274D10()
{
  return 0;
}

void sub_22F274D20(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_22F274D5C()
{
  sub_22F274D50();
}

void sub_22F274D64(uint64_t a1@<X8>, unint64_t a2, uint64_t a3)
{
  a2 = 0x8000000A0000000ALL;
  a3 = 0;
  sub_22E3B38EC((_DWORD *)(a1 + 4), &a2);
  sub_22F274D50();
}

void sub_22F274D94(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_22F274DD0()
{
  sub_22F274DC4();
}

void sub_22F274DD8(uint64_t a1@<X8>, unint64_t a2, uint64_t a3)
{
  a2 = 0x8000000A0000000ALL;
  a3 = 0;
  sub_22E3B38EC((_DWORD *)(a1 + 4), &a2);
  sub_22F274DC4();
}

uint64_t sub_22F274E08(_DWORD *a1)
{
  uint64_t result;
  _DWORD *v3;
  unint64_t v4;
  _QWORD v5[2];

  result = 0;
  switch(*a1)
  {
    case 0:
      v3 = a1 + 1;
      v4 = 0x8000000F0000000ALL;
      goto LABEL_6;
    case 2:
      v3 = a1 + 1;
      v4 = 13;
      goto LABEL_6;
    case 3:
      v3 = a1 + 1;
      v4 = 6;
      goto LABEL_6;
    case 4:
      v3 = a1 + 1;
      v4 = 5;
LABEL_6:
      v5[0] = v4;
      v5[1] = 0;
      result = sub_22E3B38EC(v3, v5) ^ 1;
      break;
    default:
      return result;
  }
  return result;
}

_DWORD *sub_22F274E90(uint64_t a1, unint64_t *a2)
{
  _DWORD *result;
  _DWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = sub_22E565278((uint64_t **)a1, *a2, (uint64_t **)a2);
  if (!result[10])
  {
    v5 = result;
    v6 = *(uint64_t **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v5[10] = (((unint64_t)v6 - *(_QWORD *)(a1 + 24)) >> 3) + 1;
    v8 = *a2;
    if ((unint64_t)v6 >= v7)
    {
      result = sub_22E566A8C((void **)(a1 + 24), v8);
    }
    else
    {
      *v6 = v8;
      result = v6 + 1;
    }
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_22F274F08(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_22F258024(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_22F274F40(int *a1)
{
  int v1;
  _DWORD *v2;
  unsigned int v3;
  unint64_t v5;
  uint64_t v6;

  v1 = *a1;
  if (*a1 == 3)
  {
    v2 = a1 + 1;
    v3 = 5;
LABEL_7:
    v5 = v3 | 0x8000000200000000;
    v6 = 0;
    return sub_22E3B38EC(v2, &v5) ^ 1;
  }
  if (v1 == 2)
  {
    v2 = a1 + 1;
    v3 = 12;
    goto LABEL_7;
  }
  if (v1)
    return 0;
  v2 = a1 + 1;
  v5 = 0x8000000E0000000ALL;
  v6 = 2147483652;
  return sub_22E3B38EC(v2, &v5) ^ 1;
}

uint64_t sub_22F274FC4(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(a1 + 72);
  if ((v1 & 0x400) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 10)
      return 2;
    else
      return 1;
  }
  else
  {
    if ((v1 & 0x20) != 0)
      v2 = 2;
    else
      v2 = (v1 << 22 >> 31) & 3;
    if ((v1 & 0x10) != 0)
      return 1;
    else
      return v2;
  }
}

uint64_t sub_22F27501C(int *a1)
{
  int v1;
  uint64_t result;
  _DWORD *v4;
  unint64_t v5;
  _QWORD v6[2];

  v1 = *a1;
  result = 1;
  switch(v1)
  {
    case 0:
      v4 = a1 + 1;
      v5 = 0x800000080000000ALL;
      goto LABEL_6;
    case 2:
      v4 = a1 + 1;
      v5 = 6;
      goto LABEL_6;
    case 3:
    case 4:
      return result;
    case 6:
      v4 = a1 + 1;
      v5 = 0x8000000700000001;
LABEL_6:
      v6[0] = v5;
      v6[1] = 0;
      result = sub_22E3B38EC(v4, v6) ^ 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22F2750A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, char a7, int a8)
{
  int v16;
  char *v17;
  char v18;

  v16 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)a1 = -57;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(199);
    ++*((_DWORD *)v17 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | ((v16 & 1) << 10) | 0x100;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  if (a8)
    v18 = 2;
  else
    v18 = 0;
  *(_BYTE *)(a1 + 40) = v18 | a7 | *(_BYTE *)(a1 + 40) & 0xFC;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22F3AABF0(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F275184@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F275208((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2752A4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_22F275208(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F2752A4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5669CC(a1, v7);
  v9 = 0;
  sub_22F275208((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F275350(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22F275208((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F2753FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = a1[19];
  v11 = *(_OWORD *)(v2 + 400);
  v12 = *(_DWORD *)(v2 + 416);
  if ((_DWORD)v11 == 5)
  {
    v3 = operator new();
    v8 = sub_22E5704F8(v3, a1, 8, 2, 1);
    *(_QWORD *)v8 = off_24FA64B58;
    v8 += 1176;
    *(_QWORD *)(v3 + 1176) = 0;
    v5 = (_QWORD *)(v3 + 1216);
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_QWORD *)(v3 + 1232) = 0;
    *(_QWORD *)(v3 + 1248) = 0;
    *(_QWORD *)(v3 + 1240) = 0;
    sub_22E5671BC((_QWORD *)v8, *(_QWORD *)(v3 + 8), (uint64_t)"objc_msg_lookup");
    v6 = *(_QWORD *)(v3 + 8);
    v7 = "objc_msg_lookup_super";
    goto LABEL_5;
  }
  if ((_DWORD)v11 == 7)
  {
    v3 = operator new();
    v4 = sub_22E5704F8(v3, a1, 9, 3, 1);
    *(_QWORD *)v4 = off_24FA64D58;
    v4 += 1176;
    *(_QWORD *)(v3 + 1176) = 0;
    v5 = (_QWORD *)(v3 + 1296);
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v3 + 1232) = 0u;
    *(_OWORD *)(v3 + 1248) = 0u;
    *(_OWORD *)(v3 + 1272) = 0u;
    *(_OWORD *)(v3 + 1288) = 0u;
    *(_QWORD *)(v3 + 1312) = 0;
    *(_QWORD *)(v3 + 1328) = 0;
    *(_QWORD *)(v3 + 1320) = 0;
    sub_22E5671BC((_QWORD *)v4, *(_QWORD *)(v3 + 8), (uint64_t)"objc_msg_lookup");
    sub_22E5671BC((_QWORD *)(v3 + 1216), *(_QWORD *)(v3 + 8), (uint64_t)"objc_msg_lookup_stret");
    sub_22E5671BC((_QWORD *)(v3 + 1256), *(_QWORD *)(v3 + 8), (uint64_t)"objc_msg_lookup_super");
    v6 = *(_QWORD *)(v3 + 8);
    v7 = "objc_msg_lookup_super_stret";
LABEL_5:
    sub_22E5671BC(v5, v6, (uint64_t)v7);
    return v3;
  }
  v13 = 0x8000000000000002;
  v14 = 0;
  if ((sub_22E3B38EC((_DWORD *)&v11 + 1, &v13) & 1) != 0)
  {
    v3 = operator new();
    sub_22E566E08(v3, a1, 9, 3, 1);
  }
  else
  {
    v3 = operator new();
    v10 = sub_22E566E08(v3, a1, 10, 4, 2);
    *(_QWORD *)v10 = off_24FA64490;
    v10 += 1512;
    *(_QWORD *)(v3 + 1512) = 0;
    *(_QWORD *)(v3 + 1528) = 0;
    *(_QWORD *)(v3 + 1544) = 0;
    *(_QWORD *)(v3 + 1536) = 0;
    *(_DWORD *)(v10 + 39) = 0;
    *(_OWORD *)(v3 + 1560) = 0u;
    *(_OWORD *)(v3 + 1576) = 0u;
    *(_OWORD *)(v3 + 1588) = 0u;
    *(_DWORD *)(v3 + 1604) = 16;
    *(_QWORD *)(v3 + 1616) = 0;
    sub_22E5671BC((_QWORD *)v10, *(_QWORD *)(v3 + 8), (uint64_t)"objc_msg_lookup_super");
    v13 = *(_QWORD *)(v3 + 64);
    v14 = v13;
    v15 = v13;
    v16 = v13;
    v17 = v13;
    *(_QWORD *)(v3 + 208) = llvm::StructType::get();
  }
  return v3;
}

uint64_t sub_22F2756F4(uint64_t a1)
{
  unsigned int v2;
  llvm *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(llvm **)a1;
  if (v2)
  {
    v4 = 88 * v2;
    v5 = (char **)((char *)v3 + 8);
    do
    {
      if ((unint64_t)*(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v5 = sub_22E5762C8(v5);
      v5 += 11;
      v4 -= 88;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 88 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

uint64_t sub_22F275768(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        v6 = *(llvm **)(*(_QWORD *)a1 + v4);
        if (v6 != (llvm *)-8 && v6 != 0)
          llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 17));
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2757E4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  sub_22E670BCC((uint64_t *)a1, *(llvm::ArrayType **)(a1 + 48));
  return sub_22F29F614(v1);
}

uint64_t sub_22F275848(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  result = llvm::ConstantExpr::getBitCast();
  v3 = result;
  v4 = *a1;
  v5 = *(_DWORD *)(v4 + 16);
  if (v5 >= *(_DWORD *)(v4 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v4 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5) = v3;
  ++*(_DWORD *)(v4 + 16);
  return result;
}

uint64_t sub_22F2758B8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  result = sub_22E670BCC((uint64_t *)a1, *(llvm::ArrayType **)(a1 + 48));
  v4 = result;
  v5 = *a2;
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 >= *(_DWORD *)(v5 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t sub_22F275920(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F275998(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F2759F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  result = sub_22E670C54(a1, a1[6]);
  v4 = *a2;
  v5 = *(_DWORD *)(v4 + 16);
  if (v5 >= *(_DWORD *)(v4 + 20))
  {
    v6 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v6;
    v5 = *(_DWORD *)(v4 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * v5) = result;
  ++*(_DWORD *)(v4 + 16);
  return result;
}

uint64_t sub_22F275A68(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F275ACC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F275B30(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  sub_22E670BCC((uint64_t *)a1, *(llvm::ArrayType **)(a1 + 48));
  return sub_22F29F614(v1);
}

_QWORD *sub_22F275B94(uint64_t a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F275C0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F275CD4(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
  }
  return v5;
}

uint64_t sub_22F275C0C(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  if (a2)
  {
    v8 = sub_22F41F2C8(*a3);
    v9 = a2 - 1;
    v10 = v8 & (a2 - 1);
    v11 = (_QWORD *)(a1 + 88 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(a1 + 88 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      result = 0;
      if (v14)
        v11 = v14;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_4:
  *a4 = v11;
  return result;
}

_QWORD *sub_22F275CD4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5774CC(a1, v6);
  v8 = 0;
  sub_22F275C0C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

char **sub_22F275D84(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char **v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = *result;
    v8 = 88 * v6;
    do
    {
      *(_QWORD *)v7 = -1;
      v7 += 88;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*(_QWORD *)v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = 0;
        sub_22F275C0C((uint64_t)*v5, *((_DWORD *)v5 + 4), (_QWORD *)v4, &v11);
        v9 = v11;
        *v11 = *(_QWORD *)v4;
        v9[2] = 0x200000000;
        v9[1] = v9 + 3;
        v10 = (uint64_t)(v9 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22E577598(v10, v4 + 8);
        ++*((_DWORD *)v5 + 2);
        result = sub_22E5762C8((char **)(v4 + 8));
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_22F275E70(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E577830((__int128 **)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F275EDC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F275F40(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)a1;
  sub_22E670BCC((uint64_t *)a1, *(llvm::ArrayType **)(a1 + 48));
  return sub_22F29F614(v1);
}

uint64_t sub_22F275FA4(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;

  v2 = a2;
  v3 = result;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      do
        v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v5 && ((*(_DWORD *)(v5 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v5 + 58) & 2) == 0));
      ++v4;
    }
    while (v5);
  }
  v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v3 + 8);
  }
  if (v2)
  {
    v7 = (unint64_t *)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      *v7 = v2;
      do
        v2 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v2 && ((*(_DWORD *)(v2 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v2 + 58) & 2) == 0));
      ++v7;
    }
    while (v2);
  }
  *(_DWORD *)(v3 + 8) = v6 + v4;
  return result;
}

uint64_t sub_22F27606C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;

  v2 = a2;
  v3 = result;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      do
        v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v5 && ((*(_DWORD *)(v5 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v5 + 58) & 2) != 0));
      ++v4;
    }
    while (v5);
  }
  v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v3 + 8);
  }
  if (v2)
  {
    v7 = (unint64_t *)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      *v7 = v2;
      do
        v2 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v2 && ((*(_DWORD *)(v2 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v2 + 58) & 2) != 0));
      ++v7;
    }
    while (v2);
  }
  *(_DWORD *)(v3 + 8) = v6 + v4;
  return result;
}

uint64_t sub_22F276134(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_DWORD *)(v3 + 48))
    return *(_QWORD *)(v3 + 40);
  else
    return sub_22F2590A8(a1);
}

uint64_t sub_22F2761B0(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    sub_22F3B48C4(a1);
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  v4 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v4)
    return *(_QWORD *)(v3 + 40) + 8 * v4;
  else
    return sub_22F25910C(a1);
}

unint64_t sub_22F276230(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x18 && (*(_BYTE *)(result + 58) & 2) != 0)
      break;
  }
  return result;
}

unint64_t sub_22F27628C(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x18 && (*(_BYTE *)(result + 58) & 2) == 0)
      break;
  }
  return result;
}

uint64_t sub_22F2762E8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F27634C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F2763B0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F276424(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

unint64_t sub_22F276498(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 56) & 0x80) != 0)
    sub_22EFCC320(a1 + 48);
  for (result = *(_QWORD *)(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x4E)
      break;
  }
  return result;
}

uint64_t sub_22F2764EC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F276560(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F2765C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  llvm::ArrayType *v4;
  _QWORD *v6;
  llvm::ArrayType *v7;
  llvm::ArrayType *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  llvm::Type ***v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 152) + 400) == 1)
  {
    v2 = operator new();
    v3 = (_QWORD *)sub_22E57AC8C(v2, a1);
    *v3 = &off_24FA64F58;
    sub_22E5827B0((uint64_t)(v3 + 311), a1);
    v4 = (llvm::ArrayType *)llvm::StructType::create();
    *(_QWORD *)(v2 + 2720) = v4;
    llvm::ArrayType::get(v4, 0);
    *(_QWORD *)(v2 + 2728) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2736) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2704) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2712) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2688) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2744) = llvm::StructType::create();
    llvm::PointerType::get();
    llvm::ArrayType::get(*(llvm::ArrayType **)(v2 + 2688), 0);
    llvm::StructType::setBody();
    llvm::PointerType::get();
    llvm::StructType::setBody();
    *(_QWORD *)(v2 + 2752) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2696) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2800) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2808) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2816) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2824) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2832) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2784) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2792) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2768) = llvm::StructType::create();
    llvm::PointerType::get();
    llvm::PointerType::get();
    llvm::StructType::setBody();
    *(_QWORD *)(v2 + 2776) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2760) = llvm::StructType::create();
    llvm::ArrayType::get(*(llvm::ArrayType **)(v2 + 2528), 0);
    *(_QWORD *)(v2 + 2664) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2672) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2680) = llvm::StructType::create();
    llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(v2 + 2496) + 96), (llvm::Type *)4);
    llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(v2 + 2496) + 24), (llvm::Type *)0x12);
    *(_QWORD *)(v2 + 2840) = llvm::StructType::create();
    *(_DWORD *)(v2 + 24) = 1;
    sub_22E57AE44(v2);
  }
  else
  {
    v2 = operator new();
    v6 = (_QWORD *)sub_22E57AC8C(v2, a1);
    *v6 = &off_24FA65330;
    sub_22E5827B0((uint64_t)(v6 + 311), a1);
    *(_QWORD *)(v2 + 2784) = 0;
    *(_QWORD *)(v2 + 2800) = 0;
    llvm::ArrayType::get(*(llvm::ArrayType **)(v2 + 2640), 0);
    *(_QWORD *)(v2 + 2664) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2672) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2696) = llvm::StructType::create();
    llvm::PointerType::get();
    *(_QWORD *)(v2 + 2680) = llvm::StructType::create();
    v7 = (llvm::ArrayType *)llvm::PointerType::get();
    *(_QWORD *)(v2 + 2688) = v7;
    llvm::ArrayType::get(v7, 0);
    llvm::StructType::setBody();
    *(_QWORD *)(v2 + 2704) = llvm::PointerType::get();
    llvm::PointerType::get();
    v8 = (llvm::ArrayType *)llvm::StructType::create();
    *(_QWORD *)(v2 + 2728) = v8;
    llvm::ArrayType::get(v8, 0);
    *(_QWORD *)(v2 + 2736) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2744) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2752) = llvm::StructType::create();
    llvm::FunctionType::get();
    *(_QWORD *)(v2 + 2760) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2712) = llvm::StructType::create();
    llvm::PointerType::get();
    llvm::PointerType::get();
    llvm::PointerType::get();
    llvm::PointerType::get();
    llvm::StructType::setBody();
    *(_QWORD *)(v2 + 2720) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2768) = llvm::StructType::create();
    v9 = *(_QWORD *)(v2 + 2496);
    v10 = *(_QWORD *)(v9 + 144);
    v11 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v10 + 1960) + 80));
    if (v11)
      v12 = v11 + 40;
    else
      v12 = 0;
    v13 = sub_22E3CB704(*(llvm::StringMapImpl **)(v10 + 15192), "_message_ref_t", 0xEuLL);
    v14 = sub_22F3ACBB4(v10, 0, v12, 0, 0, v13, 0);
    v15 = (_QWORD *)v14;
    v16 = v14 + 64;
    if (v14)
      v17 = v14 + 64;
    else
      v17 = 0;
    v18 = sub_22EFC2D88(v10, v17, 0, 0, 0, *(_QWORD *)(v10 + 16816), 0, 0, 0, 0);
    sub_22EFCCFA0(v16, v18);
    v19 = sub_22F36E228(v10);
    v20 = *(_QWORD *)(v19 + 48);
    if (v20)
      v21 = v20 & 0xFFFFFFFFFFFFFFF0;
    else
      v21 = sub_22EF6462C(v10, v19);
    v22 = (llvm::Type ***)(v9 + 280);
    v23 = sub_22EFC2D88(v10, v17, 0, 0, 0, v21, 0, 0, 0, 0);
    sub_22EFCCFA0(v16, v23);
    (*(void (**)(_QWORD *))(*v15 + 104))(v15);
    v24 = v15[6];
    if (v24)
      v25 = v24 & 0xFFFFFFFFFFFFFFF0;
    else
      v25 = sub_22EF6462C(v10, (unint64_t)v15);
    *(_QWORD *)(v2 + 2784) = v25;
    *(_QWORD *)(v2 + 2800) = sub_22EF5B848(v10, v25, 0);
    *(_QWORD *)(v2 + 2776) = sub_22E66CB04(v22, *(llvm::LLVMContext **)(v2 + 2784));
    *(_QWORD *)(v2 + 2792) = llvm::PointerType::get();
    *(_QWORD *)(v2 + 2808) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2816) = llvm::PointerType::get();
    llvm::PointerType::get();
    *(_QWORD *)(v2 + 2824) = llvm::StructType::create();
    *(_QWORD *)(v2 + 2832) = llvm::PointerType::get();
    *(_DWORD *)(v2 + 2872) = 0;
    *(_OWORD *)(v2 + 2840) = 0u;
    *(_OWORD *)(v2 + 2856) = 0u;
    *(_OWORD *)(v2 + 2880) = 0u;
    *(_DWORD *)(v2 + 2896) = 0;
    *(_OWORD *)(v2 + 2904) = 0u;
    *(_DWORD *)(v2 + 2920) = 0;
    *(_OWORD *)(v2 + 2928) = 0u;
    *(_DWORD *)(v2 + 2944) = 0;
    *(_QWORD *)(v2 + 2952) = 0;
    *(_QWORD *)(v2 + 2968) = 0;
    *(_QWORD *)(v2 + 2960) = 0;
    *(_DWORD *)(v2 + 24) = 2;
  }
  return v2;
}

uint64_t *sub_22F276F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  __int128 v6;
  uint64_t *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  LODWORD(v6) = 0;
  v8 = 1;
  *((_QWORD *)&v6 + 1) = 0;
  v7 = 0;
  v9 = 0;
  sub_22E582708((uint64_t)&v10, 0.0);
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)a1;
    v4 = 72 * v2;
    do
    {
      v3 = sub_22F277040(v3, &v6) + 72;
      v4 -= 72;
    }
    while (v4);
  }
  result = sub_22E4EEC9C(v11);
  if (v8 >= 0x41)
  {
    result = v7;
    if (v7)
      return (uint64_t *)MEMORY[0x2348A0E84](v7, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F277040(uint64_t a1, __int128 *a2)
{
  const llvm::APInt *v4;
  __int128 v5;
  llvm::APInt *v6;
  unsigned int v7;

  v5 = *a2;
  v4 = (const llvm::APInt *)(a2 + 1);
  *(_OWORD *)a1 = v5;
  v6 = (llvm::APInt *)(a1 + 16);
  v7 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 24) = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase(v6, v4);
  else
    *(_QWORD *)v6 = *(_QWORD *)v4;
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
  sub_22E582758((llvm::detail::IEEEFloat *)(a1 + 40), (const llvm::detail::IEEEFloat *)((char *)a2 + 40));
  return a1;
}

uint64_t *sub_22F2770A0(uint64_t *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11[3];
  int v12;
  __int128 v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)result + 4))
  {
    v1 = (unsigned int *)result;
    v12 = 0;
    v14 = 1;
    v13 = 0u;
    v15 = 0;
    sub_22E582708((uint64_t)&v16, 0.0);
    v6 = 1;
    v8 = 1;
    v7 = 0u;
    v9 = 0;
    sub_22E582708((uint64_t)&v10, 0.0);
    v2 = v1[4];
    if ((_DWORD)v2)
    {
      v3 = 72 * v2;
      v4 = (uint64_t *)(*(_QWORD *)v1 + 40);
      do
      {
        if ((sub_22F27722C((uint64_t)(v4 - 5), (uint64_t)&v12) & 1) == 0)
          sub_22F27722C((uint64_t)(v4 - 5), (uint64_t)&v6);
        sub_22E4EEC9C(v4);
        if (*((_DWORD *)v4 - 4) >= 0x41u)
        {
          v5 = *(v4 - 3);
          if (v5)
            MEMORY[0x2348A0E84](v5, 0x1000C8000313F17);
        }
        v4 += 9;
        v3 -= 72;
      }
      while (v3);
    }
    sub_22E4EEC9C(v11);
    if (v8 >= 0x41 && *((_QWORD *)&v7 + 1))
      MEMORY[0x2348A0E84](*((_QWORD *)&v7 + 1), 0x1000C8000313F17);
    result = sub_22E4EEC9C(v17);
    if (v14 >= 0x41)
    {
      result = (uint64_t *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
        return (uint64_t *)MEMORY[0x2348A0E84](*((_QWORD *)&v13 + 1), 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_22F27722C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (v2 < 2)
    return 1;
  if (v2 == 2)
    return sub_22E4634B4(a1 + 16, a2 + 16) == 0;
  return sub_22E582FD4((_QWORD *)(a1 + 32), a2 + 32);
}

_QWORD *sub_22F27729C(uint64_t a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F277304(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2773C4(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F277304(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  if (a2)
  {
    v8 = sub_22F41F2C8(*a3);
    v9 = a2 - 1;
    v10 = v8 & (a2 - 1);
    v11 = (_QWORD *)(a1 + 16 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(a1 + 16 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      result = 0;
      if (v14)
        v11 = v14;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_4:
  *a4 = v11;
  return result;
}

_QWORD *sub_22F2773C4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5839C0(a1, v6);
  v8 = 0;
  sub_22F277304(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F277474(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      result = sub_22F277304(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22F277520(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t *sub_22F2775A8(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      v10 = i[1];
      ++i;
      v9 = v10;
    }
    return i;
  }
  v11 = MEMORY[0x23489D23C](a3 + 17, 8);
  v12 = (_QWORD *)v11;
  v13 = v11 + 16;
  if (a3)
    memcpy((void *)(v11 + 16), a2, a3);
  *(_BYTE *)(v13 + a3) = 0;
  v14 = *a4;
  *v12 = a3;
  v12[1] = v14;
  *i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F2776A8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F27771C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_22F277794(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F277974(a1, a2, v7);
    *(_QWORD *)(sub_22F277AB4(v5, a2) + 64) = 0;
  }
  return v5;
}

uint64_t sub_22F277794(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20[3];
  int v21;
  __int128 v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26[4];

  v26[3] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v21 = 0;
    v5 = 1;
    v23 = 1;
    v22 = 0u;
    v24 = 0;
    sub_22E582708((uint64_t)&v25, 0.0);
    v15 = 1;
    v17 = 1;
    v16 = 0u;
    v18 = 0;
    sub_22E582708((uint64_t)&v19, 0.0);
    v10 = a2 - 1;
    v11 = sub_22E583B28(a3) & (a2 - 1);
    v12 = a1 + 72 * v11;
    if ((sub_22F27722C(a3, v12) & 1) == 0)
    {
      v13 = 0;
      v14 = 1;
      while (!sub_22F27722C(v12, (uint64_t)&v21))
      {
        if ((sub_22F27722C(v12, (uint64_t)&v15) & (v13 == 0)) != 0)
          v13 = v12;
        v11 = (v11 + v14) & v10;
        v12 = a1 + 72 * v11;
        ++v14;
        if (sub_22F27722C(a3, v12))
          goto LABEL_5;
      }
      v5 = 0;
      if (v13)
        v12 = v13;
    }
LABEL_5:
    *a4 = v12;
    sub_22E4EEC9C(v20);
    if (v17 >= 0x41 && *((_QWORD *)&v16 + 1))
      MEMORY[0x2348A0E84](*((_QWORD *)&v16 + 1), 0x1000C8000313F17);
    sub_22E4EEC9C(v26);
    if (v23 >= 0x41 && *((_QWORD *)&v22 + 1))
      MEMORY[0x2348A0E84](*((_QWORD *)&v22 + 1), 0x1000C8000313F17);
  }
  else
  {
    v5 = 0;
    *a4 = 0;
  }
  return v5;
}

uint64_t sub_22F277974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9[2];
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E583C60(a1, v6);
  v9[0] = 0;
  sub_22F277794(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, v9);
  a3 = v9[0];
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  LODWORD(v9[0]) = 0;
  v11 = 1;
  v9[1] = 0;
  v10 = 0;
  v12 = 0;
  sub_22E582708((uint64_t)&v13, 0.0);
  if ((sub_22F27722C(a3, (uint64_t)v9) & 1) == 0)
    --*(_DWORD *)(a1 + 12);
  sub_22E4EEC9C(v14);
  if (v11 >= 0x41 && v10)
    MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
  return a3;
}

uint64_t sub_22F277AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      MEMORY[0x2348A0E84](v4, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  sub_22E51FDA0((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  return a1;
}

uint64_t *sub_22F277B30(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *result;
  uint64_t v10;
  int v11;
  __int128 v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16[3];
  int v17;
  __int128 v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  sub_22F276F70(a1);
  v17 = 0;
  v19 = 1;
  v18 = 0u;
  v20 = 0;
  sub_22E582708((uint64_t)&v21, 0.0);
  v11 = 1;
  v13 = 1;
  v12 = 0u;
  v14 = 0;
  sub_22E582708((uint64_t)&v15, 0.0);
  if (a2 != a3)
  {
    v6 = a2 + 5;
    do
    {
      if ((sub_22F27722C((uint64_t)(v6 - 5), (uint64_t)&v17) & 1) == 0
        && (sub_22F27722C((uint64_t)(v6 - 5), (uint64_t)&v11) & 1) == 0)
      {
        v10 = 0;
        sub_22F277794(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)(v6 - 5), &v10);
        *(_QWORD *)(sub_22F277AB4(v10, (uint64_t)(v6 - 5)) + 64) = v6[3];
        ++*(_DWORD *)(a1 + 8);
      }
      sub_22E4EEC9C(v6);
      if (*((_DWORD *)v6 - 4) >= 0x41u)
      {
        v7 = *(v6 - 3);
        if (v7)
          MEMORY[0x2348A0E84](v7, 0x1000C8000313F17);
      }
      v8 = v6 + 4;
      v6 += 9;
    }
    while (v8 != a3);
  }
  sub_22E4EEC9C(v16);
  if (v13 >= 0x41 && *((_QWORD *)&v12 + 1))
    MEMORY[0x2348A0E84](*((_QWORD *)&v12 + 1), 0x1000C8000313F17);
  result = sub_22E4EEC9C(v22);
  if (v19 >= 0x41)
  {
    result = (uint64_t *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
      return (uint64_t *)MEMORY[0x2348A0E84](*((_QWORD *)&v18 + 1), 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22F277CFC(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  llvm::APInt *v5;
  unsigned int v6;

  *(_DWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = a2;
  v5 = (llvm::APInt *)(a1 + 16);
  v6 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 24) = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase(v5, a3);
  else
    *(_QWORD *)v5 = *(_QWORD *)a3;
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a3 + 12);
  sub_22E582708(a1 + 32, 0.0);
  return a1;
}

uint64_t sub_22F277D68(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F277DDC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F277E50(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F277EC4(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  sub_22E670C54(a1, a1[6]);
  return sub_22F29F614(v1);
}

uint64_t sub_22F277F38(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22[2];
  void *v23;
  uint64_t v24;
  _QWORD v25[18];

  v25[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  *(_QWORD *)(a1 + 152) = 0x1000000000;
  *(_QWORD *)(a1 + 288) = 1;
  v8 = a3[1];
  if (v8 < 0x11)
  {
    v23 = v25;
    v24 = 0x1000000000;
    if (!v8)
    {
      v12 = (char *)v25;
      v11 = (unsigned __int8 *)v25;
      goto LABEL_12;
    }
    LODWORD(v9) = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    if (v8 > *(unsigned int *)(a1 + 156))
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = v25;
    v24 = 0x1000000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v9) = 0;
  }
  for (i = 0; i != v8; ++i)
  {
    if (v9 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v9) = v24;
    }
    *((_QWORD *)v23 + v9) = i;
    v9 = (v24 + 1);
    LODWORD(v24) = v24 + 1;
  }
  v11 = (unsigned __int8 *)v23;
  v12 = (char *)v23 + 8 * v9;
  if ((_DWORD)v9)
  {
    v13 = 0;
    v14 = 8 * v9;
    do
    {
      *(_QWORD *)&v11[8 * v13] = v13;
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
LABEL_12:
  v22[0] = a2;
  v22[1] = 1;
  sub_22E583E40(v11, v12, v22);
  v15 = v23;
  if ((_DWORD)v24)
  {
    v16 = 8 * v24;
    do
    {
      v17 = *(_QWORD *)(*a3 + 8 * *v15);
      v18 = *(unsigned int *)(a1 + 8);
      if (v18 >= *(unsigned int *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = *(unsigned int *)(a1 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v17;
      ++*(_DWORD *)(a1 + 8);
      v19 = *(_QWORD *)(*a4 + 8 * *v15);
      v20 = *(unsigned int *)(a1 + 152);
      if (v20 >= *(unsigned int *)(a1 + 156))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = *(unsigned int *)(a1 + 152);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v20) = v19;
      ++*(_DWORD *)(a1 + 152);
      ++v15;
      v16 -= 8;
    }
    while (v16);
    v15 = v23;
  }
  if (v15 != v25)
    free(v15);
  return a1;
}

unint64_t sub_22F2781C0(uint64_t a1)
{
  unint64_t result;

  for (result = sub_22EFCCC4C(a1 + 48); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x18)
      break;
  }
  return result;
}

BOOL sub_22F2781FC(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t v6;
  unsigned __int8 v7;

  sub_22F278398(a1, a2, (uint64_t)&v6);
  v4 = v7;
  if (v7)
    sub_22E5864E8(a1 + 264, a2);
  return v4 != 0;
}

uint64_t sub_22F278254(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E5867C8(result);
    }
  }
  return result;
}

uint64_t sub_22F2782A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F275208((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2752A4(a2, (uint64_t)a3, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F278330(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 16);
  if (v3 >= *(_DWORD *)(*a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(v2 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v3) = 0;
  ++*(_DWORD *)(v2 + 16);
  return *(unsigned int *)(*a1 + 16) - 1;
}

uint64_t sub_22F278398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = sub_22F278508(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 16 * v9;
  }
  else
  {
    result = (uint64_t)sub_22F27844C((_DWORD *)a1, v14, a2);
    v7 = result;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = v12 + 16 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t *sub_22F27844C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v11;

  v4 = (uint64_t *)sub_22F27868C(a1, a3, a3, a2);
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(void **)a3;
  if ((*(_QWORD *)a3 | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v7 = v5;
    v11 = *(_QWORD *)(a3 + 8);
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)a3, v7);
    v5 = v11;
  }
  v8 = *v4;
  *v4 = (uint64_t)v6;
  v4[1] = v5;
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    MEMORY[0x2348A0E84]();
  return v4;
}

uint64_t sub_22F278508(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 16;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v10 = 0;
      *a3 = 0;
      return v10;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v15[0] = -4096;
  v15[1] = 0;
  v14[0] = -8192;
  v14[1] = 0;
  v7 = v6 - 1;
  v8 = *(_DWORD *)(a2 + 12) & (v6 - 1);
  v9 = v5 + 16 * v8;
  if ((sub_22E583260(a2, v9) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    v10 = 1;
    while (!sub_22E583260(v9, (uint64_t)v15))
    {
      if ((sub_22E583260(v9, (uint64_t)v14) & (v12 == 0)) != 0)
        v12 = v9;
      v8 = (v8 + v13) & v7;
      v9 = v5 + 16 * v8;
      ++v13;
      if (sub_22E583260(a2, v9))
        goto LABEL_7;
    }
    v10 = 0;
    if (v12)
      v9 = v12;
  }
LABEL_7:
  *a3 = v9;
  if (v14[0] != -8192 && v14[0] != -4096 && v14[0])
    MEMORY[0x2348A0E84]();
  if (v15[0] != -8192 && v15[0] != -4096 && v15[0])
    MEMORY[0x2348A0E84]();
  return v10;
}

uint64_t sub_22F27868C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  uint64_t v10[2];

  v7 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v8 = 16;
  else
    v8 = a1[4];
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - a1[1] > v8 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E586570((uint64_t)a1, v8);
  v10[0] = 0;
  sub_22F278508((uint64_t)a1, a3, v10);
  a4 = v10[0];
LABEL_6:
  *a1 += 2;
  v10[0] = -4096;
  v10[1] = 0;
  if ((sub_22E583260(a4, (uint64_t)v10) & 1) == 0)
    --a1[1];
  if (v10[0] != -8192 && v10[0] != -4096 && v10[0])
    MEMORY[0x2348A0E84]();
  return a4;
}

uint64_t sub_22F27878C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t *v20;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    v8 = (_QWORD *)(a1 + 264);
  }
  else
  {
    v17 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v17)
      goto LABEL_4;
    v7 = *(_QWORD **)(a1 + 8);
    v8 = &v7[2 * v17];
  }
  do
  {
    *v7 = -4096;
    v7[1] = 0;
    v7 += 2;
  }
  while (v7 != v8);
LABEL_4:
  v19[0] = -4096;
  v19[1] = 0;
  v9 = -8192;
  v18[0] = -8192;
  v18[1] = 0;
  if (a2 != a3)
  {
    do
    {
      if ((sub_22E583260((uint64_t)v4, (uint64_t)v19) & 1) == 0 && (sub_22E583260((uint64_t)v4, (uint64_t)v18) & 1) == 0)
      {
        v20 = 0;
        sub_22F278508(a1, (uint64_t)v4, (uint64_t *)&v20);
        v12 = v20;
        v13 = *v4;
        *v4 = -4096;
        v14 = *v12;
        *v12 = v13;
        v12[1] = v4[1];
        if (v14 != -8192 && v14 != -4096 && v14 != 0)
          MEMORY[0x2348A0E84]();
        *(_DWORD *)a1 += 2;
      }
      v10 = *v4;
      if (*v4 != -8192 && v10 != -4096 && v10 != 0)
        MEMORY[0x2348A0E84]();
      v4 += 2;
    }
    while (v4 != a3);
    v9 = v18[0];
  }
  if (v9 != -8192 && v9 != -4096 && v9)
    MEMORY[0x2348A0E84](v9, 0x1000C8077774924);
  result = v19[0];
  if (v19[0] != -8192 && v19[0] != -4096)
  {
    if (v19[0])
      return MEMORY[0x2348A0E84]();
  }
  return result;
}

void sub_22F27893C(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2789A8(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2789A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)result;
    v4 = *(_QWORD *)result + 16 * v2;
    v5 = *(_QWORD **)result;
    do
    {
      *a2 = *v5;
      a2[1] = v5[1];
      *v5 = -4096;
      v5 += 2;
      a2 += 2;
    }
    while (v5 != (_QWORD *)v4);
    v6 = 2 * v2;
    v7 = v3 - 2;
    do
    {
      result = v7[v6];
      if (result != -8192 && result != -4096 && result != 0)
        result = MEMORY[0x2348A0E84]();
      v6 -= 2;
    }
    while (v6 * 8);
  }
  return result;
}

uint64_t sub_22F278A34(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_22F277304(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2773C4(a2, a3, v13);
    v9 = (_QWORD *)result;
    v12 = *a4;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

BOOL sub_22F278AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 489)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F278B24(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E58B8E0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F278BC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F278C54(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F278CDC(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F278C54(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_22F278CDC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E58BA34(a1, v6);
  v8 = 0;
  sub_22F278C54(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F278D90(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22F278C54(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

BOOL sub_22F278E34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 482)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL sub_22F278E94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 486)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F278EF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F278F7C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F27903C(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F278F7C(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  if (a2)
  {
    v8 = sub_22F41F2C8(*a3);
    v9 = a2 - 1;
    v10 = v8 & (a2 - 1);
    v11 = (_QWORD *)(a1 + 8 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(a1 + 8 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      result = 0;
      if (v14)
        v11 = v14;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_4:
  *a4 = v11;
  return result;
}

_QWORD *sub_22F27903C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5955A0(a1, v6);
  v8 = 0;
  sub_22F278F7C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2790EC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
    result = (uint64_t)memset(*(void **)result, 255, 8 * v6);
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v7 = 0;
      result = sub_22F278F7C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v7);
      *v7 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_22F27918C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;

  v5 = sub_22F0CBCD0(*(_QWORD *)(a2 + 144), a3, 0, a4);
  return v5
       / sub_22EF5CDF0(*(_QWORD *)(a2 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
}

unint64_t sub_22F2791D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;

  v5 = sub_22F0CBCD0(*(_QWORD *)(a2 + 144), *(_QWORD *)(a3 + 88), a3, a4);
  return v5
       / sub_22EF5CDF0(*(_QWORD *)(a2 + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
}

double sub_22F279218@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned int a5@<W5>, uint64_t *a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  llvm::GetElementPtrInst *v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t IntNTy;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[32];
  __int16 v43;
  __int128 v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v14 = sub_22F36CC4C(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(a2 + 104) & 0xFFFFFFFFFFFFFFF0);
  sub_22F3B6034(a4, v14);
  v16 = v15 & 0xFFFFFFFFFFFFFFF8 | v15 & 7 | a5;
  sub_22E66C868(a1[18] + 280, v16, 0);
  v17 = a1[12];
  LOWORD(v52) = 257;
  v18 = (uint64_t *)sub_22E3C1740(a1 + 34, 49, a3, v17, (uint64_t)&v49);
  v19 = a1[1];
  *(_QWORD *)&v49 = "add.ptr";
  LOWORD(v52) = 259;
  v20 = sub_22E3E5044(a1 + 34, v19, v18, a6, (uint64_t)&v49);
  if ((*(_BYTE *)(a4 + 68) & 1) != 0)
  {
    v24 = sub_22F0CBCD0(*(_QWORD *)(a1[18] + 144), a2, 0, a4);
    v33 = v24
        % sub_22EF5CDF0(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[18] + 144) + 16408) & 0xFFFFFFFFFFFFFFF0));
    v34 = sub_22EFC2EF4(a4, *(_QWORD *)(a1[18] + 144));
    v25 = sub_22EF5CC24(*(_QWORD *)(a1[18] + 144), (v33 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = sub_22EF5CC24(*(_QWORD *)(a1[18] + 144), 8uLL);
    v26 = sub_22E3CD3D4(*(_QWORD *)(a1[18] + 144) + 2032, 32, 3);
    v27 = a1[18];
    v28 = v27 + 280;
    v29 = sub_22EF5CBF4(*(_QWORD *)(v27 + 144), v25);
    sub_22E5E0FAC(v28, a4, v33, v34, v29, 0, v26);
    v30 = a1[1];
    *(_QWORD *)&v44 = v20;
    *((_QWORD *)&v44 + 1) = v30;
    v45 = v32;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    IntNTy = llvm::Type::getIntNTy(*(llvm::Type **)(a1[18] + 232), (llvm::LLVMContext *)*(unsigned int *)(v26 + 4));
    v43 = 257;
    sub_22E3BEE6C(a1 + 34, &v44, IntNTy, (uint64_t)v42, (uint64_t)&v49);
    v39 = v50;
    v40 = v51;
    v41 = v52;
    v35 = 0;
    v36 = 0u;
    v37 = 0u;
    v38 = v49;
    *(_QWORD *)&result = sub_22F2607C4(&v38, v26, v16, 0, (uint64_t)&v35, a7).n128_u64[0];
  }
  else
  {
    v21 = llvm::PointerType::get();
    LOWORD(v52) = 257;
    v22 = sub_22E3C1740(a1 + 34, 49, (uint64_t)v20, v21, (uint64_t)&v49);
    return sub_22F297480((uint64_t)a1, v22, v16, a7);
  }
  return result;
}

uint64_t sub_22F2794C0(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32 * a2);
  v5 = v4;
  if (*v4)
  {
    v7 = (_QWORD *)v4[2];
    v6 = v4 + 2;
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v5 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 + 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v5;
  }
  return result;
}

void sub_22F279528(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE v26[32];
  __int16 v27;
  uint64_t v28;

  v14 = *(_QWORD *)(a3 + 1992) - *(_QWORD *)(a3 + 2000);
  v15 = *(_QWORD *)(a3 + 2312);
  v16 = *(_BYTE *)(a3 + 2893);
  *(_BYTE *)(a3 + 2893) = 0;
  v24 = *(_QWORD *)(a3 + 2872);
  v25 = v15;
  *(_QWORD *)(a3 + 2872) = v14;
  v17 = *(_QWORD *)(a4 + 16);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 144) + 152) + 148) & 2) != 0)
  {
    v19 = sub_22E563BF8(a3, *(unsigned __int8 **)(a4 + 16), a1);
    v18 = sub_22F272F6C(a3, *(_QWORD *)(v17 + 8), (uint64_t)v19);
  }
  else
  {
    v18 = sub_22E50E93C(a3, *(_QWORD *)(a4 + 16), 0, a1);
  }
  v20 = *(_QWORD *)(a3 + 96);
  v27 = 257;
  v28 = sub_22E3C1740((uint64_t *)(a3 + 272), 49, v18, v20, (uint64_t)v26);
  v27 = 257;
  v21 = sub_22E462B78((uint64_t *)(a3 + 272), a5, a6, (uint64_t)&v28, 1, (uint64_t)v26, 0);
  llvm::Value::getContext(v21);
  *((_QWORD *)v21 + 8) = llvm::AttributeList::addAttributeAtIndex();
  v22 = v28;
  v23 = sub_22E4899EC(a3 + 1984, 3u, 32);
  *(_QWORD *)v23 = off_24FA65608;
  *((_QWORD *)v23 + 1) = a7;
  *((_QWORD *)v23 + 2) = a8;
  *((_QWORD *)v23 + 3) = v22;
  sub_22E5E5158(a3, *(unsigned __int8 **)(a4 + 24), 0, 0);
  *(_BYTE *)(a3 + 2893) = v16;
  sub_22E48B274((_QWORD *)a3, v14, v25, 0, 0);
  *(_QWORD *)(a3 + 2872) = v24;
}

uint64_t sub_22F2796B8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a1 + 8) + 280;
  if (a2)
  {
    v7 = sub_22E46D060(v6, a2, *(_QWORD *)(*(_QWORD *)a4 + 144));
    sub_22E46F2EC(*(_QWORD *)(a1 + 8) + 280, v7);
    llvm::PointerType::get();
    return sub_22E46DE74(*(_QWORD *)(a1 + 8) + 280, v7, a4);
  }
  else
  {
    v8 = sub_22F24DCA4(v6, a3, a4);
    sub_22E46F2EC(*(_QWORD *)(a1 + 8) + 280, v8);
    llvm::PointerType::get();
  }
  return v8;
}

uint64_t sub_22F279768(unint64_t a1)
{
  uint64_t v2;

  do
  {
    v2 = sub_22EFCA55C(a1);
    if ((v2 & 1) != 0)
      break;
    a1 = sub_22F3B46CC(a1);
  }
  while (a1);
  return v2;
}

uint64_t sub_22F2797A8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  __int16 v9;

  v8 = "catchret.dest";
  v9 = 259;
  v4 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v5 = *(_QWORD *)(a1 + 8);
  v6 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489CE7C](v6, v5, v4, 0);
  v9 = 257;
  sub_22F245A34(a2 + 34, v6, (uint64_t)&v8);
  return sub_22E5ED9B4(a2, v4, 0);
}

uint64_t sub_22F27987C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FA65630;
  llvm::deallocate_buffer(*(llvm **)(a1 + 72), (void *)(40 * *(unsigned int *)(a1 + 88)));
  sub_22F27B320(a1 + 40);
  return a1;
}

void sub_22F2798CC(uint64_t a1)
{
  sub_22F27987C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2798F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22E4C6660(a2, a3);
}

llvm::Value *sub_22F279900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22F29C74C(*(_QWORD *)(a2 + 144), a3, a2);
}

uint64_t sub_22F279914(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3)
{
  llvm::Constant *v3;
  llvm::Type *v4;

  v3 = (llvm::Constant *)sub_22E66CB04((llvm::Type ***)(*(_QWORD *)(a2 + 144) + 280), a3);
  return llvm::Constant::getNullValue(v3, v4);
}

void sub_22F279934(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  uint64_t v6;

  sub_22E596850(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), a2, a3);
  sub_22E596AF4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), (uint64_t)a2, a3);
  sub_22E596E94(a1, (uint64_t)a2, a3);
  sub_22E597230(a1, (uint64_t)a2, a3);
  sub_22E5975E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), (uint64_t)a2, a3);
  v6 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v6 + 184) + 5) & 0x20) != 0)
    sub_22E5978BC(*(_QWORD *)(v6 + 232), (uint64_t)a2, a3);
  sub_22E597A78(a1, (uint64_t)a2, a3);
  sub_22E597C44(a1, (uint64_t)a2, a3);
  sub_22E597DAC(a1, (uint64_t)a2, a3);
  sub_22E597F14(a1, (uint64_t)a2, a3);
}

uint64_t sub_22F279A38(uint64_t a1, uint64_t a2)
{
  int v2;
  const char *v3;
  uint64_t result;
  size_t v5;

  v2 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1FF;
  switch(v2)
  {
    case 0:
      v3 = "opencl.image1d_ro_t";
      goto LABEL_60;
    case 1:
      v3 = "opencl.image1d_array_ro_t";
      goto LABEL_35;
    case 2:
      v3 = "opencl.image1d_buffer_ro_t";
      goto LABEL_30;
    case 3:
      v3 = "opencl.image2d_ro_t";
      goto LABEL_60;
    case 4:
      v3 = "opencl.image2d_array_ro_t";
      goto LABEL_35;
    case 5:
      v3 = "opencl.image2d_depth_ro_t";
      goto LABEL_35;
    case 6:
      v3 = "opencl.image2d_array_depth_ro_t";
      goto LABEL_37;
    case 7:
      v3 = "opencl.image2d_msaa_ro_t";
      goto LABEL_39;
    case 8:
      v3 = "opencl.image2d_array_msaa_ro_t";
      goto LABEL_42;
    case 9:
      v3 = "opencl.image2d_msaa_depth_ro_t";
      goto LABEL_42;
    case 10:
      v3 = "opencl.image2d_array_msaa_depth_ro_t";
      goto LABEL_44;
    case 11:
      v3 = "opencl.image3d_ro_t";
      goto LABEL_60;
    case 12:
      v3 = "opencl.image1d_wo_t";
      goto LABEL_60;
    case 13:
      v3 = "opencl.image1d_array_wo_t";
      goto LABEL_35;
    case 14:
      v3 = "opencl.image1d_buffer_wo_t";
      goto LABEL_30;
    case 15:
      v3 = "opencl.image2d_wo_t";
      goto LABEL_60;
    case 16:
      v3 = "opencl.image2d_array_wo_t";
      goto LABEL_35;
    case 17:
      v3 = "opencl.image2d_depth_wo_t";
      goto LABEL_35;
    case 18:
      v3 = "opencl.image2d_array_depth_wo_t";
      goto LABEL_37;
    case 19:
      v3 = "opencl.image2d_msaa_wo_t";
      goto LABEL_39;
    case 20:
      v3 = "opencl.image2d_array_msaa_wo_t";
      goto LABEL_42;
    case 21:
      v3 = "opencl.image2d_msaa_depth_wo_t";
      goto LABEL_42;
    case 22:
      v3 = "opencl.image2d_array_msaa_depth_wo_t";
      goto LABEL_44;
    case 23:
      v3 = "opencl.image3d_wo_t";
      goto LABEL_60;
    case 24:
      v3 = "opencl.image1d_rw_t";
      goto LABEL_60;
    case 25:
      v3 = "opencl.image1d_array_rw_t";
      goto LABEL_35;
    case 26:
      v3 = "opencl.image1d_buffer_rw_t";
LABEL_30:
      v5 = 26;
      goto LABEL_31;
    case 27:
      v3 = "opencl.image2d_rw_t";
      goto LABEL_60;
    case 28:
      v3 = "opencl.image2d_array_rw_t";
      goto LABEL_35;
    case 29:
      v3 = "opencl.image2d_depth_rw_t";
LABEL_35:
      v5 = 25;
      goto LABEL_31;
    case 30:
      v3 = "opencl.image2d_array_depth_rw_t";
LABEL_37:
      v5 = 31;
      goto LABEL_31;
    case 31:
      v3 = "opencl.image2d_msaa_rw_t";
LABEL_39:
      v5 = 24;
      goto LABEL_31;
    case 32:
      v3 = "opencl.image2d_array_msaa_rw_t";
      goto LABEL_42;
    case 33:
      v3 = "opencl.image2d_msaa_depth_rw_t";
LABEL_42:
      v5 = 30;
      goto LABEL_31;
    case 34:
      v3 = "opencl.image2d_array_msaa_depth_rw_t";
LABEL_44:
      v5 = 36;
      goto LABEL_31;
    case 35:
      v3 = "opencl.image3d_rw_t";
LABEL_60:
      v5 = 19;
      goto LABEL_31;
    case 36:
      v3 = "opencl.intel_sub_group_avc_mce_payload_t";
      goto LABEL_50;
    case 37:
      v3 = "opencl.intel_sub_group_avc_ime_payload_t";
      goto LABEL_50;
    case 38:
      v3 = "opencl.intel_sub_group_avc_ref_payload_t";
      goto LABEL_50;
    case 39:
      v3 = "opencl.intel_sub_group_avc_sic_payload_t";
LABEL_50:
      v5 = 40;
      goto LABEL_31;
    case 40:
      v3 = "opencl.intel_sub_group_avc_mce_result_t";
      goto LABEL_55;
    case 41:
      v3 = "opencl.intel_sub_group_avc_ime_result_t";
      goto LABEL_55;
    case 42:
      v3 = "opencl.intel_sub_group_avc_ref_result_t";
      goto LABEL_55;
    case 43:
      v3 = "opencl.intel_sub_group_avc_sic_result_t";
LABEL_55:
      v5 = 39;
      goto LABEL_31;
    case 44:
      v3 = "opencl.intel_sub_group_avc_ime_result_single_reference_streamout_t";
      v5 = 66;
      goto LABEL_31;
    case 45:
      v3 = "opencl.intel_sub_group_avc_ime_result_dual_reference_streamout_t";
      v5 = 64;
      goto LABEL_31;
    case 46:
      v3 = "opencl.intel_sub_group_avc_ime_single_reference_streamin_t";
      v5 = 58;
      goto LABEL_31;
    case 47:
      v3 = "opencl.intel_sub_group_avc_ime_dual_reference_streamin_t";
      v5 = 56;
LABEL_31:
      result = sub_22F279D34(a1, a2, v3, v5);
      break;
    default:
      result = ((uint64_t (*)(void))((char *)&loc_22F279A88 + 4 * byte_22F45AF40[v2 - 222]))();
      break;
  }
  return result;
}

uint64_t sub_22F279D34(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  llvm::StringMapImpl *v8;
  int Key;
  uint64_t v10;

  v8 = (llvm::StringMapImpl *)(a1 + 40);
  Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 48))
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * Key) + 8);
  sub_22F36DF7C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
  llvm::StructType::create();
  v10 = llvm::PointerType::get();
  *(_QWORD *)(*sub_22E3B4314(v8, a3, a4) + 8) = v10;
  return v10;
}

uint64_t sub_22F279E08(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t sub_22F279E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;

  result = *a5;
  if (!*a5)
  {
    llvm::StructType::create();
    sub_22F36DF7C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
    result = llvm::PointerType::get();
    *a5 = result;
  }
  return result;
}

uint64_t sub_22F279EC0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
  {
    llvm::StructType::create();
    sub_22F36DF7C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2);
    result = llvm::PointerType::get();
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_22F279F40(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v3;
  _DWORD v5[6];

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (!v3 || *(_BYTE *)(v3 + 16) != 38)
    v3 = sub_22F10CF48(v3);
  llvm::Type::getInt32Ty(*(llvm::Type **)(*(_QWORD *)(a1 + 8) + 232), a2);
  sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v5);
  return llvm::ConstantInt::get();
}

uint64_t sub_22F279FCC(uint64_t a1, llvm::LLVMContext *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (!v3 || *(_BYTE *)(v3 + 16) != 38)
    v3 = sub_22F10CF48(v3);
  llvm::Type::getInt32Ty(*(llvm::Type **)(*(_QWORD *)(a1 + 8) + 232), a2);
  sub_22EF5D130(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *(_QWORD *)(v3 + 32));
  return llvm::ConstantInt::get();
}

_QWORD *sub_22F27A044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v8 = a1 + 72;
  v10 = a2;
  sub_22F27B398(a1 + 72, &v10)[1] = a3;
  v10 = a2;
  sub_22F27B398(v8, &v10)[3] = a4;
  v10 = a2;
  sub_22F27B398(v8, &v10)[4] = a5;
  v10 = a2;
  result = sub_22F27B398(v8, &v10);
  result[2] = 0;
  return result;
}

uint64_t sub_22F27A0D8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;

  v2 = a1 + 72;
  v4 = sub_22E598034(a2);
  return sub_22F27B398(v2, (uint64_t *)&v4)[1];
}

__n128 sub_22F27A118@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 result;
  __int128 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  sub_22E50E93C(a2, (uint64_t)a3, 0, a5);
  v9 = sub_22E598034(a3);
  v10 = a1 + 72;
  v19 = v9;
  if (!sub_22F27B398(a1 + 72, (uint64_t *)&v19)[2])
  {
    v11 = sub_22E699F3C(*(_QWORD **)(a2 + 144));
    v19 = v9;
    v12 = sub_22F27B398(v10, (uint64_t *)&v19)[1];
    v18 = v9;
    v13 = sub_22F27B398(v10, (uint64_t *)&v18);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 280))(v11, a2, v12, v13[4]);
    llvm::Function::addFnAttr();
    *(_WORD *)(v14 + 18) = *(_WORD *)(v14 + 18) & 0xC00F | (16
                                                          * sub_22E46BA10((_QWORD **)(*(_QWORD *)(a2 + 144) + 280), 13));
    v19 = v9;
    sub_22F27B398(v10, (uint64_t *)&v19)[2] = v14;
  }
  v19 = v9;
  v15 = sub_22F27B398(v10, (uint64_t *)&v19);
  result = *(__n128 *)(v15 + 1);
  v17 = *(_OWORD *)(v15 + 3);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

BOOL sub_22F27A238(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 2)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v5 << 16) & 0x780000) != 0)
    v6 = ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF;
  else
    v6 = sub_22F1BFAD0(a1);
  return v6 == 3;
}

BOOL sub_22F27A2BC(uint64_t a1)
{
  int v2;
  int v3;
  int v5;
  int v6;

  v2 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a1 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a1);
  if (v3 == 4)
    return 1;
  v5 = *(unsigned __int8 *)(a1 + 30);
  if ((~(v5 << 16) & 0x780000) != 0)
    v6 = ((*(unsigned __int16 *)(a1 + 28) | (v5 << 16)) >> 19) & 0xF;
  else
    v6 = sub_22F1BFAD0(a1);
  return v6 == 5;
}

uint64_t sub_22F27A344(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  llvm::LLVMContext *v17;
  uint64_t IntToPtr;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  _BOOL4 v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  _QWORD v43[3];
  _QWORD *v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int v47;
  _QWORD *v48;
  unsigned int v49;
  _QWORD *v50;
  unsigned int v51;
  _QWORD *v52;
  unsigned int v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  __int128 v58[2];
  _DWORD v59[6];
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62[4];
  uint64_t v63[5];
  uint64_t v64[4];

  v64[3] = *MEMORY[0x24BDAC8D0];
  v4 = &v56;
  sub_22F007D7C(a3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), 0, (uint64_t)&v56);
  v5 = (llvm::APFloatBase *)sub_22F2710C8((uint64_t)v59);
  v59[5] = 0;
  v61 = 0x100000008;
  v6 = llvm::APFloatBase::IEEEhalf(v5);
  sub_22E54C320((llvm::APFloatBase *)((char *)v58 + 8), v6);
  sub_22E54C2C8(v58);
  sub_22E54C3D4((const llvm::detail::IEEEFloat *)v62, (const llvm::detail::IEEEFloat *)((char *)v58 + 8));
  v7 = sub_22E4EEC9C((uint64_t *)v58 + 1);
  sub_22E54C320((llvm::APFloatBase *)v7, v6);
  sub_22E54C37C(v58);
  sub_22E54C3D4((const llvm::detail::IEEEFloat *)v63, (const llvm::detail::IEEEFloat *)((char *)v58 + 8));
  v8 = sub_22E4EEC9C((uint64_t *)v58 + 1);
  v63[3] = 0;
  LODWORD(v43[0]) = 0;
  sub_22E54C320((llvm::APFloatBase *)v8, v6);
  sub_22E54C2C8(v58);
  sub_22E54C3D4((const llvm::detail::IEEEFloat *)v64, (const llvm::detail::IEEEFloat *)((char *)v58 + 8));
  sub_22E4EEC9C((uint64_t *)v58 + 1);
  v55 = v57;
  if (v57 < 0x41
    || (v4 = (uint64_t *)&v54,
        llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const llvm::APInt *)&v56),
        v9 = v55,
        v55 <= 0x40))
  {
    v10 = *v4 & 1;
    v54 = (_QWORD *)v10;
    v55 = 0;
LABEL_4:
    v60 = v10 == 0;
    goto LABEL_5;
  }
  *v54 &= 1uLL;
  v10 = (uint64_t)v54;
  bzero(v54 + 1, (((unint64_t)(v9 + 63) >> 3) - 8) & 0xFFFFFFF8);
  v29 = v55;
  DWORD2(v58[0]) = v55;
  *(_QWORD *)&v58[0] = v10;
  v55 = 0;
  if (DWORD2(v58[0]) <= 0x40)
    goto LABEL_4;
  v60 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v58) == v29;
  if (v10)
  {
    MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
    if (v55 >= 0x41)
    {
      if (v54)
        MEMORY[0x2348A0E84](v54, 0x1000C8000313F17);
    }
  }
LABEL_5:
  v53 = v57;
  if (v57 < 0x41)
  {
    v11 = &v56;
LABEL_7:
    v12 = (_QWORD *)(*v11 & 8);
    v52 = v12;
    v53 = 0;
    goto LABEL_8;
  }
  v11 = (uint64_t *)&v52;
  llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const llvm::APInt *)&v56);
  v21 = v53;
  if (v53 <= 0x40)
    goto LABEL_7;
  *v52 &= 8uLL;
  v12 = v52;
  bzero(v52 + 1, (((unint64_t)(v21 + 63) >> 3) - 8) & 0xFFFFFFF8);
  v22 = v53;
  DWORD2(v58[0]) = v53;
  *(_QWORD *)&v58[0] = v12;
  v53 = 0;
  if (DWORD2(v58[0]) < 0x41)
  {
LABEL_8:
    if (v12 == (_QWORD *)8)
    {
LABEL_9:
      v13 = 3;
LABEL_10:
      v59[0] = v13;
      goto LABEL_11;
    }
    goto LABEL_57;
  }
  if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v58) > 0x40)
  {
    if (!v12)
      goto LABEL_57;
    v23 = 0;
  }
  else
  {
    v23 = *v12 == 8;
  }
  MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
  if (v53 >= 0x41 && v52)
  {
    MEMORY[0x2348A0E84](v52, 0x1000C8000313F17);
    if (v23)
      goto LABEL_9;
  }
  else if (v23)
  {
    goto LABEL_9;
  }
LABEL_57:
  v51 = v57;
  if (v57 < 0x41)
  {
    v33 = &v56;
LABEL_59:
    v34 = (_QWORD *)(*v33 & 6);
    v50 = v34;
    v51 = 0;
    goto LABEL_60;
  }
  v33 = (uint64_t *)&v50;
  llvm::APInt::initSlowCase((llvm::APInt *)&v50, (const llvm::APInt *)&v56);
  v35 = v51;
  if (v51 <= 0x40)
    goto LABEL_59;
  *v50 &= 6uLL;
  v34 = v50;
  bzero(v50 + 1, (((unint64_t)(v35 + 63) >> 3) - 8) & 0xFFFFFFF8);
  v36 = v51;
  DWORD2(v58[0]) = v51;
  *(_QWORD *)&v58[0] = v34;
  v51 = 0;
  if (DWORD2(v58[0]) < 0x41)
  {
LABEL_60:
    if (v34 == (_QWORD *)6)
    {
LABEL_61:
      v13 = 2;
      goto LABEL_10;
    }
    goto LABEL_74;
  }
  if (v36 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v58) > 0x40)
  {
    if (!v34)
      goto LABEL_74;
    v37 = 0;
  }
  else
  {
    v37 = *v34 == 6;
  }
  MEMORY[0x2348A0E84](v34, 0x1000C8000313F17);
  if (v51 >= 0x41 && v50)
  {
    MEMORY[0x2348A0E84](v50, 0x1000C8000313F17);
    if (v37)
      goto LABEL_61;
  }
  else if (v37)
  {
    goto LABEL_61;
  }
LABEL_74:
  v49 = v57;
  if (v57 < 0x41)
  {
    v38 = &v56;
LABEL_76:
    v39 = (_QWORD *)(*v38 & 2);
    v48 = v39;
    v49 = 0;
    goto LABEL_77;
  }
  v38 = (uint64_t *)&v48;
  llvm::APInt::initSlowCase((llvm::APInt *)&v48, (const llvm::APInt *)&v56);
  v40 = v49;
  if (v49 <= 0x40)
    goto LABEL_76;
  *v48 &= 2uLL;
  v39 = v48;
  bzero(v48 + 1, (((unint64_t)(v40 + 63) >> 3) - 8) & 0xFFFFFFF8);
  v41 = v49;
  DWORD2(v58[0]) = v49;
  *(_QWORD *)&v58[0] = v39;
  v49 = 0;
  if (DWORD2(v58[0]) < 0x41)
  {
LABEL_77:
    if (v39 == (_QWORD *)2)
    {
LABEL_78:
      v13 = 1;
      goto LABEL_10;
    }
    goto LABEL_90;
  }
  if (v41 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v58) > 0x40)
  {
    if (!v39)
      goto LABEL_90;
    v42 = 0;
  }
  else
  {
    v42 = *v39 == 2;
  }
  MEMORY[0x2348A0E84](v39, 0x1000C8000313F17);
  if (v49 >= 0x41 && v48)
  {
    MEMORY[0x2348A0E84](v48, 0x1000C8000313F17);
    if (v42)
      goto LABEL_78;
  }
  else if (v42)
  {
    goto LABEL_78;
  }
LABEL_90:
  v13 = 0;
  v59[0] = 0;
LABEL_11:
  v59[1] = v13;
  v59[2] = v13;
  v47 = v57;
  if (v57 < 0x41)
  {
    v14 = &v56;
LABEL_13:
    v15 = *v14 & 0x10;
    v46 = (_QWORD *)v15;
    v47 = 0;
    goto LABEL_14;
  }
  v14 = (uint64_t *)&v46;
  llvm::APInt::initSlowCase((llvm::APInt *)&v46, (const llvm::APInt *)&v56);
  v24 = v47;
  if (v47 <= 0x40)
    goto LABEL_13;
  *v46 &= 0x10uLL;
  v15 = (uint64_t)v46;
  bzero(v46 + 1, (((unint64_t)(v24 + 63) >> 3) - 8) & 0xFFFFFFF8);
  v25 = v47;
  DWORD2(v58[0]) = v47;
  *(_QWORD *)&v58[0] = v15;
  v47 = 0;
  if (DWORD2(v58[0]) > 0x40)
  {
    v26 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v58);
    if (v15)
    {
      MEMORY[0x2348A0E84](v15, 0x1000C8000313F17);
      if (v47 >= 0x41)
      {
        if (v46)
          MEMORY[0x2348A0E84](v46, 0x1000C8000313F17);
      }
    }
    if (v26 != v25)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_14:
  if (v15)
  {
LABEL_15:
    v16 = 0;
LABEL_16:
    v59[3] = v16;
    v59[4] = v16;
    goto LABEL_17;
  }
LABEL_38:
  v45 = v57;
  if (v57 < 0x41)
  {
    v27 = &v56;
LABEL_40:
    v28 = *v27 & 0x20;
    v44 = (_QWORD *)v28;
    v45 = 0;
    goto LABEL_41;
  }
  v27 = (uint64_t *)&v44;
  llvm::APInt::initSlowCase((llvm::APInt *)&v44, (const llvm::APInt *)&v56);
  v30 = v45;
  if (v45 <= 0x40)
    goto LABEL_40;
  *v44 &= 0x20uLL;
  v28 = (uint64_t)v44;
  bzero(v44 + 1, (((unint64_t)(v30 + 63) >> 3) - 8) & 0xFFFFFFF8);
  v31 = v45;
  DWORD2(v58[0]) = v45;
  *(_QWORD *)&v58[0] = v28;
  v45 = 0;
  if (DWORD2(v58[0]) > 0x40)
  {
    v32 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v58);
    if (v28)
    {
      MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
      if (v45 >= 0x41)
      {
        if (v44)
          MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
      }
    }
    if (v32 != v31)
      goto LABEL_42;
    goto LABEL_17;
  }
LABEL_41:
  if (v28)
  {
LABEL_42:
    v16 = 1;
    goto LABEL_16;
  }
LABEL_17:
  llvm::air::AIRSamplerStateEncoder::encode();
  v43[0] = 0x8000000000000002;
  v43[1] = 0;
  if (sub_22E3B38EC((_DWORD *)(a1 + 96), v43))
  {
    llvm::Type::getInt64Ty(*(llvm::Type **)(*(_QWORD *)(a1 + 8) + 232), v17);
    llvm::ConstantInt::get();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, 0);
    IntToPtr = llvm::ConstantExpr::getIntToPtr();
  }
  else
  {
    sub_22F27AB88(a1, v58);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, 0);
    IntToPtr = llvm::ConstantExpr::getBitCast();
  }
  v19 = IntToPtr;
  sub_22E4EEC9C(v64);
  sub_22E4EEC9C(v63);
  sub_22E4EEC9C(v62);
  if (v57 >= 0x41 && v56)
    MEMORY[0x2348A0E84](v56, 0x1000C8000313F17);
  return v19;
}

uint64_t sub_22F27AB88(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 552;
  v4 = sub_22F270CA8(a1 + 552, (uint64_t)a2);
  if (!v4)
  {
    v4 = llvm::air::AIRSamplerState::create();
    *(_QWORD *)sub_22F270D1C(v3, a2) = v4;
  }
  return v4;
}

uint64_t sub_22F27ABF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x16_t v6;
  int8x16_t v8;
  _QWORD v9[2];

  if (sub_22E598830(a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 120)))
    return sub_22E599D14(a1, a2, a3, v6);
  v9[0] = 0x8000000000000002;
  v9[1] = 0;
  if (!sub_22E3B38EC((_DWORD *)(a1 + 96), v9))
    return sub_22E598B7C(a1, a2, a3, v8);
  sub_22E6285D0(*(_QWORD *)(a1 + 8), a2, "kernel function entry point");
  return 0;
}

void sub_22F27AC9C(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  uint64_t v6;

  llvm::Module::getOrInsertNamedMetadata();
  sub_22E59A888(a1, a3);
  llvm::NamedMDNode::addOperand();
  v6 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v6 + 184) + 5) & 0x20) != 0)
  {
    sub_22E596850(*(_QWORD *)(v6 + 232), a2, a3);
    sub_22E596AF4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), (uint64_t)a2, a3);
    sub_22E596E94(a1, (uint64_t)a2, a3);
    sub_22E5975E4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), (uint64_t)a2, a3);
    sub_22E5978BC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), (uint64_t)a2, a3);
  }
}

uint64_t sub_22F27AD9C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = (*(_DWORD *)(a2 + 16) >> 19) & 0x1FF;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return llvm::air::AIRTypeFactory::getType();
    default:
      if (v2 == 222)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
      else
        return llvm::air::AIRTypeFactory::getType();
  }
}

uint64_t sub_22F27AE74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
  {
    result = llvm::air::AIRTypeFactory::getType();
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_22F27AEA8(uint64_t a1)
{
  sub_22F27AECC(a1);
  return sub_22F27B010(a1);
}

uint64_t sub_22F27AECC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;

  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  v2 = *(_QWORD *)(a1 + 8);
  v3 = "air.compile.fast_math_disable";
  if ((*(_DWORD *)(*(_QWORD *)(v2 + 152) + 52) & 0x400) != 0 && (*(_BYTE *)(*(_QWORD *)(v2 + 184) + 32) & 2) == 0)
    v3 = "air.compile.fast_math_enable";
  strlen(v3);
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t sub_22F27B010(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[2];

  v5[0] = 0x8000000000000002;
  v5[1] = 0;
  result = sub_22E3B38EC((_DWORD *)(a1 + 96), v5);
  if ((result & 1) == 0 && *(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 584))
  {
    result = llvm::Module::getOrInsertNamedMetadata();
    v3 = *(_QWORD *)(a1 + 576);
    for (i = *(_QWORD *)(a1 + 584); v3 != i; v3 += 32)
    {
      llvm::air::AISamplerState::getImpl();
      result = llvm::NamedMDNode::addOperand();
    }
  }
  return result;
}

uint64_t sub_22F27B0C8(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  llvm::Module *Module;
  llvm::DataLayout *DataLayout;
  uint64_t v9;

  Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  v9 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  return sub_22E3C12C8((uint64_t *)a1, v9, a4);
}

uint64_t sub_22F27B164(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[3];

  v3 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v10 = sub_22F10ACF8(v4);
    v7 = sub_22F27B164(a1, v10);
    v8 = v7 & 0xFFFFFF00;
    v6 = v7 & 0x100000000;
  }
  else
  {
    v5 = sub_22F1110EC(v4, 0);
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = 0;
    if ((v5 & 1) == 0)
    {
      sub_22EF5CCD0(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), *v3, (uint64_t)v11);
      LOBYTE(v7) = v11[0];
      v8 = v11[0] & 0xFFFFFF00;
      v6 = 0x100000000;
    }
  }
  return v7 | v6 | v8;
}

uint64_t sub_22F27B218(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;

  v3 = (uint64_t *)(sub_22EF5BA38(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v3;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 39 <= 1)
  {
    v12 = sub_22F10ACF8(v4);
    v7 = sub_22F27B218(a1, v12);
    v8 = v7 & 0xFFFFFF00;
    v6 = v7 & 0x100000000;
  }
  else
  {
    v5 = sub_22F1110EC(v4, 0);
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = 0;
    if ((v5 & 1) == 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
      sub_22EF5CDF0(v9, *v3);
      v7 = v10 / (unint64_t)sub_22EF5CDF0(v9, *(_QWORD *)(*(_QWORD *)(v9 + 16408) & 0xFFFFFFFFFFFFFFF0));
      v8 = v7 & 0xFFFFFF00;
      v6 = 0x100000000;
    }
  }
  return v7 | v6 | v8;
}

uint64_t sub_22F27B2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_22F27B2F0(uint64_t a1)
{
  sub_22E59CB64(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F27B320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

_QWORD *sub_22F27B398(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2475F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F24772C(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

uint64_t sub_22F27B40C(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = *(_DWORD *)(v1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v1 + 8 * v2) = 0;
  ++*(_DWORD *)(v1 + 8);
  return result;
}

uint64_t sub_22F27B464(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t (**v11)();

  v4 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
  v5 = *(_QWORD *)(a2 + 2312);
  v6 = *(_BYTE *)(a2 + 2893);
  *(_BYTE *)(a2 + 2893) = 0;
  v7 = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = v4;
  v8 = a1[2];
  if (v8)
  {
    v9 = (_QWORD *)sub_22E4899EC(a2 + 1984, 3, 16);
    *v9 = off_24FA65F20;
    v9[1] = v8;
    ((void (*)(_QWORD, uint64_t, _QWORD))a1[1])(*a1, a2, a1[2]);
  }
  else
  {
    v11 = off_24FA65B00;
    ((void (*)(_QWORD, uint64_t, uint64_t (***)()))a1[1])(*a1, a2, &v11);
  }
  *(_BYTE *)(a2 + 2893) = v6;
  result = sub_22E48B274(a2, v4, v5, 0, 0);
  *(_QWORD *)(a2 + 2872) = v7;
  return result;
}

unint64_t sub_22F27B534(unint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  *(_QWORD *)(a1 + 152) = 0x400000000;
  *(_QWORD *)(a1 + 1248) = a1 + 1264;
  *(_QWORD *)(a1 + 1256) = 0x400000000;
  *(_QWORD *)(a1 + 2352) = a1 + 2368;
  *(_QWORD *)(a1 + 2360) = 0x400000000;
  *(_QWORD *)(a1 + 2432) = a1 + 2448;
  *(_QWORD *)(a1 + 2440) = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    if (a3 > *(unsigned int *)(a1 + 156))
      llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3 > *(unsigned int *)(a1 + 2364))
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (a3 <= *(unsigned int *)(a1 + 2444))
  {
    if (!a3)
      return a1;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v15 = 8 * a3;
  do
  {
    v17 = *a2++;
    v16 = v17;
    v19 = *a4++;
    v18 = v19;
    v21 = *a6++;
    v20 = v21;
    v22 = *a9++;
    sub_22F27B674(a1, v16, v18, v20, v22);
    v15 -= 8;
  }
  while (v15);
  return a1;
}

unint64_t sub_22F27B674(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD v9[4];

  v5 = result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 >= *(_DWORD *)(result + 12))
  {
    v9[0] = a2;
    v9[1] = a3;
    v9[2] = a4;
    v9[3] = a5;
    result = sub_22E5C425C(result, (unint64_t)v9);
    v6 = *(_QWORD *)v5 + 32 * *(unsigned int *)(v5 + 8);
    v8 = *(_OWORD *)(result + 16);
    *(_OWORD *)v6 = *(_OWORD *)result;
    *(_OWORD *)(v6 + 16) = v8;
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  else
  {
    v7 = (_QWORD *)(*(_QWORD *)result + 32 * v6);
    *v7 = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
  }
  *(_DWORD *)(v5 + 8) = v6 + 1;
  return result;
}

uint64_t sub_22F27B6EC(_QWORD *a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  unsigned __int8 *v13;
  _OWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[17];
  __int128 v21[5];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[17];

  v5 = a3;
  v6 = 32 * a3;
  sub_22E5F0080(a2, *(unsigned __int8 **)(*a1 + v6), v26);
  v7 = *(unsigned __int8 **)(*a1 + v6);
  if (*v7 == 191)
  {
    sub_22E4E3DF8((uint64_t)a2, (uint64_t)v7, 0, (uint64_t)v21);
  }
  else
  {
    v25 = 0;
    v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 2;
    v23 = 0u;
    v24 = 0u;
  }
  sub_22F27B824((uint64_t)(a1 + 18), (uint64_t)v26, v21);
  v8 = (unsigned __int8 **)(*a1 + 32 * v5);
  v9 = v8[1];
  if (*v8 == v9)
  {
    v10 = (uint64_t)(a1 + 156);
    v11 = v26;
    v12 = v21;
  }
  else
  {
    sub_22E5F0080(a2, v9, v20);
    v13 = *(unsigned __int8 **)(*a1 + 32 * v5 + 8);
    if (*v13 == 191)
    {
      sub_22E4E3DF8((uint64_t)a2, (uint64_t)v13, 0, (uint64_t)v15);
    }
    else
    {
      v19 = 0;
      v16 = 0u;
      memset(v15, 0, sizeof(v15));
      DWORD1(v16) = 2;
      v17 = 0u;
      v18 = 0u;
    }
    v10 = (uint64_t)(a1 + 156);
    v11 = v20;
    v12 = v15;
  }
  return sub_22F27B824(v10, (uint64_t)v11, v12);
}

uint64_t sub_22F27B824(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  const void *v30;
  _OWORD v31[8];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v21 = *(_OWORD *)(a2 + 112);
    v31[6] = *(_OWORD *)(a2 + 96);
    v31[7] = v21;
    v22 = *(_OWORD *)(a2 + 48);
    v31[2] = *(_OWORD *)(a2 + 32);
    v31[3] = v22;
    v23 = *(_OWORD *)(a2 + 80);
    v31[4] = *(_OWORD *)(a2 + 64);
    v31[5] = v23;
    v24 = *(_OWORD *)(a2 + 16);
    v31[0] = *(_OWORD *)a2;
    v31[1] = v24;
    v25 = a3[4];
    v38 = a3[5];
    v26 = a3[7];
    v39 = a3[6];
    v40 = v26;
    v27 = *a3;
    v34 = a3[1];
    v28 = a3[3];
    v35 = a3[2];
    v36 = v28;
    v37 = v25;
    v29 = *((_QWORD *)a3 + 16);
    v32 = *(_QWORD *)(a2 + 128);
    v41 = v29;
    v33 = v27;
    v30 = (const void *)sub_22E5C42D0(a1, (unint64_t)v31);
    memcpy((void *)(*(_QWORD *)a1 + 272 * *(unsigned int *)(a1 + 8)), v30, 0x110uLL);
  }
  else
  {
    v5 = *(_QWORD *)a1 + 272 * v4;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v5 + 64) = v8;
    *(_OWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 32) = v7;
    v9 = *(_OWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 96);
    v11 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(v5 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(v5 + 96) = v10;
    *(_OWORD *)(v5 + 112) = v11;
    *(_OWORD *)(v5 + 80) = v9;
    *(_OWORD *)(v5 + 136) = *a3;
    v12 = a3[1];
    v13 = a3[2];
    v14 = a3[3];
    *(_OWORD *)(v5 + 200) = a3[4];
    *(_OWORD *)(v5 + 184) = v14;
    *(_OWORD *)(v5 + 168) = v13;
    *(_OWORD *)(v5 + 152) = v12;
    v15 = a3[5];
    v16 = a3[6];
    v17 = a3[7];
    *(_QWORD *)(v5 + 264) = *((_QWORD *)a3 + 16);
    *(_OWORD *)(v5 + 248) = v17;
    *(_OWORD *)(v5 + 232) = v16;
    *(_OWORD *)(v5 + 216) = v15;
  }
  v18 = *(_DWORD *)(a1 + 8) + 1;
  v19 = *(_QWORD *)a1 + 272 * v18;
  *(_DWORD *)(a1 + 8) = v18;
  return v19 - 272;
}

int32x2_t sub_22F27B978(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int32x2_t result;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v14[24];
  unint64_t v15;
  __int128 v16;
  char v17;
  char v18;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32 * a3 + 16) + 16) + 48);
  if ((*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
  {
    v7 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), v4);
    if (*(_BYTE *)(v7 + 16) == 5)
      v8 = v7;
    else
      v8 = 0;
    v15 = *(_QWORD *)(v8 + 40);
    v9 = v15;
    v16 = a4;
    v18 = 0;
    sub_22F25406C(a2 + 4088, &v15, &v16, (uint64_t)v14);
    v11 = v9;
    v12 = 0;
    v15 = a4;
    *(_QWORD *)&v16 = 0;
    v17 = 0;
    v13 = sub_22F297CB8(a2, &v15);
    sub_22E61DFC4(a2, v4);
    if (v9)
      return sub_22F254324((uint64_t)&v11, a2);
  }
  return result;
}

void sub_22F27BA58(uint64_t *a1, uint64_t a2, unsigned int a3, __int128 *a4, __int128 *a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unsigned int *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  __int128 v33[3];
  __int128 v34[3];
  __int128 v35[3];
  __int128 v36[4];

  v14 = a3;
  v15 = *a1 + 32 * a3;
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 16);
  v17 = sub_22E59D5F8(*(_BYTE **)(v15 + 24));
  if (sub_22EF5C728(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), *(_QWORD *)(v16 + 48)))
  {
    if (v17)
    {
      if (*(_QWORD *)(v17 + 96))
        a6(a7, a2);
    }
    v18 = a4[1];
    v36[0] = *a4;
    v36[1] = v18;
    v36[2] = a4[2];
    v19 = a5[1];
    v35[0] = *a5;
    v35[1] = v19;
    v35[2] = a5[2];
    sub_22E59CBFC(a1, a2, a3, v36, v35, v17);
  }
  else if (v17
         && (*(_QWORD *)(v17 + 96)
          || (*(_DWORD *)(v16 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v16 + 96) & 0x600u) - 1536 > 0xFFFFFBFF
          || *(_QWORD *)(v16 + 88) <= 7uLL))
  {
    a6(a7, a2);
    v20 = *(_QWORD *)(a1[18] + 272 * v14 + 64);
    v21 = *(unsigned int **)(*a1 + 32 * v14 + 24);
    v22 = a4[1];
    v34[0] = *a4;
    v34[1] = v22;
    v34[2] = a4[2];
    v23 = a5[1];
    v33[0] = *a5;
    v33[1] = v23;
    v33[2] = a5[2];
    sub_22E59D660(a2, v17, v21, v34, v33, v20);
  }
  else if ((((uint64_t (*)(uint64_t, uint64_t))a6)(a7, a2) & 1) == 0
         && ((*(_DWORD *)(v16 + 28) & 0x7F) != 0x40 || (*(_DWORD *)(v16 + 96) & 0x600u) - 1536 <= 0xFFFFFBFF)
         && *(_QWORD *)(v16 + 88) >= 8uLL)
  {
    v24 = sub_22EFBC5B4(v16);
    if ((sub_22E4C9FC8(a2, v24) & 1) == 0)
    {
      v25 = sub_22EFBC5B4(v16);
      v26 = a4[2];
      v27 = *a4;
      v32[1] = a4[1];
      v32[2] = v26;
      v32[0] = v27;
      v28 = *(_QWORD *)(v16 + 48);
      v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v29 & 8) != 0)
      {
        v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      sub_22E4DA890(a2, v25, v32, v30 | v31 | (v29 | v28) & 7, 0);
    }
  }
}

uint64_t sub_22F27BC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64x2_t *v8;
  llvm::OpenMPIRBuilder *v9;
  int64x2_t v10;

  v8 = (int64x2_t *)(a1 + 3016);
  *(_QWORD *)a1 = &off_24FA65730;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  v9 = (llvm::OpenMPIRBuilder *)(a1 + 48);
  sub_22F283888(a1 + 48, *(uint64_t **)(a2 + 200));
  *(_DWORD *)(a1 + 2488) = 0;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_QWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_DWORD *)(a1 + 2520) = 0;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_DWORD *)(a1 + 2544) = 0;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_DWORD *)(a1 + 2568) = 0;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_DWORD *)(a1 + 2592) = 0;
  *(_DWORD *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_DWORD *)(a1 + 2640) = 0;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_DWORD *)(a1 + 2664) = 0;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_DWORD *)(a1 + 2696) = 0;
  *(_DWORD *)(a1 + 2700) = 16;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_QWORD *)(a1 + 2720) = a1 + 2736;
  *(_QWORD *)(a1 + 2728) = 0x400000000;
  *(_QWORD *)(a1 + 2768) = a1 + 2784;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_QWORD *)(a1 + 2792) = 1;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_QWORD *)(a1 + 2864) = 0;
  *(_QWORD *)(a1 + 2872) = a2;
  *(_DWORD *)(a1 + 2880) = 0;
  *(_DWORD *)(a1 + 2904) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_DWORD *)(a1 + 2928) = 0;
  *(_DWORD *)(a1 + 2932) = 64;
  *(_BYTE *)(a1 + 2944) = 1;
  *(_DWORD *)(a1 + 2968) = 0;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_QWORD *)(a1 + 2992) = 0x2000000000;
  *(_QWORD *)(a1 + 3008) = 1;
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *v8 = v10;
  v8[1] = v10;
  *(_QWORD *)(a1 + 3048) = a1 + 3064;
  *(_QWORD *)(a1 + 3056) = 0x400000000;
  *(_QWORD *)(a1 + 3224) = a1 + 3240;
  *(_QWORD *)(a1 + 3232) = 0x400000000;
  *(_QWORD *)(a1 + 3432) = a1 + 3448;
  *(_QWORD *)(a1 + 3440) = 0x400000000;
  v8[77].i8[0] = 0;
  *(_DWORD *)(a1 + 4252) = 2;
  *(_WORD *)(a1 + 4256) = 0;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_DWORD *)(a1 + 4280) = 0;
  *(_DWORD *)(a1 + 4284) = 8;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_DWORD *)(a1 + 4312) = 0;
  *(_DWORD *)(a1 + 4316) = 8;
  *(_QWORD *)(a1 + 2672) = llvm::ArrayType::get(*(llvm::ArrayType **)(a2 + 24), (llvm::Type *)8);
  llvm::OpenMPIRBuilder::initialize(v9);
  sub_22E59E6E8(a1);
  return a1;
}

void sub_22F27BE70(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t *v8;
  const void **v9;
  const void **v10;
  size_t *v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  char *v17;
  char **v18;
  char **v19;
  _QWORD v20[4];
  char *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  _QWORD v25[18];

  v25[16] = *MEMORY[0x24BDAC8D0];
  v23 = v25;
  v24 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v20, (uint64_t)&v23);
  if (a4)
  {
    v8 = (size_t *)(a2 + 24);
    v9 = (const void **)(a2 + 16);
    v10 = (const void **)(a2 + 32);
    v11 = (size_t *)(a2 + 40);
    v12 = a3 + 16 * a4;
    do
    {
      v13 = *v8;
      v14 = *v9;
      v16 = *(const void **)a3;
      v15 = *(_QWORD *)(a3 + 8);
      v17 = v21;
      if (*v8 <= v20[3] - (_QWORD)v21)
      {
        if (v13)
        {
          memcpy(v21, v14, v13);
          v17 = &v21[v13];
          v21 += v13;
        }
        v18 = (char **)v20;
        v19 = &v21;
      }
      else
      {
        v18 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v20, (const char *)v14);
        v19 = v18 + 4;
        v17 = v18[4];
      }
      if (v15 <= v18[3] - v17)
      {
        if (v15)
        {
          memcpy(v17, v16, v15);
          *v19 += v15;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v18, (const char *)v16);
      }
      a3 += 16;
      v8 = v11;
      v9 = v10;
    }
    while (a3 != v12);
  }
  std::string::__init(a1, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v20);
  if (v23 != v25)
    free(v23);
}

uint64_t sub_22F27C008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  llvm::Value *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[3];
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t v13;

  v13 = a3;
  result = sub_22F28501C(*(_QWORD *)(a1 + 2528), *(_DWORD *)(a1 + 2544), a3, v10);
  if ((result & 1) == 0)
  {
    v7 = sub_22E59ED7C();
    v11 = 0;
    v12 = v7;
    if (*(_QWORD *)(a3 + 96))
      v11 = sub_22E59ED7C();
    result = sub_22F27C11C((uint64_t)v10, a1 + 2528, &v13, &v12, &v11);
    if (a2)
    {
      result = (uint64_t)sub_22F27C1CC(a1 + 2552, (uint64_t *)(a2 + 1624));
      v8 = result;
      v9 = *(_DWORD *)(result + 16);
      if (v9 >= *(_DWORD *)(result + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(v8 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9) = a3;
      ++*(_DWORD *)(v8 + 16);
    }
  }
  return result;
}

uint64_t sub_22F27C11C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = sub_22F28501C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v14);
  v11 = v14;
  if ((result & 1) != 0)
  {
    v12 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2850B8(a2, a3, v14);
    v11 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    *(_QWORD *)(result + 16) = *a5;
    v12 = 1;
  }
  v13 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_22F27C1CC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2852BC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
  }
  return v5;
}

llvm::Value *sub_22F27C244(uint64_t a1, uint64_t a2)
{
  sub_22E59F470(a2, 40);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return sub_22E59F54C();
}

llvm::Value *sub_22F27C2C8(uint64_t a1, uint64_t a2)
{
  sub_22E59F470(a2, 80);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return sub_22E59F54C();
}

llvm::Value *sub_22F27C34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v9;
  char v10;
  char v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  llvm::Value *v31;
  uint64_t (**v33)();
  char v34;
  uint64_t v35;
  _QWORD *v36;
  llvm::Value *(*v37)(uint64_t *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD v41[2];
  _DWORD v42[24];
  __int128 v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t (***v48)();
  _BYTE v49[1856];
  _QWORD *v50;
  uint64_t v51;

  v9 = MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = v9;
  v51 = *MEMORY[0x24BDAC8D0];
  v40[0] = v9;
  v40[1] = v18;
  v40[2] = v21;
  v33 = off_24FA65BE0;
  v34 = v10 ^ 1;
  v35 = v22;
  v36 = v40;
  v38 = 0;
  v39 = 0;
  v37 = sub_22E5C44E0;
  *((_QWORD *)v12 + 2) = &v33;
  v23 = *((_DWORD *)v18 + 2);
  v24 = 74;
  v25 = v23 - 36;
  if (v25 <= 0x29 && ((1 << v25) & 0x30000000C03) != 0)
    v24 = 76;
  v26 = sub_22E59F470((uint64_t)v19, v24);
  v27 = 0;
  v28 = *v19;
  if (v28 > 0x34)
  {
    if (v28 != 53)
    {
      if (v28 != 81)
        goto LABEL_13;
      v29 = v19[32];
      goto LABEL_12;
    }
LABEL_11:
    v29 = v19[36];
LABEL_12:
    v27 = v29 != 0;
    goto LABEL_13;
  }
  if (v28 == 37 || v28 == 42)
    goto LABEL_11;
LABEL_13:
  sub_22E618EBC((uint64_t)v49, *(_QWORD *)(v20 + 8), 1);
  sub_22E5BB2A4((uint64_t)v41, v26, 2);
  v42[22] = 1;
  v43 = *v13;
  v44 = *((_QWORD *)v13 + 2);
  v45 = v15;
  v46 = v27;
  v41[0] = &off_24FA65C10;
  v47 = v17;
  v48 = &v33;
  v30 = v50;
  v50 = v41;
  v31 = sub_22E5EF124((uint64_t)v49, v26);
  if ((v11 & 1) == 0)
    *a9 = ((*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFF) - 1;
  v50 = v30;
  v41[0] = &off_24FA66C98;
  sub_22E49FAE8((uint64_t)v42);
  sub_22E619434((uint64_t)v49);
  return v31;
}

uint64_t sub_22F27C55C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t result;
  llvm::Instruction *v7;

  v5 = sub_22F27C610(a1 + 2504, (uint64_t *)(a2 + 1624));
  llvm::UndefValue::get();
  llvm::User::operator new((llvm::User *)0x40);
  if (a3)
  {
    result = llvm::BitCastInst::BitCastInst();
    v5[3] = result;
  }
  else
  {
    v7 = (llvm::Instruction *)llvm::BitCastInst::BitCastInst();
    v5[3] = v7;
    return llvm::Instruction::insertAfter(v7, *(llvm::Instruction **)(a2 + 1840));
  }
  return result;
}

_QWORD *sub_22F27C610(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F285464(a1, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_22F27C67C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  llvm::Instruction *v3;

  result = sub_22F27C610(a1 + 2504, (uint64_t *)(a2 + 1624));
  v3 = (llvm::Instruction *)result[3];
  if (v3)
  {
    result[3] = 0;
    return (_QWORD *)llvm::Instruction::eraseFromParent(v3);
  }
  return result;
}

uint64_t sub_22F27C6B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = a1 + 344;
  v4 = *a2;
  if (v4)
  {
    sub_22E3CB840(a1 + 344, v4, a2[1]);
  }
  else
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
  }
  v7 = a2[2];
  if (v7)
  {
    llvm::MetadataTracking::track();
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  result = sub_22E3CF21C(v3, 0, v5);
  if (v7)
    return llvm::MetadataTracking::untrack();
  return result;
}

int32x2_t sub_22F27C734(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v6 = 0;
  if (sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
  {
    v4 = v6;
    v5 = (_QWORD *)v6[1];
    if (v5 != v6 + 3)
      free(v5);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_22F27C7A8(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  uint64_t v5;

  v5 = 0;
  if (sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = (_QWORD *)v5;
    llvm::deallocate_buffer(*(llvm **)(v5 + 8), (void *)(168 * *(unsigned int *)(v5 + 24)));
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_22F27C820(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 2496))
  {
    llvm::PointerType::get();
    llvm::PointerType::get();
    *(_QWORD *)(a1 + 2496) = llvm::FunctionType::get();
  }
  return llvm::PointerType::get();
}

uint64_t sub_22F27C8C4(uint64_t a1, int a2, int a3, int a4)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  size_t v10;
  uint64_t v11;

  v5 = "__kmpc_for_static_init_4u";
  if (a3)
    v5 = "__kmpc_for_static_init_4";
  v6 = "__kmpc_for_static_init_8u";
  if (a3)
    v6 = "__kmpc_for_static_init_8";
  v7 = "__kmpc_distribute_static_init_4u";
  if (a2 != 32)
    v5 = v6;
  v8 = "__kmpc_distribute_static_init_8u";
  if (a3)
  {
    v7 = "__kmpc_distribute_static_init_4";
    v8 = "__kmpc_distribute_static_init_8";
  }
  if (a2 == 32)
    v8 = v7;
  if (a4)
    v9 = v8;
  else
    v9 = v5;
  v10 = strlen(v9);
  llvm::PointerType::get();
  llvm::PointerType::get();
  v11 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v11, v9, v10, 0, 0, 0);
}

uint64_t sub_22F27CA2C(uint64_t a1, int a2, int a3)
{
  const char *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;

  v4 = "__kmpc_dispatch_init_4";
  if (!a3)
    v4 = "__kmpc_dispatch_init_4u";
  v5 = "__kmpc_dispatch_init_8";
  if (!a3)
    v5 = "__kmpc_dispatch_init_8u";
  if (a2 == 32)
    v6 = v4;
  else
    v6 = v5;
  v7 = strlen(v6);
  v8 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v8, v6, v7, 0, 0, 0);
}

uint64_t sub_22F27CB24(uint64_t a1, int a2, int a3)
{
  const char *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;

  v4 = "__kmpc_dispatch_fini_4";
  if (!a3)
    v4 = "__kmpc_dispatch_fini_4u";
  v5 = "__kmpc_dispatch_fini_8";
  if (!a3)
    v5 = "__kmpc_dispatch_fini_8u";
  if (a2 == 32)
    v6 = v4;
  else
    v6 = v5;
  v7 = strlen(v6);
  v8 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v8, v6, v7, 0, 0, 0);
}

uint64_t sub_22F27CC00(uint64_t a1, int a2, int a3)
{
  const char *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;

  v4 = "__kmpc_dispatch_next_4";
  if (!a3)
    v4 = "__kmpc_dispatch_next_4u";
  v5 = "__kmpc_dispatch_next_8";
  if (!a3)
    v5 = "__kmpc_dispatch_next_8u";
  if (a2 == 32)
    v6 = v4;
  else
    v6 = v5;
  v7 = strlen(v6);
  llvm::PointerType::get();
  llvm::PointerType::get();
  v8 = llvm::FunctionType::get();
  return sub_22E633A04(*(_QWORD *)(a1 + 8), v8, v6, v7, 0, 0, 0);
}

unint64_t sub_22F27CD10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;
  int v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t NamedValue;
  unint64_t v17;
  llvm::Constant *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::GlobalValue *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  _QWORD v28[4];
  char *v29;
  void *v30;
  __int128 v31;
  _QWORD v32[9];

  v32[8] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 76) & 2) != 0)
    return 0;
  v4 = sub_22EF95D10((uint64_t)a2);
  if (!v5)
    return 0;
  v8 = *(_DWORD *)(v4 + 36);
  if (!v8)
  {
    if (*(_BYTE *)(a1 + 4248))
      goto LABEL_7;
    return 0;
  }
  if (v8 != 1)
    return 0;
LABEL_7:
  v30 = v32;
  v31 = xmmword_22F44E300;
  sub_22F242C48((uint64_t)v28, (uint64_t)&v30);
  v10 = sub_22E624994(*(_QWORD *)(a1 + 8), (uint64_t)a2, 0);
  v11 = v9;
  if (v9 <= v28[3] - (_QWORD)v29)
  {
    if (v9)
    {
      memcpy(v29, v10, v9);
      v29 += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v28, (const char *)v10);
  }
  if (sub_22EFB948C((uint64_t)a2) <= 2)
  {
    v26 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v13 = (*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
    v14 = *(_QWORD *)(v13 + 56);
    if ((v14 & 4) != 0 && (v24 = v14 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v24 + 16)))
      v15 = **(int ***)(v24 + 24);
    else
      v15 = (int *)(v13 + 64);
    sub_22E5A029C(*(_QWORD *)(v12 + 1992), *v15, &v27, &v26, &v25);
    llvm::raw_ostream::operator<<();
  }
  sub_22E47DAC0((llvm::raw_ostream *)v28, "_decl_tgt_ref_ptr");
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v28);
  NamedValue = llvm::Module::getNamedValue();
  v17 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), a2[6], 0);
  v18 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, v17, 0);
  if (!NamedValue)
  {
    LOWORD(v29) = 261;
    v28[0] = v30;
    v28[1] = v31;
    v21 = (llvm::GlobalValue *)sub_22F27D020(a1, v18, (llvm::Twine *)v28);
    NamedValue = (uint64_t)v21;
    v22 = *((_DWORD *)v21 + 8);
    *((_DWORD *)v21 + 8) = v22 & 0xFFFFFFF0 | 4;
    if ((v22 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v21) & 1) == 0)
      *(_DWORD *)(NamedValue + 32) |= 0x4000u;
    v23 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 152) + 76) & 8) == 0)
    {
      sub_22E6280CC(v23, (uint64_t)a2, 0, 0);
      llvm::GlobalVariable::setInitializer();
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 464))(a1, a2, NamedValue);
  }
  v19 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), (unint64_t)a2, 0);
  v20 = NamedValue & 0xFFFFFFFFFFFFFFF8 | ((__clz(v19) ^ 0x3F) >> 3);
  if (v19)
    v6 = v20;
  else
    v6 = NamedValue;
  if (v30 != v32)
    free(v30);
  return v6;
}

uint64_t sub_22F27D020(uint64_t a1, llvm::Constant *a2, llvm::Twine *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v9;
  _BYTE v11[64];
  uint64_t v12;
  void *v13;
  __int128 v14;
  _QWORD v15[33];

  v15[32] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = xmmword_22F44E320;
  sub_22F242C48((uint64_t)v11, (uint64_t)&v13);
  llvm::Twine::print(a3, (llvm::raw_ostream *)v11);
  v6 = sub_22F27D96C((llvm::StringMapImpl *)(a1 + 2680), *(const void **)v12, *(_QWORD *)(v12 + 8));
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 8);
  if (!v8)
  {
    v8 = llvm::User::operator new((llvm::User *)0x58);
    llvm::Constant::getNullValue(a2, v9);
    llvm::GlobalVariable::GlobalVariable();
    *(_QWORD *)(v7 + 8) = v8;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v11);
  if (v13 != v15)
    free(v13);
  return v8;
}

__n128 sub_22F27D15C@<Q0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t RuntimeFunction;
  llvm::Value *v17;
  llvm::Value *v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[32];
  __int16 v24;
  _QWORD v25[6];

  v25[5] = *MEMORY[0x24BDAC8D0];
  v11 = a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 152) + 76) & 4) != 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 15088) + 81))
  {
    v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a6 = *(_OWORD *)a4;
    *(_OWORD *)(a6 + 16) = v22;
    result = *(__n128 *)(a4 + 32);
    *(__n128 *)(a6 + 32) = result;
  }
  else
  {
    v12 = *(_QWORD *)(a4 + 8);
    v25[0] = sub_22E59F7E4(a1, (uint64_t)a2, a5);
    v25[1] = sub_22E59F964((uint64_t)a1, (uint64_t)a2, a5);
    if ((*(_BYTE *)(a4 + 24) & 3) != 0)
      v14 = sub_22F28ABCC((_OWORD *)a4, a2);
    else
      v14 = *(_QWORD *)a4;
    v15 = *(_QWORD *)(a1[1] + 96);
    v24 = 257;
    v25[2] = sub_22E3CA9BC(a2 + 34, v14, v15, (uint64_t)v23);
    sub_22F29B798(a1[1], v12);
    v25[3] = llvm::ConstantInt::get();
    v25[4] = sub_22E5A0488((uint64_t)a1, a3);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v24 = 257;
    v18 = sub_22E479C7C((uint64_t)a2, RuntimeFunction, v17, (uint64_t)v25, 5, (uint64_t)v23);
    v20 = a2[1];
    v21 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a6 = v18;
    *(_QWORD *)(a6 + 8) = v20;
    *(_QWORD *)(a6 + 16) = v21;
    *(_DWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 40) = 0;
  }
  return result;
}

llvm::Value *sub_22F27D30C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t RuntimeFunction;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  _BYTE v20[32];
  __int16 v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v22 = sub_22E59F7E4(a1, (uint64_t)a2, a7);
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v24) = 257;
  sub_22E479C7C((uint64_t)a2, RuntimeFunction, v14, (uint64_t)&v22, 1, (uint64_t)v23);
  v23[0] = v22;
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v15 = sub_22F28ABCC((_OWORD *)a3, a2);
  else
    v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a1[1] + 96);
  v21 = 257;
  v23[1] = sub_22E3CA9BC(a2 + 34, v15, v16, (uint64_t)v20);
  v23[2] = a4;
  v23[3] = a5;
  v24 = a6;
  v17 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v21 = 257;
  return sub_22E479C7C((uint64_t)a2, v17, v18, (uint64_t)v23, 5, (uint64_t)v20);
}

uint64_t sub_22F27D468(uint64_t a1, int a2, int a3, const void *a4, size_t a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  _DWORD *v25;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;

  v33 = a2;
  v31 = a6;
  v32 = a3;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 76) & 8) != 0)
  {
    v21 = a1 + 16;
    result = sub_22E5A3158(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), a2, a3, (uint64_t)a4, a5, a6, 0);
    if ((_DWORD)result)
    {
      v22 = sub_22E5C4C00(v21, &v33);
      v23 = sub_22F285604(v22 + 8, &v32);
      v24 = sub_22F285898((llvm::StringMapImpl *)(v23 + 2), a4, a5);
      v25 = sub_22F28598C(*v24 + 8, &v31);
      result = sub_22E5BBDC4((llvm::ValueHandleBase *)(v25 + 2), a7);
      *((_QWORD *)v25 + 6) = a8;
      v25[8] = a9;
    }
  }
  else if (a9
         || (result = sub_22E5A3158(*(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), a2, a3, (uint64_t)a4, a5, a6, 1),
             (result & 1) == 0))
  {
    v15 = *(_DWORD *)(a1 + 8);
    v26[1] = 0;
    v27 = 0;
    v26[0] = 6;
    v28 = __PAIR64__(v15, a9);
    v29 = 0;
    v30 = a8;
    sub_22E5BBDC4((llvm::ValueHandleBase *)v26, a7);
    v16 = sub_22E5C4C00(a1 + 16, &v33);
    v17 = sub_22F285604(v16 + 8, &v32);
    v18 = sub_22F285898((llvm::StringMapImpl *)(v17 + 2), a4, a5);
    v19 = sub_22F28598C(*v18 + 8, &v31);
    result = (uint64_t)sub_22E5BBD40((llvm::ValueHandleBase *)(v19 + 2), v26);
    v20 = v27;
    *((_QWORD *)v19 + 4) = v28;
    v19[10] = v29;
    *((_QWORD *)v19 + 6) = v30;
    ++*(_DWORD *)(a1 + 8);
    if (v20 != -8192 && v20 != -4096)
    {
      if (v20)
        return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    }
  }
  return result;
}

uint64_t sub_22F27D618(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15[2];
  uint64_t v16[6];
  __int16 v17;
  char v18;
  _BYTE v19[104];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_22F0D4E74((uint64_t)a3);
  sub_22E4889F4((uint64_t)v19, (uint64_t)a2, v9);
  v18 = 0;
  if (sub_22E61F3B0((uint64_t)a2, (uint64_t)a3, &v18, 0))
  {
    if (v18)
      v10 = a4;
    else
      v10 = a5;
    sub_22F27B464(v10, (uint64_t)a2);
  }
  else
  {
    v11 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v12 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    v16[2] = (uint64_t)"omp_if.end";
    v17 = 259;
    v13 = (_QWORD *)operator new();
    llvm::BasicBlock::BasicBlock();
    sub_22E61F8F8(a2, a3, (uint64_t)v11, (uint64_t)v12, 0, 0);
    sub_22E5ED9B4(a2, v11, 0);
    sub_22F27B464(a4, (uint64_t)a2);
    sub_22E5EDA70((uint64_t)a2);
    v16[0] = 0;
    v16[1] = (uint64_t)a2;
    sub_22E48EE24(v16, 0, 1);
    sub_22E48F084(v16);
    sub_22E5ED9B4(a2, v12, 0);
    sub_22F27B464(a5, (uint64_t)a2);
    v15[0] = 0;
    v15[1] = (uint64_t)a2;
    sub_22E48EE24(v15, 0, 1);
    sub_22E48F084(v15);
    sub_22E5EDA70((uint64_t)a2);
    sub_22E5ED9B4(a2, v13, 1);
  }
  return sub_22E488B4C((uint64_t)v19);
}

_QWORD *sub_22F27D880(_QWORD *result, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[5];
  int v18;
  _QWORD *v19;
  _QWORD v20[6];

  if (a2[40])
  {
    v13 = result;
    v14 = sub_22E59F7E4(result, (uint64_t)a2, a3);
    v20[0] = *(_QWORD *)(v13[1] + 200);
    v20[1] = a4;
    v20[2] = a5;
    v20[3] = a6;
    v20[4] = v14;
    v20[5] = v13;
    v17[0] = v20[0];
    v17[1] = a4;
    v17[2] = a5;
    v17[3] = a6;
    v17[4] = v14;
    v18 = a3;
    v19 = v13;
    v16[0] = v20;
    v16[1] = sub_22E5C47BC;
    v16[2] = 0;
    if (a7)
    {
      v15[0] = v17;
      v15[1] = sub_22E5C4900;
      v15[2] = 0;
      return (_QWORD *)sub_22F27D618(v14, a2, a7, v16, v15);
    }
    else
    {
      return (_QWORD *)sub_22F27B464(v16, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t *sub_22F27D96C(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = sub_22E3CD3D4((uint64_t)a1 + 24, a3 + 17, 3);
  v11 = (_QWORD *)v10;
  v12 = v10 + 16;
  if (a3)
    memcpy((void *)(v10 + 16), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *v11 = a3;
  v11[1] = 0;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

void sub_22F27DA5C(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned __int8 *a7)
{
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t RuntimeFunction;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(int, int);
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    *(_QWORD *)&v40 = sub_22E59F7E4(a1, (uint64_t)a2, a6);
    *((_QWORD *)&v40 + 1) = sub_22E59F964((uint64_t)a1, (uint64_t)a2, a6);
    v41 = sub_22E5A1FF4((uint64_t)a1, a3, a4);
    v36 = &v38;
    v38 = v40;
    v39 = v41;
    v37 = 0x400000003;
    if (a7)
    {
      v25 = (uint64_t (**)(int, int))a2;
      v26 = a2 + 34;
      LOBYTE(v27) = 0;
      v28 = *(void **)(a2[18] + 232);
      v14 = sub_22E50E974((uint64_t *)&v25, a7);
      v15 = *(_QWORD *)(a1[1] + 24);
      LOWORD(v29) = 257;
      v16 = sub_22E3BF45C(a2 + 34, (uint64_t)v14, v15, 0, (uint64_t)&v25);
      v17 = v37;
      if (v37 >= HIDWORD(v37))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v37;
      }
      *((_QWORD *)v36 + v17) = v16;
      LODWORD(v37) = v37 + 1;
    }
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v20 = v19;
    v21 = v36;
    v22 = v37;
    v23 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v25 = off_24FA65C78;
    v26 = (_QWORD *)RuntimeFunction;
    v27 = v20;
    v28 = v21;
    v29 = v22;
    v30 = v23;
    v31 = v24;
    v32 = &v40;
    v33 = 3;
    v34 = 0;
    v35 = 0;
    *(_QWORD *)(a5 + 16) = &v25;
    (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, _QWORD))(*a1 + 360))(a1, a2, 9, a5, 0);
    if (v36 != &v38)
      free(v36);
  }
}

_QWORD *sub_22F27DC7C(_QWORD *result, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[9];
  char v11;
  _QWORD *v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    v6 = (uint64_t)result;
    v13[0] = sub_22E59F7E4(result, (uint64_t)a2, a4);
    v13[1] = sub_22E59F964(v6, (uint64_t)a2, a4);
    v10[0] = off_24FA65C78;
    v10[1] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10[2] = v8;
    v10[3] = v13;
    v10[4] = 2;
    v10[5] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10[6] = v9;
    v10[7] = v13;
    v10[8] = 2;
    v11 = 1;
    v12 = 0;
    *(_QWORD *)(a3 + 16) = v10;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 360))(v6, a2, 35, a3, 0);
    sub_22E5EDA70((uint64_t)a2);
    return (_QWORD *)sub_22E5ED9B4(a2, v12, 1);
  }
  return result;
}

uint64_t sub_22F27DDBC(uint64_t result, uint64_t (**a2)(int, int), uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t RuntimeFunction;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(int, int);
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD v28[2];
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    v8 = (_QWORD *)result;
    if (a5)
    {
      v9 = a2[3] != 0;
      v17 = a2;
      v18 = a2 + 34;
      LOBYTE(v19) = v9;
      v20 = (_QWORD *)*((_QWORD *)a2[18] + 29);
      v10 = (uint64_t)sub_22E50E974((uint64_t *)&v17, a5);
    }
    else
    {
      v10 = llvm::ConstantInt::get();
    }
    v11 = v10;
    v29[0] = sub_22E59F7E4(v8, (uint64_t)a2, a4);
    v29[1] = sub_22E59F964((uint64_t)v8, (uint64_t)a2, a4);
    v29[2] = v11;
    v28[0] = sub_22E59F7E4(v8, (uint64_t)a2, a4);
    v28[1] = sub_22E59F964((uint64_t)v8, (uint64_t)a2, a4);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v14 = v13;
    v15 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v17 = off_24FA65C78;
    v18 = (_QWORD *)RuntimeFunction;
    v19 = v14;
    v20 = v29;
    v21 = 3;
    v22 = v15;
    v23 = v16;
    v24 = v28;
    v25 = 2;
    v26 = 1;
    v27 = 0;
    *(_QWORD *)(a3 + 16) = &v17;
    (*(void (**)(_QWORD *, uint64_t (**)(int, int), uint64_t, uint64_t, _QWORD))(*v8 + 360))(v8, a2, 95, a3, 0);
    sub_22E5EDA70((uint64_t)a2);
    return sub_22E5ED9B4(a2, v27, 1);
  }
  return result;
}

uint64_t sub_22F27DF8C(uint64_t result, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t RuntimeFunction;
  llvm::Value *v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    v4 = result;
    if ((*(_BYTE *)(*(_QWORD *)(a2[18] + 152) + 76) & 0x20) != 0)
    {
      v8 = a2[41];
      v9[0] = a2[40];
      v9[1] = v8;
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 34));
      llvm::OpenMPIRBuilder::createTaskyield();
      if (v9[2])
        llvm::MetadataTracking::untrack();
    }
    else
    {
      v11[0] = sub_22E59F7E4((_QWORD *)result, (uint64_t)a2, a3);
      v11[1] = sub_22E59F964(v4, (uint64_t)a2, a3);
      v11[2] = llvm::ConstantInt::get();
      RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      v10 = 257;
      sub_22E479C7C((uint64_t)a2, RuntimeFunction, v7, (uint64_t)v11, 3, (uint64_t)v9);
    }
    result = a2[232];
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 2)
        return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 80))(result, a2);
    }
  }
  return result;
}

_QWORD *sub_22F27E0EC(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[9];
  char v11;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v6 = (uint64_t)result;
    v13[0] = sub_22E59F7E4(result, a2, a4);
    v13[1] = sub_22E59F964(v6, a2, a4);
    v10[0] = off_24FA65C78;
    v10[1] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10[2] = v8;
    v10[3] = v13;
    v10[4] = 2;
    v10[5] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10[6] = v9;
    v10[7] = v13;
    v10[8] = 2;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)(a3 + 16) = v10;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 360))(v6, a2, 75, a3, 0);
  }
  return result;
}

_QWORD *sub_22F27E20C(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[9];
  char v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v7 = (uint64_t)result;
    if (a5)
    {
      v14[0] = sub_22E59F7E4(result, a2, a4);
      v14[1] = sub_22E59F964(v7, a2, a4);
      v11[0] = off_24FA65C78;
      v11[1] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      v11[2] = v9;
      v11[3] = v14;
      v11[4] = 2;
      v11[5] = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
      v11[6] = v10;
      v11[7] = v14;
      v11[8] = 2;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(a3 + 16) = v11;
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 360))(v7, a2, 39, a3, 0);
    }
    else
    {
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*result + 360))(result, a2, 39, a3, 0);
    }
  }
  return result;
}

uint64_t sub_22F27E384(int a1)
{
  unsigned int v1;

  if (a1 == 53)
    v1 = 192;
  else
    v1 = 64;
  if (a1 == 55)
    v1 = 320;
  if (a1 == 3)
    return 32;
  else
    return v1;
}

void sub_22F27E3B0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  unsigned int *v5;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *i;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *j;
  uint64_t v16;
  unsigned int v17;

  v5 = *(unsigned int **)(a3 + 24);
  if (v5)
  {
    v9 = *v5;
    v7 = v5 + 4;
    v8 = v9;
    if (v9)
    {
      v10 = 8 * v8;
      for (i = v7; *(_DWORD *)(*(_QWORD *)i + 8) != 60; i += 2)
      {
        v10 -= 8;
        if (!v10)
          return;
      }
    }
    else
    {
      i = v7;
    }
    v12 = &v7[2 * v8];
    if (i != v12)
    {
      if (*(_QWORD *)(*(_QWORD *)i + 16))
      {
LABEL_10:
        *a4 = 0;
        v17 = 32;
        v16 = 1;
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
        v14 = sub_22EF60A6C(v13, 32, 0);
        *a5 = sub_22EFF8FB0(v13, (uint64_t)&v16, v14, 0);
        if (v17 >= 0x41)
        {
          if (v16)
            MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
        }
      }
      else
      {
        for (j = i + 2; j != v12; j += 2)
        {
          if (*(_DWORD *)(*(_QWORD *)j + 8) == 60 && *(_QWORD *)(*(_QWORD *)j + 16))
            goto LABEL_10;
        }
      }
    }
  }
}

uint64_t sub_22F27E4C0(uint64_t a1, int a2, int a3)
{
  if ((a2 - 1) < 4)
    return 0;
  if (a2 == 5)
    return 1;
  return a3 ^ 1u;
}

uint64_t sub_22F27E4EC(uint64_t a1, uint64_t a2, int a3)
{
  return a3 ^ 1u;
}

uint64_t sub_22F27E4F4(uint64_t a1, int a2, unsigned int a3)
{
  if (a2)
    return 0;
  else
    return a3;
}

uint64_t sub_22F27E500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_22F27E508(uint64_t a1, char a2)
{
  return (0x1Eu >> a2) & 1;
}

void sub_22F27E518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(a2 + 320))
    __asm { BR              X10 }
}

void sub_22F27E728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X11 }
}

_QWORD *sub_22F27E77C@<X0>(unsigned int a1@<W3>, int a2@<W8>)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Value *v15;
  uint64_t v17[14];

  v7 = a2 == 0;
  if (a2)
    v8 = 65;
  else
    v8 = 33;
  if (v7)
    v9 = 34;
  else
    v9 = 66;
  if (*(_QWORD *)(v2 + 200))
    v10 = v8;
  else
    v10 = v9;
  sub_22F4219DC(a1);
  v11 = sub_22E59F7E4(v5, (uint64_t)v3, v6);
  v12 = sub_22E59F964((uint64_t)v5, (uint64_t)v3, v6);
  v13 = sub_22F27C8C4((uint64_t)v5, *(_DWORD *)v2, *(unsigned __int8 *)(v2 + 4), 0);
  v15 = v14;
  v17[0] = 0;
  v17[1] = (uint64_t)v3;
  sub_22E48EE24(v17, v6, 0);
  sub_22E5A2F8C(v3, v11, v12, v13, v15, v10, *(_DWORD *)(v4 + 4), *(_DWORD *)(v4 + 8), (unsigned int *)v2);
  return sub_22E48F084(v17);
}

llvm::Value *sub_22F27E8B8(_QWORD *a1, llvm::Value *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  llvm::Value *v16;
  int v18;

  v8 = *(_QWORD *)(a5 + 200);
  v10 = sub_22E59F7E4(a1, (uint64_t)a2, a3);
  v11 = sub_22E59F964((uint64_t)a1, (uint64_t)a2, a3);
  v12 = a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 152) + 76) & 8) != 0)
  {
    v18 = *(_DWORD *)(*(_QWORD *)(v12 + 216) + 56);
    v13 = v18 == 30 || (v18 & 0xFFFFFFFE) == 44;
  }
  else
  {
    v13 = 0;
  }
  if (v8)
    v14 = 91;
  else
    v14 = 92;
  v15 = sub_22F27C8C4((uint64_t)a1, *(_DWORD *)a5, *(unsigned __int8 *)(a5 + 4), v13);
  return sub_22E5A2F8C(a2, v10, v11, v15, v16, v14, 5, 5, (unsigned int *)a5);
}

_QWORD *sub_22F27E9A0(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t RuntimeFunction;
  llvm::Value *v9;
  _WORD v10[20];
  uint64_t v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v7 = result;
    if ((sub_22F421B08(a4) & 1) == 0)
      sub_22F4219DC(a4);
    v12[0] = sub_22E59F7E4(v7, a2, a3);
    v12[1] = sub_22E59F964((uint64_t)v7, a2, a3);
    v11[0] = 0;
    v11[1] = a2;
    sub_22E48EE24(v11, a3, 0);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10[16] = 257;
    sub_22E479C7C(a2, RuntimeFunction, v9, (uint64_t)v12, 2, (uint64_t)v10);
    return sub_22E48F084(v11);
  }
  return result;
}

llvm::Value *sub_22F27EB14(llvm::Value *result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v10;
  llvm::Value *v11;
  _WORD v12[20];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v8 = (uint64_t)result;
    v13[0] = sub_22E59F7E4(result, a2, a3);
    v13[1] = sub_22E59F964(v8, a2, a3);
    v10 = sub_22F27CB24(v8, a4, a5);
    v12[16] = 257;
    return sub_22E479C7C(a2, v10, v11, (uint64_t)v13, 2, (uint64_t)v12);
  }
  return result;
}

llvm::Value *sub_22F27EBF0(_QWORD *a1, _QWORD *a2, unsigned int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  unint64_t v24;
  _WORD v26[20];
  _QWORD v27[7];

  v27[6] = *MEMORY[0x24BDAC8D0];
  v27[0] = sub_22E59F7E4(a1, (uint64_t)a2, a3);
  v27[1] = sub_22E59F964((uint64_t)a1, (uint64_t)a2, a3);
  if ((*(_BYTE *)(a6 + 24) & 3) != 0)
    v17 = sub_22F28ABCC((_OWORD *)a6, a2);
  else
    v17 = *(_QWORD *)a6;
  v27[2] = v17;
  if ((*(_BYTE *)(a7 + 24) & 3) != 0)
    v18 = sub_22F28ABCC((_OWORD *)a7, a2);
  else
    v18 = *(_QWORD *)a7;
  v27[3] = v18;
  if ((*(_BYTE *)(a8 + 24) & 3) != 0)
    v19 = sub_22F28ABCC((_OWORD *)a8, a2);
  else
    v19 = *(_QWORD *)a8;
  v27[4] = v19;
  if ((*(_BYTE *)(a9 + 24) & 3) != 0)
    v20 = sub_22F28ABCC((_OWORD *)a9, a2);
  else
    v20 = *(_QWORD *)a9;
  v27[5] = v20;
  v21 = sub_22F27CC00((uint64_t)a1, a4, a5);
  v26[16] = 257;
  v23 = sub_22E479C7C((uint64_t)a2, v21, v22, (uint64_t)v27, 6, (uint64_t)v26);
  v24 = sub_22EF60A6C(*(_QWORD *)(a2[18] + 144), 32, 1);
  return sub_22E50EA40((uint64_t)a2, v23, v24, *(_QWORD *)(*(_QWORD *)(a2[18] + 144) + 16400), a3);
}

llvm::Value *sub_22F27EDA0(llvm::Value *result, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t RuntimeFunction;
  llvm::Value *v10;
  _BYTE v11[32];
  __int16 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    v6 = (uint64_t)result;
    v13[0] = sub_22E59F7E4(result, (uint64_t)a2, a4);
    v13[1] = sub_22E59F964(v6, (uint64_t)a2, a4);
    v8 = a2[3];
    v12 = 257;
    v13[2] = sub_22E3BF45C(a2 + 34, a3, v8, 1, (uint64_t)v11);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v12 = 257;
    return sub_22E479C7C((uint64_t)a2, RuntimeFunction, v10, (uint64_t)v13, 3, (uint64_t)v11);
  }
  return result;
}

llvm::Value *sub_22F27EE90(llvm::Value *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t RuntimeFunction;
  llvm::Value *v8;
  _BYTE v9[32];
  __int16 v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v5 = (uint64_t)result;
    v11[0] = sub_22E59F7E4(result, a2, a4);
    v11[1] = sub_22E59F964(v5, a2, a4);
    v11[2] = llvm::ConstantInt::get();
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10 = 257;
    return sub_22E479C7C(a2, RuntimeFunction, v8, (uint64_t)v11, 3, (uint64_t)v9);
  }
  return result;
}

llvm::Value *sub_22F27EF78(llvm::Value *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  llvm::Value *v6;
  uint64_t RuntimeFunction;
  llvm::Value *v9;
  llvm::Value *v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v6 = result;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 76) & 0x20) != 0)
  {
    v11 = *(_OWORD *)(a2 + 320);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 272));
    result = (llvm::Value *)llvm::OpenMPIRBuilder::createFlush();
    if (v12)
      return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  else if (*(_QWORD *)(a2 + 320))
  {
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v10 = v9;
    v14 = sub_22E59F7E4(v6, a2, a5);
    v13 = 257;
    return sub_22E479C7C(a2, RuntimeFunction, v10, (uint64_t)&v14, 1, (uint64_t)&v11);
  }
  return result;
}

llvm::ValueHandleBase *sub_22F27F064(uint64_t a1, int a2, int a3, const void *a4, size_t a5, int a6, int a7)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t *v12;
  _DWORD *v13;
  llvm::ValueHandleBase *result;
  _QWORD v15[3];
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;

  v20 = a3;
  v21 = a2;
  v19 = a6;
  v15[1] = 0;
  v15[2] = 0;
  v15[0] = 6;
  LODWORD(v16) = 0;
  HIDWORD(v16) = a7;
  v17 = 0;
  v18 = 0;
  v10 = sub_22E5C4C00(a1 + 16, &v21);
  v11 = sub_22F285604(v10 + 8, &v20);
  v12 = sub_22F285898((llvm::StringMapImpl *)(v11 + 2), a4, a5);
  v13 = sub_22F28598C(*v12 + 8, &v19);
  result = sub_22E5BBD40((llvm::ValueHandleBase *)(v13 + 2), v15);
  *((_QWORD *)v13 + 4) = v16;
  v13[10] = v17;
  *((_QWORD *)v13 + 6) = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F27F120(llvm::StringMapImpl *a1, const void *a2, size_t a3, int *a4, int *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v11 = *(_QWORD *)a1;
  v12 = result;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v13 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v13)
  {
    return result;
  }
  v14 = MEMORY[0x23489D23C](a3 + 65, 8);
  v15 = v14;
  v16 = v14 + 64;
  if (a3)
    memcpy((void *)(v14 + 64), a2, a3);
  *(_BYTE *)(v16 + a3) = 0;
  v17 = *a4;
  v18 = *a5;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = 6;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = v18;
  *(_DWORD *)(v15 + 36) = v17;
  *(_DWORD *)(v15 + 40) = 1;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v11 + 8 * v12) = v15;
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

uint64_t sub_22F27F23C(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  llvm::StringMapImpl *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v19 = a7;
  v20 = a6;
  v13 = (llvm::StringMapImpl *)(a1 + 40);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 72);
  result = llvm::StringMapImpl::FindKey();
  if ((v14 & 0x800000000) != 0)
  {
    if ((_DWORD)result != -1 && (int)result != (unint64_t)*(unsigned int *)(a1 + 48))
    {
      v16 = sub_22F285CA4(v13, a2, a3);
      v17 = *v16;
      if (!*(_QWORD *)(*v16 + 24)
        || (result = llvm::StringMapImpl::FindKey(), (_DWORD)result == -1)
        || (int)result == (unint64_t)*(unsigned int *)(a1 + 48))
      {
        *(_QWORD *)(v17 + 48) = a5;
        *(_DWORD *)(v17 + 56) = a7;
        return sub_22E5BBDC4((llvm::ValueHandleBase *)(v17 + 8), a4);
      }
      else if (!*(_QWORD *)(v17 + 48))
      {
        *(_QWORD *)(v17 + 48) = a5;
        *(_DWORD *)(v17 + 56) = a7;
      }
    }
  }
  else if ((_DWORD)result == -1 || (int)result == (unint64_t)*(unsigned int *)(a1 + 48))
  {
    result = sub_22F27F3BC(v13, a2, a3, (int *)(a1 + 8), &v21, &v22, &v20, &v19);
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    result = (uint64_t)sub_22F285CA4(v13, a2, a3);
    v18 = *(_QWORD *)result;
    if (!*(_QWORD *)(*(_QWORD *)result + 48))
    {
      *(_QWORD *)(v18 + 48) = a5;
      *(_DWORD *)(v18 + 56) = a7;
    }
  }
  return result;
}

uint64_t sub_22F27F3BC(llvm::StringMapImpl *a1, const void *a2, size_t a3, int *a4, uint64_t *a5, uint64_t *a6, int *a7, int *a8)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v18 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v18)
  {
    return result;
  }
  *(_QWORD *)(v17 + 8 * result) = sub_22F285DAC(a2, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

uint64_t sub_22F27F4B4(uint64_t result, unsigned int a2, uint64_t a3)
{
  _QWORD *i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  i = (_QWORD *)result;
  if (a2)
  {
    for (i = (_QWORD *)result; !*i || *i == -8; ++i)
      ;
  }
  v6 = (_QWORD *)(result + 8 * a2);
  if (i != v6)
  {
    v7 = (_QWORD *)*i;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD, _QWORD *))a3)(*(_QWORD *)(a3 + 8), v7 + 8, *v7, v7 + 1);
      do
      {
        v8 = (_QWORD *)i[1];
        ++i;
        v7 = v8;
        if (v8)
          v9 = v7 + 1 == 0;
        else
          v9 = 1;
      }
      while (v9);
    }
    while (i != v6);
  }
  return result;
}

unint64_t sub_22F27F534(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  char v15;

  result = *(_QWORD *)(a1 + 2864);
  if (result <= 0xF)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v4 = sub_22F368234(v3, "__tgt_offload_entry", 0x13uLL, 0);
    sub_22EFC3340(v4);
    if (v4)
      v5 = v4 + 64;
    else
      v5 = 0;
    sub_22E5A4124(v3, v5, *(_QWORD *)(v3 + 16816));
    v6 = sub_22EF5B848(v3, *(_QWORD *)(v3 + 16408), 0);
    sub_22E5A4124(v3, v5, v6);
    v7 = sub_22EF67C8C(v3);
    sub_22E5A4124(v3, v5, v7);
    v8 = sub_22EF60A6C(v3, 32, 1);
    sub_22E5A4124(v3, v5, v8);
    v9 = sub_22EF60A6C(v3, 32, 1);
    sub_22E5A4124(v3, v5, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    v11 = 0uLL;
    v13 = 0;
    v12 = 0;
    v15 = 120;
    v14 = 0;
    v10 = sub_22F39B83C(v3, &v11);
    sub_22EFCA95C(v4, v10);
    result = sub_22EF6477C(v3, v4);
    *(_QWORD *)(a1 + 2864) = result;
  }
  return result;
}

uint64_t sub_22F27F67C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  llvm::LLVMContext *v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(result + 2800))
  {
    v2 = (_QWORD *)result;
    v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 144);
    v4 = *(_QWORD *)(v3 + 16816);
    v15[0] = a2;
    v15[1] = v4;
    v7 = 0;
    v8 = 0;
    v10 = 0;
    v9 = 0;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v5 = sub_22EF63D8C(v3, a2, v15, 2uLL, (__int128 *)&v7, 0);
    v6 = (llvm::LLVMContext *)sub_22EF5B848(v3, v5, 0);
    v2[351] = v6;
    result = sub_22E66CB04((llvm::Type ***)(v2[1] + 280), v6);
    v2[350] = result;
  }
  return result;
}

uint64_t sub_22F27F744@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::DataLayout *DataLayout;
  llvm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(_QWORD *)(a1[6] + 56) + 40));
  v13 = *(llvm::Type **)(a3 + 8);
  sub_22E3C304C((uint64_t)DataLayout, (uint64_t)v13);
  llvm::DataLayout::getABITypeAlignment(DataLayout, v13);
  v14 = llvm::TypeSize::operator unsigned long long();
  v15 = *(_QWORD *)(a3 + 8);
  if ((*(_BYTE *)(a3 + 24) & 3) != 0)
    v16 = (uint64_t *)sub_22F28ABCC(a3, a2);
  else
    v16 = *(uint64_t **)a3;
  result = sub_22E42129C(a1, v15, v16, a4, a5);
  v18 = *(_QWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a3 + 16) | v14;
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v18;
  *(_QWORD *)(a6 + 16) = v19 & -v19;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  return result;
}

uint64_t sub_22F27F858(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6)
{
  __n128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  uint64_t *v25;
  __int128 v26;
  llvm::Instruction *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  llvm::Instruction *v34;
  __int128 v37;
  __int128 v38;
  _OWORD v39[8];
  uint64_t v40;
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[3];
  _OWORD v44[8];
  uint64_t v45;
  _BYTE v46[32];
  __int16 v47;
  _OWORD v48[8];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[8];
  uint64_t v55;
  _QWORD v56[44];

  v56[41] = *MEMORY[0x24BDAC8D0];
  v34 = sub_22F28CE84(a2, a3);
  v10 = *(unsigned __int8 **)(a5 + 8);
  if (v10)
    v11 = sub_22EFFA6B0(v10);
  else
    v11 = 0;
  sub_22E5A9CC0((uint64_t)v56, a2, (uint64_t)v11, v9);
  v12 = *(unsigned int *)(a5 + 24);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v33 = 8 * v12;
    do
    {
      v14 = *(unsigned __int8 **)(*(_QWORD *)(a5 + 16) + v13);
      sub_22EFFA6B0(v14);
      sub_22E4D8D7C(v54);
      v48[6] = v54[6];
      v48[7] = v54[7];
      v49 = v55;
      v48[2] = v54[2];
      v48[3] = v54[3];
      v48[4] = v54[4];
      v48[5] = v54[5];
      v48[0] = v54[0];
      v48[1] = v54[1];
      sub_22EFF605C((uint64_t)v14);
      sub_22E5AB0F0((uint64_t)&v50, a1, a2, (uint64_t)v48, v15);
      v16 = v50;
      v17 = v52;
      v37 = v51;
      v38 = v53;
      v18 = *(_QWORD *)(a2 + 88);
      LOWORD(v52) = 257;
      v19 = sub_22E3BF45C((uint64_t *)(a2 + 272), v50, v18, 0, (uint64_t)&v50);
      v47 = 257;
      sub_22E3BDEA8(a2 + 272, (uint64_t)v34, v19, (uint64_t)v46, 1, 0);
      v20 = *(_OWORD *)(a4 + 112);
      v44[6] = *(_OWORD *)(a4 + 96);
      v44[7] = v20;
      v45 = *(_QWORD *)(a4 + 128);
      v21 = *(_OWORD *)(a4 + 48);
      v44[2] = *(_OWORD *)(a4 + 32);
      v44[3] = v21;
      v22 = *(_OWORD *)(a4 + 80);
      v44[4] = *(_OWORD *)(a4 + 64);
      v44[5] = v22;
      v23 = *(_OWORD *)(a4 + 16);
      v44[0] = *(_OWORD *)a4;
      v44[1] = v23;
      sub_22EFF605C((uint64_t)v14);
      v25 = (uint64_t *)sub_22F25F748(a2, (uint64_t)v44, v24);
      v26 = a6[1];
      v43[0] = *a6;
      v43[1] = v26;
      v43[2] = a6[2];
      v47 = 257;
      sub_22F27F744((uint64_t *)(a2 + 272), a2, (uint64_t)v43, v25, (uint64_t)v46, (uint64_t)&v50);
      v42[0] = v50;
      v42[1] = v51;
      v42[2] = v52;
      v41[0] = v37;
      v41[1] = v17;
      v41[2] = v38;
      sub_22E3E4F38(a2 + 272, v42, v41);
      v47 = 257;
      v27 = sub_22F26180C(a2 + 272, (uint64_t)v25, v16, (uint64_t)v46);
      v28 = *(_OWORD *)(a4 + 112);
      v39[6] = *(_OWORD *)(a4 + 96);
      v39[7] = v28;
      v40 = *(_QWORD *)(a4 + 128);
      v29 = *(_OWORD *)(a4 + 48);
      v39[2] = *(_OWORD *)(a4 + 32);
      v39[3] = v29;
      v30 = *(_OWORD *)(a4 + 80);
      v39[4] = *(_OWORD *)(a4 + 64);
      v39[5] = v30;
      v31 = *(_OWORD *)(a4 + 16);
      v39[0] = *(_OWORD *)a4;
      v39[1] = v31;
      sub_22E4E87FC(a2, v27, v39, 0);
      v13 += 8;
    }
    while (v33 != v13);
  }
  return sub_22E5AA440(v56);
}

llvm::Value *sub_22F27FB1C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::PointerType *v23;
  uint64_t v24;
  uint64_t RuntimeFunction;
  llvm::Value *v26;
  _BYTE v28[32];
  __int16 v29;
  _OWORD v30[3];
  _QWORD v31[3];
  char v32;
  _OWORD v33[3];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  _QWORD v39[4];

  v39[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v38 = 0;
  v9 = (uint64_t *)(a1 + 2840);
  sub_22E5AB384(v8, (unint64_t *)(a1 + 2840), &v38);
  v10 = 0;
  v11 = *(_OWORD *)(a3 + 24);
  v33[0] = *(_OWORD *)(a3 + 8);
  v33[1] = v11;
  v33[2] = *(_OWORD *)(a3 + 40);
  v12 = *(_QWORD *)(v8 + 16816);
  if (v12 >= 0x10)
    v10 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  sub_22F25FAEC(a2, v33, v10, (uint64_t)v34);
  v13 = sub_22EF5B848(v8, *v9, 0);
  v30[0] = v35;
  v30[1] = v36;
  v30[2] = v37;
  v14 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, v13, 0);
  v15 = sub_22E66C868(*(_QWORD *)(a2 + 144) + 280, *v9, 0);
  v29 = 257;
  sub_22F245864((uint64_t *)(a2 + 272), v30, v14, v15, (uint64_t)v28, (uint64_t)v31);
  v16 = v31[1];
  if ((v32 & 3) != 0)
    v17 = (uint64_t *)sub_22F28ABCC(v31, a2);
  else
    v17 = (uint64_t *)v31[0];
  v18 = (uint64_t *)llvm::ConstantInt::get();
  v29 = 257;
  v19 = sub_22E42129C((uint64_t *)(a2 + 272), v16, v17, v18, (uint64_t)v28);
  v20 = *(_QWORD *)(a2 + 96);
  v29 = 257;
  v21 = sub_22E3C1338((uint64_t *)(a2 + 272), v19, v20, (uint64_t)v28);
  v22 = sub_22E59F964(a1, a2, a4);
  v24 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v23);
  v39[0] = v22;
  v39[1] = v21;
  v39[2] = v24;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v29 = 257;
  return sub_22E479C7C(a2, RuntimeFunction, v26, (uint64_t)v39, 3, (uint64_t)v28);
}

uint64_t sub_22F27FD3C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, unsigned __int8 *a8, uint64_t a9)
{
  _QWORD *v12;
  __int128 v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::LLVMContext *v18;
  uint64_t v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  llvm::PointerType *v23;
  uint64_t v24;
  llvm::PointerType *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[4];
  int8x16_t v33;
  uint64_t v34;
  __int128 *v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD v38[21];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  uint64_t v43;
  int8x16_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[6];

  v62[3] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v12 = (_QWORD *)result;
    v13 = a7[1];
    v42[0] = *a7;
    v42[1] = v13;
    v42[2] = a7[2];
    sub_22E5A41C4((uint64_t)&v43, result, a2, a3, a4, a5, a6, (uint64_t)v42, a9);
    v29 = v44;
    v27 = v43;
    v28 = v54;
    sub_22E5AB48C((uint64_t)v12, a2, *(_DWORD **)(a9 + 576), *(unsigned int *)(a9 + 584), a3, (uint64_t)&v37);
    v15 = v37;
    v39 = *(_OWORD *)v38;
    v40 = *(_OWORD *)&v38[2];
    v41 = *(_OWORD *)&v38[4];
    v16 = sub_22E59F964((uint64_t)v12, a2, a3);
    v17 = sub_22E59F7E4(v12, a2, a3);
    v19 = v17;
    v62[0] = v17;
    v62[1] = v16;
    v62[2] = v27;
    v61 = 0;
    v20 = 0uLL;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    if (*(_DWORD *)(a9 + 584))
    {
      *(_QWORD *)&v58 = v17;
      *((_QWORD *)&v58 + 1) = v16;
      *(_QWORD *)&v59 = v27;
      *((_QWORD *)&v59 + 1) = v15;
      if ((BYTE8(v40) & 3) != 0)
        v22 = sub_22F28ABCC(&v39, (_QWORD *)a2);
      else
        v22 = v39;
      *(_QWORD *)&v60 = v22;
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v18);
      *((_QWORD *)&v60 + 1) = llvm::ConstantInt::get();
      v17 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v23);
      v61 = v17;
      v21 = *(_DWORD *)(a9 + 584) == 0;
      v20 = 0uLL;
    }
    else
    {
      v21 = 1;
    }
    v37 = v12;
    v38[0] = a9;
    *(_OWORD *)&v38[13] = v51;
    *(_OWORD *)&v38[15] = v52;
    *(_OWORD *)&v38[5] = v47;
    *(_OWORD *)&v38[7] = v48;
    *(_OWORD *)&v38[9] = v49;
    *(_OWORD *)&v38[11] = v50;
    *(_OWORD *)&v38[1] = v45;
    *(_OWORD *)&v38[3] = v46;
    v38[17] = v53;
    v38[18] = v28;
    v38[19] = v62;
    v38[20] = &v58;
    v56 = v20;
    v57 = v20;
    v55 = v20;
    if (!v21)
    {
      *(_QWORD *)&v55 = v19;
      *((_QWORD *)&v55 + 1) = v16;
      *(_QWORD *)&v56 = v15;
      if ((BYTE8(v40) & 3) != 0)
        v24 = sub_22F28ABCC(&v39, (_QWORD *)a2);
      else
        v24 = v39;
      *((_QWORD *)&v56 + 1) = v24;
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v18);
      *(_QWORD *)&v57 = llvm::ConstantInt::get();
      v17 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v25);
      *((_QWORD *)&v57 + 1) = v17;
    }
    v26 = *(_QWORD *)(v12[1] + 200);
    v32[0] = v12;
    v32[1] = v26;
    v32[2] = v62;
    v32[3] = v16;
    v33 = vextq_s8(v29, v29, 8uLL);
    v34 = a9;
    v35 = &v55;
    v36 = a3;
    v31[0] = &v37;
    v31[1] = sub_22E5C5E7C;
    v31[2] = 0;
    if (a8)
    {
      v30[0] = v32;
      v30[1] = sub_22E5C6030;
      v30[2] = 0;
      return sub_22F27D618(v17, (_QWORD *)a2, a8, v31, v30);
    }
    else
    {
      return sub_22F27B464(v31, a2);
    }
  }
  return result;
}

llvm::Value *sub_22F28004C(llvm::Value *result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8, uint64_t a9)
{
  llvm::Value *v12;
  __int128 v13;
  uint64_t Signed;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t RuntimeFunction;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[8];
  uint64_t v43;
  _OWORD v44[3];
  _OWORD v45[8];
  uint64_t v46;
  _OWORD v47[8];
  uint64_t v48;
  _OWORD v49[8];
  uint64_t v50;
  _OWORD v51[3];
  _OWORD v52[8];
  uint64_t v53;
  _OWORD v54[4];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _OWORD v60[3];
  _OWORD v61[8];
  uint64_t v62;
  _BYTE v63[8];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD v69[3];
  _OWORD v70[8];
  uint64_t v71;
  _BYTE v72[8];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  _OWORD v78[3];
  _QWORD v79[3];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  llvm::PointerType *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[4];
  __int16 v95;
  _QWORD v96[9];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v12 = result;
    v13 = a7[1];
    v78[0] = *a7;
    v78[1] = v13;
    v78[2] = a7[2];
    sub_22E5A41C4((uint64_t)v79, (uint64_t)result, a2, a3, a4, a5, a6, (uint64_t)v78, a9);
    v41 = sub_22E59F964((uint64_t)v12, a2, a3);
    v40 = sub_22E59F7E4(v12, a2, a3);
    if (a8)
    {
      v16 = sub_22E4D86E0((_QWORD *)a2, a8);
      v17 = *(_QWORD *)(a2 + 72);
      WORD4(v74) = 257;
      Signed = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v16, v17, 1, (uint64_t)v72);
    }
    else
    {
      Signed = llvm::ConstantInt::getSigned();
    }
    v39 = Signed;
    v18 = v89;
    v71 = v88;
    v70[6] = v86;
    v70[7] = v87;
    v70[2] = v82;
    v70[3] = v83;
    v70[5] = v85;
    v70[4] = v84;
    v70[1] = v81;
    v70[0] = v80;
    v19 = sub_22EFC3B90(v89);
    v20 = 5;
    do
    {
      do
        v19 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v19 && (*(_DWORD *)(v19 + 28) & 0x7Fu) - 49 > 2);
      v21 = v20-- > 1;
    }
    while (v21);
    sub_22E4DD05C(a2, (uint64_t)v70, v19, (uint64_t)v72);
    v22 = sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * **(unsigned int **)(a4 + 24) + 88) + 16));
    v69[0] = v73;
    v69[1] = v74;
    v69[2] = v75;
    sub_22E4DA890(a2, v22, v69, v77, 1);
    v61[6] = v86;
    v61[7] = v87;
    v62 = v88;
    v61[2] = v82;
    v61[3] = v83;
    v61[5] = v85;
    v61[4] = v84;
    v61[1] = v81;
    v61[0] = v80;
    v23 = sub_22EFC3B90(v18);
    v24 = 6;
    do
    {
      do
        v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v23 && (*(_DWORD *)(v23 + 28) & 0x7Fu) - 49 > 2);
      v21 = v24-- > 1;
    }
    while (v21);
    sub_22E4DD05C(a2, (uint64_t)v61, v23, (uint64_t)v63);
    v25 = sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * **(unsigned int **)(a4 + 24) + 96) + 16));
    v60[0] = v64;
    v60[1] = v65;
    v60[2] = v66;
    sub_22E4DA890(a2, v25, v60, v68, 1);
    v52[6] = v86;
    v52[7] = v87;
    v53 = v88;
    v52[2] = v82;
    v52[3] = v83;
    v52[4] = v84;
    v52[5] = v85;
    v52[0] = v80;
    v52[1] = v81;
    v26 = sub_22EFC3B90(v18);
    v27 = 7;
    do
    {
      do
        v26 = *(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v26 && (*(_DWORD *)(v26 + 28) & 0x7Fu) - 49 > 2);
      v21 = v27-- > 1;
    }
    while (v21);
    sub_22E4DD05C(a2, (uint64_t)v52, v26, (uint64_t)v54);
    v28 = sub_22EFBC5B4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * **(unsigned int **)(a4 + 24) + 104) + 16));
    v51[0] = *(_OWORD *)((char *)v54 + 8);
    v51[1] = *(_OWORD *)((char *)&v54[1] + 8);
    v51[2] = *(_OWORD *)((char *)&v54[2] + 8);
    sub_22E4DA890(a2, v28, v51, *((uint64_t *)&v55 + 1), 1);
    v47[6] = v86;
    v47[7] = v87;
    v48 = v88;
    v47[2] = v82;
    v47[3] = v83;
    v47[4] = v84;
    v47[5] = v85;
    v47[0] = v80;
    v47[1] = v81;
    v29 = sub_22EFC3B90(v18);
    v30 = 9;
    do
    {
      do
        v29 = *(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v29 && (*(_DWORD *)(v29 + 28) & 0x7Fu) - 49 > 2);
      v21 = v30-- > 1;
    }
    while (v21);
    sub_22E4DD05C(a2, (uint64_t)v47, v29, (uint64_t)v49);
    v31 = *(_QWORD *)(a9 + 872);
    if (v31)
    {
      v45[6] = v49[6];
      v45[7] = v49[7];
      v46 = v50;
      v45[2] = v49[2];
      v45[3] = v49[3];
      v45[4] = v49[4];
      v45[5] = v49[5];
      v45[0] = v49[0];
      v45[1] = v49[1];
      sub_22E4E87FC(a2, v31, (uint64_t)v45, 0);
    }
    else
    {
      v44[0] = *(_OWORD *)((char *)v49 + 8);
      v44[1] = *(_OWORD *)((char *)&v49[1] + 8);
      v44[2] = *(_OWORD *)((char *)&v49[2] + 8);
      sub_22E620824(a2, (uint64_t)v44, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144) + 16816));
    }
    v97 = 0;
    v98 = 0;
    v96[0] = v40;
    v96[1] = v41;
    v96[2] = v79[0];
    v96[3] = v39;
    v91 = v73;
    v92 = v74;
    v93 = v75;
    sub_22E5E0440(a2, (uint64_t)&v91, v76, v94);
    v96[4] = v94[0];
    v91 = v64;
    v92 = v65;
    v93 = v66;
    sub_22E5E0440(a2, (uint64_t)&v91, v67, v94);
    v96[5] = v94[0];
    v42[6] = v57;
    v42[7] = v58;
    v43 = v59;
    v42[2] = v54[2];
    v42[3] = v54[3];
    v42[4] = v55;
    v42[5] = v56;
    v42[0] = v54[0];
    v42[1] = v54[1];
    v96[6] = sub_22F25F748(a2, (uint64_t)v42, a3);
    v96[7] = llvm::ConstantInt::getSigned();
    v96[8] = llvm::ConstantInt::getSigned();
    v32 = *(_QWORD *)(a9 + 856);
    if (v32 >= 8)
    {
      v34 = *(_QWORD *)(a2 + 32);
      v95 = 257;
      v33 = sub_22E3BF45C((uint64_t *)(a2 + 272), v32 & 0xFFFFFFFFFFFFFFF8, v34, 0, (uint64_t)v94);
    }
    else
    {
      v33 = llvm::ConstantInt::get();
    }
    v97 = v33;
    if (v90)
    {
      v35 = *(_QWORD *)(a2 + 96);
      LOWORD(v93) = 257;
      v36 = sub_22E3C1338((uint64_t *)(a2 + 272), (uint64_t)v90, v35, (uint64_t)&v91);
    }
    else
    {
      v36 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), 0);
    }
    v98 = v36;
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v95 = 257;
    return sub_22E479C7C(a2, RuntimeFunction, v38, (uint64_t)v96, 11, (uint64_t)v94);
  }
  return result;
}

uint64_t sub_22F280698(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v3 + 2893) = v2;
  result = sub_22E48B274(v3, *(_QWORD *)a1, *(_QWORD *)(a1 + 16), 0, 0);
  *(_BYTE *)(a1 + 25) = 0;
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 2872) = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = a1 + 40;
    sub_22E5BC320(v6, v5 + 2904);
    return sub_22F2840EC(v6);
  }
  return result;
}

int32x2_t sub_22F28070C(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int32x2_t result;
  unsigned __int8 *v11;
  _QWORD v12[2];

  v7 = *(_QWORD *)(a4 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 > 3)
    return sub_22E5AE654(a2, a3);
  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(const char **)(a6 + 16);
  v11 = a3;
  v12[0] = sub_22E5C624C;
  v12[1] = &v11;
  sub_22E5AE0F0((uint64_t)a2, v7, v8, v9, (uint64_t)v12, 0, 0, 0);
  return result;
}

llvm::Value *sub_22F280798(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t RuntimeFunction;
  llvm::Value *v11;
  _BYTE v13[32];
  __int16 v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E59F7E4(a1, a2, a3);
  v7 = sub_22E59F964((uint64_t)a1, a2, a3);
  v8 = *(_QWORD *)(a1[1] + 72);
  v14 = 257;
  v9 = sub_22E3BF45C((uint64_t *)(a2 + 272), v7, v8, 1, (uint64_t)v13);
  v15[0] = v6;
  v15[1] = v9;
  v15[2] = llvm::ConstantInt::get();
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v14 = 257;
  return sub_22E479C7C(a2, RuntimeFunction, v11, (uint64_t)v15, 3, (uint64_t)v13);
}

llvm::Value *sub_22F2808A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t RuntimeFunction;
  llvm::Value *v18;
  llvm::Value *result;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];
  __int16 v23;
  _OWORD v24[3];
  uint64_t v25[4];
  __int16 v26;
  _QWORD v27[4];

  v27[3] = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)(a2 + 272);
  v12 = sub_22E59F964(a1, a2, a3);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v23 = 257;
  v27[0] = sub_22E3BF45C(v11, v12, v13, 1, (uint64_t)v22);
  v27[1] = a4;
  v14 = *(_QWORD *)(a5 + 64);
  v15 = *(_OWORD *)(a5 + 24);
  v24[0] = *(_OWORD *)(a5 + 8);
  v24[1] = v15;
  v24[2] = *(_OWORD *)(a5 + 40);
  sub_22E5E0440(a2, (uint64_t)v24, v14, v25);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 96);
  v26 = 257;
  v27[2] = sub_22E3C1338(v11, v25[0], v16, (uint64_t)v25);
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v26 = 257;
  result = sub_22E479C7C(a2, RuntimeFunction, v18, (uint64_t)v27, 3, (uint64_t)v25);
  v20 = *(_QWORD *)(a2 + 8);
  v21 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v20;
  *(_QWORD *)(a6 + 16) = v21;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  return result;
}

_DWORD *sub_22F2809EC(_DWORD *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  llvm::LLVMContext *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::PointerType *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t RuntimeFunction;
  llvm::Value *v20;
  uint64_t v21;
  llvm::Value *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v6 = result;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 76) & 0x20) == 0 || *(_DWORD *)(a4 + 584))
    {
      v9 = sub_22E59F964((uint64_t)result, a2, a3);
      v10 = sub_22E59F7E4(v6, a2, a3);
      sub_22E5AB48C((uint64_t)v6, a2, *(_DWORD **)(a4 + 576), *(unsigned int *)(a4 + 584), a3, (uint64_t)&v28);
      v12 = v28;
      v23 = v29;
      v24 = v30;
      v25 = v31;
      if (*(_DWORD *)(a4 + 584))
      {
        v28 = v10;
        *(_QWORD *)&v29 = v9;
        *((_QWORD *)&v29 + 1) = v12;
        if ((BYTE8(v24) & 3) != 0)
          v13 = sub_22F28ABCC(&v23, (_QWORD *)a2);
        else
          v13 = v23;
        *(_QWORD *)&v30 = v13;
        llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v11);
        *((_QWORD *)&v30 + 1) = llvm::ConstantInt::get();
        *(_QWORD *)&v31 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(a2 + 96), v14);
        v15 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
        v16 = *(_QWORD *)(a2 + 2312);
        v17 = *(_BYTE *)(a2 + 2893);
        *(_BYTE *)(a2 + 2893) = 0;
        v18 = *(_QWORD *)(a2 + 2872);
        *(_QWORD *)(a2 + 2872) = v15;
        RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        v27 = 257;
        sub_22E479C7C(a2, RuntimeFunction, v20, (uint64_t)&v28, 6, (uint64_t)v26);
        *(_BYTE *)(a2 + 2893) = v17;
        sub_22E48B274((_QWORD *)a2, v15, v16, 0, 0);
        *(_QWORD *)(a2 + 2872) = v18;
      }
      else
      {
        v26[0] = v10;
        v26[1] = v9;
        v21 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        WORD4(v30) = 257;
        sub_22E479C7C(a2, v21, v22, (uint64_t)v26, 2, (uint64_t)&v28);
      }
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 328);
      v28 = *(_QWORD *)(a2 + 320);
      *(_QWORD *)&v29 = v7;
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 272));
      llvm::OpenMPIRBuilder::createTaskwait();
      if (*((_QWORD *)&v29 + 1))
        llvm::MetadataTracking::untrack();
    }
    result = *(_DWORD **)(a2 + 1856);
    if (result)
    {
      if (result[2] == 2)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 80))(result, a2);
    }
  }
  return result;
}

uint64_t *sub_22F280C64(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _BOOL4 v6;
  int v7;
  uint64_t *result;
  uint64_t v9[7];

  if (*(_QWORD *)(a2 + 320))
  {
    v6 = a3 != 95;
    if (a3 == 35)
      v6 = 0;
    v7 = a3 != 9 && v6;
    sub_22E5B1184((uint64_t)v9, a2, a4, a3, a5, v7);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a2 + 1856) + 48))(*(_QWORD *)(a2 + 1856), a2, 0);
    return sub_22E5B12FC(v9);
  }
  return result;
}

_QWORD *sub_22F280CE0(_QWORD *result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  uint64_t *v10;
  uint64_t RuntimeFunction;
  llvm::Value *v12;
  llvm::Constant **v13;
  _QWORD *v14;
  _QWORD *v15;
  llvm::Type *v16;
  uint64_t NullValue;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[4];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v5 = *(_QWORD *)(a2 + 1856);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 8) == 2)
      {
        v7 = (uint64_t)result;
        if (a4 == 75)
        {
          v8 = a3;
          v29 = sub_22E59F7E4(result, a2, a3);
          v24 = v8;
          v30 = sub_22E59F964(v7, a2, v8);
          v10 = (uint64_t *)(a2 + 272);
        }
        else
        {
          if (!*(_BYTE *)(v5 + 140))
            return result;
          v23 = a3;
          v29 = sub_22E59F7E4(result, a2, a3);
          v30 = sub_22E59F964(v7, a2, v23);
          v10 = (uint64_t *)(a2 + 272);
          v24 = v23;
        }
        llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v9);
        v31 = llvm::ConstantInt::get();
        RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
        v28 = 257;
        v13 = (llvm::Constant **)sub_22E479C7C(a2, RuntimeFunction, v12, (uint64_t)&v29, 3, (uint64_t)v27);
        v27[0] = ".cancel.exit";
        v28 = 259;
        v14 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v27[0] = ".cancel.continue";
        v28 = 259;
        v15 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v28 = 257;
        NullValue = llvm::Constant::getNullValue(*v13, v16);
        v18 = sub_22E3C18F4((uint64_t)v10, 33, (uint64_t *)v13, NullValue, (uint64_t)v27);
        v19 = llvm::User::operator new((llvm::User *)0x40);
        MEMORY[0x23489C09C](v19, v14, v15, v18, 0);
        v28 = 257;
        sub_22E3C12C8(v10, v19, (uint64_t)v27);
        sub_22E5ED9B4((_QWORD *)a2, v14, 0);
        if (a4 == 40)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 184))(v7, a2, v24, 89, 0, 0);
        v20 = *(_DWORD *)(v5 + 136) - 36;
        if (v20 <= 0x28 && ((1 << v20) & 0x14001000411) != 0)
          v21 = a2 + 1712;
        else
          v21 = *(_QWORD *)(a2 + 3440) + 56 * *(unsigned int *)(a2 + 3448) - 48;
        v22 = *(_OWORD *)v21;
        v26 = *(_QWORD *)(v21 + 16);
        v25 = v22;
        sub_22E48BA00((_QWORD *)a2, (uint64_t)&v25);
        return (_QWORD *)sub_22E5ED9B4((_QWORD *)a2, v15, 1);
      }
    }
  }
  return result;
}

uint64_t sub_22F281028(uint64_t result, _QWORD *a2, int a3, unsigned __int8 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a2[40])
  {
    v5 = a2[232];
    if (v5)
    {
      if (*(_DWORD *)(v5 + 8) == 2)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 200);
        v10[0] = result;
        v10[1] = v6;
        v11 = a3;
        v12 = a5;
        v13 = v5;
        v9[0] = v10;
        v9[1] = sub_22E5C6BF8;
        v9[2] = 0;
        if (a4)
        {
          v8[0] = &v7;
          v8[1] = nullsub_55;
          v8[2] = 0;
          return sub_22F27D618(result, a2, a4, v9, v8);
        }
        else
        {
          return sub_22F27B464(v9, (uint64_t)a2);
        }
      }
    }
  }
  return result;
}

void sub_22F2810D4(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t (**v32)();
  _QWORD *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[10];

  v37[8] = *MEMORY[0x24BDAC8D0];
  a1[4256] = 1;
  v35 = v37;
  v36 = 0x400000000;
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    goto LABEL_7;
  v14 = *(_DWORD *)v11;
  v12 = (uint64_t *)(v11 + 16);
  v13 = v14;
  if (v14)
  {
    v15 = 8 * v13;
    v16 = v12;
    while (*(_DWORD *)(*v16 + 8) != 91)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_6;
    }
  }
  else
  {
    v16 = v12;
  }
  v18 = &v12[v13];
  if (v16 == v18)
  {
LABEL_6:
    v11 = 0;
LABEL_7:
    v17 = v37;
    goto LABEL_8;
  }
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v19 = *v16;
LABEL_14:
  v20 = *(unsigned int *)(v19 + 16);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = v19 + 24;
    v23 = 2 * v20;
    do
    {
      v24 = *(_QWORD *)(v22 + 8 * v21);
      v32 = (uint64_t (**)())v24;
      v33 = *(_QWORD **)(v22 + 8 * (v21 + 1));
      v34 = *(_QWORD *)(v22 + 8 * (2 * *(_DWORD *)(v19 + 16)) + 4 * v21);
      if (v33)
        sub_22F26267C((uint64_t)&v35, v24, (uint64_t *)&v33);
      v21 += 2;
    }
    while (v23 != v21);
  }
  v25 = v16 + 1;
  while (v25 != v18)
  {
    v26 = *v25++;
    v19 = v26;
    if (*(_DWORD *)(v26 + 8) == 91)
    {
      v16 = v25 - 1;
      goto LABEL_14;
    }
  }
  v17 = v35;
  v11 = v36;
  a7 = v31;
  a5 = v29;
  a6 = v30;
  a3 = v27;
  a4 = v28;
LABEL_8:
  v32 = off_24FA65E20;
  v33 = v17;
  v34 = v11;
  *(_QWORD *)(a8 + 16) = &v32;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v35 != v37)
    free(v35);
}

llvm::Value *sub_22F2812BC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  llvm::Value *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  llvm::Value *v16;
  uint64_t RuntimeFunction;
  llvm::Value *v18;
  _BYTE v20[32];
  __int16 v21;
  _OWORD v22[8];
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  sub_22EFF605C(a3);
  v7 = sub_22E59F964(a1, (uint64_t)a2, v6);
  v8 = a2[9];
  LOWORD(v25) = 257;
  v9 = sub_22E3BF45C(a2 + 34, v7, v8, 1, (uint64_t)v24);
  v10 = sub_22EFFA6B0((unsigned __int8 *)a3);
  sub_22E4D8D7C((uint64_t)a2, (unsigned int *)v10, (uint64_t)v24);
  v22[6] = v29;
  v22[7] = v30;
  v23 = v31;
  v22[2] = v25;
  v22[3] = v26;
  v22[4] = v27;
  v22[5] = v28;
  v22[0] = v24[0];
  v22[1] = v24[1];
  sub_22EFF605C(a3);
  v12 = (llvm::Value *)sub_22F25F748((uint64_t)a2, (uint64_t)v22, v11);
  v13 = *(_QWORD *)(a3 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(a2[18] + 144) + 16816);
  sub_22EFF605C(a3);
  v16 = sub_22E50EA40((uint64_t)a2, v12, v13, v14, v15);
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  v32[0] = v9;
  v32[1] = v16;
  v21 = 257;
  return sub_22E479C7C((uint64_t)a2, RuntimeFunction, v18, (uint64_t)v32, 2, (uint64_t)v20);
}

uint64_t sub_22F281444(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  char v34;
  char v35;

  v5 = 1 << (*(_DWORD *)(a2 + 8) - 56);
  if ((v5 & 0x1CC00) != 0)
  {
    v6 = *(unsigned int **)(a2 + 24);
    if (v6)
    {
      v9 = *v6;
      v7 = v6 + 4;
      v8 = v9;
      if (v9)
      {
        v10 = 8 * v8;
        v11 = 8 * v8;
        v12 = v7;
        while (*(_DWORD *)(*(_QWORD *)v12 + 8) != 57)
        {
          v12 += 2;
          v11 -= 8;
          if (!v11)
            goto LABEL_7;
        }
        if (v11)
        {
          v16 = v7;
          while (1)
          {
            v17 = *(_QWORD *)v16;
            if (*(_DWORD *)(*(_QWORD *)v16 + 8) == 57)
              goto LABEL_17;
            v16 += 2;
            v10 -= 8;
            if (!v10)
              goto LABEL_16;
          }
        }
      }
    }
LABEL_7:
    v13 = 0;
    *a3 = 0;
    return v13;
  }
  if ((v5 & 0x390) != 0)
    goto LABEL_10;
  v21 = sub_22F28423C(a2);
  v22 = sub_22F3F1924(*(unsigned __int8 **)(v21 + 8 * *(unsigned int *)(v21 + 8) + 32), 1);
  v23 = sub_22E5B1A48(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), v22);
  if (!v23 || *v23 - 21 > 0x40)
  {
    v13 = 0;
    v15 = -1;
    goto LABEL_11;
  }
  v24 = *((_DWORD *)v23 + 2);
  if ((v24 - 66) > 0x21 || ((1 << (v24 - 66)) & 0x3001CC073) == 0)
  {
    if (!sub_22F421A78(*((_DWORD *)v23 + 2)))
      sub_22F421AC0(v24);
LABEL_10:
    v13 = 0;
    v15 = 1;
LABEL_11:
    *a3 = v15;
    return v13;
  }
  v26 = (unsigned int *)*((_QWORD *)v23 + 3);
  if (!v26)
    goto LABEL_7;
  v27 = *v26;
  v7 = v26 + 4;
  v8 = v27;
  if (!v27)
    goto LABEL_7;
  v28 = 8 * v8;
  v29 = 8 * v8;
  v30 = v7;
  while (*(_DWORD *)(*(_QWORD *)v30 + 8) != 57)
  {
    v30 += 2;
    v29 -= 8;
    if (!v29)
      goto LABEL_7;
  }
  if (!v29)
    goto LABEL_7;
  v31 = v7;
  while (1)
  {
    v17 = *(_QWORD *)v31;
    if (*(_DWORD *)(*(_QWORD *)v31 + 8) == 57)
      break;
    v31 += 2;
    v28 -= 8;
    if (!v28)
    {
LABEL_16:
      v17 = *(_QWORD *)&v7[2 * v8];
      break;
    }
  }
LABEL_17:
  v13 = *(_QWORD *)(v17 + 32);
  if (!sub_22F0085E8(v13, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0))
    return v13;
  sub_22F00905C(v13, *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), 0, (uint64_t)&v32);
  if (!v35)
    return v13;
  if (!v34)
  {
    if (v33 <= 0x40)
    {
      *a3 = (uint64_t)((_QWORD)v32 << -(uint64_t)v33) >> -(uint64_t)v33;
      return v13;
    }
    *a3 = *v32;
LABEL_43:
    MEMORY[0x2348A0E84]();
    return v13;
  }
  v18 = v32;
  v19 = v33 >= 0x41;
  if (v33 >= 0x41)
    v20 = v32;
  else
    v20 = &v32;
  *a3 = *v20;
  if (v19 && v18)
    goto LABEL_43;
  return v13;
}

void sub_22F2816C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22F281704()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *i;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  char v32;
  char v33;

  v3 = *(unsigned int **)(v2 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v4 = v3 + 4;
  v5 = v6;
  if (v6)
  {
    v7 = 8 * v5;
    v8 = 8 * v5;
    v9 = v4;
    while (*(_DWORD *)(*(_QWORD *)v9 + 8) != 78)
    {
      v9 += 2;
      v8 -= 8;
      if (!v8)
        goto LABEL_6;
    }
    if (v8)
    {
      v17 = v4;
      while (1)
      {
        v18 = *(_QWORD *)v17;
        if (*(_DWORD *)(*(_QWORD *)v17 + 8) == 78)
          break;
        v17 += 2;
        v7 -= 8;
        if (!v7)
        {
          v18 = *(_QWORD *)&v4[2 * v5];
          break;
        }
      }
      v19 = *(_QWORD *)(v18 + 32);
      if (sub_22F0085E8(v19, *(_QWORD *)(*(_QWORD *)(v1 + 144) + 144), 0))
      {
        sub_22F00905C(v19, *(_QWORD *)(*(_QWORD *)(v1 + 144) + 144), 0, (uint64_t)&v30);
        if (v33)
        {
          if (v32)
          {
            v20 = v30;
            v21 = v31 >= 0x41;
            if (v31 >= 0x41)
              v22 = v30;
            else
              v22 = &v30;
            *v0 = *v22;
            if (!v21 || !v20)
              goto LABEL_6;
          }
          else
          {
            if (v31 <= 0x40)
            {
              *v0 = (uint64_t)((_QWORD)v30 << -(uint64_t)v31) >> -(uint64_t)v31;
              goto LABEL_6;
            }
            *v0 = *v30;
          }
          MEMORY[0x2348A0E84]();
        }
      }
    }
  }
LABEL_6:
  v10 = *(unsigned int **)(v2 + 24);
  if (!v10)
    return;
  v13 = *v10;
  v11 = v10 + 4;
  v12 = v13;
  if (!v13)
    return;
  v14 = 8 * v12;
  v15 = 8 * v12;
  for (i = v11; *(_DWORD *)(*(_QWORD *)i + 8) != 58; i += 2)
  {
    v15 -= 8;
    if (!v15)
      return;
  }
  if (!v15)
    return;
  v23 = v11;
  while (1)
  {
    v24 = *(_QWORD *)v23;
    if (*(_DWORD *)(*(_QWORD *)v23 + 8) == 58)
      break;
    v23 += 2;
    v14 -= 8;
    if (!v14)
    {
      v24 = *(_QWORD *)&v11[2 * v12];
      break;
    }
  }
  v25 = *(_QWORD *)(v24 + 32);
  if (!sub_22F0085E8(v25, *(_QWORD *)(*(_QWORD *)(v1 + 144) + 144), 0))
    return;
  sub_22F00905C(v25, *(_QWORD *)(*(_QWORD *)(v1 + 144) + 144), 0, (uint64_t)&v30);
  if (!v33)
    return;
  v26 = v31;
  if (!v32)
  {
    if (v31 > 0x40)
    {
      v27 = v30;
      v29 = *v30;
      if (*v30 >= *v0)
      {
LABEL_41:
        MEMORY[0x2348A0E84]();
        return;
      }
    }
    else
    {
      v27 = v30;
      v29 = (uint64_t)((_QWORD)v30 << -(char)v31) >> -(char)v31;
      if (v29 >= *v0)
        return;
    }
    goto LABEL_38;
  }
  v27 = v30;
  v28 = (uint64_t *)&v30;
  if (v31 >= 0x41)
    v28 = v30;
  v29 = *v28;
  if (v29 < *v0)
LABEL_38:
    *v0 = v29;
  if (v26 >= 0x41 && v27)
    goto LABEL_41;
}

uint64_t sub_22F281A70(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  llvm::LLVMContext *v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20[2];
  char v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25[2];
  char v26[8];
  uint64_t v27;
  __int16 v28;
  _QWORD v29[12];

  v29[11] = *MEMORY[0x24BDAC8D0];
  v24 = -1;
  v4 = (unsigned __int8 *)sub_22F281444(a1, a2, &v24);
  if (v4)
  {
    v6 = *(_DWORD *)(a2 + 8) - 56;
    if (v6 <= 0x10)
    {
      v7 = v4;
      if (((1 << v6) & 0x1CC00) != 0)
      {
        v8 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
        v9 = *(_QWORD *)(a1 + 2312);
        v10 = *(_BYTE *)(a1 + 2893);
        *(_BYTE *)(a1 + 2893) = 0;
        v11 = *(_QWORD *)(a1 + 2872);
        *(_QWORD *)(a1 + 2872) = v8;
        v25[0] = a1;
        v25[1] = a1 + 272;
        v26[0] = 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        v12 = sub_22E50E974(v25, v4);
        v13 = *(_QWORD *)(a1 + 24);
        v28 = 257;
        v14 = sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)v12, v13, 1, (uint64_t)v25);
        *(_BYTE *)(a1 + 2893) = v10;
        sub_22E48B274((_QWORD *)a1, v8, v9, 0, 0);
        *(_QWORD *)(a1 + 2872) = v11;
        return v14;
      }
      if (*(_DWORD *)(a2 + 8) == 56)
      {
        v16 = sub_22F28423C(a2);
        sub_22E5B1D08((uint64_t)v25, a1, v16);
        v17 = *(_QWORD *)(a1 + 1856);
        *(_QWORD *)(a1 + 1856) = v25;
        v20[0] = a1;
        v20[1] = a1 + 272;
        v21 = 1;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        v18 = sub_22E50E974(v20, v7);
        v19 = *(_QWORD *)(a1 + 24);
        v23 = 257;
        v14 = sub_22E3BF45C((uint64_t *)(a1 + 272), (uint64_t)v18, v19, 1, (uint64_t)v20);
        *(_QWORD *)(a1 + 1856) = v17;
        sub_22F283FC4((uint64_t)v29);
        v25[0] = (uint64_t)&off_24FA66C98;
        sub_22E49FAE8((uint64_t)v26);
        return v14;
      }
    }
  }
  else if (v24 == -1)
  {
    return 0;
  }
  llvm::Type::getInt32Ty(*(llvm::Type **)(a1 + 336), v5);
  return llvm::ConstantInt::get();
}

BOOL sub_22F281CA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 244)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22F281D00(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_22F24C318(*(_QWORD *)(a1 + 2576), *(_DWORD *)(a1 + 2592), a2, &v9);
  v5 = v9;
  if (v4)
    v6 = v9 == *(_QWORD *)(a1 + 2576) + 16 * *(unsigned int *)(a1 + 2592);
  else
    v6 = 1;
  if (!v6)
    return *(_QWORD *)(v5 + 8);
  sub_22E5B2624(a1, a2, 0);
  v9 = 0;
  v8 = sub_22F24C318(*(_QWORD *)(a1 + 2576), *(_DWORD *)(a1 + 2592), a2, &v9);
  result = 0;
  if (v8)
  {
    v5 = v9;
    return *(_QWORD *)(v5 + 8);
  }
  return result;
}

uint64_t sub_22F281D9C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  _QWORD v23[3];
  _QWORD v24[6];

  v12 = *(_DWORD *)(a3 + 8);
  if (sub_22F421B08(v12))
  {
    v13 = (v12 - 66) > 0x21 || ((1 << (v12 - 66)) & 0x3001CC073) == 0;
    v14 = a3;
    if (!v13)
      goto LABEL_6;
  }
  v16 = *(_QWORD *)(a1[1] + 144);
  v17 = sub_22F28423C(a3);
  v18 = sub_22F3F1924(*(unsigned __int8 **)(v17 + 8 * *(unsigned int *)(v17 + 8) + 32), 1);
  result = (uint64_t)sub_22E5B1A48(v16, v18);
  if (result)
  {
    v14 = result;
    if (*(unsigned __int8 *)result - 21 <= 0x40)
    {
      v19 = *(_DWORD *)(a3 + 8);
      if ((v19 - 63) >= 3 && v19 != 60)
      {
        v20 = *(_DWORD *)(result + 8);
        if (v19 == 66)
        {
          v21 = *(_DWORD *)(result + 8);
          goto LABEL_14;
        }
        result = sub_22F421B08(*(_DWORD *)(result + 8));
        if ((result & 1) != 0)
          goto LABEL_6;
        if (v20 == 80)
        {
          v22 = (unsigned __int8 *)sub_22F28423C(v14);
          result = (uint64_t)sub_22F3F1924(v22, 1);
          if (result)
          {
            result = (uint64_t)sub_22E5B1A48(v16, (unsigned __int8 *)result);
            if (result)
            {
              v14 = result;
              if (*(unsigned __int8 *)result - 21 <= 0x40)
              {
                v21 = *(_DWORD *)(result + 8);
LABEL_14:
                result = sub_22F421B08(v21);
                if ((result & 1) == 0)
                  return result;
LABEL_6:
                v24[0] = v14;
                v24[1] = a4;
                v24[2] = a5;
                v24[3] = a6;
                v24[4] = a3;
                v24[5] = a1;
                v23[0] = v24;
                v23[1] = sub_22E5C6ED8;
                v23[2] = 0;
                return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD *, _QWORD))(*a1 + 360))(a1, a2, 89, v23, 0);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_22F281F40(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  int *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t *, uint64_t);
  uint64_t v26;
  unsigned int v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t (*v34)();
  uint64_t v35;
  _QWORD v36[3];
  BOOL v37;
  _QWORD v38[7];
  BOOL v39;
  uint64_t v40;
  _QWORD v41[4];
  BOOL v42;
  uint64_t v43;
  char v44;
  _QWORD v45[13];
  BOOL v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *(*v52)(uint64_t *, _QWORD *);
  uint64_t v53;
  int v54;
  __int128 v55;
  _BYTE v56[28];
  __int128 v57;
  _BYTE v58[28];
  __int128 v59;
  _BYTE v60[28];
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD v64[2];
  void *v65[2];
  _QWORD v66[18];

  v66[16] = *MEMORY[0x24BDAC8D0];
  if (a2[40])
  {
    v17 = *(_QWORD *)(a1[1] + 152);
    if ((*(_BYTE *)(v17 + 76) & 8) != 0)
      LOBYTE(v18) = 0;
    else
      v18 = ((unint64_t)*(unsigned __int16 *)(v17 + 96) >> 4) & 1;
    v19 = *(unsigned int **)(a3 + 24);
    v31 = v18;
    if (v19)
    {
      v27 = *v19;
      v19 += 4;
      v26 = v27;
      v20 = (int *)&v19[2 * v27];
      v28 = (int *)v19;
      if (v27)
      {
        v30 = 8 * v26;
        v28 = (int *)v19;
        while (*(_DWORD *)(*(_QWORD *)v28 + 8) != 18)
        {
          v28 += 2;
          v30 -= 8;
          if (!v30)
            goto LABEL_16;
        }
      }
      if (v28 != v20)
      {
        v21 = 1;
LABEL_9:
        v65[0] = v66;
        v65[1] = (void *)0x1000000000;
        v22 = sub_22E59F470(a3, 56);
        v64[0] = v22;
        v64[1] = v65;
        v51 = v64;
        v52 = sub_22E5C6FB0;
        v53 = 0;
        v23 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, _QWORD **, _QWORD))(*a1 + 360))(a1, a2, 89, &v51, 0);
        v51 = 0;
        v52 = 0;
        v54 = 0;
        v53 = 0;
        v55 = 0u;
        memset(v56, 0, sizeof(v56));
        v57 = 0u;
        memset(v58, 0, sizeof(v58));
        v59 = 0u;
        memset(v60, 0, sizeof(v60));
        v62 = 0;
        v61 = 0;
        v63 = 0;
        v49 = 0;
        v50 = 0;
        v45[0] = a1;
        v45[1] = a7;
        v45[2] = a5;
        v45[3] = a3;
        v45[4] = &v51;
        v45[5] = &v50;
        v45[6] = &v49;
        v45[7] = a9;
        v45[8] = a10;
        v45[9] = a1;
        v45[10] = a4;
        v45[11] = a3;
        v45[12] = v65;
        v46 = v21;
        v47 = v22;
        v48 = v31;
        v41[0] = a1;
        v41[1] = a4;
        v41[2] = a3;
        v41[3] = v65;
        v42 = v21;
        v43 = v22;
        v44 = v31;
        v38[0] = a1;
        v38[1] = v45;
        v38[2] = a3;
        v38[3] = &v51;
        v38[4] = &v50;
        v38[5] = &v49;
        v38[6] = v65;
        v39 = v21;
        v40 = v22;
        v36[0] = a1;
        v36[1] = v41;
        v36[2] = a3;
        v37 = v21;
        if (a5)
        {
          v24 = v38;
          v25 = (uint64_t (*)(uint64_t *, uint64_t))sub_22E5C6FC0;
          if (a6)
          {
            v33 = v38;
            v34 = sub_22E5C6FC0;
            v35 = 0;
            v32[0] = v36;
            v32[1] = sub_22E5CF7C4;
            v32[2] = 0;
            sub_22F27D618(v23, a2, a6, &v33, v32);
LABEL_12:
            if (v65[0] != v66)
              free(v65[0]);
            return;
          }
        }
        else
        {
          v24 = v36;
          v25 = sub_22E5CF7C4;
        }
        v33 = v24;
        v34 = (uint64_t (*)())v25;
        v35 = 0;
        sub_22F27B464(&v33, (uint64_t)a2);
        goto LABEL_12;
      }
LABEL_16:
      if ((_DWORD)v26)
      {
        v29 = 8 * v26;
        while (*(_DWORD *)(*(_QWORD *)v19 + 8) != 51)
        {
          v19 += 2;
          v29 -= 8;
          if (!v29)
          {
            v19 = (unsigned int *)v20;
            break;
          }
        }
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = v19 != (unsigned int *)v20;
    goto LABEL_9;
  }
}

unint64_t sub_22F282248(uint64_t a1)
{
  unint64_t result;

  for (result = sub_22EFCCC4C(a1 + 64); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x37)
      break;
  }
  return result;
}

uint64_t sub_22F282284(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  result = llvm::StringMapImpl::LookupBucketFor();
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v10 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    return result;
  }
  *(_QWORD *)(v9 + 8 * result) = sub_22F286CC8(a2, a3, a4);
  ++*((_DWORD *)a1 + 3);
  result = llvm::StringMapImpl::RehashTable(a1);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

void sub_22F28234C(uint64_t a1)
{
  int *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = sub_22F286D5C((int *)(a1 + 3008));
  v3 = (uint64_t *)v2;
  v5 = v4;
  if ((*(_BYTE *)(a1 + 3008) & 1) != 0)
  {
    v6 = a1 + 3016;
    v7 = 4;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 3016);
    v7 = *(unsigned int *)(a1 + 3024);
  }
  v8 = (uint64_t *)(v6 + 8 * v7);
  if (v8 != (uint64_t *)v2)
  {
    do
    {
      v9 = *v3;
      v10 = sub_22EF95D10(*v3);
      if (v11)
      {
        if (*(_DWORD *)(v10 + 36) || *(_BYTE *)(a1 + 4248))
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 808) + 304))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 808), v9);
        else
          sub_22E62F700();
      }
      while (++v3 != v5)
      {
        if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v8);
  }
}

BOOL sub_22F282438(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL8 result;
  uint64_t v6;

  if (!a2)
    return 0;
  result = sub_22F282498(a2);
  if (result)
  {
    sub_22EFC8E88(a2);
    if (*(_DWORD *)(sub_22E5C53F0(v6) + 36) > 8u)
    {
      return 0;
    }
    else
    {
      *a3 = 0;
      return 1;
    }
  }
  return result;
}

BOOL sub_22F282498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 243)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22F2824F8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _BYTE *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  llvm::LLVMContext *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t RuntimeFunction;
  llvm::Value *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  __int16 v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v12 = sub_22E59F7E4(a1, a2, a4);
    v13 = *(_QWORD *)(a2 + 1992) - *(_QWORD *)(a2 + 2000);
    v14 = *(_QWORD *)(a2 + 2312);
    v21 = *(_BYTE *)(a2 + 2893);
    *(_BYTE *)(a2 + 2893) = 0;
    v22 = v14;
    v23 = *(_QWORD *)(a2 + 2872);
    *(_QWORD *)(a2 + 2872) = v13;
    llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v15);
    v16 = llvm::ConstantInt::get();
    v17 = sub_22F27C820((uint64_t)a1);
    LOWORD(v29) = 257;
    v18 = sub_22E3C1740((uint64_t *)(a2 + 272), 49, a5, v17, (uint64_t)&v26);
    v26 = v28;
    v28[0] = v12;
    v28[1] = v16;
    v29 = v18;
    v27 = 0x1000000003;
    sub_22E5B5498((uint64_t)&v26, a6, &a6[8 * a7]);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v25 = 257;
    sub_22E479C7C(a2, RuntimeFunction, v20, (uint64_t)v26, v27, (uint64_t)v24);
    if (v26 != v28)
      free(v26);
    *(_BYTE *)(a2 + 2893) = v21;
    sub_22E48B274((_QWORD *)a2, v13, v22, 0, 0);
    *(_QWORD *)(a2 + 2872) = v23;
  }
}

llvm::Value *sub_22F2826A8(llvm::Value *result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t v8;
  llvm::LLVMContext *v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::LLVMContext *v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t RuntimeFunction;
  llvm::Value *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v8 = (uint64_t)result;
    v11 = sub_22E59F7E4(result, a2, a5);
    if (a3)
    {
      v23 = a2;
      v24 = a2 + 272;
      v25 = 0;
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
      v12 = sub_22E50E974(&v23, a3);
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 24);
      v27 = 257;
      v14 = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v12, v13, 1, (uint64_t)&v23);
    }
    else
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v10);
      v14 = llvm::ConstantInt::get();
    }
    v16 = v14;
    if (a4)
    {
      v23 = a2;
      v24 = a2 + 272;
      v25 = 0;
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 232);
      v17 = sub_22E50E974(&v23, a4);
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 24);
      v27 = 257;
      v19 = sub_22E3BF45C((uint64_t *)(a2 + 272), (uint64_t)v17, v18, 1, (uint64_t)&v23);
    }
    else
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 336), v15);
      v19 = llvm::ConstantInt::get();
    }
    v20 = v19;
    v28[0] = v11;
    v28[1] = sub_22E59F964(v8, a2, a5);
    v28[2] = v16;
    v28[3] = v20;
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v27 = 257;
    return sub_22E479C7C(a2, RuntimeFunction, v22, (uint64_t)v28, 4, (uint64_t)&v23);
  }
  return result;
}

uint64_t sub_22F282864(uint64_t result, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  char *v12;
  uint64_t (*v13)();
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  _QWORD v20[4];
  _QWORD v21[5];
  uint64_t (**v22)();

  if (a2[40])
  {
    v21[4] = a6;
    v22 = off_24FA65B00;
    v21[0] = result;
    v21[1] = a3;
    v21[2] = a5;
    v21[3] = a7;
    v20[0] = result;
    v20[1] = a5;
    v20[2] = a7;
    v20[3] = a3;
    v19[0] = a7;
    v19[1] = a6;
    v19[2] = &v22;
    v15 = v21;
    v16 = sub_22E5CF914;
    v17 = 0;
    if (a4)
    {
      v12 = (char *)v19;
      v13 = (uint64_t (*)())sub_22E5CFC2C;
      v14 = 0;
      v11 = sub_22F27D618(result, a2, a4, &v15, &v12);
    }
    else
    {
      v11 = sub_22F27B464(&v15, (uint64_t)a2);
    }
    if (!*(_DWORD *)(a7 + 80))
    {
      a6[2] = &v22;
      v11 = sub_22F27B464(a6, (uint64_t)a2);
    }
    v15 = v20;
    v16 = sub_22E5CFC4C;
    v17 = 0;
    if (a4)
    {
      v12 = &v18;
      v13 = nullsub_56;
      v14 = 0;
      return sub_22F27D618(v11, a2, a4, &v15, &v12);
    }
    else
    {
      return sub_22F27B464(&v15, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_22F28299C(uint64_t result, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  char v5;
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[6];
  _QWORD v9[6];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  int v13;
  __int128 v14;
  _BYTE v15[28];
  __int128 v16;
  _BYTE v17[28];
  __int128 v18;
  _BYTE v19[28];
  uint64_t v20;
  uint64_t v21;
  int v22;

  if (a2[40])
  {
    memset(v12, 0, sizeof(v12));
    v13 = 0;
    v14 = 0u;
    memset(v15, 0, sizeof(v15));
    v16 = 0u;
    memset(v17, 0, sizeof(v17));
    v18 = 0u;
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v10 = 0;
    v11 = 0;
    v9[0] = result;
    v9[1] = a3;
    v9[2] = a5;
    v9[3] = v12;
    v9[4] = &v11;
    v9[5] = &v10;
    v8[0] = result;
    v8[1] = v9;
    v8[2] = a3;
    v8[3] = v12;
    v8[4] = &v11;
    v8[5] = &v10;
    v7[0] = v8;
    v7[1] = sub_22E5CFDF8;
    v7[2] = 0;
    if (a4)
    {
      v6[0] = &v5;
      v6[1] = nullsub_57;
      v6[2] = 0;
      return sub_22F27D618(result, a2, a4, v7, v6);
    }
    else
    {
      return sub_22F27B464(v7, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_22F282A84(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F25AFD8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E4D1B3C(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

llvm::Value *sub_22F282B1C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  llvm::Value *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  llvm::Value *v21;
  unint64_t v22;
  int v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t RuntimeFunction;
  llvm::Value *v27;
  llvm::Value *result;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[3];
  llvm::Value *v41;
  unsigned int v42;
  _BYTE v43[32];
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[4];
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22EF60A6C(*(_QWORD *)(a1[1] + 144), 64, 1);
  v7 = (llvm::Value *)*(unsigned int *)(a3 + 32);
  v42 = 32;
  v41 = v7;
  v29 = a1;
  v8 = sub_22EF5FE30(*(_QWORD *)(a1[1] + 144), v6, (const llvm::APInt *)&v41, 0, 0, 0);
  *(_QWORD *)&v45 = ".cnt.addr";
  LOWORD(v47) = 259;
  v9 = sub_22F25E4D4((uint64_t)a2, v8, (uint64_t)&v45, 0);
  if (v9 <= 7)
    v11 = 0;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v9 <= 7)
    v12 = 0;
  else
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
  if (v9 >= 8)
    v13 = 1 << (v10 & 7 | (8 * (v9 & 7)));
  else
    v13 = 0;
  if (*(_DWORD *)(a3 + 32))
  {
    v14 = 0;
    v30 = a3;
    v31 = *(unsigned int *)(a3 + 32);
    do
    {
      v15 = sub_22F3EBC24(a3, v14);
      *(_QWORD *)&v45 = a2;
      *((_QWORD *)&v45 + 1) = a2 + 34;
      LOBYTE(v46) = 0;
      *((_QWORD *)&v46 + 1) = *(_QWORD *)(a2[18] + 232);
      v16 = v11;
      v17 = sub_22E50E974((uint64_t *)&v45, (unsigned __int8 *)v15);
      v18 = v13;
      v19 = v12;
      v20 = *(_QWORD *)(v15 + 8);
      sub_22EFF605C(v15);
      v21 = v17;
      v11 = v16;
      v22 = v20;
      v12 = v19;
      v13 = v18;
      v24 = sub_22E50EA40((uint64_t)a2, v21, v22, v6, v23);
      v36[0] = v16;
      v36[1] = v12;
      v36[2] = v18;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v49 = 257;
      sub_22E486A58(a2 + 34, (uint64_t)v36, v14, (uint64_t)v48, (uint64_t)v40);
      v45 = v40[0];
      v46 = v40[1];
      v47 = v40[2];
      sub_22E6281E0((_QWORD *)a2[18], v6, (uint64_t)v43);
      a3 = v30;
      sub_22E4E8134((uint64_t)a2, (uint64_t)v24, (uint64_t)&v45, 0, v6, 2, (uint64_t)v43, 0, 0);
      ++v14;
    }
    while (v31 != v14);
  }
  v48[0] = sub_22E59F7E4(v29, (uint64_t)a2, *(_DWORD *)a3);
  v48[1] = sub_22E59F964((uint64_t)v29, (uint64_t)a2, *(_DWORD *)a3);
  v32[0] = v11;
  v32[1] = v12;
  v32[2] = v13;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v44 = 257;
  sub_22E486A58(a2 + 34, (uint64_t)v32, 0, (uint64_t)v43, (uint64_t)&v45);
  if ((BYTE8(v46) & 3) != 0)
    v25 = sub_22F28ABCC(&v45, a2);
  else
    v25 = v45;
  v48[2] = v25;
  RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
  LOWORD(v47) = 257;
  result = sub_22E479C7C((uint64_t)a2, RuntimeFunction, v27, (uint64_t)v48, 3, (uint64_t)&v45);
  if (v42 > 0x40)
  {
    result = v41;
    if (v41)
      return (llvm::Value *)MEMORY[0x2348A0E84](v41, 0x1000C8000313F17);
  }
  return result;
}

_QWORD *sub_22F282E5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v11;
  uint64_t v13;
  _BYTE v14[32];
  __int16 v15;
  uint64_t v16[2];

  v16[0] = 0;
  v16[1] = a1;
  sub_22E48EE24(v16, a2, 0);
  if (*(_BYTE *)(a4 + 16))
    v11 = 1;
  else
    v11 = a4 == 0;
  if (!v11 && llvm::Function::hasFnAttribute())
  {
    v13 = *(_QWORD *)(a4 + 24);
    v15 = 257;
    sub_22F24EEDC(a1, v13, (llvm::Value *)a4, a5, a6, (uint64_t)v14);
  }
  else
  {
    v15 = 257;
    sub_22E479C7C(a1, a3, (llvm::Value *)a4, a5, a6, (uint64_t)v14);
  }
  return sub_22E48F084(v16);
}

_QWORD *sub_22F282F28(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_22F282E5C(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_22F282F44(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_22F246C54((uint64_t *)a1, a2, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 104 * *(unsigned int *)(v3 + 8);
}

uint64_t sub_22F282FB8(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int64x2_t v3;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F286DD4(a1);
  v2 = *(_QWORD *)a1 + 40 * v1;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)v2 = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(v2 + 8) = v3;
  *(int64x2_t *)(v2 + 24) = v3;
  LODWORD(v2) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v2;
  return *(_QWORD *)a1 + 40 * v2 - 40;
}

uint64_t sub_22F283018(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_22E5C4728(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E5D05AC(a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F2830B0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *result;

  v3 = sub_22E5D0878(a1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  sub_22E5D08E0(v4, v3);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v4 += 24;
  *(_QWORD *)(v4 + 16) = 0;
  result = sub_22E5D0954((_QWORD *)v4, *(_BYTE **)(v3 + 24), *(_BYTE **)(v3 + 32), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 3));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F28313C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return sub_22F2871F8(a1);
  v2 = *(_QWORD *)a1 + 200 * v1;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_QWORD *)(v2 + 132) = 2;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_BYTE *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  LODWORD(v2) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v2;
  return *(_QWORD *)a1 + 200 * v2 - 200;
}

void sub_22F2831A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;

  v7 = *a2;
  v8 = 0;
  sub_22F28430C((uint64_t)&v5, a1, &v7, &v8);
  if (v6)
  {
    v4 = v5;
    sub_22E5D0A14((_QWORD *)(a1 + 24), a2);
    *(_DWORD *)(v4 + 8) = -1431655765 * ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) - 1;
  }
}

_DWORD *sub_22F283234(_DWORD *a1)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 152) + 72) >= 0x32u)
  {
    v3 = a1[2];
    if (v3 == 2)
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 808);
      v7 = *(_DWORD *)(v6 + 3440) - 1;
      *(_DWORD *)(v6 + 3440) = v7;
      sub_22F284AB4(*(_QWORD *)(v6 + 3432) + 200 * v7);
      v3 = a1[2];
    }
    if (v3 == 1)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 808);
      v5 = *(_DWORD *)(v4 + 3440) - 1;
      *(_DWORD *)(v4 + 3440) = v5;
      sub_22F284AB4(*(_QWORD *)(v4 + 3432) + 200 * v5);
    }
  }
  return a1;
}

uint64_t sub_22F2832CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = 0;
  result = sub_22F258E38(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v11);
  v7 = v11;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F28743C(a2, a3, v11);
    v7 = (_QWORD *)result;
    v10 = *a3;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = v10;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F283360(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;

  v25 = 0;
  result = sub_22F2875F0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v25);
  v15 = v25;
  if ((result & 1) != 0)
  {
    v16 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F28768C(a2, a3, v25);
    v15 = (_QWORD *)result;
    v18 = *a4;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = v18;
    *(_QWORD *)(result + 16) = *a5;
    *(_QWORD *)(result + 24) = *a6;
    v19 = *(_OWORD *)(a7 + 80);
    v20 = *(_OWORD *)(a7 + 96);
    v21 = *(_OWORD *)(a7 + 112);
    *(_QWORD *)(result + 160) = *(_QWORD *)(a7 + 128);
    *(_OWORD *)(result + 128) = v20;
    *(_OWORD *)(result + 144) = v21;
    *(_OWORD *)(result + 112) = v19;
    v22 = *(_OWORD *)(a7 + 16);
    v23 = *(_OWORD *)(a7 + 32);
    v24 = *(_OWORD *)(a7 + 64);
    *(_OWORD *)(result + 80) = *(_OWORD *)(a7 + 48);
    *(_OWORD *)(result + 96) = v24;
    *(_OWORD *)(result + 48) = v22;
    *(_OWORD *)(result + 64) = v23;
    *(_OWORD *)(result + 32) = *(_OWORD *)a7;
    v16 = 1;
  }
  v17 = *(_QWORD *)a2 + 168 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

double sub_22F283454@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double result;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v12 = sub_22E66C868(*(_QWORD *)(a1 + 144) + 280, a3, 0);
  v13 = *(_QWORD **)(a1 + 144);
  v14 = v13[18];
  sub_22E6281E0(v13, a3, (uint64_t)v16);
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_DWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  *(_QWORD *)(a6 + 72) = 0;
  *(_QWORD *)(a6 + 84) = 2;
  *(_DWORD *)a6 = 0;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_QWORD *)&v20 = a2;
  *((_QWORD *)&v20 + 1) = v12;
  v21 = a4;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = v17;
  v18[0] = v16[0];
  v18[1] = v16[1];
  *(_QWORD *)&result = sub_22E3C113C(a6, &v20, a3, a5, v18, v14).n128_u64[0];
  return result;
}

double sub_22F28353C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t GlobalVariable;
  double result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[8];
  uint64_t v20;
  _OWORD v21[8];
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[8];
  uint64_t v25;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 152) + 72) >= 0x32u)
  {
    v8 = *(_QWORD *)(a1 + 3432) + 200 * *(unsigned int *)(a1 + 3440) - 200;
    if (a4)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    else
      v9 = 0;
    sub_22F283690(v8, v9);
    GlobalVariable = llvm::Module::getGlobalVariable();
    if (GlobalVariable)
    {
      v12 = GlobalVariable;
      v23 = *(_QWORD *)(a3 + 64);
      v13 = sub_22E4D27F8(&v23);
      sub_22F283454(a2, v12, v13, *(_QWORD *)(a3 + 24), 2, (uint64_t)v24);
      v21[6] = v24[6];
      v21[7] = v24[7];
      v22 = v25;
      v21[2] = v24[2];
      v21[3] = v24[3];
      v21[4] = v24[4];
      v21[5] = v24[5];
      v21[0] = v24[0];
      v21[1] = v24[1];
      v14 = sub_22F25F748(a2, (uint64_t)v21, a5);
      v15 = *(_OWORD *)(a3 + 112);
      v19[6] = *(_OWORD *)(a3 + 96);
      v19[7] = v15;
      v20 = *(_QWORD *)(a3 + 128);
      v16 = *(_OWORD *)(a3 + 48);
      v19[2] = *(_OWORD *)(a3 + 32);
      v19[3] = v16;
      v17 = *(_OWORD *)(a3 + 80);
      v19[4] = *(_OWORD *)(a3 + 64);
      v19[5] = v17;
      v18 = *(_OWORD *)(a3 + 16);
      v19[0] = *(_OWORD *)a3;
      v19[1] = v18;
      return sub_22E4E87FC(a2, v14, (uint64_t)v19, 0);
    }
  }
  return result;
}

uint64_t sub_22F283690(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v3 = 1;
  if (v3)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 48 * *(unsigned int *)(v5 + 8);
}

__n128 sub_22F283768(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, __int128 a9, unsigned __int8 **a10, uint64_t a11, __int16 a12)
{
  __n128 result;

  sub_22E5AE780(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_22F2837B4()
{
  return 0;
}

const char *sub_22F2837DC()
{
  return ".omp_outlined.";
}

uint64_t sub_22F2837EC()
{
  return 0;
}

uint64_t sub_22F2837F4()
{
  return 0;
}

void sub_22F283800(uint64_t a1)
{
  sub_22F2848E4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F283824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_22F283834(uint64_t a1)
{
  sub_22F2848E4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F283858(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_22F283874()
{
  JUMPOUT(0x2348A0E9CLL);
}

double sub_22F283888(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  *(_QWORD *)(a1 + 336) = a2;
  v2 = *a2;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)(a1 + 352) = 0x200000000;
  *(_QWORD *)(a1 + 408) = v2;
  *(_QWORD *)(a1 + 416) = a1 + 464;
  *(_QWORD *)(a1 + 424) = a1 + 472;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 444) = 512;
  *(_BYTE *)(a1 + 446) = 7;
  result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  v4 = MEMORY[0x24BED83F0] + 16;
  *(_QWORD *)(a1 + 464) = MEMORY[0x24BED83B8] + 16;
  *(_QWORD *)(a1 + 472) = v4;
  *(_DWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 500) = 16;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_QWORD *)(a1 + 544) = 0x1000000000;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 1984) = 0x1000000000;
  *(_QWORD *)(a1 + 1992) = 0;
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 2008) = a1 + 2024;
  *(_QWORD *)(a1 + 2016) = 0x400000000;
  *(_QWORD *)(a1 + 2056) = a1 + 2072;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2080) = 1;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  return result;
}

uint64_t sub_22F2839B0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v3 = sub_22E5BB098(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 40 * v5;
  result = *(_QWORD *)(v3 + 24);
  if (result)
  {
    if (result == v3)
    {
      *(_QWORD *)(v6 + 24) = v6;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 24) + 24))(*(_QWORD *)(v3 + 24), v6);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(v6 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = 0;
  }
  v8 = v4 + 40 * v5;
  v9 = *(_DWORD *)(v3 + 32);
  *(_BYTE *)(v8 + 36) = *(_BYTE *)(v3 + 36);
  *(_DWORD *)(v8 + 32) = v9;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_22F283A5C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F283AC8(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F283AC8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 40 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      v8 = *(_DWORD *)(v5 + 32);
      *(_BYTE *)(a2 + 36) = *(_BYTE *)(v5 + 36);
      *(_DWORD *)(a2 + 32) = v8;
      v5 += 40;
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
    v9 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)v4;
      v11 = 40 * v9;
      while (1)
      {
        result = *(_QWORD *)(v10 + v11 - 16);
        if (v10 + v11 - 40 == result)
          break;
        if (result)
        {
          v12 = 5;
LABEL_16:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
        }
        v11 -= 40;
        if (!v11)
          return result;
      }
      result = v10 + v11 - 40;
      v12 = 4;
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_22F283BB4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_22F283BBC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_22F283BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + 16;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = 0;
  v7 = v3;
  v4 = sub_22F283C88(v2, &v7, &v6);
  result = 0;
  if (v4)
    return *(_QWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22F283C20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

_QWORD *sub_22F283C28(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F283C88((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F283D38(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_22F283C88(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F283D38(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E5BB3BC((uint64_t)a1, v7);
  v9 = 0;
  sub_22F283C88((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_22F283DF4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F283C88((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22F283EC0(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F246C54(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F261244((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F283F24(uint64_t a1, __int128 *a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  __int128 v11;
  int v12;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v11 = *a2;
    v12 = *((_DWORD *)a2 + 4);
    v10 = sub_22E5BBF6C(a1, (unint64_t)&v11);
    v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v5 = *(_OWORD *)v10;
    v6 = *(_QWORD *)(v10 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1 + 24 * v3;
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_OWORD *)v4 = v5;
  v7 = *(_DWORD *)(a1 + 8) + 1;
  v8 = *(_QWORD *)a1 + 24 * v7;
  *(_DWORD *)(a1 + 8) = v7;
  return v8 - 24;
}

uint64_t sub_22F283FC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 25))
    sub_22F280698(a1);
  sub_22F283FFC(a1 + 40);
  return sub_22E487560(a1);
}

uint64_t sub_22F283FFC(uint64_t a1)
{
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(56 * *(unsigned int *)(a1 + 40)));
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(56 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F28404C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = sub_22E3CED3C((uint64_t *)a1, a2, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E3CEDDC(a1, (uint64_t)a2, a2, v14);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v12 = *a3;
    v11 = a3[1];
    *(_OWORD *)(result + 40) = a3[2];
    *(_OWORD *)(result + 8) = v12;
    *(_OWORD *)(result + 24) = v11;
    v10 = 1;
  }
  v13 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_22F2840EC(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 56 * v1;
        do
        {
          *v2 = -4096;
          v2 += 7;
          v3 -= 56;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E5BC4B0(result);
    }
  }
  return result;
}

uint64_t sub_22F284140(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 2432);
  if (v2 != (void *)(a1 + 2448))
    free(v2);
  v3 = *(void **)(a1 + 2352);
  if (v3 != (void *)(a1 + 2368))
    free(v3);
  v4 = *(void **)(a1 + 1248);
  if (v4 != (void *)(a1 + 1264))
    free(v4);
  v5 = *(void **)(a1 + 144);
  if (v5 != (void *)(a1 + 160))
    free(v5);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_22F2841C4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

uint64_t sub_22F28423C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v5 = v7;
  v6 = 0x400000000;
  sub_22F421BB4((uint64_t)&v5, *(_DWORD *)(a1 + 8));
  v2 = v6;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                 + 8 * **(unsigned int **)(a1 + 24)
                 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4)
                 + 16);
  if (v6 >= 2)
  {
    do
    {
      --v2;
      v3 = *(_QWORD *)(v3 + 8 * *(unsigned int *)(v3 + 8) + 32);
    }
    while (v2 > 1);
  }
  if (v5 != v7)
    free(v5);
  return v3;
}

uint64_t sub_22F2842FC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_22F28430C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F24C318(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2843A4(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F2843A4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5C29E8(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F284454(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F24C318(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F284508(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_22E5C38CC(a1, a2);
  result = (_QWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_22E5C3934((uint64_t)result, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_22F284568(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 48 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 48];
      if (&v4[v6 - 32] != v7)
        free(v7);
      v6 -= 48;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_22F2845F4(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F284660((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F284660(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v5 = *a1;
    v6 = 48 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8))
        sub_22E5C3144((uint64_t)a2, (const void **)v5);
      v5 += 48;
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 48 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 48);
        if ((void *)(v8 + v9 - 32) != v10)
          free(v10);
        v9 -= 48;
      }
      while (v9);
    }
  }
}

void sub_22F284710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
  v7 = *(unsigned int *)(a1 + 8);
  if (v6 + v7 > *(unsigned int *)(a1 + 12))
  {
    sub_22F2845F4(a1);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)a1 + 48 * v7);
    do
    {
      *v8 = v8 + 2;
      v8[1] = 0x400000000;
      if (*(_DWORD *)(v4 + 8))
        sub_22E5C3934((uint64_t)v8, v4);
      v4 += 48;
      v8 += 6;
    }
    while (v4 != a3);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + v6;
}

uint64_t sub_22F2847D8(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(8 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void sub_22F284814(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = 88 * a2;
    v3 = (_QWORD *)(a1 + 24);
    do
    {
      if ((*(v3 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (_QWORD *)*(v3 - 2);
        if (v3 != v4)
          free(v4);
      }
      v3 += 11;
      v2 -= 88;
    }
    while (v2);
  }
}

char **sub_22F284870(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F2848E4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FA65730;
  sub_22E3B3AD0(a1 + 4296);
  sub_22E3B3AD0(a1 + 4264);
  sub_22F284A50((char **)(a1 + 3432));
  sub_22F284B00((char **)(a1 + 3224));
  sub_22F284B64((char **)(a1 + 3048));
  sub_22F2847D8(a1 + 3008);
  sub_22F284BC8(a1 + 2976);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2952), (void *)(8 * *(unsigned int *)(a1 + 2968)));
  sub_22F284C8C(a1 + 2912);
  sub_22F284D50(a1 + 2888);
  free(*(void **)(a1 + 2680));
  sub_22E3B4EF4(a1 + 2704);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2648), (void *)(16 * *(unsigned int *)(a1 + 2664)));
  sub_22F284F54(a1 + 2624);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2624), (void *)(32 * *(unsigned int *)(a1 + 2640)));
  sub_22F284FB8(a1 + 2600);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2600), (void *)(56 * *(unsigned int *)(a1 + 2616)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2576), (void *)(16 * *(unsigned int *)(a1 + 2592)));
  sub_22F284FB8(a1 + 2552);
  llvm::deallocate_buffer(*(llvm **)(a1 + 2552), (void *)(56 * *(unsigned int *)(a1 + 2568)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2528), (void *)(24 * *(unsigned int *)(a1 + 2544)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2504), (void *)(32 * *(unsigned int *)(a1 + 2520)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2472), (void *)(16 * *(unsigned int *)(a1 + 2488)));
  MEMORY[0x23489D140](a1 + 48);
  return a1;
}

char **sub_22F284A50(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 200 * v3;
    v5 = v2 - 200;
    do
    {
      sub_22F284AB4((uint64_t)&v5[v4]);
      v4 -= 200;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F284AB4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_22E5C41C0(&v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

char **sub_22F284B00(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = v2 - 48;
    do
    {
      sub_22F244D40((uint64_t)&v5[v4]);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_22F284B64(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = v2 - 40;
    do
    {
      sub_22F2847D8((uint64_t)&v5[v4]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F284BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          sub_22F284C40(v5);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F284C40(llvm *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 3);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm *)((char *)this + 8));
  return llvm::deallocate_buffer(this, (void *)(v2 + 33));
}

uint64_t sub_22F284C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          sub_22F284D04(v5);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F284D04(llvm *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 3);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm *)((char *)this + 8));
  return llvm::deallocate_buffer(this, (void *)(v2 + 65));
}

uint64_t sub_22F284D50(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t)v3 + 8;
    do
    {
      if (*(_DWORD *)(v5 - 8) <= 0xFFFFFFFD)
        v5 = sub_22F284DC4(v5);
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = (void *)(32 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, v6);
  return a1;
}

uint64_t sub_22F284DC4(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(llvm **)a1;
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = (uint64_t)v3 + 8;
    do
    {
      if (*(_DWORD *)(v5 - 8) <= 0xFFFFFFFD)
        v5 = sub_22F284E40(v5);
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
    v3 = *(llvm **)a1;
    v6 = 40 * *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = 0;
  }
  llvm::deallocate_buffer(v3, (void *)v6);
  return a1;
}

uint64_t sub_22F284E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  void *v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
        {
          v7 = (void *)(*(_QWORD *)v5 + 33);
          sub_22F284EF0((uint64_t)v5 + 8);
          llvm::deallocate_buffer(*((llvm **)v5 + 1), (void *)(56 * *((unsigned int *)v5 + 6)));
          llvm::deallocate_buffer(v5, v7);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_22F284EF0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)result;
    v3 = 56 * v1;
    do
    {
      if (*(_DWORD *)v2 <= 0xFFFFFFFD)
      {
        v4 = *(_QWORD *)(v2 + 24);
        if (v4 != -8192 && v4 != -4096 && v4 != 0)
          result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 + 8));
      }
      v2 += 56;
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_22F284F54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)result;
    v3 = 32 * v1;
    do
    {
      if ((*(_QWORD *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = llvm::deallocate_buffer(*(llvm **)(v2 + 8), (void *)(168 * *(unsigned int *)(v2 + 24)));
      v2 += 32;
      v3 -= 32;
    }
    while (v3);
  }
  return result;
}

void sub_22F284FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

uint64_t sub_22F28501C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2850B8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5C4348(a1, v6);
  v8 = 0;
  sub_22F28501C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F285168(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F28501C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_22F285220(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F2852BC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5C4414(a1, v6);
  v8 = 0;
  sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F28536C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F285220(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x400000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F24C77C(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_22F285464(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5C4668(a1, v6);
  v8 = 0;
  sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F285514(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F258E38(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_22F2855D0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

_DWORD *sub_22F285604(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F285678(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F285714(a1, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = 0x2000000000;
    *((_QWORD *)v5 + 1) = 0;
  }
  return v5;
}

uint64_t sub_22F285678(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F285714(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5C4FE8(a1, v6);
  v8 = 0;
  sub_22F285678(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2857C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_DWORD **)result;
    v7 = 40 * v5;
    do
    {
      *v6 = -1;
      v6 += 10;
      v7 -= 40;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 8;
    do
    {
      v9 = *(_DWORD *)(v8 - 8);
      if (v9 <= 0xFFFFFFFD)
      {
        v12 = 0;
        sub_22F285678(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), v9, &v12);
        v11 = v12;
        *v12 = *(_DWORD *)(v8 - 8);
        *((_QWORD *)v11 + 1) = *(_QWORD *)v8;
        *((_OWORD *)v11 + 1) = *(_OWORD *)(v8 + 8);
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        ++*(_DWORD *)(v4 + 8);
        result = sub_22F284E40(v8);
      }
      v10 = v8 + 32;
      v8 += 40;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t *sub_22F285898(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 33, 8);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

_DWORD *sub_22F28598C(uint64_t a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_22F285A10(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F285AAC(a1, a2, v7);
    *v5 = *a2;
    v5[8] = 0;
    *((_QWORD *)v5 + 1) = 6;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = 0;
    *(_QWORD *)(v5 + 9) = 0xFFFFFFFFLL;
    *((_QWORD *)v5 + 6) = 0;
  }
  return v5;
}

uint64_t sub_22F285A10(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_DWORD *sub_22F285AAC(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5C50B4(a1, v6);
  v8 = 0;
  sub_22F285A10(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F285B5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 56 * v6;
    do
    {
      *v7 = -1;
      v7 += 14;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v13 = 0;
      sub_22F285A10(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v13);
      v10 = v13;
      *v13 = *(_DWORD *)a2;
      result = (uint64_t)sub_22F285C34((llvm::ValueHandleBase *)(v10 + 2), a2 + 8);
      ++*(_DWORD *)(v5 + 8);
      v11 = *(_QWORD *)(a2 + 24);
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a2 + 8));
    }
    a2 += 56;
  }
  return result;
}

llvm::ValueHandleBase *sub_22F285C34(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = 6;
  *((_QWORD *)this + 1) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8));
  v6 = *(_QWORD *)(a2 + 24);
  *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 5) = *(_QWORD *)(a2 + 40);
  return this;
}

uint64_t *sub_22F285CA4(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x23489D23C](a3 + 65, 8);
  v11 = v10;
  v12 = v10 + 64;
  if (a3)
    memcpy((void *)(v10 + 64), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_QWORD *)(v11 + 8) = 6;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 36) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v11 + 48) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22F285DAC(const void *a1, size_t a2, int *a3, uint64_t *a4, uint64_t *a5, int *a6, int *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v14 = MEMORY[0x23489D23C](a2 + 65, 8);
  v15 = v14;
  v16 = v14 + 64;
  if (a2)
    memcpy((void *)(v14 + 64), a1, a2);
  *(_BYTE *)(v16 + a2) = 0;
  *(_QWORD *)v15 = a2;
  v17 = *a3;
  v18 = *a4;
  v19 = *a5;
  v20 = *a6;
  v21 = *a7;
  *(_QWORD *)(v15 + 8) = 6;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = v20;
  *(_DWORD *)(v15 + 36) = v17;
  *(_DWORD *)(v15 + 40) = 1;
  *(_QWORD *)(v15 + 48) = v19;
  *(_DWORD *)(v15 + 56) = v21;
  sub_22E5BBDC4((llvm::ValueHandleBase *)(v15 + 8), v18);
  return v15;
}

_QWORD *sub_22F285E70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22F25DC64(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F25DD14((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_22F285F28(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F24C318(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F285FC0(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_BYTE *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_22F285FC0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5CB8D4(a1, v6);
  v8 = 0;
  sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F286070(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F24C318(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_22F286124(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F286238(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
  }
  return v5;
}

uint64_t sub_22F28619C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 88 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 88 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F286238(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5CB994(a1, v6);
  v8 = 0;
  sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_22F2862E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 88 * v6;
    do
    {
      *v7 = -4096;
      v7 += 11;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_22F28619C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x400000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F2528D0(v11, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

unint64_t sub_22F2863E0(unint64_t result, __int128 *a2, int *a3, __int128 *a4, char *a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v7 = result;
  v8 = *(unsigned int *)(result + 8);
  if (v8 >= *(_DWORD *)(result + 12))
  {
    v15 = *a2;
    v16 = *a3;
    v17 = *a4;
    v18 = *a5;
    v10 = *a7;
    v19 = *a6;
    v20 = v10;
    result = sub_22E3CD564(result, (unint64_t)&v15);
    v11 = (_OWORD *)(*(_QWORD *)v7 + ((unint64_t)*(unsigned int *)(v7 + 8) << 6));
    v12 = *(_OWORD *)result;
    v13 = *(_OWORD *)(result + 16);
    v14 = *(_OWORD *)(result + 48);
    v11[2] = *(_OWORD *)(result + 32);
    v11[3] = v14;
    *v11 = v12;
    v11[1] = v13;
  }
  else
  {
    v9 = *(_QWORD *)result + (v8 << 6);
    *(_OWORD *)v9 = *a2;
    *(_DWORD *)(v9 + 16) = *a3;
    *(_OWORD *)(v9 + 24) = *a4;
    *(_BYTE *)(v9 + 40) = *a5;
    *(_QWORD *)(v9 + 48) = *a6;
    *(_QWORD *)(v9 + 56) = *a7;
  }
  ++*(_DWORD *)(v7 + 8);
  return result;
}

_QWORD *sub_22F2864AC(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F2866D4((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F286788(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x400000000;
  }
  return v5;
}

int *sub_22F28651C(int *a1)
{
  int v2;
  int *v3;
  unsigned int v4;
  int *result;
  unsigned int v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 90;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 22;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[22 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[22 * v4];
  }
  return result;
}

uint64_t sub_22F28659C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2866D4(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 88 * v5;
}

uint64_t sub_22F2865FC(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)result = a9;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a5;
  *(_BYTE *)(result + 24) = a11;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = a7;
  v12 = &a7[a8];
  v13 = a9 + 16 * a10;
  *(_QWORD *)(result + 56) = v12;
  *(_QWORD *)(result + 64) = v13;
  if (a6)
    *(_DWORD *)(result + 40) = *a5;
  if (a11)
    *(_QWORD *)(result + 32) = a12;
  if (!a4 || *a3 == a2)
  {
    v18 = 0;
  }
  else
  {
    v14 = a3 + 1;
    v15 = 8 * a4 - 8;
    v16 = a5 + 1;
    do
    {
      a5 = v16;
      v17 = &a7[*(v16 - 1) - 1];
      v19 = *v17;
      a7 = v17 + 1;
      v18 = v19;
      *(_DWORD *)(result + 44) = v19;
      *(_QWORD *)(result + 48) = a7;
      if (a11)
        *(_QWORD *)(result + 32) += 8;
      *(_QWORD *)(result + 8) = v14;
      *(_QWORD *)(result + 16) = v16;
      if (!v15)
        break;
      v20 = *v14++;
      v15 -= 8;
      ++v16;
    }
    while (v20 != a2);
  }
  if (a7 == v12)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    v21 = *a5;
    *(_QWORD *)(result + 56) = &a7[v21];
    v13 = a9 + 16 * v18;
  }
  *(_QWORD *)result = v13;
  *(_DWORD *)(result + 40) = v21;
  return result;
}

uint64_t sub_22F2866D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 88 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 88 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F286788(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E5CD1BC((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2866D4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

void sub_22F286844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 360);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[11 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 11;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      v10 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = 0;
        sub_22F2866D4(a1, v10, &v14);
        v11 = v14;
        *v14 = *(_QWORD *)v4;
        v11[2] = 0x400000000;
        v11[1] = v11 + 3;
        v12 = (uint64_t)(v11 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_22F2528D0(v12, v4 + 8);
        *(_DWORD *)a1 += 2;
        v13 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v13)
          free(v13);
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

uint64_t sub_22F286950(uint64_t a1)
{
  sub_22F286994(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(88 * *(unsigned int *)(a1 + 16)));
  return a1;
}

void sub_22F286994(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v1 = 4;
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 16);
    if (!v1)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = 88 * v1;
  v4 = (_QWORD *)(v2 + 24);
  do
  {
    if ((*(v4 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v5 = (_QWORD *)*(v4 - 2);
      if (v4 != v5)
        free(v5);
    }
    v4 += 11;
    v3 -= 88;
  }
  while (v3);
}

uint64_t sub_22F286A0C(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;

  v14 = 0;
  result = sub_22F286AB0((uint64_t *)a2, a3, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F286B54(a2, a3, v14);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v13 = *a4;
    v12 = a4[1];
    *(_OWORD *)(result + 40) = a4[2];
    *(_OWORD *)(result + 8) = v13;
    *(_OWORD *)(result + 24) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 56 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_22F286AB0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 56 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 56 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F286B54(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5CE2B4(a1, v6);
  v8 = 0;
  sub_22F286AB0((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F286C00(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F286AB0((uint64_t *)v5, (_QWORD *)a2, &v12);
      v9 = v12;
      *v12 = *(_QWORD *)a2;
      v10 = *(_OWORD *)(a2 + 8);
      v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v9 + 5) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v9 + 3) = v11;
      *(_OWORD *)(v9 + 1) = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 56;
  }
  return result;
}

_QWORD *sub_22F286CC8(const void *a1, size_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = MEMORY[0x23489D23C](a2 + 33, 8);
  v7 = (_QWORD *)v6;
  v8 = v6 + 32;
  if (a2)
    memcpy((void *)(v6 + 32), a1, a2);
  *(_BYTE *)(v8 + a2) = 0;
  *v7 = a2;
  v7[1] = 6;
  v9 = *a3;
  v7[2] = 0;
  v7[3] = v9;
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v7 + 1));
  return v7;
}

int *sub_22F286D5C(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 10;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 2;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[2 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[2 * v4];
  }
  return result;
}

uint64_t sub_22F286DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64x2_t v4;
  unsigned int v5;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2 + 40 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_QWORD *)v3 = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(v3 + 8) = v4;
  *(int64x2_t *)(v3 + 24) = v4;
  sub_22F286E88(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = 0;
  return v2 + 40 * v5 - 40;
}

uint64_t sub_22F286E88(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(unsigned int **)result;
    v6 = 40 * v2;
    v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(_QWORD *)a2 = 1;
      *(int64x2_t *)(a2 + 8) = v11;
      *(int64x2_t *)(a2 + 24) = v11;
      result = (uint64_t)sub_22F286F3C((unsigned int *)a2, v5);
      v5 += 10;
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 40 * v7;
      v10 = v8 - 40;
      do
      {
        result = sub_22F2847D8(v10 + v9);
        v9 -= 40;
      }
      while (v9);
    }
  }
  return result;
}

unsigned int *sub_22F286F3C(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t i;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  __int128 v12;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) == 0)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v5;
      LODWORD(v5) = result[4];
      result[4] = a2[4];
      a2[4] = v5;
      return result;
    }
    v4 = *result;
    v6 = result;
    result = a2;
    goto LABEL_7;
  }
  if ((v4 & 1) == 0)
  {
    v6 = a2;
LABEL_7:
    v12 = *(_OWORD *)(v6 + 2);
    *v6 = v4 | 1;
    for (i = 2; i != 10; i += 2)
      *(_QWORD *)&v6[i] = *(_QWORD *)&result[i];
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v12;
    return result;
  }
  v8 = 0;
  v9 = (int *)(result + 2);
  v10 = (int *)(a2 + 2);
  do
  {
    v11 = *(_QWORD *)&v9[v8];
    *(_QWORD *)&v9[v8] = *(_QWORD *)&v10[v8];
    *(_QWORD *)&v10[v8] = v11;
    v8 += 2;
  }
  while (v8 != 8);
  return result;
}

void sub_22F287028(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F287094(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

void sub_22F287094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 48 * v2;
    do
    {
      sub_22F287114(a2, v5);
      v5 += 48;
      a2 += 48;
      v6 -= 48;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 48 * v7;
      v10 = v8 - 48;
      do
      {
        sub_22F244D40(v10 + v9);
        v9 -= 48;
      }
      while (v9);
    }
  }
}

__n128 sub_22F287114(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_22F287178(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (sub_22F25DC64(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

uint64_t sub_22F2871F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = v2 + 200 * *(unsigned int *)(a1 + 8);
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)(v3 + 132) = 2;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_BYTE *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 144) = 0u;
  sub_22F2872B8(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  v4 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  return v2 + 200 * v4 - 200;
}

void sub_22F2872B8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 200 * v2;
    do
    {
      sub_22F287114(a2, v5);
      v7 = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a2 + 64) = v7;
      v8 = *(_OWORD *)(v5 + 80);
      v9 = *(_OWORD *)(v5 + 96);
      v10 = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(a2 + 128) = v10;
      *(_OWORD *)(a2 + 80) = v8;
      *(_OWORD *)(a2 + 96) = v9;
      v11 = *(_OWORD *)(v5 + 144);
      v12 = *(_OWORD *)(v5 + 160);
      v13 = *(_OWORD *)(v5 + 176);
      *(_BYTE *)(a2 + 192) = *(_BYTE *)(v5 + 192);
      *(_OWORD *)(a2 + 160) = v12;
      *(_OWORD *)(a2 + 176) = v13;
      *(_OWORD *)(a2 + 144) = v11;
      v5 += 200;
      a2 += 200;
      v6 -= 200;
    }
    while (v6);
    v14 = *(_DWORD *)(a1 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)a1;
      v16 = 200 * v14;
      v17 = v15 - 200;
      do
      {
        sub_22F284AB4(v17 + v16);
        v16 -= 200;
      }
      while (v16);
    }
  }
}

_QWORD *sub_22F287368(_QWORD *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + v7 - 48);
      *(_QWORD *)(v6 + v7 - 40) = v6 + v7 - 16;
      result = (_QWORD *)(v6 + v7 - 40);
      *(result - 1) = v8;
      *(_OWORD *)(result + 1) = xmmword_22F44E350;
      if (*(_QWORD *)(v4 + v7 - 32))
        result = (_QWORD *)sub_22E3B2DB8((uint64_t)result, v4 + v7 - 40);
      v7 -= 48;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_22F28743C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5D0BA0(a1, v6);
  v8 = 0;
  sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F2874EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_22F258E38(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
        v10 = v12;
        v11 = *(_QWORD *)v4;
        *(_DWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = v11;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v4 + 16);
        *(_DWORD *)(v4 + 16) = 0;
        LODWORD(v11) = *(_DWORD *)(v10 + 20);
        *(_DWORD *)(v10 + 20) = *(_DWORD *)(v4 + 20);
        *(_DWORD *)(v4 + 20) = v11;
        LODWORD(v11) = *(_DWORD *)(v10 + 24);
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(v4 + 24);
        *(_DWORD *)(v4 + 24) = v11;
        ++*(_DWORD *)(v5 + 8);
        result = llvm::deallocate_buffer(0, (void *)(168 * v11));
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_22F2875F0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 168 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 168 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22F28768C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5D0C60(a1, v6);
  v8 = 0;
  sub_22F2875F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F28773C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 168 * v6;
    do
    {
      *v7 = -4096;
      v7 += 21;
      v8 -= 168;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v18 = 0;
      result = sub_22F2875F0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v18);
      v10 = v18;
      *v18 = *(_QWORD *)a2;
      v11 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v10 + 3) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      v12 = *(_OWORD *)(a2 + 40);
      v13 = *(_OWORD *)(a2 + 56);
      v14 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(v10 + 11) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(v10 + 9) = v14;
      *(_OWORD *)(v10 + 7) = v13;
      *(_OWORD *)(v10 + 5) = v12;
      v15 = *(_OWORD *)(a2 + 104);
      v16 = *(_OWORD *)(a2 + 120);
      v17 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(v10 + 19) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(v10 + 17) = v17;
      *(_OWORD *)(v10 + 15) = v16;
      *(_OWORD *)(v10 + 13) = v15;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 168;
  }
  return result;
}

uint64_t sub_22F28783C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 48 * *(unsigned int *)(v3 + 8);
}

_QWORD *sub_22F2878BC(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F28743C(a1, a2, v8);
    v7 = *a2;
    *((_DWORD *)v5 + 6) = 0;
    *v5 = v7;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_22F28792C(uint64_t a1, _QWORD *a2, unsigned int *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v8 = a1 + 4476;
  v9 = (uint64_t)(a2 + 34);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 34));
  result = llvm::OpenMPIRBuilder::createTargetInit();
  if (result)
  {
    result = sub_22E3CB840(v9, result, v11);
  }
  else
  {
    a2[40] = 0;
    a2[41] = 0;
  }
  if (v12)
    result = llvm::MetadataTracking::untrack();
  *(_BYTE *)(v8 + 1) = a4;
  if ((a4 & 1) == 0)
    return sub_22E5D1260(a1, (uint64_t)a2, *a3);
  return result;
}

uint64_t sub_22F287A00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v5;

  if ((a3 & 1) == 0)
    sub_22F287A90(a1, a2);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 272));
  result = llvm::OpenMPIRBuilder::createTargetDeinit();
  if (v5)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_22F287A90(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t RuntimeFunction;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  __int128 v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;

  v3 = result;
  v24 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 152) + 76) & 0x10) == 0 || !*(_DWORD *)(result + 4472))
  {
    result = sub_22F2880A4(result + 4504, *(_QWORD *)(a2 + 1624));
    v4 = (_QWORD *)result;
    if ((*(_BYTE *)(v3 + 4504) & 1) != 0)
    {
      v5 = v3 + 4512;
      v6 = 4;
    }
    else
    {
      v5 = *(_QWORD *)(v3 + 4512);
      v6 = *(_DWORD *)(v3 + 4520);
    }
    if (v5 + 320 * v6 != result)
    {
      v7 = *(unsigned int *)(result + 232);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(result + 224) - 16;
        v9 = 16 * v7;
        do
        {
          v20 = *(_OWORD *)(v8 + v9);
          RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
          v23 = v20;
          v22 = 257;
          result = (uint64_t)sub_22E479C7C(a2, RuntimeFunction, v11, (uint64_t)&v23, 2, (uint64_t)v21);
          v9 -= 16;
        }
        while (v9);
      }
      v12 = v4[4];
      v13 = v4[5];
      if (v13 != v12)
      {
        v14 = v4[5];
        do
        {
          v16 = *(_QWORD *)(v14 - 64);
          v14 -= 64;
          v15 = v16;
          v17 = v4[39];
          if (*(_DWORD *)(v17 + 8))
          {
            sub_22E5BC320(v4[39], a2 + 2904);
            sub_22F2840EC(v17);
          }
          *((_QWORD *)&v23 + 1) = 0;
          *(_QWORD *)&v23 = *(_QWORD *)(v13 - 56);
          *((_QWORD *)&v23 + 1) = sub_22F28CE84(a2, *(_QWORD *)(v15 + 48));
          v18 = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
          v22 = 257;
          result = (uint64_t)sub_22E479C7C(a2, v18, v19, (uint64_t)&v23, 2, (uint64_t)v21);
          v13 = v14;
        }
        while (v14 != v12);
      }
    }
  }
  return result;
}

uint64_t sub_22F287C7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Value **a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t Name;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t (**v22)();
  int *v23;
  const char *v24;
  __int16 v25;

  if (a7)
  {
    v14 = result;
    if (sub_22E5D1E74(*(_QWORD *)(*(_QWORD *)(result + 8) + 144), a2))
    {
      sub_22E5D1A28(v14, a2, a3, a4, (uint64_t)a5, a6, a8);
    }
    else
    {
      v15 = *(_DWORD *)(v14 + 4472);
      *(_DWORD *)(v14 + 4472) = 1;
      v21 = 0;
      sub_22E5D120C(v14 + 4480);
      v22 = off_24FA664F8;
      v23 = &v21;
      *(_QWORD *)(a8 + 16) = &v22;
      *(_BYTE *)(v14 + 4478) = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, llvm::Value **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 8))(v14, a2, a3, a4, a5, a6, 1, a8);
      *(_BYTE *)(v14 + 4478) = 0;
      *(_DWORD *)(v14 + 4472) = v15;
    }
    v16 = *(uint64_t **)(v14 + 8);
    Name = llvm::Value::getName(*a5);
    v19 = v18;
    v20 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ConstantInt::get();
    v25 = 773;
    v22 = (uint64_t (**)())Name;
    v23 = v19;
    v24 = "_exec_mode";
    llvm::GlobalVariable::GlobalVariable();
    return sub_22E6242E0(v16, v20);
  }
  return result;
}

uint64_t sub_22F287E14(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 4472);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      return 0;
    }
    else if (*(_BYTE *)(a1 + 4476))
    {
      return 1;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t sub_22F287E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22F27BC98(a1, a2, (uint64_t)"_", 1, (uint64_t)"$", 1);
  *(_QWORD *)v4 = off_24FA66268;
  *(_QWORD *)(v4 + 4328) = v4 + 4344;
  *(_QWORD *)(v4 + 4336) = 0x1000000000;
  *(_DWORD *)(v4 + 4472) = 2;
  *(_BYTE *)(v4 + 4476) = 1;
  *(_OWORD *)(v4 + 4477) = 0u;
  *(_QWORD *)(v4 + 4492) = 0;
  *(_QWORD *)(v4 + 4504) = 1;
  v5 = -1280;
  do
  {
    *(_QWORD *)(a1 + v5 + 5792) = -4096;
    v5 += 320;
  }
  while (v5);
  *(_QWORD *)(a1 + 5792) = 0;
  *(_QWORD *)(a1 + 5800) = a1 + 5816;
  *(_QWORD *)(a1 + 5808) = 0x400000000;
  *(_OWORD *)(a1 + 5848) = 0u;
  *(_QWORD *)(a1 + 5864) = a1 + 5880;
  *(_QWORD *)(a1 + 5872) = 0x400000000;
  v6 = *(_QWORD *)(a2 + 152);
  if (*(char *)(v6 + 671) < 0)
    v7 = *(_QWORD *)(v6 + 656);
  else
    v7 = *(unsigned __int8 *)(v6 + 671);
  if (v7)
  {
    llvm::OpenMPIRBuilder::createGlobalFlag();
    llvm::OpenMPIRBuilder::createGlobalFlag();
    llvm::OpenMPIRBuilder::createGlobalFlag();
    llvm::OpenMPIRBuilder::createGlobalFlag();
  }
  return a1;
}

llvm::Value *sub_22F287FD8(llvm::Value *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (*((_DWORD *)result + 1118))
    return sub_22F27EE90(result, a2, a3, a4);
  return result;
}

llvm::Value *sub_22F287FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _WORD *v6;
  _BYTE *v7;
  __int16 v8;
  llvm::Value *v9;
  llvm::Value *v11;
  llvm::Value *v12;
  _QWORD v13[3];

  v6 = (_WORD *)(a1 + 4477);
  v7 = (_BYTE *)(a1 + 4479);
  v13[0] = off_24FA66558;
  v13[1] = a1 + 4479;
  *(_QWORD *)(a5 + 16) = v13;
  v8 = *(_WORD *)(a1 + 4477);
  *(_WORD *)(a1 + 4477) = 0;
  v9 = sub_22F27C244(a1, a2);
  v12 = v9;
  *v6 = v8;
  if (*(_DWORD *)(a1 + 4472) && !*v7)
  {
    v11 = sub_22E5D1F80();
    sub_22F24C2B0(a1 + 4480, (uint64_t *)&v12)[1] = v11;
  }
  return v9;
}

uint64_t sub_22F2880A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_22F2896DC(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 320 * v5;
}

uint64_t sub_22F288104(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[3];
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a2 + 320))
  {
    v8[2] = 0;
    v9 = result;
    v10 = a3;
    v11 = a4;
    v12 = a5;
    v13 = a6;
    v14 = a7;
    v15 = a8;
    v8[0] = &v9;
    v8[1] = sub_22E5DE2CC;
    return sub_22F27B464(v8, a2);
  }
  return result;
}

llvm::Value *sub_22F288154(llvm::Value *result, uint64_t a2, unsigned int a3, int a4)
{
  llvm::Value *v6;
  uint64_t RuntimeFunction;
  llvm::Value *v8;
  _WORD v9[20];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 320))
  {
    v6 = result;
    sub_22F27E384(a4);
    v10[0] = sub_22E59F7E4(v6, a2, a3);
    v10[1] = sub_22E59F964((uint64_t)v6, a2, a3);
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction();
    v9[16] = 257;
    return sub_22E479C7C(a2, RuntimeFunction, v8, (uint64_t)v10, 2, (uint64_t)v9);
  }
  return result;
}

llvm::Value *sub_22F288234(uint64_t a1)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Function = llvm::Module::getFunction();
  if (Function
    || (v5 = llvm::FunctionType::get(),
        v7[0] = "__kmpc_get_hardware_num_threads_in_block",
        v8 = 259,
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 200),
        Function = llvm::User::operator new((llvm::User *)0x78),
        MEMORY[0x23489F6FC](Function, v5, 0, 0xFFFFFFFFLL, v7, v6)))
  {
    v3 = *(_QWORD *)(Function + 24);
  }
  else
  {
    v3 = 0;
  }
  v7[0] = "nvptx_num_threads";
  v8 = 259;
  return sub_22E462B78((uint64_t *)(a1 + 272), v3, Function, 0, 0, (uint64_t)v7, 0);
}

uint64_t sub_22F288314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a3;
  v5 = *(_QWORD *)(a3 + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v29 = 0;
    v7 = sub_22E491354((unsigned int *)&v29, v5);
    if ((*(_BYTE *)(v7 + 18) & 0x10) != 0)
    {
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v7)
        {
          v15 = *(_DWORD *)(v7 + 16);
          if ((v15 & 0xFE) == 0x28)
            continue;
        }
        v7 = sub_22F10CF48(v7);
        v15 = *(_DWORD *)(v7 + 16);
      }
      while ((v15 & 0x100000) != 0);
    }
    v8 = *(_QWORD *)(v7 + 32);
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v17 = *(uint64_t **)v16;
      v18 = *(unsigned int *)(v16 + 8);
      v19 = *(uint64_t **)v16;
      if ((_DWORD)v18)
      {
        v20 = 8 * v18;
        v19 = *(uint64_t **)v16;
        while (*(_WORD *)(*v19 + 32) != 478)
        {
          ++v19;
          v20 -= 8;
          if (!v20)
            goto LABEL_4;
        }
      }
      if (v19 != &v17[v18])
      {
        do
        {
          v28 = *v17++;
          v27 = v28;
        }
        while (*(_WORD *)(v28 + 32) != 478);
        if (*(_DWORD *)(v27 + 36) == 46)
          v8 = sub_22EF5DD84(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v8, 1);
      }
    }
LABEL_4:
    v9 = sub_22EF5B848(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v8, 0);
    LODWORD(v29) = v29 & 0x7FF | 0x10002;
    v10 = sub_22F40A8A8((uint64_t)&v29, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), v9);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x3E)
    {
      v12 = *(_QWORD *)(v3 + 40);
      if ((v12 & 7) != 0)
        v13 = 0;
      else
        v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      return sub_22EFC4364(v11, 0, *(_DWORD *)(v3 + 24), v13, v10, 5);
    }
    else
    {
      v21 = *(_QWORD *)(v3 + 16);
      v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
      if ((v21 & 4) != 0)
        v22 = (_QWORD *)*v22;
      v23 = sub_22EFBB464(v3);
      v24 = *(_QWORD *)(v3 + 40);
      if ((v24 & 7) != 0)
        v25 = 0;
      else
        v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      return sub_22EFBF080(v11, (uint64_t)v22, v23, *(_DWORD *)(v3 + 24), v25, v10, 0, 0, 0);
    }
  }
  return v3;
}

void sub_22F288524(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _BYTE *a6, unint64_t a7)
{
  unint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::PointerType ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE v25[32];
  __int16 v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v27 = v29;
  v28 = 0x400000000;
  if (a7 >= 5)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if ((_DWORD)a7)
  {
    v9 = 0;
    v10 = (uint64_t *)(a2 + 272);
    v11 = a6;
    do
    {
      if (*(_DWORD *)(a4 + 8) >= 0x100u && v9 >= (*(_DWORD *)(a4 + 12) - 1))
      {
        sub_22E5B5498((uint64_t)&v27, v11, &a6[8 * a7]);
        break;
      }
      v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v9 + 8);
      v13 = *(llvm::PointerType ****)v11;
      if (*(_BYTE *)(v12 + 8) == 15)
      {
        if ((*v13)[3])
          v14 = llvm::PointerType::get();
        else
          v14 = llvm::PointerType::get(**v13, 0);
        v26 = 257;
        v15 = sub_22E3C1338(v10, (uint64_t)v13, v14, (uint64_t)v25);
        v26 = 257;
        v16 = sub_22E3C1338(v10, v15, v12, (uint64_t)v25);
        v17 = v16;
        v18 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          *((_QWORD *)v27 + v28) = v17;
          v18 = v28;
        }
        else
        {
          *((_QWORD *)v27 + v28) = v16;
        }
      }
      else
      {
        v18 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          *((_QWORD *)v27 + v28) = v13;
          v19 = v28 + 1;
          goto LABEL_15;
        }
        *((_QWORD *)v27 + v28) = v13;
      }
      v19 = v18 + 1;
LABEL_15:
      LODWORD(v28) = v19;
      ++v9;
      v11 += 8;
    }
    while (a7 != v9);
  }
  sub_22F282F28(a1, a2, a3, a4, a5, (uint64_t)v27, v28);
  if (v27 != v29)
    free(v27);
}

void sub_22F288760(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;

  v15 = 0;
  v6 = sub_22F2896DC(a2, *a3, &v15);
  v7 = v15;
  if (v6)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_DWORD *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 320 * v9;
  }
  else
  {
    sub_22F289630((_DWORD *)a2, v15, a3);
    v7 = v12;
    v13 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v14 = 4;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_DWORD *)(a2 + 16);
    }
    v11 = v13 + 320 * v14;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
}

uint64_t sub_22F28881C(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *(_QWORD *)a2;
  v13 = 0;
  result = sub_22F2899F0(a1, &v12, &v13, (uint64_t)&v10);
  if (v11)
  {
    v5 = v10;
    v6 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_22E5DE1DC((void **)(a1 + 24), a2);
    }
    else
    {
      v7 = *a2;
      v8 = a2[1];
      v9 = a2[3];
      v6[2] = a2[2];
      v6[3] = v9;
      *v6 = v7;
      v6[1] = v8;
      result = (uint64_t)(v6 + 4);
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 6) - 1;
  }
  return result;
}

__n128 sub_22F2888C0@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>, __n128 result@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  __int128 v16;
  llvm::Constant *v17;
  uint64_t v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  __int16 v38;

  if (a3 && sub_22F282498((uint64_t)a3))
  {
    sub_22EFC8E88((uint64_t)a3);
    switch(*(_DWORD *)(sub_22E5C53F0(v9) + 36))
    {
      case 0:
      case 1:
      case 4:
      case 5:
      case 8:
      case 9:
        goto LABEL_3;
      default:
        v17 = (llvm::Constant *)sub_22E66C868(a2[18] + 280, a3[6], 0);
        v18 = llvm::User::operator new((llvm::User *)0x58);
        llvm::Constant::getNullValue(v17, v19);
        v20 = 0;
        v21 = a3[5];
        v22 = "";
        if ((v21 & 7) == 0)
        {
          v23 = v21 & 0xFFFFFFFFFFFFFFF8;
          if (v23)
          {
            v24 = *(_DWORD **)(v23 + 16);
            v25 = *v24;
            v22 = (const char *)(v24 + 4);
            v20 = v25;
          }
        }
        v38 = 261;
        v37[0] = v22;
        v37[1] = v20;
        llvm::GlobalVariable::GlobalVariable();
        v26 = sub_22EF5B404(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144), (unint64_t)a3, 0);
        llvm::GlobalObject::setAlignment();
        v27 = llvm::PointerType::get();
        v38 = 257;
        *(_QWORD *)a4 = sub_22E3C1338(a2 + 34, v18, v27, (uint64_t)v37);
        *(_QWORD *)(a4 + 8) = v17;
        *(_QWORD *)(a4 + 16) = v26;
        *(_DWORD *)(a4 + 24) = 0;
        break;
    }
    goto LABEL_4;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 76) & 0x10) != 0
    || ((v10 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3),
         v11 = sub_22F2880A4(a1 + 4504, a2[203]),
         v12 = v11,
         (*(_BYTE *)(a1 + 4504) & 1) != 0)
      ? (v13 = a1 + 4512, v14 = 4)
      : (v13 = *(_QWORD *)(a1 + 4512), v14 = *(_DWORD *)(a1 + 4520)),
        v13 + 320 * v14 == v11))
  {
LABEL_3:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 16) = 0;
LABEL_4:
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    return result;
  }
  v15 = sub_22F288C3C(v11 + 8, v10);
  if (*(_QWORD *)(v12 + 40) == v15)
  {
    if ((*(_BYTE *)(v10 + 29) & 1) != 0)
    {
      result.n128_f64[0] = sub_22EFC8E88(v10);
      v29 = *v28;
      if ((*(_BYTE *)(v10 + 29) & 1) != 0)
      {
        result.n128_f64[0] = sub_22EFC8E88(v10);
        v30 = *(_QWORD *)v31 + 8 * *(unsigned int *)(v31 + 8);
      }
      else
      {
        v30 = 0;
      }
      while (1)
      {
        v32 = v29;
        if ((unint64_t)v29 >= v30)
        {
          v33 = (uint64_t *)v30;
          if ((uint64_t *)v30 == v29)
            goto LABEL_3;
          while (*(_WORD *)(*v33 + 32) != 480)
          {
            if (++v33 == v29)
              goto LABEL_3;
          }
          v32 = v29;
        }
        else
        {
          while (*(_WORD *)(*v32 + 32) != 480)
          {
            if (++v32 == (uint64_t *)v30)
              goto LABEL_3;
          }
          v33 = (uint64_t *)v30;
        }
        if (v32 == v33)
          break;
        do
        {
          v35 = *v29++;
          v34 = v35;
        }
        while (*(_WORD *)(v35 + 32) != 480);
        v36 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)(v34 + 40) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v34 + 40) + 16), result);
        v15 = sub_22F288C3C(v12 + 8, v36);
        if (*(_QWORD *)(v12 + 40) != v15)
          goto LABEL_12;
      }
    }
    goto LABEL_3;
  }
LABEL_12:
  v16 = *(_OWORD *)(v15 + 32);
  *(_OWORD *)a4 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(a4 + 16) = v16;
  result = *(__n128 *)(v15 + 48);
  *(__n128 *)(a4 + 32) = result;
  return result;
}

unint64_t sub_22F288C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_22F25AFD8((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + ((unint64_t)*(unsigned int *)(v5 + 8) << 6);
}

void sub_22F288CA0(uint64_t a1, uint64_t a2)
{
  sub_22F288CD8((_DWORD *)(a1 + 4504), *(_QWORD *)(a2 + 1624));
  sub_22E5A0014(a1, a2);
}

uint64_t sub_22F288CD8(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int v5;
  _QWORD *v6;

  v6 = 0;
  result = sub_22F2896DC((uint64_t)a1, a2, &v6);
  if ((_DWORD)result)
  {
    v4 = v6;
    result = sub_22F2895A0((uint64_t)(v6 + 1));
    *v4 = -8192;
    v5 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v5;
  }
  return result;
}

llvm::Value *sub_22F288D34(llvm::Value *result, uint64_t a2, uint64_t a3, _DWORD *a4, llvm::Value **a5)
{
  llvm::Value *v8;
  unint64_t v9;

  if (!*((_DWORD *)result + 1118))
  {
    *a4 = 0;
    v8 = sub_22F288234(a2);
    v9 = sub_22EF60A6C(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 144), 32, 0);
    result = sub_22E50EA40(a2, v8, v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * **(unsigned int **)(a3 + 24) + 16) + 8), *(_DWORD *)(a3 + 12));
    *a5 = result;
  }
  return result;
}

uint64_t sub_22F288DBC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  *a4 = 0;
  v10 = 32;
  v9 = 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 144) + 144);
  v7 = sub_22EF60A6C(v6, 32, 0);
  result = sub_22EFF8FB0(v6, (uint64_t)&v9, v7, 0);
  *a5 = result;
  return result;
}

BOOL sub_22F288E24(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  result = sub_22F282498(a2);
  if (result)
  {
    sub_22EFC8E88(a2);
    v7 = *(int *)(sub_22E5C53F0(v6) + 36);
    if (v7 > 8)
    {
      return 0;
    }
    else
    {
      *a3 = dword_22F45B2C0[v7];
      return 1;
    }
  }
  return result;
}

uint64_t sub_22F288E90(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  llvm::Constant *v14;
  llvm::Type *v15;

  if (*(_DWORD *)(a1 + 5808))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v4 = sub_22F368234(v3, "_openmp_teams_reduction_type_$_", 0x1FuLL, 2);
    sub_22EFC3340(v4);
    v5 = *(unsigned int *)(a1 + 5808);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(a1 + 5800);
      if (v4)
        v7 = v4 + 64;
      else
        v7 = 0;
      v8 = 8 * v5;
      do
      {
        v9 = *v6++;
        v10 = sub_22EF6477C(v3, v9);
        v11 = sub_22EF579A8(v3, v10, 0);
        v12 = sub_22EFC2D88(v3, v7, 0, 0, 0, v10, (uint64_t)v11, 0, 0, 0);
        *(_DWORD *)(v12 + 28) &= 0xFFFF9FFF;
        sub_22EFCCFA0(v4 + 64, v12);
        v8 -= 8;
      }
      while (v8);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    v13 = sub_22EF6477C(v3, v4);
    v14 = (llvm::Constant *)sub_22E66C868(*(_QWORD *)(a1 + 8) + 280, v13, 0);
    llvm::User::operator new((llvm::User *)0x58);
    llvm::Constant::getNullValue(v14, v15);
    llvm::GlobalVariable::GlobalVariable();
    llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
    llvm::GlobalVariable::setInitializer();
  }
  return sub_22E59EC8C(a1);
}

const char *sub_22F289048()
{
  return "__omp_outlined__";
}

uint64_t sub_22F289058()
{
  return 1;
}

void sub_22F289064(uint64_t a1)
{
  sub_22F28945C(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22F289088(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = (_QWORD *)sub_22F2891B4(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = sub_22F289260((_DWORD *)a2, a3, v16);
    v9 = result;
    *result = *a3;
    result[1] = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_22F289150(uint64_t a1, const void **a2, const void **a3)
{
  const void **v5;
  const void *v6;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 16;
  *(_DWORD *)(a1 + 24) = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = *v5++;
      sub_22E3BA850(a1, v6);
    }
    while (v5 != a3);
  }
  return a1;
}

uint64_t sub_22F2891B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F289260(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E5DBC4C((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2891B4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F28931C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F2891B4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

int *sub_22F2893E4(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 18;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

uint64_t sub_22F28945C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_24FA66268;
  v2 = *(void **)(a1 + 5864);
  if (v2 != (void *)(a1 + 5880))
    free(v2);
  v3 = *(void **)(a1 + 5800);
  if (v3 != (void *)(a1 + 5816))
    free(v3);
  sub_22F2894F0(a1 + 4504);
  llvm::deallocate_buffer(*(llvm **)(a1 + 4480), (void *)(16 * *(unsigned int *)(a1 + 4496)));
  v4 = *(void **)(a1 + 4328);
  if (v4 != (void *)(a1 + 4344))
    free(v4);
  return sub_22F2848E4(a1);
}

uint64_t sub_22F2894F0(uint64_t a1)
{
  sub_22F289534(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(320 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22F289534(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v2 = result + 8;
    v1 = 4;
  }
  else
  {
    v1 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v1)
      return result;
    v2 = *(_QWORD *)(result + 8);
  }
  v3 = 320 * v1;
  result = v2 + 8;
  do
  {
    if ((*(_QWORD *)(result - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
      result = sub_22F2895A0(result);
    result += 320;
    v3 -= 320;
  }
  while (v3);
  return result;
}

uint64_t sub_22F2895A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v2)
  {
    v3 = sub_22F283FFC(v2);
    MEMORY[0x2348A0E9C](v3, 0x1020C40355347DDLL);
  }
  v4 = *(void **)(a1 + 216);
  if (v4 != (void *)(a1 + 232))
    free(v4);
  v5 = *(void **)(a1 + 168);
  if (v5 != (void *)(a1 + 184))
    free(v5);
  v6 = *(void **)(a1 + 112);
  if (v6 != *(void **)(a1 + 104))
    free(v6);
  if (*(_BYTE *)(a1 + 96))
  {
    sub_22F244D40(a1 + 48);
    *(_BYTE *)(a1 + 96) = 0;
  }
  return sub_22F244D40(a1);
}

double sub_22F289630(_DWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  double result;

  v4 = sub_22F289790(a1, a3, a2);
  *v4 = *a3;
  result = 0.0;
  *(_OWORD *)(v4 + 31) = 0u;
  *(_OWORD *)(v4 + 29) = 0u;
  *(_OWORD *)(v4 + 27) = 0u;
  *(_OWORD *)(v4 + 25) = 0u;
  *(_OWORD *)(v4 + 23) = 0u;
  *(_OWORD *)(v4 + 21) = 0u;
  *(_OWORD *)(v4 + 19) = 0u;
  *(_OWORD *)(v4 + 17) = 0u;
  *(_OWORD *)(v4 + 15) = 0u;
  *(_OWORD *)(v4 + 13) = 0u;
  *(_OWORD *)(v4 + 11) = 0u;
  *(_OWORD *)(v4 + 9) = 0u;
  *(_OWORD *)(v4 + 7) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 1) = 0u;
  *(_OWORD *)(v4 + 33) = 0u;
  *(_OWORD *)(v4 + 35) = 0u;
  v4[14] = v4 + 18;
  v4[15] = v4 + 18;
  *((_DWORD *)v4 + 32) = 4;
  v4[22] = v4 + 24;
  *((_DWORD *)v4 + 47) = 4;
  v4[28] = v4 + 30;
  *((_DWORD *)v4 + 59) = 4;
  v4[38] = 0;
  v4[39] = 0;
  v4[37] = 0;
  return result;
}

uint64_t sub_22F2896DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 320 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 320 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_22F289790(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_22E5DDED0((uint64_t)a1, v6);
  v8 = 0;
  sub_22F2896DC((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_22F28984C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 1288);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[40 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 40;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22F2896DC((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      sub_22F289928((uint64_t)(v11 + 1), (uint64_t)(a2 + 1));
      *v5 += 2;
      result = sub_22F2895A0((uint64_t)(a2 + 1));
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_22F289928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_22F287114(a1, a2);
  *(_BYTE *)(v4 + 48) = 0;
  v5 = v4 + 48;
  *(_BYTE *)(v5 + 48) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    sub_22F287114(v5, a2 + 48);
    *(_BYTE *)(a1 + 96) = 1;
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x400000000;
  if (*(_DWORD *)(a2 + 176))
    sub_22F24C77C(a1 + 168, a2 + 168);
  *(_QWORD *)(a1 + 216) = a1 + 232;
  *(_QWORD *)(a1 + 224) = 0x400000000;
  if (*(_DWORD *)(a2 + 224))
    sub_22E5DE08C(a1 + 216, a2 + 216);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v6;
  return a1;
}

uint64_t sub_22F2899F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F25AFD8((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22E4D1B3C(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

void sub_22F289A80(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_22F289AAC()
{
  return 0;
}

uint64_t sub_22F289ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22EF5DF94(*(_QWORD *)(a1 + 144), a5);
  return llvm::ConstantInt::get();
}

void sub_22F289AE4()
{
  JUMPOUT(0x22F289AD4);
}

void sub_22F289AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_22F289B04(a1, a3, a4);
  JUMPOUT(0x22F289ACCLL);
}

uint64_t sub_22F289B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned __int8 *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  v6 = sub_22F28AC18(a1 + 3624, (uint64_t)v10);
  LOWORD(result) = *(_WORD *)(v6 + 16);
  if (!(_WORD)result)
  {
    v8 = (unsigned __int8 *)sub_22E624994(a1, a2, a3);
    LOWORD(result) = sub_22F3F16EC(*(_QWORD *)(a1 + 144), v8, v9);
    *(_WORD *)(v6 + 16) = result;
  }
  return (unsigned __int16)result;
}

unint64_t sub_22F289B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int *v5;

  v2 = *(_QWORD *)(a1 + 184);
  if ((*(_BYTE *)(v2 + 1348) & 3) == 0)
    return 0;
  v4 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((sub_22E4EE1BC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0 || sub_22E4EE230(*v4))
    v4 = (uint64_t *)(sub_22F10ACF8(*v4) & 0xFFFFFFFFFFFFFFF0);
  v5 = (unsigned int *)(v2 + 1348);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
    sub_22F289A80(a1, (uint64_t)v5);
  return ((unint64_t)*v5 >> 5) & 0xF3;
}

unint64_t sub_22F289C48(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v3;

  v1 = *(_QWORD *)(a1 + 184);
  if ((*(_BYTE *)(v1 + 1400) & 3) == 0)
    return 0;
  v3 = (unsigned int *)(v1 + 1400);
  sub_22F289A80(a1, v1 + 1400);
  return ((unint64_t)*v3 >> 5) & 0xF3;
}

llvm::Value *sub_22F289CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(a1 + 272);
  v5 = *(_QWORD *)(a1 + 88);
  v11 = 257;
  v6 = sub_22E3C1740((uint64_t *)(a1 + 272), 47, a2, v5, (uint64_t)v10);
  v7 = sub_22F29B990();
  if (v7)
    v8 = *(_QWORD *)(v7 + 24);
  else
    v8 = 0;
  v12[0] = v6;
  v12[1] = a3;
  v11 = 257;
  return sub_22E462B78(v4, v8, v7, (uint64_t)v12, 2, (uint64_t)v10, 0);
}

uint64_t sub_22F289D78(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];
  __int16 v10;

  if ((*a2 & 3) == 0)
    return 0;
  sub_22F289A80(a1[18], (uint64_t)a2);
  if ((*a2 & 4) != 0)
  {
    if (v7)
    {
      sub_22F289CA4((uint64_t)a1, a3, v7);
    }
    else
    {
      v8 = a1[11];
      v10 = 257;
      sub_22E3C1740(a1 + 34, 47, a3, v8, (uint64_t)v9);
    }
  }
  return (*(_DWORD *)a2 >> 5) & 0xF3 | (*(_DWORD *)a2 >> 1) & 0xCu;
}

uint64_t sub_22F289E38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int16 v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  __int16 v11;

  v4 = a2;
  if (a2 >= 0x10000)
    v6 = llvm::ConstantInt::get();
  else
    v6 = 0;
  if ((v4 & 2) != 0)
  {
    v8 = sub_22F289EE8(a3, a1);
    if (v6)
    {
      sub_22F289CA4(a1, v8, v6);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 88);
      v11 = 257;
      sub_22E3C1740((uint64_t *)(a1 + 272), 47, v8, v9, (uint64_t)v10);
    }
  }
  return v4 >> 2;
}

uint64_t sub_22F289EE8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _OWORD v4[3];
  _QWORD v5[6];
  int v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 24) & 3) == 0)
    return *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  v4[2] = *(_OWORD *)(a1 + 32);
  v6 = 0;
  v7 = 0;
  sub_22E5DEBB0(v5, v4, &v6, a2, 1);
  return v5[0];
}

uint64_t sub_22F289F48(uint64_t a1, unsigned int a2, uint64_t a3, _OWORD *a4, __n128 a5)
{
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[3];
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  __int128 v19;

  sub_22E5DED80(a1, (unsigned __int8 *)a3, &v18, a5);
  v9 = v18;
  v17 = v19;
  v10 = a4[1];
  v15[0] = *a4;
  v15[1] = v10;
  v15[2] = a4[2];
  v16[0] = sub_22F289E38(a1, a2, (uint64_t)v15);
  v16[1] = v11;
  v12 = *(_QWORD *)(a3 + 8);
  v13 = sub_22E50E650(a1, (unsigned __int8 *)a3);
  return sub_22E5DF144(a1, v9, v12, &v17, v16, v13);
}

uint64_t sub_22F289FF0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[3];
  _QWORD v17[2];
  _QWORD v18[2];

  v18[0] = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), a4);
  v18[1] = v12;
  v13 = a5[1];
  v16[0] = *a5;
  v16[1] = v13;
  v16[2] = a5[2];
  v17[0] = sub_22F289E38(a1, a2, (uint64_t)v16);
  v17[1] = v14;
  return sub_22E5DF144(a1, a3, a4, v18, v17, a6);
}

uint64_t sub_22F28A088(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _OWORD v15[3];
  _QWORD v16[2];

  v10 = a5[1];
  v15[0] = *a5;
  v15[1] = v10;
  v15[2] = a5[2];
  v16[0] = sub_22F289E38(a1, a2, (uint64_t)v15);
  v16[1] = v11;
  v14[0] = sub_22E5DE8CC(*(_QWORD *)(a1 + 144), a4);
  v14[1] = v12;
  return sub_22E5DF144(a1, a3, a4, v16, v14, a6);
}

uint64_t sub_22F28A10C(uint64_t a1, unsigned int a2, uint64_t a3, __int128 *a4, uint64_t *a5)
{
  uint64_t *v10;
  uint64_t v11;
  llvm::Type *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type **v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[3];
  _OWORD v25[3];
  _QWORD v26[4];
  __int16 v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;

  v10 = (uint64_t *)(a1 + 272);
  v11 = *a5;
  v12 = (llvm::Type *)a5[1];
  v13 = a5[2];
  v30 = *(_OWORD *)(a5 + 3);
  v27 = 257;
  v14 = a5[5];
  *(_QWORD *)&v28 = v11;
  *((_QWORD *)&v28 + 1) = v12;
  v31 = v14;
  v29 = v13;
  v15 = sub_22E5E04B0(a1 + 272, (uint64_t)&v28);
  v16 = (llvm::Type **)sub_22E3C3200(v10, v12, v15, (63 - __clz(v13)) | 0x100u, 0, (uint64_t)v26);
  if ((a2 & 2) != 0)
  {
    v20 = *((_OWORD *)a5 + 1);
    v25[0] = *(_OWORD *)a5;
    v25[1] = v20;
    v25[2] = *((_OWORD *)a5 + 2);
    *(_QWORD *)&v28 = sub_22F289E38(a1, a2, (uint64_t)v25);
    *((_QWORD *)&v28 + 1) = v21;
    v22 = a4[1];
    v24[0] = *a4;
    v24[1] = v22;
    v24[2] = a4[2];
    v26[0] = sub_22F289E38(a1, a2, (uint64_t)v24);
    v26[1] = v23;
    v16 = (llvm::Type **)sub_22E5DF144(a1, v16, a3, &v28, v26, 0);
  }
  v28 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v30 = *(__int128 *)((char *)a4 + 24);
  v31 = *((_QWORD *)a4 + 5);
  v29 = v17;
  v18 = sub_22E5E04B0((uint64_t)v10, (uint64_t)&v28);
  return sub_22E3C1B6C(v10, v16, v18, (63 - __clz(v17)) | 0x100u);
}

uint64_t sub_22F28A290(uint64_t *a1, llvm::Value *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v8;

  sub_22F289A80((uint64_t)a1, (uint64_t)a3);
  return sub_22E5DF610(a1, a2, (*a3 >> 9) & 0xF, a4, v8);
}

uint64_t sub_22F28A2EC(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 184) + 1380);
  if ((v2 & 3) == 0)
    goto LABEL_22;
  v4 = sub_22F36FC78(*(_QWORD *)(a1 + 144), a2);
  v5 = (v2 >> 9) & 0xF;
  v6 = (v2 >> 2) & 1;
  v7 = (v2 >> 7) & 3;
  v8 = sub_22EF5E978(*(_QWORD *)(a1 + 144), v4);
  v9 = (unsigned __int16)(v2 >> 13);
  if (v7 != 3)
    v9 = 0;
  if (v7 == 1)
    v10 = v8;
  else
    v10 = v9;
  if ((*(_BYTE *)(v4 + 29) & 1) != 0)
  {
    v16 = v8;
    sub_22EFC8E88(v4);
    v18 = *(uint64_t **)v17;
    v19 = *(unsigned int *)(v17 + 8);
    v20 = *(uint64_t **)v17;
    if ((_DWORD)v19)
    {
      v21 = 8 * v19;
      v20 = *(uint64_t **)v17;
      while (*(_WORD *)(*v20 + 32) != 343)
      {
        ++v20;
        v21 -= 8;
        if (!v21)
          goto LABEL_8;
      }
    }
    if (v20 != &v18[v19])
    {
      do
      {
        v23 = *v18++;
        v22 = (_DWORD *)v23;
      }
      while (*(_WORD *)(v23 + 32) != 343);
      v25 = v22[9];
      v24 = v22[10];
      v26 = v22[11];
      if (v25)
      {
        if (v25 == 1)
        {
LABEL_22:
          v14 = 0;
          v13 = 0;
          v11 = 0;
          return v14 | v11 | v13;
        }
        if (v25 == 3)
          v27 = 2;
        else
          v27 = 3;
        if (((*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 16) | (unint64_t)((uint64_t)*(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 18) << 16)) & 0x8000000000000000) == 0)
          v5 = v27;
        else
          v5 = 5;
      }
      if (v26 == 1)
      {
        v16 = 0;
      }
      else if (v26 != 2)
      {
        if (v26 == 3)
          v16 = v22[12];
        else
          v16 = v10;
      }
      if (v24)
        v6 = v24 == 2;
      v10 = v16;
    }
  }
LABEL_8:
  v11 = (v5 << 6) & 0x7FFFFF00 | (v10 << 16);
  if (v6)
    v12 = 15;
  else
    v12 = 13;
  v13 = v12 & 0xFFFFFF3F | ((v5 & 3) << 6);
  v14 = 0x100000000;
  return v14 | v11 | v13;
}

uint64_t sub_22F28A490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v14[32];
  __int16 v15;

  result = sub_22E5DFBAC(a1, a3);
  if ((result & 0xFF00000000) != 0)
  {
    v10 = result;
    if (result >= 0x10000)
    {
      result = llvm::ConstantInt::get();
      v11 = result;
      if ((v10 & 2) == 0)
        goto LABEL_10;
      if (result)
      {
        result = (uint64_t)sub_22F289CA4(a2, a4, result);
        goto LABEL_9;
      }
    }
    else if ((result & 2) == 0)
    {
      v11 = 0;
LABEL_10:
      *(_DWORD *)a5 = (v10 >> 2) & 0x3FF0 | 3;
      *(_QWORD *)(a5 + 8) = v11;
      v12 = 1;
      goto LABEL_11;
    }
    v13 = *(_QWORD *)(a1 + 88);
    v15 = 257;
    result = sub_22E3C1740((uint64_t *)(a2 + 272), 47, a4, v13, (uint64_t)v14);
LABEL_9:
    v11 = result;
    goto LABEL_10;
  }
  v12 = 0;
  *(_BYTE *)a5 = 0;
LABEL_11:
  *(_BYTE *)(a5 + 16) = v12;
  return result;
}

uint64_t sub_22F28A570(uint64_t *a1, llvm::Value *a2, unint64_t a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_22E5DE820((uint64_t)a1, a3);
  if ((v5 & 2) != 0)
    return sub_22E5DF610(a1, a2, v5 >> 4, 0, v6);
  else
    return (uint64_t)a2;
}

uint64_t sub_22F28A5C0(uint64_t result, llvm::Value *a2, _DWORD *a3)
{
  uint64_t ***v4;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = (uint64_t ***)result;
  if ((*a3 & 3) != 0 && (*a3 & 0x40) != 0)
  {
    if ((*a3 & 4) != 0)
      v10 = sub_22F29FA48(result);
    else
      v10 = 0;
    v11 = **v4;
    sub_22F289A80((uint64_t)v11, (uint64_t)a3);
    result = sub_22E5DF610(v11, a2, (*a3 >> 9) & 0xF, v10, v12);
    a2 = (llvm::Value *)result;
  }
  v6 = *v4;
  v7 = *v4 + 1;
  v8 = *((_DWORD *)v6 + 4);
  if (v8 >= *((_DWORD *)v6 + 5))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *((_DWORD *)v6 + 4);
  }
  *(_QWORD *)(*v7 + 8 * v8) = a2;
  ++*((_DWORD *)v6 + 4);
  return result;
}

uint64_t sub_22F28A6D0(uint64_t ***a1, llvm::Value *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t **v12;
  unsigned int v13;

  if (a4)
    v9 = sub_22F29FA48((uint64_t)a1);
  else
    v9 = 0;
  result = sub_22E5DF610(**a1, a2, a3, v9, a5);
  v11 = result;
  v12 = *a1;
  v13 = *((_DWORD *)v12 + 4);
  if (v13 >= *((_DWORD *)v12 + 5))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *((_DWORD *)v12 + 4);
  }
  v12[1][v13] = v11;
  ++*((_DWORD *)v12 + 4);
  return result;
}

uint64_t sub_22F28A778(uint64_t *a1, llvm::Value *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD v19[3];

  v10 = sub_22F289B84((uint64_t)a1, a3);
  v12 = v10;
  if ((v10 & 3) != 0)
  {
    v13 = v11;
    if (!a4)
      return sub_22E5DF610(a1, a2, v10 >> 4, 0, v11);
    v15 = a1[213];
    if (!v15)
    {
      v15 = operator new();
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 16) = 0;
      a1[213] = v15;
    }
    v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF8) + 32))(a4 & 0xFFFFFFFFFFFFFFF8);
    v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7;
    v19[0] = v16 & 0xFFFFFFFFFFFFFFF8 | a4 & 7;
    v19[1] = a5;
    v19[2] = v17;
    v18 = sub_22F28AE88(v15, (uint64_t)v19);
    if (v18[3])
    {
      return llvm::ConstantExpr::getBitCast();
    }
    else
    {
      a2 = (llvm::Value *)sub_22E5DF610(a1, a2, v12 >> 4, 0, v13);
      v18[3] = (uint64_t)a2;
    }
  }
  return (uint64_t)a2;
}

uint64_t sub_22F28A8C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  unsigned __int16 v15;

  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  if ((*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 82) & 0x30) == 0)
  {
    v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
    if (v9)
      v10 = *(_BYTE *)(v9 + 16) == 26;
    else
      v10 = 0;
    if (v10
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v9 = sub_22F10CF48(v9)) != 0)
    {
      v11 = a1[18];
      v12 = *(_QWORD *)(v9 + 24);
      v15 = *(_DWORD *)(v9 + 16) >> 19;
      v8 = sub_22F369930(v11, v12, &v15);
    }
  }
  v13 = (llvm::Value *)sub_22E4E9988((uint64_t)a1, a2, a3, a4);
  return sub_22F28A778(a1, v13, v8, a2, a3);
}

uint64_t sub_22F28A99C(uint64_t *a1, llvm::Value *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v7 = sub_22F289C48((uint64_t)a1);
  v9 = v7;
  if ((v7 & 3) != 0)
  {
    v10 = v8;
    if (!a4)
      return sub_22E5DF610(a1, a2, v7 >> 4, 0, v8);
    v12 = a1[214];
    if (!v12)
    {
      v12 = operator new();
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      a1[214] = v12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    v13 = sub_22F25AD1C((uint64_t *)v12, &v14);
    if (v13[1])
    {
      return llvm::ConstantExpr::getBitCast();
    }
    else
    {
      a2 = (llvm::Value *)sub_22E5DF610(a1, a2, v9 >> 4, 0, v10);
      v13[1] = a2;
    }
  }
  return (uint64_t)a2;
}

_QWORD *sub_22F28AAB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  a1[2] = (a1[2] | a2) & -(a1[2] | a2);
  v7 = llvm::ConstantInt::get();
  return sub_22F28AB18(a1, v7, a3, a4, a1[2]);
}

_QWORD *sub_22F28AB18(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  __int16 v10;
  __int16 v11;

  v5 = result;
  result[1] = a3;
  result[2] = a5;
  v6 = result[5];
  if (v6)
  {
    v9 = "add";
    v10 = 259;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a4 + 72)
                                                                                           + 16))(*(_QWORD *)(a4 + 72), v6, a2, 0, 0);
    if (!result)
    {
      v11 = 257;
      v8 = llvm::BinaryOperator::Create();
      result = (_QWORD *)sub_22E3C12C8((uint64_t *)a4, v8, (uint64_t)&v9);
    }
    v5[5] = result;
  }
  else
  {
    result[5] = a2;
  }
  return result;
}

uint64_t sub_22F28ABCC(_OWORD *a1, _QWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];
  _QWORD v5[6];
  int v6;
  uint64_t v7;

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v4[2] = a1[2];
  v6 = 0;
  v7 = 0;
  sub_22E5DEBB0((uint64_t)v4, (llvm::LLVMContext *)&v6, a2, 1, (uint64_t)v5);
  return v5[0];
}

uint64_t sub_22F28AC18(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22F28AC8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F28AD44(a1, a2, v8);
    v7 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = v7;
    *(_WORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_22F28AC8C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v17;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = *(_DWORD *)(a3 + 8);
    v6 = ((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) & (a2 - 1);
    v7 = (uint64_t *)(a1 + 24 * v6);
    v8 = *v7;
    v9 = *((_DWORD *)v7 + 2);
    if (*(_QWORD *)a3 == *v7 && v5 == v9)
    {
      v11 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v8 || v9)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v9 == 0;
        if (v15 && v8 == -1)
          v13 = v7;
        v17 = v6 + v14++;
        v6 = v17 & v4;
        v7 = (uint64_t *)(a1 + 24 * (v17 & v4));
        v8 = *v7;
        v9 = *((_DWORD *)v7 + 2);
        v11 = 1;
        if (*(_QWORD *)a3 == *v7 && v5 == v9)
          goto LABEL_8;
      }
      v11 = 0;
      if (v13)
        v7 = v13;
    }
  }
  else
  {
    v7 = 0;
    v11 = 0;
  }
LABEL_8:
  *a4 = v7;
  return v11;
}

uint64_t sub_22F28AD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5E0570(a1, v6);
  v8 = 0;
  sub_22F28AC8C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 | *(unsigned int *)(a3 + 8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F28ADF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F25E168(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t *sub_22F28AE88(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v5;
  int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_22F28AF00(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F28B010(a1, a2, v8);
    v7 = *(_DWORD *)(a2 + 8);
    *v5 = *(_QWORD *)a2;
    *((_DWORD *)v5 + 2) = v7;
    v5[2] = *(_QWORD *)(a2 + 16);
    v5[3] = 0;
  }
  return v5;
}

uint64_t sub_22F28AF00(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v16;
  unsigned int v17;
  uint64_t result;

  if (!a2)
  {
    v11 = 0;
    result = 0;
    goto LABEL_22;
  }
  v4 = 0;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = ((v5 >> 9) ^ v5 | ((unint64_t)((*(_QWORD *)a3 >> 4) ^ (*(_QWORD *)a3 >> 9)) << 32))
     + ~((unint64_t)((v5 >> 9) ^ v5) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = (a2 - 1) & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
  for (i = 1; ; ++i)
  {
    v11 = (uint64_t *)(a1 + 32 * v9);
    v12 = *v11;
    v13 = *(_QWORD *)a3 == *v11 && *(_DWORD *)(a3 + 8) == v11[1];
    if (v13 && v5 == v11[2])
    {
      result = 1;
      goto LABEL_22;
    }
    v14 = v11[1];
    if (!(v12 | v14))
      break;
    if (v12 != -1 || v14 != 0)
      goto LABEL_16;
    v16 = v11[2] == -1;
LABEL_18:
    if (v16 && v4 == 0)
      v4 = (uint64_t *)(a1 + 32 * v9);
    v17 = v9 + i;
    v9 = v17 & (a2 - 1);
  }
  if (v11[2])
  {
LABEL_16:
    v16 = 0;
    goto LABEL_18;
  }
  result = 0;
  if (v4)
    v11 = v4;
LABEL_22:
  *a4 = v11;
  return result;
}

uint64_t *sub_22F28B010(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22E5E0EE8(a1, v6);
    v8 = 0;
    sub_22F28AF00(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 | *((unsigned int *)a3 + 2) || a3[2])
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F28B0CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(unsigned int *)(a2 + 8);
    if (!(*(_QWORD *)a2 | v9))
    {
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_14;
LABEL_15:
      v14 = 0;
      result = sub_22F28AF00(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), a2, &v14);
      v11 = v14;
      v12 = *(_QWORD *)a2;
      *((_DWORD *)v14 + 2) = *(_DWORD *)(a2 + 8);
      *v11 = v12;
      v13 = *(_QWORD *)(a2 + 24);
      v11[2] = *(_QWORD *)(a2 + 16);
      v11[3] = v13;
      ++*(_DWORD *)(v5 + 8);
      goto LABEL_14;
    }
    v10 = *(_QWORD *)a2 == -1 && v9 == 0;
    if (!v10 || *(_QWORD *)(a2 + 16) != -1)
      goto LABEL_15;
LABEL_14:
    a2 += 32;
  }
  return result;
}

llvm::raw_ostream *sub_22F28B1B4(int a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;

  v2 = sub_22E47DAC0(a2, "<CGBitFieldInfo");
  sub_22E47DAC0(v2, " Offset:");
  v3 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v3, " Size:");
  v4 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v4, " IsSigned:");
  v5 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v5, " StorageSize:");
  v6 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v6, " StorageOffset:");
  v7 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v7, " VolatileOffset:");
  v8 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v8, " VolatileStorageSize:");
  v9 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  sub_22E47DAC0(v9, " VolatileStorageOffset:");
  v10 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
  return sub_22E47DAC0(v10, ">");
}

void sub_22F28B294(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  sub_22E5E34FC((uint64_t)a1, v2);
}

llvm::raw_ostream *sub_22F28B2BC(llvm *a1)
{
  int v1;
  llvm::raw_ostream *v2;

  v1 = (int)a1;
  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_22F28B1B4(v1, v2);
}

_QWORD *sub_22F28B2E4(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F24F9F4(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F28B34C((uint64_t)a1, a2, v8);
    v6 = *a2;
    *((_DWORD *)v5 + 7) = 0;
    v5[4] = 0;
    *((_WORD *)v5 + 12) = 0;
    *v5 = v6;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *sub_22F28B34C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5E4308(a1, v6);
  v8 = 0;
  sub_22F24F9F4((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F28B3FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22F24F9F4((uint64_t *)v5, (_QWORD *)a2, &v11);
      v9 = v11;
      *v11 = *(_QWORD *)a2;
      v10 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v9 + 3) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v9 + 1) = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_22F28B4BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22E46AA2C((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22F28B568(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
    return 1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v3 >= v4)
    return v4 < v3;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_22F28B5B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  int v9;
  llvm::BasicBlock *v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  llvm::BasicBlock *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  llvm::Value *v24;
  int v25;
  llvm::Value *v26;
  llvm::APInt *v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::BasicBlock *v48;
  llvm::BasicBlock *v49;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  int v54;
  llvm::BasicBlock *v55;
  uint64_t v56;
  int v57;

  LOWORD(v56) = 261;
  v52 = "do.end";
  v53 = 6;
  v7 = (char *)operator new();
  llvm::BasicBlock::BasicBlock();
  v8 = *(_QWORD *)(a1 + 2008);
  v9 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v9 + 1;
  LOWORD(v56) = 261;
  v52 = "do.cond";
  v53 = 7;
  v10 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v11 = *(_QWORD *)(a1 + 2008);
  v12 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v12 + 1;
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38838], 0, *(_DWORD *)(a2 + 4));
  v47 = *(_QWORD *)(a1 + 4016);
  v52 = v7;
  v53 = v8;
  v54 = v9;
  v55 = v10;
  v56 = v11;
  v57 = v12;
  v13 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v52, 1);
  v14 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
  v16 = v13[1];
  v15 = v13[2];
  *v14 = *v13;
  v14[1] = v16;
  v14[2] = v15;
  ++*(_DWORD *)(a1 + 3048);
  v52 = "do.body";
  LOWORD(v56) = 259;
  v17 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v49 = v17;
  sub_22E61E284((_QWORD *)a1, v17, a2);
  sub_22F0D5A50(*(_QWORD *)(a2 + 8));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38850], 0, v18);
  v19 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v20 = *(_QWORD *)(a1 + 2312);
  LOBYTE(v17) = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v21 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v19;
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 8), 0, 0);
  sub_22F0D60E4(*(_QWORD *)(a2 + 8));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38840], 0, v22);
  *(_BYTE *)(a1 + 2893) = (_BYTE)v17;
  sub_22E48B274(a1, v19, v20, 0, 0);
  *(_QWORD *)(a1 + 2872) = v21;
  sub_22E5ED9B4((_QWORD *)a1, v10, 0);
  sub_22F0D5A50(*(_QWORD *)(a2 + 16));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38880], 0, v23);
  v24 = sub_22E4D86E0((_QWORD *)a1, *(_QWORD *)(a2 + 16));
  sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38870], 0, v25);
  --*(_DWORD *)(a1 + 3048);
  if (*((_BYTE *)v24 + 16) == 16)
    v26 = v24;
  else
    v26 = 0;
  v48 = v10;
  if (v26)
  {
    v27 = (llvm::Value *)((char *)v26 + 24);
    v28 = *((_DWORD *)v26 + 8);
    if (v28 > 0x40)
      v29 = llvm::APInt::countLeadingZerosSlowCase(v27) == v28;
    else
      v29 = *(_QWORD *)v27 == 0;
    v30 = v29;
    v31 = a4;
    v32 = v30 ^ 1;
  }
  else
  {
    v32 = 1;
    v31 = a4;
  }
  sub_22F0D4E74(a2);
  v34 = v33;
  v35 = *(_QWORD *)(a1 + 144);
  v36 = *(_QWORD *)(v35 + 144);
  v37 = *(_QWORD *)(v35 + 184);
  v38 = *(unsigned __int8 *)(a1 + 2892);
  if (!*(_BYTE *)(a1 + 2892) && (v39 = *(_QWORD *)(a1 + 2880)) != 0)
  {
    sub_22F257BAC(v39, v34, &v52);
    v38 = *(unsigned __int8 *)(a1 + 2892);
  }
  else
  {
    v52 = 0;
  }
  if (!v38 && (v40 = *(_QWORD *)(a1 + 2880)) != 0)
    sub_22F257BAC(v40, SHIDWORD(v34), &v51);
  else
    v51 = 0;
  v41 = sub_22E5EDBF8(*(_QWORD *)(a1 + 144), v26 != 0);
  sub_22E5241F0(a1 + 168, v49, v36, v37, a3, v31, (uint64_t *)&v52, &v51, v41);
  if (v51)
    llvm::MetadataTracking::untrack();
  if (v52)
    llvm::MetadataTracking::untrack();
  if (v32)
  {
    v43 = sub_22E3CF180(a1 + 3904, *(_QWORD *)(a2 + 8));
    if (v44)
      v45 = v43;
    else
      v45 = 0;
    v46 = sub_22E659D60(a1, *(_QWORD *)(a2 + 16), v45 - v47);
    sub_22E3D26FC((uint64_t *)(a1 + 272), (uint64_t)v24, (uint64_t)v49, (uint64_t)v7, v46, 0);
    sub_22E5244AC(a1 + 168);
    sub_22E5ED9B4((_QWORD *)a1, v7, 0);
    return sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38828], 0, *(_DWORD *)(a2 + 28));
  }
  else
  {
    sub_22E5244AC(a1 + 168);
    sub_22E5ED9B4((_QWORD *)a1, v7, 0);
    sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38828], 0, *(_DWORD *)(a2 + 28));
    return (_QWORD *)sub_22F28C598(a1, v48);
  }
}

uint64_t sub_22F28BA60()
{
  _QWORD *v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  char v12[8];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD v17[3];
  _QWORD v18[4];
  __int16 v19;
  _BYTE v20[1856];
  uint64_t v21;
  uint64_t v22;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v22 = *MEMORY[0x24BDAC8D0];
  sub_22E5EEEDC(v0, v3, (uint64_t)v12);
  sub_22E619430((uint64_t)v20, v5[18], 1);
  v6 = operator new();
  v7 = sub_22E5BB2A4(v6, v4, v2);
  v8 = v21;
  v21 = v7;
  v9 = sub_22E5EF124((uint64_t)v20, v4);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v9)
    v10 = *((_QWORD *)v9 + 3);
  else
    v10 = 0;
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = v15;
  sub_22E5E0440((uint64_t)v5, (uint64_t)v17, v16, v18);
  *(_QWORD *)&v17[0] = v18[0];
  v19 = 257;
  sub_22F24F1F4(v5, v10, v9, (uint64_t)v17, 1, (uint64_t)v18);
  v21 = v8;
  return sub_22E619908((uint64_t)v20);
}

uint64_t sub_22F28BBB8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  llvm::BasicBlock *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  int v28;
  llvm::Value *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v50;
  unint64_t v51;
  uint64_t v52;
  int v54;
  _QWORD v55[2];
  int v56;
  uint64_t v57[2];
  const char *v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _QWORD v64[4];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  LOWORD(v65) = 261;
  v64[0] = "for.end";
  v64[1] = 7;
  v7 = (char *)operator new();
  llvm::BasicBlock::BasicBlock();
  v8 = *(_QWORD *)(a1 + 2008);
  v54 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v54 + 1;
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v64, a1, v9);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38848], 0, *(_DWORD *)(a2 + 8));
  v10 = sub_22F3F2E44(a2);
  sub_22F0D5A50(v10);
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38898], 0, v11);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    sub_22E5E5158(a1, v12, 0, 0);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 24), 0, 0);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 32), 0, 0);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 40), 0, 0);
  v13 = sub_22F3F2E44(a2);
  sub_22F0D60E4(v13);
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38890], 0, v14);
  v58 = "for.cond";
  LOWORD(v62) = 259;
  v15 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a1, v15, 0);
  sub_22F0D4E74(a2);
  v17 = v16;
  v18 = a1 + 168;
  v19 = *(_QWORD *)(a1 + 144);
  v20 = *(_QWORD *)(v19 + 144);
  v21 = *(_QWORD *)(v19 + 184);
  v22 = *(unsigned __int8 *)(a1 + 2892);
  if (!*(_BYTE *)(a1 + 2892) && (v23 = *(_QWORD *)(a1 + 2880)) != 0)
  {
    sub_22F257BAC(v23, v17, &v58);
    v18 = a1 + 168;
    v22 = *(unsigned __int8 *)(a1 + 2892);
  }
  else
  {
    v58 = 0;
  }
  if (!v22 && (v24 = *(_QWORD *)(a1 + 2880)) != 0)
  {
    v51 = HIDWORD(v17);
    v52 = v18;
    sub_22F257BAC(v24, v51, v57);
    v18 = v52;
  }
  else
  {
    v57[0] = 0;
  }
  sub_22E5241F0(v18, v15, v20, v21, a3, a4, (uint64_t *)&v58, v57, 0);
  if (v57[0])
    llvm::MetadataTracking::untrack();
  v25 = v8;
  if (v58)
    llvm::MetadataTracking::untrack();
  v26 = v7;
  if (*(_QWORD *)(v65 + 1992) - *(_QWORD *)(v65 + 2000) != v64[0])
  {
    v58 = "for.cond.cleanup";
    LOWORD(v62) = 259;
    v26 = (char *)operator new();
    llvm::BasicBlock::BasicBlock();
  }
  v58 = "for.body";
  LOWORD(v62) = 259;
  v27 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22F0D5A50(*(_QWORD *)(a2 + 48));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38880], 0, v28);
  v29 = sub_22E4D86E0((_QWORD *)a1, *(_QWORD *)(a2 + 48));
  sub_22F0D60E4(*(_QWORD *)(a2 + 48));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38870], 0, v30);
  v31 = *(_QWORD *)(a2 + 48);
  v32 = sub_22E3CF180(a1 + 3904, *(_QWORD *)(a2 + 72));
  if (v33)
    v34 = v32;
  else
    v34 = 0;
  v35 = sub_22E659D60(a1, v31, v34);
  if (!v35 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 33) & 0x18) != 0)
  {
    v50 = sub_22F0D4664(*(_BYTE **)(a2 + 72));
    v29 = sub_22E6200EC(a1, v29, v50);
  }
  sub_22E3D26FC((uint64_t *)(a1 + 272), (uint64_t)v29, (uint64_t)v27, (uint64_t)v26, v35, 0);
  if (v26 != v7)
  {
    sub_22E5ED9B4((_QWORD *)a1, v26, 0);
    v55[0] = v7;
    v55[1] = v25;
    v56 = v54;
    sub_22E48BA00((_QWORD *)a1, (uint64_t)v55);
  }
  sub_22E5ED9B4((_QWORD *)a1, v27, 0);
  sub_22E3CB7B0((_QWORD *)a1, a2, 0);
  LOWORD(v62) = 261;
  v58 = "for.inc";
  v59 = 7;
  v36 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v37 = *(_QWORD *)(a1 + 2008);
  v38 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v38 + 1;
  v58 = v7;
  v59 = v25;
  v60 = v54;
  v61 = v36;
  v62 = v37;
  v63 = v38;
  v39 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v58, 1);
  v40 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
  v42 = v39[1];
  v41 = v39[2];
  *v40 = *v39;
  v40[1] = v42;
  v40[2] = v41;
  ++*(_DWORD *)(a1 + 3048);
  sub_22F0D5A50(*(_QWORD *)(a2 + 72));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38850], 0, v43);
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)&v58, a1, v44);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 64), 0, 0);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 72), 0, 0);
  sub_22F0D60E4(*(_QWORD *)(a2 + 72));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38840], 0, v45);
  sub_22E488B4C((uint64_t)&v58);
  sub_22E5E5100(a1, a2);
  sub_22E5ED9B4((_QWORD *)a1, v36, 0);
  sub_22F0D5A50(*(_QWORD *)(a2 + 56));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38888], 0, v46);
  sub_22E5E5158(a1, *(_QWORD *)(a2 + 56), 0, 0);
  sub_22F0D60E4(*(_QWORD *)(a2 + 56));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38878], 0, v47);
  --*(_DWORD *)(a1 + 3048);
  sub_22E5EDA70(a1);
  sub_22E488BE4((uint64_t)v64);
  sub_22E5244AC(a1 + 168);
  sub_22E5ED9B4((_QWORD *)a1, v7, 1);
  sub_22F0D60E4(*(_QWORD *)(a2 + 72));
  sub_22E5E501C((_QWORD *)a1, MEMORY[0x24BE38828], 0, v48);
  if (v57[1])
    llvm::MetadataTracking::untrack();
  return sub_22E488B4C((uint64_t)v64);
}

_QWORD *sub_22F28C278(_QWORD *a1, uint64_t a2)
{
  __n128 v5;

  if (a1[40])
    sub_22E5E5100((uint64_t)a1, a2);
  sub_22F28C650((uint64_t)a1, *(_QWORD *)(a2 + 8), &v5);
  return sub_22E48BA00(a1, (uint64_t)&v5);
}

_QWORD *sub_22F28C2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 320))
    sub_22E5E5100(a1, a2);
  v3 = *(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(_OWORD *)(v3 - 24);
  v7 = v4;
  return sub_22E48BA00((_QWORD *)a1, (uint64_t)&v6);
}

uint64_t sub_22F28C330(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int **v10;
  int v11;
  uint64_t v13;
  int v14;

  v6 = a1[504];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(v6 - 8);
    else
      v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    v9 = *(_QWORD **)(v8 + 32);
    v10 = (int **)a1[506];
    if (v10)
    {
      if (a4)
      {
        v13 = 8 * a4;
        while (1)
        {
          v14 = *(unsigned __int16 *)(*(_QWORD *)a3 + 32);
          if (v14 == 40)
          {
            v11 = 1;
            goto LABEL_7;
          }
          if (v14 == 44)
            break;
          v11 = 0;
          a3 += 8;
          v13 -= 8;
          if (!v13)
            goto LABEL_7;
        }
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
LABEL_7:
      **v10 = v11;
    }
    sub_22E61E284(a1, v9, a2);
  }
  return sub_22E5E5158(a1, *(_QWORD *)(a2 + 24), 0, 0);
}

unint64_t sub_22F28C3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  uint64_t v13;
  _DWORD *v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21[5];
  __int16 v22;

  v21[0] = a2;
  if (*(_QWORD *)(a1 + 2008))
  {
    v4 = *(_QWORD *)(a1 + 5840);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 56);
      if (v5 >= *(_DWORD *)(v4 + 60))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(v4 + 56);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v5) = a2;
      ++*(_DWORD *)(v4 + 56);
    }
  }
  v6 = sub_22F28C9D8(a1 + 3016, v21);
  v7 = v6;
  v8 = v6[1];
  if (v8)
  {
    v6[2] = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
    sub_22E489CFC(a1, v8);
    v9 = (_QWORD *)v7[1];
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v11 == 0)
    {
      v16 = 0;
      v15 = "";
    }
    else
    {
      v14 = *(_DWORD **)(v11 + 16);
      v17 = *v14;
      v15 = (const char *)(v14 + 4);
      v16 = v17;
    }
    v22 = 261;
    v21[1] = (uint64_t)v15;
    v21[2] = v16;
    v9 = (_QWORD *)operator new();
    v18 = llvm::BasicBlock::BasicBlock();
    v19 = *(_QWORD *)(a1 + 2008);
    v20 = *(_DWORD *)(a1 + 2640);
    *(_DWORD *)(a1 + 2640) = v20 + 1;
    v7[1] = v18;
    v7[2] = v19;
    *((_DWORD *)v7 + 6) = v20;
  }
  sub_22E5ED9B4((_QWORD *)a1, v9, 0);
  if (!*(_BYTE *)(a1 + 2892))
  {
    v13 = *(_QWORD *)(a1 + 2880);
    if (v13)
    {
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 184) + 96) & 0x1800000000000000) != 0)
      {
        sub_22E48F304(*(_QWORD *)(a1 + 2880), *(_DWORD *)(a2 + 24));
        sub_22F256E68(v13, a2);
      }
    }
  }
  return sub_22E3CB7B0((_QWORD *)a1, *(_QWORD *)(a2 + 48), 0);
}

uint64_t sub_22F28C598(uint64_t result, llvm::BasicBlock *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  llvm::Instruction *v4;
  BOOL v5;

  v2 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v2 == (_QWORD *)((char *)a2 + 40))
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = (unsigned __int8 *)(v2 - 3);
    else
      v3 = 0;
    if (v3[16] - 29 >= 0xB)
      v3 = 0;
  }
  if (v3[16] == 30)
    v4 = (llvm::Instruction *)v3;
  else
    v4 = 0;
  v5 = *(_QWORD *)(result + 2000) != *(_QWORD *)(result + 1992) || v4 == 0;
  if (!v5
    && (*((_DWORD *)v4 + 5) & 0x7FFFFFF) == 1
    && (llvm::Instruction *)((char *)v4 + 24) == *((llvm::Instruction **)a2 + 6))
  {
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v4);
    return llvm::BasicBlock::eraseFromParent(a2);
  }
  return result;
}

__n128 sub_22F28C650@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  _QWORD *v5;
  __n128 *v6;
  __n128 result;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = a2;
  v5 = sub_22F28C9D8(a1 + 3016, &v11);
  v6 = (__n128 *)(v5 + 1);
  if (!v5[1])
  {
    v8 = v5;
    operator new();
    v9 = llvm::BasicBlock::BasicBlock();
    v10 = *(_DWORD *)(a1 + 2640);
    *(_DWORD *)(a1 + 2640) = v10 + 1;
    v8[1] = v9;
    v8[2] = -1;
    *((_DWORD *)v8 + 6) = v10;
  }
  result = *v6;
  *a3 = *v6;
  a3[1].n128_u64[0] = v6[1].n128_u64[0];
  return result;
}

uint64_t sub_22F28C748(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = result;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 2008);
  v3 = *(unsigned int *)(result + 56);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(result + 48);
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(v1 + 32);
      v7 = *v4;
      v10 = 0;
      result = sub_22F258E38(*(_QWORD *)(v6 + 3016), *(_DWORD *)(v6 + 3032), v7, &v10);
      if ((result & 1) != 0)
        v8 = v10;
      else
        v8 = *(_QWORD *)(v6 + 3016) + 32 * *(unsigned int *)(v6 + 3032);
      *(_QWORD *)(v8 + 16) = v2;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  if (v2)
  {
    v9 = *(_QWORD *)(v1 + 96);
    if (v9)
      return sub_22F2633B0(v9 + 48, *(_BYTE **)(v1 + 48), (_BYTE *)(*(_QWORD *)(v1 + 48) + 8 * *(unsigned int *)(v1 + 56)));
  }
  return result;
}

void sub_22F28C80C(uint64_t a1, int a2)
{
  unsigned int v4;
  int v5;

  v4 = *(_DWORD *)(a1 + 64);
  v5 = v4 + 1;
  if (v4 + 1 <= *(_DWORD *)(a1 + 8) << 6)
    *(_DWORD *)(a1 + 64) = v5;
  else
    sub_22E5EFA0C(a1, v5);
  if (a2)
    *(_QWORD *)(*(_QWORD *)a1 + 8 * (v4 >> 6)) |= 1 << v4;
}

double sub_22F28C878@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;
  double v9[12];

  sub_22E5EEEDC(a1, a2, (uint64_t)v6);
  v4 = v8;
  *a3 = v7;
  a3[1] = v4;
  result = v9[0];
  a3[2] = *(_OWORD *)v9;
  return result;
}

BOOL sub_22F28C8B4(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 26;
  else
    v2 = 0;
  if (!v2)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      v1 = sub_22F10CF48(v1);
    else
      v1 = 0;
  }
  return v1 != 0;
}

uint64_t sub_22F28C90C()
{
  uint64_t v0;

  v0 = llvm::User::operator new((llvm::User *)0x58);
  *(_QWORD *)(llvm::Instruction::Instruction() + 64) = 0;
  llvm::CallBrInst::init();
  return v0;
}

_QWORD *sub_22F28C9D8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F258E38(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F285464(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = -1;
    *((_DWORD *)v5 + 6) = 0;
  }
  return v5;
}

void sub_22F28CA4C(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22E5EFB5C((uint64_t *)a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

_QWORD *sub_22F28CAB8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    sub_22F28CB40((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  a1[5] = v5;
  v6 = a1 + 5;
  v7 = *(_QWORD *)(a2 + 48);
  a1[6] = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a2 + 32) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    a1[4] = v6;
  }
  return a1;
}

uint64_t sub_22F28CB40(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 4 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 4 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 4 * v10), (const void *)(*(_QWORD *)a2 + 4 * v10), *(_QWORD *)a2 + 4 * v11 - (*(_QWORD *)a2 + 4 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_22F28CC54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 4 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

_DWORD *sub_22F28CD34(_QWORD **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  v6 = sub_22E5EFCF8(a1, a2, &v14, &v13, a3);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v9 = v6;
    v7 = operator new(0x20uLL);
    v7[7] = *a4;
    v10 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v9 = (uint64_t)v7;
    v11 = (_QWORD *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v9;
    }
    sub_22E49FD00(a1[1], v12);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_22F28CDE0(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = (uint64_t **)sub_22E5EFEFC(a1, &v11, a2);
  result = *v5;
  if (!*v5)
  {
    sub_22E5F0018(a1, a3, (uint64_t)&v10);
    v7 = v11;
    v8 = v10;
    *v10 = 0;
    v8[1] = 0;
    v8[2] = v7;
    *v5 = v8;
    v9 = **(_QWORD **)a1;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v8 = *v5;
    }
    sub_22E49FD00(*(uint64_t **)(a1 + 8), v8);
    ++*(_QWORD *)(a1 + 16);
    return v10;
  }
  return result;
}

llvm::Instruction *sub_22F28CE84(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  llvm::Instruction *v8;
  llvm::Instruction *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  sub_22EF5CCD0(v4, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14);
  if (v14[0])
    return (llvm::Instruction *)llvm::ConstantInt::get();
  v6 = sub_22EF5C728(v4, v2);
  if (v6)
  {
    v7 = v6;
    if (*(_BYTE *)(v6 + 16) == 5)
    {
      v8 = 0;
      do
      {
        v9 = sub_22F297878(a1, v7);
        v2 = v10;
        if (v8)
        {
          v15 = 257;
          v8 = sub_22E3BDEA8(a1 + 272, (uint64_t)v8, (uint64_t)v9, (uint64_t)v14, 1, 0);
        }
        else
        {
          v8 = v9;
        }
        v11 = sub_22EF5C728(v4, v2);
        if (!v11)
          break;
        v7 = v11;
      }
      while (*(_BYTE *)(v11 + 16) == 5);
    }
    else
    {
      v8 = 0;
    }
    v5 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    v8 = 0;
  }
  sub_22EF5CCD0(v4, *v5, (uint64_t)v14);
  if (!v14[0])
    return (llvm::Instruction *)llvm::ConstantInt::get();
  v12 = llvm::ConstantInt::get();
  v15 = 257;
  return sub_22E3BDEA8(a1 + 272, (uint64_t)v8, v12, (uint64_t)v14, 1, 0);
}

uint64_t sub_22F28CFFC(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 24 * v1;
        do
        {
          *v2 = -4096;
          v2 += 3;
          v3 -= 24;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E601090(result);
    }
  }
  return result;
}

uint64_t sub_22F28D050(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Parallel;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (**v25)(_QWORD *, uint64_t, uint64_t, uint64_t);
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t (*v35)();
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t (**v38)();
  uint64_t (*v39)(uint64_t *, int32x2_t *, void (***)(_QWORD));
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 152) + 76) & 0x20) == 0)
  {
    v31 = a2;
    sub_22E5B8E78(&v32, a1, a2);
    v38 = (uint64_t (**)())&v31;
    v39 = sub_22E6015A8;
    v40 = 0;
    v34 = sub_22F294750;
    v35 = nullsub_63;
    sub_22E5F5E6C(a1, a2, 40, (uint64_t)&v38, (uint64_t)&v34);
    sub_22E5F6264(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E60170C, (uint64_t)&v38);
    sub_22F283234(&v32);
    return sub_22E5F6470(a1, a2);
  }
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    v7 = v6 + 4;
    v8 = *v6;
    if ((_DWORD)v8)
    {
      v9 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v7[v9] + 8) != 36)
      {
        v9 += 2;
        if (2 * v8 == v9)
          goto LABEL_7;
      }
      v27 = &v7[v9];
    }
    else
    {
      v27 = v6 + 4;
    }
    if (v27 != &v7[2 * v8] && *(_QWORD *)v27)
    {
      v28 = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v38 = (uint64_t (**)())a1;
      v39 = (uint64_t (*)(uint64_t *, int32x2_t *, void (***)(_QWORD)))(a1 + 272);
      LOBYTE(v40) = 1;
      v41 = *(_QWORD *)(v5 + 232);
      sub_22E50E974(&v38, v28, a3);
      v6 = *(unsigned int **)(a2 + 24);
    }
LABEL_7:
    if (v6)
    {
      v10 = v6 + 4;
      v11 = *v6;
      if ((_DWORD)v11)
      {
        v12 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v10[v12] + 8) != 58)
        {
          v12 += 2;
          if (2 * v11 == v12)
            goto LABEL_12;
        }
        v29 = &v10[v12];
      }
      else
      {
        v29 = v6 + 4;
      }
      if (v29 != &v10[2 * v11] && *(_QWORD *)v29)
      {
        v30 = *(_QWORD *)(*(_QWORD *)v29 + 32);
        v38 = (uint64_t (**)())a1;
        v39 = (uint64_t (*)(uint64_t *, int32x2_t *, void (***)(_QWORD)))(a1 + 272);
        LOBYTE(v40) = 1;
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        sub_22E50E974(&v38, v30, a3);
        v6 = *(unsigned int **)(a2 + 24);
      }
LABEL_12:
      if (v6)
      {
        v15 = *v6;
        v13 = v6 + 4;
        v14 = v15;
        if (v15)
        {
          v16 = 8 * v14;
          v17 = v13;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)v17 + 8) == 64)
              break;
            v17 += 2;
            v16 -= 8;
          }
          while (v16);
        }
      }
    }
  }
  v18 = sub_22E59F470(a2, 40);
  v34 = *(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v18 + 8 * *(unsigned int *)(v18 + 8) + 32);
  v35 = (uint64_t (*)())a1;
  sub_22E5BB2A4((uint64_t)&v38, v18, 2);
  v19 = *(_QWORD *)(a1 + 1856);
  *(_QWORD *)(a1 + 1856) = &v38;
  v32 = *(_OWORD *)(a1 + 320);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  v36[0] = &off_24FA666F0;
  v36[1] = a1;
  v37 = v36;
  Parallel = llvm::OpenMPIRBuilder::createParallel();
  if (Parallel)
  {
    sub_22E3CB840(a1 + 272, Parallel, v21);
  }
  else
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  v24 = v37;
  if (v37 == v36)
  {
    v25 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v36[0] + 32);
    v24 = v36;
    goto LABEL_22;
  }
  if (v37)
  {
    v25 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v37 + 40);
LABEL_22:
    (*v25)(v24, v21, v22, v23);
  }
  if (v33)
    llvm::MetadataTracking::untrack();
  *(_QWORD *)(a1 + 1856) = v19;
  v38 = &off_24FA66C98;
  return sub_22E49FAE8((uint64_t)&v40);
}

uint64_t sub_22F28D424(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _QWORD *v49;
  int v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  uint64_t result;
  int v56;
  _DWORD **v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD v70[2];
  int v71;

  v59 = *(_QWORD *)(a1 + 2312);
  v60 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v58 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v61 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v60;
  v6 = *(unsigned int **)(a2 + 24);
  v7 = *v6;
  v8 = sub_22F293A28(*(_DWORD *)(a2 + 8));
  v9 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v9)
  {
    v10 = (uint64_t)&v6[2 * v7 + 4 + 2 * (3 * v9 + v8)];
    v11 = 8 * v9;
    do
    {
      v10 += 8;
      sub_22E4D89CC(a1);
      v11 -= 8;
    }
    while (v11);
  }
  if ((sub_22F421B08(*(_DWORD *)(a2 + 8)) & 1) == 0)
  {
    v12 = *(unsigned int **)(a2 + 24);
    if (v12)
    {
      v15 = *v12;
      v13 = (uint64_t *)(v12 + 4);
      v14 = v15;
      if (v15)
      {
        v16 = 8 * v14;
        v17 = v13;
        while (*(_DWORD *)(*v17 + 8) != 44)
        {
          ++v17;
          v16 -= 8;
          if (!v16)
            goto LABEL_21;
        }
      }
      else
      {
        v17 = v13;
      }
      v18 = &v13[v14];
      if (v17 != v18)
      {
        v19 = *v17;
LABEL_14:
        v20 = *(unsigned int *)(v19 + 16);
        if ((_DWORD)v20)
        {
          v21 = v19 + 8 * v20 + 8 * v20 + 8 * v20 + 64;
          v22 = 8 * v20;
          do
          {
            v21 += 8;
            sub_22E4D89CC(a1);
            v22 -= 8;
          }
          while (v22);
        }
        v23 = v17 + 1;
        while (v23 != v18)
        {
          v24 = *v23++;
          v19 = v24;
          if (*(_DWORD *)(v24 + 8) == 44)
          {
            v17 = v23 - 1;
            goto LABEL_14;
          }
        }
      }
    }
  }
LABEL_21:
  LOWORD(v66) = 261;
  *(_QWORD *)&v63 = "omp.body.continue";
  *((_QWORD *)&v63 + 1) = 17;
  v25 = operator new();
  llvm::BasicBlock::BasicBlock();
  v26 = *(_QWORD *)(a1 + 2008);
  v27 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v27 + 1;
  v63 = *a3;
  v64 = *((_QWORD *)a3 + 2);
  v65 = v25;
  v62 = (_QWORD *)v25;
  v66 = v26;
  LODWORD(v67) = v27;
  v28 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v63, 1);
  v29 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
  v31 = v28[1];
  v30 = v28[2];
  *v29 = *v28;
  v29[1] = v31;
  v29[2] = v30;
  ++*(_DWORD *)(a1 + 3048);
  v32 = *(unsigned int **)(a2 + 24);
  v33 = *v32;
  v34 = sub_22F293A28(*(_DWORD *)(a2 + 8));
  v35 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v35)
  {
    v36 = (unsigned __int8 **)&v32[2 * v33 + 4 + 2 * (v34 - v35 + 8 * v35)];
    v37 = 8 * v35;
    do
    {
      v38 = *v36;
      if (*v36)
      {
        *(_QWORD *)&v63 = "omp.body.next";
        LOWORD(v66) = 259;
        v39 = (_QWORD *)operator new();
        llvm::BasicBlock::BasicBlock();
        v40 = sub_22F0D8A48(a2);
        v41 = sub_22E3CF180(a1 + 3904, v40);
        if (v42)
          v43 = v41;
        else
          v43 = 0;
        sub_22E61F8F8((_QWORD *)a1, v38, (uint64_t)v39, (uint64_t)v62, v43, 0);
        sub_22E5ED9B4((_QWORD *)a1, v39, 0);
      }
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  BYTE1(v65) = 1;
  v44 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v45 = *(_QWORD *)(a1 + 2312);
  LOBYTE(v65) = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v46 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)&v63 = v44;
  *((_QWORD *)&v63 + 1) = v46;
  v64 = v45;
  *(_QWORD *)(a1 + 2872) = v44;
  v67 = 0;
  v68 = 0;
  v66 = a1;
  v69 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  sub_22E5F4508();
  sub_22E5BC320((uint64_t)v70, v66 + 2904);
  sub_22F2840EC((uint64_t)v70);
  if ((_DWORD)v68)
  {
    operator new();
    *(_QWORD *)(a1 + 2752) = llvm::BasicBlock::BasicBlock();
    operator new();
    *(_QWORD *)(a1 + 2760) = llvm::BasicBlock::BasicBlock();
    if (*(_DWORD *)(a2 + 8) != 54 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 2) == 0)
    {
      operator new();
      *(_QWORD *)(a1 + 2768) = llvm::BasicBlock::BasicBlock();
    }
    operator new();
    *(_QWORD *)(a1 + 2776) = llvm::BasicBlock::BasicBlock();
    sub_22E5EDA70(a1);
    sub_22E5ED9B4((_QWORD *)a1, *(_QWORD **)(a1 + 2752), 0);
    v52 = sub_22F28423C(a2);
    v53 = 0;
    if (*(_QWORD *)(v52 + 8 * *(unsigned int *)(v52 + 8) + 32))
    {
      v53 = *(_DWORD **)(v52 + 8 * *(unsigned int *)(v52 + 8) + 32);
      do
      {
        v56 = *(unsigned __int8 *)v53;
        if (v56 == 8)
        {
          if ((*v53 & 0xFFFFFF00) != 0x100)
            break;
          v57 = (_DWORD **)(v53 + 4);
        }
        else
        {
          if (v56 != 101)
            break;
          v57 = (_DWORD **)(v53 + 2);
        }
        v53 = *v57;
      }
      while (*v57);
    }
    v54 = (_QWORD *)sub_22F0D8AD8(v53, 1);
    sub_22E5F6B30(a1, (uint64_t)v53, v54, *(unsigned int *)(a2 + 32), 0);
    sub_22E5EDA70(a1);
  }
  else
  {
    v47 = sub_22F28423C(a2);
    v48 = *(_DWORD **)(v47 + 8 * *(unsigned int *)(v47 + 8) + 32);
    if (v48)
    {
      do
      {
        v50 = *(unsigned __int8 *)v48;
        if (v50 == 8)
        {
          if ((*v48 & 0xFFFFFF00) != 0x100)
            break;
          v51 = (_DWORD **)(v48 + 4);
        }
        else
        {
          if (v50 != 101)
            break;
          v51 = (_DWORD **)(v48 + 2);
        }
        v48 = *v51;
      }
      while (*v51);
    }
    v49 = (_QWORD *)sub_22F0D8AD8(v48, 1);
    sub_22E5F6B30(a1, (uint64_t)v48, v49, *(unsigned int *)(a2 + 32), 0);
  }
  sub_22E5ED9B4((_QWORD *)a1, v62, 0);
  --*(_DWORD *)(a1 + 3048);
  sub_22F283FC4((uint64_t)&v63);
  *(_BYTE *)(a1 + 2893) = v58;
  result = sub_22E48B274(a1, v60, v59, 0, 0);
  *(_QWORD *)(a1 + 2872) = v61;
  return result;
}

uint64_t sub_22F28DA58(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t), uint64_t a10)
{
  char *v13;
  int v14;
  llvm::BasicBlock *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  const char *v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _QWORD v64[2];
  int v65;
  uint64_t v66;

  LOWORD(v62) = 261;
  v58 = "omp.inner.for.end";
  v59 = 17;
  v13 = (char *)operator new();
  llvm::BasicBlock::BasicBlock();
  v55 = *(_QWORD *)(a1 + 2008);
  v14 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v14 + 1;
  v58 = "omp.inner.for.cond";
  LOWORD(v62) = 259;
  v15 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a1, v15, 0);
  sub_22F0D4E74(a2);
  v17 = v16;
  v18 = HIDWORD(v16);
  v19 = sub_22F28423C(a2);
  v20 = *(_DWORD **)(v19 + 8 * *(unsigned int *)(v19 + 8) + 32);
  if (v20 && *(_BYTE *)v20 == 101)
  {
    *(_DWORD *)(a1 + 1544) = 0;
    v21 = a1 + 168;
    v22 = *(_QWORD *)(a1 + 144);
    v23 = *(_QWORD *)(v22 + 144);
    v24 = *(_QWORD *)(v22 + 184);
    v26 = *v20;
    v25 = (uint64_t *)(v20 + 4);
    v27 = (unint64_t)v26 >> 8;
    v28 = *(unsigned __int8 *)(a1 + 2892);
    if (!*(_BYTE *)(a1 + 2892) && (v29 = *(_QWORD *)(a1 + 2880)) != 0)
    {
      v47 = v17;
      v52 = v24;
      v48 = v23;
      sub_22F257BAC(v29, v47, &v58);
      v21 = a1 + 168;
      v24 = v52;
      v23 = v48;
      v28 = *(unsigned __int8 *)(a1 + 2892);
    }
    else
    {
      v58 = 0;
    }
    if (!v28 && (v30 = *(_QWORD *)(a1 + 2880)) != 0)
    {
      v49 = v18;
      v50 = v21;
      v51 = v23;
      v53 = v24;
      sub_22F257BAC(v30, v49, &v66);
      v24 = v53;
      v23 = v51;
      v21 = v50;
    }
    else
    {
      v66 = 0;
    }
    sub_22E5241F0(v21, v15, v23, v24, v25, v27, (uint64_t *)&v58, &v66, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 1544) = 0;
    v31 = *(unsigned __int8 *)(a1 + 2892);
    if (!*(_BYTE *)(a1 + 2892) && (v32 = *(_QWORD *)(a1 + 2880)) != 0)
    {
      sub_22F257BAC(v32, v17, &v58);
      v31 = *(unsigned __int8 *)(a1 + 2892);
    }
    else
    {
      v58 = 0;
    }
    if (!v31 && (v33 = *(_QWORD *)(a1 + 2880)) != 0)
      sub_22F257BAC(v33, v18, &v66);
    else
      v66 = 0;
    sub_22E523FF0((char *)(a1 + 168), v15, (uint64_t *)&v58, &v66);
  }
  if (v66)
    llvm::MetadataTracking::untrack();
  if (v58)
    llvm::MetadataTracking::untrack();
  v34 = v13;
  if (a3)
  {
    v58 = "omp.inner.for.cond.cleanup";
    LOWORD(v62) = 259;
    v34 = (char *)operator new();
    llvm::BasicBlock::BasicBlock();
  }
  v58 = "omp.inner.for.body";
  LOWORD(v62) = 259;
  v35 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v36 = sub_22E3CF180(a1 + 3904, a2);
  if (v37)
    v38 = v36;
  else
    v38 = 0;
  sub_22E61F8F8((_QWORD *)a1, a4, (uint64_t)v35, (uint64_t)v34, v38, 0);
  if (v34 != v13)
  {
    sub_22E5ED9B4((_QWORD *)a1, v34, 0);
    v64[0] = v13;
    v64[1] = v55;
    v65 = v14;
    sub_22E48BA00((_QWORD *)a1, (uint64_t)v64);
  }
  sub_22E5ED9B4((_QWORD *)a1, v35, 0);
  sub_22E3CB7B0((_QWORD *)a1, a2, 0);
  LOWORD(v62) = 261;
  v58 = "omp.inner.for.inc";
  v59 = 17;
  v39 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v40 = *(_QWORD *)(a1 + 2008);
  v41 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v41 + 1;
  v58 = v13;
  v59 = v55;
  v60 = v14;
  v61 = v39;
  v62 = v40;
  v63 = v41;
  v42 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v58, 1);
  v43 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
  v45 = v42[1];
  v44 = v42[2];
  *v43 = *v42;
  v43[1] = v45;
  v43[2] = v44;
  ++*(_DWORD *)(a1 + 3048);
  a6(a7, a1);
  sub_22E5ED9B4((_QWORD *)a1, v39, 0);
  sub_22E4D89CC(a1);
  a9(a10, a1);
  --*(_DWORD *)(a1 + 3048);
  sub_22E5EDA70(a1);
  sub_22E5244AC(a1 + 168);
  return sub_22E5ED9B4((_QWORD *)a1, v13, 0);
}

uint64_t sub_22F28DF10(uint64_t result, unsigned int *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v36;
  const char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  _QWORD v42[2];
  int v43;
  _BYTE v44[32];
  _OWORD v45[4];

  if (*(_QWORD *)(result + 320))
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v8 = *a2;
    v6 = (uint64_t *)(a2 + 4);
    v7 = v8;
    if (v8)
    {
      v9 = 8 * v7;
      for (i = v6; *(_DWORD *)(*i + 8) != 44; ++i)
      {
        v9 -= 8;
        if (!v9)
          return result;
      }
    }
    else
    {
      i = v6;
    }
    v11 = &v6[v7];
    if (i != v11)
    {
      v12 = 0;
      v13 = *i;
LABEL_15:
      v14 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v14)
      {
        v15 = (uint64_t *)(v13 + 64);
        v16 = 8 * v14;
        do
        {
          v36 = v16;
          if (!v12)
          {
            v17 = a3(a4, v5);
            if (v17)
            {
              v18 = v17;
              v37 = ".omp.linear.pu";
              WORD4(v39) = 259;
              v19 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v37 = ".omp.linear.pu.done";
              WORD4(v39) = 259;
              v12 = (_QWORD *)operator new();
              llvm::BasicBlock::BasicBlock();
              v20 = llvm::User::operator new((llvm::User *)0x40);
              MEMORY[0x23489C09C](v20, v19, v12, v18, 0);
              WORD4(v39) = 257;
              sub_22E3C12C8((uint64_t *)(v5 + 272), v20, (uint64_t)&v37);
              sub_22E5ED9B4((_QWORD *)v5, v19, 0);
            }
            else
            {
              v12 = 0;
            }
          }
          v21 = *(_QWORD *)(*v15 + 16);
          v22 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 144);
          v23 = v12;
          v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 1856) + 32))(*(_QWORD *)(v5 + 1856), v21) != 0;
          v25 = *v15++;
          v26 = *(_QWORD *)(v25 + 8);
          sub_22EFF605C(v25);
          v37 = 0;
          v27 = v24;
          v12 = v23;
          sub_22EFF69F0((uint64_t)v44, v22, v21, v27, v26, 1, v28, &v37, 0);
          sub_22E4D8D7C(&v37);
          v45[0] = v38;
          v45[1] = v39;
          v45[2] = v40;
          BYTE1(v39) = 1;
          *((_QWORD *)&v39 + 1) = v5;
          v29 = (const char *)(*(_QWORD *)(v5 + 1992) - *(_QWORD *)(v5 + 2000));
          v30 = *(_QWORD *)(v5 + 2312);
          LOBYTE(v39) = *(_BYTE *)(v5 + 2893);
          *(_BYTE *)(v5 + 2893) = 0;
          v31 = *(_QWORD *)(v5 + 2872);
          v37 = v29;
          *(_QWORD *)&v38 = v31;
          *((_QWORD *)&v38 + 1) = v30;
          *(_QWORD *)(v5 + 2872) = v29;
          v40 = 0uLL;
          v41 = 0;
          v42[0] = 0;
          v42[1] = 0;
          v43 = 0;
          sub_22E5BC134((uint64_t *)&v40, v5, v21, (uint64_t)v45);
          sub_22E5BC320((uint64_t)v42, *((_QWORD *)&v39 + 1) + 2904);
          sub_22F2840EC((uint64_t)v42);
          sub_22E4D89CC(v5);
          result = sub_22F283FC4((uint64_t)&v37);
          v16 = v36 - 8;
        }
        while (v36 != 8);
      }
      if (*(_QWORD *)(v13 + 40))
        result = sub_22E4D89CC(v5);
      v32 = i + 1;
      while (v32 != v11)
      {
        v33 = *v32++;
        v13 = v33;
        if (*(_DWORD *)(v33 + 8) == 44)
        {
          i = v32 - 1;
          goto LABEL_15;
        }
      }
      if (v12)
        return sub_22E5ED9B4((_QWORD *)v5, v12, 1);
    }
  }
  return result;
}

uint64_t sub_22F28E264(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *i;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE v57[112];
  _BYTE v58[32];
  const char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[4];

  if (*(_QWORD *)(result + 320))
  {
    v4 = result;
    v5 = *(unsigned int **)(a2 + 24);
    v7 = *v5;
    v8 = sub_22F293A28(*(_DWORD *)(a2 + 8));
    v9 = *(_DWORD *)(a2 + 32);
    v10 = *(unsigned int **)(a2 + 24);
    v11 = *v10;
    result = sub_22F293A28(*(_DWORD *)(a2 + 8));
    v54 = a2;
    v12 = *(unsigned int *)(a2 + 32);
    v56 = a3;
    if ((_DWORD)v12)
    {
      v13 = (uint64_t)&v10[2 * v11 + 4 + 2 * result];
      v14 = (uint64_t)&v5[2 * v7 + 4 + 2 * (v9 + v8)];
      v15 = (uint64_t *)(v4 + 2904);
      v16 = (uint64_t *)(a3 + 40);
      v17 = 8 * v12;
      v55 = (uint64_t *)(a3 + 40);
      do
      {
        v18 = *(_QWORD *)v13;
        v19 = *(_QWORD *)(*(_QWORD *)v13 + 16);
        v20 = *(_QWORD *)(*(_QWORD *)v14 + 16);
        sub_22E4C8440(v4, v20, (uint64_t)&v59);
        sub_22E4C9A74(v4, (uint64_t)&v59);
        *(_QWORD *)&v63[0] = v20;
        *(_QWORD *)v57 = 0;
        if (sub_22E3CED3C(v15, v63, v57))
        {
          **(_QWORD **)v57 = -8192;
          *(int32x2_t *)(v4 + 2912) = vadd_s32(*(int32x2_t *)(v4 + 2912), (int32x2_t)0x1FFFFFFFFLL);
        }
        *(_OWORD *)v57 = v60;
        *(_OWORD *)&v57[16] = v61;
        *(_OWORD *)&v57[32] = v62;
        sub_22E5BC134(v16, *(_QWORD *)(a3 + 32), v19, (uint64_t)v57);
        *(_QWORD *)v57 = v19;
        *(_QWORD *)&v63[0] = 0;
        if ((sub_22E3CED3C(v15, v57, v63) & 1) != 0
          || (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 1856) + 32))(*(_QWORD *)(v4 + 1856), v19)
          || !sub_22E3CB5E0(v19))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 144);
          *(_QWORD *)v57 = v19;
          *(_QWORD *)&v63[0] = 0;
          v22 = (sub_22E3CED3C(v15, v57, v63) & 1) != 0
             || (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 1856) + 32))(*(_QWORD *)(v4 + 1856), v19) != 0;
          v23 = *(_QWORD *)(v18 + 8);
          sub_22EFF605C(v18);
          *(_QWORD *)v57 = 0;
          sub_22EFF69F0((uint64_t)v58, v21, v19, v22, v23, 1, v24, v57, 0);
          sub_22E4D8D7C(v57);
          v16 = v55;
          v63[0] = *(_OWORD *)&v57[8];
          v63[1] = *(_OWORD *)&v57[24];
          v63[2] = *(_OWORD *)&v57[40];
          a3 = v56;
          result = sub_22E5BC134(v55, *(_QWORD *)(v56 + 32), v20, (uint64_t)v63);
          v15 = (uint64_t *)(v4 + 2904);
        }
        else
        {
          *(_OWORD *)v57 = v60;
          *(_OWORD *)&v57[16] = v61;
          *(_OWORD *)&v57[32] = v62;
          result = sub_22E5BC134(v16, *(_QWORD *)(a3 + 32), v20, (uint64_t)v57);
        }
        v14 += 8;
        v13 += 8;
        v17 -= 8;
      }
      while (v17);
    }
    v25 = v54;
    v26 = *(unsigned int **)(v54 + 24);
    if (v26)
    {
      v29 = *v26;
      v27 = (uint64_t *)(v26 + 4);
      v28 = v29;
      if (v29)
      {
        v30 = 8 * v28;
        for (i = v27; *(_DWORD *)(*i + 8) != 60; ++i)
        {
          v30 -= 8;
          if (!v30)
            return result;
        }
      }
      else
      {
        i = v27;
      }
      v32 = &v27[v28];
      if (i != v32)
      {
        v33 = *i;
LABEL_26:
        if (*(_QWORD *)(v33 + 16))
        {
          v34 = *(_DWORD *)(v25 + 32);
          v35 = *(_DWORD *)(v33 + 24);
          if (v34 < v35)
          {
            do
            {
              v36 = *(_QWORD *)(v33 + 32 + 8 * (v34 + *(_DWORD *)(v33 + 24)));
              if ((*(_BYTE *)(v36 + 2) & 0x40) != 0)
              {
                v37 = *(_QWORD *)(v36 + 16);
                v38 = *(_QWORD *)(v37 + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(v37 + 40) & 7) != 0 || v38 == 0)
                {
                  v41 = 0;
                  v42 = "";
                }
                else
                {
                  v40 = *(_DWORD **)(v38 + 16);
                  v43 = *v40;
                  v42 = (const char *)(v40 + 4);
                  v41 = v43;
                }
                v44 = *(_QWORD *)(v36 + 8);
                WORD4(v61) = 261;
                v59 = v42;
                *(_QWORD *)&v60 = v41;
                v45 = sub_22F25E4D4(v4, v44, (uint64_t)&v59, 0);
                v47 = v45 & 0xFFFFFFFFFFFFFFF8;
                if (v45 <= 7)
                  v47 = 0;
                v48 = v46 & 0xFFFFFFFFFFFFFFF8;
                if (v45 <= 7)
                  v48 = 0;
                v49 = v46 & 7 | (8 * (v45 & 7));
                v50 = *(_QWORD *)(v56 + 32);
                *(_QWORD *)v57 = v47;
                *(_QWORD *)&v57[8] = v48;
                v51 = 1 << v49;
                if (v45 < 8)
                  v51 = 0;
                *(_QWORD *)&v57[16] = v51;
                *(_DWORD *)&v57[24] = 0;
                *(_OWORD *)&v57[32] = 0uLL;
                result = sub_22E5BC134((uint64_t *)(v56 + 40), v50, v37, (uint64_t)v57);
                v25 = v54;
              }
              ++v34;
            }
            while (v35 != v34);
          }
        }
        v52 = i + 1;
        while (v52 != v32)
        {
          v53 = *v52++;
          v33 = v53;
          if (*(_DWORD *)(v53 + 8) == 60)
          {
            i = v52 - 1;
            goto LABEL_26;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F28E680(uint64_t a1, int a2, char a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  llvm::BasicBlock *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  llvm::Value *v33;
  llvm::Value *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  int v46;
  _QWORD *v49;
  uint64_t v51;
  _BOOL4 v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD v64[3];
  uint64_t v65;
  char v66;
  uint64_t v67[3];
  _QWORD v68[2];
  int v69;
  _OWORD v70[3];
  _OWORD v71[3];
  _OWORD v72[3];
  _OWORD v73[4];

  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(v13 + 808);
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * **(unsigned int **)(a4 + 24) + 16);
  v16 = sub_22EF5CDF0(*(_QWORD *)(v13 + 144), *(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0));
  LOWORD(v58) = 261;
  v54 = "omp.dispatch.end";
  v55 = 16;
  v17 = (char *)operator new();
  llvm::BasicBlock::BasicBlock();
  v51 = *(_QWORD *)(a1 + 2008);
  v46 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v46 + 1;
  v54 = "omp.dispatch.cond";
  LOWORD(v58) = 259;
  v18 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  sub_22E5ED9B4((_QWORD *)a1, v18, 0);
  sub_22F0D4E74(a4);
  v20 = v19;
  *(_DWORD *)(a1 + 1544) = 0;
  v53 = (char *)(a1 + 168);
  v21 = *(unsigned __int8 *)(a1 + 2892);
  if (!*(_BYTE *)(a1 + 2892) && (v22 = *(_QWORD *)(a1 + 2880)) != 0)
  {
    sub_22F257BAC(v22, v20, &v54);
    v21 = *(unsigned __int8 *)(a1 + 2892);
  }
  else
  {
    v54 = 0;
  }
  if (!v21 && (v23 = *(_QWORD *)(a1 + 2880)) != 0)
    sub_22F257BAC(v23, SHIDWORD(v20), v67);
  else
    v67[0] = 0;
  sub_22E523FF0(v53, v18, (uint64_t *)&v54, v67);
  if (v67[0])
    llvm::MetadataTracking::untrack();
  if (v54)
    llvm::MetadataTracking::untrack();
  if ((a2 & 1) != 0)
  {
    v24 = *(_OWORD *)(a6 + 160);
    v25 = *(_OWORD *)(a6 + 176);
    v26 = *(_OWORD *)(a6 + 128);
    v73[0] = *(_OWORD *)(a6 + 144);
    v73[1] = v24;
    v73[2] = v25;
    v27 = *(_OWORD *)(a6 + 16);
    v72[0] = *(_OWORD *)a6;
    v72[1] = v27;
    v28 = *(_OWORD *)(a6 + 48);
    v72[2] = *(_OWORD *)(a6 + 32);
    v29 = *(_OWORD *)(a6 + 64);
    v30 = *(_OWORD *)(a6 + 80);
    v71[0] = v28;
    v71[1] = v29;
    v31 = *(unsigned int *)(a4 + 12);
    v71[2] = v30;
    v32 = *(_OWORD *)(a6 + 96);
    v70[1] = *(_OWORD *)(a6 + 112);
    v70[2] = v26;
    v70[0] = v32;
    v33 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BOOL4, _OWORD *, _OWORD *, _OWORD *, _OWORD *))(*(_QWORD *)v14 + 272))(v14, a1, v31, v16, v52, v73, v72, v71, v70);
  }
  else
  {
    sub_22E4D89CC(a1);
    sub_22E4D89CC(a1);
    v33 = sub_22E4D86E0((_QWORD *)a1, *(_QWORD *)(a6 + 224));
  }
  v34 = v33;
  v49 = a5;
  v35 = v17;
  if (*(_QWORD *)(a5[4] + 1992) - *(_QWORD *)(a5[4] + 2000) != *a5)
  {
    v54 = "omp.dispatch.cleanup";
    LOWORD(v58) = 259;
    v35 = (char *)operator new();
    llvm::BasicBlock::BasicBlock();
  }
  v54 = "omp.dispatch.body";
  LOWORD(v58) = 259;
  v36 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v37 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x23489C09C](v37, v36, v35, v34, 0);
  LOWORD(v58) = 257;
  sub_22E3C12C8((uint64_t *)(a1 + 272), v37, (uint64_t)&v54);
  if (v35 != v17)
  {
    sub_22E5ED9B4((_QWORD *)a1, v35, 0);
    v68[0] = v17;
    v68[1] = v51;
    v69 = v46;
    sub_22E48BA00((_QWORD *)a1, (uint64_t)v68);
  }
  sub_22E5ED9B4((_QWORD *)a1, v36, 0);
  if (a2)
    sub_22E4D89CC(a1);
  LOWORD(v58) = 261;
  v54 = "omp.dispatch.inc";
  v55 = 16;
  v38 = (_QWORD *)operator new();
  llvm::BasicBlock::BasicBlock();
  v39 = *(_QWORD *)(a1 + 2008);
  v40 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v40 + 1;
  v54 = v17;
  v55 = v51;
  LODWORD(v56) = v46;
  v57 = v38;
  v58 = v39;
  LODWORD(v59) = v40;
  v41 = (_OWORD *)sub_22E566D28(a1 + 3040, (unint64_t)&v54, 1);
  v42 = (_OWORD *)(*(_QWORD *)(a1 + 3040) + 48 * *(unsigned int *)(a1 + 3048));
  v44 = v41[1];
  v43 = v41[2];
  *v42 = *v41;
  v42[1] = v44;
  v42[2] = v43;
  ++*(_DWORD *)(a1 + 3048);
  v65 = a4;
  v66 = a3;
  v67[0] = (uint64_t)&v65;
  v67[1] = (uint64_t)sub_22E601F80;
  v67[2] = 0;
  v54 = (const char *)a4;
  v55 = a6;
  v56 = v17;
  v57 = (_QWORD *)v51;
  LODWORD(v58) = v46;
  v59 = a7;
  v60 = v16;
  v61 = v52;
  v62 = a8;
  v63 = v49;
  v64[0] = &v54;
  v64[1] = sub_22E60203C;
  v64[2] = 0;
  sub_22E5F8828((_QWORD *)a1, a4, (uint64_t)v67, (uint64_t)v64);
  sub_22E5ED9B4((_QWORD *)a1, v38, 0);
  --*(_DWORD *)(a1 + 3048);
  if ((a2 & 1) == 0)
  {
    sub_22E4D89CC(a1);
    sub_22E4D89CC(a1);
  }
  sub_22E5EDA70(a1);
  *(_DWORD *)(a1 + 1544) = 0;
  sub_22E5244AC((uint64_t)v53);
  sub_22E5ED9B4((_QWORD *)a1, v17, 0);
  LOBYTE(v54) = a2;
  v55 = a4;
  return sub_22F28EC20(a1 + 3440, (_QWORD *)a1, *(_DWORD *)(a4 + 8), (void (*)(uint64_t, _QWORD *))sub_22E602134, (uint64_t)&v54);
}

uint64_t sub_22F28EC20(uint64_t a1, _QWORD *a2, int a3, void (*a4)(uint64_t, _QWORD *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(uint64_t, _QWORD *);

  v7 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  if (*(_DWORD *)(v7 - 56) == a3 && *(_QWORD *)(v7 - 48))
  {
    v9 = a2[40];
    v10 = a2[41];
    a2[40] = 0;
    a2[41] = 0;
    v12 = a4;
    sub_22E5ED9B4(a2, *(_QWORD **)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8) - 48), 0);
    v12(a5, a2);
    sub_22E5EDA70((uint64_t)a2);
    if (v9)
    {
      sub_22E3CB840((uint64_t)(a2 + 34), v9, v10);
    }
    else
    {
      a2[40] = 0;
      a2[41] = 0;
    }
    *(_BYTE *)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8) - 52) = 1;
    a4 = v12;
  }
  return ((uint64_t (*)(uint64_t, _QWORD *))a4)(a5, a2);
}

uint64_t sub_22F28ED18(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  _BOOL8 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD v45[2];
  _BYTE v46[208];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _OWORD v53[4];

  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(v14 + 808);
  if ((a6 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 224))(v15, *a2);
    v14 = *(_QWORD *)(a1 + 144);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * **(unsigned int **)(a4 + 24) + 16);
  v18 = sub_22EF5CDF0(*(_QWORD *)(v14 + 144), *(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0));
  v20 = v19;
  if (v16)
  {
    v21 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)v46 = *(_OWORD *)a7;
    *(_OWORD *)&v46[16] = v21;
    v22 = *(_OWORD *)(a7 + 48);
    *(_OWORD *)&v46[32] = *(_OWORD *)(a7 + 32);
    v23 = *(_OWORD *)(a7 + 64);
    v24 = *(_OWORD *)(a7 + 80);
    v53[0] = v22;
    v53[1] = v23;
    v53[2] = v24;
    v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *, _OWORD *))a8)(*(_QWORD *)(a8 + 8), a1, a4, v46, v53);
    v26 = *(_QWORD *)(a7 + 192);
    *(_QWORD *)v46 = v25;
    *(_QWORD *)&v46[8] = v27;
    *(_QWORD *)&v46[16] = v26;
    (*(void (**)(uint64_t, uint64_t, _QWORD, unsigned int *, uint64_t, _BOOL8, uint64_t, _BYTE *))(*(_QWORD *)v15 + 232))(v15, a1, *(unsigned int *)(a4 + 12), a2, v18, v20, a6, v46);
  }
  else
  {
    v28 = *(_OWORD *)(a7 + 128);
    *(_OWORD *)&v46[8] = *(_OWORD *)(a7 + 144);
    v29 = *(_OWORD *)(a7 + 176);
    *(_OWORD *)&v46[24] = *(_OWORD *)(a7 + 160);
    *(_OWORD *)&v46[40] = v29;
    v30 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)&v46[56] = *(_OWORD *)a7;
    *(_OWORD *)&v46[72] = v30;
    v31 = *(_OWORD *)(a7 + 48);
    *(_OWORD *)&v46[88] = *(_OWORD *)(a7 + 32);
    *(_OWORD *)&v46[104] = v31;
    v32 = *(_OWORD *)(a7 + 80);
    *(_OWORD *)&v46[120] = *(_OWORD *)(a7 + 64);
    *(_OWORD *)&v46[136] = v32;
    *(_OWORD *)&v46[184] = v28;
    v33 = *(_OWORD *)(a7 + 96);
    *(_OWORD *)&v46[168] = *(_OWORD *)(a7 + 112);
    *(_OWORD *)&v46[152] = v33;
    v34 = *(_QWORD *)(a7 + 192);
    *(_DWORD *)v46 = v18;
    v46[4] = v19;
    v46[5] = a6;
    *(_QWORD *)&v46[200] = v34;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, unsigned int *, _BYTE *))(*(_QWORD *)v15 + 240))(v15, a1, *(unsigned int *)(a4 + 12), *(unsigned int *)(a4 + 8), a2, v46);
  }
  v52 = a6;
  v35 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)v46 = *(_OWORD *)a7;
  *(_OWORD *)&v46[16] = v35;
  v36 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)&v46[32] = *(_OWORD *)(a7 + 32);
  *(_OWORD *)&v46[48] = v36;
  v37 = *(_OWORD *)(a7 + 80);
  *(_OWORD *)&v46[64] = *(_OWORD *)(a7 + 64);
  *(_OWORD *)&v46[80] = v37;
  v38 = *(_OWORD *)(a7 + 112);
  *(_OWORD *)&v46[96] = *(_OWORD *)(a7 + 96);
  *(_OWORD *)&v46[112] = v38;
  v39 = *(_OWORD *)(a7 + 176);
  *(_OWORD *)&v46[160] = *(_OWORD *)(a7 + 160);
  *(_OWORD *)&v46[176] = v39;
  v40 = *(_OWORD *)(a7 + 144);
  *(_OWORD *)&v46[128] = *(_OWORD *)(a7 + 128);
  *(_OWORD *)&v46[144] = v40;
  *(_OWORD *)&v46[192] = *(_OWORD *)(a7 + 192);
  v41 = (_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * **(unsigned int **)(a4 + 24));
  v47 = v41[8];
  v48 = v41[7];
  v49 = v41[6];
  v50 = v41[15];
  v51 = v41[16];
  *(_QWORD *)&v53[0] = sub_22F294764;
  *((_QWORD *)&v53[0] + 1) = sub_22E5F8964;
  v45[0] = sub_22E602164;
  v45[1] = &v52;
  return sub_22F28E680(a1, v16, a3, a4, a5, (uint64_t)v46, (uint64_t)v53, (uint64_t)v45);
}

uint64_t sub_22F28EF90(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, __int128 *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  _OWORD v41[12];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(v12 + 808);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * **(unsigned int **)(a3 + 24) + 16);
  v15 = sub_22EF5CDF0(*(_QWORD *)(v12 + 144), *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_22F110B20(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0));
  v17 = a5[8];
  v52 = a5[9];
  v18 = a5[11];
  v53 = a5[10];
  v54 = v18;
  v19 = a5[1];
  v55 = *a5;
  v56 = v19;
  v20 = a5[3];
  v57 = a5[2];
  v58 = v20;
  v21 = a5[5];
  v59 = a5[4];
  v60 = v21;
  v63 = v17;
  v22 = a5[6];
  v62 = a5[7];
  v61 = v22;
  v23 = *((_QWORD *)a5 + 24);
  v49 = v15;
  v50 = v16;
  v51 = 0;
  v64 = v23;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v13 + 248))(v13, a1, *(unsigned int *)(a3 + 12), a2, &v49);
  v24 = sub_22F421B7C(*(_DWORD *)(a3 + 8));
  v25 = *(_QWORD *)(a3 + 24) + 8 * **(unsigned int **)(a3 + 24) + 16;
  v26 = 48;
  if (v24)
    v26 = 144;
  v27 = *(_QWORD *)(v25 + v26);
  v28 = a5[1];
  v41[0] = *a5;
  v41[1] = v28;
  v29 = a5[3];
  v41[2] = a5[2];
  v41[3] = v29;
  v30 = a5[5];
  v41[4] = a5[4];
  v41[5] = v30;
  v31 = a5[7];
  v41[6] = a5[6];
  v41[7] = v31;
  v32 = a5[9];
  v41[8] = a5[8];
  v41[9] = v32;
  v33 = a5[11];
  v41[10] = a5[10];
  v41[11] = v33;
  v42 = *((_QWORD *)a5 + 24);
  v34 = 96;
  if (v24)
    v34 = 176;
  v43 = *(_QWORD *)(v25 + v34);
  v44 = v27;
  v35 = 40;
  if (v24)
    v35 = 184;
  v45 = *(_QWORD *)(v25 + v35);
  v36 = 32;
  if (v24)
    v36 = 192;
  v46 = *(_QWORD *)(v25 + v36);
  v37 = 104;
  if (v24)
    v37 = 200;
  v47 = *(_QWORD *)(v25 + v37);
  v38 = 112;
  if (v24)
    v38 = 208;
  v48 = *(_QWORD *)(v25 + v38);
  v40[0] = sub_22F2947A4;
  v40[1] = nullsub_64;
  return sub_22F28E680(a1, 0, 0, a3, a4, (uint64_t)v41, a6, (uint64_t)v40);
}

uint64_t sub_22F28F1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  _BYTE v7[104];
  _QWORD v8[12];

  v8[11] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  sub_22E600354((uint64_t)v7, a1, a2, 0x100000028, 1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v5[0] = &v6;
  v5[1] = sub_22E602188;
  v5[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v3 + 360))(v3, a1, 16, v5, 0);
  sub_22F283FC4((uint64_t)v8);
  return sub_22E488B4C((uint64_t)v7);
}

uint64_t sub_22F28F26C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  _BYTE v7[104];
  _QWORD v8[12];

  v8[11] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  sub_22E600354((uint64_t)v7, a1, a2, 0x100000028, 1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v5[0] = &v6;
  v5[1] = sub_22E6028BC;
  v5[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v3 + 360))(v3, a1, 16, v5, 0);
  sub_22F283FC4((uint64_t)v8);
  return sub_22E488B4C((uint64_t)v7);
}

uint64_t sub_22F28F330(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  _BYTE v7[104];
  _QWORD v8[12];

  v8[11] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  sub_22E600354((uint64_t)v7, a1, a2, 0x100000059, 1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v5[0] = &v6;
  v5[1] = sub_22E60290C;
  v5[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v3 + 360))(v3, a1, 54, v5, 0);
  sub_22F283FC4((uint64_t)v8);
  return sub_22E488B4C((uint64_t)v7);
}

uint64_t sub_22F28F3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E60295C;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F28F454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  BOOL v12;
  _QWORD v13[3];
  _DWORD v14[4];
  _QWORD v15[2];
  char v16;
  _BYTE v17[104];
  _QWORD v18[12];

  v18[11] = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v15[0] = a2;
  v15[1] = &v16;
  sub_22E5B8E78(v14, a1, a2);
  sub_22E600354((uint64_t)v17, a1, a2, 0x100000059, 1);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v13[0] = v15;
  v13[1] = sub_22E6042A8;
  v13[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v4 + 360))(v4, a1, 54, v13, 0);
  sub_22F283FC4((uint64_t)v18);
  sub_22E488B4C((uint64_t)v17);
  sub_22F283234(v14);
  v5 = *(unsigned int **)(a2 + 24);
  if (!v5)
    goto LABEL_6;
  v8 = *v5;
  v6 = v5 + 4;
  v7 = v8;
  if (v8)
  {
    v9 = 8 * v7;
    v10 = v6;
    while (*(_DWORD *)(*(_QWORD *)v10 + 8) != 51)
    {
      v10 += 2;
      v9 -= 8;
      if (!v9)
        goto LABEL_6;
    }
  }
  else
  {
    v10 = v6;
  }
  if (v10 == &v6[2 * v7] || (*(_QWORD *)v10 ? (v12 = v16 == 0) : (v12 = 0), !v12))
LABEL_6:
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144)
                                                                                            + 808)
                                                                              + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), 33, 1, 0);
  return sub_22E5F6470(a1, a2);
}

uint64_t sub_22F28F5CC(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  __n128 v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *i;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[4];
  char v20;

  v4 = sub_22F28423C((uint64_t)a2);
  v5 = *(_BYTE **)(v4 + 8 * *(unsigned int *)(v4 + 8) + 32);
  if (*v5 == 8)
    v6 = *(_QWORD *)(v4 + 8 * *(unsigned int *)(v4 + 8) + 32);
  else
    v6 = 0;
  v20 = 0;
  v19[0] = a2;
  v19[1] = v5;
  v19[2] = v6;
  v19[3] = &v20;
  v7 = *a2;
  if (v7 == 68 || (v8 = 0, v7 == 71))
    v8 = a2[32] != 0;
  v9 = sub_22F293FF0((uint64_t)(a1 + 430), (uint64_t)a1, *((_DWORD *)a2 + 2), v8);
  v10 = *(_QWORD *)(a1[18] + 808);
  v18[0] = v19;
  v18[1] = sub_22E6042E0;
  v18[2] = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD *, _BOOL8, __n128))(*(_QWORD *)v10 + 360))(v10, a1, 53, v18, v8, v9);
  if (v20)
  {
    v11 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v11)
    {
      v15 = *v11;
      v13 = v11 + 4;
      v14 = v15;
      if (v15)
      {
        v17 = 8 * v14;
        for (i = v13; *(_DWORD *)(*(_QWORD *)i + 8) != 51; i += 2)
        {
          v17 -= 8;
          if (!v17)
            return sub_22F294168((uint64_t)(a1 + 430), a1);
        }
      }
      else
      {
        i = v13;
      }
      if (i != &v13[2 * v14] && *(_QWORD *)i)
        (*(void (**)(_QWORD, _QWORD *, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1[18] + 808)
                                                                                   + 184))(*(_QWORD *)(a1[18] + 808), a1, *((unsigned int *)a2 + 3), 89, 1, 0);
    }
  }
  return sub_22F294168((uint64_t)(a1 + 430), a1);
}

uint64_t sub_22F28F730(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t Section;
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(_QWORD *, uint64_t);
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _BYTE v14[104];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(a1[18] + 152) + 76) & 0x20) == 0)
  {
    sub_22F0D4E74(a2);
    sub_22E4889F4((uint64_t)v14, (uint64_t)a1, v4);
    sub_22E5E5100((uint64_t)a1, a2);
    sub_22E5E5158(a1, *(_QWORD *)(*(_QWORD *)(a2 + 24)+ 8 * **(unsigned int **)(a2 + 24)+ 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)+ 16), 0, 0);
    return sub_22E488B4C((uint64_t)v14);
  }
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v14, (uint64_t)a1, v6);
  sub_22E5E5100((uint64_t)a1, a2);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 34));
  v12[0] = &off_24FA66810;
  v12[1] = a1;
  v13 = v12;
  Section = llvm::OpenMPIRBuilder::createSection();
  if (Section)
  {
    sub_22E3CB840((uint64_t)(a1 + 34), Section, v8);
  }
  else
  {
    a1[40] = 0;
    a1[41] = 0;
  }
  v9 = v13;
  if (v13 == v12)
  {
    v10 = (void (**)(_QWORD *, uint64_t))(v12[0] + 32);
    v9 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_10;
    v10 = (void (**)(_QWORD *, uint64_t))(*v13 + 40);
  }
  (*v10)(v9, v8);
LABEL_10:
  if (v11)
    llvm::MetadataTracking::untrack();
  return sub_22E488B4C((uint64_t)v14);
}

uint64_t sub_22F28F8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t Master;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void (**v13)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[104];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 152) + 76) & 0x20) == 0)
  {
    sub_22F0D4E74(a2);
    sub_22E4889F4((uint64_t)v19, a1, v4);
    sub_22E5E5100(a1, a2);
    v14[0] = a2;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    *(_QWORD *)&v15 = v14;
    *((_QWORD *)&v15 + 1) = sub_22E600920;
    v16 = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v5 + 136))(v5, a1, &v15, *(unsigned int *)(a2 + 12));
    return sub_22E488B4C((uint64_t)v19);
  }
  v14[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24)
                     + 8 * **(unsigned int **)(a2 + 24)
                     + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4)
                     + 16);
  v14[1] = a1;
  sub_22F0D4E74(a2);
  sub_22E4889F4((uint64_t)v19, a1, v7);
  sub_22E5E5100(a1, a2);
  v15 = *(_OWORD *)(a1 + 320);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  v17[0] = &off_24FA66858;
  v17[1] = a1;
  v18 = v17;
  Master = llvm::OpenMPIRBuilder::createMaster();
  if (Master)
  {
    sub_22E3CB840(a1 + 272, Master, v9);
  }
  else
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  v12 = v18;
  if (v18 == v17)
  {
    v13 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v17[0] + 32);
    v12 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    v13 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v18 + 40);
  }
  (*v13)(v12, v9, v10, v11);
LABEL_10:
  if (v16)
    llvm::MetadataTracking::untrack();
  return sub_22E488B4C((uint64_t)v19);
}

uint64_t sub_22F28FABC(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[3];
  _DWORD v15[4];
  uint64_t v16;

  v16 = a2;
  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
  {
    v8 = *v4;
    v6 = v4 + 4;
    v7 = v8;
    if (v8)
    {
      v12 = 8 * v7;
      v9 = v6;
      while (*(_DWORD *)(*(_QWORD *)v9 + 8) != 66)
      {
        v9 += 2;
        v12 -= 8;
        if (!v12)
          goto LABEL_2;
      }
    }
    else
    {
      v9 = v6;
    }
    v10 = &v6[2 * v7];
    if (v9 != v10)
    {
      v11 = *(_QWORD *)v9;
LABEL_7:
      if (*(_DWORD *)(v11 + 48) == 1)
      {
        v14[0] = a2;
        sub_22E5FB6AC(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E605840, (uint64_t)v14);
      }
      else
      {
        while (1)
        {
          v9 += 2;
          if (v9 == v10)
            break;
          v11 = *(_QWORD *)v9;
          if (*(_DWORD *)(*(_QWORD *)v9 + 8) == 66)
            goto LABEL_7;
        }
      }
    }
  }
LABEL_2:
  sub_22E5B8E78(v15, (uint64_t)a1, a2);
  v14[0] = &v16;
  v14[1] = sub_22E6059B8;
  v14[2] = 0;
  v13[0] = sub_22F294750;
  v13[1] = nullsub_63;
  sub_22E5F5E6C((uint64_t)a1, a2, 33, (uint64_t)v14, (uint64_t)v13);
  sub_22F283234(v15);
  return sub_22E5F6470((uint64_t)a1, a2);
}

uint64_t sub_22F28FBE4(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[3];
  _DWORD v15[4];
  uint64_t v16;

  v16 = a2;
  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
  {
    v8 = *v4;
    v6 = v4 + 4;
    v7 = v8;
    if (v8)
    {
      v12 = 8 * v7;
      v9 = v6;
      while (*(_DWORD *)(*(_QWORD *)v9 + 8) != 66)
      {
        v9 += 2;
        v12 -= 8;
        if (!v12)
          goto LABEL_2;
      }
    }
    else
    {
      v9 = v6;
    }
    v10 = &v6[2 * v7];
    if (v9 != v10)
    {
      v11 = *(_QWORD *)v9;
LABEL_7:
      if (*(_DWORD *)(v11 + 48) == 1)
      {
        v14[0] = a2;
        sub_22E5FB6AC(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E6059F4, (uint64_t)v14);
      }
      else
      {
        while (1)
        {
          v9 += 2;
          if (v9 == v10)
            break;
          v11 = *(_QWORD *)v9;
          if (*(_DWORD *)(*(_QWORD *)v9 + 8) == 66)
            goto LABEL_7;
        }
      }
    }
  }
LABEL_2:
  sub_22E5B8E78(v15, (uint64_t)a1, a2);
  v14[0] = &v16;
  v14[1] = sub_22E605B6C;
  v14[2] = 0;
  v13[0] = sub_22F294750;
  v13[1] = nullsub_63;
  sub_22E5F5E6C((uint64_t)a1, a2, 34, (uint64_t)v14, (uint64_t)v13);
  sub_22F283234(v15);
  return sub_22E5F6470((uint64_t)a1, a2);
}

uint64_t sub_22F28FD0C(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  _QWORD v6[3];
  _DWORD v7[4];
  uint64_t v8;

  v8 = a2;
  sub_22E5B8E78(v7, a1, a2);
  v6[0] = &v8;
  v6[1] = sub_22E605BA8;
  v6[2] = 0;
  v5[0] = sub_22F294750;
  v5[1] = nullsub_63;
  sub_22E5F5E6C(a1, a2, 35, (uint64_t)v6, (uint64_t)v5);
  sub_22E5F6264(a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E605D1C, (uint64_t)v6);
  sub_22F283234(v7);
  return sub_22E5F6470(a1, a2);
}

uint64_t sub_22F28FDB4(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  _QWORD v6[3];
  _DWORD v7[4];
  uint64_t v8;

  v8 = a2;
  sub_22E5B8E78(v7, a1, a2);
  v6[0] = &v8;
  v6[1] = sub_22E605D24;
  v6[2] = 0;
  v5[0] = sub_22F294750;
  v5[1] = nullsub_63;
  sub_22E5F5E6C(a1, a2, 53, (uint64_t)v6, (uint64_t)v5);
  sub_22F283234(v7);
  return sub_22E5F6470(a1, a2);
}

uint64_t sub_22F28FE44(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  __n128 v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  llvm::Value *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  _DWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v130;
  uint64_t v132;
  _QWORD v133[5];
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  llvm *v141;
  uint64_t v142;
  unsigned int v143;
  __int128 v144;
  uint64_t v145;
  _QWORD v146[10];
  uint64_t v147;
  void *v148[2];
  _BYTE v149[32];
  void *v150[2];
  _QWORD v151[6];

  v151[4] = *MEMORY[0x24BDAC8D0];
  v9 = sub_22E59F470(a2, a3);
  v126 = *(_QWORD *)(v9 + 16);
  v127 = v9;
  v132 = a2;
  v11 = *(unsigned int **)(a2 + 24);
  if (!v11)
    goto LABEL_2;
  v20 = *v11;
  if ((_DWORD)v20)
  {
    v43 = 8 * v20;
    v21 = v11 + 4;
    while (*(_DWORD *)(*(_QWORD *)v21 + 8) != 28)
    {
      v21 += 2;
      v43 -= 8;
      if (!v43)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = v11 + 4;
  }
  if (v21 != &v11[2 * v20 + 4] && *(_QWORD *)v21)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v21 + 32);
    LOBYTE(v144) = 0;
    if (sub_22E61F3B0((uint64_t)a1, v22, &v144, 0))
      v23 = *(_QWORD *)(a6 + 848) & 0xFFFFFFFFFFFFFFFBLL | (4 * v144);
    else
      v23 = *(_QWORD *)(a6 + 848) & 7 | (unint64_t)sub_22E4D86E0(a1, v22);
    *(_QWORD *)(a6 + 848) = v23;
    v11 = *(unsigned int **)(a2 + 24);
  }
  else
  {
LABEL_2:
    *(_QWORD *)(a6 + 848) &= ~4uLL;
  }
  v130 = a5;
  if (v11)
  {
    v12 = v11 + 4;
    v13 = *v11;
    if ((_DWORD)v13)
    {
      v14 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v12[v14] + 8) != 62)
      {
        v14 += 2;
        if (2 * v13 == v14)
          goto LABEL_8;
      }
      v24 = &v12[v14];
    }
    else
    {
      v24 = v11 + 4;
    }
    if (v24 != &v12[2 * v13] && *(_QWORD *)v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)v24 + 32);
      *(_QWORD *)(a6 + 864) |= 4uLL;
      *(_QWORD *)&v144 = a1;
      *((_QWORD *)&v144 + 1) = a1 + 34;
      LOBYTE(v145) = 0;
      v146[0] = *(_QWORD *)(a1[18] + 232);
      v26 = (llvm::Value *)sub_22E50E974(&v144, v25, v10);
      v27 = *(_QWORD *)(v25 + 8);
      v28 = sub_22EF60A6C(*(_QWORD *)(a1[18] + 144), 32, 1);
      sub_22EFF605C(v25);
      *(_QWORD *)(a6 + 864) = *(_QWORD *)(a6 + 864) & 7 | (unint64_t)sub_22E50EA40((uint64_t)a1, v26, v27, v28, v29);
      v11 = *(unsigned int **)(a2 + 24);
    }
LABEL_8:
    v141 = 0;
    v142 = 0;
    v143 = 0;
    if (v11)
    {
      v17 = *v11;
      v15 = v11 + 4;
      v16 = v17;
      if (v17)
      {
        v18 = 8 * v16;
        v19 = v15;
        while (*(_DWORD *)(*(_QWORD *)v19 + 8) != 63)
        {
          v19 += 2;
          v18 -= 8;
          if (!v18)
            goto LABEL_46;
        }
      }
      else
      {
        v19 = v15;
      }
      v30 = &v15[2 * v16];
      if (v19 != v30)
      {
        v31 = *(_QWORD *)v19;
LABEL_27:
        v32 = *(unsigned int *)(v31 + 16);
        if ((_DWORD)v32)
        {
          v33 = 0;
          v34 = v31 + 24;
          v35 = 8 * v32;
          v36 = v31 + 24 + 8 * v32;
          do
          {
            v37 = *(_QWORD *)(v36 + v33);
            v135 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v34 + v33) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v34 + v33) + 16));
            sub_22F294270((uint64_t)&v144, (uint64_t)&v141, &v135);
            if ((_BYTE)v145)
            {
              v38 = *(_QWORD *)(v34 + v33);
              v39 = *(unsigned int *)(a6 + 8);
              if (v39 >= *(unsigned int *)(a6 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v39 = *(unsigned int *)(a6 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a6 + 8 * v39) = v38;
              ++*(_DWORD *)(a6 + 8);
              v40 = *(unsigned int *)(a6 + 56);
              if (v40 >= *(unsigned int *)(a6 + 60))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v40 = *(unsigned int *)(a6 + 56);
              }
              *(_QWORD *)(*(_QWORD *)(a6 + 48) + 8 * v40) = v37;
              ++*(_DWORD *)(a6 + 56);
            }
            v33 += 8;
          }
          while (v35 != v33);
        }
        v41 = v19 + 2;
        while (v41 != v30)
        {
          v42 = *(_QWORD *)v41;
          v41 += 2;
          v31 = v42;
          if (*(_DWORD *)(v42 + 8) == 63)
          {
            v19 = v41 - 2;
            goto LABEL_27;
          }
        }
      }
    }
  }
  else
  {
    v141 = 0;
    v142 = 0;
    v143 = 0;
  }
LABEL_46:
  sub_22E605D5C((uint64_t)&v141);
  v44 = *(unsigned int **)(v132 + 24);
  if (v44)
  {
    v52 = v44 + 4;
    v53 = *v44;
    if ((_DWORD)v53)
    {
      v104 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v52[v104] + 8) != 29)
      {
        v104 += 2;
        if (2 * v53 == v104)
          goto LABEL_111;
      }
      v54 = &v52[v104];
    }
    else
    {
      v54 = v44 + 4;
    }
    v55 = &v52[2 * v53];
    if (v54 != v55)
    {
      v56 = *(_QWORD *)v54;
LABEL_59:
      v57 = *(unsigned int *)(v56 + 16);
      if ((_DWORD)v57)
      {
        v58 = 0;
        v59 = v56 + 40;
        v60 = v56 + 40 + 16 * v57;
        v61 = 8 * v57;
        v62 = v56 + 40 + 8 * v57;
        do
        {
          v63 = *(_QWORD *)(v62 + v58);
          v135 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v59 + v58) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v59 + v58) + 16));
          sub_22F294270((uint64_t)&v144, (uint64_t)&v141, &v135);
          if ((_BYTE)v145)
          {
            v64 = *(_QWORD *)(v59 + v58);
            v65 = *(unsigned int *)(a6 + 104);
            if (v65 >= *(unsigned int *)(a6 + 108))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v65 = *(unsigned int *)(a6 + 104);
            }
            *(_QWORD *)(*(_QWORD *)(a6 + 96) + 8 * v65) = v64;
            ++*(_DWORD *)(a6 + 104);
            v66 = *(unsigned int *)(a6 + 152);
            if (v66 >= *(unsigned int *)(a6 + 156))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v66 = *(unsigned int *)(a6 + 152);
            }
            *(_QWORD *)(*(_QWORD *)(a6 + 144) + 8 * v66) = v63;
            ++*(_DWORD *)(a6 + 152);
            v67 = *(_QWORD *)(v60 + v58);
            v68 = *(unsigned int *)(a6 + 200);
            if (v68 >= *(unsigned int *)(a6 + 204))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v68 = *(unsigned int *)(a6 + 200);
            }
            *(_QWORD *)(*(_QWORD *)(a6 + 192) + 8 * v68) = v67;
            ++*(_DWORD *)(a6 + 200);
          }
          v58 += 8;
        }
        while (v61 != v58);
      }
      v69 = v54 + 2;
      while (v69 != v55)
      {
        v70 = *(_QWORD *)v69;
        v69 += 2;
        v56 = v70;
        if (*(_DWORD *)(v70 + 8) == 29)
        {
          v54 = v69 - 2;
          goto LABEL_59;
        }
      }
      v44 = *(unsigned int **)(v132 + 24);
    }
LABEL_111:
    v45 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v139 = 0;
    v140 = 0;
    v138 = 0;
    if (v44)
    {
      v45 = v44;
      v108 = *v44;
      v106 = v44 + 4;
      v107 = v108;
      if (v108)
      {
        v125 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v106[v125] + 8) != 43)
        {
          v125 += 2;
          if (2 * v107 == v125)
            goto LABEL_48;
        }
        v109 = &v106[v125];
      }
      else
      {
        v109 = v106;
      }
      v110 = &v106[2 * v107];
      if (v109 != v110)
      {
        v111 = *(_QWORD *)v109;
LABEL_116:
        v112 = *(unsigned int *)(v111 + 16);
        if ((_DWORD)v112)
        {
          v113 = 0;
          v114 = v111 + 64;
          v115 = 8 * v112;
          v116 = v111 + 64 + 8 * v112;
          v117 = v111 + 64 + 24 * v112;
          do
          {
            v118 = *(_QWORD *)(v116 + v113);
            v150[0] = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v114 + v113) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(v114 + v113) + 16));
            sub_22F294270((uint64_t)&v144, (uint64_t)&v141, v150);
            if ((_BYTE)v145)
            {
              v119 = *(_QWORD *)(v114 + v113);
              v120 = *(unsigned int *)(a6 + 248);
              if (v120 >= *(unsigned int *)(a6 + 252))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v120 = *(unsigned int *)(a6 + 248);
              }
              *(_QWORD *)(*(_QWORD *)(a6 + 240) + 8 * v120) = v119;
              ++*(_DWORD *)(a6 + 248);
              v121 = *(unsigned int *)(a6 + 296);
              if (v121 >= *(unsigned int *)(a6 + 300))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v121 = *(unsigned int *)(a6 + 296);
              }
              *(_QWORD *)(*(_QWORD *)(a6 + 288) + 8 * v121) = v118;
              ++*(_DWORD *)(a6 + 296);
            }
            v122 = *(_QWORD *)(v114 + v113);
            *(_QWORD *)&v144 = *(_QWORD *)(*(_QWORD *)(v117 + v113) + 16);
            *((_QWORD *)&v144 + 1) = v122;
            sub_22F29090C((uint64_t)&v135, &v144);
            v113 += 8;
          }
          while (v115 != v113);
        }
        v123 = v109 + 2;
        while (v123 != v110)
        {
          v124 = *(_QWORD *)v123;
          v123 += 2;
          v111 = v124;
          if (*(_DWORD *)(v124 + 8) == 43)
          {
            v109 = v123 - 2;
            goto LABEL_116;
          }
        }
        v45 = *(unsigned int **)(v132 + 24);
      }
    }
  }
  else
  {
    v45 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v139 = 0;
    v140 = 0;
    v138 = 0;
  }
LABEL_48:
  v150[0] = v151;
  v150[1] = (void *)0x400000000;
  v148[0] = v149;
  v148[1] = (void *)0x400000000;
  if (v45)
  {
    v73 = *v45;
    v71 = (uint64_t *)(v45 + 4);
    v72 = v73;
    if (v73)
    {
      v105 = 8 * v72;
      v74 = v71;
      while (*(_DWORD *)(*v74 + 8) != 66)
      {
        ++v74;
        v105 -= 8;
        if (!v105)
          goto LABEL_49;
      }
    }
    else
    {
      v74 = v71;
    }
    v75 = &v71[v72];
    if (v74 != v75)
    {
      v76 = a6 + 336;
      v77 = a6 + 384;
      v78 = *v74;
LABEL_78:
      v79 = v78 + 104;
      sub_22F2633B0(v76, (_BYTE *)(v78 + 104), (_BYTE *)(v78 + 104 + 8 * *(unsigned int *)(v78 + 16)));
      sub_22F2633B0(v77, (_BYTE *)(v78 + 104), (_BYTE *)(v78 + 104 + 8 * *(unsigned int *)(v78 + 16)));
      sub_22F2633B0(a6 + 432, (_BYTE *)(v79 + 8 * *(unsigned int *)(v78 + 16)), (_BYTE *)(v79 + 8 * *(unsigned int *)(v78 + 16) + 8 * *(unsigned int *)(v78 + 16)));
      v80 = *(unsigned int *)(v78 + 16);
      v81 = (_BYTE *)(v78 + 104 + 8 * v80 + 8 * v80 + 8 * v80 + 8 * v80);
      sub_22F2633B0(a6 + 480, v81, &v81[8 * v80]);
      v82 = *(unsigned int *)(v78 + 16);
      sub_22F2633B0((uint64_t)v150, (_BYTE *)(v79 + 8 * v82 + 8 * v82), (_BYTE *)(v79 + 8 * v82 + 8 * v82 + 8 * v82));
      v83 = *(unsigned int *)(v78 + 16);
      v84 = (_BYTE *)(v78 + 104 + 8 * v83 + 8 * v83 + 8 * v83);
      sub_22F2633B0((uint64_t)v148, v84, &v84[8 * v83]);
      v85 = v74 + 1;
      while (v85 != v75)
      {
        v86 = *v85++;
        v78 = v86;
        if (*(_DWORD *)(v86 + 8) == 66)
        {
          v74 = v85 - 1;
          v77 = a6 + 384;
          v76 = a6 + 336;
          goto LABEL_78;
        }
      }
    }
  }
LABEL_49:
  *(_QWORD *)(a6 + 872) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[18] + 808) + 376))(*(_QWORD *)(a1[18] + 808));
  v46 = *(_DWORD **)(v132 + 24);
  if (v46)
  {
    v49 = *v46;
    v47 = (uint64_t *)(v46 + 4);
    v48 = v49;
    if (v49)
    {
      v50 = 8 * v48;
      v51 = v47;
      while (*(_DWORD *)(*v51 + 8) != 18)
      {
        ++v51;
        v50 -= 8;
        if (!v50)
          goto LABEL_89;
      }
    }
    else
    {
      v51 = v47;
    }
    v87 = &v47[v48];
    if (v51 != v87)
    {
      v88 = *v51;
LABEL_85:
      LODWORD(v133[0]) = *(_DWORD *)(v88 + 20);
      *(_QWORD *)&v144 = sub_22F3EBC3C(v88);
      v89 = sub_22F2909A8(a6 + 576, v133, (uint64_t *)&v144);
      sub_22F2633B0(v89 + 16, (_BYTE *)(v88 + 40), (_BYTE *)(v88 + 40 + 8 * *(unsigned int *)(v88 + 16)));
      v90 = v51 + 1;
      while (v90 != v87)
      {
        v91 = *v90++;
        v88 = v91;
        if (*(_DWORD *)(v91 + 8) == 18)
        {
          v51 = v90 - 1;
          goto LABEL_85;
        }
      }
    }
  }
LABEL_89:
  v92 = (_QWORD *)(v126 & 0xFFFFFFFFFFFFFFF8);
  if (*(_BYTE *)(a6 + 884))
  {
    v94 = 1;
  }
  else
  {
    *(_QWORD *)&v144 = &off_24FA66678;
    *((_QWORD *)&v144 + 1) = v146;
    v145 = 0x400000000;
    v93 = sub_22F28423C(v132);
    sub_22E5FBAA0((uint64_t)&v144, *(_DWORD **)(v93 + 8 * *(unsigned int *)(v93 + 8) + 32));
    sub_22F2909FC((unsigned int *)(a6 + 528), *((unsigned int ***)&v144 + 1), (unsigned int **)(*((_QWORD *)&v144 + 1) + 8 * v145));
    if (*((_QWORD **)&v144 + 1) != v146)
      free(*((void **)&v144 + 1));
    v94 = *(_BYTE *)(a6 + 884) != 0;
  }
  v133[0] = a6;
  v133[1] = v132;
  v133[2] = v127;
  v133[3] = a4;
  v133[4] = &v135;
  v134 = a3;
  v95 = *(_QWORD *)(a1[18] + 808);
  v96 = v92[11];
  v97 = v92[12];
  v98 = v92[15];
  v99 = *(unsigned int *)(v132 + 8);
  *(_QWORD *)&v144 = v133;
  *((_QWORD *)&v144 + 1) = sub_22E605E48;
  v145 = 0;
  v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, _BOOL8, uint64_t))(*(_QWORD *)v95 + 104))(v95, v132, v96, v97, v98, v99, &v144, v94, a6 + 880);
  v101 = *(_DWORD *)(v132 + 8);
  v102 = !sub_22F421A78(v101) && !sub_22F421AC0(v101);
  sub_22E600354((uint64_t)&v144, (uint64_t)a1, v132, 0, v102);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))v130)(*(_QWORD *)(v130 + 8), a1, v100, a6);
  sub_22F283FC4((uint64_t)&v147);
  sub_22E488B4C((uint64_t)&v144);
  if (v148[0] != v149)
    free(v148[0]);
  if (v150[0] != v151)
    free(v150[0]);
  sub_22F244D40((uint64_t)&v135);
  return llvm::deallocate_buffer(v141, (void *)(8 * v143));
}

uint64_t sub_22F29090C(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)a2;
  v10 = 0;
  result = sub_22E54DCBC(a1, &v9, &v10, (uint64_t)&v7);
  if (v8)
  {
    v5 = v7;
    v6 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_22E4D6CC4((void **)(a1 + 24), a2);
    }
    else
    {
      *v6 = *a2;
      result = (uint64_t)(v6 + 1);
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 4) - 1;
  }
  return result;
}

uint64_t sub_22F2909A8(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22F294824(a1, a2, a3);
  v4 = *(_QWORD *)a1 + (v3 << 6);
  v5 = *a3;
  *(_DWORD *)v4 = *a2;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = v4 + 32;
  *(_QWORD *)(v4 + 24) = 0x400000000;
  v6 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v6;
  return *(_QWORD *)a1 + (v6 << 6) - 64;
}

unsigned int *sub_22F2909FC(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int **v8;

  v4 = a2;
  v5 = result;
  v6 = (char *)a3 - (char *)a2;
  v7 = result[2];
  if (v7 + a3 - a2 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v8 = (unsigned int **)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      result = *v4;
      if (*v4)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
      *v8++ = result;
      ++v4;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_22F290A9C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _BYTE **v18;
  _BYTE **v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 v60;
  _QWORD *v61;
  _DWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  _BYTE *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _BYTE *v92;
  _BYTE *v93;
  _QWORD **v94;
  _QWORD **v95;
  _QWORD **v96;
  _BYTE **v97;
  _BYTE **v98;
  _BYTE **v99;
  uint64_t v100;
  __int128 v101;
  unint64_t v102;
  uint64_t v103;
  _BYTE **v104;
  _BYTE **v105;
  _BYTE **v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v112;
  _OWORD v113[3];
  __int128 *v114;
  uint64_t (*v115)(_QWORD *, uint64_t, void (***)(_QWORD, uint64_t));
  uint64_t v116;
  _BOOL8 v117;
  unsigned int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  _QWORD v125[3];
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129[2];
  int v130;
  _QWORD v131[2];
  int v132;
  _OWORD v133[3];
  _QWORD v134[2];
  _QWORD v135[6];
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE v139[32];
  _BYTE *v140;
  uint64_t v141;
  _BYTE v142[32];
  _QWORD *v143;
  uint64_t v144;
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  uint64_t v152;
  _QWORD v153[2];
  _QWORD v154[33];
  __int128 v155;
  uint64_t v156;
  _DWORD v157[2];
  uint64_t v158;

  *((_QWORD *)&v101 + 1) = a3;
  v158 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E59F470(a2, 74);
  sub_22F28C878((_QWORD *)a1, v6, v133);
  v102 = sub_22EF6477C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(v6 + 24));
  *(_QWORD *)&v101 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  v134[0] = v135;
  v134[1] = 0x400000000;
  v135[4] = &v136;
  v135[5] = 0x400000000;
  v8 = v139;
  v137 = v139;
  v138 = 0x400000000;
  v9 = v142;
  v140 = v142;
  v141 = 0x400000000;
  v10 = v145;
  v143 = v145;
  v144 = 0x400000000;
  v145[4] = v146;
  v145[5] = 0x400000000;
  v146[4] = v147;
  v146[5] = 0x400000000;
  v147[4] = v148;
  v147[5] = 0x400000000;
  v148[4] = v149;
  v148[5] = 0x400000000;
  v149[4] = v150;
  v149[5] = 0x400000000;
  v150[4] = v151;
  v150[5] = 0x400000000;
  v151[4] = &v152;
  v151[5] = 0x400000000;
  v153[0] = v154;
  v153[1] = 0x400000000;
  v155 = 0u;
  v157[0] = 0;
  v156 = 0;
  v157[1] = 1;
  v154[32] = 0;
  v112 = a2;
  v11 = *(unsigned int **)(a2 + 24);
  v100 = v7;
  if (v11)
  {
    v14 = *v11;
    v12 = (uint64_t *)(v11 + 4);
    v13 = v14;
    if (v14)
    {
      v15 = 8 * v13;
      v16 = v12;
      while (*(_DWORD *)(*v16 + 8) != 29)
      {
        ++v16;
        v15 -= 8;
        if (!v15)
          goto LABEL_23;
      }
    }
    else
    {
      v16 = v12;
    }
    v17 = &v12[v13];
    if (v16 != v17)
    {
      v18 = &v137;
      v19 = &v140;
      v20 = &v143;
      v21 = *v16;
LABEL_10:
      v22 = *(unsigned int *)(v21 + 16);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = v21 + 40;
        v25 = v21 + 40 + 16 * v22;
        v26 = 8 * v22;
        v27 = v21 + 40 + 8 * v22;
        do
        {
          v28 = *(_QWORD *)(v27 + v23);
          v29 = *(_QWORD *)(v24 + v23);
          v30 = v138;
          if (v138 >= (unint64_t)HIDWORD(v138))
          {
            v104 = v18;
            v108 = v8;
            v94 = v20;
            v97 = v19;
            v90 = v10;
            v92 = v9;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v94;
            v19 = v97;
            v18 = v104;
            v8 = v108;
            v10 = v90;
            v9 = v92;
            v7 = v100;
            v30 = v138;
          }
          *(_QWORD *)&v137[8 * v30] = v29;
          v31 = v141;
          LODWORD(v138) = v138 + 1;
          if (v141 >= (unint64_t)HIDWORD(v141))
          {
            v105 = v18;
            v109 = v8;
            v95 = v20;
            v98 = v19;
            v88 = v9;
            v91 = v10;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v95;
            v19 = v98;
            v18 = v105;
            v8 = v109;
            v10 = v91;
            v9 = v88;
            v7 = v100;
            v31 = v141;
          }
          *(_QWORD *)&v140[8 * v31] = v28;
          v32 = v144;
          LODWORD(v141) = v141 + 1;
          v33 = *(_QWORD *)(v25 + v23);
          if (v144 >= (unint64_t)HIDWORD(v144))
          {
            v106 = v18;
            v110 = v8;
            v96 = v20;
            v99 = v19;
            v93 = v9;
            v89 = v10;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v96;
            v19 = v99;
            v18 = v106;
            v8 = v110;
            v10 = v89;
            v9 = v93;
            v7 = v100;
            v32 = v144;
          }
          v143[v32] = v33;
          LODWORD(v144) = v144 + 1;
          v23 += 8;
        }
        while (v26 != v23);
      }
      v34 = v16 + 1;
      while (v34 != v17)
      {
        v35 = *v34++;
        v21 = v35;
        if (*(_DWORD *)(v35 + 8) == 29)
        {
          v16 = v34 - 1;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_23:
  v36 = 0;
  v37 = 0;
  v103 = 0;
  v107 = 0;
  v127 = 1;
  v38 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 2000);
  v39 = *(_QWORD *)(a1 + 2312);
  v126 = *(_BYTE *)(a1 + 2893);
  *(_BYTE *)(a1 + 2893) = 0;
  v40 = *(_QWORD *)(a1 + 2872);
  v125[0] = v38;
  v125[1] = v40;
  v125[2] = v39;
  *(_QWORD *)(a1 + 2872) = v38;
  v129[0] = 0;
  v129[1] = 0;
  v128 = a1;
  v130 = 0;
  v131[0] = 0;
  v131[1] = 0;
  v132 = 0;
  v41 = a1;
  if (*((_DWORD *)a4 + 48))
  {
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v43 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v42 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v42 + 1960) + 80));
    if (v43)
      v44 = v43 + 40;
    else
      v44 = 0;
    v45 = sub_22F3AD6E8(v42, v44, 0);
    v46 = (__int128 *)*((unsigned int *)a4 + 48);
    LODWORD(v115) = 32;
    v114 = v46;
    v47 = sub_22EF5FE30(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816), (const llvm::APInt *)&v114, 0, 0, 0);
    v48 = sub_22E5FBCAC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (uint64_t)v134, v47, v45, *(_DWORD *)(v112 + 12));
    v49 = sub_22E5FBCAC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (uint64_t)v134, v47, v45, *(_DWORD *)(v112 + 12));
    v50 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
    v51 = sub_22EF60A6C(v50, 64, 1);
    v52 = sub_22EF5FE30(v50, v51, (const llvm::APInt *)&v114, 0, 0, 0);
    v53 = sub_22E5FBCAC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (uint64_t)v134, v52, v45, *(_DWORD *)(v112 + 12));
    v54 = a4[1];
    v119 = *a4;
    v120 = v54;
    v121 = a4[2];
    v107 = v48;
    sub_22E5BC134(v129, v128, v48, (uint64_t)&v119);
    v55 = a4[4];
    v119 = a4[3];
    v120 = v55;
    v121 = a4[5];
    v103 = v49;
    v56 = v49;
    v37 = v53;
    sub_22E5BC134(v129, v128, v56, (uint64_t)&v119);
    v57 = a4[7];
    v119 = a4[6];
    v120 = v57;
    v121 = a4[8];
    sub_22E5BC134(v129, v128, v53, (uint64_t)&v119);
    v58 = (uint64_t *)(a4 + 9);
    if ((*((_BYTE *)a4 + 168) & 3) != 0)
      v59 = sub_22F28ABCC(a4 + 9, (_QWORD *)a1);
    else
      v59 = *v58;
    if (v59 && *(_BYTE *)(v59 + 16) == 19)
    {
      v36 = 0;
    }
    else
    {
      v36 = sub_22E5FBCAC(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144), (uint64_t)v134, v47, v45, *(_DWORD *)(v112 + 12));
      v60 = a4[10];
      v119 = *(_OWORD *)v58;
      v120 = v60;
      v121 = a4[11];
      sub_22E5BC134(v129, v128, v36, (uint64_t)&v119);
    }
    if (v115 >= 0x41 && v114)
      MEMORY[0x2348A0E84](v114, 0x1000C8000313F17);
    v41 = v128;
    v7 = v100;
  }
  v61 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  sub_22E5BC320((uint64_t)v131, v41 + 2904);
  sub_22F2840EC((uint64_t)v131);
  v62 = *(_DWORD **)(v112 + 24);
  if (v62)
  {
    v65 = *v62;
    v63 = (uint64_t *)(v62 + 4);
    v64 = v65;
    if (v65)
    {
      v66 = 8 * v64;
      v67 = v63;
      while (*(_DWORD *)(*v67 + 8) != 18)
      {
        ++v67;
        v66 -= 8;
        if (!v66)
          goto LABEL_50;
      }
    }
    else
    {
      v67 = v63;
    }
    v68 = &v63[v64];
    if (v67 != v68)
    {
      v69 = *v67;
LABEL_46:
      LODWORD(v114) = *(_DWORD *)(v69 + 20);
      *(_QWORD *)&v119 = sub_22F3EBC3C(v69);
      v70 = sub_22F2909A8((uint64_t)v153, &v114, (uint64_t *)&v119);
      sub_22F2633B0(v70 + 16, (_BYTE *)(v69 + 40), (_BYTE *)(v69 + 40 + 8 * *(unsigned int *)(v69 + 16)));
      v71 = v67 + 1;
      while (v71 != v68)
      {
        v72 = *v71++;
        v69 = v72;
        if (*(_DWORD *)(v72 + 8) == 18)
        {
          v67 = v71 - 1;
          goto LABEL_46;
        }
      }
    }
  }
LABEL_50:
  *(_QWORD *)&v119 = v134;
  *((_QWORD *)&v119 + 1) = v112;
  v120 = v101;
  *(_QWORD *)&v121 = v107;
  *((_QWORD *)&v121 + 1) = v103;
  v122 = v37;
  v123 = v36;
  v124 = a4;
  v73 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v74 = v61[11];
  v75 = v61[12];
  v76 = v61[15];
  v77 = *(unsigned int *)(v112 + 8);
  v114 = &v119;
  v115 = sub_22E607D98;
  v116 = 0;
  v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 **, uint64_t, _DWORD *))(*(_QWORD *)v73 + 104))(v73, v112, v74, v75, v76, v77, &v114, 1, v157);
  v79 = 0;
  v80 = 0;
  v81 = *(_DWORD **)(v112 + 24);
  if (v81)
  {
    v80 = v81 + 4;
    v79 = (uint64_t)&v81[2 * *v81 + 4];
    if (*v81)
    {
      v87 = 8 * *v81;
      while (*(_DWORD *)(*(_QWORD *)v80 + 8) != 51)
      {
        v80 += 2;
        v87 -= 8;
        if (!v87)
        {
          v80 = (_DWORD *)v79;
          break;
        }
      }
    }
  }
  v118 = 32;
  v117 = v80 != (_DWORD *)v79;
  v82 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 144);
  v83 = sub_22EF60A6C(v82, 32, 0);
  sub_22F3C134C((uint64_t)&v114, v82, (uint64_t)&v117, v83, 0);
  v84 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v85 = *(unsigned int *)(v112 + 12);
  v113[0] = v133[0];
  v113[1] = v133[1];
  v113[2] = v133[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, _OWORD *, __int128 **, _QWORD *))(*(_QWORD *)v84 + 344))(v84, a1, v85, v112, v78, v102, v113, &v114, v134);
  if (v118 >= 0x41 && v117)
    MEMORY[0x2348A0E84](v117, 0x1000C8000313F17);
  sub_22F283FC4((uint64_t)v125);
  return sub_22F293AB4((uint64_t)v134);
}

uint64_t sub_22F2912FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[3];
  _DWORD v25[4];
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  _QWORD v33[2];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _BYTE v46[288];
  int v47;
  BOOL v48;
  __int16 v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E59F470(a2, 74);
  sub_22F28C878(a1, v4, v32);
  v5 = sub_22EF6477C(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v4 + 24));
  v6 = *(unsigned int **)(a2 + 24);
  if (v6)
  {
    v10 = *v6;
    if ((_DWORD)v10)
    {
      v21 = 8 * v10;
      v11 = v6 + 4;
      while (*(_DWORD *)(*(_QWORD *)v11 + 8) != 36)
      {
        v11 += 2;
        v21 -= 8;
        if (!v21)
          goto LABEL_2;
      }
    }
    else
    {
      v11 = v6 + 4;
    }
    v12 = (uint64_t)&v6[2 * v10 + 4];
    if (v11 != (unsigned int *)v12)
    {
      v13 = *(_QWORD *)v11;
LABEL_10:
      v14 = *(_DWORD *)(v13 + 44);
      if (v14 == 74 || v14 == 89)
      {
        v7 = *(_QWORD *)(v13 + 32);
        goto LABEL_3;
      }
      v15 = (uint64_t *)(v11 + 2);
      while (v15 != (uint64_t *)v12)
      {
        v16 = *v15++;
        v13 = v16;
        if (*(_DWORD *)(v16 + 8) == 36)
        {
          v11 = (unsigned int *)(v15 - 1);
          goto LABEL_10;
        }
      }
    }
  }
LABEL_2:
  v7 = 0;
LABEL_3:
  v33[0] = v34;
  v33[1] = 0x400000000;
  v34[4] = v35;
  v34[5] = 0x400000000;
  v35[4] = v36;
  v35[5] = 0x400000000;
  v36[4] = v37;
  v36[5] = 0x400000000;
  v37[4] = v38;
  v37[5] = 0x400000000;
  v38[4] = v39;
  v38[5] = 0x400000000;
  v39[4] = v40;
  v39[5] = 0x400000000;
  v40[4] = v41;
  v40[5] = 0x400000000;
  v41[4] = v42;
  v41[5] = 0x400000000;
  v42[4] = v43;
  v42[5] = 0x400000000;
  v43[4] = v44;
  v43[5] = 0x400000000;
  v44[4] = v45;
  v44[5] = 0x400000000;
  v45[4] = v46;
  v45[5] = 0x400000000;
  v47 = 0;
  memset(&v46[256], 0, 32);
  v49 = 0;
  v50 = 0;
  if (!v6)
    goto LABEL_4;
  v19 = *v6;
  v17 = v6 + 4;
  v18 = v19;
  if (v19)
  {
    v22 = 8 * v18;
    v20 = v17;
    while (*(_DWORD *)(*(_QWORD *)v20 + 8) != 86)
    {
      v20 += 2;
      v22 -= 8;
      if (!v22)
        goto LABEL_4;
    }
  }
  else
  {
    v20 = v17;
  }
  if (v20 == &v17[2 * v18])
LABEL_4:
    v8 = 1;
  else
    v8 = *(_QWORD *)v20 == 0;
  v48 = v8;
  v30 = v7;
  v31 = v4;
  v26[0] = a2;
  v26[1] = v5;
  v27 = v32[0];
  v28 = v32[1];
  v29 = v32[2];
  sub_22E5B8E78(v25, (uint64_t)a1, a2);
  v24[0] = &v31;
  v24[1] = sub_22E608564;
  v24[2] = 0;
  v23[0] = sub_22E608588;
  v23[1] = v26;
  sub_22F28FE44(a1, a2, 74, (uint64_t)v24, (uint64_t)v23, (uint64_t)v33);
  sub_22F283234(v25);
  return sub_22F293AB4((uint64_t)v33);
}

uint64_t sub_22F2915BC(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  uint64_t v30;
  _QWORD v31[2];
  _BYTE v32[288];
  int v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v18[0] = v19;
  v18[1] = 0x400000000;
  v19[4] = v20;
  v19[5] = 0x400000000;
  v20[4] = v21;
  v20[5] = 0x400000000;
  v21[4] = v22;
  v21[5] = 0x400000000;
  v22[4] = v23;
  v22[5] = 0x400000000;
  v23[4] = v24;
  v23[5] = 0x400000000;
  v24[4] = v25;
  v24[5] = 0x400000000;
  v25[4] = v26;
  v25[5] = 0x400000000;
  v26[4] = v27;
  v26[5] = 0x400000000;
  v27[4] = v28;
  v27[5] = 0x400000000;
  v28[4] = v29;
  v28[5] = 0x400000000;
  v29[4] = &v30;
  v29[5] = 0x400000000;
  v31[0] = v32;
  v31[1] = 0x400000000;
  v33 = 0;
  memset(&v32[256], 0, 32);
  v34 = 1;
  v4 = *(_DWORD **)(a2 + 24);
  if (v4)
  {
    v7 = *v4;
    v5 = (uint64_t *)(v4 + 4);
    v6 = v7;
    if (v7)
    {
      v8 = 8 * v6;
      v9 = v5;
      while (*(_DWORD *)(*v9 + 8) != 18)
      {
        ++v9;
        v8 -= 8;
        if (!v8)
          goto LABEL_14;
      }
    }
    else
    {
      v9 = v5;
    }
    v10 = &v5[v6];
    if (v9 != v10)
    {
      v11 = *v9;
LABEL_10:
      v17 = *(_DWORD *)(v11 + 20);
      v16 = sub_22F3EBC3C(v11);
      v12 = sub_22F2909A8((uint64_t)v31, &v17, &v16);
      sub_22F2633B0(v12 + 16, (_BYTE *)(v11 + 40), (_BYTE *)(v11 + 40 + 8 * *(unsigned int *)(v11 + 16)));
      v13 = v9 + 1;
      while (v13 != v10)
      {
        v14 = *v13++;
        v11 = v14;
        if (*(_DWORD *)(v14 + 8) == 18)
        {
          v9 = v13 - 1;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_14:
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 808) + 408))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, *(unsigned int *)(a2 + 12), v18);
  return sub_22F293AB4((uint64_t)v18);
}

uint64_t sub_22F2917B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  _BYTE v8[104];
  _QWORD v9[12];

  v9[11] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  sub_22E600354((uint64_t)v8, a1, a2, 0x100000059, 1);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v6[0] = &v7;
  v6[1] = sub_22E6085E4;
  v6[2] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v4 + 160))(v4, a1, v6, *(unsigned int *)(a2 + 12));
  sub_22F283FC4((uint64_t)v9);
  return sub_22E488B4C((uint64_t)v8);
}

uint64_t sub_22F29187C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = *(unsigned int **)(a2 + 24);
  if (v3)
  {
    v6 = *v3;
    v4 = v3 + 4;
    v5 = v6;
    v7 = &v4[2 * v6];
    v8 = 8 * v6;
    if (v6)
    {
      v9 = v8;
      v10 = v4;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v10 + 8) == 30)
          break;
        v10 += 2;
        v9 -= 8;
      }
      while (v9);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    if (v5)
    {
      while (*(_DWORD *)(*(_QWORD *)v4 + 8) != 30)
      {
        v4 += 2;
        v8 -= 8;
        if (!v8)
          goto LABEL_9;
      }
    }
    if (v4 == v7 || (v15 = *(_QWORD *)v4) == 0)
    {
LABEL_9:
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v12 = v15 + 24;
      v13 = *(unsigned int *)(v15 + 16);
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 336))(v11, a1, v12, v13, *(unsigned int *)(a2 + 12));
}

void sub_22F291958(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[8];
  uint64_t v28;
  _OWORD v29[8];
  uint64_t v30;
  _OWORD v31[8];
  uint64_t v32;
  _QWORD v33[3];
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46[2];
  _QWORD v47[5];

  v47[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int **)(a2 + 24);
  v7 = *v4;
  v5 = v4 + 4;
  v6 = v7;
  if (v7)
  {
    v8 = 8 * v6;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v5 + 8) == 19)
        break;
      v5 += 2;
      v8 -= 8;
    }
    while (v8);
  }
  sub_22E4D8D7C(&v35);
  v9 = *(_DWORD **)(a2 + 24);
  if (v9)
  {
    v12 = *v9;
    v10 = (uint64_t *)(v9 + 4);
    v11 = v12;
    v13 = &v10[v12];
    v14 = 8 * v12;
    v15 = v10;
    if (v12)
    {
      v16 = v14;
      v15 = v10;
      while (*(_DWORD *)(*v15 + 8) != 18)
      {
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_13;
      }
    }
    if (v15 != v13 && (v17 = *v15) != 0)
    {
      v24 = *(_DWORD *)(v17 + 20);
      v25 = sub_22F3EBC3C(*v15);
      v44 = v24;
      v45 = v25;
      v46[0] = v47;
      v46[1] = (void *)0x400000000;
      sub_22F2633B0((uint64_t)v46, (_BYTE *)(v17 + 40), (_BYTE *)(v17 + 40 + 8 * *(unsigned int *)(v17 + 16)));
      sub_22E5ACAC0(*(_QWORD *)(a1[18] + 808), (uint64_t)a1, (uint64_t)&v44, *(_DWORD *)v17, (uint64_t)v33);
      if ((v34 & 3) != 0)
        v26 = sub_22F28ABCC(v33, a1);
      else
        v26 = v33[0];
      v31[6] = v41;
      v31[7] = v42;
      v32 = v43;
      v31[2] = v37;
      v31[3] = v38;
      v31[4] = v39;
      v31[5] = v40;
      v31[0] = v35;
      v31[1] = v36;
      sub_22E4E87FC(a1, v26, v31, 0);
      if (v46[0] != v47)
        free(v46[0]);
    }
    else
    {
LABEL_13:
      v18 = (unsigned int **)v10;
      if (v11)
      {
        v19 = v14;
        v18 = (unsigned int **)v10;
        while ((*v18)[2] != 20)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_17;
        }
      }
      if (v18 == (unsigned int **)v13 || (v20 = *v18) == 0)
      {
LABEL_17:
        if (v11)
        {
          while (*(_DWORD *)(*v10 + 8) != 87)
          {
            ++v10;
            v14 -= 8;
            if (!v14)
              return;
          }
        }
        if (v10 != v13)
        {
          v22 = *v10;
          if (v22)
          {
            v23 = *(_QWORD *)(a1[18] + 808);
            v27[6] = v41;
            v27[7] = v42;
            v28 = v43;
            v27[2] = v37;
            v27[3] = v38;
            v27[4] = v39;
            v27[5] = v40;
            v27[0] = v35;
            v27[1] = v36;
            sub_22E5AD210(v23, a1, (uint64_t)v27, *(unsigned int *)(v22 + 8 * *(unsigned __int8 *)(v22 + 12) + 16), *(_DWORD *)v22);
          }
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1[18] + 808);
        v29[6] = v41;
        v29[7] = v42;
        v30 = v43;
        v29[2] = v37;
        v29[3] = v38;
        v29[4] = v39;
        v29[5] = v40;
        v29[0] = v35;
        v29[1] = v36;
        sub_22F27FB1C(v21, (uint64_t)a1, (uint64_t)v29, *v20);
      }
    }
  }
}

uint64_t sub_22F291C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  _BYTE v7[104];
  _QWORD v8[12];

  v8[11] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  sub_22E600354((uint64_t)v7, a1, a2, 0x100000059, 1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v5[0] = &v6;
  v5[1] = sub_22E608C7C;
  v5[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v3 + 360))(v3, a1, 16, v5, 0);
  sub_22F283FC4((uint64_t)v8);
  return sub_22E488B4C((uint64_t)v7);
}

void sub_22F291CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OrderedThreadsSimd;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int i;
  uint64_t v33;
  __n128 v34;
  llvm::Value *v35;
  unint64_t v36;
  int v37;
  llvm::Value *v38;
  llvm::Value *v39;
  int v40;
  uint64_t OrderedDepend;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  void (**v46)(_QWORD *);
  uint64_t *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[3];
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[88];
  _QWORD v61[13];

  v61[11] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 152) + 76) & 0x20) == 0)
  {
    v5 = *(_DWORD **)(a2 + 24);
    if (!v5)
      goto LABEL_21;
    v8 = *v5;
    v7 = (uint64_t *)(v5 + 4);
    v6 = v8;
    v9 = &v7[v8];
    if (v8)
    {
      v10 = 8 * v6;
      v11 = v10;
      v12 = v7;
      while (*(_DWORD *)(*v12 + 8) != 18)
      {
        ++v12;
        v11 -= 8;
        if (!v11)
        {
LABEL_19:
          while (*(_DWORD *)(*v7 + 8) != 74)
          {
            ++v7;
            v10 -= 8;
            if (!v10)
              goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      if (!v11)
        goto LABEL_19;
      while (*(_DWORD *)(*v7 + 8) != 18)
      {
        ++v7;
        v10 -= 8;
        if (!v10)
          return;
      }
      if (v10)
      {
LABEL_34:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 808) + 528))(*(_QWORD *)(v4 + 808), a1);
        v27 = v7 + 1;
        while (v27 != v9)
        {
          v28 = *v27++;
          if (*(_DWORD *)(v28 + 8) == 18)
          {
            v4 = *(_QWORD *)(a1 + 144);
            v7 = v27 - 1;
            goto LABEL_34;
          }
        }
      }
      return;
    }
LABEL_20:
    if (v7 != v9)
      v21 = *v7;
    else
LABEL_21:
      v21 = 0;
    v49 = (const char *)a2;
    v50 = v21;
    v51 = a1;
    sub_22E600354((uint64_t)&v58, a1, a2, 0x100000059, 1);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
    *(_QWORD *)&v54 = &v49;
    *((_QWORD *)&v54 + 1) = sub_22E608FD0;
    v55 = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, BOOL))(*(_QWORD *)v22 + 176))(v22, a1, &v54, *(unsigned int *)(a2 + 12), v21 == 0);
LABEL_62:
    sub_22F283FC4((uint64_t)v61);
    sub_22E488B4C((uint64_t)&v58);
    return;
  }
  v13 = *(_DWORD **)(a2 + 24);
  if (!v13)
    goto LABEL_30;
  v16 = *v13;
  v15 = (uint64_t *)(v13 + 4);
  v14 = v16;
  v17 = &v15[v16];
  if (!v16)
  {
LABEL_29:
    if (v15 != v17)
    {
      v24 = *v15;
LABEL_31:
      v49 = (const char *)a2;
      v50 = v24;
      v51 = a1;
      sub_22E600354((uint64_t)&v58, a1, a2, 0x100000059, 1);
      v54 = *(_OWORD *)(a1 + 320);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
      v56[0] = &off_24FA66930;
      v56[1] = a1;
      v57 = v56;
      OrderedThreadsSimd = llvm::OpenMPIRBuilder::createOrderedThreadsSimd();
      if (OrderedThreadsSimd)
      {
        sub_22E3CB840(a1 + 272, OrderedThreadsSimd, v26);
      }
      else
      {
        *(_QWORD *)(a1 + 320) = 0;
        *(_QWORD *)(a1 + 328) = 0;
      }
      v45 = v57;
      if (v57 == v56)
      {
        v46 = (void (**)(_QWORD *))(v56[0] + 32);
        v45 = v56;
      }
      else
      {
        if (!v57)
        {
LABEL_60:
          if (v55)
            llvm::MetadataTracking::untrack();
          goto LABEL_62;
        }
        v46 = (void (**)(_QWORD *))(*v57 + 40);
      }
      (*v46)(v45);
      goto LABEL_60;
    }
LABEL_30:
    v24 = 0;
    goto LABEL_31;
  }
  v18 = 8 * v14;
  v19 = v18;
  v20 = v15;
  while (*(_DWORD *)(*v20 + 8) != 18)
  {
    ++v20;
    v19 -= 8;
    if (!v19)
    {
LABEL_28:
      while (*(_DWORD *)(*v15 + 8) != 74)
      {
        ++v15;
        v18 -= 8;
        if (!v18)
          goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  if (!v19)
    goto LABEL_28;
  while (1)
  {
    v23 = *v15;
    if (*(_DWORD *)(*v15 + 8) == 18)
      break;
    ++v15;
    v18 -= 8;
    if (!v18)
      return;
  }
  if (v18)
  {
    v48 = a1 + 320;
    v47 = v17;
LABEL_40:
    v29 = *(_DWORD *)(v23 + 32);
    v30 = sub_22EF60A6C(*(_QWORD *)(v4 + 144), 64, 1);
    v58 = v60;
    v59 = 0x600000000;
    if (v29)
    {
      v31 = v30;
      for (i = 0; i != v29; ++i)
      {
        v33 = sub_22F3EBC24(v23, i);
        v49 = (const char *)a1;
        v50 = a1 + 272;
        LOBYTE(v51) = 0;
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 232);
        v35 = (llvm::Value *)sub_22E50E974(&v49, v33, v34);
        v36 = *(_QWORD *)(v33 + 8);
        sub_22EFF605C(v33);
        v38 = sub_22E50EA40(a1, v35, v36, v31, v37);
        v39 = v38;
        v40 = v59;
        if (v59 >= HIDWORD(v59))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          *((_QWORD *)v58 + v59) = v39;
          v40 = v59;
        }
        else
        {
          *((_QWORD *)v58 + v59) = v38;
        }
        LODWORD(v59) = v40 + 1;
      }
    }
    v54 = *(_OWORD *)v48;
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
    v49 = ".cnt.addr";
    v53 = 259;
    OrderedDepend = llvm::OpenMPIRBuilder::createOrderedDepend();
    if (OrderedDepend)
    {
      sub_22E3CB840(a1 + 272, OrderedDepend, v42);
    }
    else
    {
      *(_QWORD *)v48 = 0;
      *(_QWORD *)(v48 + 8) = 0;
    }
    if (v55)
      llvm::MetadataTracking::untrack();
    if (v58 != v60)
      free(v58);
    v43 = v15 + 1;
    while (v43 != v47)
    {
      v44 = *v43++;
      v23 = v44;
      if (*(_DWORD *)(v44 + 8) == 18)
      {
        v4 = *(_QWORD *)(a1 + 144);
        v15 = v43 - 1;
        goto LABEL_40;
      }
    }
  }
}

uint64_t sub_22F292224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E609210;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F292284(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  uint64_t v6;

  v5[2] = 0;
  v6 = a2;
  v5[0] = &v6;
  v5[1] = sub_22E60937C;
  sub_22E5FF48C(a1, a2, 16, (uint64_t)v5);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E60949C, (uint64_t)v5);
}

uint64_t sub_22F2922E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E6094A4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F292344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E6096D0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F2923A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E6098E4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F292404(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  _QWORD v6[2];
  uint64_t v7;

  v7 = a2;
  v6[0] = a2;
  v6[1] = &v7;
  v5[0] = v6;
  v5[1] = sub_22E609AF8;
  v5[2] = 0;
  sub_22E5FF48C(a1, a2, 16, (uint64_t)v5);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E609C54, (uint64_t)v5);
}

uint64_t sub_22F292470(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  _QWORD v6[2];
  uint64_t v7;

  v7 = a2;
  v6[0] = a2;
  v6[1] = &v7;
  v5[0] = v6;
  v5[1] = sub_22E609C5C;
  v5[2] = 0;
  sub_22E5FF48C(a1, a2, 21, (uint64_t)v5);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E609DB8, (uint64_t)v5);
}

uint64_t sub_22F2924DC(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  _QWORD v6[2];
  uint64_t v7;

  v7 = a2;
  v6[0] = a2;
  v6[1] = &v7;
  v5[0] = v6;
  v5[1] = sub_22E609DC0;
  v5[2] = 0;
  sub_22E5FF48C(a1, a2, 19, (uint64_t)v5);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E609F1C, (uint64_t)v5);
}

uint64_t sub_22F292548(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  _QWORD v6[2];
  uint64_t v7;

  v7 = a2;
  v6[0] = a2;
  v6[1] = &v7;
  v5[0] = v6;
  v5[1] = sub_22E609F24;
  v5[2] = 0;
  sub_22E5FF48C(a1, a2, 20, (uint64_t)v5);
  return sub_22E5F6264((uint64_t)a1, a2, (uint64_t (*)(uint64_t, _QWORD *))sub_22E60A080, (uint64_t)v5);
}

void sub_22F2925B4(uint64_t a1, uint64_t a2, __n128 a3)
{
  unsigned int *v3;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int **)(a2 + 24);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 144);
    v7 = v3 + 4;
    v8 = *v3;
    if ((_DWORD)v8)
    {
      v9 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v7[v9] + 8) != 22)
      {
        v9 += 2;
        if (2 * v8 == v9)
          goto LABEL_6;
      }
      v22 = &v7[v9];
    }
    else
    {
      v22 = v3 + 4;
    }
    if (v22 != &v7[2 * v8] && *(_QWORD *)v22)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v22 + 40);
      *(_QWORD *)v51 = a1;
      *(_QWORD *)&v51[8] = a1 + 272;
      v51[16] = 0;
      *(_QWORD *)&v52 = *(_QWORD *)(v6 + 232);
      sub_22E50E974(v51, v23, a3);
      v3 = *(unsigned int **)(a2 + 24);
    }
LABEL_6:
    if (v3)
    {
      v10 = v3 + 4;
      v11 = *v3;
      if ((_DWORD)v11)
      {
        v12 = 0;
        while (*(_DWORD *)(*(_QWORD *)&v10[v12] + 8) != 18)
        {
          v12 += 2;
          if (2 * v11 == v12)
            goto LABEL_11;
        }
        v29 = (uint64_t *)&v10[v12];
      }
      else
      {
        v29 = (uint64_t *)(v3 + 4);
      }
      if (v29 != (uint64_t *)&v10[2 * v11])
      {
        v30 = *v29;
        if (*v29)
        {
          v41 = *(_DWORD *)(v30 + 20);
          v42 = sub_22F3EBC3C(*v29);
          *(_DWORD *)v51 = v41;
          *(_QWORD *)&v51[8] = v42;
          *(_QWORD *)&v51[16] = (char *)&v52 + 8;
          *(_QWORD *)&v52 = 0x400000000;
          sub_22F2633B0((uint64_t)&v51[16], (_BYTE *)(v30 + 40), (_BYTE *)(v30 + 40 + 8 * *(unsigned int *)(v30 + 16)));
          sub_22E5AB48C(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 808), a1, v51, 1, *(_DWORD *)v30, (uint64_t)&v45);
          if ((v47 & 3) != 0)
            v43 = sub_22F28ABCC(v46, a1);
          else
            v43 = v46[0];
          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 96);
          LOWORD(v50) = 257;
          sub_22E3CA9BC((uint64_t *)(a1 + 272), v43, v44, (uint64_t)&v48);
          if (*(__int128 **)&v51[16] != (__int128 *)((char *)&v52 + 8))
            free(*(void **)&v51[16]);
          v3 = *(unsigned int **)(a2 + 24);
        }
      }
LABEL_11:
      if (v3)
      {
        v15 = *v3;
        v13 = v3 + 4;
        v14 = v15;
        v16 = &v13[2 * v15];
        v17 = 8 * v15;
        v18 = v13;
        if (v15)
        {
          v19 = v17;
          v18 = v13;
          while (*(_DWORD *)(*(_QWORD *)v18 + 8) != 41)
          {
            v18 += 2;
            v19 -= 8;
            if (!v19)
              goto LABEL_16;
          }
        }
        if (v18 != v16 && *(_QWORD *)v18)
        {
          sub_22E4D8D7C(v51);
          v48 = *(_OWORD *)&v51[8];
          v49 = v52;
          v50 = v53;
          sub_22E5E0440(a1, (uint64_t)&v48, v54, &v45);
          *(_OWORD *)v51 = *(_OWORD *)(a1 + 320);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
          v24 = *(unsigned int **)(a2 + 24);
          if (v24)
          {
            v27 = *v24;
            v25 = v24 + 4;
            v26 = v27;
            if (v27)
            {
              v28 = 8 * v26;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)v25 + 8) == 51)
                  break;
                v25 += 2;
                v28 -= 8;
              }
              while (v28);
            }
          }
          llvm::OpenMPIRBuilder::createOMPInteropInit();
          goto LABEL_59;
        }
LABEL_16:
        v20 = v13;
        if (v14)
        {
          v21 = v17;
          v20 = v13;
          while (*(_DWORD *)(*(_QWORD *)v20 + 8) != 20)
          {
            v20 += 2;
            v21 -= 8;
            if (!v21)
              goto LABEL_20;
          }
        }
        if (v20 != v16 && *(_QWORD *)v20)
        {
          sub_22E4D8D7C(v51);
          v48 = *(_OWORD *)&v51[8];
          v49 = v52;
          v50 = v53;
          sub_22E5E0440(a1, (uint64_t)&v48, v54, &v45);
          *(_OWORD *)v51 = *(_OWORD *)(a1 + 320);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
          v31 = *(unsigned int **)(a2 + 24);
          if (v31)
          {
            v34 = *v31;
            v32 = v31 + 4;
            v33 = v34;
            if (v34)
            {
              v35 = 8 * v33;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)v32 + 8) == 51)
                  break;
                v32 += 2;
                v35 -= 8;
              }
              while (v35);
            }
          }
          llvm::OpenMPIRBuilder::createOMPInteropDestroy();
          goto LABEL_59;
        }
LABEL_20:
        if (v14)
        {
          while (*(_DWORD *)(*(_QWORD *)v13 + 8) != 88)
          {
            v13 += 2;
            v17 -= 8;
            if (!v17)
              return;
          }
        }
        if (v13 != v16 && *(_QWORD *)v13)
        {
          sub_22E4D8D7C(v51);
          v48 = *(_OWORD *)&v51[8];
          v49 = v52;
          v50 = v53;
          sub_22E5E0440(a1, (uint64_t)&v48, v54, &v45);
          *(_OWORD *)v51 = *(_OWORD *)(a1 + 320);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
          v36 = *(unsigned int **)(a2 + 24);
          if (v36)
          {
            v39 = *v36;
            v37 = v36 + 4;
            v38 = v39;
            if (v39)
            {
              v40 = 8 * v38;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)v37 + 8) == 51)
                  break;
                v37 += 2;
                v40 -= 8;
              }
              while (v40);
            }
          }
          llvm::OpenMPIRBuilder::createOMPInteropUse();
LABEL_59:
          if (*(_QWORD *)&v51[16])
            llvm::MetadataTracking::untrack();
        }
      }
    }
  }
}

uint64_t sub_22F292B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E60A088;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F292B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E60A294;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F292BC8(uint64_t a1, uint64_t a2, __n128 a3)
{
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(unsigned int **)(a2 + 24);
  if (!v4)
    goto LABEL_6;
  v7 = *v4;
  v5 = (uint64_t *)(v4 + 4);
  v6 = v7;
  if (v7)
  {
    v8 = 8 * v6;
    v9 = v5;
    while (*(_DWORD *)(*v9 + 8) != 36)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
        goto LABEL_6;
    }
  }
  else
  {
    v9 = v5;
  }
  v16 = &v5[v6];
  if (v9 == v16)
    goto LABEL_6;
  v17 = *v9;
LABEL_24:
  v18 = *(_DWORD *)(v17 + 44);
  if (v18 != 7 && v18 != 89)
  {
    v19 = v9 + 1;
    while (v19 != v16)
    {
      v20 = *v19++;
      v17 = v20;
      if (*(_DWORD *)(v20 + 8) == 36)
      {
        v9 = v19 - 1;
        goto LABEL_24;
      }
    }
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v17 + 32);
LABEL_7:
  v11 = *(_QWORD *)(a1 + 144);
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 152) + 76) & 0x20) == 0)
  {
    v12 = *(unsigned int *)(a2 + 32);
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 808) + 424))(*(_QWORD *)(v11 + 808), a1, *(unsigned int *)(a2 + 12), v10, v12);
  }
  v12 = *(unsigned int *)(a2 + 32);
  if (v12 > 0x35 || ((1 << v12) & 0x30010000000000) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 808) + 424))(*(_QWORD *)(v11 + 808), a1, *(unsigned int *)(a2 + 12), v10, v12);
  if (v10)
  {
    *(_QWORD *)&v21 = a1;
    *((_QWORD *)&v21 + 1) = a1 + 272;
    LOBYTE(v22) = 1;
    v23 = *(_QWORD *)(v11 + 232);
    sub_22E50E974(&v21, v10, a3);
  }
  v21 = *(_OWORD *)(a1 + 320);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  result = llvm::OpenMPIRBuilder::createCancel();
  if (result)
  {
    result = sub_22E3CB840(a1 + 272, result, v15);
  }
  else
  {
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  if (v22)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t sub_22F292D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[2];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD v14[2];
  char v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[25];
  __int128 v20;
  uint64_t v21;

  v16 = 257;
  v17 = 0u;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0uLL;
  v21 = 0;
  v15 = 0;
  v14[0] = off_24FA66698;
  v14[1] = &v15;
  v13[0] = a2;
  v13[1] = &v16;
  v13[2] = &v15;
  v11[0] = v13;
  v11[1] = sub_22E60A4A0;
  v12 = 0;
  v2 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 152) + 624) == *(_QWORD *)(*(_QWORD *)(v2 + 152) + 632))
  {
    sub_22F27B464(v11, a1);
  }
  else
  {
    v3 = *(unsigned int **)(a2 + 24);
    if (v3)
    {
      v6 = *v3;
      v4 = v3 + 4;
      v5 = v6;
      v7 = 8 * v6;
      if (v6)
      {
        v8 = v7;
        v9 = v4;
        do
        {
          if (*(_DWORD *)(*(_QWORD *)v9 + 8) == 36)
            break;
          v9 += 2;
          v8 -= 8;
        }
        while (v8);
      }
      if (v5)
      {
        do
        {
          if (*(_DWORD *)(*(_QWORD *)v4 + 8) == 22)
            break;
          v4 += 2;
          v7 -= 8;
        }
        while (v7);
      }
    }
    v12 = v14;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 808) + 496))(*(_QWORD *)(v2 + 808), a1);
  }
  return llvm::deallocate_buffer(*(llvm **)((char *)&v20 + 4), (void *)(56 * HIDWORD(v21)));
}

uint64_t sub_22F292F04(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[104];
  _QWORD v17[12];

  v17[11] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 144) + 152) + 624) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 144) + 152)
                                                                                        + 632))
  {
    v3 = result;
    v4 = *(unsigned int **)(a2 + 24);
    if (v4)
    {
      v9 = *v4;
      v7 = v4 + 4;
      v8 = v9;
      v10 = &v7[2 * v9];
      v11 = 8 * v9;
      v12 = v7;
      if (v9)
      {
        v14 = v11;
        v12 = v7;
        while (*(_DWORD *)(*(_QWORD *)v12 + 8) != 36)
        {
          v12 += 2;
          v14 -= 8;
          if (!v14)
            goto LABEL_13;
        }
      }
      if (v12 == v10 || (v13 = *(_QWORD *)v12) == 0)
LABEL_13:
        v5 = 0;
      else
        v5 = *(_QWORD *)(v13 + 32);
      if (v8)
      {
        while (*(_DWORD *)(*(_QWORD *)v7 + 8) != 22)
        {
          v7 += 2;
          v11 -= 8;
          if (!v11)
            goto LABEL_4;
        }
      }
      if (v7 != v10)
      {
        v15 = *(_QWORD *)v7;
        if (v15)
        {
          v6 = *(_QWORD *)(v15 + 40);
          goto LABEL_5;
        }
      }
    }
    else
    {
      v5 = 0;
    }
LABEL_4:
    v6 = 0;
LABEL_5:
    sub_22E600354((uint64_t)v16, result, a2, 0x10000004ALL, 1);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 144) + 808)
                                                                       + 504))(*(_QWORD *)(*(_QWORD *)(v3 + 144) + 808), v3, a2, v5, v6);
    sub_22F283FC4((uint64_t)v17);
    return sub_22E488B4C((uint64_t)v16);
  }
  return result;
}

uint64_t sub_22F293078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E60AD8C;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F2930D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E60AFC8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F293138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a4;
  v6[2] = 0;
  v7 = 0;
  v4 = *(_QWORD *)(a1 + 808);
  v6[0] = &v9;
  v6[1] = sub_22E60B170;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 432))(v4, a4, a2, a3, &v8, &v7, 1, v6);
}

uint64_t sub_22F293198(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  BOOL v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t (*v36)(unsigned __int8 **, uint64_t);
  __int128 *v37;
  _QWORD *v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[6];
  _QWORD v50[5];
  uint64_t v51;
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E59F470(a2, 76);
  sub_22E600354((uint64_t)v48, (uint64_t)a1, a2, 0x10000004CLL, 0);
  sub_22F28C878(a1, v4, &v42);
  v5 = v43;
  v33 = v44;
  v34 = v42;
  sub_22F283FC4((uint64_t)&v51);
  sub_22E488B4C((uint64_t)v48);
  v6 = sub_22EF6477C(*(_QWORD *)(a1[18] + 144), *(_QWORD *)(v4 + 24));
  v7 = *(unsigned int **)(a2 + 24);
  if (!v7)
    goto LABEL_2;
  v10 = *v7;
  if ((_DWORD)v10)
  {
    v29 = 8 * v10;
    v11 = v7 + 4;
    while (*(_DWORD *)(*(_QWORD *)v11 + 8) != 36)
    {
      v11 += 2;
      v29 -= 8;
      if (!v29)
        goto LABEL_2;
    }
  }
  else
  {
    v11 = v7 + 4;
  }
  v12 = (uint64_t)&v7[2 * v10 + 4];
  if (v11 == (unsigned int *)v12)
    goto LABEL_2;
  v13 = *(_QWORD *)v11;
LABEL_11:
  v14 = *(_DWORD *)(v13 + 44);
  if (v14 != 76 && v14 != 89)
  {
    v15 = (uint64_t *)(v11 + 2);
    while (v15 != (uint64_t *)v12)
    {
      v16 = *v15++;
      v13 = v16;
      if (*(_DWORD *)(v16 + 8) == 36)
      {
        v11 = (unsigned int *)(v15 - 1);
        goto LABEL_11;
      }
    }
LABEL_2:
    v8 = 0;
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(v13 + 32);
LABEL_3:
  v48[0] = v49;
  v48[1] = 0x400000000;
  v49[4] = v50;
  v49[5] = 0x400000000;
  v50[4] = v52;
  v51 = 0x400000000;
  v52[4] = v53;
  v52[5] = 0x400000000;
  v53[4] = v54;
  v53[5] = 0x400000000;
  v54[4] = v55;
  v54[5] = 0x400000000;
  v55[4] = v56;
  v55[5] = 0x400000000;
  v56[4] = v57;
  v56[5] = 0x400000000;
  v57[4] = v58;
  v57[5] = 0x400000000;
  v58[4] = v59;
  v58[5] = 0x400000000;
  v59[4] = v60;
  v59[5] = 0x400000000;
  v60[4] = v61;
  v60[5] = 0x400000000;
  v61[4] = &v62;
  v61[5] = 0x400000000;
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  v67 = 0;
  if (!v7)
  {
    v66 = 1;
    goto LABEL_5;
  }
  v19 = *v7;
  v17 = v7 + 4;
  v18 = v19;
  v20 = &v17[2 * v19];
  v21 = 8 * v19;
  v22 = v17;
  if (v19)
  {
    v30 = v21;
    v22 = v17;
    while (*(_DWORD *)(*(_QWORD *)v22 + 8) != 50)
    {
      v22 += 2;
      v30 -= 8;
      if (!v30)
        goto LABEL_19;
    }
  }
  if (v22 == v20)
LABEL_19:
    v23 = 0;
  else
    v23 = *(_QWORD *)v22 != 0;
  HIBYTE(v66) = v23;
  LOBYTE(v66) = 1;
  v24 = v17;
  if (v18)
  {
    v31 = v21;
    v24 = v17;
    while (*(_DWORD *)(*(_QWORD *)v24 + 8) != 33)
    {
      v24 += 2;
      v31 -= 8;
      if (!v31)
        goto LABEL_38;
    }
  }
  if (v24 != v20)
  {
    v25 = *(_QWORD *)v24;
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 32);
LABEL_24:
      *(_QWORD *)&v42 = a1;
      *((_QWORD *)&v42 + 1) = a1 + 34;
      LOBYTE(v43) = 0;
      *((_QWORD *)&v43 + 1) = *(_QWORD *)(a1[18] + 232);
      v27 = sub_22E50E974(&v42, v26, (__n128)0);
      *((_QWORD *)&v63 + 1) = BYTE8(v63) & 7 | (unint64_t)v27;
      goto LABEL_5;
    }
  }
LABEL_38:
  if (v18)
  {
    while (*(_DWORD *)(*(_QWORD *)v17 + 8) != 56)
    {
      v17 += 2;
      v21 -= 8;
      if (!v21)
        goto LABEL_5;
    }
  }
  if (v17 != v20)
  {
    v32 = *(_QWORD *)v17;
    if (v32)
    {
      *((_QWORD *)&v63 + 1) = 4;
      v26 = *(_QWORD *)(v32 + 32);
      goto LABEL_24;
    }
  }
LABEL_5:
  v47[0] = v4;
  v47[1] = a2;
  *(_QWORD *)&v42 = a2;
  *((_QWORD *)&v42 + 1) = v6;
  v43 = v34;
  v44 = v5;
  v45 = v33;
  v46 = v8;
  if (HIBYTE(v66))
  {
    v35 = v47;
    v36 = sub_22E60B2EC;
    v37 = 0;
    v39 = sub_22E60BBE0;
    v40 = &v42;
    sub_22F28FE44(a1, a2, 76, (uint64_t)&v35, (uint64_t)&v39, (uint64_t)v48);
  }
  else
  {
    v9 = *(_QWORD *)(a1[18] + 808);
    v35 = (_QWORD *)a2;
    v36 = (uint64_t (*)(unsigned __int8 **, uint64_t))v47;
    v37 = &v42;
    v38 = v48;
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&v35;
    v40 = (__int128 *)sub_22E60BD00;
    v41 = 0;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))(*(_QWORD *)v9 + 160))(v9, a1, &v39, *(unsigned int *)(a2 + 12));
  }
  return sub_22F293AB4((uint64_t)v48);
}

_DWORD *sub_22F2935B4(_QWORD *a1, uint64_t a2)
{
  _DWORD v5[4];

  sub_22E5B8E78(v5, (uint64_t)a1, a2);
  sub_22F293198(a1, a2);
  return sub_22F283234(v5);
}

_DWORD *sub_22F293600(_QWORD *a1, uint64_t a2)
{
  _DWORD v5[4];
  _BYTE v6[104];
  _QWORD v7[12];

  v7[11] = *MEMORY[0x24BDAC8D0];
  sub_22E5B8E78(v5, (uint64_t)a1, a2);
  sub_22E600354((uint64_t)v6, (uint64_t)a1, a2, 0, 1);
  sub_22F293198(a1, a2);
  sub_22F283FC4((uint64_t)v7);
  sub_22E488B4C((uint64_t)v6);
  return sub_22F283234(v5);
}

_DWORD *sub_22F2936AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[3];
  _DWORD v7[4];
  _QWORD v8[2];
  _BYTE v9[104];
  _QWORD v10[12];

  v10[11] = *MEMORY[0x24BDAC8D0];
  v8[0] = a1;
  v8[1] = a2;
  sub_22E5B8E78(v7, a1, a2);
  sub_22E600354((uint64_t)v9, a1, a2, 0, 0);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v6[0] = v8;
  v6[1] = sub_22E60BD70;
  v6[2] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v4 + 136))(v4, a1, v6, *(unsigned int *)(a2 + 12));
  sub_22F283FC4((uint64_t)v10);
  sub_22E488B4C((uint64_t)v9);
  return sub_22F283234(v7);
}

_DWORD *sub_22F293784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[3];
  _DWORD v7[4];
  _QWORD v8[2];
  _BYTE v9[104];
  _QWORD v10[12];

  v10[11] = *MEMORY[0x24BDAC8D0];
  v8[0] = a1;
  v8[1] = a2;
  sub_22E5B8E78(v7, a1, a2);
  sub_22E600354((uint64_t)v9, a1, a2, 0, 1);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v6[0] = v8;
  v6[1] = sub_22E60BDA8;
  v6[2] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v4 + 136))(v4, a1, v6, *(unsigned int *)(a2 + 12));
  sub_22F283FC4((uint64_t)v10);
  sub_22E488B4C((uint64_t)v9);
  return sub_22F283234(v7);
}

_DWORD *sub_22F29385C(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  _QWORD v6[3];
  _DWORD v7[4];
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  sub_22E5B8E78(v7, a1, a2);
  v6[0] = v8;
  v6[1] = sub_22E60BDE0;
  v6[2] = 0;
  v5[0] = sub_22F294750;
  v5[1] = nullsub_63;
  sub_22E5F5E6C(a1, a2, 36, (uint64_t)v6, (uint64_t)v5);
  return sub_22F283234(v7);
}

_DWORD *sub_22F2938E0(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  _QWORD v6[3];
  _DWORD v7[4];
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  sub_22E5B8E78(v7, a1, a2);
  v6[0] = v8;
  v6[1] = sub_22E60BEE4;
  v6[2] = 0;
  v5[0] = sub_22F294750;
  v5[1] = nullsub_63;
  sub_22E5F5E6C(a1, a2, 37, (uint64_t)v6, (uint64_t)v5);
  return sub_22F283234(v7);
}

uint64_t sub_22F293964(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  _BYTE v7[104];
  _QWORD v8[12];

  v8[11] = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  sub_22E600354((uint64_t)v7, a1, a2, 0x100000059, 1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 808);
  v5[0] = &v6;
  v5[1] = sub_22E60BFE8;
  v5[2] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v3 + 360))(v3, a1, 94, v5, 0);
  sub_22F283FC4((uint64_t)v8);
  return sub_22E488B4C((uint64_t)v7);
}

uint64_t sub_22F293A28(int a1)
{
  uint64_t v2;

  if (sub_22F421B7C(a1))
    return 29;
  if (sub_22F421A30(a1)
    || (a1 - 36) <= 0x29 && ((1 << (a1 - 36)) & 0x30000000C03) != 0)
  {
    return 16;
  }
  v2 = 16;
  if ((sub_22F421B60(a1) & 1) == 0)
  {
    if (sub_22F421B08(a1))
      return 16;
    else
      return 8;
  }
  return v2;
}

uint64_t sub_22F293AB4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  sub_22F293BCC((char **)(a1 + 576));
  v2 = *(void **)(a1 + 528);
  if (v2 != (void *)(a1 + 544))
    free(v2);
  v3 = *(void **)(a1 + 480);
  if (v3 != (void *)(a1 + 496))
    free(v3);
  v4 = *(void **)(a1 + 432);
  if (v4 != (void *)(a1 + 448))
    free(v4);
  v5 = *(void **)(a1 + 384);
  if (v5 != (void *)(a1 + 400))
    free(v5);
  v6 = *(void **)(a1 + 336);
  if (v6 != (void *)(a1 + 352))
    free(v6);
  v7 = *(void **)(a1 + 288);
  if (v7 != (void *)(a1 + 304))
    free(v7);
  v8 = *(void **)(a1 + 240);
  if (v8 != (void *)(a1 + 256))
    free(v8);
  v9 = *(void **)(a1 + 192);
  if (v9 != (void *)(a1 + 208))
    free(v9);
  v10 = *(void **)(a1 + 144);
  if (v10 != (void *)(a1 + 160))
    free(v10);
  v11 = *(void **)(a1 + 96);
  if (v11 != (void *)(a1 + 112))
    free(v11);
  v12 = *(void **)(a1 + 48);
  if (v12 != (void *)(a1 + 64))
    free(v12);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

char **sub_22F293BCC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 64;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22F293C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((sub_22E3CEC2C(v3) & 1) != 0 || (*(_DWORD *)(v3 + 28) & 0x7F) == 0x40)
    return 0;
  v5 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 2904);
  v6 = 0;
  v7 = v3;
  return sub_22E3CED3C(v5, &v7, &v6);
}

uint64_t sub_22F293CAC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22F275208((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F293D34(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_22F293D34(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E5669CC(a1, v6);
  v8 = 0;
  sub_22F275208((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unsigned int *sub_22F293DE0(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return (unsigned int *)sub_22E5B5498((uint64_t)result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = (unsigned int *)sub_22F246808((uint64_t)v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

uint64_t *sub_22F293F6C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  a1[1] = *(_QWORD *)(*a1 + 2904);
  *(_QWORD *)(v2 + 2904) = v3;
  LODWORD(v3) = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(v2 + 2912);
  *(_DWORD *)(v2 + 2912) = v3;
  LODWORD(v3) = *((_DWORD *)a1 + 5);
  *((_DWORD *)a1 + 5) = *(_DWORD *)(v2 + 2916);
  *(_DWORD *)(v2 + 2916) = v3;
  LODWORD(v3) = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = *(_DWORD *)(v2 + 2920);
  *(_DWORD *)(v2 + 2920) = v3;
  llvm::deallocate_buffer((llvm *)a1[1], (void *)(56 * *((unsigned int *)a1 + 6)));
  return a1;
}

uint64_t sub_22F293FE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))a1)(*(_QWORD *)(a1 + 8));
}

__n128 sub_22F293FF0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  if (a4)
  {
    LOWORD(v22) = 261;
    v18 = "cancel.exit";
    v19 = 11;
    v7 = operator new();
    llvm::BasicBlock::BasicBlock();
    v8 = *(_QWORD *)(a2 + 2008);
    v9 = *(_DWORD *)(a2 + 2640);
    *(_DWORD *)(a2 + 2640) = v9 + 1;
    LOWORD(v22) = 261;
    v18 = "cancel.cont";
    v19 = 11;
    operator new();
    v10 = llvm::BasicBlock::BasicBlock();
    v11 = *(_QWORD *)(a2 + 2008);
    v12 = *(_DWORD *)(a2 + 2640);
    *(_DWORD *)(a2 + 2640) = v12 + 1;
  }
  else
  {
    v9 = 0;
    v7 = 0;
    v12 = 0;
    v10 = 0;
    v8 = -1;
    v11 = -1;
  }
  LODWORD(v18) = a3;
  BYTE4(v18) = 0;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v13 = sub_22E47F7A8(a1, (unint64_t)&v18);
  v14 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 8);
  result = *(__n128 *)v13;
  v16 = *(_OWORD *)(v13 + 16);
  v17 = *(_OWORD *)(v13 + 32);
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(v13 + 48);
  *(_OWORD *)(v14 + 16) = v16;
  *(_OWORD *)(v14 + 32) = v17;
  *(__n128 *)v14 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F294168(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(_DWORD *)(result + 8);
  v6 = *(_QWORD *)result + 56 * v5;
  v7 = *(_QWORD **)(v6 - 48);
  if (v7)
  {
    v8 = a2[40];
    if (!*(_BYTE *)(v6 - 52))
    {
      if (v8)
      {
        v9 = *(_OWORD *)(v6 - 24);
        v15 = *(_QWORD *)(v6 - 8);
        v14 = v9;
        sub_22E48BA00(a2, (uint64_t)&v14);
        v7 = *(_QWORD **)(*(_QWORD *)v3 + 56 * *(unsigned int *)(v3 + 8) - 48);
      }
      sub_22E5ED9B4(a2, v7, 0);
      v10 = *(_QWORD *)v3 + 56 * *(unsigned int *)(v3 + 8);
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(_OWORD *)(v10 - 24);
      v13 = v11;
      sub_22E48BA00(a2, (uint64_t)&v12);
      v4 = *(_QWORD *)v3;
      v5 = *(_DWORD *)(v3 + 8);
    }
    result = sub_22E5ED9B4(a2, *(_QWORD **)(v4 + 56 * v5 - 24), 0);
    if (!v8)
    {
      result = sub_22F24866C((uint64_t)(a2 + 34));
      a2[40] = 0;
      a2[41] = 0;
    }
  }
  --*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_22F294270(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22E46706C((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2942FC(a2, (uint64_t)a3, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_22F2942FC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_22E600F34(a1, v7);
  v9 = 0;
  sub_22E46706C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_22F2943A8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_22E46706C((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_22F29444C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E600FF4(result);
    }
  }
  return result;
}

_QWORD *sub_22F29449C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22F24C318(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F2843A4(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_22F294508@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_22E46706C((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2942FC(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_22F29458C(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE v4[32];
  __int16 v5;

  if (*(_QWORD *)(a2 + 320))
  {
    v2 = (uint64_t *)(a2 + 272);
    v3 = *(_QWORD *)(result + 8);
    v5 = 257;
    return sub_22E3C12C8(v2, v3, (uint64_t)v4);
  }
  return result;
}

uint64_t sub_22F2945C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[32];
  __int16 v12;

  v7 = a3 + 40;
  v6 = *(_QWORD *)(a3 + 40);
  if (v6 != a3 + 40)
  {
    v8 = v6 ? (unsigned __int8 *)(v6 - 24) : 0;
    if (v8[16] - 29 <= 0xA)
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v8);
  }
  a1[40] = a3;
  a1[41] = v7;
  result = sub_22E5E5158(a1, a2, 0, 0);
  if (a1[40])
  {
    v10 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v12 = 257;
    return sub_22E3C12C8(a1 + 34, v10, (uint64_t)v11);
  }
  return result;
}

uint64_t *sub_22F294690(uint64_t a1, llvm::BasicBlock *a2)
{
  uint64_t UniqueSuccessor;
  _QWORD *v5;
  unsigned __int8 *v6;
  llvm::Instruction *v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  __int128 v14;

  v13 = a1 + 272;
  v14 = *(_OWORD *)(a1 + 320);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 272));
  UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(a2);
  v5 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v5 == (_QWORD *)((char *)a2 + 40))
  {
    v7 = 0;
  }
  else
  {
    if (v5)
      v6 = (unsigned __int8 *)(v5 - 3);
    else
      v6 = 0;
    if (v6[16] - 29 >= 0xB)
      v7 = 0;
    else
      v7 = (llvm::Instruction *)v6;
  }
  llvm::Instruction::eraseFromParent(v7);
  *(_QWORD *)(a1 + 320) = a2;
  *(_QWORD *)(a1 + 328) = (char *)a2 + 40;
  v8 = *(_QWORD *)(a1 + 2008);
  v9 = *(_DWORD *)(a1 + 2640);
  *(_DWORD *)(a1 + 2640) = v9 + 1;
  v11[0] = UniqueSuccessor;
  v11[1] = v8;
  v12 = v9;
  sub_22E48BA00((_QWORD *)a1, (uint64_t)v11);
  return sub_22E4EEB90(&v13);
}

uint64_t sub_22F294750(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a2, a3, a4);
}

uint64_t sub_22F294764(uint64_t (*a1)(uint64_t, uint64_t, __int128 *), uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v5;
  uint64_t v6;

  v5 = *a4;
  v6 = *((_QWORD *)a4 + 2);
  return a1(a2, a3, &v5);
}

uint64_t sub_22F2947A4(uint64_t (*a1)(uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return a1(a2, a3, a4, a5);
}

uint64_t sub_22F2947C0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a2, a3);
}

uint64_t sub_22F2947D0(uint64_t (*a1)(uint64_t, uint64_t, _OWORD *, _OWORD *), uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  __int128 v5;
  __int128 v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v5 = a4[1];
  v9[0] = *a4;
  v9[1] = v5;
  v9[2] = a4[2];
  v6 = a5[1];
  v8[0] = *a5;
  v8[1] = v6;
  v8[2] = a5[2];
  return a1(a2, a3, v9, v8);
}

uint64_t sub_22F294824(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = v6 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  v8 = *a3;
  *(_DWORD *)v7 = *a2;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = v7 + 32;
  *(_QWORD *)(v7 + 24) = 0x400000000;
  sub_22F2948D4((uint64_t *)a1, v6);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v9 = (*(_DWORD *)(a1 + 8) + 1);
  *(_QWORD *)(a1 + 8) = v9;
  return v6 + (v9 << 6) - 64;
}

void sub_22F2948D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1;
    v5 = *a1 + (v2 << 6);
    v6 = (_QWORD *)(a2 + 16);
    v7 = v4 + 16;
    do
    {
      *((_OWORD *)v6 - 1) = *(_OWORD *)(v7 - 16);
      *v6 = v6 + 2;
      v6[1] = 0x400000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = (_QWORD *)sub_22F24C77C((uint64_t)v6, v7);
      v8 = v7 - 16;
      v6 += 8;
      v7 += 64;
    }
    while (v8 + 64 != v5);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = v9 << 6;
      do
      {
        v12 = *(void **)(v10 + v11 - 48);
        if ((void *)(v10 + v11 - 32) != v12)
          free(v12);
        v11 -= 64;
      }
      while (v11);
    }
  }
}

uint64_t sub_22F294994(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;

  v16 = *(_QWORD *)a2;
  v17 = 0;
  sub_22F294A80((uint64_t)&v14, (uint64_t)a1, &v16, &v17);
  v4 = v14;
  v5 = (void **)(a1 + 3);
  if (!v15)
    return (uint64_t)*v5 + 104 * *(unsigned int *)(v14 + 8);
  v6 = a1[4];
  if (v6 >= a1[5])
  {
    v12 = sub_22E607C30(v5, a2);
  }
  else
  {
    v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)v6 = v7;
    v9 = *(_OWORD *)(a2 + 48);
    v10 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(v6 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(v6 + 64) = v10;
    *(_OWORD *)(v6 + 80) = v11;
    *(_OWORD *)(v6 + 48) = v9;
    v12 = (char *)(v6 + 104);
  }
  a1[4] = v12;
  *(_DWORD *)(v4 + 8) = -991146299 * ((unint64_t)&v12[-a1[3]] >> 3) - 1;
  return (uint64_t)(v12 - 104);
}

uint64_t sub_22F294A80(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_22F246C54((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F261244(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

llvm::Value *sub_22F294B18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Value *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  llvm::Value *result;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[32];
  __int16 v20;

  v13 = a2 + 40;
  v12 = *(_QWORD *)(a2 + 40);
  if (v12 != a2 + 40)
  {
    v14 = v12 ? (unsigned __int8 *)(v12 - 24) : 0;
    if (v14[16] - 29 <= 0xA)
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v14);
  }
  a1[40] = a2;
  a1[41] = v13;
  if (llvm::Function::hasFnAttribute())
  {
    if (a5)
      v18 = *((_QWORD *)a5 + 3);
    else
      v18 = 0;
    v20 = 257;
    result = sub_22F24EEDC((uint64_t)a1, v18, a5, a6, a7, (uint64_t)v19);
  }
  else
  {
    if (a5)
      v15 = *((_QWORD *)a5 + 3);
    else
      v15 = 0;
    v20 = 257;
    result = sub_22E479C7C((uint64_t)a1, v15, a5, a6, a7, (uint64_t)v19);
  }
  if (a1[40])
  {
    v17 = llvm::User::operator new((llvm::User *)0x40);
    llvm::BranchInst::BranchInst();
    v20 = 257;
    return (llvm::Value *)sub_22E3C12C8(a1 + 34, v17, (uint64_t)v19);
  }
  return result;
}

uint64_t sub_22F294C50(uint64_t *a1, llvm::GlobalValue *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  llvm::Value *PointerBitCastOrAddrSpaceCast;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  llvm::GlobalValue *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  llvm *v32;
  uint64_t v33;
  _DWORD v34[16];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  _BYTE v41[16];
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  llvm::Type *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  sub_22F40E610((uint64_t)v41, *(_QWORD *)(*a1 + 144), a4, 1);
  llvm::ArrayType::get(*(llvm::ArrayType **)(*a1 + 96), (llvm::Type *)v45);
  v38 = v40;
  v39 = 0x800000000;
  v35 = (char *)&v37;
  v36 = 0x800000000;
  if (v43)
  {
    v8 = 16 * v43;
    v9 = (uint64_t *)(v42 + 8);
    do
    {
      v32 = 0;
      v33 = 0;
      v34[0] = 0;
      sub_22F2950F4((uint64_t)&v35, (unint64_t)&v32);
      llvm::deallocate_buffer(v32, (void *)(24 * v34[0]));
      v10 = *(v9 - 1);
      if ((v10 & 0xFFFFFFFFFFFFFFF8) == a4)
      {
        v11 = (llvm::Value *)(*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*a1 + 224)
                                                                                         + 520))(*(_QWORD *)(*a1 + 224), a4, 0);
      }
      else
      {
        v12 = *v9;
        v32 = (llvm *)(v10 & 0xFFFFFFFFFFFFFFF8);
        v33 = v12;
        v11 = sub_22E60F9B8(a1, a4, (unint64_t *)&v32, (v10 & 4) != 0, a3, (uint64_t)&v35[24 * v36 - 24]);
      }
      v13 = v11;
      v14 = v39;
      if (v39 >= (unint64_t)HIDWORD(v39))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v39;
      }
      *((_QWORD *)v38 + v14) = v13;
      LODWORD(v39) = v39 + 1;
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  v32 = (llvm *)v34;
  v33 = 0x800000000;
  if ((_DWORD)v45)
  {
    v28 = a2;
    v15 = 24 * v45;
    v16 = (uint64_t *)(v44 + 8);
    do
    {
      v17 = *(v16 - 1);
      if ((*(_QWORD *)(v42 + 16 * v17) & 0xFFFFFFFFFFFFFFF8) == a4)
      {
        v18 = (uint64_t *)a1[1];
        *(_QWORD *)&v30 = a4;
        v19 = v18 + 8;
        (*(void (**)(uint64_t *, unint64_t))(*v18 + 16))(v18, a4);
        v20 = sub_22F24CF04(v19, &v30)[1];
        v30 = *(_OWORD *)v16;
        v29 = 0;
        sub_22F24D0EC((uint64_t *)(v20 + 48), (uint64_t *)&v30, &v29);
      }
      else
      {
        *(_QWORD *)&v30 = 0;
        sub_22F24D0EC((uint64_t *)&v35[24 * v17], v16, &v30);
      }
      v30 = 0uLL;
      v31 = 0;
      *(_QWORD *)&v30 = llvm::ConstantInt::get();
      *((_QWORD *)&v30 + 1) = llvm::ConstantInt::get();
      v31 = llvm::ConstantInt::get();
      llvm::ConstantExpr::getGetElementPtr();
      PointerBitCastOrAddrSpaceCast = (llvm::Value *)llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast();
      v22 = *(_QWORD *)(*a1 + 184);
      if ((*(_BYTE *)(v22 + 1388) & 3) != 0)
        PointerBitCastOrAddrSpaceCast = (llvm::Value *)sub_22F28A290((uint64_t *)*a1, PointerBitCastOrAddrSpaceCast, (_DWORD *)(v22 + 1388), 0);
      v23 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = v33;
      }
      *((_QWORD *)v32 + v23) = PointerBitCastOrAddrSpaceCast;
      LODWORD(v33) = v33 + 1;
      v16 += 3;
      v15 -= 24;
    }
    while (v15);
    a2 = v28;
  }
  llvm::ConstantArray::get();
  llvm::GlobalVariable::setInitializer();
  sub_22E46AC38(a2, a3);
  v24 = *a1;
  v25 = *(_DWORD *)(*(_QWORD *)(*a1 + 216) + 76);
  v26 = (v25 - 8) < 2 || v25 == 5;
  if (!v26 && (*((_DWORD *)a2 + 8) & 0xFu) <= 0xA && ((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x63C) != 0)
  {
    llvm::Value::getName(a2);
    llvm::Module::getOrInsertComdat();
    llvm::GlobalObject::setComdat();
    v24 = *a1;
  }
  sub_22F29966C(v24, (unsigned int *)a2, a4);
  if (v32 != (llvm *)v34)
    free(v32);
  sub_22F2951E8(&v35);
  if (v38 != v40)
    free(v38);
  return sub_22F295170((uint64_t)v41);
}

unint64_t sub_22F2950F4(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  result = sub_22E60CED4(a1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)v4 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  v5 = *(_DWORD *)(v4 + 12);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = v5;
  v6 = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v6;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22F295170(uint64_t a1)
{
  void *v2;
  void *v3;

  llvm::deallocate_buffer(*(llvm **)(a1 + 2640), (void *)(24 * *(unsigned int *)(a1 + 2656)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 2616), (void *)(24 * *(unsigned int *)(a1 + 2632)));
  v2 = *(void **)(a1 + 1056);
  if (v2 != (void *)(a1 + 1072))
    free(v2);
  v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 32))
    free(v3);
  return a1;
}

char **sub_22F2951E8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      llvm::deallocate_buffer(*(llvm **)&v2[v4 - 24], (void *)(24 * *(unsigned int *)&v2[v4 - 8]));
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22F295260(uint64_t a1)
{
  uint64_t v2;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  sub_22F2952CC(a1, v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t sub_22F2952CC(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)result;
    v4 = *(_QWORD *)result + 24 * v2;
    do
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = 0;
      v5 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_DWORD *)(v3 + 12) = v5;
      v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v6;
      v3 += 24;
      a2 += 24;
    }
    while (v3 != v4);
    v7 = *(unsigned int *)(result + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)result;
      v9 = 24 * v7;
      do
      {
        result = llvm::deallocate_buffer(*(llvm **)(v8 + v9 - 24), (void *)(24 * *(unsigned int *)(v8 + v9 - 8)));
        v9 -= 24;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_22F295380(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v5;
  uint64_t result;
  int v10;
  uint64_t *v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = sub_22F295478((_DWORD *)a3);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & (a2 - 1);
    v5 = (uint64_t *)(a1 + 32 * v13);
    v14 = *v5;
    if (*(_QWORD *)a3 == *v5 && *(_QWORD *)(a3 + 8) == v5[1] && *(_QWORD *)(a3 + 16) == v5[2])
    {
      result = 1;
      goto LABEL_3;
    }
    if (v14 == -8192)
    {
      v16 = v5[1] == -8192 && v5[2] == 0x8000000000000000;
      goto LABEL_24;
    }
    if (v14 == -4096 && v5[1] == -4096 && v5[2] == 0x7FFFFFFFFFFFFFFFLL)
      break;
    v16 = 0;
LABEL_24:
    if (v16 && v11 == 0)
      v11 = (uint64_t *)(a1 + 32 * v13);
    v10 = v13 + i;
  }
  result = 0;
  if (v11)
    v5 = v11;
LABEL_3:
  *a4 = v5;
  return result;
}

uint64_t sub_22F295478(_DWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = (37 * a1[4])
     + ~((unint64_t)(37 * a1[4]) << 32)
     + ((unint64_t)((a1[2] >> 4) ^ (a1[2] >> 9)) << 32);
  v2 = (v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13);
  v3 = (9 * (v2 ^ (v2 >> 8))) ^ ((9 * (v2 ^ (v2 >> 8))) >> 15);
  v4 = (((v3 + ~(v3 << 27)) >> 31) ^ ((_DWORD)v3 + ~((_DWORD)v3 << 27)) | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32))
     + ~((unint64_t)(((v3 + ~(v3 << 27)) >> 31) ^ ((_DWORD)v3 + ~((_DWORD)v3 << 27))) << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  return ((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27));
}

uint64_t sub_22F29550C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_22F295380(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F2955A8(a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(result + 24) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t *sub_22F2955A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  BOOL v8;
  uint64_t *v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_13:
    sub_22E60CF3C(a1, v6);
    v9 = 0;
    sub_22F295380(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    a3 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || (a3[1] == -4096 ? (v8 = a3[2] == 0x7FFFFFFFFFFFFFFFLL) : (v8 = 0), !v8))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_22F295670(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 32 * v6;
    do
    {
      *(_QWORD *)v7 = -4096;
      *(_OWORD *)(v7 + 8) = xmmword_22F45B630;
      v7 += 32;
    }
    while (v7 != v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*v4 == -8192)
      {
        if (v4[1] == -8192 && v4[2] == 0x8000000000000000)
          goto LABEL_12;
      }
      else if (*v4 == -4096 && v4[1] == -4096 && v4[2] == 0x7FFFFFFFFFFFFFFFLL)
      {
        goto LABEL_12;
      }
      v12 = 0;
      result = sub_22F295380(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), (uint64_t)v4, &v12);
      v11 = v12;
      *v12 = *v4;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(v4 + 1);
      v11[3] = v4[3];
      ++*(_DWORD *)(v5 + 8);
LABEL_12:
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_22F295778(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23[2];
  uint64_t v24[2];
  int v25[2];
  void *v26[2];
  _QWORD v27[17];

  v27[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 1688) = a3;
  *(_DWORD *)(a1 + 1696) = a4;
  *(_BYTE *)(a1 + 1881) = 1;
  v12 = a3 & 0xFFFFFFFFFFFFFFF8;
  v13 = sub_22EFD7558(a3 & 0xFFFFFFFFFFFFFFF8);
  v14 = *(_QWORD *)(a1 + 144);
  if (a6)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 16392);
  }
  else
  {
    v17 = v13;
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 224) + 40))(*(_QWORD *)(v14 + 224), a3, a4))
    {
      *(_QWORD *)v25 = v17;
      goto LABEL_4;
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a3, a4))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 144) + 16816);
    }
    else
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v18)
        v19 = *(_BYTE *)(v18 + 16) == 26;
      else
        v19 = 0;
      if (!v19)
        v18 = sub_22F10CF48(v18);
      v15 = *(_QWORD *)(v18 + 24);
    }
  }
  *(_QWORD *)v25 = v15;
LABEL_4:
  v26[0] = v27;
  v26[1] = (void *)0x1000000000;
  sub_22E46AE60(*(_QWORD **)(*(_QWORD *)(a1 + 144) + 224), (_QWORD *)a1, (uint64_t)v26);
  if ((a6 & 1) == 0)
  {
    v20 = *(char **)(v12 + 120);
    sub_22EFBAACC(v12);
    v21 = *(_QWORD *)(v12 + 120);
    v22 = sub_22EFBAACC(v12);
    sub_22F246808((uint64_t)v26, v20, (char *)(v21 + 8 * v22));
    if ((*(_DWORD *)(v12 + 28) & 0x7F) == 0x39)
      (*(void (**)(_QWORD, uint64_t, int *, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 432))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1, v25, v26);
  }
  sub_22E48EF50(v24, a1, 1, 0);
  sub_22E61A8FC(a1, 0, 0, *(unint64_t *)v25, a2, a5, (uint64_t *)v26, *(_DWORD *)(v12 + 24), v16, 0);
  sub_22E48EF50(v23, a1, 0, 0);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 224) + 448))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 224), a1);
  *(_QWORD *)(a1 + 4208) = *(_QWORD *)(a1 + 4200);
  *(_QWORD *)(a1 + 1600) = v12;
  *(_QWORD *)(a1 + 1592) = v12;
  sub_22E48F128(v23);
  sub_22E48F128(v24);
  if (v26[0] != v27)
    free(v26[0]);
}

_QWORD *sub_22F2959D0(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  uint64_t v14;
  llvm::Value *BitCast;
  uint64_t v16;
  uint64_t v18[2];

  sub_22F295778(a1, (llvm::Value *)a2, a4, a5, a3, a7);
  sub_22E48EF50(v18, a1, 0, 0);
  if ((a7 & 1) != 0)
  {
    v14 = llvm::StructType::get();
    sub_22E6336F0(*(_QWORD *)(a1 + 144), a4, a5, v14, 1, 0, 0);
    BitCast = (llvm::Value *)llvm::ConstantExpr::getBitCast();
  }
  else
  {
    v16 = sub_22E46F2EC(*(_QWORD *)(a1 + 144) + 280, a3);
    BitCast = (llvm::Value *)sub_22E6336F0(*(_QWORD *)(a1 + 144), a4, a5, v16, 1, 0, 0);
  }
  sub_22E60D380(a1, a2[3], BitCast, a6, a7);
  return sub_22E48F128(v18);
}

uint64_t sub_22F295ADC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  result = sub_22F29F7D0((uint64_t)a1, a2);
  v4 = result;
  v5 = *a1;
  v6 = *(_DWORD *)(v5 + 16);
  if (v6 >= *(_DWORD *)(v5 + 20))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 16);
  return result;
}

BOOL sub_22F295B40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 134)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22F295BA0(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *__p;
  uint64_t *v41;
  llvm *v43[2];
  unsigned int v44;
  char *v45;
  char *v46;
  unint64_t v47;

  if ((*(_BYTE *)(*((_QWORD *)a1 + 23) + 29) & 4) != 0)
  {
    v7 = *((_QWORD *)a1 + 18);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 15088) + *(_QWORD *)(**(_QWORD **)(v7 + 15088) - 24));
    v9 = sub_22EF5CDF0(v7, *(_QWORD *)(*(_QWORD *)(v7 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v10 = sub_22F2962B4(a4 + 48);
    v12 = *(_QWORD *)(a4 + 48) + 24 * *(unsigned int *)(a4 + 64);
    v39 = a2;
    if ((_QWORD *)v12 == v10)
    {
      v15 = 0;
      v21 = 0;
    }
    else
    {
      v13 = v10;
      v14 = v11;
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a4 + 8);
        if (v16)
          v16 = *(_QWORD *)(*(_QWORD *)a4 + 8 * *((unsigned int *)v13 + 4));
        v17 = *((_DWORD *)v13 + 5);
        v43[0] = *(llvm **)v13;
        LODWORD(v43[1]) = v17 + v16;
        if ((unint64_t)v15 >= v47)
        {
          v15 = (char *)sub_22E4D6CC4((void **)&v45, v43);
        }
        else
        {
          *(_OWORD *)v15 = *(_OWORD *)v43;
          v15 += 16;
        }
        v46 = v15;
        while (1)
        {
          v13 += 3;
          if (v13 == v14)
            break;
          v18 = v13[1];
          v19 = *v13 == -4096 && v18 == 0x7FFFFFFFFFFFFFFFLL;
          if (!v19 && (*v13 != -8192 || v18 != 0x8000000000000000))
            goto LABEL_22;
        }
        v13 = v14;
LABEL_22:
        ;
      }
      while (v13 != (_QWORD *)v12);
      v21 = v45;
    }
    v22 = a3;
    v23 = 126 - 2 * __clz((v15 - v21) >> 4);
    v43[0] = a1;
    if (v15 == v21)
      v24 = 0;
    else
      v24 = v23;
    sub_22E611434((uint64_t)v21, v15, (uint64_t *)v43, v24, 1);
    __p = v45;
    v41 = (uint64_t *)v46;
    if (v45 != v46)
    {
      v26 = *(_QWORD *)(a4 + 16);
      v25 = *(_QWORD *)(a4 + 24);
      v27 = (uint64_t *)v45;
      v28 = v8 / v9;
      do
      {
        v29 = *v27;
        sub_22F29C684((uint64_t)a1, v22, v28 * (unint64_t)*((unsigned int *)v27 + 2), *v27);
        if (v25)
        {
          v30 = 0;
          v31 = 0;
          v32 = 1;
          do
          {
            v33 = *(_QWORD *)(v26 + 8 * v30);
            if ((v33 & 7) == 4)
            {
              v34 = *((_QWORD *)a1 + 18);
              v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 48);
              v36 = sub_22EF6477C(v34, v29);
              v37 = v35;
              v22 = a3;
              v38 = sub_22F36A6C0(v34, v37, *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0));
              sub_22F29C610((uint64_t)a1, v38);
              llvm::GlobalObject::addTypeMetadata();
            }
            ++v31;
            v30 = v32;
            v19 = v25 == v32++;
          }
          while (!v19);
        }
        v27 += 2;
      }
      while (v27 != v41);
    }
    if ((*(_WORD *)(*((_QWORD *)a1 + 23) + 64) & 0x600) != 0)
    {
      v43[0] = 0;
      v43[1] = 0;
      v44 = 0;
      if (sub_22E6102F0((uint64_t)a1, v39, (uint64_t)v43))
        llvm::GlobalObject::setVCallVisibilityMetadata();
      llvm::deallocate_buffer(v43[0], (void *)(8 * v44));
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_22F295E54(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t NamedAlias;
  int v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  __int128 v10;
  _QWORD v11[33];

  v11[32] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a2 + 32) & 0xF) != 1)
  {
    v9 = v11;
    v10 = xmmword_22F44E320;
    sub_22E61131C((uint64_t)&v9, a3, &a3[a4]);
    llvm::Value::setName();
    NamedAlias = llvm::Module::getNamedAlias();
    if (!NamedAlias)
    {
      llvm::GlobalValue::getAddressSpace((llvm::GlobalValue *)a2);
      NamedAlias = llvm::GlobalAlias::create();
    }
    sub_22E4C73E8(NamedAlias, (*(_DWORD *)(a2 + 32) >> 4) & 3);
    *(_DWORD *)(NamedAlias + 32) = *(_DWORD *)(NamedAlias + 32) & 0xFFFFFF3F | (((*(_DWORD *)(a2 + 32) >> 6) & 3) << 6);
    v6 = *(_DWORD *)(a2 + 32);
    if (*(_QWORD *)(a2 + 48))
    {
      v7 = v6 & 0xFFFFFFCF | 0x10;
      *(_DWORD *)(a2 + 32) = v7;
      if ((v6 & 0xFu) - 7 >= 2)
      {
        if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) != 0)
        {
LABEL_9:
          llvm::GlobalAlias::setAliasee();
          if (v9 != v11)
            free(v9);
          return;
        }
        v7 = *(_DWORD *)(a2 + 32);
      }
      v8 = v7 | 0x4000;
    }
    else
    {
      v8 = v6 & 0xFFFFBFC0 | 0x4008;
    }
    *(_DWORD *)(a2 + 32) = v8;
    goto LABEL_9;
  }
}

uint64_t sub_22F296010(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  int v11;
  unsigned int v12;
  uint64_t v13;

  if (sub_22EFB948C(a2) < 3)
    return 7;
  v4 = sub_22F0CB980(*(_QWORD *)(a1 + 144), a2);
  if (!v4 || (v5 = v4, sub_22E49F808(a2)))
  {
LABEL_4:
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 8) & 0x2000000000) == 0)
    {
      v6 = 5;
      v7 = 5;
      if (!sub_22E60FD38(a2))
      {
        v8 = sub_22E49F808(a2);
        if (v8)
          v7 = 1;
        else
          v7 = 5;
        if (v8)
          v6 = 1;
        else
          v6 = 3;
      }
      v9 = sub_22EFD5760(a2);
      if (v9 < 3)
        return v6;
      if (v9 != 4)
      {
        v7 = v6;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 216) + 148) != 11)
        {
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 184) + 33) & 0x18) != 0)
            return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 224) + 240))(*(_QWORD *)(a1 + 224), a2);
          else
            return 0;
        }
      }
      return v7;
    }
    return 7;
  }
  v13 = 0;
  if (sub_22EFBF6E8(v5, &v13))
    v5 = v13;
  v11 = sub_22EFB9CC4(v5);
  v12 = 3;
  switch(v11)
  {
    case 0:
    case 2:
      if (v13 || (*(_BYTE *)(*(_QWORD *)(a1 + 184) + 33) & 0x18) == 0)
      {
        if ((*(_BYTE *)(v5 + 82) & 1) == 0)
          return 0;
        v12 = 3;
LABEL_27:
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2000) + 8) & 0x2000000000) != 0)
          v7 = 7;
        else
          v7 = v12;
      }
      else
      {
        v7 = 1;
      }
      break;
    case 1:
      goto LABEL_27;
    case 4:
      v12 = 5;
      goto LABEL_27;
    default:
      goto LABEL_4;
  }
  return v7;
}

uint64_t sub_22F2961B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 824);
  if (v4)
    sub_22E4947E0(v4, a2);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (*(_DWORD *)(*(_QWORD *)(a2 + 128) + 20))
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 552))(*(_QWORD *)(*(_QWORD *)a1 + 224), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 480))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, a2);
}

unint64_t sub_22F296234(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  int v5;

  v2 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(*a1 + 216) + 148) == 11)
    return 0;
  v5 = sub_22EFD5760(a2);
  switch(v5)
  {
    case 1:
      return 0;
    case 3:
      return 1;
    case 4:
      return 0;
  }
  result = sub_22F0CB980(*(_QWORD *)(v2 + 144), a2);
  if (result)
    return (*(unsigned int (**)(unint64_t))(*(_QWORD *)result + 72))(result) ^ 1;
  return result;
}

_QWORD *sub_22F2962B4(uint64_t a1)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = &result[3 * v4];
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    while (1)
    {
      v7 = result[1];
      if ((*result != -4096 || v7 != 0x7FFFFFFFFFFFFFFFLL) && (*result != -8192 || v7 != 0x8000000000000000))
        break;
      result += 3;
      v6 -= 24;
      if (!v6)
        return v5;
    }
  }
  return result;
}

llvm::raw_ostream *sub_22F296314(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm *v3;
  llvm::raw_ostream *result;
  _BYTE *v5;

  v2 = (llvm::raw_ostream *)llvm::dbgs(a1);
  v3 = (llvm *)llvm::LLT::print(a1, v2);
  result = (llvm::raw_ostream *)llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

uint64_t sub_22F296374(uint64_t a1, uint64_t a2)
{
  sub_22E61239C(*(llvm **)(a1 + 32), a2);
  return 1;
}

void sub_22F296390(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const char *v9;

  if (!*(_BYTE *)(a2 + 352) || *(_BYTE *)(a2 + 72))
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 9:
      case 0xF:
        v4 = a1[5];
        if (*(_QWORD *)(a2 + 40))
          strlen(*(const char **)(a2 + 40));
        if (*(_QWORD *)(v4 + 1104) && llvm::Regex::match())
        {
          v5 = a1;
          v6 = a2;
          v7 = 850;
          goto LABEL_14;
        }
        break;
      case 0xA:
      case 0x10:
        v8 = a1[5];
        if (*(_QWORD *)(a2 + 40))
          strlen(*(const char **)(a2 + 40));
        if (*(_QWORD *)(v8 + 1152) && llvm::Regex::match())
        {
          v5 = a1;
          v6 = a2;
          v7 = 854;
          goto LABEL_14;
        }
        break;
      case 0xB:
        v9 = *(const char **)(a2 + 40);
        if (!sub_22F2964F4(v9))
          goto LABEL_16;
        goto LABEL_20;
      default:
        v9 = *(const char **)(a2 + 40);
LABEL_16:
        if (v9)
          strlen(v9);
        if (*(_QWORD *)(a1[5] + 1200) && llvm::Regex::match())
        {
LABEL_20:
          v5 = a1;
          v6 = a2;
          v7 = 851;
LABEL_14:
          sub_22E614720(v5, v6, v7);
        }
        break;
    }
  }
}

BOOL sub_22F2964F4(const char *a1)
{
  size_t v2;
  size_t v3;

  if (a1)
  {
    v2 = strlen(a1);
    v3 = v2;
    if (*MEMORY[0x24BED6560])
    {
      if (v2 == strlen((const char *)*MEMORY[0x24BED6560]))
      {
        if (v3)
          return memcmp(a1, (const void *)*MEMORY[0x24BED6560], v3) == 0;
        return 1;
      }
    }
    else if (!v2)
    {
      return 1;
    }
    return 0;
  }
  if (!*MEMORY[0x24BED6560])
    return 1;
  return *(_BYTE *)*MEMORY[0x24BED6560] == 0;
}

void sub_22F296590(_QWORD *a1, uint64_t a2)
{
  const char *v4;

  v4 = *(const char **)(a2 + 40);
  if (sub_22F2964F4(v4))
    goto LABEL_2;
  if (v4)
    strlen(v4);
  if (*(_QWORD *)(a1[5] + 1200) && llvm::Regex::match())
LABEL_2:
    sub_22E614720(a1, a2, 853);
}

void sub_22F29661C(_QWORD *a1, uint64_t a2)
{
  const char *v4;

  v4 = *(const char **)(a2 + 40);
  if (sub_22F2964F4(v4))
    goto LABEL_2;
  if (v4)
    strlen(v4);
  if (*(_QWORD *)(a1[5] + 1200) && llvm::Regex::match())
LABEL_2:
    sub_22E614720(a1, a2, 852);
}

uint64_t sub_22F2966A8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_22E729984(a1);
  *(_QWORD *)v6 = off_24FA669A0;
  *(_DWORD *)(v6 + 112) = a2;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v6 + 144;
  *(_QWORD *)(v6 + 136) = 0x400000000;
  v7 = a3;
  if (!a3)
  {
    v8 = operator new();
    v7 = MEMORY[0x23489C5F4](v8);
  }
  *(_QWORD *)(a1 + 208) = v7;
  *(_BYTE *)(a1 + 216) = a3 == 0;
  return a1;
}

uint64_t sub_22F296734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::LLVMContext *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_24FA669A0;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
  {
    v3 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v3, 0x10B2C407FF26C1CLL);
  }
  if (*(_BYTE *)(a1 + 216))
  {
    v4 = *(llvm::LLVMContext **)(a1 + 208);
    if (v4)
    {
      llvm::LLVMContext::~LLVMContext(v4);
      MEMORY[0x2348A0E9C]();
    }
  }
  sub_22F297394((void **)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v5)
  {
    v6 = MEMORY[0x23489F15C]();
    MEMORY[0x2348A0E9C](v6, 0x10B2C407FF26C1CLL);
  }
  return sub_22E7299B4(a1);
}

void sub_22F2967DC(uint64_t a1)
{
  sub_22F296734(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F296800()
{
  return 1;
}

uint64_t sub_22F296808(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(*(_QWORD *)(result + 104) + 224))
  {
    v1 = result;
    v2 = sub_22F2A2838(*(_QWORD *)(*(_QWORD *)(result + 224) + 256));
    result = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 120) = v2;
    if (result)
    {
      MEMORY[0x23489F15C]();
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

uint64_t sub_22F29686C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = 16 * v2;
    v4 = *(_QWORD *)result - 16;
    do
    {
      result = *(_QWORD *)(v4 + v3);
      *(_QWORD *)(v4 + v3) = 0;
      if (result)
      {
        v5 = MEMORY[0x23489F15C]();
        result = MEMORY[0x2348A0E9C](v5, 0x10B2C407FF26C1CLL);
      }
      v3 -= 16;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_22F2968D4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (*(_QWORD *)(a1 + 1088))
  {
    v4 = (_QWORD *)operator new();
    v5 = *a2;
    *a2 = 0;
    v6 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)(a1 + 1088) = 0;
    *v4 = &off_24FAC7F78;
    v4[1] = v5;
    v4[2] = v6;
    v7 = *a2;
    *a2 = (uint64_t)v4;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22F29698C()
{
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22F2969A0(uint64_t a1)
{
  sub_22E618844(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F2969C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 72) = a2;
  if (*(_BYTE *)(a1 + 253))
    llvm::Timer::startTimer((llvm::Timer *)(a1 + 88));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 16))(*(_QWORD *)(a1 + 256));
  if (*(_BYTE *)(a1 + 253))
    return llvm::Timer::stopTimer((llvm::Timer *)(a1 + 88));
  return result;
}

uint64_t sub_22F296A34(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 96))(*(_QWORD *)(a1 + 256));
}

uint64_t sub_22F296A44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 104))(*(_QWORD *)(a1 + 256));
}

uint64_t sub_22F296A54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 112))(*(_QWORD *)(a1 + 256));
}

uint64_t sub_22F296A64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 128))(*(_QWORD *)(a1 + 256));
}

uint64_t sub_22F296A74()
{
  return 0;
}

uint64_t sub_22F296A80()
{
  return 1;
}

uint64_t sub_22F296A88()
{
  return 1;
}

uint64_t sub_22F296A90()
{
  return 1;
}

uint64_t sub_22F296A98()
{
  return 1;
}

uint64_t sub_22F296AA0()
{
  return 0;
}

uint64_t sub_22F296AA8()
{
  return 0;
}

uint64_t sub_22F296AB0()
{
  return 0;
}

uint64_t sub_22F296AB8()
{
  return 1;
}

uint64_t sub_22F296AC0()
{
  return 1;
}

uint64_t sub_22F296AC8()
{
  return 0;
}

