uint64_t sub_22E8BCC84(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[2];
  void *v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0u;
  v21 = 0u;
  sub_22F05FD5C(a2, &v20);
  v4 = sub_22F2F34EC(a1, *((_QWORD *)&v20 + 1));
  if ((v4 & 1) != 0)
    return 1;
  v7 = sub_22F2F34EC(a1, v21);
  if ((v7 & 1) != 0)
    return 1;
  v8 = 0;
  v9 = 0;
  v25 = v27;
  v26 = 0x200000000;
  v24[0] = a2[2];
  v24[1] = *((_QWORD *)&v21 + 1);
  v5 = 1;
  do
  {
    v10 = v8;
    v11 = sub_22EFFED0C((unsigned __int8 *)v24[v9]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v23);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v22 = *(_QWORD *)v16;
          v23[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v22, v23)
            && v23[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v23[0] + 8);
          }
          if (!v17)
            goto LABEL_21;
          v18 = v26;
          if (v26 >= (unint64_t)HIDWORD(v26))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v26;
          }
          *((_QWORD *)v25 + v18) = v17 | 3;
          LODWORD(v26) = v26 + 1;
        }
      }
    }
    v8 = 1;
    v9 = 1;
  }
  while ((v10 & 1) == 0);
  sub_22F05FD5C(a2, v23);
  sub_22EFF605C(v23[3]);
  v5 = sub_22ED1767C(*(_QWORD *)a1, v19, v20, (uint64_t)&v25, v4 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, 0, 1, 0);
LABEL_21:
  if (v25 != v27)
    free(v25);
  return v5;
}

uint64_t sub_22E8BCED0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) != 0)
    {
      v6 = 0;
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v15 || *(_BYTE *)(v15 + 16) != 45)
      {
LABEL_4:
        v7 = *a1;
        sub_22EB4DECC(*a1, v6, 0, 3);
        v8 = sub_22F2F34EC(a1, v5);
        if ((v8 & 1) != 0)
          v12 = 1;
        else
          v12 = sub_22EBB98E0(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL), *(unsigned int *)(a2 + 28), v9, v10, v11);
        sub_22EB48E64(v7);
        return v12;
      }
      v16 = sub_22F114198(*(_QWORD *)(v15 + 24));
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v16 + 104) + 96), *(_QWORD *)(v16 + 104));
      if ((**(_QWORD **)(v16 + 128) & 0x400) != 0)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
        goto LABEL_4;
      }
    }
    v6 = 0;
    goto LABEL_4;
  }
  v13 = (uint64_t *)sub_22F2F7B28((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (v13)
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), v13, *(unsigned int *)(a2 + 28));
  return 1;
}

uint64_t sub_22E8BD00C(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[9];

  v30[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) != 0x2A00000000)
  {
    v14 = sub_22F2F34EC(a1, *v4);
    if ((v14 & 1) != 0)
      return 1;
    v16 = *(unsigned int **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
    if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *(unsigned __int8 *)v16 == 163)
      v17 = sub_22F3013A4(a1, v16, 1, 0);
    else
      v17 = sub_22F2F34EC(a1, v16);
    v18 = v17;
    if ((v17 & 1) != 0)
      return 1;
    if (a2[4] == 2)
    {
      v19 = sub_22F2F34EC(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
      if ((v19 & 1) != 0)
        return 1;
    }
    else
    {
      v19 = 0;
    }
    v20 = *a1;
    v21 = *(_DWORD *)(*a1 + 56);
    v22 = *(_QWORD *)(*a1 + 1296);
    v27 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    v23 = *a2;
    if ((v23 & 0x100000) != 0)
      v24 = *(_QWORD *)((char *)&a2[2 * ((v23 >> 18) & 1) + 2 + 2 * a2[4]] + (v23 >> 24));
    else
      v24 = 0;
    sub_22E51A8D0(&v28, *(_QWORD *)(v20 + 72));
    v25 = *a1;
    *(_DWORD *)(v25 + 56) = v28 & ~HIDWORD(v24) | HIDWORD(v24) & v24;
    *(_QWORD *)(v25 + 1296) = v24;
    v10 = sub_22E8C9D28(a1, a2[1] & 0x3F, a2[5], (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL), v18 & 0xFFFFFFFFFFFFFFFELL, (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
    *(_DWORD *)(v20 + 56) = v21;
    *(_QWORD *)(v20 + 1296) = v22;
    v26 = *(_QWORD *)(v20 + 80);
    *(_QWORD *)(v26 + 520) = v27;
    *(_DWORD *)(v26 + 528) = v27;
    return v10;
  }
  v5 = sub_22F2F34EC(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
  v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
  v28 = v30;
  v29 = 0x800000000;
  v10 = 1;
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v28, 0) & 1) == 0)
  {
    v11 = a2[7];
    v12 = *a1;
    if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
      v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v28, v29, v11);
    else
      v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v28, v29, v11, 0);
    v10 = v13;
  }
  if (v28 != v30)
    free(v28);
  return v10;
}

uint64_t sub_22E8BD2E8(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __n128 v22;
  uint64_t v23;
  void *v24[2];
  _QWORD v25[32];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 2) & 4) != 0 && (v4 = *((_QWORD *)a2 + 4)) != 0)
  {
    v5 = sub_22E8C1D88((uint64_t *)a1, v4, *((void **)a2 + 5), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *((_QWORD *)a2 + 2);
  v22.n128_u64[0] = v9;
  v24[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v22, v24)
    && v24[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v9 = *((_QWORD *)v24[0] + 1);
  }
  if (!v9)
    return 1;
  v10 = *a2;
  if ((v10 & 0x100000) != 0)
    v11 = (uint64_t *)&a2[4 * ((v10 >> 18) & 1) + 8];
  else
    v11 = (uint64_t *)(a2 + 4);
  v12 = *v11;
  if (*v11 == *((_QWORD *)a2 + 2))
  {
    v13 = *v11;
    v12 = v9;
  }
  else
  {
    v22.n128_u64[0] = *v11;
    v24[0] = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v22, v24)
      && v24[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
    {
      v12 = *((_QWORD *)v24[0] + 1);
    }
    if (!v12)
      return 1;
    v13 = *((_QWORD *)a2 + 2);
  }
  v14 = a2[1];
  v15 = *((_QWORD *)a2 + 3);
  v22.n128_u64[0] = *(_QWORD *)(v13 + 40);
  v22.n128_u32[2] = v14;
  v23 = v15;
  if (v22.n128_u64[0])
  {
    sub_22E8C64D0(a1, &v22, (__n128 *)v24);
    v22 = *(__n128 *)v24;
    v23 = v25[0];
    if (!v24[0])
      return 1;
  }
  v24[0] = v25;
  v24[1] = (void *)0x800000000;
  v26 = 0;
  v16 = *a2;
  if ((v16 & 0x80000) != 0 && (v17 = (uint64_t)&a2[4 * ((v16 >> 18) & 1) + 8 + 2 * ((v16 >> 20) & 1)], *(_DWORD *)v17))
  {
    v26 = *(_QWORD *)v17;
    v18 = v17 + 16 * ((v16 >> 19) & 1);
    v19 = v24;
    if ((sub_22E8C9A74(a1, v18, v18 + 32 * *(unsigned int *)(v17 + 12)) & 1) != 0)
    {
      v20 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = sub_22E8CA5A4(a1, v7, v8, v9, (uint64_t)&v22, v12, (uint64_t)v19);
LABEL_29:
  if (v24[0] != v25)
    free(v24[0]);
  return v20;
}

uint64_t sub_22E8BD554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[32];
  char *v59;
  uint64_t v60;
  _QWORD v61[12];

  v61[10] = *MEMORY[0x24BDAC8D0];
  v59 = (char *)v61;
  v60 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22F2F34EC(a1, v4);
  if ((v5 & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    v56 = v58;
    v57 = 0x400000000;
    v6 = *(_DWORD *)(a2 + 20);
    if ((unsigned __int16)v6 >> 1)
    {
      v7 = a2 + 32;
      v8 = *(_QWORD *)(a2 + 24) + 8;
      v9 = 24 * ((unsigned __int16)v6 >> 1);
      v10 = 1;
      do
      {
        v11 = *(_DWORD *)(v8 - 8);
        if (v11)
        {
          if (v11 == 1)
          {
            v18 = sub_22F2F34EC(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
            if ((v18 & 1) != 0)
              goto LABEL_32;
            v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
            v20 = *(_DWORD *)(v8 + 4);
            v49 = 1;
            v50 = v18 & 0xFFFFFFFFFFFFFFFELL;
            v51 = v20;
            v52 = 0;
            v21 = sub_22E84B46C((uint64_t)&v59, (unint64_t)&v49, 1);
            v22 = &v59[40 * v60];
            v23 = *(_QWORD *)(v21 + 32);
            v24 = *(_OWORD *)(v21 + 16);
            *(_OWORD *)v22 = *(_OWORD *)v21;
            *((_OWORD *)v22 + 1) = v24;
            *((_QWORD *)v22 + 4) = v23;
            LODWORD(v60) = v60 + 1;
            v25 = v57;
            if (v57 >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v57;
            }
            *((_QWORD *)v56 + v25) = v19;
          }
          else
          {
            v26 = sub_22F2F34EC(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
            v27 = v7;
            v28 = v26;
            if ((v26 & 1) != 0)
              goto LABEL_32;
            v29 = sub_22F2F34EC(a1, *(_QWORD *)(v27 + 8 * (*(_DWORD *)v8 + 2)));
            if ((v29 & 1) != 0)
              goto LABEL_32;
            v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
            v44 = 2;
            v31 = *(_QWORD *)(v8 + 4);
            v45 = v30;
            v46 = v29 & 0xFFFFFFFFFFFFFFFELL;
            v41 = v29 & 0xFFFFFFFFFFFFFFFELL;
            v47 = v31;
            v48 = 0;
            v32 = sub_22E84B46C((uint64_t)&v59, (unint64_t)&v44, 1);
            v33 = &v59[40 * v60];
            v34 = *(_QWORD *)(v32 + 32);
            v35 = *(_OWORD *)(v32 + 16);
            *(_OWORD *)v33 = *(_OWORD *)v32;
            *((_OWORD *)v33 + 1) = v35;
            *((_QWORD *)v33 + 4) = v34;
            LODWORD(v60) = v60 + 1;
            v36 = v57;
            if (v57 >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v36 = v57;
            }
            *((_QWORD *)v56 + v36) = v30;
            v37 = v57 + 1;
            LODWORD(v57) = v37;
            if (v37 >= HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v37 = v57;
            }
            *((_QWORD *)v56 + v37) = v41;
          }
          LODWORD(v57) = v57 + 1;
          v7 = a2 + 32;
        }
        else
        {
          v12 = *(_QWORD *)v8;
          if ((*(_QWORD *)v8 & 1) != 0)
          {
            v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v38 = *(_QWORD *)(v12 + 40);
            if ((v38 & 7) != 0)
              v13 = 0;
            else
              v13 = v38 & 0xFFFFFFFFFFFFFFF8;
          }
          v53 = 0;
          v54 = v13;
          v55 = *(_QWORD *)(v8 + 8);
          v14 = sub_22E84B46C((uint64_t)&v59, (unint64_t)&v53, 1);
          v15 = &v59[40 * v60];
          v16 = *(_QWORD *)(v14 + 32);
          v17 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v15 = *(_OWORD *)v14;
          *((_OWORD *)v15 + 1) = v17;
          *((_QWORD *)v15 + 4) = v16;
          LODWORD(v60) = v60 + 1;
          if (*(_QWORD *)v8 && (*(_QWORD *)v8 & 1) == 0)
          {
            v42 = *(_QWORD *)v8;
            v43 = 0;
            sub_22E793870((uint64_t *)(a1 + 8), &v42, &v43);
          }
        }
        v8 += 24;
        v9 -= 24;
      }
      while (v9);
      v6 = *(_DWORD *)(a2 + 20);
    }
    v39 = sub_22EC38374(*(_QWORD **)a1, (uint64_t *)&v59, *(_DWORD *)(a2 + 16), v6 & 1, v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v39 & 1) != 0)
      v10 = 1;
    else
      v10 = v39;
LABEL_32:
    if (v56 != v58)
      free(v56);
  }
  if (v59 != (char *)v61)
    free(v59);
  return v10;
}

uint64_t sub_22E8BD8F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22E8BD9C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  size_t v28;
  unsigned __int32 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned __int8 v131[24];
  char v132;
  _QWORD v133[3];
  uint64_t *v134;
  _QWORD v135[2];
  _QWORD *v136;
  char v137;
  int v138;
  unint64_t v139;
  void *v140;
  int64x2_t v141;
  _QWORD v142[228];
  void *v143;
  uint64_t v144;
  _QWORD v145[4];
  char *v146[2];
  _QWORD v147[46];

  v147[44] = *MEMORY[0x24BDAC8D0];
  v146[0] = (char *)v147;
  v146[1] = (char *)0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = sub_22F3C64D0(a2);
  sub_22F301878((uint64_t)v146, (v4 - v5) >> 4);
  v6 = (_QWORD *)sub_22F3C64D0(a2);
  v136 = v6;
  v7 = sub_22F3C650C(a2);
  if (v6 != (_QWORD *)v7)
  {
    v8 = (_QWORD *)v7;
    do
    {
      if (sub_22F3C6428(a2, v6))
      {
        v9 = v136;
        v10 = sub_22F3C64D0(a2);
        v11 = &v146[0][88 * (((uint64_t)v9 - v10) >> 4)];
        v135[0] = 0;
        v12 = *v136 & 0xFFFFFFFFFFFFFFF8;
        v135[0] = v12;
        v143 = a1;
        v144 = (uint64_t)v135;
        v145[0] = v11;
        v145[1] = &v136;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v13 = *(_QWORD *)(v12 + 56);
          v14 = v13 & 0xFFFFFFFFFFFFFFF8;
          if ((v13 & 4) != 0)
            v14 = *(_QWORD *)(v14 + 32);
          v140 = &v141.u64[1];
          v141.i64[0] = 0x200000000;
          v15 = *a1;
          v16 = sub_22EFBC5B4(v12);
          v138 = 7;
          v139 = v16;
          sub_22EE7377C(v15, (uint64_t)&v138, (uint64_t)&v140);
          sub_22E8CA618((uint64_t)&v143);
          *(_DWORD *)v11 = *(_DWORD *)(v14 + 8);
          if (v140 != &v141.u64[1])
            free(v140);
        }
        else
        {
          sub_22E8CA618((uint64_t)&v143);
        }
      }
      v6 = v136 + 2;
      v136 = v6;
    }
    while (v6 != v8);
  }
  v17 = sub_22F3090C8(*a1);
  v136 = (_QWORD *)*a1;
  v137 = 1;
  *(_QWORD *)(v17 + 1584) = sub_22F3C6624(a2);
  v18 = *(_QWORD *)(sub_22F3C6220(a2) + 56);
  v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (uint64_t *)v19[4];
  v20 = *v19;
  v130 = v17;
  if ((*v19 & 0xF) != 0)
  {
    v23 = 0;
    v24 = 0;
  }
  else
  {
    v21 = v19 + 1;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v22 == 26)
      v23 = v20;
    else
      v23 = 0;
    if (v22 == 26)
      v24 = v21;
    else
      v24 = 0;
  }
  v135[0] = v23;
  v135[1] = v24;
  v140 = v142;
  v141 = vdupq_n_s64(0x20uLL);
  v142[4] = 0;
  v143 = v145;
  v144 = 0x400000000;
  v133[2] = &v143;
  v134 = a1;
  v133[0] = &v134;
  v133[1] = v135;
  v25 = sub_22E8C2F98(a1, (uint64_t)&v140, v23, v24, 0, 0, (uint64_t)v133);
  v26 = 0;
  if (v25 >= 0x10)
  {
    v27 = *(_QWORD *)(*a1 + 88);
    v28 = v141.i64[0] - v141.i64[1];
    v29 = v141.i32[0] - v141.i32[2];
    if (v141.i32[0] == v141.i32[2])
      v29 = sub_22F11598C(v25);
    v26 = (unint64_t *)sub_22E3CD3D4(v27 + 2032, v29 + 8, 3);
    *v26 = v25;
    memcpy(v26 + 1, (char *)v140 + v141.i64[1], v28);
  }
  if (v143 != v145)
    free(v143);
  if (v140 != v142 && v140)
    MEMORY[0x2348A0E84]();
  if (v25 < 0x10)
  {
    v30 = 1;
    goto LABEL_138;
  }
  v31 = *(_QWORD *)(sub_22F3C6220(a2) + 56);
  if ((v31 & 4) != 0 && (v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v128 = sub_22F2F34EC(a1, v32) & 0xFFFFFFFFFFFFFFFELL;
  else
    v128 = 0;
  v33 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v33 > 3 || v33 == 2)
    goto LABEL_61;
  v35 = *(_QWORD *)(*a1 + 216);
  v36 = *(_WORD *)(v35 + 8) & 0x7F;
  if (v36 == 16 || v36 == 83)
  {
LABEL_62:
    v40 = 2;
    goto LABEL_63;
  }
  v37 = -40;
  if ((*(_WORD *)(v35 + 8) & 0x7Fu) <= 0x46)
  {
    if (v36 <= 0x18)
    {
      if (((1 << v36) & 0x1066) != 0)
        goto LABEL_58;
      if (v36 == 24)
      {
        v37 = -48;
        goto LABEL_58;
      }
    }
    if (v36 == 70)
    {
      v37 = -64;
      goto LABEL_58;
    }
    goto LABEL_53;
  }
  if (v36 == 71)
  {
    v37 = -56;
    goto LABEL_58;
  }
  if (v36 != 81)
  {
LABEL_53:
    if (v36 - 52 < 6)
    {
      v37 = -72;
    }
    else
    {
      v37 = -48;
      if (v36 - 33 < 5)
        v37 = -64;
    }
  }
LABEL_58:
  v38 = *(_QWORD *)(v35 + v37 + 16);
  v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
  if ((v38 & 4) != 0)
    v39 = (_QWORD *)*v39;
  if ((sub_22EFC7ADC((unint64_t)v39) & 1) == 0)
    goto LABEL_62;
LABEL_61:
  v40 = 0;
LABEL_63:
  v41 = (void *)sub_22F3C61E8(a2);
  v42 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(a2 + 16), (uint64_t)v26, v40, (*(_DWORD *)a2 >> 18) & 3);
  v140 = v41;
  sub_22F25E108(a1 + 1, &v140)[1] = v42;
  v43 = *a1;
  v44 = *(_QWORD *)(a2 + 16);
  v45 = sub_22F3C6220(a2);
  v46 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 16))(v45) >> 32;
  if (*(_BYTE *)(*v26 + 16) == 25)
    v47 = 0;
  else
    v47 = (unsigned __int16)(*(_QWORD *)(*v26 + 16) >> 38);
  v48 = sub_22F3C6220(a2);
  v49 = sub_22F3366E8(v43, (uint64_t)v42, v44, v26, v46, v26 + 3, v47, *(_DWORD *)(v48 + 80) >> 30, v128);
  v50 = v130;
  *(_QWORD *)(v130 + 1488) = v49;
  sub_22F3C6220(a2);
  v140 = (void *)sub_22F3C6220(a2);
  v129 = a1 + 1;
  sub_22F25E108(a1 + 1, &v140)[1] = v49;
  v51 = *a1;
  v131[0] = 0;
  v132 = 0;
  v127 = v49;
  sub_22EC52964(v51, v42, v49, v131);
  if (v132)
    v132 = 0;
  v52 = *a1;
  v53 = v49;
  v54 = v49 + 72;
  if (!v49)
    v54 = 0;
  v126 = *(_QWORD *)(v52 + 216);
  v55 = *(_QWORD *)(v52 + 3200);
  *(_QWORD *)(v52 + 3200) = 0;
  v122 = *(_QWORD *)(v52 + 10288);
  v123 = v55;
  v124 = *(_DWORD *)(v52 + 1944);
  v125 = *(_DWORD *)(v52 + 2192);
  *(_QWORD *)(v52 + 216) = v54;
  *(_DWORD *)(v52 + 1944) = *(_DWORD *)(v52 + 1904);
  *(_DWORD *)(v52 + 2192) = *(_DWORD *)(v52 + 1960);
  v56 = *(_QWORD *)(a2 + 16);
  v57 = (*(_DWORD *)a2 >> 18) & 3;
  v58 = *(_DWORD *)(a2 + 24);
  v59 = (*(_DWORD *)a2 >> 20) & 1;
  v60 = (*(_DWORD *)a2 >> 21) & 1;
  v61 = sub_22F3C66E8(a2);
  sub_22EC52B9C(v52, v130, v53, v56, v57, v58, v59, v60, v61);
  v62 = sub_22F3C64D0(a2);
  v63 = sub_22F3C650C(a2);
  if (v62 == v63)
  {
    *(_DWORD *)(v130 + 1508) = *(_DWORD *)(v130 + 1272);
    v64 = *a1;
    LODWORD(v135[0]) = 6;
    v140 = 0;
    LODWORD(v134) = 3;
    v143 = (void *)*(unsigned int *)(v64 + 1704);
    sub_22EB4DDB8(v64 + 3688, (int *)v135, (int *)&v143, (__int16 *)(v64 + 1693), (uint64_t *)&v140, (int *)&v134);
    v65 = *(unsigned int *)(v64 + 3696);
    v66 = v65 - 2;
    v67 = *(_QWORD *)(v64 + 3688);
    v68 = *(_DWORD *)(v67 + 576 * (v65 - 2));
    if (v68 == 5)
    {
      *(_BYTE *)(v67 + 576 * v65 - 4) = *(_BYTE *)(v67 + 576 * v66 + 572);
      v70 = 1;
      v69 = v126;
    }
    else
    {
      v69 = v126;
      if (v68 == 2)
      {
        *(_BYTE *)(v67 + 576 * v65 - 4) = 1;
        v70 = *(_BYTE *)(v67 + 576 * v66 + 573) != 0;
      }
      else
      {
        v70 = 0;
        *(_BYTE *)(v67 + 576 * v65 - 4) = 0;
      }
    }
    v71 = v67 + 576 * v65;
    *(_BYTE *)(v71 - 3) = v70;
    *(_WORD *)(v64 + 1693) = 0;
    if (*(_DWORD *)(v64 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v64 + 1776), (llvm::SmallPtrSetImplBase *)(v71 - 560));
      sub_22EAEAE08(v64 + 1840, (uint64_t *)(v71 - 496));
    }
  }
  else
  {
    v72 = v63;
    v73 = 0;
    do
    {
      v74 = *(_QWORD *)v62;
      if ((*(_QWORD *)v62 & 1) != 0)
        break;
      if ((v74 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v62 + 8), 1, 1, 0, (v74 >> 1) & 1);
      }
      else if (v74 >= 4)
      {
        v75 = v73;
        if (sub_22F3C6428(a2, (_QWORD *)v62))
        {
          v82 = sub_22F3C64D0(a2);
          v83 = &v146[0][88 * ((v62 - v82) >> 4)];
          v84 = *(_QWORD *)v62 & 0xFFFFFFFFFFFFFFF8;
          v140 = &v141.u64[1];
          v141.i64[0] = 0x400000000;
          v85 = *((unsigned int *)v83 + 4);
          if ((_DWORD)v85)
          {
            v87 = (_QWORD *)*((_QWORD *)v83 + 1);
            v121 = &v87[2 * v85];
            while ((*v87 & 1) == 0)
            {
              v88 = v87[1];
              if (v88 < 0x10)
                break;
              v89 = *(_QWORD *)(v84 + 40);
              v90 = (v89 & 7) != 0 ? 0 : v89 & 0xFFFFFFFFFFFFFFF8;
              v91 = sub_22EC5313C(*a1, *(_DWORD *)(v84 + 24), v88, *(_DWORD *)v83, v90, (*(_BYTE *)(v84 + 96) >> 5) & 3, *v87 & 0xFFFFFFFFFFFFFFFELL);
              if (!v91)
                break;
              v92 = v91;
              v93 = v141.u32[0];
              if (v141.u32[0] >= (unint64_t)v141.u32[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v93 = v141.u32[0];
              }
              *((_QWORD *)v140 + v93) = v92;
              ++v141.i32[0];
              sub_22F336D2C(*a1, v130, v92);
              v87 += 2;
              if (v87 == v121)
                goto LABEL_102;
            }
LABEL_127:
            if (v140 != &v141.u64[1])
              free(v140);
            *(_DWORD *)(v130 + 1508) = *(_DWORD *)(v130 + 1272);
            v112 = *a1;
            LODWORD(v135[0]) = 6;
            v140 = 0;
            LODWORD(v134) = 3;
            v143 = (void *)*(unsigned int *)(v112 + 1704);
            sub_22EB4DDB8(v112 + 3688, (int *)v135, (int *)&v143, (__int16 *)(v112 + 1693), (uint64_t *)&v140, (int *)&v134);
            v113 = *(unsigned int *)(v112 + 3696);
            v114 = v113 - 2;
            v115 = *(_QWORD *)(v112 + 3688);
            v116 = *(_DWORD *)(v115 + 576 * (v113 - 2));
            v69 = v126;
            if (v116 == 5)
            {
              *(_BYTE *)(v115 + 576 * v113 - 4) = *(_BYTE *)(v115 + 576 * v114 + 572);
              v117 = 1;
            }
            else if (v116 == 2)
            {
              *(_BYTE *)(v115 + 576 * v113 - 4) = 1;
              v117 = *(_BYTE *)(v115 + 576 * v114 + 573) != 0;
            }
            else
            {
              v117 = 0;
              *(_BYTE *)(v115 + 576 * v113 - 4) = 0;
            }
            v118 = v115 + 576 * v113;
            *(_BYTE *)(v118 - 3) = v117;
            *(_WORD *)(v112 + 1693) = 0;
            if (*(_DWORD *)(v112 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v112 + 1776), (llvm::SmallPtrSetImplBase *)(v118 - 560));
              sub_22EAEAE08(v112 + 1840, (uint64_t *)(v118 - 496));
            }
            goto LABEL_134;
          }
LABEL_102:
          if ((v75 & 1) != 0)
            goto LABEL_127;
          v143 = (void *)v84;
          v86 = *(_QWORD *)v140;
          sub_22F25E108(v129, &v143)[1] = v86;
          if (v140 != &v141.u64[1])
            free(v140);
          v73 = 0;
          v50 = v130;
        }
        else
        {
          v76 = *(_QWORD *)v62;
          if ((*(_QWORD *)v62 & 2) != 0)
            v77 = 1;
          else
            v77 = 2;
          if ((*(_QWORD *)v62 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v78 = 2;
          else
            v78 = v77;
          if (v76 < 4)
            v78 = 2;
          if ((v76 & 1) != 0)
            v79 = 0;
          else
            v79 = v78;
          v80 = *(_DWORD *)(v62 + 12);
          v81 = v76 & 0xFFFFFFFFFFFFFFF8;
          v143 = (void *)(v76 & 0xFFFFFFFFFFFFFFF8);
          v140 = 0;
          if (sub_22E793870(v129, &v143, &v140)
            && v140 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v81 = *((_QWORD *)v140 + 1);
          }
          if (v81 && (*(_BYTE *)(v81 + 28) & 0x80) == 0)
          {
            sub_22F32FC30(*a1, v81, *(_DWORD *)(v62 + 8), v79, v80);
            v73 = v75;
          }
          else
          {
            v73 = 1;
          }
        }
      }
      v62 += 16;
    }
    while (v62 != v72);
    *(_DWORD *)(v50 + 1508) = *(_DWORD *)(v50 + 1272);
    v94 = *a1;
    LODWORD(v135[0]) = 6;
    v140 = 0;
    LODWORD(v134) = 3;
    v143 = (void *)*(unsigned int *)(v94 + 1704);
    sub_22EB4DDB8(v94 + 3688, (int *)v135, (int *)&v143, (__int16 *)(v94 + 1693), (uint64_t *)&v140, (int *)&v134);
    v95 = *(unsigned int *)(v94 + 3696);
    v96 = v95 - 2;
    v97 = *(_QWORD *)(v94 + 3688);
    v98 = *(_DWORD *)(v97 + 576 * (v95 - 2));
    if (v98 == 5)
    {
      *(_BYTE *)(v97 + 576 * v95 - 4) = *(_BYTE *)(v97 + 576 * v96 + 572);
      v99 = 1;
      v69 = v126;
    }
    else
    {
      v69 = v126;
      if (v98 == 2)
      {
        *(_BYTE *)(v97 + 576 * v95 - 4) = 1;
        v99 = *(_BYTE *)(v97 + 576 * v96 + 573) != 0;
      }
      else
      {
        v99 = 0;
        *(_BYTE *)(v97 + 576 * v95 - 4) = 0;
      }
    }
    v100 = v97 + 576 * v95;
    *(_BYTE *)(v100 - 3) = v99;
    *(_WORD *)(v94 + 1693) = 0;
    if (!*(_DWORD *)(v94 + 1848))
    {
      if ((v73 & 1) == 0)
        goto LABEL_123;
      goto LABEL_134;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v94 + 1776), (llvm::SmallPtrSetImplBase *)(v100 - 560));
    sub_22EAEAE08(v94 + 1840, (uint64_t *)(v100 - 496));
    if ((v73 & 1) != 0)
    {
LABEL_134:
      v137 = 0;
      goto LABEL_135;
    }
  }
LABEL_123:
  sub_22F3C638C(a2);
  v106 = sub_22F2FC7D4(a1, *(__n128 **)(a2 + 8 * *(unsigned __int16 *)(a2 + 4) + 32), 0, v101, v102, v103, v104, v105);
  v137 = 0;
  if ((v106 & 1) != 0)
  {
LABEL_135:
    if (v69)
    {
      *(_QWORD *)(v52 + 216) = v69;
      *(_QWORD *)(v52 + 3200) = v123;
      *(_QWORD *)(v52 + 10288) = v122;
      *(_DWORD *)(v52 + 1944) = v124;
      *(_DWORD *)(v52 + 2192) = v125;
    }
    v119 = *(unsigned int *)(a2 + 16);
    v30 = 1;
    sub_22F336DD4(*a1, v119, 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v140, v130);
    v107 = v106 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v127, v107, 1);
    if (v69)
    {
      *(_QWORD *)(v52 + 216) = v69;
      *(_QWORD *)(v52 + 3200) = v123;
      *(_QWORD *)(v52 + 10288) = v122;
      *(_DWORD *)(v52 + 1944) = v124;
      *(_DWORD *)(v52 + 2192) = v125;
    }
    v108 = *a1;
    v109 = *(unsigned int *)(a2 + 16);
    sub_22F0D60E4(v107);
    sub_22EC54548(v108, v109, v110, (uint64_t)&v140);
    v30 = v111;
    sub_22F2F43D0((uint64_t)&v140);
  }
LABEL_138:
  sub_22F2F446C((uint64_t)&v136);
  sub_22F301A90(v146);
  return v30;
}

uint64_t sub_22E8BE6A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  void *v38[2];
  _BYTE v39[256];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F2F34EC(a1, *((_QWORD *)a2 + 2));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a2;
  if ((*a2 & 0x80000) != 0 && (v6 = *((_QWORD *)a2 + 6)) != 0)
  {
    v7 = sub_22E8C1D88((uint64_t *)a1, v6, *((void **)a2 + 7), 0, 0);
    if (!v7)
      return 1;
    v9 = v7;
    v10 = v8;
    v5 = *a2;
    if ((*a2 & 0x100000) != 0)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
    {
LABEL_6:
      v11 = a2[6 * ((v5 >> 19) & 1) + 14];
      goto LABEL_9;
    }
  }
  v11 = 0;
LABEL_9:
  v12 = *((_QWORD *)a2 + 3);
  v36.n128_u64[0] = v12;
  v38[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v36, v38)
    && v38[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v12 = *((_QWORD *)v38[0] + 1);
  }
  if (!v12)
    return 1;
  v13 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    v15 = *((_QWORD *)a2 + 8);
    v14 = *((_QWORD *)a2 + 3);
  }
  else
  {
    v14 = *((_QWORD *)a2 + 3);
    v15 = v14;
  }
  v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (v14 == (v15 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v16 = v12;
    goto LABEL_25;
  }
  v36.n128_u64[0] = v15 & 0xFFFFFFFFFFFFFFFCLL;
  v38[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v36, v38)
    && v38[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v16 = *((_QWORD *)v38[0] + 1);
  }
  if (!v16)
    return 1;
  v13 = *a2;
LABEL_25:
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  v40 = 0;
  if ((v13 & 0x100000) != 0)
  {
    v19 = &a2[6 * ((v13 >> 19) & 1)];
    v22 = v19[12];
    v20 = v19 + 12;
    v21 = v22;
    if (v22)
    {
      LODWORD(v40) = v21;
      HIDWORD(v40) = v20[1];
      v23 = (uint64_t)&v20[4 * ((v13 >> 20) & 1)];
      if ((sub_22E8C9A74(a1, v23, v23 + 32 * v20[3]) & 1) != 0)
        goto LABEL_32;
    }
  }
  v24 = *(_QWORD *)a1;
  sub_22F0D4E74(*((_QWORD *)a2 + 2));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v24 + 112), *(_DWORD **)(v24 + 72));
  v27 = *((_QWORD *)a2 + 4);
  v28 = a2[10];
  v36.n128_u64[0] = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
  v36.n128_u32[2] = v28;
  v37 = v27;
  if (!v36.n128_u64[0])
    goto LABEL_30;
  sub_22E8C64D0(a1, &v36, &v34);
  v36 = v34;
  v37 = v35;
  if (!v34.n128_u64[0])
  {
LABEL_32:
    v17 = 1;
  }
  else
  {
LABEL_30:
    v29 = *a2;
    if ((v29 & 0x100000) != 0)
    {
      v30 = v38;
      if (!a2[6 * ((v29 >> 19) & 1) + 12])
        v30 = 0;
    }
    else
    {
      v30 = 0;
    }
    v31 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v31)
    {
      v32 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8);
      v33 = 16 * v31;
      while (*(v32 - 1) != v12)
      {
        v32 += 2;
        v33 -= 16;
        if (!v33)
          goto LABEL_39;
      }
      v17 = *v32;
    }
    else
    {
LABEL_39:
      v17 = sub_22F301B04((uint64_t *)a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), v26, (v29 >> 18) & 1, v9, v10, v11, (__int128 *)&v36, v12, v16, (uint64_t)v30, 0);
    }
  }
  if (v38[0] != v39)
    free(v38[0]);
  return v17;
}

uint64_t sub_22E8BE9BC(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22F2F34EC(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22E8BEB48(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46[4];
  void *v47;
  uint64_t v48;
  _QWORD v49[34];

  v2 = a2;
  v49[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v46, 0, sizeof(v46));
  v47 = v49;
  v48 = 0x400000000;
  sub_22E8BB974((uint64_t)&v47, v4, v46);
  if ((_DWORD)v4)
  {
    v5 = 0;
    LOBYTE(v6) = 0;
    v7 = v2 + 32;
    v44 = v2 + 32;
    v45 = v4;
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 8 * v5);
      v9 = *(_QWORD *)(v8 + 40);
      v10 = (v9 & 7) != 0 ? 0 : v9 & 0xFFFFFFFFFFFFFFF8;
      v11 = (char *)v47 + 64 * v5;
      *(_QWORD *)v11 = v10;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(v8 + 24);
      v12 = *(_DWORD *)(v8 + 24);
      v13 = *(_QWORD *)(v8 + 56);
      if ((v13 & 4) == 0)
        break;
      v33 = v13 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v33 + 16))
        v34 = ***(_DWORD ***)(v33 + 24);
      else
        v34 = *(_DWORD *)(v8 + 64);
      if (v12 != v34)
      {
        v14 = *(uint64_t **)(v33 + 32);
LABEL_9:
        v15 = sub_22F2F7B28(a1, v14);
        v16 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(v8 + 48));
        v17 = sub_22EE7D030((uint64_t)*a1, v16, (uint64_t)v15);
        *((_QWORD *)v47 + 8 * v5 + 2) = v17;
      }
LABEL_10:
      v18 = v2;
      v19 = v7 + 8 * *(unsigned int *)(v2 + 28);
      v20 = (3 * v5);
      v21 = (v20 + 1);
      v22 = *(_QWORD *)(v19 + 8 * v21);
      v43 = (v20 + 2);
      v23 = *(_QWORD *)(v19 + 8 * v43);
      v24 = sub_22F2F34EC(a1, *(_QWORD *)(v19 + 8 * v20));
      v25 = sub_22F2F34EC(a1, v22);
      v26 = sub_22F2F34EC(a1, v23);
      if ((v6 & 1) != 0)
        goto LABEL_21;
      v27 = *(_QWORD *)(v8 + 56);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)(v28 + 32);
      if (v28)
      {
        if (*((_QWORD *)v47 + 8 * v5 + 2) < 0x10uLL || (v24 & 1) != 0)
          goto LABEL_21;
LABEL_20:
        if (((v25 | v26) & 1) != 0)
          goto LABEL_21;
        LOBYTE(v6) = 0;
        v30 = v47;
        v31 = (char *)v47 + 64 * v5;
        *((_QWORD *)v31 + 3) = v24 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v31 + 4) = v25 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v31 + 5) = v26 & 0xFFFFFFFFFFFFFFFELL;
        v7 = v44;
        v32 = *(_DWORD *)(v44
                        + 8 * *(unsigned int *)(v18 + 28)
                        + 8 * (3 * *(_DWORD *)(v18 + 28))
                        + 4 * v20);
        v2 = v18;
        *((_DWORD *)v31 + 12) = v32;
        *((_DWORD *)v31 + 13) = *(_DWORD *)(v44
                                          + 8 * *(unsigned int *)(v18 + 28)
                                          + 8 * (3 * *(_DWORD *)(v18 + 28))
                                          + 4 * v21);
        *((_DWORD *)v31 + 14) = *(_DWORD *)(v44
                                          + 8 * *(unsigned int *)(v18 + 28)
                                          + 8 * (3 * *(_DWORD *)(v18 + 28))
                                          + 4 * v43);
        ++v5;
        v4 = v45;
        if (v5 == v45)
          goto LABEL_31;
      }
      else
      {
        if ((v24 & 1) == 0)
          goto LABEL_20;
LABEL_21:
        ++v5;
        v6 = 1;
        v7 = v44;
        v2 = v18;
        if (v5 == v45)
          goto LABEL_35;
      }
    }
    if (v12 == *(_DWORD *)(v8 + 64))
      goto LABEL_10;
    v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  v30 = v47;
LABEL_31:
  v35 = sub_22EB2C3A8(*a1, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v30, v48);
  v6 = v35;
  if (v35 >= 2 && (_DWORD)v4)
  {
    v36 = (uint64_t *)(a1 + 1);
    v37 = (uint64_t *)(v2 + 32);
    v38 = (uint64_t *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v40 = *v37++;
      v39 = v40;
      v41 = *v38++;
      *(_QWORD *)&v46[0] = v39;
      sub_22F25E108(v36, v46)[1] = v41;
      --v4;
    }
    while (v4);
  }
LABEL_35:
  if (v47 != v49)
    free(v47);
  return v6;
}

uint64_t sub_22E8BEE70(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34;
  uint64_t v35;
  _QWORD v36[10];

  v36[8] = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v34 = v36;
  v35 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22E8C47DC(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v34, &v30) & 1) != 0)
    goto LABEL_7;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v18 = sub_22F2F34EC(a1, v10);
      if ((v18 & 1) != 0)
        goto LABEL_7;
      v31 = v33;
      v32 = 0x1000000000;
      sub_22F3C78D4(a2, (uint64_t)&v31);
      v20 = (uint64_t *)(a2 + 16);
      if ((*(_BYTE *)(a2 + 27) & 1) != 0)
      {
        v21 = *v20;
        v20 = (uint64_t *)(*v20 + 40);
      }
      else
      {
        v21 = 0;
      }
      v29 = sub_22EC2DA20(*a1, v18 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8), 0, *v20, v21, *(_DWORD *)(a2 + 32), v19, (int *)v31, v32, *(unsigned int *)(a2 + 36), (uint64_t)v34, v35, 0);
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)(a2 + 40);
      v13 = sub_22F2F7B28((_QWORD **)a1, v9);
      if (!v13)
        goto LABEL_7;
      v14 = (uint64_t *)v13;
      v31 = v33;
      v32 = 0x1000000000;
      sub_22F3C78D4(a2, (uint64_t)&v31);
      v16 = (uint64_t *)(a2 + 16);
      if ((*(_BYTE *)(a2 + 27) & 1) != 0)
      {
        v17 = *v16;
        v16 = (uint64_t *)(*v16 + 40);
      }
      else
      {
        v17 = 0;
      }
      v29 = sub_22EC2F730((_QWORD *)*a1, v14, *v14, 0, *v16, v17, *(_DWORD *)(a2 + 32), v15, (int *)v31, v32, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v34, v35, 0, 0);
    }
    v7 = v29;
    v28 = v31;
    if (v31 != v33)
LABEL_33:
      free(v28);
  }
  else
  {
    if ((v5 & 0x1000000) == 0 || (v6 = (unint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
    {
LABEL_7:
      v7 = 1;
      goto LABEL_8;
    }
    v31 = v33;
    v32 = 0x1000000000;
    sub_22F3C78D4(a2, (uint64_t)&v31);
    v11 = *(_DWORD *)(a2 + 24);
    if ((v11 & 0xFE0000) == 0x20000)
      v12 = *(_DWORD *)(a2 + 28);
    else
      v12 = 0;
    v22 = (uint64_t *)(a2 + 16);
    if ((v11 & 0x1000000) != 0)
      v22 = (uint64_t *)(*v6 + 40);
    v23 = *v22;
    v24 = (int *)v31;
    v25 = v32;
    v26 = sub_22F3C7A10(a2);
    if ((v11 & 0x1000000) != 0)
      v27 = *v6;
    else
      v27 = 0;
    v7 = sub_22F302010((_QWORD **)a1, v12, v23, v24, v25, v26, v27, *(unsigned int *)(a2 + 32), (unsigned __int8 **)v34, v35, *(_DWORD *)(a2 + 36));
    v28 = v31;
    if (v31 != v33)
      goto LABEL_33;
  }
LABEL_8:
  if (v34 != v36)
    free(v34);
  return v7;
}

uint64_t sub_22E8BF194(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[13];

  v27[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F2F7B28((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v25 = v27;
  v26 = 0x400000000;
  v6 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (unint64_t *)(a2 + 48);
    while (1)
    {
      v23 = 1;
      v22 = *(v8 - 1);
      v9 = *v8;
      v10 = *v8 & 3;
      if ((v10 - 1) >= 2)
      {
        if ((_DWORD)v10 == 3)
          goto LABEL_11;
        v17 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 40 + 16 * *(unsigned int *)(a2 + 32) + 8 * (v9 >> 2)));
        if ((v17 & 1) != 0)
        {
          v20 = 1;
          goto LABEL_18;
        }
        v23 = 1;
        v24 = v17 & 0xFFFFFFFFFFFFFFFELL;
LABEL_9:
        v14 = sub_22E4EF088((uint64_t)&v25, (unint64_t)&v22, 1);
        v15 = (char *)v25 + 24 * v26;
        v16 = *(_OWORD *)v14;
        *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
        *(_OWORD *)v15 = v16;
        v7 = v26 + 1;
        LODWORD(v26) = v26 + 1;
        goto LABEL_11;
      }
      v23 = 0;
      v11 = v9 & 3;
      v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      if (v11 == 1)
      {
        v13 = *(_QWORD *)(v12 + 40);
        if ((v13 & 7) != 0)
          goto LABEL_11;
        v12 = v13 & 0xFFFFFFFFFFFFFFF8;
      }
      v24 = v12;
      if (v12)
        goto LABEL_9;
LABEL_11:
      v8 += 2;
      if (!--v6)
      {
        v18 = (unsigned int *)v25;
        v19 = v7;
        goto LABEL_17;
      }
    }
  }
  v19 = 0;
  v18 = (unsigned int *)v27;
LABEL_17:
  v20 = sub_22EB49A78(*a1, *(_DWORD *)(a2 + 16), v5, v18, v19, *(_DWORD *)(a2 + 20));
LABEL_18:
  if (v25 != v27)
    free(v25);
  return v20;
}

uint64_t sub_22E8BF364(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22E8C1D88(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22E8C9A74((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22E8BF730(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  void **v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void *v34[2];
  _BYTE v35[256];
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22F2F34EC(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22F2FAD70(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22E8C1D88((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v37 = 0;
  v38 = v40;
  v39 = 0x800000000;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = v17;
  v45 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v47 = 0;
  v48 = 0;
  v46 = v18;
  v49 = 0;
  v50 = 257;
  v51 = 0;
  sub_22EC56024((uint64_t)&v37);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v37) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      v33 = v19;
      v34[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v33, v34)
        && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v34[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v42 = v19;
    }
    v34[0] = v35;
    v34[1] = (void *)0x800000000;
    v36 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) != 0)
    {
      v21 = *a2;
      v22 = a2[1];
      if (v21 == 211)
        v23 = a2 + 16;
      else
        v23 = a2 + 20;
      v24 = &v23[2 * v22];
      if (*v24)
      {
        v36 = *(_QWORD *)v24;
        if ((sub_22E8C9A74(a1, (uint64_t)&v24[4 * ((v20 >> 18) & 1)], (uint64_t)&v24[8 * v23[2 * v22 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
        {
          v14 = 1;
          goto LABEL_33;
        }
        v27 = v6 & 0xFFFFFFFFFFFFFFFELL;
        v28 = a2[18];
        v29 = (*a2 >> 19) & 1;
        if ((*a2 & 0x40000) == 0)
        {
          v26 = 0;
          goto LABEL_54;
        }
        v21 = *a2;
        v22 = a2[1];
      }
      else
      {
        v27 = v6 & 0xFFFFFFFFFFFFFFFELL;
        v28 = a2[18];
        v29 = (v20 >> 19) & 1;
      }
      v30 = a2 + 16;
      if (v21 != 211)
        v30 = a2 + 20;
      v31 = v30[2 * v22] == 0;
      v26 = v34;
      if (v31)
        v26 = 0;
      goto LABEL_54;
    }
    v26 = 0;
    v27 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v28 = a2[18];
    v29 = (v20 >> 19) & 1;
LABEL_54:
    v14 = sub_22F302138((uint64_t *)a1, v27, v5, v28, v29, v10, v11, v15, 0, (uint64_t)&v37, (uint64_t)v26);
LABEL_33:
    if (v34[0] != v35)
      free(v34[0]);
    goto LABEL_35;
  }
LABEL_19:
  v14 = 1;
LABEL_35:
  if (BYTE1(v50))
  {
    if ((_DWORD)v37 == 5)
    {
      sub_22EC64D18(v44, (uint64_t)&v37);
    }
    else if (v42 && (*(_DWORD *)(v44[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v44, (uint64_t)&v37);
    }
  }
  if (v41)
  {
    v32 = sub_22EC6CBD0(v41);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v38 != v40)
    free(v38);
  return v14;
}

uint64_t sub_22E8BFAF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = v5 != 0;
  v7 = v5 != 0;
  LODWORD(v8) = v5 - 1;
  if (v7)
    v8 = v8;
  else
    v8 = 0;
  return sub_22EE739C0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), v8 | (v6 << 32));
}

uint64_t sub_22E8BFB4C(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22F2F34EC(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22E8BFBC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[32];
  void *v41;
  __int128 v42;
  _BYTE v43[24];
  void *v44[2];
  _BYTE v45[32];
  uint64_t *v46;
  uint64_t v47;
  _QWORD v48[6];

  v48[4] = *MEMORY[0x24BDAC8D0];
  v46 = v48;
  v47 = 0x400000000;
  v44[0] = v45;
  v44[1] = (void *)0x400000000;
  v41 = v43;
  v42 = xmmword_22F44E350;
  v43[16] = 0;
  v4 = *a1;
  v38 = 0;
  v36 = 3;
  v37 = 0;
  v35 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v37, (int *)&v35, (__int16 *)(v4 + 1693), (uint64_t *)&v38, &v36);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v33 = *(_QWORD *)(v16 + 10288);
  v34 = v19;
  v31 = *(_DWORD *)(v16 + 2192);
  v32 = *(_DWORD *)(v16 + 1944);
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22E8C36C8(a1, *(unsigned int *)(a2 + 4), a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v44, (uint64_t)&v46, (uint64_t)&v41) & 1) != 0)
  {
    v20 = 1;
    if (!v18)
      goto LABEL_21;
LABEL_20:
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v34;
    *(_QWORD *)(v16 + 10288) = v33;
    *(_DWORD *)(v16 + 1944) = v32;
    *(_DWORD *)(v16 + 2192) = v31;
    goto LABEL_21;
  }
  if ((_DWORD)v47)
  {
    v21 = v46;
    v22 = 8 * v47;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v17 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v38 = v40;
  v39 = 0x400000000;
  if (sub_22E8CAA7C(a1, (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16)), *(unsigned int *)(a2 + 20), (uint64_t)&v38))
  {
    v20 = 1;
  }
  else
  {
    v25 = (char *)v38;
    v26 = v39;
    if ((_DWORD)v39)
    {
      v27 = 8 * v39;
      v28 = (char *)v38;
      do
      {
        if ((**(_DWORD **)v28 - 3) >= 0xFFFFFFFE)
        {
          v29 = *(_QWORD *)(*(_QWORD *)v28 + 24);
          if (v29 >= 8 && (*(_QWORD *)(*(_QWORD *)v28 + 24) & 4) == 0)
            *(_QWORD *)(*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v17 & 0xFFFFFFFFFFFFFFFBLL;
        }
        v28 += 8;
        v27 -= 8;
      }
      while (v27);
    }
    v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v46, v47, v25, v26, *(_DWORD *)(a2 + 32));
  }
  if (v38 != v40)
    free(v38);
  if (v18)
    goto LABEL_20;
LABEL_21:
  sub_22EB48E64(v4);
  if (v41 != v43)
    free(v41);
  if (v44[0] != v45)
    free(v44[0]);
  if (v46 != v48)
    free(v46);
  return v20;
}

uint64_t sub_22E8BFF78(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v58[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22E8C2534(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22F2FB13C(a1, a1, v2 + 40, (uint64_t)a1, v48, (uint64_t)&v59, 1u) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22E8C0468(_QWORD **a1, _DWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t *v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  unsigned __int32 v25;
  _QWORD *v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  size_t v40;
  unsigned __int32 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int64x2_t v52;
  _DWORD *v53;
  uint64_t v54[2];
  void *v55[2];
  _BYTE v56[32];
  _BYTE *v57;
  int64x2_t v58;
  _BYTE v59[32];
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD v63[6];

  v63[4] = *MEMORY[0x24BDAC8D0];
  v4 = v63;
  v61 = v63;
  v62 = 0x400000000;
  v5 = a2[1];
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = a2 + 6;
    v52 = vdupq_n_s64(0x20uLL);
    v53 = a2 + 6;
    while (1)
    {
      v8 = *(unint64_t **)&v7[2 * v6];
      v9 = (int *)(v8 + 1);
      v10 = *v8;
      if ((*v8 & 0xF) != 0 || !v10 || *(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      {
        v57 = v59;
        v58 = vdupq_n_s64(0x20uLL);
        v60 = 0;
        v18 = sub_22F11598C(v10);
        if (v58.i64[0] < (unint64_t)v18)
          sub_22EEB52C0((uint64_t *)&v57, v18);
        v19 = sub_22F2F7C74(a1, (uint64_t)&v57, v10, (unint64_t)v9);
        if (v19 < 0x10)
        {
          v20 = 1;
LABEL_38:
          if (v57 != v59 && v57)
            MEMORY[0x2348A0E84]();
          goto LABEL_52;
        }
        v21 = v19;
        if (v19 == *v8)
        {
          v22 = v62;
          if (v62 >= (unint64_t)HIDWORD(v62))
            goto LABEL_33;
        }
        else
        {
          v23 = (*a1)[11];
          v24 = v58.i64[0] - v58.i64[1];
          v25 = v58.i32[0] - v58.i32[2];
          if (v58.i32[0] == v58.i32[2])
            v25 = sub_22F11598C(v21);
          v8 = (unint64_t *)sub_22E3CD3D4(v23 + 2032, v25 + 8, 3);
          *v8 = v21;
          memcpy(v8 + 1, &v57[v58.i64[1]], v24);
          v22 = v62;
          v7 = v53;
          if (v62 >= (unint64_t)HIDWORD(v62))
          {
LABEL_33:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v22 = v62;
          }
        }
        v61[v22] = (uint64_t)v8;
        LODWORD(v62) = v62 + 1;
        v20 = 4;
        goto LABEL_38;
      }
      v11 = *(_QWORD *)(v10 + 32);
      v12 = v11 >= 0x10 && (*(_QWORD *)(v10 + 32) & 0xFLL) == 0;
      v50 = v5;
      v51 = v4;
      if (v12)
        v33 = *(_QWORD *)((char *)&unk_22F463868
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v33 = 1;
      v13 = ((unint64_t)v9 + v33 + 3) & -v33;
      v54[0] = *(_QWORD *)(v10 + 32);
      v54[1] = v13;
      v55[0] = v56;
      v55[1] = (void *)0x200000000;
      sub_22EE73804((uint64_t)*a1, v11, v13, (uint64_t)v55);
      v48 = *(_DWORD *)(v10 + 20);
      LODWORD(v14) = v48 - 1;
      if (v48)
        v14 = v14;
      else
        v14 = 0;
      v49 = v14;
      v15 = v11;
      for (i = v11; ; i = sub_22F115B7C(i))
      {
        while (1)
        {
          if ((i & 0xF) != 0)
            goto LABEL_26;
          v17 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v17 <= 0x39)
            break;
LABEL_21:
          if (sub_22F115668(i))
            v15 = i;
          i = sub_22F115B7C(i);
          if (!i)
            goto LABEL_42;
        }
        if (v17 == 24)
          goto LABEL_41;
        if (v17 == 26)
          break;
        if (((1 << v17) & 0x20000000200003CLL) == 0)
          goto LABEL_21;
LABEL_26:
        ;
      }
      if ((*(_BYTE *)(i + 23) & 0x10) == 0)
        goto LABEL_26;
LABEL_41:
      v15 = i;
LABEL_42:
      sub_22F115668(v15);
      sub_22F1167E8(v54);
      v26 = *a1;
      v27 = *((_DWORD *)*a1 + 2998);
      *((_DWORD *)*a1 + 2998) = -1;
      v57 = v59;
      v58 = v52;
      v60 = 0;
      v28 = sub_22F11598C(*v8);
      if (v58.i64[0] < (unint64_t)v28)
        sub_22EEB52C0((uint64_t *)&v57, v28);
      v29 = sub_22F2F7C74(a1, (uint64_t)&v57, v11, v13);
      if (v29 < 0x10)
      {
LABEL_45:
        v20 = 1;
        goto LABEL_46;
      }
      v30 = v29;
      v31 = v11;
      while (2)
      {
        while (2)
        {
          if ((v31 & 0xF) != 0)
            goto LABEL_66;
          v32 = *(unsigned __int8 *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v32 > 0x39)
          {
LABEL_61:
            if (sub_22F115668(v31))
              v11 = v31;
            v31 = sub_22F115B7C(v31);
            if (!v31)
              goto LABEL_68;
            continue;
          }
          break;
        }
        if (v32 == 24)
          break;
        if (v32 != 26)
        {
          if (((1 << v32) & 0x20000000200003CLL) != 0)
            goto LABEL_66;
          goto LABEL_61;
        }
        if ((*(_BYTE *)(v31 + 23) & 0x10) == 0)
        {
LABEL_66:
          v31 = sub_22F115B7C(v31);
          continue;
        }
        break;
      }
      v11 = v31;
LABEL_68:
      v34 = sub_22F115668(v11);
      v35 = sub_22F1167E8(v54);
      v36 = sub_22F34AE9C(*a1, v30, v34 | ((unint64_t)v35 << 32), *v9, v49 | ((unint64_t)(v48 != 0) << 32));
      if (v36 < 0x10)
        goto LABEL_45;
      v37 = v36;
      sub_22EEB5360((uint64_t)&v57, v36, 4uLL, 4);
      *v38 = *v9;
      v39 = (*a1)[11];
      v40 = v58.i64[0] - v58.i64[1];
      v41 = v58.i32[0] - v58.i32[2];
      if (v58.i32[0] == v58.i32[2])
        v41 = sub_22F11598C(v37);
      v42 = (_QWORD *)sub_22E3CD3D4(v39 + 2032, v41 + 8, 3);
      *v42 = v37;
      memcpy(v42 + 1, &v57[v58.i64[1]], v40);
      v43 = v62;
      if (v62 >= (unint64_t)HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v43 = v62;
      }
      v61[v43] = (uint64_t)v42;
      LODWORD(v62) = v62 + 1;
      v20 = 4;
LABEL_46:
      v7 = v53;
      if (v57 != v59 && v57)
        MEMORY[0x2348A0E84]();
      *((_DWORD *)v26 + 2998) = v27;
      if (v55[0] != v56)
        free(v55[0]);
      v5 = v50;
      v4 = v51;
LABEL_52:
      if (v20 != 4)
      {
        v46 = 1;
        goto LABEL_76;
      }
      if (++v6 == v5)
      {
        v44 = v61;
        v45 = v62;
        goto LABEL_75;
      }
    }
  }
  v45 = 0;
  v44 = v63;
LABEL_75:
  v46 = sub_22EBC6244((uint64_t)*a1, (*a2 >> 18), a2[4], v44, v45, a2[5]);
LABEL_76:
  if (v61 != v4)
    free(v61);
  return v46;
}

uint64_t sub_22E8C0AB8(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  uint64_t v6;

  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned int **)(a2 + 16);
  if (v4 == 0x100000 && *(unsigned __int8 *)v5 == 163)
  {
    v6 = sub_22F3013A4(a1, v5, 1, 0);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22F2F34EC(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 0x1F, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22E8C0B3C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21[24];
  unint64_t v22;

  v8 = sub_22F2F7C74(a1, a2);
  v9 = 0;
  v22 = v8;
  if (v8 >= 0x10)
  {
    v11 = v8;
    v12 = *a4;
    v13 = sub_22F2FAD70((uint64_t)a1, *(_QWORD *)(a3 + 40));
    if (v13 < 0x10)
      return 0;
    v14 = v13;
    v15 = *(_DWORD *)(a3 + 16) >> 19;
    v16 = v15 - 33;
    if ((v15 - 33) <= 3)
    {
      sub_22F114E70(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
      if (!v17)
      {
        sub_22E8FCA40(*a1, *(_DWORD *)(*a4 + 16), 0xFE7u, 0, (uint64_t)v21);
        v20 = (0x3010200u >> (8 * v16));
        v19 = sub_22F2F3884((uint64_t)v21, &v20);
        sub_22E8901B8(v19, (uint64_t *)&v22);
        sub_22E903BEC(v21);
        return 0;
      }
      v15 = *(_DWORD *)(a3 + 16) >> 19;
    }
    v9 = sub_22F369798((*a1)[11], v15, v11, v14);
    sub_22EEB5360(a2, v9, 8uLL, 8);
    *v18 = v12;
  }
  return v9;
}

uint64_t sub_22E8C0CCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = *(void **)(a4 + 8);
  if (v8 && (v9 = *(_QWORD *)(a3 + 32)) != 0)
  {
    result = sub_22E8C1D88(a1, v9, v8, 0, 0);
    if (!result)
      return result;
    v12 = result;
    v13 = v11;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  return sub_22E8C2CCC(a1, a2, a3, a4, v12, v13);
}

unint64_t sub_22E8C0D54(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD **v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  size_t v30;
  unsigned __int32 v31;
  _DWORD *v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  size_t v39;
  unsigned __int32 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD **v64;
  uint64_t v65[2];
  void **v66;
  int64x2_t v67;
  _BYTE v68[32];
  uint64_t v69;
  void *v70[2];
  _BYTE v71[32];
  _QWORD *v72;
  uint64_t v73;
  _QWORD v74[6];

  v7 = a1;
  v74[4] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22F2F7C74(a1, a2);
  v9 = 0;
  if (v8 < 0x10)
    return v9;
  v61 = a2;
  v62 = v8;
  v10 = v74;
  v72 = v74;
  v73 = 0x400000000;
  v63 = (*(_DWORD *)(a3 + 16) >> 19) & 0x7F;
  v64 = v7;
  if (!(_DWORD)v63)
    goto LABEL_59;
  v11 = 0;
  v60 = vdupq_n_s64(0x20uLL);
  do
  {
    v12 = *(unint64_t **)&a4[2 * v11 + 6];
    v14 = v12 + 1;
    v13 = *v12;
    if ((*v12 & 0xF) != 0 || !v13 || (v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v15 + 16) != 36))
    {
      v66 = (void **)v68;
      v67 = vdupq_n_s64(0x20uLL);
      v69 = 0;
      v23 = sub_22F11598C(v13);
      if (v67.i64[0] < (unint64_t)v23)
        sub_22EEB52C0((uint64_t *)&v66, v23);
      v24 = sub_22F2F7C74(v7, &v66);
      if (v24 < 0x10)
      {
        v25 = 1;
LABEL_39:
        if (v66 != (void **)v68 && v66)
          MEMORY[0x2348A0E84]();
        goto LABEL_57;
      }
      v26 = v24;
      if (v24 == v13)
      {
        v27 = v73;
        v28 = 4;
        v25 = 4;
        if (v73 < (unint64_t)HIDWORD(v73))
        {
LABEL_38:
          v72[v27] = v12;
          LODWORD(v73) = v73 + 1;
          goto LABEL_39;
        }
      }
      else
      {
        v29 = (*v7)[11];
        v30 = v67.i64[0] - v67.i64[1];
        v31 = v67.i32[0] - v67.i32[2];
        if (v67.i32[0] == v67.i32[2])
          v31 = sub_22F11598C(v26);
        v12 = (unint64_t *)sub_22E3CD3D4(v29 + 2032, v31 + 8, 3);
        *v12 = v26;
        memcpy(v12 + 1, (char *)v66 + v67.i64[1], v30);
        v28 = 0;
        v25 = 0;
        v27 = v73;
        v7 = v64;
        if (v73 < (unint64_t)HIDWORD(v73))
          goto LABEL_38;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v73;
      v25 = v28;
      goto LABEL_38;
    }
    v70[0] = v71;
    v70[1] = (void *)0x200000000;
    v16 = *(_QWORD *)(v15 + 32);
    v66 = v70;
    v67.i8[0] = 0;
    v67.i32[1] = -1;
    sub_22EE72E1C((uint64_t)&v66, v16);
    v17 = *(_QWORD *)(v13 + 32);
    v18 = v17 >= 0x10 && (*(_QWORD *)(v13 + 32) & 0xFLL) == 0;
    v59 = v10;
    if (v18)
      v43 = *(_QWORD *)((char *)&unk_22F463868
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v43 = 1;
    v19 = ((unint64_t)v14 + v43 + 3) & -v43;
    v57 = *(_DWORD *)(v15 + 20);
    LODWORD(v43) = v57 - 1;
    if (v57)
      v43 = v43;
    else
      v43 = 0;
    v58 = v43;
    v65[0] = v17;
    v65[1] = v19;
    v20 = v17;
    for (i = v17; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_27;
        v22 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v22 <= 0x39)
          break;
LABEL_22:
        if (sub_22F115668(i))
          v20 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v22 == 24)
        goto LABEL_42;
      if (v22 == 26)
        break;
      if (((1 << v22) & 0x20000000200003CLL) == 0)
        goto LABEL_22;
LABEL_27:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_27;
LABEL_42:
    v20 = i;
LABEL_43:
    sub_22F115668(v20);
    sub_22F1167E8(v65);
    v32 = *v64;
    v33 = *((_DWORD *)*v64 + 2998);
    *((_DWORD *)*v64 + 2998) = -1;
    v66 = (void **)v68;
    v67 = v60;
    v69 = 0;
    v34 = sub_22F11598C(v17);
    if (v67.i64[0] < (unint64_t)v34)
      sub_22EEB52C0((uint64_t *)&v66, v34);
    v7 = v64;
    v35 = sub_22F2F7C74(v64, &v66);
    v10 = v59;
    if (v35 >= 0x10)
    {
      v36 = sub_22EF663B4((*v64)[11], v35, v58 | ((unint64_t)(v57 != 0) << 32));
      sub_22EEB5360(v61, v36, 4uLL, 4);
      *v37 = *v14;
      v38 = (*v64)[11];
      v39 = v67.i64[0] - v67.i64[1];
      v40 = v67.i32[0] - v67.i32[2];
      if (v67.i32[0] == v67.i32[2])
        v40 = sub_22F11598C(v36);
      v41 = (_QWORD *)sub_22E3CD3D4(v38 + 2032, v40 + 8, 3);
      *v41 = v36;
      memcpy(v41 + 1, (char *)v66 + v67.i64[1], v39);
      v42 = v73;
      if (v73 >= (unint64_t)HIDWORD(v73))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v42 = v73;
      }
      v7 = v64;
      v72[v42] = v41;
      LODWORD(v73) = v73 + 1;
      v25 = 4;
    }
    else
    {
      v25 = 1;
    }
    if (v66 != (void **)v68 && v66)
      MEMORY[0x2348A0E84]();
    v32[2998] = v33;
    if (v70[0] != v71)
      free(v70[0]);
LABEL_57:
    if ((v25 | 4) != 4)
      goto LABEL_73;
    ++v11;
  }
  while (v11 != v63);
LABEL_59:
  v44 = a3;
  for (j = a3; ; j = sub_22F115B7C(j))
  {
    while (1)
    {
      if ((j & 0xF) != 0)
        goto LABEL_70;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 <= 0x39)
        break;
LABEL_65:
      if (sub_22F115668(j))
        v44 = j;
      j = sub_22F115B7C(j);
      if (!j)
        goto LABEL_72;
    }
    if (v46 == 24)
      goto LABEL_71;
    if (v46 == 26)
      break;
    if (((1 << v46) & 0x20000000200003CLL) == 0)
      goto LABEL_65;
LABEL_70:
    ;
  }
  if ((*(_BYTE *)(j + 23) & 0x10) == 0)
    goto LABEL_70;
LABEL_71:
  v44 = j;
LABEL_72:
  v47 = sub_22F115668(v44);
  v48 = a4 + 6;
  v49 = sub_22EE7C22C(*v64, v62, v47, *a4, (uint64_t)v72, v73, a4[1], a4[2], (uint64_t *)(a3 + 8 * ((*(_QWORD *)(a3 + 16) >> 19) & 0x7FLL) + 48), *(_QWORD *)(a3 + 16) >> 26, (uint64_t)&a4[2 * ((*(_QWORD *)(a3 + 16) >> 19) & 0x7FLL) + 6], *(_QWORD *)(a3 + 16) >> 26, a4[3], 0, 1);
  if (v49 >= 0x10)
  {
    v9 = v49;
    v50 = sub_22EEB5360(v61, v49, ((HIWORD(*(_DWORD *)(v49 + 16)) & 0x3F8u) + 4 * (*(_DWORD *)(v49 + 16) >> 26) + 31) & 0x7F8, 8);
    *(_BYTE *)(v51 + 16) = 1;
    *(_DWORD *)v51 = *a4;
    if (((*(_DWORD *)(a3 + 16) >> 19) & 0x7F) != 0)
    {
      v52 = 0;
      v53 = 8 * ((*(_DWORD *)(a3 + 16) >> 19) & 0x7F);
      do
      {
        *(_QWORD *)(v51 + 24 + v52) = v72[v52 / 8];
        v52 += 8;
      }
      while (v53 != v52);
    }
    *(_DWORD *)(v51 + 4) = a4[1];
    *(_DWORD *)(v51 + 8) = a4[2];
    v54 = *(_DWORD *)(a3 + 16) >> 26;
    if (v54)
    {
      v55 = v51 + 24;
      do
      {
        *(_DWORD *)(v55 + 8 * ((*(_QWORD *)(v50 + 16) >> 19) & 0x7FLL)) = v48[2
                                                                            * ((*(_QWORD *)(a3 + 16) >> 19) & 0x7FLL)];
        v55 += 4;
        ++v48;
        --v54;
      }
      while (v54);
    }
    *(_DWORD *)(v51 + 12) = a4[3];
  }
  else
  {
LABEL_73:
    v9 = 0;
  }
  if (v72 != v10)
    free(v72);
  return v9;
}

unint64_t sub_22E8C1538(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23[2];

  v8 = sub_22F2F7C74(a1, a2);
  v9 = 0;
  if (v8 < 0x10)
    return v9;
  v11 = v8;
  v12 = *(_QWORD *)(a3 + 32);
  v13 = 1;
  if (v12 >= 0x10 && (v12 & 0xF) == 0)
    v13 = *(_QWORD *)((char *)&unk_22F463868
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  v23[0] = *(_QWORD *)(a3 + 32);
  v23[1] = ((unint64_t)a4 + v13 + 3) & -v13;
  for (i = v12; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_17;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v15 <= 0x39)
        break;
LABEL_12:
      if (sub_22F115668(i))
        v12 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_19;
    }
    if (v15 == 24)
      goto LABEL_18;
    if (v15 == 26)
      break;
    if (((1 << v15) & 0x20000000200003CLL) == 0)
      goto LABEL_12;
LABEL_17:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_17;
LABEL_18:
  v12 = i;
LABEL_19:
  v16 = sub_22F115668(v12);
  v17 = v16 | ((unint64_t)sub_22F1167E8(v23) << 32);
  LODWORD(v20) = *(_DWORD *)(a3 + 20);
  v18 = (_DWORD)v20 != 0;
  v19 = (_DWORD)v20 != 0;
  LODWORD(v20) = v20 - 1;
  if (v19)
    v20 = v20;
  else
    v20 = 0;
  v21 = sub_22F34AE9C(*a1, v11, v17, *a4, v20 | (v18 << 32));
  if (v21 < 0x10)
    return 0;
  v9 = v21;
  sub_22EEB5360(a2, v21, 4uLL, 4);
  *v22 = *a4;
  return v9;
}

uint64_t sub_22E8C1750(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50[12];
  uint64_t v51;

  v4 = a2;
  v51 = a2;
  v6 = a3;
  for (i = a3; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v8 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v8 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v6 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v8 == 24)
      goto LABEL_13;
    if (v8 == 26)
      break;
    if (((1 << v8) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v6 = i;
LABEL_14:
  v9 = sub_22F115668(v6);
  if ((a3 & 8) != 0)
  {
    v10 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    v11 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = v11 | a3 & 7;
  v13 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v14 & 8) != 0)
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v16 = v15 & 0xFFFFF800;
    if ((v15 & 0xFFFFF800) != 0
      && v12 >= 0x800
      && ((v15 ^ v11) & 0xFFFFF800) != 0)
    {
      v17 = *a1;
      v18 = v9;
      v19 = 2598;
      goto LABEL_38;
    }
    v20 = v16 == 22528 || v16 == 0;
    if ((!v20 || v12 >= 0x800 && (v11 & 0xFFFFF800) != 0x5800)
      && ((v15 & 0x600) != 0 || (v11 & 0x600) != 0))
    {
      goto LABEL_37;
    }
LABEL_39:
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((v23 - 25) <= 1)
      return sub_22EF5DD84((*a1)[11], v4, v12 >> 11);
    if ((v23 & 0xFE) == 0x28)
    {
      if (!(v11 & 2 | a3 & 2))
        return v4;
      v10 = 0;
      v12 = 2;
      return sub_22EE7D678(*a1, v4, v9, v12 | v10, 0);
    }
    if ((v11 & 0x1C0) != 0)
    {
      if (sub_22F40ACB8(*v13) || (*(_BYTE *)(*v13 + 17) & 4) != 0)
      {
        v25 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v25 & 8) == 0 || (*(_WORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
          return sub_22EE7D678(*a1, v4, v9, v12 | v10, 0);
        v26 = *v13;
        v27 = *(_DWORD *)(*v13 + 16);
        if (*v13 && v27 == 43)
        {
          v28 = *(_QWORD *)(v26 + 8);
          v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v29 & 8) != 0)
          {
            v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
            v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFE3FLL;
          }
          else
          {
            v30 = 0;
            v31 = 0;
          }
          v33 = v31 | (v29 | v28) & 7;
          v34 = (*a1)[11];
          v35 = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v35 + 8) & 0xF) != 0)
            v35 = (unint64_t)sub_22F10D2BC(v28);
          v36 = v35 & 0xFFFFFFFFFFFFFFF0;
          if (((v33 | v30) & 0xCFFFFFE38) != 0)
          {
            v50[0] = v33 | v30;
            v37 = sub_22E491354((unsigned int *)v50, v36);
            v38 = sub_22EF5DBC4(v34, v37, v50[0]);
          }
          else
          {
            v38 = v36 | v33 & 7;
          }
          v39 = sub_22EF64A1C((*a1)[11], *(_QWORD *)(v26 + 32), v38);
        }
        else
        {
          if (!v26 || v27 != 14 || (v32 = *(_QWORD *)(v26 + 24), (v27 & 0x400) == 0) && v32 < 0x10)
          {
            sub_22E8FCA40(*a1, v9, 0xAD5u, 0, (uint64_t)v50);
            sub_22E8901B8((uint64_t)v50, &v51);
            sub_22E903BEC((unsigned int *)v50);
            v12 &= 0xFFFFFFFFFFFFFE3FLL;
            v4 = v51;
            return sub_22EE7D678(*a1, v4, v9, v12 | v10, 0);
          }
          v40 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v40 & 8) != 0)
          {
            v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
            v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFE3FLL;
          }
          else
          {
            v41 = 0;
            v42 = 0;
          }
          v43 = v42 | (v40 | v32) & 7;
          v44 = (*a1)[11];
          v45 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v45 + 8) & 0xF) != 0)
            v45 = (unint64_t)sub_22F10D2BC(v32);
          v46 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (((v43 | v41) & 0xCFFFFFE38) != 0)
          {
            v50[0] = v43 | v41;
            v47 = sub_22E491354((unsigned int *)v50, v46);
            v48 = sub_22EF5DBC4(v44, v47, v50[0]);
          }
          else
          {
            v48 = v46 | v43 & 7;
          }
          v39 = sub_22EF67944((*a1)[11], v48, (*(_DWORD *)(v26 + 16) >> 19) & 3, (*(_DWORD *)(v26 + 16) >> 10) & 1, 0, *(_QWORD *)(v26 + 40), v26 + 48, *(unsigned int *)(v26 + 20), 0);
        }
        v4 = v39;
        v51 = v39;
        return sub_22EE7D678(*a1, v4, v9, v12 | v10, 0);
      }
      v12 &= 0xFFFFFFFFFFFFFE3FLL;
    }
    return sub_22EE7D678(*a1, v4, v9, v12 | v10, 0);
  }
  if ((v11 & 0x600) == 0 || v12 < 0x800 || (v11 & 0xFFFFF800) == 0x5800)
    goto LABEL_39;
LABEL_37:
  v17 = *a1;
  v18 = v9;
  v19 = 3834;
LABEL_38:
  sub_22E8FCA40(v17, v18, v19, 0, (uint64_t)v50);
  v49 = a3;
  v22 = sub_22E8901B8((uint64_t)v50, &v49);
  sub_22E8901B8(v22, &v51);
  sub_22E903BEC((unsigned int *)v50);
  return 0;
}

unint64_t sub_22E8C1C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD v23[3];
  uint64_t v24;

  v9 = a3;
  v10 = a2;
  v24 = *MEMORY[0x24BDAC8D0];
  if (!a4 || a5)
  {
    v20 = *(_QWORD **)a1;
    v21 = a5;
  }
  else
  {
    v13 = 0;
    v14 = *(_OWORD **)(*(_QWORD *)a1 + 88);
    v15 = v14[1033];
    v23[0] = v14[1032];
    v23[1] = v15;
    v23[2] = v14[1034];
    while (1)
    {
      v16 = *(_DWORD *)(a4 + 8);
      v17 = *(_QWORD *)((char *)v23 + v13);
      if (v16 == sub_22EF6A330(*(_QWORD *)(*(_QWORD *)a1 + 88), v17))
        break;
      v13 += 8;
      if (v13 == 48)
      {
        v17 = 0;
        break;
      }
    }
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v19 = sub_22E3CD3D4(v18 + 2032, 32, 3);
    sub_22EFF8F1C(v19, v18, a4, v17, a7);
    v20 = *(_QWORD **)a1;
    a2 = v10;
    a3 = v9;
    v21 = v19;
  }
  return sub_22EE7E810(v20, a2, a3, v21, a6, a7, 0);
}

uint64_t sub_22E8C1D88(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, unint64_t a5)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  int v68;
  unsigned int v69[24];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _QWORD v76[11];

  v76[8] = *MEMORY[0x24BDAC8D0];
  v74 = v76;
  v75 = 0x400000000;
  if (!a2)
  {
    v50 = 0;
    v71 = 0u;
    v72 = 0u;
    goto LABEL_86;
  }
  v9 = a2;
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v75;
    }
    v12 = (unint64_t *)&v74[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v75 + 1;
    LODWORD(v75) = v75 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v71 = 0u;
  v72 = 0u;
  if (!v10)
  {
    v50 = 0;
    goto LABEL_77;
  }
  v64 = a1 + 1;
  do
  {
    LODWORD(v75) = v10 - 1;
    v13 = v74[v10 - 1];
    v70 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v38 = *(_QWORD *)(*a1 + 88);
      v39 = sub_22F0AB0EC((unint64_t *)&v70);
      sub_22F0AB958((uint64_t)&v71 + 8, v38, v39);
      *(_QWORD *)&v71 = v39 | ((unint64_t)v39 << 32);
      goto LABEL_40;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v35 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v35 - 35) < 3)
        {
          v47 = sub_22F0AABF8(v13);
          v73 = v47;
          v66[0] = 0;
          if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v47 = *(_QWORD *)(v66[0] + 8);
          v48 = *(_QWORD *)(*a1 + 88);
          v49 = sub_22F0AB0EC((unint64_t *)&v70);
          sub_22F3E8E2C((uint64_t *)&v71 + 1, v48, v47, v49, SHIDWORD(v49));
          *(_QWORD *)&v71 = v49;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v70);
          v36 = *(_QWORD *)(v14 + 8) & 6;
          if (v35 == 16)
          {
            if (v36 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v37 = *(_QWORD *)(v14 + 16);
              else
                v37 = 0;
            }
            else
            {
              v37 = 0;
            }
            v73 = v37;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v37 = *(_QWORD *)(v66[0] + 8);
          }
          else
          {
            if (v36 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v37 = *(_QWORD *)(v14 + 16);
              else
                v37 = 0;
            }
            else
            {
              v37 = 0;
            }
            v73 = v37;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v37 = *(_QWORD *)(v66[0] + 8);
          }
          v40 = *(_QWORD *)(*a1 + 88);
          v41 = sub_22F0AB364((uint64_t *)&v70);
          v42 = sub_22F0AB364((uint64_t *)&v70);
          v43 = HIDWORD(v42);
          sub_22F0AB8AC((uint64_t *)&v71 + 1, v40, v37, v41, SHIDWORD(v42));
          if (!(_DWORD)v71)
            LODWORD(v71) = v41;
          DWORD1(v71) = v43;
        }
        goto LABEL_40;
      }
      if ((v16 & 6) != 0)
        v44 = 0;
      else
        v44 = *(_QWORD *)(v13 + 16);
      v45 = sub_22F0AB364((uint64_t *)&v70);
      v46 = sub_22F0AB364((uint64_t *)&v70);
      v66[0] = a4;
      v66[1] = v44;
      v67 = v45;
      v68 = HIDWORD(v46);
      if ((sub_22E958D90(*a1, 0, (uint64_t)v66, 0, (uint64_t)&v71, a5, 0, 0, 0) & 1) == 0)
        goto LABEL_40;
      goto LABEL_110;
    }
    v18 = sub_22F0AB4E0((uint64_t)&v70);
    v20 = v18;
    v21 = v19;
    if (v18 > 0xF)
    {
      v31 = sub_22F2FB528(a1, v18, v19, a4, a5, (uint64_t)&v71);
      if (!v31)
        goto LABEL_110;
      v21 = (uint64_t)(v31 + 1);
      v20 = *v31;
      if (!*v31)
        goto LABEL_110;
    }
    else if (!v18)
    {
      goto LABEL_110;
    }
    v22 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_21;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_21;
      if ((v20 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v20 + 24) + 28) & 0x80) != 0)
        goto LABEL_110;
      v58 = v20;
      v59 = v20;
      while (1)
      {
        if ((v59 & 0xF) != 0)
          goto LABEL_106;
        v60 = *(unsigned __int8 *)(*(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v60 > 0x39)
        {
LABEL_101:
          if (sub_22F115668(v59))
            v58 = v59;
          v59 = sub_22F115B7C(v59);
          if (!v59)
            goto LABEL_109;
        }
        else
        {
          if (v60 == 24)
            goto LABEL_108;
          if (v60 == 26)
          {
            if ((*(_BYTE *)(v59 + 23) & 0x10) != 0)
            {
LABEL_108:
              v58 = v59;
LABEL_109:
              v61 = sub_22F115668(v58);
              sub_22E8FCA40((_QWORD *)v26, v61, 0xF99u, 0, (uint64_t)v66);
              v73 = v20;
              v62 = sub_22E8901B8((uint64_t)v66, &v73);
              v65 = v71;
              sub_22E8906A0(v62, &v65);
              sub_22E903BEC((unsigned int *)v66);
LABEL_110:
              v56 = 0;
              goto LABEL_111;
            }
          }
          else if (((1 << v60) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_101;
          }
LABEL_106:
          v59 = sub_22F115B7C(v59);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_21:
    if (v25 != 44)
      goto LABEL_39;
    v28 = v20;
    for (i = v20; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_33;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_28:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_38;
      }
      if (v30 == 24)
        goto LABEL_37;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_28;
LABEL_33:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_33;
LABEL_37:
    v28 = i;
LABEL_38:
    v32 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v32, 0x1927u, 0, (uint64_t)v69);
    sub_22E903BEC(v69);
    v26 = *a1;
LABEL_39:
    v33 = *(_QWORD *)(v26 + 88);
    v34 = sub_22F0AB364((uint64_t *)&v70);
    sub_22E8ACD1C((uint64_t)&v71, v33, 0, v20, v21, SHIDWORD(v34));
LABEL_40:
    a4 = 0;
    a5 = 0;
    v10 = v75;
  }
  while ((_DWORD)v75);
  v50 = DWORD2(v72);
LABEL_77:
  v51 = 0;
  do
  {
    v52 = *(_QWORD *)(v9 + 8);
    if ((v52 & 4) != 0)
      v53 = 12;
    else
      v53 = 8;
    if (*(_QWORD *)(v9 + 16))
      v54 = v53;
    else
      v54 = 4;
    v51 += v54;
    v9 = v52 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
  if (v50 == v51)
  {
LABEL_86:
    v55 = memcmp((const void *)v72, __s2, v50);
    v56 = *((_QWORD *)&v71 + 1);
    if (!v55 || !*((_QWORD *)&v71 + 1))
      goto LABEL_111;
  }
  else
  {
    v56 = *((_QWORD *)&v71 + 1);
    if (!*((_QWORD *)&v71 + 1))
      goto LABEL_111;
  }
  if (HIDWORD(v72))
  {
    v57 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
    memcpy(v57, (const void *)v72, DWORD2(v72));
    v56 = *((_QWORD *)&v71 + 1);
  }
LABEL_111:
  if (HIDWORD(v72))
    free((void *)v72);
  if (v74 != (_OWORD *)v76)
    free(v74);
  return v56;
}

BOOL sub_22E8C2534(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v25 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v25)
        v25 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v26 = sub_22F2F7B28(a1, v25);
      if (v26)
      {
        v27 = *(_QWORD *)v26;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v27;
        *(_QWORD *)(a3 + 24) = v26 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v20 = sub_22F0EECF4();
      v21 = sub_22F2FAD70((uint64_t)a1, v20);
      if (v21 < 0x10)
        return 1;
      v22 = v21;
      v23 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v24 = *(_QWORD *)(a2 + 16);
      else
        v24 = 0;
      if (v24)
      {
        v43 = v24;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v23 = *(_QWORD *)(v41 + 8);
            if (!v23)
              return 1;
          }
        }
      }
      else
      {
        v23 = 0;
      }
      if (v22 == v20 && v24 == v23)
      {
        v4 = 0;
        v39 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v39;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v22;
LABEL_57:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v22;
        *(_QWORD *)(a3 + 16) = v23;
        goto LABEL_57;
      }
      v40 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v40, &v43, v22);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v8 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v9 = *(_QWORD *)(v8 + 8);
      if (*(_QWORD *)v8)
      {
        v10 = sub_22E8C1D88((int)a1, *(_QWORD *)v8, *(void **)(v8 + 8));
        if (!v10)
          return v4;
        v12 = v10;
        v9 = v11;
      }
      else
      {
        v12 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v12, v9);
      if ((*(_DWORD *)a2 - 5) > 1)
        v13 = 0;
      else
        v13 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v14 = sub_22E8C2AA8((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v13, 0, 0, 0);
      v4 = v14 < 8;
      if (v14 >= 8)
      {
        v15 = v14;
        v16 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v17 = 0;
        else
          v17 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v18 = sub_22E3CD3D4(v16 + 2032, 24, 3);
        *(_QWORD *)v18 = v12;
        *(_QWORD *)(v18 + 8) = v9;
        *(_DWORD *)(v18 + 16) = v17;
        *(_DWORD *)(v18 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v15;
        *(_QWORD *)(a3 + 24) = v18 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v28 = *a1;
      if (a4)
        v29 = 0;
      else
        v29 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v29;
      v43 = *(unsigned int *)(v28 + 1704);
      sub_22EB4DDB8(v28 + 3688, &v46, (int *)&v43, (__int16 *)(v28 + 1693), (uint64_t *)&v41, &v45);
      v30 = *(unsigned int *)(v28 + 3696);
      v31 = v30 - 2;
      v32 = *(_QWORD *)(v28 + 3688);
      v33 = *(_DWORD *)(v32 + 576 * (v30 - 2));
      if (v33 == 5)
      {
        *(_BYTE *)(v32 + 576 * v30 - 4) = *(_BYTE *)(v32 + 576 * v31 + 572);
        v34 = 1;
      }
      else if (v33 == 2)
      {
        *(_BYTE *)(v32 + 576 * v30 - 4) = 1;
        v34 = *(_BYTE *)(v32 + 576 * v31 + 573) != 0;
      }
      else
      {
        v34 = 0;
        *(_BYTE *)(v32 + 576 * v30 - 4) = 0;
      }
      v35 = v32 + 576 * v30;
      *(_BYTE *)(v35 - 3) = v34;
      *(_WORD *)(v28 + 1693) = 0;
      if (*(_DWORD *)(v28 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v28 + 1776), (llvm::SmallPtrSetImplBase *)(v35 - 560));
        sub_22EAEAE08(v28 + 1840, (uint64_t *)(v35 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v36 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v36 = *(_QWORD *)(a2 + 8);
      v37 = sub_22F2F34EC(a1, v36);
      v38 = sub_22EB51A84(*a1, v37);
      v4 = v38 & 1;
      if ((v38 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v38 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v38 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v28);
      return v4;
    default:
      return v4;
  }
}

uint64_t sub_22E8C298C@<X0>(uint64_t result@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  __int128 v15;

  v7 = *a2;
  if (*a2 == 5)
  {
    v10 = *(_QWORD *)(*(_QWORD *)result + 88);
    v11 = *((_QWORD *)a2 + 1);
    if ((a4 & 0xFF00000000) != 0)
      v12 = a4 + 1;
    else
      v12 = 0;
    v13 = *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = *(_DWORD *)(v13 + 16);
    *(_DWORD *)a5 = 6;
    *(_DWORD *)(a5 + 4) = v12;
    *(_QWORD *)(a5 + 8) = v11;
    v15 = *(_OWORD *)v13;
    result = sub_22E3CD3D4(v10 + 2032, 24, 3);
    *(_OWORD *)result = v15;
    *(_DWORD *)(result + 16) = v14;
    *(_DWORD *)(result + 20) = a3;
    v9 = result & 0xFFFFFFFFFFFFFFFCLL;
    goto LABEL_12;
  }
  if (v7 == 7)
  {
    result = sub_22EE739C0(*(_QWORD **)result, *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL, a3, a4);
    if ((result & 1) == 0)
    {
      *(_DWORD *)a5 = 7;
      *(_QWORD *)(a5 + 8) = result & 0xFFFFFFFFFFFFFFFELL;
      v9 = result & 0xFFFFFFFFFFFFFFFCLL | 1;
      goto LABEL_12;
    }
  }
  else if (v7 == 1)
  {
    result = (uint64_t)sub_22F34AD38(*(_QWORD **)result, (unint64_t *)(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL), a3, a4);
    if (result)
    {
      v8 = *(_QWORD *)result;
      *(_DWORD *)a5 = 1;
      *(_QWORD *)(a5 + 8) = v8;
      v9 = result & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_12:
      *(_QWORD *)(a5 + 24) = v9;
      return result;
    }
  }
  *(_DWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  return result;
}

unint64_t sub_22E8C2AA8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  _QWORD v22[3];
  uint64_t v23;
  unint64_t v24;

  v23 = a3;
  v9 = a3 & 6;
  v10 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (v9 == 4 && v10 != 0)
  {
    v14 = sub_22F0F08CC((uint64_t *)(v10 + 16));
    v24 = v14;
    v22[0] = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v24, v22))
    {
      if (v22[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        v14 = *(_QWORD *)(v22[0] + 8);
    }
    if (v14)
      return sub_22F36E410(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a2 + 8), (*(_QWORD *)(v10 + 8) >> 2) & 1, v14 & 0xFFFFFFFFFFFFFFF9);
    return 0;
  }
  if (v9 == 6 && v10)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (v19)
      a5 = 0;
    if ((*(_BYTE *)(v10 + 8) & 4) != 0)
    {
      return sub_22F2FB460((uint64_t *)a1, a2, a4, *(_DWORD *)(v10 + 16), a4, a5, a7);
    }
    else
    {
      if (v19)
        a6 = 0;
      return sub_22F2FB3E0((uint64_t *)a1, a2, a4, *(_QWORD *)(v10 + 16), a4, a5, a6, a7);
    }
  }
  else
  {
    result = sub_22F0F08CC(&v23);
    if (result)
    {
      v13 = result;
      v24 = result;
      v22[0] = 0;
      if (!sub_22E793870((uint64_t *)(a1 + 8), &v24, v22))
        return v13 & 0xFFFFFFFFFFFFFFF9;
      if (v22[0] == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        return v13 & 0xFFFFFFFFFFFFFFF9;
      v13 = *(_QWORD *)(v22[0] + 8);
      if (v13)
        return v13 & 0xFFFFFFFFFFFFFFF9;
      return 0;
    }
    if (v9 == 2 && v10 && (~*(_DWORD *)v10 & 3) == 0)
    {
      v16 = *(_QWORD *)(v10 + 16);
      v24 = v16;
      v22[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v24, v22)
        && v22[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v16 = *(_QWORD *)(v22[0] + 8);
      }
      if (v16)
      {
        v17 = *(_DWORD *)v10 >> 2;
        v22[1] = *(_QWORD *)(v10 + 24);
        LODWORD(v22[0]) = 8;
        HIDWORD(v22[0]) = v17;
        return sub_22F36D860(*(_QWORD *)(*(_QWORD *)a1 + 88), v16, (uint64_t)v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_22E8C2CCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[256];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  v36 = (_DWORD *)a4;
  v37 = v39;
  v38 = 0x800000000;
  v40 = 0;
  v40 = *(_QWORD *)(a4 + 24);
  v11 = 0;
  if ((sub_22F2FBDE0(a1, &v35, 0, &v35, *(_DWORD *)(a3 + 20), (uint64_t)&v37, 0) & 1) == 0)
  {
    v13 = sub_22F2FC5D0(a1, (*(_DWORD *)(a3 + 16) >> 19), a5, a6, v36[5], *(_QWORD *)(a3 + 40), v36[4], (uint64_t)&v37, 0);
    if (v13 >= 0x10)
    {
      v11 = v13;
      v14 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
      v15 = *(unsigned __int8 *)(v14 + 16);
      if (v14)
        v16 = v15 == 24;
      else
        v16 = 0;
      if (v16)
      {
        sub_22EEB5360(a2, *(_QWORD *)(v14 + 40), (8 * *(_DWORD *)(*(_QWORD *)(v14 + 40) + 20) + 16), 8);
        v25 = v36;
        v24[1] = v36[5];
        *v24 = v25[4];
        v24[2] = v25[6];
        v24[3] = v25[7];
        if ((_DWORD)v38)
        {
          v26 = 0;
          v27 = v24 + 4;
          v28 = 32 * v38;
          do
          {
            *v27++ = *(_QWORD *)((char *)v37 + v26 + 24);
            v26 += 32;
          }
          while (v28 != v26);
        }
        sub_22EEB5360(a2, v11, 0x10uLL, 8);
        *(_DWORD *)v29 = *v36;
        *(_QWORD *)(v29 + 8) = a6;
      }
      else
      {
        v17 = 8 * *(_DWORD *)(v13 + 20);
        if (v15 == 20)
        {
          sub_22EEB5360(a2, v13, (v17 + 32), 8);
          v19 = v36;
          *(_DWORD *)v18 = *v36;
          if (a5)
            v20 = a6;
          else
            v20 = 0;
          *(_QWORD *)(v18 + 8) = v20;
          *(_DWORD *)(v18 + 20) = v19[5];
          *(_DWORD *)(v18 + 16) = v19[4];
          *(_DWORD *)(v18 + 24) = v19[6];
          *(_DWORD *)(v18 + 28) = v19[7];
          if ((_DWORD)v38)
          {
            v21 = 0;
            v22 = (_QWORD *)(v18 + 32);
            v23 = 32 * v38;
            do
            {
              *v22++ = *(_QWORD *)((char *)v37 + v21 + 24);
              v21 += 32;
            }
            while (v23 != v21);
          }
        }
        else
        {
          sub_22EEB5360(a2, v13, (v17 + 16), 8);
          v31 = v36;
          v30[1] = v36[5];
          *v30 = v31[4];
          v30[2] = v31[6];
          v30[3] = v31[7];
          if ((_DWORD)v38)
          {
            v32 = 0;
            v33 = v30 + 4;
            v34 = 32 * v38;
            do
            {
              *v33++ = *(_QWORD *)((char *)v37 + v32 + 24);
              v32 += 32;
            }
            while (v34 != v32);
          }
        }
      }
    }
    else
    {
      v11 = 0;
    }
  }
  if (v37 != v39)
    free(v37);
  return v11;
}

unint64_t sub_22E8C2F98(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t *v61;
  char v64;
  _QWORD v65[2];
  int v66[12];
  unsigned __int8 *v67;
  uint64_t v68;
  _DWORD *v69;
  void *v70;
  __int128 v71;
  _BYTE v72[16];
  char v73;
  void *v74[2];
  _BYTE v75[32];
  unint64_t *v76;
  uint64_t v77;
  _QWORD v78[6];

  v8 = a2;
  v78[4] = *MEMORY[0x24BDAC8D0];
  v68 = a3;
  v69 = a4;
  v76 = v78;
  v77 = 0x400000000;
  v74[0] = v75;
  v74[1] = (void *)0x400000000;
  v70 = v72;
  v71 = xmmword_22F44E350;
  v73 = 0;
  if ((*(_BYTE *)(a3 + 23) & 0x10) == 0)
  {
    v15 = *(_QWORD *)(a3 + 24);
    v16 = sub_22E47EE80(&v68);
    v17 = sub_22F2F7C74((_QWORD **)a1, v8, v15, v16);
    if (v17 < 0x10)
    {
      v18 = 0;
      goto LABEL_25;
    }
    v26 = v17;
    v27 = v68;
    v28 = v68;
    while (1)
    {
      if ((v28 & 0xF) != 0)
        goto LABEL_47;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 > 0x39)
      {
LABEL_42:
        if (sub_22F115668(v28))
          v27 = v28;
        v28 = sub_22F115B7C(v28);
        if (!v28)
          goto LABEL_49;
      }
      else
      {
        if (v29 == 24)
          goto LABEL_48;
        if (v29 == 26)
        {
          if ((*(_BYTE *)(v28 + 23) & 0x10) != 0)
          {
LABEL_48:
            v27 = v28;
LABEL_49:
            v30 = sub_22F115668(v27);
            if (*(_BYTE *)(v68 + 16) == 25)
              v31 = 0;
            else
              v31 = (unsigned __int16)(*(_QWORD *)(v68 + 16) >> 38);
            v32 = (uint64_t)(v69 + 4);
            v33 = v68 + 40;
            if ((*(_BYTE *)(a3 + 23) & 4) != 0)
              v34 = sub_22E47E270(a3);
            else
              v34 = 0;
            if ((sub_22E8C36C8(a1, v30, v32, v31, v33, v34, (uint64_t)&v76, (uint64_t)v74, (uint64_t)&v70) & 1) != 0)
              goto LABEL_70;
            goto LABEL_56;
          }
        }
        else if (((1 << v29) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_42;
        }
LABEL_47:
        v28 = sub_22F115B7C(v28);
      }
    }
  }
  v12 = a3;
  for (i = a3; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v14 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v14 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v12 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_17;
    }
    if (v14 == 24)
      goto LABEL_16;
    if (v14 == 26)
      break;
    if (((1 << v14) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_16:
  v12 = i;
LABEL_17:
  v19 = sub_22F115668(v12);
  if (*(_BYTE *)(v68 + 16) == 25)
    v20 = 0;
  else
    v20 = (unsigned __int16)(*(_QWORD *)(v68 + 16) >> 38);
  if ((*(_BYTE *)(a3 + 23) & 4) != 0)
    v21 = sub_22E47E270(a3);
  else
    v21 = 0;
  if ((sub_22E8C36C8(a1, v19, (uint64_t)(v69 + 4), v20, v68 + 40, v21, (uint64_t)&v76, (uint64_t)v74, (uint64_t)&v70) & 1) != 0)
  {
    v18 = 0;
    goto LABEL_25;
  }
  sub_22EBBBB24((uint64_t)v65, *a1, a5, a6, 1);
  v23 = *(_QWORD *)(v68 + 24);
  v24 = sub_22E47EE80(&v68);
  v8 = a2;
  v25 = sub_22F2F7C74((_QWORD **)a1, a2, v23, v24);
  v26 = v25;
  if (LOBYTE(v66[0]))
    *(_QWORD *)(v65[0] + 10288) = v65[1];
  if (v25 < 0x10)
    goto LABEL_70;
LABEL_56:
  v61 = a1;
  v35 = v8;
  sub_22E4913B4(a3, (uint64_t)v65);
  v64 = 0;
  v36 = **(uint64_t ****)a7;
  v37 = **(_QWORD **)(a7 + 8);
  v38 = v37;
  while (2)
  {
    while (2)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_67;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 > 0x39)
      {
LABEL_62:
        if (sub_22F115668(v38))
          v37 = v38;
        v38 = sub_22F115B7C(v38);
        if (!v38)
          goto LABEL_69;
        continue;
      }
      break;
    }
    if (v39 == 24)
      break;
    if (v39 != 26)
    {
      if (((1 << v39) & 0x20000000200003CLL) != 0)
        goto LABEL_67;
      goto LABEL_62;
    }
    if ((*(_BYTE *)(v38 + 23) & 0x10) == 0)
    {
LABEL_67:
      v38 = sub_22F115B7C(v38);
      continue;
    }
    break;
  }
  v37 = v38;
LABEL_69:
  v40 = sub_22F115668(v37);
  if ((sub_22E8C40CC(v36, v40, v66, *(_QWORD *)(a7 + 16), &v64) & 1) != 0)
  {
LABEL_70:
    v18 = 0;
    goto LABEL_25;
  }
  if (!v73 || (sub_22F24FB88(&v70, v77), !v70))
  {
    v41 = v35;
    v42 = v61;
    if (v67)
    {
      v64 = 1;
      v67 = 0;
    }
    goto LABEL_74;
  }
  v58 = v67;
  v41 = v35;
  v42 = v61;
  if (!v67)
    goto LABEL_106;
  if (*(_BYTE *)(v68 + 16) != 25)
  {
    v59 = (unsigned __int16)(*(_QWORD *)(v68 + 16) >> 38);
    if (v59 == v77)
    {
      if (!(unsigned __int16)(*(_QWORD *)(v68 + 16) >> 38))
        goto LABEL_107;
      v60 = (unsigned __int8 *)v70;
      while (*v58 == *v60)
      {
        ++v58;
        ++v60;
        if (!--v59)
          goto LABEL_107;
      }
    }
    goto LABEL_106;
  }
  if ((_DWORD)v77)
LABEL_106:
    v64 = 1;
LABEL_107:
  v67 = (unsigned __int8 *)v70;
LABEL_74:
  v43 = sub_22EE80544((_QWORD *)*v42, v26, v76, v77, 0, 0, (uint64_t)v65);
  v18 = 0;
  if (v43 >= 0x10)
  {
    v44 = v43;
    v45 = sub_22E8BB094(v41, v43);
    v47 = 0;
    v48 = v69;
    *v46 = *v69;
    v46[1] = v48[1];
    v46[2] = v48[2];
    if (v68)
    {
      v49 = 0;
      if (*(_BYTE *)(v68 + 16) == 26)
      {
        v50 = *(_QWORD *)(v68 + 16);
        if ((v50 & 0x3C0000000000000) != 0)
        {
          v51 = (unsigned __int16)(v50 >> 38);
          if (*(_QWORD *)(v68 + 16) == 25)
            v51 = 0;
          v49 = *(_QWORD *)&v48[2 * v51 + 4];
          v47 = v49 & 0xFFFFFFFF00000000;
          v49 = v49;
        }
        else
        {
          v47 = 0;
          v49 = 0;
        }
      }
    }
    else
    {
      v49 = 0;
    }
    if (v45)
    {
      if (*(_BYTE *)(v45 + 16) == 26)
      {
        v52 = *(_QWORD *)(v45 + 16);
        if ((v52 & 0x3C0000000000000) != 0)
        {
          v53 = v49 | v47;
          if (*(_QWORD *)(v45 + 16) == 25)
            v54 = 0;
          else
            v54 = (unsigned __int16)(v52 >> 38);
          *(_QWORD *)&v46[2 * v54 + 4] = v53;
          v48 = v69;
        }
      }
    }
    v46[3] = v48[3];
    if (*(_BYTE *)(v45 + 16) != 25)
    {
      v55 = *(_QWORD *)(v45 + 16);
      if ((v55 & 0x3FFFC000000000) != 0)
      {
        v56 = 0;
        v57 = (unsigned __int16)(v55 >> 38);
        do
        {
          *(_QWORD *)&v46[2 * v56 + 4] = *((_QWORD *)v74[0] + v56);
          ++v56;
        }
        while (v57 != v56);
      }
    }
    v18 = v44;
  }
LABEL_25:
  if (v70 != v72)
    free(v70);
  if (v74[0] != v75)
    free(v74[0]);
  if (v76 != v78)
    free(v76);
  return v18;
}

uint64_t sub_22E8C36C8(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v56;
  unsigned int v57;
  void **v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[6];

  v62[4] = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  if (!a4)
    return 0;
  v12 = a6;
  v13 = a3;
  v14 = a1;
  v15 = 0;
  v57 = 0;
  v56 = a4;
  while (1)
  {
    v16 = *(_QWORD *)(v13 + 8 * v15);
    if (v16)
      break;
    v32 = *(_QWORD *)(a5 + 8 * v15);
    v33 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
    if (v33 && *(_BYTE *)(v33 + 16) == 36)
    {
      v34 = *(_QWORD *)(v33 + 32);
      v60 = v62;
      v61 = 0x200000000;
      v58 = &v60;
      LOBYTE(v59) = 0;
      HIDWORD(v59) = -1;
      sub_22EE72E1C((uint64_t)&v58, v34);
      v35 = *(_QWORD *)(v33 + 32);
      v36 = *v14;
      v37 = (uint64_t)v14;
      v38 = *(_DWORD *)(*v14 + 11992);
      *(_DWORD *)(v36 + 11992) = -1;
      v39 = (uint64_t *)v37;
      v40 = sub_22F2FAD70(v37, v35);
      *(_DWORD *)(v36 + 11992) = v38;
      if (v60 != v62)
        free(v60);
      if (v40 < 0x10)
        return 1;
      v14 = v39;
      v41 = sub_22EF663B4(*(_QWORD *)(*v39 + 88), v40, 0);
    }
    else
    {
      v41 = sub_22F2FAD70((uint64_t)v14, v32);
      if (v41 < 0x10)
        return 1;
    }
    if (v12)
      sub_22F2F3918(a9, *(_DWORD *)(a7 + 8), *(_BYTE *)(v12 + v15));
    v42 = *(unsigned int *)(a7 + 8);
    if (v42 >= *(unsigned int *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v42 = *(unsigned int *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v42) = v41;
    ++*(_DWORD *)(a7 + 8);
    if (a8)
    {
      v43 = *(unsigned int *)(a8 + 8);
      v9 = v56;
      if (v43 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v43 = *(unsigned int *)(a8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v43) = 0;
LABEL_61:
      ++*(_DWORD *)(a8 + 8);
    }
    else
    {
      v9 = v56;
    }
LABEL_62:
    if (++v15 == v9)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v31 = sub_22E8C3BB4(v14, *(_QWORD *)(v13 + 8 * v15), 0, 0);
    if (v31)
      goto LABEL_53;
    return 1;
  }
  v60 = v62;
  v61 = 0x200000000;
  v17 = *(_QWORD *)(v16 + 56);
  v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 4) != 0)
    v18 = (uint64_t *)v18[4];
  v21 = *v18;
  v19 = v18 + 1;
  v20 = v21;
  v22 = *(_QWORD *)(v21 + 32);
  if (v22 >= 0x10 && (v22 & 0xF) == 0)
    v44 = *(_QWORD *)((char *)&unk_22F463868
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v44 = 1;
  v58 = (void **)v22;
  v59 = ((unint64_t)v19 + v44 + 3) & -v44;
  sub_22EE73804(*v14, v22, v59, (uint64_t)&v60);
  if (!(_DWORD)v61)
  {
    v25 = 0;
    LOBYTE(v28) = 0;
    goto LABEL_50;
  }
  v24 = *(_DWORD *)(v20 + 20);
  v25 = v24 != 0;
  v26 = v24 != 0;
  v27 = v24 - 1;
  if (v26)
    v28 = v27;
  else
    v28 = 0;
  v57 = v28 >> 8;
  for (i = v22; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v30 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v22 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_49;
    }
    if (v30 == 24)
      goto LABEL_48;
    if (v30 == 26)
      break;
    if (((1 << v30) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_48:
  v22 = i;
LABEL_49:
  sub_22F115668(v22);
  sub_22F1167E8((uint64_t *)&v58);
LABEL_50:
  v45 = *a1;
  v46 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v47 = v28 | (v57 << 8) | (unint64_t)(v25 << 32);
  v14 = a1;
  v31 = sub_22E8C3BB4(a1, v16, 0, v47);
  *(_DWORD *)(v45 + 11992) = v46;
  v13 = a3;
  v12 = a6;
  if (v60 != v62)
    free(v60);
  v9 = v56;
  if (v31)
  {
LABEL_53:
    if (v12)
      sub_22F2F3918(a9, *(_DWORD *)(a7 + 8), *(_BYTE *)(v12 + v15));
    v48 = *(_QWORD *)(v31 + 48);
    v49 = *(unsigned int *)(a7 + 8);
    if (v49 >= *(unsigned int *)(a7 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v49 = *(unsigned int *)(a7 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a7 + 8 * v49) = v48;
    ++*(_DWORD *)(a7 + 8);
    if (a8)
    {
      v50 = *(unsigned int *)(a8 + 8);
      if (v50 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = *(unsigned int *)(a8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v50) = v31;
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  return 1;
}

unint64_t sub_22E8C3BB4(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int i;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  size_t v47;
  unsigned __int32 v48;
  uint64_t v49;
  int *v50;
  uint64_t v51[2];
  _QWORD *v52;
  int64x2_t v53;
  _QWORD v54[6];

  v54[5] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 56);
  v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 4) != 0)
    v9 = (uint64_t *)v9[4];
  if ((a4 & 0xFF00000000) == 0 || (v10 = *v9, *(_BYTE *)(*(_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v16 = (uint64_t *)sub_22F2F7B28((_QWORD **)a1, v9);
    if (v16)
      goto LABEL_20;
    return 0;
  }
  v52 = v54;
  v53 = vdupq_n_s64(0x20uLL);
  v54[4] = 0;
  v11 = sub_22F11598C(v10);
  if (v53.i64[0] < (unint64_t)v11)
    sub_22EEB52C0((uint64_t *)&v52, v11);
  v12 = *(_QWORD *)(v10 + 32);
  if (v12 >= 0x10 && (*(_QWORD *)(v10 + 32) & 0xFLL) == 0)
    v40 = *(_QWORD *)((char *)&unk_22F463868
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v40 = 1;
  v14 = sub_22F2F7C74((_QWORD **)a1, (uint64_t)&v52, v12, ((unint64_t)v9 + v40 + 11) & -v40);
  if (v14 < 0x10)
  {
LABEL_14:
    v15 = 0;
    v16 = 0;
    goto LABEL_15;
  }
  v35 = v14;
  v36 = *(_QWORD *)(v10 + 32);
  if (v36 >= 0x10 && (v36 & 0xF) == 0)
    v49 = *(_QWORD *)((char *)&unk_22F463868
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v49 = 1;
  v51[0] = v36;
  v51[1] = ((unint64_t)v9 + v49 + 11) & -v49;
  v38 = v36;
  v50 = (int *)(v9 + 1);
  while (1)
  {
    while (1)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_84;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 <= 0x39)
        break;
LABEL_79:
      if (sub_22F115668(v38))
        v36 = v38;
      v38 = sub_22F115B7C(v38);
      if (!v38)
        goto LABEL_86;
    }
    if (v39 == 24)
      goto LABEL_85;
    if (v39 == 26)
      break;
    if (((1 << v39) & 0x20000000200003CLL) == 0)
      goto LABEL_79;
LABEL_84:
    v38 = sub_22F115B7C(v38);
  }
  if ((*(_BYTE *)(v38 + 23) & 0x10) == 0)
    goto LABEL_84;
LABEL_85:
  v36 = v38;
LABEL_86:
  v41 = sub_22F115668(v36);
  v42 = sub_22F1167E8(v51);
  v43 = sub_22F34AE9C((_QWORD *)*a1, v35, v41 | ((unint64_t)v42 << 32), *v50, a4);
  if (v43 < 0x10)
    goto LABEL_14;
  v44 = v43;
  sub_22EEB5360((uint64_t)&v52, v43, 4uLL, 4);
  *v45 = *v50;
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = v53.i64[0] - v53.i64[1];
  v48 = v53.i32[0] - v53.i32[2];
  if (v53.i32[0] == v53.i32[2])
    v48 = sub_22F11598C(v44);
  v16 = (uint64_t *)sub_22E3CD3D4(v46 + 2032, v48 + 8, 3);
  *v16 = v44;
  memcpy(v16 + 1, (char *)v52 + v53.i64[1], v47);
  v15 = 1;
LABEL_15:
  if (v52 != v54 && v52)
    MEMORY[0x2348A0E84]();
  if ((v15 & 1) == 0 || !v16)
    return 0;
LABEL_20:
  if (!a3 && v16 == v9)
    return a2;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  if ((v19 & 4) != 0)
    v20 = (_QWORD *)*v20;
  v21 = *(_QWORD *)(a2 + 40);
  if ((v21 & 7) != 0)
    v22 = 0;
  else
    v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  v17 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v20, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v22, *v16, (uint64_t)v16, *(_BYTE *)(a2 + 96) & 7, 0);
  v23 = *(_DWORD *)(a2 + 96);
  if ((v23 & 0x1000) != 0)
    v24 = 0;
  else
    v24 = v23 & 0xFE000;
  v25 = (v23 >> 20);
  if (v25 == 255)
  {
    v26 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
    {
      v27 = *(_QWORD *)(a2 + 16);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)v28;
      for (i = *(_WORD *)(v28 + 8) & 0x7F; i != 83; i = *(_WORD *)(v28 + 8) & 0x7F)
      {
        v30 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v30 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_49;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_48;
          if (i == 16)
            goto LABEL_42;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_55;
          if (i == 24)
          {
LABEL_42:
            v30 = -48;
          }
          else
          {
LABEL_48:
            if (i != 70)
            {
LABEL_49:
              v31 = i - 52;
              if ((i - 33) >= 5)
                v32 = -48;
              else
                v32 = -64;
              if (v31 >= 6)
                v30 = v32;
              else
                v30 = -72;
              goto LABEL_55;
            }
            v30 = -64;
          }
        }
LABEL_55:
        v33 = *(_QWORD *)(v28 + v30 + 16);
        v28 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 4) != 0)
          v28 = *(_QWORD *)v28;
      }
      v26 = v28 - 40;
    }
    v25 = sub_22F36F2CC(*(_QWORD *)(v26 + 88), a2);
  }
  v34 = *(_DWORD *)(v17 + 96) & 0xFFF01FFF | v24;
  *(_DWORD *)(v17 + 96) = v34;
  if ((v25 + a3) < 0xFF)
    *(_DWORD *)(v17 + 96) = v34 & 0xF00FFFFF | ((v25 + a3) << 20);
  else
    sub_22F3AC2B8(v17, v25 + a3);
  v52 = (_QWORD *)a2;
  sub_22F25E108(a1 + 1, &v52)[1] = v17;
  return v17;
}

uint64_t sub_22E8C40CC(uint64_t **a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int *v7;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  void **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  __n128 *v41;
  int v42;
  int *v43;
  unint64_t v44;
  int v45;
  int v46;
  void **v47;
  char v48;
  int v49;
  void *v50[2];
  _QWORD v51[5];

  v7 = a3;
  v9 = a1;
  v51[4] = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v33 = *a1;
    v50[0] = 0;
    v45 = 3;
    v46 = 4;
    v47 = (void **)*((unsigned int *)v33 + 426);
    sub_22EB4DDB8((uint64_t)(v33 + 461), &v46, (int *)&v47, (__int16 *)((char *)v33 + 1693), (uint64_t *)v50, &v45);
    v34 = *((unsigned int *)v33 + 924);
    v35 = v34 - 2;
    v36 = v33[461];
    v37 = *(_DWORD *)(v36 + 576 * (v34 - 2));
    if (v37 == 5)
    {
      *(_BYTE *)(v36 + 576 * v34 - 4) = *(_BYTE *)(v36 + 576 * v35 + 572);
      v38 = 1;
    }
    else if (v37 == 2)
    {
      *(_BYTE *)(v36 + 576 * v34 - 4) = 1;
      v38 = *(_BYTE *)(v36 + 576 * v35 + 573) != 0;
    }
    else
    {
      v38 = 0;
      *(_BYTE *)(v36 + 576 * v34 - 4) = 0;
    }
    v39 = v36 + 576 * v34;
    *(_BYTE *)(v39 - 3) = v38;
    *(_WORD *)((char *)v33 + 1693) = 0;
    if (*((_DWORD *)v33 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v33 + 222), (llvm::SmallPtrSetImplBase *)(v39 - 560));
      sub_22EAEAE08((uint64_t)(v33 + 230), (uint64_t *)(v39 - 496));
    }
    v40 = sub_22F2F34EC(v9, *((_QWORD *)a3 + 3));
    if ((v40 & 1) != 0
      || (LODWORD(v50[0]) = *a3,
          v41 = sub_22EB14270(*v9, (unsigned __int8 *)(v40 & 0xFFFFFFFFFFFFFFFELL), (int *)v50),
          (v41 & 1) != 0))
    {
      sub_22EB48E64(v33);
      return 1;
    }
    v42 = (int)v50[0];
    if (*((_QWORD *)a3 + 3) != ((unint64_t)v41 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v50[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = (unint64_t)v41 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v42;
    sub_22EB48E64(v33);
    v10 = *a3;
    v7 = a3;
  }
  if (v10 != 2)
    return 0;
  v11 = *((_QWORD *)v7 + 2);
  if (v11)
  {
    v12 = (void **)*((_QWORD *)v7 + 1);
    v13 = a2 | ((unint64_t)a2 << 32);
    v14 = 8 * v11;
    v43 = v7;
    v44 = v13;
    do
    {
      v15 = (uint64_t *)v9;
      v16 = *v12;
      v17 = *(_QWORD *)((unint64_t)*v12 & 0xFFFFFFFFFFFFFFF0);
      if (v17 && *(_BYTE *)(v17 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v17 = sub_22F10CF48(v17)) != 0)
      {
        v18 = a5;
        *a5 = 1;
        v50[0] = v51;
        v50[1] = (void *)0x200000000;
        v19 = *(_QWORD *)(v17 + 32);
        v47 = v50;
        v48 = 0;
        v49 = -1;
        sub_22EE72E1C((uint64_t)&v47, v19);
        v20 = *(_DWORD *)(v17 + 20);
        v21 = *v15;
        v22 = *(_DWORD *)(*v15 + 11992);
        *(_DWORD *)(*v15 + 11992) = -1;
        v23 = *(_QWORD *)(v17 + 32);
        v9 = (uint64_t **)v15;
        v24 = sub_22F2FAD70((uint64_t)v15, v23);
        if (v24 >= 0x10)
        {
          LODWORD(v25) = v20 - 1;
          if (v20)
            v25 = v25;
          else
            v25 = 0;
          v26 = sub_22EF663B4(*(_QWORD *)(*v15 + 88), v24, v25 | ((unint64_t)(v20 != 0) << 32));
          v27 = *(unsigned int *)(a4 + 8);
          if (v27 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v27) = v26;
          ++*(_DWORD *)(a4 + 8);
          v9 = (uint64_t **)v15;
        }
        *(_DWORD *)(v21 + 11992) = v22;
        v7 = v43;
        if (v50[0] != v51)
          free(v50[0]);
        a5 = v18;
        v13 = v44;
        if (v24 < 0x10)
          return 1;
      }
      else
      {
        v9 = (uint64_t **)v15;
        v50[0] = (void *)sub_22F2FAD70((uint64_t)v15, (unint64_t)v16);
        if (v50[0] < (void *)0x10 || (sub_22EB14454(*v15, (unint64_t *)v50, v13) & 1) != 0)
          return 1;
        v28 = v50[0];
        if (v16 != v50[0])
          *a5 = 1;
        v29 = *(unsigned int *)(a4 + 8);
        if (v29 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v29) = v28;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v12;
      v14 -= 8;
    }
    while (v14);
  }
  v30 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v7 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v7 + 2) = v30;
  if ((_DWORD)v30)
    return 0;
  result = 0;
  *v7 = 1;
  return result;
}

unint64_t sub_22E8C450C(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  int *v12;

  v8 = sub_22F2F7C74(a1, a2);
  result = 0;
  if (v8 >= 0x10)
  {
    v10 = sub_22EE7E490(*a1, v8, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4);
    result = 0;
    if (v10 >= 0x10)
    {
      v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
      if (!v11 || (*(_DWORD *)(v11 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v11);
      sub_22EEB5360(a2, v10, 4uLL, 4);
      *v12 = *a4;
      return v10;
    }
  }
  return result;
}

unint64_t sub_22E8C4608(_QWORD **a1, unsigned int a2, unint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t result;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25[24];
  uint64_t v26;
  unsigned int v27;

  v27 = a2;
  if ((*(_DWORD *)(a3 + 28) & 0x80) != 0)
    return 0;
  v4 = *(_DWORD *)(a3 + 28) & 0x7F;
  if (v4 == 45)
    v5 = a3;
  else
    v5 = 0;
  v26 = v5;
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 56);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = (_QWORD *)(v5 + 64);
      v10 = a2;
      v11 = 8 * v6;
      do
      {
        v12 = sub_22E8C4608(a1, v10, *v9);
        if (v12 >= 0x10)
        {
          v13 = v12;
          v14 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
          if (v14 && *(_BYTE *)(v14 + 16) == 52
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 52 && sub_22F10CF48(v14))
          {
            v7 = v13;
          }
          else if (v8 < 0x10)
          {
            v8 = v13;
          }
        }
        ++v9;
        v11 -= 8;
      }
      while (v11);
      if (v8 >= 0x10)
        return v8;
      else
        return v7;
    }
    sub_22E8FCA40(*a1, a2, 0x13F5u, 0, (uint64_t)v25);
    v24 = sub_22E8BB0E8(v5);
    v22 = sub_22E894E38((uint64_t)v25, (unsigned __int8 *)&v24);
    sub_22E890024(v22, &v26);
    sub_22E903BEC(v25);
    return 0;
  }
  if (v4 == 13)
  {
    v16 = *(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    v17 = sub_22EB17F48(*a1, *(_QWORD *)(v16 + 64), &v27, 1, 0, 0, 0, 0);
    result = 0;
    if ((v17 & 1) == 0)
    {
      v18 = (*a1)[11];
      v19 = *(_QWORD *)(v16 + 64);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v21 = v20 & 0xFFFFFFFFFFFFFFF0;
      else
        v21 = sub_22EF6462C(v18, v19);
      return sub_22F36C604(v18, v16, v21);
    }
  }
  else
  {
    v23 = *(_QWORD *)(a3 + 48);
    if (v23)
      return v23 & 0xFFFFFFFFFFFFFFF0;
    else
      return sub_22EF6462C((*a1)[11], a3);
  }
  return result;
}

uint64_t sub_22E8C47DC(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t result;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  void *v31[2];
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v11 = v32;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (a4)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22F2F34EC(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_7;
    }
LABEL_16:
    v17 = *((_QWORD *)v13 + 3);
    v27 = v11;
    v31[0] = v11;
    v31[1] = (void *)0x200000000;
    v18 = *a1;
    v29 = 7;
    v30 = v17;
    sub_22EE7377C(v18, (uint64_t)&v29, (uint64_t)v31);
    v19 = *((_DWORD *)v13 + 5);
    v20 = *a1;
    v28 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22F2F34EC(a1, v17);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v11 = v27;
    }
    else
    {
      LODWORD(v22) = v19 - 1;
      if (v19)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0((_QWORD *)*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)v13 + 4), v22 | ((unint64_t)(v19 != 0) << 32));
      v24 = 0;
      v11 = v27;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v20 + 11992) = v28;
    if (v31[0] != v11)
      free(v31[0]);
    if ((v24 & 1) == 0)
      return 1;
LABEL_13:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22E8C4A6C(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_7:
      v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (a6 && *a2 != (unsigned __int8 *)v15)
        *a6 = 1;
      v16 = *(unsigned int *)(a5 + 8);
      if (v16 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v16) = v15;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  if (a6)
  {
    result = 0;
    *a6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22E8C4A6C(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  unsigned __int8 **v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22F2F34EC(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v19 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v19;
    v20 = 0;
    v21 = 0;
    goto LABEL_34;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v17 = HIDWORD(v16);
    v18 = v16;
    v19 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v19;
    v20 = v18;
    v21 = v17;
LABEL_34:
    sub_22F002D50(v19, v20, 0, 0, v21);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22F2F34EC(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = (unsigned __int8 **)(v35 + 48);
  if (v34)
    v37 = v36;
  else
    v37 = (unsigned __int8 **)(v4 + 40);
  v15 = 1;
  if ((sub_22E8C47DC(a1, v37, *((_DWORD *)v4 + 8), 1, (uint64_t)&v53, &v50) & 1) != 0)
    goto LABEL_63;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_63;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_62;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_62:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_63:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22E8C4F88(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20[10];

  v20[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v7 + v8;
  v19 = 0;
  if (v9 < 9)
  {
    if (!(_DWORD)v9)
    {
      v17 = 0;
      v15 = 0;
      return sub_22ED51D60(*a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), v7, v8, *(_QWORD *)(a2 + 80), v17, *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v20, v15, *(_DWORD *)(a2 + 44));
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v10 = 0;
  LOBYTE(v11) = 0;
  do
  {
    while (1)
    {
      v12 = sub_22F2F34EC(a1, *(_QWORD *)(v6 + 8 * v10));
      if (v12 >= 2)
        break;
      v11 = 1;
      if (v9 - 1 == v10++)
        return v11;
    }
    v13 = v12;
    v14 = v19;
    if (v19 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v19;
    }
    v20[v14] = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = ++v19;
    ++v10;
  }
  while (v9 != v10);
  if ((v11 & 1) == 0)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 20);
    v17 = v8 + v7;
    return sub_22ED51D60(*a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), v7, v8, *(_QWORD *)(a2 + 80), v17, *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v20, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22E8C5158(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v7 = *(_QWORD *)(v4 + 56);
    v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
      v8 = (uint64_t *)v8[4];
    if (!sub_22F2F7B28(a1, v8))
      return 1;
    v9 = sub_22E8C60CC((uint64_t)a1);
    if (!v9)
      return 1;
    v4 = v9;
    if ((*(_BYTE *)(v9 + 28) & 0x80) != 0)
      return 1;
  }
  v5 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F2FFD08((uint64_t)a1, *(_DWORD *)(a2 + 8), v4, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22E8C5214(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22F2FC7D4(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22F2FC7D4(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22F2FC7D4(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22F2FC7D4(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = v8;
  v10 = sub_22F2F34EC(a1, *(_QWORD *)(v2 + 48));
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL), 0);
  v11 = v10;
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v11 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v12 = sub_22F2F34EC(a1, *(_QWORD *)(v2 + 56));
  v13 = v12;
  if ((v12 & 1) != 0)
    return 1;
  if ((v12 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v13 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v12 & 0xFFFFFFFFFFFFFFFELL));
  v14 = sub_22F2FC7D4(a1, *(_QWORD *)(v2 + 64), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v16 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v17 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v18 = v9 & 0xFFFFFFFFFFFFFFFELL;
  v19 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v21 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v22 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v16, v17, v18, v19, v13 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
  if ((v22 & 1) != 0 && *(_QWORD *)(v2 + 64) != v21)
  {
    sub_22EA2BABC(*a1, *(_QWORD *)(v21 + 8));
    return 1;
  }
  v24 = sub_22F2FC7D4(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v24 & 1) != 0)
    return 1;
  v27 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
  if ((v22 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v27)
  {
    v26 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v16, v17, v18, v19, v20, v21, *(_DWORD *)(v2 + 88));
    if ((v26 & 1) != 0)
      return 1;
    v25 = v26 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v25 == v2)
    return v2;
  return sub_22ED33C64(*a1, v25, v27);
}

uint64_t sub_22E8C5454(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22F2FD5B4(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v12 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = 1;
    while (1)
    {
      v8 = sub_22E8C5158((_QWORD **)a1, *v6);
      if ((v8 & 1) != 0)
        break;
      v9 = v12;
      if (v12 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v12;
      }
      v13[v9] = v8 & 0xFFFFFFFFFFFFFFFELL;
      v10 = ++v12;
      ++v6;
      if (!--v5)
        return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v13, v10);
    }
  }
  else
  {
    v10 = 0;
    return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v13, v10);
  }
  return v7;
}

uint64_t sub_22E8C559C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22E8C4A6C(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v19 = *(_QWORD *)(a2 + 56);
    if (v19)
    {
      v26 = sub_22F2FC7D4(a1, v19, 0);
      if ((v26 & 1) != 0)
        goto LABEL_37;
      *((_QWORD *)&v32 + 1) = v26 & 0xFFFFFFFFFFFFFFFELL;
    }
    v20 = *(_QWORD *)(a2 + 48);
    if (v20)
    {
      v27 = sub_22F2FC7D4(a1, v20, 0);
      if ((v27 & 1) != 0)
        goto LABEL_37;
      *(_QWORD *)&v32 = v27 & 0xFFFFFFFFFFFFFFFELL;
    }
    v21 = *(_QWORD *)(a2 + 96);
    if (v21)
    {
      v28 = sub_22F2FC7D4(a1, v21, 0);
      if ((v28 & 1) != 0)
        goto LABEL_37;
      *(_QWORD *)&v35 = v28 & 0xFFFFFFFFFFFFFFFELL;
    }
    v22 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 64));
    if ((v22 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v33 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v23 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 72));
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v33 + 1) = v23 & 0xFFFFFFFFFFFFFFFELL;
    v24 = *(_QWORD *)(a2 + 88);
    if (!v24)
      goto LABEL_19;
    v25 = sub_22F2FC7D4(a1, v24, 0);
    if ((v25 & 1) == 0)
    {
      *((_QWORD *)&v34 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_19;
    }
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
    && (sub_22F31B2A0((uint64_t)v31) & 1) == 0)
  {
    goto LABEL_37;
  }
LABEL_19:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v18 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v18)
    v10 = v18;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22E8C5894(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = 0x400000000;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v6 = &v5[*(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v4)
      v5 = (uint64_t *)(a2 + 8);
    else
      v5 = 0;
    if (v4)
      v6 = (uint64_t *)(a2 + 16);
    else
      v6 = 0;
  }
  if (v5 == v6)
  {
    v10 = 0;
    v11 = v20;
LABEL_20:
    v13 = *(_DWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 20);
    v14 = sub_22EA2D7B4((_QWORD *)*a1, v11, v10);
    v7 = sub_22ED2B2F8(*a1, v14, v13, v12);
  }
  else
  {
    v7 = 1;
    while (1)
    {
      v8 = *v5;
      v16 = *v5;
      v17 = 0;
      if (sub_22E793870(a1 + 1, &v16, &v17)
        && v17 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v8 = v17[1];
      }
      if (!v8)
        break;
      v9 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v19;
      }
      *((_QWORD *)v18 + v9) = v8;
      v10 = (v19 + 1);
      LODWORD(v19) = v19 + 1;
      if (++v5 == v6)
      {
        v11 = (unint64_t *)v18;
        goto LABEL_20;
      }
    }
  }
  if (v18 != v20)
    free(v18);
  return v7;
}

uint64_t sub_22E8C5A24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v9 = *(_QWORD *)(a2 + 16);
  v10 = v9 ? *(_QWORD *)(v9 + 8) : 0;
  sub_22F2FFD88((uint64_t)a1, *(_DWORD *)(a2 + 4), v10, *(_QWORD *)(a2 + 24), 0, (uint64_t)&v20);
  if ((_BYTE)v21)
    return 1;
  v11 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
    return 1;
  v12 = *a1;
  v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v11 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  v6 = 1;
  v16 = sub_22EBCF22C(v12, v13, v15, 1, 0);
  if (!*(_QWORD *)(a2 + 32) || (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
    v18 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 40), 0);
    if ((v18 & 1) == 0)
    {
      v19 = *(_DWORD *)(a2 + 4);
      v22 = v20;
      v23 = v21;
      return sub_22ED31008(*a1, v19, *(_DWORD *)(a2 + 48), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v22, v17, *(_DWORD *)(a2 + 52), (_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL));
    }
    return 1;
  }
  return v6;
}

uint64_t sub_22E8C5B90(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  unsigned __int8 v35;
  unsigned __int8 v36;

  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22F2FC7D4(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a2;
  if ((v7 & 0x600) == 0x200)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0uLL;
  }
  else
  {
    if ((v7 & 0x1000) != 0)
    {
      v20 = (v7 >> 13) & 1;
      v31 = *(_QWORD *)&a2[4 * v20 + 8];
      if (v31)
        v19 = *(_QWORD *)(v31 + 8);
      else
        v19 = 0;
    }
    else
    {
      v19 = 0;
      LODWORD(v20) = (v7 >> 13) & 1;
    }
    sub_22F2FFD88(a1, *((_DWORD *)a2 + 1), v19, *(_QWORD *)&a2[4 * v20 + 8 + 4 * ((v7 >> 12) & 1)], (v7 & 0x700) == 256, (uint64_t)&v33);
    if (v34)
      return 1;
    v10 = v33;
    v8 = v35;
    v9 = v36;
    LODWORD(v7) = *a2;
  }
  v32 = v10;
  v11 = (v7 & 0x700) != 0x100 || v8 == 0;
  v12 = v11;
  if (v11 || v9)
  {
    v13 = sub_22F2FC7D4(a1, *(_QWORD *)&a2[4 * ((v7 >> 12) & 1) + 12 + 4 * ((v7 >> 13) & 1)], 0);
    if ((v13 & 1) != 0)
      return 1;
    if (v9)
      v21 = v12;
    else
      v21 = 1;
    if (v21 != 1)
    {
      v22 = 0;
      goto LABEL_34;
    }
  }
  else
  {
    v13 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)]);
    v15 = v14;
    *(_BYTE *)v13 = 19;
    if (byte_255E04EB3)
    {
      v16 = sub_22F0D3748(19);
      ++*((_DWORD *)v16 + 2);
    }
    *(_WORD *)v13 &= ~0x100u;
    *(_DWORD *)(v13 + 4) = v15;
  }
  v17 = *a2;
  if ((v17 & 0x800) != 0)
    v18 = *(_QWORD *)&a2[4 * ((v17 >> 13) & 1) + 16 + 4 * ((v17 >> 12) & 1)];
  else
    v18 = 0;
  v22 = sub_22F2FC7D4(a1, v18, 0);
  if ((v22 & 1) != 0)
    return 1;
LABEL_34:
  v23 = *a2;
  v24 = (v23 >> 8) & 7;
  v25 = *((_DWORD *)a2 + 1);
  v26 = *((_DWORD *)a2 + 2);
  v27 = *((_DWORD *)a2 + 3);
  if ((v23 & 0x800) != 0)
    v28 = *(_DWORD *)&a2[4 * ((v23 >> 12) & 1) + 20 + 4 * ((v23 >> 13) & 1)];
  else
    v28 = 0;
  v29 = (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  v30 = *(_QWORD *)a1;
  v33 = v32;
  v34 = 0;
  v35 = v8;
  v36 = v9;
  return sub_22ED2D6D0(v30, v25, v24, v26, v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v33, v27, (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFFELL), v28, v29);
}

uint64_t sub_22E8C5E08(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 16;
  v5 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v17 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
  v7 = *(unsigned __int16 *)(a2 + 12);
  if (!*(_WORD *)(a2 + 12))
  {
    v12 = 0;
    if ((v6 & 0x10000) != 0)
    {
LABEL_13:
      v13 = *(_QWORD *)(v4 + 8 * ((unsigned __int16)v6 + 1));
      if (v13)
      {
        v15 = sub_22F2FC7D4(a1, v13, 0);
        if ((v15 & 1) != 0)
          return 1;
        v12 = v17;
        v14 = v15 & 0xFFFFFFFFFFFFFFFELL;
        return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v18, v12, v14);
      }
    }
LABEL_14:
    v14 = 0;
    return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v18, v12, v14);
  }
  v8 = (_QWORD *)(a2 + 24);
  v9 = 1;
  while (1)
  {
    v10 = sub_22F2FC7D4(a1, *v8, 0);
    if ((v10 & 1) != 0)
      return v9;
    v11 = v17;
    if (v17 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v17;
    }
    v18[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
    v12 = ++v17;
    ++v8;
    if (!--v7)
    {
      v6 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v6 & 0x10000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
}

uint64_t sub_22E8C5FBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22F2FC7D4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22E8C9A20(a1, *(_DWORD *)(a2 + 32), v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22E8C6048(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;

  v4 = sub_22F2FD5B4(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = *(_BYTE **)(a2 + 24);
  v7 = *v6 == 95 ? sub_22F2FF770(a1, (uint64_t)v6) : sub_22F2FF704(a1, (uint64_t)v6);
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22ED3765C(*a1, *(_BYTE *)(a2 + 8), *(_DWORD *)(a2 + 12), v4 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22E8C60CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_22EACE428();
  if (v2)
    sub_22EFCCFA0(*(_QWORD *)(*(_QWORD *)a1 + 216), v2);
  return v2;
}

uint64_t sub_22E8C6118(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  uint64_t v18;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28[26];

  if (*(_BYTE *)a6 != 12)
    return sub_22ED3242C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 1);
  v18 = *(_QWORD *)(a6 + 8);
  if ((v18 & 1) != 0)
    return sub_22ED3242C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 1);
  if (!v18 || (*(_DWORD *)(v18 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
    return sub_22ED3242C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 1);
  if ((*(_DWORD *)(v18 + 28) & 0x80) != 0)
    return 1;
  v25 = a8;
  v26 = a4;
  v21 = sub_22EFBC5B4(v18);
  a8 = v25;
  a4 = v26;
  if ((*(_BYTE *)(v21 + 1) & 0x80) == 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 32)
  {
    if (!v26)
      return sub_22ED3169C(*a1, a2, a11, v21, a12);
    v22 = (_QWORD *)*a1;
    sub_22F0D5A50(v26);
    sub_22E8FCA40(v22, v23, 0xFFAu, 0, (uint64_t)v28);
    sub_22F0D4E74(v26);
    v27 = v24;
    sub_22E8906A0((uint64_t)v28, &v27);
    sub_22E903BEC(v28);
    return 1;
  }
  return sub_22ED3242C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 1);
}

uint64_t sub_22E8C629C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  _BYTE *v23[9];

  v23[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = a2 + 4;
  v8 = *a2;
  v21 = (uint64_t)&a2[2 * (v8 >> 8) + 4];
  v9 = 2 * (v8 >> 8);
  while (v9 * 4)
  {
    v10 = *(_BYTE **)&a2[v9 + 2];
    v9 -= 2;
    if (*v10 != 19)
    {
      v22 = 0;
      if (v8 < 0x100)
      {
        v11 = 0;
        goto LABEL_26;
      }
      goto LABEL_9;
    }
  }
  if (v8 <= 0xFF)
  {
    v11 = 0;
    goto LABEL_26;
  }
  v10 = (_BYTE *)v7[(*a2 >> 8) - 1];
  v22 = 0;
LABEL_9:
  LOBYTE(v12) = 0;
  do
  {
    while (1)
    {
      v13 = (_BYTE *)*v7;
      v14 = a3;
      v15 = (a3 & (*v7 == (_QWORD)v10)) != 0 ? 2 : 0;
      v16 = sub_22F2FC7D4(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      v12 = 1;
      v18 = *v13 == 12 || v7 == (_QWORD *)v21;
      a3 = v14;
      if (v18)
        goto LABEL_27;
    }
    v17 = v22;
    if (v22 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v22;
    }
    v23[v17] = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v11 = ++v22;
    ++v7;
    a3 = v14;
  }
  while (v7 != (_QWORD *)v21);
  if ((v12 & 1) != 0)
  {
    v12 = 1;
    goto LABEL_27;
  }
LABEL_26:
  v12 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, a2[1], a2[2], v23, v11);
LABEL_27:
  v19 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v19 + 360);
  return v12;
}

__n128 sub_22E8C64D0@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  __n128 result;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2->n128_u64[0];
  if (!a2->n128_u64[0])
    goto LABEL_18;
  v7 = v4 & 7;
  v8 = v7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      v9 = 3;
    v8 = v9 | 8;
  }
  if (((1 << v8) & 0xE47) != 0)
  {
    result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = a2[1].n128_u64[0];
    return result;
  }
  if (v8 != 8)
  {
    if ((v7 - 3) > 2)
    {
      v14 = 0;
    }
    else
    {
      v13 = (uint64_t *)a2[1].n128_u64[0];
      if (v13)
      {
        v20 = sub_22F2F7B28((_QWORD **)a1, v13);
        if (v20)
        {
          v18 = v20;
          v16 = *v20 & 7 | *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFFF0) + 8);
          v17 = *(_QWORD *)(*(_QWORD *)a1 + 88);
LABEL_33:
          v21 = sub_22EFC6D44((_QWORD *)(v17 + 15224), v7, v16);
          result = *a2;
          *a3 = *a2;
          a3->n128_u64[0] = v21;
          a3[1].n128_u64[0] = (unint64_t)v18;
          return result;
        }
LABEL_18:
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        return result;
      }
      v14 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    v15 = sub_22F2FAD70(a1, v14);
    if (v15 > 0xF)
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8) | v15 & 7;
      v17 = *(_QWORD *)(*(_QWORD *)a1 + 88);
      if (v7 == 7)
      {
        v18 = 0;
        v19 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v19 >= 3)
          v19 = 3;
        v7 = v19 | 8;
      }
      else
      {
        v18 = 0;
      }
      goto LABEL_33;
    }
    goto LABEL_18;
  }
  if ((~(_BYTE)v4 & 7) != 0)
    goto LABEL_13;
  v11 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if (v11 >= 3)
    v11 = 3;
  if (v11)
LABEL_13:
    v12 = 0;
  else
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  v22 = v12;
  v23 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v22, &v23))
  {
    if (v23 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      v12 = *(_QWORD *)(v23 + 8);
  }
  if (!v12)
    goto LABEL_18;
  *a3 = *a2;
  a3[1].n128_u64[0] = a2[1].n128_u64[0];
  a3->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 15224), v12);
  return result;
}

uint64_t sub_22E8C66D8(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned __int32 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  __n128 v24;
  unint64_t v25;
  __n128 v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x24BDAC8D0];
  v28 = v30;
  v29 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (v4)
  {
    v7 = *v4;
    v6 = (__n128 **)(v4 + 4);
    v5 = v7;
    if (v7 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_6:
      v8 = 8 * v5;
      while (1)
      {
        v9 = *v6;
        if (*v6)
        {
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = v9->n128_u32[2];
          sub_22F2FFE8C(a1, v9);
          v12 = v11;
          v13 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v13);
          if (!v12)
            goto LABEL_12;
          v14 = v29;
          if (v29 >= (unint64_t)HIDWORD(v29))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = v29;
          }
          *((_QWORD *)v28 + v14) = v12;
        }
        else
        {
          v10 = v29;
          if (v29 >= (unint64_t)HIDWORD(v29))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v29;
          }
          *((_QWORD *)v28 + v10) = 0;
        }
        LODWORD(v29) = v29 + 1;
LABEL_12:
        ++v6;
        v8 -= 8;
        if (!v8)
          goto LABEL_18;
      }
    }
    if ((_DWORD)v5)
      goto LABEL_6;
LABEL_18:
    v15 = (unsigned int *)a2[1].n128_u64[1];
    if (v15 && *((_BYTE *)v15 + 8) && *(_QWORD *)&v15[2 * *v15 + 4 + 2 * v15[1]])
    {
      sub_22EC84DA0(*a1, a2->n128_i32[2]);
      v18 = *a1;
      sub_22E905168(*a1, 0);
      v19 = a2->n128_u32[2];
      if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
      {
        i = *(_QWORD *)(a2[1].n128_u64[1]
                      + 8 * *(unsigned int *)a2[1].n128_u64[1]
                      + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                      + 16);
      }
      else
      {
        for (i = *(_QWORD *)(a2[1].n128_u64[1]
                            + 8 * *(unsigned int *)a2[1].n128_u64[1]
                            + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                            + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
          ;
      }
      v21 = sub_22F2FC7D4(a1, i, 0);
      if (v21 >= 2
        && sub_22F4219DC(a2->n128_u32[2])
        && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
      {
        v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
      --*(_QWORD *)(v22 + 360);
      if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v28, v29) & 1) != 0)
        goto LABEL_30;
    }
  }
  else
  {
    v5 = 0;
  }
  if (v5 != v29)
  {
LABEL_30:
    v17 = 1;
    goto LABEL_31;
  }
  v26.n128_u64[0] = 0;
  v26.n128_u32[2] = 0;
  v27 = 0;
  v16 = a2->n128_u32[2];
  if (v16 == 9)
  {
    v26 = a2[2];
    v27 = a2[3].n128_u64[0];
    sub_22E8C64D0((uint64_t)a1, &v26, &v24);
    v26 = v24;
    v27 = v25;
  }
  v17 = sub_22EC87DEC();
LABEL_31:
  if (v28 != v30)
    free(v28);
  return v17;
}

_DWORD *sub_22E8C6A50(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22F2F34EC(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22E8C6BC8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v14 = sub_22F2F34EC(a1, v4);
    if ((v14 & 1) != 0)
      return 0;
    v5 = v14 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v5 = 0;
  }
  v15 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  if (v6)
  {
    v7 = (_QWORD *)(a2 + 40);
    v8 = 8 * v6;
    while (1)
    {
      v9 = sub_22F2F34EC(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v15;
      }
      v16[v10] = (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      v11 = ++v15;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22ECA9A04(*a1, v5, v16, v11, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v11 = 0;
    return sub_22ECA9A04(*a1, v5, v16, v11, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

_DWORD *sub_22E8C6D4C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22E8C6E98(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22E8C6FE4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v14 = sub_22F2F34EC(a1, v6);
    if ((v14 & 1) != 0)
      return 0;
    v7 = v14 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v7 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    while (1)
    {
      v9 = sub_22F2F34EC(a1, *v4);
      if ((v9 & 1) != 0)
        break;
      v10 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v15;
      }
      v16[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v15;
      ++v4;
      v8 -= 8;
      if (!v8)
        return sub_22ECA67B4(*a1, v7, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v11, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v11 = 0;
  return sub_22ECA67B4(*a1, v7, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v11, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22E8C7178(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22E8C72C4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22F2F34EC(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22E8C7410(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

unsigned int *sub_22E8C7564(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22E8C76BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0]
      || (sub_22E8C64D0((uint64_t)a1, &v33, (__n128 *)v42), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22E8C7AF8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22E8C7C44(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22F2F34EC(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22F2F34EC(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22E8C7DD8(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22E8C7F30(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22E8C8088(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22F2F34EC(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22E8C8218(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22E8C8364(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22E8C84B0(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0]
      && (sub_22E8C64D0((uint64_t)a1, &v31, (__n128 *)v40), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36)
                  && v36 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
                {
                  v20 = v36[1];
                }
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

_DWORD *sub_22E8C88F4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22E8C8A40(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v14;
  _DWORD *v15[5];

  v15[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      if (*v5)
      {
        v11 = sub_22F2F34EC(a1, *v5);
        if ((v11 & 1) != 0)
          return 0;
        v7 = v11 & 0xFFFFFFFFFFFFFFFELL;
        v9 = v14;
        v8 = (_DWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v9 = v14;
      }
      if (v9 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v14;
        v8 = (_DWORD *)v7;
      }
      v15[v9] = v8;
      v10 = ++v14;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA137C(*a1, v15, v10, *a2, a2[3], a2[1]);
    }
  }
  v10 = 0;
  return sub_22ECA137C(*a1, v15, v10, *a2, a2[3], a2[1]);
}

uint64_t sub_22E8C8BA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0]
      || (sub_22E8C64D0((uint64_t)a1, &v31, (__n128 *)v40), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

unsigned int *sub_22E8C8FE0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22E8C9138(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22F2F34EC(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22E8C9290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5, uint64_t a6)
{
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD **v24;
  _DWORD **v25;
  _DWORD *v26;
  int v27;
  BOOL v28;
  _DWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  _DWORD **v44;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49[2];
  _QWORD v50[10];

  v50[8] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a3 + 12) < v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 16);
  }
  if (v11)
  {
    v12 = 8 * v11;
    v13 = (_QWORD *)(a2 + 104);
    do
    {
      v14 = sub_22F2F34EC(a1, *v13);
      if ((v14 & 1) != 0)
        return 1;
      v15 = *(unsigned int *)(a3 + 8);
      if (v15 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14 & 0xFFFFFFFFFFFFFFFELL;
      ++*(_DWORD *)(a3 + 8);
      ++v13;
      v12 -= 8;
    }
    while (v12);
  }
  v16 = *(_QWORD *)(a2 + 40);
  if (v16)
  {
    v17 = sub_22E8C1D88((uint64_t *)a1, v16, *(void **)(a2 + 48), 0, 0);
    v19 = a5;
    if (!v17)
      return 1;
    v20 = v17;
    v21 = v18;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v19 = a5;
  }
  sub_22E8ACE30(a4, v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  *v19 = *(__n128 *)(a2 + 56);
  v19[1].n128_u64[0] = v22;
  if (v19->n128_u64[0])
  {
    sub_22E8C64D0(a1, v19, (__n128 *)v49);
    *v19 = *(__n128 *)v49;
    v19[1].n128_u64[0] = v50[0];
    if (!v19->n128_u64[0])
      return 1;
  }
  v23 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v23)
  {
    v24 = (_DWORD **)(a2 + 104 + 8 * v23);
    v46 = (uint64_t *)(a4 + 8);
    v25 = &v24[v23];
    v44 = v25;
    do
    {
      v26 = *v24;
      if (*v24)
      {
        v49[0] = v50;
        v49[1] = (void *)0x800000000;
        v27 = *(unsigned __int8 *)v26;
        v28 = v27 == 211;
        if (v27 == 211)
          v29 = v26;
        else
          v29 = 0;
        v30 = v29 + 16;
        if (v28)
          v31 = v30;
        else
          v31 = v26 + 20;
        v32 = v26[1];
        if ((_DWORD)v32)
        {
          v33 = 8 * v32;
          do
          {
            v34 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
            v47 = v34;
            v48 = 0;
            if (sub_22E793870((uint64_t *)(a1 + 8), &v47, &v48)
              && v48 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
            {
              v34 = *(_QWORD *)(v48 + 8);
            }
            v35 = *(unsigned int *)(v34 + 28);
            v32 = LODWORD(v49[1]);
            if (LODWORD(v49[1]) >= (unint64_t)HIDWORD(v49[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v32 = LODWORD(v49[1]);
            }
            *((_QWORD *)v49[0] + v32) = (v35 >> 13) & 3 | v34;
            LODWORD(v32) = ++LODWORD(v49[1]);
            ++v31;
            v33 -= 8;
          }
          while (v33);
          v25 = v44;
          v19 = a5;
        }
        v36 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        if (*v46)
        {
          v37 = sub_22F0ABC50(v46, *(_QWORD *)(*(_QWORD *)a1 + 88));
          v38 = v40;
          LODWORD(v32) = v49[1];
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        v41 = sub_22F0605AC(v36, 0, v37, v38, (uint64_t)v19, 1, (*v26 >> 20) & 1, v49[0], (uint64_t)v49[0] + 8 * v32);
        v42 = *(unsigned int *)(a6 + 8);
        if (v42 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v42 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v42) = v41;
        ++*(_DWORD *)(a6 + 8);
        if (v49[0] != v50)
          free(v49[0]);
      }
      else
      {
        v39 = *(unsigned int *)(a6 + 8);
        if (v39 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v39 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v39) = 0;
        ++*(_DWORD *)(a6 + 8);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  return 0;
}

uint64_t sub_22E8C9658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5, uint64_t a6)
{
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD **v24;
  _DWORD **v25;
  _DWORD *v26;
  int v27;
  BOOL v28;
  _DWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  _DWORD **v44;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49[2];
  _QWORD v50[10];

  v50[8] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a3 + 12) < v11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 16);
  }
  if (v11)
  {
    v12 = 8 * v11;
    v13 = (_QWORD *)(a2 + 136);
    do
    {
      v14 = sub_22F2F34EC(a1, *v13);
      if ((v14 & 1) != 0)
        return 1;
      v15 = *(unsigned int *)(a3 + 8);
      if (v15 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14 & 0xFFFFFFFFFFFFFFFELL;
      ++*(_DWORD *)(a3 + 8);
      ++v13;
      v12 -= 8;
    }
    while (v12);
  }
  v16 = *(_QWORD *)(a2 + 40);
  if (v16)
  {
    v17 = sub_22E8C1D88((uint64_t *)a1, v16, *(void **)(a2 + 48), 0, 0);
    v19 = a5;
    if (!v17)
      return 1;
    v20 = v17;
    v21 = v18;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v19 = a5;
  }
  sub_22E8ACE30(a4, v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  *v19 = *(__n128 *)(a2 + 56);
  v19[1].n128_u64[0] = v22;
  if (v19->n128_u64[0])
  {
    sub_22E8C64D0(a1, v19, (__n128 *)v49);
    *v19 = *(__n128 *)v49;
    v19[1].n128_u64[0] = v50[0];
    if (!v19->n128_u64[0])
      return 1;
  }
  v23 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v23)
  {
    v24 = (_DWORD **)(a2 + 136 + 8 * v23);
    v46 = (uint64_t *)(a4 + 8);
    v25 = &v24[v23];
    v44 = v25;
    do
    {
      v26 = *v24;
      if (*v24)
      {
        v49[0] = v50;
        v49[1] = (void *)0x800000000;
        v27 = *(unsigned __int8 *)v26;
        v28 = v27 == 211;
        if (v27 == 211)
          v29 = v26;
        else
          v29 = 0;
        v30 = v29 + 16;
        if (v28)
          v31 = v30;
        else
          v31 = v26 + 20;
        v32 = v26[1];
        if ((_DWORD)v32)
        {
          v33 = 8 * v32;
          do
          {
            v34 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
            v47 = v34;
            v48 = 0;
            if (sub_22E793870((uint64_t *)(a1 + 8), &v47, &v48)
              && v48 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
            {
              v34 = *(_QWORD *)(v48 + 8);
            }
            v35 = *(unsigned int *)(v34 + 28);
            v32 = LODWORD(v49[1]);
            if (LODWORD(v49[1]) >= (unint64_t)HIDWORD(v49[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v32 = LODWORD(v49[1]);
            }
            *((_QWORD *)v49[0] + v32) = (v35 >> 13) & 3 | v34;
            LODWORD(v32) = ++LODWORD(v49[1]);
            ++v31;
            v33 -= 8;
          }
          while (v33);
          v25 = v44;
          v19 = a5;
        }
        v36 = *(_QWORD *)(*(_QWORD *)a1 + 88);
        if (*v46)
        {
          v37 = sub_22F0ABC50(v46, *(_QWORD *)(*(_QWORD *)a1 + 88));
          v38 = v40;
          LODWORD(v32) = v49[1];
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        v41 = sub_22F0605AC(v36, 0, v37, v38, (uint64_t)v19, 1, (*v26 >> 20) & 1, v49[0], (uint64_t)v49[0] + 8 * v32);
        v42 = *(unsigned int *)(a6 + 8);
        if (v42 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v42 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v42) = v41;
        ++*(_DWORD *)(a6 + 8);
        if (v49[0] != v50)
          free(v49[0]);
      }
      else
      {
        v39 = *(unsigned int *)(a6 + 8);
        if (v39 >= *(unsigned int *)(a6 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v39 = *(unsigned int *)(a6 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v39) = 0;
        ++*(_DWORD *)(a6 + 8);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  return 0;
}

uint64_t sub_22E8C9A20(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  v7 = sub_22ED3169C(*a1, a2, a3, a4, a5);
  if ((v7 & 1) != 0)
    return 1;
  result = 1;
  if (a6)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (v9)
    {
      *(_QWORD *)(v9 + 24) = a6;
      return v9;
    }
  }
  return result;
}

uint64_t sub_22E8C9A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22E8C9D28(uint64_t *a1, int a2, unsigned int a3, unsigned __int8 *a4, unint64_t a5, _QWORD *a6)
{
  unsigned __int8 *v11;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[17];

  v38[16] = *MEMORY[0x24BDAC8D0];
  v11 = sub_22EFFBBCC(a4);
  v13 = (a2 - 37) < 2 && a6 != 0;
  if ((*(_DWORD *)a5 & 0x1C00) == 0xC00)
  {
    v14 = sub_22EFFBA54(a2);
    v15 = (_QWORD *)*a1;
    if ((v14 - 21) <= 0xA)
      return sub_22ED27A90(v15, 0, a3, v14, a5, (uint64_t)a6);
    v17 = sub_22EB19A28(v15);
    if ((v17 & 1) != 0)
      return 1;
    a5 = v17 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (a6 && (*(_DWORD *)a6 & 0x1C00) == 0xC00)
  {
    v18 = sub_22EB19A28(*a1);
    if ((v18 & 1) != 0)
      return 1;
    a6 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 == 43)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v19 + 17) & 4) == 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
    {
      v20 = *(_QWORD *)(a6[1] & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v20 + 17) & 4) == 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
      {
        v21 = *a1;
        sub_22F0D5A50((uint64_t)v11);
        return sub_22EB2AFE4(v21, (uint64_t (**)())a5, v22, a6, a3);
      }
    }
    goto LABEL_36;
  }
  if (a2 != 41)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF0);
    v25 = *(_DWORD *)(v24 + 16);
    if (((a6 != 0) & ~v13) != 0)
    {
      if ((v25 & 0x400) == 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
      {
        v27 = *(_QWORD *)(a6[1] & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v27 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          sub_22EFFBA54(a2);
          v35 = sub_22EB2D0B8();
          if ((v35 & 1) != 0)
            return 1;
          else
            return v35;
        }
      }
    }
    else if ((v25 & 0x400) == 0
           && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
           || a2 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)a5))
    {
      v26 = sub_22EFFA13C(a2, v13);
      return sub_22EB2EA08(*a1, a3, v26, a5);
    }
LABEL_36:
    v36 = v38;
    v37 = 0x1000000000;
    v28 = *v11;
    if (v28 == 211)
    {
      sub_22E3D0148((uint64_t)&v36, v11 + 64, &v11[8 * *((unsigned int *)v11 + 1) + 64]);
      v29 = (*(_DWORD *)v11 >> 19) & 1;
      v28 = *(_DWORD *)v11;
    }
    else
    {
      v30 = *((_QWORD *)v11 + 2);
      v29 = 0;
      if ((*(_DWORD *)(v30 + 28) & 0x7Eu) - 54 >= 4)
      {
        v38[0] = v30 | 3;
        LODWORD(v37) = 1;
      }
    }
    if (((a6 != 0) & ~v13) != 0)
    {
      if (a2 != 43)
      {
        v33 = sub_22EFFBA54(a2);
        v34 = sub_22ED1767C(*a1, a3, v33, (uint64_t)&v36, a5, (uint64_t)a6, v29, 1, 0);
        if ((v34 & 1) != 0)
          v23 = 1;
        else
          v23 = v34;
        goto LABEL_51;
      }
      if (v28 != 161)
        sub_22F0D5A50((uint64_t)v11);
      v32 = sub_22ED18C00();
    }
    else
    {
      v31 = sub_22EFFA13C(a2, v13);
      v32 = sub_22ED1677C(*a1, a3, v31, &v36, a5, v29);
    }
    v23 = v32;
LABEL_51:
    if (v36 != v38)
      free(v36);
    return v23;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a5 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    return sub_22ED1C570();
  return 1;
}

uint64_t sub_22E8CA220(uint64_t *a1, uint64_t a2, unsigned int a3, _BOOL8 a4, uint64_t a5, uint64_t *a6, int a7, int a8, unint64_t a9, unint64_t a10)
{
  uint64_t v17;
  unsigned __int16 v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  unsigned int v43[24];
  uint64_t v44;
  int v45;
  _QWORD *v46;

  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0
    || (v17 = *(_QWORD *)(a2 + 8), (a9 & 1) != 0) && (a9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
LABEL_4:
    if (a4)
      v18 = 36;
    else
      v18 = 25;
    return sub_22EBCD92C(*a1, a2, a3, v18, a5, a6, a7, a8, a9, a10);
  }
  v20 = v17 & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  if (!a4)
  {
    v22 = *(_QWORD *)(v21 + 8);
    goto LABEL_13;
  }
  if (v21 && *(_BYTE *)(v21 + 16) == 39)
  {
LABEL_11:
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_13:
    v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
    if (!v23 || *(_BYTE *)(v23 + 16) != 45)
      goto LABEL_4;
    goto LABEL_20;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v36 = a1;
    v37 = *(_QWORD *)(a2 + 8);
    v39 = a6;
    v24 = sub_22F10CF48(v21);
    v17 = v37;
    a6 = v39;
    a1 = v36;
    if (v24)
    {
      v21 = *(_QWORD *)v20;
      if (*(_BYTE *)(*(_QWORD *)v20 + 16) != 39)
      {
        v21 = sub_22F10CF48(v21);
        v17 = v37;
        a6 = v39;
        a1 = v36;
      }
      goto LABEL_11;
    }
  }
LABEL_20:
  v38 = v17;
  v40 = a6;
  if ((a9 & 1) != 0)
    v25 = 0;
  else
    v25 = (_QWORD *)(a9 & 0xFFFFFFFFFFFFFFFELL);
  v26 = a1;
  v44 = sub_22EFC6B40((_QWORD *)(*(_QWORD *)(*a1 + 88) + 15224), *v25 & 7 | *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFFF0) + 8));
  v45 = a10;
  sub_22EFC6D6C((uint64_t)&v46, v44);
  v27 = v40;
  v46 = v25;
  if (!v40)
    return sub_22EC225CC((_QWORD *)*v26, a2, v38, a3, a4, a5, 0, 0, (uint64_t)&v44, 0, 0, 0);
  v28 = *v40;
  v29 = *(_QWORD *)(*v40 & 0xFFFFFFFFFFFFFFF0);
  if (v29 && (*(_DWORD *)(v29 + 16) & 0xFE) == 0x2C
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
    && (v30 = sub_22F10CF48(v29), v27 = v40, v28 = *v40, v30))
  {
    sub_22E8ACD1C(a5, *(_QWORD *)(*v26 + 88), 0, v28, (uint64_t)(v27 + 1), a7);
    return sub_22EC225CC((_QWORD *)*v26, a2, v38, a3, a4, a5, 0, 0, (uint64_t)&v44, 0, 0, 0);
  }
  v31 = (_QWORD *)*v26;
  for (i = v28; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_41;
      v33 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v33 <= 0x39)
        break;
LABEL_36:
      if (sub_22F115668(i))
        v28 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_43;
    }
    if (v33 == 24)
      goto LABEL_42;
    if (v33 == 26)
      break;
    if (((1 << v33) & 0x20000000200003CLL) == 0)
      goto LABEL_36;
LABEL_41:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_41;
LABEL_42:
  v28 = i;
LABEL_43:
  v34 = sub_22F115668(v28);
  sub_22E8FCA40(v31, v34, 0xCEFu, 0, (uint64_t)v43);
  v42 = *v40;
  v35 = sub_22E8901B8((uint64_t)v43, &v42);
  v41 = (**(_DWORD **)(*v26 + 72) >> 8) & 1;
  sub_22E89519C(v35, (unsigned int *)&v41);
  sub_22E903BEC(v43);
  return 1;
}

uint64_t sub_22E8CA5A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 67 > 0xFFFFFFF8)
  {
    v7 = 80;
LABEL_7:
    a4 = *(_QWORD *)(a4 + v7);
    goto LABEL_8;
  }
  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v7 = 112;
    goto LABEL_7;
  }
LABEL_8:
  v8 = *(unsigned int *)(a1 + 88);
  if (!(_DWORD)v8)
    return sub_22F301748((_QWORD *)a1, a2, a3, a4, a5, a6, a7);
  v9 = *(_QWORD *)(a1 + 80) + 8;
  v10 = 16 * v8;
  while (*(_QWORD *)(v9 - 8) != a4)
  {
    v9 += 16;
    v10 -= 16;
    if (!v10)
      return sub_22F301748((_QWORD *)a1, a2, a3, a4, a5, a6, a7);
  }
  return *(_QWORD *)v9;
}

unint64_t sub_22E8CA618(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22E8C4A6C(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22E8CA788(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v34;
  uint64_t *v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v5 = a1;
  v6 = *a2;
  v7 = v6 == 211;
  if (v6 == 211)
    v8 = a2;
  else
    v8 = 0;
  v9 = v8 + 64;
  if (v7)
    v10 = v9;
  else
    v10 = a2 + 80;
  v11 = *((unsigned int *)a2 + 1);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)(a1 + 8);
    v13 = 1;
    v14 = &v10[v11];
    v36 = (uint64_t *)(a1 + 8);
    v34 = v14;
    while (1)
    {
      v15 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
      v40[0] = v15;
      v38 = 0;
      if (sub_22E793870(v12, v40, &v38))
      {
        v16 = v15;
        if (v38 != *(_QWORD *)(v5 + 8) + 16 * *(unsigned int *)(v5 + 24))
          v16 = *(_QWORD *)(v38 + 8);
        if (v16)
        {
LABEL_13:
          v38 = v16;
          if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x2D)
          {
            v17 = *(unsigned int *)(v16 + 56);
            if ((_DWORD)v17)
            {
              v18 = (unint64_t *)(v16 + 64);
              v19 = (unint64_t *)(v16 + 64 + 8 * v17);
              goto LABEL_20;
            }
            v27 = 1;
          }
          else
          {
            v18 = &v38;
            v19 = (unint64_t *)&v39;
            do
            {
LABEL_20:
              v20 = *v18;
              v21 = *(unsigned int *)(*v18 + 28);
              if (*v18)
                v22 = (*(_DWORD *)(*v18 + 28) & 0x7F) == 13;
              else
                v22 = 0;
              if (v22)
              {
                v24 = *(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFFFF8;
                if (v24)
                {
                  v25 = *(_DWORD *)(a4 + 16);
                  v26 = *(_DWORD *)(v24 + 28);
                  do
                  {
                    if (v25 >= *(_DWORD *)(a4 + 20))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v25 = *(_DWORD *)(a4 + 16);
                    }
                    *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v25) = (v26 >> 13) & 3 | v24;
                    v25 = *(_DWORD *)(a4 + 16) + 1;
                    *(_DWORD *)(a4 + 16) = v25;
                    *(_DWORD *)a4 = 2;
                    v24 = *(_QWORD *)(v24 + 72);
                    if (!v24)
                      break;
                    v26 = *(_DWORD *)(v24 + 28);
                  }
                  while ((v26 & 0x7E) == 0x2E);
                }
              }
              else
              {
                v23 = *(unsigned int *)(a4 + 16);
                if (v23 >= *(unsigned int *)(a4 + 20))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v23 = *(unsigned int *)(a4 + 16);
                }
                *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v23) = (v21 >> 13) & 3 | v20;
                ++*(_DWORD *)(a4 + 16);
                *(_DWORD *)a4 = 2;
              }
              ++v18;
            }
            while (v18 != v19);
            v27 = 0;
            v5 = a1;
            v12 = v36;
            v14 = v34;
          }
          v13 &= v27;
          goto LABEL_36;
        }
      }
      else
      {
        v16 = v15;
        if (v15)
          goto LABEL_13;
      }
      if ((*(_DWORD *)(v15 + 28) & 0x7E) != 0x2E)
      {
        *(_DWORD *)a4 = 0;
        *(_DWORD *)(a4 + 16) = 0;
        v30 = *(_QWORD *)(a4 + 88);
        if (v30)
        {
          v31 = sub_22EC6CBD0(v30);
          MEMORY[0x2348A0E9C](v31, 0x10E0C409F09D3C3);
        }
        *(_BYTE *)(a4 + 165) = 0;
        result = 1;
        *(_QWORD *)(a4 + 88) = 0;
        *(_QWORD *)(a4 + 96) = 0;
        return result;
      }
LABEL_36:
      if (++v10 == v14)
        goto LABEL_40;
    }
  }
  v13 = 1;
LABEL_40:
  if ((v13 & 1) == 0 || (a3 & 1) != 0)
  {
    sub_22EC561E4(a4);
    return 0;
  }
  else
  {
    sub_22E8FCA40(*(_QWORD **)v5, *((_DWORD *)a2 + 6), 0x13F5u, 0, (uint64_t)&v38);
    v37 = *a2 == 212;
    v28 = sub_22E894E38((uint64_t)&v38, (unsigned __int8 *)&v37);
    v40[0] = *((_QWORD *)a2 + 2);
    sub_22E894538(v28, v40);
    sub_22E903BEC((unsigned int *)&v38);
    return 1;
  }
}

BOOL sub_22E8CAA7C(uint64_t *a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;

  if (!a3)
    return 0;
  v7 = 8 * a3;
  do
  {
    v8 = *a2;
    v9 = **a2;
    if (v9)
    {
      if (v9 > 2)
        v10 = sub_22F30225C(a1, (uint64_t)v8);
      else
        v10 = sub_22E8CAB58(a1, v8);
    }
    else
    {
      v10 = (uint64_t)sub_22F3021FC(a1, (uint64_t)v8);
    }
    v11 = v10;
    v12 = v10 == 0;
    if (!v10)
      break;
    v13 = *(unsigned int *)(a4 + 8);
    if (v13 >= *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(unsigned int *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v13) = v11;
    ++*(_DWORD *)(a4 + 8);
    ++a2;
    v7 -= 8;
  }
  while (v7);
  return v12;
}

uint64_t sub_22E8CAB58(uint64_t *a1, int *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  char v20;

  v4 = a2[10];
  v5 = *((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFFCLL;
  if (v4 == 1)
  {
    v6 = v5 | 2;
  }
  else
  {
    v15 = sub_22F2F34EC(a1, v5);
    if (v15 >= 2)
    {
      v16 = *(_QWORD *)(*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
      v17 = (*(_DWORD *)(v16 + 16) & 0xFE00000u) < 0x8180001 || v16 == 0;
      if (!v17 && *(_DWORD *)(v16 + 16) == 11)
        v15 = sub_22EB19A28(*a1, (_DWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL));
    }
    if ((v15 & 1) != 0)
      return 0;
    v6 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  }
  LOBYTE(v19) = 0;
  v20 = 0;
  v7 = *((_QWORD *)a2 + 3);
  if (v7 > 7)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
    {
      v8 = v9 | 4;
      v19 = v9 | 4;
      goto LABEL_9;
    }
    if (v9)
    {
      sub_22F31A5DC((unint64_t *)&v19, v9);
      v8 = v19;
      goto LABEL_9;
    }
    return 0;
  }
  v8 = 0;
  v19 = 0;
LABEL_9:
  v20 = 1;
  v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *a2;
  v13 = a2[4];
  v14 = *a1;
  if ((v6 & 2) != 0 || !v11)
    return sub_22F332740(v14, v11, v12 == 1, v13, v8);
  else
    return sub_22EBCF54C(v14, v11, v12 == 1, v13, v8);
}

uint64_t sub_22E8CAC80(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t **v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t **v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t **v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  BOOL v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;

  if (!a2)
    return 1;
  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v4 == 38)
      return sub_22F302564(a1, a2);
    return 1;
  }
  switch(v4)
  {
    case 0:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 1:
      return (sub_22F302640(a1, a2) & 1) != 0;
    case 2:
      return (sub_22F302718(a1, a2) & 1) != 0;
    case 3:
      result = sub_22E8CAC80(a1);
      if (!(_DWORD)result)
        return result;
      v6 = *(_QWORD *)(a2 + 48);
      if (!v6)
        goto LABEL_10;
      v7 = *(unsigned int *)(v6 + 8);
      if (!(_DWORD)v7)
        goto LABEL_10;
      v8 = v6 + 16;
      while ((sub_22E8CCBB0(a1, v8) & 1) != 0)
      {
        v8 += 32;
        if (!--v7)
        {
LABEL_10:
          v9 = *(_DWORD *)(a2 + 28) & 0x7F;
          v10 = v9 > 0x39 || ((1 << v9) & 0x3F0003E01011066) == 0;
          if (v10 && (v9 - 70 <= 0xD ? (v132 = ((1 << (v9 - 70)) & 0x2803) == 0) : (v132 = 1), v132 && v9 - 19 > 4))
            v11 = 0;
          else
            v11 = sub_22EFCAE04(a2);
          result = sub_22E8CCCCC(a1, v11);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v13 = *v12;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v15 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
            }
            else
            {
              v15 = 0;
            }
            while (v13 != (uint64_t *)v15)
            {
              if ((sub_22E8CCD68(a1, *v13) & 1) == 0)
                return 0;
              ++v13;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 5:
      return (sub_22F302798(a1, a2) & 1) != 0;
    case 6:
      return (sub_22F302798(a1, a2) & 1) != 0;
    case 7:
      return (sub_22F302808(a1, a2) & 1) != 0;
    case 8:
      return (sub_22F3028A8(a1, a2) & 1) != 0;
    case 9:
      v65 = *(_QWORD *)(a2 + 48);
      v66 = (unint64_t *)(v65 & 0xFFFFFFFFFFFFFFF8);
      if ((v65 & 4) != 0 && v66)
      {
        if ((sub_22E8CC284(a1, *v66, (uint64_t)(v66 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E8CAC80(a1);
        if (!(_DWORD)result)
          return result;
      }
      v75 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v75)
        goto LABEL_126;
      for (i = 0; i != v75; ++i)
      {
        v77 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v78 = *(_DWORD *)(v77 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v78)
        {
          v79 = v77 + 16;
          v80 = 8 * v78;
          while ((sub_22E8CAC80(a1) & 1) != 0)
          {
            v79 += 8;
            v80 -= 8;
            if (!v80)
              goto LABEL_125;
          }
          return 0;
        }
LABEL_125:
        ;
      }
LABEL_126:
      v81 = *(_DWORD *)(a2 + 28) & 0x7F;
      v82 = v81 > 0x39 || ((1 << v81) & 0x3F0003E01011066) == 0;
      if (v82 && (v81 - 70 <= 0xD ? (v133 = ((1 << (v81 - 70)) & 0x2803) == 0) : (v133 = 1), v133 && v81 - 19 > 4))
        v83 = 0;
      else
        v83 = sub_22EFCAE04(a2);
      result = sub_22E8CCCCC(a1, v83);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *v84;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v87 = *(_QWORD *)v86 + 8 * *(unsigned int *)(v86 + 8);
        }
        else
        {
          v87 = 0;
        }
        while (v85 != (uint64_t *)v87)
        {
          if ((sub_22E8CCD68(a1, *v85) & 1) == 0)
            return 0;
          ++v85;
        }
      }
      return 1;
    case 10:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 11:
      return (sub_22F302808(a1, a2) & 1) != 0;
    case 12:
      return (sub_22F302798(a1, a2) & 1) != 0;
    case 13:
      return (sub_22F302974(a1, a2) & 1) != 0;
    case 14:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 15:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 16:
      return (sub_22F302A44(a1, a2) & 1) != 0;
    case 17:
      return (sub_22F302AB4(a1, a2) & 1) != 0;
    case 18:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 19:
      v67 = *(_QWORD *)(a2 + 112);
      if (!v67)
        goto LABEL_110;
      v68 = *(unsigned int *)(v67 + 8);
      if (!(_DWORD)v68)
        goto LABEL_110;
      v69 = (uint64_t *)(v67 + 16);
      v70 = 8 * v68;
      while ((sub_22F3032E4(a1, *v69) & 1) != 0)
      {
        ++v69;
        v70 -= 8;
        if (!v70)
        {
LABEL_110:
          result = sub_22E8CCCCC(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v72 = *v71;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v74 = *(_QWORD *)v73 + 8 * *(unsigned int *)(v73 + 8);
            }
            else
            {
              v74 = 0;
            }
            while (v72 != (uint64_t *)v74)
            {
              if ((sub_22E8CCD68(a1, *v72) & 1) == 0)
                return 0;
              ++v72;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      return (sub_22F302A44(a1, a2) & 1) != 0;
    case 21:
      return (sub_22F302A44(a1, a2) & 1) != 0;
    case 22:
      v33 = *(_QWORD *)(a2 + 112);
      if (!v33)
        goto LABEL_50;
      v34 = *(unsigned int *)(v33 + 8);
      if (!(_DWORD)v34)
        goto LABEL_50;
      v35 = (uint64_t *)(v33 + 16);
      v36 = 8 * v34;
      while ((sub_22F3032E4(a1, *v35) & 1) != 0)
      {
        ++v35;
        v36 -= 8;
        if (!v36)
        {
LABEL_50:
          v37 = (unint64_t *)sub_22F259044(a2);
          if (v37)
          {
            result = sub_22E8CC284(a1, *v37, (uint64_t)(v37 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v38 = *(_QWORD *)(a2 + 120);
          if (!v38)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v38 = *(_QWORD *)(a2 + 120);
          }
          if (v38 < 8)
            v39 = 0;
          else
            v39 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
          if (v39 == a2)
          {
            v142 = sub_22F2590A8(a2);
            v143 = sub_22F25910C(a2);
            v144 = sub_22F259178(a2);
            v145 = sub_22F2591DC(a2);
            if (v142 != v143 && v144 != v145)
            {
              v146 = v144 + 4;
              v147 = v142 + 8;
              do
              {
                if (v147 == v143)
                  break;
                v147 += 8;
                v10 = v146 == v145;
                v146 += 4;
              }
              while (!v10);
            }
          }
          result = sub_22E8CCCCC(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v129 = *v128;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v131 = *(_QWORD *)v130 + 8 * *(unsigned int *)(v130 + 8);
            }
            else
            {
              v131 = 0;
            }
            while (v129 != (uint64_t *)v131)
            {
              if ((sub_22E8CCD68(a1, *v129) & 1) == 0)
                return 0;
              ++v129;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v63 = *(_QWORD *)(a2 + 104);
      if (!v63)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v63 = *(_QWORD *)(a2 + 104);
      }
      if (v63 < 8)
        v64 = 0;
      else
        v64 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
      if (v64 == a2)
      {
        v121 = sub_22F259248(a2);
        v123 = v122;
        v124 = sub_22F2592CC(a2);
        if (v121 != v123 && v124 != v125)
        {
          v126 = v124 + 4;
          v127 = v121 + 8;
          do
          {
            if (v127 == v123)
              break;
            v127 += 8;
            v10 = v126 == v125;
            v126 += 4;
          }
          while (!v10);
        }
      }
      result = sub_22E8CCCCC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v89 = *v88;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v91 = *(_QWORD *)v90 + 8 * *(unsigned int *)(v90 + 8);
      }
      else
      {
        v91 = 0;
      }
      while (2)
      {
        if (v89 == (uint64_t *)v91)
          return 1;
        if ((sub_22E8CCD68(a1, *v89) & 1) != 0)
        {
          ++v89;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      return (sub_22F302B28(a1, a2) & 1) != 0;
    case 25:
      return (sub_22F302C10(a1, a2) & 1) != 0;
    case 26:
      return (sub_22F302CA8(a1, a2) & 1) != 0;
    case 27:
      return (sub_22F302D44(a1, a2) & 1) != 0;
    case 28:
      return (sub_22F302DF4(a1, a2) & 1) != 0;
    case 29:
      return (sub_22F302DF4(a1, a2) & 1) != 0;
    case 30:
      return (sub_22F302EA0(a1, a2) & 1) != 0;
    case 31:
      return (sub_22F302DF4(a1, a2) & 1) != 0;
    case 32:
      return (sub_22F302F50(a1, a2) & 1) != 0;
    case 33:
      return (sub_22F303030(a1, a2) & 1) != 0;
    case 34:
      return (sub_22F30311C(a1, a2) & 1) != 0;
    case 35:
      return (sub_22F303198(a1, a2) & 1) != 0;
    case 36:
      return (sub_22F303214(a1, a2) & 1) != 0;
    case 37:
      v22 = *(_QWORD *)(a2 + 184);
      if (!v22)
        goto LABEL_33;
      v23 = *(_DWORD *)(v22 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v23)
        goto LABEL_33;
      v24 = v22 + 16;
      v25 = 8 * v23;
      while ((sub_22E8CAC80(a1) & 1) != 0)
      {
        v24 += 8;
        v25 -= 8;
        if (!v25)
        {
LABEL_33:
          v26 = *(_QWORD *)(a2 + 192);
          v27 = *(unsigned int *)(v26 + 8);
          if ((_DWORD)v27)
          {
            v28 = v26 + 16;
            while ((sub_22E8CCBB0(a1, v28) & 1) != 0)
            {
              v28 += 32;
              if (!--v27)
                goto LABEL_37;
            }
            return 0;
          }
LABEL_37:
          result = sub_22F304F80(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E8CCCCC(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v30 = *v29;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v32 = *(_QWORD *)v31 + 8 * *(unsigned int *)(v31 + 8);
            }
            else
            {
              v32 = 0;
            }
            while (v30 != (uint64_t *)v32)
            {
              if ((sub_22E8CCD68(a1, *v30) & 1) == 0)
                return 0;
              ++v30;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v40 = *(_QWORD *)(a2 + 48);
      if (v40)
      {
        result = sub_22E8CC828(a1, v40 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22F302564(a1, a2);
      if (!(_DWORD)result)
        return result;
      v41 = *(_QWORD *)(a2 + 72);
      if (v41 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v42 = (unint64_t *)(v41 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v42)
          v42 = (unint64_t *)v42[1];
        result = sub_22E8CC284(a1, *v42, (uint64_t)(v42 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v43 = *(_DWORD *)(a2 + 28) & 0x7F, v43 <= 0x39) && ((1 << v43) & 0x3F0003E01011066) != 0
        || v43 - 70 <= 0xD && ((1 << (v43 - 70)) & 0x2803) != 0
        || v43 - 19 <= 4)
      {
        v44 = sub_22EFCAE04(a2);
      }
      else
      {
        v44 = 0;
      }
      result = sub_22E8CCCCC(a1, v44);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v46 = *v45;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v48 = *(_QWORD *)v47 + 8 * *(unsigned int *)(v47 + 8);
      }
      else
      {
        v48 = 0;
      }
      while (2)
      {
        if (v46 == (uint64_t *)v48)
          return 1;
        if ((sub_22E8CCD68(a1, *v46) & 1) != 0)
        {
          ++v46;
          continue;
        }
        break;
      }
      return 0;
    case 39:
      return (sub_22F3032E4(a1, a2) & 1) != 0;
    case 40:
      return (sub_22F30339C(a1, a2) & 1) != 0;
    case 41:
      return (sub_22F30339C(a1, a2) & 1) != 0;
    case 42:
      return (sub_22F30344C(a1, a2) & 1) != 0;
    case 43:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 44:
      return (sub_22F3034EC(a1, a2) & 1) != 0;
    case 45:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 46:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 47:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 48:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 49:
      result = sub_22F304FF8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v98 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v134 = v98 & 0xFFFFFFFFFFFFFFFCLL;
        v135 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v135 && (_DWORD)v135 != 3)
          v134 = *(_QWORD *)(v134 + 8);
        if ((sub_22E8AF4BC(a1, v134, 0) & 1) == 0)
          return 0;
      }
      else if ((v98 & 3) != 0 && (v98 & 3) != 3)
      {
        result = sub_22E8AF4BC(a1, v98 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v136 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (v136 <= 0x39 && ((1 << v136) & 0x3F0003E01011066) != 0
        || v136 - 70 <= 0xD && ((1 << (v136 - 70)) & 0x2803) != 0
        || v136 - 19 <= 4)
      {
        v137 = sub_22EFCAE04(a2);
      }
      else
      {
        v137 = 0;
      }
      result = sub_22E8CCCCC(a1, v137);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v139 = *v138;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v141 = *(_QWORD *)v140 + 8 * *(unsigned int *)(v140 + 8);
      }
      else
      {
        v141 = 0;
      }
      while (1)
      {
        if (v139 == (uint64_t *)v141)
          return 1;
        if ((sub_22E8CCD68(a1, *v139) & 1) == 0)
          break;
        ++v139;
      }
      return 0;
    case 50:
      result = sub_22F304FF8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v114 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v114 = *(_QWORD *)(v114 + 8);
        result = sub_22E8AF4BC(a1, v114, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v115 = *(_DWORD *)(a2 + 28) & 0x7F, v115 <= 0x39) && ((1 << v115) & 0x3F0003E01011066) != 0
        || v115 - 70 <= 0xD && ((1 << (v115 - 70)) & 0x2803) != 0
        || v115 - 19 <= 4)
      {
        v116 = sub_22EFCAE04(a2);
      }
      else
      {
        v116 = 0;
      }
      result = sub_22E8CCCCC(a1, v116);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v118 = *v117;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v120 = *(_QWORD *)v119 + 8 * *(unsigned int *)(v119 + 8);
      }
      else
      {
        v120 = 0;
      }
      while (2)
      {
        if (v118 == (uint64_t *)v120)
          return 1;
        if ((sub_22E8CCD68(a1, *v118) & 1) != 0)
        {
          ++v118;
          continue;
        }
        break;
      }
      return 0;
    case 51:
      result = sub_22F304FF8(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v107 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v107 = *(_QWORD *)(v107 + 8);
        result = sub_22E8AF4BC(a1, v107, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v108 = *(_DWORD *)(a2 + 28) & 0x7F, v108 <= 0x39) && ((1 << v108) & 0x3F0003E01011066) != 0
        || v108 - 70 <= 0xD && ((1 << (v108 - 70)) & 0x2803) != 0
        || v108 - 19 <= 4)
      {
        v109 = sub_22EFCAE04(a2);
      }
      else
      {
        v109 = 0;
      }
      result = sub_22E8CCCCC(a1, v109);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v111 = *v110;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v113 = *(_QWORD *)v112 + 8 * *(unsigned int *)(v112 + 8);
      }
      else
      {
        v113 = 0;
      }
      while (2)
      {
        if (v111 == (uint64_t *)v113)
          return 1;
        if ((sub_22E8CCD68(a1, *v111) & 1) != 0)
        {
          ++v111;
          continue;
        }
        break;
      }
      return 0;
    case 52:
      return (sub_22F30358C(a1, a2) & 1) != 0;
    case 53:
      return (sub_22F30358C(a1, a2) & 1) != 0;
    case 54:
      return (sub_22F30358C(a1, a2) & 1) != 0;
    case 55:
      return (sub_22F30358C(a1, a2) & 1) != 0;
    case 56:
      return (sub_22F30358C(a1, a2) & 1) != 0;
    case 57:
      return (sub_22F30358C(a1, a2) & 1) != 0;
    case 58:
      return (sub_22F3035F8(a1, a2) & 1) != 0;
    case 59:
      result = sub_22F304FF8(a1, a2);
      if (!(_DWORD)result)
        return result;
      v99 = *(_QWORD *)(a2 + 72);
      if (v99 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v100 = v99 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v100)
          v100 = *(_QWORD *)(v100 + 8);
        result = sub_22E8AF4BC(a1, v100, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v101 = *(_DWORD *)(a2 + 28) & 0x7F, v101 <= 0x39) && ((1 << v101) & 0x3F0003E01011066) != 0
        || v101 - 70 <= 0xD && ((1 << (v101 - 70)) & 0x2803) != 0
        || v101 - 19 <= 4)
      {
        v102 = sub_22EFCAE04(a2);
      }
      else
      {
        v102 = 0;
      }
      result = sub_22E8CCCCC(a1, v102);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v104 = *v103;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v106 = *(_QWORD *)v105 + 8 * *(unsigned int *)(v105 + 8);
      }
      else
      {
        v106 = 0;
      }
      while (2)
      {
        if (v104 == (uint64_t *)v106)
          return 1;
        if ((sub_22E8CCD68(a1, *v104) & 1) != 0)
        {
          ++v104;
          continue;
        }
        break;
      }
      return 0;
    case 60:
      return (sub_22F303690(a1, a2) & 1) != 0;
    case 61:
      return (sub_22F303728(a1, a2) & 1) != 0;
    case 62:
      return (sub_22F303690(a1, a2) & 1) != 0;
    case 63:
      return (sub_22F303690(a1, a2) & 1) != 0;
    case 64:
      return (sub_22F3037F4(a1, a2) & 1) != 0;
    case 65:
      return (sub_22F303924(a1, a2) & 1) != 0;
    case 66:
      v49 = *(_QWORD *)(a2 + 424);
      if (!v49)
        goto LABEL_80;
      v50 = *(_DWORD *)(v49 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v50)
        goto LABEL_80;
      v51 = v49 + 16;
      v52 = 8 * v50;
      break;
    case 67:
      return (sub_22F303A10(a1, a2) & 1) != 0;
    case 68:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 69:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 70:
      return (sub_22F303AB0(a1, a2) & 1) != 0;
    case 71:
      return (sub_22F303B20(a1, (unint64_t *)a2) & 1) != 0;
    case 72:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 73:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 74:
      return (sub_22F302974(a1, a2) & 1) != 0;
    case 75:
      return (sub_22F303B80(a1, a2) & 1) != 0;
    case 76:
      return (sub_22F303C94(a1, a2) & 1) != 0;
    case 77:
      return (sub_22F303D58(a1, a2) & 1) != 0;
    case 78:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 79:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 80:
      return (sub_22F3025B0(a1, a2) & 1) != 0;
    case 81:
      return (sub_22F303E38(a1, a2) & 1) != 0;
    case 82:
      return (sub_22F303EB4(a1, a2) & 1) != 0;
    case 83:
      v16 = *(_QWORD *)(a2 + 88);
      v17 = *(_BYTE **)(v16 + 19016);
      v18 = *(_BYTE **)(v16 + 19024);
      v19 = v18 - v17;
      if (v18 == v17)
      {
        v20 = 0;
        v21 = 0;
      }
      else
      {
        if (v19 < 0)
          abort();
        v20 = (char *)operator new(v18 - v17);
        memmove(v20, v17, v19);
        v21 = &v20[8 * (v19 >> 3)];
      }
      if (v21 - v20 == 8 && (*(_DWORD *)(*(_QWORD *)v20 + 28) & 0x7F) == 0x53)
      {
        operator delete(v20);
        result = sub_22E8CCCCC(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v20 != v21)
        {
          v92 = v20;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v92 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v92 + 28) & 0x7Fu) - 35 > 2
               || (v93 = *(_QWORD *)(*(_QWORD *)v92 + 128)) == 0
               || ((*(unsigned __int16 *)(v93 + 8) | (*(unsigned __int8 *)(v93 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E8CAC80(a1))
            {
              if (v20)
                operator delete(v20);
              return 0;
            }
            v92 += 8;
          }
          while (v92 != v21);
        }
        if (v20)
          operator delete(v20);
      }
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v95 = *v94;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v97 = *(_QWORD *)v96 + 8 * *(unsigned int *)(v96 + 8);
      }
      else
      {
        v97 = 0;
      }
      while (1)
      {
        if (v95 == (uint64_t *)v97)
          return 1;
        if ((sub_22E8CCD68(a1, *v95) & 1) == 0)
          break;
        ++v95;
      }
      return 0;
    default:
      return 1;
  }
  do
  {
    if ((sub_22E8CAC80(a1) & 1) == 0)
      return 0;
    v51 += 8;
    v52 -= 8;
  }
  while (v52);
LABEL_80:
  v53 = *(_QWORD *)(a2 + 432);
  v54 = *(unsigned int *)(v53 + 8);
  if ((_DWORD)v54)
  {
    v55 = v53 + 16;
    while ((sub_22E8CCBB0(a1, v55) & 1) != 0)
    {
      v55 += 32;
      if (!--v54)
        goto LABEL_84;
    }
    return 0;
  }
LABEL_84:
  result = sub_22F3050CC(a1, a2);
  if ((_DWORD)result)
  {
    v56 = *(_DWORD *)(a2 + 28) & 0x7F;
    v57 = v56 > 0x39 || ((1 << v56) & 0x3F0003E01011066) == 0;
    if (v57 && (v56 - 70 <= 0xD ? (v148 = ((1 << (v56 - 70)) & 0x2803) == 0) : (v148 = 1), v148 && v56 - 19 > 4))
      v58 = 0;
    else
      v58 = sub_22EFCAE04(a2);
    result = sub_22E8CCCCC(a1, v58);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v60 = *v59;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v62 = *(_QWORD *)v61 + 8 * *(unsigned int *)(v61 + 8);
        }
        else
        {
          v62 = 0;
        }
        while (v60 != (uint64_t *)v62)
        {
          if ((sub_22E8CCD68(a1, *v60) & 1) == 0)
            return 0;
          ++v60;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_22E8CC128(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22F303F6C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E8CC1C8(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E8CCBB0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E8CC1C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E8CC284(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_17;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_17:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22F304A24(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E8CC284(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  if (!a2)
    return 1;
  v4 = a2;
  result = 1;
  while (1)
  {
    v7 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if ((v4 & 0xF) == 0)
      break;
LABEL_4:
    if ((v7 & 0xFFFFFFFFFFFFFFF0) != 0)
      v8 = *(_QWORD *)((char *)&unk_22F463868
                     + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v8 = 1;
    a3 = (a3 + v8 - 1) & -v8;
    v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
LABEL_17:
    if (!v4)
      return 1;
  }
  switch(*(_BYTE *)(v7 + 16))
  {
    case 0:
    case 1:
    case 0x16:
    case 0x17:
    case 0x36:
      v4 = *(_QWORD *)(v4 + 32);
      if (v4 >= 0x10 && (v4 & 0xF) == 0)
        v14 = *(_QWORD *)((char *)&unk_22F463868
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v14 = 1;
      v10 = a3 + v14 - 1;
      goto LABEL_15;
    case 2:
    case 3:
    case 4:
    case 5:
      return sub_22F304008(a1, v4, a3);
    case 6:
      return sub_22F30407C(a1, v4, a3);
    case 7:
    case 0x25:
      return sub_22F3040CC(a1, v4, a3);
    case 8:
      v4 = *(_QWORD *)(v4 + 32);
      if (v4 >= 0x10 && (v4 & 0xF) == 0)
        v14 = *(_QWORD *)((char *)&unk_22F463868
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v14 = 1;
      v10 = v14 + a3;
LABEL_15:
      a3 = v10 & -v14;
      goto LABEL_17;
    case 0xA:
    case 0x20:
    case 0x24:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
      return sub_22F30411C(a1, v4, a3);
    case 0xC:
    case 0x37:
    case 0x38:
      v15 = *(_QWORD *)(v4 + 32);
      goto LABEL_52;
    case 0xD:
    case 0x30:
      v16 = *(_QWORD *)(v4 + 24);
      return sub_22E8AF4BC(a1, v16, 0);
    case 0xE:
      return sub_22F30416C(a1, v4, a3);
    case 0xF:
      result = sub_22F304A24(a1, *(_QWORD *)(v4 + 40));
      if (!(_DWORD)result)
        return result;
      v15 = *(_QWORD *)(v4 + 24);
      goto LABEL_52;
    case 0x10:
      v17 = *(_QWORD *)(v4 + 40);
      goto LABEL_33;
    case 0x11:
      v16 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
      return sub_22E8AF4BC(a1, v16, 0);
    case 0x12:
      return sub_22F303F6C(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
    case 0x13:
      v17 = *(_QWORD *)(v4 + 40);
      if (!v17)
        goto LABEL_34;
LABEL_33:
      result = sub_22E8AF4BC(a1, v17, 0);
      if (!(_DWORD)result)
        return result;
LABEL_34:
      v15 = *(_QWORD *)(v4 + 48);
LABEL_52:
      result = sub_22E8CC828(a1, v15);
      break;
    case 0x14:
      v18 = *(_QWORD *)(a3 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v4 + 32);
        if (v19)
        {
          result = sub_22F303F6C(a1, v19, v18);
          if (!(_DWORD)result)
            return result;
        }
      }
      v20 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v20)
        return 1;
      v21 = v4 + 48;
      v22 = (uint64_t *)(a3 + 32);
      v23 = v20 - 1;
      do
      {
        v24 = *v22++;
        v31 = *(_OWORD *)v21;
        v32 = *(_QWORD *)(v21 + 16);
        v33 = v24;
        result = sub_22E8CCBB0(a1, (uint64_t)&v31);
        v26 = v23-- != 0;
        if (!(_DWORD)result)
          break;
        v21 += 24;
      }
      while (v26);
      break;
    case 0x15:
      v27 = *(_QWORD *)(v4 + 48);
      if (v27)
      {
        result = sub_22E8AF4BC(a1, v27, 0);
        if (!(_DWORD)result)
          return result;
      }
      v15 = *(_QWORD *)(v4 + 40);
      goto LABEL_52;
    case 0x18:
      return sub_22F30424C(a1, v4, a3);
    case 0x19:
      *(_QWORD *)&v31 = v4;
      *((_QWORD *)&v31 + 1) = a3;
      v28 = *(_QWORD *)(v4 + 24);
      v29 = sub_22E47EE80(&v31);
      return sub_22E8CC284(a1, v28, v29);
    case 0x1A:
      return sub_22F3042C8(a1, v4, a3);
    case 0x1C:
      return sub_22F30441C(a1, v4, a3);
    case 0x1D:
    case 0x1E:
      return sub_22F30446C(a1, v4, a3);
    case 0x1F:
      return sub_22F3044D8(a1, v4, a3);
    case 0x21:
      return sub_22F30456C(a1, v4, a3);
    case 0x2A:
      v30 = *(_DWORD *)(v4 + 20);
      *((_QWORD *)&v31 + 1) = *(_QWORD *)(v4 + 40);
      LODWORD(v31) = 8;
      DWORD1(v31) = v30;
      return sub_22F304958(a1, (uint64_t)&v31);
    case 0x2B:
      v15 = *(_QWORD *)(v4 + 8);
      goto LABEL_52;
    case 0x2E:
      return sub_22F30463C(a1, v4, a3);
    case 0x31:
    case 0x33:
      v11 = *(unint64_t **)(a3 + 16);
      v12 = *v11;
      a3 = (uint64_t)(v11 + 1);
      v4 = v12;
      goto LABEL_17;
    case 0x39:
      goto LABEL_4;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E8CC828(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _DWORD v27[2];
  uint64_t v28;

  if (a2 >= 0x10)
  {
    while (2)
    {
      v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      result = 1;
      switch(*(_BYTE *)(v4 + 16))
      {
        case 0:
        case 1:
        case 4:
        case 6:
        case 7:
        case 8:
        case 0xA:
        case 0xC:
        case 0x1D:
        case 0x20:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x36:
        case 0x37:
        case 0x38:
          goto LABEL_5;
        case 2:
          result = sub_22E8CC828(a1, *(_QWORD *)(v4 + 32));
          if ((_DWORD)result)
          {
            if ((*(_BYTE *)(v4 + 19) & 2) == 0)
              return 1;
            v12 = *(_QWORD *)(v4 + 56);
            if (!v12)
              return 1;
            result = sub_22E8AF4BC(a1, v12, 0);
            if ((_DWORD)result)
              return 1;
          }
          return result;
        case 3:
          return sub_22F3046CC(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 5:
          result = sub_22E8CC828(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v11 = *(_QWORD *)(v4 + 40);
          return sub_22E8AF4BC(a1, v11, 0);
        case 0xD:
        case 0x30:
          v11 = *(_QWORD *)(v4 + 24);
          return sub_22E8AF4BC(a1, v11, 0);
        case 0xE:
          result = sub_22E8CC828(a1, *(_QWORD *)(v4 + 24));
          if (!(_DWORD)result)
            return result;
          if (!*(_QWORD *)(v4 + 40))
            return 1;
          result = sub_22E8CAC80(a1);
          if (!(_DWORD)result)
            return result;
          v13 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v13)
            return 1;
          v14 = v4 + 48;
          v15 = v13 - 1;
          do
          {
            result = sub_22F304958(a1, v14);
            v16 = v15-- != 0;
            v17 = v16;
            if (!(_DWORD)result)
              break;
            v14 += 24;
          }
          while ((v17 & 1) != 0);
          return result;
        case 0xF:
          result = sub_22F304A24(a1, *(_QWORD *)(v4 + 40));
          if ((_DWORD)result)
            goto LABEL_28;
          return result;
        case 0x10:
          v6 = *(_QWORD *)(v4 + 40);
          goto LABEL_10;
        case 0x11:
          v11 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
          return sub_22E8AF4BC(a1, v11, 0);
        case 0x12:
          return sub_22F304A84(a1, *(_QWORD *)(v4 + 32));
        case 0x13:
          v6 = *(_QWORD *)(v4 + 40);
          if (!v6)
            goto LABEL_11;
LABEL_10:
          result = sub_22E8AF4BC(a1, v6, 0);
          if (!(_DWORD)result)
            return result;
LABEL_11:
          v5 = (unint64_t *)(v4 + 48);
          goto LABEL_6;
        case 0x14:
          result = sub_22F304A84(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v18 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v18)
            return 1;
          v19 = v4 + 48;
          v20 = v18 - 1;
          do
          {
            result = sub_22F304958(a1, v19);
            v16 = v20-- != 0;
            v21 = v16;
            if (!(_DWORD)result)
              break;
            v19 += 24;
          }
          while ((v21 & 1) != 0);
          return result;
        case 0x15:
          v7 = *(_QWORD *)(v4 + 48);
          if (v7)
          {
            result = sub_22E8AF4BC(a1, v7, 0);
            if (!(_DWORD)result)
              return result;
          }
          goto LABEL_21;
        case 0x16:
          v8 = *(_QWORD *)(v4 + 56);
          if (!v8)
            goto LABEL_5;
          goto LABEL_18;
        case 0x17:
          v8 = *(_QWORD *)(v4 + 64);
          if (!v8)
            goto LABEL_5;
LABEL_18:
          result = sub_22E8AF4BC(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_5;
        case 0x18:
          v9 = *(_QWORD *)(v4 + 32);
          if (v9)
          {
            result = sub_22F304A84(a1, v9);
            if (!(_DWORD)result)
              return result;
          }
LABEL_21:
          v5 = (unint64_t *)(v4 + 40);
          goto LABEL_6;
        case 0x19:
        case 0x1C:
        case 0x31:
LABEL_28:
          v5 = (unint64_t *)(v4 + 24);
          goto LABEL_6;
        case 0x1A:
          return sub_22F304714(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x1E:
          return sub_22F304804(a1, *(_QWORD **)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x1F:
          v10 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
          goto LABEL_25;
        case 0x21:
          return sub_22F30486C(a1, *(_QWORD **)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x28:
        case 0x29:
          return sub_22F3048F0(a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x2A:
          v22 = *(_DWORD *)(v4 + 20);
          v28 = *(_QWORD *)(v4 + 40);
          v27[0] = 8;
          v27[1] = v22;
          return sub_22F304958(a1, (uint64_t)v27);
        case 0x2B:
          v5 = (unint64_t *)(v4 + 8);
          goto LABEL_6;
        case 0x2E:
          result = sub_22F304A24(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v23 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v23)
            return 1;
          v24 = v4 + 40;
          v25 = v23 - 1;
          do
          {
            result = sub_22F304958(a1, v24);
            v16 = v25-- != 0;
            v26 = v16;
            if (!(_DWORD)result)
              break;
            v24 += 24;
          }
          while ((v26 & 1) != 0);
          return result;
        case 0x33:
          v10 = *(_QWORD *)(v4 + 24);
LABEL_25:
          result = sub_22E8CC828(a1, v10);
          if (!(_DWORD)result)
            return result;
LABEL_5:
          v5 = (unint64_t *)(v4 + 32);
LABEL_6:
          a2 = *v5;
          if (*v5 < 0x10)
            return 1;
          continue;
        default:
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_22E8CCBB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t *v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v5)
        result = sub_22E8CC284(a1, *v5, v5 + 1);
      else
        result = sub_22E8CC828(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v11 || (result = sub_22F303F6C(a1, *v11, v11[1]), (_DWORD)result))
        result = sub_22F304A24(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v6 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        v8 = v6 - 1;
        do
        {
          result = sub_22F304958(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 24;
        }
        while (v10);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22E8CCCCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22E8CAC80(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22E8CCD68(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22E8CCDD8()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22E8AF4BC(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22E8CCDF0);
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCE40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCEE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CCFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22E8AF4BC(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22E8CCDC8);
}

void sub_22E8CD000()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 48))
    JUMPOUT(0x22E8CCDC4);
  JUMPOUT(0x22E8CCDB4);
}

uint64_t sub_22E8CD00C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304B6C(v0, v1);
}

uint64_t sub_22E8CD024()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304B20(v0, v1);
}

uint64_t sub_22E8CD03C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304C08(v0, v1);
}

uint64_t sub_22E8CD054()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304DB8(v0, v1);
}

uint64_t sub_22E8CD06C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304C08(v0, v1);
}

uint64_t sub_22E8CD084()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304C08(v0, v1);
}

uint64_t sub_22E8CD09C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_22F304C7C(v0, v1);
}

uint64_t sub_22E8CD0B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22F304E64(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22F303F6C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22E8CC1C8(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22E8CCBB0(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22E8CC284(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22E8AF4BC(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22E8CC284(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22E8AF4BC(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22E8AF4BC(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22E8CAC80(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22E8CD478(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *n;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *k;
  uint64_t v37;
  uint64_t v38;
  _QWORD *m;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *i;
  uint64_t v68;
  uint64_t v69;
  _QWORD *j;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *mm;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *nn;
  uint64_t v112;
  uint64_t v113;
  _QWORD *i1;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *kk;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *jj;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *ii;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *i2;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      return (sub_22F30512C(a1, a2) & 1) != 0;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22E8AF4BC(a1, v5, 0) & 1) != 0;
    case 5:
      v89 = (_QWORD *)(a2 + 24);
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v90 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v90)
        return 1;
      v91 = 8 * v90;
      while ((sub_22E8AF4BC(a1, *v89, 0) & 1) != 0)
      {
        ++v89;
        v91 -= 8;
        if (!v91)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v49 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v49)
        return 1;
      v50 = (_QWORD *)(a2 + 40);
      v51 = 8 * v49;
      while ((sub_22E8AF4BC(a1, *v50, 0) & 1) != 0)
      {
        ++v50;
        v51 -= 8;
        if (!v51)
          return 1;
      }
      return 0;
    case 0xE:
      v64 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v64)
        return 1;
      v65 = a2 + 24;
      v66 = 8 * v64;
      for (i = (_QWORD *)(a2 + 24); (sub_22E8AF4BC(a1, *i, 0) & 1) != 0; ++i)
      {
        v66 -= 8;
        if (!v66)
        {
          v68 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v68)
            return 1;
          v69 = 8 * v68;
          for (j = (_QWORD *)(v65 + 8 * v68); (sub_22E8AF4BC(a1, *j, 0) & 1) != 0; ++j)
          {
            v69 -= 8;
            if (!v69)
            {
              v71 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v71)
                return 1;
              v72 = (_QWORD *)(v65 + 8 * v71 + 8 * v71);
              v73 = 8 * v71;
              while ((sub_22E8AF4BC(a1, *v72, 0) & 1) != 0)
              {
                ++v72;
                v73 -= 8;
                if (!v73)
                {
                  v74 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v74)
                    return 1;
                  v75 = (_QWORD *)(v65 + 8 * v74 + 8 * v74 + 8 * v74);
                  v76 = 8 * v74;
                  while ((sub_22E8AF4BC(a1, *v75, 0) & 1) != 0)
                  {
                    ++v75;
                    v76 -= 8;
                    if (!v76)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v33 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v33)
        return 1;
      v34 = a2 + 24;
      v35 = 8 * v33;
      for (k = (_QWORD *)(a2 + 24); (sub_22E8AF4BC(a1, *k, 0) & 1) != 0; ++k)
      {
        v35 -= 8;
        if (!v35)
        {
          v37 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v37)
            return 1;
          v38 = 8 * v37;
          for (m = (_QWORD *)(v34 + 8 * v37); (sub_22E8AF4BC(a1, *m, 0) & 1) != 0; ++m)
          {
            v38 -= 8;
            if (!v38)
            {
              v40 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v40)
                return 1;
              v41 = (_QWORD *)(v34 + 8 * v40 + 8 * v40);
              v42 = 8 * v40;
              while ((sub_22E8AF4BC(a1, *v41, 0) & 1) != 0)
              {
                ++v41;
                v42 -= 8;
                if (!v42)
                {
                  v43 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v43)
                    return 1;
                  v44 = (_QWORD *)(v34 + 8 * v43 + 8 * v43 + 8 * v43);
                  v45 = 8 * v43;
                  while ((sub_22E8AF4BC(a1, *v44, 0) & 1) != 0)
                  {
                    ++v44;
                    v45 -= 8;
                    if (!v45)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v92 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v92)
        return 1;
      v93 = (_QWORD *)(a2 + 40);
      v94 = 8 * v92;
      while ((sub_22E8AF4BC(a1, *v93, 0) & 1) != 0)
      {
        ++v93;
        v94 -= 8;
        if (!v94)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22E8AF4BC(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22E8AF4BC(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22E8AF4BC(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v105 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v105)
        return 1;
      v106 = (_QWORD *)(a2 + 24);
      v107 = 8 * v105;
      while ((sub_22E8AF4BC(a1, *v106, 0) & 1) != 0)
      {
        ++v106;
        v107 -= 8;
        if (!v107)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22E8AF4BC(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v17 = a2 + 40;
      v18 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v18)
        goto LABEL_28;
      v19 = 8 * v18;
      v20 = (_QWORD *)(a2 + 40);
      while ((sub_22E8AF4BC(a1, *v20, 0) & 1) != 0)
      {
        ++v20;
        v19 -= 8;
        if (!v19)
        {
LABEL_28:
          result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v21 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v21)
          {
            v22 = 8 * v21;
            for (n = (_QWORD *)(v17 + 8 * v21); (sub_22E8AF4BC(a1, *n, 0) & 1) != 0; ++n)
            {
              v22 -= 8;
              if (!v22)
              {
                v24 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v24)
                  return 1;
                v25 = (_QWORD *)(v17 + 8 * v24 + 8 * v24);
                v26 = 8 * v24;
                while ((sub_22E8AF4BC(a1, *v25, 0) & 1) != 0)
                {
                  ++v25;
                  v26 -= 8;
                  if (!v26)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v55 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v55)
        return 1;
      v56 = (_QWORD *)(a2 + 24);
      v57 = 8 * v55;
      while ((sub_22E8AF4BC(a1, *v56, 0) & 1) != 0)
      {
        ++v56;
        v57 -= 8;
        if (!v57)
          return 1;
      }
      return 0;
    case 0x1F:
      v80 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v80)
        return 1;
      v81 = (_QWORD *)(a2 + 104);
      v82 = 8 * v80;
      while ((sub_22E8AF4BC(a1, *v81, 0) & 1) != 0)
      {
        ++v81;
        v82 -= 8;
        if (!v82)
          return 1;
      }
      return 0;
    case 0x22:
      v61 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v61)
        return 1;
      v62 = (_QWORD *)(a2 + 80);
      v63 = 8 * v61;
      while ((sub_22E8AF4BC(a1, *v62, 0) & 1) != 0)
      {
        ++v62;
        v63 -= 8;
        if (!v63)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22F303F6C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E8CC1C8(a1, (uint64_t *)&v208))
        return 0;
      v148 = a2 + 96;
      v149 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v149)
        goto LABEL_240;
      v150 = 8 * v149;
      v151 = (_QWORD *)(a2 + 96);
      while ((sub_22E8AF4BC(a1, *v151, 0) & 1) != 0)
      {
        ++v151;
        v150 -= 8;
        if (!v150)
        {
LABEL_240:
          if (sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v152 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v152)
              return 1;
            v153 = 8 * v152;
            for (ii = (_QWORD *)(v148 + 8 * v152); (sub_22E8AF4BC(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v153 -= 8;
              if (!v153)
              {
                v155 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v155)
                  return 1;
                v156 = (_QWORD *)(v148 + 8 * v155 + 8 * v155);
                v157 = 8 * v155;
                while ((sub_22E8AF4BC(a1, *v156, 0) & 1) != 0)
                {
                  ++v156;
                  v157 -= 8;
                  if (!v157)
                  {
                    v158 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v158)
                      return 1;
                    v159 = (_QWORD *)(v148 + 8 * v158 + 8 * v158 + 8 * v158);
                    v160 = 8 * v158;
                    while ((sub_22E8AF4BC(a1, *v159, 0) & 1) != 0)
                    {
                      ++v159;
                      v160 -= 8;
                      if (!v160)
                      {
                        v161 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v161)
                          return 1;
                        v162 = (_QWORD *)(v148 + 8 * v161 + 8 * v161 + 8 * v161 + 8 * v161);
                        v163 = 8 * v161;
                        while ((sub_22E8AF4BC(a1, *v162, 0) & 1) != 0)
                        {
                          ++v162;
                          v163 -= 8;
                          if (!v163)
                          {
                            v164 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v164)
                              return 1;
                            v165 = (_QWORD *)(v148 + 8 * v164 + 8 * v164 + 8 * v164 + 8 * v164 + 8 * v164);
                            v166 = 8 * v164;
                            while ((sub_22E8AF4BC(a1, *v165, 0) & 1) != 0)
                            {
                              ++v165;
                              v166 -= 8;
                              if (!v166)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v27 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v27)
        return 1;
      v28 = (_QWORD *)(a2 + 24);
      v29 = 8 * v27;
      while ((sub_22E8AF4BC(a1, *v28, 0) & 1) != 0)
      {
        ++v28;
        v29 -= 8;
        if (!v29)
          return 1;
      }
      return 0;
    case 0x29:
      v83 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v83)
        return 1;
      v84 = (_QWORD *)(a2 + 32);
      v85 = 8 * v83;
      while ((sub_22E8AF4BC(a1, *v84, 0) & 1) != 0)
      {
        ++v84;
        v85 -= 8;
        if (!v85)
          return 1;
      }
      return 0;
    case 0x2A:
      v30 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v30)
        return 1;
      v31 = (_QWORD *)(a2 + 80);
      v32 = 8 * v30;
      while ((sub_22E8AF4BC(a1, *v31, 0) & 1) != 0)
      {
        ++v31;
        v32 -= 8;
        if (!v32)
          return 1;
      }
      return 0;
    case 0x2B:
      v132 = a2 + 64;
      v133 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v133)
        goto LABEL_215;
      v134 = 8 * v133;
      v135 = (_QWORD *)(a2 + 64);
      while ((sub_22E8AF4BC(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v134 -= 8;
        if (!v134)
        {
LABEL_215:
          result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v136 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v136)
            return 1;
          v137 = 8 * v136;
          for (jj = (_QWORD *)(v132 + 8 * v136); (sub_22E8AF4BC(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v137 -= 8;
            if (!v137)
            {
              v139 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v139)
                return 1;
              v140 = (_QWORD *)(v132 + 8 * v139 + 8 * v139);
              v141 = 8 * v139;
              while ((sub_22E8AF4BC(a1, *v140, 0) & 1) != 0)
              {
                ++v140;
                v141 -= 8;
                if (!v141)
                {
                  v142 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v142)
                    return 1;
                  v143 = (_QWORD *)(v132 + 8 * v142 + 8 * v142 + 8 * v142);
                  v144 = 8 * v142;
                  while ((sub_22E8AF4BC(a1, *v143, 0) & 1) != 0)
                  {
                    ++v143;
                    v144 -= 8;
                    if (!v144)
                    {
                      v145 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v145)
                        return 1;
                      v146 = (_QWORD *)(v132 + 8 * v145 + 8 * v145 + 8 * v145 + 8 * v145);
                      v147 = 8 * v145;
                      while ((sub_22E8AF4BC(a1, *v146, 0) & 1) != 0)
                      {
                        ++v146;
                        v147 -= 8;
                        if (!v147)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v115 = a2 + 64;
      v116 = *(unsigned int *)(a2 + 16);
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 64 + 8 * v116 + 8 * v116 + 8 * v116 + 8 * v116 + 8 * v116), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E8AF4BC(a1, *(_QWORD *)(v115+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v117 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v117)
        goto LABEL_192;
      v118 = 8 * v117;
      v119 = (_QWORD *)(a2 + 64);
      while ((sub_22E8AF4BC(a1, *v119, 0) & 1) != 0)
      {
        ++v119;
        v118 -= 8;
        if (!v118)
        {
LABEL_192:
          result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v120 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v120)
            return 1;
          v121 = 8 * v120;
          for (kk = (_QWORD *)(v115 + 8 * v120); (sub_22E8AF4BC(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v121 -= 8;
            if (!v121)
            {
              v123 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v123)
                return 1;
              v124 = (_QWORD *)(v115 + 8 * v123 + 8 * v123);
              v125 = 8 * v123;
              while ((sub_22E8AF4BC(a1, *v124, 0) & 1) != 0)
              {
                ++v124;
                v125 -= 8;
                if (!v125)
                {
                  v126 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v126)
                    return 1;
                  v127 = (_QWORD *)(v115 + 8 * v126 + 8 * v126 + 8 * v126);
                  v128 = 8 * v126;
                  while ((sub_22E8AF4BC(a1, *v127, 0) & 1) != 0)
                  {
                    ++v127;
                    v128 -= 8;
                    if (!v128)
                    {
                      v129 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v129)
                        return 1;
                      v130 = (_QWORD *)(v115 + 8 * v129 + 8 * v129 + 8 * v129 + 8 * v129);
                      v131 = 8 * v129;
                      while ((sub_22E8AF4BC(a1, *v130, 0) & 1) != 0)
                      {
                        ++v130;
                        v131 -= 8;
                        if (!v131)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v77 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v77)
        return 1;
      v78 = (_QWORD *)(a2 + 136);
      v79 = 8 * v77;
      while ((sub_22E8AF4BC(a1, *v78, 0) & 1) != 0)
      {
        ++v78;
        v79 -= 8;
        if (!v79)
          return 1;
      }
      return 0;
    case 0x35:
      v95 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v95)
        return 1;
      v96 = a2 + 24;
      v97 = 8 * v95;
      for (mm = (_QWORD *)(a2 + 24); (sub_22E8AF4BC(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v97 -= 8;
        if (!v97)
        {
          v99 = *(unsigned int *)(a2 + 16);
          v100 = (uint64_t *)(v96 + 8 * v99);
          v208 = (unint64_t)v100;
          if ((_DWORD)v99)
          {
            v101 = 0;
            v102 = &v100[v99];
            while (1)
            {
              if ((v101 & 3) != 0)
              {
                if ((v101 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v103 = (_QWORD *)((v101 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v103 = (_QWORD *)sub_22F3AC1A8(*v100);
                if ((sub_22E8AF4BC(a1, *v103, 0) & 1) == 0)
                  return 0;
                if (v101 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22E8AF4BC(a1, *v100, 0))
                  return 0;
                *(_QWORD *)&v208 = v100 + 1;
              }
              v101 = *((_QWORD *)&v208 + 1);
              v100 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v102 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v108 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v108)
        return 1;
      v109 = a2 + 24;
      v110 = 8 * v108;
      for (nn = (_QWORD *)(a2 + 24); (sub_22E8AF4BC(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v110 -= 8;
        if (!v110)
        {
          v112 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v112)
            return 1;
          v113 = 8 * v112;
          for (i1 = (_QWORD *)(v109 + 8 * v112); (sub_22E8AF4BC(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v113 -= 8;
            if (!v113)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22F303F6C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22E8CC1C8(a1, (uint64_t *)&v208))
        return 0;
      v183 = a2 + 104;
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        goto LABEL_296;
      v185 = 8 * v184;
      v186 = (_QWORD *)(a2 + 104);
      while ((sub_22E8AF4BC(a1, *v186, 0) & 1) != 0)
      {
        ++v186;
        v185 -= 8;
        if (!v185)
        {
LABEL_296:
          if (sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v187 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v187)
            {
              v188 = 8 * v187;
              v189 = (_QWORD *)(v183 + 8 * v187);
              while ((sub_22E8AF4BC(a1, *v189, 0) & 1) != 0)
              {
                ++v189;
                v188 -= 8;
                if (!v188)
                {
                  v190 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v190)
                    goto LABEL_314;
                  v191 = (_QWORD *)(v183 + 8 * v190 + 8 * v190);
                  v192 = 8 * v190;
                  while ((sub_22E8AF4BC(a1, *v191, 0) & 1) != 0)
                  {
                    ++v191;
                    v192 -= 8;
                    if (!v192)
                    {
                      v193 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v193)
                        goto LABEL_314;
                      v194 = (_QWORD *)(v183 + 8 * v193 + 8 * v193 + 8 * v193);
                      v195 = 8 * v193;
                      while ((sub_22E8AF4BC(a1, *v194, 0) & 1) != 0)
                      {
                        ++v194;
                        v195 -= 8;
                        if (!v195)
                        {
                          v196 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v196)
                            goto LABEL_314;
                          v197 = (_QWORD *)(v183 + 8 * v196 + 8 * v196 + 8 * v196 + 8 * v196);
                          v198 = 8 * v196;
                          while ((sub_22E8AF4BC(a1, *v197, 0) & 1) != 0)
                          {
                            ++v197;
                            v198 -= 8;
                            if (!v198)
                              goto LABEL_314;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_314:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v199 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v199)
                return 1;
              v200 = (_QWORD *)(v183 + 8 * v199 + 8 * v199 + 8 * v199 + 8 * v199 + 8 * v199);
              v201 = 8 * v199;
              while ((sub_22E8AF4BC(a1, *v200, 0) & 1) != 0)
              {
                ++v200;
                v201 -= 8;
                if (!v201)
                {
                  v202 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v202)
                    return 1;
                  v203 = (_QWORD *)(v183 + 8 * v202 + 8 * v202 + 8 * v202 + 8 * v202 + 8 * v202 + 8 * v202);
                  v204 = 8 * v202;
                  while ((sub_22E8AF4BC(a1, *v203, 0) & 1) != 0)
                  {
                    ++v203;
                    v204 -= 8;
                    if (!v204)
                    {
                      v205 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v205)
                        return 1;
                      v206 = (_QWORD *)(v183 + 8 * v205 + 8 * v205 + 8 * v205 + 8 * v205 + 8 * v205 + 8 * v205 + 8 * v205);
                      v207 = 8 * v205;
                      while ((sub_22E8AF4BC(a1, *v206, 0) & 1) != 0)
                      {
                        ++v206;
                        v207 -= 8;
                        if (!v207)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22E8AF4BC(a1, v5, 0) & 1) != 0;
    case 0x49:
      v46 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v46)
        return 1;
      v47 = (_QWORD *)(a2 + 24);
      v48 = 8 * v46;
      while ((sub_22E8AF4BC(a1, *v47, 0) & 1) != 0)
      {
        ++v47;
        v48 -= 8;
        if (!v48)
          return 1;
      }
      return 0;
    case 0x4C:
      v86 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v86)
        return 1;
      v87 = (_QWORD *)(a2 + 24);
      v88 = 8 * v86;
      while ((sub_22E8AF4BC(a1, *v87, 0) & 1) != 0)
      {
        ++v87;
        v88 -= 8;
        if (!v88)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22F303F6C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22E8CC1C8(a1, (uint64_t *)&v208))
        return 0;
      v167 = a2 + 96;
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        goto LABEL_269;
      v169 = 8 * v168;
      v170 = (_QWORD *)(a2 + 96);
      while ((sub_22E8AF4BC(a1, *v170, 0) & 1) != 0)
      {
        ++v170;
        v169 -= 8;
        if (!v169)
        {
LABEL_269:
          if (sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v171 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v171)
              return 1;
            v172 = 8 * v171;
            for (i2 = (_QWORD *)(v167 + 8 * v171); (sub_22E8AF4BC(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v172 -= 8;
              if (!v172)
              {
                v174 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v174)
                  return 1;
                v175 = (_QWORD *)(v167 + 8 * v174 + 8 * v174);
                v176 = 8 * v174;
                while ((sub_22E8AF4BC(a1, *v175, 0) & 1) != 0)
                {
                  ++v175;
                  v176 -= 8;
                  if (!v176)
                  {
                    v177 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v177)
                      return 1;
                    v178 = (_QWORD *)(v167 + 8 * v177 + 8 * v177 + 8 * v177);
                    v179 = 8 * v177;
                    while ((sub_22E8AF4BC(a1, *v178, 0) & 1) != 0)
                    {
                      ++v178;
                      v179 -= 8;
                      if (!v179)
                      {
                        v180 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v180)
                          return 1;
                        v181 = (_QWORD *)(v167 + 8 * v180 + 8 * v180 + 8 * v180 + 8 * v180);
                        v182 = 8 * v180;
                        while ((sub_22E8AF4BC(a1, *v181, 0) & 1) != 0)
                        {
                          ++v181;
                          v182 -= 8;
                          if (!v182)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v58 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v58)
        return 1;
      v59 = (_QWORD *)(a2 + 104);
      v60 = 8 * v58;
      while ((sub_22E8AF4BC(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v60 -= 8;
        if (!v60)
          return 1;
      }
      return 0;
    case 0x59:
      v52 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v52)
        return 1;
      v53 = (_QWORD *)(a2 + 80);
      v54 = 8 * v52;
      while ((sub_22E8AF4BC(a1, *v53, 0) & 1) != 0)
      {
        ++v53;
        v54 -= 8;
        if (!v54)
          return 1;
      }
      return 0;
    case 0x5A:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = (_QWORD *)(a2 + 80);
      v8 = 8 * v6;
      break;
    case 0x5B:
      v9 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v9)
        return 1;
      v11 = *(_QWORD *)(a2 + 32);
      v10 = a2 + 24;
      result = sub_22E8AF4BC(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E8AF4BC(a1, v11, 0);
      if (!(_DWORD)result)
        return result;
      v12 = 3;
      v13 = 1;
      do
      {
        v14 = v13;
        if (v9 == v13)
          break;
        v15 = *(_QWORD *)(v10 + 8 * v12);
        if (!sub_22E8AF4BC(a1, *(_QWORD *)(v10 + 8 * (v12 - 1)), 0))
          break;
        v16 = sub_22E8AF4BC(a1, v15, 0);
        v13 = v14 + 1;
        v12 += 2;
      }
      while ((v16 & 1) != 0);
      return v14 >= v9;
    default:
      return 1;
  }
  while ((sub_22E8AF4BC(a1, *v7, 0) & 1) != 0)
  {
    ++v7;
    v8 -= 8;
    if (!v8)
      return 1;
  }
  return 0;
}

uint64_t sub_22E8CE528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22E8AF4BC(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22E8AF4BC(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

uint64_t sub_22E8CE620(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, int a5)
{
  unint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;

  v9 = sub_22EFCBB30(a3);
  v10 = *(_WORD *)(v9 + 8) & 0x7F;
  if ((v10 > 0x18 || ((1 << v10) & 0x1000006) == 0) && v10 - 52 >= 6)
  {
    v12 = v9;
    if (!a4 || (*((_BYTE *)a4 + 9) & 1) == 0)
    {
      v13 = a2[2];
      v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 4) != 0)
        v14 = (_QWORD *)*v14;
      v15 = sub_22EFCBB30((unint64_t)v14);
      v16 = v15;
      if (a5)
        return sub_22EFCE860(v12, v15);
      if (v15)
      {
        v17 = sub_22EFCC008(v12);
        return v17 == sub_22EFCC008(v16);
      }
      return 0;
    }
  }
  while (1)
  {
    v19 = a4[45];
    if (!v19 || !sub_22EFCBD60(v19))
      break;
    a4 = (uint64_t *)*a4;
  }
  v20 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a4 + 9), a2);
  v21 = a4[10];
  v22 = 88;
  if (v21 == a4[9])
    v22 = 92;
  if (v20 != (void **)(v21 + 8 * *(unsigned int *)((char *)a4 + v22)))
    return 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 1) & 1) == 0)
    return 0;
  v23 = (uint64_t *)*a4;
  if ((*(_BYTE *)(*a4 + 8) & 0x10) != 0 && (a4[1] & 1) == 0)
  {
    v24 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v23 + 9), a2);
    v25 = v23[10];
    v26 = 88;
    if (v25 == v23[9])
      v26 = 92;
    a4 = v23;
    if (v24 != (void **)(v25 + 8 * *(unsigned int *)((char *)v23 + v26)))
      return 1;
  }
  if ((*((_BYTE *)a4 + 9) & 0x40) == 0)
    return 0;
  v27 = (uint64_t *)*a4;
  v28 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v27 + 9), a2);
  v29 = v27[10];
  v30 = 88;
  if (v29 == v27[9])
    v30 = 92;
  return v28 != (void **)(v29 + 8 * *(unsigned int *)((char *)v27 + v30));
}

uint64_t sub_22E8CE7E8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 40);
  v12 = v4;
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 7) != 0 || v5 == 0)
  {
    if ((v4 & 7) != 0)
    {
      result = sub_22EFC68C0(&v12);
      if (!result)
        return sub_22EFC6930(&v12);
      v8 = result;
      if ((result & 1) != 0)
        goto LABEL_12;
      sub_22EFC6930(&v12);
LABEL_20:
      result = sub_22E8CE95C(*(_QWORD *)(v3 + 16), v4);
      v9 = result;
      v11 = *(_DWORD *)(result + 8);
      if (v11 >= *(_DWORD *)(result + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(_DWORD *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v11) = v8;
      v10 = *(_DWORD *)(v9 + 8) + 1;
      *(_DWORD *)(v9 + 8) = v10;
      goto LABEL_13;
    }
  }
  else
  {
    v7 = *v5;
    if ((*v5 & 0x800000000) != 0)
    {
      result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(result + 8) + 120)
                                                                   + 24))(*(_QWORD *)(*(_QWORD *)(result + 8) + 120), v4 & 0xFFFFFFFFFFFFFFF8);
      v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
      v7 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    }
    if ((v7 & 0x100000000) != 0)
      *v5 = v7 | 0x200000000;
  }
  v8 = v5[1];
  if (!v8)
  {
    v5[1] = a2;
    return result;
  }
  if ((v8 & 1) == 0)
  {
    v5[1] = 0;
    goto LABEL_20;
  }
LABEL_12:
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_13:
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = a2;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

unint64_t sub_22E8CE95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = a2;
  v4 = a2 & 7;
  if ((a2 & 7) != 0)
    v5 = sub_22EFC68C0(&v12);
  else
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v5)
    return v5 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 512)
  {
    v7 = (_QWORD *)operator new();
    v10 = 0;
    *v7 = *(_QWORD *)a1;
    do
    {
      v11 = &v7[v10];
      v11[1] = &v7[v10 + 3];
      v11[2] = 0x200000000;
      v10 += 4;
    }
    while (v10 != 2048);
    v6 = 0;
    *(_QWORD *)a1 = v7;
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    v7 = *(_QWORD **)a1;
  }
  v8 = (uint64_t)&v7[4 * v6 + 1];
  if (v4)
  {
    sub_22EFC6930(&v12);
    v6 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8) = v8 | 1;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  return v8;
}

uint64_t sub_22E8CEA58(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(a2 + 40);
  v3 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 7) != 0 || v3 == 0)
  {
    if ((v12 & 7) != 0)
    {
      result = sub_22EFC68C0(&v12);
      if ((result & 1) == 0)
        return sub_22EFC6930(&v12);
      goto LABEL_15;
    }
  }
  else
  {
    v6 = *v3;
    if ((*v3 & 0x800000000) != 0)
    {
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 120) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120), v12 & 0xFFFFFFFFFFFFFFF8);
      v6 = *v3;
    }
    if ((v6 & 0x100000000) != 0)
      *v3 = v6 | 0x200000000;
  }
  result = v3[1];
  if ((result & 1) == 0)
  {
    v3[1] = 0;
    return result;
  }
LABEL_15:
  v7 = 0;
  v8 = result & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL);
  v10 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFFELL) + 8);
  while (-8 * v10 != v7)
  {
    v11 = *(_QWORD *)(v9 + 8 * v10 - 8 + v7);
    v7 -= 8;
    if (v11 == a2)
    {
      if (v7 != -8)
      {
        result = (uint64_t)memmove((void *)(v9 + 8 * v10 + v7), (const void *)(v9 + 8 * v10 + v7 + 8), -8 - v7);
        LODWORD(v10) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(v8 + 8) = v10 - 1;
      return result;
    }
  }
  return result;
}

uint64_t sub_22E8CEB58(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 7) != 0 || !v2)
  {
    if ((a2 & 7) != 0)
    {
      result = sub_22EFC68C0(&v5);
      if (!result)
        return result;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(v2 + 4) & 8) != 0)
  {
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 120) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120), a2 & 0xFFFFFFFFFFFFFFF8);
  }
  result = *(_QWORD *)(v2 + 8);
  if (!result)
    return result;
LABEL_9:
  if ((result & 1) != 0)
  {
    v4 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((_DWORD)v4)
      return (*(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL) + 8 * v4 - 8) | 1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_22E8CEBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a1 == a2)
    return 2;
  if (((*(_DWORD *)(a2 + 28) ^ *(_DWORD *)(a1 + 28)) & 0x7F) != 0)
    return 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (v4 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2)
    || (*(_BYTE *)(a1 + 29) & 0x80) != 0 && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    return 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (v6 == a1)
    return 2;
  if (v6 != a2)
  {
    v7 = a2;
    while (v7 != a1)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) == v7)
        return 2;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      result = 2;
      if (v7 == a2 || v7 == 0)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E8CECFC(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if ((*a1 & 1) != 0)
    v3 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = *a1;
  v4 = *(_QWORD *)(v3 + 40);
  v7 = v4;
  if ((v4 & 7) != 0)
    result = sub_22EFC68C0(&v7);
  else
    result = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (*(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL) == (v2 & 0xFFFFFFFFFFFFFFFELL))
    v6 = 0;
  else
    v6 = (v2 & 0xFFFFFFFFFFFFFFFELL) - 7;
  *a1 = v6;
  return result;
}

_QWORD **sub_22E8CED78(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = 2048;
      do
      {
        v6 = (_QWORD *)v2[v5 - 3];
        if (&v2[v5 - 1] != v6)
          free(v6);
        v5 -= 4;
      }
      while (v5 * 8);
      MEMORY[0x2348A0E9C](v2, 0x10A0C4059F1A282);
      v2 = v4;
    }
    while (v4);
  }
  return a1;
}

void sub_22E8CEDFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int i;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  BOOL v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28[12];
  unsigned int v29[24];
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  _DWORD *v33;
  uint64_t v34;
  _OWORD v35[48];
  __int128 v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[128];
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[32];
  _BYTE *v44;
  uint64_t v45;
  _BYTE v46[32];
  uint64_t *v47;
  uint64_t v48;
  _BYTE v49[32];
  _BYTE *v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[6];

  v55[4] = *MEMORY[0x24BDAC8D0];
  v31 = (_QWORD *)a1;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  v32 = *(_DWORD *)(*(_QWORD *)(v2 + 32) + 176) > *(_DWORD *)(v2 + 44);
  v33 = v35;
  v36 = 0u;
  v37 = 0;
  v38 = v40;
  v39 = 0x1000000000;
  v41 = v43;
  v42 = 0x400000000;
  v44 = v46;
  v45 = 0x400000000;
  v47 = (uint64_t *)v49;
  v48 = 0x400000000;
  v50 = v52;
  v51 = 0x400000000;
  v53 = v55;
  v54 = 0x400000000;
  v35[0] = xmmword_22F4559C0;
  v34 = 0x3000000001;
  v27 = 0;
  sub_22E8CF264((uint64_t)&v31, a2, &v27);
  for (i = v39; (_DWORD)v39; i = v39)
  {
    v4 = (unsigned __int8 *)v38[i - 1];
    LODWORD(v39) = i - 1;
    v5 = *v4;
    if (v5 == 17)
    {
      v12 = sub_22EFFA6B0(*((unsigned __int8 **)v4 + 2));
      sub_22E8D132C((unsigned int *)&v31, v4, *(_QWORD *)(*((_QWORD *)v12 + 3) + 48), *((_DWORD *)v4 + 1), 0xDCBu, 0x148Bu, 0x192Au);
    }
    else
    {
      if (v5 == 15)
      {
        v6 = *((_QWORD *)v4 + 1);
        v7 = *(_QWORD *)(v6 + 48);
        if (v7)
        {
          sub_22E8D132C((unsigned int *)&v31, v4, v7, *((_DWORD *)v4 + 1), 0xDCBu, 0x148Bu, 0x192Au);
          v6 = *((_QWORD *)v4 + 1);
        }
        if (*(_QWORD *)(v6 + 64))
        {
          sub_22E8FCA40(v31, *((_DWORD *)v4 + 1), 0xDCCu, 0, (uint64_t)v29);
          v8 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 40);
          if ((v8 & 7) != 0)
            v9 = 0;
          else
            v9 = v8 & 0xFFFFFFFFFFFFFFF8;
          v28[0] = v9;
          sub_22E8BAE44((uint64_t)v29, v28);
          sub_22E903BEC(v29);
          sub_22E8FCA40(v31, *(_DWORD *)(*((_QWORD *)v4 + 1) + 24), 0x1618u, 0, (uint64_t)v29);
          v10 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 40);
          if ((v10 & 7) != 0)
            v11 = 0;
          else
            v11 = v10 & 0xFFFFFFFFFFFFFFF8;
          v28[0] = v11;
          sub_22E8BAE44((uint64_t)v29, v28);
          sub_22E903BEC(v29);
        }
        continue;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v13)
      {
        while (1)
        {
          if (!v32)
            goto LABEL_19;
          if (v37)
            break;
LABEL_29:
          v13 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
          if (!v13)
            goto LABEL_35;
        }
        v14 = (v37 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v15 = *(unsigned __int8 **)(v36 + 16 * v14);
        if (v13 != v15)
        {
          v20 = 1;
          while (v15 != (unsigned __int8 *)-4096)
          {
            v21 = v14 + v20++;
            v14 = v21 & (v37 - 1);
            v15 = *(unsigned __int8 **)(v36 + 16 * v14);
            if (v13 == v15)
              goto LABEL_19;
          }
          goto LABEL_29;
        }
LABEL_19:
        v16 = *v13;
        if (v16 == 99)
          v17 = v13;
        else
          v17 = 0;
        if (v17)
          v18 = v16 == 98;
        else
          v18 = 1;
        if (v18)
          v19 = v13;
        else
          v19 = v17;
        sub_22E8D132C((unsigned int *)&v31, v4, (uint64_t)v13, *((_DWORD *)v19 + 1), 0x1299u, 0, 0x1934u);
        goto LABEL_29;
      }
    }
LABEL_35:
    ;
  }
  sub_22E8D03B8(&v31, 0);
  sub_22E8D03B8(&v31, 1);
  if ((_DWORD)v48)
  {
    v22 = v47;
    v23 = (char *)&v47[v48];
    do
    {
      v24 = *v22;
      v30 = *v22;
      v25 = *((unsigned int *)sub_22F2D2BB8((uint64_t)&v36, &v30) + 2);
      if ((_DWORD)v25)
      {
        v26 = v33;
        do
        {
          if (v26[4 * v25 + 2])
          {
            sub_22E8FCA40(v31, *(_DWORD *)(v24 + 4), 0xF8Eu, 0, (uint64_t)v29);
            sub_22E903BEC(v29);
            sub_22E8FCA40(v31, v33[4 * v25 + 3], v33[4 * v25 + 2], 0, (uint64_t)v28);
            sub_22E903BEC((unsigned int *)v28);
            v26 = v33;
          }
          v25 = v26[4 * v25];
        }
        while ((_DWORD)v25);
      }
      ++v22;
    }
    while (v22 != (uint64_t *)v23);
  }
  if (v53 != v55)
    free(v53);
  if (v50 != v52)
    free(v50);
  if (v47 != (uint64_t *)v49)
    free(v47);
  if (v44 != v46)
    free(v44);
  if (v41 != v43)
    free(v41);
  if (v38 != (_QWORD *)v40)
    free(v38);
  llvm::deallocate_buffer((llvm *)v36, (void *)(16 * v37));
  if (v33 != (_DWORD *)v35)
    free(v33);
}

void sub_22E8CF264(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unsigned __int8 *v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  unint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v189;
  unint64_t v190;
  unsigned __int8 *v192;
  int v193;
  _QWORD *v194;
  void *v195[2];
  uint64_t v196;
  void *v197;
  void *v198;
  __int128 v199;
  _QWORD v200[6];

  v4 = (unsigned __int16 *)a2;
  v5 = a1;
  v200[4] = *MEMORY[0x24BDAC8D0];
  v194 = a2;
  v193 = *a3;
  v6 = *(unsigned __int8 *)a2;
  if (v6 == 224)
    v7 = &v193;
  else
    v7 = (int *)a3;
  if ((v6 - 102) >= 0x85)
    v8 = &v193;
  else
    v8 = v7;
  if (*(unsigned __int8 *)a2 <= 0xACu)
  {
    switch(*(_BYTE *)a2)
    {
      case 'X':
        sub_22E8CF264(a1, a2[2], v8);
        v11 = *(_DWORD *)(v5 + 24);
        v12 = *(_DWORD *)(v5 + 28);
        LODWORD(v195[0]) = v11;
        v13 = *v8 | 0x178F00000000;
        v14 = ((unint64_t)*((unsigned int *)v4 + 2) << 32) | 0x15DE;
        if (v11 >= v12)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = *(_DWORD *)(v5 + 24);
        }
        v15 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v11);
        *v15 = v13;
        v15[1] = v14;
        goto LABEL_114;
      case 'Y':
      case ']':
      case '^':
      case '_':
      case 'f':
      case 'g':
        goto LABEL_77;
      case 'Z':
        v92 = *(_DWORD *)(a1 + 24);
        v93 = *(_DWORD *)(a1 + 28);
        LODWORD(v195[0]) = v92;
        v94 = *v8 | 0x179000000000;
        v95 = ((unint64_t)*((unsigned int *)a2 + 2) << 32) | 0x15DF;
        if (v92 >= v93)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v92 = *(_DWORD *)(v5 + 24);
        }
        v96 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v92);
        *v96 = v94;
        v96[1] = v95;
        ++*(_DWORD *)(v5 + 24);
        v97 = *((_QWORD *)v4 + 2);
        if (v97)
          sub_22E8CF264(v5, v97, v195);
        v98 = v4[6] | (*((unsigned __int8 *)v4 + 14) << 16);
        if (v4[6])
        {
          v99 = (uint64_t *)(v4 + 12);
          v100 = 8 * v4[6];
          do
          {
            v101 = v5;
            v102 = *v99;
            v103 = *(unsigned int *)(v101 + 24);
            v104 = *(unsigned int *)(v101 + 28);
            LODWORD(v195[0]) = v103;
            v105 = *v8;
            v106 = *(unsigned int *)(v102 + 24);
            if (v103 >= v104)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v103 = *(unsigned int *)(a1 + 24);
            }
            v107 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v103);
            *v107 = v105 | 0x178B00000000;
            v107[1] = (v106 << 32) | 0x15DB;
            ++*(_DWORD *)(a1 + 24);
            v108 = *(_QWORD *)(v102 + 16);
            v5 = a1;
            sub_22E8CF264(a1, v108, v195);
            ++v99;
            v100 -= 8;
          }
          while (v100);
          v98 = v4[6] | (*((unsigned __int8 *)v4 + 14) << 16);
        }
        if ((v98 & 0x10000) == 0)
          return;
        v166 = *(_QWORD *)&v4[4 * (unsigned __int16)v98 + 12];
        if (!v166)
          return;
        v167 = *(_DWORD *)(a1 + 24);
        v168 = *(_DWORD *)(a1 + 28);
        LODWORD(v195[0]) = v167;
        v169 = *v8 | 0x178D00000000;
        v170 = ((unint64_t)*(unsigned int *)(v166 + 8) << 32) | 0x15DC;
        if (v167 >= v168)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v167 = *(_DWORD *)(a1 + 24);
        }
        v171 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v167);
        *v171 = v169;
        v171[1] = v170;
        ++*(_DWORD *)(a1 + 24);
        v152 = a1;
        v84 = v166;
        goto LABEL_208;
      case '[':
        v85 = *(_DWORD *)(a1 + 24);
        v86 = *(_DWORD *)(a1 + 28);
        LODWORD(v195[0]) = v85;
        v87 = *v8 | 0x178A00000000;
        v88 = ((unint64_t)*((unsigned int *)a2 + 2) << 32) | 0x15DA;
        if (v85 >= v86)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v85 = *(_DWORD *)(v5 + 24);
        }
        v89 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v85);
        *v89 = v87;
        v89[1] = v88;
        ++*(_DWORD *)(v5 + 24);
        v84 = *((_QWORD *)v4 + 2);
        goto LABEL_207;
      case '\\':
        LODWORD(v195[0]) = *(_DWORD *)(a1 + 24);
        v79 = v195[0];
        v80 = *v8;
        sub_22F0D5A50((uint64_t)a2);
        v82 = v81 << 32;
        if (v79 >= *(_DWORD *)(v5 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v79 = *(_DWORD *)(v5 + 24);
        }
        v83 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v79);
        *v83 = v80 | 0x178C00000000;
        v83[1] = v82;
LABEL_114:
        ++*(_DWORD *)(v5 + 24);
        v84 = *((_QWORD *)v4 + 3);
        goto LABEL_207;
      case 'a':
        LODWORD(v195[0]) = *(_DWORD *)(a1 + 24);
        v111 = v195[0];
        v112 = *v8;
        sub_22F0D4E74((uint64_t)a2);
        v114 = (v113 << 32) | 0x15E3;
        if (v111 >= *(_DWORD *)(v5 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v111 = *(_DWORD *)(v5 + 24);
        }
        v115 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v111);
        *v115 = v112 | 0x179400000000;
        v115[1] = v114;
        ++*(_DWORD *)(v5 + 24);
        v116 = *((_QWORD *)v4 + 2);
        if (v116)
          sub_22E8CF264(v5, v116, v195);
        v117 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
        v118 = *v117;
        if (v118 == 95)
        {
          LODWORD(v195[0]) = *(_DWORD *)(v5 + 24);
          v175 = v195[0];
          v176 = *v8;
          sub_22F0D4E74((uint64_t)v117);
          v178 = (v177 << 32) | 0x15E2;
          if (v175 >= *(_DWORD *)(v5 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v175 = *(_DWORD *)(v5 + 24);
          }
          v179 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v175);
          *v179 = v176 | 0x179300000000;
          v179[1] = v178;
          ++*(_DWORD *)(v5 + 24);
          v84 = *((_QWORD *)v117 + 2);
        }
        else
        {
          if (v118 != 94)
            return;
          LODWORD(v195[0]) = *(_DWORD *)(v5 + 24);
          v119 = v195[0];
          v120 = *v8;
          sub_22F0D4E74((uint64_t)v117);
          v122 = (v121 << 32) | 0x15E1;
          if (v119 >= *(_DWORD *)(v5 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v119 = *(_DWORD *)(v5 + 24);
          }
          v123 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v119);
          *v123 = v120 | 0x179200000000;
          v123[1] = v122;
          ++*(_DWORD *)(v5 + 24);
          v84 = *((_QWORD *)v117 + 3);
        }
        goto LABEL_207;
      case 'b':
      case 'c':
        goto LABEL_11;
      case 'd':
        v109 = *(unsigned __int16 *)a2;
        if ((v109 & 0x100) != 0 && (v110 = a2[3]) != 0)
        {
          sub_22E8CF264(a1, v110, v8);
          v109 = *v4;
          v10 = 1;
        }
        else
        {
          v10 = 0;
        }
        if ((v109 & 0x200) != 0)
        {
          v184 = *(_QWORD *)&v4[4 * ((v109 >> 8) & 1) + 12];
          if (v184 && (v185 = *(_QWORD *)(v184 + 8)) != 0)
          {
            v5 = a1;
            sub_22E8D0F50(a1, v185, v8);
            ++v10;
          }
          else
          {
            v5 = a1;
          }
        }
LABEL_183:
        v157 = *v8;
        *((_DWORD *)sub_22F2D2BB8(v5 + 800, (uint64_t *)&v194) + 2) = v157;
        v158 = *(_DWORD *)(v5 + 832);
        if (v158 >= *(_DWORD *)(v5 + 836))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v158 = *(_DWORD *)(v5 + 832);
        }
        *(_QWORD *)(*(_QWORD *)(v5 + 824) + 8 * v158) = v4;
        ++*(_DWORD *)(v5 + 832);
        goto LABEL_81;
      case 'e':
        v124 = *(unsigned int *)a2;
        if (v124 < 0x100)
          goto LABEL_80;
        v125 = 0;
        v126 = 8 * (v124 >> 8);
        break;
      case 'h':
        v90 = a2[3];
        v91 = *(_DWORD *)(a1 + 1120);
        if (v91 >= *(_DWORD *)(a1 + 1124))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v91 = *(_DWORD *)(v5 + 1120);
        }
        v10 = 0;
        *(_QWORD *)(*(_QWORD *)(v5 + 1112) + 8 * v91) = v90;
        ++*(_DWORD *)(v5 + 1120);
        goto LABEL_81;
      default:
        v10 = 0;
        switch(*(_BYTE *)a2)
        {
          case 6:
            LODWORD(v195[0]) = *(_DWORD *)(a1 + 24);
            v46 = v195[0];
            v47 = *v8;
            sub_22F0D4E74((uint64_t)a2);
            v49 = (v48 << 32) | 0x15D8;
            if (v46 >= *(_DWORD *)(v5 + 28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v46 = *(_DWORD *)(v5 + 24);
            }
            v50 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v46);
            *v50 = v47 | 0x178700000000;
            v50[1] = v49;
            ++*(_DWORD *)(v5 + 24);
            v51 = *((_QWORD *)v4 + 2);
            if (v51)
              sub_22E8CF264(v5, v51, v195);
            v52 = *((unsigned int *)v4 + 3);
            if ((_DWORD)v52)
            {
              v53 = v5;
              v54 = (uint64_t *)(v4 + 12);
              do
              {
                v55 = *v54;
                LODWORD(v195[0]) = *(_DWORD *)(v53 + 24);
                v56 = LODWORD(v195[0]);
                v57 = *v8;
                sub_22F0D4E74(v55);
                v59 = v58;
                if (v56 >= *(unsigned int *)(v53 + 28))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v56 = *(unsigned int *)(a1 + 24);
                }
                v53 = a1;
                v60 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v56);
                *v60 = v57 | 0x178600000000;
                v60[1] = (v59 << 32) | 0x15D7;
                ++*(_DWORD *)(a1 + 24);
                sub_22E8CF264(a1, *(_QWORD *)(v55 + 24), v195);
                ++v54;
                --v52;
              }
              while (v52);
            }
            return;
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xD:
          case 0xE:
            goto LABEL_77;
          case 0xC:
            v127 = a2[1];
            if ((v127 & 1) != 0)
            {
              v128 = (uint64_t *)((v127 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v129 = &v128[*(unsigned int *)(v127 & 0xFFFFFFFFFFFFFFFELL)];
            }
            else
            {
              if (v127)
                v128 = a2 + 1;
              else
                v128 = 0;
              if (v127)
                v129 = a2 + 2;
              else
                v129 = 0;
            }
            while (v128 != v129)
            {
              v172 = *v128++;
              sub_22E8D0F50(a1, v172, a3);
            }
            return;
          case 0xF:
            goto LABEL_183;
          case 0x10:
            v130 = *(unsigned __int16 *)a2;
            v131 = v130 & 0x700;
            v132 = v130 & 0x600;
            if (v131 != 256
              && v132 != 512
              && *(unsigned __int8 *)a2[((v130 >> 13) & 1) + 2 + ((v130 >> 12) & 1)] != 194)
            {
              goto LABEL_80;
            }
            if (v132 == 512)
              v133 = 0x178400000000;
            else
              v133 = 0x178800000000;
            if ((v130 & 0x1000) != 0)
            {
              v186 = a2[((v130 >> 13) & 1) + 2];
              if (v186)
              {
                v187 = *(_QWORD *)(v186 + 8);
                if (v187)
                  sub_22E8D0F50(a1, v187, v8);
              }
            }
            v134 = *(_DWORD *)(v5 + 24);
            v135 = *(_DWORD *)(v5 + 28);
            LODWORD(v195[0]) = v134;
            if (v131 == 256)
              v136 = 0x178500000000;
            else
              v136 = v133;
            v137 = v136 | *v8;
            v138 = (unint64_t)*((unsigned int *)v4 + 1) << 32;
            if (v134 >= v135)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v134 = *(_DWORD *)(v5 + 24);
            }
            v139 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v134);
            *v139 = v137;
            v139[1] = v138;
            v140 = *(_DWORD *)(v5 + 24) + 1;
            *(_DWORD *)(v5 + 24) = v140;
            v141 = *v4;
            if ((v141 & 0x600) != 0x200)
            {
              sub_22E8CF264(v5, *(_QWORD *)&v4[4 * ((v141 >> 13) & 1) + 8 + 4 * ((v141 >> 12) & 1)], v195);
              v140 = *(_DWORD *)(v5 + 24);
            }
            LODWORD(v195[0]) = v140;
            v142 = v136 | *v8;
            v143 = (unint64_t)*((unsigned int *)v4 + 1) << 32;
            if (v140 >= *(_DWORD *)(v5 + 28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v140 = *(_DWORD *)(v5 + 24);
            }
            v144 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v140);
            *v144 = v142;
            v144[1] = v143;
            ++*(_DWORD *)(v5 + 24);
            sub_22E8CF264(v5, *(_QWORD *)&v4[4 * ((*v4 >> 12) & 1) + 12 + 4 * ((*v4 >> 13) & 1)], v195);
            v145 = *v4;
            if ((v145 & 0x800) == 0)
              return;
            v146 = *(_QWORD *)&v4[4 * ((v145 >> 13) & 1) + 16 + 4 * ((v145 >> 12) & 1)];
            if (!v146)
              return;
            v147 = *(_DWORD *)(v5 + 24);
            v148 = *(_DWORD *)(v5 + 28);
            LODWORD(v195[0]) = v147;
            v149 = v136 | *v8;
            v150 = (unint64_t)*((unsigned int *)v4 + 1) << 32;
            if (v147 >= v148)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v147 = *(_DWORD *)(v5 + 24);
            }
            v151 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v147);
            *v151 = v149;
            v151[1] = v150;
            ++*(_DWORD *)(v5 + 24);
            v152 = v5;
            v84 = v146;
            goto LABEL_208;
          case 0x11:
            v153 = sub_22EFFA6B0((unsigned __int8 *)a2[2]);
            if (*v153 == 104)
            {
              v154 = *((_QWORD *)v153 + 3);
              v155 = *v8;
              *((_DWORD *)sub_22F2D2BB8(v5 + 800, (uint64_t *)&v194) + 2) = v155;
              if (v154)
              {
                v156 = *(_DWORD *)(v5 + 832);
                if (v156 >= *(_DWORD *)(v5 + 836))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v156 = *(_DWORD *)(v5 + 832);
                }
                *(_QWORD *)(*(_QWORD *)(v5 + 824) + 8 * v156) = v4;
                ++*(_DWORD *)(v5 + 832);
                return;
              }
            }
            else
            {
              v173 = *v8;
              *((_DWORD *)sub_22F2D2BB8(v5 + 800, (uint64_t *)&v194) + 2) = v173;
            }
            v174 = *(_DWORD *)(v5 + 976);
            if (v174 >= *(_DWORD *)(v5 + 980))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v174 = *(_DWORD *)(v5 + 976);
            }
            v10 = 0;
            *(_QWORD *)(*(_QWORD *)(v5 + 968) + 8 * v174) = v4;
            ++*(_DWORD *)(v5 + 976);
            break;
          default:
            if (v6 != 1)
              goto LABEL_77;
            if (!*((_DWORD *)a2 + 20))
              goto LABEL_80;
            v61 = *v8;
            *((_DWORD *)sub_22F2D2BB8(a1 + 800, (uint64_t *)&v194) + 2) = v61;
            v62 = *(_DWORD *)(v5 + 1024);
            if (v62 >= *(_DWORD *)(v5 + 1028))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v62 = *(_DWORD *)(v5 + 1024);
            }
            *(_QWORD *)(*(_QWORD *)(v5 + 1016) + 8 * v62) = v4;
            ++*(_DWORD *)(v5 + 1024);
            v63 = *((unsigned int *)v4 + 20);
            if (!(_DWORD)v63)
              goto LABEL_80;
            v64 = *((_QWORD *)v4 + 4) + 8 * *((unsigned int *)v4 + 4) + 8 * *((unsigned int *)v4 + 5);
            v65 = *(_DWORD *)(v5 + 1168);
            v66 = 8 * v63;
            do
            {
              v67 = *(_QWORD *)(*(_QWORD *)v64 + 24);
              if (v65 >= *(_DWORD *)(v5 + 1172))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v65 = *(_DWORD *)(v5 + 1168);
              }
              v10 = 0;
              *(_QWORD *)(*(_QWORD *)(v5 + 1160) + 8 * v65) = v67;
              v65 = *(_DWORD *)(v5 + 1168) + 1;
              *(_DWORD *)(v5 + 1168) = v65;
              v64 += 8;
              v66 -= 8;
            }
            while (v66);
            goto LABEL_81;
        }
        goto LABEL_81;
    }
    while (*(_WORD *)(a2[v125 / 8 + 2] + 32) != 41)
    {
      v10 = 0;
      v125 += 8;
      if (v126 == v125)
        goto LABEL_81;
    }
    v180 = *v8;
    v195[0] = a2;
    *((_DWORD *)sub_22F2D2BB8(a1 + 800, (uint64_t *)v195) + 2) = v180;
    v181 = *(_DWORD *)(v5 + 1072);
    if (v181 >= *(_DWORD *)(v5 + 1076))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v181 = *(_DWORD *)(v5 + 1072);
    }
    v10 = 0;
    *(_QWORD *)(*(_QWORD *)(v5 + 1064) + 8 * v181) = v4;
    ++*(_DWORD *)(v5 + 1072);
  }
  else
  {
    if (v6 != 173)
    {
      if (v6 == 186)
      {
        v37 = a2[2];
        if ((v37 & 4) != 0 && sub_22F3B2674(v37 & 0xFFFFFFFFFFFFFFF8) == 1)
        {
          *(_QWORD *)&v199 = v200;
          *((_QWORD *)&v199 + 1) = 0x400000000;
          v195[0] = &v196;
          v195[1] = (void *)0x400000000;
          v38 = *((_QWORD *)v4 + 2);
          v39 = v38 & 0xFFFFFFFFFFFFFFF8;
          if ((v38 & 4) != 0)
            v39 = *(_QWORD *)(v39 + 40);
          v40 = sub_22EFF59A4((unsigned __int8 *)v39, (uint64_t)&v199, (uint64_t)v195);
          if (sub_22F115260(*((_QWORD *)v40 + 1)))
          {
            v41 = *v8;
            sub_22EFF605C((uint64_t)v40);
            v43 = (v42 << 32) | 0x15E4;
            v44 = *(_DWORD *)(v5 + 24);
            if (v44 >= *(_DWORD *)(v5 + 28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v44 = *(_DWORD *)(v5 + 24);
            }
            v45 = (_QWORD *)(*(_QWORD *)(v5 + 16) + 16 * v44);
            *v45 = v41;
            v45[1] = v43;
            LODWORD(v45) = *(_DWORD *)(v5 + 24);
            *(_DWORD *)(v5 + 24) = (_DWORD)v45 + 1;
            *a3 = v45;
          }
          if (v195[0] != &v196)
            free(v195[0]);
          if ((_QWORD *)v199 != v200)
            free((void *)v199);
        }
      }
      else
      {
        if (v6 == 235)
        {
LABEL_11:
          v9 = *v8;
          v10 = 0;
          *((_DWORD *)sub_22F2D2BB8(a1 + 800, (uint64_t *)&v194) + 2) = v9;
          goto LABEL_81;
        }
LABEL_77:
        if ((v6 - 86) >= 0xFFFFFFBF)
        {
          v68 = v6 - 75;
          if (v68 > 5 || ((1 << v68) & 0x23) == 0)
          {
            v159 = a2[3];
            if (v159)
            {
              if (*(_BYTE *)(v159 + 8))
              {
                v160 = (_QWORD *)(a1 + 16);
                LODWORD(v195[0]) = *(_DWORD *)(a1 + 24);
                v161 = sub_22F0D89F8((unsigned __int8 *)a2);
                sub_22F0D5A50(v161);
                v163 = v162;
                v164 = *(unsigned int *)(v5 + 24);
                if (v164 >= *(_DWORD *)(v5 + 28))
                {
                  v182 = *v8;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v183 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * *(unsigned int *)(v5 + 24));
                  *v183 = v182 | 0x171800000000;
                  v183[1] = (v163 << 32) | 0x1700;
                }
                else
                {
                  v165 = *v160 + 16 * v164;
                  *(_DWORD *)v165 = *v8;
                  *(_QWORD *)(v165 + 4) = 0x170000001718;
                  *(_DWORD *)(v165 + 12) = v162;
                }
                ++*(_DWORD *)(v5 + 24);
                v84 = sub_22F0D89F8((unsigned __int8 *)v4);
LABEL_207:
                v152 = v5;
LABEL_208:
                sub_22E8CF264(v152, v84, v195);
                return;
              }
            }
          }
        }
      }
      goto LABEL_80;
    }
    v16 = *(unsigned int *)a2;
    if (v16 < 0x80000)
    {
LABEL_80:
      v10 = 0;
      goto LABEL_81;
    }
    v17 = 0;
    v189 = a2 + 3;
    v190 = v16 >> 19;
    do
    {
      v18 = v189[v17];
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0 || !v19)
      {
        if ((v18 & 4) != 0)
          v31 = v18 & 0xFFFFFFFFFFFFFFF8;
        else
          v31 = 0;
        v32 = *a3;
        sub_22EFF605C(v31);
        v34 = v33;
        v35 = *(unsigned int *)(v5 + 24);
        if (v35 >= *(unsigned int *)(v5 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v35 = *(unsigned int *)(v5 + 24);
        }
        v36 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v35);
        *v36 = v32 | 0x15C800000000;
        v36[1] = (v34 << 32) | 0x15D6;
        LODWORD(v36) = *(_DWORD *)(v5 + 24);
        *(_DWORD *)(v5 + 24) = (_DWORD)v36 + 1;
        *a3 = v36;
      }
      else
      {
        v20 = *(unsigned int *)(v19 + 112);
        if ((_DWORD)v20)
        {
          v21 = *(_QWORD **)(v19 + 104);
          v22 = 16 * v20;
          do
          {
            v23 = *v21 & 0xFFFFFFFFFFFFFFF8;
            if (!sub_22E49C868(v23))
            {
              switch(sub_22F115260(*(_QWORD *)(v23 + 48)))
              {
                case 0u:
                  break;
                case 1u:
                  v24 = 0x15C400000000;
                  v25 = 5585;
                  goto LABEL_29;
                case 2u:
                  v24 = 0x15C600000000;
                  v25 = 5587;
                  goto LABEL_29;
                case 3u:
                  v24 = 0x15C700000000;
                  v25 = 5588;
                  goto LABEL_29;
                case 4u:
                  v24 = 0x15C500000000;
                  v25 = 5586;
                  goto LABEL_29;
                default:
                  v24 = 0;
                  v25 = 0;
LABEL_29:
                  v26 = *(unsigned int *)(v23 + 24);
                  if (!(_DWORD)v26)
                    v26 = *(unsigned int *)(v19 + 24);
                  v27 = *a3;
                  v28 = *(unsigned int *)(a1 + 24);
                  if (v28 >= *(unsigned int *)(a1 + 28))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v28 = *(unsigned int *)(a1 + 24);
                  }
                  v29 = v24 | v27;
                  v5 = a1;
                  v30 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v28);
                  *v30 = v29;
                  v30[1] = v25 | (v26 << 32);
                  LODWORD(v30) = *(_DWORD *)(a1 + 24);
                  *(_DWORD *)(a1 + 24) = (_DWORD)v30 + 1;
                  *a3 = v30;
                  break;
              }
            }
            v21 += 2;
            v22 -= 16;
          }
          while (v22);
        }
      }
      ++v17;
    }
    while (v17 != v190);
    v10 = 0;
    v4 = (unsigned __int16 *)a2;
  }
LABEL_81:
  sub_22F0D492C((uint64_t)v4);
  v199 = *(_OWORD *)v195;
  v69 = (unint64_t)v197;
  v200[0] = v196;
  v70 = (unint64_t)v198;
  v72 = (unint64_t)v195[1];
  v71 = (uint64_t *)v195[0];
  if (v195[0] != v197 || v195[1] != v198)
  {
    v74 = v5 + 800;
    while (1)
    {
      v192 = 0;
      if ((v72 & 3) != 0)
      {
        if ((v72 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v71 = (uint64_t *)((v72 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v71 = (uint64_t *)sub_22F3AC1A8(*v71);
      }
      v75 = (unsigned __int8 *)*v71;
      v192 = v75;
      if (v75)
        break;
LABEL_102:
      if ((v72 & 3) != 0)
      {
        if (v72 < 4)
          sub_22F3F2FE0((uint64_t)&v199, 1);
        else
          sub_22F0D8720((uint64_t)&v199);
        v5 = a1;
      }
      else
      {
        *(_QWORD *)&v199 = v199 + 8;
      }
      v72 = *((_QWORD *)&v199 + 1);
      v71 = (uint64_t *)v199;
      if (v199 == __PAIR128__(v70, v69))
        return;
    }
    if (v10)
    {
      --v10;
      goto LABEL_102;
    }
    while (1)
    {
      v78 = *v75;
      if ((v78 & 0xFE) != 0x62)
      {
        if (v78 != 235)
        {
          sub_22E8CF264(v5, v75, v8);
          v10 = 0;
          v72 = *((_QWORD *)&v199 + 1);
          goto LABEL_102;
        }
        v76 = v75 + 16;
        goto LABEL_94;
      }
      if (v78 == 99)
        break;
      if (v78 == 98)
      {
        v76 = &v75[8 * (((unint64_t)*(unsigned __int16 *)v75 >> 8) & 1) + 32];
        goto LABEL_94;
      }
LABEL_95:
      v77 = *v8;
      *((_DWORD *)sub_22F2D2BB8(v74, (uint64_t *)&v192) + 2) = v77;
      v192 = v75;
    }
    v76 = v75 + 24;
LABEL_94:
    v75 = *(unsigned __int8 **)v76;
    goto LABEL_95;
  }
}

void sub_22E8D03B8(_QWORD **a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  unsigned int v8;
  llvm *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  llvm *v35;
  uint64_t v36;
  llvm *v37;
  uint64_t v38;
  llvm *v39;
  unsigned int v40;
  __int128 v41;
  unsigned int *v42;
  unsigned int v43;
  llvm *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  char *v51;
  int v52;
  char *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  llvm *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  unint64_t v79;
  unsigned int *v80;
  char *v81;
  char *v82;
  unsigned int *v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _BYTE *v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  int v95;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unsigned int *v100;
  int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  llvm *v105;
  char *v106;
  __int128 v107;
  llvm *v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111[24];
  uint64_t v112[12];
  BOOL v113;
  unsigned int v114[24];
  llvm *v115;
  uint64_t v116;
  unsigned int v117;
  char v118;
  void *v119;
  uint64_t v120;
  _DWORD v121[14];
  void *v122;
  uint64_t v123;
  _BYTE v124[512];
  void *v125;
  uint64_t v126;
  _BYTE v127[32];
  uint64_t *v128;
  uint64_t v129;
  _BYTE v130[32];
  unsigned int *v131;
  uint64_t v132;
  _QWORD v133[7];

  v133[5] = *MEMORY[0x24BDAC8D0];
  v3 = 121;
  if (a2)
    v3 = 127;
  v128 = (uint64_t *)v130;
  v129 = 0x400000000;
  if (!LODWORD(a1[v3 + 1]))
    goto LABEL_4;
  sub_22F24C890((uint64_t)&v128, (uint64_t)&a1[v3]);
  if (!(_DWORD)v129)
    goto LABEL_4;
  v5 = 139;
  if (a2)
    v5 = 145;
  v125 = v127;
  v126 = 0x400000000;
  if (!LODWORD(a1[v5 + 1]) || (sub_22F24C890((uint64_t)&v125, (uint64_t)&a1[v5]), !(_DWORD)v126))
  {
    v6 = (unsigned int *)*a1;
    sub_22F0D5A50(*v128);
    sub_22E8FCA40(v6, v7, 0xE14u, 0, (uint64_t)v111);
    sub_22E903BEC(v111);
    goto LABEL_12;
  }
  v122 = v124;
  v123 = 0x2000000000;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v8 = v129;
  v9 = 0;
  if (!(_DWORD)v129)
  {
LABEL_78:
    v37 = (llvm *)((char *)v9 + 16 * v8);
    v35 = v37;
    goto LABEL_81;
  }
  v10 = v128;
  v11 = &v128[v129];
  do
  {
    v12 = *v10;
    v112[0] = *v10;
    if (*((_BYTE *)a1 + 8) && !sub_22F24C318((uint64_t)a1[100], *((_DWORD *)a1 + 204), v12, v114))
      goto LABEL_37;
    v13 = *((_DWORD *)sub_22F2D2BB8((uint64_t)(a1 + 100), v112) + 2);
    if (!v117)
    {
      v16 = 0;
      goto LABEL_30;
    }
    v14 = v117 - 1;
    v15 = (v117 - 1) & (37 * v13);
    v16 = (char *)v9 + 16 * v15;
    v17 = *(_DWORD *)v16;
    if (v13 != *(_DWORD *)v16)
    {
      v18 = 0;
      v19 = 1;
      while (v17 != -1)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -2;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = (char *)v9 + 16 * (v21 & v14);
        v17 = *(_DWORD *)v16;
        if (v13 == *(_DWORD *)v16)
          goto LABEL_35;
      }
      if (v18)
        v16 = v18;
LABEL_30:
      if (4 * (int)v116 + 4 >= 3 * v117)
      {
        sub_22E3C34FC((uint64_t)&v115, 2 * v117);
        v9 = v115;
        if (v117)
        {
          v22 = v117 - 1;
          v23 = (v117 - 1) & (37 * v13);
          v16 = (char *)v115 + 16 * v23;
          v24 = *(_DWORD *)v16;
          if (v13 == *(_DWORD *)v16)
            goto LABEL_32;
          v25 = 0;
          v26 = 1;
          while (v24 != -1)
          {
            if (v25)
              v27 = 0;
            else
              v27 = v24 == -2;
            if (v27)
              v25 = v16;
            v28 = v23 + v26++;
            v23 = v28 & v22;
            v16 = (char *)v115 + 16 * (v28 & v22);
            v24 = *(_DWORD *)v16;
            if (v13 == *(_DWORD *)v16)
              goto LABEL_32;
          }
LABEL_67:
          if (v25)
            v16 = v25;
          goto LABEL_32;
        }
      }
      else
      {
        if (v117 + ~(_DWORD)v116 - HIDWORD(v116) > v117 >> 3)
        {
LABEL_32:
          LODWORD(v116) = v116 + 1;
          if (*(_DWORD *)v16 != -1)
            --HIDWORD(v116);
          *(_DWORD *)v16 = v13;
          *((_QWORD *)v16 + 1) = 0;
          goto LABEL_35;
        }
        sub_22E3C34FC((uint64_t)&v115, v117);
        v9 = v115;
        if (v117)
        {
          v29 = v117 - 1;
          v30 = (v117 - 1) & (37 * v13);
          v16 = (char *)v115 + 16 * v30;
          v31 = *(_DWORD *)v16;
          if (v13 == *(_DWORD *)v16)
            goto LABEL_32;
          v25 = 0;
          v32 = 1;
          while (v31 != -1)
          {
            if (v25)
              v33 = 0;
            else
              v33 = v31 == -2;
            if (v33)
              v25 = v16;
            v34 = v30 + v32++;
            v30 = v34 & v29;
            v16 = (char *)v115 + 16 * (v34 & v29);
            v31 = *(_DWORD *)v16;
            if (v13 == *(_DWORD *)v16)
              goto LABEL_32;
          }
          goto LABEL_67;
        }
      }
      v16 = 0;
      goto LABEL_32;
    }
LABEL_35:
    if (!*((_QWORD *)v16 + 1))
      *((_QWORD *)v16 + 1) = v12;
LABEL_37:
    ++v10;
  }
  while (v10 != v11);
  if (HIDWORD(v123) >= v116)
  {
    v8 = v117;
    if ((_DWORD)v116)
      goto LABEL_73;
    goto LABEL_78;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = v117;
LABEL_73:
  v35 = (llvm *)((char *)v9 + 16 * v8);
  if (v8)
  {
    v36 = 0;
    while (*(_DWORD *)((char *)v9 + v36) >= 0xFFFFFFFE)
    {
      v36 += 16;
      if (16 * v8 == v36)
      {
        v37 = (llvm *)((char *)v9 + 16 * v8);
        goto LABEL_81;
      }
    }
    v37 = (llvm *)((char *)v9 + v36);
  }
  else
  {
    v37 = v9;
  }
LABEL_81:
  v38 = v8;
  v39 = (llvm *)((char *)v9 + 16 * v8);
  if (v37 != v39)
  {
    v40 = v123;
    do
    {
      v41 = *(_OWORD *)v37;
      if (v40 >= HIDWORD(v123))
      {
        v107 = *(_OWORD *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = v107;
        v40 = v123;
      }
      *((_OWORD *)v122 + v40) = v41;
      v40 = v123 + 1;
      LODWORD(v123) = v123 + 1;
      v42 = (unsigned int *)((char *)v37 + 16);
      while (v42 != (unsigned int *)v35)
      {
        v43 = *v42;
        v42 += 4;
        if (v43 <= 0xFFFFFFFD)
        {
          v37 = (llvm *)(v42 - 4);
          goto LABEL_90;
        }
      }
      v37 = v35;
LABEL_90:
      ;
    }
    while (v37 != v39);
  }
  llvm::deallocate_buffer(v9, (void *)(16 * v38));
  v108 = 0;
  v109 = 0;
  v110 = 0;
  if ((_DWORD)v126)
  {
    v44 = 0;
    v45 = (uint64_t *)v125;
    v46 = (char *)v125 + 8 * v126;
    while (1)
    {
      v47 = *v45;
      if (!*((_BYTE *)a1 + 8)
        || sub_22F24C318((uint64_t)a1[100], *((_DWORD *)a1 + 204), *(_QWORD *)(v47 + 48), &v115))
      {
        break;
      }
LABEL_115:
      if (++v45 == (uint64_t *)v46)
      {
        v70 = v110;
        v71 = (_DWORD)v109 == 0;
        goto LABEL_147;
      }
    }
    v115 = *(llvm **)(v47 + 48);
    v48 = *((_DWORD *)sub_22F2D2BB8((uint64_t)(a1 + 100), (uint64_t *)&v115) + 2);
    if (!v110)
    {
      v51 = 0;
      goto LABEL_108;
    }
    v49 = v110 - 1;
    v50 = (v110 - 1) & (37 * v48);
    v51 = (char *)v44 + 16 * v50;
    v52 = *(_DWORD *)v51;
    if (v48 != *(_DWORD *)v51)
    {
      v53 = 0;
      v54 = 1;
      while (v52 != -1)
      {
        if (v53)
          v55 = 0;
        else
          v55 = v52 == -2;
        if (v55)
          v53 = v51;
        v56 = v50 + v54++;
        v50 = v56 & v49;
        v51 = (char *)v44 + 16 * (v56 & v49);
        v52 = *(_DWORD *)v51;
        if (v48 == *(_DWORD *)v51)
          goto LABEL_113;
      }
      if (v53)
        v51 = v53;
LABEL_108:
      if (4 * (int)v109 + 4 < 3 * v110)
      {
        if (v110 + ~(_DWORD)v109 - HIDWORD(v109) > v110 >> 3)
          goto LABEL_110;
        sub_22E3C34FC((uint64_t)&v108, v110);
        v44 = v108;
        if (v110)
        {
          v64 = v110 - 1;
          v65 = (v110 - 1) & (37 * v48);
          v51 = (char *)v108 + 16 * v65;
          v66 = *(_DWORD *)v51;
          if (v48 != *(_DWORD *)v51)
          {
            v60 = 0;
            v67 = 1;
            while (v66 != -1)
            {
              if (v60)
                v68 = 0;
              else
                v68 = v66 == -2;
              if (v68)
                v60 = v51;
              v69 = v65 + v67++;
              v65 = v69 & v64;
              v51 = (char *)v108 + 16 * (v69 & v64);
              v66 = *(_DWORD *)v51;
              if (v48 == *(_DWORD *)v51)
                goto LABEL_110;
            }
            goto LABEL_143;
          }
          goto LABEL_110;
        }
LABEL_142:
        v51 = 0;
        goto LABEL_110;
      }
      sub_22E3C34FC((uint64_t)&v108, 2 * v110);
      v44 = v108;
      if (!v110)
        goto LABEL_142;
      v57 = v110 - 1;
      v58 = (v110 - 1) & (37 * v48);
      v51 = (char *)v108 + 16 * v58;
      v59 = *(_DWORD *)v51;
      if (v48 != *(_DWORD *)v51)
      {
        v60 = 0;
        v61 = 1;
        while (v59 != -1)
        {
          if (v60)
            v62 = 0;
          else
            v62 = v59 == -2;
          if (v62)
            v60 = v51;
          v63 = v58 + v61++;
          v58 = v63 & v57;
          v51 = (char *)v108 + 16 * (v63 & v57);
          v59 = *(_DWORD *)v51;
          if (v48 == *(_DWORD *)v51)
            goto LABEL_110;
        }
LABEL_143:
        if (v60)
          v51 = v60;
      }
LABEL_110:
      LODWORD(v109) = v109 + 1;
      if (*(_DWORD *)v51 != -1)
        --HIDWORD(v109);
      *(_DWORD *)v51 = v48;
      *((_QWORD *)v51 + 1) = 0;
    }
LABEL_113:
    if (!*((_QWORD *)v51 + 1))
      *((_QWORD *)v51 + 1) = v47;
    goto LABEL_115;
  }
  v70 = 0;
  v44 = 0;
  v71 = 1;
LABEL_147:
  v72 = *((_DWORD *)a1 + 6);
  v119 = v121;
  v120 = 0x600000000;
  sub_22E47EDD0((uint64_t)&v119, (v72 + 63) >> 6, 0);
  v121[12] = v72;
  v73 = 16 * v70;
  if (v71)
  {
LABEL_151:
    v74 = (llvm *)((char *)v44 + 16 * v70);
  }
  else
  {
    v74 = v44;
    if (v70)
    {
      while (*(_DWORD *)v74 >= 0xFFFFFFFE)
      {
        v74 = (llvm *)((char *)v74 + 16);
        v73 -= 16;
        if (!v73)
          goto LABEL_151;
      }
    }
  }
  v104 = (unsigned int *)((char *)v44 + 16 * v70);
  while (v74 != (llvm *)v104)
  {
    v75 = *(unsigned int *)v74;
    v76 = *((_QWORD *)v74 + 1);
    v77 = (char *)v119;
    if ((_DWORD)v120)
      bzero(v119, 8 * v120);
    *(_QWORD *)&v77[(v75 >> 3) & 0x1FFFFFF8] |= 1 << v75;
    v105 = v74;
    if (v75)
    {
      v78 = a1[2];
      v79 = v75;
      while (!HIDWORD(v78[2 * v79]))
      {
        v79 = LODWORD(v78[2 * v79]);
        *(_QWORD *)&v77[(v79 >> 3) & 0x1FFFFFF8] |= 1 << v79;
        if (!(_DWORD)v79)
          goto LABEL_159;
      }
    }
    else
    {
LABEL_159:
      v79 = 0;
    }
    if ((_DWORD)v123)
    {
      v80 = (unsigned int *)v122;
      v81 = (char *)v122 + 16 * v123;
      v106 = v81;
      do
      {
        v82 = (char *)v119;
        v83 = v80;
        while (1)
        {
          v84 = *v83;
          if (((*(_QWORD *)((char *)v119 + ((v84 >> 3) & 0x1FFFFFF8)) >> v84) & 1) != 0)
            break;
          if (v84)
            v85 = v84 >= v79;
          else
            v85 = 0;
          if (v85)
          {
            v83 = (unsigned int *)&a1[2][2 * v84];
            if (!v83[2])
              continue;
          }
          v86 = *v80;
          if (v86 != v75 || *((_BYTE *)a1 + 8) == 0)
          {
            v88 = v75;
            if (v86 != v75)
            {
              v89 = a1[2];
              v90 = v75;
              v88 = *v80;
              do
              {
                if (v88 >= v90)
                  v88 = LODWORD(v89[2 * v88]);
                else
                  v90 = LODWORD(v89[2 * v90]);
              }
              while (v88 != v90);
            }
            v91 = (_BYTE *)*((_QWORD *)v80 + 1);
            v118 = 0;
            if (v86 != v88)
            {
              v92 = a1[2];
              do
              {
                if (LODWORD(v92[2 * v86 + 1]))
                {
                  sub_22E8D1800((unsigned int *)*a1, v91, v76, &v118);
                  sub_22E8FCA40(*a1, HIDWORD(a1[2][2 * v86 + 1]), a1[2][2 * v86 + 1], 0, (uint64_t)&v115);
                  sub_22E903BEC((unsigned int *)&v115);
                  v92 = a1[2];
                }
                v86 = LODWORD(v92[2 * v86]);
              }
              while (v86 != v88);
            }
            v131 = (unsigned int *)v133;
            v132 = 0xA00000000;
            if (v75 != v88)
            {
              v93 = a1[2];
              v94 = v75;
              do
              {
                v95 = HIDWORD(v93[2 * v94]);
                if (v95 != 6038 || (*(_QWORD *)(*a1)[9] & 0x200) == 0)
                {
                  if (v95)
                  {
                    sub_22E8D1800((unsigned int *)*a1, v91, v76, &v118);
                    sub_22E8FCA40(*a1, HIDWORD(a1[2][2 * v94 + 1]), HIDWORD(a1[2][2 * v94]), 0, (uint64_t)v114);
                    sub_22E903BEC(v114);
                  }
                }
                else
                {
                  v97 = v132;
                  if (v132 >= (unint64_t)HIDWORD(v132))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v97 = v132;
                  }
                  v131[v97] = v94;
                  LODWORD(v132) = v132 + 1;
                }
                v93 = a1[2];
                v94 = LODWORD(v93[2 * v94]);
              }
              while (v94 != v88);
              if (!v118 && (_DWORD)v132)
              {
                v113 = 0;
                v113 = *v91 == 1;
                v100 = (unsigned int *)*a1;
                sub_22F0D5A50((uint64_t)v91);
                sub_22E8FCA40(v100, v101, 0x192Bu, 0, (uint64_t)v112);
                sub_22E894E38((uint64_t)v112, (unsigned __int8 *)&v113);
                sub_22E903BEC((unsigned int *)v112);
                sub_22E8FCA40(*a1, *(_DWORD *)(*(_QWORD *)(v76 + 48) + 4), 0x162Eu, 0, (uint64_t)v112);
                sub_22E894E38((uint64_t)v112, (unsigned __int8 *)&v113);
                sub_22E903BEC((unsigned int *)v112);
                sub_22E8D1780((unsigned int *)a1, v131, v132);
              }
            }
            if (v131 != (unsigned int *)v133)
              free(v131);
            v81 = v106;
          }
          goto LABEL_210;
        }
        v98 = *v80;
        if (v98 != v84)
        {
          v99 = a1[2];
          do
          {
            *(_QWORD *)&v82[(v98 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v98;
            v98 = LODWORD(v99[2 * v98]);
          }
          while (v98 != v84);
        }
LABEL_210:
        v80 += 4;
      }
      while (v80 != (unsigned int *)v81);
    }
    v102 = (unsigned int *)((char *)v105 + 16);
    while (v102 != (unsigned int *)((char *)v44 + 16 * v70))
    {
      v103 = *v102;
      v102 += 4;
      if (v103 <= 0xFFFFFFFD)
      {
        v74 = (llvm *)(v102 - 4);
        goto LABEL_216;
      }
    }
    v74 = (llvm *)((char *)v44 + 16 * v70);
LABEL_216:
    ;
  }
  if (v119 != v121)
    free(v119);
  llvm::deallocate_buffer(v44, (void *)(16 * v70));
  if (v122 != v124)
    free(v122);
LABEL_12:
  if (v125 != v127)
    free(v125);
LABEL_4:
  if (v128 != (uint64_t *)v130)
    free(v128);
}

uint64_t sub_22E8D0F50(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t *v28;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && (v6 - 67) >= 0xFFFFFFF9)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 16);
    result = sub_22E49C868(a2);
    if ((result & 1) != 0)
    {
      v9 = 5584;
      v10 = 6018;
      goto LABEL_59;
    }
    result = sub_22E8D12CC(a2);
    if ((result & 1) != 0)
    {
      v9 = 5589;
      v10 = 6019;
      goto LABEL_59;
    }
    if (sub_22E3CB5E0(a2))
    {
      result = sub_22F115260(*(_QWORD *)(a2 + 48));
      v9 = 5597;
      v10 = 6030;
      switch((int)result)
      {
        case 1:
          v9 = 5593;
          v11 = 1;
          goto LABEL_19;
        case 2:
          goto LABEL_59;
        case 3:
          v9 = 5600;
          v10 = 6033;
          break;
        case 4:
          v9 = 5593;
          v10 = 6025;
          break;
        default:
          goto LABEL_18;
      }
      goto LABEL_59;
    }
LABEL_18:
    v11 = 0;
    v9 = 0;
LABEL_19:
    v10 = (v8 << 20 >> 31) & 0x1798;
    result = sub_22EFBC5B4(a2);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 2000) + 1) & 1) != 0)
    {
      v12 = result;
      result = sub_22E3CB5E0(a2);
      if ((_DWORD)result)
      {
        if (v12)
        {
          if ((*(_BYTE *)v12 & 0xFE) != 0x76 || (v13 = *(_QWORD *)(v12 + 16), (*(_BYTE *)(v13 + 82) & 0x80) == 0))
          {
            v10 = 6037;
            goto LABEL_59;
          }
          result = sub_22EFC0EB8(v13);
          v10 = 6037;
          if (!(_DWORD)result)
          {
            v14 = *(_BYTE *)(a2 + 96) & 0x60;
            v15 = v14 == 32;
            v16 = v14 == 32 ? v11 : 1;
            v10 = v15 ? 6039 : 6037;
            if ((v16 & 1) == 0)
            {
              v17 = *(_WORD *)(v13 + 80) & 0x7F;
              v18 = -40;
              if (v17 > 0x46)
              {
                if (v17 != 83)
                {
                  if (v17 == 71)
                  {
                    v18 = -56;
                    goto LABEL_51;
                  }
                  if (v17 == 81)
                    goto LABEL_51;
LABEL_46:
                  v19 = v17 - 52;
                  v20 = v17 - 33 >= 5;
                  v21 = -48;
                  if (!v20)
                    v21 = -64;
                  if (v19 >= 6)
                    v18 = v21;
                  else
                    v18 = -72;
                }
              }
              else
              {
                if (v17 > 0x18)
                  goto LABEL_45;
                if (v17 != 16)
                {
                  if (((1 << v17) & 0x1066) != 0)
                    goto LABEL_51;
                  if (v17 != 24)
                  {
LABEL_45:
                    if (v17 == 70)
                    {
                      v18 = -64;
                      goto LABEL_51;
                    }
                    goto LABEL_46;
                  }
                }
                v18 = -48;
              }
LABEL_51:
              v22 = *(_QWORD *)(v13 + 72 + v18 + 16);
              v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
              if ((v22 & 4) != 0)
                v23 = (_QWORD *)*v23;
              if (v23)
                v24 = v23 - 8;
              else
                v24 = 0;
              result = sub_22E3CD31C((uint64_t *)(v24[13] + 96), v24[13]);
              if ((*(_QWORD *)v24[16] & 0x100) != 0)
                v10 = 0;
              else
                v10 = 6038;
            }
          }
        }
      }
    }
  }
  else
  {
    v10 = 0;
    if (a2)
    {
      v9 = 0;
      if ((v6 - 42) >= 0xFFFFFFFD)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                                               + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0)
                       + 17) & 8) != 0)
        {
          v9 = 0;
          if (v6 == 41)
            v10 = 6042;
          else
            v10 = 6041;
        }
        else
        {
          v10 = 0;
          v9 = 0;
        }
      }
    }
    else
    {
      v9 = 0;
    }
  }
LABEL_59:
  if (v9 | v10)
  {
    v25 = *a3 | (unint64_t)(v10 << 32);
    v26 = v9 | ((unint64_t)*(unsigned int *)(a2 + 24) << 32);
    v27 = *(_DWORD *)(v5 + 24);
    if (v27 >= *(_DWORD *)(v5 + 28))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = *(_DWORD *)(v5 + 24);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v5 + 16) + 16 * v27);
    *v28 = v25;
    v28[1] = v26;
    LODWORD(v28) = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = (_DWORD)v28 + 1;
    *a3 = (_DWORD)v28;
  }
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    result = sub_22EFBC5B4(a2);
    if (result)
      return sub_22E8CF264(v5, result, a3);
  }
  return result;
}

BOOL sub_22E8D12CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 143)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E8D132C(unsigned int *a1, unsigned __int8 *a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  int v24;
  int v25;
  unsigned int *v26;
  _BYTE *v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int **v37;
  BOOL v38;
  unsigned int v40[24];
  unsigned int v41[24];
  unsigned int v42[24];
  _BYTE v43[96];
  unsigned int v44[24];
  _BYTE v45[96];
  uint64_t v46;
  unsigned __int8 *v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[40];
  unsigned int *v51;
  uint64_t v52;
  _BYTE v53[40];
  unsigned int *v54;
  uint64_t v55;
  _QWORD v56[7];

  v56[5] = *MEMORY[0x24BDAC8D0];
  v47 = a2;
  v46 = a3;
  if (*((_BYTE *)a1 + 8)
    && (!sub_22F24C318(*((_QWORD *)a1 + 100), a1[204], (uint64_t)a2, &v54)
     || *((_BYTE *)a1 + 8) && !sub_22F24C318(*((_QWORD *)a1 + 100), a1[204], a3, &v54)))
  {
    return;
  }
  v13 = *((unsigned int *)sub_22F2D2BB8((uint64_t)(a1 + 200), (uint64_t *)&v47) + 2);
  v14 = *((unsigned int *)sub_22F2D2BB8((uint64_t)(a1 + 200), &v46) + 2);
  if (v13 == v14)
    return;
  v15 = *a2;
  if ((v15 == 17 || v15 == 15) && v13 > v14)
  {
    v18 = *((_QWORD *)a1 + 2);
    v19 = v13;
    while (1)
    {
      v20 = *(_DWORD *)(v18 + 16 * v19 + 4);
      if (v20 == 5912)
      {
        v21 = *(_QWORD **)a1;
        sub_22F0D5A50((uint64_t)a2);
        sub_22E8FCA40(v21, v22, 0xDCBu, 0, (uint64_t)v44);
        sub_22E903BEC(v44);
        v23 = *(_QWORD **)a1;
        sub_22F0D5A50(a3);
        v25 = v24;
        v26 = (unsigned int *)v43;
        v27 = v43;
        v28 = v23;
        v29 = 5888;
        goto LABEL_22;
      }
      if (v20 == 6035)
        break;
      v19 = *(unsigned int *)(v18 + 16 * v19);
      if (v19 <= v14)
        goto LABEL_23;
    }
    v30 = *(_QWORD **)a1;
    sub_22F0D5A50((uint64_t)a2);
    v25 = v31;
    v26 = (unsigned int *)v45;
    v27 = v45;
    v28 = v30;
    v29 = 6697;
LABEL_22:
    sub_22E8FCA40(v28, v25, v29, 0, (uint64_t)v27);
    sub_22E903BEC(v26);
  }
LABEL_23:
  v32 = *((_QWORD *)a1 + 2);
  v33 = v14;
  do
  {
    if (v13 >= v33)
      v13 = *(unsigned int *)(v32 + 16 * v13);
    else
      v33 = *(unsigned int *)(v32 + 16 * v33);
  }
  while (v13 != v33);
  if (v13 == v14)
    return;
  v54 = (unsigned int *)v56;
  v55 = 0xA00000000;
  v51 = (unsigned int *)v53;
  v52 = 0xA00000000;
  v48 = v50;
  v49 = 0xA00000000;
  do
  {
    v34 = **(_QWORD **)(*(_QWORD *)a1 + 72);
    v35 = *(_DWORD *)(v32 + 16 * v14 + 4);
    if (a6 && (v34 & 0x10) != 0 && a5 == 3531 && (v35 & 0xFFFFFFFD) == 0x1795)
    {
      v36 = v49;
      v37 = (unsigned int **)&v48;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v49;
      }
    }
    else if ((v34 & 0x200) != 0 && v35 == 6038)
    {
      v36 = v55;
      v37 = &v54;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v55;
      }
    }
    else
    {
      if (!v35)
        goto LABEL_44;
      v36 = v52;
      v37 = &v51;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v52;
      }
    }
    (*v37)[v36] = v14;
    ++*((_DWORD *)v37 + 2);
    v32 = *((_QWORD *)a1 + 2);
LABEL_44:
    v14 = *(unsigned int *)(v32 + 16 * v14);
  }
  while (v14 != v13);
  if ((_DWORD)v49)
  {
    sub_22E8FCA40(*(_QWORD **)a1, a4, a6, 0, (uint64_t)v42);
    sub_22E903BEC(v42);
    sub_22E8D1780(a1, (unsigned int *)v48, v49);
    *(_BYTE *)(a3 + 24) = 1;
  }
  v38 = v52;
  if ((_DWORD)v52)
  {
    sub_22E8FCA40(*(_QWORD **)a1, a4, a5, 0, (uint64_t)v41);
    sub_22E903BEC(v41);
    sub_22E8D1780(a1, v51, v52);
    v38 = (_DWORD)v52 != 0;
  }
  if (!v38 && (_DWORD)v55)
  {
    sub_22E8FCA40(*(_QWORD **)a1, a4, a7, 0, (uint64_t)v40);
    sub_22E903BEC(v40);
    sub_22E8D1780(a1, v54, v55);
  }
  if (v48 != v50)
    free(v48);
  if (v51 != (unsigned int *)v53)
    free(v51);
  if (v54 != (unsigned int *)v56)
    free(v54);
}

unsigned int *sub_22E8D1780(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11[24];

  if (a3)
    v3 = 1;
  else
    v3 = *((_BYTE *)result + 8) == 0;
  v4 = a3;
  if (v3 && a3 != 0)
  {
    v7 = result;
    do
    {
      v8 = *a2++;
      v9 = *((_QWORD *)v7 + 2) + 16 * v8;
      v10 = *(_DWORD *)(v9 + 4);
      if (v10)
      {
        sub_22E8FCA40(*(_QWORD **)v7, *(_DWORD *)(v9 + 12), v10, 0, (uint64_t)v11);
        result = sub_22E903BEC(v11);
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

unsigned int *sub_22E8D1800(unsigned int *result, _BYTE *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int *v6;
  int v7;
  unsigned int v8[25];
  BOOL v9;

  if (!*a4)
  {
    v6 = result;
    v9 = *a2 == 1;
    sub_22F0D5A50((uint64_t)a2);
    sub_22E8FCA40(v6, v7, 0xE13u, 0, (uint64_t)v8);
    sub_22E894E38((uint64_t)v8, (unsigned __int8 *)&v9);
    sub_22E903BEC(v8);
    sub_22E8FCA40(v6, *(_DWORD *)(*(_QWORD *)(a3 + 48) + 4), 0x162Eu, 0, (uint64_t)v8);
    sub_22E894E38((uint64_t)v8, (unsigned __int8 *)&v9);
    result = sub_22E903BEC(v8);
    *a4 = 1;
  }
  return result;
}

double sub_22E8D18B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  double result;
  void *v19;
  void **v24;

  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11)
  {
    v16 = 0;
    v17 = 8 * v11;
    while (1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + v16) + 368))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v16), a2, a3, a4, a5, a6, a7, a8, a10);
      if (*(_QWORD *)a9)
        break;
      v24 = (void **)(a9 + 64);
      sub_22E8D19C8(&v24);
      v19 = *(void **)(a9 + 16);
      if (v19 != (void *)(a9 + 32))
        free(v19);
      v16 += 8;
      if (v17 == v16)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    result = 0.0;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_QWORD *)(a9 + 16) = a9 + 32;
    *(_DWORD *)(a9 + 28) = 1;
    *(_QWORD *)(a9 + 40) = 0;
    *(_QWORD *)(a9 + 48) = 0;
    *(_QWORD *)(a9 + 54) = 0;
    *(_QWORD *)(a9 + 72) = 0;
    *(_QWORD *)(a9 + 80) = 0;
    *(_QWORD *)(a9 + 64) = 0;
  }
  return result;
}

void sub_22E8D19C8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = *((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          v9 = *((_QWORD *)v4 - 2);
          if (v9)
          {
            sub_22E3BB10C(v9, v7);
            *((_QWORD *)v4 - 3) = 0;
          }
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_22E8D1A58(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if ((v1 & 0x40000) != 0)
    return 184;
  if ((v1 & 0x80000) != 0)
    return 104;
  if ((v1 & 0x100000) != 0)
    return 96;
  if ((v1 & 0x200000) != 0)
    return 88;
  if ((v1 & 0x400000) != 0)
    return 8 * *(unsigned int *)(a1 + 8 * (unsigned __int16)v1 + 96 * ((v1 >> 18) & 1) + 16 * ((v1 >> 19) & 1) + 88)
         + 96;
  return 8 * (unsigned __int16)*(_QWORD *)(a1 + 48) + 80;
}

uint64_t sub_22E8D1AC4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = (unint64_t)(a2 - 80) >> 3;
  if (v2 >= *(unsigned int *)(a1 + 104))
    return sub_22E3CD3D4(a1, a2, 3);
  v3 = *(_QWORD *)(a1 + 96) + 80 * v2;
  v4 = *(unsigned int *)(v3 + 8);
  if (!(_DWORD)v4)
    return sub_22E3CD3D4(a1, a2, 3);
  result = *(_QWORD *)(*(_QWORD *)v3 + 8 * v4 - 8);
  *(_DWORD *)(v3 + 8) = v4 - 1;
  return result;
}

uint64_t sub_22E8D1B0C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  result = sub_22E8D1A58(a2);
  v5 = (unint64_t)(result - 80) >> 3;
  v6 = (_QWORD *)(a1 + 96);
  if (v5 >= *(unsigned int *)(a1 + 104))
  {
    v11 = (_QWORD *)(a1 + 96);
    v9 = a1 + 96;
    v10 = v5;
    result = sub_22E8FB224(v9, v5 + 1);
    v5 = v10;
    v6 = v11;
  }
  v7 = *v6 + 80 * v5;
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    v12 = v7;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = v12;
    v8 = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = a2;
  ++*(_DWORD *)(v7 + 8);
  return result;
}

uint64_t sub_22E8D1BC4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = result;
  v4 = (uint64_t *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 4) != 0)
  {
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    v4 = *(uint64_t **)v6;
    v5 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v5 = (uint64_t)&v4[v3 > 7];
  }
  while (v4 != (uint64_t *)v5)
  {
    v7 = *v4++;
    result = sub_22E8D1B0C(v2, v7);
  }
  return result;
}

char *sub_22E8D1C2C(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  char *result;
  unint64_t v14;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = (unint64_t *)(a1 + 8);
  v4 = v5;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  else
    v6 = (uint64_t)&v3[v4 > 7];
  v9 = *(_QWORD *)(a2 + 8);
  v8 = (uint64_t *)(a2 + 8);
  v7 = v9;
  if ((v9 & 4) != 0)
  {
    v12 = v7 & 0xFFFFFFFFFFFFFFF8;
    v11 = *(uint64_t **)v12;
    v10 = (uint64_t *)(*(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8));
  }
  else
  {
    v10 = &v8[v7 > 7];
    v11 = v8;
  }
  result = sub_22E828878(v3, v6, v11, v10);
  if ((*v8 & 4) != 0)
  {
    v14 = *v8 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
      *(_DWORD *)(v14 + 8) = 0;
  }
  else
  {
    *v8 = 0;
  }
  return result;
}

_UNKNOWN **sub_22E8D2434(uint64_t a1)
{
  _UNKNOWN **v1;
  unsigned __int8 v3;
  int v6;
  uint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v11;
  BOOL v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  const void **v16;
  unsigned __int8 v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string __p;

  if (*(unsigned __int16 *)(a1 + 28) <= 0x1DDu)
    return (_UNKNOWN **)*(&off_253E4ABB0 + *(unsigned __int16 *)(a1 + 28) + 12);
  v3 = atomic_load((unsigned __int8 *)&qword_255E04E80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E04E80))
    __cxa_guard_release(&qword_255E04E80);
  if (*(_WORD *)(a1 + 28) == 479)
    return &off_253E4ABB0;
  if (!atomic_load(qword_255E04E90))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_255E04E90, (void *(*)(void))sub_22F3069C8, (void (*)(void *))sub_22F3069F8);
  sub_22F419370(a1, &__p);
  if ((*(_BYTE *)(a1 + 30) & 7) == 7)
    v6 = 5;
  else
    v6 = *(_BYTE *)(a1 + 30) & 7;
  if (!atomic_load(qword_255E04E90))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_255E04E90, (void *(*)(void))sub_22F3069C8, (void (*)(void *))sub_22F3069F8);
  v8 = *(_QWORD *)(qword_255E04E90[0] + 8);
  v18 = qword_255E04E90[0];
  if (v8 == qword_255E04E90[0])
  {
LABEL_39:
    v17 = atomic_load((unsigned __int8 *)&qword_255E04E88);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255E04E88))
      __cxa_guard_release(&qword_255E04E88);
    v1 = &off_253E4ABE0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    else
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    else
      p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = __p.__r_.__value_.__l.__size_;
    else
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v12 = __p.__r_.__value_.__l.__size_ != -1 || (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0;
    v19 = v11;
    if (v11 >= size)
      v13 = size;
    else
      v13 = v11;
    while (1)
    {
      v1 = *(_UNKNOWN ***)(v8 + 16);
      v14 = v1[3];
      if (v14)
        break;
LABEL_38:
      v8 = *(_QWORD *)(v8 + 8);
      if (v8 == v18)
        goto LABEL_39;
    }
    v15 = 16 * (_QWORD)v14;
    v16 = (const void **)((char *)v1[2] + 8);
    while (1)
    {
      if (*((_DWORD *)v16 - 2) == v6 && strlen((const char *)*v16) == size)
      {
        if (!v12)
          abort();
        if (!memcmp(p_p, *v16, v13) && v19 == size)
          break;
      }
      v16 += 2;
      v15 -= 16;
      if (!v15)
        goto LABEL_38;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

void sub_22E8D2670(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

BOOL sub_22E8D26A0()
{
  uint64_t v0;

  return (*(_DWORD *)(v0 + 28) & 0x7F) == 1;
}

uint64_t sub_22E8D290C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6[24];

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), a2[9]);
  if ((result & 1) == 0)
  {
    v5 = result;
    sub_22E8FCA40(a2, *(_DWORD *)(a1 + 16), 0x1875u, 0, (uint64_t)v6);
    sub_22E8D2984((uint64_t)v6, (uint64_t *)a1);
    sub_22E903BEC(v6);
    return v5;
  }
  return result;
}

uint64_t sub_22E8D2984(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *a2;
    v5 = *(unsigned __int8 **)(a1 + 32);
    if (!v5)
    {
      v5 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v5;
    }
    v5[*v5 + 1] = 5;
    v6 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v9 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v15 = v10;
    v11 = sub_22F2F1D6C(v9, &v15)[1] + 32 * *(unsigned int *)(a1 + 88);
    v14 = *(unsigned __int8 **)(v11 + 8);
    v13 = (_QWORD *)(v11 + 8);
    v12 = v14;
    v4 = *a2;
    if (!v14)
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
      *v13 = v12;
    }
    v12[*v12 + 1] = 5;
    v6 = (_BYTE *)*v13;
  }
  v7 = *v6;
  *v6 = v7 + 1;
  *(_QWORD *)&v6[8 * v7 + 16] = v4;
  return a1;
}

BOOL sub_22E8D2A78(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9[25];
  unsigned int v10;

  v10 = a3;
  v3 = ((*(_DWORD *)(a1 + 48) >> 21) & 1) + (unsigned __int16)*(_DWORD *)(a1 + 48);
  if (v3 != a3)
  {
    v7 = a3;
    v8 = ((*(_DWORD *)(a1 + 48) >> 21) & 1) + (unsigned __int16)*(_DWORD *)(a1 + 48);
    sub_22E8FCA40(a2, *(_DWORD *)(a1 + 16), 0xB31u, 0, (uint64_t)v9);
    v6 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a1);
    sub_22E89519C(v6, &v10);
    sub_22E903BEC(v9);
    a3 = v7;
    v3 = v8;
  }
  return v3 == a3;
}

BOOL sub_22E8D2B00(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v6;
  unsigned int v8[25];
  unsigned int v9;

  v9 = a3;
  v4 = ((*(_DWORD *)(a1 + 48) >> 21) & 1) + (unsigned __int16)*(_DWORD *)(a1 + 48);
  if (v4 < a3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a1 + 16), 0xB25u, 0, (uint64_t)v8);
    v6 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a1);
    sub_22E89519C(v6, &v9);
    sub_22E903BEC(v8);
  }
  return v4 >= a3;
}

BOOL sub_22E8D2B88(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v6;
  unsigned int v8[25];
  unsigned int v9;

  v9 = a3;
  v4 = ((*(_DWORD *)(a1 + 48) >> 21) & 1) + (unsigned __int16)*(_DWORD *)(a1 + 48);
  if (v4 > a3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a1 + 16), 0xB26u, 0, (uint64_t)v8);
    v6 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a1);
    sub_22E89519C(v6, &v9);
    sub_22E903BEC(v8);
  }
  return v4 <= a3;
}

void sub_22E8D2C10()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D2C24(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D2CB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D2D28()
{
  return 1;
}

uint64_t sub_22E8D2D30()
{
  return 1;
}

uint64_t sub_22E8D2D38()
{
  return 1;
}

uint64_t sub_22E8D2D40()
{
  return 0;
}

uint64_t sub_22E8D2D48(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D2DA8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 360;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D2E08()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D2E1C()
{
  return 1;
}

uint64_t sub_22E8D2E24()
{
  return 0;
}

uint64_t sub_22E8D2E2C()
{
  return 0;
}

void sub_22E8D2E34()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D2E48()
{
  return 0;
}

void sub_22E8D2E50()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D2E64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"kernel functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D2EE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D2F58(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

uint64_t sub_22E8D2F64(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D2FC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D2FD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"kernel functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D3058(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D30CC()
{
  return 0;
}

uint64_t sub_22E8D30D4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D3134()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D3148(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"kernel functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D31C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D323C()
{
  return 0;
}

uint64_t sub_22E8D3244(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D32A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D32B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"kernel functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D3338(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D33AC(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

uint64_t sub_22E8D33B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D3418()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D342C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int *)(a2 + 56) < 0x2BuLL) & (0x78180138086uLL >> *(_DWORD *)(a2 + 56));
}

uint64_t sub_22E8D3450()
{
  return 0;
}

void sub_22E8D3458()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D346C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D34EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D3560(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 56) == 7;
}

uint64_t sub_22E8D3570()
{
  return 0;
}

uint64_t sub_22E8D3578(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D35D8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D35EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v11;
  unsigned int v12[24];

  v5 = *(_DWORD *)(a4 + 28);
  v6 = v5 & 0x7E;
  if (a4 && (v6 - 34) <= 3 && (*(_DWORD *)(a4 + 72) & 0xE000) != 0x4000)
    return 1;
  v7 = v5 & 0x7F;
  if ((v7 - 60) < 7)
    return 1;
  v8 = v6 - 52;
  if (v7 == 16 || v8 < 6)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v12);
  v11 = sub_22E8D2984((uint64_t)v12, (uint64_t *)a3);
  sub_22F306A34(v11);
  sub_22E903BEC(v12);
  return 0;
}

uint64_t sub_22E8D3698(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D370C()
{
  return 0;
}

uint64_t sub_22E8D3714(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x10000000FLL;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000013;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x100000004;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  v12 = *a3;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = (((v12 >> 8) & 1) << 32) | 6;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D3844()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D3858(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D38D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D394C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8D3974(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8D3980()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D3994(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v6 = (v4 & 0x7F) - 39;
  if (v6 < 0x1A && ((0x2000007u >> v6) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"functions, typedefs, and parameters");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8D3A34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D3AA8()
{
  return 0;
}

uint64_t sub_22E8D3AB0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000012;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D3B88()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D3B9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3 || sub_22E8FB300(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306B18(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D3C20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D3C94(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8D3CA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D3CB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3 || sub_22E8FB300(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306B18(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D3D38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D3DAC(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8D3DB8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D3DCC()
{
  return 0;
}

void sub_22E8D3DD4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D3DE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F306BFC(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8D3E7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D3EF0()
{
  return 0;
}

uint64_t sub_22E8D3EF8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D3F94()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D3FA8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v5 < 0x1C && ((0xFE00007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"variables and typedefs");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D4038(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D40AC(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8D40B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000012;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D4154()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D4168(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8D4190()
{
  return 0;
}

void sub_22E8D4198()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D41AC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  uint64_t v8;
  unsigned int v9[24];

  v6 = sub_22E8FB35C(a4);
  if (!v6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"non-K&R-style functions");
    sub_22E903BEC(v9);
  }
  return v6;
}

uint64_t sub_22E8D422C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D42A0()
{
  return 0;
}

void sub_22E8D42A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D42BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  uint64_t v8;
  unsigned int v9[24];

  v6 = sub_22E8FB35C(a4);
  if (!v6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"non-K&R-style functions");
    sub_22E903BEC(v9);
  }
  return v6;
}

uint64_t sub_22E8D433C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D43B0()
{
  return 0;
}

void sub_22E8D43B8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D43CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8D444C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D44C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 226; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 226);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D45B4()
{
  return 0;
}

uint64_t sub_22E8D45BC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D461C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4630(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions and statements");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D46B0()
{
  return 1;
}

uint64_t sub_22E8D46B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];
  _BYTE v26[96];
  unsigned int v27[24];
  uint64_t v28;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 242)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 242);
      v28 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v14 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v26);
      v15 = (unsigned int *)v26;
      goto LABEL_19;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    i = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      for (i = *(uint64_t **)v16; *(_WORD *)(*i + 32) != 419; ++i)
      {
        v20 -= 8;
        if (!v20)
          return 1;
      }
    }
    if (i != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 419);
      v28 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v23 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v25);
      v15 = (unsigned int *)v25;
LABEL_19:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8D4878(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8D48A0()
{
  return 0;
}

uint64_t sub_22E8D48A8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D4908()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D491C()
{
  return 0;
}

void sub_22E8D4924()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4938(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables and statements");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8D49B8()
{
  return 1;
}

uint64_t sub_22E8D49C0()
{
  return 0;
}

uint64_t sub_22E8D49C8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D4A28()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4A3C(uint64_t a1, uint64_t a2)
{
  return a2 == 1;
}

void sub_22E8D4A48()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4A5C(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) - 41) < 2;
}

uint64_t sub_22E8D4A70()
{
  return 0;
}

uint64_t sub_22E8D4A78(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 104;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D4AD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D4AEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && sub_22EFCB008(a4, 0))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"functions and function pointers");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D4B6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D4BE0(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) - 41) < 2;
}

uint64_t sub_22E8D4BF4()
{
  return 0;
}

uint64_t sub_22E8D4BFC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000011;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D4C5C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4C70(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8D4CEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D4D60()
{
  return 0;
}

uint64_t sub_22E8D4D68(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D4DD0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 105;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D4E30()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4E44(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  uint64_t v8;
  unsigned int v9[24];

  v6 = sub_22E8FB35C(a4);
  if (!v6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"non-K&R-style functions");
    sub_22E903BEC(v9);
  }
  return v6;
}

uint64_t sub_22E8D4EC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D4F38(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8D4F60()
{
  return 0;
}

void sub_22E8D4F68()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D4F7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D4FFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D5070(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int *)(a2 + 56) < 0x29uLL) & (0x1800000000EuLL >> *(_DWORD *)(a2 + 56));
}

uint64_t sub_22E8D5090()
{
  return 0;
}

uint64_t sub_22E8D5098(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D50F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D510C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int *)(a2 + 56) < 0x29uLL) & (0x18000000006uLL >> *(_DWORD *)(a2 + 56));
}

uint64_t sub_22E8D512C()
{
  return 0;
}

void sub_22E8D5134()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D5148(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"typedefs");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8D51C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D523C()
{
  return 0;
}

void sub_22E8D5244()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D5258(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 <= 5 && (*(_BYTE *)(a4 + 82) & 2) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v7);
  v6 = sub_22E8D2984((uint64_t)v7, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"inline functions");
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22E8D52E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D5358()
{
  return 0;
}

uint64_t sub_22E8D5360(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 108;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D53C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D53D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D5454(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D54C8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8D54F0(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8D54FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D5510(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D5590(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D5604(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8D5610()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D5624(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D56A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D5718(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8D5724()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D5738(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7F) == 0x18 || (v4 & 0x7Eu) - 52 < 6)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"Objective-C methods and functions");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D57C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D5838(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

uint64_t sub_22E8D5844(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v4 = (((*a3 >> 14) & 1) << 32) | 0xA;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D58EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D5900(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8D5988(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D59FC()
{
  return 0;
}

uint64_t sub_22E8D5A04(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D5AB0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D5AC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 13;
  if (v4 >= 0x3E)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"named declarations");
    sub_22E903BEC(v8);
  }
  return v4 < 0x3E;
}

uint64_t sub_22E8D5B44(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D5BB8()
{
  return 0;
}

uint64_t sub_22E8D5BC0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x10000000ELL;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000001;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x100000002;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = 0x100000003;
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v13;
  if (v13 >= v12)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = 0x100000004;
  v14 = *(_DWORD *)(a2 + 12);
  v15 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v15;
  v16 = (((*a3 >> 8) & 1) << 32) | 6;
  if (v15 >= v14)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v15) = v16;
  v17 = *(_DWORD *)(a2 + 12);
  v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
  v19 = (((*a3 >> 14) & 1) << 32) | 7;
  if (v18 >= v17)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v19;
  v20 = *(_DWORD *)(a2 + 12);
  v21 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v21;
  v22 = (((*a3 >> 14) & 1) << 32) | 8;
  if (v21 >= v20)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v21) = v22;
  v23 = *(_DWORD *)(a2 + 12);
  v24 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v24;
  v25 = (((*a3 >> 14) & 1) << 32) | 9;
  if (v24 >= v23)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v24) = v25;
  v26 = *(_DWORD *)(a2 + 12);
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v27;
  v28 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v27 >= v26)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v27) = v28;
  v29 = *(_DWORD *)(a2 + 12);
  v30 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v30;
  v31 = (((*a3 >> 14) & 1) << 32) | 0xC;
  if (v30 >= v29)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v30) = v31;
  v32 = *(_DWORD *)(a2 + 12);
  v33 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v33;
  v34 = (((*a3 >> 14) & 1) << 32) | 0xD;
  if (v33 >= v32)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v33) = v34;
  v35 = *(_DWORD *)(a2 + 12);
  v36 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v36;
  if (v36 >= v35)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v36 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v36) = 0x10000000ELL;
  v37 = *(_DWORD *)(a2 + 12);
  v38 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v38;
  if (v38 >= v37)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v38 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v38) = 0x100000012;
  v39 = *(_DWORD *)(a2 + 12);
  v40 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v40;
  if (v40 >= v39)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v40) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D5FC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D5FD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8D6058(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D60CC(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 1) & 1) == 0;
}

BOOL sub_22E8D60DC(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFE) == 8;
}

uint64_t sub_22E8D60F0()
{
  return 0;
}

uint64_t sub_22E8D60F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D6158()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D616C(int32x4_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v8;
  unsigned int v9[24];

  v5 = *(_DWORD *)(a5 + 28);
  if ((v5 & 0x7Fu) - 60 < 7)
    return 1;
  a1.i32[0] = v5 & 0x7E;
  a1.i32[1] = v5 & 0x7F;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_22F463B00, (uint32x4_t)vaddq_s32(vzip1q_s32(a1, a1), (int32x4_t)xmmword_22F463AF0)))) & 1) != 0)return 1;
  sub_22E8FCA40(a3, *(_DWORD *)(a4 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a4);
  sub_22F306CE0(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8D621C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8D6290(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 1) & 1) == 0;
}

uint64_t sub_22E8D62A0()
{
  return 0;
}

uint64_t sub_22E8D62A8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x10000000ELL;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x100000003;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = 0x100000012;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D63F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D640C(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 1) & 1) == 0;
}

uint64_t sub_22E8D641C()
{
  return 0;
}

void sub_22E8D6424()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D6438()
{
  return 0;
}

void sub_22E8D6440()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D6454(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D64D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D6548(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8D6570()
{
  return 0;
}

uint64_t sub_22E8D6578(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D65D8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D65EC()
{
  return 0;
}

void sub_22E8D65F4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D6608(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D6688(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D66FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 126; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 126);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D67F0()
{
  return 0;
}

uint64_t sub_22E8D67F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D6858(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 121;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D68B8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D68CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8D6948(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D69BC()
{
  return 0;
}

uint64_t sub_22E8D69C4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D6A24()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D6A38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D6AB8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D6B2C()
{
  return 0;
}

void sub_22E8D6B34()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D6B48(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D6BC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D6C3C()
{
  return 0;
}

uint64_t sub_22E8D6C44(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D6CA4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 123;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D6D04()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D6D18()
{
  return 0;
}

void sub_22E8D6D20()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D6D34()
{
  return 0;
}

void sub_22E8D6D3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D6D50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D6DD0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D6E44(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 121; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 121);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D6F38()
{
  return 0;
}

uint64_t sub_22E8D6F40(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D6FA0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 126;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D7000()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D7014(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D7094(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D7108(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[96];
  _BYTE v34[96];
  _BYTE v35[96];
  unsigned int v36[24];
  uint64_t v37;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 328)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 328);
      v37 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v14 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v35);
      v15 = (unsigned int *)v35;
      goto LABEL_28;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 327)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_19;
      }
    }
    if (v19 != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 327);
      v37 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v23 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v34);
      v15 = (unsigned int *)v34;
      goto LABEL_28;
    }
  }
LABEL_19:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v25 = *(uint64_t **)v24;
    v26 = *(unsigned int *)(v24 + 8);
    i = *(uint64_t **)v24;
    if ((_DWORD)v26)
    {
      v28 = 8 * v26;
      for (i = *(uint64_t **)v24; *(_WORD *)(*i + 32) != 128; ++i)
      {
        v28 -= 8;
        if (!v28)
          return 1;
      }
    }
    if (i != &v25[v26])
    {
      do
      {
        v30 = *v25++;
        v29 = v30;
      }
      while (*(_WORD *)(v30 + 32) != 128);
      v37 = v29;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v31 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v31, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v33);
      v15 = (unsigned int *)v33;
LABEL_28:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8D7388()
{
  return 0;
}

uint64_t sub_22E8D7390(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D73F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D7404(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D7484(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D74F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[96];
  _BYTE v34[96];
  _BYTE v35[96];
  unsigned int v36[24];
  uint64_t v37;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 328)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 328);
      v37 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v14 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v35);
      v15 = (unsigned int *)v35;
      goto LABEL_28;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 327)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_19;
      }
    }
    if (v19 != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 327);
      v37 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v23 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v34);
      v15 = (unsigned int *)v34;
      goto LABEL_28;
    }
  }
LABEL_19:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v25 = *(uint64_t **)v24;
    v26 = *(unsigned int *)(v24 + 8);
    i = *(uint64_t **)v24;
    if ((_DWORD)v26)
    {
      v28 = 8 * v26;
      for (i = *(uint64_t **)v24; *(_WORD *)(*i + 32) != 127; ++i)
      {
        v28 -= 8;
        if (!v28)
          return 1;
      }
    }
    if (i != &v25[v26])
    {
      do
      {
        v30 = *v25++;
        v29 = v30;
      }
      while (*(_WORD *)(v30 + 32) != 127);
      v37 = v29;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v31 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v31, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v33);
      v15 = (unsigned int *)v33;
LABEL_28:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8D7778()
{
  return 0;
}

uint64_t sub_22E8D7780(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D77E0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D77F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8D7874(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D78E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];
  _BYTE v26[96];
  unsigned int v27[24];
  uint64_t v28;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 137)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 137);
      v28 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v14 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v26);
      v15 = (unsigned int *)v26;
      goto LABEL_19;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    i = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      for (i = *(uint64_t **)v16; *(_WORD *)(*i + 32) != 184; ++i)
      {
        v20 -= 8;
        if (!v20)
          return 1;
      }
    }
    if (i != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 184);
      v28 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v23 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v25);
      v15 = (unsigned int *)v25;
LABEL_19:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8D7AA8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D7AB4()
{
  return 0;
}

uint64_t sub_22E8D7ABC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D7B1C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D7B30(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 60 < 7)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"functions and variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D7BC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D7C34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 133; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 133);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D7D28(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D7D34()
{
  return 0;
}

uint64_t sub_22E8D7D3C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D7DD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D7DEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8D7E6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D7EE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 132; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 132);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D7FD4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D7FE0()
{
  return 0;
}

uint64_t sub_22E8D7FE8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D8048(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 131;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D80A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D80BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8D813C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D81B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 131; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 131);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D82A4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D82B0()
{
  return 0;
}

uint64_t sub_22E8D82B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D8318(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 132;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D8378()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D838C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D840C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D8480(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];
  _BYTE v26[96];
  unsigned int v27[24];
  uint64_t v28;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 130)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 130);
      v28 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v14 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v26);
      v15 = (unsigned int *)v26;
      goto LABEL_19;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    i = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      for (i = *(uint64_t **)v16; *(_WORD *)(*i + 32) != 134; ++i)
      {
        v20 -= 8;
        if (!v20)
          return 1;
      }
    }
    if (i != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 134);
      v28 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v23 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v25);
      v15 = (unsigned int *)v25;
LABEL_19:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8D8640(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D864C()
{
  return 0;
}

uint64_t sub_22E8D8654(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D86B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D86C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D8748(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D87BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 133; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 133);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8D88B0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D88BC()
{
  return 0;
}

uint64_t sub_22E8D88C4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8D8924(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 134;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8D8984()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D8998(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D8A18(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D8A8C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D8A98()
{
  return 0;
}

void sub_22E8D8AA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D8AB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x18 || sub_22EFCB008(a4, 0))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"Objective-C methods, functions, and function pointers");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D8B40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D8BB4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

BOOL sub_22E8D8BC0(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

uint64_t sub_22E8D8BCC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v4 = (((*a3 >> 14) & 1) << 32) | 0xA;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000011;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D8C74()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D8C88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8D8D08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D8D7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];
  _BYTE v26[96];
  unsigned int v27[24];
  uint64_t v28;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 129)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 129);
      v28 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v14 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v26);
      v15 = (unsigned int *)v26;
      goto LABEL_19;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    i = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      for (i = *(uint64_t **)v16; *(_WORD *)(*i + 32) != 184; ++i)
      {
        v20 -= 8;
        if (!v20)
          return 1;
      }
    }
    if (i != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 184);
      v28 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v23 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v25);
      v15 = (unsigned int *)v25;
LABEL_19:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8D8F3C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 5) & 1;
}

uint64_t sub_22E8D8F48()
{
  return 0;
}

uint64_t sub_22E8D8F50(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D8FB0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D8FC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D9044(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D90B8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8D90E0()
{
  return 0;
}

uint64_t sub_22E8D90E8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D9148()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D915C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 54;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8D91DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D9250()
{
  return 0;
}

uint64_t sub_22E8D9258(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 8) & 1) << 32) | 5;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D92C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D92D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D9354(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D93C8()
{
  return 0;
}

uint64_t sub_22E8D93D0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D9430()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D9444(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8D94C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D9534(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8D9540()
{
  return 0;
}

uint64_t sub_22E8D9548(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D95A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D95BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 34 < 4 || (v4 & 0x7Fu) - 39 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"structs, unions, classes, and typedefs");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D964C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D96C0(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8D96E8()
{
  return 0;
}

uint64_t sub_22E8D96F0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000012;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D978C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D97A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t result;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  result = 1;
  if ((v4 & 0x7F) != 0x18 && (v4 & 0x7F) != 0x40 && (v4 & 0x7Eu) - 52 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters, Objective-C methods, and functions");
    sub_22E903BEC(v8);
    return 0;
  }
  return result;
}

uint64_t sub_22E8D9834(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D98A8()
{
  return 0;
}

uint64_t sub_22E8D98B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000017;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D99A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D99B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && sub_22E3CB5E0(a4) && (*(_DWORD *)(a4 + 28) & 0x7F) != 0x40)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"local variables");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8D9A64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D9AD8()
{
  return 0;
}

uint64_t sub_22E8D9AE0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000016;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D9B40()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D9B54(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 197) & 1;
}

uint64_t sub_22E8D9B60(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int *)(a2 + 56) < 0x29uLL) & (0x18000000006uLL >> *(_DWORD *)(a2 + 56));
}

uint64_t sub_22E8D9B80()
{
  return 0;
}

void sub_22E8D9B88()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D9B9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D9C1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D9C90(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 197) & 1;
}

uint64_t sub_22E8D9C9C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int *)(a2 + 56) < 0x29uLL) & (0x18000000006uLL >> *(_DWORD *)(a2 + 56));
}

uint64_t sub_22E8D9CBC()
{
  return 0;
}

uint64_t sub_22E8D9CC4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8D9D24()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8D9D38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 35 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"functions and classes");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8D9DC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D9E3C()
{
  return 0;
}

void sub_22E8D9E44()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8D9E58(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8D9ED8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8D9F4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 188; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 188);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8DA040()
{
  return 0;
}

uint64_t sub_22E8DA048(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DA0A8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 146;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DA108()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DA11C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8DA19C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DA210(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 193; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 193);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8DA304()
{
  return 0;
}

uint64_t sub_22E8DA30C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DA36C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DA380()
{
  return 0;
}

uint64_t sub_22E8DA388(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 148;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DA3E8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DA3FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DA48C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DA500(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 1) & 1;
}

uint64_t sub_22E8DA50C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8DA534()
{
  return 0;
}

uint64_t sub_22E8DA53C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DA59C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 149;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DA5FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DA610(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DA690(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DA704()
{
  return 0;
}

uint64_t sub_22E8DA70C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DA76C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DA780(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8DA800(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DA874()
{
  return 0;
}

uint64_t sub_22E8DA87C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DA8DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DA8F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8DA970(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DA9E4()
{
  return 0;
}

uint64_t sub_22E8DA9EC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DAA4C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 152;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DAAAC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DAAC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8DAB40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DABB4()
{
  return 0;
}

uint64_t sub_22E8DABBC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DAC1C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 153;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DAC7C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DAC90(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DAD10(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DAD84()
{
  return 0;
}

uint64_t sub_22E8DAD8C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DADEC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 154;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DAE4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DAE60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v6 = (v4 & 0x7F) - 22;
  if (v6 < 0x2D && ((0x1FC00000E001uLL >> v6) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F306DC4(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DAEF8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DAF6C(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = a2[17];
  if (v2 == 15)
    return 1;
  if (a2[14] != 42)
    return 0;
  return v2 == 25 && a2[16] == 3;
}

uint64_t sub_22E8DAFA8()
{
  return 0;
}

uint64_t sub_22E8DAFB0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000013;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x10000000ELL;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  v12 = *a3;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = (((v12 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DB0DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DB0F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DB170(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DB1E4(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = a2[17];
  if (v2 == 15)
    return 1;
  if (a2[14] != 42)
    return 0;
  return v2 == 25 && a2[16] == 3;
}

uint64_t sub_22E8DB220()
{
  return 0;
}

void sub_22E8DB228()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DB23C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v6 = (v4 & 0x7F) - 22;
  if (v6 < 0x2D && ((0x1FC00000E001uLL >> v6) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F306DC4(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DB2D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DB348(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = a2[17];
  if (v2 == 15)
    return 1;
  if (a2[14] != 42)
    return 0;
  return v2 == 25 && a2[16] == 3;
}

uint64_t sub_22E8DB384()
{
  return 0;
}

uint64_t sub_22E8DB38C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000013;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x10000000ELL;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  v12 = *a3;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = (((v12 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DB4B8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DB4CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DB54C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DB5C0(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = a2[17];
  if (v2 == 15)
    return 1;
  if (a2[14] != 42)
    return 0;
  return v2 == 25 && a2[16] == 3;
}

uint64_t sub_22E8DB5FC()
{
  return 0;
}

void sub_22E8DB604()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DB618(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x12 && ((0x3F807u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"non-static data members and variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DB6A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DB71C()
{
  return 0;
}

void sub_22E8DB724()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DB738()
{
  return 0;
}

void sub_22E8DB740()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DB754(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DB7D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DB848()
{
  return 0;
}

uint64_t sub_22E8DB850(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DB8B0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DB8C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DB944(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DB9B8()
{
  return 0;
}

uint64_t sub_22E8DB9C0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DBA20()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DBA34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7E) - 24;
  if (v5 < 0x21 && ((0x150000001uLL >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306EA8(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DBABC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DBB30(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8DBB3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DBB50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v9;
  unsigned int v10[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v5 = v4 & 0x7F;
  if (v5 == 24 || (v5 - 60) <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v10);
  v9 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F306F8C(v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DBBEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DBC60()
{
  return 0;
}

uint64_t sub_22E8DBC68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DBD58(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 164;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DBDB8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DBDCC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8DBE54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DBEC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 222; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 222);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8DBFBC()
{
  return 0;
}

uint64_t sub_22E8DBFC4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DC070(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 165;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DC0D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DC0E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8DC164(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DC1D8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(_DWORD *)(a2 + 56);
  v3 = v2 >= 0x2A;
  v5 = v2 == 42;
  v4 = (1 << v2) & 0x6800000000ALL;
  v5 = !v5 && v3 || v4 == 0;
  return !v5 && *(_DWORD *)(a2 + 148) == 11;
}

uint64_t sub_22E8DC214()
{
  return 0;
}

uint64_t sub_22E8DC21C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 166;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DC27C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DC290(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DC310(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DC384(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8DC390(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DC3F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DC404(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8DC48C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DC500()
{
  return 0;
}

uint64_t sub_22E8DC508(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DC5B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DC5C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8DC650(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DC6C4()
{
  return 0;
}

uint64_t sub_22E8DC6CC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DC778()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DC78C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 33)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"enums");
    sub_22E903BEC(v8);
  }
  return v4 == 33;
}

uint64_t sub_22E8DC808(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DC87C()
{
  return 0;
}

uint64_t sub_22E8DC884(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000001;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DC8E0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DC8F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DC974(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DC9E8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8DCA10()
{
  return 0;
}

uint64_t sub_22E8DCA18(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DCA78()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DCA8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Fu) - 60 < 7)
    return 1;
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 35 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"variables, functions, and classes");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DCB24(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DCB98()
{
  return 0;
}

uint64_t sub_22E8DCBA0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DCC78(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 172;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DCCD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DCCEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DCD6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DCDE0(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

void sub_22E8DCDEC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DCE00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"typedefs");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8DCE80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DCEF4(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8DCF00()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DCF14(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 13;
  if (v4 >= 0x3E)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"named declarations");
    sub_22E903BEC(v8);
  }
  return v4 < 0x3E;
}

uint64_t sub_22E8DCF94(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DD008()
{
  return 0;
}

uint64_t sub_22E8DD010(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x10000000ELL;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000001;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x100000002;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = 0x100000003;
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v13;
  if (v13 >= v12)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = 0x100000004;
  v14 = *(_DWORD *)(a2 + 12);
  v15 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v15;
  v16 = (((*a3 >> 8) & 1) << 32) | 6;
  if (v15 >= v14)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v15) = v16;
  v17 = *(_DWORD *)(a2 + 12);
  v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
  v19 = (((*a3 >> 14) & 1) << 32) | 7;
  if (v18 >= v17)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v19;
  v20 = *(_DWORD *)(a2 + 12);
  v21 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v21;
  v22 = (((*a3 >> 14) & 1) << 32) | 8;
  if (v21 >= v20)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v21) = v22;
  v23 = *(_DWORD *)(a2 + 12);
  v24 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v24;
  v25 = (((*a3 >> 14) & 1) << 32) | 9;
  if (v24 >= v23)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v24) = v25;
  v26 = *(_DWORD *)(a2 + 12);
  v27 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v27;
  v28 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v27 >= v26)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v27) = v28;
  v29 = *(_DWORD *)(a2 + 12);
  v30 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v30;
  v31 = (((*a3 >> 14) & 1) << 32) | 0xC;
  if (v30 >= v29)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v30) = v31;
  v32 = *(_DWORD *)(a2 + 12);
  v33 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v33;
  v34 = (((*a3 >> 14) & 1) << 32) | 0xD;
  if (v33 >= v32)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v33) = v34;
  v35 = *(_DWORD *)(a2 + 12);
  v36 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v36;
  if (v36 >= v35)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v36 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v36) = 0x10000000ELL;
  v37 = *(_DWORD *)(a2 + 12);
  v38 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v38;
  if (v38 >= v37)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v38 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v38) = 0x100000012;
  v39 = *(_DWORD *)(a2 + 12);
  v40 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v40;
  if (v40 >= v39)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v40) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DD414()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DD428(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DD4B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DD52C()
{
  return 0;
}

uint64_t sub_22E8DD534(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DD594()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DD5A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1282u, 0, (uint64_t)v9);
  v6 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  v8 = *(_DWORD *)(a4 + 24);
  sub_22F2F2168(v6, &v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DD610(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4)
{
  int v4;
  uint64_t v7;
  unsigned int v9[24];

  v4 = *a4;
  if ((v4 - 98) < 2 || v4 == 19)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v7 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"empty statements");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DD690()
{
  return 0;
}

void sub_22E8DD698()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DD6AC()
{
  return 0;
}

void sub_22E8DD6B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DD6C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 33)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"enums");
    sub_22E903BEC(v8);
  }
  return v4 == 33;
}

uint64_t sub_22E8DD744(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DD7B8()
{
  return 0;
}

uint64_t sub_22E8DD7C0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000001;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DD81C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 177;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DD87C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DD890(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DD910(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DD984()
{
  return 0;
}

uint64_t sub_22E8DD98C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DD9EC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 178;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DDA4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DDA60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) == 1 || (*(_DWORD *)(a4 + 28) & 0x7F) == 24;
  if (v4 || sub_22E8FB35C(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F307070(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DDAE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DDB58()
{
  return 0;
}

void sub_22E8DDB60()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DDB74(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x18 || sub_22E8FB35C(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F307154(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DDBF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DDC68()
{
  return 0;
}

void sub_22E8DDC70()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DDC84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DDD04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DDD78()
{
  return 0;
}

uint64_t sub_22E8DDD80(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DDDE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DDDF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3 || sub_22E8FB300(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306B18(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DDE78(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DDEEC(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8DDEF8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DDF0C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3 || sub_22E8FB300(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306B18(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DDF90(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DE004()
{
  return 0;
}

uint64_t sub_22E8DE00C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 183;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DE06C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DE080(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8DE100(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DE174(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];
  _BYTE v26[96];
  unsigned int v27[24];
  uint64_t v28;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 129)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 129);
      v28 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v14 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v26);
      v15 = (unsigned int *)v26;
      goto LABEL_19;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    i = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      for (i = *(uint64_t **)v16; *(_WORD *)(*i + 32) != 137; ++i)
      {
        v20 -= 8;
        if (!v20)
          return 1;
      }
    }
    if (i != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 137);
      v28 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v23 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v25);
      v15 = (unsigned int *)v25;
LABEL_19:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8DE334(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 68) >> 6) & 1;
}

uint64_t sub_22E8DE340()
{
  return 0;
}

uint64_t sub_22E8DE348(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DE3A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DE3BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if (a4
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 <= 5
    && sub_22EFB948C(a4) >= 3
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
  {
    return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"global functions");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DE470(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8DE4E4(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned __int16 *)(a2 + 96) >> 6) & 1;
}

uint64_t sub_22E8DE4F0()
{
  return 0;
}

void sub_22E8DE4F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DE50C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DE5A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8DE614(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned __int16 *)(a2 + 96) >> 6) & 1;
}

uint64_t sub_22E8DE620()
{
  return 0;
}

void sub_22E8DE628()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DE63C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if (a4
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 <= 5
    && sub_22EFB948C(a4) >= 3
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
  {
    return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"global functions");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DE6F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8DE764(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned __int16 *)(a2 + 96) >> 6) & 1;
}

uint64_t sub_22E8DE770()
{
  return 0;
}

void sub_22E8DE778()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DE78C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DE80C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DE880(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 146; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 146);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8DE974()
{
  return 0;
}

uint64_t sub_22E8DE97C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DE9DC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 188;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DEA3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DEA50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7F) == 0x18 && (*(_BYTE *)(a4 + 58) & 2) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v7);
  v6 = sub_22E8D2984((uint64_t)v7, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"Objective-C instance methods");
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22E8DEAD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DEB4C()
{
  return 0;
}

uint64_t sub_22E8DEB54(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xB;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DEBBC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 189;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DEC1C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DEC30()
{
  return 0;
}

void sub_22E8DEC38()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DEC4C()
{
  return 0;
}

void sub_22E8DEC54()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DEC68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DECE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DED5C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 76) == 3;
}

uint64_t sub_22E8DED6C()
{
  return 0;
}

uint64_t sub_22E8DED74(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DEDD4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DEDE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8DEE68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DEEDC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 68) != 16;
}

uint64_t sub_22E8DEEEC()
{
  return 0;
}

uint64_t sub_22E8DEEF4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DEF54()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DEF68()
{
  return 0;
}

void sub_22E8DEF70()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DEF84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Fu) - 60 < 7)
    return 1;
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 35 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"variables, functions, and classes");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8DF01C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DF090(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 147; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 147);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8DF184()
{
  return 0;
}

uint64_t sub_22E8DF18C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DF264()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DF278(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFE) == 48;
}

uint64_t sub_22E8DF28C()
{
  return 0;
}

void sub_22E8DF294()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DF2A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8DF328(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DF39C()
{
  return 0;
}

uint64_t sub_22E8DF3A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DF404(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 194;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DF464()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DF478(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8DF4F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DF56C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(_DWORD *)(a2 + 56);
  v3 = v2 >= 0x2A;
  v5 = v2 == 42;
  v4 = (1 << v2) & 0x6800000000ALL;
  v5 = !v5 && v3 || v4 == 0;
  return !v5 && *(_DWORD *)(a2 + 148) == 11;
}

uint64_t sub_22E8DF5A8()
{
  return 0;
}

void sub_22E8DF5B0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DF5C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DF644(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DF6B8()
{
  return 0;
}

uint64_t sub_22E8DF6C0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DF720(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 196;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DF780()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DF794(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F307238(v7);
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8DF808(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DF87C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 1) & 1;
}

uint64_t sub_22E8DF888()
{
  return 0;
}

uint64_t sub_22E8DF890(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 57;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DF8F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DF904()
{
  return 0;
}

void sub_22E8DF90C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DF920(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8DF9B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DFA24()
{
  return 0;
}

uint64_t sub_22E8DFA2C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8DFA8C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 368;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8DFAEC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DFB00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DFB80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DFBF4(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8DFC00()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DFC14(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8DFC94(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DFD08()
{
  return 0;
}

uint64_t sub_22E8DFD10(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8DFD70()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8DFD84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8DFE04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8DFE78(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8DFE84()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DFE98(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8DFEC0(uint64_t a1, uint64_t a2)
{
  return a2 == 2;
}

void sub_22E8DFECC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8DFEE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v8;
  unsigned int v10[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v5 = v4 & 0x7F;
  if (v5 == 1 || v5 == 24)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v10);
  v8 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F30731C(v8);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DFF68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8DFFDC()
{
  return 0;
}

uint64_t sub_22E8DFFE4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  v11 = *(_QWORD *)((char *)a3 + 20);
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = (v11 >> 9) & 0x100000000;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E00DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E00F0()
{
  return 0;
}

void sub_22E8E00F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E010C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E018C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E0200()
{
  return 0;
}

void sub_22E8E0208()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E021C(uint64_t a1, unsigned __int8 *a2)
{
  return (*a2 >> 5) & 1;
}

uint64_t sub_22E8E0228(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8E0250()
{
  return 0;
}

void sub_22E8E0258()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E026C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E02EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8E0360(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(_DWORD *)(a2 + 56);
  v3 = v2 >= 0x2A;
  v5 = v2 == 42;
  v4 = (1 << v2) & 0x6800000000ALL;
  v5 = !v5 && v3 || v4 == 0;
  return !v5 && *(_DWORD *)(a2 + 148) == 11;
}

uint64_t sub_22E8E039C()
{
  return 0;
}

uint64_t sub_22E8E03A4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 203;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8E0404()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E0418(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8E0498(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E050C()
{
  return 0;
}

uint64_t sub_22E8E0514(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8E0574(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 205;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8E05D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E05E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"typedefs");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E0668(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8E06DC(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

void sub_22E8E06E8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E06FC()
{
  return 0;
}

uint64_t sub_22E8E0704(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 208;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8E0764()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E0778(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E07F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E0868()
{
  return 0;
}

uint64_t sub_22E8E0870(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8E08D0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 209;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8E0930()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E0944(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E09C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E0A38(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E0A44()
{
  return 0;
}

uint64_t sub_22E8E0A4C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E0AAC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E0AC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E0B4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E0BC0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E0BCC()
{
  return 0;
}

uint64_t sub_22E8E0BD4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E0C74()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E0C88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E0D14(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E0D88(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E0D94()
{
  return 0;
}

uint64_t sub_22E8E0D9C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E0E3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E0E50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E0EDC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E0F50(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E0F5C(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E0F68(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E1008()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E101C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E10A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E111C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E1128(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E1134(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E11D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E11E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E1274(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E12E8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E12F4()
{
  return 0;
}

uint64_t sub_22E8E12FC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E139C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E13B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E143C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E14B0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E14BC()
{
  return 0;
}

void sub_22E8E14C4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E14D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E1564(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E15D8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E15E4()
{
  return 0;
}

void sub_22E8E15EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E1600(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E1680(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E16F4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E1700(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E170C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E1720(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB4C4(a4) & 1) != 0)
    return 1;
  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 <= 2)
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v10 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_23;
          }
          v10 = -64;
        }
      }
LABEL_23:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 2000) + 131) & 4) != 0)
      return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v16);
  v15 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22F2F30F4(v15, (uint64_t)"parameters, global constant variables, and non-static data members");
  sub_22E903BEC(v16);
  return 0;
}

uint64_t sub_22E8E18C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1934(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E1940(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E194C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E1960(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E19EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1A60()
{
  return 0;
}

void sub_22E8E1A68()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E1A7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E1B08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1B7C()
{
  return 0;
}

void sub_22E8E1B84()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E1B98(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E1C24(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1C98()
{
  return 0;
}

void sub_22E8E1CA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E1CB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E1D40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1DB4()
{
  return 0;
}

void sub_22E8E1DBC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E1DD0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E1E50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1EC4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E1ED0()
{
  return 0;
}

void sub_22E8E1ED8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E1EEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E1F78(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E1FEC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E1FF8(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E2004(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E20A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E20B8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E20C4()
{
  return 0;
}

void sub_22E8E20CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E20E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E2160(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E21D4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E21E0()
{
  return 0;
}

uint64_t sub_22E8E21E8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E2248()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E225C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E22D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E234C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E2358()
{
  return 0;
}

uint64_t sub_22E8E2360(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E23C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E23D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E2460(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E24D4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E24E0()
{
  return 0;
}

void sub_22E8E24E8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E24FC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E2508()
{
  return 0;
}

void sub_22E8E2510()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E2524(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E25A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E2614(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E2620()
{
  return 0;
}

uint64_t sub_22E8E2628(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E2688()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E269C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E2724(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E2798(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E27A4()
{
  return 0;
}

void sub_22E8E27AC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E27C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E2848(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E28BC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E28C8()
{
  return 0;
}

void sub_22E8E28D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E28E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v8;
  unsigned int v9[24];

  v6 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v6 < 0x10 && ((0x8007u >> v6) & 1) != 0 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F307400(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8E2974(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E29E8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E29F4()
{
  return 0;
}

void sub_22E8E29FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E2A10(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E2A9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E2B10(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E2B1C()
{
  return 0;
}

uint64_t sub_22E8E2B24(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E2BC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E2BD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E2C58(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E2CCC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E2CD8()
{
  return 0;
}

void sub_22E8E2CE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E2CF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E2D74(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E2DE8()
{
  return 0;
}

void sub_22E8E2DF0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E2E04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E2E84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E2EF8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E2F04()
{
  return 0;
}

void sub_22E8E2F0C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E2F20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E2FAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E3020(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E302C()
{
  return 0;
}

void sub_22E8E3034()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E3048(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11[24];

  if (a4)
  {
    if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    {
      v7 = *(_QWORD *)((*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v7 & 8) != 0 && (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
        return 1;
    }
  }
  v8 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v8 < 0x10 && ((0x8007u >> v8) & 1) != 0)
    return 1;
  if ((sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v11);
  v10 = sub_22E8D2984((uint64_t)v11, (uint64_t *)a3);
  sub_22F2F30F4(v10, (uint64_t)"global constant variables, parameters, non-static data members, and global builtin variables");
  sub_22E903BEC(v11);
  return 0;
}

uint64_t sub_22E8E3138(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E31AC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E31B8(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E31C4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E31D8()
{
  return 0;
}

void sub_22E8E31E0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E31F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E3270(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E32E4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E32F0()
{
  return 0;
}

uint64_t sub_22E8E32F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E3358()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E336C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E33E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E345C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E3468()
{
  return 0;
}

uint64_t sub_22E8E3470(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E34D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E34E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E3564(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E35D8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E35E4()
{
  return 0;
}

uint64_t sub_22E8E35EC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E364C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E3660(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E36E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E3754(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E3760(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E376C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E37CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E37E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E386C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E38E0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E38EC(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8E3914(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E3920(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E39C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E39D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E3A60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E3AD4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E3AE0()
{
  return 0;
}

uint64_t sub_22E8E3AE8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E3B88()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E3B9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E3C18(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E3C8C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E3C98()
{
  return 0;
}

void sub_22E8E3CA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E3CB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E3D30(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E3DA4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E3DB0()
{
  return 0;
}

uint64_t sub_22E8E3DB8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E3E18()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E3E2C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E3EAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E3F20(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E3F2C()
{
  return 0;
}

uint64_t sub_22E8E3F34(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E3F94()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E3FA8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E4028(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E409C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E40A8()
{
  return 0;
}

uint64_t sub_22E8E40B0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E4110()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4124(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E41A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4218(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E4224()
{
  return 0;
}

void sub_22E8E422C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4240(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E42BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4330(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E433C()
{
  return 0;
}

uint64_t sub_22E8E4344(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E43A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E43B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB4C4(a4) & 1) != 0)
    return 1;
  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 <= 2)
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v10 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_23;
          }
          v10 = -64;
        }
      }
LABEL_23:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 2000) + 131) & 4) != 0)
      return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v16);
  v15 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22F2F30F4(v15, (uint64_t)"parameters, global constant variables, and non-static data members");
  sub_22E903BEC(v16);
  return 0;
}

uint64_t sub_22E8E4558(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E45CC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E45D8(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E45E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E45F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E4674(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E46E8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E46F4()
{
  return 0;
}

uint64_t sub_22E8E46FC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E475C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4770(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E47F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4864(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E4870(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E487C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E48DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E48F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E4970(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E49E4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E49F0(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_22E8E49FC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E4A5C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4A70(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E4AF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4B64(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E4B70()
{
  return 0;
}

uint64_t sub_22E8E4B78(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E4BD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4BEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E4C68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4CDC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E4CE8()
{
  return 0;
}

uint64_t sub_22E8E4CF0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E4D50()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4D64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E4DE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4E54(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E4E60()
{
  return 0;
}

uint64_t sub_22E8E4E68(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E4EC8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E4EDC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E4F58(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E4FCC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E4FD8()
{
  return 0;
}

uint64_t sub_22E8E4FE0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E5040()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5054(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E50D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5148(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 45; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 45);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8E523C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5248()
{
  return 0;
}

void sub_22E8E5250()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5264(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E52E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5358(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5364()
{
  return 0;
}

uint64_t sub_22E8E536C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E53CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E53E0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E53EC()
{
  return 0;
}

void sub_22E8E53F4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5408(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E5484(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E54F8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5504()
{
  return 0;
}

uint64_t sub_22E8E550C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E556C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5580(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E55FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5670(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E567C()
{
  return 0;
}

uint64_t sub_22E8E5684(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E56E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E56F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E5774(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E57E8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E57F4()
{
  return 0;
}

uint64_t sub_22E8E57FC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E585C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5870(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E58F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5964(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E5970(uint64_t a1, uint64_t a2)
{
  return a2 == 1;
}

void sub_22E8E597C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E5990(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E5A1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5A90(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5A9C()
{
  return 0;
}

void sub_22E8E5AA4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5AB8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E5B34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5BA8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5BB4()
{
  return 0;
}

uint64_t sub_22E8E5BBC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E5C1C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E5C30(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E5CBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5D30(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5D3C()
{
  return 0;
}

void sub_22E8E5D44()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E5D58(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E5DE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5E58(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5E64()
{
  return 0;
}

void sub_22E8E5E6C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E5E80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E5F0C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E5F80(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E5F8C()
{
  return 0;
}

void sub_22E8E5F94()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E5FA8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E6028(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E609C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E60A8()
{
  return 0;
}

void sub_22E8E60B0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E60C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6150(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E61C4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E61D0()
{
  return 0;
}

void sub_22E8E61D8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E61EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6278(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E62EC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E62F8()
{
  return 0;
}

void sub_22E8E6300()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6314(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E63A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6414(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E6420()
{
  return 0;
}

void sub_22E8E6428()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E643C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E64BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6530(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E653C()
{
  return 0;
}

uint64_t sub_22E8E6544(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E65A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E65B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E6634(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E66A8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E66B4()
{
  return 0;
}

uint64_t sub_22E8E66BC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E671C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6730(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E67BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6830(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E683C()
{
  return 0;
}

uint64_t sub_22E8E6844(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E68E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E68F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6980(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E69F4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E6A00()
{
  return 0;
}

void sub_22E8E6A08()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6A1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6AA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6B18(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E6B24()
{
  return 0;
}

void sub_22E8E6B2C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6B40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB4C4(a4) & 1) != 0 || (*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"parameters, global constant variables, and non-static data members");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8E6BE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6C5C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E6C68(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E6C74()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6C88(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E6C94()
{
  return 0;
}

void sub_22E8E6C9C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6CB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6D3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6DB0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E6DBC()
{
  return 0;
}

void sub_22E8E6DC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6DD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6E60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6ED4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E6EE0()
{
  return 0;
}

void sub_22E8E6EE8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E6EFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E6F84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E6FF8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7004()
{
  return 0;
}

void sub_22E8E700C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7020(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E70AC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7120(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E712C()
{
  return 0;
}

void sub_22E8E7134()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7148(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E71D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7248(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7254()
{
  return 0;
}

void sub_22E8E725C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7270(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E72FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7370()
{
  return 0;
}

void sub_22E8E7378()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E738C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E7418(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E748C()
{
  return 0;
}

void sub_22E8E7494()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E74A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB4C4(a4) & 1) != 0)
    return 1;
  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 <= 2)
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v10 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_23;
          }
          v10 = -64;
        }
      }
LABEL_23:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 2000) + 131) & 4) != 0)
      return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v16);
  v15 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22F2F30F4(v15, (uint64_t)"parameters, global constant variables, and non-static data members");
  sub_22E903BEC(v16);
  return 0;
}

uint64_t sub_22E8E7648(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E76BC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E76C8(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E76D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E76E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"non-static data members");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8E7768(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E77DC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E77E8()
{
  return 0;
}

uint64_t sub_22E8E77F0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E7850()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E7864(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E78E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7954(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7960()
{
  return 0;
}

void sub_22E8E7968()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E797C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E7A04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7A78(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7A84()
{
  return 0;
}

void sub_22E8E7A8C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7AA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E7B28(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7B9C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7BA8()
{
  return 0;
}

void sub_22E8E7BB0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7BC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E7C50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7CC4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7CD0()
{
  return 0;
}

void sub_22E8E7CD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7CEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB4C4(a4) & 1) != 0)
    return 1;
  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 <= 2)
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v10 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_23;
          }
          v10 = -64;
        }
      }
LABEL_23:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 2000) + 131) & 4) != 0)
      return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v16);
  v15 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22F2F30F4(v15, (uint64_t)"parameters, global constant variables, and non-static data members");
  sub_22E903BEC(v16);
  return 0;
}

uint64_t sub_22E8E7E8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E7F00(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

BOOL sub_22E8E7F0C(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8E7F18()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E7F2C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E7F38()
{
  return 0;
}

void sub_22E8E7F40()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E7F54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E7FD0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8044(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8050()
{
  return 0;
}

void sub_22E8E8058()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E806C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8078()
{
  return 0;
}

void sub_22E8E8080()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8094(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E80A0()
{
  return 0;
}

void sub_22E8E80A8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E80BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8144(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E81B8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E81C4()
{
  return 0;
}

void sub_22E8E81CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E81E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8268(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E82DC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E82E8()
{
  return 0;
}

void sub_22E8E82F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8304(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E838C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8400(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E840C()
{
  return 0;
}

void sub_22E8E8414()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8428(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E84B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8524(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8530()
{
  return 0;
}

void sub_22E8E8538()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E854C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E85D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8648(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8654()
{
  return 0;
}

void sub_22E8E865C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8670(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E86F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E876C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8778()
{
  return 0;
}

void sub_22E8E8780()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8794(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E881C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8890(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E889C()
{
  return 0;
}

void sub_22E8E88A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E88B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8940(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E89B4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E89C0()
{
  return 0;
}

void sub_22E8E89C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E89DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8A64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8AD8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8AE4()
{
  return 0;
}

void sub_22E8E8AEC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8B00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x40 || (sub_22E8FB644(a4) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and global builtin variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8B88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8BFC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8C08()
{
  return 0;
}

void sub_22E8E8C10()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8C24(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8CB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8D24(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8D30()
{
  return 0;
}

void sub_22E8E8D38()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E8D4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E8DC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8E3C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8E48()
{
  return 0;
}

uint64_t sub_22E8E8E50(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E8EB0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E8EC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E8F50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E8FC4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E8FD0()
{
  return 0;
}

uint64_t sub_22E8E8FD8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000003;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E9078()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E908C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E9108(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E917C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E9188()
{
  return 0;
}

uint64_t sub_22E8E9190(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E91F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E9204(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E9284(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E92F8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E9304()
{
  return 0;
}

void sub_22E8E930C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E9320(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E939C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9410(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E941C()
{
  return 0;
}

void sub_22E8E9424()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E9438(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 49;
  if (v5 < 0x10 && ((0x8007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and non-static data members");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8E94C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9538(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E9544()
{
  return 0;
}

void sub_22E8E954C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E9560(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E956C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8E9594()
{
  return 0;
}

void sub_22E8E959C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E95B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E962C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E96A0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E96AC()
{
  return 0;
}

uint64_t sub_22E8E96B4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E9714()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E9728(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E97A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9818(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E9824()
{
  return 0;
}

uint64_t sub_22E8E982C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E988C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E98A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8E991C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9990(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8E999C()
{
  return 0;
}

uint64_t sub_22E8E99A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E9A04()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E9A18(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E9A98(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9B0C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 214; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 214);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

BOOL sub_22E8E9C00(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFE) == 16;
}

uint64_t sub_22E8E9C14()
{
  return 0;
}

uint64_t sub_22E8E9C1C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8E9C7C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 211;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8E9CDC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8E9CF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8E9D78(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9DEC()
{
  return 0;
}

uint64_t sub_22E8E9DF4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8E9EA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8E9EB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8E9F34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8E9FA8()
{
  return 0;
}

uint64_t sub_22E8E9FB0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EA010()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EA024(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EA0A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EA118(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[96];
  _BYTE v26[96];
  unsigned int v27[24];
  uint64_t v28;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 215)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 215);
      v28 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v14 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v26);
      v15 = (unsigned int *)v26;
      goto LABEL_19;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    i = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      for (i = *(uint64_t **)v16; *(_WORD *)(*i + 32) != 211; ++i)
      {
        v20 -= 8;
        if (!v20)
          return 1;
      }
    }
    if (i != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 211);
      v28 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v27);
      v23 = sub_22E8D2984((uint64_t)v27, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v28);
      sub_22E903BEC(v27);
      sub_22E8FCA40(a2, *(_DWORD *)(v28 + 16), 0x1574u, 0, (uint64_t)v25);
      v15 = (unsigned int *)v25;
LABEL_19:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

BOOL sub_22E8EA2D8(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFE) == 16;
}

uint64_t sub_22E8EA2EC()
{
  return 0;
}

uint64_t sub_22E8EA2F4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EA354(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 214;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EA3B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EA3C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EA448(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EA4BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 217; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 217);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

BOOL sub_22E8EA5B0(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFC) == 16;
}

uint64_t sub_22E8EA5C4(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8EA5EC()
{
  return 0;
}

uint64_t sub_22E8EA5F4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EA654(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 216;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EA6B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EA6C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EA748(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EA7BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 216; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 216);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

BOOL sub_22E8EA8B0(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFC) == 16;
}

uint64_t sub_22E8EA8C4(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8EA8EC()
{
  return 0;
}

uint64_t sub_22E8EA8F4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EA954(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 217;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EA9B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EA9C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 33;
  if (v5 < 0x22 && ((0x3F80701C1uLL >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F3074E4(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8EAA54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EAAC8()
{
  return 0;
}

void sub_22E8EAAD0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EAAE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1282u, 0, (uint64_t)v9);
  v6 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  v8 = *(_DWORD *)(a4 + 24);
  sub_22F2F2168(v6, &v8);
  sub_22E903BEC(v9);
  return 0;
}

BOOL sub_22E8EAB4C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *a4;
  if (v4 != 93)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"return statements");
    sub_22E903BEC(v8);
  }
  return v4 == 93;
}

uint64_t sub_22E8EABC4()
{
  return 0;
}

void sub_22E8EABCC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EABE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8EAC5C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EACD0()
{
  return 0;
}

uint64_t sub_22E8EACD8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EAD38()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EAD4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8EADC8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EAE3C()
{
  return 0;
}

uint64_t sub_22E8EAE44(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EAEAC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 218;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EAF0C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EAF20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 33)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"enums");
    sub_22E903BEC(v8);
  }
  return v4 == 33;
}

uint64_t sub_22E8EAF9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EB010()
{
  return 0;
}

uint64_t sub_22E8EB018(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000001;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EB074()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EB088()
{
  return 0;
}

void sub_22E8EB090()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EB0A4()
{
  return 0;
}

void sub_22E8EB0AC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EB0C0()
{
  return 0;
}

void sub_22E8EB0C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EB0DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EB15C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EB1D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 165; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 165);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8EB2C4()
{
  return 0;
}

uint64_t sub_22E8EB2CC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EB32C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EB340()
{
  return 0;
}

void sub_22E8EB348()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EB35C()
{
  return 0;
}

void sub_22E8EB364()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EB378(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EB3F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EB46C()
{
  return 0;
}

uint64_t sub_22E8EB474(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 223;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EB4D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EB4E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EB568(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EB5DC()
{
  return 0;
}

uint64_t sub_22E8EB5E4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EB644()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EB658(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8EB6D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EB74C()
{
  return 0;
}

uint64_t sub_22E8EB754(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EB7B4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 224;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EB814()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EB828(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v10;
  unsigned int v11[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 39 < 3)
    return 1;
  if (sub_22EFCB008(a4, 0))
    return 1;
  v7 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v7 == 24)
    return 1;
  if (v7 != 64 && (v7 - 60) < 7)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v11);
  v10 = sub_22E8D2984((uint64_t)v11, (uint64_t *)a3);
  sub_22F3075C8(v10);
  sub_22E903BEC(v11);
  return 0;
}

uint64_t sub_22E8EB8DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EB950()
{
  return 0;
}

uint64_t sub_22E8EB958(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000012;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000011;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  v10 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v10;
  v11 = *(_DWORD *)(a2 + 12);
  v12 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v12;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = 0x100000018;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EBA84()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EBA98()
{
  return 0;
}

void sub_22E8EBAA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EBAB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8EBB34(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EBBA8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 101; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 101);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8EBC9C()
{
  return 0;
}

uint64_t sub_22E8EBCA4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EBD04()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EBD18(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EBD98(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EBE0C()
{
  return 0;
}

uint64_t sub_22E8EBE14(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EBE74(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 227;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EBED4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EBEE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8EBF64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EBFD8()
{
  return 0;
}

uint64_t sub_22E8EBFE0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EC040()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EC054(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions and statements");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EC0D4()
{
  return 1;
}

uint64_t sub_22E8EC0DC()
{
  return 0;
}

uint64_t sub_22E8EC0E4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EC144(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 47;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EC1A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EC1B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8EC240(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EC2B4()
{
  return 0;
}

uint64_t sub_22E8EC2BC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EC368(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 228;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EC3C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EC3DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions and statements");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EC45C()
{
  return 1;
}

uint64_t sub_22E8EC464()
{
  return 0;
}

uint64_t sub_22E8EC46C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EC4CC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 48;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EC52C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EC540(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EC5C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8EC634(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFE) == 16;
}

uint64_t sub_22E8EC648()
{
  return 0;
}

uint64_t sub_22E8EC650(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EC6B0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 229;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EC710()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EC724(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EC7A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8EC818(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) & 0xFFFFFFFE) == 16;
}

uint64_t sub_22E8EC82C()
{
  return 0;
}

uint64_t sub_22E8EC834(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EC894(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 230;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EC8F4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EC908(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EC988(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EC9FC()
{
  return 0;
}

uint64_t sub_22E8ECA04(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8ECA64(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 231;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8ECAC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8ECAD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8ECB58(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ECBCC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 291; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 291);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

BOOL sub_22E8ECCC0(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 1) & 1) == 0;
}

uint64_t sub_22E8ECCD0()
{
  return 0;
}

uint64_t sub_22E8ECCD8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8ECD38()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8ECD4C()
{
  return 0;
}

void sub_22E8ECD54()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8ECD68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v9;
  unsigned int v10[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v5 = v4 & 0x7F;
  if (v5 == 24 || (v5 - 60) <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v10);
  v9 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F306F8C(v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ECE04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ECE78()
{
  return 0;
}

uint64_t sub_22E8ECE80(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8ECF70()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8ECF84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F306BFC(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8ED018(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ED08C()
{
  return 0;
}

uint64_t sub_22E8ED094(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000015;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8ED130()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8ED144(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8ED1CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ED240(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 310; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 310);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8ED334()
{
  return 0;
}

uint64_t sub_22E8ED33C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8ED3E8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 235;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8ED448()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8ED45C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8ED4DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ED550()
{
  return 0;
}

uint64_t sub_22E8ED558(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8ED5B8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 236;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8ED618()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8ED62C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8ED6AC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ED720()
{
  return 0;
}

uint64_t sub_22E8ED728(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8ED788(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 237;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8ED7E8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8ED7FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8ED87C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8ED8F0()
{
  return 0;
}

uint64_t sub_22E8ED8F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8ED958(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 238;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8ED9B8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8ED9CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && sub_22EFCB008(a4, 0))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"functions and function pointers");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8EDA4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EDAC0()
{
  return 0;
}

uint64_t sub_22E8EDAC8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000011;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EDB28()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EDB3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8EDBC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EDC38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 330; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 330);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8EDD2C()
{
  return 0;
}

uint64_t sub_22E8EDD34(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EDDE0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 240;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EDE40()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EDE54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 <= 2 && (*(_BYTE *)(a4 + 68) & 1) == 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v7);
  v6 = sub_22E8D2984((uint64_t)v7, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"non-bit-field non-static data members");
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22E8EDEE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8EDF54(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 148) < 0xBu;
}

uint64_t sub_22E8EDF64()
{
  return 0;
}

uint64_t sub_22E8EDF6C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 241;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EDFCC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EDFE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x18 || sub_22E8FB35C(a4) || (*(_DWORD *)(a4 + 28) & 0x7F) == 0x40)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F3076AC(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8EE07C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EE0F0()
{
  return 0;
}

void sub_22E8EE0F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EE10C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8EE18C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EE200(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 45; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 45);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8EE2F4()
{
  return 0;
}

uint64_t sub_22E8EE2FC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EE35C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 242;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EE3BC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EE3D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8EE44C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EE4C0()
{
  return 0;
}

uint64_t sub_22E8EE4C8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EE528()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EE53C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if (a4
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 54 <= 3
    && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(a4 + 40) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) > 3))
  {
    return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F307790(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8EE608(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EE67C()
{
  return 0;
}

uint64_t sub_22E8EE684(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 248;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EE6E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EE6F8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v11;
  unsigned int v12[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v5 = (v4 & 0x7F) - 24;
  v6 = v5 > 0x28;
  v7 = (1 << v5) & 0x10000000003;
  if (!v6 && v7 != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v12);
  v11 = sub_22E8D2984((uint64_t)v12, (uint64_t *)a3);
  sub_22F2F30F4(v11, (uint64_t)"functions, Objective-C methods, Objective-C properties, and parameters");
  sub_22E903BEC(v12);
  return 0;
}

uint64_t sub_22E8EE79C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EE810()
{
  return 0;
}

uint64_t sub_22E8EE818(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  v11 = (((*a3 >> 14) & 1) << 32) | 0xC;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v11;
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v13;
  if (v13 >= v12)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EE950()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EE964(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v11;
  unsigned int v12[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v5 = (v4 & 0x7F) - 24;
  v6 = v5 > 0x28;
  v7 = (1 << v5) & 0x10000000003;
  if (!v6 && v7 != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v12);
  v11 = sub_22E8D2984((uint64_t)v12, (uint64_t *)a3);
  sub_22F2F30F4(v11, (uint64_t)"functions, Objective-C methods, Objective-C properties, and parameters");
  sub_22E903BEC(v12);
  return 0;
}

uint64_t sub_22E8EEA08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EEA7C()
{
  return 0;
}

uint64_t sub_22E8EEA84(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  v11 = (((*a3 >> 14) & 1) << 32) | 0xC;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v11;
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v13;
  if (v13 >= v12)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EEBBC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EEBD0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8EEC4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EECC0()
{
  return 0;
}

uint64_t sub_22E8EECC8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EED28()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EED3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8EEDB8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EEE2C()
{
  return 0;
}

uint64_t sub_22E8EEE34(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EEE94()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EEEA8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8EEF28(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EEF9C()
{
  return 0;
}

uint64_t sub_22E8EEFA4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EF004()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EF018(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 34 < 4 || (v4 & 0x7Fu) - 39 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"structs, unions, classes, and typedefs");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8EF0A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EF11C()
{
  return 0;
}

uint64_t sub_22E8EF124(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000012;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EF1C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EF1D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8EF254(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EF2C8()
{
  return 0;
}

uint64_t sub_22E8EF2D0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EF330()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EF344(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8EF3C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EF438()
{
  return 0;
}

uint64_t sub_22E8EF440(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EF4A0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EF4B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8EF530(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EF5A4(uint64_t a1, uint64_t a2)
{
  return (0x1Du >> *(_BYTE *)(a2 + 400)) & 1;
}

uint64_t sub_22E8EF5B8()
{
  return 0;
}

uint64_t sub_22E8EF5C0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EF628(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 482;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EF688()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EF69C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8EF718(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EF78C()
{
  return 0;
}

uint64_t sub_22E8EF794(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EF7FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EF810(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8EF88C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EF900()
{
  return 0;
}

uint64_t sub_22E8EF908(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EF970()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EF984(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8EFA00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EFA74(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8EFA80()
{
  return 0;
}

uint64_t sub_22E8EFA88(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EFAF0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8EFB04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v8;
  unsigned int v10[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7E) == 0x14)
    return 1;
  v5 = v4 & 0x7F;
  if (v5 == 19 || v5 == 22)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v10);
  v8 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F307874(v8);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EFB88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EFBFC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8EFC08()
{
  return 0;
}

uint64_t sub_22E8EFC10(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t result;

  v5 = (((*a3 >> 14) & 1) << 32) | 8;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v5;
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v8;
  v9 = (((*a3 >> 14) & 1) << 32) | 9;
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = v9;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  v12 = *a3;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = (((v12 >> 14) & 1) << 32) | 7;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8EFD14()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EFD28(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8EFDA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EFE18()
{
  return 0;
}

uint64_t sub_22E8EFE20(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8EFE88(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 257;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8EFEE8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8EFEFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 23)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C protocols");
    sub_22E903BEC(v8);
  }
  return v4 == 23;
}

uint64_t sub_22E8EFF78(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8EFFEC()
{
  return 0;
}

uint64_t sub_22E8EFFF4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xD;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F005C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F0070(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  BOOL v7;
  uint64_t v10;
  unsigned int v12[24];

  v4 = *(_DWORD *)(a4 + 28);
  v5 = v4 & 0x7F;
  v7 = v5 == 64 || a4 == 0 || (v4 & 0x7Fu) - 60 >= 7;
  if (!v7 || (v4 & 0x7Eu) - 52 < 6)
    return 1;
  if (v5 == 1 || v5 == 24)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v12);
  v10 = sub_22E8D2984((uint64_t)v12, (uint64_t *)a3);
  sub_22F2F30F4(v10, (uint64_t)"variables, functions, blocks, and Objective-C methods");
  sub_22E903BEC(v12);
  return 0;
}

uint64_t sub_22E8F0114(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8F0188(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned __int16 *)(a2 + 148) >> 1) & 1;
}

uint64_t sub_22E8F0194()
{
  return 0;
}

uint64_t sub_22E8F019C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000018;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000004;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  v10 = (*(unint64_t *)((char *)a3 + 20) >> 9) & 0x100000000;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v10;
  v11 = *(_DWORD *)(a2 + 12);
  v12 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v12;
  v13 = *a3;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = (((v13 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F02D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F02E4()
{
  return 0;
}

void sub_22E8F02EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F0300()
{
  return 0;
}

void sub_22E8F0308()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F031C()
{
  return 0;
}

void sub_22E8F0324()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F0338()
{
  return 0;
}

void sub_22E8F0340()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F0354(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8F03D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F0444()
{
  return 0;
}

uint64_t sub_22E8F044C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F04B4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F04C8()
{
  return 0;
}

void sub_22E8F04D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F04E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) == 0x16 || (*(_DWORD *)(a4 + 28) & 0x7E) == 20;
  v5 = v4;
  if (!v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"Objective-C interfaces and Objective-C implementation declarations");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F0568(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F05DC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8F05E8()
{
  return 0;
}

uint64_t sub_22E8F05F0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t result;

  v5 = (((*a3 >> 14) & 1) << 32) | 9;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v5;
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v8;
  v9 = *a3;
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = (((v9 >> 14) & 1) << 32) | 8;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F06AC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 486;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F070C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F0720(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 23)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C protocols");
    sub_22E903BEC(v8);
  }
  return v4 == 23;
}

uint64_t sub_22E8F079C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F0810(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8F081C()
{
  return 0;
}

uint64_t sub_22E8F0824(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xD;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F088C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 487;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F08EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F0900()
{
  return 0;
}

void sub_22E8F0908()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F091C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8F099C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F0A10()
{
  return 0;
}

uint64_t sub_22E8F0A18(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F0A78()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F0A8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8F0B08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F0B7C()
{
  return 0;
}

uint64_t sub_22E8F0B84(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F0BEC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 264;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F0C4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F0C60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8F0CDC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F0D50()
{
  return 0;
}

uint64_t sub_22E8F0D58(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F0DC0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F0DD4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7E;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods and Objective-C properties");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8F0E50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F0EC4()
{
  return 0;
}

uint64_t sub_22E8F0ECC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t result;

  v5 = (((*a3 >> 14) & 1) << 32) | 0xA;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v5;
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v8;
  v9 = *a3;
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = (((v9 >> 14) & 1) << 32) | 0xC;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F0F88()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F0F9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8F1018(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F108C()
{
  return 0;
}

uint64_t sub_22E8F1094(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F10FC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 267;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F115C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F1170(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7E;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F307958(v7);
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8F11E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F1258()
{
  return 0;
}

uint64_t sub_22E8F1260(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t result;

  v5 = (((*a3 >> 14) & 1) << 32) | 9;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v5;
  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v8;
  v9 = *a3;
  if (v8 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = (((v9 >> 14) & 1) << 32) | 0xD;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F131C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F1330(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8F13AC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F1420()
{
  return 0;
}

uint64_t sub_22E8F1428(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F1490(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 489;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F14F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F1504(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8F1580(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F15F4()
{
  return 0;
}

uint64_t sub_22E8F15FC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F1664(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 268;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F16C4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F16D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 24)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C methods");
    sub_22E903BEC(v8);
  }
  return v4 == 24;
}

uint64_t sub_22E8F1754(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F17C8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8F17D4()
{
  return 0;
}

uint64_t sub_22E8F17DC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F1844()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F1858(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 25)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C properties");
    sub_22E903BEC(v8);
  }
  return v4 == 25;
}

uint64_t sub_22E8F18D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F1948(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 1) >> 6) & 1;
}

uint64_t sub_22E8F1954()
{
  return 0;
}

void sub_22E8F195C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1970(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v5 < 0x1A && ((0x2000007u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"parameters and typedefs");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F1A00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F1A74(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a2);
  return dword_22F463AC0[v3];
}

uint64_t sub_22E8F1AB8()
{
  return 0;
}

void sub_22E8F1AC0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1AD4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a2);
  return dword_22F463AD8[v3];
}

uint64_t sub_22E8F1B18()
{
  return 0;
}

void sub_22E8F1B20()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1B34(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a2);
  return dword_22F463AD8[v3];
}

uint64_t sub_22E8F1B78()
{
  return 0;
}

void sub_22E8F1B80()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1B94(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a2);
  return dword_22F463AD8[v3];
}

uint64_t sub_22E8F1BD8()
{
  return 0;
}

void sub_22E8F1BE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1BF4()
{
  return 0;
}

void sub_22E8F1BFC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1C10()
{
  return 0;
}

void sub_22E8F1C18()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F1C2C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F1CAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F1D20()
{
  return 0;
}

uint64_t sub_22E8F1D28(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F1D88()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1D9C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8F1DA8()
{
  return 0;
}

void sub_22E8F1DB0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1DC4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8F1DD0()
{
  return 0;
}

void sub_22E8F1DD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1DEC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8F1DF8()
{
  return 0;
}

void sub_22E8F1E00()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1E14(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 5) & 1;
}

uint64_t sub_22E8F1E20()
{
  return 0;
}

void sub_22E8F1E28()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F1E3C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F1EBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8F1F30(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned int *)(a2 + 52) >> 30) & 1;
}

uint64_t sub_22E8F1F3C()
{
  return 0;
}

uint64_t sub_22E8F1F44(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 271;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F1FA4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F1FB8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a2);
  return dword_22F463AD8[v3];
}

uint64_t sub_22E8F1FFC()
{
  return 0;
}

void sub_22E8F2004()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F2018(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8F2098(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8F210C(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned int *)(a2 + 52) >> 30) & 1;
}

uint64_t sub_22E8F2118()
{
  return 0;
}

uint64_t sub_22E8F2120(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F2180()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F2194(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    v3 = ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    v3 = sub_22F1BFAD0(a2);
  return dword_22F463AD8[v3];
}

uint64_t sub_22E8F21D8()
{
  return 0;
}

void sub_22E8F21E0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F21F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1282u, 0, (uint64_t)v9);
  v6 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  v8 = *(_DWORD *)(a4 + 24);
  sub_22F2F2168(v6, &v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8F225C(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  unsigned int v7[24];

  if ((*a4 + 20) < 0x23u && ((0x602000001uLL >> (*a4 + 20)) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v7);
  v6 = sub_22E8D2984((uint64_t)v7, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"'for', 'while', and 'do' statements");
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22E8F22F0()
{
  return 0;
}

void sub_22E8F22F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F230C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F2394(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F2408()
{
  return 0;
}

uint64_t sub_22E8F2410(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F24BC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F24D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F2550(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F25C4()
{
  return 0;
}

uint64_t sub_22E8F25CC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F262C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 492;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F268C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F26A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 34 <= 3 && (*(_DWORD *)(a4 + 72) & 0xE000) != 0x4000)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v7);
  v6 = sub_22E8D2984((uint64_t)v7, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"structs");
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22E8F2734(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F27A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 279; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 279);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8F289C()
{
  return 0;
}

uint64_t sub_22E8F28A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000FLL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F2904()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F2918(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  uint64_t v8;
  unsigned int v9[24];

  v6 = sub_22E8FB35C(a4);
  if (!v6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"non-K&R-style functions");
    sub_22E903BEC(v9);
  }
  return v6;
}

uint64_t sub_22E8F2998(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F2A0C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F2A34()
{
  return 0;
}

void sub_22E8F2A3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F2A50()
{
  return 0;
}

void sub_22E8F2A58()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F2A6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"typedefs");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F2AEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8F2B60(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8F2B6C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F2B80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F2BFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F2C70()
{
  return 0;
}

uint64_t sub_22E8F2C78(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F2CD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F2CEC()
{
  return 0;
}

void sub_22E8F2CF4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F2D08(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F2D84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F2DF8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F2E20()
{
  return 0;
}

uint64_t sub_22E8F2E28(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F2E88()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F2E9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F2F24(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F2F98(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int *)(a2 + 56) < 0x2BuLL) & (0x60180000018uLL >> *(_DWORD *)(a2 + 56));
}

uint64_t sub_22E8F2FBC()
{
  return 0;
}

uint64_t sub_22E8F2FC4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F3070()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3084()
{
  return 0;
}

void sub_22E8F308C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F30A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 34 <= 3 && (*(_DWORD *)(a4 + 72) & 0xE000) != 0x4000)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v7);
  v6 = sub_22E8D2984((uint64_t)v7, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"structs");
  sub_22E903BEC(v7);
  return 0;
}

uint64_t sub_22E8F3134(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F31A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 274; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 274);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8F329C()
{
  return 0;
}

uint64_t sub_22E8F32A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000FLL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F3304()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3318(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F3340()
{
  return 0;
}

void sub_22E8F3348()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F335C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F33DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3450()
{
  return 0;
}

uint64_t sub_22E8F3458(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F34B8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F34CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F355C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F35D0()
{
  return 0;
}

void sub_22E8F35D8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F35EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F367C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F36F0()
{
  return 0;
}

void sub_22E8F36F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F370C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F379C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3810()
{
  return 0;
}

void sub_22E8F3818()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F382C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && !sub_22E3CB5E0(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"global variables");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F38BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3930()
{
  return 0;
}

void sub_22E8F3938()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F394C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F39CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3A40()
{
  return 0;
}

void sub_22E8F3A48()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3A5C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if (a4
    && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 35 <= 2
    && *(_QWORD *)(a4 + 136) >= 8uLL
    && (*(_QWORD *)(a4 + 136) & 4) == 0)
  {
    return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"class templates");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F3AF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3B68()
{
  return 0;
}

void sub_22E8F3B70()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3B84()
{
  return 0;
}

void sub_22E8F3B8C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3BA0()
{
  return 0;
}

void sub_22E8F3BA8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3BBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3 || sub_22E8FB300(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306B18(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F3C40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8F3CB4(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8F3CC0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3CD4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3 || sub_22E8FB300(a4))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F306B18(v7);
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F3D58(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3DCC()
{
  return 0;
}

void sub_22E8F3DD4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3DE8()
{
  return 0;
}

void sub_22E8F3DF0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3E04()
{
  return 0;
}

void sub_22E8F3E0C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F3E20()
{
  return 0;
}

uint64_t sub_22E8F3E28(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 289;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F3E88()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F3E9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F3F1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F3F90(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 232; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 232);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

BOOL sub_22E8F4084(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 1) & 1) == 0;
}

uint64_t sub_22E8F4094()
{
  return 0;
}

uint64_t sub_22E8F409C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F40FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F4110(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F4190(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F4204()
{
  return 0;
}

uint64_t sub_22E8F420C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F426C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F4280()
{
  return 0;
}

void sub_22E8F4288()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F429C()
{
  return 0;
}

void sub_22E8F42A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F42B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if (a4
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 54 <= 3
    && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(a4 + 40) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4)
    && !sub_22E8FB7BC(a4))
  {
    return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"non-static non-const member functions");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8F4398(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F440C()
{
  return 0;
}

uint64_t sub_22E8F4414(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 293;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F4474()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F4488(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F4508(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F457C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8F45A4(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8F45B0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F45C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F4640(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F46B4()
{
  return 0;
}

uint64_t sub_22E8F46BC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F471C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F4730(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F47B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

unint64_t sub_22E8F4824(uint64_t a1, uint64_t a2)
{
  return ((unint64_t)*(unsigned __int16 *)(a2 + 96) >> 5) & 1;
}

uint64_t sub_22E8F4830()
{
  return 0;
}

uint64_t sub_22E8F4838(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F4898(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 493;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F48F8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F490C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F498C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F4A00()
{
  return 0;
}

uint64_t sub_22E8F4A08(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F4A68()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F4A7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F4AFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F4B70(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8F4B98(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8F4BA4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F4BB8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F4C38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F4CAC(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F4CD4()
{
  return 0;
}

uint64_t sub_22E8F4CDC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F4D3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F4D50(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  unsigned int v9;
  uint64_t v12;
  unsigned int v13[24];

  v6 = *(_DWORD *)(a4 + 28);
  v7 = v6 & 0x7F;
  if (a4 && (v7 - 60) <= 6)
  {
    if (!sub_22E3CB5E0(a4))
      return 1;
    v6 = *(_DWORD *)(a4 + 28);
    v7 = v6 & 0x7F;
  }
  v9 = (v6 & 0x7E) - 52;
  if (v7 != 24 && v9 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v13);
    v12 = sub_22E8D2984((uint64_t)v13, (uint64_t *)a3);
    sub_22F307A3C(v12);
    sub_22E903BEC(v13);
    return 0;
  }
  return 1;
}

uint64_t sub_22E8F4E00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F4E74()
{
  return 0;
}

uint64_t sub_22E8F4E7C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 298;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F4EDC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F4EF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and parameters");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F4F78(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F4FEC()
{
  return 0;
}

uint64_t sub_22E8F4FF4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F5090()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F50A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7F) == 0x18 || (v4 & 0x7Eu) - 52 < 6)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"Objective-C methods and functions");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F5130(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F51A4()
{
  return 0;
}

uint64_t sub_22E8F51AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v4 = (((*a3 >> 14) & 1) << 32) | 0xA;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F5254()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F5268(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F52E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F535C()
{
  return 0;
}

uint64_t sub_22E8F5364(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F53C4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 301;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F5424()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F5438()
{
  return 0;
}

void sub_22E8F5440()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F5454(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v8[24];

  if (a4
    && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 <= 5
    && *(_QWORD *)(a4 + 144) >= 8uLL
    && (*(_QWORD *)(a4 + 144) & 6) == 0)
  {
    return 1;
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
  v6 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v6, (uint64_t)"function templates");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F54EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F5560(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 2) & 1;
}

uint64_t sub_22E8F556C()
{
  return 0;
}

void sub_22E8F5574()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F5588(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F5608(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F567C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 104) >> 2) & 1;
}

uint64_t sub_22E8F5688()
{
  return 0;
}

uint64_t sub_22E8F5690(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F56F0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F5704(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F5784(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F57F8()
{
  return 0;
}

uint64_t sub_22E8F5800(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F5860(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 304;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F58C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F58D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v10;
  unsigned int v11[24];

  v4 = *(_DWORD *)(a4 + 28);
  v5 = v4 & 0x7E;
  if ((v5 - 52) < 6)
    return 1;
  if ((v4 & 0x7Fu) - 60 <= 6)
  {
    if (!sub_22E3CB5E0(a4))
      return 1;
    v5 = *(_DWORD *)(a4 + 28) & 0x7E;
  }
  if (v5 == 24)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v11);
  v10 = sub_22E8D2984((uint64_t)v11, (uint64_t *)a3);
  sub_22F307B20(v10);
  sub_22E903BEC(v11);
  return 0;
}

uint64_t sub_22E8F5984(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F59F8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F5A20()
{
  return 0;
}

uint64_t sub_22E8F5A28(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000015;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  v10 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v10;
  v11 = *(_DWORD *)(a2 + 12);
  v12 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v12;
  v13 = *a3;
  if (v12 >= v11)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = (((v13 >> 14) & 1) << 32) | 0xC;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F5B60()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F5B74()
{
  return 0;
}

uint64_t sub_22E8F5B7C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 306;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F5BDC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F5BF0()
{
  return 0;
}

void sub_22E8F5BF8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F5C0C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 54;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F5C8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F5D00()
{
  return 0;
}

uint64_t sub_22E8F5D08(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 8) & 1) << 32) | 5;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F5D70()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F5D84(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F5E04(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8F5E78(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

void sub_22E8F5E84()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F5E98(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F5F20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F5F94(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 235; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 235);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8F6088()
{
  return 0;
}

uint64_t sub_22E8F6090(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F613C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 310;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F619C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F61B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F6230(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F62A4(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 1) & 1;
}

uint64_t sub_22E8F62B0()
{
  return 0;
}

uint64_t sub_22E8F62B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F6318(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 311;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F6378()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F638C()
{
  return 0;
}

void sub_22E8F6394()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F63A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F6428(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F649C()
{
  return 0;
}

void sub_22E8F64A4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F64B8()
{
  return 0;
}

void sub_22E8F64C0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F64D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F655C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F65D0()
{
  return 0;
}

uint64_t sub_22E8F65D8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F6684()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F6698()
{
  return 0;
}

void sub_22E8F66A0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F66B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F6730(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F67A4()
{
  return 0;
}

uint64_t sub_22E8F67AC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F680C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F6820(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F68A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F691C()
{
  return 0;
}

uint64_t sub_22E8F6924(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F69D0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F69E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7F) == 0x18 || (v4 & 0x7Eu) - 52 < 6)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"Objective-C methods and functions");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F6A70(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F6AE4()
{
  return 0;
}

uint64_t sub_22E8F6AEC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v4 = (((*a3 >> 14) & 1) << 32) | 0xA;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F6B94()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F6BA8()
{
  return 0;
}

void sub_22E8F6BB0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F6BC4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v7;
  unsigned int v8[24];

  v5 = (*(_DWORD *)(a4 + 28) & 0x7F) - 22;
  if (v5 < 0x14 && ((0xEF803u >> v5) & 1) != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"tag types, typedefs, Objective-C interfaces, and Objective-C protocols");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8F6C54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F6CC8()
{
  return 0;
}

void sub_22E8F6CD0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F6CE4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"typedefs");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F6D64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F6DD8()
{
  return 0;
}

uint64_t sub_22E8F6DE0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000012;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F6E40(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 318;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F6EA0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F6EB4()
{
  return 0;
}

void sub_22E8F6EBC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F6ED0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F6F4C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F6FC0()
{
  return 0;
}

uint64_t sub_22E8F6FC8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F7028()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F703C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F70C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F7138()
{
  return 0;
}

uint64_t sub_22E8F7140(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F71EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F7200(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F727C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F72F0()
{
  return 0;
}

uint64_t sub_22E8F72F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F7358()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F736C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F73E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F745C()
{
  return 0;
}

uint64_t sub_22E8F7464(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F74C4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F74D8()
{
  return 0;
}

void sub_22E8F74E0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F74F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 39;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"typedefs");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F7574(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F75E8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F7610()
{
  return 0;
}

uint64_t sub_22E8F7618(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000012;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F7678()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F768C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 22)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"Objective-C interfaces");
    sub_22E903BEC(v8);
  }
  return v4 == 22;
}

uint64_t sub_22E8F7708(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F777C()
{
  return 0;
}

uint64_t sub_22E8F7784(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 14) & 1) << 32) | 9;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F77EC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 494;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F784C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F7860()
{
  return 0;
}

uint64_t sub_22E8F7868(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 324;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F78C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F78DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v11;
  unsigned int v12[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Eu) - 52 < 6)
    return 1;
  v6 = v4 & 0x7F;
  result = 1;
  v7 = v6 > 0x19;
  v8 = (1 << v6) & 0x3400000;
  if (v7 || v8 == 0)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v12);
    v11 = sub_22E8D2984((uint64_t)v12, (uint64_t *)a3);
    sub_22F307C04(v11);
    sub_22E903BEC(v12);
    return 0;
  }
  return result;
}

uint64_t sub_22E8F7978(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8F79EC(uint64_t a1, uint64_t a2)
{
  return a2 == 1;
}

uint64_t sub_22E8F79F8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = (((*a3 >> 14) & 1) << 32) | 0xA;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v8;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v10;
  v11 = (((*a3 >> 14) & 1) << 32) | 9;
  if (v10 >= v9)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v11;
  v12 = *(_DWORD *)(a2 + 12);
  v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v13;
  v14 = *a3;
  if (v13 >= v12)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = (((v14 >> 14) & 1) << 32) | 0xC;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F7B3C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F7B50()
{
  return 0;
}

void sub_22E8F7B58()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F7B6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  unsigned int v9[24];

  if (a4)
  {
    if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6)
    {
      sub_22EFBB794(a4);
      if (v6)
        return 1;
    }
  }
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"thread-local variables");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8F7BFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F7C70()
{
  return 0;
}

uint64_t sub_22E8F7C78(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000014;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F7CD8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F7CEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F7D6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F7DE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[96];
  _BYTE v34[96];
  _BYTE v35[96];
  unsigned int v36[24];
  uint64_t v37;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 328)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 328);
      v37 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v14 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v35);
      v15 = (unsigned int *)v35;
      goto LABEL_28;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 127)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_19;
      }
    }
    if (v19 != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 127);
      v37 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v23 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v34);
      v15 = (unsigned int *)v34;
      goto LABEL_28;
    }
  }
LABEL_19:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v25 = *(uint64_t **)v24;
    v26 = *(unsigned int *)(v24 + 8);
    i = *(uint64_t **)v24;
    if ((_DWORD)v26)
    {
      v28 = 8 * v26;
      for (i = *(uint64_t **)v24; *(_WORD *)(*i + 32) != 128; ++i)
      {
        v28 -= 8;
        if (!v28)
          return 1;
      }
    }
    if (i != &v25[v26])
    {
      do
      {
        v30 = *v25++;
        v29 = v30;
      }
      while (*(_WORD *)(v30 + 32) != 128);
      v37 = v29;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v31 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v31, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v33);
      v15 = (unsigned int *)v33;
LABEL_28:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8F8060()
{
  return 0;
}

uint64_t sub_22E8F8068(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F80C8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F80DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F815C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F81D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[96];
  _BYTE v34[96];
  _BYTE v35[96];
  unsigned int v36[24];
  uint64_t v37;

  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v8 = *(uint64_t **)v7;
    v9 = *(unsigned int *)(v7 + 8);
    v10 = *(uint64_t **)v7;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = *(uint64_t **)v7;
      while (*(_WORD *)(*v10 + 32) != 327)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
          goto LABEL_10;
      }
    }
    if (v10 != &v8[v9])
    {
      do
      {
        v13 = *v8++;
        v12 = v13;
      }
      while (*(_WORD *)(v13 + 32) != 327);
      v37 = v12;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v14 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v14, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v35);
      v15 = (unsigned int *)v35;
      goto LABEL_28;
    }
  }
LABEL_10:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v17 = *(uint64_t **)v16;
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(uint64_t **)v16;
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v19 = *(uint64_t **)v16;
      while (*(_WORD *)(*v19 + 32) != 127)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
          goto LABEL_19;
      }
    }
    if (v19 != &v17[v18])
    {
      do
      {
        v22 = *v17++;
        v21 = v22;
      }
      while (*(_WORD *)(v22 + 32) != 127);
      v37 = v21;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v23 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v23, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v34);
      v15 = (unsigned int *)v34;
      goto LABEL_28;
    }
  }
LABEL_19:
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v25 = *(uint64_t **)v24;
    v26 = *(unsigned int *)(v24 + 8);
    i = *(uint64_t **)v24;
    if ((_DWORD)v26)
    {
      v28 = 8 * v26;
      for (i = *(uint64_t **)v24; *(_WORD *)(*i + 32) != 128; ++i)
      {
        v28 -= 8;
        if (!v28)
          return 1;
      }
    }
    if (i != &v25[v26])
    {
      do
      {
        v30 = *v25++;
        v29 = v30;
      }
      while (*(_WORD *)(v30 + 32) != 128);
      v37 = v29;
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v36);
      v31 = sub_22E8D2984((uint64_t)v36, (uint64_t *)a3);
      sub_22E8FB3C4(v31, &v37);
      sub_22E903BEC(v36);
      sub_22E8FCA40(a2, *(_DWORD *)(v37 + 16), 0x1574u, 0, (uint64_t)v33);
      v15 = (unsigned int *)v33;
LABEL_28:
      sub_22E903BEC(v15);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E8F8450()
{
  return 0;
}

uint64_t sub_22E8F8458(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F84B8()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F84CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 54;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F854C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F85C0()
{
  return 0;
}

uint64_t sub_22E8F85C8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *a3;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = (((v4 >> 8) & 1) << 32) | 5;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F8630()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8644()
{
  return 0;
}

void sub_22E8F864C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F8660(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 60;
  if (v4 >= 7)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"variables");
    sub_22E903BEC(v8);
  }
  return v4 < 7;
}

uint64_t sub_22E8F86E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F8754(uint64_t a1, unsigned __int8 *a2)
{
  return (*a2 >> 5) & 1;
}

uint64_t sub_22E8F8760()
{
  return 0;
}

void sub_22E8F8768()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F877C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F8804(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F8878(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15[24];
  unsigned int v16[24];
  uint64_t v17;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 1;
  sub_22EFC8E88(a4);
  v7 = *(uint64_t **)v6;
  v8 = *(unsigned int *)(v6 + 8);
  i = *(uint64_t **)v6;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    for (i = *(uint64_t **)v6; *(_WORD *)(*i + 32) != 240; ++i)
    {
      v10 -= 8;
      if (!v10)
        return 1;
    }
  }
  if (i == &v7[v8])
    return 1;
  do
  {
    v12 = *v7++;
    v11 = v12;
  }
  while (*(_WORD *)(v12 + 32) != 240);
  v17 = v11;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB34u, 0, (uint64_t)v16);
  v13 = sub_22E8D2984((uint64_t)v16, (uint64_t *)a3);
  sub_22E8FB3C4(v13, &v17);
  sub_22E903BEC(v16);
  sub_22E8FCA40(a2, *(_DWORD *)(v17 + 16), 0x1574u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  return 0;
}

uint64_t sub_22E8F896C()
{
  return 0;
}

uint64_t sub_22E8F8974(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F8A20(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 330;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F8A80()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F8A94(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 1) & 1) == 0;
}

uint64_t sub_22E8F8AA4()
{
  return 0;
}

void sub_22E8F8AAC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F8AC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F8B40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F8BB4(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 1) & 1;
}

uint64_t sub_22E8F8BC0()
{
  return 0;
}

uint64_t sub_22E8F8BC8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F8C28(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 332;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F8C88()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F8C9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F8D1C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F8D90(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

BOOL sub_22E8F8DB8(uint64_t a1, unint64_t a2)
{
  return a2 < 2;
}

void sub_22E8F8DC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8DD8()
{
  return 0;
}

void sub_22E8F8DE0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8DF4()
{
  return 0;
}

void sub_22E8F8DFC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8E10()
{
  return 0;
}

void sub_22E8F8E18()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8E2C()
{
  return 0;
}

void sub_22E8F8E34()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8E48()
{
  return 0;
}

void sub_22E8F8E50()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8E64()
{
  return 0;
}

void sub_22E8F8E6C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F8E80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F8F00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F8F74()
{
  return 0;
}

uint64_t sub_22E8F8F7C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F8FDC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F8FF0()
{
  return 0;
}

void sub_22E8F8FF8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F900C()
{
  return 0;
}

void sub_22E8F9014()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F9028(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9[24];

  if (a4 && (*(_DWORD *)(a4 + 28) & 0x7Fu) - 60 <= 6 && sub_22E3CB5E0(a4) && (*(_DWORD *)(a4 + 28) & 0x7F) != 0x40)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"local variables");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8F90D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F9148()
{
  return 0;
}

uint64_t sub_22E8F9150(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000016;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F91B0()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F91C4()
{
  return 0;
}

void sub_22E8F91CC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F91E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v8;
  unsigned int v9[24];

  if ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 33 < 0xA)
    return 1;
  v6 = (*(_DWORD *)(a4 + 28) & 0x7F) - 15;
  if (v6 < 0x35 && ((0x1FE01C00040201uLL >> v6) & 1) != 0)
    return 1;
  if (sub_22EFCB008(a4, 0))
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F307CE8(v8);
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8F928C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F9300(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8F9328()
{
  return 0;
}

void sub_22E8F9330()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F9344(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28) & 0x7F;
  if (v4 != 64)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"parameters");
    sub_22E903BEC(v8);
  }
  return v4 == 64;
}

uint64_t sub_22E8F93C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F9434()
{
  return 0;
}

uint64_t sub_22E8F943C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000017;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F949C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F94B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  unsigned int v9;
  uint64_t v12;
  unsigned int v13[24];

  v6 = *(_DWORD *)(a4 + 28);
  v7 = v6 & 0x7F;
  if (a4 && (v7 - 60) <= 6)
  {
    if (!sub_22E3CB5E0(a4))
      return 1;
    v6 = *(_DWORD *)(a4 + 28);
    v7 = v6 & 0x7F;
  }
  v9 = (v6 & 0x7E) - 52;
  if (v7 != 24 && v9 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v13);
    v12 = sub_22E8D2984((uint64_t)v13, (uint64_t *)a3);
    sub_22F307A3C(v12);
    sub_22E903BEC(v13);
    return 0;
  }
  return 1;
}

uint64_t sub_22E8F9560(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F95D4()
{
  return 0;
}

uint64_t sub_22E8F95DC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 340;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F963C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F9650(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v10;
  unsigned int v11[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 13;
  v5 = v4 > 0x3D;
  v6 = (1 << v4) & 0x2000000020000001;
  if (!v5 && v6 != 0)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v11);
  v10 = sub_22E8D2984((uint64_t)v11, (uint64_t *)a3);
  sub_22F2F30F4(v10, (uint64_t)"named declarations, types, and value declarations");
  sub_22E903BEC(v11);
  return 0;
}

uint64_t sub_22E8F96E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F975C()
{
  return 0;
}

void sub_22E8F9764()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F9778(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x21 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 34 >= 4;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"structs, unions, classes, and enums");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8F9800(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8F9874(uint64_t a1, _BYTE *a2)
{
  return (*a2 & 0xA0) != 0;
}

uint64_t sub_22E8F9888()
{
  return 0;
}

void sub_22E8F9890()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F98A4()
{
  return 0;
}

void sub_22E8F98AC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F98C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F9940(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F99B4()
{
  return 0;
}

uint64_t sub_22E8F99BC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F9A1C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F9A30(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) - 35;
  if (v4 >= 3)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"classes");
    sub_22E903BEC(v8);
  }
  return v4 < 3;
}

uint64_t sub_22E8F9AB0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F9B24()
{
  return 0;
}

uint64_t sub_22E8F9B2C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F9B8C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F9BA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8F9C20(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F9C94()
{
  return 0;
}

uint64_t sub_22E8F9C9C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8F9CFC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F9D10()
{
  return 0;
}

void sub_22E8F9D18()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F9D2C(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

void sub_22E8F9D38()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F9D4C()
{
  return 0;
}

void sub_22E8F9D54()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8F9D68(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 34;
  if (v4 >= 4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"structs, unions, and classes");
    sub_22E903BEC(v8);
  }
  return v4 < 4;
}

uint64_t sub_22E8F9DE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8F9E5C()
{
  return 0;
}

uint64_t sub_22E8F9E64(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8F9EC4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 347;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8F9F24()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8F9F38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t result;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  result = 1;
  if ((v4 & 0x7F) != 0x18 && (v4 & 0x7F) != 0x21 && (v4 & 0x7Eu) - 34 >= 4)
  {
    if (sub_22EFCB008(a4, 0))
    {
      return 1;
    }
    else
    {
      sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
      v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
      sub_22F307DCC(v8);
      sub_22E903BEC(v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_22E8F9FD8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FA04C(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8FA074()
{
  return 0;
}

uint64_t sub_22E8FA07C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v4 = (((*a3 >> 14) & 1) << 32) | 0xA;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x100000001;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v9 >= v8)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0x10000000ELL;
  v10 = *(_DWORD *)(a2 + 12);
  v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  if (v11 >= v10)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = 0x100000011;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FA19C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FA1B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  unsigned int v9[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Fu) - 60 < 7)
    return 1;
  if ((v4 & 0x7Eu) - 52 < 6 || (v4 & 0x7Fu) - 35 < 3)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
  v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
  sub_22F2F30F4(v8, (uint64_t)"variables, functions, and classes");
  sub_22E903BEC(v9);
  return 0;
}

uint64_t sub_22E8FA248(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FA2BC()
{
  return 0;
}

uint64_t sub_22E8FA2C4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0x10000000ELL;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8FA39C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 349;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8FA3FC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FA410()
{
  return 0;
}

void sub_22E8FA418()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FA42C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = *(_DWORD *)(a4 + 28);
  if ((v4 & 0x7Fu) - 60 < 7 || (v4 & 0x7Eu) - 52 < 6)
    return 1;
  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
  v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
  sub_22F2F30F4(v7, (uint64_t)"variables and functions");
  sub_22E903BEC(v8);
  return 0;
}

uint64_t sub_22E8FA4BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FA530()
{
  return 0;
}

uint64_t sub_22E8FA538(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000013;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FA5D4()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8FA5E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8FA668(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8FA6DC(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) - 63) < 2;
}

uint64_t sub_22E8FA6F0()
{
  return 0;
}

uint64_t sub_22E8FA6F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FA758()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8FA76C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8FA7EC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8FA860(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) - 63) < 2;
}

uint64_t sub_22E8FA874()
{
  return 0;
}

uint64_t sub_22E8FA87C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FA8DC()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8FA8F0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8FA970(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

BOOL sub_22E8FA9E4(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) - 63) < 2;
}

uint64_t sub_22E8FA9F8()
{
  return 0;
}

uint64_t sub_22E8FAA00(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FAA60()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8FAA74(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8FAAF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FAB68()
{
  return 0;
}

uint64_t sub_22E8FAB70(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FABD0()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8FABE4(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 56) - 41) < 2;
}

uint64_t sub_22E8FABF8()
{
  return 0;
}

void sub_22E8FAC00()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FAC14(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8FAC9C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FAD10(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 30);
  if ((~(v2 << 16) & 0x780000) != 0)
    return ((*(unsigned __int16 *)(a2 + 28) | (v2 << 16)) >> 19) & 0xF;
  else
    return sub_22F1BFAD0(a2);
}

uint64_t sub_22E8FAD38()
{
  return 0;
}

uint64_t sub_22E8FAD40(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22E8FADEC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a2 + 88) + 2032, 40, 3);
  v7 = a4[1];
  *(_OWORD *)v6 = *a4;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = *(_BYTE *)(v6 + 34);
  *(_WORD *)(v6 + 32) = 357;
  *(_BYTE *)(v6 + 34) = v8 & 0xE0;
  sub_22EFCA95C(a3, v6);
  return 1;
}

void sub_22E8FAE4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FAE60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7F) != 0x18 && (*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6;
  v5 = !v4;
  if (v4)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0x1892u, 0, (uint64_t)v9);
    v8 = sub_22E8D2984((uint64_t)v9, (uint64_t *)a3);
    sub_22F2F30F4(v8, (uint64_t)"functions and Objective-C methods");
    sub_22E903BEC(v9);
  }
  return v5;
}

uint64_t sub_22E8FAEE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FAF5C()
{
  return 0;
}

uint64_t sub_22E8FAF64(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = 0x100000004;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  v8 = *a3;
  if (v7 >= v6)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = (((v8 >> 14) & 1) << 32) | 0xA;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_22E8FB010()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FB024()
{
  return 0;
}

void sub_22E8FB02C()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22E8FB040(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v7;
  unsigned int v8[24];

  v4 = (*(_DWORD *)(a4 + 28) & 0x7E) - 52;
  if (v4 >= 6)
  {
    sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xB30u, 0, (uint64_t)v8);
    v7 = sub_22E8D2984((uint64_t)v8, (uint64_t *)a3);
    sub_22F2F30F4(v7, (uint64_t)"functions");
    sub_22E903BEC(v8);
  }
  return v4 < 6;
}

uint64_t sub_22E8FB0C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10[24];

  sub_22E8FCA40(a2, *(_DWORD *)(a3 + 16), 0xC4Fu, 0, (uint64_t)v10);
  v6 = sub_22E8D2984((uint64_t)v10, (uint64_t *)a3);
  sub_22F0D5A50(a4);
  v9 = v7;
  sub_22F2F2168(v6, &v9);
  sub_22E903BEC(v10);
  return 0;
}

uint64_t sub_22E8FB134()
{
  return 0;
}

uint64_t sub_22E8FB13C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = 0x100000004;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

char **sub_22E8FB19C(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char **v8;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 80 * v2;
    do
    {
      v4 = *(char **)&v1[v3 - 80];
      if (&v1[v3 - 64] != v4)
      {
        v7 = result;
        v5 = v3;
        v6 = v1;
        free(v4);
        v3 = v5;
        v1 = v6;
        result = v7;
      }
      v3 -= 80;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v8 = result;
    free(v1);
    return v8;
  }
  return result;
}

uint64_t sub_22E8FB224(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v6 = 5 * v2;
      v7 = (void **)(*(_QWORD *)result + 16 * v6 - 80);
      v8 = 80 * a2 - 16 * v6;
      v9 = a2;
      v11 = result;
      do
      {
        if (v7 + 2 != *v7)
          free(*v7);
        v7 -= 10;
        v8 += 80;
        LODWORD(a2) = v9;
        result = v11;
      }
      while (v8);
    }
    else
    {
      if (*(unsigned int *)(result + 12) < a2)
      {
        v10 = a2;
        v12 = result;
        sub_22F24C658(result);
        a2 = v10;
        result = v12;
        v2 = *(unsigned int *)(v12 + 8);
      }
      if (v2 != a2)
      {
        v3 = 5 * v2;
        v4 = 80 * a2 - 80 * v2;
        v5 = *(_QWORD *)result + 16 * v3 + 16;
        do
        {
          *(_QWORD *)(v5 - 16) = v5;
          *(_QWORD *)(v5 - 8) = 0x800000000;
          v5 += 80;
          v4 -= 80;
        }
        while (v4);
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

BOOL sub_22E8FB300(uint64_t a1)
{
  _BOOL8 result;
  int v3;

  result = 0;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 60 <= 6)
  {
    if (sub_22E3CB5E0(a1))
    {
      return 0;
    }
    else
    {
      sub_22EFBB794(a1);
      return v3 == 0;
    }
  }
  return result;
}

BOOL sub_22E8FB35C(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  if (!sub_22EFCB008(a1, 1))
    return (*(_DWORD *)(a1 + 28) & 0x7F) == 0x18 || (*(_DWORD *)(a1 + 28) & 0x7F) == 1;
  v2 = 1;
  if (*(_BYTE *)(sub_22EFCB008(a1, 1) + 16) != 26)
    return (*(_DWORD *)(a1 + 28) & 0x7F) == 0x18 || (*(_DWORD *)(a1 + 28) & 0x7F) == 1;
  return v2;
}

uint64_t sub_22E8FB3C4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E8FB464((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22E8FB464((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

unsigned __int8 **sub_22E8FB464(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  if (!v4)
  {
    v4 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
    *a1 = v4;
  }
  v4[*v4 + 1] = 15;
  v5 = *a1;
  v6 = **a1;
  *v5 = v6 + 1;
  *(_QWORD *)&v5[8 * v6 + 16] = v3;
  return a1;
}

uint64_t sub_22E8FB4C4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 60 <= 6)
  {
    if (!sub_22E3CB5E0(a1)
      && (v3 = *(_QWORD *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8), (v3 & 8) != 0)
      && (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
    {
      if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
      {
        v4 = *(_QWORD *)(a1 + 16);
        v5 = v4 & 0xFFFFFFFFFFFFFFF8;
        if ((v4 & 4) != 0)
          v5 = *(_QWORD *)v5;
        for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
        {
          v7 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v7 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_20;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_19;
            if (i == 16)
              goto LABEL_13;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_26;
            if (i == 24)
            {
LABEL_13:
              v7 = -48;
            }
            else
            {
LABEL_19:
              if (i != 70)
              {
LABEL_20:
                v8 = i - 52;
                if ((i - 33) >= 5)
                  v9 = -48;
                else
                  v9 = -64;
                if (v8 >= 6)
                  v7 = v9;
                else
                  v7 = -72;
                goto LABEL_26;
              }
              v7 = -64;
            }
          }
LABEL_26:
          v10 = *(_QWORD *)(v5 + v7 + 16);
          v5 = v10 & 0xFFFFFFFFFFFFFFF8;
          if ((v10 & 4) != 0)
            v5 = *(_QWORD *)v5;
        }
        a1 = v5 - 40;
      }
      return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 125) >> 3) & 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22E8FB644(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 60 <= 6)
  {
    if (sub_22E3CB5E0(a1))
      return 0;
    v3 = *(_QWORD *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v3 & 8) != 0 && (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
      return 0;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_21;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_20;
          if (i == 16)
            goto LABEL_14;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_27;
          if (i == 24)
          {
LABEL_14:
            v7 = -48;
          }
          else
          {
LABEL_20:
            if (i != 70)
            {
LABEL_21:
              v8 = i - 52;
              if ((i - 33) >= 5)
                v9 = -48;
              else
                v9 = -64;
              if (v8 >= 6)
                v7 = v9;
              else
                v7 = -72;
              goto LABEL_27;
            }
            v7 = -64;
          }
        }
LABEL_27:
        v10 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      a1 = v5 - 40;
    }
    return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 125) >> 2) & 1;
  }
  return result;
}

uint64_t sub_22E8FB7BC(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) - 27 > 0xFFFFFFFD;
  else
    v2 = 0;
  if (!v2)
    v1 = sub_22F10CF48(v1);
  return sub_22E47E20C(v1) & 1;
}

uint64_t sub_22E8FB7FC(uint64_t result, uint64_t a2, int a3)
{
  unsigned __int16 v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;

  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  if (!a2 || (a3 & 1) != 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    if (!a2)
    {
      v3 = 0;
      v4 = 0;
      *(_WORD *)(result + 20) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 12) = 0x100010000;
      v5 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_WORD *)(result + 12) = *(_WORD *)(a2 + 12) + 1;
  v3 = *(_WORD *)(a2 + 18);
  *(_DWORD *)(result + 18) = v3;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v4;
  if (v4)
    v5 = *(_WORD *)(v4 + 14);
  else
    v5 = 1;
  *(_WORD *)(result + 16) = v5;
  if ((a3 & 0xDE1) != 0)
  {
LABEL_12:
    LOBYTE(v6) = a3;
    if ((a3 & 1) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v6 = *(_DWORD *)(a2 + 8) & 0x20000 | a3;
  *(_DWORD *)(result + 8) = v6;
  if ((a3 & 1) != 0)
LABEL_13:
    *(_QWORD *)(result + 24) = result;
LABEL_14:
  if ((v6 & 0x21) != 0)
  {
    v5 = 1;
    if (v4)
      v7 = *(_WORD *)(v4 + 14);
    else
      v7 = 1;
    *(_WORD *)(result + 14) = v7;
    *(_QWORD *)(result + 32) = result;
    v4 = result;
    *(_WORD *)(result + 16) = 1;
  }
  if ((a3 & 2) != 0)
  {
    *(_QWORD *)(result + 40) = result;
    if ((a3 & 4) == 0)
    {
LABEL_21:
      if ((a3 & 0x40) == 0)
        goto LABEL_22;
      goto LABEL_32;
    }
  }
  else if ((a3 & 4) == 0)
  {
    goto LABEL_21;
  }
  *(_QWORD *)(result + 48) = result;
  if ((a3 & 0x40) == 0)
  {
LABEL_22:
    if ((a3 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_33;
  }
LABEL_32:
  *(_QWORD *)(result + 56) = result;
  if ((a3 & 0x80) == 0)
  {
LABEL_23:
    if ((a3 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_33:
  *(_QWORD *)(result + 64) = result;
  if ((a3 & 0x100) != 0)
LABEL_24:
    *(_WORD *)(result + 18) = v3 + 1;
LABEL_25:
  if ((a3 & 0x108) != 8)
    return result;
  if ((a3 & 0x20) == 0)
  {
    if ((a3 & 0x40000) != 0 || !v4)
      return result;
LABEL_39:
    ++*(_WORD *)(v4 + 14);
    *(_WORD *)(result + 16) = v5 + 1;
    return result;
  }
  v8 = *(_DWORD *)(a2 + 8);
  if ((v8 & 0x20) == 0 && v4 && (a3 & 0x40000) == 0 && v8 != 8)
    goto LABEL_39;
  return result;
}

double sub_22E8FB978(uint64_t a1, uint64_t a2, int a3)
{
  void *v4;
  double result;
  uint64_t v6;

  sub_22E8FB7FC(a1, a2, a3);
  v4 = *(void **)(a1 + 80);
  if (v4 != *(void **)(a1 + 72))
  {
    v6 = *(unsigned int *)(a1 + 88);
    if (v6 >= 0x21 && 4 * (*(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 96)) < v6)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 72));
      goto LABEL_3;
    }
    memset(v4, 255, 8 * v6);
  }
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
LABEL_3:
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  result = *(double *)(*(_QWORD *)(a1 + 400) + 172);
  *(double *)(a1 + 408) = result;
  *(_QWORD *)(a1 + 416) = 0;
  return result;
}

void **sub_22E8FB9FC(void **result)
{
  void **v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = result;
  v2 = (unint64_t)result[52];
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    result = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(result + 9), (void *)(v2 & 0xFFFFFFFFFFFFFFF8));
    v8 = (char *)v1[10];
    v9 = 88;
    if (v8 == v1[9])
      v9 = 92;
    if (result != (void **)&v8[8 * *(unsigned int *)((char *)v1 + v9)])
      *(_DWORD *)(v3 + 96) |= 0x400u;
  }
  if (v1[45])
    return result;
  v4 = (unint64_t)v1[52];
  if ((v4 & 4) != 0)
  {
    v6 = *v1;
    v7 = *((_QWORD *)*v1 + 52);
    goto LABEL_7;
  }
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = *v1;
    v7 = *((_QWORD *)*v1 + 52);
    if ((v7 & 4) == 0)
    {
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        v6[52] = v7 | v5;
        return result;
      }
      if ((v7 & 0xFFFFFFFFFFFFFFF8) != v5)
LABEL_7:
        v6[52] = v7 & 3 | 4;
    }
  }
  return result;
}

void *sub_22E8FBAC0(uint64_t a1)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v27;

  v4 = *(_DWORD *)(a1 + 184);
  v2 = (_DWORD *)(a1 + 184);
  v3 = v4;
  v5 = *(v2 - 44) & 0xFFFE0047;
  *(v2 - 39) = 0;
  *((_QWORD *)v2 - 21) = 0;
  *((_QWORD *)v2 - 22) = v5;
  *((_QWORD *)v2 - 1) = 0;
  if (v4 > 1 || *(_DWORD *)(a1 + 188))
  {
    if ((v3 & 1) != 0)
    {
      v19 = (_QWORD *)(a1 + 192);
      v20 = (_QWORD *)(a1 + 256);
    }
    else
    {
      v15 = *(unsigned int *)(a1 + 200);
      if (((2 * v3) & 0xFFFFFFFC) < v15 && v15 >= 0x41)
      {
        sub_22E8FC32C((uint64_t)v2);
        goto LABEL_3;
      }
      if (!(_DWORD)v15)
      {
        v21 = 0;
LABEL_37:
        *(_DWORD *)(a1 + 184) = v21;
        *(_DWORD *)(a1 + 188) = 0;
        goto LABEL_3;
      }
      v19 = *(_QWORD **)(a1 + 192);
      v20 = &v19[2 * v15];
    }
    do
    {
      *v19 = -4096;
      v19 += 2;
    }
    while (v19 != v20);
    v21 = *v2 & 1;
    goto LABEL_37;
  }
LABEL_3:
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 8) |= 0x20000u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 172);
  v6 = *(unsigned int *)(a1 + 440);
  if ((_DWORD)v6)
  {
    v13 = 40 * v6;
    v14 = *(_QWORD *)(a1 + 432) - 40;
    do
    {
      sub_22E8BB7E0((unint64_t *)(v14 + v13));
      v13 -= 40;
    }
    while (v13);
  }
  *(_DWORD *)(a1 + 440) = 0;
  v7 = *(_DWORD *)(a1 + 704);
  if (v7 > 1 || *(_DWORD *)(a1 + 708))
  {
    if ((v7 & 1) != 0)
    {
      v22 = (_QWORD *)(a1 + 712);
      v23 = (_QWORD *)(a1 + 1224);
    }
    else
    {
      v16 = (2 * v7) & 0xFFFFFFFC;
      v17 = *(unsigned int *)(a1 + 720);
      if (v16 < v17 && v17 >= 0x41)
      {
        sub_22E8FC444(a1 + 704);
        goto LABEL_6;
      }
      if (!(_DWORD)v17)
        goto LABEL_52;
      v22 = *(_QWORD **)(a1 + 712);
      v23 = &v22[8 * v17];
    }
    do
    {
      v24 = v22[1];
      if (*v22)
        v25 = 0;
      else
        v25 = v24 == 0;
      if (!v25)
      {
        if (*v22 != 4 || v24 != 0)
        {
          v27 = (_QWORD *)v22[2];
          if (v22 + 4 != v27)
            free(v27);
        }
        *v22 = 0;
        v22[1] = 0;
      }
      v22 += 8;
    }
    while (v22 != v23);
    LODWORD(v17) = *(_DWORD *)(a1 + 704) & 1;
LABEL_52:
    *(_DWORD *)(a1 + 704) = v17;
    *(_DWORD *)(a1 + 708) = 0;
  }
LABEL_6:
  v8 = *(void **)(a1 + 616);
  if (v8 == *(void **)(a1 + 608))
  {
LABEL_7:
    *(_QWORD *)(a1 + 628) = 0;
    goto LABEL_8;
  }
  v11 = *(unsigned int *)(a1 + 624);
  if (v11 < 0x21 || 4 * (*(_DWORD *)(a1 + 628) - *(_DWORD *)(a1 + 632)) >= v11)
  {
    memset(v8, 255, 8 * v11);
    goto LABEL_7;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 608));
LABEL_8:
  result = *(void **)(a1 + 392);
  if (result == *(void **)(a1 + 384))
  {
LABEL_9:
    *(_QWORD *)(a1 + 404) = 0;
    goto LABEL_10;
  }
  v12 = *(unsigned int *)(a1 + 400);
  if (v12 < 0x21 || 4 * (*(_DWORD *)(a1 + 404) - *(_DWORD *)(a1 + 408)) >= v12)
  {
    result = memset(result, 255, 8 * v12);
    goto LABEL_9;
  }
  result = (void *)llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 384));
LABEL_10:
  v10 = *(_QWORD *)(a1 + 424);
  if ((v10 & 4) != 0)
  {
    v18 = v10 & 0xFFFFFFFFFFFFFFF8;
    if (v18)
      *(_DWORD *)(v18 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 424) = 0;
  }
  return result;
}

unint64_t sub_22E8FBD50(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = sub_22EFFBBCC(a1);
  v2 = 0;
  v3 = *v1;
  if (v3 > 0xC6)
  {
    if (v3 == 199)
    {
      v2 = *((_QWORD *)v1 + 2) & 0xFFFFFFFFFFFFFFFBLL;
      if (sub_22F00175C(*((unsigned __int8 **)v1 + 3)))
      {
LABEL_17:
        v4 = 4;
        return v4 | v2;
      }
    }
    else
    {
      v4 = 0;
      if (v3 != 217)
        return v4 | v2;
      v5 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      if (*v5 == 205)
      {
        v2 = *((_QWORD *)v5 + 2) & 0xFFFFFFFFFFFFFFF8;
        v6 = *((_QWORD *)v5 + 5);
        if ((v6 & 6) != 0)
          goto LABEL_19;
        v7 = v6 & 0xFFFFFFFFFFFFFFF8;
        if (*(unsigned __int8 *)(v6 & 0xFFFFFFFFFFFFFFF8) == 210)
          v7 = *(_QWORD *)(v7 + 16);
        if (!sub_22F00175C((unsigned __int8 *)v7))
          goto LABEL_19;
        goto LABEL_17;
      }
      v2 = 0;
    }
LABEL_19:
    v4 = 0;
    return v4 | v2;
  }
  if (v3 == 161)
  {
    v8 = *((_QWORD *)v1 + 2);
    v2 = v8 & 0xFFFFFFFFFFFFFFFBLL;
    if ((*(_DWORD *)(v8 + 28) & 0x7Fu) - 60 > 6)
      goto LABEL_19;
    goto LABEL_17;
  }
  v4 = 0;
  if (v3 == 188)
  {
    v2 = *((_QWORD *)v1 + 3) & 0xFFFFFFFFFFFFFFFBLL;
    if (*sub_22EFFA6B0(*((unsigned __int8 **)v1 + 2)) != 133)
      goto LABEL_19;
    goto LABEL_17;
  }
  return v4 | v2;
}

unint64_t *sub_22E8FBE48(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  *a1 = 4;
  a1[1] = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 6) == 4)
  {
    v4 = a3 & 0xFFFFFFFFFFFFFFF8 | 4;
    goto LABEL_5;
  }
  if ((a3 & 6) == 0)
  {
    v4 = sub_22E8FBD50(*(unsigned __int8 **)((a3 & 0xFFFFFFFFFFFFFFF8) + 16));
LABEL_5:
    *a1 = v4;
  }
  return a1;
}

unsigned __int8 *sub_22E8FBEA0(uint64_t a1, unint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  unsigned __int8 *result;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v3 = (_BYTE *)(a1 + 704);
  v4 = a1 + 712;
  while (1)
  {
    while (1)
    {
      result = sub_22EFFBBCC((unsigned __int8 *)a2);
      v6 = (unint64_t)result;
      v7 = *result;
      if (v7 == 102)
      {
        sub_22E8FBEA0(a1, *((_QWORD *)result + 3));
        v8 = (unint64_t *)(v6 + 48);
        goto LABEL_8;
      }
      if (v7 != 103)
        break;
      sub_22E8FBEA0(a1, *((_QWORD *)result + 4));
      v8 = (unint64_t *)(v6 + 40);
LABEL_8:
      a2 = *v8;
    }
    if (v7 == 217)
    {
      v8 = (unint64_t *)(result + 16);
      goto LABEL_8;
    }
    if ((*v3 & 1) != 0)
    {
      v9 = v4;
      v10 = 8;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 712);
      v10 = *(unsigned int *)(a1 + 720);
    }
    if (v7 != 205)
      break;
    v11 = *((_QWORD *)result + 5);
    if ((v11 & 6) != 0)
      return result;
    a2 = v11 & 0xFFFFFFFFFFFFFFF8;
    if (*(unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFF8) == 210)
    {
      v22 = *((_QWORD *)result + 2) & 0xFFFFFFFFFFFFFFF8;
      v12 = *(unsigned __int8 **)(a2 + 16);
      goto LABEL_16;
    }
  }
  if (v7 == 161)
  {
    v14 = *((_QWORD *)result + 2);
    if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 60 > 6)
    {
      v15 = (unsigned __int8 *)(v9 + (v10 << 6));
      goto LABEL_32;
    }
    v21 = 4;
LABEL_30:
    v22 = v14;
LABEL_31:
    result = (unsigned __int8 *)sub_22F30851C((uint64_t)v3, &v21);
    v15 = result;
    goto LABEL_32;
  }
  if (v7 != 200)
  {
    if (v7 != 199)
      return result;
    v13 = sub_22E8FBD50(*((unsigned __int8 **)result + 3));
    v14 = *(_QWORD *)(v6 + 16);
    v21 = v13;
    goto LABEL_30;
  }
  v15 = (unsigned __int8 *)(v9 + (v10 << 6));
  if ((result[27] & 1) != 0)
  {
    result = (unsigned __int8 *)*((_QWORD *)result + 2);
    if (result)
    {
      result = (unsigned __int8 *)sub_22EFDCBF0((unint64_t)result, 1);
      if (result)
      {
        if (*(unsigned __int8 *)(v6 + 26) << 16 == 0x10000)
        {
          v16 = *(unsigned __int8 **)(v6 + 40);
          v21 = 4;
          v22 = (unint64_t)result;
          if (v16)
          {
            v12 = v16;
LABEL_16:
            v21 = sub_22E8FBD50(v12);
          }
        }
        else
        {
          v21 = 4;
          v22 = (unint64_t)result;
        }
        goto LABEL_31;
      }
    }
  }
LABEL_32:
  if ((*v3 & 1) != 0)
  {
    v17 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 712);
    v17 = *(unsigned int *)(a1 + 720);
  }
  if (v15 != (unsigned __int8 *)(v4 + (v17 << 6)))
  {
    v18 = *((_QWORD *)v15 + 2);
    v19 = 8 * *((unsigned int *)v15 + 6);
    while (v19)
    {
      v20 = *(_QWORD *)(v18 + v19 - 8);
      v19 -= 8;
      if (v20 == (v6 | 2))
      {
        *(_QWORD *)(v18 + v19) = v6 & 0xFFFFFFFFFFFFFFFDLL;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_22E8FC0A4(uint64_t result, uint64_t (*a2)(uint64_t, _QWORD, unsigned __int8 *), uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(result + 1600);
  if ((_DWORD)v3)
  {
    v6 = *(unsigned __int8 ***)(result + 1592);
    v7 = &v6[v3];
    do
    {
      v8 = *v6;
      v9 = **v6;
      if (v9 == 188)
      {
        v10 = (unsigned int *)(v8 + 24);
      }
      else
      {
        if (v9 != 161)
        {
          v12 = *((unsigned int *)v8 + 7);
          if ((_DWORD)v12)
          {
            v13 = 0;
            v14 = 8 * v12;
            do
            {
              result = a2(a3, *(_QWORD *)&v8[v13 + 32], v8);
              v13 += 8;
            }
            while (v14 != v13);
          }
          goto LABEL_13;
        }
        v10 = (unsigned int *)(v8 + 16);
        v11 = *(unsigned int *)v8;
        if ((v11 & 0x100000) != 0)
          v10 = (unsigned int *)&v8[16 * ((v11 >> 18) & 1) + 32];
      }
      result = a2(a3, *(_QWORD *)v10, *v6);
LABEL_13:
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_22E8FC178(uint64_t a1)
{
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  char *v14;
  void **v15;

  *(_QWORD *)a1 = &off_24FAB6968;
  sub_22E8BB87C(a1 + 704);
  if ((*(_BYTE *)(a1 + 704) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 712), (void *)((unint64_t)*(unsigned int *)(a1 + 720) << 6));
  v2 = *(void **)(a1 + 616);
  if (v2 != *(void **)(a1 + 608))
    free(v2);
  v3 = *(char **)(a1 + 432);
  v4 = *(unsigned int *)(a1 + 440);
  if ((_DWORD)v4)
  {
    v13 = 40 * v4;
    v14 = v3 - 40;
    do
    {
      sub_22E8BB7E0((unint64_t *)&v14[v13]);
      v13 -= 40;
    }
    while (v13);
    v3 = *(char **)(a1 + 432);
  }
  if (v3 != (char *)(a1 + 448))
    free(v3);
  v5 = *(_QWORD *)(a1 + 424);
  if ((v5 & 4) != 0)
  {
    v6 = (void **)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (v6)
    {
      v15 = v6;
      if (*v6 != v6 + 2)
        free(*v6);
      MEMORY[0x2348A0E9C](v15, 0x1080C40ED926357);
    }
  }
  v7 = *(void **)(a1 + 392);
  if (v7 != *(void **)(a1 + 384))
    free(v7);
  v8 = *(void **)(a1 + 352);
  if (v8 != (void *)(a1 + 376))
    free(v8);
  v9 = *(void **)(a1 + 256);
  if (v9 != (void *)(a1 + 272))
    free(v9);
  if ((*(_BYTE *)(a1 + 184) & 1) == 0)
    llvm::deallocate_buffer(*(llvm **)(a1 + 192), (void *)(16 * *(unsigned int *)(a1 + 200)));
  v10 = *(void **)(a1 + 128);
  if (v10 != (void *)(a1 + 144))
    free(v10);
  v11 = *(void **)(a1 + 48);
  if (v11 != (void *)(a1 + 64))
    free(v11);
  return a1;
}

void sub_22E8FC308(uint64_t a1)
{
  sub_22E8FC178(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E8FC32C(uint64_t result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;

  v1 = (_QWORD *)result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = (_QWORD *)(result + 8);
    *(_QWORD *)result = 1;
    v7 = (_QWORD *)(result + 72);
    do
    {
LABEL_10:
      *v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    v8 = *(unsigned int *)(result + 16);
    if ((_DWORD)v5 == (_DWORD)v8)
    {
      *(_QWORD *)result = 0;
      if (!(_DWORD)v5)
        return result;
      v6 = *(_QWORD **)(result + 8);
      v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    llvm::deallocate_buffer(*(llvm **)(result + 8), (void *)(16 * v8));
  }
  if (v5 <= 4)
  {
    *v1 = 1;
LABEL_19:
    result = (uint64_t)(v1 + 1);
    v9 = v1 + 9;
    goto LABEL_20;
  }
  *(_DWORD *)v1 &= ~1u;
  result = MEMORY[0x23489D23C](16 * v5, 8);
  v1[1] = result;
  v1[2] = v5;
  v10 = *(_DWORD *)v1;
  *v1 = *(_DWORD *)v1 & 1;
  if ((v10 & 1) != 0)
    goto LABEL_19;
  v9 = (_QWORD *)(result + 16 * v5);
  do
  {
LABEL_20:
    *(_QWORD *)result = -4096;
    result += 16;
  }
  while ((_QWORD *)result != v9);
  return result;
}

void sub_22E8FC444(uint64_t a1)
{
  unsigned int v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;

  v2 = *(_DWORD *)a1;
  sub_22E8BB87C(a1);
  v3 = __clz((v2 >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((*(_DWORD *)a1 & 1) != 0 && v5 < 9)
  {
    v6 = (_QWORD *)(a1 + 520);
    *(_QWORD *)a1 = 1;
    v7 = (_QWORD *)(a1 + 8);
    do
    {
LABEL_10:
      *v7 = 0;
      v7[1] = 0;
      v7 += 8;
    }
    while (v7 != v6);
    return;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v8 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v5 == (_DWORD)v8)
    {
      *(_QWORD *)a1 = 0;
      if (!(_DWORD)v5)
        return;
      v7 = *(_QWORD **)(a1 + 8);
      v6 = &v7[8 * v5];
      goto LABEL_10;
    }
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(v8 << 6));
  }
  if (v5 <= 8)
  {
    *(_QWORD *)a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v9 = (_QWORD *)MEMORY[0x23489D23C]((unint64_t)v5 << 6, 8);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v10 = *(_DWORD *)a1;
    *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
    if ((v10 & 1) == 0)
    {
      v11 = &v9[8 * v5];
      goto LABEL_22;
    }
  }
  v9 = (_QWORD *)(a1 + 8);
  v11 = (_QWORD *)(a1 + 520);
  do
  {
LABEL_22:
    *v9 = 0;
    v9[1] = 0;
    v9 += 8;
  }
  while (v9 != v11);
}

void sub_22E8FC56C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void **v13;
  _BYTE v14[512];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v14;
    do
    {
      v11 = a1 + v9;
      if ((*(_QWORD *)(a1 + v9 + 8) & 0xFFFFFFFFFFFFFFFBLL) != 0 || *(_QWORD *)(a1 + v9 + 16) != 0)
      {
        *(_OWORD *)v10 = *(_OWORD *)(a1 + v9 + 8);
        *((_QWORD *)v10 + 2) = v10 + 32;
        v13 = (void **)(v11 + 24);
        *((_QWORD *)v10 + 3) = 0x400000000;
        if (*(_DWORD *)(v11 + 32))
          sub_22F24C77C((uint64_t)(v10 + 16), (uint64_t)v13);
        v10 += 64;
        if ((void *)(a1 + v9 + 40) != *v13)
          free(*v13);
      }
      v9 += 64;
    }
    while (v9 != 512);
    if (v2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C]((unint64_t)v2 << 6, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    sub_22E8FC754(a1, (uint64_t)v14, (uint64_t)v10);
  }
  else
  {
    v7 = *(llvm **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 8)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C]((unint64_t)v2 << 6, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22E8FC754(a1, (uint64_t)v7, (uint64_t)v7 + 64 * v8);
    llvm::deallocate_buffer(v7, (void *)(v8 << 6));
  }
}

void sub_22E8FC754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  _OWORD *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 520);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[8 * v7];
  }
  do
  {
    *v8 = 0;
    v8[1] = 0;
    v8 += 8;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFBLL) != 0 || *(_QWORD *)(v4 + 8) != 0)
      {
        v14 = 0;
        sub_22F308688(a1, (_QWORD *)v4, &v14);
        v11 = v14;
        *v14 = *(_OWORD *)v4;
        *((_QWORD *)v11 + 3) = 0x400000000;
        *((_QWORD *)v11 + 2) = v11 + 2;
        v12 = (uint64_t)(v11 + 1);
        if (*(_DWORD *)(v4 + 24))
          sub_22F24C77C(v12, v4 + 16);
        *(_DWORD *)a1 += 2;
        v13 = *(void **)(v4 + 16);
        if ((void *)(v4 + 32) != v13)
          free(v13);
      }
      v4 += 64;
    }
    while (v4 != a3);
  }
}

uint64_t sub_22E8FC868(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE *)(a1 + 8880);
  if (*(_BYTE *)(a1 + 8880))
    return *(_QWORD *)(a1 + 8872);
  v4 = **(_QWORD **)(*(_QWORD *)(a1 + 80) + 104);
  v5 = *(_BYTE *)(v4 + 23);
  if (v5 >= 0)
    v6 = **(void ***)(*(_QWORD *)(a1 + 80) + 104);
  else
    v6 = *(void **)v4;
  if (v5 >= 0)
    v7 = v5 & 0x7F;
  else
    v7 = *(_QWORD *)(v4 + 8);
  sub_22F1CA724(v6, v7, (uint64_t)&v16);
  if ((v24 & 1) != 0 || !v23)
  {
    if ((v24 & 1) != 0)
    {
      v10 = (char *)v16;
      *(_QWORD *)&v16 = 0;
      v14 = v10;
      sub_22E6C5940(&v14, &v15);
      if (v14)
        (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
    }
    if (*v2)
    {
      v11 = *(_QWORD *)(a1 + 8872);
      *(_QWORD *)(a1 + 8872) = 0;
      if (v11)
        sub_22E907874(v11);
      v3 = 0;
      goto LABEL_24;
    }
    v3 = 0;
    *(_QWORD *)(a1 + 8872) = 0;
  }
  else
  {
    v8 = operator new();
    v3 = v8;
    *(_OWORD *)v8 = v16;
    *(_QWORD *)(v8 + 16) = v17;
    v16 = 0uLL;
    *(_OWORD *)(v8 + 24) = v18;
    *(_OWORD *)(v8 + 40) = v19;
    *(_QWORD *)(v8 + 56) = v20;
    v17 = 0;
    *(_QWORD *)(v8 + 64) = v21;
    v20 = 0;
    v21 = 0;
    *(_DWORD *)(v8 + 72) = v22;
    v22 = 0;
    if (*v2)
    {
      v9 = *(_QWORD *)(a1 + 8872);
      *(_QWORD *)(a1 + 8872) = v3;
      if (v9)
      {
        sub_22E907874(v9);
        v3 = *(_QWORD *)(a1 + 8872);
      }
      goto LABEL_24;
    }
    *(_QWORD *)(a1 + 8872) = v8;
  }
  *v2 = 1;
LABEL_24:
  if ((v24 & 1) != 0)
  {
    v12 = v16;
    *(_QWORD *)&v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    sub_22E80B1A8((uint64_t)&v16);
  }
  return v3;
}

uint64_t sub_22E8FCA40@<X0>(_QWORD *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v10 = (char *)a1 + 8889;
  if (a3 > 0x2118)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v11 = sub_22F1CEE18(a3);
    if (v11)
      v12 = ((unint64_t)*(unsigned int *)(v11 + 1) >> 2) & 1;
    else
      LODWORD(v12) = 1;
  }
  v13 = a1[9];
  if ((*(_BYTE *)(v13 + 68) & 0x20) == 0)
    goto LABEL_13;
  if ((*(_BYTE *)(v13 + 104) & 1) == 0)
    goto LABEL_13;
  v14 = sub_22F1CEE18(a3);
  if (!v14)
    goto LABEL_13;
  v15 = *(unsigned int *)(v14 + 1) | ((unint64_t)*((unsigned __int8 *)v14 + 6) << 32);
  if ((v15 & 0x100000000) == 0 || (a4 & 1) != 0)
  {
    if ((v15 & 0x100000000) != 0)
      goto LABEL_22;
LABEL_13:
    if ((_DWORD)v12)
      *v10 = 1;
    v17 = sub_22E903070((uint64_t)a1, 0);
    v18 = v17 - 72;
    if (!v17)
      v18 = 0;
    if ((*(_WORD *)(v17 + 8) & 0x7Eu) - 52 >= 6)
      v19 = 0;
    else
      v19 = v18;
    return sub_22E903A04(a5, 1, a2, a3, v19, a1);
  }
  if (v10[1])
    v16 = 0;
  else
    v16 = v12;
  if ((v16 & 1) != 0)
    goto LABEL_13;
LABEL_22:
  if ((*(_WORD *)(v13 + 96) & 0x80) != 0)
    result = sub_22F31C558((uint64_t)a1, a2, a3, a5);
  else
    result = sub_22F31C65C((uint64_t)a1, a2, a3, a5);
  if ((_DWORD)v12)
    *v10 = *(_BYTE *)(a5 + 80);
  return result;
}

uint64_t sub_22E8FCBA8(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  const void *v5;
  size_t v6;
  unsigned int v7;
  char *v8;
  uint64_t *v9;
  char **v10;
  char *v11;
  char v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  int v24;
  void **v25;
  void *v26[2];
  uint64_t v27;

  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v18 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v17 = MEMORY[0x24BED83D8] + 16;
  v25 = v26;
  llvm::raw_ostream::SetBufferAndMode();
  if (a2)
  {
    v4 = *(unsigned int **)(a2 + 16);
    v7 = *v4;
    v5 = v4 + 4;
    v6 = v7;
    v8 = v21;
    if (v7 <= (unint64_t)(v20 - (_QWORD)v21))
    {
      v10 = &v21;
      if (v6)
      {
        memcpy(v21, v5, v6);
        v8 = &v21[v6];
        v21 += v6;
      }
      v9 = &v17;
    }
    else
    {
      v9 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v17, (const char *)v5);
      v10 = (char **)(v9 + 4);
      v8 = (char *)v9[4];
    }
    if ((unint64_t)(v9[3] - (_QWORD)v8) > 4)
    {
      v8[4] = 111;
      *(_DWORD *)v8 = 1953849658;
      *v10 += 5;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v9, ":auto");
    }
  }
  else
  {
    v11 = v21;
    if ((unint64_t)(v20 - (_QWORD)v21) > 4)
    {
      v21[4] = 58;
      *(_DWORD *)v11 = 1869903201;
      v21 += 5;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v17, "auto:");
    }
    llvm::raw_ostream::operator<<();
  }
  if (v21 != v19)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v17);
  v12 = *((_BYTE *)v25 + 23);
  if (v12 >= 0)
    v13 = v25;
  else
    v13 = *v25;
  if (v12 >= 0)
    v14 = v12 & 0x7F;
  else
    v14 = (size_t)v25[1];
  v15 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), v13, v14);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v17);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  return v15;
}

unint64_t sub_22E8FCD8C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v6;
  uint64_t *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 15104);
  v3 = **(_QWORD **)(a1 + 2000) >> 1;
  if ((v3 & 0x400000) != 0)
  {
    v4 = v3 & 0x400000;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 15104);
    v6 = *(llvm **)(a1 + 1344);
    if (!v6)
    {
      v6 = (llvm *)sub_22E3CB704(*(llvm::StringMapImpl **)(a1 + 15192), "BOOL", 4uLL);
      *(_QWORD *)(a1 + 1344) = v6;
    }
    v8 = sub_22E6D7128(a2, v6);
    if (v8 && (*((_WORD *)v8 + 18) & 2) == 0 && *((_DWORD *)v8 + 7) == 1)
      v4 = (unint64_t)(*(_WORD *)(v8[2] + 16) == 115) << 22;
    else
      v4 = 0;
    v2 = v9;
  }
  return v4 | v2 & 0xFFFFBFFFFFBFFFFFLL;
}

uint64_t sub_22E8FCE54(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  int v33;
  int v34;
  int64x2_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  int v40;
  int v41;

  v12 = a1 + 8840;
  *(_QWORD *)a1 = &off_24FAB69C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_22F420A08((llvm::StringMapImpl *)(a1 + 24));
  sub_22E51A8D0((_DWORD *)(a1 + 56), a2[7]);
  v13 = a2[7];
  v14 = *(_BYTE *)(a1 + 60) & 0xFE | (*(_DWORD *)(v13 + 124) >> 3) & 1;
  *(_BYTE *)(a1 + 60) = v14;
  v15 = v14 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(v13 + 132) >> 11) & 1));
  *(_BYTE *)(a1 + 60) = v15;
  LOBYTE(v15) = v15 & 0xFB | (4 * ((*(_DWORD *)(v13 + 124) & 0x200000) != 0));
  *(_BYTE *)(a1 + 60) = v15;
  *(_BYTE *)(a1 + 60) = v15 & 0xF7 | (*(_QWORD *)(v13 + 116) >> 60) & 8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 15088) + 164;
  v16 = a2[7];
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = a2[6];
  v17 = a2[11];
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v17;
  *(_BYTE *)(a1 + 128) = (*(_QWORD *)(v16 + 192) & 0x800000000) != 0;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a6;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = (*(_DWORD *)(v16 + 240) >> 8) & 3;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x200000000;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = a1 + 304;
  *(_QWORD *)(a1 + 296) = 0x200000000;
  *(_BYTE *)(a1 + 320) &= 0xE0u;
  *(_DWORD *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_QWORD *)(a1 + 377) = 0;
  *(_QWORD *)(a1 + 388) = 0;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_QWORD *)(a1 + 409) = 0;
  *(_QWORD *)(a1 + 436) = 0;
  *(_QWORD *)(a1 + 441) = 0;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_QWORD *)(a1 + 473) = 0;
  *(_QWORD *)(a1 + 468) = 0;
  *(_OWORD *)(a1 + 452) = 0u;
  LODWORD(v17) = *(unsigned __int16 *)(v16 + 248) >> 14;
  *(_QWORD *)(a1 + 488) = a1 + 504;
  *(_QWORD *)(a1 + 496) = 0x200000000;
  *(_DWORD *)(a1 + 568) = v17;
  *(_DWORD *)(a1 + 572) = v17;
  *(_DWORD *)(a1 + 576) = 0;
  v18 = *(_QWORD *)(v16 + 192);
  *(_QWORD *)(a1 + 584) = a1 + 600;
  *(_QWORD *)(a1 + 592) = 0x200000000;
  LODWORD(v18) = (v18 >> 9) & 0x1000000 | 0xFF0000;
  *(_DWORD *)(a1 + 664) = v18;
  *(_DWORD *)(a1 + 668) = v18;
  *(_DWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = a1 + 696;
  *(_QWORD *)(a1 + 688) = 0x800000000;
  *(_QWORD *)(a1 + 792) = a1 + 808;
  *(_QWORD *)(a1 + 800) = 0x200000000;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = a1 + 912;
  *(_QWORD *)(a1 + 904) = 0x200000000;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_DWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 1000) = a1 + 1016;
  *(_QWORD *)(a1 + 1008) = 0x200000000;
  *(_DWORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_QWORD *)(a1 + 1104) = a1 + 1120;
  *(_QWORD *)(a1 + 1112) = 0x200000000;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_QWORD *)(a1 + 1216) = 0x200000000;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_DWORD *)(a1 + 1344) = 0;
  *(_BYTE *)(a1 + 1349) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_DWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_QWORD *)(a1 + 1376) = a1 + 1392;
  *(_QWORD *)(a1 + 1384) = 0x200000000;
  *(_QWORD *)(a1 + 1687) = 0;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1696) = a1 + 1712;
  *(_QWORD *)(a1 + 1704) = 0x800000000;
  *(_QWORD *)(a1 + 1776) = a1 + 1808;
  *(_QWORD *)(a1 + 1784) = a1 + 1808;
  *(_QWORD *)(a1 + 1792) = 4;
  *(_DWORD *)(a1 + 1800) = 0;
  *(_QWORD *)(a1 + 1840) = a1 + 1856;
  *(_QWORD *)(a1 + 1848) = 0x400000000;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1896) = a1 + 1912;
  *(_QWORD *)(a1 + 1904) = 0x400000000;
  *(_DWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1952) = a1 + 1968;
  *(_QWORD *)(a1 + 1960) = 0x400000000;
  *(_DWORD *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2200) = a1 + 2216;
  *(_QWORD *)(a1 + 2208) = 0x200000000;
  *(_QWORD *)(a1 + 2232) = a1 + 2248;
  *(_QWORD *)(a1 + 2240) = 0x200000000;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_QWORD *)(a1 + 2272) = 1;
  v19 = 2280;
  v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v19) = v20;
    v19 += 16;
  }
  while (v19 != 2408);
  *(_QWORD *)(a1 + 2408) = a1 + 2424;
  *(_QWORD *)(a1 + 2416) = 0x1000000000;
  *(_QWORD *)(a1 + 2552) = 1;
  v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 2560) = v36;
  *(int64x2_t *)(a1 + 2576) = v36;
  *(_QWORD *)(a1 + 2592) = a1 + 2608;
  *(_QWORD *)(a1 + 2600) = 0x400000000;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_DWORD *)(a1 + 2656) = 0;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_QWORD *)(a1 + 2696) = a1 + 2728;
  *(_QWORD *)(a1 + 2704) = a1 + 2728;
  *(_QWORD *)(a1 + 2712) = 4;
  *(_DWORD *)(a1 + 2720) = 0;
  *(_QWORD *)(a1 + 2760) = a1 + 2776;
  *(_QWORD *)(a1 + 2768) = 0x200000000;
  *(_QWORD *)(a1 + 2792) = a1 + 2808;
  *(_QWORD *)(a1 + 2800) = 0x200000000;
  *(_QWORD *)(a1 + 2824) = a1 + 2840;
  *(_QWORD *)(a1 + 2832) = 0x400000000;
  *(_QWORD *)(a1 + 2872) = a1 + 2888;
  *(_QWORD *)(a1 + 2880) = 0x200000000;
  *(_QWORD *)(a1 + 2904) = a1 + 2920;
  *(_QWORD *)(a1 + 2912) = 0x200000000;
  *(_QWORD *)(a1 + 2936) = a1 + 2952;
  *(_QWORD *)(a1 + 2944) = 0x200000000;
  *(_QWORD *)(a1 + 2968) = a1 + 2984;
  *(_QWORD *)(a1 + 2976) = 0x200000000;
  *(_QWORD *)(a1 + 3000) = a1 + 3016;
  *(_QWORD *)(a1 + 3008) = 0x200000000;
  *(_QWORD *)(a1 + 3048) = a1 + 3064;
  *(_QWORD *)(a1 + 3056) = 0x200000000;
  *(_DWORD *)(a1 + 3112) = 0;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_BYTE *)(a1 + 3208) = 0;
  *(_DWORD *)(a1 + 3232) = 0;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_OWORD *)(a1 + 3256) = 0u;
  *(_OWORD *)(a1 + 3268) = 0u;
  *(_QWORD *)(a1 + 3288) = a1 + 3304;
  *(_QWORD *)(a1 + 3296) = 0x200000000;
  *(_QWORD *)(a1 + 3320) = a2[7];
  *(_QWORD *)(a1 + 3328) = a2;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(v21 + 8) = 512;
  *(_QWORD *)(a1 + 3336) = v21;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_QWORD *)(a1 + 3400) = 0;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3600) = 0u;
  *(_OWORD *)(a1 + 3616) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_BYTE *)(a1 + 3680) = 0;
  *(_QWORD *)(a1 + 3688) = a1 + 3704;
  *(_QWORD *)(a1 + 3696) = 0x800000000;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 8312));
  *(_OWORD *)(a1 + 8328) = 0u;
  *(_DWORD *)(a1 + 8344) = 0;
  *(_DWORD *)(a1 + 8352) = a5;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_QWORD *)(a1 + 8376) = a1 + 8392;
  *(_QWORD *)(a1 + 8384) = 0x400000000;
  *(_QWORD *)(a1 + 8424) = a1 + 8440;
  *(_OWORD *)(a1 + 8432) = 0u;
  *(_QWORD *)(a1 + 8448) = 1;
  *(_DWORD *)(a1 + 8456) = 0;
  *(_OWORD *)(a1 + 8464) = 0u;
  *(_OWORD *)(a1 + 8488) = 0u;
  *(_DWORD *)(a1 + 8480) = 0;
  *(_DWORD *)(a1 + 8504) = 0;
  *(_DWORD *)(a1 + 8528) = 0;
  *(_OWORD *)(a1 + 8512) = 0u;
  *(_OWORD *)(a1 + 8536) = 0u;
  *(_OWORD *)(a1 + 8552) = 0u;
  *(_OWORD *)(a1 + 8564) = 0u;
  *(_OWORD *)(a1 + 8584) = 0u;
  *(_DWORD *)(a1 + 8600) = 0;
  *(_QWORD *)(a1 + 8624) = 0;
  *(_OWORD *)(a1 + 8608) = 0u;
  *(_QWORD *)(a1 + 8632) = a1 + 8648;
  *(_QWORD *)(a1 + 8640) = 0x100000000;
  *(_QWORD *)(a1 + 8664) = a1 + 8696;
  *(_QWORD *)(a1 + 8672) = a1 + 8696;
  *(_QWORD *)(a1 + 8680) = 4;
  *(_DWORD *)(a1 + 8688) = 0;
  *(_QWORD *)(a1 + 8728) = a1 + 8760;
  *(_QWORD *)(a1 + 8736) = a1 + 8760;
  *(_QWORD *)(a1 + 8744) = 4;
  *(_DWORD *)(a1 + 8752) = 0;
  *(_QWORD *)(a1 + 8792) = a1 + 8808;
  *(_QWORD *)(a1 + 8800) = 0x400000000;
  *(_BYTE *)v12 = 0;
  *(_BYTE *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  *(_DWORD *)(a1 + 8864) = 0;
  *(_OWORD *)(a1 + 8848) = 0u;
  *(_WORD *)(v12 + 49) = 1;
  *(_QWORD *)(a1 + 8896) = 1;
  *(int64x2_t *)(v12 + 64) = v36;
  *(int64x2_t *)(v12 + 80) = v36;
  *(_QWORD *)(a1 + 8936) = a1 + 8952;
  *(_QWORD *)(a1 + 8944) = 0x400000000;
  *(_QWORD *)(a1 + 8984) = a1 + 9000;
  *(_QWORD *)(a1 + 8992) = 0x1000000000;
  *(_QWORD *)(a1 + 9896) = 0;
  *(_QWORD *)(a1 + 9904) = a1 + 9936;
  *(_QWORD *)(a1 + 9912) = a1 + 9936;
  *(_QWORD *)(a1 + 9920) = 8;
  *(_DWORD *)(a1 + 9928) = 0;
  *(_QWORD *)(a1 + 10000) = a1 + 10032;
  *(_QWORD *)(a1 + 10008) = a1 + 10032;
  *(_QWORD *)(a1 + 10016) = 8;
  *(_DWORD *)(a1 + 10024) = 0;
  *(_DWORD *)(a1 + 10120) = 0;
  *(_QWORD *)(a1 + 10112) = 0;
  *(_OWORD *)(a1 + 10096) = 0u;
  *(_DWORD *)(a1 + 10144) = 0;
  *(_OWORD *)(a1 + 10128) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_DWORD *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(_OWORD *)(a1 + 10228) = 0u;
  *(_OWORD *)(a1 + 10216) = 0u;
  *(_OWORD *)(a1 + 10248) = 0u;
  *(_OWORD *)(a1 + 10200) = 0u;
  *(_QWORD *)(a1 + 10264) = 0;
  *(_QWORD *)(a1 + 10280) = 0xC00000000000001;
  *(_DWORD *)(a1 + 10312) = 0;
  *(_QWORD *)(a1 + 10304) = 0;
  *(_OWORD *)(a1 + 10288) = 0u;
  *(_DWORD *)(a1 + 10336) = 0;
  *(_OWORD *)(a1 + 10320) = 0u;
  v22 = *(_QWORD *)(a1 + 88);
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 10344));
  *(_QWORD *)(a1 + 10360) = v22;
  *(_QWORD *)(a1 + 10368) = a1 + 10384;
  *(_QWORD *)(a1 + 10376) = 0x1000000000;
  *(_BYTE *)(v12 + 1824) = 0;
  *(_OWORD *)(a1 + 10640) = 0u;
  *(_DWORD *)(a1 + 10656) = 0;
  *(_QWORD *)(a1 + 10672) = a1 + 10688;
  *(_QWORD *)(a1 + 10680) = 0x1000000000;
  *(_OWORD *)(a1 + 11712) = 0u;
  *(_DWORD *)(a1 + 11728) = 0;
  *(_OWORD *)(a1 + 11736) = 0u;
  *(_DWORD *)(a1 + 11752) = 0;
  *(_QWORD *)(a1 + 11760) = a1 + 11776;
  *(_QWORD *)(a1 + 11768) = 0x1000000000;
  *(_BYTE *)(v12 + 3112) = 0;
  *(_QWORD *)(a1 + 11956) = 0;
  *(_DWORD *)(a1 + 11920) = 0;
  *(_OWORD *)(a1 + 11904) = 0u;
  *(_OWORD *)(a1 + 11928) = 0u;
  *(_DWORD *)(a1 + 11944) = 0;
  *(_QWORD *)(a1 + 11984) = 0;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_DWORD *)(a1 + 11992) = -1;
  *(_QWORD *)(a1 + 12024) = 0;
  *(_BYTE *)(v12 + 3192) = 0;
  *(_DWORD *)(a1 + 12016) = 0;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_QWORD *)(a1 + 12052) = 0;
  *(_OWORD *)(a1 + 12036) = 0u;
  sub_22F2F1A00(a1 + 12064, a1);
  *(_QWORD *)(a1 + 12200) = 0;
  *(_OWORD *)(a1 + 12168) = 0u;
  *(_OWORD *)(a1 + 12184) = 0u;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(_QWORD *)(a1 + 12208) = a1 + 12224;
  *(_QWORD *)(a1 + 12216) = 0x100000000;
  *(_OWORD *)(a1 + 12240) = 0u;
  *(_OWORD *)(a1 + 12256) = 0u;
  *(_OWORD *)(a1 + 12272) = 0u;
  *(_QWORD *)(a1 + 12288) = 0;
  *(_QWORD *)(a1 + 12296) = a1 + 12312;
  *(_QWORD *)(a1 + 12304) = 0x400000000;
  *(_QWORD *)(a1 + 12536) = a1 + 12552;
  *(_QWORD *)(a1 + 12544) = 0x400000000;
  *(_QWORD *)(a1 + 12680) = a1 + 12696;
  *(_QWORD *)(a1 + 12688) = 0x400000000;
  *(_QWORD *)(a1 + 12728) = a1 + 12744;
  *(_QWORD *)(a1 + 12736) = 0x400000000;
  *(_DWORD *)(a1 + 12776) = 0;
  *(_QWORD *)(a1 + 12960) = 0;
  *(_DWORD *)(a1 + 12800) = 0;
  *(_OWORD *)(a1 + 12784) = 0u;
  *(_OWORD *)(a1 + 12808) = 0u;
  *(_DWORD *)(a1 + 12824) = 0;
  *(_DWORD *)(a1 + 12848) = 0;
  *(_OWORD *)(a1 + 12832) = 0u;
  *(_OWORD *)(a1 + 12856) = 0u;
  *(_QWORD *)(a1 + 12872) = 0;
  *(_DWORD *)(a1 + 12880) = 0;
  *(_OWORD *)(a1 + 12888) = 0u;
  *(_OWORD *)(a1 + 12904) = 0u;
  *(_OWORD *)(a1 + 12920) = 0u;
  *(_OWORD *)(a1 + 12936) = 0u;
  *(_QWORD *)(a1 + 12968) = a1 + 12984;
  *(_QWORD *)(a1 + 12976) = 0x400000000;
  *(_QWORD *)(a1 + 13016) = a1 + 13032;
  *(_QWORD *)(a1 + 13024) = 0x400000000;
  *(_DWORD *)(a1 + 13064) = 0;
  *(_QWORD *)(a1 + 13072) = a1 + 13088;
  *(_QWORD *)(a1 + 13080) = 0x400000000;
  *(_QWORD *)(a1 + 3344) = 0;
  *(_BYTE *)(a1 + 3209) = 0;
  *(_BYTE *)(v12 + 1432) = 0;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3512) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_OWORD *)(a1 + 3560) = 0u;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_QWORD *)(a1 + 3592) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) != 0)
  {
    v23 = (_QWORD *)operator new();
    *v23 = *(_QWORD *)(a1 + 88);
    bzero(v23 + 1, 0x2C0uLL);
    v24 = *(_QWORD *)(a1 + 3440);
    *(_QWORD *)(a1 + 3440) = v23;
    if (v24)
      MEMORY[0x2348A0E9C](v24, 0x1020C40D30A3333);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    v25 = operator new();
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_OWORD *)(v25 + 64) = 0u;
    *(_OWORD *)(v25 + 80) = 0u;
    *(_OWORD *)(v25 + 96) = 0u;
    *(_OWORD *)(v25 + 112) = 0u;
    *(_OWORD *)(v25 + 128) = 0u;
    *(_OWORD *)(v25 + 144) = 0u;
    *(_OWORD *)(v25 + 160) = 0u;
    *(_OWORD *)(v25 + 176) = 0u;
    *(_OWORD *)(v25 + 192) = 0u;
    *(_OWORD *)(v25 + 208) = 0u;
    *(_OWORD *)(v25 + 224) = 0u;
    *(_OWORD *)(v25 + 240) = 0u;
    *(_OWORD *)(v25 + 256) = 0u;
    *(_OWORD *)(v25 + 272) = 0u;
    *(_OWORD *)(v25 + 288) = 0u;
    *(_OWORD *)(v25 + 304) = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_QWORD *)v25 = v25 + 16;
    *(_QWORD *)(v25 + 8) = 0x2000000000;
    *(_QWORD *)(v25 + 272) = v25 + 288;
    *(_DWORD *)(v25 + 284) = 4;
    v26 = *(_QWORD *)(a1 + 2264);
    *(_QWORD *)(a1 + 2264) = v25;
    if (v26)
      sub_22E9079DC(v26);
  }
  v27 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v27 + 192) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(v27 + 200) = sub_22EF7A0B8;
  v40 = 0;
  v41 = 6;
  v39 = 0;
  v38 = 3;
  sub_22F308918(a1 + 3688, &v41, &v40, &v39, &v38);
  sub_22EC7DDB8(a1);
  v28 = operator new();
  *(_OWORD *)(v28 + 48) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_QWORD *)v28 = &off_24FAB69E0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = v28 + 32;
  *(_QWORD *)(v28 + 24) = 0x800000000;
  *(_QWORD *)(a1 + 12952) = v28;
  v29 = *(_QWORD *)(a1 + 80);
  v37 = v28;
  sub_22F2968D4(v29, &v37);
  v30 = v37;
  v37 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  *(_QWORD *)(*(_QWORD *)(a1 + 12952) + 8) = a1;
  v31 = *(_DWORD **)(a1 + 80);
  v32 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 244);
  v33 = (v32 >> 9) & 3;
  if (v33 == 3)
  {
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 15088) + 192))(*(_QWORD *)(a3 + 15088));
    v31[130] = v33;
    v34 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 520);
  }
  else
  {
    v31[130] = v33;
    v34 = (v32 >> 9) & 3;
  }
  v31[131] = 0;
  v31[132] = v33;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xFFFF3FFF | (v34 << 14);
  return a1;
}

uint64_t sub_22E8FD90C(uint64_t a1, const void *a2, size_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v8 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), a2, a3);
  result = sub_22E8CEB58(a1 + 3320, v8);
  if (!result)
  {
    v10 = sub_22EF59578(*(_QWORD *)(a1 + 88), a4, a2, a3);
    return sub_22EA0483C(a1, v10, *(uint64_t **)(a1 + 3344), 1);
  }
  return result;
}

uint64_t sub_22E8FD98C(uint64_t a1)
{
  _BYTE *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v2 = *(_BYTE **)(a1 + 96);
  if (v2)
    v3 = v2[8] == 0;
  else
    v3 = 1;
  if (!v3)
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v2 + 176))(v2, a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16048);
  if (v4 && (*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v4 + 208))(v4, &unk_255E04EAB))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 216))(v4, a1);
  result = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), "__va_list_tag", 0xDuLL);
  *(_QWORD *)(a1 + 232) = result;
  if (*(_QWORD *)(a1 + 3344))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088)) & 1) != 0
      || (v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15096)) != 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
    {
      v7 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "__int128_t", 0xAuLL);
      if (!sub_22E8CEB58(a1 + 3320, v7))
      {
        v8 = *(_QWORD *)(a1 + 88);
        v9 = *(_QWORD *)(v8 + 1248);
        if (!v9)
        {
          v9 = sub_22EF59578(*(_QWORD *)(a1 + 88), *(_QWORD *)(v8 + 16504), "__int128_t", 0xAuLL);
          *(_QWORD *)(v8 + 1248) = v9;
        }
        sub_22EA0483C(a1, v9, *(uint64_t **)(a1 + 3344), 1);
      }
      v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "__uint128_t", 0xBuLL);
      if (!sub_22E8CEB58(a1 + 3320, v10))
      {
        v11 = *(_QWORD *)(a1 + 88);
        v12 = *(_QWORD *)(v11 + 1256);
        if (!v12)
        {
          v12 = sub_22EF59578(*(_QWORD *)(a1 + 88), *(_QWORD *)(v11 + 16552), "__uint128_t", 0xBuLL);
          *(_QWORD *)(v11 + 1256) = v12;
        }
        sub_22EA0483C(a1, v12, *(uint64_t **)(a1 + 3344), 1);
      }
    }
    v13 = *(_QWORD *)(a1 + 88);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x40) != 0)
    {
      v14 = sub_22E3CB704(*(llvm::StringMapImpl **)(v13 + 15192), "SEL", 3uLL);
      if (!sub_22E8CEB58(a1 + 3320, v14))
      {
        v54 = sub_22F36E228(*(_QWORD *)(a1 + 88));
        sub_22EA0483C(a1, v54, *(uint64_t **)(a1 + 3344), 1);
      }
      v15 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "id", 2uLL);
      if (!sub_22E8CEB58(a1 + 3320, v15))
      {
        v55 = sub_22F36E1B8(*(_QWORD *)(a1 + 88));
        sub_22EA0483C(a1, v55, *(uint64_t **)(a1 + 3344), 1);
      }
      v16 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "Class", 5uLL);
      if (!sub_22E8CEB58(a1 + 3320, v16))
      {
        v56 = sub_22F36E27C(*(_QWORD *)(a1 + 88));
        sub_22EA0483C(a1, v56, *(uint64_t **)(a1 + 3344), 1);
      }
      v17 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "Protocol", 8uLL);
      v18 = sub_22E8CEB58(a1 + 3320, v17);
      v13 = *(_QWORD *)(a1 + 88);
      if (!v18)
      {
        v57 = sub_22F36E2EC(v13);
        sub_22EA0483C(a1, (unint64_t)v57, *(uint64_t **)(a1 + 3344), 1);
        v13 = *(_QWORD *)(a1 + 88);
      }
    }
    v19 = sub_22E3CB704(*(llvm::StringMapImpl **)(v13 + 15192), "__NSConstantString", 0x12uLL);
    if (!sub_22E8CEB58(a1 + 3320, v19))
    {
      v20 = sub_22EF6A7F8(*(_QWORD *)(a1 + 88));
      sub_22EA0483C(a1, v20, *(uint64_t **)(a1 + 3344), 1);
    }
    v21 = *(_QWORD *)(a1 + 72);
    if ((*(_QWORD *)v21 & 0x10) != 0)
    {
      if ((*(_QWORD *)v21 & 0x100) != 0)
      {
        v22 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "type_info", 9uLL);
        if (!sub_22E8CEB58(a1 + 3320, v22))
        {
          v59 = sub_22F368234(*(_QWORD *)(a1 + 88), "type_info", 9uLL, 3);
          sub_22EA0483C(a1, v59, *(uint64_t **)(a1 + 3344), 1);
        }
      }
      v23 = sub_22EF67C8C(*(_QWORD *)(a1 + 88));
      sub_22E8FD90C(a1, "size_t", 6uLL, v23);
      v21 = *(_QWORD *)(a1 + 72);
    }
    if ((*(_DWORD *)(v21 + 52) & 0x40000000) == 0)
      goto LABEL_38;
    sub_22F421710(a1 + 24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 16) + 256, v21);
    sub_22E8FD90C(a1, "sampler_t", 9uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17208));
    sub_22E8FD90C(a1, "event_t", 7uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17216));
    v31 = *(_QWORD *)(a1 + 72);
    v32 = *(_QWORD *)(v31 + 56);
    if ((v32 & 0x100000000) != 0)
      goto LABEL_56;
    if (v32 < 0xC8)
    {
LABEL_72:
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_mce_payload_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17280));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ime_payload_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17288));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ref_payload_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17296));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_sic_payload_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17304));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_mce_result_t", 0x20uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17312));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ime_result_t", 0x20uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17320));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ref_result_t", 0x20uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17328));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_sic_result_t", 0x20uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17336));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ime_result_single_reference_streamout_t", 0x3BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17344));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ime_result_dual_reference_streamout_t", 0x39uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17352));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ime_single_reference_streamin_t", 0x33uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17360));
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(a1 + 72)))
        sub_22E8FD90C(a1, "intel_sub_group_avc_ime_dual_reference_streamin_t", 0x31uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17368));
LABEL_38:
      v24 = *(_QWORD *)(a1 + 88);
      v25 = *(_QWORD *)(v24 + 15088);
      if ((*(_BYTE *)(v25 + 288) & 0x80) != 0)
      {
        sub_22E8FD90C(a1, "__SVInt8_t", 0xAuLL, *(_QWORD *)(v24 + 17632));
        sub_22E8FD90C(a1, "__SVInt16_t", 0xBuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17640));
        sub_22E8FD90C(a1, "__SVInt32_t", 0xBuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17648));
        sub_22E8FD90C(a1, "__SVInt64_t", 0xBuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17656));
        sub_22E8FD90C(a1, "__SVUint8_t", 0xBuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17664));
        sub_22E8FD90C(a1, "__SVUint16_t", 0xCuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17672));
        sub_22E8FD90C(a1, "__SVUint32_t", 0xCuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17680));
        sub_22E8FD90C(a1, "__SVUint64_t", 0xCuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17688));
        sub_22E8FD90C(a1, "__SVFloat16_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17696));
        sub_22E8FD90C(a1, "__SVFloat32_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17704));
        sub_22E8FD90C(a1, "__SVFloat64_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17712));
        sub_22E8FD90C(a1, "__SVBFloat16_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17720));
        sub_22E8FD90C(a1, "__clang_svint8x2_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17728));
        sub_22E8FD90C(a1, "__clang_svint16x2_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17736));
        sub_22E8FD90C(a1, "__clang_svint32x2_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17744));
        sub_22E8FD90C(a1, "__clang_svint64x2_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17752));
        sub_22E8FD90C(a1, "__clang_svuint8x2_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17760));
        sub_22E8FD90C(a1, "__clang_svuint16x2_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17768));
        sub_22E8FD90C(a1, "__clang_svuint32x2_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17776));
        sub_22E8FD90C(a1, "__clang_svuint64x2_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17784));
        sub_22E8FD90C(a1, "__clang_svfloat16x2_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17792));
        sub_22E8FD90C(a1, "__clang_svfloat32x2_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17800));
        sub_22E8FD90C(a1, "__clang_svfloat64x2_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17808));
        sub_22E8FD90C(a1, "__clang_svbfloat16x2_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17816));
        sub_22E8FD90C(a1, "__clang_svint8x3_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17824));
        sub_22E8FD90C(a1, "__clang_svint16x3_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17832));
        sub_22E8FD90C(a1, "__clang_svint32x3_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17840));
        sub_22E8FD90C(a1, "__clang_svint64x3_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17848));
        sub_22E8FD90C(a1, "__clang_svuint8x3_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17856));
        sub_22E8FD90C(a1, "__clang_svuint16x3_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17864));
        sub_22E8FD90C(a1, "__clang_svuint32x3_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17872));
        sub_22E8FD90C(a1, "__clang_svuint64x3_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17880));
        sub_22E8FD90C(a1, "__clang_svfloat16x3_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17888));
        sub_22E8FD90C(a1, "__clang_svfloat32x3_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17896));
        sub_22E8FD90C(a1, "__clang_svfloat64x3_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17904));
        sub_22E8FD90C(a1, "__clang_svbfloat16x3_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17912));
        sub_22E8FD90C(a1, "__clang_svint8x4_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17920));
        sub_22E8FD90C(a1, "__clang_svint16x4_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17928));
        sub_22E8FD90C(a1, "__clang_svint32x4_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17936));
        sub_22E8FD90C(a1, "__clang_svint64x4_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17944));
        sub_22E8FD90C(a1, "__clang_svuint8x4_t", 0x13uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17952));
        sub_22E8FD90C(a1, "__clang_svuint16x4_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17960));
        sub_22E8FD90C(a1, "__clang_svuint32x4_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17968));
        sub_22E8FD90C(a1, "__clang_svuint64x4_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17976));
        sub_22E8FD90C(a1, "__clang_svfloat16x4_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17984));
        sub_22E8FD90C(a1, "__clang_svfloat32x4_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17992));
        sub_22E8FD90C(a1, "__clang_svfloat64x4_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18000));
        sub_22E8FD90C(a1, "__clang_svbfloat16x4_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18008));
        sub_22E8FD90C(a1, "__SVBool_t", 0xAuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18016));
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *(_QWORD *)(v24 + 15088);
      }
      if ((*(_DWORD *)(v25 + 56) - 23) <= 1)
      {
        sub_22E8FD90C(a1, "__vector_quad", 0xDuLL, *(_QWORD *)(v24 + 18024));
        sub_22E8FD90C(a1, "__vector_pair", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18032));
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *(_QWORD *)(v24 + 15088);
      }
      v26 = *(_DWORD *)(v25 + 288);
      if ((v26 & 0x100) != 0)
      {
        sub_22E8FD90C(a1, "__rvv_int8mf8_t", 0xFuLL, *(_QWORD *)(v24 + 18040));
        sub_22E8FD90C(a1, "__rvv_int8mf4_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18048));
        sub_22E8FD90C(a1, "__rvv_int8mf2_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18056));
        sub_22E8FD90C(a1, "__rvv_int8m1_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18064));
        sub_22E8FD90C(a1, "__rvv_int8m2_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18072));
        sub_22E8FD90C(a1, "__rvv_int8m4_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18080));
        sub_22E8FD90C(a1, "__rvv_int8m8_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18088));
        sub_22E8FD90C(a1, "__rvv_uint8mf8_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18096));
        sub_22E8FD90C(a1, "__rvv_uint8mf4_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18104));
        sub_22E8FD90C(a1, "__rvv_uint8mf2_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18112));
        sub_22E8FD90C(a1, "__rvv_uint8m1_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18120));
        sub_22E8FD90C(a1, "__rvv_uint8m2_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18128));
        sub_22E8FD90C(a1, "__rvv_uint8m4_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18136));
        sub_22E8FD90C(a1, "__rvv_uint8m8_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18144));
        sub_22E8FD90C(a1, "__rvv_int16mf4_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18152));
        sub_22E8FD90C(a1, "__rvv_int16mf2_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18160));
        sub_22E8FD90C(a1, "__rvv_int16m1_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18168));
        sub_22E8FD90C(a1, "__rvv_int16m2_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18176));
        sub_22E8FD90C(a1, "__rvv_int16m4_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18184));
        sub_22E8FD90C(a1, "__rvv_int16m8_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18192));
        sub_22E8FD90C(a1, "__rvv_uint16mf4_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18200));
        sub_22E8FD90C(a1, "__rvv_uint16mf2_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18208));
        sub_22E8FD90C(a1, "__rvv_uint16m1_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18216));
        sub_22E8FD90C(a1, "__rvv_uint16m2_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18224));
        sub_22E8FD90C(a1, "__rvv_uint16m4_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18232));
        sub_22E8FD90C(a1, "__rvv_uint16m8_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18240));
        sub_22E8FD90C(a1, "__rvv_int32mf2_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18248));
        sub_22E8FD90C(a1, "__rvv_int32m1_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18256));
        sub_22E8FD90C(a1, "__rvv_int32m2_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18264));
        sub_22E8FD90C(a1, "__rvv_int32m4_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18272));
        sub_22E8FD90C(a1, "__rvv_int32m8_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18280));
        sub_22E8FD90C(a1, "__rvv_uint32mf2_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18288));
        sub_22E8FD90C(a1, "__rvv_uint32m1_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18296));
        sub_22E8FD90C(a1, "__rvv_uint32m2_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18304));
        sub_22E8FD90C(a1, "__rvv_uint32m4_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18312));
        sub_22E8FD90C(a1, "__rvv_uint32m8_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18320));
        sub_22E8FD90C(a1, "__rvv_int64m1_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18328));
        sub_22E8FD90C(a1, "__rvv_int64m2_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18336));
        sub_22E8FD90C(a1, "__rvv_int64m4_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18344));
        sub_22E8FD90C(a1, "__rvv_int64m8_t", 0xFuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18352));
        sub_22E8FD90C(a1, "__rvv_uint64m1_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18360));
        sub_22E8FD90C(a1, "__rvv_uint64m2_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18368));
        sub_22E8FD90C(a1, "__rvv_uint64m4_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18376));
        sub_22E8FD90C(a1, "__rvv_uint64m8_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18384));
        sub_22E8FD90C(a1, "__rvv_float16mf4_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18392));
        sub_22E8FD90C(a1, "__rvv_float16mf2_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18400));
        sub_22E8FD90C(a1, "__rvv_float16m1_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18408));
        sub_22E8FD90C(a1, "__rvv_float16m2_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18416));
        sub_22E8FD90C(a1, "__rvv_float16m4_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18424));
        sub_22E8FD90C(a1, "__rvv_float16m8_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18432));
        sub_22E8FD90C(a1, "__rvv_float32mf2_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18440));
        sub_22E8FD90C(a1, "__rvv_float32m1_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18448));
        sub_22E8FD90C(a1, "__rvv_float32m2_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18456));
        sub_22E8FD90C(a1, "__rvv_float32m4_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18464));
        sub_22E8FD90C(a1, "__rvv_float32m8_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18472));
        sub_22E8FD90C(a1, "__rvv_float64m1_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18480));
        sub_22E8FD90C(a1, "__rvv_float64m2_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18488));
        sub_22E8FD90C(a1, "__rvv_float64m4_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18496));
        sub_22E8FD90C(a1, "__rvv_float64m8_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18504));
        sub_22E8FD90C(a1, "__rvv_BOOL1_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18512));
        sub_22E8FD90C(a1, "__rvv_BOOL2_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18520));
        sub_22E8FD90C(a1, "__rvv_BOOL4_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18528));
        sub_22E8FD90C(a1, "__rvv_BOOL8_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18536));
        sub_22E8FD90C(a1, "__rvv_BOOL16_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18544));
        sub_22E8FD90C(a1, "__rvv_BOOL32_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18552));
        sub_22E8FD90C(a1, "__rvv_BOOL64_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 18560));
        v24 = *(_QWORD *)(a1 + 88);
        v26 = *(_DWORD *)(*(_QWORD *)(v24 + 15088) + 288);
      }
      if ((v26 & 0x20) != 0)
      {
        v27 = sub_22E3CB704(*(llvm::StringMapImpl **)(v24 + 15192), "__builtin_ms_va_list", 0x14uLL);
        v28 = sub_22E8CEB58(a1 + 3320, v27);
        v24 = *(_QWORD *)(a1 + 88);
        if (!v28)
        {
          v58 = sub_22F36E36C(v24);
          sub_22EA0483C(a1, v58, *(uint64_t **)(a1 + 3344), 1);
          v24 = *(_QWORD *)(a1 + 88);
        }
      }
      v29 = sub_22E3CB704(*(llvm::StringMapImpl **)(v24 + 15192), "__builtin_va_list", 0x11uLL);
      result = sub_22E8CEB58(a1 + 3320, v29);
      if (!result)
      {
        v30 = sub_22EF6D84C(*(_QWORD *)(a1 + 88));
        result = sub_22EA0483C(a1, v30, *(uint64_t **)(a1 + 3344), 1);
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 104) & 0x20) != 0)
      {
        sub_22E8FD90C(a1, "__metal_texture_1d_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17376));
        sub_22E8FD90C(a1, "__metal_texture_1d_array_t", 0x1AuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17384));
        sub_22E8FD90C(a1, "__metal_texture_2d_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17392));
        sub_22E8FD90C(a1, "__metal_texture_2d_array_t", 0x1AuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17400));
        sub_22E8FD90C(a1, "__metal_texture_3d_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17408));
        sub_22E8FD90C(a1, "__metal_texture_cube_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17416));
        sub_22E8FD90C(a1, "__metal_texture_cube_array_t", 0x1CuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17424));
        sub_22E8FD90C(a1, "__metal_texture_2d_ms_t", 0x17uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17432));
        sub_22E8FD90C(a1, "__metal_texture_2d_ms_array_t", 0x1DuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17440));
        sub_22E8FD90C(a1, "__metal_texture_buffer_1d_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17448));
        sub_22E8FD90C(a1, "__metal_depth_2d_t", 0x12uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17456));
        sub_22E8FD90C(a1, "__metal_depth_2d_array_t", 0x18uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17464));
        sub_22E8FD90C(a1, "__metal_depth_cube_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17472));
        sub_22E8FD90C(a1, "__metal_depth_cube_array_t", 0x1AuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17480));
        sub_22E8FD90C(a1, "__metal_depth_2d_ms_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17488));
        sub_22E8FD90C(a1, "__metal_depth_2d_ms_array_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17496));
        sub_22E8FD90C(a1, "__metal_sampler_t", 0x11uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17504));
        sub_22E8FD90C(a1, "__metal_threadgroup_event_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17512));
        sub_22E8FD90C(a1, "__metal_imageblock_t", 0x14uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17520));
        sub_22E8FD90C(a1, "__metal_patch_control_point_t", 0x1DuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17528));
        sub_22E8FD90C(a1, "__metal_command_buffer_t", 0x18uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17536));
        sub_22E8FD90C(a1, "__metal_render_pipeline_state_t", 0x1FuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17544));
        sub_22E8FD90C(a1, "__metal_compute_pipeline_state_t", 0x20uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17552));
        sub_22E8FD90C(a1, "__metal_interpolant_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17560));
        sub_22E8FD90C(a1, "__metal_visible_function_table_t", 0x20uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17568));
        sub_22E8FD90C(a1, "__metal_intersection_function_table_t", 0x25uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17576));
        sub_22E8FD90C(a1, "__metal_instance_acceleration_structure_t", 0x29uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17584));
        sub_22E8FD90C(a1, "__metal_primitive_acceleration_structure_t", 0x2AuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17592));
        sub_22E8FD90C(a1, "__metal_mesh_t", 0xEuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17600));
        sub_22E8FD90C(a1, "__metal_mesh_grid_properties_t", 0x1EuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17608));
        sub_22E8FD90C(a1, "__metal_intersection_query_t", 0x1CuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17616));
        result = sub_22E8FD90C(a1, "__metal_intersection_result_t", 0x1DuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17624));
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 4) != 0)
        {
          sub_22E8FD90C(a1, "ocl_image1d_ro_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16920));
          sub_22E8FD90C(a1, "ocl_image1d_array_ro_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16928));
          sub_22E8FD90C(a1, "ocl_image1d_buffer_ro_t", 0x17uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16936));
          sub_22E8FD90C(a1, "ocl_image2d_ro_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16944));
          sub_22E8FD90C(a1, "ocl_image2d_array_ro_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16952));
          sub_22E8FD90C(a1, "ocl_image2d_depth_ro_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16960));
          sub_22E8FD90C(a1, "ocl_image2d_array_depth_ro_t", 0x1CuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16968));
          sub_22E8FD90C(a1, "ocl_image2d_msaa_ro_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16976));
          sub_22E8FD90C(a1, "ocl_image2d_array_msaa_ro_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16984));
          sub_22E8FD90C(a1, "ocl_image2d_msaa_depth_ro_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16992));
          sub_22E8FD90C(a1, "ocl_image2d_array_msaa_depth_ro_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17000));
          sub_22E8FD90C(a1, "ocl_image3d_ro_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17008));
          sub_22E8FD90C(a1, "ocl_image1d_wo_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17016));
          sub_22E8FD90C(a1, "ocl_image1d_array_wo_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17024));
          sub_22E8FD90C(a1, "ocl_image1d_buffer_wo_t", 0x17uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17032));
          sub_22E8FD90C(a1, "ocl_image2d_wo_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17040));
          sub_22E8FD90C(a1, "ocl_image2d_array_wo_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17048));
          sub_22E8FD90C(a1, "ocl_image2d_depth_wo_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17056));
          sub_22E8FD90C(a1, "ocl_image2d_array_depth_wo_t", 0x1CuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17064));
          sub_22E8FD90C(a1, "ocl_image2d_msaa_wo_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17072));
          sub_22E8FD90C(a1, "ocl_image2d_array_msaa_wo_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17080));
          sub_22E8FD90C(a1, "ocl_image2d_msaa_depth_wo_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17088));
          sub_22E8FD90C(a1, "ocl_image2d_array_msaa_depth_wo_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17096));
          sub_22E8FD90C(a1, "ocl_image3d_wo_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17104));
          sub_22E8FD90C(a1, "ocl_image1d_rw_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17112));
          sub_22E8FD90C(a1, "ocl_image1d_array_rw_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17120));
          sub_22E8FD90C(a1, "ocl_image1d_buffer_rw_t", 0x17uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17128));
          sub_22E8FD90C(a1, "ocl_image2d_rw_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17136));
          sub_22E8FD90C(a1, "ocl_image2d_array_rw_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17144));
          sub_22E8FD90C(a1, "ocl_image2d_depth_rw_t", 0x16uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17152));
          sub_22E8FD90C(a1, "ocl_image2d_array_depth_rw_t", 0x1CuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17160));
          sub_22E8FD90C(a1, "ocl_image2d_msaa_rw_t", 0x15uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17168));
          sub_22E8FD90C(a1, "ocl_image2d_array_msaa_rw_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17176));
          sub_22E8FD90C(a1, "ocl_image2d_msaa_depth_rw_t", 0x1BuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17184));
          sub_22E8FD90C(a1, "ocl_image2d_array_msaa_depth_rw_t", 0x21uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17192));
          sub_22E8FD90C(a1, "ocl_image3d_rw_t", 0x10uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17200));
          sub_22E8FD90C(a1, "ocl_sampler_t", 0xDuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17208));
          return sub_22E8FD90C(a1, "ocl_event_t", 0xBuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17216));
        }
      }
      return result;
    }
    if ((*(_QWORD *)(v31 + 20) & 0x20000000000) != 0)
    {
LABEL_56:
      sub_22E8FD90C(a1, "clk_event_t", 0xBuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17224));
      sub_22E8FD90C(a1, "queue_t", 7uLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17232));
      v31 = *(_QWORD *)(a1 + 72);
    }
    if ((*(_BYTE *)(v31 + 68) & 2) != 0)
      sub_22E8FD90C(a1, "reserve_id_t", 0xCuLL, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 17240));
    v33 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16480));
    sub_22E8FD90C(a1, "atomic_int", 0xAuLL, v33);
    v34 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16528));
    sub_22E8FD90C(a1, "atomic_uint", 0xBuLL, v34);
    v35 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16560));
    sub_22E8FD90C(a1, "atomic_float", 0xCuLL, v35);
    v36 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16480));
    sub_22E8FD90C(a1, "atomic_flag", 0xBuLL, v36);
    v37 = *(_QWORD *)(a1 + 88);
    v38 = sub_22EF67C8C(v37);
    if (sub_22EF5CDF0(v37, *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0)) == 32)
    {
      v39 = *(_QWORD *)(a1 + 88);
      v40 = sub_22EF67C8C(v39);
      v41 = sub_22F36A8C0(v39, v40);
      v42 = *(_QWORD *)(a1 + 88);
      v43 = sub_22EF5B0AC(v42, *(_DWORD *)(*(_QWORD *)(v42 + 15088) + *(_QWORD *)(**(_QWORD **)(v42 + 15088) - 24) + 124));
      v44 = sub_22F36A8C0(v42, v43);
      v45 = *(_QWORD *)(a1 + 88);
      v46 = sub_22F36D7FC(v45);
      v47 = sub_22F36A8C0(v45, v46);
      v48 = *(_QWORD *)(a1 + 88);
      v49 = sub_22EF5B0AC(v48, *(_DWORD *)(*(_QWORD *)(v48 + 15088) + *(_QWORD *)(**(_QWORD **)(v48 + 15088) - 24) + 120));
      v50 = sub_22F36A8C0(v48, v49);
      sub_22E8FD90C(a1, "atomic_size_t", 0xDuLL, v41);
      sub_22E8FD90C(a1, "atomic_intptr_t", 0xFuLL, v44);
      sub_22E8FD90C(a1, "atomic_uintptr_t", 0x10uLL, v47);
      sub_22E8FD90C(a1, "atomic_ptrdiff_t", 0x10uLL, v50);
    }
    if (sub_22F420778(a1 + 24, (uint64_t)"cl_khr_fp16", 11, *(_QWORD *)(a1 + 72)))
    {
      v51 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16792));
      sub_22E8FD90C(a1, "atomic_half", 0xBuLL, v51);
    }
    if (sub_22F420778(a1 + 24, (uint64_t)"cl_khr_int64_base_atomics", 25, *(_QWORD *)(a1 + 72))
      && sub_22F420778(a1 + 24, (uint64_t)"cl_khr_int64_extended_atomics", 29, *(_QWORD *)(a1 + 72)))
    {
      if (sub_22F420778(a1 + 24, (uint64_t)"cl_khr_fp64", 11, *(_QWORD *)(a1 + 72)))
      {
        v52 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16568));
        sub_22E8FD90C(a1, "atomic_double", 0xDuLL, v52);
        v53 = operator new(8uLL);
        *v53 = v52;
      }
      else
      {
        v53 = 0;
      }
      v60 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16488));
      v61 = sub_22F36A8C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16536));
      sub_22E8FD90C(a1, "atomic_long", 0xBuLL, v60);
      sub_22E8FD90C(a1, "atomic_ulong", 0xCuLL, v61);
      v62 = *(_QWORD *)(a1 + 88);
      v63 = sub_22EF67C8C(v62);
      if (sub_22EF5CDF0(v62, *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0)) == 64)
      {
        v64 = *(_QWORD *)(a1 + 88);
        v65 = sub_22EF67C8C(v64);
        v66 = sub_22F36A8C0(v64, v65);
        v67 = *(_QWORD *)(a1 + 88);
        v68 = sub_22EF5B0AC(v67, *(_DWORD *)(*(_QWORD *)(v67 + 15088) + *(_QWORD *)(**(_QWORD **)(v67 + 15088) - 24) + 124));
        v69 = sub_22F36A8C0(v67, v68);
        v70 = *(_QWORD *)(a1 + 88);
        v71 = sub_22F36D7FC(v70);
        v72 = sub_22F36A8C0(v70, v71);
        v73 = *(_QWORD *)(a1 + 88);
        v74 = sub_22EF5B0AC(v73, *(_DWORD *)(*(_QWORD *)(v73 + 15088) + *(_QWORD *)(**(_QWORD **)(v73 + 15088) - 24) + 120));
        v75 = sub_22F36A8C0(v73, v74);
        sub_22E8FD90C(a1, "atomic_size_t", 0xDuLL, v66);
        sub_22E8FD90C(a1, "atomic_intptr_t", 0xFuLL, v69);
        sub_22E8FD90C(a1, "atomic_uintptr_t", 0x10uLL, v72);
        sub_22E8FD90C(a1, "atomic_ptrdiff_t", 0x10uLL, v75);
      }
      if (v53)
        operator delete(v53);
    }
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_22E8FFA2C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  void ***v18;
  char *v19;
  void **v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  llvm *v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  llvm *v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  llvm *v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void **v102;
  void **v103;

  if (*(_QWORD *)(a1 + 1368))
    sub_22F30B024(a1);
  v2 = *(unsigned int *)(a1 + 1904);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD **)(a1 + 1896);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v5 = *(_BYTE **)(a1 + 96);
  if (v5)
    v6 = v5[8] == 0;
  else
    v6 = 1;
  if (!v6)
    (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 184))(v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16048);
  if (v7 && (*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v7 + 208))(v7, &unk_255E04EAB))
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
  if (*(_BYTE *)(a1 + 16))
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v103, *(void ***)(a1 + 10344));
  v102 = v103;
  llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl((llvm::FoldingSetIteratorImpl *)&v103, (void **)(*(_QWORD *)(a1 + 10344) + 8 * *(unsigned int *)(a1 + 10352)));
  v10 = v102;
  v9 = v103;
  if (v102 == v103)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (v12 >= v13)
      {
        v14 = (v12 - v11) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        if ((v13 - v11) >> 2 > v15)
          v15 = (v13 - v11) >> 2;
        if ((unint64_t)(v13 - v11) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 61)
            sub_22E3B3F8C();
          v17 = (char *)operator new(8 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = (void ***)&v17[8 * v14];
        *v18 = v10;
        v19 = (char *)(v18 + 1);
        while (v12 != v11)
        {
          v20 = (void **)*((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v18 = v20;
        }
        v13 = &v17[8 * v16];
        if (v11)
          operator delete(v11);
        v11 = (char *)v18;
        v12 = v19;
      }
      else
      {
        *(_QWORD *)v12 = v10;
        v12 += 8;
      }
      llvm::FoldingSetIteratorImpl::advance((llvm::FoldingSetIteratorImpl *)&v102);
      v10 = v102;
    }
    while (v102 != v9);
    if (v11 != v12)
    {
      v21 = v11;
      do
      {
        v22 = *(_QWORD **)v21;
        if (*(_QWORD *)v21)
        {
          v23 = (_QWORD *)v22[17];
          if (v23 != v22 + 19)
            free(v23);
          v24 = (_QWORD *)v22[2];
          if (v24 != v22 + 4)
            free(v24);
          MEMORY[0x2348A0E9C](v22, 0x10E0C409E7A7F72);
        }
        v21 += 8;
      }
      while (v21 != v12);
    }
  }
  sub_22F3563B4(*(_QWORD *)(a1 + 12152));
  sub_22F33BE54(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 12952) + 8) = 0;
  if (v11)
    operator delete(v11);
  v25 = *(void **)(a1 + 13072);
  if (v25 != (void *)(a1 + 13088))
    free(v25);
  v26 = *(void **)(a1 + 13016);
  if (v26 != (void *)(a1 + 13032))
    free(v26);
  v27 = *(void **)(a1 + 12968);
  if (v27 != (void *)(a1 + 12984))
    free(v27);
  llvm::deallocate_buffer(*(llvm **)(a1 + 12864), (void *)(16 * *(unsigned int *)(a1 + 12880)));
  v28 = *(_QWORD *)(a1 + 12856);
  *(_QWORD *)(a1 + 12856) = 0;
  if (v28)
  {
    llvm::deallocate_buffer(*(llvm **)v28, (void *)(32 * *(unsigned int *)(v28 + 16)));
    MEMORY[0x2348A0E9C](v28, 0x1020C405AF6BDC9);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 12832), (void *)(24 * *(unsigned int *)(a1 + 12848)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 12808), (void *)(16 * *(unsigned int *)(a1 + 12824)));
  v29 = *(unsigned int *)(a1 + 12800);
  v30 = *(llvm **)(a1 + 12784);
  if ((_DWORD)v29)
  {
    v32 = (void **)((char *)v30 + 8);
    v33 = 32 * v29;
    do
    {
      if (((unint64_t)*(v32 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v103 = v32;
        sub_22E890414(&v103);
      }
      v32 += 4;
      v33 -= 32;
    }
    while (v33);
    v30 = *(llvm **)(a1 + 12784);
    v31 = (void *)(32 * *(unsigned int *)(a1 + 12800));
  }
  else
  {
    v31 = 0;
  }
  llvm::deallocate_buffer(v30, v31);
  v34 = *(void **)(a1 + 12728);
  if (v34 != (void *)(a1 + 12744))
    free(v34);
  v35 = *(void **)(a1 + 12680);
  if (v35 != (void *)(a1 + 12696))
    free(v35);
  v36 = *(char **)(a1 + 12536);
  v37 = *(unsigned int *)(a1 + 12544);
  if ((_DWORD)v37)
  {
    v38 = 32 * v37;
    do
    {
      if (v36[v38 - 1] < 0)
        operator delete(*(void **)&v36[v38 - 24]);
      v38 -= 32;
    }
    while (v38);
    v36 = *(char **)(a1 + 12536);
  }
  if (v36 != (char *)(a1 + 12552))
    free(v36);
  sub_22F3098E0((void **)(a1 + 12296));
  sub_22E78E5D4(a1 + 12240);
  v39 = *(void **)(a1 + 12208);
  if (v39 != (void *)(a1 + 12224))
    free(v39);
  sub_22E78E5D4(a1 + 12160);
  sub_22F2F1B58(a1 + 12064);
  sub_22F309870(a1 + 12040);
  llvm::deallocate_buffer(*(llvm **)(a1 + 12040), (void *)(56 * *(unsigned int *)(a1 + 12056)));
  v40 = *(unsigned int *)(a1 + 12016);
  v41 = *(llvm **)(a1 + 12000);
  if ((_DWORD)v40)
  {
    v43 = (char **)((char *)v41 + 8);
    v44 = 56 * v40;
    do
    {
      if (((unint64_t)*(v43 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v43 = sub_22E89277C(v43);
      v43 += 7;
      v44 -= 56;
    }
    while (v44);
    v41 = *(llvm **)(a1 + 12000);
    v42 = 56 * *(unsigned int *)(a1 + 12016);
  }
  else
  {
    v42 = 0;
  }
  llvm::deallocate_buffer(v41, (void *)v42);
  v45 = *(_QWORD **)(a1 + 11968);
  if (v45)
  {
    v46 = *(_QWORD **)(a1 + 11976);
    v47 = *(void **)(a1 + 11968);
    if (v46 != v45)
    {
      do
      {
        v49 = *--v46;
        v48 = v49;
        *v46 = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      }
      while (v46 != v45);
      v47 = *(void **)(a1 + 11968);
    }
    *(_QWORD *)(a1 + 11976) = v45;
    operator delete(v47);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 11928), (void *)(16 * *(unsigned int *)(a1 + 11944)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 11904), (void *)(8 * *(unsigned int *)(a1 + 11920)));
  v50 = *(void **)(a1 + 11760);
  if (v50 != (void *)(a1 + 11776))
    free(v50);
  llvm::deallocate_buffer(*(llvm **)(a1 + 11736), (void *)(8 * *(unsigned int *)(a1 + 11752)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 11712), (void *)(16 * *(unsigned int *)(a1 + 11728)));
  v51 = *(void **)(a1 + 10672);
  if (v51 != (void *)(a1 + 10688))
    free(v51);
  llvm::deallocate_buffer(*(llvm **)(a1 + 10640), (void *)(16 * *(unsigned int *)(a1 + 10656)));
  v52 = *(void **)(a1 + 10368);
  if (v52 != (void *)(a1 + 10384))
    free(v52);
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 10344));
  llvm::deallocate_buffer(*(llvm **)(a1 + 10320), (void *)(16 * *(unsigned int *)(a1 + 10336)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 10296), (void *)(24 * *(unsigned int *)(a1 + 10312)));
  sub_22E54C5D0((void ***)(a1 + 10280));
  sub_22F271570(a1 + 10224);
  sub_22F3092B0(a1 + 10176);
  llvm::deallocate_buffer(*(llvm **)(a1 + 10152), (void *)(16 * *(unsigned int *)(a1 + 10168)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 10128), (void *)(8 * *(unsigned int *)(a1 + 10144)));
  v53 = *(void **)(a1 + 10096);
  if (v53)
  {
    *(_QWORD *)(a1 + 10104) = v53;
    operator delete(v53);
  }
  v54 = *(void **)(a1 + 10008);
  if (v54 != *(void **)(a1 + 10000))
    free(v54);
  v55 = *(void **)(a1 + 9912);
  if (v55 != *(void **)(a1 + 9904))
    free(v55);
  sub_22F3097EC((void **)(a1 + 8984));
  v56 = *(void **)(a1 + 8936);
  if (v56 != (void *)(a1 + 8952))
    free(v56);
  sub_22E7ECB74(a1 + 8896);
  if (*(_BYTE *)(a1 + 8880))
  {
    v57 = *(_QWORD *)(a1 + 8872);
    *(_QWORD *)(a1 + 8872) = 0;
    if (v57)
      sub_22E907874(v57);
    *(_BYTE *)(a1 + 8880) = 0;
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 8848), (void *)(16 * *(unsigned int *)(a1 + 8864)));
  v58 = *(void **)(a1 + 8792);
  if (v58 != (void *)(a1 + 8808))
    free(v58);
  v59 = *(void **)(a1 + 8736);
  if (v59 != *(void **)(a1 + 8728))
    free(v59);
  v60 = *(void **)(a1 + 8672);
  if (v60 != *(void **)(a1 + 8664))
    free(v60);
  v61 = *(void **)(a1 + 8632);
  if (v61 != (void *)(a1 + 8648))
    free(v61);
  sub_22F271570(a1 + 8584);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8560), (void *)(40 * *(unsigned int *)(a1 + 8576)));
  sub_22F271570(a1 + 8512);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8488), (void *)(16 * *(unsigned int *)(a1 + 8504)));
  v62 = *(unsigned int *)(a1 + 8480);
  v63 = *(llvm **)(a1 + 8464);
  if ((_DWORD)v62)
  {
    v65 = (uint64_t *)((char *)v63 + 8);
    v66 = 16 * v62;
    do
    {
      if ((*(v65 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v65 = sub_22F29CFE8(v65);
      v65 += 2;
      v66 -= 16;
    }
    while (v66);
    v63 = *(llvm **)(a1 + 8464);
    v64 = (void *)(16 * *(unsigned int *)(a1 + 8480));
  }
  else
  {
    v64 = 0;
  }
  llvm::deallocate_buffer(v63, v64);
  sub_22E3B4EF4(a1 + 8360);
  sub_22F309770(a1 + 8328);
  llvm::deallocate_buffer(*(llvm **)(a1 + 8328), (void *)(24 * *(unsigned int *)(a1 + 8344)));
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 8312));
  sub_22F30970C((char **)(a1 + 3688));
  v67 = *(_QWORD *)(a1 + 3440);
  *(_QWORD *)(a1 + 3440) = 0;
  if (v67)
    MEMORY[0x2348A0E9C](v67, 0x1020C40D30A3333);
  sub_22F305214(a1 + 3320);
  v68 = *(void **)(a1 + 3288);
  if (v68 != (void *)(a1 + 3304))
    free(v68);
  llvm::deallocate_buffer(*(llvm **)(a1 + 3264), (void *)(16 * *(unsigned int *)(a1 + 3280)));
  sub_22F309394(a1 + 3216);
  v69 = *(_QWORD **)(a1 + 3192);
  if (v69 == (_QWORD *)(a1 + 3168))
  {
    v70 = 4;
    v69 = (_QWORD *)(a1 + 3168);
  }
  else
  {
    if (!v69)
      goto LABEL_137;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_137:
  sub_22F3093E8(a1 + 3096);
  v71 = *(void **)(a1 + 3048);
  if (v71 != (void *)(a1 + 3064))
    free(v71);
  v72 = *(void **)(a1 + 3000);
  if (v72 != (void *)(a1 + 3016))
    free(v72);
  v73 = *(void **)(a1 + 2968);
  if (v73 != (void *)(a1 + 2984))
    free(v73);
  v74 = *(void **)(a1 + 2936);
  if (v74 != (void *)(a1 + 2952))
    free(v74);
  v75 = *(void **)(a1 + 2904);
  if (v75 != (void *)(a1 + 2920))
    free(v75);
  v76 = *(void **)(a1 + 2872);
  if (v76 != (void *)(a1 + 2888))
    free(v76);
  v77 = *(void **)(a1 + 2824);
  if (v77 != (void *)(a1 + 2840))
    free(v77);
  v78 = *(void **)(a1 + 2792);
  if (v78 != (void *)(a1 + 2808))
    free(v78);
  v79 = *(void **)(a1 + 2760);
  if (v79 != (void *)(a1 + 2776))
    free(v79);
  v80 = *(void **)(a1 + 2704);
  if (v80 != *(void **)(a1 + 2696))
    free(v80);
  sub_22E9078BC((void ***)(a1 + 2688), 0);
  sub_22E78EB54(a1 + 2640);
  v81 = *(void **)(a1 + 2592);
  if (v81 != (void *)(a1 + 2608))
    free(v81);
  sub_22E7ECB74(a1 + 2552);
  v82 = *(void **)(a1 + 2408);
  if (v82 != (void *)(a1 + 2424))
    free(v82);
  sub_22E7ECB74(a1 + 2272);
  v83 = *(_QWORD *)(a1 + 2264);
  *(_QWORD *)(a1 + 2264) = 0;
  if (v83)
    sub_22E9079DC(v83);
  v84 = *(void **)(a1 + 2232);
  if (v84 != (void *)(a1 + 2248))
    free(v84);
  v85 = *(void **)(a1 + 2200);
  if (v85 != (void *)(a1 + 2216))
    free(v85);
  sub_22F309684((void **)(a1 + 1952));
  v86 = *(void **)(a1 + 1896);
  if (v86 != (void *)(a1 + 1912))
    free(v86);
  v87 = *(_QWORD *)(a1 + 1888);
  *(_QWORD *)(a1 + 1888) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *(void **)(a1 + 1840);
  if (v88 != (void *)(a1 + 1856))
    free(v88);
  v89 = *(void **)(a1 + 1784);
  if (v89 != *(void **)(a1 + 1776))
    free(v89);
  v90 = *(void **)(a1 + 1696);
  if (v90 != (void *)(a1 + 1712))
    free(v90);
  sub_22F30960C((void **)(a1 + 1376));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1312), (void *)(16 * *(unsigned int *)(a1 + 1328)));
  v91 = *(void **)(a1 + 1208);
  if (v91 != (void *)(a1 + 1224))
    free(v91);
  v92 = *(void **)(a1 + 1104);
  if (v92 != (void *)(a1 + 1120))
    free(v92);
  v93 = *(void **)(a1 + 1000);
  if (v93 != (void *)(a1 + 1016))
    free(v93);
  v94 = *(void **)(a1 + 896);
  if (v94 != (void *)(a1 + 912))
    free(v94);
  v95 = *(void **)(a1 + 792);
  if (v95 != (void *)(a1 + 808))
    free(v95);
  v96 = *(void **)(a1 + 680);
  if (v96 != (void *)(a1 + 696))
    free(v96);
  v97 = *(void **)(a1 + 584);
  if (v97 != (void *)(a1 + 600))
    free(v97);
  v98 = *(void **)(a1 + 488);
  if (v98 != (void *)(a1 + 504))
    free(v98);
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  v99 = *(void **)(a1 + 288);
  if (v99 != (void *)(a1 + 304))
    free(v99);
  v100 = *(void **)(a1 + 248);
  if (v100 != (void *)(a1 + 264))
    free(v100);
  sub_22EF26A24(a1 + 120);
  sub_22E78E1D0(a1 + 24);
  return a1;
}

uint64_t sub_22E9005E8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  char v19;

  v3 = *(_QWORD *)(a1 + 216);
  if (v3)
    v4 = (*(_WORD *)(v3 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
  else
    v4 = 0;
  if (!v4 || *(_DWORD *)(a1 + 10680) > *(_DWORD *)(a1 + 11956))
    return 0;
  v8 = sub_22F1E361C(*(_QWORD **)(*(_QWORD *)(a1 + 88) + 1992), a2);
  if (!v8 || v8 == 3)
    return 0;
  v11 = v3 - 72;
  if (!sub_22F3089DC(v11))
  {
    v12 = *(_QWORD *)(a1 + 88);
    v14 = 0uLL;
    v15 = a2;
    v16 = a2;
    v17 = 0;
    v19 = 120;
    v18 = 0;
    v13 = sub_22F3A4818(v12, &unk_22F5AF2DB, 0, a3, &v14);
    sub_22EFCA95C(v11, v13);
  }
  return 1;
}

uint64_t sub_22E9006C4(uint64_t a1)
{
  llvm::detail *v2;
  unint64_t v3;
  unint64_t v4;
  uint64x2_t v5;
  int64x2_t v6;
  unint64_t v7;
  int8x16_t v8;
  unint64_t v9;
  uint64x2_t v10;
  int64x2_t v11;
  uint32x2_t v12;
  uint64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = (llvm::detail *)*(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = ((unint64_t)v2 + 0x1FFFFFFFFFFFFFFFLL) & 0x1FFFFFFFFFFFFFFFLL;
    v5 = (uint64x2_t)vdupq_n_s64(v4);
    v6 = vdupq_n_s64(v3);
    v7 = v4 - (((unint64_t)v2 + 0x1FFFFFFFFFFFFFFFLL) & 1);
    v8 = 0uLL;
    v9 = -2;
    v10 = (uint64x2_t)vdupq_n_s64(0x1000uLL);
    do
    {
      v11 = (int64x2_t)v8;
      v12 = vmin_u32((uint32x2_t)(*(_QWORD *)&vshrn_n_s64(vaddq_s64(vsubq_s64(vdupq_n_s64(v3), v6), (int64x2_t)xmmword_22F44E360), 0xAuLL) & 0x1FFFFFF01FFFFFFLL), (uint32x2_t)0x1E0000001ELL);
      v13.i64[0] = v12.u32[0];
      v13.i64[1] = v12.u32[1];
      v8 = (int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v10, v13), v11);
      v3 += 16;
      v9 += 2;
    }
    while (v7 != v9);
    v14 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v9), (int8x16_t)xmmword_22F4555C0), v5), (int8x16_t)v11, v8));
  }
  else
  {
    v14 = 0;
  }
  v15 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 64);
    v17 = 16 * v15;
    v18 = (uint64_t *)(v16 + 8);
    do
    {
      v19 = *v18;
      v18 += 2;
      v14 += v19;
      v17 -= 16;
    }
    while (v17);
  }
  return llvm::detail::printBumpPtrAllocatorStats(v2);
}

unsigned int *sub_22E900798(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t i;
  unsigned int *result;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12[24];
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v14 = a2;
  for (i = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0); ; i = *((_QWORD *)result + 5))
  {
    result = (unsigned int *)sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      break;
    v9 = result[4] >> 19;
    if (v9 - 33 < 2)
      break;
    if (v9 - 35 < 2)
    {
      result = (unsigned int *)sub_22F114DF4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
      if ((unsigned __int16)result >= 0x100u && result == 0)
      {
        sub_22E8FCA40(a1, a4, 0x1A94u, 0, (uint64_t)v12);
        v11 = sub_22E8901B8((uint64_t)v12, &v13);
        sub_22E8901B8(v11, &v14);
        return sub_22E903BEC(v12);
      }
      return result;
    }
  }
  return result;
}

BOOL sub_22E90086C(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  _BOOL8 result;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v2 = a2;
  if ((a2 & 0x80000000) == 0)
    return 0;
  v5 = a2;
  while (1)
  {
    v6 = sub_22F1E238C(a1, v5);
    if (!sub_22E906358((uint64_t)a1, v6))
      break;
    do
    {
      v2 = sub_22F2AB344(a1, v2);
      v5 = v2;
      v10 = v2;
      if ((v2 & 0x80000000) != 0)
        v10 = sub_22F1E238C(a1, v2);
    }
    while (sub_22E906358((uint64_t)a1, v10));
    result = 0;
    if ((v2 & 0x80000000) == 0)
      return result;
  }
  v7 = sub_22F1E238C(a1, v5);
  v8 = sub_22F1E361C(a1, v7);
  if (v8)
    v9 = v8 == 3;
  else
    v9 = 1;
  return !v9;
}

uint64_t sub_22E90092C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v34;
  uint64_t j;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  void *__p[2];
  uint64_t v45;
  char v46;
  unsigned int v47[24];

  v10 = (unsigned __int8 *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  sub_22F0D5A50(a2);
  v14 = v13;
  v39 = v12;
  v40 = a3;
  for (i = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
        i;
        i = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(i + 40) & 0xFFFFFFFFFFFFFFF0)))
  {
    v34 = *(_DWORD *)(i + 16) >> 19;
    if ((v34 - 33) < 2)
      break;
    if ((v34 - 35) < 2)
    {
      for (j = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0); ; j = *(_QWORD *)(v36 + 40))
      {
        v36 = sub_22F10D774(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0));
        if (!v36)
          break;
        v37 = *(_DWORD *)(v36 + 16) >> 19;
        if ((v37 - 34) < 3)
          break;
        if (v37 == 33)
        {
          sub_22E8FCA40((_QWORD *)a1, v14, 0x1A94u, 0, (uint64_t)v47);
          v38 = sub_22E8901B8((uint64_t)v47, &v39);
          sub_22E8901B8(v38, &v40);
          sub_22E903BEC(v47);
          goto LABEL_2;
        }
      }
      break;
    }
  }
LABEL_2:
  v16 = *(_QWORD *)(a1 + 104);
  sub_22F0D5A50((uint64_t)v10);
  v18 = v17;
  v19 = v17;
  if (sub_22F1CF68C(*(_QWORD *)(v16 + 32), 0x1C08u, v17, v16) != 1
    && (a4 - 16) >= 0xFFFFFFFE
    && (**(_QWORD **)(a1 + 72) & 0x200) != 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_22EFFA6B0(v10) + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v25 || (*(_DWORD *)(v25 + 16) & 0xFF800FF) != 114294795)
    {
      v27 = *(unsigned int *)(a1 + 10680);
      if (!(_DWORD)v27 || *(_DWORD *)(*(_QWORD *)(a1 + 10672) + (v27 << 6) - 64) != 18)
      {
        LODWORD(v39) = v18;
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 128) + 24) & 0x10) == 0
          || !sub_22E90086C(*(_QWORD **)(a1 + 112), v19)
          || sub_22F308B18(a1, (int *)&v39, "NULL", 4))
        {
          sub_22F0D5A50((uint64_t)v10);
          sub_22E8FCA40((_QWORD *)a1, v28, 0x1C08u, 0, (uint64_t)v47);
          sub_22F0D4E74((uint64_t)v10);
          v42 = 0;
          v43 = 0;
          __p[1] = 0;
          v45 = 0x700000000000000;
          v46 = 0;
          v40 = v29;
          v41 = 1;
          strcpy((char *)__p, "nullptr");
          sub_22E890748((uint64_t)v47, &v40);
          if (SHIBYTE(v45) < 0)
            operator delete(__p[0]);
          sub_22E903BEC(v47);
        }
      }
    }
  }
  if (a4 != 68
    && (*((_QWORD *)v10 + 1) & 7 | *(_QWORD *)((*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF0) + 8)) == (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) | a3 & 7))
  {
    return (uint64_t)v10;
  }
  if (a4 != 12)
    goto LABEL_31;
  if ((**(_QWORD **)(a1 + 72) & 0x100) != 0 && (v10[1] & 3) == 0)
  {
    v30 = sub_22F335E0C(a1, *((_QWORD *)v10 + 1), (uint64_t)v10, (**(_QWORD **)(a1 + 72) & 0x200) == 0);
    if ((v30 & 1) != 0)
      return 1;
    v10 = (unsigned __int8 *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if (a5)
      goto LABEL_31;
  }
  else if (a5)
  {
    goto LABEL_31;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0 && (*(_DWORD *)v10 & 0x300) != 0)
  {
    v20 = *(_DWORD *)v10;
    if (v20 != 161)
      goto LABEL_32;
    v21 = *((_QWORD *)v10 + 2);
    if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && (*(_BYTE *)(v21 + 96) & 7) == 5)
    {
      sub_22EFF605C((uint64_t)v10);
      sub_22E8FCA40((_QWORD *)a1, v22, 0x132Cu, 0, (uint64_t)v47);
      LODWORD(v39) = 3;
      v23 = sub_22E8900C4((uint64_t)v47, (int *)&v39);
      sub_22F0D4E74((uint64_t)v10);
      v40 = v24;
      sub_22E8906A0(v23, &v40);
      sub_22E903BEC(v47);
      return 1;
    }
  }
LABEL_31:
  v20 = *v10;
LABEL_32:
  if (v20 == 153)
  {
    v31 = *(_DWORD *)v10;
    if (((*(_DWORD *)v10 >> 18) & 0x7F) == a4)
    {
      if (a6)
      {
        if (a4 != 68 && !*(_DWORD *)(a6 + 8))
          goto LABEL_37;
      }
      else if (a4 != 68)
      {
LABEL_37:
        *((_QWORD *)v10 + 1) = a3;
        *(_DWORD *)v10 = v31 & 0xFFFFFCFF | ((a5 & 3) << 8);
        return (uint64_t)v10;
      }
    }
  }
  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v32 = 0;
  else
    v32 = *(_QWORD *)(a1 + 1296);
  return (uint64_t)sub_22EFFB64C(*(_QWORD *)(a1 + 88), a3, a4, (uint64_t)v10, a6, a5, v32);
}

uint64_t sub_22E900D98(uint64_t a1)
{
  return dword_22F463C68[(int)sub_22F110F44(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0))];
}

BOOL sub_22E900DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BOOL4 v5;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
    return 0;
  if ((sub_22EFB948C(a2) | 4) != 6)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  sub_22F114870(v3);
  if ((((unsigned __int16)*(_DWORD *)(v3 + 16) >> 14) | 4) == 6)
    return 0;
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    v5 = sub_22EFB9440(a2);
  else
    v5 = sub_22EFB93F4(a2);
  return !v5;
}

void sub_22E900E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = *(_QWORD *)(a1 + 8536);
  v3 = *(_QWORD *)(a1 + 8544);
  if (v2 != v3)
  {
    while (1)
    {
      v6 = *(_QWORD *)v2;
      if ((*(_BYTE *)(*(_QWORD *)v2 + 28) & 0x80) != 0
        || sub_22E4E9AA8(*(_QWORD *)v2)
        || (*(_DWORD *)(v6 + 28) & 0x7F) == 0x35
        || sub_22E49F808(v6))
      {
        goto LABEL_50;
      }
      if ((*(_BYTE *)(v6 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v6);
        v19 = *((unsigned int *)v18 + 2);
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          v21 = *v18;
          while (*(_WORD *)(*(_QWORD *)v21 + 32) != 155)
          {
            v21 += 8;
            v20 -= 8;
            if (!v20)
              goto LABEL_7;
          }
        }
        else
        {
          v21 = *v18;
        }
        if (v21 != *v18 + 8 * v19)
          goto LABEL_50;
      }
LABEL_7:
      if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        if ((sub_22EFBF86C(v6, &v22, 0) & 1) != 0
          || sub_22EFB948C(v6) >= 3
          && !sub_22E900DC0(a1, v6)
          && (*(_BYTE *)(sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 112) + 104), *(_QWORD *)(v6 + 112)) + 82) & 1) == 0
          && !sub_22F308C14(v6)
          || sub_22EFC01DC(v6, 0))
        {
          goto LABEL_50;
        }
        goto LABEL_47;
      }
      if (!v6)
        break;
      v7 = v6;
      if ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x53)
        break;
LABEL_41:
      if (sub_22EFBC498(v6, *(_QWORD *)(v7 + 88)))
        goto LABEL_50;
      if (sub_22EFB948C(v6) >= 3 && !sub_22E900DC0(a1, v6))
      {
        v14 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 80) + 72), *(_QWORD *)(v6 + 80));
        if (((*(_DWORD *)(v14 + 28) & 0x7F) == 0x40 || (*(_BYTE *)(v14 + 97) & 0x20) == 0) && !sub_22F308C14(v6))
          goto LABEL_50;
      }
      if (sub_22EFBE680(v6))
        goto LABEL_50;
LABEL_47:
      v15 = *(unsigned int *)(v2 + 8);
      v16 = *(unsigned int *)(a2 + 8);
      if (v16 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(a2 + 8);
      }
      v17 = (uint64_t *)(*(_QWORD *)a2 + 16 * v16);
      *v17 = v6;
      v17[1] = v15;
      ++*(_DWORD *)(a2 + 8);
LABEL_50:
      v2 += 16;
      if (v2 == v3)
        return;
    }
    for (i = *(_QWORD *)(v6 + 16); ; i = *(_QWORD *)(v9 + v11 + 16))
    {
      v9 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) != 0)
        v9 = *(_QWORD *)v9;
      v10 = *(_WORD *)(v9 + 8) & 0x7F;
      if (v10 == 83)
      {
        v7 = v9 - 40;
        goto LABEL_41;
      }
      v11 = -40;
      if ((*(_WORD *)(v9 + 8) & 0x7Fu) > 0x46)
      {
        if (v10 == 71)
        {
          v11 = -56;
          continue;
        }
        if (v10 != 81)
          goto LABEL_31;
      }
      else
      {
        if (v10 > 0x18)
          goto LABEL_30;
        if (v10 == 16)
          goto LABEL_24;
        if (((1 << v10) & 0x1066) == 0)
        {
          if (v10 == 24)
          {
LABEL_24:
            v11 = -48;
            continue;
          }
LABEL_30:
          if (v10 == 70)
          {
            v11 = -64;
            continue;
          }
LABEL_31:
          v12 = v10 - 52;
          if (v10 - 33 >= 5)
            v13 = -48;
          else
            v13 = -64;
          if (v12 >= 6)
            v11 = v13;
          else
            v11 = -72;
          continue;
        }
      }
    }
  }
}

void sub_22E90116C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[13];

  v10[12] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v8 = v10;
    v9 = 0x400000000;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 328))(v2, &v8);
    v3 = v8;
    if ((_DWORD)v9)
    {
      v4 = (uint64_t *)v8;
      v5 = (char *)v8 + 24 * v9;
      do
      {
        v6 = v4;
        v7 = sub_22E901250(a1 + 3216, v4);
        sub_22E901410(v7, (__int128 *)(v6 + 1));
        v4 = v6 + 3;
      }
      while (v6 + 3 != (uint64_t *)v5);
      v3 = v8;
    }
    if (v3 != v10)
      free(v3);
  }
}

uint64_t sub_22E901250(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  llvm *v15[2];
  __int128 v16;
  void *v17[2];
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  llvm *v21;
  unsigned int v22;
  void *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  v13 = 0;
  sub_22E6544B4(a1, &v12, &v13, (uint64_t)&v10);
  v4 = v10;
  if (v11)
  {
    v18 = 0u;
    v14 = 1;
    *(_OWORD *)v15 = xmmword_22F463B20;
    v16 = xmmword_22F463B20;
    v17[0] = &v18;
    v17[1] = (void *)0x100000000;
    v19 = *a2;
    sub_22F309BF8((uint64_t)&v20, (unsigned int *)&v14);
    v8 = *(_QWORD **)(a1 + 32);
    if ((unint64_t)v8 < *(_QWORD *)(a1 + 40))
    {
      *v8 = v19;
      v9 = (unsigned int *)(v8 + 10);
      sub_22F309BF8((uint64_t)(v8 + 1), &v20);
    }
    else
    {
      v9 = sub_22E907F74((unsigned int **)(a1 + 24), (uint64_t)&v19);
    }
    *(_QWORD *)(a1 + 32) = v9;
    if (v23 != v24)
      free(v23);
    if ((v20 & 1) == 0)
      llvm::deallocate_buffer(v21, (void *)(16 * v22));
    if (v17[0] != &v18)
      free(v17[0]);
    if ((v14 & 1) == 0)
      llvm::deallocate_buffer(v15[0], (void *)(16 * LODWORD(v15[1])));
    v6 = *(_QWORD *)(a1 + 24);
    v5 = -858993459 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v6) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v10 + 8);
    v6 = *(_QWORD *)(a1 + 24);
  }
  return v6 + 80 * v5 + 8;
}

BOOL sub_22E901410(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  unsigned int v6;
  __int128 v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_22F309DB8(a1, (uint64_t)a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      v8 = *a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 48);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

int64x2_t *sub_22E9014A4(int64x2_t *result, int a2)
{
  unint64_t v2;
  int64x2_t *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  llvm *v8;
  void *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  llvm *v19;
  llvm *TimeTraceProfilerInstance;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t i;
  void *v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  void *v42[2];
  void *v43[2];
  __int128 v44;
  __int128 v45;
  _QWORD v46[2];
  void *v47;
  uint64_t v48;
  _BYTE v49[160];
  BOOL v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = (unint64_t)result;
    v3 = result + 760;
    v4 = result[762].i64[0] + result[762].i64[1];
    v5 = result[760].i64[1];
    v6 = (char *)(v5 + 8 * (v4 >> 8));
    if (result[761].i64[0] == v5)
      v7 = 0;
    else
      v7 = *(_QWORD *)v6 + 16 * v4;
    sub_22E908328(result + 760, v6, v7, result[763].i64[0], result[763].i64[0] + 16 * result[763].u32[2], result[763].u32[2]);
    *(_DWORD *)(v2 + 12216) = 0;
    sub_22EAD196C(v2);
    v8 = *(llvm **)(v2 + 8);
    if (v8)
    {
      v42[0] = v43;
      v42[1] = (void *)0x400000000;
      (*(void (**)(llvm *, void **))(*(_QWORD *)v8 + 344))(v8, v42);
      v9 = v42[0];
      v10 = LODWORD(v42[1]);
      v11 = (char *)v42[0] + 16 * LODWORD(v42[1]);
      if (LODWORD(v42[1]))
      {
        v12 = 16 * LODWORD(v42[1]);
        v13 = (char *)v42[0];
        do
        {
          if (*(_QWORD *)v13)
            v14 = (*(_DWORD *)(*(_QWORD *)v13 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
          else
            v14 = 0;
          if (v14)
            *(_QWORD *)(*(_QWORD *)v13 + 80) |= 0x100000000uLL;
          v13 += 16;
          v12 -= 16;
        }
        while (v12);
      }
      v15 = *(_QWORD *)(v2 + 12168);
      v16 = *(_QWORD *)(v2 + 12192);
      v17 = (char *)(v15 + 8 * (v16 >> 8));
      if (*(_QWORD *)(v2 + 12176) == v15)
        v18 = 0;
      else
        v18 = *(_QWORD *)v17 + 16 * v16;
      sub_22E908328(v3, v17, v18, (uint64_t)v9, (uint64_t)v11, v10);
      v8 = (llvm *)v42[0];
      if (v42[0] != v43)
        free(v42[0]);
    }
    if (llvm::getTimeTraceProfilerInstance(v8))
      llvm::timeTraceProfilerBegin();
    v19 = (llvm *)sub_22EE472B4(v2, 0);
    TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v19);
    if (TimeTraceProfilerInstance)
      llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
    v21 = *(_QWORD *)(v2 + 8);
    if (v21)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 360))(v21, v2 + 8896);
    if (*(_DWORD *)(v2 + 12792) || *(_DWORD *)(*(_QWORD *)(v2 + 72) + 72))
    {
      v22 = *(unsigned int *)(v2 + 8944);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v42[0] = *(void **)(v2 + 88);
        v42[1] = (void *)v2;
        v43[0] = &v45;
        v43[1] = &v45;
        *(_QWORD *)&v44 = 4;
        DWORD2(v44) = 0;
        v47 = v49;
        v48 = 0x400000000;
        do
        {
          v24 = &v42[v23];
          v24[16] = &v49[v23 * 8 + 64];
          v24[17] = &v49[v23 * 8 + 64];
          v24[18] = (void *)4;
          *((_DWORD *)v24 + 38) = 0;
          v23 += 8;
        }
        while (v23 != 16);
        v50 = 0;
        v51 = 0;
        v25 = 8 * v22;
        v26 = *(uint64_t **)(v2 + 8936);
        do
        {
          v27 = *v26;
          if (*v26)
            v28 = (*(_DWORD *)(*v26 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
          else
            v28 = 0;
          if (v28)
          {
            v50 = sub_22EA32CC0((uint64_t)v42[1], (_BYTE *)*v26, 1) == 0;
            sub_22E9069BC((uint64_t)v42, 0, v27);
          }
          else
          {
            v29 = sub_22EFBC5B4(*v26);
            if (v29)
            {
              v30 = (_DWORD *)v29;
              v31 = sub_22EF95D10(v27);
              if (v32 && (*(_DWORD *)(v31 + 40) - 1) <= 1)
              {
                ++v51;
                sub_22E906E34((uint64_t)v42, v30);
                --v51;
              }
              else
              {
                sub_22E906E34((uint64_t)v42, v30);
              }
            }
          }
          ++v26;
          v25 -= 8;
        }
        while (v25);
        for (i = 0; i != -128; i -= 64)
        {
          v34 = *(void **)&v49[i + 104];
          if (v34 != *(void **)&v49[i + 96])
            free(v34);
        }
        if (v47 != v49)
          free(v47);
        if (v43[1] != v43[0])
          free(v43[1]);
      }
    }
    v35 = *(_QWORD *)(v2 + 10200);
    for (j = *(_QWORD *)(v2 + 10208); v35 != j; v35 += 80)
    {
      v44 = 0uLL;
      v45 = 0u;
      *(_OWORD *)v42 = 0u;
      v43[1] = (void *)0x100000000;
      v43[0] = &v44;
      *(_QWORD *)&v45 = 0;
      *(_QWORD *)((char *)&v45 + 6) = 0;
      v46[1] = 0;
      v47 = 0;
      v46[0] = 0;
      v37 = *(_QWORD *)(v35 + 40);
      if (!v37)
        sub_22E4A06C4();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v37 + 48))(v37, v42);
      v41 = (void **)v46;
      sub_22E8D19C8(&v41);
      if (v43[0] != &v44)
        free(v43[0]);
    }
    result = (int64x2_t *)sub_22E5D120C(v2 + 10176);
    v38 = *(_QWORD *)(v2 + 10208);
    v39 = *(_QWORD *)(v2 + 10200);
    if (v38 != v39)
    {
      do
      {
        v40 = v38 - 80;
        result = (int64x2_t *)sub_22F3092FC((uint64_t *)(v38 - 72));
        v38 = v40;
      }
      while (v40 != v39);
    }
    *(_QWORD *)(v2 + 10208) = v39;
  }
  return result;
}

void sub_22E9018D8(unint64_t a1)
{
  int64x2_t *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  void (*v9)(_QWORD);
  llvm *v10;
  llvm *v11;
  llvm *TimeTraceProfilerInstance;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t i;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  _BOOL4 v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  BOOL v75;
  BOOL v76;
  int v77;
  int v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  llvm *v93;
  llvm *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _DWORD *v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  BOOL v109;
  int v110;
  BOOL v111;
  char *v112;
  char *v113;
  int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  BOOL v122;
  char v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  int v147;
  unsigned int v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t j;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  unsigned __int8 v166;
  int v167;
  _QWORD *v168;
  unsigned int v169;
  void **v170;
  _BYTE *v171;
  uint64_t v173;
  int v174;
  _QWORD *v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  _DWORD *v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  _DWORD *v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193[2];
  unsigned int v194;
  unsigned int v195[24];
  unsigned int v196[24];
  unsigned int v197[24];
  uint64_t v198[2];
  unsigned int v199;
  void *v200;
  unsigned int v201;
  uint64_t v202;
  void *v203;
  void *v204;
  uint64_t v205;
  int v206;
  _QWORD v207[34];

  v207[32] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 80) + 752))
    return;
  if (*(_DWORD *)(a1 + 8352) == 1)
  {
    v2 = (int64x2_t *)(a1 + 12160);
    v3 = *(_QWORD *)(a1 + 12192) + *(_QWORD *)(a1 + 12200);
    v4 = *(_QWORD *)(a1 + 12168);
    v5 = (char *)(v4 + 8 * (v3 >> 8));
    if (*(_QWORD *)(a1 + 12176) == v4)
      v6 = 0;
    else
      v6 = *(_QWORD *)v5 + 16 * v3;
    sub_22E908328(v2, v5, v6, *(_QWORD *)(a1 + 12208), *(_QWORD *)(a1 + 12208) + 16 * *(unsigned int *)(a1 + 12216), *(unsigned int *)(a1 + 12216));
    *(_DWORD *)(a1 + 12216) = 0;
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x8000000000000) != 0)
    {
      if (llvm::getTimeTraceProfilerInstance(v10))
        llvm::timeTraceProfilerBegin();
      v11 = (llvm *)sub_22EE472B4(a1, 0);
      TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v11);
      if (TimeTraceProfilerInstance)
        llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
    }
  }
  else
  {
    sub_22EB006AC((_QWORD *)a1);
    v7 = *(_DWORD *)(a1 + 8992);
    v8 = 1;
    if (v7)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v7 - 48) + 28) == 6)
        v8 = 2;
      else
        v8 = 1;
    }
    sub_22E9014A4((int64x2_t *)a1, v8);
    v9 = *(void (**)(_QWORD))(a1 + 3152);
    if (v9)
      v9(*(_QWORD *)(a1 + 3160));
    sub_22EABB2E0(a1);
  }
  sub_22E90E76C((unsigned int *)a1);
  sub_22F30AFD8((unsigned int *)a1);
  v13 = (_DWORD *)(a1 + 2912);
  v14 = (uint64_t *)(a1 + 2904);
  v15 = *(unsigned int *)(a1 + 2912);
  if ((_DWORD)v15)
  {
    v16 = 0;
    while (!sub_22E902CDC(a1, *(_QWORD *)(*(_QWORD *)(a1 + 2904) + 8 * v16)))
    {
      if (v15 == ++v16)
      {
        LODWORD(v16) = v15;
        goto LABEL_34;
      }
    }
    if ((_DWORD)v15 - 1 != (_DWORD)v16)
    {
      v20 = v16 + 1;
      do
      {
        if ((sub_22E902CDC(a1, *(_QWORD *)(*(_QWORD *)(a1 + 2904) + 8 * v20)) & 1) == 0)
        {
          v21 = *v14;
          if ((v16 & 0x80000000) != 0)
            v22 = (_QWORD *)(*(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880) + 8 * (int)v16);
          else
            v22 = (_QWORD *)(v21 + 8 * v16);
          *v22 = *(_QWORD *)(v21 + 8 * v20);
          LODWORD(v16) = v16 + 1;
        }
        ++v20;
      }
      while (v15 != v20);
    }
LABEL_34:
    LODWORD(v15) = *v13;
    if ((v16 & 0x80000000) != 0 && (v15 & 0x80000000) != 0)
    {
      v13 = (_DWORD *)(a1 + 2880);
      v23 = *(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880);
      v17 = (void *)(v23 + 8 * (int)v16);
      v24 = (const void *)(v23 + 8 * (int)v15);
      v25 = -8 * (int)v15;
      memmove(v17, v24, v25);
      v14 = (uint64_t *)(a1 + 2872);
      goto LABEL_45;
    }
    if ((v16 & 0x80000000) == 0)
    {
      v18 = (_BYTE *)*v14;
      v17 = (void *)(*v14 + 8 * v16);
      if ((v15 & 0x80000000) == 0)
      {
        v19 = *v14;
        goto LABEL_43;
      }
LABEL_42:
      v19 = *(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880);
      goto LABEL_43;
    }
    *(_DWORD *)(a1 + 2880) = (8 * *(unsigned int *)(a1 + 2880) + 8 * (unint64_t)v16) >> 3;
    v17 = *(void **)(a1 + 2904);
    v18 = v17;
    if ((v15 & 0x80000000) != 0)
      goto LABEL_42;
    v18 = *(_BYTE **)(a1 + 2904);
  }
  else
  {
    v17 = (void *)*v14;
    v18 = (_BYTE *)*v14;
  }
  v19 = (uint64_t)v17;
LABEL_43:
  v26 = (_BYTE *)(v19 + 8 * (int)v15);
  v27 = &v18[8 * v15];
  v25 = v27 - v26;
  if (v27 == v26)
    goto LABEL_46;
  memmove(v17, v26, v27 - v26);
LABEL_45:
  v18 = (_BYTE *)*v14;
LABEL_46:
  *v13 = (unint64_t)((_BYTE *)v17 + v25 - v18) >> 3;
  if (*(_DWORD *)(a1 + 8352) == 1)
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 736))
      *(_QWORD *)(a1 + 3344) = 0;
    return;
  }
  sub_22E90116C(a1);
  v28 = *(_QWORD *)(a1 + 3240);
  for (i = *(_QWORD *)(a1 + 3248); v28 != i; v28 += 80)
  {
    if (*(_DWORD *)(v28 + 56))
    {
      v30 = sub_22EC65CE0((_QWORD *)a1, *(_QWORD *)(a1 + 3344), *(_QWORD *)v28, 0, 0, 0);
      if (v30 && (v31 = *(_DWORD *)(v30 + 28), (v31 & 0x7Eu) - 52 >= 6) && (v31 & 0x7Fu) - 60 >= 7)
      {
        v36 = *(unsigned int *)(v28 + 56);
        if ((_DWORD)v36)
        {
          v37 = 16 * v36;
          v38 = (int *)(*(_QWORD *)(v28 + 48) + 8);
          do
          {
            v39 = *v38;
            v38 += 4;
            sub_22E8FCA40((_QWORD *)a1, v39, 0x1891u, 0, (uint64_t)&v203);
            v40 = sub_22F2F30F4((uint64_t)&v203, (uint64_t)"'weak'");
            LODWORD(v200) = 2;
            sub_22E8900C4(v40, (int *)&v200);
            sub_22E903BEC((unsigned int *)&v203);
            v37 -= 16;
          }
          while (v37);
        }
      }
      else
      {
        v32 = *(unsigned int *)(v28 + 56);
        if ((_DWORD)v32)
        {
          v33 = 16 * v32;
          v34 = (int *)(*(_QWORD *)(v28 + 48) + 8);
          do
          {
            v35 = *v34;
            v34 += 4;
            sub_22E8FCA40((_QWORD *)a1, v35, 0x1C00u, 0, (uint64_t)&v203);
            sub_22E8BAE44((uint64_t)&v203, (uint64_t *)v28);
            sub_22E903BEC((unsigned int *)&v203);
            v33 -= 16;
          }
          while (v33);
        }
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) != 0
    && sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1951u, 0, *(_QWORD *)(a1 + 104)) != 1)
  {
    sub_22EAD1FE8(a1);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 104) + 168))
  {
    v91 = *(_QWORD *)(a1 + 8);
    if (v91)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v91 + 256))(v91, a1 + 8512);
    if (*(_QWORD *)(a1 + 8536) != *(_QWORD *)(a1 + 8544))
    {
      v203 = &v205;
      v204 = (void *)0x1000000000;
      sub_22E900E54(a1, (uint64_t)&v203);
      if (!(_DWORD)v204)
      {
LABEL_170:
        if (v203 != &v205)
          free(v203);
        goto LABEL_67;
      }
      v112 = (char *)v203;
      v113 = (char *)v203 + 16 * v204;
      while (1)
      {
        v114 = *((_DWORD *)v112 + 2);
        v193[0] = *(_QWORD *)v112;
        if (sub_22E900DC0(a1, v193[0]))
        {
          v115 = *(_DWORD *)(v193[0] + 24);
          v116 = *(_QWORD *)(*(_QWORD *)(v193[0] + 48) & 0xFFFFFFFFFFFFFFF0);
          sub_22F114870(v116);
          if ((*(_DWORD *)(v116 + 16) & 0x1C000u) <= 0x8000)
            v117 = 5056;
          else
            v117 = 5394;
          v118 = (_QWORD *)a1;
          v119 = v115;
        }
        else
        {
          v120 = sub_22EFB948C(v193[0]);
          v121 = v193[0];
          if (v193[0])
            v122 = (*(_DWORD *)(v193[0] + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
          else
            v122 = 0;
          v123 = !v122;
          if (v120 > 2)
          {
            if ((v123 & 1) != 0)
              v124 = 5055;
            else
              v124 = 7081;
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v193[0] + 24), v124, 0, (uint64_t)&v200);
            v131 = &v200;
            goto LABEL_235;
          }
          if ((*(_DWORD *)(v193[0] + 28) & 0x100) != 0)
            v125 = v123;
          else
            v125 = 1;
          if ((v125 & 1) == 0)
          {
            sub_22EFC8E88(v193[0]);
            v127 = *(uint64_t **)v126;
            v128 = *(unsigned int *)(v126 + 8);
            v129 = *(uint64_t **)v126;
            if ((_DWORD)v128)
            {
              v130 = 8 * v128;
              v129 = *(uint64_t **)v126;
              while (*(_WORD *)(*v129 + 32) != 246)
              {
                ++v129;
                v130 -= 8;
                if (!v130)
                  goto LABEL_233;
              }
            }
            if (v129 != &v127[v128])
            {
              do
              {
                v133 = *v127++;
                v132 = v133;
              }
              while (*(_WORD *)(v133 + 32) != 246);
              if ((sub_22E9063DC(*(uint64_t **)(v132 + 48), 43) & 1) == 0
                && (*(_BYTE *)(v121 + 29) & 2) != 0
                && *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72)
                && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 40) + 16) + 40) & 0xFFFFFFFFFFFFFFF8) & 0x2000000000) != 0)
              {
                goto LABEL_236;
              }
            }
          }
LABEL_233:
          v119 = *(_DWORD *)(v193[0] + 24);
          v118 = (_QWORD *)a1;
          v117 = 7082;
        }
        sub_22E8FCA40(v118, v119, v117, 0, (uint64_t)&v200);
        LOBYTE(v202) = (*(_DWORD *)(v193[0] + 28) & 0x7Fu) - 60 < 7;
        v131 = (void **)sub_22E894E38((uint64_t)&v200, (unsigned __int8 *)&v202);
LABEL_235:
        sub_22E890024((uint64_t)v131, v193);
        sub_22E903BEC((unsigned int *)&v200);
LABEL_236:
        if (v114)
        {
          sub_22E8FCA40((_QWORD *)a1, v114, 0x180Cu, 0, (uint64_t)v198);
          sub_22E903BEC((unsigned int *)v198);
        }
        v112 += 16;
        if (v112 == v113)
        {
          sub_22F278254(a1 + 8512);
          *(_QWORD *)(a1 + 8544) = *(_QWORD *)(a1 + 8536);
          goto LABEL_170;
        }
      }
    }
  }
LABEL_67:
  v41 = *(_DWORD *)(a1 + 8992);
  if (v41)
  {
    v42 = *(_QWORD *)(a1 + 8984) + 56 * v41;
    if (*(_DWORD *)(*(_QWORD *)(v42 - 48) + 28) == 5 && !*(_BYTE *)(v42 - 38))
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v42 - 56), 0xF64u, 0, (uint64_t)v197);
      sub_22E903BEC(v197);
      LOBYTE(v41) = 1;
    }
    else
    {
      LOBYTE(v41) = 0;
    }
  }
  if (*(_DWORD *)(a1 + 8352) == 2)
  {
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 240) & 0xE0) == 0x80)
    {
      v102 = *(_DWORD *)(a1 + 8992);
      if (!v102
        || ((v108 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8984) + 56 * v102 - 48) + 28),
             v109 = v108 > 6,
             v110 = (1 << v108) & 0x5A,
             !v109)
          ? (v111 = v110 == 0)
          : (v111 = 1),
            v111))
      {
        if ((v41 & 1) == 0)
        {
          v103 = sub_22E49F3DC(*(_QWORD **)(a1 + 112), *(_DWORD *)(*(_QWORD *)(a1 + 112) + 344));
          if (v103)
            v104 = *v103 & 0x7FFFFFFF;
          else
            v104 = 0;
          sub_22E8FCA40((_QWORD *)a1, v104, 0xF63u, 0, (uint64_t)v196);
          sub_22E903BEC(v196);
        }
      }
    }
    v189 = sub_22F18E3E4(*(_QWORD *)(a1 + 80));
    if (v189)
    {
      v190 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 104) + 488);
      v203 = &v205;
      HIDWORD(v204) = 2;
      v205 = v189;
      v191 = 1;
      do
      {
        v192 = *((_QWORD *)v203 + v191 - 1);
        LODWORD(v204) = v191 - 1;
        sub_22F41337C(v190, v192, 0);
        sub_22F412548(v190, (uint64_t *)v192, 0);
        sub_22F15A5B8(v190, v192, 0);
        sub_22F2A7CF4((uint64_t)&v203, *(char **)(v192 + 200), *(char **)(v192 + 208));
        v191 = v204;
      }
      while ((_DWORD)v204);
      if (v203 != &v205)
        free(v203);
    }
    sub_22F308C74(a1);
  }
  v203 = v207;
  v204 = v207;
  v205 = 32;
  v206 = 0;
  v43 = *(_QWORD *)(a1 + 8);
  if (v43)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 280))(v43, a1 + 2760);
  v44 = *(_DWORD *)(a1 + 2768);
  v45 = *(_DWORD *)(a1 + 2800);
  if (v45 + v44)
  {
    v77 = -v44;
    v78 = -v44;
    do
    {
      if (v78 < 0)
        v79 = *(_QWORD *)(a1 + 2760) + 8 * *(unsigned int *)(a1 + 2768);
      else
        v79 = *(_QWORD *)(a1 + 2792);
      v80 = (_BYTE *)sub_22F3AC108(*(_QWORD *)(v79 + 8 * v77));
      if (v80)
      {
        v81 = (uint64_t)v80;
        if ((v80[28] & 0x80) == 0)
        {
          sub_22E3BA850((uint64_t)&v203, v80);
          if (v82)
          {
            v83 = sub_22EF5C728(*(_QWORD *)(a1 + 88), *(_QWORD *)(v81 + 48));
            if (v83 && (v84 = v83, *(_BYTE *)(v83 + 16) == 4))
            {
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v81 + 24), 0x1B84u, 0, (uint64_t)v195);
              sub_22E903BEC(v195);
              v85 = *(_QWORD *)(a1 + 88);
              v86 = sub_22EF67C8C(v85);
              v87 = sub_22EF5CDF0(v85, *(_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF0));
              v201 = v87;
              if (v87 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v200);
              }
              else
              {
                v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v87;
                if (!v87)
                  LOBYTE(v88) = 0;
                v200 = (void *)(v88 & 1);
              }
              *(_QWORD *)(v81 + 48) = sub_22EF5FE30(*(_QWORD *)(a1 + 88), *(_QWORD *)(v84 + 32), (const llvm::APInt *)&v200, 0, 0, 0);
              if (v201 >= 0x41 && v200)
                MEMORY[0x2348A0E84](v200, 0x1000C8000313F17);
            }
            else
            {
              v89 = *(_DWORD *)(v81 + 24);
              v90 = *(_QWORD *)(v81 + 48);
              v200 = &unk_24FAB6EF8;
              v201 = 4866;
              if (sub_22EE8B0B0(a1, v89, v90))
                sub_22EFC77E8(v81, 1);
            }
            sub_22EA2A59C((_QWORD *)a1, v81);
            if ((*(_BYTE *)(v81 + 28) & 0x80) == 0)
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96), v81);
          }
        }
      }
      v78 = ++v77;
    }
    while (v45 != v77);
  }
  v46 = *(unsigned int *)(a1 + 2832);
  if ((_DWORD)v46)
  {
    v47 = *(uint64_t **)(a1 + 2824);
    v48 = 8 * v46;
    do
    {
      v49 = *v47;
      if (*v47
        && (*(_BYTE *)(v49 + 28) & 0x80) == 0
        && ((*(_BYTE *)(v49 + 72) & 3) != 0 || !sub_22E3CD31C((uint64_t *)(v49 + 72), *v47))
        && sub_22EFC9084(v49, 1))
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 104))(*(_QWORD *)(a1 + 96), v49);
      }
      ++v47;
      v48 -= 8;
    }
    while (v48);
  }
  v50 = *(_QWORD *)(a1 + 104);
  if (!*(_BYTE *)(v50 + 168) && *(_DWORD *)(a1 + 8352) != 2)
  {
    v105 = *(_QWORD *)(a1 + 8);
    if (v105)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v105 + 288))(v105, a1 + 2872);
    v106 = *(_DWORD *)(a1 + 2880);
    v107 = *(_DWORD *)(a1 + 2912);
    if (!(v107 + v106))
    {
LABEL_196:
      sub_22F308C74(a1);
      v50 = *(_QWORD *)(a1 + 104);
      goto LABEL_86;
    }
    v134 = -v106;
    v135 = -v106;
    while (1)
    {
      if (v135 < 0)
      {
        if ((sub_22E902CDC(a1, *(_QWORD *)(*(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880) + 8 * v134)) & 1) == 0)
        {
          v136 = v134;
          v137 = *(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880);
LABEL_249:
          v138 = *(_QWORD *)(v137 + 8 * v136);
          if (v138)
            v139 = (*(_DWORD *)(v138 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
          else
            v139 = 0;
          if (v139)
          {
            v198[0] = 0;
            if (sub_22EFBF6E8(v138, v198))
            {
              v141 = v198[0];
            }
            else
            {
              v198[0] = v138;
              v141 = v138;
            }
            if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 32))(v141) + 82) & 0x40) != 0)
              goto LABEL_341;
            v142 = v198[0];
            v143 = *(_DWORD *)(v198[0] + 28);
            if ((v143 & 0x800) != 0)
            {
LABEL_313:
              if ((v143 & 0x7Eu) - 54 <= 3)
              {
                v147 = *(_DWORD *)(v142 + 24);
                v149 = (_QWORD *)a1;
                v148 = 7098;
                goto LABEL_365;
              }
              if ((*(_QWORD *)(v138 + 80) & 0x2E000) == 0x4000)
              {
                v164 = *(_QWORD **)(a1 + 112);
                v165 = *(_DWORD *)(v138 + 24);
                if (v165 < 0)
                  v165 = sub_22F1E22F0(*(_QWORD **)(a1 + 112), v165);
                v166 = sub_22F1E3734(v164, v165);
                v142 = v198[0];
                if ((v166 & 1) == 0)
                {
                  v147 = *(_DWORD *)(v198[0] + 24);
                  v149 = (_QWORD *)a1;
                  v148 = 7099;
                  goto LABEL_365;
                }
              }
              v167 = *(_DWORD *)(v142 + 24);
              v168 = (_QWORD *)a1;
              v169 = 7097;
            }
            else
            {
              v144 = (_BYTE *)v198[0];
              do
              {
                if ((v144[29] & 8) != 0)
                {
                  v142 = v198[0];
                  v143 = *(_DWORD *)(v198[0] + 28);
                  goto LABEL_313;
                }
                v144 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v144 + 40))(v144);
              }
              while (v144 != (_BYTE *)v142 && v144 != 0);
              if (*(_QWORD *)(v138 + 144) < 8uLL || (*(_QWORD *)(v138 + 144) & 6) != 0)
              {
                v147 = *(_DWORD *)(v198[0] + 24);
                if ((*(_DWORD *)(v198[0] + 28) & 0x7Eu) - 54 >= 4)
                  v148 = 7130;
                else
                  v148 = 7134;
                v149 = (_QWORD *)a1;
                goto LABEL_365;
              }
              v167 = *(_DWORD *)(v198[0] + 24);
              v168 = (_QWORD *)a1;
              v169 = 7141;
            }
            sub_22E8FCA40(v168, v167, v169, 0, (uint64_t)&v200);
            LODWORD(v193[0]) = 0;
            v170 = (void **)sub_22E8900C4((uint64_t)&v200, (int *)v193);
          }
          else
          {
            v198[0] = 0;
            if (v135 < 0)
              v140 = *(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880);
            else
              v140 = *(_QWORD *)(a1 + 2904);
            v150 = *(_QWORD *)(v140 + 8 * v134);
            if (!v150 || (v151 = v150, (*(_DWORD *)(v150 + 28) & 0x7F) != 0x53))
            {
              for (j = *(_QWORD *)(v150 + 16); ; j = *(_QWORD *)(v153 + v155 + 16))
              {
                v153 = j & 0xFFFFFFFFFFFFFFF8;
                if ((j & 4) != 0)
                  v153 = *(_QWORD *)v153;
                v154 = *(_WORD *)(v153 + 8) & 0x7F;
                if (v154 == 83)
                {
                  v151 = v153 - 40;
                  break;
                }
                v155 = -40;
                if ((*(_WORD *)(v153 + 8) & 0x7Fu) > 0x46)
                {
                  if (v154 == 71)
                  {
                    v155 = -56;
                    continue;
                  }
                  if (v154 != 81)
                    goto LABEL_292;
                }
                else
                {
                  if (v154 > 0x18)
                    goto LABEL_291;
                  if (v154 == 16)
                    goto LABEL_285;
                  if (((1 << v154) & 0x1066) == 0)
                  {
                    if (v154 == 24)
                    {
LABEL_285:
                      v155 = -48;
                      continue;
                    }
LABEL_291:
                    if (v154 == 70)
                    {
                      v155 = -64;
                      continue;
                    }
LABEL_292:
                    v156 = v154 - 52;
                    v59 = v154 - 33 >= 5;
                    v157 = -64;
                    if (v59)
                      v157 = -48;
                    v59 = v156 >= 6;
                    v155 = -72;
                    if (v59)
                      v155 = v157;
                    continue;
                  }
                }
              }
            }
            v158 = *(_QWORD *)(v150 + 80);
            if (v158)
            {
              v159 = 0;
              v160 = *(_QWORD *)(v151 + 88);
              v161 = *(_QWORD *)(v150 + 80);
              while (sub_22EFBBF74(v161, v160) != 2)
              {
                if ((*(_BYTE *)(v161 + 72) & 3) != 0)
                {
                  if (v159)
                    goto LABEL_310;
                  v159 = 1;
                }
                v162 = sub_22E3CD31C((uint64_t *)(v161 + 72), v161);
                if (v162 != v158)
                {
                  v161 = v162;
                  if (v162)
                    continue;
                }
                goto LABEL_310;
              }
            }
            else
            {
LABEL_310:
              v198[0] = 0;
              if (v135 < 0)
                v163 = *(_QWORD *)(a1 + 2872) + 8 * *(unsigned int *)(a1 + 2880);
              else
                v163 = *(_QWORD *)(a1 + 2904);
              v161 = *(_QWORD *)(v163 + 8 * v134);
            }
            v198[0] = v161;
            if ((*(_BYTE *)(v161 + 29) & 8) != 0)
            {
LABEL_338:
              v174 = *(_DWORD *)(v161 + 24);
              v175 = (_QWORD *)a1;
              v176 = 7097;
LABEL_339:
              sub_22E8FCA40(v175, v174, v176, 0, (uint64_t)&v200);
              LODWORD(v193[0]) = 1;
              v170 = (void **)sub_22E8900C4((uint64_t)&v200, (int *)v193);
            }
            else
            {
              v171 = (_BYTE *)v161;
              do
              {
                if ((v171[29] & 8) != 0)
                {
                  v161 = v198[0];
                  goto LABEL_338;
                }
                v171 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v171 + 40))(v171);
              }
              while (v171 != (_BYTE *)v161 && v171 != 0);
              v173 = *(_QWORD *)(v198[0] + 48);
              if ((v173 & 1) != 0 || (*(_BYTE *)((v173 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
              {
                v177 = *(_QWORD *)(a1 + 112);
                v178 = *(_DWORD *)(v177 + 344);
                v179 = *(_DWORD *)(v198[0] + 24);
                v180 = *(_DWORD *)(v177 + 304);
                v181 = v180 + 1;
                if (v180 + 1 > 1)
                {
                  if ((v180 & 0x80000000) != 0)
                  {
                    v183 = -2 - v180;
                    if (((*(_QWORD *)(*(_QWORD *)(v177 + 224) + 8 * ((-2 - v180) >> 6)) >> (-2 - v180)) & 1) != 0)
                      v182 = (_DWORD *)(*(_QWORD *)(v177 + 200) + 24 * v183);
                    else
                      v182 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(a1 + 112), v183, 0);
                  }
                  else
                  {
                    v182 = (_DWORD *)(*(_QWORD *)(v177 + 184) + 24 * v180);
                  }
                }
                else
                {
                  v182 = *(_DWORD **)(v177 + 184);
                }
                v184 = v179 & 0x7FFFFFFF;
                if ((*v182 & 0x7FFFFFFFu) <= v184
                  && (v180 == -2
                   || (v181 != *(_DWORD *)(v177 + 192)
                     ? ((v181 & 0x80000000) != 0
                      ? ((v188 = -3 - v180,
                          ((*(_QWORD *)(*(_QWORD *)(v177 + 224) + 8 * ((-3 - v180) >> 6)) >> (-3
                                                                                              - v180)) & 1) == 0)
                       ? (v187 = (_DWORD *)sub_22F1E1134(v177, v188, 0))
                       : (v187 = (_DWORD *)(*(_QWORD *)(v177 + 200) + 24 * v188)))
                      : (v187 = (_DWORD *)(*(_QWORD *)(v177 + 184) + 24 * v181)),
                        v186 = *v187 & 0x7FFFFFFF)
                     : (v186 = *(_DWORD *)(v177 + 216)),
                       v186 > v184)))
                {
                  v185 = *(_DWORD *)(v177 + 304);
                }
                else
                {
                  v185 = sub_22F1E1EE8(v177, v184);
                }
                if (v178 == v185 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 704))
                  goto LABEL_341;
                v147 = *(_DWORD *)(v198[0] + 24);
                v149 = (_QWORD *)a1;
                v148 = 7124;
              }
              else
              {
                if (sub_22EFB6870(v198[0]))
                {
                  v174 = *(_DWORD *)(v198[0] + 24);
                  v175 = (_QWORD *)a1;
                  v176 = 7141;
                  goto LABEL_339;
                }
                v147 = *(_DWORD *)(v198[0] + 24);
                v149 = (_QWORD *)a1;
                v148 = 7142;
              }
LABEL_365:
              sub_22E8FCA40(v149, v147, v148, 0, (uint64_t)&v200);
              v170 = &v200;
            }
          }
          sub_22E890024((uint64_t)v170, v198);
          sub_22E903BEC((unsigned int *)&v200);
        }
      }
      else if ((sub_22E902CDC(a1, *(_QWORD *)(*(_QWORD *)(a1 + 2904) + 8 * v134)) & 1) == 0)
      {
        v136 = v134;
        v137 = *(_QWORD *)(a1 + 2904);
        goto LABEL_249;
      }
LABEL_341:
      v135 = ++v134;
      if (v107 == v134)
        goto LABEL_196;
    }
  }
LABEL_86:
  v51 = *(_QWORD *)(v50 + 32);
  if (sub_22F1CF68C(v51, 0x1BE0u, 0, v50) != 1)
  {
    v198[0] = 0;
    v198[1] = 0;
    v199 = 0;
    v193[0] = 0;
    v193[1] = 0;
    v194 = 0;
    v52 = *(unsigned int *)(a1 + 2416);
    if (!(_DWORD)v52)
    {
      v94 = 0;
      v95 = 0;
      v93 = 0;
      v92 = 0;
      goto LABEL_173;
    }
    v53 = *(uint64_t **)(a1 + 2408);
    v54 = &v53[v52];
    while (1)
    {
      v55 = *v53;
      v56 = *(_QWORD *)(*v53 + 16);
      v57 = v56 & 0xFFFFFFFFFFFFFFF8;
      if ((v56 & 4) != 0)
        v57 = *(_QWORD *)v57;
      v58 = v57 - 64;
      if (v57)
        v59 = (*(_WORD *)(v57 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v59 = 0;
      v60 = !v59;
      if (v60)
        v61 = 0;
      else
        v61 = v57 - 64;
      if ((v60 & 1) != 0 || (*(_DWORD *)(v57 + 8) & 0xE000) == 0x4000)
        goto LABEL_107;
      v202 = v57 - 64;
      if (!v199)
        goto LABEL_113;
      v62 = (v199 - 1) & ((v58 >> 4) ^ (v58 >> 9));
      v63 = *(_QWORD *)(v198[0] + 16 * v62);
      if (v58 != v63)
        break;
LABEL_104:
      if ((_DWORD)v62 == v199)
        goto LABEL_113;
      if (*(_BYTE *)(v198[0] + 16 * v62 + 8))
        goto LABEL_106;
LABEL_107:
      if (++v53 == v54)
      {
        v92 = (void *)(16 * v194);
        v93 = (llvm *)v193[0];
        v94 = (llvm *)v198[0];
        v95 = (void *)(16 * v199);
LABEL_173:
        llvm::deallocate_buffer(v93, v92);
        llvm::deallocate_buffer(v94, v95);
        v50 = *(_QWORD *)(a1 + 104);
        v51 = *(_QWORD *)(v50 + 32);
        goto LABEL_174;
      }
    }
    v64 = 1;
    while (v63 != -4096)
    {
      v65 = v62 + v64++;
      v62 = v65 & (v199 - 1);
      v63 = *(_QWORD *)(v198[0] + 16 * v62);
      if (v61 == v63)
        goto LABEL_104;
    }
LABEL_113:
    v66 = sub_22E906470(v61, (uint64_t)v193);
    v67 = sub_22EFD9E18(v202);
    if (v67)
      v68 = !v66;
    else
      v68 = 1;
    if (v68)
    {
LABEL_118:
      *((_BYTE *)sub_22F309434((uint64_t)v198, &v202) + 8) = v66;
      if (!v66)
        goto LABEL_107;
LABEL_106:
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v55 + 24), 0x1BE0u, 0, (uint64_t)&v200);
      v202 = *(_QWORD *)(v55 + 40);
      sub_22E894538((uint64_t)&v200, &v202);
      sub_22E903BEC((unsigned int *)&v200);
      goto LABEL_107;
    }
    v69 = v67;
    while (1)
    {
      v70 = *(_QWORD *)(v69 + 40);
      v71 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8);
      if ((v70 & 4) != 0 && v71)
      {
        v72 = sub_22F10C2A4(*(_QWORD *)(*v71 & 0xFFFFFFFFFFFFFFF0));
        if (v72 && (*(_DWORD *)(v72 + 28) & 0x7Fu) - 35 <= 2)
        {
          v73 = sub_22E906470(v72, (uint64_t)v193);
LABEL_134:
          v66 = v73;
          goto LABEL_135;
        }
      }
      else
      {
        if ((v70 & 4) != 0)
          v74 = 0;
        else
          v74 = v70 & 0xFFFFFFFFFFFFFFF8;
        if (v74)
          v75 = (*(_DWORD *)(v74 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
        else
          v75 = 0;
        if (v75)
        {
          v73 = sub_22EFBF86C(v74, (unint64_t *)&v200, 0);
          goto LABEL_134;
        }
      }
      v66 = 0;
LABEL_135:
      if ((*(_QWORD *)(v69 + 48) & 1) != 0)
        v69 = sub_22F3B44EC(v69);
      else
        v69 = *(_QWORD *)(v69 + 48);
      if (v69)
        v76 = v66;
      else
        v76 = 0;
      if (!v76)
        goto LABEL_118;
    }
  }
LABEL_174:
  if (sub_22F1CF68C(v51, 0x1A51u, 0, v50) != 1)
  {
    v96 = *(_QWORD *)(a1 + 8);
    if (v96)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v96 + 264))(v96, a1 + 2640);
    v97 = *(_QWORD *)(a1 + 2664);
    v98 = *(_QWORD *)(a1 + 2672);
    while (v97 != v98)
    {
      v99 = *(unsigned int *)(v97 + 16);
      if ((_DWORD)v99)
      {
        v100 = *(_QWORD *)(v97 + 8);
        v101 = v100 + 8 * v99;
        do
        {
          sub_22F331BD4(a1, *(_QWORD *)v97, *(_DWORD *)v100, *(_BYTE *)(v100 + 4));
          v100 += 8;
        }
        while (v100 != v101);
      }
      v97 += 56;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 736))
    *(_QWORD *)(a1 + 3344) = 0;
  if (v204 != v203)
    free(v204);
}

uint64_t sub_22E902CDC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v39;
  unint64_t v40;

  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v5 = 1;
  if ((sub_22EFC9084(v4, 1) & 1) == 0 && sub_22EFB948C(a2) <= 2)
  {
    v6 = *(_DWORD *)(a2 + 28);
    if ((v6 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v7 = *(_QWORD *)(a2 + 144);
      if ((v7 & 6) == 0)
      {
        v8 = v7 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          sub_22EFE95D4(v7 & 0xFFFFFFFFFFFFFFF8);
          v9 = *(_QWORD *)(sub_22EFE9368(v8) + 32);
          sub_22EFE95D4(v8);
          v10 = sub_22EFE9368(v8);
          v11 = *(_QWORD *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 40);
          while (v9 != v11)
          {
            v12 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8) + 112);
            v13 = sub_22E3CD31C((uint64_t *)(v12 + 104), v12);
            if ((sub_22E902CDC(a1, v13) & 1) != 0)
              return 1;
            v9 += 8;
          }
        }
      }
      v40 = 0;
      if (sub_22EFBF6E8(a2, &v40))
      {
        v14 = v40;
        goto LABEL_26;
      }
      v14 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 112) + 104), *(_QWORD *)(a2 + 112));
      if (v14 != a2)
        goto LABEL_26;
      v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v6 & 0x7Fu) - 67 < 0xFFFFFFF9)
      return 0;
    if ((v6 & 0x800) == 0)
    {
      v15 = (_BYTE *)a2;
      while ((v15[29] & 8) == 0)
      {
        v15 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 40))(v15);
        if (v15 == (_BYTE *)a2 || v15 == 0)
          goto LABEL_27;
      }
    }
    if ((sub_22EFBCA2C(a2, *(_QWORD *)(a1 + 88)) & 1) != 0)
      return 1;
LABEL_27:
    v18 = sub_22EFB6870(a2);
    if (v18)
    {
      v19 = v18;
      sub_22EFE95D4(v18);
      v20 = *(_QWORD *)(sub_22EFE9368(v19) + 32);
      sub_22EFE95D4(v19);
      v21 = sub_22EFE9368(v19);
      v22 = *(_QWORD *)(v21 + 32) + 8 * *(unsigned int *)(v21 + 40);
      while (v20 != v22)
      {
        v23 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v20 + 80) + 72), *(_QWORD *)(*(_QWORD *)v20 + 80));
        if ((sub_22E902CDC(a1, v23) & 1) != 0)
          return 1;
        v20 += 8;
      }
    }
    v24 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
    {
      v25 = *(_QWORD *)(a2 + 16);
      v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) != 0)
        v26 = *(_QWORD *)v26;
      for (i = *(_WORD *)(v26 + 8) & 0x7F; i != 83; i = *(_WORD *)(v26 + 8) & 0x7F)
      {
        v28 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v28 = -56;
            goto LABEL_52;
          }
          if (i == 81)
            goto LABEL_52;
        }
        else
        {
          if (i <= 0x18)
          {
            if (i == 16)
              goto LABEL_39;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_52;
            if (i == 24)
            {
LABEL_39:
              v28 = -48;
              goto LABEL_52;
            }
          }
          if (i == 70)
          {
            v28 = -64;
            goto LABEL_52;
          }
        }
        v29 = i - 52;
        if ((i - 33) >= 5)
          v30 = -48;
        else
          v30 = -64;
        if (v29 >= 6)
          v28 = v30;
        else
          v28 = -72;
LABEL_52:
        v31 = *(_QWORD *)(v26 + v28 + 16);
        v26 = v31 & 0xFFFFFFFFFFFFFFF8;
        if ((v31 & 4) != 0)
          v26 = *(_QWORD *)v26;
      }
      v24 = v26 - 40;
    }
    v32 = *(_QWORD *)(a2 + 80);
    if (v32)
    {
      v33 = 0;
      v34 = *(_QWORD *)(v24 + 88);
      v35 = *(_QWORD *)(a2 + 80);
      while (sub_22EFBBF74(v35, v34) != 2)
      {
        if ((*(_BYTE *)(v35 + 72) & 3) != 0)
        {
          if (v33)
            goto LABEL_67;
          v33 = 1;
        }
        v36 = sub_22E3CD31C((uint64_t *)(v35 + 72), v35);
        if (v36 != v32)
        {
          v35 = v36;
          if (v36)
            continue;
        }
LABEL_67:
        v37 = *(_QWORD *)(a2 + 80);
        goto LABEL_73;
      }
      v17 = a1;
      v14 = v35;
      return sub_22EA0548C(v17, v14) ^ 1;
    }
    v37 = 0;
LABEL_73:
    v39 = sub_22E3CD31C((uint64_t *)(v37 + 72), v37);
    if (v39 == a2)
      return 0;
    v14 = v39;
LABEL_26:
    v17 = a1;
    return sub_22EA0548C(v17, v14) ^ 1;
  }
  return v5;
}

unint64_t sub_22E903070(uint64_t a1, int a2)
{
  unint64_t result;
  __int16 v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;

  result = a1 + 216;
LABEL_2:
  result = *(_QWORD *)result;
  while (1)
  {
    while (1)
    {
      v3 = *(_WORD *)(result + 8);
      v4 = v3 & 0x7F;
      v5 = v4 - 33;
      if (v4 != 33 && v4 != 81 && (v4 - 1) > 1)
        break;
      if (v4 == 16)
        goto LABEL_24;
      v14 = -40;
      if (v4 > 69)
      {
        if (v4 == 70)
        {
          v14 = -64;
        }
        else if (v4 == 71)
        {
          v14 = -56;
        }
        else if (v4 != 81)
        {
LABEL_41:
          v19 = v4 - 52;
          v14 = -72;
          v17 = v5 >= 5;
          v20 = -48;
          if (!v17)
            v20 = -64;
          if (v19 >= 6)
            v14 = v20;
        }
      }
      else
      {
        if (v4 > 0x18)
          goto LABEL_41;
        if (((1 << v4) & 0x1066) == 0)
        {
          if (v4 != 24)
            goto LABEL_41;
LABEL_24:
          v14 = -48;
        }
      }
      v15 = *(_QWORD *)(result + v14 + 16);
      result = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        goto LABEL_2;
    }
    if ((a2 & 1) != 0
      || (v3 & 0x7Eu) - 54 > 3
      || (*(_QWORD *)(result - 32) & 7) != 6
      || *(_DWORD *)(*(_QWORD *)(result - 32) & 0xFFFFFFFFFFFFFFF8) != 42)
    {
      return result;
    }
    v6 = -40;
    if (((1 << v4) & 0x1066) == 0)
    {
      v16 = v4 - 52;
      v17 = (v4 - 33) >= 5;
      v18 = -48;
      if (!v17)
        v18 = -64;
      if (v16 >= 6)
        v6 = v18;
      else
        v6 = -72;
    }
    v7 = *(_QWORD *)(result + v6 + 16);
    v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
      v8 = (_QWORD *)*v8;
    v9 = v8 ? (uint64_t)(v8 - 8) : 0;
    v10 = *(_QWORD *)(v9 + 128);
    if (!v10 || ((*(unsigned __int16 *)(v10 + 8) | (*(unsigned __int8 *)(v10 + 10) << 16)) & 0x100000) == 0)
      return result;
    v21 = a2;
    v11 = *(_QWORD *)(sub_22EFCAD5C(result) + 16);
    v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 4) != 0)
      v12 = (_QWORD *)*v12;
    v13 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)v12) + 16);
    result = v13 & 0xFFFFFFFFFFFFFFF8;
    a2 = v21;
    if ((v13 & 4) != 0)
      goto LABEL_2;
  }
}

unint64_t sub_22E90328C(uint64_t a1)
{
  unint64_t v1;
  __int16 v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v1 = sub_22E903070(a1, 0);
  v2 = *(_WORD *)(v1 + 8);
  if ((v2 & 0x7Eu) - 34 <= 3)
  {
    do
    {
      v4 = v2 & 0x7F;
      v5 = -40;
      if (v4 > 70)
      {
        if (v4 != 83)
        {
          if (v4 == 71)
          {
            v5 = -56;
          }
          else if (v4 != 81)
          {
            goto LABEL_18;
          }
        }
      }
      else
      {
        if (v4 > 0x18)
          goto LABEL_17;
        if (v4 == 16)
          goto LABEL_8;
        if (((1 << v4) & 0x1066) != 0)
          goto LABEL_9;
        if (v4 == 24)
        {
LABEL_8:
          v5 = -48;
        }
        else
        {
LABEL_17:
          if (v4 != 70)
          {
LABEL_18:
            v7 = v4 - 52;
            if ((v4 - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v5 = v8;
            else
              v5 = -72;
            goto LABEL_9;
          }
          v5 = -64;
        }
      }
LABEL_9:
      v6 = *(_QWORD *)(v1 + v5 + 16);
      v1 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v1 = *(_QWORD *)v1;
      v2 = *(_WORD *)(v1 + 8);
    }
    while ((v2 & 0x7Eu) - 34 < 4);
  }
  if ((v2 & 0x7F) == 0x18)
    return v1 - 48;
  else
    return 0;
}

unint64_t sub_22E903398(uint64_t a1)
{
  unint64_t v1;
  __int16 v2;
  int v3;
  uint64_t v4;

  v1 = sub_22E903070(a1, 0);
  v2 = *(_WORD *)(v1 + 8);
  v3 = v2 & 0x7F;
  if (v3 == 24)
    goto LABEL_6;
  if ((v2 & 0x7Eu) - 52 <= 5)
  {
    v4 = -40;
    if (v3 > 70)
    {
      if (v3 == 81 || v3 == 83)
        return v1 + v4;
      if (v3 != 71)
        goto LABEL_15;
      v4 = -56;
      return v1 + v4;
    }
    if (v3 > 0x18)
      goto LABEL_14;
    if (v3 != 16)
    {
      if (((1 << v3) & 0x1066) != 0)
        return v1 + v4;
      if (v3 != 24)
      {
LABEL_14:
        if (v3 == 70)
        {
          v4 = -64;
          return v1 + v4;
        }
LABEL_15:
        if ((v3 - 52) < 6)
        {
          v4 = -72;
        }
        else
        {
          v4 = -48;
          if ((v3 - 33) < 5)
            v4 = -64;
        }
        return v1 + v4;
      }
    }
LABEL_6:
    v4 = -48;
    return v1 + v4;
  }
  return 0;
}

void sub_22E903474(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned int v22[24];
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v4 = sub_22EE03478(a1);
  if (!v5)
    goto LABEL_13;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 104);
  v8 = sub_22F1CEE18(*(_DWORD *)(v7 + 316));
  if (!v8)
    goto LABEL_13;
  v9 = *(_DWORD *)(v8 + 1) >> 6;
  if (v9 != 3)
  {
    if (v9 == 1)
    {
      if (v6)
      {
        v28 = 0;
        v29 = 0;
        v27 = v7;
        v16 = *(_DWORD *)(v7 + 312);
        sub_22E9066F8(&v20, &v27, (unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 2128));
        v30 = v16;
        if (!*(_BYTE *)(v6 + 12))
          sub_22E9065F8(v6 + 24, &v30, (uint64_t)&v20);
        v11 = v20;
        if (!v20)
          goto LABEL_24;
        v12 = v21;
        if (!v21)
          goto LABEL_24;
LABEL_23:
        sub_22E3BB10C(v12, (unint64_t)v11);
LABEL_24:
        v7 = *(_QWORD *)(a1 + 104);
      }
LABEL_25:
      if (*(_DWORD *)(v7 + 180) == 5)
        *(_BYTE *)(v7 + 170) = 1;
      *(_DWORD *)(v7 + 180) = 0;
      *(_DWORD *)(v7 + 316) = -1;
      return;
    }
    if (!(*(_DWORD *)(v8 + 1) >> 6))
    {
      ++*(_DWORD *)(a1 + 8456);
      if (v6 && !*(_BYTE *)(v6 + 12))
      {
        v28 = 0;
        v29 = 0;
        v27 = v7;
        v10 = *(_DWORD *)(v7 + 312);
        sub_22E9066F8(&v25, &v27, (unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 2128));
        sub_22E903704(v6, v10, (uint64_t)&v25);
        v11 = v25;
        if (!v25)
          goto LABEL_24;
        v12 = v26;
        if (!v26)
          goto LABEL_24;
        goto LABEL_23;
      }
      goto LABEL_25;
    }
    goto LABEL_13;
  }
  if (!*(_BYTE *)(a1 + 10664) && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 2) == 0)
  {
LABEL_13:
    v13 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(v13 + 15104) = sub_22E8FCD8C(v13, *(_QWORD *)(a1 + 80));
    *(_QWORD *)(v13 + 15112) = v14;
    if (sub_22F1CCF1C(*(_QWORD *)(a1 + 104), 0))
    {
      if (a2 > 0x2118 || (v15 = sub_22F1CEE18(a2)) == 0 || (*(_DWORD *)(v15 + 1) & 0x38) != 8)
        sub_22F308DE8(a1);
    }
    return;
  }
  v17 = *(unsigned int *)(v7 + 312);
  ++*(_DWORD *)(a1 + 8456);
  if (v6 && !*(_BYTE *)(v6 + 12))
  {
    v28 = 0;
    v29 = 0;
    v27 = v7;
    v18 = *(_DWORD *)(v7 + 312);
    sub_22E9066F8(&v23, &v27, (unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 2128));
    sub_22E903704(v6, v18, (uint64_t)&v23);
    if (v23 && v24)
    {
      sub_22E3BB10C(v24, (unint64_t)v23);
      v23 = 0;
    }
    v7 = *(_QWORD *)(a1 + 104);
  }
  if (*(_DWORD *)(v7 + 180) == 5)
    *(_BYTE *)(v7 + 170) = 1;
  *(_DWORD *)(v7 + 180) = 0;
  *(_DWORD *)(v7 + 316) = -1;
  sub_22E8FCA40(v22, a1, v17, 6450, 0);
  sub_22E903BEC(v22);
  v19 = *(_QWORD *)(a1 + 104);
  if (*(_DWORD *)(v19 + 180) == 5)
    *(_BYTE *)(v19 + 170) = 1;
  *(_DWORD *)(v19 + 180) = 0;
}

uint64_t sub_22E903704(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v12 = a2;
  if (!*(_BYTE *)(result + 12))
  {
    v4 = result;
    v5 = result + 24;
    v6 = *(_QWORD *)(result + 24);
    v7 = *(unsigned int *)(result + 32);
    if ((_DWORD)v7)
    {
      v8 = 32 * v7;
      do
      {
        v9 = v6 + v8;
        v10 = *(_QWORD *)(v6 + v8 - 24);
        if (v10)
        {
          v11 = *(_QWORD *)(v9 - 16);
          if (v11)
          {
            sub_22E3BB10C(v11, v10);
            *(_QWORD *)(v9 - 24) = 0;
          }
        }
        v8 -= 32;
      }
      while (v8);
    }
    *(_DWORD *)(v4 + 32) = 0;
    result = sub_22E9065F8(v5, &v12, a3);
    *(_BYTE *)(v4 + 12) = 1;
  }
  return result;
}

unsigned int *sub_22E90379C@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];

  sub_22E8FCA40(a1, a2, *(_DWORD *)(a3 + 16), a4, (uint64_t)v10);
  v7 = sub_22E903820((uint64_t)v10, (unsigned __int8 **)a3);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_OWORD *)(a5 + 9) = v8;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a5 + 32, v7 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

uint64_t sub_22E903820(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22E906864(a2, (unsigned __int8 **)(a1 + 32));
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v4 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v8 = v5;
    v6 = sub_22F2F1D6C(v4, &v8);
    sub_22E892708(v6[1] + 32 * *(unsigned int *)(a1 + 88) + 8, (uint64_t)a2);
  }
  return a1;
}

uint64_t sub_22E9038B8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 169))
    return 1;
  v3 = *(_QWORD *)(a1 + 216);
  if (v3)
    v4 = (*(_WORD *)(v3 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
  else
    v4 = 0;
  if (!v4)
    return 0;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 72) + 32))(v3 - 72);
  v14 = 0;
  if (sub_22E8902B8((uint64_t *)(a1 + 12784), &v18, &v14))
  {
    v5 = v14;
    v6 = *(_QWORD *)(a1 + 12784);
    v7 = *(unsigned int *)(a1 + 12800);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 12784);
    v7 = *(unsigned int *)(a1 + 12800);
    v5 = v6 + 32 * v7;
  }
  if (v5 == v6 + 32 * v7)
    return 0;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  if (v8 == v9)
    return 0;
  v10 = v8 + 32;
  do
  {
    LODWORD(v14) = *(_DWORD *)(v10 - 32);
    sub_22E78D434((uint64_t)&v15, (uint64_t *)(v10 - 24));
    if (v17 > 0x2118)
    {
      v1 = 0;
    }
    else
    {
      v11 = sub_22F1CEE18(v17);
      if (v11)
        v1 = ((unint64_t)*(unsigned int *)(v11 + 1) >> 2) & 1;
      else
        v1 = 1;
    }
    if (v15 && v16)
      sub_22E3BB10C(v16, v15);
    if (v10 == v9)
      v12 = 1;
    else
      v12 = v1;
    v10 += 32;
  }
  while (v12 != 1);
  return v1;
}

uint64_t sub_22E903A04(uint64_t a1, int a2, int a3, int a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[3];
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  _QWORD *v25;
  int v26;

  *(_QWORD *)a1 = a6;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_BYTE *)(a1 + 32) = 0;
  v10 = a1 + 32;
  *(_BYTE *)(a1 + 24) = (a2 & 0xFFFFFFFE) == 2;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  if ((a2 - 1) >= 2)
  {
    if (a2 == 3)
    {
      v12 = a5 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5) : 0;
      v21 = v12;
      v17 = sub_22F2F1D6C(a6 + 1598, (uint64_t *)&v21);
      *(_DWORD *)(a1 + 88) = (v17[2] - v17[1]) >> 5;
      *(_BYTE *)(a1 + 92) = 1;
      v18 = a6[11] + 2128;
      v21 = 0;
      v22 = v18;
      LODWORD(v23) = a4;
      sub_22F308E44((uint64_t)(v17 + 1), a3, (uint64_t)&v21);
      if (v21)
      {
        if (v22)
          sub_22E3BB10C(v22, v21);
      }
    }
  }
  else
  {
    v11 = a6[13];
    *(_DWORD *)(v11 + 312) = a3;
    *(_DWORD *)(v11 + 316) = a4;
    if (*(char *)(v11 + 311) < 0)
    {
      **(_BYTE **)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v11 + 288) = 0;
      *(_BYTE *)(v11 + 311) = 0;
    }
    v19[0] = v11 + 320;
    v19[1] = 0;
    *(_BYTE *)(v11 + 320) = 0;
    *(_DWORD *)(v11 + 664) = 0;
    v13 = *(unsigned int *)(v11 + 776);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD *)(v11 + 768);
      v15 = 56 * v13;
      do
      {
        if (*(char *)(v14 + v15 - 9) < 0)
          operator delete(*(void **)(v14 + v15 - 32));
        v15 -= 56;
      }
      while (v15);
    }
    *(_DWORD *)(v11 + 776) = 0;
    v21 = v11 + 320;
    v22 = 0;
    v19[2] = 0;
    v20 = 0;
    v25 = a6;
    v26 = a4;
    if (*(_BYTE *)(a1 + 80))
      sub_22E9073E8(v10);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 32) = v11 + 320;
    *(_WORD *)(a1 + 56) = 1;
    v23 = 0;
    v24 = 0;
    *(_QWORD *)(a1 + 64) = v25;
    *(_DWORD *)(a1 + 72) = v26;
    *(_BYTE *)(a1 + 80) = 1;
    sub_22E9073E8((uint64_t)&v21);
    sub_22E3BB0B8((uint64_t)v19);
  }
  return a1;
}

unsigned int *sub_22E903BEC(unsigned int *a1)
{
  int v2;

  if (*((_BYTE *)a1 + 80))
  {
    v2 = sub_22F1CF5F4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 32), a1[3], a1[2], *(_QWORD *)(*(_QWORD *)a1 + 104));
    sub_22E9073E8(a1 + 8);
    *((_BYTE *)a1 + 80) = 0;
    if (v2 >= 3)
    {
      if (*((_BYTE *)a1 + 24))
      {
        sub_22E903C74(*(_QWORD *)a1, *((_QWORD *)a1 + 2));
        if (*((_BYTE *)a1 + 80))
        {
          sub_22E9073E8(a1 + 8);
          *((_BYTE *)a1 + 80) = 0;
        }
      }
    }
  }
  return a1;
}

uint64_t sub_22E903C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE *v5;
  BOOL v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  if (a2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  else
    v3 = 0;
  v18 = 0;
  result = sub_22F28501C(*(_QWORD *)(a1 + 12832), *(_DWORD *)(a1 + 12848), v3, &v18);
  v5 = v18;
  if ((_DWORD)result)
    v6 = v18 == (_BYTE *)(*(_QWORD *)(a1 + 12832) + 24 * *(unsigned int *)(a1 + 12848));
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v7 = *(_QWORD *)(a1 + 104);
      if (*(_BYTE *)(v7 + 170))
        break;
      *(_DWORD *)(v7 + 312) = *((_DWORD *)v5 + 4);
      *(_DWORD *)(v7 + 316) = 5466;
      if (*(char *)(v7 + 311) < 0)
      {
        **(_BYTE **)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v7 + 288) = 0;
        *(_BYTE *)(v7 + 311) = 0;
      }
      v8 = (unsigned __int8 *)(v7 + 320);
      v18 = (_BYTE *)(v7 + 320);
      v19 = 0;
      v20 = v7;
      v21 = 1;
      *(_BYTE *)(v7 + 320) = 0;
      *(_DWORD *)(v7 + 664) = 0;
      v9 = *(unsigned int *)(v7 + 776);
      if ((_DWORD)v9)
      {
        v13 = *(_QWORD *)(v7 + 768);
        v14 = 56 * v9;
        do
        {
          if (*(char *)(v13 + v14 - 9) < 0)
            operator delete(*(void **)(v13 + v14 - 32));
          v14 -= 56;
        }
        while (v14);
        v8 = v18;
        *(_DWORD *)(v7 + 776) = 0;
        v15 = *((_QWORD *)v5 + 1);
        v10 = (uint64_t *)(v5 + 8);
        v11 = v15;
        if (!v8)
        {
          v8 = (unsigned __int8 *)sub_22E3B8AAC(v19);
          v18 = v8;
        }
      }
      else
      {
        *(_DWORD *)(v7 + 776) = 0;
        v12 = *((_QWORD *)v5 + 1);
        v10 = (uint64_t *)(v5 + 8);
        v11 = v12;
      }
      v8[*v8 + 1] = 11;
      v16 = v18;
      v17 = *v18;
      *v18 = v17 + 1;
      *(_QWORD *)&v16[8 * v17 + 16] = v11;
      v22 = 0;
      v5 = (_BYTE *)(sub_22F28501C(*(_QWORD *)(a1 + 12832), *(_DWORD *)(a1 + 12848), *v10, &v22)
                   ? v22
                   : *(_QWORD *)(a1 + 12832) + 24 * *(unsigned int *)(a1 + 12848));
      result = sub_22E3BB0B8((uint64_t)&v18);
    }
    while (v5 != (_BYTE *)(*(_QWORD *)(a1 + 12832) + 24 * *(unsigned int *)(a1 + 12848)));
  }
  return result;
}

uint64_t sub_22E903E38(uint64_t result, unint64_t a2, int a3, uint64_t a4)
{
  unsigned int v5;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[4];
  unint64_t v25;
  llvm *v26[2];
  unsigned int v27;
  uint64_t v28;
  int v29;

  v29 = a3;
  v28 = a4;
  v5 = *(_DWORD *)(*(_QWORD *)(result + 3688) + 576 * *(unsigned int *)(result + 3696) - 576);
  if (v5 <= 3 && v5 != 2 || a2 < 0x10)
    return result;
  v10 = (_QWORD *)result;
  if (a4 && (*(_BYTE *)(*(_QWORD *)(result + 72) + 104) & 4) != 0)
  {
    llvm::deallocate_buffer(0, 0);
    v26[0] = 0;
    v26[1] = 0;
    v27 = 0;
    sub_22ED559D4(v10, a3, (uint64_t)v26, a4);
    llvm::deallocate_buffer(v26[0], (void *)(8 * v27));
    llvm::deallocate_buffer(0, 0);
  }
  v11 = v10[28];
  if (!v11)
    v11 = v10[27];
  v12 = *(_WORD *)(v11 + 8) & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 != 83)
    {
      if (v12 == 71)
      {
        v13 = -56;
        goto LABEL_30;
      }
      if (v12 == 81)
        goto LABEL_30;
LABEL_25:
      if (v12 - 52 < 6)
      {
        v13 = -72;
      }
      else
      {
        v13 = -48;
        if (v12 - 33 < 5)
          v13 = -64;
      }
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_24;
    if (v12 != 16)
    {
      if (((1 << v12) & 0x1066) != 0)
        goto LABEL_30;
      if (v12 != 24)
      {
LABEL_24:
        if (v12 == 70)
        {
          v13 = -64;
          goto LABEL_30;
        }
        goto LABEL_25;
      }
    }
    v13 = -48;
  }
LABEL_30:
  v14 = v11 + v13;
  if ((*(_DWORD *)(v11 + v13 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC
    || ((result = sub_22EFD3B9C(v14), (result & 1) == 0) && (result = sub_22EFD3F30(v14), !(_DWORD)result)
     || (*(_BYTE *)(v14 + 82) & 0x80) == 0)
    && ((*(_DWORD *)(v14 + 28) & 0x7F) != 0x37
     || (LODWORD(v23[0]) = 0, result = sub_22EFD8088(v14, (int *)v23), !(_DWORD)result)
     || (*(_BYTE *)(v14 + 82) & 0x80) == 0))
  {
    v15 = (*(_DWORD *)(v14 + 28) & 0x7E) - 52;
    if (v15 >= 6)
      v16 = 0;
    else
      v16 = v14;
    if (a4 && v15 >= 6)
    {
      if ((*(_DWORD *)(a4 + 28) & 0x7Eu) - 52 >= 6)
        v16 = 0;
      else
        v16 = a4;
    }
    v25 = v16;
    v24[0] = v10;
    v24[1] = &v28;
    v24[2] = &v29;
    v24[3] = &v25;
    v23[0] = v10;
    v23[1] = v24;
    v23[2] = &v28;
    v23[3] = &v29;
    v23[4] = &v25;
    result = sub_22E9040F8((uint64_t)v23, a2, 0);
    v17 = a2 & 0xFFFFFFFFFFFFFFF0;
    v18 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v19 = *(unsigned __int8 *)(v18 + 16);
    if (v18 && v19 == 26)
    {
      if ((unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38))
      {
        v20 = (uint64_t *)(v18 + 40);
        v21 = 8 * (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38);
        do
        {
          v22 = *v20++;
          sub_22E9040F8((uint64_t)v23, v22, 0);
          v21 -= 8;
        }
        while (v21);
      }
      result = sub_22E9040F8((uint64_t)v23, *(_QWORD *)(v18 + 24), 1);
      v18 = *(_QWORD *)v17;
      v19 = *(unsigned __int8 *)(*(_QWORD *)v17 + 16);
    }
    if (v19 == 25)
      return sub_22E9040F8((uint64_t)v23, *(_QWORD *)(v18 + 24), 1);
  }
  return result;
}

uint64_t sub_22E9040F8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  const char *v15;
  _BYTE *v16;
  char v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::APFloatBase *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  const char *v37;
  unsigned __int8 *v38;
  char v39;
  const char *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  const char *v55;
  _BYTE *v56;
  char v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  _BOOL4 v71;
  const char *v73;
  _BYTE *v74;
  char v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned int v88;
  unsigned __int8 v89;
  unsigned int v90[24];
  _BYTE *v91;
  uint64_t v92;
  int v93;
  uint64_t v94[2];

  v86 = a2;
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  if ((*(_BYTE *)(v7 + 104) & 4) == 0)
  {
    v8 = *(_QWORD *)(v7 + 72);
    v9 = !(_DWORD)v8 || (v8 & 0x800000000) == 0;
    if (v9 && (*(_WORD *)(v7 + 96) & 0x80) == 0)
    {
      v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_75;
    }
  }
  v11 = *(_QWORD *)(a1 + 8);
  v94[0] = a2;
  v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v12 + 17) & 4) != 0)
    goto LABEL_75;
  v13 = *(_QWORD **)v11;
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v14 != 11)
  {
    if (v14 == 9)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13[11] + 15088) + 56))(*(_QWORD *)(v13[11] + 15088)) & 1) != 0)
        goto LABEL_75;
      v92 = v13[11] + 2128;
      v93 = 4777;
      v15 = **(const char ***)(v11 + 8);
      v16 = (_BYTE *)sub_22E3B8AAC(v92);
      v91 = v16;
      if (v15)
        v17 = 11;
      else
        v17 = 1;
      v18 = "expression";
      if (v15)
        v18 = v15;
      v19 = *v16;
      v16[v19 + 1] = v17;
      *v16 = v19 + 1;
      *(_QWORD *)&v16[8 * v19 + 16] = v18;
      sub_22F3094A0((uint64_t)v90, v13, **(_DWORD **)(v11 + 16), (uint64_t)&v91, **(_BYTE ***)(v11 + 24));
      v89 = 0;
      v20 = sub_22E894E38((uint64_t)v90, &v89);
      v88 = 0;
      v21 = sub_22E8900C4(v20, (int *)&v88);
      v87 = 0;
      v22 = sub_22E894E38(v21, &v87);
      v23 = sub_22E8901B8(v22, v94);
      sub_22E90749C(v23, (_BYTE *)(*(_QWORD *)(v13[11] + 15088) + 32));
      goto LABEL_71;
    }
    goto LABEL_25;
  }
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FEu) - 210 > 7
    || sub_22EF5CDF0(v13[11], v12) != 128
    || ((v24 = (llvm::APFloatBase *)sub_22EF5B2E0(v13[11], a2),
         v25 = llvm::APFloatBase::PPCDoubleDouble(v24),
         v26 = **(_QWORD **)(v13[11] + 15088),
         v24 == (llvm::APFloatBase *)v25)
      ? (v27 = *(uint64_t (**)(void))(v26 + 120))
      : (v27 = *(uint64_t (**)(void))(v26 + 88)),
        (v27() & 1) != 0))
  {
LABEL_25:
    v85 = 0;
    goto LABEL_26;
  }
  v85 = 1;
LABEL_26:
  v28 = *v10;
  v29 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_DWORD *)(v29 + 16);
  if (v29)
    v31 = (v30 & 0xFF800FF) == 112197643;
  else
    v31 = 0;
  if (v31)
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13[11] + 15088) + 96))(*(_QWORD *)(v13[11] + 15088)))
      goto LABEL_61;
    v28 = *v10;
    v29 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
    v30 = *(_DWORD *)(v29 + 16);
  }
  if ((v30 & 0xFF800FF) == 0x6C0000B)
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13[11] + 15088) + 88))(*(_QWORD *)(v13[11] + 15088)))
      goto LABEL_61;
    v28 = *v10;
    v29 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
    v30 = *(_DWORD *)(v29 + 16);
  }
  if ((v30 & 0xFF800FF) == 0x6C8000B)
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13[11] + 15088) + 120))(*(_QWORD *)(v13[11] + 15088)))
      goto LABEL_61;
    v28 = *v10;
    v29 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
    v30 = *(_DWORD *)(v29 + 16);
  }
  if (v30 == 9)
    goto LABEL_48;
  if (v30 == 44)
  {
    v32 = sub_22F114198(*(_QWORD *)(v29 + 24));
    if ((*(_BYTE *)(v32 + 74) & 1) == 0 && *(_QWORD *)(v32 + 128) < 8uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v29 + 24)) + 76) & 0x80) != 0)
    {
      goto LABEL_50;
    }
    v28 = *v10;
LABEL_48:
    if (sub_22EF5CDF0(v13[11], v28) == 128
      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13[11] + 15088) + 48))(*(_QWORD *)(v13[11] + 15088)))
    {
      goto LABEL_61;
    }
    goto LABEL_50;
  }
  if (v30 == 11 && ((v30 >> 19) & 0x1FE) - 166 < 0x14)
    goto LABEL_48;
LABEL_50:
  v33 = *(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v33)
    v34 = (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 112721931;
  else
    v34 = 0;
  if (!v34
    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13[11] + 15088) + 104))(*(_QWORD *)(v13[11] + 15088)) & 1) != 0)
  {
    if (!v85)
      goto LABEL_75;
LABEL_61:
    v36 = v13[11] + 2128;
    v91 = 0;
    v92 = v36;
    v93 = 4777;
    v37 = **(const char ***)(v11 + 8);
    v38 = (unsigned __int8 *)sub_22E3B8AAC(v36);
    v91 = v38;
    if (v37)
      v39 = 11;
    else
      v39 = 1;
    v40 = "expression";
    if (v37)
      v40 = v37;
    v38[*v38 + 1] = v39;
    v41 = v91;
    v42 = *v91;
    *v91 = v42 + 1;
    *(_QWORD *)&v41[8 * v42 + 16] = v40;
    sub_22F3094A0((uint64_t)v90, v13, **(_DWORD **)(v11 + 16), (uint64_t)&v91, **(_BYTE ***)(v11 + 24));
    v89 = 1;
    v43 = sub_22E894E38((uint64_t)v90, &v89);
    v88 = sub_22EF5CDF0(v13[11], *(_QWORD *)(v94[0] & 0xFFFFFFFFFFFFFFF0));
    v44 = sub_22E89519C(v43, &v88);
    v45 = sub_22E8901B8(v44, v94);
    v87 = 0;
    v46 = sub_22E894E38(v45, &v87);
    LODWORD(v43) = *(unsigned __int8 *)(sub_22E90749C(v46, (_BYTE *)(*(_QWORD *)(v13[11] + 15088) + 32)) + 80);
    sub_22E903BEC(v90);
    v47 = *(uint64_t **)(v11 + 8);
    if ((_DWORD)v43)
    {
      if (!*v47)
        goto LABEL_72;
      sub_22EFC77E8(*v47, 1);
      v47 = *(uint64_t **)(v11 + 8);
    }
    v48 = *v47;
    if (v48)
    {
      sub_22F308EA4(v13, *(_DWORD *)(v48 + 24), 0x15A7u, **(_BYTE ***)(v11 + 24), (uint64_t)v90);
      sub_22E890024((uint64_t)v90, *(uint64_t **)(v11 + 8));
LABEL_71:
      sub_22E903BEC(v90);
    }
LABEL_72:
    if (v91 && v92)
      sub_22E3BB10C(v92, (unint64_t)v91);
    goto LABEL_75;
  }
  v35 = v85;
  if ((*(_WORD *)(v13[9] + 96) & 0x80) == 0)
    v35 = 1;
  if ((v35 & 1) != 0)
    goto LABEL_61;
LABEL_75:
  v49 = v10[1];
  v50 = *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v50 + 8) & 0xF) != 0)
    v50 = (unint64_t)sub_22F10D2BC(v49 | a2 & 7);
  v51 = v50 & 0xFFFFFFFFFFFFFFF0;
  v52 = *(_QWORD *)(v6[11] + 15088);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 128))(v52);
  if ((result & 1) == 0)
  {
    v54 = v6[11];
    if (v51 == *(_QWORD *)(v54 + 16576))
    {
      v92 = v54 + 2128;
      v93 = 4777;
      v55 = **(const char ***)(a1 + 16);
      v56 = (_BYTE *)sub_22E3B8AAC(v54 + 2128);
      v91 = v56;
      if (v55)
        v57 = 11;
      else
        v57 = 1;
      v58 = "expression";
      if (v55)
        v58 = v55;
      v59 = *v56;
      v56[v59 + 1] = v57;
      *v56 = v59 + 1;
      *(_QWORD *)&v56[8 * v59 + 16] = v58;
      sub_22E90379C(v6, **(_DWORD **)(a1 + 24), (uint64_t)&v91, **(_QWORD **)(a1 + 32) != 0, (uint64_t)v90);
      LOBYTE(v88) = 0;
      v60 = sub_22E894E38((uint64_t)v90, (unsigned __int8 *)&v88);
      LODWORD(v94[0]) = 0;
      v61 = sub_22E8900C4(v60, (int *)v94);
      v62 = sub_22E8901B8(v61, &v86);
      v89 = 0;
      v63 = sub_22E894E38(v62, &v89);
      v64 = *(unsigned __int8 *)(sub_22E90749C(v63, (_BYTE *)(*(_QWORD *)(v6[11] + 15088) + 32)) + 80);
      result = (uint64_t)sub_22E903BEC(v90);
      v65 = *(uint64_t **)(a1 + 16);
      if (v64)
      {
        result = *v65;
        if (!*v65)
        {
LABEL_89:
          if (v91)
          {
            result = v92;
            if (v92)
              result = sub_22E3BB10C(v92, (unint64_t)v91);
          }
          goto LABEL_92;
        }
        result = sub_22EFC77E8(result, 1);
        v65 = *(uint64_t **)(a1 + 16);
      }
      v66 = *v65;
      if (v66)
      {
        sub_22F308EA4(v6, *(_DWORD *)(v66 + 24), 0x15A7u, **(_BYTE ***)(a1 + 32), (uint64_t)v90);
        sub_22E890024((uint64_t)v90, *(uint64_t **)(a1 + 16));
        result = (uint64_t)sub_22E903BEC(v90);
      }
      goto LABEL_89;
    }
  }
LABEL_92:
  if (a3)
  {
    v67 = v6[11];
    v68 = *(_QWORD *)(v67 + 16560);
    v69 = *(_QWORD *)(v67 + 16568);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 136))(v52);
    v70 = v51 == v69 || v51 == v68;
    v71 = v70;
    if (!(_DWORD)result && v71)
    {
      v92 = v6[11] + 2128;
      v93 = 4777;
      v73 = **(const char ***)(a1 + 16);
      v74 = (_BYTE *)sub_22E3B8AAC(v92);
      v91 = v74;
      if (v73)
        v75 = 11;
      else
        v75 = 1;
      v76 = "expression";
      if (v73)
        v76 = v73;
      v77 = *v74;
      v74[v77 + 1] = v75;
      *v74 = v77 + 1;
      *(_QWORD *)&v74[8 * v77 + 16] = v76;
      sub_22E90379C(v6, **(_DWORD **)(a1 + 24), (uint64_t)&v91, **(_QWORD **)(a1 + 32) != 0, (uint64_t)v90);
      LOBYTE(v88) = 0;
      v78 = sub_22E894E38((uint64_t)v90, (unsigned __int8 *)&v88);
      LODWORD(v94[0]) = 0;
      v79 = sub_22E8900C4(v78, (int *)v94);
      v80 = sub_22E8901B8(v79, &v86);
      v89 = 1;
      v81 = sub_22E894E38(v80, &v89);
      v82 = *(unsigned __int8 *)(sub_22E90749C(v81, (_BYTE *)(*(_QWORD *)(v6[11] + 15088) + 32)) + 80);
      result = (uint64_t)sub_22E903BEC(v90);
      v83 = *(uint64_t **)(a1 + 16);
      if (v82)
      {
        result = *v83;
        if (!*v83)
        {
LABEL_113:
          if (v91)
          {
            result = v92;
            if (v92)
              return sub_22E3BB10C(v92, (unint64_t)v91);
          }
          return result;
        }
        result = sub_22EFC77E8(result, 1);
        v83 = *(uint64_t **)(a1 + 16);
      }
      v84 = *v83;
      if (v84)
      {
        sub_22F308EA4(v6, *(_DWORD *)(v84 + 24), 0x15A7u, **(_BYTE ***)(a1 + 32), (uint64_t)v90);
        sub_22E890024((uint64_t)v90, *(uint64_t **)(a1 + 16));
        result = (uint64_t)sub_22E903BEC(v90);
      }
      goto LABEL_113;
    }
  }
  return result;
}

uint64_t **sub_22E90490C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t v6;

  if (!a2)
    return 0;
  v3 = sub_22EFCC008(a2);
  v4 = *(uint64_t ***)(a1 + 12888);
  if (v4)
  {
    v5 = v3;
    do
    {
      if (((_BYTE)v4[1] & 0x88) != 0)
      {
        v6 = (uint64_t)v4[45];
        if (v6)
        {
          if (v5 == sub_22EFCC008(v6))
            break;
        }
      }
      v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
  return v4;
}

uint64_t sub_22E904974(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  if (*(_DWORD *)(a1 + 1904) || (v2 = *(_QWORD *)(a1 + 1888)) == 0)
  {
    v4 = operator new();
    result = sub_22E90755C(v4, *(_QWORD *)(a1 + 104));
  }
  else
  {
    result = (uint64_t)sub_22E8FBAC0(v2);
    v4 = *(_QWORD *)(a1 + 1888);
    *(_QWORD *)(a1 + 1888) = 0;
  }
  v5 = *(_DWORD *)(a1 + 1904);
  if (v5 >= *(_DWORD *)(a1 + 1908))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 1904);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 1904);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72))
    return sub_22F33BC00(a1);
  return result;
}

uint64_t sub_22E904A34(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = *(unsigned int *)(a1 + 1904);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 1896);
  if (a2)
  {
    v7 = v3 - 8;
    v8 = 8 * v2;
    while (v8)
    {
      v4 = *(_QWORD *)(v7 + v8);
      v5 = *(_DWORD *)(v4 + 8) & 7;
      v8 -= 8;
      if (v5 == 2 || (*(_DWORD *)(v4 + 8) & 7u) - 4 <= 0xFFFFFFFC)
        goto LABEL_4;
    }
    return 0;
  }
  v4 = *(_QWORD *)(v3 + 8 * v2 - 8);
  v5 = *(_DWORD *)(v4 + 8) & 7;
LABEL_4:
  if (v5 != 2)
    v4 = 0;
  if (v4)
  {
    v10 = *(_QWORD *)(v4 + 1480);
    if (v10)
    {
      v12 = v4;
      v11 = sub_22EFCBE78(v10 + 64, *(_QWORD *)(a1 + 216));
      v4 = v12;
      if (!v11)
        return 0;
    }
  }
  return v4;
}

void sub_22E904AD8(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int *v5;
  _DWORD *v6;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  int *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t *v69;
  uint64_t *v70;
  _DWORD *v72;
  unsigned int v74[24];
  uint64_t v75;
  char v76;
  uint64_t v77[3];
  int v78;
  int v79;
  char v80;
  int v81;
  int v82[3];

  v5 = a3;
  v6 = a2;
  v9 = *(_QWORD **)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  v10 = v9[49];
  if (v10 == v9[48])
    v11 = (unsigned int *)v9 + 101;
  else
    v11 = (unsigned int *)(v9 + 50);
  v12 = *v11;
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = (unint64_t *)v9[49];
    while (*v14 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
        goto LABEL_51;
    }
  }
  else
  {
    v14 = (unint64_t *)v9[49];
  }
  v15 = (unint64_t *)(v10 + 8 * v12);
  if (v14 == v15)
    goto LABEL_51;
  v69 = a5;
  v17 = *v14;
LABEL_12:
  v18 = *(unsigned int *)(v17 + 112);
  if (!(_DWORD)v18)
    goto LABEL_47;
  v19 = *(_QWORD **)(v17 + 104);
  v20 = &v19[2 * v18];
  do
  {
    v21 = *v19 & 0xFFFFFFFFFFFFFFF8;
    if (sub_22E49C868(v21))
    {
      if ((*(_BYTE *)(v17 + 50) & 2) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 212) & 1) != 0)
        goto LABEL_39;
      *(_DWORD *)(v21 + 96) |= 0x200000u;
    }
    v22 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 48);
    for (i = v22; ; i = *(_QWORD *)(v26 + 32))
    {
      v24 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
      if (v24)
        v25 = (*(_DWORD *)(v24 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v25 = 0;
      if (v25)
      {
        v26 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
        continue;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        break;
      v26 = sub_22F10CF48(v24);
      if (!v26)
        break;
    }
    v27 = sub_22F10C2A4(v24);
    if (v27 && (*(_DWORD *)(v27 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v27 + 76) & 1) != 0)
    {
LABEL_46:
      sub_22F31DBEC(a1, *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 48), *(_DWORD *)(v17 + 24), 7, 6);
      goto LABEL_39;
    }
    while (2)
    {
      v28 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
      if (v28)
        v29 = (*(_DWORD *)(v28 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v29 = 0;
      if (v29)
      {
        v30 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
LABEL_37:
        v22 = *(_QWORD *)(v30 + 32);
        continue;
      }
      break;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
    {
      v30 = sub_22F10CF48(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0));
      if (v30)
        goto LABEL_37;
    }
    v31 = sub_22F10C2A4(v28);
    if (v31 && (*(_DWORD *)(v31 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v31 + 76) & 2) != 0)
      goto LABEL_46;
LABEL_39:
    v19 += 2;
  }
  while (v19 != v20);
LABEL_47:
  v32 = v14 + 1;
  v5 = a3;
  a5 = v69;
  v6 = a2;
  while (v32 != v15)
  {
    v33 = *v32++;
    v17 = v33;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v14 = v32 - 1;
      goto LABEL_12;
    }
  }
LABEL_51:
  v34 = v9[53];
  if ((v34 & 4) != 0)
  {
    v37 = v34 & 0xFFFFFFFFFFFFFFF8;
    v35 = *(uint64_t **)v37;
    v36 = *(_QWORD *)v37 + 8 * *(unsigned int *)(v37 + 8);
  }
  else
  {
    v35 = v9 + 53;
    v36 = (uint64_t)&v9[(v34 > 7) + 53];
  }
  if (v35 != (uint64_t *)v36)
  {
    v38 = a1 + 3688;
    do
    {
      v39 = *v35;
      if (sub_22E49C868(*v35)
        && (*(_BYTE *)(v39 + 98) & 0x20) != 0
        && sub_22F10DF70(*(_QWORD *)(*(_QWORD *)(v39 + 48) & 0xFFFFFFFFFFFFFFF0)))
      {
        v70 = a5;
        v72 = v6;
        v40 = v38;
        v67 = v38;
        v68 = v5;
        v41 = *(_QWORD *)(v39 + 48);
        v77[0] = 0;
        v81 = 3;
        v82[0] = 6;
        v75 = *(unsigned int *)(a1 + 1704);
        sub_22EB4DDB8(v40, v82, (int *)&v75, (__int16 *)(a1 + 1693), v77, &v81);
        v42 = *(unsigned int *)(a1 + 3696);
        v43 = v42 - 2;
        v44 = *(_QWORD *)(a1 + 3688);
        v45 = *(_DWORD *)(v44 + 576 * (v42 - 2));
        if (v45 == 5)
        {
          *(_BYTE *)(v44 + 576 * v42 - 4) = *(_BYTE *)(v44 + 576 * v43 + 572);
          v46 = 1;
        }
        else if (v45 == 2)
        {
          *(_BYTE *)(v44 + 576 * v42 - 4) = 1;
          v46 = *(_BYTE *)(v44 + 576 * v43 + 573) != 0;
        }
        else
        {
          v46 = 0;
          *(_BYTE *)(v44 + 576 * v42 - 4) = 0;
        }
        v47 = v44 + 576 * v42;
        *(_BYTE *)(v47 - 3) = v46;
        *(_WORD *)(a1 + 1693) = 0;
        if (*(_DWORD *)(a1 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v47 - 560));
          sub_22EAEAE08(a1 + 1840, (uint64_t *)(v47 - 496));
        }
        v48 = *(unsigned int *)(v39 + 24);
        v49 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
        v50 = *(_QWORD *)(a1 + 88);
        v77[0] = 0;
        v51 = v49;
        sub_22EFF69F0(v49, v50, v39, 0, v41, 1, v48, v77, 0);
        LODWORD(v77[0]) = 13;
        v77[1] = 0;
        v77[2] = v41;
        v78 = 0;
        v52 = v48;
        v79 = v48;
        v80 = 0;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x20) != 0)
        {
          v54 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
          sub_22F003694(v54, v41, 5, v51, 0, 0, 2);
          v53 = sub_22EC45014(a1, v77, 0, v54, 0, 0);
        }
        else
        {
          v75 = v39;
          v76 = 1;
          v53 = sub_22ED34B68();
        }
        if ((v53 & 1) == 0)
        {
          v59 = sub_22EBCCCF0(a1, (int *)(v53 & 0xFFFFFFFFFFFFFFFELL));
          v60 = *(_QWORD *)(a1 + 88);
          sub_22EB17190(a1, (unint64_t)v59 & 0xFFFFFFFFFFFFFFFELL);
          v75 = v39;
          sub_22F29E634((uint64_t *)(v60 + 1096), &v75)[1] = (unint64_t)v59 & 0xFFFFFFFFFFFFFFFCLL | (2 * (v61 != 0));
        }
        v55 = sub_22F10C2A4(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0));
        if (v55)
        {
          if ((*(_DWORD *)(v55 + 28) & 0x7Fu) - 35 <= 2)
          {
            v56 = sub_22EFD10F8(v55);
            if (v56)
            {
              v57 = *(_QWORD *)(*(_QWORD *)(v56 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v57)
                v58 = *(_BYTE *)(v57 + 16) == 26;
              else
                v58 = 0;
              if (!v58 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v56 + 48) & 0xFFFFFFFFFFFFFFF0));
              sub_22EB14850(a1, v52);
            }
          }
        }
        sub_22EB48E64(a1);
        v38 = v67;
        v5 = v68;
        a5 = v70;
        v6 = v72;
      }
      ++v35;
    }
    while (v35 != (uint64_t *)v36);
  }
  v62 = *(unsigned int *)(a1 + 1904);
  v63 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v62 - 8);
  *(_DWORD *)(a1 + 1904) = v62 - 1;
  *a5 = v63;
  a5[1] = a1;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72))
  {
    if (v6)
      goto LABEL_86;
    goto LABEL_89;
  }
  sub_22F33BC2C((char **)a1, v63);
  if (!v6)
    goto LABEL_89;
LABEL_86:
  if (v5)
  {
    sub_22E88CB0C(a1 + 12064, *v6, v63, v5, a4);
  }
  else
  {
LABEL_89:
    v64 = *(unsigned int *)(v63 + 440);
    if ((_DWORD)v64)
    {
      v65 = *(_QWORD *)(v63 + 432);
      v66 = 40 * v64;
      do
      {
        sub_22E90379C((_QWORD *)a1, *(_DWORD *)(v65 + 24), v65, 0, (uint64_t)v74);
        sub_22E903BEC(v74);
        v65 += 40;
        v66 -= 40;
      }
      while (v66);
    }
  }
}

uint64_t sub_22E905138(uint64_t result, _BYTE *a2)
{
  if ((a2[8] & 7) != 0 || *(_QWORD *)(*(_QWORD *)result + 1888))
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 8))(a2);
  *(_QWORD *)(*(_QWORD *)result + 1888) = a2;
  return result;
}

uint64_t sub_22E905168(uint64_t result, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int16 v6;

  v3 = *(unsigned int *)(result + 1904);
  if ((_DWORD)v3)
    v4 = *(_QWORD **)(*(_QWORD *)(result + 1896) + 8 * v3 - 8);
  else
    v4 = 0;
  v5 = v4[45];
  if ((unint64_t)(v5 + 1) > v4[46])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v5 = v4[45];
  }
  if (a2)
    v6 = 256;
  else
    v6 = 0;
  *(_WORD *)(v4[44] + 2 * v5) = v6;
  ++v4[45];
  return result;
}

uint64_t *sub_22E9051E8(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  BOOL v5;
  int v6;
  char *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16[24];
  _BYTE v17[32];
  char v18;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 196) & 4) != 0
    || ((result = (uint64_t *)sub_22F1E361C(*(_QWORD **)(a1 + 112), a2), (_DWORD)result != 3)
      ? (v5 = (_DWORD)result == 0)
      : (v5 = 1),
        v5))
  {
    sub_22F0C8AF0((uint64_t)v17, *(_QWORD **)(a1 + 112), a2, *(_QWORD *)(a1 + 72) + 544, 0);
    if (v18 < 0)
    {
      v6 = v18 & 0x1C;
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1A7Fu, 0, (uint64_t)v16);
      v11 = 0;
      v10 = 0;
      v13 = 0;
      v14 = 0;
      __p = 0;
      v15 = 0;
      v8 = (a2 | ((unint64_t)a2 << 32)) + 0x300000000;
      v9 = 1;
      v7 = "**<";
      if (v6 == 4)
        v7 = "//<";
      BYTE3(__p) = v7[2];
      *(_WORD *)((char *)&__p + 1) = *(_WORD *)v7;
      LOBYTE(__p) = 47;
      HIBYTE(v14) = 4;
      sub_22E890748((uint64_t)v16, &v8);
      if (SHIBYTE(v14) < 0)
        operator delete(__p);
      sub_22E903BEC(v16);
    }
    return sub_22F0C9020((uint64_t *)(*(_QWORD *)(a1 + 88) + 16072), (uint64_t)v17, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 544, *(_QWORD *)(a1 + 88) + 2032);
  }
  return result;
}

uint64_t sub_22E905328(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  __int16 v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  _BYTE *v29;
  int v30;
  char v31;
  char v32;
  int v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  BOOL v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v49;

  *a3 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(v9 + 16840);
  if (v8 == v10)
  {
    v11 = sub_22E9058F0((unsigned __int8 *)a2);
    if ((v12 & 0x100) != 0)
      return 0;
    v13 = (unsigned __int8 *)a2;
    if (!v11)
      goto LABEL_73;
    if (*v11 == 211)
      v14 = (uint64_t *)(v11 + 64);
    else
      v14 = (uint64_t *)(v11 + 80);
  }
  else
  {
    v13 = (unsigned __int8 *)a2;
    if (v8 != *(_QWORD *)(v9 + 16848))
      goto LABEL_73;
    v15 = (unsigned __int8 *)a2;
    do
    {
      v11 = v15;
      v16 = *v15;
      if (v16 <= 0xD3)
      {
        if (v16 == 155)
        {
          if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
            goto LABEL_62;
          if (v15[48])
            v17 = v15 + 24;
          else
            v17 = v15 + 32;
        }
        else
        {
          if (v16 != 176)
            goto LABEL_62;
          v18 = *((unsigned int *)v15 + 5);
          if ((_DWORD)v18 == -1)
            goto LABEL_62;
          v17 = &v11[8 * v18 + 40];
        }
      }
      else if (v16 == 214)
      {
        v17 = v15 + 24;
      }
      else
      {
        if (v16 != 233)
          break;
        if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
          goto LABEL_62;
        v17 = v15 + 16;
      }
      v15 = *(unsigned __int8 **)v17;
    }
    while (v15 != v11);
    if (v16 != 212)
      goto LABEL_62;
    v14 = (uint64_t *)(v11 + 80);
  }
  v19 = *((unsigned int *)v11 + 1);
  if ((_DWORD)v19)
  {
    v49 = 0;
    v20 = 8 * v19;
    do
    {
      v21 = *v14;
      v22 = *(unsigned int *)(a4 + 8);
      if (v22 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v22 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v22) = v21 | 3;
      ++*(_DWORD *)(a4 + 8);
      if (v8 == v10)
      {
        v23 = *v14 & 0xFFFFFFFFFFFFFFFCLL;
        v24 = *(_DWORD *)(v23 + 28);
        if ((v24 & 0x7Fu) <= 0x2F && ((1 << (v24 & 0x7F)) & 0xC00000060000) != 0)
        {
          v23 = sub_22EFBAEA4(*v14 & 0xFFFFFFFFFFFFFFFCLL);
          v24 = *(_DWORD *)(v23 + 28);
        }
        if ((v24 & 0x7Eu) - 58 >= 0xFFFFFFFA && !sub_22EFC0EB8(v23))
        {
          if ((*a3 < 0x10uLL) | BYTE4(v49) & 1
            || (v49 & 1) != 0
            && ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23) + 84) & 0x10) != 0
             && sub_22E631558(v23)
             || (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23) + 84) & 0x10) != 0
             && sub_22EFC0D04(v23)))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(v23 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v26)
              v27 = *(unsigned __int8 *)(v26 + 16) - 27 > 0xFFFFFFFD;
            else
              v27 = 0;
            if (!v27)
              v26 = sub_22F10CF48(v26);
            *a3 = *(_QWORD *)(v26 + 24);
            LOBYTE(v49) = (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23) + 84) & 0x10) != 0
                       && sub_22E631558(v23)
                       || (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23) + 84) & 0x10) != 0
                       && sub_22EFC0D04(v23);
          }
          else
          {
            *a3 = 0;
            BYTE4(v49) = 1;
          }
        }
      }
      ++v14;
      v20 -= 8;
    }
    while (v20);
  }
  if (v8 == v10)
    return *a3 > 0xFuLL;
LABEL_62:
  v13 = (unsigned __int8 *)a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) == 0)
  {
    v29 = (_BYTE *)(a1 + 10664);
    v30 = *(_DWORD *)(a1 + 8456);
    v31 = *(_BYTE *)(a1 + 11952);
    v32 = *(_BYTE *)(a1 + 10664);
    v33 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
    sub_22EE03478(a1);
    if (!v34)
      *(_BYTE *)(a1 + 11952) = 1;
    *v29 = 1;
    v35 = *(_BYTE *)(a1 + 12032);
    *(_BYTE *)(a1 + 12032) = 1;
    v36 = sub_22ED199E0(a1, 0, a2, 0, 0, 0, 0, 0, 0, 0);
    result = v36 > 1;
    if (v36 >= 2)
      *a3 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8);
    *(_BYTE *)(a1 + 12032) = v35;
    *(_DWORD *)(a1 + 8456) = v30;
    *(_BYTE *)(a1 + 11952) = v31;
    *v29 = v32;
    v37 = *(_QWORD *)(a1 + 104);
    if (*(_DWORD *)(v37 + 180) == 5)
      *(_BYTE *)(v37 + 170) = 1;
    if (v33)
      v38 = 3;
    else
      v38 = 0;
    *(_DWORD *)(v37 + 180) = v38;
    return result;
  }
  do
  {
LABEL_73:
    v39 = v13;
    v40 = *v13;
    if (v40 > 0xD5)
    {
      if (v40 == 233)
      {
        if ((*(_DWORD *)v13 & 0x7C0000) != 0x300000)
          goto LABEL_97;
        v42 = (unsigned __int8 **)(v13 + 16);
      }
      else
      {
        if (v40 != 214)
          goto LABEL_97;
        v42 = (unsigned __int8 **)(v13 + 24);
      }
    }
    else if (v40 == 155)
    {
      if ((**((_DWORD **)v13 + 2) & 0x18000) != 0)
        goto LABEL_97;
      if (v13[48])
        v42 = (unsigned __int8 **)(v13 + 24);
      else
        v42 = (unsigned __int8 **)(v13 + 32);
    }
    else
    {
      if (v40 != 176)
        break;
      v41 = *((unsigned int *)v13 + 5);
      if ((_DWORD)v41 == -1)
        goto LABEL_97;
      v42 = (unsigned __int8 **)&v39[8 * v41 + 40];
    }
    v13 = *v42;
  }
  while (v13 != v39);
  if (v40 == 161)
  {
    v43 = *((_QWORD *)v39 + 2);
    if (v43)
    {
      if ((*(_DWORD *)(v43 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        if (sub_22EFC0EB8(v43))
          return 1;
        result = *(_QWORD *)(*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (result)
          v44 = *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD;
        else
          v44 = 0;
        if (!v44)
          result = sub_22F10CF48(result);
LABEL_112:
        *a3 = *(_QWORD *)(result + 24);
        return 1;
      }
    }
  }
LABEL_97:
  v45 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_22F10ACF8(*v45);
  if (v46 >= 0x10)
  {
    result = *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0);
    if (result && *(unsigned __int8 *)(result + 16) - 27 > 0xFFFFFFFD)
      goto LABEL_110;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
    {
      result = sub_22F10CF48(result);
      if (result)
        goto LABEL_110;
    }
  }
  result = *v45;
  if (*v45 && *(unsigned __int8 *)(*v45 + 16) - 27 > 0xFFFFFFFD)
    goto LABEL_110;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
  {
LABEL_110:
    if (*(_BYTE *)(result + 16) != 26)
      return 0;
    if ((*(_DWORD *)(result + 20) & 0x3FFFC0) != 0)
      return 1;
    goto LABEL_112;
  }
  return result;
}

unsigned __int8 *sub_22E9058F0(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 **v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 **v11;

  do
  {
    result = a1;
    v3 = *a1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        v6 = *(_DWORD *)a1;
        if ((v6 & 0x7C0000) != 0x300000)
          goto LABEL_18;
        v3 = v6;
        v5 = (unsigned __int8 **)(result + 16);
      }
      else
      {
        if (v3 != 214)
          break;
        v5 = (unsigned __int8 **)(a1 + 24);
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return result;
      if (a1[48])
        v5 = (unsigned __int8 **)(a1 + 24);
      else
        v5 = (unsigned __int8 **)(a1 + 32);
      v3 = 155;
    }
    else
    {
      if (v3 != 176)
        break;
      v4 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v4 == -1)
        return result;
      v5 = (unsigned __int8 **)&result[8 * v4 + 40];
      v3 = 176;
    }
    a1 = *v5;
  }
  while (a1 != result);
  if (v3 != 233)
    return result;
LABEL_18:
  result = (unsigned __int8 *)*((_QWORD *)result + 2);
  if (!result)
    return result;
  v7 = result;
  do
  {
    v8 = v7;
    v9 = *v7;
    if (v9 > 213)
    {
      if (v9 == 233)
      {
        if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
          break;
        v11 = (unsigned __int8 **)(v8 + 16);
      }
      else
      {
        if (v9 != 214)
          break;
        v11 = (unsigned __int8 **)(v8 + 24);
      }
      goto LABEL_34;
    }
    if (v9 == 155)
    {
      if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
        break;
      if (v8[48])
        v11 = (unsigned __int8 **)(v8 + 24);
      else
        v11 = (unsigned __int8 **)(v8 + 32);
      goto LABEL_34;
    }
    if (v9 != 176)
      break;
    v10 = *((unsigned int *)v8 + 5);
    if ((_DWORD)v10 == -1)
      break;
    v11 = (unsigned __int8 **)&v8[8 * v10 + 40];
LABEL_34:
    v7 = *v11;
  }
  while (v7 != v8);
  if (result != v8)
    return v8;
  return result;
}

uint64_t sub_22E905A84(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, unsigned int (*a5)(void))
{
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  int v28;
  unsigned int v29[25];
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[5];

  v35[4] = *MEMORY[0x24BDAC8D0];
  v10 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  sub_22EFF605C(v10);
  v12 = v11;
  sub_22F0D4E74(v10);
  v32 = v13;
  v33 = v35;
  v34 = 0x400000000;
  sub_22EE03478(a1);
  if (v14 || (v31 = 0, !sub_22E905328(a1, v10, &v31, (uint64_t)&v33)) || v31 < 0x10 || a5 && !a5())
  {
    if (a4)
    {
      LOBYTE(v31) = sub_22E905D88((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
      sub_22E90379C((_QWORD *)a1, v12, a3, 0, (uint64_t)v29);
      LODWORD(v25[0]) = 0;
      v21 = sub_22E8900C4((uint64_t)v29, (int *)v25);
      v22 = sub_22E894E38(v21, (unsigned __int8 *)&v31);
      sub_22E8906A0(v22, &v32);
      sub_22E903BEC(v29);
      if (!(_BYTE)v31)
        sub_22E905E40((_QWORD *)a1, v12, v33, v34, (unsigned int (*)(_QWORD))a5);
      v20 = 1;
      *a2 = 1;
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v15 = sub_22F141A3C(HIDWORD(v32), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    v30 = sub_22E905D88((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    sub_22E90379C((_QWORD *)a1, v12, a3, 0, (uint64_t)v29);
    v28 = 1;
    v16 = sub_22E8900C4((uint64_t)v29, &v28);
    v17 = sub_22E894E38(v16, (unsigned __int8 *)&v30);
    v18 = sub_22E8906A0(v17, &v32);
    v19 = *sub_22EFFED0C((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    if ((v19 - 112) <= 0x20 && ((1 << (v19 - 112)) & 0x120000003) != 0 || v19 == 233)
    {
      v27 = 0;
      v26 = 0u;
      memset(v25, 0, sizeof(v25));
    }
    else
    {
      BYTE4(v25[1]) = 0;
      *(_QWORD *)((char *)v25 + 12) = 0;
      *(_QWORD *)&v26 = 0;
      *((_QWORD *)&v26 + 1) = 0x200000000000000;
      *(_QWORD *)&v25[0] = v15 | ((unint64_t)v15 << 32);
      BYTE8(v25[0]) = 0;
      *((_QWORD *)&v25[1] + 1) = 10536;
      LOBYTE(v27) = 0;
    }
    sub_22E890748(v18, v25);
    if (SHIBYTE(v26) < 0)
      operator delete(*((void **)&v25[1] + 1));
    sub_22E903BEC(v29);
    if (!v30)
      sub_22E905E40((_QWORD *)a1, v12, v33, v34, (unsigned int (*)(_QWORD))a5);
    LOWORD(v24) = 0;
    *a2 = sub_22EB1CFA4(a1, 0, *a2 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(v32), 0, 0, HIDWORD(v32) + 1, 0, v24);
    v20 = 1;
  }
  if (v33 != v35)
    free(v33);
  return v20;
}

BOOL sub_22E905D88(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  _DWORD *v3;

  v1 = sub_22EFFA6B0(a1);
  v2 = *v1;
  if (v2 == 233)
  {
    v1 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
    v2 = *v1;
  }
  if (v2 != 211 || !*((_DWORD *)v1 + 1))
    return 0;
  v3 = (_DWORD *)(*((_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v3 || (v3[7] & 0x7Eu) - 58 < 0xFFFFFFFA)
    return 0;
  if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(*((_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFFCLL)
                 + 84) & 0x10) != 0
    && sub_22E631558((uint64_t)v3))
  {
    return 1;
  }
  if ((*(_BYTE *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 32))(v3) + 84) & 0x10) == 0)
    return 0;
  return sub_22EFC0D04((uint64_t)v3);
}

void sub_22E905E40(_QWORD *a1, int a2, uint64_t *a3, unsigned int a4, unsigned int (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD v16[3];

  v5 = a3;
  v16[2] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v15 = 0;
    if (a4)
    {
      v9 = 8 * a4;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v10)
          v11 = *(unsigned __int8 *)(v10 + 16) - 27 > 0xFFFFFFFD;
        else
          v11 = 0;
        if (!v11)
          v10 = sub_22F10CF48(v10);
        if (a5(*(_QWORD *)(v10 + 24)))
        {
          v12 = *v5;
          v13 = v15;
          if (v15 >= 2uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v13 = v15;
          }
          v16[v13] = v12 | 3;
          ++v15;
        }
        ++v5;
        v9 -= 8;
      }
      while (v9);
      v14 = v15;
    }
    else
    {
      v14 = 0;
    }
    sub_22E907660(a1, v16, v14, a2);
  }
  else
  {
    sub_22E907660(a1, a3, a4, a2);
  }
}

uint64_t sub_22E905FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, __int16 a6)
{
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  unsigned int v22;

  v12 = operator new();
  v13 = v12;
  v14 = 0;
  v15 = *(_QWORD *)(a3 + 8 * *(unsigned int *)(a3 + 76) + 88);
  if (a5 == 2 && *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72))
  {
    v16 = *(_QWORD *)(a1 + 12288);
    v17 = *(_DWORD *)(v16 + 344);
    if (v17
      && (v18 = *(_QWORD *)(v16 + 336) + 5272 * v17, *(_QWORD *)(v18 - 8) == *(_QWORD *)(v16 + 328))
      && (v19 = *(_DWORD *)(v18 - 5264), v20 = *(_DWORD *)(v16 + 21496), v19 > v20))
    {
      v14 = v19 + ~(_WORD)v20;
    }
    else
    {
      v14 = -1;
    }
  }
  result = sub_22E90755C(v12, *(_QWORD *)(a1 + 104));
  *(_DWORD *)(v13 + 1224) = 4;
  *(_DWORD *)(v13 + 1256) = 0;
  *(_OWORD *)(v13 + 1232) = 0u;
  *(_DWORD *)(v13 + 1248) = 0;
  *(_QWORD *)(v13 + 1264) = v13 + 1280;
  *(_QWORD *)(v13 + 1272) = 0x400000000;
  *(_BYTE *)(v13 + 1408) = 0;
  *(_QWORD *)(v13 + 1416) = 0;
  *(_QWORD *)v13 = &unk_24FAB69A8;
  *(_QWORD *)(v13 + 1424) = a3;
  *(_QWORD *)(v13 + 1432) = a4;
  *(_QWORD *)(v13 + 1440) = a2;
  *(_QWORD *)(v13 + 1448) = v15;
  *(_WORD *)(v13 + 1456) = a5;
  *(_WORD *)(v13 + 1458) = v14;
  *(_WORD *)(v13 + 1460) = a6;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 8) & 0xFFFFFFF8 | 3;
  *(_QWORD *)(v13 + 1416) = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392);
  v22 = *(_DWORD *)(a1 + 1904);
  if (v22 >= *(_DWORD *)(a1 + 1908))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(a1 + 1904);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v22) = v13;
  ++*(_DWORD *)(a1 + 1904);
  return result;
}

_QWORD *sub_22E906184(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 5;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = (_QWORD *)MEMORY[0x23489D23C](8 * a2, 8);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

void sub_22E906204(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 10;
        sub_22F3092FC(v4 - 9);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_22E906278(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    v4 = *(void **)(i - 32);
    if ((void *)(i - 16) != v4)
      free(v4);
    if ((*(_BYTE *)(i - 72) & 1) == 0)
      llvm::deallocate_buffer(*(llvm **)(i - 64), (void *)(16 * *(unsigned int *)(i - 56)));
  }
  a1[1] = v2;
}

void sub_22E9062E4(void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;
  void ***v6;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        sub_22E793470(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_22E906358(uint64_t a1, int a2)
{
  char *__s;

  sub_22F1E2F68(a1, a2, 1, (uint64_t)&__s);
  if (!__s || strlen(__s) != 15)
    return 0;
  return *(_QWORD *)__s == 0x686374617263733CLL && *(_QWORD *)(__s + 7) == 0x3E65636170732068;
}

uint64_t sub_22E9063DC(uint64_t *a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  v2 = *((_DWORD *)a1 + 2);
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = *a1 + 136 * v2;
  while (1)
  {
    if (*(_DWORD *)v3 == 3)
    {
      v5 = *(_DWORD *)(v3 + 16);
      if (v5)
        break;
    }
LABEL_12:
    v3 += 136;
    if (v3 == v4)
      return 0;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 + 56 * v5;
  while (1)
  {
    if (*(_DWORD *)(v6 + 8) == 9)
    {
      v8 = *(unsigned int *)(v6 + 24);
      if ((_DWORD)v8)
        break;
    }
LABEL_11:
    v6 += 56;
    if (v6 == v7)
      goto LABEL_12;
  }
  v9 = *(_DWORD **)(v6 + 16);
  v10 = 24 * v8;
  while (*v9 != a2)
  {
    v9 += 6;
    v10 -= 24;
    if (!v10)
      goto LABEL_11;
  }
  return 1;
}

BOOL sub_22E906470(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  int v5;
  _BOOL8 v6;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = a1;
  v16 = 0;
  if (sub_22F24C318(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1, &v16))
    v4 = v16 == *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  else
    v4 = 1;
  if (!v4)
    return *(_BYTE *)(v16 + 8) != 0;
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10000) == 0)
    return 0;
  if ((v5 & 0x80) != 0)
    sub_22EFCC320(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  if (!v8)
  {
    v6 = 1;
    goto LABEL_32;
  }
  while (1)
  {
    v9 = *(_DWORD *)(v8 + 28);
    if ((v9 & 0x7Eu) - 58 < 0xFFFFFFFC)
      break;
    if ((sub_22EFBF86C(v8, &v16, 0) & 1) != 0 || (v13 = *(_QWORD *)(v8 + 80), (v13 & 0x2000000) != 0))
    {
LABEL_23:
      v6 = 1;
      goto LABEL_28;
    }
    if ((v13 & 0x80000) == 0)
      goto LABEL_31;
    v6 = (*(_DWORD *)(v8 + 28) & 0x7F) != 57;
LABEL_28:
    v8 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v8 || !v6)
      goto LABEL_32;
  }
  v10 = v9 & 0x7F;
  if (v10 == 29)
  {
    v11 = *(_QWORD *)(v8 + 48);
    if ((*(_BYTE *)(v11 + 83) & 0x20) != 0)
      goto LABEL_31;
    v12 = sub_22EFBF86C(v11, &v16, 0);
    goto LABEL_27;
  }
  if ((v10 - 38) < 0xFFFFFFFD || sub_22EFC3A88(v8))
    goto LABEL_23;
  v14 = *(_QWORD *)(v8 + 128);
  if (v14
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104)),
        (v14 = *(_QWORD *)(v8 + 128)) != 0))
  {
    v12 = sub_22E906470(*(_QWORD *)(v14 + 88), a2);
LABEL_27:
    v6 = v12;
    goto LABEL_28;
  }
LABEL_31:
  v6 = 0;
LABEL_32:
  *((_BYTE *)sub_22F309434(a2, &v15) + 8) = v6;
  return v6;
}

uint64_t sub_22E9065F8(unint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_22E906648(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1 + 32 * v3;
  *(_DWORD *)v5 = *a2;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  v6 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 32 * v6 - 32;
}

uint64_t sub_22E906648(unint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = v6 + 32 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v7 = *a2;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(a3 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  sub_22E89252C(a1, v6);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v8 = (*(_DWORD *)(a1 + 8) + 1);
  *(_QWORD *)(a1 + 8) = v8;
  return v6 + 32 * v8 - 32;
}

unsigned __int8 **sub_22E9066F8(unsigned __int8 **a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  void **v16;
  char v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = 0;
  a1[1] = 0;
  v5 = *a2;
  *((_DWORD *)a1 + 4) = *(_DWORD *)(*a2 + 316);
  a1[1] = a3;
  v6 = *(unsigned __int8 *)(v5 + 320);
  if (*(_BYTE *)(v5 + 320))
  {
    v12 = 0;
    v13 = 416;
    do
    {
      v14 = *a2;
      v15 = *(_BYTE *)(*a2 + v12 + 321);
      if (v15)
      {
        v20 = *(_QWORD *)(v14 + 8 * v12 + 336);
        v21 = *a1;
        if (!*a1)
        {
          v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a1[1]);
          *a1 = v21;
        }
        v21[*v21 + 1] = v15;
        v22 = *a1;
        v23 = **a1;
        *v22 = v23 + 1;
        *(_QWORD *)&v22[8 * v23 + 16] = v20;
      }
      else
      {
        v16 = (void **)(v14 + v13);
        v17 = *((_BYTE *)v16 + 23);
        if (v17 >= 0)
          v18 = v16;
        else
          v18 = *v16;
        if (v17 >= 0)
          v19 = v17 & 0x7F;
        else
          v19 = (size_t)v16[1];
        sub_22E3B89A8(a1, v18, v19);
      }
      ++v12;
      v13 += 24;
    }
    while (v6 != v12);
    v5 = *a2;
  }
  v7 = *(unsigned int *)(v5 + 664);
  if ((_DWORD)v7)
  {
    v10 = 0;
    v11 = 12 * v7;
    do
    {
      sub_22E8907D4((uint64_t *)a1, *(_QWORD *)(*a2 + 656) + v10);
      v10 += 12;
    }
    while (v11 != v10);
    v5 = *a2;
  }
  v8 = *(unsigned int *)(v5 + 776);
  if ((_DWORD)v8)
  {
    v24 = 0;
    v25 = 56 * v8;
    do
    {
      sub_22E6D82D0((uint64_t *)a1, (_DWORD *)(*(_QWORD *)(*a2 + 768) + v24));
      v24 += 56;
    }
    while (v25 != v24);
  }
  return a1;
}

void sub_22E906864(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  unsigned __int8 *v23;
  size_t v24;
  size_t v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;

  v2 = *a1;
  if (*a1)
  {
    v5 = *v2;
    if (*v2)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *a1;
        v9 = (*a1)[v7 + 1];
        if (v9)
        {
          v10 = *(_QWORD *)&v8[8 * v7 + 16];
          v11 = *a2;
          if (!*a2)
          {
            v29 = v10;
            v28 = (*a1)[v7 + 1];
            v11 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)a2[1]);
            v9 = v28;
            v10 = v29;
            *a2 = v11;
          }
          v11[*v11 + 1] = v9;
          v12 = *a2;
          v13 = **a2;
          *v12 = v13 + 1;
          *(_QWORD *)&v12[8 * v13 + 16] = v10;
        }
        else
        {
          v18 = &v8[v6];
          v21 = (unsigned __int8 *)*((_QWORD *)v18 + 12);
          v19 = v18 + 96;
          v20 = v21;
          v22 = v19[23];
          if ((v22 & 0x80u) == 0)
            v23 = v19;
          else
            v23 = v20;
          v24 = *((_QWORD *)v19 + 1);
          if ((v22 & 0x80u) == 0)
            v25 = v22 & 0x7F;
          else
            v25 = v24;
          sub_22E3B89A8(a2, v23, v25);
        }
        ++v7;
        v6 += 24;
      }
      while (v5 != v7);
      v2 = *a1;
    }
    v14 = *((unsigned int *)v2 + 86);
    if ((_DWORD)v14)
    {
      v15 = *((_QWORD *)v2 + 42);
      v16 = 12 * v14;
      do
      {
        sub_22E8907D4((uint64_t *)a2, v15);
        v15 += 12;
        v16 -= 12;
      }
      while (v16);
      v2 = *a1;
    }
    v17 = *((unsigned int *)v2 + 114);
    if ((_DWORD)v17)
    {
      v26 = (_DWORD *)*((_QWORD *)v2 + 56);
      v27 = 56 * v17;
      do
      {
        sub_22E6D82D0((uint64_t *)a2, v26);
        v26 += 14;
        v27 -= 56;
      }
      while (v27);
    }
  }
}

uint64_t sub_22E9069BC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  llvm::SmallPtrSetImplBase *v28;
  char v29;
  const void *v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  _DWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47[3];
  __int16 v48;
  uint64_t v49;

  v6 = *(_DWORD *)(a1 + 260) != 0;
  v7 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7 - 8);
  else
    v8 = 0;
  result = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 256) || (!*(_DWORD *)(*(_QWORD *)(result + 72) + 72) ? (v10 = v8 == 0) : (v10 = 0), !v10))
  {
    result = sub_22F31E72C(result, a3);
    if ((result & 1) == 0)
    {
      if (a3)
        v11 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
      else
        v11 = 0;
      result = (uint64_t)sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 16), v11);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = 32;
      if (v12 == *(_QWORD *)(a1 + 16))
        v13 = 36;
      if (result == v12 + 8 * *(unsigned int *)(a1 + v13))
      {
        v44 = a1 + 16;
        v14 = a1 + (v6 << 6);
        if (v8)
        {
          v38 = *(_QWORD **)(a1 + 8);
          if (*(_DWORD *)(v38[9] + 72)
            && *(_DWORD *)(a1 + 88) == 1
            && (*(_BYTE *)(a1 + 256) || *(_DWORD *)(a1 + 260)))
          {
            sub_22F33BF4C(v38, v8, a3, a2);
          }
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
          v40 = *(_QWORD *)(a1 + 8) + 12832;
          if (a3)
            v41 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
          else
            v41 = 0;
          v47[0] = v41;
          v42 = sub_22F2F2BE4(v40, (uint64_t *)v47);
          v42[1] = v39;
          *((_DWORD *)v42 + 4) = a2;
        }
        v43 = v14 + 128;
        if (*(_BYTE *)(a1 + 256) || *(_DWORD *)(a1 + 260))
        {
          v15 = *(_QWORD *)(a1 + 8);
          v16 = a3 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) : 0;
          v49 = v16;
          v47[0] = 0;
          v17 = (sub_22E8902B8((uint64_t *)(v15 + 12784), &v49, v47) & 1) != 0
              ? v47[0]
              : (unsigned __int8 *)(*(_QWORD *)(v15 + 12784) + 32 * *(unsigned int *)(v15 + 12800));
          if (v17 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 12784)
                                        + 32 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 12800)))
          {
            v18 = *((_QWORD *)v17 + 1);
            v45 = *((_QWORD *)v17 + 2);
            if (v18 != v45)
            {
              v19 = 0;
              v46 = 1;
              do
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104);
                if (*(_BYTE *)(v20 + 170))
                  break;
                v21 = *(_DWORD *)(v18 + 24);
                v22 = *(_DWORD *)v18;
                v23 = (int)sub_22F1CF5F4(*(_QWORD *)(v20 + 32), v21, *(_DWORD *)v18, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104)) > 2;
                *(_DWORD *)(v20 + 312) = v22;
                *(_DWORD *)(v20 + 316) = v21;
                if (*(char *)(v20 + 311) < 0)
                {
                  **(_BYTE **)(v20 + 288) = 0;
                  *(_QWORD *)(v20 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v20 + 288) = 0;
                  *(_BYTE *)(v20 + 311) = 0;
                }
                v47[0] = (unsigned __int8 *)(v20 + 320);
                v47[1] = 0;
                v47[2] = (unsigned __int8 *)v20;
                v48 = 1;
                *(_BYTE *)(v20 + 320) = 0;
                *(_DWORD *)(v20 + 664) = 0;
                v24 = *(unsigned int *)(v20 + 776);
                if ((_DWORD)v24)
                {
                  v25 = *(_QWORD *)(v20 + 768);
                  v26 = 56 * v24;
                  do
                  {
                    if (*(char *)(v25 + v26 - 9) < 0)
                      operator delete(*(void **)(v25 + v26 - 32));
                    v26 -= 56;
                  }
                  while (v26);
                }
                v19 |= v23;
                *(_DWORD *)(v20 + 776) = 0;
                sub_22E906864((unsigned __int8 **)(v18 + 8), v47);
                sub_22E3BB0B8((uint64_t)v47);
                if (v8 && (v46 & v19 & 1) != 0)
                {
                  sub_22E903C74(*(_QWORD *)(a1 + 8), a3);
                  v46 = 0;
                  v19 = 1;
                }
                v18 += 32;
              }
              while (v18 != v45);
            }
          }
        }
        if (a3)
        {
          v27 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
          result = sub_22E3BA850(v43, v27);
          v28 = (llvm::SmallPtrSetImplBase *)(a1 + 16);
          if (!v29)
            return result;
          v30 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
          sub_22E3BA850(v44, v30);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        }
        else
        {
          result = sub_22E3BA850(v43, 0);
          v28 = (llvm::SmallPtrSetImplBase *)(a1 + 16);
          if (!v32)
            return result;
          sub_22E3BA850(v44, 0);
          v31 = 0;
        }
        v33 = *(_DWORD *)(a1 + 88);
        if (v33 >= *(_DWORD *)(a1 + 92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(_DWORD *)(a1 + 88);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v33) = v31;
        ++*(_DWORD *)(a1 + 88);
        v34 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
        if (v34)
          sub_22E906E34(a1, v34);
        --*(_DWORD *)(a1 + 88);
        v35 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        result = (uint64_t)sub_22E3BA914(v28, v35);
        v36 = *(_QWORD *)(a1 + 24);
        v37 = 32;
        if (v36 == *(_QWORD *)(a1 + 16))
          v37 = 36;
        if (result != v36 + 8 * *(unsigned int *)(a1 + v37))
        {
          *(_QWORD *)result = -2;
          ++*(_DWORD *)(a1 + 40);
        }
      }
    }
  }
  return result;
}

void sub_22E906E34(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22E907270(a1, (uint64_t)a2);
}

uint64_t sub_22E907010()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;

  result = sub_22EFFA934(v0, *v1);
  if ((result & 1) == 0)
    JUMPOUT(0x22E906FCCLL);
  return result;
}

void sub_22E907024()
{
  uint64_t v0;
  uint64_t v1;

  sub_22E907208(v1, v0);
}

#error "22E9070F4: call analysis failed (funcsize=52)"

void sub_22E907108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22E906E34(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
}

void sub_22E907138()
{
  uint64_t v0;

  sub_22F0D5A50(*(_QWORD *)(v0 + 8 * *(unsigned int *)(v0 + 8) + 32));
  JUMPOUT(0x22E9071B4);
}

void sub_22E907158()
{
  uint64_t v0;
  uint64_t v1;

  ++*(_DWORD *)(v1 + 260);
  sub_22E907270(v1, v0);
  --*(_DWORD *)(v1 + 260);
  JUMPOUT(0x22E90717CLL);
}

void sub_22E907190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
    sub_22E90734C(v1, *(_DWORD *)(v0 + 40), v2);
  if (*(_QWORD *)(v0 + 24))
    JUMPOUT(0x22E9071B0);
  JUMPOUT(0x22E906FCCLL);
}

uint64_t sub_22E9071BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if ((v3 & 0x7Eu) - 52 < 6 || (v3 & 0x7Fu) - 60 <= 6)
    return sub_22E90734C(v1, *(_DWORD *)(v0 + 4), v2);
  return result;
}

void sub_22E907208(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6[2];

  if (*(_BYTE *)a2 == 119)
  {
    v5 = *(uint64_t **)(a2 + 40);
    v6[0] = *v5;
    v6[1] = (uint64_t)(v5 + 1);
    v4 = sub_22F116708(v6);
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 4);
  }
  sub_22E90734C(a1, v4, *(_QWORD *)(a2 + 16));
  sub_22E907270(a1, a2);
}

void sub_22E907270(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22E906E34(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 < 4)
          sub_22F3F2FE0((uint64_t)&v9, 1);
        else
          sub_22F0D8720((uint64_t)&v9);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

uint64_t sub_22E90734C(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(a3 + 28);
  v4 = v3 & 0x7F;
  if ((v4 - 60) >= 7)
  {
    v5 = result;
    if ((v3 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      return sub_22E9069BC(result, a2);
    if (v4 == 1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
      if (!result)
        return result;
    }
    else if (v4 != 2 || (*(_QWORD *)(a3 + 80) & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      return result;
    }
    return sub_22E906E34(v5);
  }
  return result;
}

uint64_t sub_22E9073E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 24) = 0;
    sub_22E903474(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
  }
  return sub_22E3BB0B8(a1);
}

uint64_t sub_22E907424(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (*(_BYTE *)(result + 48))
  {
    v3 = a2;
    result = sub_22E9073E8(result);
    a2 = v3;
    *(_BYTE *)(result + 48) = 0;
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 0;
  v2 = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 40) = v2;
  *(_BYTE *)(result + 48) = 1;
  return result;
}

uint64_t sub_22E90749C(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 **v3;
  char v4;
  BOOL v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = (unsigned __int8 **)(a1 + 32);
    v4 = a2[23];
    v5 = v4 < 0;
    v6 = *((_QWORD *)a2 + 1);
    if (v4 < 0)
      a2 = *(_BYTE **)a2;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v10 = (void **)a2;
    v11 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v13 = v12;
    v3 = (unsigned __int8 **)(sub_22F2F1D6C(v11, &v13)[1] + 32 * *(unsigned int *)(a1 + 88) + 8);
    v4 = *((_BYTE *)v10 + 23);
    v5 = v4 < 0;
    v6 = (size_t)v10[1];
    if (v4 >= 0)
      a2 = v10;
    else
      a2 = *v10;
  }
  v7 = v4 & 0x7F;
  if (v5)
    v8 = v6;
  else
    v8 = v7;
  sub_22E3B89A8(v3, a2, v8);
  return a1;
}

uint64_t sub_22E90755C(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)result = &off_24FAB6968;
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | 0x20000;
  *(_OWORD *)(result + 12) = xmmword_22F4579A0;
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 172);
  *(_QWORD *)(result + 48) = result + 64;
  *(_QWORD *)(result + 56) = 0x800000000;
  *(_QWORD *)(result + 128) = result + 144;
  *(_QWORD *)(result + 136) = 0x400000000;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 1;
  for (i = 192; i != 256; i += 16)
    *(_QWORD *)(result + i) = -4096;
  *(_QWORD *)(result + 256) = result + 272;
  *(_QWORD *)(result + 264) = 0x400000000;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 352) = result + 376;
  *(_QWORD *)(result + 360) = 0;
  *(_QWORD *)(result + 368) = 4;
  *(_QWORD *)(result + 384) = result + 416;
  *(_QWORD *)(result + 392) = result + 416;
  *(_QWORD *)(result + 400) = 1;
  *(_DWORD *)(result + 408) = 0;
  *(_QWORD *)(result + 424) = 0;
  *(_QWORD *)(result + 432) = result + 448;
  *(_QWORD *)(result + 440) = 0x400000000;
  *(_QWORD *)(result + 608) = result + 640;
  *(_QWORD *)(result + 616) = result + 640;
  *(_QWORD *)(result + 624) = 8;
  *(_DWORD *)(result + 632) = 0;
  v3 = 712;
  *(_QWORD *)(result + 704) = 1;
  do
  {
    v4 = (_QWORD *)(result + v3);
    *v4 = 0;
    v4[1] = 0;
    v3 += 64;
  }
  while (v3 != 1224);
  return result;
}

void sub_22E907660(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  _QWORD *v5;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  unsigned int v28[24];
  unsigned int v29[25];
  unsigned int v30[3];

  v30[0] = 0;
  if (a3)
  {
    v5 = a2;
    v7 = 0;
    v8 = 0;
    v9 = &a2[a3];
    do
    {
      v10 = a1[13];
      if (*(_DWORD *)(v10 + 12))
        v11 = *(_DWORD *)(v10 + 16);
      else
        v11 = 0x7FFFFFFF;
      if (v8 >= v11)
      {
        v30[0] = ++v7;
      }
      else
      {
        v12 = *v5 & 0xFFFFFFFFFFFFFFFCLL;
        v13 = *(_DWORD *)(v12 + 28);
        if ((v13 & 0x7Fu) <= 0x2F && ((1 << (v13 & 0x7F)) & 0xC00000060000) != 0)
        {
          v12 = sub_22EFBAEA4(*v5 & 0xFFFFFFFFFFFFFFFCLL);
          v13 = *(_DWORD *)(v12 + 28);
        }
        v15 = v12;
        if ((v13 & 0x7Eu) - 58 <= 0xFFFFFFF9)
        {
          if ((v13 & 0x7F) != 0x1D)
            goto LABEL_28;
          v15 = *(_QWORD *)(v12 + 48);
          if (!v15)
            goto LABEL_28;
        }
        if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15) + 84) & 0x10) == 0
          || !sub_22E47DA60(v15))
        {
          goto LABEL_28;
        }
        sub_22EFC8E88(v15);
        v17 = *v16;
        v18 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v18 && *(_WORD *)(*v17 + 32) != 327)
        {
          v19 = 8 * v18 - 8;
          v20 = *v16;
          do
          {
            v21 = v20[1];
            ++v20;
            v19 -= 8;
          }
          while (*(_WORD *)(v21 + 32) != 327);
        }
        do
        {
          v23 = *v17++;
          v22 = v23;
        }
        while (*(_WORD *)(v23 + 32) != 327);
        if (*(_DWORD *)(v22 + 36) == 7)
        {
          v24 = *(int **)(v22 + 40);
          v25 = *v24;
          v26 = *(int *)((char *)v24 + 3);
          if (v25 == 1634100580 && v26 == 1953264993)
          {
LABEL_28:
            sub_22E8FCA40(a1, *(_DWORD *)(v12 + 24), 0x1762u, 0, (uint64_t)v29);
            sub_22E903BEC(v29);
            ++v8;
          }
        }
      }
      ++v5;
    }
    while (v5 != v9);
    if (v8 >= 5)
      *(_DWORD *)(a1[13] + 16) = 4;
    if (v7)
    {
      sub_22E8FCA40(a1, a4, 0x1755u, 0, (uint64_t)v28);
      sub_22E89519C((uint64_t)v28, v30);
      sub_22E903BEC(v28);
    }
  }
}

void sub_22E907874(uint64_t a1)
{
  sub_22F2E0858(a1 + 56);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x2348A0E9CLL);
}

void ***sub_22E9078BC(void ***result, void **a2)
{
  void **v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[1];
    if (v3 != *v2)
      free(v3);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

_QWORD *sub_22E907910(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v2 = (void *)a1[64];
  if (v2 != (void *)a1[63])
    free(v2);
  v3 = (_QWORD *)a1[57];
  if (v3 != a1 + 59)
    free(v3);
  v4 = (_QWORD *)a1[53];
  if (v4 != a1 + 55)
    free(v4);
  v5 = (void *)a1[42];
  if (v5 != (void *)a1[41])
    free(v5);
  v6 = (_QWORD *)a1[31];
  if (v6 != a1 + 33)
    free(v6);
  v7 = (_QWORD *)a1[21];
  if (v7 != a1 + 23)
    free(v7);
  v8 = (_QWORD *)a1[16];
  if (v8 != a1 + 18)
    free(v8);
  v9 = (_QWORD *)a1[10];
  if (v9 != a1 + 12)
    free(v9);
  v10 = (void *)a1[3];
  if (v10 != (void *)a1[2])
    free(v10);
  return a1;
}

void sub_22E9079DC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E907A34(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 576 * v2;
    do
    {
      result = sub_22E907AB4(a2, v5);
      v5 += 576;
      a2 += 576;
      v6 -= 576;
    }
    while (v6);
    v7 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v4;
      v9 = 576 * v7;
      v10 = v8 - 576;
      do
      {
        result = (uint64_t)sub_22E907910((_QWORD *)(v10 + v9));
        v9 -= 576;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_22E907AB4(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  if (*(_DWORD *)(a2 + 88))
    sub_22F309A2C(a1 + 80, a2 + 80);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x200000000;
  if (*(_DWORD *)(a2 + 136))
    sub_22F24C77C(a1 + 128, a2 + 128);
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = 0x800000000;
  if (*(_DWORD *)(a2 + 176))
    sub_22F24C77C(a1 + 168, a2 + 168);
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x800000000;
  if (*(_DWORD *)(a2 + 256))
    sub_22F24C77C(a1 + 248, a2 + 248);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x200000000;
  if (*(_DWORD *)(a2 + 432))
    sub_22F309A2C(a1 + 424, a2 + 424);
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 0x400000000;
  if (*(_DWORD *)(a2 + 464))
    sub_22F24C77C(a1 + 456, a2 + 456);
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  v4 = *(_DWORD *)(a2 + 568);
  *(_WORD *)(a1 + 572) = *(_WORD *)(a2 + 572);
  *(_DWORD *)(a1 + 568) = v4;
  return a1;
}

double sub_22E907C38(uint64_t a1, int a2, int a3, __int16 a4, uint64_t a5, int a6)
{
  double result;

  *(_DWORD *)a1 = a2;
  *(_WORD *)(a1 + 4) = a4;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 48;
  *(_QWORD *)(a1 + 24) = a1 + 48;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(a1 + 32) = 4;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x200000000;
  *(_QWORD *)(a1 + 160) = a5;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_QWORD *)(a1 + 176) = 0x800000000;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x800000000;
  *(_QWORD *)(a1 + 328) = a1 + 360;
  *(_QWORD *)(a1 + 336) = a1 + 360;
  *(_QWORD *)(a1 + 344) = 8;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x200000000;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 0x400000000;
  *(_QWORD *)(a1 + 504) = a1 + 536;
  *(_QWORD *)(a1 + 512) = a1 + 536;
  *(_QWORD *)(a1 + 520) = 4;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 568) = a6;
  *(_WORD *)(a1 + 572) = 0;
  return result;
}

unsigned int *sub_22E907CF0(unsigned int *result, int a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;
  llvm *TimeTraceProfilerInstance;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    v4 = result;
    if (a3)
    {
      if (a3 == 1 && result[6])
      {
        TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance((llvm *)result);
        if (TimeTraceProfilerInstance)
          llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
        v6 = (unsigned int *)*((_QWORD *)v4 + 1);
        v7 = v4[6];
        v8 = *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v7 - 4);
        v4[6] = v7 - 1;
        v9 = 1;
        return sub_22E90E580(v6, v9, v8);
      }
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 112);
      v11 = a2 & 0x7FFFFFFF;
      v12 = *(_DWORD *)(v10 + 304);
      v13 = v12 + 1;
      if (v12 + 1 > 1)
      {
        if ((v12 & 0x80000000) != 0)
        {
          v20 = -2 - v12;
          if (((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-2 - v12) >> 6)) >> (-2 - v12)) & 1) != 0)
            v14 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v20);
          else
            v14 = (_DWORD *)sub_22F1E1134(v10, v20, 0);
        }
        else
        {
          v14 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v12);
        }
      }
      else
      {
        v14 = *(_DWORD **)(v10 + 184);
      }
      if ((*v14 & 0x7FFFFFFFu) <= v11
        && (v12 == -2
         || (v13 != *(_DWORD *)(v10 + 192)
           ? ((v13 & 0x80000000) != 0
            ? ((v21 = -3 - v12,
                ((*(_QWORD *)(*(_QWORD *)(v10 + 224) + 8 * ((-3 - v12) >> 6)) >> (-3 - v12)) & 1) == 0)
             ? (v16 = (_DWORD *)sub_22F1E1134(v10, v21, 0))
             : (v16 = (_DWORD *)(*(_QWORD *)(v10 + 200) + 24 * v21)))
            : (v16 = (_DWORD *)(*(_QWORD *)(v10 + 184) + 24 * v13)),
              v15 = *v16 & 0x7FFFFFFF)
           : (v15 = *(_DWORD *)(v10 + 216)),
             v15 > v11)))
      {
        v17 = *(_DWORD *)(v10 + 304);
      }
      else
      {
        v17 = sub_22F1E1EE8(v10, v11);
      }
      result = sub_22E49F3DC((_QWORD *)v10, v17);
      if (result)
      {
        v18 = result[2];
        if (v18)
        {
          if (llvm::getTimeTraceProfilerInstance((llvm *)result))
          {
            if (sub_22E63AF88(v10, *(_DWORD *)(v10 + 304), v11))
              v22 = *(_DWORD *)(v10 + 304);
            else
              v22 = sub_22F1E1EE8(v10, v11);
            v23 = sub_22E6155EC((_QWORD *)v10, v22);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 88);
              do
              {
                v25 = *(_QWORD *)(v24 + 8);
                if ((v25 & 2) == 0)
                  break;
                v24 = v25 & 0xFFFFFFFFFFFFFFFCLL;
              }
              while (v24);
            }
            llvm::timeTraceProfilerBegin();
          }
          v19 = v4[6];
          if (v19 >= v4[7])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v19 = v4[6];
          }
          *(_DWORD *)(*((_QWORD *)v4 + 2) + 4 * v19) = v18;
          ++v4[6];
          v6 = (unsigned int *)*((_QWORD *)v4 + 1);
          v9 = 0;
          v8 = v18;
          return sub_22E90E580(v6, v9, v8);
        }
      }
    }
  }
  return result;
}

unsigned int *sub_22E907F64(uint64_t a1)
{
  return sub_22F308988(*(unsigned int **)a1, **(_DWORD **)(a1 + 8));
}

unsigned int *sub_22E907F74(unsigned int **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_22E3B3F8C();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v2];
  v9 = (unsigned int *)&v7[80 * v6];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  v10 = (unsigned int *)(v8 + 80);
  sub_22F309BF8((uint64_t)(v8 + 8), (unsigned int *)(a2 + 8));
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = (unsigned int *)v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *((_QWORD *)v11 - 10);
      v11 -= 20;
      *((_QWORD *)v8 - 10) = v13;
      v8 -= 80;
      sub_22F309BF8((uint64_t)(v8 + 8), v11 + 2);
    }
    while (v11 != v12);
    v11 = *a1;
    v14 = a1[1];
    *a1 = (unsigned int *)v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v11)
    {
      v15 = (unsigned int *)*((_QWORD *)v14 - 4);
      if (v14 - 4 != v15)
        free(v15);
      if ((*(_BYTE *)(v14 - 18) & 1) == 0)
        llvm::deallocate_buffer(*((llvm **)v14 - 8), (void *)(16 * *(v14 - 14)));
      v14 -= 20;
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

uint64_t sub_22E9080D4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v16;
    v10 = 1;
    v11 = (_OWORD *)(a1 + 8);
    do
    {
      v12 = v8;
      if ((*(_QWORD *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_OWORD *)v9 = *v11;
        v9 += 2;
      }
      v11 = (_OWORD *)(a1 + 8 + 16 * v10);
      v8 = 1;
      v10 = 2;
    }
    while ((v12 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22E908258(a1, v16, v9);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22E908258(a1, v6, &v6[2 * v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E908258(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_OWORD *)(result + 8);
    v9 = (_OWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_OWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = xmmword_22F463B20;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22F24BEB4((uint64_t)v5, a2, &v12);
      v10 = (_QWORD *)v12;
      v11 = *a2;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 + 2);
      *v10 = v11;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_22E908328(int64x2_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t *v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 8;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 8));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + 16 * v10;
  if (a3 == v15)
    v16 = 0;
  else
    v16 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - v14) - ((v15 - *(_QWORD *)v14) >> 4);
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = 32 * (v13 - v12) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v17 + v10;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      sub_22E908C20((uint64_t)a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (uint64_t *)(v12 + 8 * (v21 >> 8));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = *v23 + 16 * v21;
    v30 = v17 - v16;
    if (v17 - v16 >= v6)
    {
      v34 = (_OWORD *)v24;
      v33 = v23;
      if (!v6)
        return;
    }
    else
    {
      if (v30 >= v6 >> 1)
        v31 = (_OWORD *)(a5 + 16 * (v17 - v16 - v6));
      else
        v31 = (_OWORD *)(a4 + 16 * v30);
      if (v31 == (_OWORD *)a5)
      {
        v34 = (_OWORD *)v24;
        v33 = v23;
      }
      else
      {
        v32 = v31;
        v33 = v23;
        v34 = (_OWORD *)v24;
        do
        {
          *v34++ = *v32;
          if ((_OWORD *)((char *)v34 - *v33) == (_OWORD *)4096)
          {
            v35 = (_OWORD *)v33[1];
            ++v33;
            v34 = v35;
          }
          ++v32;
          ++a1[2].i64[1];
        }
        while (v32 != (_OWORD *)a5);
        a5 = (uint64_t)v31;
      }
      v6 = v30;
      if (!v30)
        return;
    }
    v47 = ((v24 - *v23) >> 4) - v6;
    if (v47 < 1)
    {
      v50 = 255 - v47;
      v48 = &v23[-(v50 >> 8)];
      v49 = *v48 + 16 * ~(_BYTE)v50;
    }
    else
    {
      v48 = &v23[(unint64_t)v47 >> 8];
      v49 = *v48 + 16 * v47;
    }
    if (v49 != v24)
    {
      v51 = v48;
      v52 = (_OWORD *)v49;
      do
      {
        *v34++ = *v52;
        if ((_OWORD *)((char *)v34 - *v33) == (_OWORD *)4096)
        {
          v53 = (_OWORD *)v33[1];
          ++v33;
          v34 = v53;
        }
        if ((_OWORD *)((char *)++v52 - *v51) == (_OWORD *)4096)
        {
          v54 = (_OWORD *)v51[1];
          ++v51;
          v52 = v54;
        }
        ++a1[2].i64[1];
      }
      while (v52 != (_OWORD *)v24);
    }
    if (v6 < v30)
    {
      v55 = ((v24 - *v23) >> 4) - v30;
      if (v55 < 1)
      {
        v59 = 255 - v55;
        v56 = &v23[-(v59 >> 8)];
        v57 = *v56 + 16 * ~(_BYTE)v59;
      }
      else
      {
        v56 = &v23[(unint64_t)v55 >> 8];
        v57 = *v56 + 16 * v55;
      }
      sub_22E909260(v56, v57, v48, v49, v23, v24, (uint64_t)&v60);
      v23 = v62;
      v24 = v63;
    }
    sub_22E909328(a4, a5, v23, v24, &v60);
    return;
  }
  if (a6 > v10)
  {
    sub_22E9087B8((uint64_t)a1, a6 - v10);
    v10 = a1[2].u64[0];
    v12 = a1->i64[1];
    v13 = a1[1].i64[0];
    v11 = v10 >> 8;
  }
  v18 = (uint64_t *)(v12 + 8 * v11);
  if (v13 == v12)
    v19 = 0;
  else
    v19 = *v18 + 16 * v10;
  if (v6 <= v16)
  {
    v28 = v19;
    v27 = (uint64_t *)(v12 + 8 * v11);
    if (!v6)
      return;
    goto LABEL_46;
  }
  if (v16 >= v6 >> 1)
    v25 = a4 + 16 * (v6 - v16);
  else
    v25 = a5 - 16 * v16;
  if (v25 == a4)
  {
    v28 = v19;
    v27 = (uint64_t *)(v12 + 8 * v11);
  }
  else
  {
    v26 = v25;
    v27 = v18;
    v28 = v19;
    do
    {
      if (v28 == *v27)
      {
        v29 = *--v27;
        v28 = v29 + 4096;
      }
      *(_OWORD *)(v28 - 16) = *(_OWORD *)(v26 - 16);
      v28 -= 16;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_22F463B30);
      v26 -= 16;
    }
    while (v26 != a4);
    a4 = v25;
  }
  v6 = v16;
  if (v16)
  {
LABEL_46:
    v36 = v6 + ((v19 - *v18) >> 4);
    if (v36 < 1)
    {
      v39 = 255 - v36;
      v37 = &v18[-(v39 >> 8)];
      v38 = *v37 + 16 * ~(_BYTE)v39;
    }
    else
    {
      v37 = &v18[(unint64_t)v36 >> 8];
      v38 = *v37 + 16 * v36;
    }
    if (v38 != v19)
    {
      v40 = v37;
      v41 = v38;
      do
      {
        if (v28 == *v27)
        {
          v42 = *--v27;
          v28 = v42 + 4096;
        }
        if (v41 == *v40)
        {
          v43 = *--v40;
          v41 = v43 + 4096;
        }
        *(_OWORD *)(v28 - 16) = *(_OWORD *)(v41 - 16);
        v28 -= 16;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_22F463B30);
        v41 -= 16;
      }
      while (v41 != v19);
    }
    if (v6 < v16)
    {
      v44 = v16 + ((v19 - *v18) >> 4);
      if (v44 < 1)
      {
        v58 = 255 - v44;
        v45 = &v18[-(v58 >> 8)];
        v46 = *v45 + 16 * ~(_BYTE)v58;
      }
      else
      {
        v45 = &v18[(unint64_t)v44 >> 8];
        v46 = *v45 + 16 * v44;
      }
      v60 = v18;
      v61 = v19;
      sub_22E909140(v37, v38, v45, v46, (uint64_t)&v60);
      v18 = v60;
      v19 = v61;
    }
    sub_22E9091D0(a4, a5, v18, v19, &v60);
  }
}

void sub_22E9087B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *i;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  __int128 v59;
  char *v60;
  char *v61;
  uint64_t v62;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = 32 * (v4 - v3) - 1;
  if ((_BYTE)v6)
    v8 = (v6 >> 8) + 1;
  else
    v8 = v6 >> 8;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v7 - (*(_QWORD *)(a1 + 40) + v9);
  if (v8 >= v10 >> 8)
    v11 = v10 >> 8;
  else
    v11 = v8;
  if (v8 <= v10 >> 8)
  {
    for (*(_QWORD *)(a1 + 32) = v9 + (v11 << 8); v11; --v11)
    {
      v17 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v59 = *(_QWORD *)(v17 - 8);
      *(_QWORD *)(a1 + 16) = v17 - 8;
      sub_22F2D2EA4((void **)a1, &v59);
    }
  }
  else
  {
    v12 = v8 - v11;
    v13 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v8 - v11 <= (v13 >> 3) - (v5 >> 3))
    {
      if (v12)
      {
        if (v3 == *(_QWORD *)a1)
        {
LABEL_31:
          v20 = v12;
          do
          {
            *(_QWORD *)&v59 = operator new(0x1000uLL);
            sub_22F2D2D80(a1, &v59);
            --v20;
          }
          while (v20);
          v11 += v12;
          v9 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          while (1)
          {
            *(_QWORD *)&v59 = operator new(0x1000uLL);
            sub_22F2D2EA4((void **)a1, &v59);
            v18 = *(_QWORD *)(a1 + 8);
            v19 = *(_QWORD *)(a1 + 16) - v18 == 8 ? 255 : 256;
            v9 = v19 + *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v9;
            if (!--v12)
              break;
            if (v18 == *(_QWORD *)a1)
              goto LABEL_31;
          }
        }
      }
      for (*(_QWORD *)(a1 + 32) = v9 + (v11 << 8); v11; --v11)
      {
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v59 = *(_QWORD *)(v21 - 8);
        *(_QWORD *)(a1 + 16) = v21 - 8;
        sub_22F2D2EA4((void **)a1, &v59);
      }
    }
    else
    {
      v14 = v4 == v3;
      if (v13 >> 2 <= v12 + (v5 >> 3))
        v15 = v12 + (v5 >> 3);
      else
        v15 = v13 >> 2;
      v62 = a1 + 24;
      if (v15)
      {
        if (v15 >> 61)
LABEL_85:
          sub_22E3B3F8C();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v22 = (v8 << 8) - v14;
      *(_QWORD *)&v59 = v16;
      *((_QWORD *)&v59 + 1) = v16;
      v60 = v16;
      v61 = &v16[8 * v15];
      do
      {
        v58 = operator new(0x1000uLL);
        sub_22F2C31E8((uint64_t)&v59, &v58);
        --v12;
      }
      while (v12);
      v23 = *(_QWORD *)(a1 + 16);
      for (i = v60; v11; --v11)
      {
        if (i == v61)
        {
          v25 = (char *)*((_QWORD *)&v59 + 1);
          v26 = (void *)v59;
          if (*((_QWORD *)&v59 + 1) <= (unint64_t)v59)
          {
            if (i == (char *)v59)
              v32 = 1;
            else
              v32 = (uint64_t)&i[-v59] >> 2;
            if (v32 >> 61)
              goto LABEL_85;
            v33 = (char *)operator new(8 * v32);
            v35 = i - v25;
            v34 = i == v25;
            i = &v33[8 * (v32 >> 2)];
            if (!v34)
            {
              i = &v33[8 * (v32 >> 2) + (v35 & 0xFFFFFFFFFFFFFFF8)];
              v36 = 8 * (v35 >> 3);
              v37 = &v33[8 * (v32 >> 2)];
              do
              {
                v38 = *(_QWORD *)v25;
                v25 += 8;
                *(_QWORD *)v37 = v38;
                v37 += 8;
                v36 -= 8;
              }
              while (v36);
            }
            *(_QWORD *)&v59 = v33;
            *((_QWORD *)&v59 + 1) = &v33[8 * (v32 >> 2)];
            v60 = i;
            v61 = &v33[8 * v32];
            if (v26)
            {
              operator delete(v26);
              i = v60;
            }
          }
          else
          {
            v27 = (uint64_t)(*((_QWORD *)&v59 + 1) - v59) >> 3;
            if (v27 >= -1)
              v28 = v27 + 1;
            else
              v28 = v27 + 2;
            v29 = *((_QWORD *)&v59 + 1) - 8 * (v28 >> 1);
            v30 = &i[-*((_QWORD *)&v59 + 1)];
            if (i != *((char **)&v59 + 1))
            {
              memmove((void *)(*((_QWORD *)&v59 + 1) - 8 * (v28 >> 1)), *((const void **)&v59 + 1), (size_t)&i[-*((_QWORD *)&v59 + 1)]);
              i = (char *)*((_QWORD *)&v59 + 1);
            }
            v31 = &i[-8 * (v28 >> 1)];
            i = &v30[v29];
            *((_QWORD *)&v59 + 1) = v31;
            v60 = &v30[v29];
          }
        }
        *(_QWORD *)i = *(_QWORD *)(v23 - 8);
        i = v60 + 8;
        v60 += 8;
        v23 = *(_QWORD *)(a1 + 16) - 8;
        *(_QWORD *)(a1 + 16) = v23;
      }
      v39 = *(char **)(a1 + 8);
      if (v39 == (char *)v23)
      {
        v39 = (char *)v23;
      }
      else
      {
        do
        {
          if (i == v61)
          {
            v40 = (char *)*((_QWORD *)&v59 + 1);
            v41 = (void *)v59;
            if (*((_QWORD *)&v59 + 1) <= (unint64_t)v59)
            {
              if (i == (char *)v59)
                v47 = 1;
              else
                v47 = (uint64_t)&i[-v59] >> 2;
              if (v47 >> 61)
                goto LABEL_85;
              v48 = (char *)operator new(8 * v47);
              v49 = i - v40;
              v34 = i == v40;
              i = &v48[8 * (v47 >> 2)];
              if (!v34)
              {
                i = &v48[8 * (v47 >> 2) + (v49 & 0xFFFFFFFFFFFFFFF8)];
                v50 = 8 * (v49 >> 3);
                v51 = &v48[8 * (v47 >> 2)];
                do
                {
                  v52 = *(_QWORD *)v40;
                  v40 += 8;
                  *(_QWORD *)v51 = v52;
                  v51 += 8;
                  v50 -= 8;
                }
                while (v50);
              }
              *(_QWORD *)&v59 = v48;
              *((_QWORD *)&v59 + 1) = &v48[8 * (v47 >> 2)];
              v60 = i;
              v61 = &v48[8 * v47];
              if (v41)
              {
                operator delete(v41);
                i = v60;
              }
            }
            else
            {
              v42 = (uint64_t)(*((_QWORD *)&v59 + 1) - v59) >> 3;
              if (v42 >= -1)
                v43 = v42 + 1;
              else
                v43 = v42 + 2;
              v44 = *((_QWORD *)&v59 + 1) - 8 * (v43 >> 1);
              v45 = &i[-*((_QWORD *)&v59 + 1)];
              if (i != *((char **)&v59 + 1))
              {
                memmove((void *)(*((_QWORD *)&v59 + 1) - 8 * (v43 >> 1)), *((const void **)&v59 + 1), (size_t)&i[-*((_QWORD *)&v59 + 1)]);
                i = (char *)*((_QWORD *)&v59 + 1);
              }
              v46 = &i[-8 * (v43 >> 1)];
              i = &v45[v44];
              *((_QWORD *)&v59 + 1) = v46;
              v60 = &v45[v44];
            }
          }
          v53 = *(_QWORD *)v39;
          v39 += 8;
          *(_QWORD *)i = v53;
          i = v60 + 8;
          v60 += 8;
        }
        while (v39 != *(char **)(a1 + 16));
        v23 = *(_QWORD *)(a1 + 8);
      }
      v54 = v61;
      v55 = *(char **)(a1 + 24);
      v56 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = i;
      *(_QWORD *)(a1 + 24) = v54;
      v57 = *(void **)a1;
      *(_OWORD *)a1 = v59;
      *(_QWORD *)&v59 = v57;
      *((_QWORD *)&v59 + 1) = v23;
      v60 = v39;
      v61 = v55;
      *(_QWORD *)(a1 + 32) = v22 + v56;
      if (v39 != (char *)v23)
        v60 = &v39[(v23 - (_QWORD)v39 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v57)
        operator delete(v57);
    }
  }
}

void sub_22E908C20(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (*(_QWORD *)(a1 + 32) = v7 - (v8 << 8); v8; --v8)
    {
      v14 = *(_QWORD **)(a1 + 8);
      v17 = *v14;
      v15 = (char *)(v14 + 1);
      v16 = v17;
      *(_QWORD *)(a1 + 8) = v15;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v15 <= *(_QWORD *)a1)
        {
          if (v3 == v18)
            v24 = 1;
          else
            v24 = (v3 - v18) >> 2;
          if (v24 >> 61)
            goto LABEL_102;
          v25 = (char *)operator new(8 * v24);
          v26 = &v25[8 * (v24 >> 2)];
          v28 = v3 - v15;
          v27 = v3 == v15;
          v3 = v26;
          if (!v27)
          {
            v3 = &v26[v28 & 0xFFFFFFFFFFFFFFF8];
            v29 = 8 * (v28 >> 3);
            v30 = &v25[8 * (v24 >> 2)];
            do
            {
              v31 = *(_QWORD *)v15;
              v15 += 8;
              *(_QWORD *)v30 = v31;
              v30 += 8;
              v29 -= 8;
            }
            while (v29);
          }
          *(_QWORD *)a1 = v25;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v25[8 * v24];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v19 = (uint64_t)&v15[-*(_QWORD *)a1] >> 3;
          if (v19 >= -1)
            v20 = v19 + 1;
          else
            v20 = v19 + 2;
          v21 = &v15[-8 * (v20 >> 1)];
          v22 = v3 - v15;
          if (v3 != v15)
          {
            memmove(&v15[-8 * (v20 >> 1)], v15, v3 - v15);
            v3 = *(char **)(a1 + 8);
          }
          v23 = &v3[-8 * (v20 >> 1)];
          v3 = &v21[v22];
          *(_QWORD *)(a1 + 8) = v23;
          *(_QWORD *)(a1 + 16) = &v21[v22];
        }
      }
      *(_QWORD *)v3 = v16;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
        {
          *(_QWORD *)&v76 = operator new(0x1000uLL);
          sub_22F2D2D80(a1, &v76);
          --v6;
          if (!--v9)
            goto LABEL_48;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v76 = operator new(0x1000uLL);
          sub_22F2D2EA4((void **)a1, &v76);
          if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
            v33 = 255;
          else
            v33 = 256;
          v34 = v33 + *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v34;
        }
        v8 = v6;
      }
      else
      {
LABEL_48:
        v34 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v34 - (v8 << 8);
      if (v8)
      {
        v35 = *(char **)(a1 + 16);
        do
        {
          v36 = *(_QWORD **)(a1 + 8);
          v39 = *v36;
          v37 = (char *)(v36 + 1);
          v38 = v39;
          *(_QWORD *)(a1 + 8) = v37;
          if (v35 == *(char **)(a1 + 24))
          {
            v40 = *(char **)a1;
            if ((unint64_t)v37 <= *(_QWORD *)a1)
            {
              if (v35 == v40)
                v46 = 1;
              else
                v46 = (v35 - v40) >> 2;
              if (v46 >> 61)
                goto LABEL_102;
              v47 = (char *)operator new(8 * v46);
              v48 = &v47[8 * (v46 >> 2)];
              v49 = v35 - v37;
              v27 = v35 == v37;
              v35 = v48;
              if (!v27)
              {
                v35 = &v48[v49 & 0xFFFFFFFFFFFFFFF8];
                v50 = 8 * (v49 >> 3);
                v51 = &v47[8 * (v46 >> 2)];
                do
                {
                  v52 = *(_QWORD *)v37;
                  v37 += 8;
                  *(_QWORD *)v51 = v52;
                  v51 += 8;
                  v50 -= 8;
                }
                while (v50);
              }
              *(_QWORD *)a1 = v47;
              *(_QWORD *)(a1 + 8) = v48;
              *(_QWORD *)(a1 + 16) = v35;
              *(_QWORD *)(a1 + 24) = &v47[8 * v46];
              if (v40)
              {
                operator delete(v40);
                v35 = *(char **)(a1 + 16);
              }
            }
            else
            {
              v41 = (uint64_t)&v37[-*(_QWORD *)a1] >> 3;
              if (v41 >= -1)
                v42 = v41 + 1;
              else
                v42 = v41 + 2;
              v43 = &v37[-8 * (v42 >> 1)];
              v44 = v35 - v37;
              if (v35 != v37)
              {
                memmove(&v37[-8 * (v42 >> 1)], v37, v35 - v37);
                v35 = *(char **)(a1 + 8);
              }
              v45 = &v35[-8 * (v42 >> 1)];
              v35 = &v43[v44];
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = &v43[v44];
            }
          }
          *(_QWORD *)v35 = v38;
          v35 = (char *)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v35;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      if (v10 >> 2 <= v9 + (v4 >> 3))
        v12 = v9 + v11;
      else
        v12 = v10 >> 2;
      v78 = a1 + 24;
      if (v12)
      {
        if (v12 >> 61)
LABEL_102:
          sub_22E3B3F8C();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v53 = v8 << 8;
      *(_QWORD *)&v76 = v13;
      *((_QWORD *)&v76 + 1) = &v13[8 * (v11 - v8)];
      *(_QWORD *)&v77 = *((_QWORD *)&v76 + 1);
      *((_QWORD *)&v77 + 1) = &v13[8 * v12];
      do
      {
        v75 = operator new(0x1000uLL);
        sub_22F2C31E8((uint64_t)&v76, &v75);
        --v9;
      }
      while (v9);
      v54 = *(char **)(a1 + 8);
      if (v8)
      {
        v55 = (char *)v77;
        do
        {
          if (v55 == *((char **)&v77 + 1))
          {
            v56 = (char *)*((_QWORD *)&v76 + 1);
            v57 = (void *)v76;
            if (*((_QWORD *)&v76 + 1) <= (unint64_t)v76)
            {
              if (v55 == (char *)v76)
                v63 = 1;
              else
                v63 = (uint64_t)&v55[-v76] >> 2;
              if (v63 >> 61)
                goto LABEL_102;
              v64 = (char *)operator new(8 * v63);
              v65 = v55 - v56;
              v27 = v55 == v56;
              v55 = &v64[8 * (v63 >> 2)];
              if (!v27)
              {
                v55 = &v64[8 * (v63 >> 2) + (v65 & 0xFFFFFFFFFFFFFFF8)];
                v66 = 8 * (v65 >> 3);
                v67 = &v64[8 * (v63 >> 2)];
                do
                {
                  v68 = *(_QWORD *)v56;
                  v56 += 8;
                  *(_QWORD *)v67 = v68;
                  v67 += 8;
                  v66 -= 8;
                }
                while (v66);
              }
              *(_QWORD *)&v76 = v64;
              *((_QWORD *)&v76 + 1) = &v64[8 * (v63 >> 2)];
              *(_QWORD *)&v77 = v55;
              *((_QWORD *)&v77 + 1) = &v64[8 * v63];
              if (v57)
              {
                operator delete(v57);
                v55 = (char *)v77;
              }
            }
            else
            {
              v58 = (uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 3;
              if (v58 >= -1)
                v59 = v58 + 1;
              else
                v59 = v58 + 2;
              v60 = *((_QWORD *)&v76 + 1) - 8 * (v59 >> 1);
              v61 = &v55[-*((_QWORD *)&v76 + 1)];
              if (v55 != *((char **)&v76 + 1))
              {
                memmove((void *)(*((_QWORD *)&v76 + 1) - 8 * (v59 >> 1)), *((const void **)&v76 + 1), (size_t)&v55[-*((_QWORD *)&v76 + 1)]);
                v55 = (char *)*((_QWORD *)&v76 + 1);
              }
              v62 = &v55[-8 * (v59 >> 1)];
              v55 = &v61[v60];
              *((_QWORD *)&v76 + 1) = v62;
              *(_QWORD *)&v77 = &v61[v60];
            }
          }
          *(_QWORD *)v55 = *(_QWORD *)v54;
          v55 = (char *)(v77 + 8);
          *(_QWORD *)&v77 = v77 + 8;
          v54 = (char *)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v54;
          --v8;
        }
        while (v8);
      }
      v69 = v54;
      if (*(char **)(a1 + 16) != v54)
      {
        v69 = *(char **)(a1 + 16);
        do
        {
          v69 -= 8;
          sub_22F2C331C((const void **)&v76, v69);
        }
        while (v69 != *(char **)(a1 + 8));
        v54 = *(char **)(a1 + 16);
      }
      v70 = *(char **)a1;
      v71 = v76;
      v72 = v77;
      *(_QWORD *)&v76 = *(_QWORD *)a1;
      *((_QWORD *)&v76 + 1) = v69;
      v73 = *(_QWORD *)(a1 + 24);
      v74 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)a1 = v71;
      *(_OWORD *)(a1 + 16) = v72;
      *(_QWORD *)&v77 = v54;
      *((_QWORD *)&v77 + 1) = v73;
      *(_QWORD *)(a1 + 32) = v74 - v53;
      if (v54 != v69)
        *(_QWORD *)&v77 = &v54[(v69 - v54 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v70)
        operator delete(v70);
    }
  }
}

double sub_22E909140(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(uint64_t **)a5;
  v8 = *(_QWORD *)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4096; ; i = v12 + 4096)
    {
      sub_22E9091D0(a2, i, v7, v8, &v14);
      v8 = *((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_22E9091D0(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_22E9091D0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    while (1)
    {
      v6 = v5 - a4 + 4096;
      if ((a2 - a1) >> 4 >= v6 >> 4)
        v7 = v6 >> 4;
      else
        v7 = (a2 - a1) >> 4;
      if (v7)
      {
        v8 = a1 + 16 * v7;
        do
        {
          *(_QWORD *)a4 = *(_QWORD *)a1;
          *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 8);
          a4 += 16;
          a1 += 16;
        }
        while (a1 != v8);
        a1 = v8;
      }
      if (a1 == a2)
        break;
      v9 = a3[1];
      ++a3;
      v5 = v9;
      a4 = v9;
    }
    if (*a3 + 4096 == a4)
    {
      v10 = a3[1];
      ++a3;
      a4 = v10;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

uint64_t sub_22E909260@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  if (a1 == a3)
  {
    result = sub_22E909328(a2, a4, a5, a6, &v20);
    *(_QWORD *)a7 = a3;
    *(_QWORD *)(a7 + 8) = a4;
    v19 = v21;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_22E909328(v12, v14, v15, v16, &v20);
      v16 = *((_QWORD *)&v21 + 1);
      v15 = (uint64_t *)v21;
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    result = sub_22E909328(a2, *a1 + 4096, (uint64_t *)v21, *((uint64_t *)&v21 + 1), &v20);
    v19 = v21;
    *(_QWORD *)a7 = a3;
    *(_QWORD *)(a7 + 8) = a4;
  }
  *(_OWORD *)(a7 + 16) = v19;
  return result;
}

uint64_t sub_22E909328@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (result == a2)
  {
    a2 = result;
  }
  else
  {
    v5 = *a3;
    v6 = a2;
    while (1)
    {
      v7 = a4 - v5;
      if ((v6 - result) >> 4 >= v7 >> 4)
        v8 = v7 >> 4;
      else
        v8 = (v6 - result) >> 4;
      if (v8)
      {
        v9 = (_DWORD *)(v6 - 8);
        v10 = -16 * v8;
        do
        {
          *(_QWORD *)(a4 - 16) = *((_QWORD *)v9 - 1);
          a4 -= 16;
          v11 = *v9;
          v9 -= 4;
          *(_DWORD *)(a4 + 8) = v11;
          v10 += 16;
        }
        while (v10);
      }
      v6 -= 16 * v8;
      if (v6 == result)
        break;
      v12 = *--a3;
      v5 = v12;
      a4 = v12 + 4096;
    }
    if (*a3 + 4096 == a4)
    {
      v13 = a3[1];
      ++a3;
      a4 = v13;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

char *sub_22E9093B4(void **a1, int a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 59)
    sub_22E3B3F8C();
  v12 = (char *)operator new(32 * v9);
  v13 = &v12[32 * v5];
  *(_DWORD *)v13 = a2;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 16);
  *(_OWORD *)(v13 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  if (v3 == v4)
  {
    v16 = &v12[32 * v5];
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v13[v14];
      *((_DWORD *)v15 - 8) = *(_DWORD *)&v3[v14 - 32];
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v3[v14 - 8];
      *(_OWORD *)(v15 - 24) = *(_OWORD *)&v3[v14 - 24];
      *(_QWORD *)&v3[v14 - 24] = 0;
      v14 -= 32;
    }
    while (&v3[v14] != v4);
    v16 = &v13[v14];
  }
  v17 = v13 + 32;
  v18 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = v16;
  a1[1] = v13 + 32;
  a1[2] = &v12[32 * v9];
  while (v19 != v18)
  {
    v20 = *((_QWORD *)v19 - 3);
    if (v20)
    {
      v21 = *((_QWORD *)v19 - 2);
      if (v21)
      {
        sub_22E3BB10C(v21, v20);
        *((_QWORD *)v19 - 3) = 0;
      }
    }
    v19 -= 32;
  }
  if (v18)
    operator delete(v18);
  return v17;
}

void sub_22E9094F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  __int128 v11;
  BOOL v12;
  _OWORD v13[2];
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
  {
    v7 = *(_DWORD *)(a3 + 28);
    if ((v7 & 0x8000000) != 0)
    {
      v6 = (_QWORD *)v6[1];
      goto LABEL_15;
    }
    v6 = (_QWORD *)*v6;
  }
  else
  {
    v7 = *(_DWORD *)(a3 + 28);
    if ((v7 & 0x8000000) != 0)
      goto LABEL_15;
  }
  if ((v7 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v6 = (_QWORD *)(a3 + 72);
  }
  else if ((v7 & 0x7Fu) - 33 >= 0xFFFFFFF9)
  {
    v8 = *(_QWORD *)(a3 + 48);
    v9 = *(_DWORD *)(v8 + 28) & 0x7F;
    v10 = v9 > 0x39 || ((1 << v9) & 0x3F0003E01011066) == 0;
    if (!v10 || (v9 - 70 <= 0xD ? (v12 = ((1 << (v9 - 70)) & 0x2803) == 0) : (v12 = 1), !v12 || v9 - 19 <= 4))
      v6 = (_QWORD *)sub_22EFCAE04(v8);
  }
LABEL_15:
  sub_22E909698((uint64_t)&v16, (unint64_t)v6);
  v11 = *(_OWORD *)(a2 + 24);
  v13[0] = *(_OWORD *)(a2 + 8);
  v13[1] = v11;
  sub_22E78D434((uint64_t)&v14, (uint64_t *)(a2 + 40));
  sub_22E90BB84((uint64_t)v13);
  if (sub_22E909914(a1, &v16, *(_DWORD *)(a2 + 4), (uint64_t)v13) == 1)
    *(_BYTE *)(a2 + 1) = 1;
  if (v14 && v15)
    sub_22E3BB10C(v15, v14);
  if (v19 != v20)
    free(v19);
  if (v17 != &v18)
    free(v17);
}

uint64_t sub_22E909698(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v2 = a2;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 0x400000000;
  *(_BYTE *)(a1 + 104) = sub_22EFC7ADC(a2);
  if (v2 && (*(_WORD *)(v2 + 8) & 0x7F) == 0x35 && (*(_BYTE *)(v2 - 43) & 2) != 0)
  {
    v4 = *(_QWORD *)(v2 + 88);
    if (v4)
      v2 = v4 + 72;
    else
      v2 = sub_22EFCAE04(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v2 - 32) & 0xFFFFFFFFFFFFFFF8) + 16) + 48));
  }
  while (1)
  {
    while (1)
    {
      v5 = *(_WORD *)(v2 + 8);
      v6 = v5 & 0x7F;
      if ((v6 - 35) <= 2)
      {
        v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v2 - 64) + 32))(v2 - 64);
        v8 = *(unsigned int *)(a1 + 64);
        if (v8 >= *(unsigned int *)(a1 + 68))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = *(unsigned int *)(a1 + 64);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8) = v7;
        ++*(_DWORD *)(a1 + 64);
        v9 = *(_QWORD *)(v2 - 48);
        goto LABEL_38;
      }
      if ((v5 & 0x7Eu) - 52 > 5)
        break;
      v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v2 - 72) + 32))(v2 - 72);
      v11 = *(unsigned int *)(a1 + 16);
      if (v11 >= *(unsigned int *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = v10;
      ++*(_DWORD *)(a1 + 16);
      v12 = *(_QWORD *)(v2 - 56);
      if ((*(_WORD *)(v2 - 42) & 0x180) != 0)
      {
        v2 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
        {
          v2 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          goto LABEL_39;
        }
      }
      else
      {
        v2 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
LABEL_39:
          v2 = *(_QWORD *)v2;
      }
    }
    if (v6 == 16 || v6 == 83)
      return a1;
    v13 = -40;
    if (v6 > 70)
    {
      if (v6 == 71)
      {
        v13 = -56;
      }
      else if (v6 != 81)
      {
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 > 0x18)
        goto LABEL_30;
      if (((1 << v6) & 0x1066) != 0)
        goto LABEL_37;
      if (v6 == 24)
      {
        v13 = -48;
      }
      else
      {
LABEL_30:
        if (v6 != 70)
        {
LABEL_31:
          v14 = v6 - 52;
          if ((v6 - 33) >= 5)
            v15 = -48;
          else
            v15 = -64;
          if (v14 >= 6)
            v13 = v15;
          else
            v13 = -72;
          goto LABEL_37;
        }
        v13 = -64;
      }
    }
LABEL_37:
    v9 = *(_QWORD *)(v2 + v13 + 16);
LABEL_38:
    v2 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      goto LABEL_39;
  }
}

uint64_t sub_22E909914(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t i;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  void *__p[2];
  char v56;
  unint64_t v57;
  BOOL v58;
  void *v59[2];
  char v60;
  unint64_t v61;
  uint64_t v62[3];
  uint64_t v63;
  llvm *v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  _QWORD v70[5];
  void *v71;
  uint64_t v72;
  _DWORD v73[26];
  uint64_t v74;
  __int16 v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  result = sub_22E90B950(a1, (uint64_t)a2, a4);
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result != 1)
  {
    v19 = *a2;
    v20 = *(_QWORD *)(a1 + 88);
    v21 = *(_BYTE *)a4;
    v22 = *(_QWORD *)(a4 + 24);
    v53 = *(_OWORD *)(a4 + 8);
    v23 = sub_22EFCEA4C(v20, v19, (uint64_t *)(a4 + 32));
    *(_DWORD *)(v23 + 32) = a3;
    *(_BYTE *)(v23 + 36) = *(_BYTE *)(v23 + 36) & 0xF8 | v21 & 7;
    *(_OWORD *)(v23 + 40) = v53;
    *(_QWORD *)(v23 + 56) = v22;
    return 2;
  }
  if ((**(_BYTE **)(a1 + 72) & 0x10) == 0)
    goto LABEL_4;
  v24 = *(_QWORD *)(a4 + 8);
  if (!v24)
    goto LABEL_4;
  v25 = *(_DWORD *)(v24 + 28);
  if ((v25 & 0x7E) != 0x2E)
    goto LABEL_4;
  v26 = *(_QWORD *)(a4 + 8);
  do
    v26 = *(_QWORD *)(v26 + 72);
  while (v26 && (*(_DWORD *)(v26 + 28) & 0x7E) == 0x2E);
  if (!v26 || (*(_DWORD *)(v26 + 28) & 0x7F) != 13)
    goto LABEL_4;
  if ((v25 & 0x7Fu) <= 0x2F && ((1 << (v25 & 0x7F)) & 0xC00000060000) != 0)
    v24 = sub_22EFBAEA4(*(_QWORD *)(a4 + 8));
  if ((v25 & 0x6000) != 0x4000 || (*(_BYTE *)(v24 + 29) & 0x40) != 0)
  {
LABEL_4:
    if (!*(_DWORD *)(a4 + 48))
      return 1;
    v9 = a3;
    v10 = *(_QWORD *)(a4 + 72);
    v11 = *(_BYTE *)a4;
    v13 = *(_QWORD *)(a4 + 8);
    v12 = *(_QWORD *)(a4 + 16);
    sub_22E90379C((_QWORD *)a1, v9, a4 + 32, 0, (uint64_t)&v61);
    v58 = (*(_BYTE *)a4 & 3) == 1;
    v14 = sub_22E894E38((uint64_t)&v61, (unsigned __int8 *)&v58);
    v15 = 0;
    if ((v11 & 4) != 0 && v13)
      v15 = *(void **)(v13 + 40);
    v59[0] = v15;
    v16 = sub_22E894538(v14, (uint64_t *)v59);
    v17 = *(_QWORD *)(v12 + 48);
    if (v17)
      v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFF0);
    else
      v18 = (void *)sub_22EF6462C(*(_QWORD *)(a1 + 88), v12);
    __p[0] = v18;
    v29 = sub_22E8901B8(v16, (uint64_t *)__p);
    v30 = *(_QWORD *)(v10 + 48);
    if (v30)
      v31 = v30 & 0xFFFFFFFFFFFFFFF0;
    else
      v31 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v10);
    v57 = v31;
    sub_22E8901B8(v29, (uint64_t *)&v57);
    sub_22E903BEC((unsigned int *)&v61);
    v32 = *(_BYTE *)(a4 + 56);
    if ((*(_BYTE *)a4 & 4) != 0)
    {
      v33 = (*(_DWORD *)(*(_QWORD *)(a4 + 8) + 28) >> 13) & 3;
      v34 = *(_QWORD *)(a4 + 72);
      v35 = sub_22E90BC5C(a1, (uint64_t)a2, v34, v33, a4);
      if (v35 == 1)
      {
        if (v33 == 2 || v34 == sub_22E90BF58(*(_QWORD **)(a4 + 16)))
        {
          sub_22E90C03C((_QWORD *)a1, (uint64_t)a2, a4);
LABEL_72:
          *(_BYTE *)(a4 + 56) = *(_BYTE *)(a4 + 56) & 0xFE | v32 & 1;
          return 1;
        }
      }
      else if (!v35)
      {
        v33 = 0;
        *(_BYTE *)(a4 + 56) &= ~1u;
      }
    }
    else
    {
      v33 = 0;
    }
    v54 = v32;
    v61 = 0;
    v62[0] = (uint64_t)v62;
    v62[1] = (uint64_t)v62;
    v62[2] = 0;
    v63 = 1;
    for (i = 5; i != 21; i += 2)
      v62[i - 1] = 0;
    v66 = v70;
    v67 = v70;
    v68 = 4;
    v69 = 0;
    v70[4] = 0;
    v71 = v73;
    v72 = 0x400000000;
    v73[24] = 0;
    v74 = 0;
    v75 = 257;
    v76 = 1;
    v37 = sub_22E90C5E8(a1, (uint64_t)a2, a4, v33, &v61);
    v38 = *(unsigned int *)(v37 + 8);
    v39 = (_QWORD *)(*(_QWORD *)v37 + 24 * v38);
    v40 = -24 * v38;
    v41 = v39;
    do
    {
      if (!v40)
        break;
      v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v41 - 2) + 32))(*(v41 - 2));
      v43 = *(v41 - 3);
      v41 -= 3;
      v44 = *(unsigned __int8 *)(v43 + 12);
      v45 = (v44 >> 2) & 3;
      v46 = v44 & 2;
      if (v45 != 3)
        v46 = v45;
      if (v33 < v46)
        v39 = v41;
      if (v33 <= v46)
        v33 = v46;
      if (!sub_22E90BC5C(a1, (uint64_t)a2, v42, v33, a4))
      {
        v39 = 0;
        v33 = 0;
        *(_BYTE *)(a4 + 56) &= ~1u;
      }
      v40 += 24;
    }
    while (v33 != 2);
    v47 = *(_QWORD *)v37 + 24 * *(unsigned int *)(v37 + 8);
    if (v39 == (_QWORD *)v47)
    {
      sub_22E90C03C((_QWORD *)a1, (uint64_t)a2, a4);
      v32 = v54;
    }
    else
    {
      v48 = *v39;
      if (v39 + 3 == (_QWORD *)v47 && (*(_BYTE *)a4 & 4) == 0)
        v50 = 5408;
      else
        v50 = 5407;
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)v48, v50, 0, (uint64_t)v59);
      __p[0] = *(void **)v48;
      v51 = sub_22E8906A0((uint64_t)v59, (uint64_t *)__p);
      LOBYTE(v57) = (*(_BYTE *)(v48 + 12) & 0xC) == 4;
      v52 = sub_22E894E38(v51, (unsigned __int8 *)&v57);
      v58 = (~*(unsigned __int8 *)(v48 + 12) & 0xC) == 0;
      sub_22E894E38(v52, (unsigned __int8 *)&v58);
      sub_22E903BEC((unsigned int *)v59);
      v32 = v54;
      if ((*(_BYTE *)a4 & 4) != 0)
      {
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(a4 + 8) + 24), 0x1650u, 0, (uint64_t)v59);
        sub_22E903BEC((unsigned int *)v59);
      }
    }
    if (v71 != v73)
      free(v71);
    if (v67 != v66)
      free(v67);
    if ((v63 & 1) == 0)
      llvm::deallocate_buffer(v64, (void *)(16 * v65));
    sub_22E687D9C(v62);
    goto LABEL_72;
  }
  sub_22E8FCA40((_QWORD *)a1, a3, 0x14B9u, 0, (uint64_t)&v61);
  sub_22EFB9E74(v26, v59);
  v28 = sub_22F2F3734((uint64_t)&v61, v59);
  sub_22EFB9E74(v24, __p);
  sub_22F2F3734(v28, __p);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  sub_22E903BEC((unsigned int *)&v61);
  return 0;
}

unint64_t sub_22E909EBC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  char v7;
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14[8];
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v6 = *(_DWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 36);
  result = (unint64_t)sub_22EE37A18(a1, v6, *(_QWORD *)(a2 + 48), a3, 0);
  if (result)
  {
    v9 = result;
    result = (unint64_t)sub_22EE37A18(a1, v6, *(_QWORD *)(a2 + 40), a3, 0);
    if (result)
    {
      v10 = result;
      if ((*(_BYTE *)(a2 + 36) & 4) != 0)
      {
        v12 = *(_QWORD *)(a2 + 56);
        if (v12 >= 0x10)
        {
          result = sub_22EE08D2C(a1, v12, (uint64_t)a3, v6, 0);
          v12 = result;
          if (result < 0x10)
            return result;
        }
        v13 = *(_QWORD *)(a1 + 88);
        v14[0] = (v7 | v10) & 3 | 4;
        v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        v16 = v9;
        v17 = v12;
        v18 = 0;
        v19 = v13 + 2128;
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 88) + 2128;
        v14[0] = v7 & 3;
        v15 = result;
        v16 = v9;
        v17 = 0;
        v18 = 0;
        v19 = v11;
      }
      v20 = 0;
      sub_22E90BB84((uint64_t)v14);
      sub_22E892708((uint64_t)&v18, a2 + 8);
      result = sub_22E90A00C(a1, v6, (uint64_t)v14);
      if (v18)
      {
        result = v19;
        if (v19)
          return sub_22E3BB10C(v19, v18);
      }
    }
  }
  return result;
}

uint64_t sub_22E90A00C(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  void *v16[2];
  __int128 v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)a3 & 3) == 0)
    return 0;
  if (*(_QWORD *)(a1 + 3200))
  {
    LOWORD(v15) = 1;
    HIDWORD(v15) = a2;
    v6 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v16 = *(_OWORD *)a3;
    v17 = v6;
    sub_22E78D434((uint64_t)&v18, (uint64_t *)(a3 + 32));
    v7 = *(_QWORD *)(a1 + 3200);
    v8 = (_OWORD *)sub_22E90D2A8(v7 + 8, (unint64_t)&v15, 1);
    v9 = (_OWORD *)(*(_QWORD *)(v7 + 8) + 80 * *(unsigned int *)(v7 + 16));
    *v9 = *v8;
    v10 = v8[4];
    v12 = v8[1];
    v11 = v8[2];
    v9[3] = v8[3];
    v9[4] = v10;
    v9[1] = v12;
    v9[2] = v11;
    ++*(_DWORD *)(v7 + 16);
    return 3;
  }
  else
  {
    sub_22E909698((uint64_t)&v15, *(_QWORD *)(a1 + 216));
    v13 = sub_22E909914(a1, &v15, a2, a3);
    if (v19 != v20)
      free(v19);
    if (v16[0] != &v17)
      free(v16[0]);
  }
  return v13;
}

uint64_t sub_22E90A150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0)
    return 0;
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4 || (a3 & 3) == 0)
    return 0;
  v9 = *(_QWORD *)(a1 + 88) + 2128;
  v15[0] = a3 & 3 | 4;
  v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v4;
  v18 = 0;
  v19 = 0;
  v20 = v9;
  v21 = 0;
  sub_22E90BB84((uint64_t)v15);
  v21 = 2578;
  v10 = v19;
  v11 = v20;
  if (v19)
  {
    if (!v20)
    {
      sub_22F0D4E74(a2);
      v13 = v14;
      goto LABEL_14;
    }
    sub_22E3BB10C(v20, v19);
  }
  sub_22F0D4E74(a2);
  v13 = v12;
  v10 = sub_22E3B8AAC(v11);
  v19 = v10;
LABEL_14:
  sub_22E4D6448(v10 + 336, v13, 1);
  v6 = sub_22E90A00C(a1, *(_DWORD *)(a2 + 24), (uint64_t)v15);
  if (v19 && v20)
    sub_22E3BB10C(v20, v19);
  return v6;
}

uint64_t sub_22E90A268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[8];
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;

  v3 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0 || (a3 & 3) == 0)
    return v3;
  v7 = *(_QWORD *)(a2 + 64);
  if ((*(_BYTE *)(a2 + 2) & 8) != 0)
  {
    v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
    if (!v8 || *(_BYTE *)(v8 + 16) != 39)
      v8 = sub_22F10CF48(v8);
    v7 = *(_QWORD *)(v8 + 32);
  }
  v9 = *(_QWORD *)(a1 + 88);
  v16[0] = a3 & 3 | 4;
  v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = sub_22F0621BC(a2);
  v19 = v7;
  v20 = 0;
  v21 = v9 + 2128;
  v22 = 0;
  sub_22E90BB84((uint64_t)v16);
  v22 = 2578;
  v10 = v20;
  v11 = v21;
  if (v20)
  {
    if (!v21)
    {
      sub_22F0D4E74(a2);
      v13 = v14;
      goto LABEL_13;
    }
    sub_22E3BB10C(v21, v20);
  }
  sub_22F0D4E74(a2);
  v13 = v12;
  v10 = sub_22E3B8AAC(v11);
  v20 = v10;
LABEL_13:
  sub_22E4D6448(v10 + 336, v13, 1);
  v3 = sub_22E90A00C(a1, *(_DWORD *)(a2 + 24), (uint64_t)v16);
  if (v20 && v21)
    sub_22E3BB10C(v21, v20);
  return v3;
}

uint64_t sub_22E90A3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  _BOOL8 v7;
  uint64_t v11;
  _BYTE v12[8];
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if ((a3 & 3) == 0 || (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0)
    return 1;
  v11 = *(_QWORD *)(a1 + 88) + 2128;
  v12[0] = a3 & 3 | 4;
  v13 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = a2;
  v15 = a4;
  v16 = 0;
  v17 = v11;
  v18 = 0;
  sub_22E90BB84((uint64_t)v12);
  sub_22E892708((uint64_t)&v16, a6);
  v7 = sub_22E90A00C(a1, a5, (uint64_t)v12) == 0;
  if (v16 && v17)
    sub_22E3BB10C(v17, v16);
  return v7;
}

uint64_t sub_22E90A46C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0)
    return 0;
  v6 = *(unsigned int *)(a3 + 28);
  if ((v6 & 0x6000) == 0)
    return 0;
  v10 = *(_WORD *)(a3 + 80) & 0x7F;
  v11 = -40;
  if (v10 > 0x46)
  {
    if (v10 != 83)
    {
      if (v10 == 71)
      {
        v11 = -56;
        goto LABEL_21;
      }
      if (v10 == 81)
        goto LABEL_21;
LABEL_16:
      v14 = v10 - 52;
      v15 = v10 - 33 >= 5;
      v16 = -48;
      if (!v15)
        v16 = -64;
      if (v14 >= 6)
        v11 = v16;
      else
        v11 = -72;
    }
  }
  else
  {
    if (v10 > 0x18)
      goto LABEL_15;
    if (v10 != 16)
    {
      if (((1 << v10) & 0x1066) != 0)
        goto LABEL_21;
      if (v10 != 24)
      {
LABEL_15:
        if (v10 == 70)
        {
          v11 = -64;
          goto LABEL_21;
        }
        goto LABEL_16;
      }
    }
    v11 = -48;
  }
LABEL_21:
  v17 = v6 >> 13;
  v18 = *(_QWORD *)(a3 + 72 + v11 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  if (v19)
    v20 = (unint64_t)(v19 - 8);
  else
    v20 = 0;
  if (a5 <= 0xF)
  {
    v21 = *(_QWORD *)(v20 + 48);
    if (v21)
      a5 = v21 & 0xFFFFFFFFFFFFFFF0;
    else
      a5 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v20);
  }
  v22 = *(_QWORD *)(a1 + 88);
  v23[0] = (v17 | a3) & 3 | 4;
  v24 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v20;
  v26 = a5;
  v27 = 0;
  v28 = v22 + 2128;
  v29 = 0;
  sub_22E90BB84((uint64_t)v23);
  sub_22E892708((uint64_t)&v27, a4);
  v12 = sub_22E90A00C(a1, a2, (uint64_t)v23);
  if (v27 && v28)
    sub_22E3BB10C(v28, v27);
  return v12;
}

uint64_t sub_22E90A630(_QWORD *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  size_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v44;
  unint64_t v45;
  int v46;

  v6 = 0;
  if ((*(_DWORD *)(a1[9] + 52) & 0x400000) == 0 || (a4 & 3) == 0)
    return v6;
  v12 = a1[11] + 2128;
  v13 = *(_DWORD *)a5;
  if (*(_DWORD *)a5 == 6)
  {
    v19 = *(_QWORD *)(a5 + 32);
    v46 = 2590;
    v45 = v12;
    v20 = *(_QWORD *)(v19 + 48);
    v44 = (unsigned __int8 *)sub_22E3B8AAC(v12);
    v44[*v44 + 1] = 9;
    v21 = v44;
    v22 = *v44;
    *v44 = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = v20;
    v23 = sub_22EAB3978((uint64_t)a1, a3);
    v24 = &v21[*v21];
  }
  else
  {
    if (v13 != 10)
    {
      if (v13 == 16)
      {
        v14 = *(_QWORD *)(a5 + 32);
        if (v14)
        {
          v15 = *(_DWORD **)(v14 + 16);
          v18 = *v15;
          v16 = (char *)(v15 + 4);
          v17 = v18;
        }
        else
        {
          v16 = "this";
          v17 = 4;
        }
        v46 = 2592;
        v44 = 0;
        v45 = v12;
        sub_22E3B89A8(&v44, v16, v17);
        v35 = *(_QWORD *)(a5 + 16);
        v36 = v44;
        if (!v44)
        {
          v36 = (unsigned __int8 *)sub_22E3B8AAC(v45);
          v44 = v36;
        }
        v36[*v36 + 1] = 9;
        v37 = v44;
        v38 = *v44;
        *v44 = v38 + 1;
        *(_QWORD *)&v37[8 * v38 + 16] = v35;
        v39 = sub_22EAB3978((uint64_t)a1, a3);
        v40 = v44;
        if (!v44)
        {
          v40 = (unsigned __int8 *)sub_22E3B8AAC(v45);
          v44 = v40;
        }
        v40[*v40 + 1] = 2;
        v41 = v44;
        v42 = *v44;
        *v44 = v42 + 1;
        *(_QWORD *)&v41[8 * v42 + 16] = v39;
      }
      else
      {
        if (a6)
          v34 = 5345;
        else
          v34 = 2580;
        v46 = v34;
        v44 = 0;
        v45 = v12;
      }
      goto LABEL_23;
    }
    v46 = 2579;
    v45 = v12;
    v25 = (*(_QWORD *)(a5 + 32) >> 2) & 1;
    v44 = (unsigned __int8 *)sub_22E3B8AAC(v12);
    v44[*v44 + 1] = 2;
    v26 = v44;
    v27 = *v44;
    v28 = v27 + 1;
    *v44 = v27 + 1;
    *(_QWORD *)&v26[8 * v27 + 16] = v25;
    v29 = *(_QWORD *)(**(_QWORD **)((*(_QWORD *)(a5 + 32) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v29 + 8) & 0xF) != 0)
    {
      v29 = (unint64_t)sub_22F10D2BC(**(_QWORD **)((*(_QWORD *)(a5 + 32) & 0xFFFFFFFFFFFFFFF8) + 16));
      v28 = *v26;
    }
    v26[v28 + 1] = 9;
    v30 = v44;
    v31 = *v44;
    *v44 = v31 + 1;
    *(_QWORD *)&v30[8 * v31 + 16] = v29 & 0xFFFFFFFFFFFFFFF0;
    v23 = sub_22EAB3978((uint64_t)a1, a3);
    v24 = &v30[*v30];
  }
  v24[1] = 2;
  v32 = v44;
  v33 = *v44;
  *v44 = v33 + 1;
  *(_QWORD *)&v32[8 * v33 + 16] = v23;
LABEL_23:
  v6 = sub_22E90A904(a1, a2, a3, a4, a5, (uint64_t)&v44);
  if (v44 && v45)
    sub_22E3BB10C(v45, (unint64_t)v44);
  return v6;
}

uint64_t sub_22E90A904(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v35[8];
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;

  v6 = 0;
  if ((*(_DWORD *)(a1[9] + 52) & 0x400000) == 0 || (a4 & 3) == 0)
    return v6;
  v11 = *(_WORD *)(a3 + 80) & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 == 83)
      goto LABEL_19;
    if (v11 == 71)
    {
      v12 = -56;
      goto LABEL_19;
    }
    if (v11 != 81)
      goto LABEL_14;
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_13;
    if (v11 == 16)
    {
LABEL_6:
      v12 = -48;
      goto LABEL_19;
    }
    if (((1 << v11) & 0x1066) == 0)
    {
      if (v11 == 24)
        goto LABEL_6;
LABEL_13:
      if (v11 == 70)
      {
        v12 = -64;
        goto LABEL_19;
      }
LABEL_14:
      v13 = v11 - 52;
      v14 = v11 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v12 = v15;
      else
        v12 = -72;
    }
  }
LABEL_19:
  v16 = *(_QWORD *)(a3 + 72 + v12 + 16);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v18 = v17 - 8;
  else
    v18 = 0;
  if ((*(_DWORD *)a5 & 0xFFFFFFFE) == 0xA && !*(_QWORD *)(a5 + 8))
  {
    v19 = a1[27];
    v20 = v19 - 72;
    if (!v19)
      v20 = 0;
    v21 = v20 + 72;
    v22 = *(_WORD *)(v20 + 80) & 0x7F;
    v23 = -40;
    if (v22 > 70)
    {
      if (v22 != 83)
      {
        if (v22 == 71)
        {
          v23 = -56;
          goto LABEL_47;
        }
        if (v22 == 81)
          goto LABEL_47;
LABEL_42:
        v26 = v22 - 52;
        v14 = (v22 - 33) >= 5;
        v27 = -48;
        if (!v14)
          v27 = -64;
        if (v26 >= 6)
          v23 = v27;
        else
          v23 = -72;
      }
    }
    else
    {
      if (v22 > 0x18)
        goto LABEL_41;
      if (v22 != 16)
      {
        if (((1 << v22) & 0x1066) != 0)
          goto LABEL_47;
        if (v22 != 24)
        {
LABEL_41:
          if (v22 == 70)
          {
            v23 = -64;
            goto LABEL_47;
          }
          goto LABEL_42;
        }
      }
      v23 = -48;
    }
LABEL_47:
    v25 = v21 + v23;
LABEL_48:
    v28 = *(_QWORD *)(v25 + 16);
    v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
    if ((v28 & 4) != 0)
      v29 = (_QWORD *)*v29;
    if (v29)
      v24 = (unint64_t)(v29 - 8);
    else
      v24 = 0;
    goto LABEL_53;
  }
  v24 = (unint64_t)v18;
  v25 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a4 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v24 = (unint64_t)v18;
    if ((*(_DWORD *)(v25 + 28) & 0x7F) == 0x2F)
      goto LABEL_48;
  }
LABEL_53:
  v30 = a1[11];
  v31 = a3 | a4;
  v32 = *(_QWORD *)(v24 + 48);
  if (v32)
    v33 = v32 & 0xFFFFFFFFFFFFFFF0;
  else
    v33 = sub_22EF6462C(a1[11], v24);
  v35[0] = v31 & 3 | 4;
  v36 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v37 = v18;
  v38 = v33;
  v39 = 0;
  v40 = v30 + 2128;
  v41 = 0;
  sub_22E90BB84((uint64_t)v35);
  sub_22E892708((uint64_t)&v39, a6);
  v6 = sub_22E90A00C((uint64_t)a1, a2, (uint64_t)v35);
  if (v39 && v40)
    sub_22E3BB10C(v40, v39);
  return v6;
}

uint64_t sub_22E90ABC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[8];
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v6 = 0;
  if (a4)
  {
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) != 0 && (a5 & 3) != 0)
    {
      v12 = *(_QWORD *)(a1 + 88) + 2128;
      v16[0] = a5 & 3 | 4;
      v17 = a5 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = a4;
      v19 = 0;
      v20 = 0;
      v21 = v12;
      v22 = 0;
      sub_22E90BB84((uint64_t)v16);
      if (!a6)
      {
LABEL_12:
        v6 = sub_22E90A00C(a1, a2, (uint64_t)v16);
        if (v20 && v21)
          sub_22E3BB10C(v21, v20);
        return v6;
      }
      v22 = 2578;
      v13 = v20;
      v14 = v21;
      if (v20)
      {
        if (!v21)
        {
LABEL_11:
          sub_22E4D6448(v13 + 336, a3, 1);
          goto LABEL_12;
        }
        sub_22E3BB10C(v21, v20);
      }
      v13 = sub_22E3B8AAC(v14);
      v20 = v13;
      goto LABEL_11;
    }
  }
  return v6;
}

uint64_t sub_22E90ACC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _BYTE v10[8];
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;

  v4 = 0;
  if (a3)
  {
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) != 0 && (a4 & 3) != 0)
    {
      v8 = *(_QWORD *)(a1 + 88) + 2128;
      v10[0] = a4 & 3 | 4;
      v11 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = a3;
      v13 = 0;
      v14 = 0;
      v15 = v8;
      v16 = 0;
      sub_22E90BB84((uint64_t)v10);
      v4 = sub_22E90A00C(a1, a2, (uint64_t)v10);
      if (v14)
      {
        if (v15)
          sub_22E3BB10C(v15, v14);
      }
    }
  }
  return v4;
}

uint64_t sub_22E90AD74(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  _BYTE v9[8];
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;

  v4 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) != 0 && (a4 & 3) != 0)
  {
    v7 = *(_QWORD *)(a1 + 88);
    v9[0] = a4 & 3 | 4;
    v10 = a4 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = a3;
    v12 = sub_22EF6477C(v7, a3);
    v13 = 0;
    v14 = v7 + 2128;
    v15 = 0;
    sub_22E90BB84((uint64_t)v9);
    v15 = 3165;
    if (v13 && v14)
    {
      sub_22E3BB10C(v14, v13);
      v13 = 0;
    }
    v4 = sub_22E90A00C(a1, a2, (uint64_t)v9);
    if (v13 && v14)
      sub_22E3BB10C(v14, v13);
  }
  return v4;
}

uint64_t sub_22E90AE54(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[8];
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v5 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0 || (a5 & 3) == 0)
    return v5;
  v11 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 24));
  v12 = *(_QWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a1 + 88) + 2128;
  v21[0] = a5 & 3 | 4;
  v22 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  v23 = v11;
  v24 = v12;
  v25 = 0;
  v26 = v13;
  v27 = 0;
  sub_22E90BB84((uint64_t)v21);
  v27 = 2578;
  v15 = v25;
  v14 = v26;
  if (v25)
  {
    if (!v26)
    {
      sub_22F0D4E74(a3);
      v17 = v18;
      goto LABEL_8;
    }
    sub_22E3BB10C(v26, v25);
  }
  sub_22F0D4E74(a3);
  v17 = v16;
  v15 = sub_22E3B8AAC(v14);
  v25 = v15;
LABEL_8:
  sub_22E4D6448(v15 + 336, v17, 1);
  v19 = *a4;
  if (!v15)
  {
    v15 = sub_22E3B8AAC(v14);
    v25 = v15;
  }
  sub_22E4D6448(v15 + 336, v19, 1);
  v5 = sub_22E90A00C(a1, a2, (uint64_t)v21);
  if (v25 && v26)
    sub_22E3BB10C(v26, v25);
  return v5;
}

uint64_t sub_22E90AFB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  if (a4)
    sub_22F0D4E74(a4);
  else
    v9 = 0;
  v11 = v9;
  return sub_22E90AE54(a1, a2, a3, &v11, a5);
}

uint64_t sub_22E90B01C(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;

  v16 = 0;
  if (a5)
  {
    sub_22F0D5A50(*a4);
    v13 = v12;
    sub_22F0D60E4(a4[a5 - 1]);
    v16 = v13 | (unint64_t)(v14 << 32);
  }
  return sub_22E90AE54(a1, a2, a3, (uint64_t *)&v16, a6);
}

uint64_t sub_22E90B0B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23[2];
  char v24[8];
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[6];

  v2 = 0;
  v36[5] = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a1[9] + 52) & 0x400000) == 0)
    return v2;
  v4 = *(unsigned int *)(a2 + 28);
  if ((v4 & 0x6000) == 0)
    return v2;
  v6 = v4 >> 13;
  v7 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x1D)
      v7 = *(_QWORD *)(a2 + 48);
    else
      v7 = 0;
  }
  v8 = a1[11];
  v9 = *(_QWORD *)(a2 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  v24[0] = (v6 | a2) & 3 | 4;
  v11 = v10 - 8;
  if (!v10)
    v11 = 0;
  v25 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v26 = v11;
  v27 = 0;
  v28 = 0;
  v29 = v8 + 2128;
  v30 = 0;
  sub_22E90BB84((uint64_t)v24);
  v30 = 2591;
  v12 = v28;
  if (v28 && v29)
  {
    sub_22E3BB10C(v29, v28);
    v12 = 0;
    v28 = 0;
  }
  v13 = *(_QWORD *)(v7 + 56);
  if ((v13 & 4) == 0 || (v14 = (unint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8), (v15 = *v14) == 0))
  {
    v18 = *(unsigned int *)(v7 + 24);
    v19 = *(_QWORD *)(v7 + 152);
    v31 = *(_QWORD *)(v7 + 40);
    LODWORD(v32) = v18;
    v33 = v19;
    sub_22EFC70E8(&v31);
    if (v20)
      v21 = v20;
    else
      v21 = v18;
    v17 = v18 | (v21 << 32);
    if (v12)
      goto LABEL_23;
    goto LABEL_22;
  }
  v16 = v14[1];
  v23[0] = v15;
  v23[1] = v16;
  v17 = sub_22F0AB0EC(v23);
  if (!v12)
  {
LABEL_22:
    v12 = sub_22E3B8AAC(v29);
    v28 = v12;
  }
LABEL_23:
  sub_22E4D6448(v12 + 336, v17, 1);
  sub_22E909698((uint64_t)&v31, a1[27]);
  v2 = sub_22E909914((uint64_t)a1, &v31, *(_DWORD *)(a2 + 24), (uint64_t)v24);
  if (v35 != v36)
    free(v35);
  if (v32 != &v34)
    free(v32);
  if (v28 && v29)
    sub_22E3BB10C(v29, v28);
  return v2;
}

uint64_t sub_22E90B2C0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[8];
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0)
    return 0;
  v3 = 0;
  if ((a3 & 3) != 0 && (a3 & 3) != 3)
  {
    v6 = sub_22E9058F0(a2);
    v7 = (uint64_t)v6;
    if (*v6 == 211)
      v8 = *((_QWORD *)v6 + 7);
    else
      v8 = sub_22F0621BC((uint64_t)v6);
    v9 = *(_QWORD *)(a1 + 88) + 2128;
    v16[0] = a3 & 3 | 4;
    v17 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v18 = v8;
    v19 = 0;
    v20 = 0;
    v21 = v9;
    v22 = 0;
    sub_22E90BB84((uint64_t)v16);
    v22 = 2578;
    v10 = v20;
    v11 = v21;
    if (v20)
    {
      if (!v21)
      {
        sub_22F0D4E74(v7);
        v13 = v14;
        goto LABEL_13;
      }
      sub_22E3BB10C(v21, v20);
    }
    sub_22F0D4E74(v7);
    v13 = v12;
    v10 = sub_22E3B8AAC(v11);
    v20 = v10;
LABEL_13:
    sub_22E4D6448(v10 + 336, v13, 1);
    v3 = sub_22E90A00C(a1, *(_DWORD *)(v7 + 24), (uint64_t)v16);
    if (v20 && v21)
      sub_22E3BB10C(v21, v20);
  }
  return v3;
}

uint64_t sub_22E90B400(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[32];
  void *v37;
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if ((a7 & 1) == 0 && (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x400000) == 0 || !*(_DWORD *)(a5 + 112))
    return 0;
  v15 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 24));
  v16 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 24));
  v17 = *(_QWORD *)(a1 + 88) + 2128;
  v26[0] = *(_BYTE *)(a5 + 112) & 3;
  v27 = v15;
  v28 = v16;
  v29 = 0;
  v30 = 0;
  v31 = v17;
  v32 = 0;
  sub_22E90BB84((uint64_t)v26);
  if (a6)
  {
    v32 = a6;
    v18 = v30;
    v19 = v31;
    if (v30)
    {
      if (!v31)
      {
LABEL_9:
        v20 = v18 + 1;
        v21 = *v18;
        v20[v21] = 9;
        *v18 = v21 + 2;
        v22 = v18 + 16;
        *(_QWORD *)&v22[8 * v21] = a4;
        v23 = (v21 + 1);
        v20[v23] = 9;
        *(_QWORD *)&v22[8 * v23] = a3;
        goto LABEL_10;
      }
      sub_22E3BB10C(v31, (unint64_t)v30);
    }
    v18 = (_BYTE *)sub_22E3B8AAC(v19);
    v30 = v18;
    goto LABEL_9;
  }
LABEL_10:
  if (a8)
  {
    v33 = 0;
    v34 = v36;
    v35 = 0x400000000;
    v37 = v39;
    v38 = 0x400000000;
    v39[32] = 0;
    v24 = sub_22E909914(a1, &v33, a2, (uint64_t)v26);
    if (v37 != v39)
      free(v37);
    if (v34 != v36)
      free(v34);
  }
  else
  {
    v24 = sub_22E90A00C(a1, a2, (uint64_t)v26);
  }
  if (v30 && v31)
    sub_22E3BB10C(v31, (unint64_t)v30);
  return v24;
}

unint64_t sub_22E90B5FC(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[8];
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(uint64_t **)(a2 + 8);
    v6 = 8 * v2;
    do
    {
      v7 = *v5;
      if ((*v5 & 3) != 0)
      {
        v8 = *(_QWORD *)(a2 + 96);
        v9 = *(_QWORD *)(a2 + 104);
        v10 = *(_QWORD *)(v4 + 88) + 2128;
        v11[0] = v7 & 3 | 4;
        v12 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        v13 = v8;
        v14 = v9;
        v15 = 0;
        v16 = v10;
        v17 = 0;
        sub_22E90BB84((uint64_t)v11);
        v17 = 2578;
        if (v15 && v16)
        {
          sub_22E3BB10C(v16, v15);
          v15 = 0;
        }
        result = sub_22E90A00C(v4, *(_DWORD *)(a2 + 128), (uint64_t)v11);
        if (v15)
        {
          result = v16;
          if (v16)
            result = sub_22E3BB10C(v16, v15);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22E90B6D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21[8];
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _BYTE v28[8];
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[6];

  v32[5] = *MEMORY[0x24BDAC8D0];
  v8 = sub_22E8BB0E8(a2);
  if (a3 && v8)
  {
    if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
    {
      v17 = a1[11] + 2128;
      v21[0] = -1;
      v22 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = a3;
      v24 = a4;
      v25 = 0;
      v26 = v17;
      v27 = 0;
      sub_22E90BB84((uint64_t)v21);
      sub_22E909698((uint64_t)v28, a1[27]);
      v9 = sub_22E90B950((uint64_t)a1, (uint64_t)v28, (uint64_t)v21) != 1;
      if (v31 != v32)
        free(v31);
      if (v29 != &v30)
        free(v29);
      if (v25)
      {
        if (v26)
          sub_22E3BB10C(v26, v25);
      }
      return v9;
    }
    return 0;
  }
  v9 = 1;
  if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7F) != 0x33)
    return v9;
  v10 = *(_BYTE *)(a2 + 88) & 7;
  if ((*(_BYTE *)(a2 + 88) & 7) == 0)
    v10 = 2;
  if ((v10 - 3) < 2)
    return v9;
  v11 = sub_22E90328C((uint64_t)a1);
  if (v11)
  {
    v9 = sub_22EFDC9F0(v11);
    if (!v9)
      return v9;
    goto LABEL_12;
  }
  v18 = sub_22E903070((uint64_t)a1, 0);
  v9 = 0;
  if (!v18 || (*(_WORD *)(v18 + 8) & 0x7Eu) - 58 < 0xFFFFFFFA)
    return v9;
  v19 = *(_QWORD *)(v18 - 56);
  v20 = v19 & 0xFFFFFFFFFFFFFFF8;
  if ((v19 & 4) != 0)
    v20 = *(_QWORD *)(v20 + 8);
  v9 = 0;
  if (!v20 || (*(_WORD *)(v20 + 8) & 0x7E) != 0x14)
    return v9;
  if ((*(_DWORD *)(v20 - 20) & 0x7F) == 0x14 || (*(_DWORD *)(v20 - 20) & 0x7F) == 0x15)
  {
    v9 = *(_QWORD *)(v20 + 40);
    if (!v9)
      return v9;
LABEL_12:
    v12 = sub_22EFDE1AC(a2);
    if (v12)
    {
      v13 = v12;
      if ((_QWORD *)v9 == v12)
        return 1;
      v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v9 + 32))(v9);
      if (v14 == (*(uint64_t (**)(_QWORD *))(*v13 + 32))(v13))
        return 1;
    }
    if ((*(_BYTE *)(a2 + 88) & 7) != 1)
    {
      v15 = sub_22EFDE1AC(a2);
      return sub_22E595B08((uint64_t)v15, v9);
    }
  }
  return 0;
}

uint64_t sub_22E90B950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19[3];
  uint64_t v20;
  llvm *v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _QWORD v27[5];
  void *v28;
  uint64_t v29;
  _DWORD v30[26];
  uint64_t v31;
  __int16 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22E90BF58(*(_QWORD **)(a3 + 16));
  v7 = *(_BYTE *)a3;
  v8 = *(_BYTE *)a3 & 3;
  if (v8 == 3)
  {
LABEL_5:
    v11 = *(_BYTE *)(a3 + 56) & 1;
    if ((v7 & 4) == 0)
    {
      v12 = 0;
LABEL_11:
      v18 = 0;
      v19[0] = (uint64_t)v19;
      v19[1] = (uint64_t)v19;
      v19[2] = 0;
      v20 = 1;
      for (i = 5; i != 21; i += 2)
        v19[i - 1] = 0;
      v23 = v27;
      v24 = v27;
      v25 = 4;
      v26 = 0;
      v27[4] = 0;
      v28 = v30;
      v29 = 0x400000000;
      v30[24] = 0;
      v31 = 0;
      v32 = 257;
      v33 = 1;
      v16 = sub_22E90C5E8(a1, a2, a3, v12, &v18);
      if (v16)
        v10 = *(_DWORD *)(v16 + 112) != 0;
      else
        v10 = 2;
      if (v28 != v30)
        free(v28);
      if (v24 != v23)
        free(v24);
      if ((v20 & 1) == 0)
        llvm::deallocate_buffer(v21, (void *)(16 * v22));
      sub_22E687D9C(v19);
      goto LABEL_23;
    }
    v13 = *(_QWORD *)(a3 + 72);
    v12 = (*(_DWORD *)(*(_QWORD *)(a3 + 8) + 28) >> 13) & 3;
    v14 = sub_22E90BC5C(a1, a2, v13, v12, a3);
    v10 = v14;
    if ((_DWORD)v14 != 2)
    {
      if (!(_DWORD)v14)
      {
        v12 = 0;
        *(_BYTE *)(a3 + 56) &= ~1u;
      }
      if (v13 != v6)
        goto LABEL_11;
      v10 = v12 != 0;
    }
LABEL_23:
    *(_BYTE *)(a3 + 56) = *(_BYTE *)(a3 + 56) & 0xFE | v11;
    return v10;
  }
  v9 = sub_22E90BC5C(a1, a2, v6, v8, a3);
  v10 = v9;
  if ((_DWORD)v9 && (_DWORD)v9 != 2)
  {
    v7 = *(_BYTE *)a3;
    goto LABEL_5;
  }
  return v10;
}

uint64_t sub_22E90BB84(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  unint64_t v4;
  uint64_t result;

  if ((*(_BYTE *)a1 & 4) != 0)
  {
    if (*(_QWORD *)(a1 + 24) >= 0x10uLL)
    {
      v2 = sub_22EFBAEF8(*(_QWORD *)(a1 + 8));
      v3 = (*(_BYTE *)a1 & 4) == 0;
    }
    else
    {
      v3 = 0;
      v2 = 0;
    }
  }
  else
  {
    v2 = 0;
    v3 = 1;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 56) & 0xFC | v2;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v3)
    v4 = sub_22E90BC14(v4);
  *(_QWORD *)(a1 + 72) = v4;
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 32))(v4);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

unint64_t sub_22E90BC14(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t result;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  if ((*(_WORD *)(v2 + 8) & 0x7F) != 0x21)
    goto LABEL_6;
  do
  {
    v3 = *(_QWORD *)(v2 - 48);
    v2 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v2 = *(_QWORD *)v2;
LABEL_6:
    result = v2 - 64;
    if (v2)
      v5 = v2 - 64;
    else
      v5 = 0;
  }
  while ((*(_BYTE *)(v5 + 75) & 1) != 0);
  return result;
}

uint64_t sub_22E90BC5C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  _QWORD v31[3];
  char v32;
  char v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[22];

  v36[20] = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 0;
  v10 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a2 + 56);
    v12 = 8 * v10;
    v13 = 1;
    while (1)
    {
      v14 = *v11;
      if (a4 == 2)
      {
        if (v14 == a3)
          return 0;
        if (*(_BYTE *)(a2 + 104))
        {
          if (sub_22E90C7CC(*v11, a3))
            v13 = 2;
          else
            v13 = v13;
        }
        goto LABEL_31;
      }
      v15 = sub_22E90C870(*v11, a3);
      if (v15 != 1)
      {
        if (v15 == 2)
          goto LABEL_12;
        if ((*(_BYTE *)(a5 + 56) & 1) != 0)
        {
          v19 = sub_22E90CA94(a5, a1);
          if (v19)
          {
            v20 = sub_22E90C870(v19, v14);
            if ((_DWORD)v20 != 2)
            {
              v18 = v20;
              if (!(_DWORD)v20)
                return v18;
              goto LABEL_31;
            }
          }
LABEL_12:
          v13 = 2;
          goto LABEL_31;
        }
        if ((*(_BYTE *)a5 & 4) == 0 || !sub_22EFBAEF8(*(_QWORD *)(a5 + 8)))
          return 0;
        if ((**(_BYTE **)(a1 + 72) & 0x10) != 0
          && *(_DWORD *)(a2 + 16)
          && (v16 = **(_QWORD **)(a2 + 8)) != 0
          && (*(_DWORD *)(v16 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) + 80) & 0xE000) == 0x4000)
            return 0;
          v17 = (*(_QWORD *)(v16 + 40) & 7) == 6
             && (*(_DWORD *)(*(_QWORD *)(v16 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
          v18 = 0;
          if (v17 || v14 == a3)
            return v18;
        }
        else if (v14 == a3)
        {
          return 0;
        }
      }
LABEL_31:
      ++v11;
      v12 -= 8;
      if (!v12)
        goto LABEL_36;
    }
  }
  v13 = 1;
LABEL_36:
  if (a4 == 1 && (*(_BYTE *)a5 & 4) != 0 && sub_22EFBAEF8(*(_QWORD *)(a5 + 8)))
  {
    if ((*(_BYTE *)(a5 + 56) & 1) != 0)
    {
      v24 = sub_22E90CA94(a5, a1);
      if (!v24)
        return 2;
      v25 = v24;
      v31[0] = a1;
      v31[1] = a2;
      v31[2] = a3;
      v26 = sub_22EFC7ADC(v24 + 64);
      v27 = 1;
      if ((v26 & 1) == 0)
        v27 = sub_22EFC7ADC(a3 + 64);
      v32 = v27;
      v33 = 0;
      v34 = v36;
      v36[0] = v25;
      v35 = 0x1400000001;
      v28 = sub_22E90CDF4((uint64_t)v31, v25, 0);
      if (v33)
        v29 = 2;
      else
        v29 = 1;
      if (v28)
        v18 = 0;
      else
        v18 = v29;
      if (v34 != v36)
        free(v34);
    }
    else
    {
      v18 = sub_22E90CAEC(a2, a3);
    }
    if (!(_DWORD)v18)
      return v18;
    v30 = (_DWORD)v18 == 2;
    v18 = v13;
    if (!v30)
      return v18;
    return 2;
  }
  v21 = sub_22E90CAEC(a2, a3);
  if (v21 == 2)
    v22 = 2;
  else
    v22 = v13;
  if (v21)
    return v22;
  else
    return 0;
}

uint64_t sub_22E90BF58(_QWORD *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if ((*((_BYTE *)a1 + 75) & 1) != 0)
  {
    do
    {
      v2 = a1[9] & 0x7F;
      v3 = -40;
      if (v2 > 0x46)
      {
        if (v2 != 83)
        {
          if (v2 == 71)
          {
            v3 = -56;
          }
          else if (v2 != 81)
          {
            goto LABEL_14;
          }
        }
      }
      else
      {
        if (v2 > 0x18)
          goto LABEL_13;
        if (v2 == 16)
          goto LABEL_6;
        if (((1 << v2) & 0x1066) != 0)
          goto LABEL_20;
        if (v2 == 24)
        {
LABEL_6:
          v3 = -48;
        }
        else
        {
LABEL_13:
          if (v2 != 70)
          {
LABEL_14:
            v4 = v2 - 52;
            if (v2 - 33 >= 5)
              v5 = -48;
            else
              v5 = -64;
            if (v4 >= 6)
              v3 = v5;
            else
              v3 = -72;
            goto LABEL_20;
          }
          v3 = -64;
        }
      }
LABEL_20:
      v6 = *(_QWORD *)((char *)a1 + v3 + 80);
      v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 4) != 0)
        v7 = (_QWORD *)*v7;
      a1 = v7 - 8;
      if (v7)
        v8 = v7 - 8;
      else
        v8 = 0;
    }
    while ((*((_BYTE *)v8 + 75) & 1) != 0);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

unsigned int *sub_22E90C03C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t i;
  uint64_t v38;
  unsigned int *result;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned __int8 v48;
  unint64_t v49;
  unsigned int v50[24];

  v4 = *(_QWORD *)(a3 + 8);
  if ((*(_DWORD *)(v4 + 28) & 0x6000) != 0x2000)
    goto LABEL_12;
  if ((*(_BYTE *)a3 & 4) == 0)
    goto LABEL_12;
  if (!sub_22EFBAEF8(*(_QWORD *)(a3 + 8)))
    goto LABEL_12;
  v7 = sub_22E90BF58(*(_QWORD **)(a3 + 16));
  v8 = *(unsigned int *)(a2 + 64);
  if (!(_DWORD)v8)
    goto LABEL_12;
  v9 = v7;
  v10 = *(uint64_t **)(a2 + 56);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (sub_22E90C870(*v10, v9) - 1 >= 2)
    {
      v13 = *(_QWORD *)(a3 + 8);
      if ((*(_BYTE *)(a3 + 56) & 1) == 0)
      {
        if (v9 != v12)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v13 + 24), 0x1522u, 0, (uint64_t)v50);
          v40 = *(_QWORD *)(v12 + 48);
          if (v40)
            v41 = v40 & 0xFFFFFFFFFFFFFFF0;
          else
            v41 = sub_22EF6462C(a1[11], v12);
          v49 = v41;
          sub_22E8901B8((uint64_t)v50, (uint64_t *)&v49);
          return sub_22E903BEC(v50);
        }
        goto LABEL_11;
      }
      v14 = sub_22E90CA94(a3, (uint64_t)a1);
      if ((sub_22E90C870(v14, v12) | 2) != 2)
        break;
    }
LABEL_11:
    ++v10;
    v11 -= 8;
    if (!v11)
      goto LABEL_12;
  }
  v42 = *(_DWORD *)(v13 + 28) & 0x7F;
  if (v42 == 57 || v42 == 55 || v42 == 29 && (*(_DWORD *)(*(_QWORD *)(v13 + 48) + 28) & 0x7F) == 0x37)
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v13 + 24), 0x1521u, 0, (uint64_t)v50);
    v43 = *(_DWORD *)(v13 + 28);
    if ((v43 & 0x7Eu) - 58 <= 0xFFFFFFF9)
      v43 = *(_DWORD *)(*(_QWORD *)(v13 + 48) + 28);
    LOBYTE(v49) = (v43 & 0x7F) == 57;
    v44 = sub_22E894E38((uint64_t)v50, (unsigned __int8 *)&v49);
  }
  else
  {
    sub_22E8FCA40(a1, *(_DWORD *)(v13 + 24), 0x1523u, 0, (uint64_t)v50);
    v45 = *(_QWORD *)(v12 + 48);
    if (v45)
      v46 = v45 & 0xFFFFFFFFFFFFFFF0;
    else
      v46 = sub_22EF6462C(a1[11], v12);
    v49 = v46;
    v44 = sub_22E8901B8((uint64_t)v50, (uint64_t *)&v49);
  }
  v47 = *(unsigned __int8 *)(v44 + 80);
  result = sub_22E903BEC(v50);
  if (v47)
    return result;
LABEL_12:
  do
  {
    v15 = v4;
    if (!(*(unsigned int (**)(unint64_t))(*(_QWORD *)v4 + 24))(v4))
      break;
    v16 = *(_DWORD *)(v4 + 28);
    v17 = v16 & 0x7F;
    if ((v17 - 67) >= 0xFFFFFFF9)
    {
      v19 = (uint64_t *)(v4 + 72);
      if ((*(_BYTE *)(v4 + 72) & 3) != 0)
        break;
    }
    else
    {
      v18 = v16 & 0x7E;
      if ((v18 - 58) >= 0xFFFFFFFA)
      {
        v19 = (uint64_t *)(v4 + 104);
        if ((*(_BYTE *)(v4 + 104) & 3) != 0)
          break;
      }
      else if ((v17 - 42) >= 0xFFFFFFFD)
      {
        v19 = (uint64_t *)(v4 + 64);
        if ((*(_BYTE *)(v4 + 64) & 3) != 0)
          break;
      }
      else
      {
        if ((v17 - 38) < 0xFFFFFFFB || (v18 - 34) <= 3 && sub_22EFC3A88(v4))
          break;
        v19 = (uint64_t *)(v4 + 96);
        if ((*(_BYTE *)(v4 + 96) & 3) != 0)
          break;
      }
    }
    v4 = sub_22E3CD31C(v19, v4);
  }
  while (v4);
  v20 = sub_22E90BC14(v15);
  v21 = *(_QWORD *)(v15 + 16);
  v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 4) != 0)
  {
    v22 = *(_QWORD *)v22;
    v23 = (_QWORD *)(v20 + 64);
    v24 = v15;
    if (v22 == v20 + 64)
      goto LABEL_91;
  }
  else
  {
    v23 = (_QWORD *)(v20 + 64);
    v24 = v15;
    if (v20 + 64 == v22)
      goto LABEL_91;
  }
  v25 = v22;
  v22 = (unint64_t)v23;
  while (2)
  {
    v26 = *(_WORD *)(v25 + 8) & 0x7F;
    v27 = -40;
    if (v26 > 0x46)
    {
      if (v26 != 83)
      {
        if (v26 == 71)
        {
          v27 = -56;
        }
        else if (v26 != 81)
        {
          goto LABEL_43;
        }
      }
    }
    else
    {
      if (v26 > 0x18)
        goto LABEL_42;
      if (v26 == 16)
        goto LABEL_35;
      if (((1 << v26) & 0x1066) == 0)
      {
        if (v26 == 24)
        {
LABEL_35:
          v27 = -48;
        }
        else
        {
LABEL_42:
          if (v26 == 70)
          {
            v27 = -64;
          }
          else
          {
LABEL_43:
            if (v26 - 33 >= 5)
              v28 = -48;
            else
              v28 = -64;
            if (v26 - 52 >= 6)
              v27 = v28;
            else
              v27 = -72;
          }
        }
      }
    }
    v29 = *(_QWORD *)(v25 + v27 + 16);
    v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
    if ((v29 & 4) != 0)
      v30 = (_QWORD *)*v30;
    if (v30 != v23)
    {
      v31 = -40;
      if ((*(_WORD *)(v25 + 8) & 0x7Fu) > 0x46)
      {
        if (v26 != 83)
        {
          if (v26 == 71)
          {
            v31 = -56;
          }
          else if (v26 != 81)
          {
            goto LABEL_63;
          }
        }
      }
      else
      {
        if (v26 > 0x18)
          goto LABEL_62;
        if (v26 == 16)
          goto LABEL_55;
        if (((1 << v26) & 0x1066) == 0)
        {
          if (v26 == 24)
          {
LABEL_55:
            v31 = -48;
          }
          else
          {
LABEL_62:
            if (v26 == 70)
            {
              v31 = -64;
            }
            else
            {
LABEL_63:
              v32 = v26 - 52;
              if (v26 - 33 >= 5)
                v33 = -48;
              else
                v33 = -64;
              if (v32 >= 6)
                v31 = v33;
              else
                v31 = -72;
            }
          }
        }
      }
      v34 = *(_QWORD *)(v25 + v31 + 16);
      v25 = v34 & 0xFFFFFFFFFFFFFFF8;
      if ((v34 & 4) != 0)
        v25 = *(_QWORD *)v25;
      continue;
    }
    break;
  }
  v35 = -40;
  if ((*(_WORD *)(v25 + 8) & 0x7Fu) > 0x46)
  {
    if (v26 != 83)
    {
      if (v26 == 71)
      {
        v35 = -56;
      }
      else if (v26 != 81)
      {
        goto LABEL_86;
      }
    }
  }
  else
  {
    if (v26 > 0x18)
      goto LABEL_85;
    if (v26 == 16)
      goto LABEL_78;
    if (((1 << v26) & 0x1066) == 0)
    {
      if (v26 == 24)
        goto LABEL_78;
LABEL_85:
      if (v26 == 70)
        goto LABEL_88;
LABEL_86:
      if (v26 - 52 >= 6)
      {
        if (v26 - 33 < 5)
        {
LABEL_88:
          v35 = -64;
          goto LABEL_90;
        }
LABEL_78:
        v35 = -48;
        goto LABEL_90;
      }
      v35 = -72;
    }
  }
LABEL_90:
  v24 = v25 + v35;
LABEL_91:
  v48 = 1;
  if ((*(_WORD *)(v22 + 8) & 0x80) != 0)
    sub_22EFCC320(v22);
  for (i = *(_QWORD *)(v22 + 16); i && v24 != i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_BYTE *)(i + 28) & 0x7F) == 0)
    {
      v48 = 0;
      break;
    }
  }
  sub_22E8FCA40(a1, *(_DWORD *)(v15 + 24), 0x1520u, 0, (uint64_t)v50);
  LODWORD(v49) = (*(_DWORD *)(v15 + 28) & 0x6000) == 0x2000;
  v38 = sub_22E89519C((uint64_t)v50, (unsigned int *)&v49);
  sub_22E894E38(v38, &v48);
  return sub_22E903BEC(v50);
}

unint64_t sub_22E90C5E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5)
{
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  char v24;
  char v25;
  unint64_t *v26;

  sub_22EFB36DC(*(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 72), a5);
  v9 = a5[2];
  v26 = a5 + 1;
  if ((unint64_t *)v9 == a5 + 1)
    return 0;
  v10 = 0;
  v11 = 0;
  v25 = *(_BYTE *)(a3 + 56) & 1;
  while (2)
  {
    v24 = v10;
    while (1)
    {
      v12 = v9 + 16;
      v13 = *(_QWORD *)(v9 + 16);
      v14 = *(unsigned int *)(v9 + 24);
      v15 = a4;
      if ((_DWORD)v14)
        break;
LABEL_16:
      if (!v11)
        goto LABEL_20;
LABEL_19:
      if (v15 < *(_DWORD *)(v11 + 112))
      {
LABEL_20:
        *(_DWORD *)(v9 + 128) = v15;
        v22 = *(_BYTE *)(a3 + 56);
        if (!v15)
        {
          *(_BYTE *)(a3 + 56) = v22 & 0xFE | v25;
          return v12;
        }
        v11 = v9 + 16;
        goto LABEL_23;
      }
      v22 = *(_BYTE *)(a3 + 56);
LABEL_23:
      *(_BYTE *)(a3 + 56) = v22 & 0xFE | v25;
      v9 = *(_QWORD *)(v9 + 8);
      if ((unint64_t *)v9 == v26)
      {
        if ((v24 & 1) != 0)
          return 0;
        return v11;
      }
    }
    v16 = 24 * v14;
    v15 = a4;
    while (1)
    {
      if (v15 == 2)
      {
        v15 = 3;
        if (!v11)
          goto LABEL_20;
        goto LABEL_19;
      }
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + v16 - 16) + 32))(*(_QWORD *)(v13 + v16 - 16));
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v13 + v16 - 24) + 12);
      v19 = (v18 >> 2) & 3;
      v20 = v18 & 2;
      if (v19 != 3)
        v20 = v19;
      if (v15 <= v20)
        v15 = v20;
      v21 = sub_22E90BC5C(a1, a2, v17, v15, a3);
      if (!v21)
      {
        v15 = 0;
        *(_BYTE *)(a3 + 56) &= ~1u;
        goto LABEL_15;
      }
      if (v21 == 2)
        break;
LABEL_15:
      v16 -= 24;
      if (!v16)
        goto LABEL_16;
    }
    *(_BYTE *)(a3 + 56) = *(_BYTE *)(a3 + 56) & 0xFE | v25;
    v9 = *(_QWORD *)(v9 + 8);
    v10 = 1;
    if ((unint64_t *)v9 != v26)
      continue;
    return 0;
  }
}

BOOL sub_22E90C7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL8 result;
  int v11;
  int v12;

  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = sub_22EFCC008((uint64_t)v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (_QWORD *)*v7;
  v8 = sub_22EFCC008((uint64_t)v7);
  if (v5 == v8)
    return 1;
  v9 = v8;
  result = 0;
  v11 = *(_WORD *)(v5 + 8) & 0x7F;
  if (v11 != 16 && v11 != 83)
  {
    v12 = *(_WORD *)(v9 + 8) & 0x7F;
    return v12 != 83 && v12 != 16;
  }
  return result;
}

uint64_t sub_22E90C870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
    return 0;
  v3 = a1;
  v4 = sub_22EFC7ADC(a1 + 64);
  if (v4 && sub_22E90C7CC(v3, a2))
    return 2;
  v19 = 0x800000000;
  v5 = 1;
  while (1)
  {
    if (sub_22EFC7ADC(v3 + 64))
    {
      if (!*(_QWORD *)(v3 + 128))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        if (!*(_QWORD *)(v3 + 128))
          break;
      }
    }
    v6 = sub_22E46A3A0(v3);
    if (v6 != v7)
    {
      v8 = v6;
      v9 = v7;
      do
      {
        v10 = *(_QWORD *)(**(_QWORD **)(v8 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
          v10 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v8 + 16));
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v12 = *(unsigned __int8 *)(v11 + 16);
        if (v11 && v12 == 45 || (v11 ? (v13 = v12 == 27) : (v13 = 0), v13))
        {
          v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
          if (v15 == a2)
            return 0;
          v16 = v15;
          if (v4)
          {
            if (sub_22E90C7CC(v15, a2))
              v5 = 2;
            else
              v5 = v5;
          }
          v17 = v19;
          if (v19 >= (unint64_t)HIDWORD(v19))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = v19;
          }
          v20[v17] = v16;
          LODWORD(v19) = v19 + 1;
        }
        else
        {
          v5 = 2;
        }
        v8 += 24;
      }
      while (v8 != v9);
    }
    if (!(_DWORD)v19)
      return v5;
    v3 = v20[v19 - 1];
    LODWORD(v19) = v19 - 1;
  }
  return 2;
}

uint64_t sub_22E90CA94(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
    return *(_QWORD *)(a1 + 64);
  *(_BYTE *)(a1 + 56) |= 2u;
  result = sub_22E9580E4(a2, *(_QWORD *)(a1 + 24));
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 64) + 32))(result - 64);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

uint64_t sub_22E90CAEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  uint64_t v39;

  v3 = sub_22EFD9E18(a2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = 1;
  while (1)
  {
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0 || (*(_BYTE *)(v4 + 60) & 1) != 0)
      return 0;
    v6 = *(_QWORD *)(v4 + 40);
    v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 4) != 0 && v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 8);
      v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
      if (v8 < 0x10 || *(_DWORD *)(v9 + 16) != 45)
      {
        if ((*(_DWORD *)(v9 + 16) & 0x400) == 0)
          goto LABEL_69;
        goto LABEL_68;
      }
      v10 = sub_22F114198(*(_QWORD *)(v9 + 24));
      v11 = a1;
LABEL_64:
      v18 = sub_22E90CFDC(v11, v10);
LABEL_65:
      if ((_DWORD)v18 != 2)
      {
        if (!(_DWORD)v18)
          return v18;
        goto LABEL_69;
      }
LABEL_68:
      v5 = 2;
      goto LABEL_69;
    }
    if ((v6 & 4) != 0)
      v12 = 0;
    else
      v12 = v6 & 0xFFFFFFFFFFFFFFF8;
    v13 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 32))(v12);
    v14 = *(_DWORD *)(v13 + 28) & 0x7F;
    if (v14 == 29)
    {
      v29 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v29)
        goto LABEL_69;
      v30 = *(_QWORD *)(a1 + 8);
      v31 = 8 * v29;
      v18 = 1;
      while (1)
      {
        v32 = *(_QWORD *)(*(_QWORD *)v30 + 144);
        v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
        if ((v32 & 6) != 4 || v33 == 0)
        {
          if ((v32 & 6) == 0 && v33 != 0)
          {
LABEL_55:
            v36 = (*(uint64_t (**)(_QWORD *))(*v33 + 32))(v33);
            if (v36 == v13)
              return 0;
            if (*(_BYTE *)(a1 + 104))
            {
              if (sub_22E90D09C(*(_QWORD **)(v36 + 48), *(_QWORD **)(v13 + 48)))
                v18 = 2;
              else
                v18 = v18;
            }
          }
        }
        else
        {
          v33 = (_QWORD *)(v33[2] & 0xFFFFFFFFFFFFFFF8);
          if (v33)
            goto LABEL_55;
        }
        v30 += 8;
        v31 -= 8;
        if (!v31)
          goto LABEL_65;
      }
    }
    if (v14 != 28)
      break;
    v15 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)(a1 + 56);
      v17 = &v16[v15];
      v18 = 1;
      while (1)
      {
        v19 = *v16;
        if ((*(_DWORD *)(*v16 + 28) & 0x7E) == 0x24)
          break;
        v22 = *(_QWORD *)(v19 + 136);
        if ((v22 & 4) == 0)
        {
          v21 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
          if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
            goto LABEL_23;
        }
LABEL_37:
        if (++v16 == v17)
          goto LABEL_65;
      }
      while (1)
      {
        v20 = *(_QWORD *)(v19 + 152);
        v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
        if ((v20 & 4) == 0 || !v21)
          break;
        v19 = *v21;
      }
LABEL_23:
      if ((*(uint64_t (**)(_QWORD *))(*v21 + 32))(v21) == v13)
        return 0;
      if (*(_BYTE *)(a1 + 104) && v21[5] == *(_QWORD *)(v13 + 40))
      {
        v23 = v21[2];
        v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
        if ((v23 & 4) != 0)
          v24 = (_QWORD *)*v24;
        v25 = *(_QWORD *)(v13 + 16);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v26 = *(_QWORD *)v26;
        if ((_QWORD *)v26 == v24
          || sub_22EFC7ADC((unint64_t)v24)
          && ((v27 = *(_WORD *)(v26 + 8) & 0x7F, v27 != 16) ? (v28 = v27 == 83) : (v28 = 1), !v28))
        {
          v18 = 2;
        }
      }
      goto LABEL_37;
    }
LABEL_69:
    if ((*(_QWORD *)(v4 + 48) & 1) != 0)
      v4 = sub_22F3B44EC(v4);
    else
      v4 = *(_QWORD *)(v4 + 48);
    v18 = v5;
    if (!v4)
      return v18;
  }
  if ((v14 - 35) <= 2)
  {
    v11 = a1;
    v10 = v13;
    goto LABEL_64;
  }
  v37 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v37)
    goto LABEL_69;
  v38 = *(_QWORD ***)(a1 + 8);
  v39 = 8 * v37;
  v18 = 1;
  while (*v38 != (_QWORD *)v13)
  {
    if (*(_BYTE *)(a1 + 104))
    {
      if (sub_22E90D09C(*v38, (_QWORD *)v13))
        v18 = 2;
      else
        v18 = v18;
    }
    ++v38;
    v39 -= 8;
    if (!v39)
      goto LABEL_65;
  }
  return 0;
}

uint64_t sub_22E90CDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 != a2)
  {
    if (*(_BYTE *)(a1 + 24) && sub_22E90C7CC(a2, v6))
      *(_BYTE *)(a1 + 25) = 1;
    v7 = sub_22E46A3A0(a2);
    if (v7 != v8)
    {
      v9 = v7;
      v10 = v8;
      while (1)
      {
        v11 = *(unsigned __int8 *)(v9 + 12);
        v12 = (v11 >> 2) & 3;
        v13 = v11 & 2;
        if (v12 != 3)
          v13 = v12;
        v14 = v3;
        if (v13 == 2)
          v14 = (*(_DWORD *)(a1 + 40) - 1);
        v15 = *(_QWORD *)(**(_QWORD **)(v9 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
          v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v9 + 16));
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v17 = *(unsigned __int8 *)(v16 + 16);
        if (v16 && v17 == 45 || (v16 ? (v18 = v17 == 27) : (v18 = 0), v18))
        {
          v19 = sub_22F114198(*(_QWORD *)(v16 + 24));
          v20 = *(unsigned int *)(a1 + 40);
          if (v20 >= *(unsigned int *)(a1 + 44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = *(unsigned int *)(a1 + 40);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v20) = v19;
          ++*(_DWORD *)(a1 + 40);
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
          if ((sub_22E90CDF4(a1, v21, v14) & 1) != 0)
            return 1;
          --*(_DWORD *)(a1 + 40);
        }
        else
        {
          *(_BYTE *)(a1 + 25) = 1;
        }
        v9 += 24;
        if (v9 == v10)
          return 0;
      }
    }
    return 0;
  }
  v22 = *(_DWORD *)(a1 + 40);
  if (v22 == (_DWORD)a3)
    return 0;
  while (1)
  {
    v23 = sub_22E90CAEC(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3));
    if (v23 == 2)
    {
      *(_BYTE *)(a1 + 25) = 1;
      goto LABEL_31;
    }
    if (!v23)
      return 1;
LABEL_31:
    LODWORD(v3) = v3 + 1;
    if (v22 == (_DWORD)v3)
      return 0;
  }
}

uint64_t sub_22E90CFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v5 = *(uint64_t **)(a1 + 56);
  v6 = *(unsigned int *)(a1 + 64);
  v7 = v5;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    v7 = *(uint64_t **)(a1 + 56);
    while (*v7 != v4)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        v7 = &v5[v6];
        break;
      }
    }
  }
  if (v6 != v7 - v5)
    return 0;
  result = 1;
  if ((_DWORD)v6 && *(_BYTE *)(a1 + 104))
  {
    v10 = 8 * v6;
    while (!sub_22E90C7CC(*v5, a2))
    {
      ++v5;
      v10 -= 8;
      if (!v10)
        return 1;
    }
    return 2;
  }
  return result;
}

uint64_t sub_22E90D09C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1[5] != a2[5])
    return 0;
  v4 = a1[2];
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  v6 = a2[2];
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v7 = *(_QWORD *)v7;
  if ((_QWORD *)v7 == v5
    || (result = sub_22EFC7ADC((unint64_t)v5), (_DWORD)result)
    && (result = 0, v9 = *(_WORD *)(v7 + 8) & 0x7F, v9 != 16)
    && v9 != 83)
  {
    v10 = *(_QWORD *)((a2[6] & 0xFFFFFFFFFFFFFFF0) + 8);
    v11 = a2[6] & 7 | v10;
    if (v11 >= 0x10)
    {
      if (*(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = *(_QWORD *)((a1[6] & 0xFFFFFFFFFFFFFFF0) + 8);
    v13 = a1[6] & 7 | v12;
    if (v13 >= 0x10)
    {
      if (*(_BYTE *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        v13 = 0;
      if ((v11 & 8) != 0)
        goto LABEL_16;
    }
    else
    {
      v13 = 0;
      if ((v11 & 8) != 0)
      {
LABEL_16:
        v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v15 = HIDWORD(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18));
        goto LABEL_21;
      }
    }
    LODWORD(v15) = 0;
    v14 = 0;
LABEL_21:
    v16 = v14 | v11 & 7;
    if ((v13 & 8) != 0)
    {
      v18 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v17 = HIDWORD(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18));
    }
    else
    {
      LODWORD(v17) = 0;
      v18 = 0;
    }
    result = 0;
    if (v16 == (v18 | v13 & 7) && (_DWORD)v15 == (_DWORD)v17)
    {
      v19 = *(_QWORD **)(v11 & 0xFFFFFFFFFFFFFFF0);
      v20 = v19[2];
      v21 = *(_QWORD **)(v13 & 0xFFFFFFFFFFFFFFF0);
      if (((v21[2] ^ v20) & 0x3FFFC000000000) == 0)
      {
        v22 = v21[3];
        v23 = v19[3];
        if (v23 == v22
          || (*(_BYTE *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
          || (*(_BYTE *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
        {
          if ((v20 & 0x3FFFC000000000) == 0)
            return 1;
          v24 = v21 + 5;
          v25 = v19 + 5;
          v26 = (unsigned __int16)(v20 >> 38);
          result = 1;
          while (1)
          {
            v28 = *v24++;
            v27 = v28;
            v30 = *v25++;
            v29 = v30;
            if (v30 != v27
              && (*(_BYTE *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
              && (*(_BYTE *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              break;
            }
            if (!--v26)
              return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_22E90D2A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 80 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  return v3;
}

uint64_t sub_22E90D320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = a5;
  if (a5)
  {
    sub_22E910D68(a2 + 488, a3, a4, *(_DWORD *)(a2 + 572), *(_DWORD *)(a2 + 576), *(_DWORD *)(a2 + 576));
    sub_22E910E64(a2 + 792, a3, a4, *(_QWORD *)(a2 + 880), *(_DWORD *)(a2 + 888), *(_DWORD *)(a2 + 888));
    sub_22E910E64(a2 + 896, a3, a4, *(_QWORD *)(a2 + 984), *(_DWORD *)(a2 + 992), *(_DWORD *)(a2 + 992));
    sub_22E910E64(a2 + 1000, a3, a4, *(_QWORD *)(a2 + 1088), *(_DWORD *)(a2 + 1096), *(_DWORD *)(a2 + 1096));
    sub_22E910E64(a2 + 1104, a3, a4, *(_QWORD *)(a2 + 1192), *(_DWORD *)(a2 + 1200), *(_DWORD *)(a2 + 1200));
  }
  return a1;
}

uint64_t sub_22E90D3F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
  {
    sub_22E90E98C(*(_QWORD *)a1 + 488, *(_DWORD *)(*(_QWORD *)a1 + 576), 4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_DWORD *)(*(_QWORD *)a1 + 572));
    sub_22E90EF2C(*(_QWORD *)a1 + 792, *(_DWORD *)(*(_QWORD *)a1 + 888), 4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 880));
    sub_22E90EF2C(*(_QWORD *)a1 + 896, *(_DWORD *)(*(_QWORD *)a1 + 992), 4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 984));
    sub_22E90EF2C(*(_QWORD *)a1 + 1000, *(_DWORD *)(*(_QWORD *)a1 + 1096), 4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 1088));
    sub_22E90EF2C(*(_QWORD *)a1 + 1104, *(_DWORD *)(*(_QWORD *)a1 + 1200), 4, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 1192));
  }
  return a1;
}

void sub_22E90D4A4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  char v23;

  v4 = *(_DWORD *)(a1 + 668);
  v5 = BYTE1(v4);
  v6 = HIWORD(v4);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 192);
  if ((v6 + 1) > 1u)
  {
    if (*(_DWORD *)(a1 + 668))
      v9 = (v7 & 0x200000000) != 0;
    else
      v9 = 1;
    if (v5 == 3 && v9)
    {
LABEL_14:
      v10 = *(_QWORD *)(a1 + 88);
      v19 = 0uLL;
      v21 = 0;
      v20 = 0;
      v23 = 120;
      v22 = 0;
      v11 = sub_22F37C7F0(v10, &v19);
LABEL_19:
      sub_22EFCA95C(a2, v11);
      goto LABEL_20;
    }
    v12 = *(_QWORD *)(a1 + 88);
    v19 = 0uLL;
    v21 = 0;
    v20 = 0;
    v23 = 120;
    v22 = 0;
    v13 = sub_22F38A028(v12, 8 * v6, &v19);
    sub_22EFCA95C(a2, v13);
    goto LABEL_16;
  }
  if (v5 == 1)
  {
LABEL_16:
    if ((v7 & 0x200000000) != 0 && v5 == 1)
    {
      v14 = *(_QWORD *)(a1 + 88);
      v19 = 0uLL;
      v21 = 0;
      v20 = 0;
      v23 = 120;
      v22 = 0;
      v11 = sub_22F37C90C(v14, &v19);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v5 != 3)
    return;
  if (*(_DWORD *)(a1 + 668))
    v8 = (v7 & 0x200000000) == 0;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_14;
LABEL_20:
  v15 = *(unsigned int *)(a1 + 688);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 680);
    v17 = *(_DWORD *)(a1 + 672);
    v18 = 12 * v15;
    do
    {
      if (*(_DWORD *)(v16 + v18 - 8) != v17)
        break;
      if (*(_BYTE *)(v16 + v18 - 4))
        *(_BYTE *)(v16 + v18 - 3) = 1;
      v18 -= 12;
    }
    while (v18);
  }
}

void sub_22E90D614(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  char v14;

  if (*(_BYTE *)(a1 + 240))
  {
    v3 = *(_QWORD *)(a1 + 88);
    v10 = 0uLL;
    v12 = 0;
    v11 = 0;
    v14 = 120;
    v13 = 0;
    v9 = a2;
    v4 = a1;
    v5 = sub_22F389D78(v3, &v10);
    sub_22EFCA95C(v9, v5);
    a1 = v4;
    a2 = v9;
  }
  v2 = *(_DWORD *)(a1 + 572);
  if (v2 != *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 248) >> 14)
  {
    v6 = *(_QWORD *)(a1 + 88);
    v10 = 0uLL;
    v12 = 0;
    v11 = 0;
    v14 = 120;
    v13 = 0;
    v7 = a2;
    v8 = sub_22F389EFC(v6, v2, &v10);
    sub_22EFCA95C(v7, v8);
  }
}

unint64_t sub_22E90D6D4(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  unint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a3)
  {
    v4 = result;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    v7 = v6 - 64;
    v8 = v6 && (*(_WORD *)(v6 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD;
    v9 = !v8;
    v10 = v9 ? 0 : v7;
    if (!v9)
    {
      v11 = atomic_load((unsigned __int8 *)&qword_253E4C010);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4C010))
      {
        v14 = 0;
        qword_253E4C030 = 0;
        *(_QWORD *)&dword_253E4C038 = 0;
        qword_253E4C040 = 0x800000000;
        do
        {
          sub_22E3B39D4((llvm::StringMapImpl *)&qword_253E4C030, (&off_24FAB6B48)[v14], (size_t)(&off_24FAB6B48)[v14 + 1]);
          v14 += 2;
        }
        while (v14 != 34);
        __cxa_atexit((void (*)(void *))sub_22E90D950, &qword_253E4C030, &dword_22E3A8000);
        __cxa_guard_release(&qword_253E4C010);
      }
      v12 = atomic_load((unsigned __int8 *)&qword_253E4C018);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_253E4C018))
      {
        v15 = 0;
        qword_253E4C050 = 0;
        *(_QWORD *)&dword_253E4C058 = 0;
        qword_253E4C060 = 0x800000000;
        do
        {
          sub_22E3B39D4((llvm::StringMapImpl *)&qword_253E4C050, (&off_24FAB6C58)[v15], (size_t)(&off_24FAB6C58)[v15 + 1]);
          v15 += 2;
        }
        while (v15 != 8);
        __cxa_atexit((void (*)(void *))sub_22E90D950, &qword_253E4C050, &dword_22E3A8000);
        __cxa_guard_release(&qword_253E4C018);
      }
      v13 = *(_QWORD *)(v10 + 16);
      result = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
      {
        result = *(_QWORD *)result;
        if (!result)
          return result;
      }
      else if (!result)
      {
        return result;
      }
      result = sub_22EFC84D4(result);
      if ((_DWORD)result)
      {
        result = llvm::StringMapImpl::FindKey();
        if ((_DWORD)result != -1 && (int)result != (unint64_t)dword_253E4C058)
        {
          result = llvm::StringMapImpl::FindKey();
          if ((_DWORD)result != -1 && (int)result != (unint64_t)dword_253E4C038)
            return sub_22E90D954(*(_QWORD *)(v4 + 88), a3);
        }
      }
    }
  }
  return result;
}

unint64_t sub_22E90D954(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  unsigned __int8 v12;

  result = sub_22F30A204(a2);
  if ((result & 1) == 0)
  {
    result = sub_22E90DE00(a2);
    if (a2)
    {
      if ((result & 1) == 0)
      {
        v5 = 0;
        v6 = a2;
        do
        {
          v8 = 0uLL;
          v10 = 0;
          v9 = 0;
          v11 = 0;
          v12 = ((((v12 >> 7) & 1) << 23) | 0x780000u) >> 16;
          v7 = sub_22F39C034(a1, 0, &v8);
          sub_22EFCA95C(v6, v7);
          result = v6 + 96;
          if ((*(_BYTE *)(v6 + 96) & 3) != 0)
          {
            if (v5)
              return result;
            v5 = 1;
          }
          result = sub_22E3CD31C((uint64_t *)result, v6);
          if (result == a2)
            break;
          v6 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

unint64_t sub_22E90DA20(unint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = (uint64_t *)(*(_QWORD *)((*(_QWORD *)((*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                                          + ((2 * *(_QWORD *)(a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0)
                             + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22F10C2A4(*v4);
  if (!v5 || (v6 = v5, (*(_DWORD *)(v5 + 28) & 0x7Fu) - 35 >= 3))
  {
    v6 = 0;
    v7 = *v4;
    if (*v4 && *(_BYTE *)(v7 + 16) == 46)
    {
      v11 = *(_QWORD *)(v7 + 32);
      v8 = sub_22F0F08CC(&v11);
      v9 = *(_QWORD *)(v8 + 48);
      if (v9)
      {
        if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 35 >= 3)
          v6 = 0;
        else
          v6 = *(_QWORD *)(v8 + 48);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  return sub_22E90D6D4(a1, a2, v6);
}

void sub_22E90DAEC(unint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v7;
  _QWORD *v8;
  int Key;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unsigned __int8 v22;

  v4 = atomic_load((unsigned __int8 *)&qword_253E4C020);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E4C020))
  {
    v16 = 0;
    qword_253E4C070 = 0;
    *(_QWORD *)&dword_253E4C078 = 0;
    qword_253E4C080 = 0x800000000;
    do
    {
      sub_22E3B39D4((llvm::StringMapImpl *)&qword_253E4C070, (&off_24FAB6C98)[v16], (size_t)(&off_24FAB6C98)[v16 + 1]);
      v16 += 2;
    }
    while (v16 != 44);
    __cxa_atexit((void (*)(void *))sub_22E90D950, &qword_253E4C070, &dword_22E3A8000);
    __cxa_guard_release(&qword_253E4C020);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_253E4C028);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_253E4C028))
  {
    v17 = 0;
    qword_253E4C090 = 0;
    *(_QWORD *)&dword_253E4C098 = 0;
    qword_253E4C0A0 = 0x800000000;
    do
    {
      sub_22E3B39D4((llvm::StringMapImpl *)&qword_253E4C090, (&off_24FAB6DF8)[v17], (size_t)(&off_24FAB6DF8)[v17 + 1]);
      v17 += 2;
    }
    while (v17 != 6);
    __cxa_atexit((void (*)(void *))sub_22E90D950, &qword_253E4C090, &dword_22E3A8000);
    __cxa_guard_release(&qword_253E4C028);
  }
  if (*(_QWORD *)(a2 + 40) < 8uLL || (*(_QWORD *)(a2 + 40) & 7) != 0)
    return;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_11;
  }
  else if (!v8)
  {
LABEL_11:
    sub_22E90D6D4(a1, a2, a2);
    return;
  }
  if (!sub_22EFC84D4((unint64_t)v8))
    goto LABEL_11;
  if (!sub_22F30A204(a2) && !sub_22E90DE00(a2))
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1 || Key == (unint64_t)dword_253E4C078)
    {
      v10 = llvm::StringMapImpl::FindKey();
      if (v10 != -1 && v10 != (unint64_t)dword_253E4C098)
        sub_22E90D954(*(_QWORD *)(a1 + 88), a2);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 88);
      if (!sub_22F30A204(a2) && !sub_22E90DE00(a2))
      {
        v12 = 0;
        v13 = a2;
        do
        {
          v18 = 0uLL;
          v20 = 0;
          v19 = 0;
          v21 = 0;
          v22 = ((((v22 >> 7) & 1) << 23) | 0x780000u) >> 16;
          v14 = sub_22F39ACBC(v11, 0, &v18);
          sub_22EFCA95C(v13, v14);
          if ((*(_BYTE *)(v13 + 96) & 3) != 0)
          {
            if (v12)
              return;
            v12 = 1;
          }
          v15 = sub_22E3CD31C((uint64_t *)(v13 + 96), v13);
          if (v15 == a2)
            break;
          v13 = v15;
        }
        while (v15);
      }
    }
  }
}

BOOL sub_22E90DE00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 279)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E90DE60(uint64_t result, int a2, int a3, void *__s2, size_t __n, int a6)
{
  _DWORD *v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v7 = (_DWORD *)result;
  if (!a3)
  {
    *(_DWORD *)(result + 84) = *(_DWORD *)(result + 80);
LABEL_32:
    v7[22] = a2;
    return result;
  }
  v11 = a3;
  if ((a3 & 2) != 0)
  {
    *(_QWORD *)&v24 = __s2;
    *((_QWORD *)&v24 + 1) = __n;
    v25 = *(_QWORD *)(result + 84);
    v26 = a2;
    result = sub_22F30ABC8(result, &v24);
    goto LABEL_30;
  }
  if ((a3 & 4) == 0)
    goto LABEL_30;
  if (__n)
  {
    v12 = *(unsigned int *)(result + 8);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)result;
      v14 = 32 * v12;
      while (1)
      {
        if (*(_QWORD *)(v13 + v14 - 24) == __n)
        {
          result = memcmp(*(const void **)(v13 + v14 - 32), __s2, __n);
          if (!(_DWORD)result)
            break;
        }
        v14 -= 32;
        if (!v14)
          goto LABEL_30;
      }
      v7[21] = *(_DWORD *)(v13 + v14 - 16);
      v7[22] = *(_DWORD *)(v13 + v14 - 12);
      v7[2] = (unint64_t)(v14 - 32) >> 5;
      if ((v11 & 1) == 0)
        return result;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if ((a6 & 0xFF000000) != 0 && !(_BYTE)a6 && *(_BYTE *)(result + 84))
  {
    v15 = *(_QWORD *)result;
    v16 = *(unsigned int *)(result + 8);
    v17 = *(_QWORD *)result + 32 * v16;
    v18 = 32 * v16;
    while (v18)
    {
      v19 = *(unsigned __int8 *)(v17 - 16);
      v17 -= 32;
      v18 -= 32;
      if (!v19)
      {
        *(_DWORD *)(result + 8) = v18 >> 5;
        if ((v18 >> 5))
        {
          v20 = v15 + (v18 & 0x1FFFFFFFE0);
          *(_DWORD *)(result + 84) = *(_DWORD *)(v20 - 16);
          *(_DWORD *)(result + 88) = *(_DWORD *)(v20 - 12);
          v21 = (v18 >> 5) - 1;
          goto LABEL_25;
        }
        *(_DWORD *)(result + 84) = *(_DWORD *)(result + 80);
        *(_DWORD *)(result + 88) = a2;
        if ((a3 & 1) != 0)
          goto LABEL_31;
        return result;
      }
    }
LABEL_30:
    if ((v11 & 1) == 0)
      return result;
    goto LABEL_31;
  }
  v22 = *(unsigned int *)(result + 8);
  if (!(_DWORD)v22)
    goto LABEL_30;
  if ((a6 & 0xFF000000) == 0 || !(_BYTE)a6 || *(_BYTE *)(result + 84))
  {
    v23 = *(_QWORD *)result + 32 * v22;
    *(_DWORD *)(result + 84) = *(_DWORD *)(v23 - 16);
    *(_DWORD *)(result + 88) = *(_DWORD *)(v23 - 12);
    v21 = v22 - 1;
LABEL_25:
    *(_DWORD *)(result + 8) = v21;
    if ((a3 & 1) != 0)
    {
LABEL_31:
      v7[21] = a6;
      goto LABEL_32;
    }
  }
  return result;
}

void sub_22E90E014(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __asm { BR              X10 }
}

void sub_22E90E058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, __int128 __dst, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  int v39;
  size_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  std::string v50;
  __int128 v51;
  unint64_t v52;

  v44 = v42 + 328;
  if (a3 == 1)
  {
    *(_BYTE *)(v42 + 352) = 0;
    return;
  }
  sub_22F31F4EC(v42, (_QWORD *)(v43 - 56));
  if (!*(_QWORD *)(v43 - 56))
  {
    if ((sub_22F30A394((_QWORD *)v42, v41, v40, 19, v39) & 1) != 0)
      return;
    *(_BYTE *)(v42 + 352) = 1;
    if (v40 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v40 >= 0x17)
    {
      v47 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v47 = v40 | 7;
      v48 = v47 + 1;
      v45 = (__int128 *)operator new(v47 + 1);
      *((_QWORD *)&v51 + 1) = v40;
      v52 = v48 | 0x8000000000000000;
      *(_QWORD *)&v51 = v45;
    }
    else
    {
      HIBYTE(v52) = v40;
      v45 = &v51;
      if (!v40)
        goto LABEL_20;
    }
    memmove(v45, v41, v40);
LABEL_20:
    *((_BYTE *)v45 + v40) = 0;
    if (*(char *)(v44 + 23) < 0)
      operator delete(*(void **)v44);
    *(_OWORD *)v44 = v51;
    *(_QWORD *)(v44 + 16) = v52;
    *(_DWORD *)(v44 + 28) = v39;
    return;
  }
  sub_22E8FCA40((_QWORD *)v42, v39, 0x11C5u, 0, (uint64_t)&v51);
  v49 = *(char **)(v43 - 56);
  *(_QWORD *)(v43 - 56) = 0;
  sub_22F2432A8(&v49, &v50);
  sub_22F2F3734((uint64_t)&v51, (void **)&v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v49)
    (*(void (**)(char *))(*(_QWORD *)v49 + 8))(v49);
  sub_22E903BEC((unsigned int *)&v51);
  *(_BYTE *)(v42 + 352) = 0;
  v46 = *(_QWORD *)(v43 - 56);
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
}

unsigned int *sub_22E90E208(uint64_t a1, int a2, int a3, void *a4, size_t a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int *result;
  unint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int8x8_t v18;
  int8x8_t *v19;
  int v20;
  unsigned int *v21;
  _BYTE *v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  uint8x8_t v28;
  int8x8_t *v29;
  uint64_t v30;
  unsigned int v31[24];
  int8x8_t *v32;
  unsigned int v33;
  char v34;
  _BYTE v35[96];
  _BYTE v36[96];
  uint64_t v37;
  unsigned int v38;
  char v39;
  int v40;
  unsigned int v41[26];

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 192);
  if ((v12 & 0x200000000) != 0 && a5)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x11C1u, 0, (uint64_t)v41);
    return sub_22E903BEC(v41);
  }
  v14 = v12 & 0x200000000;
  v15 = *(_DWORD *)(a1 + 668);
  v40 = 0;
  if (!a6)
  {
    LOBYTE(v25) = 0;
    goto LABEL_20;
  }
  LOBYTE(v32) = 0;
  v34 = 0;
  sub_22F00905C(a6, *(_QWORD *)(a1 + 88), 0, (uint64_t)&v37);
  sub_22E54C490((uint64_t)&v32, (uint64_t)&v37);
  if (v39 && v38 >= 0x41 && v37)
    MEMORY[0x2348A0E84](v37, 0x1000C8000313F17);
  if ((*(_BYTE *)(a6 + 1) & 0x80) != 0 || !v34)
    goto LABEL_43;
  v16 = sub_22E42E5EC((uint64_t)&v32, 0);
  v17 = v33;
  if (v16)
    goto LABEL_12;
  if (v33 > 0x40)
  {
    if (llvm::APInt::countPopulationSlowCase((llvm::APInt *)&v32) == 1)
      goto LABEL_12;
LABEL_43:
    v20 = a2;
    v21 = (unsigned int *)v36;
    v22 = v36;
    v23 = (_QWORD *)a1;
    v24 = 6892;
    goto LABEL_44;
  }
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] != 1)
    goto LABEL_43;
LABEL_12:
  v18 = (int8x8_t)v32;
  if (v17 >= 0x41)
    v19 = v32;
  else
    v19 = (int8x8_t *)&v32;
  if (*(_QWORD *)v19 >= 0x11uLL)
    goto LABEL_43;
  if (!v14)
  {
LABEL_50:
    v29 = (int8x8_t *)&v32;
    if (v17 >= 0x41)
      v29 = (int8x8_t *)v18;
    v25 = v29->i32[0];
    v40 = v29->i32[0];
    if (v17 >= 0x41 && v34 && *(_QWORD *)&v18)
      MEMORY[0x2348A0E84](*(_QWORD *)&v18, 0x1000C8000313F17);
LABEL_20:
    if (a3 == 8)
    {
      if (BYTE2(v15) - 1 >= 0xFE)
        v25 = 8;
      else
        v25 = BYTE2(v15);
      v40 = v25;
      if ((_BYTE)v15)
        v26 = v14 == 0;
      else
        v26 = 0;
      v27 = !v26;
      if ((v15 & 0xFF00) != 0x300 || !v27)
      {
        sub_22E8FCA40((_QWORD *)a1, a2, 0x1AF1u, 0, (uint64_t)&v32);
        sub_22E89519C((uint64_t)&v32, (unsigned int *)&v40);
        sub_22E903BEC((unsigned int *)&v32);
        LOBYTE(v25) = v40;
        return (unsigned int *)sub_22E90DE60(a1 + 584, a2, a3, a4, a5, v15 & 0xFF00 | (v25 << 16) | (v14 >> 9) | 1);
      }
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1AF1u, 0, (uint64_t)&v32);
      sub_22F2F30F4((uint64_t)&v32, (uint64_t)"mac68k");
    }
    else
    {
      if ((a3 & 4) == 0)
        return (unsigned int *)sub_22E90DE60(a1 + 584, a2, a3, a4, a5, v15 & 0xFF00 | (v25 << 16) | (v14 >> 9) | 1);
      if (a6 && a5)
      {
        sub_22E8FCA40((_QWORD *)a1, a2, 0x1AF0u, 0, (uint64_t)v31);
        sub_22E903BEC(v31);
      }
      if (*(_DWORD *)(a1 + 592))
        return (unsigned int *)sub_22E90DE60(a1 + 584, a2, a3, a4, a5, v15 & 0xFF00 | (v25 << 16) | (v14 >> 9) | 1);
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1AF2u, 0, (uint64_t)&v32);
      v30 = sub_22F2F30F4((uint64_t)&v32, (uint64_t)"pack");
      sub_22F2F30F4(v30, (uint64_t)"stack empty");
    }
    sub_22E903BEC((unsigned int *)&v32);
    return (unsigned int *)sub_22E90DE60(a1 + 584, a2, a3, a4, a5, v15 & 0xFF00 | (v25 << 16) | (v14 >> 9) | 1);
  }
  if (!sub_22E42E5EC((uint64_t)&v32, 0))
  {
    v18 = (int8x8_t)v32;
    v17 = v33;
    goto LABEL_50;
  }
  v20 = a2;
  v21 = (unsigned int *)v35;
  v22 = v35;
  v23 = (_QWORD *)a1;
  v24 = 4546;
LABEL_44:
  sub_22E8FCA40(v23, v20, v24, 0, (uint64_t)v22);
  result = sub_22E903BEC(v21);
  if (v34 && v33 >= 0x41)
  {
    result = (unsigned int *)v32;
    if (v32)
      return (unsigned int *)MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  }
  return result;
}

unsigned int *sub_22E90E580(unsigned int *result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  unsigned int *v16;
  unsigned int v17[24];
  unsigned int v18[24];
  unsigned int v19[24];
  unsigned int v20[24];

  if (!a2)
  {
    v3 = result[168];
    v4 = *((unsigned __int8 *)result + 669);
    v5 = *((unsigned __int8 *)result + 665);
    if (v4 == v5
      && (v6 = *((unsigned __int8 *)result + 670), v6 == *((unsigned __int8 *)result + 666))
      && *((unsigned __int8 *)result + 668) == *((unsigned __int8 *)result + 664)
      && *((unsigned __int8 *)result + 671) == *((unsigned __int8 *)result + 667))
    {
      v7 = 0;
      v8 = (uint64_t)(result + 170);
      v9 = result[167];
    }
    else
    {
      v13 = result[172];
      if (v13)
        v7 = *(_DWORD *)(*((_QWORD *)result + 85) + 12 * v13 - 8) != v3;
      else
        v7 = 1;
      v8 = (uint64_t)(result + 170);
      v9 = result[167];
      if (v4 != v5)
        return (unsigned int *)sub_22E4D6448(v8, v9 | (unint64_t)(v3 << 32), v7);
      v6 = *((unsigned __int8 *)result + 666);
    }
    if (v6 == BYTE2(v9) && *((unsigned __int8 *)result + 664) == v9)
    {
      if (*((unsigned __int8 *)result + 667) == HIBYTE(v9))
        v3 = 0;
      else
        v3 = v3;
    }
    return (unsigned int *)sub_22E4D6448(v8, v9 | (unint64_t)(v3 << 32), v7);
  }
  v10 = result[172];
  v11 = *((_QWORD *)result + 85) + 12 * v10;
  v12 = *(_QWORD *)(v11 - 12);
  LODWORD(v11) = *(unsigned __int8 *)(v11 - 3) << 8;
  result[172] = v10 - 1;
  if ((_DWORD)v11)
  {
    v15 = a3;
    v16 = result;
    sub_22E8FCA40(result, a3, 0x1AEFu, 0, (uint64_t)v20);
    sub_22E903BEC(v20);
    sub_22E8FCA40(v16, SHIDWORD(v12), 0x1765u, 0, (uint64_t)v19);
    sub_22E903BEC(v19);
    a3 = v15;
    result = v16;
  }
  if (__PAIR64__(*((unsigned __int8 *)result + 670), *((unsigned __int8 *)result + 669)) != __PAIR64__(BYTE2(v12), BYTE1(v12))|| *((unsigned __int8 *)result + 668) != v12|| *((unsigned __int8 *)result + 671) != BYTE3(v12))
  {
    v14 = result;
    sub_22E8FCA40(result, a3, 0x1AEDu, 0, (uint64_t)v18);
    sub_22E903BEC(v18);
    sub_22E8FCA40(v14, v14[168], 0x1765u, 0, (uint64_t)v17);
    return sub_22E903BEC(v17);
  }
  return result;
}

unsigned int *sub_22E90E76C(unsigned int *result)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _BYTE v11[23];
  __int16 v12;
  unsigned int v13[24];
  unsigned int v14[26];

  v1 = result[148];
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = *((_QWORD *)result + 73) - 8;
    v4 = 32 * v1;
    v5 = 1;
    do
    {
      sub_22E8FCA40(v2, *(_DWORD *)(v3 + v4), 0x1AEEu, 0, (uint64_t)v14);
      result = sub_22E903BEC(v14);
      if ((v5 & 1) != 0
        && *((unsigned __int8 *)v2 + 669) == *((unsigned __int8 *)v2 + 665)
        && *((unsigned __int8 *)v2 + 670) == *((unsigned __int8 *)v2 + 666)
        && *((unsigned __int8 *)v2 + 668) == *((unsigned __int8 *)v2 + 664)
        && *((unsigned __int8 *)v2 + 671) == *((unsigned __int8 *)v2 + 667))
      {
        sub_22E8FCA40(v2, v2[168], 0x1766u, 0, (uint64_t)v13);
        v6 = sub_22F142BC4(v2[168], 21, *((uint64_t **)v2 + 14), *((_DWORD **)v2 + 9), 0);
        if (v6)
        {
          v10 = 0;
          v9 = 0;
          v7 = v6 | ((unint64_t)v6 << 32);
          v8 = 0;
          memset(&v11[4], 0, 19);
          strcpy(v11, "pop");
          v12 = 3;
          sub_22E890748((uint64_t)v13, &v7);
          if ((char)v12 < 0)
            operator delete(*(void **)v11);
        }
        result = sub_22E903BEC(v13);
      }
      v5 = 0;
      v4 -= 32;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_22E90E8DC(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;

  v4 = result;
  v10 = a2;
  v9 = 0uLL;
  if (a3)
  {
    v6 = a3;
    if ((a3 & 2) != 0)
    {
      result = sub_22F2B2FEC(result, &v9, (uint64_t *)(result + 88), (int *)(result + 96), &v10);
      if ((v6 & 1) != 0)
      {
LABEL_7:
        *(_QWORD *)(v4 + 88) = a4;
        *(_DWORD *)(v4 + 96) = v10;
      }
    }
    else
    {
      if ((a3 & 4) != 0)
      {
        v7 = *(unsigned int *)(result + 8);
        if ((_DWORD)v7)
        {
          v8 = *(_QWORD *)result + 32 * v7;
          *(_QWORD *)(result + 88) = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(result + 96) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(result + 8) = v7 - 1;
        }
      }
      if ((a3 & 1) != 0)
        goto LABEL_7;
    }
  }
  else
  {
    *(_QWORD *)(result + 88) = *(_QWORD *)(result + 80);
    *(_DWORD *)(result + 96) = a2;
  }
  return result;
}

uint64_t sub_22E90E98C(uint64_t result, int a2, int a3, void *__s2, size_t __n, int a6)
{
  _DWORD *v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = (_DWORD *)result;
  if (!a3)
  {
    a6 = *(_DWORD *)(result + 80);
LABEL_14:
    v7[21] = a6;
    v7[22] = a2;
    return result;
  }
  v11 = a3;
  if ((a3 & 2) != 0)
  {
    result = sub_22E910D68(result, (uint64_t)__s2, __n, *(_DWORD *)(result + 84), *(_DWORD *)(result + 88), a2);
  }
  else if ((a3 & 4) != 0)
  {
    if (__n)
    {
      v12 = *(_QWORD *)result;
      v13 = *(unsigned int *)(result + 8);
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        while (1)
        {
          if (*(_QWORD *)(v12 + v14 - 24) == __n)
          {
            result = memcmp(*(const void **)(v12 + v14 - 32), __s2, __n);
            if (!(_DWORD)result)
              break;
          }
          v14 -= 32;
          if (!v14)
            goto LABEL_13;
        }
        v16 = v12 + v14;
      }
      else
      {
        v16 = v12 + 32 * v13;
      }
      if (v12 != v16)
      {
        *(_QWORD *)(v7 + 21) = *(_QWORD *)(v16 - 16);
        v7[2] = (unint64_t)(v16 - v12 - 32) >> 5;
      }
    }
    else
    {
      v15 = *(unsigned int *)(result + 8);
      if ((_DWORD)v15)
      {
        *(_QWORD *)(result + 84) = *(_QWORD *)(*(_QWORD *)result + 32 * v15 - 16);
        *(_DWORD *)(result + 8) = v15 - 1;
      }
    }
  }
LABEL_13:
  if ((v11 & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_22E90EAA0(_QWORD *a1, const void *a2, size_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int Key;
  uint64_t v21;
  uint64_t v22;
  llvm::StringMapImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _DWORD *v34;
  const char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38[24];
  unsigned int v39[24];
  _QWORD v40[2];
  unsigned int v41[24];
  uint64_t v42;

  v42 = a5;
  if ((*(_BYTE *)(a5 + 29) & 1) == 0)
    goto LABEL_10;
  sub_22EFC8E88(a5);
  v11 = *(uint64_t **)v10;
  v12 = *(unsigned int *)(v10 + 8);
  v13 = *(uint64_t **)v10;
  if ((_DWORD)v12)
  {
    v14 = 8 * v12;
    v13 = *(uint64_t **)v10;
    while (*(_WORD *)(*v13 + 32) != 305)
    {
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_10;
    }
  }
  if (v13 == &v11[v12])
    goto LABEL_10;
  do
  {
    v16 = *v11++;
    v15 = v16;
    v17 = *(unsigned __int16 *)(v16 + 32) | (*(unsigned __int8 *)(v16 + 34) << 16);
  }
  while (*(_WORD *)(v16 + 32) != 305);
  if ((v17 & 0x40000) != 0)
    v18 = *(_DWORD *)(v15 + 16);
  else
LABEL_10:
    v18 = 0;
  v19 = a1[11];
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    v21 = *(unsigned int *)(v19 + 19056);
  else
    v21 = Key;
  v22 = *(_QWORD *)(v19 + 19048) + 8 * v21;
  v23 = (llvm::StringMapImpl *)(a1[11] + 19048);
  if (v22 == *(_QWORD *)v23 + 8 * *(unsigned int *)(a1[11] + 19056))
  {
    v27 = sub_22F29DA68(v23, a2, a3);
    result = 0;
    v28 = *v27;
    *(_QWORD *)(v28 + 8) = a5;
    *(_DWORD *)(v28 + 16) = v18;
    *(_DWORD *)(v28 + 20) = a4;
    return result;
  }
  v24 = *(_QWORD *)v22;
  v25 = *(_DWORD *)(*(_QWORD *)v22 + 20);
  if (v25 == a4 || (a4 & 8) != 0 && (v25 & 8) == 0)
    return 0;
  v29 = v24 + 8;
  sub_22E8FCA40(a1, *(_DWORD *)(a5 + 24), 0x1251u, 0, (uint64_t)v41);
  v30 = sub_22E890024((uint64_t)v41, &v42);
  sub_22F30AC48(v30, (const char **)(v24 + 8));
  sub_22E903BEC(v41);
  if (*(_QWORD *)(v24 + 8))
  {
    sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)v29 + 24), 0x64u, 0, (uint64_t)v41);
    v32 = *(_QWORD *)(*(_QWORD *)v29 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(*(_QWORD *)v29 + 40) & 7) != 0 || v32 == 0)
    {
      v36 = 0;
      v35 = "";
    }
    else
    {
      v34 = *(_DWORD **)(v32 + 16);
      v37 = *v34;
      v35 = (const char *)(v34 + 4);
      v36 = v37;
    }
    v40[0] = v35;
    v40[1] = v36;
    sub_22F2F2210((uint64_t)v41, (uint64_t)v40);
    sub_22E903BEC(v41);
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v18)
  {
LABEL_23:
    sub_22E8FCA40(a1, v18, 0x6Bu, 0, (uint64_t)v39);
    sub_22E903BEC(v39);
  }
LABEL_24:
  v31 = *(_DWORD *)(v24 + 16);
  if (v31)
  {
    sub_22E8FCA40(a1, v31, 0x6Bu, 0, (uint64_t)v38);
    sub_22E903BEC(v38);
  }
  return 1;
}

uint64_t sub_22E90ED04(_QWORD *a1, int a2, int a3, void *__s2, size_t __n, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v18;
  unsigned int v19[24];
  _QWORD v20[2];

  v20[0] = a7;
  v20[1] = a8;
  if (a8 == 7)
  {
    if (*(_DWORD *)a7 == 1601401698 && *(_DWORD *)(a7 + 3) == 1734701919)
    {
      v14 = (uint64_t)(a1 + 112);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (a8 == 9)
  {
    if (*(_QWORD *)a7 == 0x65735F74736E6F63 && *(_BYTE *)(a7 + 8) == 103)
    {
      v14 = (uint64_t)(a1 + 125);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (a8 != 8)
  {
LABEL_18:
    v14 = 0;
    goto LABEL_19;
  }
  if (*(_QWORD *)a7 == 0x6765735F61746164)
  {
    v14 = (uint64_t)(a1 + 99);
  }
  else if (*(_QWORD *)a7 == 0x6765735F65646F63)
  {
    v14 = (uint64_t)(a1 + 138);
  }
  else
  {
    v14 = 0;
  }
LABEL_19:
  if ((a3 & 4) != 0 && !*(_DWORD *)(v14 + 8))
  {
    sub_22E8FCA40(a1, a2, 0x1AF2u, 0, (uint64_t)v19);
    v18 = sub_22F2F2210((uint64_t)v19, (uint64_t)v20);
    sub_22F2F30F4(v18, (uint64_t)"stack empty");
    sub_22E903BEC(v19);
    if (!a6)
      return sub_22E90EF2C(v14, a2, a3, __s2, __n, (uint64_t)a6);
  }
  else if (!a6)
  {
    return sub_22E90EF2C(v14, a2, a3, __s2, __n, (uint64_t)a6);
  }
  result = sub_22EA48B24(a1, a6[5]);
  if (!(_DWORD)result)
    return result;
  if (((*a6 >> 21) & 7) * a6[4] == 8
    && *(_QWORD *)&a6[a6[1] + 5] == 0x657674636572642ELL
    && *(_DWORD *)(*(_QWORD *)(a1[11] + 15088) + 148) == 11)
  {
    sub_22E8FCA40(a1, a2, 0x1888u, 0, (uint64_t)v19);
    sub_22F2F2210((uint64_t)v19, (uint64_t)v20);
    sub_22E903BEC(v19);
  }
  return sub_22E90EF2C(v14, a2, a3, __s2, __n, (uint64_t)a6);
}

uint64_t sub_22E90EF2C(uint64_t result, int a2, int a3, void *__s2, size_t __n, uint64_t a6)
{
  uint64_t v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  if (!a3)
  {
    a6 = *(_QWORD *)(result + 80);
LABEL_14:
    *(_QWORD *)(v7 + 88) = a6;
    *(_DWORD *)(v7 + 96) = a2;
    return result;
  }
  v11 = a3;
  if ((a3 & 2) != 0)
  {
    result = sub_22E910E64(result, (uint64_t)__s2, __n, *(_QWORD *)(result + 88), *(_DWORD *)(result + 96), a2);
  }
  else if ((a3 & 4) != 0)
  {
    if (__n)
    {
      v12 = *(_QWORD *)result;
      v13 = *(unsigned int *)(result + 8);
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        while (1)
        {
          if (*(_QWORD *)(v12 + v14 - 24) == __n)
          {
            result = memcmp(*(const void **)(v12 + v14 - 32), __s2, __n);
            if (!(_DWORD)result)
              break;
          }
          v14 -= 32;
          if (!v14)
            goto LABEL_13;
        }
        v17 = v12 + v14;
      }
      else
      {
        v17 = v12 + 32 * v13;
      }
      if (v12 != v17)
      {
        *(_QWORD *)(v7 + 88) = *(_QWORD *)(v17 - 16);
        *(_DWORD *)(v7 + 96) = *(_DWORD *)(v17 - 8);
        *(_DWORD *)(v7 + 8) = (unint64_t)(v17 - v12 - 32) >> 5;
      }
    }
    else
    {
      v15 = *(unsigned int *)(result + 8);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)result + 32 * v15;
        *(_QWORD *)(result + 88) = *(_QWORD *)(v16 - 16);
        *(_DWORD *)(result + 96) = *(_DWORD *)(v16 - 8);
        *(_DWORD *)(result + 8) = v15 - 1;
      }
    }
  }
LABEL_13:
  if ((v11 & 1) != 0)
    goto LABEL_14;
  return result;
}

void sub_22E90F058(_QWORD *a1, unsigned int *a2, _QWORD *a3, int a4)
{
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  int v26;
  __int16 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v8 = *((unsigned __int16 *)a2 + 8);
  if ((v8 - 7) < 6 || ((v8 - 13) >= 6 ? (v9 = v8 == 1) : (v9 = 1), v9))
    v18 = 0;
  else
    v18 = *((_QWORD *)a2 + 1);
  v29 = v18;
  v30 = 0;
  v10 = *a2;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = a1;
  v38 = v18;
  v39 = v10;
  sub_22EFC6D6C((uint64_t)v40, v18);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  sub_22EC63520((uint64_t)a1, (uint64_t)&v30, a3, 1, 0);
  if (!(_DWORD)v32)
  {
    v14 = a4;
    v15 = a1;
    v16 = 6900;
    goto LABEL_18;
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_16;
  v11 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_DWORD *)(v11 + 28) & 0x7F;
  if (v12 <= 0x2F && ((1 << v12) & 0xC00000060000) != 0)
  {
    v11 = sub_22EFBAEA4(*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFFCLL);
    v12 = *(_DWORD *)(v11 + 28) & 0x7F;
  }
  if (v12 - 60 >= 7)
  {
LABEL_16:
    v14 = a4;
    v15 = a1;
    v16 = 6899;
LABEL_18:
    sub_22E8FCA40(v15, v14, v16, 0, (uint64_t)&v24);
    v17 = sub_22E8BAE44((uint64_t)&v24, &v29);
    LODWORD(v23) = *a2;
    HIDWORD(v23) = v23;
    sub_22E8906A0(v17, &v23);
    sub_22E903BEC((unsigned int *)&v24);
    goto LABEL_19;
  }
  if (sub_22EFC9084(v11, 1))
  {
    sub_22E8FCA40(a1, a4, 0x1BEBu, 0, (uint64_t)&v24);
    sub_22E8BAE44((uint64_t)&v24, &v29);
    sub_22E903BEC((unsigned int *)&v24);
  }
  v19 = a1[11];
  v20 = *a2 | ((unint64_t)*a2 << 32);
  v24 = 0uLL;
  v25 = v20;
  v26 = 0;
  v28 = 14;
  v27 = 478;
  v21 = sub_22F3A4E84(v19, &v24);
  sub_22EFCA95C(v11, v21);
LABEL_19:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v22 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
  }
  if (v31 != v33)
    free(v31);
}

void sub_22E90F310(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(unsigned int *)(v2 + 848);
  if (*(_DWORD *)(v2 + 848))
  {
    v6 = *(_QWORD *)(v2 + 840);
    if (!sub_22F30AD50(a2) && !sub_22E90F3B4(a2))
    {
      v8 = (unint64_t)v6;
      v9 = v3 | (v3 << 32);
      v10 = 0;
      v12 = 126;
      v11 = sub_22F1ACD3C(v6, 0, 6u, 0);
      v7 = sub_22F380BA0(*(_QWORD *)(a1 + 88), &v8);
      sub_22EFCA95C(a2, v7);
    }
  }
}

BOOL sub_22E90F3B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 126)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22E90F414(uint64_t a1, uint64_t a2, int a3, int32x2_t *a4)
{
  char *v6;
  char *v7;
  __int32 v8;
  int v9;
  __int32 v10;
  unsigned int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v26;
  __int32 v27;
  __int32 v28;
  unsigned int v29;
  int *v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t i;
  __int32 v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int32 v44;
  int *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  int *v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  const char *v65;
  size_t v66;
  uint64_t *v67;
  void **p_dst;
  char *v69;
  char *v70;
  size_t v71;
  size_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  unint64_t v78;
  int v79;
  int32x2_t v80;
  unsigned __int32 v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  int *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  int *v96;
  int v97;
  int *v98;
  uint64_t v99;
  int *v100;
  char v101;
  int v102;
  unint64_t v103;
  int *v104;
  int v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  int *v118;
  int *v119;
  int *v120;
  int *v121;
  int *v122;
  unsigned int v123;
  int v124;
  int *v125;
  int v126;
  uint64_t v127;
  int *v128;
  int v129;
  uint64_t v131;
  int *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v138[24];
  void *v139[2];
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  void *__p;
  void *__dst;
  uint64_t v145;
  uint64_t v146;
  int v147;
  void **v148;
  char *v149;
  _BYTE v150[32];
  _BYTE v151[56];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD v155[6];
  char *v156;
  uint64_t v157;
  _BYTE v158[32];
  _DWORD *v159;
  uint64_t v160;
  _QWORD v161[4];

  v161[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 48) |= 0x100000000uLL;
  v159 = v161;
  v160 = 0x400000000;
  v156 = v158;
  v157 = 0x400000000;
  (*(void (**)(_QWORD, char **, _QWORD))(**(_QWORD **)(a2 + 72) + 72))(*(_QWORD *)(a2 + 72), &v156, *(_QWORD *)(a1 + 72));
  if ((_DWORD)v157)
  {
    v6 = v156;
    v7 = &v156[8 * v157];
    do
    {
      v8 = a4[2].i32[0];
      if (v8)
      {
        v9 = *(_DWORD *)v6;
        v10 = v8 - 1;
        v11 = v10 & (37 * *(_DWORD *)v6);
        v12 = (int *)(*(_QWORD *)a4 + 12 * v11);
        v13 = *v12;
        if (*(_DWORD *)v6 == *v12)
        {
LABEL_5:
          *v12 = 0x80000000;
          a4[1] = vadd_s32(a4[1], (int32x2_t)0x1FFFFFFFFLL);
          if (v6[4])
          {
            v14 = v160;
            if (v160 >= (unint64_t)HIDWORD(v160))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v14 = v160;
            }
            v159[v14] = v9;
            LODWORD(v160) = v160 + 1;
          }
        }
        else
        {
          v15 = 1;
          while (v13 != 0x7FFFFFFF)
          {
            v16 = v11 + v15++;
            v11 = v16 & v10;
            v12 = (int *)(*(_QWORD *)a4 + 12 * v11);
            v13 = *v12;
            if (v9 == *v12)
              goto LABEL_5;
          }
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
    memset(v150, 0, 20);
    sub_22E873BF4((uint64_t)v150, (uint64_t)a4);
    v17 = *(llvm **)v150;
    v18 = *(_QWORD *)v150 + 12 * *(unsigned int *)&v150[16];
    if (*(_DWORD *)&v150[8])
    {
      if (*(_DWORD *)&v150[16])
      {
        v19 = 12 * *(unsigned int *)&v150[16];
        v20 = *(int **)v150;
        while ((*v20 - 0x7FFFFFFF) <= 1)
        {
          v20 += 3;
          v19 -= 12;
          if (!v19)
            goto LABEL_20;
        }
      }
      else
      {
        v20 = *(int **)v150;
      }
    }
    else
    {
LABEL_20:
      v20 = (int *)(*(_QWORD *)v150 + 12 * *(unsigned int *)&v150[16]);
    }
    v21 = *(_QWORD *)v150 + 12 * *(unsigned int *)&v150[16];
    if (v20 == (int *)v21)
    {
      v36 = *(unsigned int *)&v150[16];
    }
    else
    {
      do
      {
        v22 = *v20;
        v23 = sub_22E9102E0(*v20);
        if (HIDWORD(v23) && (_DWORD)v157)
        {
          v24 = v156;
          while (*(_DWORD *)v24 != (_DWORD)v23 || v24[4] == 0)
          {
            v24 += 8;
            if (v24 == &v156[8 * v157])
              goto LABEL_38;
          }
          v26 = v160;
          if (v160 >= (unint64_t)HIDWORD(v160))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = v160;
          }
          v159[v26] = v22;
          LODWORD(v160) = v160 + 1;
          v27 = a4[2].i32[0];
          if (v27)
          {
            v28 = v27 - 1;
            v29 = v28 & (37 * v22);
            v30 = (int *)(*(_QWORD *)a4 + 12 * v29);
            v31 = *v30;
            if (v22 == *v30)
            {
LABEL_37:
              *v30 = 0x80000000;
              a4[1] = vadd_s32(a4[1], (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v34 = 1;
              while (v31 != 0x7FFFFFFF)
              {
                v35 = v29 + v34++;
                v29 = v35 & v28;
                v30 = (int *)(*(_QWORD *)a4 + 12 * v29);
                v31 = *v30;
                if (v22 == *v30)
                  goto LABEL_37;
              }
            }
          }
        }
LABEL_38:
        v32 = v20 + 3;
        while (v32 != (int *)v18)
        {
          v33 = *v32;
          v32 += 3;
          if ((v33 - 0x7FFFFFFF) >= 2)
          {
            v20 = v32 - 3;
            goto LABEL_43;
          }
        }
        v20 = (int *)v18;
LABEL_43:
        ;
      }
      while (v20 != (int *)v21);
      v36 = *(unsigned int *)&v150[16];
      v17 = *(llvm **)v150;
    }
    v37 = 12 * v36;
LABEL_51:
    llvm::deallocate_buffer(v17, (void *)v37);
    goto LABEL_52;
  }
  v153 = 1;
  for (i = 8; i != 40; i += 16)
    *(_DWORD *)((char *)&v153 + i) = 0x7FFFFFFF;
  v40 = a4[1].i32[0];
  v41 = (int *)*a4;
  v42 = a4[2].u32[0];
  v43 = *(_QWORD *)a4 + 12 * v42;
  v44 = a4[2].u32[0];
  v45 = (int *)v43;
  if (v40)
  {
    if ((_DWORD)v42)
    {
      v74 = 12 * v42;
      v45 = (int *)*a4;
      while ((*v45 - 0x7FFFFFFF) <= 1)
      {
        v45 += 3;
        v74 -= 12;
        if (!v74)
        {
          v44 = a4[2].u32[0];
          v45 = (int *)(*(_QWORD *)a4 + 12 * v42);
          goto LABEL_128;
        }
      }
      v44 = a4[2].u32[0];
    }
    else
    {
      v44 = 0;
      v45 = (int *)*a4;
    }
  }
LABEL_128:
  v76 = &v41[3 * v44];
  if (v45 == v76)
    goto LABEL_153;
  do
  {
    v77 = *v45;
    v78 = sub_22E9102E0(*v45);
    if (HIDWORD(v78))
    {
      v79 = v78;
      v80 = *a4;
      v81 = a4[2].u32[0];
      if (v81)
      {
        v82 = (v81 - 1) & (37 * v78);
        v83 = *(_QWORD *)&v80 + 12 * v82;
        v84 = *(_DWORD *)v83;
        if (*(_DWORD *)v83 == (_DWORD)v78)
          goto LABEL_137;
        v85 = 1;
        while (v84 != 0x7FFFFFFF)
        {
          v86 = v82 + v85++;
          v82 = v86 & (v81 - 1);
          v83 = *(_QWORD *)&v80 + 12 * v82;
          v84 = *(_DWORD *)v83;
          if (*(_DWORD *)v83 == (_DWORD)v78)
            goto LABEL_137;
        }
      }
      v83 = *(_QWORD *)&v80 + 12 * v81;
LABEL_137:
      if (v83 == *(_QWORD *)&v80 + 12 * v81)
      {
        if (v77 == 24 || v77 == 15)
        {
          v89 = *(_QWORD *)(v45 + 1);
          v141 = __PAIR64__(v77, v78);
          *(_QWORD *)&v142 = v89;
          sub_22F30B5AC((uint64_t)v150, (uint64_t)&v153, (int *)&v141, (uint64_t *)((char *)&v141 + 4));
        }
      }
      else
      {
        sub_22E8FCA40((_QWORD *)a1, v45[1], 0x11B4u, 0, (uint64_t)v150);
        v139[0] = sub_22F419360(v77);
        v90 = sub_22E8AECC4((uint64_t)v150, (uint64_t *)v139);
        v149 = sub_22F419360(v79);
        v91 = sub_22E8AECC4(v90, (uint64_t *)&v149);
        v92 = sub_22E8906A0(v91, (uint64_t *)(v83 + 4));
        v93 = *(_QWORD *)(v45 + 1);
        v94 = sub_22F142BC4(HIDWORD(v93), 65, *(uint64_t **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
        *(_QWORD *)((char *)&v142 + 4) = 0;
        BYTE12(v142) = 0;
        v95 = v93 | ((unint64_t)v94 << 32);
        __dst = 0;
        v145 = 0;
        if (!v94)
          v95 = v93;
        __p = 0;
        LOBYTE(v146) = 0;
        v141 = v95;
        LOBYTE(v142) = v94 == 0;
        sub_22E890748(v92, &v141);
        if (SHIBYTE(v145) < 0)
          operator delete(__p);
        sub_22E903BEC((unsigned int *)v150);
      }
    }
    v87 = v45 + 3;
    while (v87 != (int *)v43)
    {
      v88 = *v87;
      v87 += 3;
      if ((v88 - 0x7FFFFFFF) >= 2)
      {
        v45 = v87 - 3;
        goto LABEL_145;
      }
    }
    v45 = (int *)v43;
LABEL_145:
    ;
  }
  while (v45 != v76);
  v40 = a4[1].i32[0];
  v41 = (int *)*a4;
  v42 = a4[2].u32[0];
LABEL_153:
  v96 = &v41[3 * v42];
  v97 = v42;
  v98 = v96;
  if (v40)
  {
    if ((_DWORD)v42)
    {
      v99 = 12 * v42;
      v98 = v41;
      while ((*v98 - 0x7FFFFFFF) <= 1)
      {
        v98 += 3;
        v99 -= 12;
        if (!v99)
        {
          v97 = v42;
          v98 = &v41[3 * v42];
          goto LABEL_161;
        }
      }
      v97 = v42;
    }
    else
    {
      v97 = 0;
      v98 = v41;
    }
  }
LABEL_161:
  v100 = &v41[3 * v97];
  if (v98 == v100)
    goto LABEL_191;
  v101 = 0;
  while (2)
  {
    v102 = *v98;
    v103 = sub_22E9102E0(*v98);
    if (HIDWORD(v103))
    {
      v106 = (uint64_t *)sub_22F30ADB0((uint64_t)&v153, v103);
      v107 = &v154;
      if ((v153 & 1) == 0)
        v107 = (uint64_t *)v154;
      v108 = v155[0];
      if ((v153 & 1) != 0)
        v108 = 2;
      if (&v107[2 * v108] != v106)
      {
        v109 = v106;
        if (*((_DWORD *)v106 + 1) != *v98)
        {
          LODWORD(v110) = *((_DWORD *)v106 + 2);
          goto LABEL_183;
        }
        v110 = *((unsigned int *)v106 + 2);
        if (v110 != v98[1] || *((_DWORD *)v106 + 3) != v98[2])
        {
LABEL_183:
          sub_22E8FCA40((_QWORD *)a1, v110, 0x11B3u, 0, (uint64_t)v150);
          v139[0] = sub_22F419360(*((_DWORD *)v109 + 1));
          v112 = sub_22E8AECC4((uint64_t)v150, (uint64_t *)v139);
          v149 = sub_22F419360(v102);
          v113 = sub_22E8AECC4(v112, (uint64_t *)&v149);
          v114 = sub_22E8906A0(v113, (uint64_t *)(v98 + 1));
          v115 = v109[1];
          v116 = sub_22F142BC4(HIDWORD(v115), 65, *(uint64_t **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
          *(_QWORD *)((char *)&v142 + 4) = 0;
          BYTE12(v142) = 0;
          v117 = v115 | ((unint64_t)v116 << 32);
          __dst = 0;
          v145 = 0;
          if (!v116)
            v117 = v115;
          __p = 0;
          LOBYTE(v146) = 0;
          v141 = v117;
          LOBYTE(v142) = v116 == 0;
          sub_22E890748(v114, &v141);
          if (SHIBYTE(v145) < 0)
            operator delete(__p);
          sub_22E903BEC((unsigned int *)v150);
          *(_DWORD *)v109 = 0x80000000;
          LODWORD(v153) = v153 - 2;
          ++HIDWORD(v153);
          v101 = 1;
        }
      }
    }
    v104 = v98 + 3;
    while (v104 != v96)
    {
      v105 = *v104;
      v104 += 3;
      if ((v105 - 0x7FFFFFFF) >= 2)
      {
        v98 = v104 - 3;
        goto LABEL_169;
      }
    }
    v98 = v96;
LABEL_169:
    if (v98 != v100)
      continue;
    break;
  }
  v40 = a4[1].i32[0];
  v41 = (int *)*a4;
  v42 = a4[2].u32[0];
  if ((v101 & 1) != 0)
  {
    v118 = &v41[3 * v42];
    if (v40)
    {
      if ((_DWORD)v42)
      {
        v134 = 12 * v42;
        v119 = (int *)*a4;
        while ((*v119 - 0x7FFFFFFF) <= 1)
        {
          v119 += 3;
          v134 -= 12;
          if (!v134)
            goto LABEL_190;
        }
      }
      else
      {
        v119 = (int *)*a4;
      }
    }
    else
    {
LABEL_190:
      v119 = &v41[3 * v42];
    }
    v128 = &v41[3 * v42];
    while (v119 != v128)
    {
      v129 = *v119;
      if (*v119 != 15 && v129 != 24)
      {
        v131 = v160;
        if (v160 >= (unint64_t)HIDWORD(v160))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v131 = v160;
        }
        v159[v131] = v129;
        LODWORD(v160) = v160 + 1;
      }
      v132 = v119 + 3;
      while (v132 != v118)
      {
        v133 = *v132;
        v132 += 3;
        if ((v133 - 0x7FFFFFFF) >= 2)
        {
          v119 = v132 - 3;
          goto LABEL_227;
        }
      }
      v119 = v118;
LABEL_227:
      ;
    }
    goto LABEL_213;
  }
LABEL_191:
  v120 = &v41[3 * v42];
  if (v40)
  {
    if ((_DWORD)v42)
    {
      v127 = 12 * v42;
      v121 = v41;
      while ((*v121 - 0x7FFFFFFF) <= 1)
      {
        v121 += 3;
        v127 -= 12;
        if (!v127)
          goto LABEL_192;
      }
    }
    else
    {
      v121 = v41;
    }
  }
  else
  {
LABEL_192:
    v121 = &v41[3 * v42];
  }
  v122 = &v41[3 * v42];
  if (v121 != v122)
  {
    v123 = v160;
    do
    {
      v124 = *v121;
      if (v123 >= HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v123 = v160;
      }
      v159[v123] = v124;
      v123 = v160 + 1;
      LODWORD(v160) = v160 + 1;
      v125 = v121 + 3;
      while (v125 != v120)
      {
        v126 = *v125;
        v125 += 3;
        if ((v126 - 0x7FFFFFFF) >= 2)
        {
          v121 = v125 - 3;
          goto LABEL_204;
        }
      }
      v121 = v120;
LABEL_204:
      ;
    }
    while (v121 != v122);
  }
LABEL_213:
  sub_22F30AE0C((uint64_t)a4);
  if ((v153 & 1) == 0)
  {
    v37 = 16 * v155[0];
    v17 = (llvm *)v154;
    goto LABEL_51;
  }
LABEL_52:
  if (a4[1].i32[0])
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x11B2u, 0, (uint64_t)&v141);
    v46 = sub_22E8D2984((uint64_t)&v141, (uint64_t *)a2);
    v47 = *(_OWORD *)(v46 + 9);
    *(_OWORD *)v150 = *(_OWORD *)v46;
    *(_OWORD *)&v150[9] = v47;
    v151[0] = 0;
    v151[48] = 0;
    if (*(_BYTE *)(v46 + 80))
      sub_22E907424((uint64_t)v151, v46 + 32);
    v152 = *(_QWORD *)(v46 + 88);
    sub_22E903BEC((unsigned int *)&v141);
    v153 = (uint64_t)v155;
    v154 = 0x200000000;
    v48 = a4[2].u32[0];
    v49 = *(_QWORD *)a4 + 12 * v48;
    if (a4[1].i32[0])
    {
      if ((_DWORD)v48)
      {
        v75 = 12 * v48;
        v50 = (uint64_t)*a4;
        while ((*(_DWORD *)v50 - 0x7FFFFFFF) <= 1)
        {
          v50 += 12;
          v75 -= 12;
          if (!v75)
            goto LABEL_68;
        }
      }
      else
      {
        v50 = (uint64_t)*a4;
      }
    }
    else
    {
LABEL_68:
      v50 = *(_QWORD *)a4 + 12 * v48;
    }
    v52 = *(_QWORD *)a4 + 12 * v48;
    if (v50 == v52)
    {
      v53 = 0;
      v54 = v155;
    }
    else
    {
      do
      {
        v55 = *(_DWORD *)v50;
        v56 = v154;
        if (v154 >= (unint64_t)HIDWORD(v154))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v56 = v154;
        }
        *(_DWORD *)(v153 + 4 * v56) = v55;
        LODWORD(v154) = v154 + 1;
        v57 = *(_QWORD *)(v50 + 4);
        v58 = sub_22F142BC4(HIDWORD(v57), 65, *(uint64_t **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
        *(_QWORD *)((char *)&v142 + 4) = 0;
        BYTE12(v142) = 0;
        v59 = v57 | ((unint64_t)v58 << 32);
        __dst = 0;
        v145 = 0;
        if (!v58)
          v59 = v57;
        __p = 0;
        LOBYTE(v146) = 0;
        v141 = v59;
        LOBYTE(v142) = v58 == 0;
        sub_22E890748((uint64_t)v150, &v141);
        if (SHIBYTE(v145) < 0)
          operator delete(__p);
        v60 = (int *)(v50 + 12);
        while (v60 != (int *)v49)
        {
          v61 = *v60;
          v60 += 3;
          if ((v61 - 0x7FFFFFFF) >= 2)
          {
            v50 = (uint64_t)(v60 - 3);
            goto LABEL_88;
          }
        }
        v50 = v49;
LABEL_88:
        ;
      }
      while (v50 != v52);
      v54 = (_DWORD *)v153;
      v53 = v154;
    }
    v139[0] = 0;
    v139[1] = 0;
    v140 = 0;
    LODWORD(v142) = 0;
    LOBYTE(v145) = 0;
    v146 = 0;
    v147 = 1;
    __p = 0;
    __dst = 0;
    *((_QWORD *)&v142 + 1) = 0;
    v141 = MEMORY[0x24BED83D8] + 16;
    v148 = v139;
    llvm::raw_ostream::SetBufferAndMode();
    if (v53)
    {
      v62 = 0;
      v63 = 4 * v53;
      v135 = v63 - 4;
      do
      {
        v64 = __dst;
        if (v62)
        {
          if (v135 == v62)
            v65 = ", and ";
          else
            v65 = ", ";
          if (v135 == v62)
            v66 = 6;
          else
            v66 = 2;
          if (v66 <= (_BYTE *)__p - (_BYTE *)__dst)
          {
            memcpy(__dst, v65, v66);
            v64 = (char *)__dst + v66;
            __dst = (char *)__dst + v66;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v141, v65);
            v64 = __dst;
          }
        }
        if (__p == v64)
        {
          v67 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v141, "'");
          p_dst = (void **)(v67 + 4);
          v69 = (char *)v67[4];
        }
        else
        {
          *v64 = 39;
          v69 = (char *)__dst + 1;
          __dst = (char *)__dst + 1;
          v67 = &v141;
          p_dst = &__dst;
        }
        v70 = sub_22F419360(v54[v62 / 4]);
        v71 = strlen(v70);
        v72 = v71;
        if (v71 <= v67[3] - (uint64_t)v69)
        {
          if (v71)
          {
            memcpy(v69, v70, v71);
            *p_dst = (char *)*p_dst + v72;
          }
        }
        else
        {
          v67 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v67, v70);
        }
        v73 = (_BYTE *)v67[4];
        if ((_BYTE *)v67[3] == v73)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v67, "'");
        }
        else
        {
          *v73 = 39;
          ++v67[4];
        }
        v62 += 4;
      }
      while (v63 != v62);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v141);
    sub_22F2F3734((uint64_t)v150, v139);
    if (SHIBYTE(v140) < 0)
      operator delete(v139[0]);
    if ((_DWORD *)v153 != v155)
      free((void *)v153);
    sub_22E903BEC((unsigned int *)v150);
  }
  v38 = *(_DWORD *)(a1 + 1384);
  if (v38)
  {
    v51 = *(_QWORD *)(a1 + 1376) + 144 * v38 - 128;
    *(_DWORD *)v150 = a3;
    *(_QWORD *)&v150[8] = a2;
    *(_QWORD *)&v150[16] = v151;
    *(_QWORD *)&v150[24] = 0x400000000;
    if ((_DWORD)v160)
      sub_22F28CB40((uint64_t)&v150[16], (uint64_t)&v159);
    v151[16] = 0;
    sub_22F30AE60(v51, (unint64_t)v150);
    if (*(_BYTE **)&v150[16] != v151)
      free(*(void **)&v150[16]);
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x11B1u, 0, (uint64_t)v138);
    sub_22E903BEC(v138);
  }
  if (v156 != v158)
    free(v156);
  if (v159 != (_DWORD *)v161)
    free(v159);
}

uint64_t sub_22E9102E0(int a1)
{
  if ((a1 - 5) > 0x13)
    return 0;
  else
    return qword_22F463D50[a1 - 5] | qword_22F463CB0[a1 - 5];
}

unsigned int *sub_22E910314(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[2];
  int v19;
  unsigned int v20[24];
  unsigned int v21[24];

  v4 = *(unsigned int *)(a1 + 1384);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)(a1 + 1376);
    for (i = 144 * v4; ; i -= 144)
    {
      v8 = i - 144;
      if (!i)
        break;
      v9 = *(_QWORD *)(v6 + i - 136);
      if (v9 == a3)
      {
        v10 = *(unsigned int *)(v6 + v8 + 24);
        if ((_DWORD)v10)
        {
          v12 = 56 * v10;
          v13 = (_BYTE *)(*(_QWORD *)(v6 + v8 + 16) + 48);
          do
          {
            if (!*v13)
            {
              sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*((_QWORD *)v13 - 5) + 16), 0x1AEAu, 0, (uint64_t)v21);
              sub_22E8D2984((uint64_t)v21, *((uint64_t **)v13 - 5));
              sub_22E903BEC(v21);
              sub_22E8FCA40((_QWORD *)a1, a2, 0x1764u, 0, (uint64_t)v20);
              sub_22E903BEC(v20);
            }
            v13 += 56;
            v12 -= 56;
          }
          while (v12);
          v6 = *(_QWORD *)(a1 + 1376);
        }
        return (unsigned int *)sub_22F30AF4C((uint64_t *)(a1 + 1376), v6 + v8);
      }
    }
    if (!a3)
      goto LABEL_14;
    sub_22E8FCA40((_QWORD *)a1, a2, 0x11B6u, 0, (uint64_t)v21);
    v19 = 0;
    v15 = sub_22E8900C4((uint64_t)v21, &v19);
    v16 = *(unsigned int **)(a3 + 16);
    v17 = *v16;
    v18[0] = v16 + 4;
    v18[1] = v17;
    sub_22F2F2210(v15, (uint64_t)v18);
  }
  else
  {
LABEL_14:
    sub_22E8FCA40((_QWORD *)a1, a2, 0x11B6u, 0, (uint64_t)v21);
    LODWORD(v18[0]) = 1;
    sub_22E8900C4((uint64_t)v21, (int *)v18);
  }
  return sub_22E903BEC(v21);
}

void sub_22E91049C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(a1 + 1384);
  if (v3)
  {
    v7 = *(_QWORD *)(a1 + 1376);
    v16 = v7 + 144 * v3;
    do
    {
      v8 = *(_DWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v7 + 16);
        v10 = v9 + 56 * v8;
        do
        {
          v11 = *(unsigned int *)(v9 + 24);
          if ((_DWORD)v11)
          {
            v12 = *(_QWORD *)(v9 + 8);
            v13 = *(int **)(v9 + 16);
            v14 = 4 * v11;
            while (1)
            {
              sub_22E8D2670(v12, a3, *v13);
              if (v15)
                break;
              ++v13;
              v14 -= 4;
              if (!v14)
                goto LABEL_11;
            }
            *(_BYTE *)(v9 + 48) = 1;
            *(_QWORD *)(a1 + 1680) = a3;
            v17 = 0;
            v18 = 0;
            sub_22E828580((uint64_t)&v18, v12);
            sub_22EA63DD8((_QWORD *)a1, a2, a3, (uint64_t)&v17, 1);
            *(_QWORD *)(a1 + 1680) = 0;
            sub_22E80F94C(&v18);
          }
LABEL_11:
          v9 += 56;
        }
        while (v9 != v10);
      }
      v7 += 144;
    }
    while (v7 != v16);
  }
}

uint64_t sub_22E9105AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  __int16 v7;

  v1 = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(v1 + 312) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1680) + 16))(*(_QWORD *)(a1 + 1680));
  *(_DWORD *)(v1 + 316) = 5987;
  if (*(char *)(v1 + 311) < 0)
  {
    **(_BYTE **)(v1 + 288) = 0;
    *(_QWORD *)(v1 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 288) = 0;
    *(_BYTE *)(v1 + 311) = 0;
  }
  v6[0] = v1 + 320;
  v6[1] = 0;
  v6[2] = v1;
  v7 = 1;
  *(_BYTE *)(v1 + 320) = 0;
  *(_DWORD *)(v1 + 664) = 0;
  v2 = *(unsigned int *)(v1 + 776);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(v1 + 768);
    v4 = 56 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 9) < 0)
        operator delete(*(void **)(v3 + v4 - 32));
      v4 -= 56;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 776) = 0;
  return sub_22E3BB0B8((uint64_t)v6);
}

void sub_22E91066C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  char v15;

  if (!sub_22E62AE6C(a2) && !sub_22E46A45C(a2))
  {
    if (!sub_22E4728AC(a2))
    {
      v6 = *(_QWORD *)(a1 + 88);
      v10 = 0uLL;
      v11 = a3;
      v12 = a3;
      v13 = 0;
      v15 = 120;
      v14 = 0;
      v7 = sub_22F39A858(v6, &v10);
      sub_22EFCA95C(a2, v7);
    }
    if (!sub_22F24F5B4(a2))
    {
      v8 = *(_QWORD *)(a1 + 88);
      v10 = 0uLL;
      v11 = a3;
      v12 = a3;
      v13 = 0;
      v15 = 120;
      v14 = 0;
      v9 = sub_22F394340(v8, &v10);
      sub_22EFCA95C(a2, v9);
    }
  }
}

void sub_22E910734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 1368);
  if (v2)
  {
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
    {
      if ((sub_22EFB9750(a2, 1, 0) & 0xFF00000000) != 0)
        return;
      v2 = *(_QWORD *)(a1 + 1368);
    }
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_DWORD *)(v5 - 8);
    if (v6 != -1)
    {
      v7 = *(_DWORD *)(v5 - 4);
      v8 = *(_QWORD *)(a1 + 88);
      v10 = 0uLL;
      v11 = v7;
      v12 = v7;
      v13 = 0;
      v15 = 120;
      v14 = 0;
      v9 = sub_22F3A5E00(v8, v6, &v10);
      sub_22EFCA95C(a2, v9);
    }
  }
}

void sub_22E9107E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 1368);
  if (v5)
  {
    v8 = *(char **)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 16);
    v7 = (_QWORD *)(v5 + 8);
    v9 = a2 | (unint64_t)(a3 << 32);
    if ((unint64_t)v8 < v6)
    {
      *(_QWORD *)v8 = v9;
      v10 = v8 + 8;
      *v7 = v10;
      v11 = v10;
      goto LABEL_21;
    }
    v13 = *(char **)v5;
  }
  else
  {
    v5 = operator new();
    v13 = 0;
    v8 = 0;
    v6 = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v7 = (_QWORD *)(v5 + 8);
    *(_QWORD *)(a1 + 1368) = v5;
    v9 = a2 | (unint64_t)(a3 << 32);
  }
  v14 = (v8 - v13) >> 3;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    abort();
  v16 = v6 - (_QWORD)v13;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      sub_22E3B3F8C();
    v18 = (char *)operator new(8 * v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v18[8 * v14];
  *(_QWORD *)v19 = v9;
  v11 = v19 + 8;
  if (v8 != v13)
  {
    do
    {
      v20 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v19 - 1) = v20;
      v19 -= 8;
    }
    while (v8 != v13);
    v13 = *(char **)v5;
  }
  *(_QWORD *)v5 = v19;
  *v7 = v11;
  *(_QWORD *)(v5 + 16) = &v18[8 * v17];
  if (v13)
    operator delete(v13);
LABEL_21:
  *v7 = v11;
}

unsigned int *sub_22E910938(unsigned int *result, int a2, int a3)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  _BYTE v12[96];
  unsigned int v13[24];
  unsigned int v14[24];
  unsigned int v15[24];
  _BYTE v16[96];

  v4 = result;
  v5 = (_QWORD *)*((_QWORD *)result + 171);
  if (!v5)
  {
    sub_22E8FCA40(result, a3, 0x11C3u, 0, (uint64_t)v16);
    v9 = (unsigned int *)v16;
    return sub_22E903BEC(v9);
  }
  v6 = v5[1];
  v7 = *(_DWORD *)(v6 - 8);
  if (v7 == -1 || a2 == 0)
  {
    if (v7 != -1 || (a2 & 1) != 0)
      goto LABEL_13;
    sub_22E8FCA40(result, a3, 0x11C3u, 0, (uint64_t)v13);
    sub_22E903BEC(v13);
    sub_22E8FCA40(v4, *(_DWORD *)(v6 - 4), 0x17CBu, 0, (uint64_t)v12);
    v9 = (unsigned int *)v12;
    return sub_22E903BEC(v9);
  }
  sub_22E8FCA40(result, *(_DWORD *)(v6 - 4), 0x11C4u, 0, (uint64_t)v15);
  sub_22E903BEC(v15);
  sub_22E8FCA40(v4, a3, 0x17CAu, 0, (uint64_t)v14);
  result = sub_22E903BEC(v14);
  v10 = v5[1];
  do
  {
    v6 = v10 - 8;
    v11 = *(_DWORD *)(v10 - 16);
    v10 -= 8;
  }
  while (v11 != -1);
LABEL_13:
  v5[1] = v6 - 8;
  if (*v5 == v6 - 8)
    return (unsigned int *)sub_22F30B024((uint64_t)v4);
  return result;
}

_DWORD *sub_22E910A74(uint64_t a1, int a2, int a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *result;
  int v17;
  unsigned int v18[25];
  int v19;

  if (a3)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 244) & 0x600;
    if (v6 == 1536)
      v7 = -1;
    else
      v7 = 1;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 524);
    if (v8)
      v7 = 0;
    v19 = v7;
    if (v8 || v6 != 1536)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0x125Au, 0, (uint64_t)v18);
      v9 = sub_22E8900C4((uint64_t)v18, &v19);
      v17 = 4;
      sub_22E8900C4(v9, &v17);
      sub_22E903BEC(v18);
    }
  }
  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v10 = 0;
  else
    v10 = *(_QWORD *)(a1 + 1296);
  v11 = HIDWORD(v10);
  v12 = v10 & 0xFFFFFEFF;
  if (a3)
    v13 = 256;
  else
    v13 = 0;
  v14 = v12 | v13;
  v15 = v11 | 0x100;
  *(_QWORD *)(a1 + 1296) = v14 | (v15 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  result = sub_22E51A8D0(v18, *(_QWORD *)(a1 + 72));
  *(_DWORD *)(a1 + 56) = v18[0] & ~(_DWORD)v15 | v14 & v15;
  return result;
}

_DWORD *sub_22E910B90(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *result;
  int v10;

  if (a3 == 7)
  {
    v4 = *(_DWORD *)(a1 + 56);
    if ((v4 & 0x60) != 0)
      v5 = 7;
    else
      v5 = 1;
    if ((v4 & 0x80) != 0)
      a3 = 7;
    else
      a3 = v5;
  }
  if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 1296);
  v7 = v6 & 0xFFFFFFE3 | (4 * a3);
  v8 = HIDWORD(v6) | 0x1Cu;
  *(_QWORD *)(a1 + 1296) = v7 | (v8 << 32);
  *(_DWORD *)(a1 + 1304) = a2;
  result = sub_22E51A8D0(&v10, *(_QWORD *)(a1 + 72));
  *(_DWORD *)(a1 + 56) = v10 & ~(_DWORD)v8 | v7 & v8;
  return result;
}

uint64_t sub_22E910C44(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;

  if (*(_WORD *)(*(_QWORD *)(a3 + 72) + 8) == 480)
    return 0;
  if (sub_22E8D290C(a3, a1)
    && (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), a1, a3, a2)&& (*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a3 + 72) + 32))(*(_QWORD *)(a3 + 72), a1, a3, a2)&& (sub_22EA47F54(a1, a3) & 1) == 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8);
    if ((v8 & 0x10000000) != 0 || (a4 & 1) != 0)
      return 0;
    v9 = WORD1(v8) & 0xF;
    if ((v8 & 0xF00000) != 0)
    {
      if (!v9 || sub_22E8D2B00(a3, a1, v9))
      {
        if (sub_22F306838(a3))
          return 0;
        v11 = (HIWORD(*(_DWORD *)(*(_QWORD *)(a3 + 72) + 8)) & 0xF)
            + ((*(_DWORD *)(*(_QWORD *)(a3 + 72) + 8) >> 20) & 0xF);
        if (!v11 || sub_22E8D2B88(a3, a1, v11))
          return 0;
      }
    }
    else if (sub_22E8D2A78(a3, a1, v9))
    {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_22E910D68(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_22E910D9C(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + 32 * v6;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(_DWORD *)(v7 + 20) = a5;
  *(_DWORD *)(v7 + 24) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_22E910D9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  BOOL v14;
  char *v15;
  _QWORD v16[2];
  int v17;
  int v18;
  int v19;

  v16[0] = a2;
  v16[1] = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(_QWORD *)a1;
  v9 = (char *)v16;
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v14 = v8 + 32 * v7 > (unint64_t)v16;
    if (v8 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)a1;
      v9 = &v15[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)a1;
      v9 = (char *)v16;
    }
  }
  v10 = (_OWORD *)(v8 + 32 * *(unsigned int *)(a1 + 8));
  v11 = *((_OWORD *)v9 + 1);
  *v10 = *(_OWORD *)v9;
  v10[1] = v11;
  v12 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return *(_QWORD *)a1 + 32 * v12 - 32;
}

uint64_t sub_22E910E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_22E910E98(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + 32 * v6;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  *(_DWORD *)(v7 + 24) = a5;
  *(_DWORD *)(v7 + 28) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_22E910E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  BOOL v14;
  char *v15;
  _QWORD v16[3];
  int v17;
  int v18;

  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  v17 = a5;
  v18 = a6;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(_QWORD *)a1;
  v9 = (char *)v16;
  if (v7 >= *(_DWORD *)(a1 + 12))
  {
    v14 = v8 + 32 * v7 > (unint64_t)v16;
    if (v8 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)a1;
      v9 = &v15[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)a1;
      v9 = (char *)v16;
    }
  }
  v10 = (_OWORD *)(v8 + 32 * *(unsigned int *)(a1 + 8));
  v11 = *((_OWORD *)v9 + 1);
  *v10 = *(_OWORD *)v9;
  v10[1] = v11;
  v12 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return *(_QWORD *)a1 + 32 * v12 - 32;
}

uint64_t sub_22E910F60(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v17;
    v10 = 1;
    v11 = a1 + 8;
    do
    {
      v12 = v8;
      if ((*(_DWORD *)v11 - 0x7FFFFFFF) >= 2)
      {
        *(_DWORD *)v9 = *(_DWORD *)v11;
        v13 = *(_QWORD *)(v11 + 4);
        *((_DWORD *)v9 + 3) = *(_DWORD *)(v11 + 12);
        *(_QWORD *)(v9 + 4) = v13;
        v9 += 16;
      }
      v11 = a1 + 8 + 16 * v10;
      v8 = 1;
      v10 = 2;
    }
    while ((v12 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v14 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 4);
      *(_QWORD *)(a1 + 16) = v14;
    }
    return sub_22F30B7EC(a1, (uint64_t)v17, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 4);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F30B7EC(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E9110F8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(llvm **)result;
      v7 = 12 * v2;
      do
      {
        *(_DWORD *)v6 = 0x7FFFFFFF;
        v6 = (llvm *)((char *)v6 + 12);
        v7 -= 12;
      }
      while (v7);
    }
  }
  else
  {
    result = llvm::deallocate_buffer(*(llvm **)result, (void *)(12 * v2));
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(v1 + 16) = v9;
      result = MEMORY[0x23489D23C](12 * v9, 4);
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 8) = 0;
      v10 = *(unsigned int *)(v1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 12 * v10;
        do
        {
          *(_DWORD *)result = 0x7FFFFFFF;
          result += 12;
          v11 -= 12;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
    }
  }
  return result;
}

unint64_t sub_22E911208(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      sub_22F30B8C4(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      sub_22F30B8C4(a1);
    }
  }
  return v2;
}

uint64_t sub_22E911270(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *i;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v12 = *(char **)a1;
        if (v5)
        {
          v13 = &v4[56 * v5];
          v14 = (uint64_t)(v4 + 16);
          do
          {
            *(_OWORD *)v12 = *(_OWORD *)(v14 - 16);
            sub_22F28CB40((uint64_t)(v12 + 16), v14);
            v12[48] = *(_BYTE *)(v14 + 32);
            v12 += 56;
            v15 = v14 + 40;
            v14 += 56;
          }
          while ((char *)v15 != v13);
          v16 = v12;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v12 = *(char **)a1;
        }
        else
        {
          v16 = *(char **)a1;
        }
        for (i = &v12[56 * v6]; i != v16; i -= 56)
        {
          v18 = (char *)*((_QWORD *)i - 5);
          if (i - 24 != v18)
            free(v18);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v19 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v19)
        {
          v20 = *(char **)a2;
          v21 = 56 * v19;
          do
          {
            v22 = *(char **)&v20[v21 - 40];
            if (&v20[v21 - 24] != v22)
              free(v22);
            v21 -= 56;
          }
          while (v21);
        }
        goto LABEL_44;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v23 = *(char **)a1;
          v24 = 56 * v6;
          do
          {
            v25 = *(char **)&v23[v24 - 40];
            if (&v23[v24 - 24] != v25)
              free(v25);
            v24 -= 56;
          }
          while (v24);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_22F30B8C4(a1);
      }
      else if ((_DWORD)v6)
      {
        v7 = &v4[56 * v6];
        v8 = *(_QWORD *)a1 + 16;
        v9 = (uint64_t)(v4 + 16);
        do
        {
          *(_OWORD *)(v8 - 16) = *(_OWORD *)(v9 - 16);
          v10 = sub_22F28CB40(v8, v9);
          *(_BYTE *)(v10 + 32) = *(_BYTE *)(v9 + 32);
          v8 = v10 + 56;
          v11 = v9 + 40;
          v9 += 56;
        }
        while ((char *)v11 != v7);
        goto LABEL_33;
      }
      v6 = 0;
LABEL_33:
      v26 = *(char **)a2;
      v27 = *(unsigned int *)(a2 + 8);
      if (v6 != v27)
      {
        v28 = &v26[56 * v27];
        v29 = 56 * v6 + 16;
        v30 = *(_QWORD *)a1 + v29;
        v31 = (uint64_t)&v26[v29];
        do
        {
          *(_OWORD *)(v30 - 16) = *(_OWORD *)(v31 - 16);
          *(_QWORD *)v30 = v30 + 16;
          *(_QWORD *)(v30 + 8) = 0x400000000;
          if (*(_DWORD *)(v31 + 8))
            v30 = sub_22F28CB40(v30, v31);
          v32 = v31 - 16;
          *(_BYTE *)(v30 + 32) = *(_BYTE *)(v31 + 32);
          v30 += 56;
          v31 += 56;
        }
        while ((char *)(v32 + 56) != v28);
        v26 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v33 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v33)
      {
        v34 = 56 * v33;
        do
        {
          v35 = *(char **)&v26[v34 - 40];
          if (&v26[v34 - 24] != v35)
            free(v35);
          v34 -= 56;
        }
        while (v34);
      }
LABEL_44:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_22F2BFA98((char **)a1, (char **)a2);
  }
  return a1;
}

void sub_22E9114FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t **v12;
  unint64_t v13;
  _DWORD *v15;
  unsigned __int8 *v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void **v72;
  void **v73;
  char *v74;
  uint64_t v75;
  void **v76;
  void **v77;
  uint64_t **v78;
  uint64_t v79;
  unint64_t v80;
  _DWORD *v82;
  unsigned __int8 *v83;
  size_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  std::string::size_type size;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BOOL4 v101;
  int v102;
  char *v103;
  uint64_t **v104;
  unint64_t v105;
  _DWORD *v107;
  unsigned __int8 *v108;
  size_t v109;
  unsigned int v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void **v116;
  void **v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _BOOL4 v125;
  int v126;
  uint64_t *v127;
  char *v128;
  uint64_t v129;
  void **v130;
  void **v131;
  char *v132;
  uint64_t v133;
  void **v134;
  void **v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  std::string::size_type v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  unint64_t v144;
  _DWORD *v146;
  unsigned __int8 *v147;
  size_t v148;
  unsigned int v149;
  unsigned int v150;
  char *v151;
  uint64_t v152;
  void **v153;
  void **v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _BOOL4 v164;
  int v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  void **v169;
  void **v170;
  char *v171;
  uint64_t v172;
  void **v173;
  void **v174;
  int v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t v179;
  _DWORD *v181;
  unsigned __int8 *v182;
  size_t v183;
  unsigned int v184;
  unsigned int v185;
  BOOL v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  std::string::size_type v192;
  uint64_t v193;
  uint64_t v194;
  char *v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const std::string *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  _BOOL4 v206;
  int v207;
  uint64_t *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  BOOL v216;
  int v217;
  unint64_t v218;
  uint64_t *v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unsigned int *v225;
  size_t v226;
  const void *v227;
  unsigned int v228;
  __int128 *p_dst;
  int v230;
  uint64_t **v231;
  uint64_t **v232;
  uint64_t *v233;
  unint64_t v234;
  unsigned int v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unsigned int *v249;
  _DWORD *v250;
  uint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  unsigned int v254;
  BOOL v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  void **v260;
  void **v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  char v269;
  int v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t **v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t **v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  void **v305;
  void **v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  void **v310;
  void **v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  std::string::size_type v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t **v319;
  _QWORD *v320;
  unint64_t v321;
  _DWORD *v323;
  unsigned __int8 *v324;
  size_t v325;
  unsigned int v326;
  unsigned int v327;
  BOOL v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  void **v332;
  void **v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char v340;
  int v341;
  _BOOL4 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t **v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  void **v364;
  void **v365;
  char *v366;
  uint64_t v367;
  void **v368;
  void **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  std::string::size_type v373;
  uint64_t v374;
  uint64_t v375;
  _BYTE *v377;
  uint64_t *v378;
  unint64_t v379;
  unint64_t v380;
  _DWORD *v382;
  unsigned __int8 *v383;
  size_t v384;
  unsigned int v385;
  unsigned int v386;
  std::string::size_type v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v391;
  uint64_t v392;
  int v393;
  _BOOL4 v394;
  __int128 v395;
  unsigned int v396;
  char v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t **v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD *v443;
  unint64_t v444;
  const void *v445;
  size_t v446;
  int *v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  int i;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  const char *v457;
  unint64_t v458;
  size_t v459;
  const char *v460;
  void *v461;
  unint64_t v462;
  const void *v463;
  size_t v464;
  unint64_t v465;
  const void *v466;
  size_t v467;
  unint64_t v468;
  char v469;
  _QWORD *v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _OWORD *v475;
  uint64_t **v476;
  uint64_t **v477;
  unsigned __int8 *v478;
  size_t v479;
  unsigned int v480;
  BOOL v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  void **v485;
  void **v486;
  uint64_t v487;
  uint64_t v488;
  char *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  _BOOL4 v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  char v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  char v505;
  int v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _DWORD *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  char v524;
  uint64_t v525;
  uint64_t **v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t **v529;
  uint64_t v530;
  uint64_t v531;
  char *v532;
  uint64_t v533;
  void **v534;
  void **v535;
  char *v536;
  uint64_t v537;
  void **v538;
  void **v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  std::string::size_type v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _DWORD *__src;
  void *v556;
  void *v557;
  _DWORD *v558;
  void *v559;
  void *v560;
  uint64_t v561;
  uint64_t **v562;
  uint64_t **v563;
  uint64_t **v564;
  char v565;
  uint64_t v566;
  uint64_t **v567;
  uint64_t v568;
  uint64_t **v569;
  uint64_t v570;
  uint64_t **v571;
  uint64_t v572;
  uint64_t **v573;
  uint64_t v574;
  uint64_t v575;
  unsigned int v576;
  _BOOL4 v577;
  uint64_t v578;
  char v579;
  uint64_t v580;
  int v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t *v586;
  unint64_t v587;
  void *v588;
  _QWORD *v589;
  int64_t v590;
  std::string v591;
  char v592;
  std::string v593;
  void *v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  uint64_t v598;
  _BYTE v599[12];
  __int128 __dst;
  uint64_t v601;
  int v602;
  __int16 v603;
  unsigned __int8 v604;
  __int128 v605;
  uint64_t v606;
  char *v607;
  uint64_t v608;
  _BYTE v609[112];
  unsigned int v610;
  void *v611;
  uint64_t v612;
  _BYTE v613[144];
  unsigned int v614;
  __int128 v615;
  unint64_t v616;
  uint64_t v617;
  __int128 v618;
  _QWORD v619[3];
  void *v620;
  uint64_t v621;
  _BYTE v622[72];
  unsigned int v623;
  void *v624;
  uint64_t v625;
  _BYTE v626[144];
  unsigned int v627;
  void *v628;
  uint64_t v629;
  _BYTE v630[152];
  unsigned int v631;
  void *v632;
  unsigned int v633;
  _BYTE v634[72];
  unsigned int v635;
  unsigned int v636;
  unsigned int v637;
  unsigned int v638;
  unsigned int v639;
  unsigned int v640;
  void *v641;
  uint64_t v642;
  _BYTE v643[144];
  unsigned int v644;
  void *v645;
  uint64_t v646;
  _BYTE v647[144];
  unsigned int v648;
  void *v649;
  uint64_t v650;
  _BYTE v651[17];
  unsigned int v652;
  char *v653;
  uint64_t v654;
  uint64_t v655;
  unsigned int v656;
  __int128 v657;
  _QWORD v658[9];
  unsigned int v659;
  unsigned int v660;
  unsigned int v661;
  unsigned int v662;
  unsigned int v663;
  unsigned int v664;
  uint64_t v665;

  v665 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  v3 = a2;
  v4 = (uint64_t)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v7 = *v6;
  v8 = *(_WORD *)(v7 + 8) & 0x7F;
  if (v8 == 16 || v8 == 83)
    goto LABEL_9;
  v9 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v9 = *v6;
  if (sub_22EFCBD94(v9, 1))
  {
LABEL_9:
    v10 = *(_DWORD *)(v3 + 28);
    v11 = v10 & 0x7F;
    if ((v11 - 67) >= 0xFFFFFFF9)
    {
      sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v615);
      v12 = (uint64_t **)v615;
      if (DWORD2(v615))
      {
        v79 = v615 + 8 * DWORD2(v615);
        v570 = v79;
        do
        {
          v80 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v3 + 40) & 7) != 0 || v80 == 0)
          {
            v84 = 0;
            v83 = "";
          }
          else
          {
            v82 = *(_DWORD **)(v80 + 16);
            v85 = *v82;
            v83 = (unsigned __int8 *)(v82 + 4);
            v84 = v85;
          }
          sub_22EF4475C(*v12, v83, v84, (uint64_t)&v632);
          v653 = (char *)&v655;
          v654 = 0x100000000;
          if (v633)
          {
            sub_22E915EB0((uint64_t)&v653, (uint64_t)&v632);
            v86 = v636;
            v656 = v636;
            *(_QWORD *)&v657 = v658;
            *((_QWORD *)&v657 + 1) = 0x100000000;
            if ((_DWORD)v654)
            {
              sub_22E915EB0((uint64_t)&v657, (uint64_t)&v653);
              v86 = v656;
            }
          }
          else
          {
            v86 = v636;
            v656 = v636;
            *(_QWORD *)&v657 = v658;
            *((_QWORD *)&v657 + 1) = 0x100000000;
          }
          v660 = v86;
          if (!sub_22F30C1B8(v3) && DWORD2(v657) != v660)
          {
            memset(&v591, 0, sizeof(v591));
            v592 &= 0xF0u;
            memset(&v593, 0, sizeof(v593));
            LOBYTE(v594) = v594 & 0xF8;
            *(_QWORD *)&v596 = 0;
            v595 = 0uLL;
            v87 = (uint64_t *)(v657 + 104 * v660);
            v88 = *v87;
            v89 = v87[1];
            std::string::operator=(&v591, (const std::string *)(v87 + 2));
            v592 = *((_BYTE *)v87 + 40);
            std::string::operator=(&v593, (const std::string *)v87 + 2);
            LOBYTE(v594) = *((_BYTE *)v87 + 72);
            std::string::operator=((std::string *)&v595, (const std::string *)(v87 + 10));
            if (v88 & 0x7FFFFFFFFFFFFFFFLL | v89 & 0x7FFFFFFF7FFFFFFFLL)
            {
              size = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
              if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v593.__r_.__value_.__l.__size_;
              if (size)
              {
                if (DWORD2(v657))
                {
                  v91 = 104 * DWORD2(v657);
                  v92 = v657 + 56;
                  do
                  {
                    if (!(*(_QWORD *)(v92 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v92 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                    {
                      if (*(char *)(v92 + 15) < 0)
                      {
                        if (*(_QWORD *)v92)
                          goto LABEL_179;
                      }
                      else if (*(_BYTE *)(v92 + 15))
                      {
                        goto LABEL_179;
                      }
                    }
                    v92 += 104;
                    v91 -= 104;
                  }
                  while (v91);
                }
                *(_QWORD *)&v618 = v88;
                *((_QWORD *)&v618 + 1) = v89;
                LOBYTE(v619[0]) = 2;
                sub_22E918310(v4, v3, 0, (uint64_t)&v618, (uint64_t (*)(uint64_t))sub_22E918534, (uint64_t)&__dst);
              }
            }
LABEL_179:
            if (SBYTE7(v596) < 0)
              operator delete((void *)v595);
            if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v593.__r_.__value_.__l.__data_);
            if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v591.__r_.__value_.__l.__data_);
          }
          sub_22E916354((char **)&v657);
          memset(&v591, 0, sizeof(v591));
          v592 &= 0xF0u;
          memset(&v593, 0, sizeof(v593));
          LOBYTE(v594) = v594 & 0xF8;
          *(_QWORD *)&v596 = 0;
          v595 = 0uLL;
          v93 = v656;
          if ((_DWORD)v654)
          {
            v573 = v12;
            v94 = 0;
            v95 = 104 * v654;
            v96 = 104 * v656;
            do
            {
              v97 = &v653[v94];
              v98 = *(_QWORD *)&v653[v94];
              v99 = *(_QWORD *)&v653[v94 + 8];
              std::string::operator=(&v591, (const std::string *)&v653[v94 + 16]);
              v592 = v97[40];
              std::string::operator=(&v593, (const std::string *)v97 + 2);
              LOBYTE(v594) = v97[72];
              std::string::operator=((std::string *)&v595, (const std::string *)(v97 + 80));
              if (v96 == v94 || v98 & 0x7FFFFFFFFFFFFFFFLL | v99 & 0x7FFFFFFF7FFFFFFFLL)
              {
                v100 = 0;
              }
              else
              {
                v103 = &v653[104 * v93];
                v98 = *(_QWORD *)v103;
                v99 = *((_QWORD *)v103 + 1);
                v100 = 2;
              }
              v101 = v96 == v94;
              v102 = v4 & 0xFFFFFFFC | v100;
              LODWORD(v4) = v102 | v101;
              *(_QWORD *)&v618 = v98;
              *((_QWORD *)&v618 + 1) = v99;
              LOBYTE(v619[0]) = v102 | v101;
              v3 = a2;
              sub_22E918538(a1, a2, (uint64_t)&v591, (uint64_t)&v618);
              v94 += 104;
            }
            while (v95 != v94);
            v79 = v570;
            v12 = v573;
            if (SBYTE7(v596) < 0)
              operator delete((void *)v595);
          }
          if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v593.__r_.__value_.__l.__data_);
          v4 = (uint64_t)a1;
          if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v591.__r_.__value_.__l.__data_);
          sub_22E916354(&v653);
          sub_22E916354((char **)&v632);
          ++v12;
        }
        while (v12 != (uint64_t **)v79);
        goto LABEL_200;
      }
    }
    else
    {
      if ((v10 & 0x7Eu) - 58 < 0xFFFFFFFA)
      {
        if (v11 == 23)
        {
          sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v615);
          v12 = (uint64_t **)v615;
          if (!DWORD2(v615))
            goto LABEL_201;
          v143 = v615 + 8 * DWORD2(v615);
          do
          {
            v144 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(v3 + 40) & 7) != 0 || v144 == 0)
            {
              v148 = 0;
              v147 = "";
            }
            else
            {
              v146 = *(_DWORD **)(v144 + 16);
              v149 = *v146;
              v147 = (unsigned __int8 *)(v146 + 4);
              v148 = v149;
            }
            sub_22F361D3C(*v12, v147, v148, (uint64_t)&v632);
            v641 = v643;
            v642 = 0x100000000;
            if (v633)
            {
              sub_22E916DE4((uint64_t)&v641, (uint64_t *)&v632);
              v150 = v639;
              v644 = v639;
              *(_QWORD *)&v657 = v658;
              *((_QWORD *)&v657 + 1) = 0x100000000;
              if ((_DWORD)v642)
              {
                sub_22E916DE4((uint64_t)&v657, (uint64_t *)&v641);
                v150 = v644;
              }
            }
            else
            {
              v150 = v639;
              v644 = v639;
              *(_QWORD *)&v657 = v658;
              *((_QWORD *)&v657 + 1) = 0x100000000;
            }
            v663 = v150;
            sub_22E91A900(v4, v3, (uint64_t)&v657);
            v151 = (char *)v657;
            if (DWORD2(v657))
            {
              v152 = 144 * DWORD2(v657);
              do
              {
                v153 = (void **)&v151[v152];
                if (v151[v152 - 16])
                {
                  if (*((char *)v153 - 17) < 0)
                    operator delete(*(v153 - 5));
                  *((_BYTE *)v153 - 16) = 0;
                }
                if (*((_BYTE *)v153 - 48))
                {
                  if (v151[v152 - 49] < 0)
                    operator delete(*(v153 - 9));
                  *((_BYTE *)v153 - 48) = 0;
                }
                v154 = (void **)&v151[v152];
                if (v151[v152 - 73] < 0)
                  operator delete(*(v154 - 12));
                if (*((char *)v154 - 105) < 0)
                  operator delete(*(v153 - 16));
                v152 -= 144;
              }
              while (v152);
              v151 = (char *)v657;
            }
            if (v151 != (char *)v658)
              free(v151);
            memset(&v591, 0, sizeof(v591));
            v592 &= 0xF0u;
            LOBYTE(v596) = 0;
            BYTE8(v596) = 0;
            LOBYTE(v598) = 0;
            v599[0] = 0;
            memset(&v593, 0, sizeof(v593));
            LOBYTE(v594) = 0;
            v155 = v644;
            if ((_DWORD)v642)
            {
              v156 = v143;
              v157 = 0;
              v158 = 144 * v642;
              v159 = 144 * v644;
              do
              {
                v160 = (char *)v641 + v157;
                v161 = *(_QWORD *)((char *)v641 + v157);
                v162 = *(_QWORD *)((char *)v641 + v157 + 8);
                sub_22F30BD28((uint64_t)&v591, (uint64_t)v641 + v157 + 16);
                v599[0] = v160[136];
                if (v159 == v157 || v161 & 0x7FFFFFFFFFFFFFFFLL | v162 & 0x7FFFFFFF7FFFFFFFLL)
                {
                  v163 = 0;
                }
                else
                {
                  v166 = (uint64_t *)((char *)v641 + 144 * v155);
                  v161 = *v166;
                  v162 = v166[1];
                  v163 = 2;
                }
                v164 = v159 == v157;
                v165 = v4 & 0xFFFFFFFC | v163;
                LODWORD(v4) = v165 | v164;
                *(_QWORD *)&v618 = v161;
                *((_QWORD *)&v618 + 1) = v162;
                LOBYTE(v619[0]) = v165 | v164;
                sub_22E91AAAC((uint64_t)a1, a2, (uint64_t)&v591, (uint64_t)&v618);
                v157 += 144;
              }
              while (v158 != v157);
              v3 = a2;
              v4 = (uint64_t)a1;
              v143 = v156;
              if ((_BYTE)v598)
              {
                if (SHIBYTE(v597) < 0)
                  operator delete(*((void **)&v596 + 1));
                LOBYTE(v598) = 0;
              }
            }
            if ((_BYTE)v596)
            {
              if (SHIBYTE(v595) < 0)
                operator delete(v594);
              LOBYTE(v596) = 0;
            }
            if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v593.__r_.__value_.__l.__data_);
            if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v591.__r_.__value_.__l.__data_);
            v167 = (char *)v641;
            if ((_DWORD)v642)
            {
              v168 = 144 * v642;
              do
              {
                v169 = (void **)&v167[v168];
                if (v167[v168 - 16])
                {
                  if (*((char *)v169 - 17) < 0)
                    operator delete(*(v169 - 5));
                  *((_BYTE *)v169 - 16) = 0;
                }
                if (*((_BYTE *)v169 - 48))
                {
                  if (v167[v168 - 49] < 0)
                    operator delete(*(v169 - 9));
                  *((_BYTE *)v169 - 48) = 0;
                }
                v170 = (void **)&v167[v168];
                if (v167[v168 - 73] < 0)
                  operator delete(*(v170 - 12));
                if (*((char *)v170 - 105) < 0)
                  operator delete(*(v169 - 16));
                v168 -= 144;
              }
              while (v168);
              v167 = (char *)v641;
            }
            if (v167 != v643)
              free(v167);
            v171 = (char *)v632;
            if (v633)
            {
              v172 = 144 * v633;
              do
              {
                v173 = (void **)&v171[v172];
                if (v171[v172 - 16])
                {
                  if (*((char *)v173 - 17) < 0)
                    operator delete(*(v173 - 5));
                  *((_BYTE *)v173 - 16) = 0;
                }
                if (*((_BYTE *)v173 - 48))
                {
                  if (v171[v172 - 49] < 0)
                    operator delete(*(v173 - 9));
                  *((_BYTE *)v173 - 48) = 0;
                }
                v174 = (void **)&v171[v172];
                if (v171[v172 - 73] < 0)
                  operator delete(*(v174 - 12));
                if (*((char *)v174 - 105) < 0)
                  operator delete(*(v173 - 16));
                v172 -= 144;
              }
              while (v172);
              v171 = (char *)v632;
            }
            if (v171 != v634)
              free(v171);
            ++v12;
          }
          while (v12 != (uint64_t **)v143);
          goto LABEL_200;
        }
        if (v11 == 22)
        {
          sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v618);
          v12 = (uint64_t **)v618;
          if (!DWORD2(v618))
            goto LABEL_151;
          v567 = (uint64_t **)(v618 + 8 * DWORD2(v618));
          while (1)
          {
            v13 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8;
            if ((*(_QWORD *)(v3 + 40) & 7) != 0 || v13 == 0)
            {
              v17 = 0;
              v16 = "";
            }
            else
            {
              v15 = *(_DWORD **)(v13 + 16);
              v18 = *v15;
              v16 = (unsigned __int8 *)(v15 + 4);
              v17 = v18;
            }
            sub_22F361B8C(*v12, v16, v17, (uint64_t)&v632);
            v645 = v647;
            v646 = 0x100000000;
            if (v633)
            {
              sub_22E916DE4((uint64_t)&v645, (uint64_t *)&v632);
              v19 = v639;
              v648 = v639;
              *(_QWORD *)&v657 = v658;
              *((_QWORD *)&v657 + 1) = 0x100000000;
              if ((_DWORD)v646)
              {
                sub_22E916DE4((uint64_t)&v657, (uint64_t *)&v645);
                v19 = v648;
              }
            }
            else
            {
              v19 = v639;
              v648 = v639;
              *(_QWORD *)&v657 = v658;
              *((_QWORD *)&v657 + 1) = 0x100000000;
            }
            v663 = v19;
            sub_22E91A900(v4, v3, (uint64_t)&v657);
            v20 = (char *)v657;
            if (DWORD2(v657))
            {
              v21 = 144 * DWORD2(v657);
              do
              {
                v22 = (void **)&v20[v21];
                if (v20[v21 - 16])
                {
                  if (*((char *)v22 - 17) < 0)
                    operator delete(*(v22 - 5));
                  *((_BYTE *)v22 - 16) = 0;
                }
                if (*((_BYTE *)v22 - 48))
                {
                  if (v20[v21 - 49] < 0)
                    operator delete(*(v22 - 9));
                  *((_BYTE *)v22 - 48) = 0;
                }
                v23 = (void **)&v20[v21];
                if (v20[v21 - 73] < 0)
                  operator delete(*(v23 - 12));
                if (*((char *)v23 - 105) < 0)
                  operator delete(*(v22 - 16));
                v21 -= 144;
              }
              while (v21);
              v20 = (char *)v657;
            }
            if (v20 != (char *)v658)
              free(v20);
            memset(&v591, 0, sizeof(v591));
            v592 &= 0xF0u;
            LOBYTE(v596) = 0;
            BYTE8(v596) = 0;
            LOBYTE(v598) = 0;
            v599[0] = 0;
            memset(&v593, 0, sizeof(v593));
            LOBYTE(v594) = 0;
            v24 = v648;
            v572 = v646;
            if ((_DWORD)v646)
              break;
LABEL_105:
            if ((_BYTE)v596)
            {
              if (SHIBYTE(v595) < 0)
                operator delete(v594);
              LOBYTE(v596) = 0;
            }
            if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v593.__r_.__value_.__l.__data_);
            if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v591.__r_.__value_.__l.__data_);
            v70 = (char *)v645;
            if ((_DWORD)v646)
            {
              v71 = 144 * v646;
              do
              {
                v72 = (void **)&v70[v71];
                if (v70[v71 - 16])
                {
                  if (*((char *)v72 - 17) < 0)
                    operator delete(*(v72 - 5));
                  *((_BYTE *)v72 - 16) = 0;
                }
                if (*((_BYTE *)v72 - 48))
                {
                  if (v70[v71 - 49] < 0)
                    operator delete(*(v72 - 9));
                  *((_BYTE *)v72 - 48) = 0;
                }
                v73 = (void **)&v70[v71];
                if (v70[v71 - 73] < 0)
                  operator delete(*(v73 - 12));
                if (*((char *)v73 - 105) < 0)
                  operator delete(*(v72 - 16));
                v71 -= 144;
              }
              while (v71);
              v70 = (char *)v645;
            }
            if (v70 != v647)
              free(v70);
            v74 = (char *)v632;
            if (v633)
            {
              v75 = 144 * v633;
              do
              {
                v76 = (void **)&v74[v75];
                if (v74[v75 - 16])
                {
                  if (*((char *)v76 - 17) < 0)
                    operator delete(*(v76 - 5));
                  *((_BYTE *)v76 - 16) = 0;
                }
                if (*((_BYTE *)v76 - 48))
                {
                  if (v74[v75 - 49] < 0)
                    operator delete(*(v76 - 9));
                  *((_BYTE *)v76 - 48) = 0;
                }
                v77 = (void **)&v74[v75];
                if (v74[v75 - 73] < 0)
                  operator delete(*(v77 - 12));
                if (*((char *)v77 - 105) < 0)
                  operator delete(*(v76 - 16));
                v75 -= 144;
              }
              while (v75);
              v74 = (char *)v632;
            }
            if (v74 != v634)
              free(v74);
            if (++v12 == v567)
            {
              v12 = (uint64_t **)v618;
LABEL_151:
              v78 = (uint64_t **)v619;
LABEL_202:
              if (v12 != v78)
              {
                v104 = v12;
                goto LABEL_204;
              }
              return;
            }
          }
          v25 = 0;
          while (1)
          {
            v26 = (char *)v645 + 144 * v25;
            v27 = *(_QWORD *)v26;
            v28 = *((_QWORD *)v26 + 1);
            sub_22F30BD28((uint64_t)&v591, (uint64_t)(v26 + 16));
            v29 = v26[136];
            v599[0] = v29;
            if (v25 == v24 || v27 & 0x7FFFFFFFFFFFFFFFLL | v28 & 0x7FFFFFFF7FFFFFFFLL)
            {
              v30 = 0;
              v31 = 0;
            }
            else
            {
              v42 = (uint64_t *)((char *)v645 + 144 * v24);
              v27 = *v42;
              v28 = v42[1];
              v31 = 2;
              v30 = 1;
            }
            if ((v29 & 0x10) != 0)
            {
              if (v25 == v24)
              {
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v32 = *v64;
                  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                  {
                    sub_22EFC8E88(a2);
                    v66 = *(_QWORD *)v65 + 8 * *(unsigned int *)(v65 + 8);
                  }
                  else
                  {
                    v66 = 0;
                  }
                  if (v32 != (uint64_t *)v66)
                  {
                    while (*(_WORD *)(*v32 + 32) != 320)
                    {
                      if (++v32 == (uint64_t *)v66)
                      {
                        v32 = (uint64_t *)v66;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v32 = 0;
                }
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v33 = *(_QWORD *)v34 + 8 * *(unsigned int *)(v34 + 8);
                }
                else
                {
                  v33 = 0;
                }
                if (v32 != (uint64_t *)v33)
                {
                  v47 = a1[11];
                  v48 = *v32;
                  v615 = 0uLL;
                  LODWORD(v617) = 0;
                  v616 = 0;
                  WORD2(v617) = 0;
                  BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v556 = (void *)sub_22F3A2490(v47, v27, v28, v48, 1, &v615);
                  sub_22EFC8E88(a2);
                  v50 = *(unsigned int *)(v49 + 8);
                  v51 = *(_QWORD *)v49 + 8 * v50;
                  if ((uint64_t *)v51 != v32 + 1)
                  {
                    v551 = v49;
                    memmove(v32, v32 + 1, v51 - (_QWORD)(v32 + 1));
                    v49 = v551;
                    LODWORD(v50) = *(_DWORD *)(v551 + 8);
                  }
                  *(_DWORD *)(v49 + 8) = v50 - 1;
                  sub_22EFCA95C(a2, (uint64_t)v556);
                }
                if ((v29 & 0x20) != 0)
                {
                  v35 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
                  *(_QWORD *)(v35 + 8) = 0;
                  *(_QWORD *)(v35 + 16) = 0;
                  *(_QWORD *)v35 = 0;
                  *(_DWORD *)(v35 + 24) = 0;
                  *(_BYTE *)(v35 + 30) = 0;
                  *(_WORD *)(v35 + 28) = 480;
                  v36 = *(_BYTE *)(v35 + 34);
                  *(_WORD *)(v35 + 32) = 320;
                  *(_BYTE *)(v35 + 34) = v36 & 0xE0;
                  sub_22EFCA95C(a2, v35);
                }
              }
              else
              {
                v43 = a1[11];
                if ((v29 & 0x20) != 0)
                {
                  v58 = sub_22E3CD3D4(v43 + 2032, 40, 3);
                  *(_QWORD *)(v58 + 8) = 0;
                  *(_QWORD *)(v58 + 16) = 0;
                  *(_QWORD *)v58 = 0;
                  *(_DWORD *)(v58 + 24) = 0;
                  *(_BYTE *)(v58 + 30) = 0;
                  *(_WORD *)(v58 + 28) = 480;
                  v59 = *(_BYTE *)(v58 + 34);
                  *(_WORD *)(v58 + 32) = 320;
                  *(_BYTE *)(v58 + 34) = v59 & 0xE0;
                  v60 = a1[11];
                  v615 = 0uLL;
                  LODWORD(v617) = 0;
                  v616 = 0;
                  WORD2(v617) = 0;
                  BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v44 = sub_22F3A2490(v60, v27, v28, v58, v30, &v615);
                }
                else
                {
                  v615 = 0uLL;
                  LODWORD(v617) = 0;
                  v616 = 0;
                  WORD2(v617) = 0;
                  BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v44 = sub_22F3A25F4(v43, v27, v28, 320, v30, &v615);
                }
                sub_22EFCA95C(a2, v44);
              }
              v29 = v599[0];
            }
            if ((v29 & 0x40) == 0)
              goto LABEL_69;
            if (v25 != v24)
            {
              v45 = a1[11];
              if (v29 < 0)
              {
                v61 = sub_22E3CD3D4(v45 + 2032, 40, 3);
                *(_QWORD *)(v61 + 8) = 0;
                *(_QWORD *)(v61 + 16) = 0;
                *(_QWORD *)v61 = 0;
                *(_DWORD *)(v61 + 24) = 0;
                *(_BYTE *)(v61 + 30) = 0;
                *(_WORD *)(v61 + 28) = 480;
                v62 = *(_BYTE *)(v61 + 34);
                *(_WORD *)(v61 + 32) = 494;
                *(_BYTE *)(v61 + 34) = v62 & 0xE0;
                v63 = a1[11];
                v615 = 0uLL;
                LODWORD(v617) = 0;
                v616 = 0;
                WORD2(v617) = 0;
                BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                v46 = sub_22F3A2490(v63, v27, v28, v61, v30, &v615);
              }
              else
              {
                v615 = 0uLL;
                LODWORD(v617) = 0;
                v616 = 0;
                WORD2(v617) = 0;
                BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                v46 = sub_22F3A25F4(v45, v27, v28, 494, v30, &v615);
              }
              sub_22EFCA95C(a2, v46);
              goto LABEL_69;
            }
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v37 = *v67;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v69 = *(_QWORD *)v68 + 8 * *(unsigned int *)(v68 + 8);
              }
              else
              {
                v69 = 0;
              }
              if (v37 != (uint64_t *)v69)
              {
                while (*(_WORD *)(*v37 + 32) != 494)
                {
                  if (++v37 == (uint64_t *)v69)
                  {
                    v37 = (uint64_t *)v69;
                    break;
                  }
                }
              }
            }
            else
            {
              v37 = 0;
            }
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v38 = *(_QWORD *)v39 + 8 * *(unsigned int *)(v39 + 8);
            }
            else
            {
              v38 = 0;
            }
            if (v37 != (uint64_t *)v38)
              break;
            if (v29 < 0)
              goto LABEL_68;
LABEL_69:
            LODWORD(v4) = v4 & 0xFFFFFFFC | v31 | (v25 == v24);
            *(_QWORD *)&v615 = v27;
            *((_QWORD *)&v615 + 1) = v28;
            LOBYTE(v616) = v4;
            *(_WORD *)((char *)&v616 + 1) = __dst;
            BYTE3(v616) = BYTE2(__dst);
            sub_22E91AAAC((uint64_t)a1, a2, (uint64_t)&v591, (uint64_t)&v615);
            if (++v25 == v572)
            {
              v3 = a2;
              v4 = (uint64_t)a1;
              if ((_BYTE)v598)
              {
                if (SHIBYTE(v597) < 0)
                  operator delete(*((void **)&v596 + 1));
                LOBYTE(v598) = 0;
              }
              goto LABEL_105;
            }
          }
          v52 = a1[11];
          v53 = *v37;
          v615 = 0uLL;
          LODWORD(v617) = 0;
          v616 = 0;
          WORD2(v617) = 0;
          BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
          v557 = (void *)sub_22F3A2490(v52, v27, v28, v53, 1, &v615);
          sub_22EFC8E88(a2);
          v55 = v54;
          v56 = *(unsigned int *)(v54 + 8);
          v57 = *(_QWORD *)v54 + 8 * v56;
          if ((uint64_t *)v57 != v37 + 1)
          {
            memmove(v37, v37 + 1, v57 - (_QWORD)(v37 + 1));
            LODWORD(v56) = *(_DWORD *)(v55 + 8);
          }
          *(_DWORD *)(v55 + 8) = v56 - 1;
          sub_22EFCA95C(a2, (uint64_t)v557);
          if ((v29 & 0x80) == 0)
            goto LABEL_69;
LABEL_68:
          v40 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = 0;
          *(_QWORD *)v40 = 0;
          *(_DWORD *)(v40 + 24) = 0;
          *(_BYTE *)(v40 + 30) = 0;
          *(_WORD *)(v40 + 28) = 480;
          v41 = *(_BYTE *)(v40 + 34);
          *(_WORD *)(v40 + 32) = 494;
          *(_BYTE *)(v40 + 34) = v41 & 0xE0;
          sub_22EFCA95C(a2, v40);
          goto LABEL_69;
        }
        if ((v11 - 38) < 0xFFFFFFFB)
        {
          if ((v11 - 42) < 0xFFFFFFFD)
            goto LABEL_392;
          sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v618);
          v231 = (uint64_t **)v618;
          if (!DWORD2(v618))
            goto LABEL_908;
          v319 = (uint64_t **)(v618 + 8 * DWORD2(v618));
          v320 = v658;
          v564 = v319;
LABEL_669:
          v321 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v3 + 40) & 7) != 0 || v321 == 0)
          {
            v325 = 0;
            v324 = "";
          }
          else
          {
            v323 = *(_DWORD **)(v321 + 16);
            v326 = *v323;
            v324 = (unsigned __int8 *)(v323 + 4);
            v325 = v326;
          }
          sub_22EF457F0(*v231, v324, v325, (uint64_t)&v632);
          v624 = v626;
          v625 = 0x100000000;
          if (v633)
          {
            sub_22E917454((uint64_t)&v624, (uint64_t *)&v632);
            v327 = v639;
            v627 = v639;
            *(_QWORD *)&v657 = v658;
            *((_QWORD *)&v657 + 1) = 0x100000000;
            if ((_DWORD)v625)
            {
              sub_22E917454((uint64_t)&v657, (uint64_t *)&v624);
              v327 = v627;
            }
          }
          else
          {
            v327 = v639;
            v627 = v639;
            *(_QWORD *)&v657 = v658;
            *((_QWORD *)&v657 + 1) = 0x100000000;
          }
          v663 = v327;
          v328 = sub_22F30C1B8(v3);
          v329 = DWORD2(v657);
          if (!v328 && DWORD2(v657) != (unint64_t)v663)
          {
            memset(&v591, 0, sizeof(v591));
            v592 &= 0xF0u;
            LOBYTE(v596) = 0;
            BYTE8(v596) = 0;
            LOBYTE(v598) = 0;
            v599[0] = 0;
            v599[4] = 0;
            memset(&v593, 0, sizeof(v593));
            LOBYTE(v594) = 0;
            v370 = (uint64_t *)(v657 + 144 * v663);
            v371 = *v370;
            v372 = v370[1];
            sub_22F30BD28((uint64_t)&v591, (uint64_t)(v370 + 2));
            *(_QWORD *)v599 = v370[17];
            if (v371 & 0x7FFFFFFFFFFFFFFFLL | v372 & 0x7FFFFFFF7FFFFFFFLL)
            {
              v373 = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
              if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v373 = v593.__r_.__value_.__l.__size_;
              if (v373)
              {
                if (DWORD2(v657))
                {
                  v374 = 144 * DWORD2(v657);
                  v375 = v657 + 56;
                  while (1)
                  {
                    if (!(*(_QWORD *)(v375 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v375 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                    {
                      if (*(char *)(v375 + 15) < 0 ? *(_QWORD *)v375 : *(unsigned __int8 *)(v375 + 15))
                        break;
                    }
                    v375 += 144;
                    v374 -= 144;
                    if (!v374)
                      goto LABEL_795;
                  }
                }
                else
                {
LABEL_795:
                  *(_QWORD *)&v615 = v371;
                  *((_QWORD *)&v615 + 1) = v372;
                  LOBYTE(v616) = 2;
                  sub_22E918310(v4, v3, 0, (uint64_t)&v615, (uint64_t (*)(uint64_t))sub_22E91B158, (uint64_t)&__dst);
                }
              }
            }
            if ((_BYTE)v598)
            {
              if (SHIBYTE(v597) < 0)
                operator delete(*((void **)&v596 + 1));
              LOBYTE(v598) = 0;
            }
            if ((_BYTE)v596)
            {
              if (SHIBYTE(v595) < 0)
                operator delete(v594);
              LOBYTE(v596) = 0;
            }
            if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v593.__r_.__value_.__l.__data_);
            if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v591.__r_.__value_.__l.__data_);
            v329 = DWORD2(v657);
          }
          v330 = (char *)v657;
          if (v329)
          {
            v331 = 144 * v329;
            do
            {
              v332 = (void **)&v330[v331];
              if (v330[v331 - 16])
              {
                if (*((char *)v332 - 17) < 0)
                  operator delete(*(v332 - 5));
                *((_BYTE *)v332 - 16) = 0;
              }
              if (*((_BYTE *)v332 - 48))
              {
                if (v330[v331 - 49] < 0)
                  operator delete(*(v332 - 9));
                *((_BYTE *)v332 - 48) = 0;
              }
              v333 = (void **)&v330[v331];
              if (v330[v331 - 73] < 0)
                operator delete(*(v333 - 12));
              if (*((char *)v333 - 105) < 0)
                operator delete(*(v332 - 16));
              v331 -= 144;
            }
            while (v331);
            v330 = (char *)v657;
          }
          if (v330 != (char *)v658)
            free(v330);
          memset(&v591, 0, sizeof(v591));
          v592 &= 0xF0u;
          LOBYTE(v596) = 0;
          BYTE8(v596) = 0;
          LOBYTE(v598) = 0;
          v599[0] = 0;
          v599[4] = 0;
          memset(&v593, 0, sizeof(v593));
          LOBYTE(v594) = 0;
          v334 = v627;
          v578 = v625;
          if (!(_DWORD)v625)
            goto LABEL_737;
          v569 = v231;
          v335 = 0;
          while (1)
          {
            v336 = (uint64_t *)((char *)v624 + 144 * v335);
            v337 = *v336;
            v338 = v336[1];
            sub_22F30BD28((uint64_t)&v591, (uint64_t)(v336 + 2));
            v339 = v336[17];
            *(_QWORD *)v599 = v339;
            if (v335 == v334 || v337 & 0x7FFFFFFFFFFFFFFFLL | v338 & 0x7FFFFFFF7FFFFFFFLL)
            {
              v340 = 0;
              v341 = 0;
            }
            else
            {
              v350 = (uint64_t *)((char *)v624 + 144 * v334);
              v337 = *v350;
              v338 = v350[1];
              v341 = 2;
              v340 = 1;
            }
            v342 = v335 == v334;
            v588 = (void *)v339;
            if ((v339 & 0xFF00000000) == 0)
              goto LABEL_716;
            v343 = v4;
            v344 = v339;
            *(_QWORD *)&__dst = &v588;
            *((_QWORD *)&__dst + 1) = v343;
            if (v335 != v334)
              break;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v345 = *v359;
              if ((*(_BYTE *)(a2 + 29) & 1) != 0)
              {
                sub_22EFC8E88(a2);
                v361 = *(_QWORD *)v360 + 8 * *(unsigned int *)(v360 + 8);
              }
              else
              {
                v361 = 0;
              }
              if (v345 != (uint64_t *)v361)
              {
                do
                {
                  if (*(_WORD *)(*v345 + 32) == 323)
                    goto LABEL_708;
                  ++v345;
                }
                while (v345 != (uint64_t *)v361);
                v345 = (uint64_t *)v361;
              }
            }
            else
            {
              v345 = 0;
            }
LABEL_708:
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v346 = *(_QWORD *)v347 + 8 * *(unsigned int *)(v347 + 8);
            }
            else
            {
              v346 = 0;
            }
            if (v345 != (uint64_t *)v346)
            {
              v352 = a1[11];
              v353 = *v345;
              v615 = 0uLL;
              LODWORD(v617) = 0;
              v616 = 0;
              WORD2(v617) = 0;
              BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
              v561 = sub_22F3A2490(v352, v337, v338, v353, 1, &v615);
              sub_22EFC8E88(a2);
              v355 = v354[2];
              v356 = *(_QWORD *)v354 + 8 * v355;
              if ((uint64_t *)v356 != v345 + 1)
              {
                v558 = v354;
                memmove(v345, v345 + 1, v356 - (_QWORD)(v345 + 1));
                v354 = v558;
                LODWORD(v355) = v558[2];
              }
              v354[2] = v355 - 1;
              sub_22EFCA95C(a2, v561);
              if (!v344)
                goto LABEL_715;
LABEL_713:
              v348 = sub_22E91B15C((uint64_t)&__dst);
LABEL_714:
              sub_22EFCA95C(a2, v348);
              goto LABEL_715;
            }
            if (v344)
              goto LABEL_713;
LABEL_715:
            v4 = (uint64_t)a1;
LABEL_716:
            v349 = v320 & 0xFFFFFFFC | v341;
            LODWORD(v320) = v349 | v342;
            *(_QWORD *)&v615 = v337;
            *((_QWORD *)&v615 + 1) = v338;
            LOBYTE(v616) = v349 | v342;
            v3 = a2;
            sub_22E91AAAC(v4, a2, (uint64_t)&v591, (uint64_t)&v615);
            if (++v335 == v578)
            {
              v319 = v564;
              v231 = v569;
              v320 = v658;
              if ((_BYTE)v598)
              {
                if (SHIBYTE(v597) < 0)
                  operator delete(*((void **)&v596 + 1));
                LOBYTE(v598) = 0;
              }
LABEL_737:
              if ((_BYTE)v596)
              {
                if (SHIBYTE(v595) < 0)
                  operator delete(v594);
                LOBYTE(v596) = 0;
              }
              if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v593.__r_.__value_.__l.__data_);
              if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v591.__r_.__value_.__l.__data_);
              v362 = (char *)v624;
              if ((_DWORD)v625)
              {
                v363 = 144 * v625;
                do
                {
                  v364 = (void **)&v362[v363];
                  if (v362[v363 - 16])
                  {
                    if (*((char *)v364 - 17) < 0)
                      operator delete(*(v364 - 5));
                    *((_BYTE *)v364 - 16) = 0;
                  }
                  if (*((_BYTE *)v364 - 48))
                  {
                    if (v362[v363 - 49] < 0)
                      operator delete(*(v364 - 9));
                    *((_BYTE *)v364 - 48) = 0;
                  }
                  v365 = (void **)&v362[v363];
                  if (v362[v363 - 73] < 0)
                    operator delete(*(v365 - 12));
                  if (*((char *)v365 - 105) < 0)
                    operator delete(*(v364 - 16));
                  v363 -= 144;
                }
                while (v363);
                v362 = (char *)v624;
              }
              if (v362 != v626)
                free(v362);
              v366 = (char *)v632;
              if (v633)
              {
                v367 = 144 * v633;
                do
                {
                  v368 = (void **)&v366[v367];
                  if (v366[v367 - 16])
                  {
                    if (*((char *)v368 - 17) < 0)
                      operator delete(*(v368 - 5));
                    *((_BYTE *)v368 - 16) = 0;
                  }
                  if (*((_BYTE *)v368 - 48))
                  {
                    if (v366[v367 - 49] < 0)
                      operator delete(*(v368 - 9));
                    *((_BYTE *)v368 - 48) = 0;
                  }
                  v369 = (void **)&v366[v367];
                  if (v366[v367 - 73] < 0)
                    operator delete(*(v369 - 12));
                  if (*((char *)v369 - 105) < 0)
                    operator delete(*(v368 - 16));
                  v367 -= 144;
                }
                while (v367);
                v366 = (char *)v632;
              }
              if (v366 != v634)
                free(v366);
              if (++v231 == v319)
              {
                v231 = (uint64_t **)v618;
                goto LABEL_908;
              }
              goto LABEL_669;
            }
          }
          if ((_DWORD)v339)
          {
            v357 = sub_22E91B15C((uint64_t)&__dst);
            v358 = a1[11];
            v615 = 0uLL;
            LODWORD(v617) = 0;
            v616 = 0;
            WORD2(v617) = 0;
            BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
            v348 = sub_22F3A2490(v358, v337, v338, v357, v340, &v615);
          }
          else
          {
            v351 = a1[11];
            v615 = 0uLL;
            LODWORD(v617) = 0;
            v616 = 0;
            WORD2(v617) = 0;
            BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
            v348 = sub_22F3A25F4(v351, v337, v338, 323, v340, &v615);
          }
          goto LABEL_714;
        }
        v223 = *(_QWORD *)(v3 + 40);
        if ((v223 & 7) != 0 || (v224 = v223 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
          v226 = 0;
          HIBYTE(v601) = 0;
          p_dst = &__dst;
          goto LABEL_915;
        }
        v225 = *(unsigned int **)(v224 + 16);
        v228 = *v225;
        v227 = v225 + 4;
        v226 = v228;
        if (v228 >= 0x17uLL)
        {
          if ((v226 | 7) == 0x17)
            v436 = (v226 & 0xFFFFFFF8) + 8;
          else
            v436 = v226 | 7;
          p_dst = (__int128 *)operator new(v436 + 1);
          *((_QWORD *)&__dst + 1) = v226;
          v601 = v436 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v601) = v226;
          p_dst = &__dst;
          if (!v226)
          {
LABEL_915:
            *((_BYTE *)p_dst + v226) = 0;
            v437 = HIBYTE(v601);
            v438 = *((_QWORD *)&__dst + 1);
            v439 = HIBYTE(v601) & 0x7F;
            if (v601 >= 0)
              v440 = HIBYTE(v601) & 0x7F;
            else
              v440 = *((_QWORD *)&__dst + 1);
            if (v440)
              goto LABEL_921;
            v441 = *(_QWORD *)(v3 + 120);
            if ((v441 & 4) != 0)
            {
              v548 = v441 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)(v548 + 16))
              {
                v447 = **(int ***)(v548 + 24);
                v3 = a2;
                v4 = (uint64_t)a1;
                if ((*v447 & 0x80000000) == 0)
                  goto LABEL_921;
                goto LABEL_948;
              }
              v3 = a2;
              v4 = (uint64_t)a1;
            }
            if ((*(_DWORD *)(v3 + 56) & 0x80000000) == 0)
            {
LABEL_921:
              HIBYTE(v590) = 0;
              LOBYTE(v588) = 0;
              goto LABEL_922;
            }
            v447 = (int *)(v3 + 56);
LABEL_948:
            v448 = *v447;
            v449 = v3;
            if ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
            {
              v450 = *(_QWORD *)(v3 + 16);
              v451 = v450 & 0xFFFFFFFFFFFFFFF8;
              if ((v450 & 4) != 0)
                v451 = *(_QWORD *)v451;
              for (i = *(_WORD *)(v451 + 8) & 0x7F; i != 83; i = *(_WORD *)(v451 + 8) & 0x7F)
              {
                v453 = -40;
                if (i > 70)
                {
                  if (i == 71)
                  {
                    v453 = -56;
                  }
                  else if (i != 81)
                  {
                    goto LABEL_962;
                  }
                }
                else
                {
                  if (i > 0x18)
                    goto LABEL_961;
                  if (i == 16)
                    goto LABEL_955;
                  if (((1 << i) & 0x1066) != 0)
                    goto LABEL_968;
                  if (i == 24)
                  {
LABEL_955:
                    v453 = -48;
                  }
                  else
                  {
LABEL_961:
                    if (i != 70)
                    {
LABEL_962:
                      v454 = i - 52;
                      if ((i - 33) >= 5)
                        v455 = -48;
                      else
                        v455 = -64;
                      if (v454 >= 6)
                        v453 = v455;
                      else
                        v453 = -72;
                      goto LABEL_968;
                    }
                    v453 = -64;
                  }
                }
LABEL_968:
                v456 = *(_QWORD *)(v451 + v453 + 16);
                v451 = v456 & 0xFFFFFFFFFFFFFFF8;
                if ((v456 & 4) != 0)
                  v451 = *(_QWORD *)v451;
              }
              v449 = v451 - 40;
            }
            v457 = sub_22F142460(v448, *(_QWORD *)(*(_QWORD *)(v449 + 88) + 1992), *(_DWORD **)(v4 + 72));
            if (!v457)
            {
              v588 = 0;
              v589 = 0;
              v590 = 0;
              goto LABEL_922;
            }
            v459 = v458;
            if (v458 >= 0x7FFFFFFFFFFFFFF8)
              abort();
            v460 = v457;
            if (v458 >= 0x17)
            {
              v472 = (v458 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v458 | 7) != 0x17)
                v472 = v458 | 7;
              v473 = v472 + 1;
              v461 = operator new(v472 + 1);
              v589 = (_QWORD *)v459;
              v590 = v473 | 0x8000000000000000;
              v588 = v461;
            }
            else
            {
              HIBYTE(v590) = v458;
              v461 = &v588;
              if (!v458)
                goto LABEL_1010;
            }
            memmove(v461, v460, v459);
LABEL_1010:
            *((_BYTE *)v461 + v459) = 0;
            v437 = HIBYTE(v601);
            v438 = *((_QWORD *)&__dst + 1);
            v439 = HIBYTE(v601) & 0x7F;
LABEL_922:
            if (v437 >= 0)
              v442 = v439;
            else
              v442 = v438;
            if (v442 || (*(_DWORD *)(v3 + 28) & 0x7F) != 0x21)
              goto LABEL_1015;
            if (v590 >= 0)
              v443 = (_QWORD *)(HIBYTE(v590) & 0x7F);
            else
              v443 = v589;
            if (v443 == (_QWORD *)13)
            {
              if (v590 >= 0)
                v465 = HIBYTE(v590);
              else
                v465 = (unint64_t)v589;
              if (v590 >= 0)
                v466 = &v588;
              else
                v466 = v588;
              if (v465 >= 0xD)
                v467 = 13;
              else
                v467 = v465;
              if (memcmp(v466, "SWIFT_OPTIONS", v467) || v465 != 13)
                goto LABEL_1015;
            }
            else if (v443 == (_QWORD *)12)
            {
              if (v590 >= 0)
                v462 = HIBYTE(v590);
              else
                v462 = (unint64_t)v589;
              if (v590 >= 0)
                v463 = &v588;
              else
                v463 = v588;
              if (v462 >= 0xC)
                v464 = 12;
              else
                v464 = v462;
              if (memcmp(v463, "OBJC_OPTIONS", v464) || v462 != 12)
                goto LABEL_1015;
            }
            else if (v443 != (_QWORD *)10
                   || (v590 >= 0 ? (v444 = HIBYTE(v590)) : (v444 = (unint64_t)v589),
                       v590 >= 0 ? (v445 = &v588) : (v445 = v588),
                       v444 >= 0xA ? (v446 = 10) : (v446 = v444),
                       (memcmp(v445, "CF_OPTIONS", v446) || v444 != 10)
                    && (memcmp(v445, "NS_OPTIONS", v446) || v444 != 10)))
            {
LABEL_1015:
              sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v618);
              v476 = (uint64_t **)v618;
              if (!DWORD2(v618))
              {
LABEL_1180:
                if (v476 != v619)
                  free(v476);
                if (SHIBYTE(v590) < 0)
                  operator delete(v588);
                if (SHIBYTE(v601) < 0)
                  operator delete((void *)__dst);
                return;
              }
              v477 = (uint64_t **)(v618 + 8 * DWORD2(v618));
              v562 = v477;
              while (1)
              {
                if (v601 >= 0)
                  v478 = (unsigned __int8 *)&__dst;
                else
                  v478 = (unsigned __int8 *)__dst;
                if (v601 >= 0)
                  v479 = HIBYTE(v601) & 0x7F;
                else
                  v479 = *((_QWORD *)&__dst + 1);
                sub_22EF452F4(*v476, v478, v479, (uint64_t)&v632);
                v628 = v630;
                v629 = 0x100000000;
                if (v633)
                {
                  sub_22E9171E4((uint64_t)&v628, (uint64_t *)&v632);
                  v480 = v640;
                  v631 = v640;
                  *(_QWORD *)&v657 = v658;
                  *((_QWORD *)&v657 + 1) = 0x100000000;
                  if ((_DWORD)v629)
                  {
                    sub_22E9171E4((uint64_t)&v657, (uint64_t *)&v628);
                    v480 = v631;
                  }
                }
                else
                {
                  v480 = v640;
                  v631 = v640;
                  *(_QWORD *)&v657 = v658;
                  *((_QWORD *)&v657 + 1) = 0x100000000;
                }
                v664 = v480;
                v481 = sub_22F30C1B8(v3);
                v482 = DWORD2(v657);
                if (!v481 && DWORD2(v657) != (unint64_t)v664)
                {
                  memset(&v591, 0, sizeof(v591));
                  v592 &= 0xF0u;
                  LOBYTE(v596) = 0;
                  BYTE8(v596) = 0;
                  LOBYTE(v598) = 0;
                  memset(&v593, 0, sizeof(v593));
                  LOBYTE(v594) = 0;
                  v599[0] &= 0xFCu;
                  v599[4] = 0;
                  v599[8] = 0;
                  v540 = (uint64_t *)(v657 + 152 * v664);
                  v542 = *v540;
                  v541 = v540[1];
                  sub_22F30BD28((uint64_t)&v591, (uint64_t)(v540 + 2));
                  v543 = *((_DWORD *)v540 + 36);
                  *(_QWORD *)v599 = v540[17];
                  *(_DWORD *)&v599[8] = v543;
                  if (v542 & 0x7FFFFFFFFFFFFFFFLL | v541 & 0x7FFFFFFF7FFFFFFFLL)
                  {
                    v544 = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
                    if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v544 = v593.__r_.__value_.__l.__size_;
                    if (v544)
                    {
                      if (DWORD2(v657))
                      {
                        v545 = 152 * DWORD2(v657);
                        v546 = v657 + 56;
                        while (1)
                        {
                          if (!(*(_QWORD *)(v546 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v546 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                          {
                            if (*(char *)(v546 + 15) < 0 ? *(_QWORD *)v546 : *(unsigned __int8 *)(v546 + 15))
                              break;
                          }
                          v546 += 152;
                          v545 -= 152;
                          if (!v545)
                            goto LABEL_1166;
                        }
                      }
                      else
                      {
LABEL_1166:
                        *(_QWORD *)&v615 = v542;
                        *((_QWORD *)&v615 + 1) = v541;
                        LOBYTE(v616) = 2;
                        sub_22E918310(v4, v3, 0, (uint64_t)&v615, (uint64_t (*)(uint64_t))sub_22E91B0E8, (uint64_t)&v605);
                      }
                    }
                  }
                  if ((_BYTE)v598)
                  {
                    if (SHIBYTE(v597) < 0)
                      operator delete(*((void **)&v596 + 1));
                    LOBYTE(v598) = 0;
                  }
                  if ((_BYTE)v596)
                  {
                    if (SHIBYTE(v595) < 0)
                      operator delete(v594);
                    LOBYTE(v596) = 0;
                  }
                  if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v593.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v591.__r_.__value_.__l.__data_);
                  v482 = DWORD2(v657);
                }
                v483 = (char *)v657;
                if (v482)
                {
                  v484 = 152 * v482;
                  do
                  {
                    v485 = (void **)&v483[v484];
                    if (v483[v484 - 24])
                    {
                      if (*((char *)v485 - 25) < 0)
                        operator delete(*(v485 - 6));
                      *((_BYTE *)v485 - 24) = 0;
                    }
                    if (*((_BYTE *)v485 - 56))
                    {
                      if (v483[v484 - 57] < 0)
                        operator delete(*(v485 - 10));
                      *((_BYTE *)v485 - 56) = 0;
                    }
                    v486 = (void **)&v483[v484];
                    if (v483[v484 - 81] < 0)
                      operator delete(*(v486 - 13));
                    if (*((char *)v486 - 113) < 0)
                      operator delete(*(v485 - 17));
                    v484 -= 152;
                  }
                  while (v484);
                  v483 = (char *)v657;
                }
                if (v483 != (char *)v658)
                  free(v483);
                memset(&v591, 0, sizeof(v591));
                v592 &= 0xF0u;
                LOBYTE(v596) = 0;
                BYTE8(v596) = 0;
                LOBYTE(v598) = 0;
                memset(&v593, 0, sizeof(v593));
                LOBYTE(v594) = 0;
                v599[0] &= 0xFCu;
                v599[4] = 0;
                v599[8] = 0;
                v487 = v631;
                v580 = v629;
                if ((_DWORD)v629)
                  break;
LABEL_1108:
                v3 = a2;
                if ((_BYTE)v596)
                {
                  if (SHIBYTE(v595) < 0)
                    operator delete(v594);
                  LOBYTE(v596) = 0;
                }
                if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v593.__r_.__value_.__l.__data_);
                if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v591.__r_.__value_.__l.__data_);
                v532 = (char *)v628;
                if ((_DWORD)v629)
                {
                  v533 = 152 * v629;
                  do
                  {
                    v534 = (void **)&v532[v533];
                    if (v532[v533 - 24])
                    {
                      if (*((char *)v534 - 25) < 0)
                        operator delete(*(v534 - 6));
                      *((_BYTE *)v534 - 24) = 0;
                    }
                    if (*((_BYTE *)v534 - 56))
                    {
                      if (v532[v533 - 57] < 0)
                        operator delete(*(v534 - 10));
                      *((_BYTE *)v534 - 56) = 0;
                    }
                    v535 = (void **)&v532[v533];
                    if (v532[v533 - 81] < 0)
                      operator delete(*(v535 - 13));
                    if (*((char *)v535 - 113) < 0)
                      operator delete(*(v534 - 17));
                    v533 -= 152;
                  }
                  while (v533);
                  v532 = (char *)v628;
                }
                if (v532 != v630)
                  free(v532);
                v536 = (char *)v632;
                if (v633)
                {
                  v537 = 152 * v633;
                  do
                  {
                    v538 = (void **)&v536[v537];
                    if (v536[v537 - 24])
                    {
                      if (*((char *)v538 - 25) < 0)
                        operator delete(*(v538 - 6));
                      *((_BYTE *)v538 - 24) = 0;
                    }
                    if (*((_BYTE *)v538 - 56))
                    {
                      if (v536[v537 - 57] < 0)
                        operator delete(*(v538 - 10));
                      *((_BYTE *)v538 - 56) = 0;
                    }
                    v539 = (void **)&v536[v537];
                    if (v536[v537 - 81] < 0)
                      operator delete(*(v539 - 13));
                    if (*((char *)v539 - 113) < 0)
                      operator delete(*(v538 - 17));
                    v537 -= 152;
                  }
                  while (v537);
                  v536 = (char *)v632;
                }
                if (v536 != v634)
                  free(v536);
                if (++v476 == v477)
                {
                  v476 = (uint64_t **)v618;
                  goto LABEL_1180;
                }
              }
              v488 = 0;
              while (1)
              {
                v489 = (char *)v628 + 152 * v488;
                v490 = *(_QWORD *)v489;
                v491 = *((_QWORD *)v489 + 1);
                sub_22F30BD28((uint64_t)&v591, (uint64_t)(v489 + 16));
                v492 = *((_DWORD *)v489 + 36);
                *(_QWORD *)v599 = *((_QWORD *)v489 + 17);
                *(_DWORD *)&v599[8] = v492;
                if (v488 == v487 || v490 & 0x7FFFFFFFFFFFFFFFLL | v491 & 0x7FFFFFFF7FFFFFFFLL)
                {
                  v565 = 0;
                  v493 = 0;
                }
                else
                {
                  v507 = (uint64_t *)((char *)v628 + 152 * v487);
                  v490 = *v507;
                  v491 = v507[1];
                  v493 = 2;
                  v565 = 1;
                }
                v494 = v488 == v487;
                v606 = *(_QWORD *)&v599[4];
                if ((*(_QWORD *)&v599[4] & 0xFF00000000) == 0)
                  goto LABEL_1063;
                v495 = *(unsigned int *)&v599[4];
                *(_QWORD *)&v605 = &v606;
                *((_QWORD *)&v605 + 1) = a1;
                if (v488 != v487)
                  break;
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v496 = *v526;
                  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                  {
                    sub_22EFC8E88(a2);
                    v528 = *(_QWORD *)v527 + 8 * *(unsigned int *)(v527 + 8);
                  }
                  else
                  {
                    v528 = 0;
                  }
                  if (v496 != (uint64_t *)v528)
                  {
                    do
                    {
                      if (*(_WORD *)(*v496 + 32) == 170)
                        goto LABEL_1056;
                      ++v496;
                    }
                    while (v496 != (uint64_t *)v528);
                    v496 = (uint64_t *)v528;
                  }
                }
                else
                {
                  v496 = 0;
                }
LABEL_1056:
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v497 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
                }
                else
                {
                  v497 = 0;
                }
                if (v496 != (uint64_t *)v497)
                {
                  v509 = a1[11];
                  v510 = *v496;
                  v615 = 0uLL;
                  LODWORD(v617) = 0;
                  v616 = 0;
                  WORD2(v617) = 0;
                  BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v560 = (void *)sub_22F3A2490(v509, v490, v491, v510, 1, &v615);
                  sub_22EFC8E88(a2);
                  v512 = *(unsigned int *)(v511 + 8);
                  v513 = *(_QWORD *)v511 + 8 * v512;
                  if ((uint64_t *)v513 != v496 + 1)
                  {
                    v554 = v511;
                    memmove(v496, v496 + 1, v513 - (_QWORD)(v496 + 1));
                    v511 = v554;
                    LODWORD(v512) = *(_DWORD *)(v554 + 8);
                  }
                  *(_DWORD *)(v511 + 8) = v512 - 1;
                  sub_22EFCA95C(a2, (uint64_t)v560);
                  if (!v495)
                    goto LABEL_1063;
LABEL_1061:
                  v499 = sub_22E91B0EC((uint64_t)&v605);
LABEL_1062:
                  sub_22EFCA95C(a2, v499);
                  goto LABEL_1063;
                }
                if (v495)
                  goto LABEL_1061;
LABEL_1063:
                v500 = v599[0];
                if ((v599[0] & 1) != 0)
                {
                  if (v488 == v487)
                  {
                    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                    {
                      sub_22EFC8E88(a2);
                      v501 = *v529;
                      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                      {
                        sub_22EFC8E88(a2);
                        v531 = *(_QWORD *)v530 + 8 * *(unsigned int *)(v530 + 8);
                      }
                      else
                      {
                        v531 = 0;
                      }
                      if (v501 != (uint64_t *)v531)
                      {
                        do
                        {
                          if (*(_WORD *)(*v501 + 32) == 177)
                            goto LABEL_1067;
                          ++v501;
                        }
                        while (v501 != (uint64_t *)v531);
                        v501 = (uint64_t *)v531;
                      }
                    }
                    else
                    {
                      v501 = 0;
                    }
LABEL_1067:
                    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                    {
                      sub_22EFC8E88(a2);
                      v502 = *(_QWORD *)v503 + 8 * *(unsigned int *)(v503 + 8);
                    }
                    else
                    {
                      v502 = 0;
                    }
                    if (v501 != (uint64_t *)v502)
                    {
                      v516 = a1[11];
                      v517 = *v501;
                      v615 = 0uLL;
                      LODWORD(v617) = 0;
                      v616 = 0;
                      WORD2(v617) = 0;
                      BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                      v566 = sub_22F3A2490(v516, v490, v491, v517, 1, &v615);
                      sub_22EFC8E88(a2);
                      v519 = v518[2];
                      v520 = *(_QWORD *)v518 + 8 * v519;
                      if ((uint64_t *)v520 != v501 + 1)
                      {
                        __src = v518;
                        memmove(v501, v501 + 1, v520 - (_QWORD)(v501 + 1));
                        v518 = __src;
                        LODWORD(v519) = __src[2];
                      }
                      v518[2] = v519 - 1;
                      sub_22EFCA95C(a2, v566);
                    }
                    if ((v500 & 2) != 0)
                    {
                      v504 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
                      *(_QWORD *)(v504 + 8) = 0;
                      *(_QWORD *)(v504 + 16) = 0;
                      *(_QWORD *)v504 = 0;
                      *(_DWORD *)(v504 + 24) = 0;
                      *(_BYTE *)(v504 + 30) = 0;
                      *(_WORD *)(v504 + 28) = 480;
                      v505 = *(_BYTE *)(v504 + 34);
                      *(_WORD *)(v504 + 32) = 177;
                      *(_BYTE *)(v504 + 34) = v505 & 0xE0;
                      sub_22EFCA95C(a2, v504);
                    }
                  }
                  else
                  {
                    v514 = a1[11];
                    if ((v599[0] & 2) != 0)
                    {
                      v523 = sub_22E3CD3D4(v514 + 2032, 40, 3);
                      *(_QWORD *)(v523 + 8) = 0;
                      *(_QWORD *)(v523 + 16) = 0;
                      *(_QWORD *)v523 = 0;
                      *(_DWORD *)(v523 + 24) = 0;
                      *(_BYTE *)(v523 + 30) = 0;
                      *(_WORD *)(v523 + 28) = 480;
                      v524 = *(_BYTE *)(v523 + 34);
                      *(_WORD *)(v523 + 32) = 177;
                      *(_BYTE *)(v523 + 34) = v524 & 0xE0;
                      v525 = a1[11];
                      v615 = 0uLL;
                      LODWORD(v617) = 0;
                      v616 = 0;
                      WORD2(v617) = 0;
                      BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                      v515 = sub_22F3A2490(v525, v490, v491, v523, v565, &v615);
                    }
                    else
                    {
                      v615 = 0uLL;
                      LODWORD(v617) = 0;
                      v616 = 0;
                      WORD2(v617) = 0;
                      BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                      v515 = sub_22F3A25F4(v514, v490, v491, 177, v565, &v615);
                    }
                    sub_22EFCA95C(a2, v515);
                  }
                }
                v506 = v4 & 0xFFFFFFFC | v493;
                LODWORD(v4) = v506 | v494;
                *(_QWORD *)&v615 = v490;
                *((_QWORD *)&v615 + 1) = v491;
                LOBYTE(v616) = v506 | v494;
                sub_22E91AAAC((uint64_t)a1, a2, (uint64_t)&v591, (uint64_t)&v615);
                if (++v488 == v580)
                {
                  v4 = (uint64_t)a1;
                  v477 = v562;
                  if ((_BYTE)v598)
                  {
                    if (SHIBYTE(v597) < 0)
                      operator delete(*((void **)&v596 + 1));
                    LOBYTE(v598) = 0;
                  }
                  goto LABEL_1108;
                }
              }
              if (*(_DWORD *)&v599[4])
              {
                v521 = sub_22E91B0EC((uint64_t)&v605);
                v522 = a1[11];
                v615 = 0uLL;
                LODWORD(v617) = 0;
                v616 = 0;
                WORD2(v617) = 0;
                BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                v499 = sub_22F3A2490(v522, v490, v491, v521, v565, &v615);
              }
              else
              {
                v508 = a1[11];
                v615 = 0uLL;
                LODWORD(v617) = 0;
                v616 = 0;
                WORD2(v617) = 0;
                BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
                v499 = sub_22F3A25F4(v508, v490, v491, 170, v565, &v615);
              }
              goto LABEL_1062;
            }
            v468 = sub_22E496830(v3);
            v469 = v468;
            v470 = (_QWORD *)(v468 & 0xFFFFFFFFFFFFFFF0);
            if ((v469 & 8) != 0)
            {
              v474 = v470[3];
              v470 = (_QWORD *)*v470;
              v471 = v474 | v469 & 7;
            }
            else
            {
              v471 = v469 & 7;
            }
            v475 = (_OWORD *)(*(_QWORD *)(v4 + 88) + 15104);
            v658[0] = 0;
            v657 = 0uLL;
            sub_22F1193C0((int)v470, v471, &v657, v475);
            if (SHIBYTE(v601) < 0)
              operator delete((void *)__dst);
            __dst = v657;
            v601 = v658[0];
            goto LABEL_1015;
          }
        }
        memmove(p_dst, v227, v226);
        goto LABEL_915;
      }
      if ((*(_BYTE *)(v3 + 40) & 7) != 0)
        return;
      sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v615);
      v12 = (uint64_t **)v615;
      if (DWORD2(v615))
      {
        v568 = v615 + 8 * DWORD2(v615);
        do
        {
          v105 = *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(a2 + 40) & 7) != 0 || v105 == 0)
          {
            v109 = 0;
            v108 = "";
          }
          else
          {
            v107 = *(_DWORD **)(v105 + 16);
            v110 = *v107;
            v108 = (unsigned __int8 *)(v107 + 4);
            v109 = v110;
          }
          sub_22EF44AC4(*v12, v108, v109, (uint64_t)&v632);
          v649 = v651;
          v650 = 0x100000000;
          if (v633)
          {
            sub_22E9163EC((uint64_t)&v649, (uint64_t)&v632);
            v111 = v638;
            v652 = v638;
            *(_QWORD *)&v657 = v658;
            *((_QWORD *)&v657 + 1) = 0x100000000;
            if ((_DWORD)v650)
            {
              sub_22E9163EC((uint64_t)&v657, (uint64_t)&v649);
              v111 = v652;
            }
          }
          else
          {
            v111 = v638;
            v652 = v638;
            *(_QWORD *)&v657 = v658;
            *((_QWORD *)&v657 + 1) = 0x100000000;
          }
          v662 = v111;
          v112 = sub_22F30C1B8(a2);
          v113 = DWORD2(v657);
          if (!v112 && DWORD2(v657) != (unint64_t)v662)
          {
            memset(&v591, 0, sizeof(v591));
            v592 &= 0xF0u;
            memset(&v593, 0, sizeof(v593));
            LOWORD(v594) = (unsigned __int16)v594 & 0xF000;
            v595 = 0u;
            v596 = 0u;
            v597 = 0u;
            v598 = 0;
            v136 = (uint64_t *)(v657 + 136 * v662);
            v137 = *v136;
            v138 = v136[1];
            sub_22F30BC44((uint64_t)&v591, (uint64_t)(v136 + 2));
            if (v137 & 0x7FFFFFFFFFFFFFFFLL | v138 & 0x7FFFFFFF7FFFFFFFLL)
            {
              v139 = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
              if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v139 = v593.__r_.__value_.__l.__size_;
              if (v139)
              {
                if (DWORD2(v657))
                {
                  v140 = 136 * DWORD2(v657);
                  v141 = v657 + 56;
                  while (1)
                  {
                    if (!(*(_QWORD *)(v141 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v141 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                    {
                      if (*(char *)(v141 + 15) < 0 ? *(_QWORD *)v141 : *(unsigned __int8 *)(v141 + 15))
                        break;
                    }
                    v141 += 136;
                    v140 -= 136;
                    if (!v140)
                      goto LABEL_292;
                  }
                }
                else
                {
LABEL_292:
                  *(_QWORD *)&v618 = v137;
                  *((_QWORD *)&v618 + 1) = v138;
                  LOBYTE(v619[0]) = 2;
                  sub_22E918310(v4, a2, 0, (uint64_t)&v618, (uint64_t (*)(uint64_t))sub_22E919540, (uint64_t)&__dst);
                }
              }
            }
            if ((_QWORD)v597)
            {
              sub_22E916AE0((uint64_t *)&v597);
              operator delete((void *)v597);
            }
            if (SHIBYTE(v596) < 0)
              operator delete(*((void **)&v595 + 1));
            if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v593.__r_.__value_.__l.__data_);
            if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v591.__r_.__value_.__l.__data_);
            v113 = DWORD2(v657);
          }
          v114 = (char *)v657;
          if (v113)
          {
            v115 = 0;
            v2 = 136 * v113;
            do
            {
              v116 = (void **)&v114[v2];
              if (*(_QWORD *)&v114[v2 - 24])
              {
                sub_22E916AE0((uint64_t *)&v114[v2 - 24]);
                operator delete(*(void **)&v114[v2 - 24]);
              }
              if (*((char *)v116 - 25) < 0)
                operator delete(*(void **)&v114[v2 - 48]);
              v117 = (void **)&v114[v2];
              if (v114[v2 - 65] < 0)
                operator delete(*(v117 - 11));
              if (*((char *)v117 - 97) < 0)
                operator delete(*(v116 - 15));
              v114 -= 136;
              v115 += 136;
            }
            while (v2 != v115);
            v114 = (char *)v657;
          }
          if (v114 != (char *)v658)
            free(v114);
          memset(&v591, 0, sizeof(v591));
          v592 &= 0xF0u;
          memset(&v593, 0, sizeof(v593));
          LOWORD(v594) = (unsigned __int16)v594 & 0xF000;
          v595 = 0u;
          v596 = 0u;
          v597 = 0u;
          v598 = 0;
          v118 = v652;
          if ((_DWORD)v650)
          {
            v119 = 0;
            v120 = 136 * v650;
            v121 = 136 * v652;
            do
            {
              v122 = *(_QWORD *)((char *)v649 + v119);
              v123 = *(_QWORD *)((char *)v649 + v119 + 8);
              sub_22F30BC44((uint64_t)&v591, (uint64_t)v649 + v119 + 16);
              if (v121 == v119 || v122 & 0x7FFFFFFFFFFFFFFFLL | v123 & 0x7FFFFFFF7FFFFFFFLL)
              {
                v124 = 0;
              }
              else
              {
                v127 = (uint64_t *)((char *)v649 + 136 * v118);
                v122 = *v127;
                v123 = v127[1];
                v124 = 2;
              }
              v125 = v121 == v119;
              v126 = v2 & 0xFFFFFFFC | v124;
              LODWORD(v2) = v126 | v125;
              *(_QWORD *)&v618 = v122;
              *((_QWORD *)&v618 + 1) = v123;
              LOBYTE(v619[0]) = v126 | v125;
              v4 = (uint64_t)a1;
              sub_22E919544((unint64_t)a1, v3 & 0xFFFFFFFFFFFFFFFBLL, (uint64_t)&v591, (uint64_t)&v618);
              v119 += 136;
            }
            while (v120 != v119);
            if ((_QWORD)v597)
            {
              sub_22E916AE0((uint64_t *)&v597);
              operator delete((void *)v597);
            }
          }
          if (SHIBYTE(v596) < 0)
            operator delete(*((void **)&v595 + 1));
          if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v593.__r_.__value_.__l.__data_);
          if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v591.__r_.__value_.__l.__data_);
          v128 = (char *)v649;
          if ((_DWORD)v650)
          {
            v129 = 0;
            v2 = 136 * v650;
            do
            {
              v130 = (void **)&v128[v2];
              if (*(_QWORD *)&v128[v2 - 24])
              {
                sub_22E916AE0((uint64_t *)&v128[v2 - 24]);
                operator delete(*(void **)&v128[v2 - 24]);
              }
              if (*((char *)v130 - 25) < 0)
                operator delete(*(void **)&v128[v2 - 48]);
              v131 = (void **)&v128[v2];
              if (v128[v2 - 65] < 0)
                operator delete(*(v131 - 11));
              if (*((char *)v131 - 97) < 0)
                operator delete(*(v130 - 15));
              v128 -= 136;
              v129 += 136;
            }
            while (v2 != v129);
            v128 = (char *)v649;
          }
          if (v128 != v651)
            free(v128);
          v132 = (char *)v632;
          if (v633)
          {
            v133 = 0;
            v2 = 136 * v633;
            do
            {
              v134 = (void **)&v132[v2];
              if (*(_QWORD *)&v132[v2 - 24])
              {
                sub_22E916AE0((uint64_t *)&v132[v2 - 24]);
                operator delete(*(void **)&v132[v2 - 24]);
              }
              if (*((char *)v134 - 25) < 0)
                operator delete(*(void **)&v132[v2 - 48]);
              v135 = (void **)&v132[v2];
              if (v132[v2 - 65] < 0)
                operator delete(*(v135 - 11));
              if (*((char *)v135 - 97) < 0)
                operator delete(*(v134 - 15));
              v132 -= 136;
              v133 += 136;
            }
            while (v2 != v133);
            v132 = (char *)v632;
          }
          if (v132 != v634)
            free(v132);
          ++v12;
        }
        while (v12 != (uint64_t **)v568);
LABEL_200:
        v12 = (uint64_t **)v615;
      }
    }
LABEL_201:
    v78 = (uint64_t **)&v616;
    goto LABEL_202;
  }
LABEL_392:
  if ((v5 & 4) != 0)
    v6 = (unint64_t *)*v6;
  v175 = *(_WORD *)(sub_22EFCBB30((unint64_t)v6) + 8) & 0x7F;
  if (v175 == 16 || v175 == 83)
    goto LABEL_399;
  v176 = *(_QWORD *)(v3 + 16);
  v177 = (_QWORD *)(v176 & 0xFFFFFFFFFFFFFFF8);
  if ((v176 & 4) != 0)
    v177 = (_QWORD *)*v177;
  v178 = sub_22EFCBB30((unint64_t)v177);
  if (sub_22EFCBD94(v178, 1))
  {
LABEL_399:
    if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x43)
    {
      sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v615);
      v12 = (uint64_t **)v615;
      if (!DWORD2(v615))
        goto LABEL_201;
      v575 = v615 + 8 * DWORD2(v615);
      do
      {
        v179 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(v3 + 40) & 7) != 0 || v179 == 0)
        {
          v183 = 0;
          v182 = "";
        }
        else
        {
          v181 = *(_DWORD **)(v179 + 16);
          v184 = *v181;
          v182 = (unsigned __int8 *)(v181 + 4);
          v183 = v184;
        }
        sub_22EF44F44(*v12, v182, v183, (uint64_t)&v632);
        v620 = v622;
        v621 = 0x100000000;
        if (v633)
        {
          sub_22E9176AC((uint64_t)&v620, (uint64_t)&v632);
          v185 = v635;
          v623 = v635;
          *(_QWORD *)&v657 = v658;
          *((_QWORD *)&v657 + 1) = 0x100000000;
          if ((_DWORD)v621)
          {
            sub_22E9176AC((uint64_t)&v657, (uint64_t)&v620);
            v185 = v623;
          }
        }
        else
        {
          v185 = v635;
          v623 = v635;
          *(_QWORD *)&v657 = v658;
          *((_QWORD *)&v657 + 1) = 0x100000000;
        }
        v659 = v185;
        v186 = sub_22F30C1B8(v3);
        v187 = DWORD2(v657);
        if (!v186 && DWORD2(v657) != (unint64_t)v659)
        {
          memset(&v591, 0, sizeof(v591));
          v592 &= 0xF0u;
          memset(&v593, 0, sizeof(v593));
          v188 = (uint64_t *)(v657 + 72 * v659);
          v189 = *v188;
          v190 = v188[1];
          std::string::operator=(&v591, (const std::string *)(v188 + 2));
          v592 = *((_BYTE *)v188 + 40);
          std::string::operator=(&v593, (const std::string *)v188 + 2);
          v191 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
          if (v189 & 0x7FFFFFFFFFFFFFFFLL | v190 & 0x7FFFFFFF7FFFFFFFLL)
          {
            v192 = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
            if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v192 = v593.__r_.__value_.__l.__size_;
            if (v192)
            {
              if (DWORD2(v657))
              {
                v193 = 72 * DWORD2(v657);
                v194 = v657 + 56;
                while (1)
                {
                  if (!(*(_QWORD *)(v194 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v194 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                  {
                    if (*(char *)(v194 + 15) < 0 ? *(_QWORD *)v194 : *(unsigned __int8 *)(v194 + 15))
                      break;
                  }
                  v194 += 72;
                  v193 -= 72;
                  if (!v193)
                    goto LABEL_426;
                }
              }
              else
              {
LABEL_426:
                *(_QWORD *)&v618 = v189;
                *((_QWORD *)&v618 + 1) = v190;
                LOBYTE(v619[0]) = 2;
                sub_22E918310(v4, v3, 0, (uint64_t)&v618, (uint64_t (*)(uint64_t))sub_22E91B1CC, (uint64_t)&__dst);
                v191 = HIBYTE(v593.__r_.__value_.__r.__words[2]);
              }
            }
          }
          if (v191 < 0)
            operator delete(v593.__r_.__value_.__l.__data_);
          if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v591.__r_.__value_.__l.__data_);
          v187 = DWORD2(v657);
        }
        v196 = (char *)v657;
        if (v187)
        {
          v197 = 72 * v187;
          do
          {
            v2 = (uint64_t)&v196[v197];
            if (v196[v197 - 1] < 0)
              operator delete(*(void **)(v2 - 24));
            if (*(char *)(v2 - 33) < 0)
              operator delete(*(void **)(v2 - 56));
            v197 -= 72;
          }
          while (v197);
          v196 = (char *)v657;
        }
        if (v196 != (char *)v658)
          free(v196);
        memset(&v591, 0, sizeof(v591));
        v592 &= 0xF0u;
        memset(&v593, 0, sizeof(v593));
        v198 = v623;
        if ((_DWORD)v621)
        {
          v199 = 0;
          v200 = 72 * v621;
          v201 = 72 * v623;
          do
          {
            v202 = (const std::string *)((char *)v620 + v199);
            v203 = *(_QWORD *)((char *)v620 + v199);
            v204 = *(_QWORD *)((char *)v620 + v199 + 8);
            std::string::operator=(&v591, (const std::string *)((char *)v620 + v199 + 16));
            v592 = v202[1].__r_.__value_.__s.__data_[16];
            std::string::operator=(&v593, v202 + 2);
            if (v201 == v199 || v203 & 0x7FFFFFFFFFFFFFFFLL | v204 & 0x7FFFFFFF7FFFFFFFLL)
            {
              v205 = 0;
            }
            else
            {
              v208 = (uint64_t *)((char *)v620 + 72 * v198);
              v203 = *v208;
              v204 = v208[1];
              v205 = 2;
            }
            v206 = v201 == v199;
            v207 = v2 & 0xFFFFFFFC | v205;
            LODWORD(v2) = v207 | v206;
            *(_QWORD *)&v618 = v203;
            *((_QWORD *)&v618 + 1) = v204;
            LOBYTE(v619[0]) = v207 | v206;
            v4 = (uint64_t)a1;
            sub_22E918AE4((uint64_t)a1, a2, (uint64_t)&v591, &v618);
            v199 += 72;
          }
          while (v200 != v199);
          v3 = a2;
          if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v593.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v591.__r_.__value_.__l.__data_);
        v209 = (char *)v620;
        if ((_DWORD)v621)
        {
          v210 = 72 * v621;
          do
          {
            v2 = (uint64_t)&v209[v210];
            if (v209[v210 - 1] < 0)
              operator delete(*(void **)(v2 - 24));
            if (*(char *)(v2 - 33) < 0)
              operator delete(*(void **)(v2 - 56));
            v210 -= 72;
          }
          while (v210);
          v209 = (char *)v620;
        }
        if (v209 != v622)
          free(v209);
        v211 = (char *)v632;
        if (v633)
        {
          v212 = 72 * v633;
          do
          {
            v2 = (uint64_t)&v211[v212];
            if (v211[v212 - 1] < 0)
              operator delete(*(void **)(v2 - 24));
            if (*(char *)(v2 - 33) < 0)
              operator delete(*(void **)(v2 - 56));
            v212 -= 72;
          }
          while (v212);
          v211 = (char *)v632;
        }
        if (v211 != v634)
          free(v211);
        ++v12;
      }
      while (v12 != (uint64_t **)v575);
      goto LABEL_200;
    }
  }
  v213 = *(_QWORD *)(v3 + 16);
  v214 = v213 & 0xFFFFFFFFFFFFFFF8;
  if ((v213 & 4) != 0)
    v214 = *(_QWORD *)v214;
  v215 = v214 - 48;
  if (v214)
    v216 = (*(_WORD *)(v214 + 8) & 0x7Fu) - 24 >= 0xFFFFFFFB;
  else
    v216 = 0;
  v217 = !v216;
  if (v217)
    v218 = 0;
  else
    v218 = v215;
  v587 = v218;
  if ((v217 & 1) != 0)
    return;
  v586 = &v587;
  *(_QWORD *)&v618 = v619;
  *((_QWORD *)&v618 + 1) = 0x300000000;
  if (*(_QWORD *)(v4 + 168))
  {
    v619[0] = *(_QWORD *)(v4 + 168);
    DWORD2(v618) = 1;
  }
  sub_22EF2767C((_QWORD **)(v4 + 120), *(_DWORD *)(v3 + 24), (uint64_t)&v657);
  v219 = (uint64_t *)v657;
  if (DWORD2(v657))
  {
    v220 = DWORD2(v618);
    v221 = 8 * DWORD2(v657);
    do
    {
      v222 = *v219;
      if (v220 >= HIDWORD(v618))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        *(_QWORD *)(v618 + 8 * DWORD2(v618)) = v222;
        v220 = DWORD2(v618);
      }
      else
      {
        *(_QWORD *)(v618 + 8 * v220) = v222;
      }
      DWORD2(v618) = ++v220;
      ++v219;
      v221 -= 8;
    }
    while (v221);
    v219 = (uint64_t *)v657;
  }
  if (v219 != v658)
    free(v219);
  v230 = *(_DWORD *)(v3 + 28);
  v231 = (uint64_t **)v618;
  if ((v230 & 0x7F) == 0x18 && DWORD2(v618))
  {
    v232 = (uint64_t **)(v618 + 8 * DWORD2(v618));
    v563 = v232;
    while (1)
    {
      v233 = *v231;
      v234 = sub_22E915D44((uint64_t **)&v586, *v231);
      if (HIDWORD(v234))
        break;
LABEL_508:
      if (++v231 == v232)
      {
        v230 = *(_DWORD *)(v3 + 28);
        v231 = (uint64_t **)v618;
        goto LABEL_809;
      }
    }
    v235 = v234;
    v236 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)&v615 = &v616;
    *((_QWORD *)&v615 + 1) = 0x200000000;
    if ((v236 & 7) == 1)
    {
      v237 = v236 & 0xFFFFFFFFFFFFFFF8;
      if ((v236 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v242 = *(unsigned int **)(v237 + 16);
        v243 = *v242;
        v237 = (unint64_t)(v242 + 4);
        v238 = v243;
      }
      else
      {
        v238 = 0;
      }
      v232 = v563;
      v616 = v237;
      v617 = v238;
      v240 = 1;
      DWORD2(v615) = 1;
      v239 = v236 & 7;
    }
    else
    {
      v239 = v236 & 7;
      if (v239 < 2)
      {
        v240 = 0;
        v241 = 0;
        v232 = v563;
LABEL_536:
        v583 = v241;
        v584 = v615;
        v585 = v240;
        sub_22EF43D3C(v233, (__int16 *)v235, (uint64_t)&v583, (*(_QWORD *)(v3 + 56) >> 17) & 1, (uint64_t)&v632);
        v611 = v613;
        v612 = 0x100000000;
        if (v633)
        {
          sub_22E9179CC((uint64_t)&v611, (uint64_t *)&v632);
          v254 = v639;
          v614 = v639;
          *(_QWORD *)&v657 = v658;
          *((_QWORD *)&v657 + 1) = 0x100000000;
          if ((_DWORD)v612)
          {
            sub_22E9179CC((uint64_t)&v657, (uint64_t *)&v611);
            v254 = v614;
          }
        }
        else
        {
          v254 = v639;
          v614 = v639;
          *(_QWORD *)&v657 = v658;
          *((_QWORD *)&v657 + 1) = 0x100000000;
        }
        v663 = v254;
        v255 = sub_22F30C1B8(v3);
        v256 = DWORD2(v657);
        if (!v255 && DWORD2(v657) != (unint64_t)v663)
        {
          memset(&v591, 0, sizeof(v591));
          v592 &= 0xF0u;
          memset(&v593, 0, sizeof(v593));
          LOWORD(v594) = (unsigned __int16)v594 & 0xF000;
          v595 = 0u;
          v596 = 0u;
          v597 = 0u;
          v598 = 0;
          v599[0] &= 0xF8u;
          v312 = (uint64_t *)(v657 + 144 * v663);
          v314 = *v312;
          v313 = v312[1];
          sub_22F30BC44((uint64_t)&v591, (uint64_t)(v312 + 2));
          v599[0] = *((_BYTE *)v312 + 136);
          if (v314 & 0x7FFFFFFFFFFFFFFFLL | v313 & 0x7FFFFFFF7FFFFFFFLL)
          {
            v315 = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
            if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v315 = v593.__r_.__value_.__l.__size_;
            if (v315)
            {
              if (DWORD2(v657))
              {
                v316 = 144 * DWORD2(v657);
                v317 = v657 + 56;
                while (1)
                {
                  if (!(*(_QWORD *)(v317 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v317 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                  {
                    if (*(char *)(v317 + 15) < 0 ? *(_QWORD *)v317 : *(unsigned __int8 *)(v317 + 15))
                      break;
                  }
                  v317 += 144;
                  v316 -= 144;
                  if (!v316)
                    goto LABEL_656;
                }
              }
              else
              {
LABEL_656:
                *(_QWORD *)&__dst = v314;
                *((_QWORD *)&__dst + 1) = v313;
                LOBYTE(v601) = 2;
                sub_22E918310(v4, v3, 0, (uint64_t)&__dst, (uint64_t (*)(uint64_t))sub_22E91B1D0, (uint64_t)&v588);
              }
            }
          }
          if ((_QWORD)v597)
          {
            sub_22E916AE0((uint64_t *)&v597);
            operator delete((void *)v597);
          }
          if (SHIBYTE(v596) < 0)
            operator delete(*((void **)&v595 + 1));
          if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v593.__r_.__value_.__l.__data_);
          if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v591.__r_.__value_.__l.__data_);
          v256 = DWORD2(v657);
        }
        v257 = (char *)v657;
        if (v256)
        {
          v258 = 0;
          v259 = 144 * v256;
          do
          {
            v260 = (void **)&v257[v259];
            if (*(_QWORD *)&v257[v259 - 32])
            {
              sub_22E916AE0((uint64_t *)&v257[v259 - 32]);
              operator delete(*(void **)&v257[v259 - 32]);
            }
            if (*((char *)v260 - 33) < 0)
              operator delete(*(void **)&v257[v259 - 56]);
            v261 = (void **)&v257[v259];
            if (v257[v259 - 73] < 0)
              operator delete(*(v261 - 12));
            if (*((char *)v261 - 105) < 0)
              operator delete(*(v260 - 16));
            v257 -= 144;
            v258 += 144;
          }
          while (v259 != v258);
          v257 = (char *)v657;
        }
        if (v257 != (char *)v658)
          free(v257);
        memset(&v591, 0, sizeof(v591));
        v592 &= 0xF0u;
        memset(&v593, 0, sizeof(v593));
        LOWORD(v594) = (unsigned __int16)v594 & 0xF000;
        v595 = 0u;
        v596 = 0u;
        v597 = 0u;
        v598 = 0;
        v599[0] &= 0xF8u;
        v262 = v614;
        v263 = v612;
        if ((_DWORD)v612)
        {
          v264 = 0;
          do
          {
            v265 = (char *)v611 + 144 * v264;
            v266 = *(_QWORD *)v265;
            v267 = *((_QWORD *)v265 + 1);
            sub_22F30BC44((uint64_t)&v591, (uint64_t)(v265 + 16));
            v268 = v265[136];
            v599[0] = v268;
            if (v264 == v262 || v266 & 0x7FFFFFFFFFFFFFFFLL | v267 & 0x7FFFFFFF7FFFFFFFLL)
            {
              v269 = 0;
              v270 = 0;
            }
            else
            {
              v281 = (uint64_t *)((char *)v611 + 144 * v262);
              v266 = *v281;
              v267 = v281[1];
              v270 = 2;
              v269 = 1;
            }
            v577 = v264 == v262;
            v271 = a2;
            *(_QWORD *)&v605 = a2;
            if ((v268 & 1) != 0)
            {
              v588 = &v605;
              v589 = a1;
              if (v264 == v262)
              {
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v272 = *v296;
                  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                  {
                    sub_22EFC8E88(a2);
                    v298 = *(_QWORD *)v297 + 8 * *(unsigned int *)(v297 + 8);
                  }
                  else
                  {
                    v298 = 0;
                  }
                  if (v272 != (uint64_t *)v298)
                  {
                    while (*(_WORD *)(*v272 + 32) != 483)
                    {
                      if (++v272 == (uint64_t *)v298)
                      {
                        v272 = (uint64_t *)v298;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v272 = 0;
                }
                if ((*(_BYTE *)(a2 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(a2);
                  v273 = *(_QWORD *)v274 + 8 * *(unsigned int *)(v274 + 8);
                }
                else
                {
                  v273 = 0;
                }
                if (v272 != (uint64_t *)v273)
                {
                  v286 = a1[11];
                  v287 = *v272;
                  __dst = 0uLL;
                  v602 = 0;
                  v601 = 0;
                  v603 = 0;
                  v604 = ((((v604 >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v552 = sub_22F3A2490(v286, v266, v267, v287, 1, &__dst);
                  sub_22EFC8E88(a2);
                  v289 = *(unsigned int *)(v288 + 8);
                  v290 = *(_QWORD *)v288 + 8 * v289;
                  if ((uint64_t *)v290 != v272 + 1)
                  {
                    v549 = v288;
                    memmove(v272, v272 + 1, v290 - (_QWORD)(v272 + 1));
                    v288 = v549;
                    LODWORD(v289) = *(_DWORD *)(v549 + 8);
                  }
                  *(_DWORD *)(v288 + 8) = v289 - 1;
                  sub_22EFCA95C(a2, v552);
                }
                v275 = sub_22E91B1D4((uint64_t)&v588);
              }
              else
              {
                v282 = sub_22E91B1D4((uint64_t)&v588);
                v283 = a1[11];
                __dst = 0uLL;
                v602 = 0;
                v601 = 0;
                v603 = 0;
                v604 = ((((v604 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v275 = sub_22F3A2490(v283, v266, v267, v282, v269, &__dst);
              }
              sub_22EFCA95C(a2, v275);
              v268 = v599[0];
              v271 = v605;
            }
            if ((v268 & 4) != 0)
            {
              v588 = &v605;
              v589 = a1;
              if (v264 == v262)
              {
                if ((*(_BYTE *)(v271 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(v271);
                  v276 = *v299;
                  if ((*(_BYTE *)(v271 + 29) & 1) != 0)
                  {
                    sub_22EFC8E88(v271);
                    v301 = *(_QWORD *)v300 + 8 * *(unsigned int *)(v300 + 8);
                  }
                  else
                  {
                    v301 = 0;
                  }
                  if (v276 != (uint64_t *)v301)
                  {
                    while (*(_WORD *)(*v276 + 32) != 490)
                    {
                      if (++v276 == (uint64_t *)v301)
                      {
                        v276 = (uint64_t *)v301;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  v276 = 0;
                }
                if ((*(_BYTE *)(v271 + 29) & 1) != 0)
                {
                  sub_22EFC8E88(v271);
                  v277 = *(_QWORD *)v278 + 8 * *(unsigned int *)(v278 + 8);
                }
                else
                {
                  v277 = 0;
                }
                if (v276 != (uint64_t *)v277)
                {
                  v291 = a1[11];
                  v292 = *v276;
                  __dst = 0uLL;
                  v602 = 0;
                  v601 = 0;
                  v603 = 0;
                  v604 = ((((v604 >> 7) & 1) << 23) | 0x780000u) >> 16;
                  v553 = sub_22F3A2490(v291, v266, v267, v292, 1, &__dst);
                  sub_22EFC8E88(v271);
                  v294 = *(unsigned int *)(v293 + 8);
                  v295 = *(_QWORD *)v293 + 8 * v294;
                  if ((uint64_t *)v295 != v276 + 1)
                  {
                    v550 = v293;
                    memmove(v276, v276 + 1, v295 - (_QWORD)(v276 + 1));
                    v293 = v550;
                    LODWORD(v294) = *(_DWORD *)(v550 + 8);
                  }
                  *(_DWORD *)(v293 + 8) = v294 - 1;
                  sub_22EFCA95C(v271, v553);
                }
                v279 = sub_22E91B24C((uint64_t **)&v588);
              }
              else
              {
                v284 = sub_22E91B24C((uint64_t **)&v588);
                v285 = a1[11];
                __dst = 0uLL;
                v602 = 0;
                v601 = 0;
                v603 = 0;
                v604 = ((((v604 >> 7) & 1) << 23) | 0x780000u) >> 16;
                v279 = sub_22F3A2490(v285, v266, v267, v284, v269, &__dst);
              }
              sub_22EFCA95C(v271, v279);
              v271 = v605;
            }
            v280 = v232 & 0xFFFFFFFC | v270;
            LODWORD(v232) = v280 | v577;
            *(_QWORD *)&__dst = v266;
            *((_QWORD *)&__dst + 1) = v267;
            LOBYTE(v601) = v280 | v577;
            v3 = a2;
            v4 = (uint64_t)a1;
            sub_22E919544((unint64_t)a1, v271 | 4, (uint64_t)&v591, (uint64_t)&__dst);
            ++v264;
          }
          while (v264 != v263);
          v232 = v563;
          if ((_QWORD)v597)
          {
            sub_22E916AE0((uint64_t *)&v597);
            operator delete((void *)v597);
          }
        }
        if (SHIBYTE(v596) < 0)
          operator delete(*((void **)&v595 + 1));
        if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v593.__r_.__value_.__l.__data_);
        if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v591.__r_.__value_.__l.__data_);
        v302 = (char *)v611;
        if ((_DWORD)v612)
        {
          v303 = 0;
          v304 = 144 * v612;
          do
          {
            v305 = (void **)&v302[v304];
            if (*(_QWORD *)&v302[v304 - 32])
            {
              sub_22E916AE0((uint64_t *)&v302[v304 - 32]);
              operator delete(*(void **)&v302[v304 - 32]);
            }
            if (*((char *)v305 - 33) < 0)
              operator delete(*(void **)&v302[v304 - 56]);
            v306 = (void **)&v302[v304];
            if (v302[v304 - 73] < 0)
              operator delete(*(v306 - 12));
            if (*((char *)v306 - 105) < 0)
              operator delete(*(v305 - 16));
            v302 -= 144;
            v303 += 144;
          }
          while (v304 != v303);
          v302 = (char *)v611;
        }
        if (v302 != v613)
          free(v302);
        v307 = (char *)v632;
        if (v633)
        {
          v308 = 0;
          v309 = 144 * v633;
          do
          {
            v310 = (void **)&v307[v309];
            if (*(_QWORD *)&v307[v309 - 32])
            {
              sub_22E916AE0((uint64_t *)&v307[v309 - 32]);
              operator delete(*(void **)&v307[v309 - 32]);
            }
            if (*((char *)v310 - 33) < 0)
              operator delete(*(void **)&v307[v309 - 56]);
            v311 = (void **)&v307[v309];
            if (v307[v309 - 73] < 0)
              operator delete(*(v311 - 12));
            if (*((char *)v311 - 105) < 0)
              operator delete(*(v310 - 16));
            v307 -= 144;
            v308 += 144;
          }
          while (v309 != v308);
          v307 = (char *)v632;
        }
        if (v307 != v634)
          free(v307);
        if ((unint64_t *)v615 != &v616)
          free((void *)v615);
        goto LABEL_508;
      }
      if (v239 == 2)
      {
        v244 = 1;
      }
      else
      {
        v245 = *(_DWORD *)(v236 & 0xFFFFFFFFFFFFFFF8);
        v244 = v245 - 3;
        if (v245 == 3)
        {
          v240 = 0;
          v232 = v563;
          goto LABEL_535;
        }
      }
      v240 = 0;
      v246 = 0;
      v247 = v244;
      do
      {
        v248 = v236 & 0xFFFFFFFFFFFFFFF8;
        if ((v236 & 7) == 7)
          v248 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFFFF8) + 8 * v246 + 16);
        if (v248)
        {
          v249 = *(unsigned int **)(v248 + 16);
          v252 = *v249;
          v250 = v249 + 4;
          v251 = v252;
        }
        else
        {
          v250 = 0;
          v251 = 0;
        }
        if (v240 >= HIDWORD(v615))
        {
          v576 = v239;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v239 = v576;
          v240 = DWORD2(v615);
        }
        v253 = (_QWORD *)(v615 + 16 * v240);
        *v253 = v250;
        v253[1] = v251;
        v240 = ++DWORD2(v615);
        ++v246;
      }
      while (v247 != v246);
      v3 = a2;
      v4 = (uint64_t)a1;
      v232 = v563;
    }
    if (v239 < 2)
    {
      v241 = 0;
      goto LABEL_536;
    }
    if (v239 == 2)
    {
      v241 = 1;
      goto LABEL_536;
    }
LABEL_535:
    v241 = *(_DWORD *)(v236 & 0xFFFFFFFFFFFFFFF8) - 3;
    goto LABEL_536;
  }
LABEL_809:
  if ((v230 & 0x7F) == 0x19 && DWORD2(v618))
  {
    v571 = &v231[DWORD2(v618)];
    v377 = v609;
    while (1)
    {
      v378 = *v231;
      v379 = sub_22E915D44((uint64_t **)&v586, *v231);
      if (!HIDWORD(v379))
        goto LABEL_813;
      v380 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v3 + 40) & 7) != 0 || v380 == 0)
      {
        v384 = 0;
        v383 = "";
      }
      else
      {
        v382 = *(_DWORD **)(v380 + 16);
        v385 = *v382;
        v383 = (unsigned __int8 *)(v382 + 4);
        v384 = v385;
      }
      sub_22EF439C0(v383, v384, (unint64_t *)v378, v379, (*(_DWORD *)(v3 + 76) & 0x4000) == 0, (uint64_t)&v632);
      v607 = v609;
      v608 = 0x100000000;
      if (v633)
      {
        sub_22E917E58((uint64_t)&v607, (uint64_t)&v632);
        v386 = v637;
        v610 = v637;
        *(_QWORD *)&v657 = v658;
        *((_QWORD *)&v657 + 1) = 0x100000000;
        if ((_DWORD)v608)
        {
          sub_22E917E58((uint64_t)&v657, (uint64_t)&v607);
          v386 = v610;
        }
      }
      else
      {
        v386 = v637;
        v610 = v637;
        *(_QWORD *)&v657 = v658;
        *((_QWORD *)&v657 + 1) = 0x100000000;
      }
      v661 = v386;
      if (!sub_22F30C1B8(v3) && DWORD2(v657) != v661)
      {
        __dst = 0uLL;
        memset(&v591, 0, sizeof(v591));
        v592 &= 0xF0u;
        memset(&v593, 0, sizeof(v593));
        LOBYTE(v594) = v594 & 0xF8;
        *(_QWORD *)&v596 = 0;
        v595 = 0uLL;
        BYTE8(v596) &= 0xF8u;
        *(_QWORD *)&v615 = &__dst;
        *((_QWORD *)&v615 + 1) = &v591;
        sub_22E91B358((uint64_t)&v615, v657 + 112 * v661);
        if (__dst & 0x7FFFFFFFFFFFFFFFLL | *((_QWORD *)&__dst + 1) & 0x7FFFFFFF7FFFFFFFLL)
        {
          v387 = *((_BYTE *)&v593.__r_.__value_.__s + 23) & 0x7F;
          if ((v593.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v387 = v593.__r_.__value_.__l.__size_;
          if (v387)
          {
            if (DWORD2(v657))
            {
              v388 = 112 * DWORD2(v657);
              v389 = v657 + 56;
              while (1)
              {
                if (!(*(_QWORD *)(v389 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v389 - 48) & 0x7FFFFFFF7FFFFFFFLL))
                {
                  if (*(char *)(v389 + 15) < 0 ? *(_QWORD *)v389 : *(unsigned __int8 *)(v389 + 15))
                    break;
                }
                v389 += 112;
                v388 -= 112;
                if (!v388)
                  goto LABEL_839;
              }
            }
            else
            {
LABEL_839:
              v615 = __dst;
              LOBYTE(v616) = 2;
              sub_22E918310(v4, v3, 0, (uint64_t)&v615, (uint64_t (*)(uint64_t))sub_22E91B3CC, (uint64_t)&v588);
            }
          }
        }
        if (SBYTE7(v596) < 0)
          operator delete((void *)v595);
        if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v593.__r_.__value_.__l.__data_);
        if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v591.__r_.__value_.__l.__data_);
      }
      sub_22E918278((char **)&v657);
      v605 = 0uLL;
      memset(&v591, 0, sizeof(v591));
      v592 &= 0xF0u;
      memset(&v593, 0, sizeof(v593));
      LOBYTE(v594) = v594 & 0xF8;
      *(_QWORD *)&v596 = 0;
      v595 = 0uLL;
      BYTE8(v596) &= 0xF8u;
      v391 = v610;
      v574 = v608;
      if (!(_DWORD)v608)
        goto LABEL_903;
      v392 = 0;
      do
      {
        *(_QWORD *)&v615 = &v605;
        *((_QWORD *)&v615 + 1) = &v591;
        sub_22E91B358((uint64_t)&v615, (uint64_t)&v607[112 * v392]);
        if (v392 == v391 || v605 & 0x7FFFFFFFFFFFFFFFLL | *((_QWORD *)&v605 + 1) & 0x7FFFFFFF7FFFFFFFLL)
        {
          v579 = 0;
          v393 = 0;
        }
        else
        {
          v605 = *(_OWORD *)&v607[112 * v391];
          v393 = 2;
          v579 = 1;
        }
        v394 = v392 == v391;
        v395 = v605;
        v396 = v377 & 0xFFFFFFFC | v393;
        LODWORD(v377) = v396 | v394;
        v606 = v3;
        __dst = v605;
        LOBYTE(v601) = v396 | v394;
        sub_22E918538((_QWORD *)v4, v3, (uint64_t)&v591, (uint64_t)&__dst);
        v397 = BYTE8(v596);
        if ((BYTE8(v596) & 1) != 0)
        {
          v398 = v606;
          if (v392 == v391)
          {
            if ((*(_BYTE *)(v606 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v606);
              v399 = *v430;
              if ((*(_BYTE *)(v398 + 29) & 1) != 0)
              {
                sub_22EFC8E88(v398);
                v432 = *(_QWORD *)v431 + 8 * *(unsigned int *)(v431 + 8);
              }
              else
              {
                v432 = 0;
              }
              if (v399 != (uint64_t *)v432)
              {
                while (*(_WORD *)(*v399 + 32) != 321)
                {
                  if (++v399 == (uint64_t *)v432)
                  {
                    v399 = (uint64_t *)v432;
                    break;
                  }
                }
              }
            }
            else
            {
              v399 = 0;
            }
            if ((*(_BYTE *)(v398 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v398);
              v400 = *(_QWORD *)v401 + 8 * *(unsigned int *)(v401 + 8);
            }
            else
            {
              v400 = 0;
            }
            if (v399 != (uint64_t *)v400)
            {
              v414 = a1[11];
              v415 = *v399;
              v615 = 0uLL;
              LODWORD(v617) = 0;
              v616 = 0;
              WORD2(v617) = 0;
              BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
              v559 = (void *)sub_22F3A2490(v414, v395, *((uint64_t *)&v395 + 1), v415, 1, &v615);
              sub_22EFC8E88(v398);
              v417 = v416;
              v418 = *(unsigned int *)(v416 + 8);
              v419 = *(_QWORD *)v416 + 8 * v418;
              if ((uint64_t *)v419 != v399 + 1)
              {
                memmove(v399, v399 + 1, v419 - (_QWORD)(v399 + 1));
                LODWORD(v418) = *(_DWORD *)(v417 + 8);
              }
              *(_DWORD *)(v417 + 8) = v418 - 1;
              sub_22EFCA95C(v398, (uint64_t)v559);
            }
            v3 = a2;
            if ((v397 & 2) != 0)
            {
              v402 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
              *(_QWORD *)(v402 + 8) = 0;
              *(_QWORD *)(v402 + 16) = 0;
              *(_QWORD *)v402 = 0;
              *(_DWORD *)(v402 + 24) = 0;
              *(_BYTE *)(v402 + 30) = 0;
              *(_WORD *)(v402 + 28) = 480;
              v403 = *(_BYTE *)(v402 + 34);
              *(_WORD *)(v402 + 32) = 321;
              *(_BYTE *)(v402 + 34) = v403 & 0xE0;
              goto LABEL_861;
            }
          }
          else
          {
            v410 = a1[11];
            if ((BYTE8(v596) & 2) != 0)
            {
              v427 = sub_22E3CD3D4(v410 + 2032, 40, 3);
              *(_QWORD *)(v427 + 8) = 0;
              *(_QWORD *)(v427 + 16) = 0;
              *(_QWORD *)v427 = 0;
              *(_DWORD *)(v427 + 24) = 0;
              *(_BYTE *)(v427 + 30) = 0;
              *(_WORD *)(v427 + 28) = 480;
              v428 = *(_BYTE *)(v427 + 34);
              *(_WORD *)(v427 + 32) = 321;
              *(_BYTE *)(v427 + 34) = v428 & 0xE0;
              v429 = a1[11];
              v615 = 0uLL;
              LODWORD(v617) = 0;
              v616 = 0;
              WORD2(v617) = 0;
              BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
              v411 = sub_22F3A2490(v429, v395, *((uint64_t *)&v395 + 1), v427, v579, &v615);
            }
            else
            {
              v615 = 0uLL;
              LODWORD(v617) = 0;
              v616 = 0;
              WORD2(v617) = 0;
              BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
              v411 = sub_22F3A25F4(v410, v395, *((uint64_t *)&v395 + 1), 321, v579, &v615);
            }
            v402 = v411;
LABEL_861:
            sub_22EFCA95C(v398, v402);
          }
          v397 = BYTE8(v596);
          v4 = (uint64_t)a1;
        }
        if ((v397 & 4) != 0)
        {
          v404 = v4;
          v405 = v606;
          v588 = &v606;
          v589 = (_QWORD *)v404;
          if (v392 == v391)
          {
            if ((*(_BYTE *)(v606 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v606);
              v406 = *v433;
              if ((*(_BYTE *)(v405 + 29) & 1) != 0)
              {
                sub_22EFC8E88(v405);
                v435 = *(_QWORD *)v434 + 8 * *(unsigned int *)(v434 + 8);
              }
              else
              {
                v435 = 0;
              }
              if (v406 != (uint64_t *)v435)
              {
                while (*(_WORD *)(*v406 + 32) != 269)
                {
                  if (++v406 == (uint64_t *)v435)
                  {
                    v406 = (uint64_t *)v435;
                    break;
                  }
                }
              }
            }
            else
            {
              v406 = 0;
            }
            if ((*(_BYTE *)(v405 + 29) & 1) != 0)
            {
              sub_22EFC8E88(v405);
              v407 = *(_QWORD *)v408 + 8 * *(unsigned int *)(v408 + 8);
            }
            else
            {
              v407 = 0;
            }
            if (v406 != (uint64_t *)v407)
            {
              v420 = a1[11];
              v421 = *v406;
              v615 = 0uLL;
              LODWORD(v617) = 0;
              v616 = 0;
              WORD2(v617) = 0;
              BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
              v422 = sub_22F3A2490(v420, v395, *((uint64_t *)&v395 + 1), v421, 1, &v615);
              sub_22EFC8E88(v405);
              v424 = v423;
              v425 = *(unsigned int *)(v423 + 8);
              v426 = *(_QWORD *)v423 + 8 * v425;
              if ((uint64_t *)v426 != v406 + 1)
              {
                memmove(v406, v406 + 1, v426 - (_QWORD)(v406 + 1));
                LODWORD(v425) = *(_DWORD *)(v424 + 8);
              }
              *(_DWORD *)(v424 + 8) = v425 - 1;
              sub_22EFCA95C(v405, v422);
              v3 = a2;
            }
            v409 = sub_22E91B3D0(&v588);
          }
          else
          {
            v412 = sub_22E91B3D0(&v588);
            v413 = a1[11];
            v615 = 0uLL;
            LODWORD(v617) = 0;
            v616 = 0;
            WORD2(v617) = 0;
            BYTE6(v617) = ((((BYTE6(v617) >> 7) & 1) << 23) | 0x780000u) >> 16;
            v409 = sub_22F3A2490(v413, v395, *((uint64_t *)&v395 + 1), v412, v579, &v615);
          }
          sub_22EFCA95C(v405, v409);
          v4 = (uint64_t)a1;
        }
        ++v392;
      }
      while (v392 != v574);
      v377 = v609;
      if (SBYTE7(v596) < 0)
        operator delete((void *)v595);
LABEL_903:
      if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v593.__r_.__value_.__l.__data_);
      if (SHIBYTE(v591.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v591.__r_.__value_.__l.__data_);
      sub_22E918278(&v607);
      sub_22E918278((char **)&v632);
LABEL_813:
      if (++v231 == v571)
      {
        v231 = (uint64_t **)v618;
        break;
      }
    }
  }
LABEL_908:
  if (v231 != v619)
  {
    v104 = v231;
LABEL_204:
    free(v104);
  }
}

uint64_t sub_22E915D44(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v19;
  unsigned __int8 *v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  size_t v26;
  unsigned int v27;

  v4 = *a1;
  v5 = **a1;
  v6 = *(_DWORD *)(v5 + 28);
  v7 = v6 & 0x7F;
  if (v5)
    v8 = v7 == 23;
  else
    v8 = 0;
  if (v8)
  {
    v14 = *(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v5 + 40) & 7) != 0 || v14 == 0)
    {
      v21 = 0;
      v20 = "";
    }
    else
    {
      v19 = *(_DWORD **)(v14 + 16);
      v22 = *v19;
      v20 = (unsigned __int8 *)(v19 + 4);
      v21 = v22;
    }
    v23 = sub_22F361CB0(a2, v20, v21);
    goto LABEL_36;
  }
  if (v5)
    v9 = v7 == 20;
  else
    v9 = 0;
  if (v9)
  {
    v16 = sub_22F3B55B8(v5);
    if (!v16)
      goto LABEL_16;
    **a1 = v16;
    v4 = *a1;
    v5 = **a1;
    v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 0x7F) == 0x13)
  {
    v10 = *(_QWORD *)(v5 + 104);
    if (!v10)
      goto LABEL_17;
    *v4 = v10;
    v4 = *a1;
    v5 = **a1;
    v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 0x7E) == 0x14)
  {
    v10 = *(_QWORD *)(v5 + 88);
    if (v10)
    {
      *v4 = v10;
      v5 = **a1;
      v6 = *(_DWORD *)(v5 + 28);
      goto LABEL_15;
    }
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
LABEL_15:
  if ((v6 & 0x7F) != 0x16)
  {
LABEL_16:
    v11 = 0;
    LOBYTE(v10) = 0;
LABEL_18:
    v12 = 0;
    return v10 | v11 | v12;
  }
  v17 = *(_QWORD *)(v5 + 40) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v5 + 40) & 7) != 0 || v17 == 0)
  {
    v26 = 0;
    v25 = "";
  }
  else
  {
    v24 = *(_DWORD **)(v17 + 16);
    v27 = *v24;
    v25 = (unsigned __int8 *)(v24 + 4);
    v26 = v27;
  }
  v23 = sub_22F361B04(a2, v25, v26);
LABEL_36:
  v12 = v23 & 0xFFFFFF00;
  v11 = 0x100000000;
  if ((v23 & 0xFF00000000) != 0)
  {
    LOBYTE(v10) = v23;
  }
  else
  {
    v11 = 0;
    LOBYTE(v10) = 0;
  }
  if ((v23 & 0xFF00000000) == 0)
    v12 = 0;
  return v10 | v11 | v12;
}

uint64_t sub_22E915EB0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void **v18;
  __int128 v19;
  _BYTE *v20;
  void **v21;
  __int128 v22;
  _BYTE *v23;
  void **v24;
  __int128 v25;
  char v27;
  char v28;

  if (a1 != a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_22E916148((uint64_t)&v27, *(_QWORD *)a2, *(_QWORD *)a2 + 104 * v4, *(_QWORD *)a1);
        v7 = v6;
        v8 = *(_QWORD *)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v8 = *(_QWORD *)a1;
        v7 = *(_QWORD *)a1;
      }
      for (i = v8 + 104 * v5; i != v7; i -= 104)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
        if (*(char *)(i - 33) < 0)
          operator delete(*(void **)(i - 56));
        if (*(char *)(i - 65) < 0)
          operator delete(*(void **)(i - 88));
      }
      goto LABEL_32;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      sub_22E9160C8((uint64_t *)a1);
      sub_22F30BB6C(a1);
    }
    else if ((_DWORD)v5)
    {
      sub_22E916148((uint64_t)&v28, *(_QWORD *)a2, *(_QWORD *)a2 + 104 * v5, *(_QWORD *)a1);
      goto LABEL_20;
    }
    v5 = 0;
LABEL_20:
    v10 = *(unsigned int *)(a2 + 8);
    if (v5 != v10)
    {
      v11 = *(_QWORD *)a2;
      v12 = v11 + 104 * v10;
      v13 = *(_QWORD *)a1;
      v14 = 104 * v5;
      do
      {
        v15 = v11 + v14;
        v16 = v13 + v14;
        *(_OWORD *)(v13 + v14) = *(_OWORD *)(v11 + v14);
        v17 = (_BYTE *)(v13 + v14 + 16);
        v18 = (void **)(v11 + v14 + 16);
        if (*(char *)(v11 + v14 + 39) < 0)
        {
          sub_22E3BB2B4(v17, *v18, *(_QWORD *)(v15 + 24));
        }
        else
        {
          v19 = *(_OWORD *)v18;
          *(_QWORD *)(v13 + v14 + 32) = *(_QWORD *)(v11 + v14 + 32);
          *(_OWORD *)v17 = v19;
        }
        *(_BYTE *)(v16 + 40) = *(_BYTE *)(v15 + 40);
        v20 = (_BYTE *)(v13 + v14 + 48);
        v21 = (void **)(v11 + v14 + 48);
        if (*(char *)(v15 + 71) < 0)
        {
          sub_22E3BB2B4(v20, *v21, *(_QWORD *)(v11 + v14 + 56));
        }
        else
        {
          v22 = *(_OWORD *)v21;
          *(_QWORD *)(v13 + v14 + 64) = *(_QWORD *)(v11 + v14 + 64);
          *(_OWORD *)v20 = v22;
        }
        *(_BYTE *)(v16 + 72) = *(_BYTE *)(v15 + 72);
        v23 = (_BYTE *)(v13 + v14 + 80);
        v24 = (void **)(v11 + v14 + 80);
        if (*(char *)(v15 + 103) < 0)
        {
          sub_22E3BB2B4(v23, *v24, *(_QWORD *)(v11 + v14 + 88));
        }
        else
        {
          v25 = *(_OWORD *)v24;
          *(_QWORD *)(v13 + v14 + 96) = *(_QWORD *)(v11 + v14 + 96);
          *(_OWORD *)v23 = v25;
        }
        v13 += 104;
        v11 += 104;
      }
      while (v15 + 104 != v12);
    }
LABEL_32:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_22E9160C8(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = 104 * v2;
    do
    {
      v5 = v3 + v4;
      if (*(char *)(v3 + v4 - 1) < 0)
        operator delete(*(void **)(v5 - 24));
      if (*(char *)(v5 - 33) < 0)
        operator delete(*(void **)(v3 + v4 - 56));
      if (*(char *)(v3 + v4 - 65) < 0)
        operator delete(*(void **)(v5 - 88));
      v4 -= 104;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t sub_22E916148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    std::string::operator=((std::string *)(a4 + 16), (const std::string *)(v5 + 16));
    *(_BYTE *)(a4 + 40) = *(_BYTE *)(v5 + 40);
    std::string::operator=((std::string *)(a4 + 48), (const std::string *)(v5 + 48));
    *(_BYTE *)(a4 + 72) = *(_BYTE *)(v5 + 72);
    std::string::operator=((std::string *)(a4 + 80), (const std::string *)(v5 + 80));
    a4 += 104;
    v5 += 104;
  }
  while (v5 != v6);
  return v6;
}

void sub_22E9161D8(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 104 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
      v6 = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      *(_BYTE *)(a2 + 72) = *(_BYTE *)(v3 + 72);
      v7 = *(_OWORD *)(v3 + 80);
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(v3 + 96);
      *(_OWORD *)(a2 + 80) = v7;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 96) = 0;
      *(_QWORD *)(v3 + 80) = 0;
      v3 += 104;
      a2 += 104;
    }
    while (v3 != v4);
    v8 = *((_DWORD *)a1 + 2);
    if (v8)
    {
      v9 = *a1;
      v10 = 104 * v8;
      do
      {
        v11 = v9 + v10;
        if (*(char *)(v9 + v10 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        if (*(char *)(v11 - 33) < 0)
          operator delete(*(void **)(v9 + v10 - 56));
        if (*(char *)(v9 + v10 - 65) < 0)
          operator delete(*(void **)(v11 - 88));
        v10 -= 104;
      }
      while (v10);
    }
  }
}

char *sub_22E9162D4(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[24] = *((_BYTE *)a2 + 24);
  v5 = __dst + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_22E3BB2B4(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = a2[2];
    *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

char **sub_22E916354(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  void **v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 104 * v3;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 1] < 0)
        operator delete(*(v5 - 3));
      if (*((char *)v5 - 33) < 0)
        operator delete(*(void **)&v2[v4 - 56]);
      if (v2[v4 - 65] < 0)
        operator delete(*(v5 - 11));
      v4 -= 104;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22E9163EC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  void **v28;
  __int128 v29;
  _BYTE *v30;
  void **v31;
  __int128 v32;
  _BYTE *v33;
  void **v34;
  __int128 v35;
  char *v36;

  if (a1 != a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v9 = *(_OWORD **)a2;
        v10 = *(_QWORD *)a2 + 136 * v4;
        v11 = *(_OWORD **)a1;
        do
        {
          *v11 = *v9;
          sub_22F30BC44((uint64_t)(v11 + 1), (uint64_t)(v9 + 1));
          v11 = (_OWORD *)((char *)v11 + 136);
          v9 = (_OWORD *)((char *)v9 + 136);
        }
        while (v9 != (_OWORD *)v10);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_OWORD **)a1;
      }
      else
      {
        v12 = *(_OWORD **)a1;
        v11 = *(_OWORD **)a1;
      }
      if ((_OWORD *)((char *)v12 + 136 * v5) != v11)
      {
        v13 = (uint64_t)v12 + 136 * v5 - 48;
        do
        {
          if (*(_QWORD *)(v13 + 24))
          {
            sub_22E916AE0((uint64_t *)(v13 + 24));
            operator delete(*(void **)(v13 + 24));
          }
          if (*(char *)(v13 + 23) < 0)
            operator delete(*(void **)v13);
          if (*(char *)(v13 - 17) < 0)
            operator delete(*(void **)(v13 - 40));
          if (*(char *)(v13 - 49) < 0)
            operator delete(*(void **)(v13 - 72));
          v14 = (_OWORD *)(v13 - 88);
          v13 -= 136;
        }
        while (v14 != v11);
      }
      goto LABEL_50;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v15 = 0;
        v16 = *(_OWORD **)a1;
        v17 = 136 * v5;
        do
        {
          v18 = (void **)((char *)v16 + v17);
          if (*(_QWORD *)((char *)v16 + v17 - 24))
          {
            sub_22E916AE0((uint64_t *)((char *)v16 + v17 - 24));
            operator delete(*(void **)((char *)v16 + v17 - 24));
          }
          if (*((char *)v18 - 25) < 0)
            operator delete(*(void **)((char *)v16 + v17 - 48));
          v19 = (void **)((char *)v16 + v17);
          if (*((char *)v16 + v17 - 65) < 0)
            operator delete(*(v19 - 11));
          if (*((char *)v19 - 97) < 0)
            operator delete(*(v18 - 15));
          v16 = (_OWORD *)((char *)v16 - 136);
          v15 += 136;
        }
        while (v17 != v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BBD8(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_OWORD **)a2;
      v7 = *(_QWORD *)a2 + 136 * v5;
      v8 = *(_OWORD **)a1;
      do
      {
        *v8 = *v6;
        sub_22F30BC44((uint64_t)(v8 + 1), (uint64_t)(v6 + 1));
        v6 = (_OWORD *)((char *)v6 + 136);
        v8 = (_OWORD *)((char *)v8 + 136);
      }
      while (v6 != (_OWORD *)v7);
LABEL_38:
      v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        v21 = *(_OWORD **)a2;
        v22 = *(_QWORD *)a2 + 136 * v20;
        v23 = *(_OWORD **)a1;
        v24 = 136 * v5;
        do
        {
          v25 = (char *)v21 + v24;
          v26 = (char *)v23 + v24;
          *(_OWORD *)((char *)v23 + v24) = *(_OWORD *)((char *)v21 + v24);
          v27 = (char *)v23 + v24 + 16;
          v28 = (void **)((char *)v21 + v24 + 16);
          if (*((char *)v21 + v24 + 39) < 0)
          {
            sub_22E3BB2B4(v27, *v28, *((_QWORD *)v25 + 3));
          }
          else
          {
            v29 = *(_OWORD *)v28;
            *(_QWORD *)((char *)v23 + v24 + 32) = *(_QWORD *)((char *)v21 + v24 + 32);
            *(_OWORD *)v27 = v29;
          }
          v26[40] = v25[40];
          v30 = (char *)v23 + v24 + 48;
          v31 = (void **)((char *)v21 + v24 + 48);
          if (v25[71] < 0)
          {
            sub_22E3BB2B4(v30, *v31, *(_QWORD *)((char *)v21 + v24 + 56));
          }
          else
          {
            v32 = *(_OWORD *)v31;
            *(_QWORD *)((char *)v23 + v24 + 64) = *(_QWORD *)((char *)v21 + v24 + 64);
            *(_OWORD *)v30 = v32;
          }
          *(_OWORD *)(v26 + 72) = *(_OWORD *)(v25 + 72);
          v33 = (char *)v23 + v24 + 88;
          v34 = (void **)((char *)v21 + v24 + 88);
          if (v25[111] < 0)
          {
            sub_22E3BB2B4(v33, *v34, *(_QWORD *)((char *)v21 + v24 + 96));
          }
          else
          {
            v35 = *(_OWORD *)v34;
            *(_QWORD *)((char *)v23 + v24 + 104) = *(_QWORD *)((char *)v21 + v24 + 104);
            *(_OWORD *)v33 = v35;
          }
          *((_QWORD *)v26 + 14) = 0;
          *((_QWORD *)v26 + 15) = 0;
          v36 = v26 + 112;
          *((_QWORD *)v36 + 2) = 0;
          sub_22E916C98(v36, *((_QWORD *)v25 + 14), *((_QWORD *)v25 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 15) - *((_QWORD *)v25 + 14)) >> 5));
          v23 = (_OWORD *)((char *)v23 + 136);
          v21 = (_OWORD *)((char *)v21 + 136);
        }
        while (v25 + 136 != (char *)v22);
      }
LABEL_50:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_38;
  }
  return a1;
}

void sub_22E91670C(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  std::string *v17;
  _BYTE *v18;
  void **v19;
  _BYTE *v20;
  void **v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  _BYTE *v28;
  void **p_size;
  __int128 v30;
  _BYTE *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;

  v8 = a1[2];
  v9 = (std::string *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 5) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v9) >> 5) >= a4)
    {
      sub_22E916A50((int)&v38, __str, a3, v9);
      v35 = v34;
      v36 = a1[1];
      if (v36 != v34)
      {
        do
        {
          if (*(char *)(v36 - 9) < 0)
            operator delete(*(void **)(v36 - 32));
          if (*(char *)(v36 - 41) < 0)
            operator delete(*(void **)(v36 - 64));
          if (*(char *)(v36 - 73) < 0)
            operator delete(*(void **)(v36 - 96));
          v36 -= 96;
        }
        while (v36 != v35);
      }
      a1[1] = v35;
    }
    else
    {
      v22 = (std::string *)((char *)__str + 32 * ((a1[1] - (uint64_t)v9) >> 5));
      sub_22E916A50((int)&v37, __str, v22, v9);
      v23 = a1[1];
      if (v22 != a3)
      {
        v24 = 0;
        do
        {
          v25 = v23 + v24 * 24;
          v26 = &v22[v24];
          if (SHIBYTE(v22[v24].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_22E3BB2B4((_BYTE *)v25, v26->__r_.__value_.__l.__data_, v26->__r_.__value_.__l.__size_);
          }
          else
          {
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            *(_QWORD *)(v25 + 16) = *((_QWORD *)&v26->__r_.__value_.__l + 2);
            *(_OWORD *)v25 = v27;
          }
          *(_BYTE *)(v23 + v24 * 24 + 24) = v22[v24 + 1].__r_.__value_.__s.__data_[0];
          v28 = (_BYTE *)(v23 + v24 * 24 + 32);
          p_size = (void **)&v22[v24 + 1].__r_.__value_.__l.__size_;
          if (v22[v24 + 2].__r_.__value_.__s.__data_[7] < 0)
          {
            sub_22E3BB2B4(v28, *p_size, v22[v24 + 1].__r_.__value_.__r.__words[2]);
          }
          else
          {
            v30 = *(_OWORD *)p_size;
            *(_QWORD *)(v23 + v24 * 24 + 48) = v22[v24 + 2].__r_.__value_.__l.__data_;
            *(_OWORD *)v28 = v30;
          }
          *(_BYTE *)(v23 + v24 * 24 + 56) = v22[v24 + 2].__r_.__value_.__s.__data_[8];
          v31 = (_BYTE *)(v23 + v24 * 24 + 64);
          v32 = (void **)&v22[v24 + 2].__r_.__value_.__r.__words[2];
          if (v22[v24 + 3].__r_.__value_.__s.__data_[15] < 0)
          {
            sub_22E3BB2B4(v31, *v32, v22[v24 + 3].__r_.__value_.__r.__words[0]);
          }
          else
          {
            v33 = *(_OWORD *)v32;
            *(_QWORD *)(v23 + v24 * 24 + 80) = v22[v24 + 3].__r_.__value_.__l.__size_;
            *(_OWORD *)v31 = v33;
          }
          *(_BYTE *)(v23 + v24 * 24 + 88) = v22[v24 + 3].__r_.__value_.__s.__data_[16];
          v24 += 4;
        }
        while (&v22[v24] != a3);
        v23 += v24 * 24;
      }
      a1[1] = v23;
    }
  }
  else
  {
    if (v9)
    {
      sub_22E916AE0(a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      goto LABEL_50;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v11;
    if (v12 > 0x2AAAAAAAAAAAAAALL)
LABEL_50:
      abort();
    v13 = 3 * v12;
    v14 = operator new(96 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[32 * v13];
    if (__str != a3)
    {
      v15 = 0;
      do
      {
        v16 = &v14[v15 * 24];
        v17 = &__str[v15];
        if (SHIBYTE(__str[v15].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_22E3BB2B4(v16, v17->__r_.__value_.__l.__data_, v17->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v16 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          *((_QWORD *)v16 + 2) = *((_QWORD *)&v17->__r_.__value_.__l + 2);
        }
        v14[v15 * 24 + 24] = __str[v15 + 1].__r_.__value_.__s.__data_[0];
        v18 = &v14[v15 * 24 + 32];
        v19 = (void **)&__str[v15 + 1].__r_.__value_.__l.__size_;
        if (__str[v15 + 2].__r_.__value_.__s.__data_[7] < 0)
        {
          sub_22E3BB2B4(v18, *v19, __str[v15 + 1].__r_.__value_.__r.__words[2]);
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v19;
          *(_QWORD *)&v14[v15 * 24 + 48] = __str[v15 + 2].__r_.__value_.__l.__data_;
        }
        v14[v15 * 24 + 56] = __str[v15 + 2].__r_.__value_.__s.__data_[8];
        v20 = &v14[v15 * 24 + 64];
        v21 = (void **)&__str[v15 + 2].__r_.__value_.__r.__words[2];
        if (__str[v15 + 3].__r_.__value_.__s.__data_[15] < 0)
        {
          sub_22E3BB2B4(v20, *v21, __str[v15 + 3].__r_.__value_.__r.__words[0]);
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)v21;
          *(_QWORD *)&v14[v15 * 24 + 80] = __str[v15 + 3].__r_.__value_.__l.__size_;
        }
        v14[v15 * 24 + 88] = __str[v15 + 3].__r_.__value_.__s.__data_[16];
        v15 += 4;
      }
      while (&__str[v15] != a3);
      v14 += v15 * 24;
    }
    a1[1] = (uint64_t)v14;
  }
}

std::string *sub_22E916A50(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    this[1].__r_.__value_.__s.__data_[0] = v5[1].__r_.__value_.__s.__data_[0];
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    this[2].__r_.__value_.__s.__data_[8] = v5[2].__r_.__value_.__s.__data_[8];
    std::string::operator=((std::string *)((char *)this + 64), (std::string *)((char *)v5 + 64));
    this[3].__r_.__value_.__s.__data_[16] = v5[3].__r_.__value_.__s.__data_[16];
    this += 4;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

void sub_22E916AE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 96)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
    if (*(char *)(i - 41) < 0)
      operator delete(*(void **)(i - 64));
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  a1[1] = v2;
}

void sub_22E916B4C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 136 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
      v6 = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(v3 + 72);
      v7 = *(_OWORD *)(v3 + 88);
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(v3 + 104);
      *(_OWORD *)(a2 + 88) = v7;
      *(_QWORD *)(v3 + 96) = 0;
      *(_QWORD *)(v3 + 104) = 0;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(v3 + 112);
      *(_QWORD *)(a2 + 128) = *(_QWORD *)(v3 + 128);
      *(_QWORD *)(v3 + 112) = 0;
      *(_QWORD *)(v3 + 120) = 0;
      *(_QWORD *)(v3 + 128) = 0;
      v3 += 136;
      a2 += 136;
    }
    while (v3 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *a1;
      v11 = 136 * v8;
      do
      {
        v12 = v10 + v11;
        if (*(_QWORD *)(v10 + v11 - 24))
        {
          sub_22E916AE0((uint64_t *)(v10 + v11 - 24));
          operator delete(*(void **)(v10 + v11 - 24));
        }
        if (*(char *)(v12 - 25) < 0)
          operator delete(*(void **)(v10 + v11 - 48));
        v13 = v10 + v11;
        if (*(char *)(v10 + v11 - 65) < 0)
          operator delete(*(void **)(v13 - 88));
        if (*(char *)(v13 - 97) < 0)
          operator delete(*(void **)(v12 - 120));
        v10 -= 136;
        v9 += 136;
      }
      while (v11 != v9);
    }
  }
}

_BYTE *sub_22E916C98(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  void **v13;
  void **v14;

  if (a4)
  {
    if (a4 >= 0x2AAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(96 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[32 * v7];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          sub_22E3BB2B4(v10, *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          *((_QWORD *)v10 + 2) = *(_QWORD *)(v11 + 16);
        }
        v8[v9 + 24] = *(_BYTE *)(a2 + v9 + 24);
        v12 = &v8[v9 + 32];
        v13 = (void **)(a2 + v9 + 32);
        if (*(char *)(a2 + v9 + 55) < 0)
        {
          sub_22E3BB2B4(v12, *v13, *(_QWORD *)(a2 + v9 + 40));
        }
        else
        {
          *(_OWORD *)v12 = *(_OWORD *)v13;
          *(_QWORD *)&v8[v9 + 48] = *(_QWORD *)(a2 + v9 + 48);
        }
        v8[v9 + 56] = *(_BYTE *)(a2 + v9 + 56);
        result = &v8[v9 + 64];
        v14 = (void **)(a2 + v9 + 64);
        if (*(char *)(a2 + v9 + 87) < 0)
        {
          result = sub_22E3BB2B4(result, *v14, *(_QWORD *)(a2 + v9 + 72));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v14;
          *(_QWORD *)&v8[v9 + 80] = *(_QWORD *)(a2 + v9 + 80);
        }
        v8[v9 + 88] = *(_BYTE *)(a2 + v9 + 88);
        v9 += 96;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_22E916DE4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v9 = *a2;
        v10 = *a2 + 144 * v4;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v9;
          sub_22F30BD28(v11 + 16, v9 + 16);
          *(_BYTE *)(v11 + 136) = *(_BYTE *)(v9 + 136);
          v11 += 144;
          v9 += 144;
        }
        while (v9 != v10);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v11 = *(_QWORD *)a1;
      }
      for (i = v12 + 144 * v5; i != v11; i -= 144)
      {
        if (*(_BYTE *)(i - 16))
        {
          if (*(char *)(i - 17) < 0)
            operator delete(*(void **)(i - 40));
          *(_BYTE *)(i - 16) = 0;
        }
        if (*(_BYTE *)(i - 48))
        {
          if (*(char *)(i - 49) < 0)
            operator delete(*(void **)(i - 72));
          *(_BYTE *)(i - 48) = 0;
        }
        if (*(char *)(i - 73) < 0)
          operator delete(*(void **)(i - 96));
        if (*(char *)(i - 105) < 0)
          operator delete(*(void **)(i - 128));
      }
      goto LABEL_48;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v14 = *(_QWORD *)a1;
        v15 = 144 * v5;
        do
        {
          v16 = v14 + v15;
          if (*(_BYTE *)(v14 + v15 - 16))
          {
            if (*(char *)(v16 - 17) < 0)
              operator delete(*(void **)(v16 - 40));
            *(_BYTE *)(v16 - 16) = 0;
          }
          if (*(_BYTE *)(v16 - 48))
          {
            if (*(char *)(v14 + v15 - 49) < 0)
              operator delete(*(void **)(v16 - 72));
            *(_BYTE *)(v16 - 48) = 0;
          }
          v17 = v14 + v15;
          if (*(char *)(v14 + v15 - 73) < 0)
            operator delete(*(void **)(v17 - 96));
          if (*(char *)(v17 - 105) < 0)
            operator delete(*(void **)(v16 - 128));
          v15 -= 144;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BCBC(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 144 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        *(_OWORD *)v8 = *(_OWORD *)v6;
        sub_22F30BD28(v8 + 16, v6 + 16);
        *(_BYTE *)(v8 + 136) = *(_BYTE *)(v6 + 136);
        v6 += 144;
        v8 += 144;
      }
      while (v6 != v7);
LABEL_45:
      v18 = *((unsigned int *)a2 + 2);
      if (v5 != v18)
      {
        v19 = *a2 + 144 * v18;
        v20 = 144 * v5 + 16;
        v21 = *(_QWORD *)a1 + v20;
        v22 = *a2 + v20;
        do
        {
          *(_OWORD *)(v21 - 16) = *(_OWORD *)(v22 - 16);
          v23 = sub_22F30BE10(v21, v22);
          *(_BYTE *)(v23 + 120) = *(_BYTE *)(v22 + 120);
          v21 = v23 + 144;
          v24 = v22 + 128;
          v22 += 144;
        }
        while (v24 != v19);
      }
LABEL_48:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_45;
  }
  return a1;
}

std::string *sub_22E91703C(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, a2);
    }
    else
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_22E3BB2B4(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
      }
      __dst[1].__r_.__value_.__s.__data_[0] = 1;
    }
  }
  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst->__r_.__value_.__l.__data_);
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }
  return __dst;
}

uint64_t sub_22E9170C8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    *(_BYTE *)(a1 + 112) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    *(_BYTE *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_22E917140(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  result = (__n128)a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(__n128 *)(a1 + 32) = result;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    result = *(__n128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(__n128 *)(a1 + 56) = result;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    result = *(__n128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(__n128 *)(a1 + 88) = result;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t sub_22E9171E4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v10 = *a2;
        v11 = *a2 + 152 * v4;
        v12 = *(_QWORD *)a1;
        do
        {
          *(_OWORD *)v12 = *(_OWORD *)v10;
          sub_22F30BD28(v12 + 16, v10 + 16);
          v13 = *(_DWORD *)(v10 + 144);
          *(_QWORD *)(v12 + 136) = *(_QWORD *)(v10 + 136);
          *(_DWORD *)(v12 + 144) = v13;
          v12 += 152;
          v10 += 152;
        }
        while (v10 != v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v14 = *(_QWORD *)a1;
      }
      else
      {
        v14 = *(_QWORD *)a1;
        v12 = *(_QWORD *)a1;
      }
      for (i = v14 + 152 * v5; i != v12; i -= 152)
      {
        if (*(_BYTE *)(i - 24))
        {
          if (*(char *)(i - 25) < 0)
            operator delete(*(void **)(i - 48));
          *(_BYTE *)(i - 24) = 0;
        }
        if (*(_BYTE *)(i - 56))
        {
          if (*(char *)(i - 57) < 0)
            operator delete(*(void **)(i - 80));
          *(_BYTE *)(i - 56) = 0;
        }
        if (*(char *)(i - 81) < 0)
          operator delete(*(void **)(i - 104));
        if (*(char *)(i - 113) < 0)
          operator delete(*(void **)(i - 136));
      }
      goto LABEL_48;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v16 = *(_QWORD *)a1;
        v17 = 152 * v5;
        do
        {
          v18 = v16 + v17;
          if (*(_BYTE *)(v16 + v17 - 24))
          {
            if (*(char *)(v18 - 25) < 0)
              operator delete(*(void **)(v18 - 48));
            *(_BYTE *)(v18 - 24) = 0;
          }
          if (*(_BYTE *)(v18 - 56))
          {
            if (*(char *)(v16 + v17 - 57) < 0)
              operator delete(*(void **)(v18 - 80));
            *(_BYTE *)(v18 - 56) = 0;
          }
          v19 = v16 + v17;
          if (*(char *)(v16 + v17 - 81) < 0)
            operator delete(*(void **)(v19 - 104));
          if (*(char *)(v19 - 113) < 0)
            operator delete(*(void **)(v18 - 136));
          v17 -= 152;
        }
        while (v17);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BE6C(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 152 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        *(_OWORD *)v8 = *(_OWORD *)v6;
        sub_22F30BD28(v8 + 16, v6 + 16);
        v9 = *(_DWORD *)(v6 + 144);
        *(_QWORD *)(v8 + 136) = *(_QWORD *)(v6 + 136);
        *(_DWORD *)(v8 + 144) = v9;
        v6 += 152;
        v8 += 152;
      }
      while (v6 != v7);
LABEL_45:
      v20 = *((unsigned int *)a2 + 2);
      if (v5 != v20)
      {
        v21 = *a2 + 152 * v20;
        v22 = 152 * v5 + 16;
        v23 = *(_QWORD *)a1 + v22;
        v24 = *a2 + v22;
        do
        {
          *(_OWORD *)(v23 - 16) = *(_OWORD *)(v24 - 16);
          v25 = sub_22F30BE10(v23, v24);
          v26 = *(_QWORD *)(v24 + 120);
          *(_DWORD *)(v25 + 128) = *(_DWORD *)(v24 + 128);
          *(_QWORD *)(v25 + 120) = v26;
          v23 = v25 + 152;
          v27 = v24 + 136;
          v24 += 152;
        }
        while (v27 != v21);
      }
LABEL_48:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_45;
  }
  return a1;
}

uint64_t sub_22E917454(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v9 = *a2;
        v10 = *a2 + 144 * v4;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v9;
          sub_22F30BD28(v11 + 16, v9 + 16);
          *(_QWORD *)(v11 + 136) = *(_QWORD *)(v9 + 136);
          v11 += 144;
          v9 += 144;
        }
        while (v9 != v10);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v11 = *(_QWORD *)a1;
      }
      for (i = v12 + 144 * v5; i != v11; i -= 144)
      {
        if (*(_BYTE *)(i - 16))
        {
          if (*(char *)(i - 17) < 0)
            operator delete(*(void **)(i - 40));
          *(_BYTE *)(i - 16) = 0;
        }
        if (*(_BYTE *)(i - 48))
        {
          if (*(char *)(i - 49) < 0)
            operator delete(*(void **)(i - 72));
          *(_BYTE *)(i - 48) = 0;
        }
        if (*(char *)(i - 73) < 0)
          operator delete(*(void **)(i - 96));
        if (*(char *)(i - 105) < 0)
          operator delete(*(void **)(i - 128));
      }
      goto LABEL_48;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v14 = *(_QWORD *)a1;
        v15 = 144 * v5;
        do
        {
          v16 = v14 + v15;
          if (*(_BYTE *)(v14 + v15 - 16))
          {
            if (*(char *)(v16 - 17) < 0)
              operator delete(*(void **)(v16 - 40));
            *(_BYTE *)(v16 - 16) = 0;
          }
          if (*(_BYTE *)(v16 - 48))
          {
            if (*(char *)(v14 + v15 - 49) < 0)
              operator delete(*(void **)(v16 - 72));
            *(_BYTE *)(v16 - 48) = 0;
          }
          v17 = v14 + v15;
          if (*(char *)(v14 + v15 - 73) < 0)
            operator delete(*(void **)(v17 - 96));
          if (*(char *)(v17 - 105) < 0)
            operator delete(*(void **)(v16 - 128));
          v15 -= 144;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30BF74(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 144 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        *(_OWORD *)v8 = *(_OWORD *)v6;
        sub_22F30BD28(v8 + 16, v6 + 16);
        *(_QWORD *)(v8 + 136) = *(_QWORD *)(v6 + 136);
        v6 += 144;
        v8 += 144;
      }
      while (v6 != v7);
LABEL_45:
      v18 = *((unsigned int *)a2 + 2);
      if (v5 != v18)
      {
        v19 = *a2 + 144 * v18;
        v20 = 144 * v5 + 16;
        v21 = *(_QWORD *)a1 + v20;
        v22 = *a2 + v20;
        do
        {
          *(_OWORD *)(v21 - 16) = *(_OWORD *)(v22 - 16);
          v23 = sub_22F30BE10(v21, v22);
          *(_QWORD *)(v23 + 120) = *(_QWORD *)(v22 + 120);
          v21 = v23 + 144;
          v24 = v22 + 128;
          v22 += 144;
        }
        while (v24 != v19);
      }
LABEL_48:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_45;
  }
  return a1;
}

uint64_t sub_22E9176AC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  if (a1 != a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        sub_22E91788C(*(_QWORD *)a2, *(_QWORD *)a2 + 72 * v4, *(_QWORD *)a1);
        v7 = v6;
        v8 = *(_QWORD *)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v8 = *(_QWORD *)a1;
        v7 = *(_QWORD *)a1;
      }
      for (i = v8 + 72 * v5; i != v7; i -= 72)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
        if (*(char *)(i - 33) < 0)
          operator delete(*(void **)(i - 56));
      }
      goto LABEL_34;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v10 = *(_QWORD *)a1;
        v11 = 72 * v5;
        do
        {
          v12 = v10 + v11;
          if (*(char *)(v10 + v11 - 1) < 0)
            operator delete(*(void **)(v12 - 24));
          if (*(char *)(v12 - 33) < 0)
            operator delete(*(void **)(v12 - 56));
          v11 -= 72;
        }
        while (v11);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30C074(a1);
    }
    else if ((_DWORD)v5)
    {
      sub_22E91788C(*(_QWORD *)a2, *(_QWORD *)a2 + 72 * v5, *(_QWORD *)a1);
      goto LABEL_25;
    }
    v5 = 0;
LABEL_25:
    v13 = *(unsigned int *)(a2 + 8);
    if (v5 != v13)
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)a2 + 72 * v13;
      v16 = 72 * v5 + 48;
      v17 = *(_QWORD *)a1 + v16;
      v18 = v14 + v16;
      do
      {
        *(_OWORD *)(v17 - 48) = *(_OWORD *)(v18 - 48);
        v19 = (_BYTE *)(v17 - 32);
        if (*(char *)(v18 - 9) < 0)
        {
          sub_22E3BB2B4(v19, *(void **)(v18 - 32), *(_QWORD *)(v18 - 24));
        }
        else
        {
          v20 = *(_OWORD *)(v18 - 32);
          *(_QWORD *)(v17 - 16) = *(_QWORD *)(v18 - 16);
          *(_OWORD *)v19 = v20;
        }
        v21 = v18 - 48;
        *(_BYTE *)(v17 - 8) = *(_BYTE *)(v18 - 8);
        if (*(char *)(v18 + 23) < 0)
        {
          sub_22E3BB2B4((_BYTE *)v17, *(void **)v18, *(_QWORD *)(v18 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v18;
          *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
          *(_OWORD *)v17 = v22;
        }
        v17 += 72;
        v18 += 72;
      }
      while (v21 + 72 != v15);
    }
LABEL_34:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_22E91788C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v4 + 16));
    *(_BYTE *)(a3 + 40) = *(_BYTE *)(v4 + 40);
    std::string::operator=((std::string *)(a3 + 48), (const std::string *)(v4 + 48));
    a3 += 72;
    v4 += 72;
  }
  while (v4 != v5);
  return v5;
}

void sub_22E917908(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 72 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
      v6 = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      v3 += 72;
      a2 += 72;
    }
    while (v3 != v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 72 * v7;
      do
      {
        v10 = v8 + v9;
        if (*(char *)(v8 + v9 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        if (*(char *)(v10 - 33) < 0)
          operator delete(*(void **)(v10 - 56));
        v9 -= 72;
      }
      while (v9);
    }
  }
}

uint64_t sub_22E9179CC(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void **v28;
  __int128 v29;
  _BYTE *v30;
  void **v31;
  __int128 v32;
  _BYTE *v33;
  void **v34;
  __int128 v35;
  uint64_t v36;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((_DWORD *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        v9 = *a2;
        v10 = *a2 + 144 * v4;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v9;
          sub_22F30BC44(v11 + 16, v9 + 16);
          *(_BYTE *)(v11 + 136) = *(_BYTE *)(v9 + 136);
          v11 += 144;
          v9 += 144;
        }
        while (v9 != v10);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v11 = *(_QWORD *)a1;
      }
      if (v12 + 144 * v5 != v11)
      {
        v13 = v12 + 144 * v5 - 56;
        do
        {
          if (*(_QWORD *)(v13 + 24))
          {
            sub_22E916AE0((uint64_t *)(v13 + 24));
            operator delete(*(void **)(v13 + 24));
          }
          if (*(char *)(v13 + 23) < 0)
            operator delete(*(void **)v13);
          if (*(char *)(v13 - 17) < 0)
            operator delete(*(void **)(v13 - 40));
          if (*(char *)(v13 - 49) < 0)
            operator delete(*(void **)(v13 - 72));
          v14 = v13 - 88;
          v13 -= 144;
        }
        while (v14 != v11);
      }
      goto LABEL_50;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v15 = 0;
        v16 = *(_QWORD *)a1;
        v17 = 144 * v5;
        do
        {
          v18 = v16 + v17;
          if (*(_QWORD *)(v16 + v17 - 32))
          {
            sub_22E916AE0((uint64_t *)(v16 + v17 - 32));
            operator delete(*(void **)(v16 + v17 - 32));
          }
          if (*(char *)(v18 - 33) < 0)
            operator delete(*(void **)(v16 + v17 - 56));
          v19 = v16 + v17;
          if (*(char *)(v16 + v17 - 73) < 0)
            operator delete(*(void **)(v19 - 96));
          if (*(char *)(v19 - 105) < 0)
            operator delete(*(void **)(v18 - 128));
          v16 -= 144;
          v15 += 144;
        }
        while (v17 != v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_22F30C0E0(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 144 * v5;
      v8 = *(_QWORD *)a1;
      do
      {
        *(_OWORD *)v8 = *(_OWORD *)v6;
        sub_22F30BC44(v8 + 16, v6 + 16);
        *(_BYTE *)(v8 + 136) = *(_BYTE *)(v6 + 136);
        v6 += 144;
        v8 += 144;
      }
      while (v6 != v7);
LABEL_38:
      v20 = *((unsigned int *)a2 + 2);
      if (v5 != v20)
      {
        v21 = *a2;
        v22 = *a2 + 144 * v20;
        v23 = *(_QWORD *)a1;
        v24 = 144 * v5;
        do
        {
          v25 = v21 + v24;
          v26 = v23 + v24;
          *(_OWORD *)(v23 + v24) = *(_OWORD *)(v21 + v24);
          v27 = (_BYTE *)(v23 + v24 + 16);
          v28 = (void **)(v21 + v24 + 16);
          if (*(char *)(v21 + v24 + 39) < 0)
          {
            sub_22E3BB2B4(v27, *v28, *(_QWORD *)(v25 + 24));
          }
          else
          {
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v23 + v24 + 32) = *(_QWORD *)(v21 + v24 + 32);
            *(_OWORD *)v27 = v29;
          }
          *(_BYTE *)(v26 + 40) = *(_BYTE *)(v25 + 40);
          v30 = (_BYTE *)(v23 + v24 + 48);
          v31 = (void **)(v21 + v24 + 48);
          if (*(char *)(v25 + 71) < 0)
          {
            sub_22E3BB2B4(v30, *v31, *(_QWORD *)(v21 + v24 + 56));
          }
          else
          {
            v32 = *(_OWORD *)v31;
            *(_QWORD *)(v23 + v24 + 64) = *(_QWORD *)(v21 + v24 + 64);
            *(_OWORD *)v30 = v32;
          }
          *(_OWORD *)(v26 + 72) = *(_OWORD *)(v25 + 72);
          v33 = (_BYTE *)(v23 + v24 + 88);
          v34 = (void **)(v21 + v24 + 88);
          if (*(char *)(v25 + 111) < 0)
          {
            sub_22E3BB2B4(v33, *v34, *(_QWORD *)(v21 + v24 + 96));
          }
          else
          {
            v35 = *(_OWORD *)v34;
            *(_QWORD *)(v23 + v24 + 104) = *(_QWORD *)(v21 + v24 + 104);
            *(_OWORD *)v33 = v35;
          }
          *(_QWORD *)(v26 + 112) = 0;
          *(_QWORD *)(v26 + 120) = 0;
          v36 = v26 + 112;
          *(_QWORD *)(v36 + 16) = 0;
          sub_22E916C98((_BYTE *)v36, *(_QWORD *)(v25 + 112), *(_QWORD *)(v25 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v25 + 120) - *(_QWORD *)(v25 + 112)) >> 5));
          *(_BYTE *)(v36 + 24) = *(_BYTE *)(v25 + 136);
          v23 += 144;
          v21 += 144;
        }
        while (v25 + 144 != v22);
      }
LABEL_50:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_38;
  }
  return a1;
}

void sub_22E917D04(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 144 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
      v6 = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(v3 + 72);
      v7 = *(_OWORD *)(v3 + 88);
      *(_QWORD *)(a2 + 104) = *(_QWORD *)(v3 + 104);
      *(_OWORD *)(a2 + 88) = v7;
      *(_QWORD *)(v3 + 96) = 0;
      *(_QWORD *)(v3 + 104) = 0;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(a2 + 112) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(v3 + 112);
      *(_QWORD *)(a2 + 128) = *(_QWORD *)(v3 + 128);
      *(_QWORD *)(v3 + 112) = 0;
      *(_QWORD *)(v3 + 120) = 0;
      *(_QWORD *)(v3 + 128) = 0;
      *(_BYTE *)(a2 + 136) = *(_BYTE *)(v3 + 136);
      v3 += 144;
      a2 += 144;
    }
    while (v3 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *a1;
      v11 = 144 * v8;
      do
      {
        v12 = v10 + v11;
        if (*(_QWORD *)(v10 + v11 - 32))
        {
          sub_22E916AE0((uint64_t *)(v10 + v11 - 32));
          operator delete(*(void **)(v10 + v11 - 32));
        }
        if (*(char *)(v12 - 33) < 0)
          operator delete(*(void **)(v10 + v11 - 56));
        v13 = v10 + v11;
        if (*(char *)(v10 + v11 - 73) < 0)
          operator delete(*(void **)(v13 - 96));
        if (*(char *)(v13 - 105) < 0)
          operator delete(*(void **)(v12 - 128));
        v10 -= 144;
        v9 += 144;
      }
      while (v11 != v9);
    }
  }
}

uint64_t sub_22E917E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  void **v22;
  __int128 v23;
  _BYTE *v24;
  void **v25;
  __int128 v26;
  _BYTE *v27;
  void **v28;
  __int128 v29;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)a1;
        v11 = 112 * v4;
        do
        {
          sub_22E918114(v10, v9);
          v9 += 112;
          v10 += 112;
          v11 -= 112;
        }
        while (v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v10 = *(_QWORD *)a1;
      }
      for (i = v12 + 112 * v5; i != v10; i -= 112)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
        if (*(char *)(i - 41) < 0)
          operator delete(*(void **)(i - 64));
        if (*(char *)(i - 73) < 0)
          operator delete(*(void **)(i - 96));
      }
      goto LABEL_36;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      sub_22E918094((uint64_t *)a1);
      sub_22F30C14C(a1);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = 112 * v5;
      do
      {
        sub_22E918114(v7, v6);
        v6 += 112;
        v7 += 112;
        v8 -= 112;
      }
      while (v8);
LABEL_24:
      v14 = *(unsigned int *)(a2 + 8);
      if (v5 != v14)
      {
        v15 = *(_QWORD *)a2;
        v16 = v15 + 112 * v14;
        v17 = *(_QWORD *)a1;
        v18 = 112 * v5;
        do
        {
          v19 = v15 + v18;
          v20 = (_BYTE *)(v17 + v18);
          *(_OWORD *)(v17 + v18) = *(_OWORD *)(v15 + v18);
          v21 = (_BYTE *)(v17 + v18 + 16);
          v22 = (void **)(v15 + v18 + 16);
          if (*(char *)(v15 + v18 + 39) < 0)
          {
            sub_22E3BB2B4(v21, *v22, *(_QWORD *)(v19 + 24));
          }
          else
          {
            v23 = *(_OWORD *)v22;
            *(_QWORD *)(v17 + v18 + 32) = *(_QWORD *)(v15 + v18 + 32);
            *(_OWORD *)v21 = v23;
          }
          v20[40] = *(_BYTE *)(v19 + 40);
          v24 = (_BYTE *)(v17 + v18 + 48);
          v25 = (void **)(v15 + v18 + 48);
          if (*(char *)(v19 + 71) < 0)
          {
            sub_22E3BB2B4(v24, *v25, *(_QWORD *)(v15 + v18 + 56));
          }
          else
          {
            v26 = *(_OWORD *)v25;
            *(_QWORD *)(v17 + v18 + 64) = *(_QWORD *)(v15 + v18 + 64);
            *(_OWORD *)v24 = v26;
          }
          v20[72] = *(_BYTE *)(v19 + 72);
          v27 = (_BYTE *)(v17 + v18 + 80);
          v28 = (void **)(v15 + v18 + 80);
          if (*(char *)(v19 + 103) < 0)
          {
            sub_22E3BB2B4(v27, *v28, *(_QWORD *)(v15 + v18 + 88));
          }
          else
          {
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v17 + v18 + 96) = *(_QWORD *)(v15 + v18 + 96);
            *(_OWORD *)v27 = v29;
          }
          v20[104] = *(_BYTE *)(v19 + 104);
          v17 += 112;
          v15 += 112;
        }
        while (v19 + 112 != v16);
      }
LABEL_36:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

void sub_22E918094(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 112 * v2;
    do
    {
      v5 = v3 + v4;
      if (*(char *)(v3 + v4 - 9) < 0)
        operator delete(*(void **)(v5 - 32));
      if (*(char *)(v5 - 41) < 0)
        operator delete(*(void **)(v3 + v4 - 64));
      if (*(char *)(v3 + v4 - 73) < 0)
        operator delete(*(void **)(v5 - 96));
      v4 -= 112;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t sub_22E918114(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

void sub_22E918174(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 112 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_BYTE *)(a2 + 40) = *(_BYTE *)(v3 + 40);
      v6 = *(_OWORD *)(v3 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(v3 + 56) = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      *(_BYTE *)(a2 + 72) = *(_BYTE *)(v3 + 72);
      v7 = *(_OWORD *)(v3 + 80);
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(v3 + 96);
      *(_OWORD *)(a2 + 80) = v7;
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 96) = 0;
      *(_QWORD *)(v3 + 80) = 0;
      *(_BYTE *)(a2 + 104) = *(_BYTE *)(v3 + 104);
      v3 += 112;
      a2 += 112;
    }
    while (v3 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 112 * v8;
      do
      {
        v11 = v9 + v10;
        if (*(char *)(v9 + v10 - 9) < 0)
          operator delete(*(void **)(v11 - 32));
        if (*(char *)(v11 - 41) < 0)
          operator delete(*(void **)(v9 + v10 - 64));
        if (*(char *)(v9 + v10 - 73) < 0)
          operator delete(*(void **)(v11 - 96));
        v10 -= 112;
      }
      while (v10);
    }
  }
}

char **sub_22E918278(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 112 * v3;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 9] < 0)
        operator delete(*(v5 - 4));
      if (*((char *)v5 - 41) < 0)
        operator delete(*(void **)&v2[v4 - 64]);
      if (v2[v4 - 73] < 0)
        operator delete(*(v5 - 12));
      v4 -= 112;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_22E918310(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  char v36;

  v11 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(_BYTE *)(a4 + 16);
  if ((v13 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v18 = *v29;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v31 = *(_QWORD *)v30 + 8 * *(unsigned int *)(v30 + 8);
      }
      else
      {
        v31 = 0;
      }
      if (v18 != (uint64_t *)v31)
      {
        while (*(_WORD *)(*v18 + 32) != 322)
        {
          if (++v18 == (uint64_t *)v31)
          {
            v18 = (uint64_t *)v31;
            break;
          }
        }
      }
    }
    else
    {
      v18 = 0;
    }
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v19 = *(_QWORD *)v20 + 8 * *(unsigned int *)(v20 + 8);
    }
    else
    {
      v19 = 0;
    }
    if (v18 == (uint64_t *)v19)
    {
      if (!a3)
        return;
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 88);
      v23 = *v18;
      v32 = 0uLL;
      v34 = 0;
      v33 = 0;
      v36 = 120;
      v35 = 0;
      v24 = sub_22F3A2490(v22, v11, v12, v23, 1, &v32);
      sub_22EFC8E88(a2);
      v26 = v25;
      v27 = *(unsigned int *)(v25 + 8);
      v28 = *(_QWORD *)v25 + 8 * v27;
      if ((uint64_t *)v28 != v18 + 1)
      {
        memmove(v18, v18 + 1, v28 - (_QWORD)(v18 + 1));
        LODWORD(v27) = *(_DWORD *)(v26 + 8);
      }
      *(_DWORD *)(v26 + 8) = v27 - 1;
      sub_22EFCA95C(a2, v24);
      if (!a3)
        return;
    }
    v17 = a5(a6);
    if (v17)
      goto LABEL_13;
  }
  else
  {
    if (!a3)
    {
      v21 = *(_QWORD *)(a1 + 88);
      v32 = 0uLL;
      v34 = 0;
      v33 = 0;
      v36 = 120;
      v35 = 0;
      v17 = sub_22F3A25F4(v21, v11, v12, 322, (v13 & 2) != 0, &v32);
      goto LABEL_13;
    }
    v14 = a5(a6);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)(a1 + 88);
      v32 = 0uLL;
      v34 = 0;
      v33 = 0;
      v36 = 120;
      v35 = 0;
      v17 = sub_22F3A2490(v16, v11, v12, v15, (v13 & 2) != 0, &v32);
LABEL_13:
      sub_22EFCA95C(a2, v17);
    }
  }
}

void sub_22E918538(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  __int128 v25;
  int v26;
  int v27;
  _QWORD v28[2];
  _QWORD v29[2];

  if ((*(_BYTE *)(a4 + 16) & 1) != 0)
  {
    v8 = *(_BYTE *)(a3 + 87);
    v9 = v8;
    v10 = v8 & 0x7F;
    if (v9 < 0)
      v10 = *(_QWORD *)(a3 + 72);
    if (v10)
    {
      v11 = a1[399];
      if (v11)
      {
        v12 = v9 >= 0 ? a3 + 64 : *(_QWORD *)(a3 + 64);
        v13 = *(_DWORD *)(a2 + 24);
        v29[0] = v12;
        v29[1] = v10;
        v28[0] = "<API Notes>";
        v28[1] = 11;
        v27 = v13;
        v14 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, int *))(*(_QWORD *)v11 + 48))(v11, v29, v28, &v27);
        if (!v15 && v14 != 0)
        {
          v17 = v14;
          if (v14 >= 0x10)
          {
            v18 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
            if (v18 && *(_BYTE *)(v18 + 16) == 57)
              v17 = *(_QWORD *)(v18 + 8);
          }
          else
          {
            v17 = 0;
          }
          v19 = sub_22EF579A8(a1[11], v17, *(_DWORD *)(a2 + 24));
          v20 = *(_DWORD *)(a2 + 28) & 0x7F;
          if ((v20 - 67) >= 0xFFFFFFF9)
          {
            if (v20 == 64)
            {
              v22 = sub_22EA2EBF4(a1, v17, *(_DWORD *)(a2 + 24), v19);
              v17 = sub_22EF69F90(a1[11], v22);
            }
            if (!sub_22E918724(a1, *(_DWORD *)(a2 + 24), *(_QWORD *)(a2 + 48), v17))
            {
              *(_QWORD *)(a2 + 48) = v17;
              v23 = *(_QWORD *)(a2 + 56);
              if ((v23 & 4) != 0)
                *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 32) = v19;
              else
                *(_QWORD *)(a2 + 56) = (unint64_t)v19 & 0xFFFFFFFFFFFFFFFBLL;
            }
          }
          else
          {
            if (v20 == 25)
              v21 = a2;
            else
              v21 = 0;
            if (!sub_22E918724(a1, *(_DWORD *)(v21 + 24), *(_QWORD *)(v21 + 56), v17))
            {
              *(_QWORD *)(v21 + 56) = v17;
              *(_QWORD *)(v21 + 64) = v19;
            }
          }
        }
      }
    }
  }
  v24 = *(unsigned __int8 *)(a3 + 56);
  if ((v24 & 1) != 0)
    sub_22E9187C8((unint64_t)a1, a2, (v24 >> 1) & 3, *(_BYTE *)(a4 + 16));
  v25 = *(_OWORD *)a4;
  v26 = *(_DWORD *)(a4 + 16);
  sub_22E918AE4((uint64_t)a1, a2, a3, &v25);
}

BOOL sub_22E918724(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11[24];
  uint64_t v12;
  uint64_t v13;

  v12 = a4;
  v13 = a3;
  v7 = sub_22EF5CDF0(a1[11], *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_22EF5CDF0(a1[11], *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
  if (v7 != v8)
  {
    sub_22E8FCA40(a1, a2, 0xDFDu, 0, (uint64_t)v11);
    v9 = sub_22E8901B8((uint64_t)v11, &v12);
    sub_22E8901B8(v9, &v13);
    sub_22E903BEC(v11);
  }
  return v7 != v8;
}

unint64_t sub_22E9187C8(unint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  __int128 v30[5];
  uint64_t v31;

  if ((a4 & 1) != 0)
  {
    v5 = a2;
    v6 = (_QWORD *)result;
    v7 = *(_DWORD *)(a2 + 28);
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v8)
        v9 = *(unsigned __int8 *)(v8 + 16) - 27 > 0xFFFFFFFD;
      else
        v9 = 0;
      if (!v9)
      {
        v8 = sub_22F10CF48(v8);
        v7 = *(_DWORD *)(v5 + 28);
      }
      v10 = *(_QWORD *)(v8 + 24);
      v31 = v10;
      v11 = v7 & 0x7F;
    }
    else
    {
      v11 = *(_DWORD *)(a2 + 28) & 0x7F;
      if (a2 && v11 == 24)
      {
        v10 = *(_QWORD *)(a2 + 80);
      }
      else if (a2 && (v11 - 75) >= 0xFFFFFFE5)
      {
        v10 = *(_QWORD *)(a2 + 48);
      }
      else
      {
        if (!a2 || v11 != 25)
          return result;
        v10 = *(_QWORD *)(a2 + 56);
      }
      v31 = v10;
    }
    sub_22EE8A418(v6, 0, 0, &v31, a3, *(_DWORD *)(v5 + 24), 0, v11 == 64, 1);
    v12 = v31;
    result = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
    if (result != *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0))
    {
      if (v5 && (*(_DWORD *)(v5 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v13 || (v14 = *(unsigned __int8 *)(v13 + 16), (v14 - 27) <= 0xFFFFFFFD))
        {
          v13 = sub_22F10CF48(v13);
          v14 = *(unsigned __int8 *)(v13 + 16);
          v12 = v31;
        }
        v15 = v6[11];
        if (v14 == 26)
        {
          v16 = (uint64_t *)(v13 + 40);
          v17 = (unsigned __int16)(*(_QWORD *)(v13 + 16) >> 38);
          sub_22E4913B4(v13, (uint64_t)v30);
          result = sub_22EF63D8C(v15, v12, v16, v17, v30, 0);
        }
        else
        {
          LOWORD(v30[0]) = *(_DWORD *)(v13 + 16) >> 19;
          result = sub_22F369930(v15, v12, (unsigned __int16 *)v30);
        }
        *(_QWORD *)(v5 + 48) = result;
      }
      else
      {
        v18 = *(_DWORD *)(v5 + 28) & 0x7F;
        if (v5 && v18 == 24)
        {
          *(_QWORD *)(v5 + 80) = v31;
          result = sub_22F10ACF8(result);
          if (result < 0x10
            || ((v27 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16),
                 v9 = v27 > 0x27,
                 v28 = (1 << v27) & 0x8180000000,
                 !v9)
              ? (v29 = v28 == 0)
              : (v29 = 1),
                v29))
          {
            *(_QWORD *)(v5 + 56) = *(_QWORD *)(v5 + 56) & 0xFFFFFFFE03FFFFFFLL | ((((*(_QWORD *)(v5 + 56) >> 26) | 0x40) & 0x7FLL) << 26);
          }
        }
        else if (v5 && (v18 - 75) >= 0xFFFFFFE5)
        {
          *(_QWORD *)(v5 + 48) = v31;
          if (v18 == 64 && (*(_BYTE *)(v5 + 97) & 0x10) != 0)
          {
            result = sub_22F10ACF8(result);
            if (result < 0x10
              || ((v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16),
                   v9 = v19 > 0x27,
                   v20 = (1 << v19) & 0x8180000000,
                   !v9)
                ? (v21 = v20 == 0)
                : (v21 = 1),
                  v21))
            {
              v22 = *(_DWORD *)(v5 + 96);
              v23 = v22 & 0x7E000 | 0x80000;
              if ((v22 & 0x1000) == 0)
                v23 = 0x80000;
              *(_DWORD *)(v5 + 96) = v23 | v22 & 0xFFF01FFF;
            }
          }
        }
        else
        {
          if (v18 != 25)
            v5 = 0;
          *(_QWORD *)(v5 + 56) = v31;
          result = sub_22F10ACF8(result);
          if (result < 0x10
            || ((v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16),
                 v9 = v24 > 0x27,
                 v25 = (1 << v24) & 0x8180000000,
                 !v9)
              ? (v26 = v25 == 0)
              : (v26 = 1),
                v26))
          {
            *(_DWORD *)(v5 + 72) |= 0x2000u;
          }
        }
      }
    }
  }
  return result;
}

void sub_22E918AE4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t **v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  unsigned __int8 v90;

  v85 = a2;
  v7 = *(_BYTE *)(a3 + 24);
  if ((v7 & 1) == 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 2) == 0)
      goto LABEL_3;
LABEL_14:
    v16 = v85;
    v17 = *(_QWORD *)a4;
    v18 = *((_QWORD *)a4 + 1);
    v19 = *((_BYTE *)a4 + 16);
    v83 = a1;
    v84 = a3;
    if ((v19 & 1) != 0)
    {
      if ((*(_BYTE *)(v85 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v85);
        v20 = *v69;
        if ((*(_BYTE *)(v16 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v16);
          v71 = *(_QWORD *)v70 + 8 * *(unsigned int *)(v70 + 8);
        }
        else
        {
          v71 = 0;
        }
        if (v20 != (uint64_t *)v71)
        {
          while (1)
          {
            v72 = *v20;
            if (*v20)
            {
              if (*(_WORD *)(v72 + 32) == 115)
              {
                v73 = *(_QWORD *)(v72 + 40);
                if (v73)
                {
                  v74 = *(_QWORD *)(v73 + 16);
                  if (*(_DWORD *)v74 == 5)
                  {
                    v75 = *(_DWORD *)(v74 + 16);
                    v76 = *(unsigned __int8 *)(v74 + 20);
                    if (v75 == 1718187891 && v76 == 116)
                      break;
                  }
                }
              }
            }
            if (++v20 == (uint64_t *)v71)
            {
              v20 = (uint64_t *)v71;
              break;
            }
          }
        }
      }
      else
      {
        v20 = 0;
      }
      if ((*(_BYTE *)(v16 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v16);
        v21 = *(_QWORD *)v22 + 8 * *(unsigned int *)(v22 + 8);
      }
      else
      {
        v21 = 0;
      }
      if (v20 != (uint64_t *)v21)
      {
        v49 = *(_QWORD *)(a1 + 88);
        v50 = *v20;
        v86 = 0uLL;
        v88 = 0;
        v87 = 0;
        v89 = 0;
        v90 = ((((v90 >> 7) & 1) << 23) | 0x780000u) >> 16;
        v51 = sub_22F3A2490(v49, v17, v18, v50, 1, &v86);
        sub_22EFC8E88(v16);
        v53 = v52;
        v54 = *(unsigned int *)(v52 + 8);
        v55 = *(_QWORD *)v52 + 8 * v54;
        if ((uint64_t *)v55 != v20 + 1)
        {
          memmove(v20, v20 + 1, v55 - (_QWORD)(v20 + 1));
          LODWORD(v54) = *(_DWORD *)(v53 + 8);
        }
        *(_DWORD *)(v53 + 8) = v54 - 1;
        sub_22EFCA95C(v16, v51);
      }
      v23 = sub_22E919244(&v83);
    }
    else
    {
      v38 = sub_22E919244(&v83);
      v39 = *(_QWORD *)(a1 + 88);
      v86 = 0uLL;
      v88 = 0;
      v87 = 0;
      v89 = 0;
      v90 = ((((v90 >> 7) & 1) << 23) | 0x780000u) >> 16;
      v23 = sub_22F3A2490(v39, v17, v18, v38, (v19 & 2) != 0, &v86);
    }
    sub_22EFCA95C(v16, v23);
    v7 = *(_BYTE *)(a3 + 24);
    if ((v7 & 4) == 0)
      goto LABEL_33;
    goto LABEL_23;
  }
  v9 = *(_QWORD *)a4;
  v10 = *((_QWORD *)a4 + 1);
  v11 = *((_BYTE *)a4 + 16);
  v83 = a1;
  v84 = a3;
  if ((v11 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v12 = *v66;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v68 = *(_QWORD *)v67 + 8 * *(unsigned int *)(v67 + 8);
      }
      else
      {
        v68 = 0;
      }
      if (v12 != (uint64_t *)v68)
      {
        while (*(_WORD *)(*v12 + 32) != 337)
        {
          if (++v12 == (uint64_t *)v68)
          {
            v12 = (uint64_t *)v68;
            break;
          }
        }
      }
    }
    else
    {
      v12 = 0;
    }
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v13 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
    }
    else
    {
      v13 = 0;
    }
    if (v12 != (uint64_t *)v13)
    {
      v42 = *(_QWORD *)(a1 + 88);
      v43 = *v12;
      v86 = 0uLL;
      v88 = 0;
      v87 = 0;
      v90 = 120;
      v89 = 0;
      v44 = sub_22F3A2490(v42, v9, v10, v43, 1, &v86);
      sub_22EFC8E88(a2);
      v46 = v45;
      v47 = *(unsigned int *)(v45 + 8);
      v48 = *(_QWORD *)v45 + 8 * v47;
      if ((uint64_t *)v48 != v12 + 1)
      {
        memmove(v12, v12 + 1, v48 - (_QWORD)(v12 + 1));
        LODWORD(v47) = *(_DWORD *)(v46 + 8);
      }
      *(_DWORD *)(v46 + 8) = v47 - 1;
      sub_22EFCA95C(a2, v44);
    }
    v15 = sub_22E919180(&v83);
  }
  else
  {
    v36 = sub_22E919180(&v83);
    v37 = *(_QWORD *)(a1 + 88);
    v86 = 0uLL;
    v88 = 0;
    v87 = 0;
    v90 = 120;
    v89 = 0;
    v15 = sub_22F3A2490(v37, v9, v10, v36, (v11 & 2) != 0, &v86);
  }
  sub_22EFCA95C(a2, v15);
  v7 = *(_BYTE *)(a3 + 24);
  if ((v7 & 2) != 0)
    goto LABEL_14;
LABEL_3:
  if ((v7 & 4) == 0)
    goto LABEL_33;
LABEL_23:
  v24 = v85;
  v25 = *(_QWORD *)a4;
  v26 = *((_QWORD *)a4 + 1);
  v27 = *((_BYTE *)a4 + 16);
  if ((v27 & 1) == 0)
  {
    v40 = *(_QWORD *)(a1 + 88);
    if ((v7 & 8) != 0)
    {
      v63 = sub_22E3CD3D4(v40 + 2032, 40, 3);
      *(_QWORD *)(v63 + 8) = 0;
      *(_QWORD *)(v63 + 16) = 0;
      *(_QWORD *)v63 = 0;
      *(_DWORD *)(v63 + 24) = 0;
      *(_BYTE *)(v63 + 30) = 0;
      *(_WORD *)(v63 + 28) = 480;
      v64 = *(_BYTE *)(v63 + 34);
      *(_WORD *)(v63 + 32) = 324;
      *(_BYTE *)(v63 + 34) = v64 & 0xE0;
      v65 = *(_QWORD *)(a1 + 88);
      v86 = 0uLL;
      v88 = 0;
      v87 = 0;
      v89 = 0;
      v90 = ((((v90 >> 7) & 1) << 23) | 0x780000u) >> 16;
      v41 = sub_22F3A2490(v65, v25, v26, v63, (v27 & 2) != 0, &v86);
    }
    else
    {
      v86 = 0uLL;
      v88 = 0;
      v87 = 0;
      v89 = 0;
      v90 = ((((v90 >> 7) & 1) << 23) | 0x780000u) >> 16;
      v41 = sub_22F3A25F4(v40, v25, v26, 324, (v27 & 2) != 0, &v86);
    }
    v31 = v41;
    goto LABEL_32;
  }
  if ((*(_BYTE *)(v85 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v85);
    v28 = *v78;
    if ((*(_BYTE *)(v24 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v24);
      v80 = *(_QWORD *)v79 + 8 * *(unsigned int *)(v79 + 8);
    }
    else
    {
      v80 = 0;
    }
    if (v28 != (uint64_t *)v80)
    {
      while (*(_WORD *)(*v28 + 32) != 324)
      {
        if (++v28 == (uint64_t *)v80)
        {
          v28 = (uint64_t *)v80;
          break;
        }
      }
    }
  }
  else
  {
    v28 = 0;
  }
  if ((*(_BYTE *)(v24 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v24);
    v29 = *(_QWORD *)v30 + 8 * *(unsigned int *)(v30 + 8);
  }
  else
  {
    v29 = 0;
  }
  if (v28 == (uint64_t *)v29)
  {
    if ((v7 & 8) == 0)
      goto LABEL_33;
    goto LABEL_31;
  }
  v56 = *(_QWORD *)(a1 + 88);
  v57 = *v28;
  v86 = 0uLL;
  v88 = 0;
  v87 = 0;
  v89 = 0;
  v90 = ((((v90 >> 7) & 1) << 23) | 0x780000u) >> 16;
  v58 = sub_22F3A2490(v56, v25, v26, v57, 1, &v86);
  sub_22EFC8E88(v24);
  v60 = v59;
  v61 = *(unsigned int *)(v59 + 8);
  v62 = *(_QWORD *)v59 + 8 * v61;
  if ((uint64_t *)v62 != v28 + 1)
  {
    memmove(v28, v28 + 1, v62 - (_QWORD)(v28 + 1));
    LODWORD(v61) = *(_DWORD *)(v60 + 8);
  }
  *(_DWORD *)(v60 + 8) = v61 - 1;
  sub_22EFCA95C(v24, v58);
  if ((v7 & 8) != 0)
  {
LABEL_31:
    v31 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
    *(_QWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)v31 = 0;
    *(_DWORD *)(v31 + 24) = 0;
    *(_BYTE *)(v31 + 30) = 0;
    *(_WORD *)(v31 + 28) = 480;
    v32 = *(_BYTE *)(v31 + 34);
    *(_WORD *)(v31 + 32) = 324;
    *(_BYTE *)(v31 + 34) = v32 & 0xE0;
LABEL_32:
    sub_22EFCA95C(v24, v31);
  }
LABEL_33:
  v33 = *(_BYTE *)(a3 + 55);
  v34 = v33;
  v35 = v33 & 0x7F;
  if (v34 < 0)
    v35 = *(_QWORD *)(a3 + 40);
  if (v35)
  {
    v81 = *a4;
    v82 = *((_DWORD *)a4 + 4);
    *(_QWORD *)&v86 = a1;
    *((_QWORD *)&v86 + 1) = &v85;
    v87 = a3;
    sub_22E918310(a1, v85, 1, (uint64_t)&v81, (uint64_t (*)(uint64_t))sub_22E919358, (uint64_t)&v86);
  }
}

uint64_t sub_22E919180(_QWORD *a1)
{
  uint64_t v2;
  const void **v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  const void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  char v16;

  v2 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 56, 3);
  v3 = (const void **)a1[1];
  v4 = *(_QWORD *)(*a1 + 88);
  v13 = 0;
  v12 = 0uLL;
  v14 = 0;
  v16 = 0;
  v15 = 480;
  v5 = *((_BYTE *)v3 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = v3;
  else
    v7 = *v3;
  v8 = v5 & 0x7F;
  if (v6)
    v9 = (size_t)v3[1];
  else
    v9 = v8;
  v10 = (void *)sub_22E3CD3D4(v4 + 2032, v9, 0);
  memcpy(v10, v7, v9);
  return sub_22F3A497C(v2, v4, &v12, v10, v9);
}

uint64_t sub_22E919244(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  const void *v8;
  size_t v9;
  void *__src;
  uint64_t v12;
  __int128 v13;
  int v14;
  __int16 v15;
  char v16;

  v2 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 136, 3);
  v3 = *(_QWORD *)(*a1 + 88);
  v12 = 0;
  v13 = 0u;
  v14 = 0;
  v16 = 0;
  v15 = 480;
  v4 = sub_22E3CB704(*(llvm::StringMapImpl **)(v3 + 15192), "swift", 5uLL);
  v5 = a1[1];
  v6 = *(_QWORD *)(*a1 + 88);
  v7 = *(_BYTE *)(v5 + 23);
  if (v7 >= 0)
    v8 = (const void *)a1[1];
  else
    v8 = *(const void **)v5;
  if (v7 >= 0)
    v9 = v7 & 0x7F;
  else
    v9 = *(_QWORD *)(v5 + 8);
  __src = (void *)sub_22E3CD3D4(v6 + 2032, v9, 0);
  memcpy(__src, v8, v9);
  return sub_22F37FB74(v2, v3, &v12, v4, 0, 0, 0, 0, 0, 0, 1, __src, v9, 0, 0, 0, 0);
}

uint64_t sub_22E919358(_QWORD **a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const void *v17;
  const void *v18;
  char v19;
  const void *v20;
  size_t v21;
  size_t v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[12];
  char *v32[143];

  v32[142] = *(char **)MEMORY[0x24BDAC8D0];
  sub_22F30677C(v31);
  v29 = v31;
  v30 = 0;
  v2 = sub_22E3CB704(*(llvm::StringMapImpl **)((*a1)[11] + 15192), "swift_name", 0xAuLL);
  v3 = (uint64_t *)sub_22E8D1AC4((uint64_t)v31, 104);
  sub_22F2E2FE8((uint64_t)v3, v2, 0, 0, 0, 0, 0, 0, 0);
  sub_22E828580((uint64_t)&v30, (uint64_t)v3);
  v4 = a1[2];
  v7 = (_DWORD *)v4[4];
  v5 = v4 + 4;
  v6 = v7;
  v8 = *((_BYTE *)v5 + 23);
  if (v8 >= 0)
    v9 = v5;
  else
    v9 = v6;
  v10 = v5[1];
  if (v8 >= 0)
    v11 = v8 & 0x7F;
  else
    v11 = v10;
  v12 = 0;
  if (sub_22EA4C2D0(*a1, *a1[1], v9, v11, *(_DWORD *)(*a1[1] + 24), v3, 0))
  {
    v12 = sub_22E3CD3D4((*a1)[11] + 2032, 48, 3);
    v14 = (*a1)[11];
    v25 = 0;
    v24 = 0uLL;
    v26 = 0;
    v28 = 0;
    v27 = 480;
    v15 = a1[2];
    v18 = (const void *)v15[4];
    v16 = v15 + 4;
    v17 = v18;
    v19 = *((_BYTE *)v16 + 23);
    if (v19 >= 0)
      v20 = v16;
    else
      v20 = v17;
    v21 = v16[1];
    if (v19 >= 0)
      v22 = v19 & 0x7F;
    else
      v22 = v21;
    v23 = (void *)sub_22E3CD3D4(v14 + 2032, v22, 0);
    memcpy(v23, v20, v22);
    sub_22F3A1EC0(v12, v14, &v24, v23, v22);
  }
  sub_22E8D1BC4((uint64_t)v29, (uint64_t)&v29);
  sub_22E80F94C(&v30);
  sub_22E8FB19C(v32);
  sub_22E3B4EF4((uint64_t)v31);
  return v12;
}

void sub_22E919544(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  char v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _BOOL4 v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  __int16 *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  __int128 v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  __int16 v102;
  unsigned __int8 v103;
  __int16 v104;
  char v105;
  _QWORD v106[2];
  char v107;
  __int16 v108;
  char v109;
  __int128 v110;
  char v111;
  __int16 v112;
  char v113;
  uint64_t v114;

  v4 = a4;
  v5 = a3;
  v6 = a1;
  v114 = *MEMORY[0x24BDAC8D0];
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 4) != 0)
    v8 = 0;
  else
    v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v8)
    v9 = 0;
  else
    v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v8)
    v10 = v8;
  else
    v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_WORD *)(a3 + 56) & 1) != 0)
    sub_22E9187C8(a1, v10, *(_DWORD *)(a3 + 64) & 3, *(_BYTE *)(a4 + 16));
  v87 = v8;
  v88 = v5;
  v92 = (_QWORD *)v6;
  v85 = v9;
  v86 = v10;
  if (!v8)
  {
    v13 = *(_DWORD *)(v7 + 104);
    if (!v13)
    {
LABEL_65:
      v15 = 0;
      goto LABEL_66;
    }
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 26;
  else
    v12 = 0;
  if (v12)
  {
LABEL_18:
    v13 = (unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38);
    if (!(unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38))
      goto LABEL_65;
LABEL_21:
    v14 = 0;
    v15 = 0;
    v90 = (__int16 *)(v4 + 17);
    v91 = v4;
    if (v87)
      v16 = (_QWORD *)(v87 + 120);
    else
      v16 = (_QWORD *)(v7 + 96);
    v94 = v13;
    v89 = v16;
    while (1)
    {
      v17 = *(_QWORD *)(*v16 + 8 * v14);
      v18 = *(_QWORD *)(v17 + 48);
      v19 = *(_QWORD *)(v5 + 96);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 104) - v19) >> 5) > v14)
        break;
LABEL_42:
      v30 = *(unsigned __int16 *)(v5 + 56);
      v31 = v14 + 1;
      if ((v30 & 1) != 0)
      {
        if (v14 >= (v30 >> 1))
          v32 = 0;
        else
          v32 = (*(_QWORD *)(v5 + 64) >> (2 * v31)) & 3;
        sub_22E9187C8(v6, v17, v32, *(_BYTE *)(v4 + 16));
      }
      v15 |= v18 != *(_QWORD *)(v17 + 48);
      ++v14;
      if (v31 == v94)
        goto LABEL_66;
    }
    v20 = *(_QWORD *)v4;
    v21 = *(_QWORD *)(v4 + 8);
    v22 = *(_BYTE *)(v4 + 16);
    v104 = *v90;
    v105 = *((_BYTE *)v90 + 2);
    v93 = v19 + 96 * v14;
    v23 = *(unsigned __int8 *)(v93 + 88);
    if ((v23 & 1) == 0)
    {
LABEL_38:
      *(_QWORD *)&v110 = v20;
      *((_QWORD *)&v110 + 1) = v21;
      v111 = v22;
      v112 = v104;
      v113 = v105;
      if ((v23 & 0x1C) != 0)
        v29 = (((v23 >> 2) & 7) + 0xFFFFFFFFLL) | 0x100000000;
      else
        v29 = 0;
      v6 = (unint64_t)v92;
      sub_22E919E24((uint64_t)v92, v17, &v110, v29);
      v106[0] = v20;
      v106[1] = v21;
      v107 = v22;
      v108 = v104;
      v109 = v105;
      sub_22E918538(v92, v17, v93, (uint64_t)v106);
      v4 = v91;
      v16 = v89;
      goto LABEL_42;
    }
    if ((v22 & 1) != 0)
    {
      if ((*(_BYTE *)(v17 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v17);
        v24 = *v43;
        if ((*(_BYTE *)(v17 + 29) & 1) != 0)
        {
          sub_22EFC8E88(v17);
          v45 = *(_QWORD *)v44 + 8 * *(unsigned int *)(v44 + 8);
        }
        else
        {
          v45 = 0;
        }
        if (v24 != (uint64_t *)v45)
        {
          while (*(_WORD *)(*v24 + 32) != 477)
          {
            if (++v24 == (uint64_t *)v45)
            {
              v24 = (uint64_t *)v45;
              break;
            }
          }
        }
      }
      else
      {
        v24 = 0;
      }
      if ((*(_BYTE *)(v17 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v17);
        v25 = *(_QWORD *)v26 + 8 * *(unsigned int *)(v26 + 8);
      }
      else
      {
        v25 = 0;
      }
      if (v24 != (uint64_t *)v25)
      {
        v35 = v92[11];
        v36 = *v24;
        v99 = 0uLL;
        v101 = 0;
        v100 = 0;
        v102 = 0;
        v103 = ((((v103 >> 7) & 1) << 23) | 0x780000u) >> 16;
        v84 = sub_22F3A2490(v35, v20, v21, v36, 1, &v99);
        sub_22EFC8E88(v17);
        v38 = *(unsigned int *)(v37 + 8);
        v39 = *(_QWORD *)v37 + 8 * v38;
        if ((uint64_t *)v39 != v24 + 1)
        {
          v83 = v37;
          memmove(v24, v24 + 1, v39 - (_QWORD)(v24 + 1));
          v37 = v83;
          LODWORD(v38) = *(_DWORD *)(v83 + 8);
        }
        *(_DWORD *)(v37 + 8) = v38 - 1;
        sub_22EFCA95C(v17, v84);
      }
      v5 = v88;
      if ((v23 & 2) == 0)
        goto LABEL_37;
      v27 = sub_22E3CD3D4(v92[11] + 2032, 40, 3);
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 16) = 0;
      *(_QWORD *)v27 = 0;
      *(_DWORD *)(v27 + 24) = 0;
      *(_BYTE *)(v27 + 30) = 0;
      *(_WORD *)(v27 + 28) = 480;
      v28 = *(_BYTE *)(v27 + 34);
      *(_WORD *)(v27 + 32) = 477;
      *(_BYTE *)(v27 + 34) = v28 & 0xE0;
    }
    else
    {
      v33 = v92[11];
      if ((v23 & 2) != 0)
      {
        v40 = sub_22E3CD3D4(v33 + 2032, 40, 3);
        *(_QWORD *)(v40 + 8) = 0;
        *(_QWORD *)(v40 + 16) = 0;
        *(_QWORD *)v40 = 0;
        *(_DWORD *)(v40 + 24) = 0;
        *(_BYTE *)(v40 + 30) = 0;
        *(_WORD *)(v40 + 28) = 480;
        v41 = *(_BYTE *)(v40 + 34);
        *(_WORD *)(v40 + 32) = 477;
        *(_BYTE *)(v40 + 34) = v41 & 0xE0;
        v42 = v92[11];
        v99 = 0uLL;
        v101 = 0;
        v100 = 0;
        v102 = 0;
        v103 = ((((v103 >> 7) & 1) << 23) | 0x780000u) >> 16;
        v34 = sub_22F3A2490(v42, v20, v21, v40, (v22 & 2) != 0, &v99);
      }
      else
      {
        v99 = 0uLL;
        v101 = 0;
        v100 = 0;
        v102 = 0;
        v103 = ((((v103 >> 7) & 1) << 23) | 0x780000u) >> 16;
        v34 = sub_22F3A25F4(v33, v20, v21, 477, (v22 & 2) != 0, &v99);
      }
      v27 = v34;
    }
    sub_22EFCA95C(v17, v27);
LABEL_37:
    v23 = *(unsigned __int8 *)(v93 + 88);
    goto LABEL_38;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
  {
    v11 = sub_22F10CF48(v11);
    if (!v11)
      goto LABEL_65;
    goto LABEL_18;
  }
  v15 = 0;
LABEL_66:
  if ((*(_BYTE *)(v4 + 16) & 1) == 0)
  {
    v46 = 0;
    goto LABEL_68;
  }
  v48 = *(_BYTE *)(v5 + 95);
  v49 = v48;
  v50 = v48 & 0x7F;
  if (v49 < 0)
    v50 = *(_QWORD *)(v5 + 80);
  v47 = v87;
  if (!v50)
    goto LABEL_88;
  v51 = *(_QWORD *)(v6 + 3192);
  if (!v51)
    goto LABEL_88;
  v52 = v49 >= 0 ? v5 + 72 : *(_QWORD *)(v5 + 72);
  v53 = *(_DWORD *)(v86 + 24);
  *(_QWORD *)&v99 = v52;
  *((_QWORD *)&v99 + 1) = v50;
  *(_QWORD *)&v110 = "<API Notes>";
  *((_QWORD *)&v110 + 1) = 11;
  LODWORD(v106[0]) = v53;
  v54 = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *, _QWORD *))(*(_QWORD *)v51 + 48))(v51, &v99, &v110, v106);
  if (v55 || v54 == 0)
    goto LABEL_88;
  v57 = v54;
  if (v54 >= 0x10)
  {
    v59 = *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0);
    v58 = v85;
    if (v59 && *(_BYTE *)(v59 + 16) == 57)
      v57 = *(_QWORD *)(v59 + 8);
  }
  else
  {
    v57 = 0;
    v58 = v85;
  }
  if (!v58)
  {
    v73 = *(_DWORD *)(v87 + 24);
    v74 = *(_QWORD *)(*(_QWORD *)(v87 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v74 || *(unsigned __int8 *)(v74 + 16) - 27 <= 0xFFFFFFFD)
      v74 = sub_22F10CF48(v74);
    v75 = sub_22E918724(v92, v73, *(_QWORD *)(v74 + 24), v57);
    if (v75)
      v46 = 0;
    else
      v46 = v57;
    v15 |= !v75;
LABEL_68:
    v47 = v87;
    if (!v87)
      goto LABEL_134;
    goto LABEL_89;
  }
  if (sub_22E918724(v92, *(_DWORD *)(v86 + 24), *(_QWORD *)(v58 + 80), v57))
  {
LABEL_88:
    v46 = 0;
    if (!v87)
      goto LABEL_134;
    goto LABEL_89;
  }
  v76 = sub_22EF579A8(v92[11], v57, *(_DWORD *)(v86 + 24));
  v77 = v58;
  v46 = 0;
  *(_QWORD *)(v77 + 80) = v57;
  *(_QWORD *)(v77 + 88) = v76;
  if (!v87)
    goto LABEL_134;
LABEL_89:
  if ((v15 & 1) == 0)
    goto LABEL_134;
  v60 = *(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v60)
    v61 = *(_BYTE *)(v60 + 16) == 26;
  else
    v61 = 0;
  if (v61
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v60 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0))) != 0)
  {
    if (v46 <= 0xF)
      v46 = *(_QWORD *)(v60 + 24);
    v62 = v4;
    *(_QWORD *)&v110 = &v111;
    *((_QWORD *)&v110 + 1) = 0x400000000;
    v63 = *(_QWORD *)(v47 + 120);
    v64 = *(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v64)
      v65 = *(_BYTE *)(v64 + 16) == 26;
    else
      v65 = 0;
    if (v65)
    {
      v66 = 0;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      {
        v66 = 0;
LABEL_131:
        v78 = v92[11];
        v79 = (uint64_t *)v110;
        v80 = v66;
        sub_22E4913B4(v60, (uint64_t)&v99);
        *(_QWORD *)(v87 + 48) = sub_22EF63D8C(v78, v46, v79, v80, &v99, 0);
        if ((char *)v110 != &v111)
          free((void *)v110);
        v5 = v88;
        v4 = v62;
        goto LABEL_134;
      }
      v64 = sub_22F10CF48(v64);
      v66 = DWORD2(v110);
      if (!v64)
        goto LABEL_131;
    }
    v67 = *(_QWORD *)(v64 + 16);
    if ((v67 & 0x3FFFC000000000) != 0)
    {
      v68 = 8 * (unsigned __int16)(v67 >> 38);
      do
      {
        v69 = *(_QWORD *)(*(_QWORD *)v63 + 48);
        if (v66 >= HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v66 = DWORD2(v110);
        }
        *(_QWORD *)(v110 + 8 * v66) = v69;
        v66 = ++DWORD2(v110);
        v63 += 8;
        v68 -= 8;
      }
      while (v68);
    }
    goto LABEL_131;
  }
  if (v46 >= 0x10)
  {
    v70 = *(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v70)
      v71 = *(_BYTE *)(v70 + 16) == 25;
    else
      v71 = 0;
    if (!v71)
      v70 = sub_22F10CF48(v70);
    v72 = v92[11];
    LOWORD(v99) = *(_DWORD *)(v70 + 16) >> 19;
    *(_QWORD *)(v47 + 48) = sub_22F369930(v72, v46, (unsigned __int16 *)&v99);
  }
LABEL_134:
  v97 = *(_OWORD *)v4;
  v98 = *(_DWORD *)(v4 + 16);
  v81 = *(unsigned __int16 *)(v5 + 56);
  if ((v81 & 0xE00) != 0)
    v82 = (((v81 >> 9) & 7) + 0xFFFFFFFF) | 0x100000000;
  else
    v82 = 0;
  sub_22E919E24((uint64_t)v92, v86, &v97, v82);
  v95 = *(_OWORD *)v4;
  v96 = *(_DWORD *)(v4 + 16);
  sub_22E918AE4((uint64_t)v92, v86, v5, &v95);
}

void sub_22E919E24(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  uint64_t **v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  __int128 v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int16 v88;
  char v89;

  if ((a4 & 0xFF00000000) != 0)
  {
    switch((int)a4)
    {
      case 0:
        v6 = *(_DWORD *)(a2 + 28);
        if ((v6 & 0x7Eu) - 52 > 5)
        {
          v83 = *a3;
          v84 = *((_DWORD *)a3 + 4);
          v18 = &v83;
          v19 = 0;
          goto LABEL_26;
        }
        v7 = *(_QWORD *)a3;
        v8 = *((_QWORD *)a3 + 1);
        v9 = *((_BYTE *)a3 + 16);
        if ((v9 & 1) == 0)
        {
          v28 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v29 = v28;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)v28 = 0;
          *(_DWORD *)(v28 + 24) = 0;
          *(_BYTE *)(v28 + 30) = 0;
          *(_WORD *)(v28 + 28) = 480;
          v30 = *(_BYTE *)(v28 + 34);
          v31 = 126;
          goto LABEL_55;
        }
        if ((v6 & 0x100) != 0)
        {
          sub_22EFC8E88(a2);
          v10 = *v76;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v78 = *(_QWORD *)v77 + 8 * *(unsigned int *)(v77 + 8);
          }
          else
          {
            v78 = 0;
          }
          if (v10 != (uint64_t *)v78)
          {
            do
            {
              v79 = *(unsigned __int16 *)(*v10 + 32);
              v80 = (v79 - 121) > 4 || ((1 << (v79 - 121)) & 0x19) == 0;
              if (!v80 || v79 == 59 || v79 == 221)
                goto LABEL_7;
              ++v10;
            }
            while (v10 != (uint64_t *)v78);
            v10 = (uint64_t *)v78;
          }
        }
        else
        {
          v10 = 0;
        }
LABEL_7:
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v11 = *(_QWORD *)v27 + 8 * *(unsigned int *)(v27 + 8);
        }
        else
        {
          v11 = 0;
        }
        if (v10 != (uint64_t *)v11)
        {
          v54 = *(_QWORD *)(a1 + 88);
          v55 = *v10;
          v85 = 0uLL;
          v87 = 0;
          v86 = 0;
          v89 = 120;
          v88 = 0;
          v56 = sub_22F3A2490(v54, v7, v8, v55, 1, &v85);
          sub_22EFC8E88(a2);
          v58 = v57;
          v59 = *(unsigned int *)(v57 + 8);
          v60 = *(_QWORD *)v57 + 8 * v59;
          if ((uint64_t *)v60 != v10 + 1)
          {
            memmove(v10, v10 + 1, v60 - (_QWORD)(v10 + 1));
            LODWORD(v59) = *(_DWORD *)(v58 + 8);
          }
          *(_DWORD *)(v58 + 8) = v59 - 1;
          sub_22EFCA95C(a2, v56);
        }
        v21 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
        v22 = v21;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 30) = 0;
        *(_WORD *)(v21 + 28) = 480;
        v23 = *(_BYTE *)(v21 + 34);
        v24 = 126;
        goto LABEL_40;
      case 1:
        v81 = *a3;
        v82 = *((_DWORD *)a3 + 4);
        v18 = &v81;
        v19 = 1;
LABEL_26:
        sub_22E91A654(a1, a2, v19, (uint64_t)v18);
        return;
      case 2:
        v7 = *(_QWORD *)a3;
        v8 = *((_QWORD *)a3 + 1);
        v9 = *((_BYTE *)a3 + 16);
        if ((v9 & 1) == 0)
        {
          v28 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v29 = v28;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)v28 = 0;
          *(_DWORD *)(v28 + 24) = 0;
          *(_BYTE *)(v28 + 30) = 0;
          *(_WORD *)(v28 + 28) = 480;
          v30 = *(_BYTE *)(v28 + 34);
          v31 = 124;
          goto LABEL_55;
        }
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        {
          v14 = 0;
          goto LABEL_17;
        }
        sub_22EFC8E88(a2);
        v14 = *v66;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v68 = *(_QWORD *)v67 + 8 * *(unsigned int *)(v67 + 8);
        }
        else
        {
          v68 = 0;
        }
        if (v14 == (uint64_t *)v68)
          goto LABEL_17;
        while (1)
        {
          v69 = *(unsigned __int16 *)(*v14 + 32);
          v70 = (v69 - 121) > 4 || ((1 << (v69 - 121)) & 0x19) == 0;
          if (!v70 || v69 == 59 || v69 == 221)
            break;
          if (++v14 == (uint64_t *)v68)
          {
            v14 = (uint64_t *)v68;
            break;
          }
        }
LABEL_17:
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v15 = *(_QWORD *)v25 + 8 * *(unsigned int *)(v25 + 8);
        }
        else
        {
          v15 = 0;
        }
        if (v14 != (uint64_t *)v15)
        {
          v39 = *(_QWORD *)(a1 + 88);
          v40 = *v14;
          v85 = 0uLL;
          v87 = 0;
          v86 = 0;
          v89 = 120;
          v88 = 0;
          v41 = sub_22F3A2490(v39, v7, v8, v40, 1, &v85);
          sub_22EFC8E88(a2);
          v43 = v42;
          v44 = *(unsigned int *)(v42 + 8);
          v45 = *(_QWORD *)v42 + 8 * v44;
          if ((uint64_t *)v45 != v14 + 1)
          {
            memmove(v14, v14 + 1, v45 - (_QWORD)(v14 + 1));
            LODWORD(v44) = *(_DWORD *)(v43 + 8);
          }
          *(_DWORD *)(v43 + 8) = v44 - 1;
          sub_22EFCA95C(a2, v41);
        }
        v21 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
        v22 = v21;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 30) = 0;
        *(_WORD *)(v21 + 28) = 480;
        v23 = *(_BYTE *)(v21 + 34);
        v24 = 124;
        goto LABEL_40;
      case 3:
        v7 = *(_QWORD *)a3;
        v8 = *((_QWORD *)a3 + 1);
        v9 = *((_BYTE *)a3 + 16);
        if ((v9 & 1) == 0)
        {
          v28 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v29 = v28;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)v28 = 0;
          *(_DWORD *)(v28 + 24) = 0;
          *(_BYTE *)(v28 + 30) = 0;
          *(_WORD *)(v28 + 28) = 480;
          v30 = *(_BYTE *)(v28 + 34);
          v31 = 59;
          goto LABEL_55;
        }
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        {
          v16 = 0;
          goto LABEL_22;
        }
        sub_22EFC8E88(a2);
        v16 = *v71;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
        }
        else
        {
          v73 = 0;
        }
        if (v16 == (uint64_t *)v73)
          goto LABEL_22;
        while (1)
        {
          v74 = *(unsigned __int16 *)(*v16 + 32);
          v75 = (v74 - 121) > 4 || ((1 << (v74 - 121)) & 0x19) == 0;
          if (!v75 || v74 == 59 || v74 == 221)
            break;
          if (++v16 == (uint64_t *)v73)
          {
            v16 = (uint64_t *)v73;
            break;
          }
        }
LABEL_22:
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v17 = *(_QWORD *)v26 + 8 * *(unsigned int *)(v26 + 8);
        }
        else
        {
          v17 = 0;
        }
        if (v16 != (uint64_t *)v17)
        {
          v46 = *(_QWORD *)(a1 + 88);
          v47 = *v16;
          v85 = 0uLL;
          v87 = 0;
          v86 = 0;
          v89 = 120;
          v88 = 0;
          v48 = sub_22F3A2490(v46, v7, v8, v47, 1, &v85);
          sub_22EFC8E88(a2);
          v50 = v49;
          v51 = *(unsigned int *)(v49 + 8);
          v52 = *(_QWORD *)v49 + 8 * v51;
          if ((uint64_t *)v52 != v16 + 1)
          {
            memmove(v16, v16 + 1, v52 - (_QWORD)(v16 + 1));
            LODWORD(v51) = *(_DWORD *)(v50 + 8);
          }
          *(_DWORD *)(v50 + 8) = v51 - 1;
          sub_22EFCA95C(a2, v48);
        }
        v21 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
        v22 = v21;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 30) = 0;
        *(_WORD *)(v21 + 28) = 480;
        v23 = *(_BYTE *)(v21 + 34);
        v24 = 59;
LABEL_40:
        *(_WORD *)(v21 + 32) = v24;
        *(_BYTE *)(v21 + 34) = v23 & 0xE0;
        goto LABEL_41;
      case 4:
        v7 = *(_QWORD *)a3;
        v8 = *((_QWORD *)a3 + 1);
        v9 = *((_BYTE *)a3 + 16);
        if ((v9 & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v12 = *v61;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v63 = *(_QWORD *)v62 + 8 * *(unsigned int *)(v62 + 8);
            }
            else
            {
              v63 = 0;
            }
            if (v12 != (uint64_t *)v63)
            {
              do
              {
                v64 = *(unsigned __int16 *)(*v12 + 32);
                v65 = (v64 - 121) > 4 || ((1 << (v64 - 121)) & 0x19) == 0;
                if (!v65 || v64 == 59 || v64 == 221)
                  goto LABEL_12;
                ++v12;
              }
              while (v12 != (uint64_t *)v63);
              v12 = (uint64_t *)v63;
            }
          }
          else
          {
            v12 = 0;
          }
LABEL_12:
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v13 = *(_QWORD *)v20 + 8 * *(unsigned int *)(v20 + 8);
          }
          else
          {
            v13 = 0;
          }
          if (v12 != (uint64_t *)v13)
          {
            v32 = *(_QWORD *)(a1 + 88);
            v33 = *v12;
            v85 = 0uLL;
            v87 = 0;
            v86 = 0;
            v89 = 120;
            v88 = 0;
            v34 = sub_22F3A2490(v32, v7, v8, v33, 1, &v85);
            sub_22EFC8E88(a2);
            v36 = v35;
            v37 = *(unsigned int *)(v35 + 8);
            v38 = *(_QWORD *)v35 + 8 * v37;
            if ((uint64_t *)v38 != v12 + 1)
            {
              memmove(v12, v12 + 1, v38 - (_QWORD)(v12 + 1));
              LODWORD(v37) = *(_DWORD *)(v36 + 8);
            }
            *(_DWORD *)(v36 + 8) = v37 - 1;
            sub_22EFCA95C(a2, v34);
          }
          v21 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
          v22 = v21;
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)v21 = 0;
          *(_DWORD *)(v21 + 24) = 0;
          *(_BYTE *)(v21 + 30) = 0;
          *(_WORD *)(v21 + 28) = 480;
          v23 = *(_BYTE *)(v21 + 34);
          v24 = 221;
          goto LABEL_40;
        }
        v28 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
        v29 = v28;
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        *(_QWORD *)v28 = 0;
        *(_DWORD *)(v28 + 24) = 0;
        *(_BYTE *)(v28 + 30) = 0;
        *(_WORD *)(v28 + 28) = 480;
        v30 = *(_BYTE *)(v28 + 34);
        v31 = 221;
LABEL_55:
        *(_WORD *)(v28 + 32) = v31;
        *(_BYTE *)(v28 + 34) = v30 & 0xE0;
        v53 = *(_QWORD *)(a1 + 88);
        v85 = 0uLL;
        v87 = 0;
        v86 = 0;
        v89 = 120;
        v88 = 0;
        v22 = sub_22F3A2490(v53, v7, v8, v29, (v9 & 2) != 0, &v85);
LABEL_41:
        sub_22EFCA95C(a2, v22);
        break;
      default:
        return;
    }
  }
}

void sub_22E91A654(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  char v36;

  v7 = *(_QWORD *)a4;
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_BYTE *)(a4 + 16);
  if ((v9 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 88);
    if (a3)
    {
      v16 = sub_22E3CD3D4(v15 + 2032, 40, 3);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)v16 = 0;
      *(_DWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 30) = 0;
      *(_WORD *)(v16 + 28) = 480;
      v17 = *(_BYTE *)(v16 + 34);
      *(_WORD *)(v16 + 32) = 125;
      *(_BYTE *)(v16 + 34) = v17 & 0xE0;
      v18 = *(_QWORD *)(a1 + 88);
      v32 = 0uLL;
      v34 = 0;
      v33 = 0;
      v36 = 120;
      v35 = 0;
      v19 = sub_22F3A2490(v18, v7, v8, v16, (v9 & 2) != 0, &v32);
    }
    else
    {
      v32 = 0uLL;
      v34 = 0;
      v33 = 0;
      v36 = 120;
      v35 = 0;
      v19 = sub_22F3A25F4(v15, v7, v8, 125, (v9 & 2) != 0, &v32);
    }
    v13 = v19;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v10 = *v27;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v29 = *(_QWORD *)v28 + 8 * *(unsigned int *)(v28 + 8);
    }
    else
    {
      v29 = 0;
    }
    if (v10 != (uint64_t *)v29)
    {
      while (1)
      {
        v30 = *(unsigned __int16 *)(*v10 + 32);
        v31 = (v30 - 121) > 4 || ((1 << (v30 - 121)) & 0x19) == 0;
        if (!v31 || v30 == 59 || v30 == 221)
          break;
        if (++v10 == (uint64_t *)v29)
        {
          v10 = (uint64_t *)v29;
          break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v11 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
  }
  else
  {
    v11 = 0;
  }
  if (v10 == (uint64_t *)v11)
  {
    if (a3)
    {
LABEL_9:
      v13 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 30) = 0;
      *(_WORD *)(v13 + 28) = 480;
      v14 = *(_BYTE *)(v13 + 34);
      *(_WORD *)(v13 + 32) = 125;
      *(_BYTE *)(v13 + 34) = v14 & 0xE0;
LABEL_10:
      sub_22EFCA95C(a2, v13);
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 88);
    v21 = *v10;
    v32 = 0uLL;
    v34 = 0;
    v33 = 0;
    v36 = 120;
    v35 = 0;
    v22 = sub_22F3A2490(v20, v7, v8, v21, 1, &v32);
    sub_22EFC8E88(a2);
    v24 = v23;
    v25 = *(unsigned int *)(v23 + 8);
    v26 = *(_QWORD *)v23 + 8 * v25;
    if ((uint64_t *)v26 != v10 + 1)
    {
      memmove(v10, v10 + 1, v26 - (_QWORD)(v10 + 1));
      LODWORD(v25) = *(_DWORD *)(v24 + 8);
    }
    *(_DWORD *)(v24 + 8) = v25 - 1;
    sub_22EFCA95C(a2, v22);
    if (a3)
      goto LABEL_9;
  }
}

void sub_22E91A900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  _QWORD v16[2];
  char v17;
  void *v18[2];
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  char v26;
  void *__p;
  char v28;
  char v29;
  char v30;

  if (!sub_22F30C1B8(a2))
  {
    v6 = *(_DWORD *)(a3 + 160);
    if (*(_DWORD *)(a3 + 8) != v6)
    {
      v26 = 0;
      LOBYTE(__p) = 0;
      v29 = 0;
      v30 = 0;
      v18[1] = 0;
      v19 = 0;
      v18[0] = 0;
      v20 = 0;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      LOBYTE(v24) = 0;
      v7 = *(_QWORD *)a3 + 144 * v6;
      v8 = *(_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      sub_22F30BD28((uint64_t)v18, v7 + 16);
      v30 = *(_BYTE *)(v7 + 136);
      if (v8 & 0x7FFFFFFFFFFFFFFFLL | v9 & 0x7FFFFFFF7FFFFFFFLL)
      {
        v10 = HIBYTE(v23) & 0x7F;
        if (v23 < 0)
          v10 = v22;
        if (v10)
        {
          v11 = *(unsigned int *)(a3 + 8);
          if ((_DWORD)v11)
          {
            v12 = 144 * v11;
            v13 = *(_QWORD *)a3 + 56;
            while (1)
            {
              if (!(*(_QWORD *)(v13 - 56) & 0x7FFFFFFFFFFFFFFFLL | *(_QWORD *)(v13 - 48) & 0x7FFFFFFF7FFFFFFFLL))
              {
                if (*(char *)(v13 + 15) < 0 ? *(_QWORD *)v13 : *(unsigned __int8 *)(v13 + 15))
                  break;
              }
              v13 += 144;
              v12 -= 144;
              if (!v12)
                goto LABEL_16;
            }
          }
          else
          {
LABEL_16:
            v16[0] = v8;
            v16[1] = v9;
            v17 = 2;
            sub_22E918310(a1, a2, 0, (uint64_t)v16, (uint64_t (*)(uint64_t))sub_22E91AAA8, (uint64_t)&v15);
          }
        }
      }
      if (v29)
      {
        if (v28 < 0)
          operator delete(__p);
        v29 = 0;
      }
      if (v26)
      {
        if (v25 < 0)
          operator delete(v24);
        v26 = 0;
      }
      if (SHIBYTE(v23) < 0)
        operator delete(v21);
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
    }
  }
}

void sub_22E91AAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  void **p_p;
  void *__p;
  uint64_t v55;
  char v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  unsigned __int8 v62;

  LOBYTE(__p) = 0;
  v57 = 0;
  if (!*(_BYTE *)(a3 + 80))
    goto LABEL_19;
  sub_22E6C96C4(&__p, (__int128 *)(a3 + 56));
  if (!v57)
    goto LABEL_19;
  if (v56 >= 0)
    v8 = v56 & 0x7F;
  else
    v8 = v55;
  v9 = *(_QWORD *)a4;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_BYTE *)(a4 + 16);
  v52 = a1;
  p_p = &__p;
  if ((v11 & 1) == 0)
  {
    if (v8)
    {
      v40 = sub_22E91AF8C(&v52);
      v41 = *(_QWORD *)(a1 + 88);
      v58 = 0uLL;
      v60 = 0;
      v59 = 0;
      v62 = 120;
      v61 = 0;
      v15 = sub_22F3A2490(v41, v9, v10, v40, (v11 & 2) != 0, &v58);
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 88);
      v58 = 0uLL;
      v60 = 0;
      v59 = 0;
      v62 = 120;
      v61 = 0;
      v15 = sub_22F3A25F4(v24, v9, v10, 317, (v11 & 2) != 0, &v58);
    }
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v12 = *v44;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v46 = *(_QWORD *)v45 + 8 * *(unsigned int *)(v45 + 8);
    }
    else
    {
      v46 = 0;
    }
    if (v12 != (uint64_t *)v46)
    {
      while (*(_WORD *)(*v12 + 32) != 317)
      {
        if (++v12 == (uint64_t *)v46)
        {
          v12 = (uint64_t *)v46;
          break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v13 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
  }
  else
  {
    v13 = 0;
  }
  if (v12 != (uint64_t *)v13)
  {
    v26 = *(_QWORD *)(a1 + 88);
    v27 = *v12;
    v58 = 0uLL;
    v60 = 0;
    v59 = 0;
    v62 = 120;
    v61 = 0;
    v28 = sub_22F3A2490(v26, v9, v10, v27, 1, &v58);
    sub_22EFC8E88(a2);
    v30 = v29;
    v31 = *(unsigned int *)(v29 + 8);
    v32 = *(_QWORD *)v29 + 8 * v31;
    if ((uint64_t *)v32 != v12 + 1)
    {
      memmove(v12, v12 + 1, v32 - (_QWORD)(v12 + 1));
      LODWORD(v31) = *(_DWORD *)(v30 + 8);
    }
    *(_DWORD *)(v30 + 8) = v31 - 1;
    sub_22EFCA95C(a2, v28);
    if (!v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v8)
  {
LABEL_14:
    v15 = sub_22E91AF8C(&v52);
LABEL_15:
    sub_22EFCA95C(a2, v15);
  }
LABEL_16:
  if (v57 && v56 < 0)
    operator delete(__p);
LABEL_19:
  LOBYTE(__p) = 0;
  v57 = 0;
  if (!*(_BYTE *)(a3 + 112))
    goto LABEL_37;
  sub_22E6C96C4(&__p, (__int128 *)(a3 + 88));
  if (!v57)
    goto LABEL_37;
  if (v56 >= 0)
    v16 = v56 & 0x7F;
  else
    v16 = v55;
  v17 = *(_QWORD *)a4;
  v18 = *(_QWORD *)(a4 + 8);
  v19 = *(_BYTE *)(a4 + 16);
  v52 = a1;
  p_p = &__p;
  if ((v19 & 1) == 0)
  {
    if (v16)
    {
      v42 = sub_22E91B050(&v52);
      v43 = *(_QWORD *)(a1 + 88);
      v58 = 0uLL;
      v60 = 0;
      v59 = 0;
      v61 = 0;
      v62 = ((((v62 >> 7) & 1) << 23) | 0x780000u) >> 16;
      v23 = sub_22F3A2490(v43, v17, v18, v42, (v19 & 2) != 0, &v58);
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 88);
      v58 = 0uLL;
      v60 = 0;
      v59 = 0;
      v61 = 0;
      v62 = ((((v62 >> 7) & 1) << 23) | 0x780000u) >> 16;
      v23 = sub_22F3A25F4(v25, v17, v18, 219, (v19 & 2) != 0, &v58);
    }
    goto LABEL_33;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v20 = *v47;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v49 = *(_QWORD *)v48 + 8 * *(unsigned int *)(v48 + 8);
    }
    else
    {
      v49 = 0;
    }
    if (v20 != (uint64_t *)v49)
    {
      while (*(_WORD *)(*v20 + 32) != 219)
      {
        if (++v20 == (uint64_t *)v49)
        {
          v20 = (uint64_t *)v49;
          break;
        }
      }
    }
  }
  else
  {
    v20 = 0;
  }
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v21 = *(_QWORD *)v22 + 8 * *(unsigned int *)(v22 + 8);
  }
  else
  {
    v21 = 0;
  }
  if (v20 != (uint64_t *)v21)
  {
    v33 = *(_QWORD *)(a1 + 88);
    v34 = *v20;
    v58 = 0uLL;
    v60 = 0;
    v59 = 0;
    v61 = 0;
    v62 = ((((v62 >> 7) & 1) << 23) | 0x780000u) >> 16;
    v35 = sub_22F3A2490(v33, v17, v18, v34, 1, &v58);
    sub_22EFC8E88(a2);
    v37 = v36;
    v38 = *(unsigned int *)(v36 + 8);
    v39 = *(_QWORD *)v36 + 8 * v38;
    if ((uint64_t *)v39 != v20 + 1)
    {
      memmove(v20, v20 + 1, v39 - (_QWORD)(v20 + 1));
      LODWORD(v38) = *(_DWORD *)(v37 + 8);
    }
    *(_DWORD *)(v37 + 8) = v38 - 1;
    sub_22EFCA95C(a2, v35);
    if (!v16)
      goto LABEL_34;
    goto LABEL_32;
  }
  if (v16)
  {
LABEL_32:
    v23 = sub_22E91B050(&v52);
LABEL_33:
    sub_22EFCA95C(a2, v23);
  }
LABEL_34:
  if (v57 && v56 < 0)
    operator delete(__p);
LABEL_37:
  v50 = *(_OWORD *)a4;
  v51 = *(_DWORD *)(a4 + 16);
  sub_22E918AE4(a1, a2, a3, &v50);
}

uint64_t sub_22E91AF8C(_QWORD *a1)
{
  uint64_t v2;
  const void **v3;
  uint64_t v4;
  char v5;
  BOOL v6;
  const void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  char v16;

  v2 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
  v3 = (const void **)a1[1];
  v4 = *(_QWORD *)(*a1 + 88);
  v13 = 0;
  v12 = 0uLL;
  v14 = 0;
  v16 = 0;
  v15 = 480;
  v5 = *((_BYTE *)v3 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = v3;
  else
    v7 = *v3;
  v8 = v5 & 0x7F;
  if (v6)
    v9 = (size_t)v3[1];
  else
    v9 = v8;
  v10 = (void *)sub_22E3CD3D4(v4 + 2032, v9, 0);
  memcpy(v10, v7, v9);
  return sub_22F3A14BC(v2, v4, &v12, v10, v9);
}

uint64_t sub_22E91B050(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  BOOL v5;
  const void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  char v10;

  v2 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
  v3 = a1[1];
  v4 = *(_BYTE *)(v3 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (const void *)a1[1];
  else
    v6 = *(const void **)v3;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = *(_QWORD *)(v3 + 8);
  else
    v8 = v7;
  v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), v6, v8);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 30) = 0;
  *(_WORD *)(v2 + 28) = 480;
  v10 = *(_BYTE *)(v2 + 34);
  *(_WORD *)(v2 + 32) = 219;
  *(_BYTE *)(v2 + 34) = v10 & 0xE0;
  *(_QWORD *)(v2 + 40) = v9;
  return v2;
}

uint64_t sub_22E91B0EC(uint64_t a1)
{
  _BOOL4 v1;
  uint64_t result;
  char v3;

  v1 = **(_DWORD **)a1 == 1;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2032, 40, 3);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 30) = 0;
  *(_WORD *)(result + 28) = 480;
  v3 = *(_BYTE *)(result + 34);
  *(_WORD *)(result + 32) = 170;
  *(_BYTE *)(result + 34) = v3 & 0xE0;
  *(_DWORD *)(result + 36) = v1;
  return result;
}

uint64_t sub_22E91B15C(uint64_t a1)
{
  _BOOL4 v1;
  uint64_t result;
  char v3;

  v1 = **(_DWORD **)a1 == 2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2032, 40, 3);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 30) = 8;
  *(_WORD *)(result + 28) = 426;
  v3 = *(_BYTE *)(result + 34);
  *(_WORD *)(result + 32) = 323;
  *(_BYTE *)(result + 34) = v3 & 0xE0;
  *(_DWORD *)(result + 36) = v1;
  return result;
}

uint64_t sub_22E91B1D4(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_22EFDC9F0(**(_QWORD **)a1);
  if (v2)
    sub_22F3B5DDC(v2);
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88) + 2032, 40, 3);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 30) = 0;
  *(_WORD *)(result + 28) = 480;
  v4 = *(_BYTE *)(result + 34);
  *(_WORD *)(result + 32) = 483;
  *(_BYTE *)(result + 34) = v4 & 0xE0;
  return result;
}

uint64_t sub_22E91B24C(uint64_t **a1)
{
  uint64_t result;
  char v3;
  int v4;
  unsigned int v5[24];

  if (sub_22E91B2F8(**a1))
  {
    sub_22E8FCA40(a1[1], *(_DWORD *)(**a1 + 24), 0x1AB9u, 0, (uint64_t)v5);
    v4 = 0;
    sub_22E8900C4((uint64_t)v5, &v4);
    sub_22E903BEC(v5);
  }
  result = sub_22E3CD3D4(a1[1][11] + 2032, 40, 3);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 30) = 0;
  *(_WORD *)(result + 28) = 480;
  v3 = *(_BYTE *)(result + 34);
  *(_WORD *)(result + 32) = 490;
  *(_BYTE *)(result + 34) = v3 & 0xE0;
  return result;
}

BOOL sub_22E91B2F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 484)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22E91B358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)*(_QWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  std::string::operator=((std::string *)v4, (const std::string *)(a2 + 16));
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + 40);
  std::string::operator=((std::string *)(v4 + 32), (const std::string *)(a2 + 48));
  *(_BYTE *)(v4 + 56) = *(_BYTE *)(a2 + 72);
  std::string::operator=((std::string *)(v4 + 64), (const std::string *)(a2 + 80));
  *(_BYTE *)(v4 + 88) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t sub_22E91B3D0(_QWORD *a1)
{
  uint64_t result;
  char v2;

  *(_DWORD *)(*(_QWORD *)*a1 + 72) |= 0x10000u;
  result = sub_22E3CD3D4(*(_QWORD *)(a1[1] + 88) + 2032, 40, 3);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 30) = 0;
  *(_WORD *)(result + 28) = 480;
  v2 = *(_BYTE *)(result + 34);
  *(_WORD *)(result + 32) = 269;
  *(_BYTE *)(result + 34) = v2 & 0xE0;
  return result;
}

void sub_22E91B438(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  const void *v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 __dst;
  unint64_t v20;
  int v21;
  uint64_t v22;
  void *__p[2];
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27[4];
  char v28;

  *(_BYTE *)(a2 + 1) = 1;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 76);
  v27[0] = *(_QWORD *)(a2 + 8);
  v27[1] = v6;
  v27[2] = v7;
  v27[3] = v8;
  v28 = v10;
  v11 = *(_DWORD *)(a2 + 72);
  v12 = *(const void **)(a2 + 40);
  if (!v12)
  {
    __dst = 0uLL;
    v20 = 0;
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(a2 + 48);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v20 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v20) = *(_QWORD *)(a2 + 48);
    p_dst = &__dst;
    if (!v13)
      goto LABEL_11;
  }
  memmove(p_dst, v12, v13);
LABEL_11:
  *((_BYTE *)p_dst + v13) = 0;
LABEL_12:
  v17 = *(_QWORD *)(a2 + 32);
  v18 = *(_BYTE *)(a2 + 77);
  v21 = v11;
  v22 = v9;
  *(_OWORD *)__p = __dst;
  v24 = v20;
  v25 = v17;
  v26 = v18;
  sub_22E91B578(a1, a3, v27, (uint64_t)&v21);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_22E91B578(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[56];

  if (sub_22E91C320(a1, (uint64_t)a2, a4))
  {
    if (*(_DWORD *)a4 == 1)
    {
      sub_22E91C3DC(a1, a2, (uint64_t)a3, a4, 0);
    }
    else
    {
      sub_22E91E2BC((uint64_t)v13, a1, (uint64_t)a3, a4);
      v8 = *(_BYTE *)(a4 + 39);
      v9 = v8;
      if (v8 >= 0)
        v10 = a4 + 16;
      else
        v10 = *(_QWORD *)(a4 + 16);
      v11 = v8 & 0x7F;
      if (v9 >= 0)
        v12 = v11;
      else
        v12 = *(_QWORD *)(a4 + 24);
      sub_22E91CEEC(a1, v10, v12, (uint64_t)v13, a3, a4, 0, 0);
    }
  }
}

void sub_22E91B644(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  const void *v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  void *__p[2];
  unint64_t v35;
  uint64_t v36;
  char v37;
  __int128 __dst;
  unint64_t v39;
  int v40;
  uint64_t v41;
  void *v42[2];
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46[4];
  char v47;

  *(_BYTE *)(a2 + 1) = 1;
  *(_BYTE *)(a3 + 1) = 1;
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v12 = *(_BYTE *)(a2 + 76);
  v46[0] = *(_QWORD *)(a2 + 8);
  v46[1] = v8;
  v46[2] = v9;
  v46[3] = v10;
  v47 = v12;
  v13 = *(_DWORD *)(a2 + 72);
  v14 = *(const void **)(a2 + 40);
  if (!v14)
  {
    __dst = 0uLL;
    v39 = 0;
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(a2 + 48);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_28;
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    v39 = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v39) = *(_QWORD *)(a2 + 48);
    p_dst = &__dst;
    if (!v15)
      goto LABEL_11;
  }
  memmove(p_dst, v14, v15);
LABEL_11:
  *((_BYTE *)p_dst + v15) = 0;
LABEL_12:
  v19 = *(_QWORD *)(a2 + 32);
  v20 = *(_BYTE *)(a2 + 77);
  v40 = v13;
  v41 = v11;
  *(_OWORD *)v42 = __dst;
  v43 = v39;
  v44 = v19;
  v45 = v20;
  v21 = *(_DWORD *)(a3 + 72);
  v22 = *(_QWORD *)(a3 + 16);
  v23 = *(const void **)(a3 + 40);
  if (!v23)
  {
    v30 = 0uLL;
    v31 = 0;
    goto LABEL_23;
  }
  v24 = *(_QWORD *)(a3 + 48);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
LABEL_28:
    abort();
  if (v24 >= 0x17)
  {
    v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v26 = v24 | 7;
    v27 = v26 + 1;
    v25 = (__int128 *)operator new(v26 + 1);
    *((_QWORD *)&v30 + 1) = v24;
    v31 = v27 | 0x8000000000000000;
    *(_QWORD *)&v30 = v25;
  }
  else
  {
    HIBYTE(v31) = *(_QWORD *)(a3 + 48);
    v25 = &v30;
    if (!v24)
      goto LABEL_22;
  }
  memmove(v25, v23, v24);
LABEL_22:
  *((_BYTE *)v25 + v24) = 0;
LABEL_23:
  v28 = *(_QWORD *)(a3 + 32);
  v29 = *(_BYTE *)(a3 + 77);
  v32 = v21;
  v33 = v22;
  *(_OWORD *)__p = v30;
  v35 = v31;
  v36 = v28;
  v37 = v29;
  sub_22E91B854(a1, a4, v46, (uint64_t)&v40, (uint64_t)&v32);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43) < 0)
    operator delete(v42[0]);
}

void sub_22E91B854(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  const char **v20;
  const char *v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  void **v36;
  void *__p[2];
  uint64_t v38;
  _DWORD v39[14];
  _DWORD v40[14];

  v10 = sub_22E91C320(a1, (uint64_t)a2, a4);
  v11 = sub_22E91C320(a1, (uint64_t)a2, a5);
  v12 = v11;
  if ((v10 & 1) == 0 && !v11)
    return;
  if ((v10 & v11) == 1 && *(_DWORD *)a4 == *(_DWORD *)a5)
  {
    if (*(_DWORD *)a4 == 1)
    {
      sub_22E91C3DC(a1, a2, (uint64_t)a3, a4, a5);
      return;
    }
    sub_22E91E2BC((uint64_t)v40, a1, (uint64_t)a3, a4);
    sub_22E91E2BC((uint64_t)v39, a1, (uint64_t)a3, a5);
    if (v40[0] == v39[0] && v40[1] == v39[1] && v40[2] == v39[2] && v40[3] == v39[3])
    {
      __p[0] = 0;
      __p[1] = 0;
      v38 = 0;
      v29 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 1;
      v31 = 0;
      v32 = 0;
      v30 = 0;
      v28 = MEMORY[0x24BED83D8] + 16;
      v36 = __p;
      llvm::raw_ostream::SetBufferAndMode();
      v13 = *(_BYTE *)(a4 + 39);
      v14 = v13;
      v15 = v13 & 0x7F;
      if (v14 >= 0)
        v16 = v15;
      else
        v16 = *(_QWORD *)(a4 + 24);
      v17 = *(_BYTE *)(a5 + 39);
      v18 = v17;
      v19 = v17 & 0x7F;
      if (v18 < 0)
        v19 = *(_QWORD *)(a5 + 24);
      if (v16)
      {
        v20 = (const char **)(a4 + 16);
        if (v19)
        {
          if (v14 >= 0)
            v21 = (const char *)(a4 + 16);
          else
            v21 = *v20;
          v22 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v28, v21);
          v23 = v22[4];
          if ((unint64_t)(v22[3] - v23) > 4)
          {
            *(_BYTE *)(v23 + 4) = 32;
            *(_DWORD *)v23 = 1684955424;
            v22[4] += 5;
          }
          else
          {
            v22 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v22, " and ");
          }
          if (*(char *)(a5 + 39) >= 0)
            v24 = (const char *)(a5 + 16);
          else
            v24 = *(const char **)(a5 + 16);
        }
        else
        {
          if (v14 >= 0)
            v24 = (const char *)(a4 + 16);
          else
            v24 = *v20;
          v22 = &v28;
        }
      }
      else
      {
        if (!v19)
        {
LABEL_41:
          v25 = *((_BYTE *)v36 + 23);
          if (v25 >= 0)
            v26 = (uint64_t)v36;
          else
            v26 = (uint64_t)*v36;
          if (v25 >= 0)
            v27 = v25 & 0x7F;
          else
            v27 = (uint64_t)v36[1];
          sub_22E91CEEC(a1, v26, v27, (uint64_t)v40, a3, a4, (uint64_t)v39, a5);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
          if (SHIBYTE(v38) < 0)
            operator delete(__p[0]);
          return;
        }
        if (v18 >= 0)
          v24 = (const char *)(a5 + 16);
        else
          v24 = *(const char **)(a5 + 16);
        v22 = &v28;
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)v22, v24);
      goto LABEL_41;
    }
  }
  if (v10)
    sub_22E91B578(a1, a2, a3, a4);
  if (v12)
    sub_22E91B578(a1, a2, a3, a5);
}

void sub_22E91BB48(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v10;
  uint64_t *v11;
  unint64_t i;
  uint64_t v13;
  BOOL v15;
  void *v16[2];
  void *v17;
  _BYTE v18[320];
  void *v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  if (!a2 || (v4 = a2, (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9))
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    if (v5 != 29 || (v4 = *(_QWORD *)(a2 + 48)) == 0)
    {
      v10 = 0;
      v15 = v5 != 24 && v5 != 1;
      if (a2 && !v15)
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
      goto LABEL_32;
    }
  }
  v6 = *(_QWORD *)(v4 + 144) & 6;
  v7 = (_DWORD *)(*(_QWORD *)(v4 + 144) & 0xFFFFFFFFFFFFFFF8);
  if (v6 == 4 && v7 != 0)
  {
    v7 += 4;
    goto LABEL_37;
  }
  if (v6 == 2 && v7 != 0)
  {
LABEL_37:
    if (((((*v7 >> 1) & 3) + 1) & 0xFFFFFFFD) != 0)
      return;
  }
  v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 64))(v4);
  if ((*(_DWORD *)(v4 + 28) & 0x7F) == 0x37)
  {
    v11 = (uint64_t *)sub_22EFD7ED0(v4);
    for (i = sub_22EFD7ED0(v4) + 8 * ((*(_QWORD *)(v4 + 80) >> 40) & 0x1FFFFFLL); v11 != (uint64_t *)i; ++v11)
    {
      v13 = *v11;
      sub_22E91BD48(v16, a1, a2);
      sub_22E91E72C((uint64_t)v16, *(_QWORD *)(v13 + 8));
      if (v19 != v20)
        free(v19);
      if (v17 != v18)
        free(v17);
    }
  }
LABEL_32:
  sub_22E91BD48(v16, a1, a2);
  sub_22E91E72C((uint64_t)v16, v10);
  if (v19 != v20)
    free(v19);
  if (v17 != v18)
    free(v17);
}

_QWORD *sub_22E91BD48(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a1 + 4;
  v4 = a1 + 2;
  a1[3] = 0x800000000;
  a1[44] = a1 + 46;
  a1[45] = 0x1000000000;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088);
  v6 = *(_OWORD *)(v5 + 240);
  if (*(_QWORD *)(v5 + 264))
  {
    v11 = *(_OWORD *)(v5 + 272);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v11) = 0;
  }
  v9 = v6;
  v10 = 1;
  v12 = v7;
  sub_22E7330A0(v4, (unint64_t)&v9);
  return a1;
}

void sub_22E91BDE0(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  void **v15;
  size_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void **v26;
  size_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned int *v34;
  _BYTE v35[16];
  void *__p;
  char v37;
  char v38;
  uint64_t v39[4];
  char v40;
  int v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  char v46;
  unsigned __int8 v47;
  int v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  uint64_t v52;
  char v53;
  unsigned __int8 v54;
  uint64_t v55[4];
  uint64_t v56;
  char v57;
  uint64_t v58;

  v58 = a2;
  v57 = a7;
  v55[0] = (uint64_t)a1;
  v55[1] = (uint64_t)&v58;
  v55[2] = (uint64_t)&v56;
  v55[3] = (uint64_t)&v57;
  v56 = a8;
  sub_22E91C14C((uint64_t)&v48, v55, 0);
  LOBYTE(v41) = 0;
  v47 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(a1[11] + 15088) + 264);
  if (v13)
  {
    sub_22E91C14C((uint64_t)v35, v55, 1);
    sub_22E958014((uint64_t)&v41, (uint64_t)v35);
    if (v38 && v37 < 0)
      operator delete(__p);
    LODWORD(v13) = v47;
  }
  if (v54 | v13)
  {
    v14 = v58;
    v39[0] = v58;
    v39[1] = (uint64_t)a3;
    v39[2] = a4;
    v39[3] = a5;
    v40 = a6;
    if (a1[400])
    {
      if (v54)
      {
        if (v51 >= 0)
          v26 = v50;
        else
          v26 = (void **)v50[0];
        v27 = v51 & 0x7F;
        if (v51 < 0)
          v27 = (size_t)v50[1];
        sub_22F2F32AC(v48, a3, a4, v58, v49, a5, v52, (uint64_t)v35, v26, v27, a6, v53);
        v28 = a1[400];
        v29 = (_OWORD *)sub_22E90D2A8(v28 + 8, (unint64_t)v35, 1);
        v30 = (_OWORD *)(*(_QWORD *)(v28 + 8) + 80 * *(unsigned int *)(v28 + 16));
        v32 = v29[1];
        v31 = v29[2];
        v33 = v29[3];
        v30[4] = v29[4];
        *v30 = *v29;
        v30[1] = v32;
        v30[2] = v31;
        v30[3] = v33;
        ++*(_DWORD *)(v28 + 16);
        if (!v47)
          goto LABEL_49;
        goto LABEL_10;
      }
      if ((_DWORD)v13)
      {
LABEL_10:
        if (v44 >= 0)
          v15 = v43;
        else
          v15 = (void **)v43[0];
        v16 = v44 & 0x7F;
        if (v44 < 0)
          v16 = (size_t)v43[1];
        sub_22F2F32AC(v41, a3, a4, v14, v42, a5, v45, (uint64_t)v35, v15, v16, a6, v46);
        v17 = a1[400];
        v18 = (_OWORD *)sub_22E90D2A8(v17 + 8, (unint64_t)v35, 1);
        v19 = (_OWORD *)(*(_QWORD *)(v17 + 8) + 80 * *(unsigned int *)(v17 + 16));
        *v19 = *v18;
        v20 = v18[4];
        v21 = v18[1];
        v22 = v18[2];
        v19[3] = v18[3];
        v19[4] = v20;
        v19[1] = v21;
        v19[2] = v22;
        ++*(_DWORD *)(v17 + 16);
        goto LABEL_46;
      }
LABEL_49:
      if (v54)
      {
        if (v51 < 0)
          operator delete(v50[0]);
      }
      return;
    }
    v23 = a1[28];
    if (!v23)
      v23 = a1[27];
    v24 = *(_WORD *)(v23 + 8) & 0x7F;
    v25 = -40;
    if (v24 > 0x46)
    {
      switch(v24)
      {
        case 'S':
          goto LABEL_40;
        case 'G':
          v25 = -56;
          goto LABEL_40;
        case 'Q':
LABEL_40:
          v34 = (unsigned int *)(v23 + v25);
          if (v54)
          {
            if ((_DWORD)v13)
            {
              sub_22E91B854((uint64_t)a1, (unsigned int *)(v23 + v25), v39, (uint64_t)&v48, (uint64_t)&v41);
              goto LABEL_46;
            }
            sub_22E91B578((uint64_t)a1, (unsigned int *)(v23 + v25), v39, (uint64_t)&v48);
            LODWORD(v13) = v47;
          }
          if (!(_DWORD)v13)
            goto LABEL_49;
          sub_22E91B578((uint64_t)a1, v34, v39, (uint64_t)&v41);
LABEL_46:
          if (v47 && v44 < 0)
            operator delete(v43[0]);
          goto LABEL_49;
      }
    }
    else
    {
      if (v24 <= 0x18)
      {
        if (v24 == 16)
        {
LABEL_21:
          v25 = -48;
          goto LABEL_40;
        }
        if (((1 << v24) & 0x1066) != 0)
          goto LABEL_40;
        if (v24 == 24)
          goto LABEL_21;
      }
      if (v24 == 70)
      {
LABEL_38:
        v25 = -64;
        goto LABEL_40;
      }
    }
    if (v24 - 52 >= 6)
    {
      if (v24 - 33 >= 5)
        goto LABEL_21;
      goto LABEL_38;
    }
    v25 = -72;
    goto LABEL_40;
  }
}

void sub_22E91C14C(uint64_t a1, uint64_t *a2, int a3)
{
  char v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24[2];
  void *__p;
  __int128 v26;
  _QWORD v27[3];

  v3 = a3;
  v27[2] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  __p = 0;
  v26 = 0uLL;
  v7 = *(_QWORD **)(*(_QWORD *)(v6 + 88) + 15088);
  if (a3)
  {
    v9 = (void *)v7[32];
    v8 = v7[33];
    v10 = v7 + 34;
    v11 = 35;
  }
  else
  {
    v9 = (void *)v7[28];
    v8 = v7[29];
    v10 = v7 + 30;
    v11 = 31;
  }
  v12 = v7[v11];
  v24[0] = *v10;
  v24[1] = v12;
  v13 = sub_22E92FC10((_QWORD *)v6, *(_QWORD *)a2[1], v9, v8, v24, (uint64_t)&__p, *(_QWORD *)a2[2]);
  v14 = v13;
  v16 = v15;
  if (v13 == 1)
  {
    if (!*(_BYTE *)a2[3])
    {
      if (!*(_DWORD *)(v6 + 1904))
        goto LABEL_6;
      v21 = **(_QWORD **)(v6 + 1896);
      if (!v21)
        goto LABEL_6;
      *(_DWORD *)(v21 + 8) |= 0x800u;
    }
LABEL_13:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    goto LABEL_19;
  }
  if (!v13)
    goto LABEL_13;
LABEL_6:
  v17 = 0;
  v18 = *(_QWORD *)a2[1];
  if (v18 && (*(_DWORD *)(v18 + 28) & 0x7F) == 0x18)
  {
    v19 = sub_22EFDCBF0(v18, 1);
    if (v19)
    {
      v20 = v19;
      if (sub_22EFC93E8(v19, v9, v8, v24, 0, 0) == v14)
        v17 = v20;
      else
        v17 = 0;
    }
    else
    {
      v17 = 0;
    }
  }
  v22 = __p;
  v27[0] = v26;
  *(_QWORD *)((char *)v27 + 7) = *(_QWORD *)((char *)&v26 + 7);
  v23 = HIBYTE(v26);
  v26 = 0uLL;
  __p = 0;
  *(_DWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v27[0];
  *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v27 + 7);
  *(_BYTE *)(a1 + 39) = v23;
  *(_QWORD *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 56) = 1;
LABEL_19:
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

uint64_t sub_22E91C320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD **)(v6 + 15088);
  if (*(_BYTE *)(a3 + 48))
  {
    v9 = (const void *)v7[32];
    v8 = v7[33];
    v10 = v7 + 34;
    v11 = 35;
  }
  else
  {
    v9 = (const void *)v7[28];
    v8 = v7[29];
    v10 = v7 + 30;
    v11 = 31;
  }
  v12 = v7[v11];
  v17[0] = *v10;
  v17[1] = v12;
  v13 = sub_22E91D794(v6, v9, v8, *(_QWORD *)(a3 + 8));
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 48);
    v15 = *(_QWORD *)(v13 + 56);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  return sub_22E91D8C0(a1, *(_DWORD *)a3, v14, v15, a2, *(_QWORD *)(a3 + 8), (uint64_t)v9, v8, (int *)v17);
}

unsigned int *sub_22E91C3DC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *result;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  llvm *v47;
  unsigned int *v48;
  int v49;
  size_t v50;
  char v51;
  unint64_t v52;
  size_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  char *v64;
  char **p_p;
  char **v66;
  uint64_t v67;
  const char *v68;
  llvm::raw_ostream *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  void **v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  llvm::raw_ostream *v75;
  uint64_t v76;
  const char *v77;
  llvm::raw_ostream *v78;
  llvm::raw_ostream *v79;
  _BYTE *v80;
  void **v81;
  llvm::raw_ostream *v82;
  _BYTE *v83;
  char *v84;
  llvm::raw_ostream *v85;
  void *v86;
  char v87;
  void *v88;
  size_t v89;
  char v90;
  const char *__src;
  void *v92;
  uint64_t v93;
  char v94;
  void *v95;
  char v96;
  void *v97[2];
  char v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *__p;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char v109;
  uint64_t v110;
  int v111;
  void **v112;
  unsigned int *v113;
  unsigned int v114[8];
  _BYTE v115[56];
  uint64_t v116;
  __int128 v117;
  _OWORD v118[2];

  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(v10 + 15088);
  v13 = a4 + 8;
  v12 = *(_QWORD *)(a4 + 8);
  v14 = 256;
  if (!*(_BYTE *)(v13 + 40))
    v14 = 224;
  v15 = 264;
  if (!*(_BYTE *)(v13 + 40))
    v15 = 232;
  v16 = *(_QWORD *)(v11 + v15);
  v17 = *(const void **)(v11 + v14);
  v118[0] = *(_OWORD *)(sub_22E91D794(v10, v17, v16, v12) + 48);
  if (a5)
  {
    v20 = *(_OWORD *)(sub_22E91D794(*(_QWORD *)(a1 + 88), *(const void **)(v11 + 256), *(_QWORD *)(v11 + 264), *(_QWORD *)(a5 + 8))+ 48);
    v19 = 7179;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 88);
    *(_OWORD *)v114 = *(_OWORD *)(v11 + 240);
    if (sub_22E91DDB0(*(_QWORD *)(v18 + 15088), v114, v118, 0))
      v19 = 7085;
    else
      v19 = 7084;
    v20 = 0uLL;
  }
  v117 = v20;
  sub_22E8FCA40((_QWORD *)a1, **(_DWORD **)(a3 + 8), v19, 0, (uint64_t)v114);
  v21 = sub_22E890024((uint64_t)v114, (uint64_t *)a3);
  v92 = (void *)sub_22E83F9A4((uint64_t)v17, v16);
  v93 = v22;
  v23 = sub_22F2F2210(v21, (uint64_t)&v92);
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)v118);
  sub_22F2F3734(v23, &__p);
  if (SHIBYTE(v106) < 0)
    operator delete(__p);
  if (a5)
  {
    v92 = (void *)sub_22E83F9A4(*(_QWORD *)(v11 + 256), *(_QWORD *)(v11 + 264));
    v93 = v24;
    v25 = sub_22F2F2210((uint64_t)v114, (uint64_t)&v92);
    llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v117);
    sub_22F2F3734(v25, &__p);
    if (SHIBYTE(v106) < 0)
      operator delete(__p);
  }
  sub_22E903BEC(v114);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(a4 + 8) + 24), 0x175Cu, 0, (uint64_t)v114);
  v26 = sub_22E890024((uint64_t)v114, (uint64_t *)v13);
  v101 = (void *)sub_22E83F9A4((uint64_t)v17, v16);
  v102 = v27;
  v28 = sub_22F2F2210(v26, (uint64_t)&v101);
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)v118);
  v29 = sub_22F2F3734(v28, &__p);
  v30 = 280;
  if (!*(_BYTE *)(a4 + 48))
    v30 = 248;
  v31 = 272;
  if (!*(_BYTE *)(a4 + 48))
    v31 = 240;
  v32 = *(void **)(v11 + v30);
  v97[0] = *(void **)(v11 + v31);
  v97[1] = v32;
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)v97);
  sub_22F2F3734(v29, &v92);
  if (v94 < 0)
    operator delete(v92);
  if (SHIBYTE(v106) < 0)
    operator delete(__p);
  result = sub_22E903BEC(v114);
  if (a5)
  {
    v34 = *(_QWORD *)(a5 + 8);
    if (v34 != *(_QWORD *)v13)
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v34 + 24), 0x175Cu, 0, (uint64_t)v114);
      v55 = sub_22E890024((uint64_t)v114, (uint64_t *)(a5 + 8));
      v101 = (void *)sub_22E83F9A4(*(_QWORD *)(v11 + 256), *(_QWORD *)(v11 + 264));
      v102 = v56;
      v57 = sub_22F2F2210(v55, (uint64_t)&v101);
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v117);
      v58 = sub_22F2F3734(v57, &__p);
      *(_OWORD *)v97 = *(_OWORD *)(v11 + 272);
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)v97);
      sub_22F2F3734(v58, &v92);
      if (v94 < 0)
        operator delete(v92);
      if (SHIBYTE(v106) < 0)
        operator delete(__p);
      result = sub_22E903BEC(v114);
    }
  }
  v113 = 0;
  if (a2)
  {
    v35 = a2[7];
    if ((v35 & 0x7F) - 33 < 5)
    {
      v36 = a2;
      v37 = v35 & 0x7F;
LABEL_29:
      v113 = v36;
LABEL_33:
      if ((v37 - 38) < 0xFFFFFFFB || *((_QWORD *)v36 + 5))
      {
        sub_22E8FCA40((_QWORD *)a1, v36[6], 0x158Cu, 0, (uint64_t)&__p);
        LODWORD(v92) = 0;
        v38 = sub_22E8900C4((uint64_t)&__p, (int *)&v92);
        v39 = sub_22E890024(v38, (uint64_t *)&v113);
        v40 = *(_OWORD *)(v39 + 9);
        *(_OWORD *)v114 = *(_OWORD *)v39;
        *(_OWORD *)((char *)&v114[2] + 1) = v40;
        v115[0] = 0;
        v115[48] = 0;
        if (*(_BYTE *)(v39 + 80))
          sub_22E907424((uint64_t)v115, v39 + 32);
        v116 = *(_QWORD *)(v39 + 88);
        sub_22E903BEC((unsigned int *)&__p);
        if (sub_22E91DE80((uint64_t)v113))
          return sub_22E903BEC(v114);
        v46 = *(_QWORD *)(a1 + 80);
        v47 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v46 + 544), "API_AVAILABLE", 0xDuLL);
        if (!sub_22F2EE534(v46, v47))
          return sub_22E903BEC(v114);
        v48 = v113;
        v49 = v113[7] & 0x7F;
        if (v49 == 24)
        {
          if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v113 + 72))(v113) & 1) == 0)
          {
            v50 = 0;
            v51 = 0;
            v52 = (unint64_t)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v48 + 16))(v48) >> 32;
            v54 = " ";
            v53 = 1;
            v90 = 1;
            __src = "";
            goto LABEL_87;
          }
        }
        else
        {
          if (v49 == 25)
          {
            v50 = 0;
            v51 = 0;
            v52 = (unint64_t)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v113 + 16))(v113) >> 32;
            v90 = 1;
            __src = "";
            v53 = 1;
            v54 = " ";
LABEL_87:
            v101 = 0;
            v102 = 0;
            v103 = 0;
            LODWORD(v105) = 0;
            v109 = 0;
            v110 = 0;
            v111 = 1;
            v107 = 0;
            v108 = 0;
            v106 = 0;
            __p = (void *)(MEMORY[0x24BED83D8] + 16);
            v112 = &v101;
            llvm::raw_ostream::SetBufferAndMode();
            v64 = v108;
            if (v53 <= v107 - (unint64_t)v108)
            {
              v66 = &v108;
              if ((v51 & 1) == 0)
              {
                memcpy(v108, v54, v53);
                v64 = &v108[v53];
                v108 += v53;
              }
              p_p = (char **)&__p;
            }
            else
            {
              p_p = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v54);
              v66 = p_p + 4;
              v64 = p_p[4];
            }
            if ((unint64_t)(p_p[3] - v64) > 0xD)
            {
              qmemcpy(v64, "API_AVAILABLE(", 14);
              *v66 += 14;
            }
            else
            {
              p_p = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)p_p, "API_AVAILABLE(");
            }
            v99 = sub_22E91DEE0((unint64_t)v17, v16);
            v100 = v67;
            llvm::StringRef::lower((llvm::StringRef *)&v99);
            if (v94 >= 0)
              v68 = (const char *)&v92;
            else
              v68 = (const char *)v92;
            v69 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)p_p, v68);
            v70 = v69;
            v71 = (_BYTE *)*((_QWORD *)v69 + 4);
            if ((unint64_t)v71 >= *((_QWORD *)v69 + 3))
            {
              v70 = (llvm::raw_ostream *)llvm::raw_ostream::write(v69);
            }
            else
            {
              *((_QWORD *)v69 + 4) = v71 + 1;
              *v71 = 40;
            }
            llvm::VersionTuple::getAsString((llvm::VersionTuple *)v118);
            if (v98 >= 0)
              v72 = v97;
            else
              v72 = (void **)v97[0];
            v73 = (llvm::raw_ostream *)llvm::raw_ostream::write(v70, (const char *)v72);
            v74 = (_BYTE *)*((_QWORD *)v73 + 4);
            if ((unint64_t)v74 >= *((_QWORD *)v73 + 3))
            {
              llvm::raw_ostream::write(v73);
            }
            else
            {
              *((_QWORD *)v73 + 4) = v74 + 1;
              *v74 = 41;
            }
            if (v98 < 0)
              operator delete(v97[0]);
            if (v94 < 0)
              operator delete(v92);
            if (a5)
            {
              if (v107 - (unint64_t)v108 > 1)
              {
                *(_WORD *)v108 = 8236;
                v108 += 2;
                v75 = (llvm::raw_ostream *)&__p;
              }
              else
              {
                v75 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ", ");
              }
              v99 = sub_22E91DEE0(*(_QWORD *)(v11 + 256), *(_QWORD *)(v11 + 264));
              v100 = v76;
              llvm::StringRef::lower((llvm::StringRef *)&v99);
              if (v94 >= 0)
                v77 = (const char *)&v92;
              else
                v77 = (const char *)v92;
              v78 = (llvm::raw_ostream *)llvm::raw_ostream::write(v75, v77);
              v79 = v78;
              v80 = (_BYTE *)*((_QWORD *)v78 + 4);
              if ((unint64_t)v80 >= *((_QWORD *)v78 + 3))
              {
                v79 = (llvm::raw_ostream *)llvm::raw_ostream::write(v78);
              }
              else
              {
                *((_QWORD *)v78 + 4) = v80 + 1;
                *v80 = 40;
              }
              llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v117);
              if (v98 >= 0)
                v81 = v97;
              else
                v81 = (void **)v97[0];
              v82 = (llvm::raw_ostream *)llvm::raw_ostream::write(v79, (const char *)v81);
              v83 = (_BYTE *)*((_QWORD *)v82 + 4);
              if ((unint64_t)v83 >= *((_QWORD *)v82 + 3))
              {
                llvm::raw_ostream::write(v82);
              }
              else
              {
                *((_QWORD *)v82 + 4) = v83 + 1;
                *v83 = 41;
              }
              if (v98 < 0)
                operator delete(v97[0]);
              if (v94 < 0)
                operator delete(v92);
            }
            v84 = v108;
            if ((unint64_t)v108 >= v107)
            {
              v85 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&__p);
            }
            else
            {
              ++v108;
              *v84 = 41;
              v85 = (llvm::raw_ostream *)&__p;
            }
            v86 = (void *)*((_QWORD *)v85 + 4);
            if (v50 <= *((_QWORD *)v85 + 3) - (_QWORD)v86)
            {
              if ((v90 & 1) == 0)
              {
                memcpy(v86, __src, v50);
                *((_QWORD *)v85 + 4) += v50;
              }
            }
            else
            {
              llvm::raw_ostream::write(v85, __src);
            }
            v87 = *((_BYTE *)v112 + 23);
            if (v87 >= 0)
              v88 = v112;
            else
              v88 = *v112;
            if (v87 >= 0)
              v89 = v87 & 0x7F;
            else
              v89 = (size_t)v112[1];
            sub_22E729148(v88, v89, v52, 0, (uint64_t)&v92);
            sub_22E890748((uint64_t)v114, &v92);
            if (v96 < 0)
              operator delete(v95);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
            if (SHIBYTE(v103) < 0)
              operator delete(v101);
            return sub_22E903BEC(v114);
          }
          if ((v49 - 38) < 0xFFFFFFFB)
          {
            v53 = 0;
            v90 = 0;
            __src = "\n";
            v50 = 1;
            v51 = 1;
            LODWORD(v52) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v113 + 16))(v113);
            v54 = "";
            goto LABEL_87;
          }
          v63 = sub_22F141A3C(v113[14], 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
          if (v63)
          {
            LODWORD(v52) = v63;
            v50 = 0;
            v51 = 0;
            v54 = " ";
            v53 = 1;
            v90 = 1;
            __src = "";
            goto LABEL_87;
          }
        }
      }
      else
      {
        sub_22E8FCA40((_QWORD *)a1, v36[6], 0x158Cu, 0, (uint64_t)v114);
        LODWORD(v92) = 1;
        v59 = sub_22E8900C4((uint64_t)v114, (int *)&v92);
        v60 = (unsigned __int16)v36[18] >> 13;
        v61 = off_24FAB6E28[v60];
        v62 = qword_22F465668[v60];
        __p = v61;
        v105 = v62;
        sub_22F2F2210(v59, (uint64_t)&__p);
      }
      return sub_22E903BEC(v114);
    }
    v37 = v35 & 0x7F;
    v36 = a2;
    while (1)
    {
      if (v37 == 24)
        goto LABEL_29;
      v41 = v35 & 0x7E;
      if ((v41 - 52) < 6)
        goto LABEL_29;
      if ((v37 - 24) >= 0xFFFFFFFB)
      {
        if (v41 != 20)
          goto LABEL_29;
        v36 = (unsigned int *)*((_QWORD *)v36 + 11);
        v113 = v36;
        if (v36)
        {
          v37 = v36[7] & 0x7F;
          goto LABEL_33;
        }
        return result;
      }
      v42 = *((_QWORD *)v36 + 2);
      v43 = v42 & 0xFFFFFFFFFFFFFFF8;
      if ((v42 & 4) != 0)
        v43 = *(_QWORD *)v43;
      if (!v43)
      {
        v37 = a2[7] & 0x7F;
        goto LABEL_31;
      }
      v44 = *(_WORD *)(v43 + 8) & 0x7F;
      v45 = -40;
      if (v44 > 0x46)
      {
        if (v44 != 83)
        {
          if (v44 == 71)
          {
            v45 = -56;
          }
          else if (v44 != 81)
          {
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (v44 > 0x18)
          goto LABEL_57;
        if (v44 == 16)
          goto LABEL_50;
        if (((1 << v44) & 0x1066) != 0)
          goto LABEL_63;
        if (v44 == 24)
        {
LABEL_50:
          v45 = -48;
        }
        else
        {
LABEL_57:
          if (v44 != 70)
          {
LABEL_58:
            if (v44 - 52 < 6)
            {
              v45 = -72;
            }
            else if (v44 - 33 >= 5)
            {
              v45 = -48;
            }
            else
            {
              v45 = -64;
            }
            goto LABEL_63;
          }
          v45 = -64;
        }
      }
LABEL_63:
      v36 = (unsigned int *)(v43 + v45);
      v35 = *(_DWORD *)(v43 + v45 + 28);
      v37 = v35 & 0x7F;
      if ((v37 - 33) < 5)
        goto LABEL_29;
    }
  }
  v37 = MEMORY[0x1C] & 0x7F;
LABEL_31:
  if ((v37 - 13) <= 0x3D)
  {
    v113 = a2;
    v36 = a2;
    goto LABEL_33;
  }
  return result;
}

void sub_22E91CEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unsigned int v19;
  int v20;
  void *v21;
  int v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  const void *v52;
  __int128 *v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  size_t v68;
  const void *v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90[24];
  _BYTE __dst[24];
  __int128 v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  unint64_t v100;
  void *v101;
  _BYTE v102[12];
  char v103;
  __int128 __p;
  uint64_t v105;
  char v106;
  void *v107;
  uint64_t v108;
  _QWORD v109[86];

  v10 = a4;
  v109[84] = *MEMORY[0x24BDAC8D0];
  v97 = a2;
  v98 = a3;
  v95 = a8;
  v96 = (unsigned int *)a7;
  v107 = v109;
  v108 = 0xC00000000;
  if (!*(_DWORD *)(a4 + 28))
    goto LABEL_76;
  if (!*(_DWORD *)(a4 + 32))
    goto LABEL_76;
  if (a7)
  {
    v12 = *(_QWORD *)(a4 + 48);
    if (v12 != *(_QWORD *)(a7 + 48) || v12 && memcmp(*(const void **)(a4 + 40), *(const void **)(a7 + 40), v12))
      goto LABEL_76;
  }
  v13 = *a5;
  if (*a5 && (*(_DWORD *)(v13 + 28) & 0x7F) == 0x18)
  {
    v89 = a6;
    v14 = *(_QWORD *)(v13 + 40);
    v101 = &v102[8];
    *(_QWORD *)v102 = 0xC00000000;
    v15 = *(unsigned __int8 **)(v10 + 40);
    v16 = *(_QWORD *)(v10 + 48);
    v17 = *(uint64_t **)(a1 + 72);
    *(_QWORD *)__dst = v15;
    *(_QWORD *)&__dst[8] = v16;
    v88 = v10;
    if (v16)
    {
      if ((v18 = *v15, v18 != 45) && v18 != 43
        || (*(_QWORD *)__dst = v15 + 1, *(_QWORD *)&__dst[8] = v16 - 1, v16 != 1))
      {
        llvm::StringRef::split();
        if (*(_BYTE *)(*(_QWORD *)&__dst[8] + *(_QWORD *)__dst - 1) == 58)
        {
          v19 = *(_DWORD *)v102 - 1;
          *(_DWORD *)v102 = v19;
          if (v19)
          {
            v36 = (unsigned __int8 **)v101;
            v37 = *v17;
            while (1)
            {
              v38 = v36[1];
              if (v38)
                break;
LABEL_36:
              v36 += 2;
              if (v36 == (unsigned __int8 **)((char *)v101 + 16 * v19))
                goto LABEL_15;
            }
            v39 = *v36;
            v40 = **v36;
            if (((v40 == 36) & (v37 >> 29)) != 0 || (word_22F4ADB24[v40] & 0xE0) != 0)
            {
              while (1)
              {
                v41 = *v39;
                if (((v41 == 36) & (v37 >> 29)) == 0 && (word_22F4ADB24[v41] & 0xE8) == 0)
                  break;
                ++v39;
                if (!--v38)
                  goto LABEL_36;
              }
            }
          }
          else
          {
LABEL_15:
            if ((v14 & 7u) >= 2)
            {
              if ((v14 & 7) == 2)
                v20 = 1;
              else
                v20 = *(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) - 3;
            }
            else
            {
              v20 = 0;
            }
            if (v19 == v20)
            {
              if (a5[2])
              {
                v42 = 0;
                v43 = 0;
                v44 = v14 & 7;
                v45 = v14 & 0xFFFFFFFFFFFFFFF8;
                while (1)
                {
                  v46 = v45;
                  if (v44 == 7)
                    v46 = *(_QWORD *)(v45 + 16 + 8 * v43);
                  if (!v46 || !**(_DWORD **)(v46 + 16))
                  {
                    sub_22E729148(*((void **)v101 + 2 * v42), *((_QWORD *)v101 + 2 * v42 + 1), *(_DWORD *)(a5[1] + 4 * v42), 0, (uint64_t)__dst);
                    v54 = sub_22E6C9D38((uint64_t)&v107, (unint64_t)__dst, 1);
                    v55 = (char *)v107 + 56 * v108;
                    v56 = *(_OWORD *)v54;
                    *(_QWORD *)(v55 + 13) = *(_QWORD *)(v54 + 13);
                    *(_OWORD *)v55 = v56;
                    v57 = *(_QWORD *)(v54 + 40);
                    *(_OWORD *)(v55 + 24) = *(_OWORD *)(v54 + 24);
                    *((_QWORD *)v55 + 5) = v57;
                    *(_QWORD *)(v54 + 32) = 0;
                    *(_QWORD *)(v54 + 40) = 0;
                    *(_QWORD *)(v54 + 24) = 0;
                    v55[48] = *(_BYTE *)(v54 + 48);
                    LODWORD(v108) = v108 + 1;
                    if (SHIBYTE(v93) < 0)
                      operator delete((void *)v92);
                    goto LABEL_61;
                  }
                  v47 = a5;
                  v48 = *(unsigned int *)(a5[1] + 4 * v42);
                  v49 = v48 | (sub_22F141A3C(v48, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72)) << 32);
                  v50 = (char *)v101 + 16 * v42;
                  v52 = *(const void **)v50;
                  v51 = *((_QWORD *)v50 + 1);
                  *(_QWORD *)&__dst[12] = 0;
                  __dst[20] = 0;
                  v93 = 0;
                  v92 = 0uLL;
                  v94 = 0;
                  *(_QWORD *)__dst = v49;
                  __dst[8] = 0;
                  if (v51 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_94;
                  if (v51 >= 0x17)
                  {
                    v58 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v51 | 7) != 0x17)
                      v58 = v51 | 7;
                    v59 = a1;
                    v60 = v58 + 1;
                    v53 = (__int128 *)operator new(v58 + 1);
                    v61 = v60 | 0x8000000000000000;
                    a1 = v59;
                    *((_QWORD *)&v99 + 1) = v51;
                    v100 = v61;
                    *(_QWORD *)&v99 = v53;
                  }
                  else
                  {
                    HIBYTE(v100) = v51;
                    v53 = &v99;
                    if (!v51)
                      goto LABEL_58;
                  }
                  memmove(v53, v52, v51);
LABEL_58:
                  *((_BYTE *)v53 + v51) = 0;
                  v92 = v99;
                  v93 = v100;
                  v62 = sub_22E6C9D38((uint64_t)&v107, (unint64_t)__dst, 1);
                  v63 = (char *)v107 + 56 * v108;
                  v64 = *(_OWORD *)v62;
                  *(_QWORD *)(v63 + 13) = *(_QWORD *)(v62 + 13);
                  *(_OWORD *)v63 = v64;
                  v65 = *(_QWORD *)(v62 + 40);
                  *(_OWORD *)(v63 + 24) = *(_OWORD *)(v62 + 24);
                  *((_QWORD *)v63 + 5) = v65;
                  *(_QWORD *)(v62 + 32) = 0;
                  *(_QWORD *)(v62 + 40) = 0;
                  *(_QWORD *)(v62 + 24) = 0;
                  v63[48] = *(_BYTE *)(v62 + 48);
                  LODWORD(v108) = v108 + 1;
                  if (SHIBYTE(v93) < 0)
                    operator delete((void *)v92);
                  a5 = v47;
LABEL_61:
                  v42 = ++v43;
                  if (a5[2] <= (unint64_t)v43)
                    goto LABEL_73;
                }
              }
              goto LABEL_73;
            }
          }
        }
      }
    }
    v66 = *(_QWORD *)(v10 + 28);
    v67 = *(_DWORD *)(v10 + 36);
    v69 = *(const void **)(v10 + 40);
    v68 = *(_QWORD *)(v10 + 48);
    *(_QWORD *)&__dst[12] = 0;
    __dst[20] = 0;
    v94 = 0;
    *(_QWORD *)__dst = v66;
    __dst[8] = v67;
    if (v68 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v68 >= 0x17)
      {
        v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v68 | 7) != 0x17)
          v71 = v68 | 7;
        v72 = a1;
        v73 = v71 + 1;
        v70 = (__int128 *)operator new(v71 + 1);
        v74 = v73 | 0x8000000000000000;
        a1 = v72;
        *((_QWORD *)&v99 + 1) = v68;
        v100 = v74;
        *(_QWORD *)&v99 = v70;
      }
      else
      {
        HIBYTE(v100) = v68;
        v70 = &v99;
        if (!v68)
        {
LABEL_71:
          *((_BYTE *)v70 + v68) = 0;
          v92 = v99;
          v93 = v100;
          v75 = sub_22E6C9D38((uint64_t)&v107, (unint64_t)__dst, 1);
          v76 = (char *)v107 + 56 * v108;
          v77 = *(_OWORD *)v75;
          *(_QWORD *)(v76 + 13) = *(_QWORD *)(v75 + 13);
          *(_OWORD *)v76 = v77;
          v78 = *(_QWORD *)(v75 + 40);
          *(_OWORD *)(v76 + 24) = *(_OWORD *)(v75 + 24);
          *((_QWORD *)v76 + 5) = v78;
          *(_QWORD *)(v75 + 32) = 0;
          *(_QWORD *)(v75 + 40) = 0;
          *(_QWORD *)(v75 + 24) = 0;
          v76[48] = *(_BYTE *)(v75 + 48);
          LODWORD(v108) = v108 + 1;
          if (SHIBYTE(v93) < 0)
            operator delete((void *)v92);
LABEL_73:
          if (v101 != &v102[8])
            free(v101);
          a6 = v89;
          v10 = v88;
          goto LABEL_76;
        }
      }
      memmove(v70, v69, v68);
      goto LABEL_71;
    }
LABEL_94:
    abort();
  }
  v21 = *(void **)(v10 + 28);
  v22 = *(_DWORD *)(v10 + 36);
  v24 = *(const void **)(v10 + 40);
  v23 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)&v102[4] = 0;
  v103 = 0;
  v106 = 0;
  v101 = v21;
  v102[0] = v22;
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_94;
  v25 = v10;
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = a6;
    v29 = a1;
    v30 = v27 + 1;
    v26 = operator new(v27 + 1);
    v31 = v30 | 0x8000000000000000;
    a1 = v29;
    a6 = v28;
    *(_QWORD *)&__dst[8] = v23;
    *(_QWORD *)&__dst[16] = v31;
    *(_QWORD *)__dst = v26;
  }
  else
  {
    __dst[23] = v23;
    v26 = __dst;
    if (!v23)
      goto LABEL_25;
  }
  memmove(v26, v24, v23);
LABEL_25:
  v26[v23] = 0;
  __p = *(_OWORD *)__dst;
  v105 = *(_QWORD *)&__dst[16];
  v32 = sub_22E6C9D38((uint64_t)&v107, (unint64_t)&v101, 1);
  v33 = (char *)v107 + 56 * v108;
  v34 = *(_OWORD *)v32;
  *(_QWORD *)(v33 + 13) = *(_QWORD *)(v32 + 13);
  *(_OWORD *)v33 = v34;
  v35 = *(_QWORD *)(v32 + 40);
  *(_OWORD *)(v33 + 24) = *(_OWORD *)(v32 + 24);
  *((_QWORD *)v33 + 5) = v35;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33[48] = *(_BYTE *)(v32 + 48);
  LODWORD(v108) = v108 + 1;
  if (SHIBYTE(v105) < 0)
    operator delete((void *)__p);
  v10 = v25;
LABEL_76:
  v79 = *(_DWORD *)a5[1];
  *(_QWORD *)__dst = a6;
  *(_QWORD *)&__dst[8] = a1;
  *(_QWORD *)&__dst[16] = v10;
  *(_QWORD *)&v92 = &v95;
  *((_QWORD *)&v92 + 1) = &v96;
  if (v98)
  {
    sub_22E8FCA40((_QWORD *)a1, v79, *(_DWORD *)(v10 + 4), 0, (uint64_t)&v101);
    v81 = sub_22E890024((uint64_t)&v101, a5);
    v80 = sub_22F2F2210(v81, (uint64_t)&v97);
  }
  else
  {
    if (a5[3])
    {
      sub_22E8FCA40((_QWORD *)a1, v79, *(_DWORD *)(v10 + 8), 0, (uint64_t)&v101);
      v82 = sub_22E890024((uint64_t)&v101, a5);
      sub_22F30C378(v82, (uint64_t)&v107);
      sub_22E903BEC((unsigned int *)&v101);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a5[3] + 24), 0x1609u, 0, (uint64_t)v90);
      sub_22E903BEC(v90);
      goto LABEL_82;
    }
    sub_22E8FCA40((_QWORD *)a1, v79, *(_DWORD *)v10, 0, (uint64_t)&v101);
    v80 = sub_22E890024((uint64_t)&v101, a5);
  }
  sub_22F30C378(v80, (uint64_t)&v107);
  sub_22E903BEC((unsigned int *)&v101);
  sub_22E91E650((unsigned int *)__dst);
LABEL_82:
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v10 + 24), *(_DWORD *)(v10 + 12), 0, (uint64_t)&v101);
  v83 = sub_22E890024((uint64_t)&v101, (uint64_t *)(a6 + 8));
  sub_22E89519C(v83, (unsigned int *)(v10 + 20));
  sub_22E903BEC((unsigned int *)&v101);
  if (v96)
  {
    v84 = v96[6];
    if (v84 != *(_DWORD *)(v10 + 24))
    {
      sub_22E8FCA40((_QWORD *)a1, v84, v96[3], 0, (uint64_t)&v101);
      v85 = sub_22E890024((uint64_t)&v101, (uint64_t *)(v95 + 8));
      sub_22E89519C(v85, v96 + 5);
      sub_22E903BEC((unsigned int *)&v101);
    }
  }
  v86 = (char *)v107;
  if ((_DWORD)v108)
  {
    v87 = 56 * v108;
    do
    {
      if (v86[v87 - 9] < 0)
        operator delete(*(void **)&v86[v87 - 32]);
      v87 -= 56;
    }
    while (v87);
    v86 = (char *)v107;
  }
  if (v86 != (char *)v109)
    free(v86);
}

uint64_t sub_22E91D794(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  const void *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;

  if ((*(_BYTE *)(a4 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a4);
  v11 = *v10;
  if ((*(_BYTE *)(a4 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a4);
    v13 = *(_QWORD *)v12 + 8 * *(unsigned int *)(v12 + 8);
  }
  else
  {
    v13 = 0;
  }
  if (v11 == (uint64_t *)v13)
    return 0;
  do
  {
    v4 = *v11;
    if (*v11 && *(_WORD *)(v4 + 32) == 115)
    {
      v14 = *(unsigned int **)(*(_QWORD *)(v4 + 40) + 16);
      v17 = *v14;
      v15 = v14 + 4;
      v16 = v17;
      v19 = v15;
      v20 = v17;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 2) & 8) != 0)
      {
        v18 = llvm::StringRef::rfind();
        if (v18 == -1)
        {
          v15 = v19;
          v16 = v20;
        }
        else
        {
          v16 = v18;
          v15 = v19;
          if (v20 < v16)
            v16 = v20;
        }
      }
      if (v16 == a3 && (!a3 || !memcmp(v15, a2, a3)))
        break;
    }
    v4 = 0;
    ++v11;
  }
  while (v11 != (uint64_t *)v13);
  return v4;
}

uint64_t sub_22E91D8C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  const void *p_p;
  size_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  unint64_t v33;
  unsigned __int8 v34;
  int *v35[6];
  uint64_t v36;
  int v37;
  _QWORD v38[2];
  _QWORD v39[2];

  v9 = a5;
  v39[0] = a3;
  v39[1] = a4;
  v38[0] = a7;
  v38[1] = a8;
  v37 = a2;
  v35[0] = &v37;
  v35[1] = (int *)a1;
  v35[2] = (int *)v38;
  v35[3] = (int *)v39;
  v35[4] = a9;
  v35[5] = (int *)&v36;
  v36 = a6;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 238) & 4) == 0)
    goto LABEL_42;
  v10 = *(_QWORD *)(a1 + 224);
  if (!v10)
    goto LABEL_42;
  v11 = *(_WORD *)(v10 + 8) & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 == 83)
      goto LABEL_19;
    if (v11 == 71)
    {
      v12 = -56;
      goto LABEL_19;
    }
    if (v11 != 81)
    {
LABEL_14:
      if (v11 - 52 < 6)
      {
        v12 = -72;
      }
      else
      {
        v12 = -48;
        if (v11 - 33 < 5)
          v12 = -64;
      }
    }
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_13;
    if (v11 == 16)
    {
LABEL_6:
      v12 = -48;
      goto LABEL_19;
    }
    if (((1 << v11) & 0x1066) == 0)
    {
      if (v11 == 24)
        goto LABEL_6;
LABEL_13:
      if (v11 == 70)
      {
        v12 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  if (v10 + v12 == a5)
    goto LABEL_42;
  v13 = -40;
  if ((*(_WORD *)(v10 + 8) & 0x7Fu) > 0x46)
  {
    switch(v11)
    {
      case 'S':
        goto LABEL_35;
      case 'G':
        v13 = -56;
        goto LABEL_35;
      case 'Q':
        goto LABEL_35;
    }
    goto LABEL_31;
  }
  if (v11 > 0x18)
    goto LABEL_30;
  if (v11 != 16)
  {
    if (((1 << v11) & 0x1066) != 0)
      goto LABEL_35;
    if (v11 != 24)
    {
LABEL_30:
      if (v11 == 70)
      {
LABEL_33:
        v13 = -64;
        goto LABEL_35;
      }
LABEL_31:
      if (v11 - 52 < 6)
      {
        v13 = -72;
        goto LABEL_35;
      }
      if (v11 - 33 < 5)
        goto LABEL_33;
    }
  }
  v13 = -48;
LABEL_35:
  v14 = v10 + v13;
  if (sub_22E91DCA4(v35, v10 + v13))
    return 0;
  v15 = *(_DWORD *)(v14 + 28);
  if ((v15 & 0x7E) == 0x14)
  {
    v16 = *(_QWORD *)(v14 + 88);
    if (!v16)
      goto LABEL_42;
    goto LABEL_41;
  }
  if ((v15 & 0x7F) == 0x13)
  {
    v16 = *(_QWORD *)(v14 + 104);
    if (v16)
    {
LABEL_41:
      if (!sub_22E91DCA4(v35, v16))
        goto LABEL_42;
      return 0;
    }
  }
LABEL_42:
  if (sub_22E91DCA4(v35, v9))
    return 0;
  while (1)
  {
    v18 = *(_DWORD *)(v9 + 28);
    if (!v9 || (*(_DWORD *)(v9 + 28) & 0x7F) != 0x18 || (*(_QWORD *)(v9 + 56) & 0x20000) != 0)
      goto LABEL_69;
    v31 = *(_QWORD *)(v9 + 40);
    sub_22F1D3A38(&v31, (char *)&__p);
    v19 = v34;
    if ((v34 & 0x80u) == 0)
      v20 = v34 & 0x7F;
    else
      v20 = v33;
    if (v20 == 4)
    {
      if ((v34 & 0x80u) == 0)
        v21 = v34;
      else
        v21 = v33;
      if ((v34 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v21 >= 4)
        v23 = 4;
      else
        v23 = v21;
      v24 = memcmp(p_p, "load", v23) == 0;
      v25 = v21 == 4 && v24;
      if ((v19 & 0x80) == 0)
        goto LABEL_67;
LABEL_66:
      operator delete(__p);
      goto LABEL_67;
    }
    v25 = 0;
    if ((v34 & 0x80) != 0)
      goto LABEL_66;
LABEL_67:
    if (v25)
      return 1;
    v18 = *(_DWORD *)(v9 + 28);
LABEL_69:
    if (v9 && (v18 & 0x7E) == 0x14)
    {
      v26 = *(_QWORD *)(v9 + 88);
      if (!v26)
        goto LABEL_77;
    }
    else
    {
      if (!v9)
        goto LABEL_77;
      if ((v18 & 0x7F) != 0x13)
        goto LABEL_77;
      v26 = *(_QWORD *)(v9 + 104);
      if (!v26)
        goto LABEL_77;
    }
    if (sub_22E91DCA4(v35, v26))
      return 0;
LABEL_77:
    v27 = *(_QWORD *)(v9 + 16);
    v28 = v27 & 0xFFFFFFFFFFFFFFF8;
    if ((v27 & 4) != 0)
      v28 = *(_QWORD *)v28;
    if (!v28)
      return 1;
    v29 = *(_WORD *)(v28 + 8) & 0x7F;
    v30 = -40;
    if (v29 > 0x46)
    {
      switch(v29)
      {
        case 'S':
          goto LABEL_95;
        case 'G':
          v30 = -56;
          goto LABEL_95;
        case 'Q':
          goto LABEL_95;
      }
    }
    else
    {
      if (v29 <= 0x18)
      {
        if (v29 == 16)
          goto LABEL_83;
        if (((1 << v29) & 0x1066) != 0)
          goto LABEL_95;
        if (v29 == 24)
          goto LABEL_83;
      }
      if (v29 == 70)
        goto LABEL_93;
    }
    if (v29 - 52 < 6)
    {
      v30 = -72;
      goto LABEL_95;
    }
    if (v29 - 33 < 5)
    {
LABEL_93:
      v30 = -64;
      goto LABEL_95;
    }
LABEL_83:
    v30 = -48;
LABEL_95:
    v9 = v28 + v30;
    if (sub_22E91DCA4(v35, v28 + v30))
      return 0;
  }
}

BOOL sub_22E91DCA4(int **a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v9;

  v4 = **a1;
  if (v4 == 3)
  {
    v6 = *(_QWORD *)a1[5];
    if (v6)
      v7 = (*(_DWORD *)(v6 + 28) & 0x7F) == 24;
    else
      v7 = 0;
    if (v7 && a2 && (*(_DWORD *)(a2 + 28) & 0x7E) == 0x14 && sub_22EFDC9F0(v6) == *(_QWORD *)(a2 + 88))
      return 1;
    return sub_22EFC93E8(a2, *(void **)a1[2], *((_QWORD *)a1[2] + 1), (uint64_t *)a1[4], 0, 0) == 3;
  }
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v5 = sub_22E91D794(*((_QWORD *)a1[1] + 11), *(const void **)a1[2], *((_QWORD *)a1[2] + 1), a2);
      if (v5)
      {
        v9 = *(_OWORD *)(v5 + 48);
        if ((sub_22E3B38EC(&v9, a1[3]) & 1) == 0)
          return 1;
      }
    }
    return sub_22EFC93E8(a2, *(void **)a1[2], *((_QWORD *)a1[2] + 1), (uint64_t *)a1[4], 0, 0) == 3;
  }
  if (sub_22EFC93E8(a2, *(void **)a1[2], *((_QWORD *)a1[2] + 1), (uint64_t *)a1[4], 0, 0) != 2)
    return sub_22EFC93E8(a2, *(void **)a1[2], *((_QWORD *)a1[2] + 1), (uint64_t *)a1[4], 0, 0) == 3;
  return 1;
}

uint64_t sub_22E91DDB0(uint64_t a1, _DWORD *a2, _DWORD *a3, int a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD v9[2];

  if (a4)
  {
    v5 = a1 + 304;
    if (!*(_BYTE *)(a1 + 352))
      v5 = 0;
  }
  else
  {
    v5 = a1 + 32;
  }
  v6 = *(_DWORD *)(v5 + 36);
  if (v6 <= 10)
  {
    if (v6 != 3)
    {
      if (v6 == 7)
        goto LABEL_10;
      return *(_DWORD *)(v5 + 32) == 1;
    }
    goto LABEL_14;
  }
  if (v6 == 11)
  {
LABEL_14:
    v7 = 0x8000000D0000000ALL;
    goto LABEL_16;
  }
  if (v6 != 29)
  {
    if (v6 == 28)
    {
LABEL_10:
      v7 = 11;
      goto LABEL_16;
    }
    return *(_DWORD *)(v5 + 32) == 1;
  }
  v7 = 4;
LABEL_16:
  v9[0] = v7;
  v9[1] = 0;
  if (sub_22E3B38EC(a2, v9))
    return sub_22E3B38EC(a3, v9) ^ 1;
  else
    return 1;
}

BOOL sub_22E91DE80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 115)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22E91DEE0(unint64_t result, uint64_t a2)
{
  const char *v4;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  const char *v24;

  switch(a2)
  {
    case 3:
      if (*(_WORD *)result == 28521 && *(_BYTE *)(result + 2) == 115)
      {
        v21 = (unint64_t)"iOS" & 0xFF;
        v22 = (unint64_t)"iOS" & 0xFFFFFFFFFFFFFF00;
        return v21 | v22;
      }
      if (*(_WORD *)result == 28538 && *(_BYTE *)(result + 2) == 115)
      {
        v23 = "z/OS";
        goto LABEL_93;
      }
      return result;
    case 4:
      if (*(_DWORD *)result == 1936684660)
      {
        v23 = "tvOS";
LABEL_93:
        v21 = v23;
        v22 = (unint64_t)v23 & 0xFFFFFFFFFFFFFF00;
        return v21 | v22;
      }
      if (*(_DWORD *)result == 1936683640)
      {
        v4 = "xrOS";
        goto LABEL_86;
      }
      return result;
    case 5:
      if (*(_DWORD *)result == 1868783981 && *(_BYTE *)(result + 4) == 115)
      {
        v4 = "macOS";
        goto LABEL_86;
      }
      return result;
    case 7:
      if (*(_DWORD *)result == 1668571511 && *(_DWORD *)(result + 3) == 1936681059)
      {
        v4 = "watchOS";
        goto LABEL_86;
      }
      return result;
    case 8:
      if (*(_QWORD *)result == 0x736F656764697262)
      {
        v4 = "bridgeOS";
        goto LABEL_86;
      }
      return result;
    case 11:
      if (*(_QWORD *)result == 0x6C6174616363616DLL && *(_QWORD *)(result + 3) == 0x7473796C61746163)
      {
        v4 = "macCatalyst";
LABEL_86:
        v21 = v4;
        v22 = (unint64_t)v4 & 0xFFFFFFFFFFFFFF00;
        return v21 | v22;
      }
      return result;
    case 17:
      if (*(_QWORD *)result == 0x5F7070615F736F69
        && *(_QWORD *)(result + 8) == 0x6F69736E65747865
        && *(_BYTE *)(result + 16) == 110)
      {
        v21 = (unint64_t)"iOSApplicationExtension" & 0xFF;
        v22 = (unint64_t)"iOSApplicationExtension" & 0xFFFFFFFFFFFFFF00;
        return v21 | v22;
      }
      return result;
    case 18:
      if (*(_QWORD *)result == 0x7070615F736F7674
        && *(_QWORD *)(result + 8) == 0x69736E657478655FLL
        && *(_WORD *)(result + 16) == 28271)
      {
        v24 = "tvOSApplicationExtension";
LABEL_95:
        v21 = v24;
        v22 = (unint64_t)v24 & 0xFFFFFFFFFFFFFF00;
        return v21 | v22;
      }
      if (*(_QWORD *)result == 0x7070615F736F7278
        && *(_QWORD *)(result + 8) == 0x69736E657478655FLL
        && *(_WORD *)(result + 16) == 28271)
      {
        v24 = "xrOSApplicationExtension";
        goto LABEL_95;
      }
      return result;
    case 19:
      if (*(_QWORD *)result != 0x70615F736F63616DLL
        || *(_QWORD *)(result + 8) != 0x736E657478655F70
        || *(_QWORD *)(result + 11) != 0x6E6F69736E657478)
      {
        return result;
      }
      v21 = (unint64_t)"macOSApplicationExtension" & 0xFF;
      v22 = (unint64_t)"macOSApplicationExtension" & 0xFFFFFFFFFFFFFF00;
      return v21 | v22;
    case 21:
      if (*(_QWORD *)result != 0x5F736F6863746177
        || *(_QWORD *)(result + 8) != 0x657478655F707061
        || *(_QWORD *)(result + 13) != 0x6E6F69736E657478)
      {
        return result;
      }
      v21 = (unint64_t)"watchOSApplicationExtension" & 0xFF;
      v22 = (unint64_t)"watchOSApplicationExtension" & 0xFFFFFFFFFFFFFF00;
      return v21 | v22;
    case 25:
      if (*(_QWORD *)result != 0x6C6174616363616DLL
        || *(_QWORD *)(result + 8) != 0x5F7070615F747379
        || *(_QWORD *)(result + 16) != 0x6F69736E65747865
        || *(_BYTE *)(result + 24) != 110)
      {
        return result;
      }
      v21 = (unint64_t)"macCatalystApplicationExtension" & 0xFF;
      v22 = (unint64_t)"macCatalystApplicationExtension" & 0xFFFFFFFFFFFFFF00;
      return v21 | v22;
    default:
      return result;
  }
}

uint64_t sub_22E91E2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[3];

  *(_QWORD *)(a1 + 24) = 0;
  v8 = (_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 12) = 5460;
  *(_QWORD *)(a1 + 29) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 15088);
  v10 = 256;
  if (!*(_BYTE *)(a4 + 48))
    v10 = 224;
  v11 = 264;
  if (!*(_BYTE *)(a4 + 48))
    v11 = 232;
  v12 = *(_QWORD *)(v9 + v11);
  v13 = *(const void **)(v9 + v10);
  *(_QWORD *)(a1 + 40) = "";
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  if (*(_DWORD *)a4 != 2)
    goto LABEL_36;
  v14 = *(_QWORD *)(a4 + 8);
  if ((*(_BYTE *)(v14 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v14);
    v16 = *(uint64_t **)v15;
    v17 = *(unsigned int *)(v15 + 8);
    v18 = *(uint64_t **)v15;
    if ((_DWORD)v17)
    {
      v19 = 8 * v17;
      v18 = *(uint64_t **)v15;
      while (*(_WORD *)(*v18 + 32) != 160)
      {
        ++v18;
        v19 -= 8;
        if (!v19)
          goto LABEL_15;
      }
    }
    if (v18 != &v16[v17])
    {
      do
      {
        v21 = *v16++;
        v20 = v21;
      }
      while (*(_WORD *)(v21 + 32) != 160);
      v22 = *(_QWORD *)(v20 + 56);
      v23 = *(unsigned int *)(v20 + 48);
      *(_QWORD *)(a1 + 40) = v22;
      *(_QWORD *)(a1 + 48) = v23;
    }
  }
LABEL_15:
  v24 = sub_22E91D794(*(_QWORD *)(a2 + 88), v13, v12, *(_QWORD *)(a4 + 8));
  if (v24)
  {
    v25 = *(unsigned int *)(v24 + 116);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v24 + 120);
    *(_QWORD *)(a1 + 48) = v25;
    if (!v25)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 48))
  {
LABEL_17:
    v26 = **(unsigned int **)(a3 + 8);
    *(_QWORD *)(a1 + 28) = v26 | (sub_22F141A3C(v26, 0, *(_QWORD **)(a2 + 112), *(_DWORD **)(a2 + 72)) << 32);
    *(_BYTE *)(a1 + 36) = 0;
  }
LABEL_18:
  if (*(_DWORD *)a4 == 2)
  {
    if (*(_BYTE *)(a3 + 32))
      v27 = 6925;
    else
      v27 = 6487;
    *(_DWORD *)a1 = v27;
    *(_QWORD *)(a1 + 4) = 0x196200001965;
    *(_QWORD *)(a1 + 16) = 0x200000000;
    v28 = *(_QWORD *)(a4 + 8);
    if ((*(_BYTE *)(v28 + 29) & 1) == 0)
      goto LABEL_35;
    sub_22EFC8E88(v28);
    v30 = *(uint64_t **)v29;
    v31 = *(unsigned int *)(v29 + 8);
    v32 = *(uint64_t **)v29;
    if ((_DWORD)v31)
    {
      v33 = 8 * v31;
      v32 = *(uint64_t **)v29;
      while (*(_WORD *)(*v32 + 32) != 160)
      {
        ++v32;
        v33 -= 8;
        if (!v33)
          goto LABEL_35;
      }
    }
    if (v32 == &v30[v31])
    {
LABEL_35:
      v36 = sub_22F30C234(a4, a2);
    }
    else
    {
      do
      {
        v35 = *v30++;
        v34 = v35;
      }
      while (*(_WORD *)(v35 + 32) != 160);
      v36 = *(_DWORD *)(v34 + 16);
    }
    *v8 = v36;
    return a1;
  }
LABEL_36:
  if (*(_BYTE *)(a3 + 32))
    v38 = 4568;
  else
    v38 = 5035;
  *(_DWORD *)a1 = v38;
  *(_QWORD *)(a1 + 4) = 0x1BA2000013ADLL;
  *(_QWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 24) = sub_22F30C234(a4, a2);
  v39 = *(_QWORD *)(a4 + 8);
  if ((*(_BYTE *)(v39 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v39);
    v41 = *(uint64_t **)v40;
    v42 = *(unsigned int *)(v40 + 8);
    i = *(uint64_t **)v40;
    if ((_DWORD)v42)
    {
      v44 = 8 * v42;
      for (i = *(uint64_t **)v40; *(_WORD *)(*i + 32) != 337; ++i)
      {
        v44 -= 8;
        if (!v44)
          return a1;
      }
    }
    if (i != &v41[v42])
    {
      do
      {
        v46 = *v41++;
        v45 = v46;
        v47 = *(unsigned __int16 *)(v46 + 32) | (*(unsigned __int8 *)(v46 + 34) << 16);
      }
      while (*(_WORD *)(v46 + 32) != 337);
      if ((v47 & 0x40000) != 0)
      {
        v48 = *(_DWORD *)(v45 + 48);
        if (v48)
        {
          v50[0] = a2;
          v50[1] = a4;
          v50[2] = a1;
          switch(v48)
          {
            case 1:
              sub_22F30C31C(v50);
              v49 = 5435;
              goto LABEL_54;
            case 2:
              if ((*(_WORD *)(*(_QWORD *)(a2 + 72) + 148) & 4) != 0)
                v49 = 5441;
              else
                v49 = 5442;
              goto LABEL_54;
            case 3:
              *(_DWORD *)a1 = 6845;
              v49 = 6001;
              goto LABEL_54;
            case 4:
              sub_22F30C31C(v50);
              v49 = 5983;
              goto LABEL_54;
            case 5:
              sub_22F30C31C(v50);
              v49 = 5437;
              goto LABEL_54;
            case 6:
              sub_22F30C31C(v50);
              v49 = 5434;
LABEL_54:
              *(_DWORD *)(a1 + 12) = v49;
              break;
            default:
              return a1;
          }
        }
      }
    }
  }
  return a1;
}

unsigned int *sub_22E91E650(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8[24];

  v1 = result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 40);
  if (v2)
  {
    sub_22E8FCA40(*((_QWORD **)result + 1), *(_DWORD *)(v2 + 24), 0x177Fu, 0, (uint64_t)v8);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 40) + 40);
    v3 = sub_22E894538((uint64_t)v8, &v7);
    sub_22E89519C(v3, (unsigned int *)(*((_QWORD *)v1 + 2) + 16));
    result = sub_22E903BEC(v8);
  }
  v4 = **((_QWORD **)v1 + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      sub_22E8FCA40(*((_QWORD **)v1 + 1), *(_DWORD *)(v5 + 24), 0x177Fu, 0, (uint64_t)v8);
      v7 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)v1 + 3) + 40) + 40);
      v6 = sub_22E894538((uint64_t)v8, &v7);
      sub_22E89519C(v6, (unsigned int *)(**((_QWORD **)v1 + 4) + 16));
      return sub_22E903BEC(v8);
    }
  }
  return result;
}

uint64_t sub_22E91E72C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v15;
  _QWORD v16[10];

  v16[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 360);
    if (v4 >= *(_DWORD *)(a1 + 364))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = *(_DWORD *)(a1 + 360);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v4) = a2;
    ++*(_DWORD *)(a1 + 360);
    v16[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v15 = 0x800000001;
    v5 = 1;
    do
    {
      v6 = v5;
      v7 = &v16[v5];
      v8 = *(v7 - 1);
      if ((v8 & 4) != 0)
      {
        v5 = v6 - 1;
        LODWORD(v15) = v6 - 1;
      }
      else
      {
        *(v7 - 1) = v8 | 4;
        v9 = *(unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFF8) - 1;
        if (v9 <= 0xEB)
          __asm { BR              X9 }
        v5 = v15;
        if ((_DWORD)v6 != (_DWORD)v15)
        {
          v10 = &v16[v15 - 1];
          if (&v16[v6] < v10)
          {
            v11 = &v16[v6 + 1];
            do
            {
              v12 = *(v11 - 1);
              *(v11 - 1) = *v10;
              *v10-- = v12;
            }
            while (v11++ < v10);
          }
        }
      }
    }
    while (v5);
    --*(_DWORD *)(a1 + 360);
  }
  return 1;
}

uint64_t sub_22E929BF4(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22E92DA2C(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22E92DE94(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E91E72C(a1, v249);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22E91E72C(a1, *v252);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22E956440((uint64_t)a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22E929BF4(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22E956290((uint64_t)a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22E9563A4((uint64_t)a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22E956440((uint64_t)a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22E9563A4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22E9563A4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22E92DE94(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E929BF4(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22E92DE94(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E929BF4(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22E929BF4(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22E9563A4((uint64_t)a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22E956440((uint64_t)a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22E92DA70((uint64_t)a1, a2) & 1) != 0;
    case 12:
      result = sub_22E9563A4((uint64_t)a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22E92DD54(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22E92DDDC((uint64_t)a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22E9563A4((uint64_t)a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22E9563A4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22E92DD54(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22E92DB84(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22E9563A4((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22E956440((uint64_t)a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22E9563A4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22E9563A4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22E92DB84(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22E92DE94(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22E9563A4((uint64_t)a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22E956440((uint64_t)a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22E9563A4((uint64_t)a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22E92DE94(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22E929BF4(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E91E72C(a1, v211);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22E956440((uint64_t)a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22E92DE94(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E955C78((uint64_t)a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E929BF4(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E929BF4(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22E929BF4(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E929BF4(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22E929BF4(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22E956290((uint64_t)a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E956968((uint64_t)a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22E956968((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22E92DD54(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E92DE94(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E9563A4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22E956A04(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9563A4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22E956A78(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E9563A4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22E92DE94(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22E92DD54(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E9563A4((uint64_t)a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22E929BF4(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22E956290((uint64_t)a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22E956A78(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E9563A4((uint64_t)a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22E956440((uint64_t)a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22E955C78((uint64_t)a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E92DA2C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22E92DE94(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22E92DB84(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22E92DE94(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22E92DE94(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22E92DD54(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22E92DD54(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22E956AF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22E91E72C(a1, v515) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22E91E72C(a1, v171 & 0xFFFFFFFFFFFFFFFCLL);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22E956440((uint64_t)a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22E956AF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22E91E72C(a1, v33);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22E956AF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22E91E72C(a1, v450);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22E956BBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22E956BBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22E956BBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22E956BBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22E956BBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22E956BBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22E956AF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22E956AF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22E91E72C(a1, v381);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22E956F74(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22E956F74(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22E929BF4(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22E9563A4((uint64_t)a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22E956440((uint64_t)a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22E956F74(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22E956F74(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22E956F74(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22E91E72C(a1, v193);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22E92DE94(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22E92DD54(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22E929BF4(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22E956290((uint64_t)a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22E956F74(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22E9563A4((uint64_t)a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22E956440((uint64_t)a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E9563A4((uint64_t)a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22E955C78((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22E956FD0(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22E955C78((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 88));
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22E955C78((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E91E72C(a1, v62);
        if ((_DWORD)result)
          return (sub_22E955C78((uint64_t)a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22E92DD54(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22E92DDDC((uint64_t)a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22E9563A4((uint64_t)a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22E956440((uint64_t)a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22E91E72C(a1, *(_QWORD *)v89) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22E956FD0(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22E9563A4((uint64_t)a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22E956440((uint64_t)a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22E956FD0(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22E9563A4((uint64_t)a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22E956440((uint64_t)a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22E91E72C(a1, *(_QWORD *)v28) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22E9563A4((uint64_t)a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22E956440((uint64_t)a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22E9563A4((uint64_t)a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22E9563A4((uint64_t)a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22E956440((uint64_t)a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL);
      if (!(_DWORD)result)
        return result;
      result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22E9563A4((uint64_t)a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22E9563A4((uint64_t)a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E929BF4(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22E956440((uint64_t)a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E956440((uint64_t)a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22E92DA2C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22E91E72C(a1, *(_QWORD *)(a2 + 152)) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22E92DCB4(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22E92DA70(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22E91E72C(a1, *(_QWORD *)(a2 + 40));
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22E9563A4(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22E956440(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22E92DB84(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22E92DE94(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22E9563A4((uint64_t)a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22E956440((uint64_t)a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22E92DCB4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22E92DD54(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22E92DDDC((uint64_t)a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22E956290((uint64_t)a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22E92DD54(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22E92DD54(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22E92DE94(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22E92DDDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22E92DE94(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22E9561CC(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22E92DE94(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F4656A0
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            sub_22E92E790(a1, v4, a3);
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v19 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v19 = 1;
            v9 = a3 + v19 - 1;
            goto LABEL_59;
          case 2:
          case 3:
          case 4:
          case 5:
            sub_22E92E790(a1, v4, a3);
            v20 = *(_QWORD *)(v4 + 32);
            if (v20 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v72 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v72 = 1;
            result = sub_22E92DE94(a1, v20, (a3 + v72 + 15) & -v72);
            if (!(_DWORD)result)
              return result;
            v22 = *(_QWORD *)(a3 + 8);
            return sub_22E91E72C(a1, v22);
          case 6:
            sub_22E92E790(a1, v4, a3);
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v19 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v19 = 1;
            v9 = a3 + v19 + 11;
            goto LABEL_59;
          case 7:
          case 0x25:
            sub_22E92E790(a1, v4, a3);
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v19 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v19 = 1;
            v9 = a3 + v19 + 7;
            goto LABEL_59;
          case 8:
            sub_22E92E790(a1, v4, a3);
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v19 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v19 = 1;
            v9 = v19 + a3;
            goto LABEL_59;
          case 9:
          case 0xB:
          case 0x1B:
          case 0x22:
          case 0x23:
          case 0x2C:
          case 0x2D:
          case 0x2F:
          case 0x32:
          case 0x34:
          case 0x35:
            sub_22E92E790(a1, v4, a3);
            return 1;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            sub_22E92E790(a1, v4, a3);
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            sub_22E92E790(a1, v4, a3);
            goto LABEL_74;
          case 0xD:
          case 0x30:
            sub_22E92E790(a1, v4, a3);
            v22 = *(_QWORD *)(v4 + 24);
            return sub_22E91E72C(a1, v22);
          case 0xE:
            sub_22E92E790(a1, v4, a3);
            result = sub_22E955C78((uint64_t)a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22E92DD54(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v24 = *(_DWORD *)(a3 + 28);
            v73 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v74 = v24;
            sub_22EFC6DC4((uint64_t)&v75, v73);
            result = sub_22E92DDDC((uint64_t)a1, &v73);
            if (!(_DWORD)result)
              return result;
            v25 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v25)
              return 1;
            v26 = v4 + 48;
            v27 = (uint64_t *)(a3 + 56);
            v28 = v25 - 1;
            do
            {
              v29 = *v27++;
              v76 = *(_OWORD *)v26;
              v77 = *(_QWORD *)(v26 + 16);
              v78 = v29;
              result = sub_22E956290((uint64_t)a1, (uint64_t)&v76);
              v30 = v28-- != 0;
              v31 = v30;
              if (!(_DWORD)result)
                break;
              v26 += 24;
            }
            while ((v31 & 1) != 0);
            return result;
          case 0xF:
            sub_22E92E790(a1, v4, a3);
            result = sub_22E9561CC((uint64_t)a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22E955C78((uint64_t)a1, v23);
          case 0x10:
            sub_22E92E790(a1, v4, a3);
            v32 = *(_QWORD *)(v4 + 40);
            goto LABEL_98;
          case 0x11:
            sub_22E92E790(a1, v4, a3);
            v22 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22E91E72C(a1, v22);
          case 0x12:
            sub_22E92E790(a1, v4, a3);
            return sub_22E92DD54(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            sub_22E92E790(a1, v4, a3);
            v32 = *(_QWORD *)(v4 + 40);
            if (!v32)
              goto LABEL_99;
LABEL_98:
            result = sub_22E91E72C(a1, v32);
            if (!(_DWORD)result)
              return result;
LABEL_99:
            v23 = *(_QWORD *)(v4 + 48);
            return sub_22E955C78((uint64_t)a1, v23);
          case 0x14:
            sub_22E92E790(a1, v4, a3);
            v33 = *(_QWORD *)(a3 + 8);
            if (v33)
            {
              v34 = *(_QWORD *)(v4 + 32);
              if (v34)
              {
                result = sub_22E92DD54(a1, v34, v33);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v35 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v35)
              return 1;
            v36 = v4 + 48;
            v37 = (uint64_t *)(a3 + 32);
            v38 = v35 - 1;
            do
            {
              v39 = *v37++;
              v76 = *(_OWORD *)v36;
              v77 = *(_QWORD *)(v36 + 16);
              v78 = v39;
              result = sub_22E956290((uint64_t)a1, (uint64_t)&v76);
              v30 = v38-- != 0;
              v40 = v30;
              if (!(_DWORD)result)
                break;
              v36 += 24;
            }
            while ((v40 & 1) != 0);
            return result;
          case 0x15:
            sub_22E92E790(a1, v4, a3);
            v41 = *(_QWORD *)(v4 + 48);
            if (v41)
            {
              result = sub_22E91E72C(a1, v41);
              if (!(_DWORD)result)
                return result;
            }
            v23 = *(_QWORD *)(v4 + 40);
            return sub_22E955C78((uint64_t)a1, v23);
          case 0x18:
            sub_22E92E790(a1, v4, a3);
            v16 = *(_QWORD *)(v4 + 32);
            if (v16)
            {
              result = sub_22E92DD54(a1, v16, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            goto LABEL_55;
          case 0x19:
            *(_QWORD *)&v76 = v4;
            *((_QWORD *)&v76 + 1) = a3;
            sub_22E92E790(a1, v4, a3);
            v42 = *(_QWORD *)(v4 + 24);
            v43 = sub_22E47EE80(&v76);
            return sub_22E92DE94(a1, v42, v43);
          case 0x1A:
            *(_QWORD *)&v76 = v4;
            *((_QWORD *)&v76 + 1) = a3;
            sub_22E92E790(a1, v4, a3);
            v44 = *(_QWORD *)(v4 + 24);
            v45 = sub_22E47EE80(&v76);
            result = sub_22E92DE94(a1, v44, v45);
            if (!(_DWORD)result)
              return result;
            v46 = v76;
            v47 = *(_QWORD *)(v76 + 16);
            if (*(_BYTE *)(v76 + 16) == 25 || (v47 & 0x3FFFC000000000) == 0)
              goto LABEL_128;
            v49 = 0;
            v50 = (unsigned __int16)(v47 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * v49 + 16))
              {
                if ((sub_22E929BF4(a1) & 1) == 0)
                  return 0;
              }
              else if (v49 < (unsigned __int16)(*(_QWORD *)(v46 + 16) >> 38))
              {
                result = sub_22E955C78((uint64_t)a1, *(_QWORD *)(v46 + 40 + 8 * v49));
                if (!(_DWORD)result)
                  return result;
              }
              ++v49;
            }
            while (v50 != v49);
            v47 = *(_QWORD *)(v46 + 16);
LABEL_128:
            if ((v47 & 0x3C0000000000000) == 0x80000000000000)
            {
              v51 = (_DWORD *)((v46 + 8 * (unsigned __int16)(v47 >> 38) + 4 * ((v47 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v54 = *v51;
              v53 = (unint64_t *)(v51 + 2);
              v52 = v54;
              if (v54)
              {
                v55 = 8 * v52;
                while ((sub_22E955C78((uint64_t)a1, *v53) & 1) != 0)
                {
                  ++v53;
                  v55 -= 8;
                  if (!v55)
                    goto LABEL_133;
                }
                return 0;
              }
            }
LABEL_133:
            v56 = sub_22F257D3C(v46);
            if (!v56)
              return 1;
            result = sub_22E91E72C(a1, v56);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            sub_22E92E790(a1, v4, a3);
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v19 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v19 = 1;
            v9 = a3 + v19 + 3;
            goto LABEL_59;
          case 0x1D:
          case 0x1E:
            sub_22E92E790(a1, v4, a3);
            result = sub_22E91E72C(a1, *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            result = sub_22E91E72C(a1, *(_QWORD *)(a3 + 24));
            if (!(_DWORD)result)
              return result;
LABEL_74:
            v23 = *(_QWORD *)(v4 + 32);
            return sub_22E955C78((uint64_t)a1, v23);
          case 0x1F:
            sub_22E92E790(a1, v4, a3);
            v18 = *(_QWORD **)(a3 + 8);
            if (v18)
            {
              if ((sub_22E92DE94(a1, *v18, v18 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22E955C78((uint64_t)a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
LABEL_55:
            v19 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v19 = *(_QWORD *)((char *)&unk_22F4656A0
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            v9 = a3 + v19 + 15;
LABEL_59:
            a3 = v9 & -v19;
            break;
          case 0x21:
            sub_22E92E790(a1, v4, a3);
            v57 = *(_QWORD *)(v4 + 24);
            v58 = *(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0);
            if (v58 != v4)
            {
              v59 = 1;
              if (v57 >= 0x10 && (v57 & 0xF) == 0)
                v59 = *(_QWORD *)((char *)&unk_22F4656A0
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v58 + 16) << 56) >> 53));
              result = sub_22E92DE94(a1, v57, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v59- 1) & -v59);
              if (!(_DWORD)result)
                return result;
            }
            v60 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v60)
              return 1;
            v61 = (_QWORD *)(a3 + 24);
            v62 = v60 - 1;
            do
            {
              v63 = (_QWORD *)*v61++;
              result = sub_22E92DE94(a1, *v63, v63 + 1);
              v30 = v62-- != 0;
              v64 = v30;
            }
            while ((_DWORD)result && (v64 & 1) != 0);
            return result;
          case 0x2A:
            sub_22E92E790(a1, v4, a3);
            v65 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v76 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v76) = 8;
            DWORD1(v76) = v65;
            return sub_22E956104((uint64_t)a1, (uint64_t)&v76);
          case 0x2B:
            sub_22E92E790(a1, v4, a3);
            v23 = *(_QWORD *)(v4 + 8);
            return sub_22E955C78((uint64_t)a1, v23);
          case 0x2E:
            sub_22E92E790(a1, v4, a3);
            result = sub_22E9561CC((uint64_t)a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v66 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v66)
              return 1;
            v67 = v4 + 40;
            v68 = (uint64_t *)(a3 + 16);
            v69 = v66 - 1;
            do
            {
              v70 = *v68++;
              v76 = *(_OWORD *)v67;
              v77 = *(_QWORD *)(v67 + 16);
              v78 = v70;
              result = sub_22E956290((uint64_t)a1, (uint64_t)&v76);
              v30 = v69-- != 0;
              v71 = v30;
              if (!(_DWORD)result)
                break;
              v67 += 24;
            }
            while ((v71 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            sub_22E92E790(a1, v4, a3);
            v12 = *(unint64_t **)(a3 + 16);
            v13 = *v12;
            a3 = (uint64_t)(v12 + 1);
            v4 = v13;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return 1;
        }
      }
    }
    while (v4);
  }
  return 1;
}

void sub_22E92E790(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14[2];

  v3 = a2;
  v14[0] = a2;
  v14[1] = a3;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  for (i = a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v3 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v3 = i;
LABEL_14:
  v8 = sub_22F115668(v3);
  v9 = sub_22F1167E8(v14);
  if (v8)
  {
    v10 = v9;
    if ((_DWORD)v9)
    {
      if ((*(_DWORD *)(v5 + 16) & 0xFE) == 0x2C && v5)
      {
        v11 = sub_22F114198(*(_QWORD *)(v5 + 24));
        goto LABEL_22;
      }
      v12 = *(_DWORD *)(v5 + 16);
      if (v12 == 50 && v5)
      {
        v11 = *(_QWORD *)(v5 + 24);
        goto LABEL_22;
      }
      if ((v12 - 35) >= 0xFFFFFFFE)
      {
        if (v5)
        {
          v13 = sub_22F272660(v5);
          if (v13)
          {
            v11 = v13;
LABEL_22:
            sub_22E92E934(a1, v11, v8 | (v10 << 32), 0);
          }
        }
      }
    }
  }
}

void sub_22E92E934(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _QWORD **v11;
  uint64_t v12;
  _BYTE v13[16];
  void *__p;
  char v15;
  char v16;
  _BYTE v17[16];
  void *v18;
  char v19;
  unsigned __int8 v20;
  _BYTE v21[16];
  void *v22;
  char v23;
  unsigned __int8 v24;
  _QWORD *v25[4];
  uint64_t v26;
  uint64_t v27;

  v26 = a4;
  v27 = a2;
  v25[0] = *(_QWORD **)(*(_QWORD *)(*a1 + 88) + 15088);
  v6 = v25[0];
  v25[1] = a1;
  v25[2] = &v27;
  v25[3] = &v26;
  sub_22E92EA54((uint64_t)v21, v25, 0);
  v17[0] = 0;
  v20 = 0;
  v7 = v6[33];
  if (v7)
  {
    sub_22E92EA54((uint64_t)v13, v25, 1);
    sub_22E958014((uint64_t)v17, (uint64_t)v13);
    if (v16 && v15 < 0)
      operator delete(__p);
    LODWORD(v7) = v20;
  }
  if (v24 | v7)
  {
    if (v24)
    {
      v8 = v27;
      v9 = v21;
      if ((_DWORD)v7)
      {
        v10 = v17;
        v11 = (_QWORD **)a1;
        v12 = a3;
LABEL_13:
        sub_22E92EBE0(v11, v8, v12, (uint64_t)v9, (uint64_t)v10);
        goto LABEL_14;
      }
LABEL_12:
      v11 = (_QWORD **)a1;
      v12 = a3;
      v10 = 0;
      goto LABEL_13;
    }
    if ((_DWORD)v7)
    {
      v8 = v27;
      v9 = v17;
      goto LABEL_12;
    }
  }
LABEL_14:
  if (v20 && v19 < 0)
    operator delete(v18);
  if (v24)
  {
    if (v23 < 0)
      operator delete(v22);
  }
}

uint64_t sub_22E92EA54(uint64_t a1, _QWORD **a2, int a3)
{
  _QWORD *v5;
  uint64_t *v6;
  size_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24[2];

  v5 = *a2;
  v6 = a2[1];
  if (a3)
  {
    v8 = (void *)v5[32];
    v7 = v5[33];
    v9 = v5 + 34;
    v10 = 35;
  }
  else
  {
    v8 = (void *)v5[28];
    v7 = v5[29];
    v9 = v5 + 30;
    v10 = 31;
  }
  v11 = v5[v10];
  v24[0] = *v9;
  v24[1] = v11;
  result = sub_22E92FC10((_QWORD *)*v6, *a2[2], v8, v7, v24, 0, *a2[3]);
  if ((_DWORD)result != 1)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 56) = 0;
    return result;
  }
  v14 = v13;
  v23 = *(_OWORD *)(sub_22E91D794(*(_QWORD *)(*v6 + 88), v8, v7, v13) + 48);
  v15 = (_QWORD *)v6[2];
  v16 = *((unsigned int *)v6 + 6);
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v6 + 88) + 15088) + 264))
  {
LABEL_13:
    v19 = &v15[5 * v16 - 5];
    goto LABEL_14;
  }
  for (i = 0; ; i += 40)
  {
    v18 = &v15[5 * v16];
    if (a3)
      break;
    if (*((_BYTE *)v18 - 24))
      goto LABEL_13;
LABEL_11:
    v15 -= 5;
  }
  if (!*((_BYTE *)v18 - 4))
    goto LABEL_11;
  v19 = (_DWORD *)&v15[5 * v16 - 2] - 1;
LABEL_14:
  result = sub_22E3B38EC(v19, &v23);
  if ((result & 1) != 0
    && (v20 = *v6,
        v21 = v6[1],
        v22 = 1,
        result = sub_22E91D8C0(v20, 1, v23, *((uint64_t *)&v23 + 1), v21, v14, (uint64_t)v8, v7, (int *)v24),
        (result & 1) != 0))
  {
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 8) = v14;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_BYTE *)(a1 + 48) = a3;
  }
  else
  {
    v22 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 56) = v22;
  return result;
}

unsigned int *sub_22E92EBE0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  void **v61;
  void *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _DWORD *v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  _DWORD *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  _DWORD *v86;
  unsigned int v87;
  unsigned int v88;
  size_t v89;
  size_t v90;
  char **v91;
  char *v92;
  char **v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  char *v97;
  char **v98;
  size_t v99;
  const void *v100;
  size_t v101;
  char *v102;
  void **v103;
  llvm::raw_ostream *v104;
  size_t v105;
  const void *v106;
  size_t v107;
  void *v108;
  _BYTE *v109;
  void **v110;
  char **v111;
  char *v112;
  char **v113;
  char *v114;
  char v115;
  _BYTE *v116;
  size_t v117;
  unsigned int v118;
  void **v119;
  char **v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char v126;
  void *v127;
  size_t v128;
  unsigned __int8 *v130;
  unsigned int v131;
  unint64_t v132;
  const char *__src;
  uint64_t v134;
  uint64_t v135;
  void *__p[2];
  char v137;
  void *v138;
  char v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  void *v144;
  int v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char v149;
  uint64_t v150;
  int v151;
  void **v152;
  _BYTE v153[25];
  _BYTE v154[48];
  char v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160[3];

  v7 = a3;
  v159 = a2;
  v160[0] = a3;
  v9 = (*a1)[11];
  v10 = *(_QWORD *)(v9 + 15088);
  v11 = 256;
  v12 = 264;
  if (!*(_BYTE *)(a4 + 48))
    v12 = 232;
  v13 = *(_QWORD *)(v10 + v12);
  if (!*(_BYTE *)(a4 + 48))
    v11 = 224;
  v14 = *(const void **)(v10 + v11);
  v15 = (uint64_t *)(a4 + 8);
  v158 = *(_OWORD *)(sub_22E91D794(v9, v14, *(_QWORD *)(v10 + v12), *(_QWORD *)(a4 + 8)) + 48);
  if (a5)
  {
    v157 = *(_OWORD *)(sub_22E91D794((*a1)[11], *(const void **)(v10 + 256), *(_QWORD *)(v10 + 264), *(_QWORD *)(a5 + 8))+ 48);
    v21 = 7179;
  }
  else
  {
    v16 = (*a1)[11];
    v17 = *(unsigned __int8 *)(a4 + 48);
    v18 = 280;
    if (!*(_BYTE *)(a4 + 48))
      v18 = 248;
    v19 = 272;
    v20 = *(_QWORD *)(v10 + v18);
    if (!*(_BYTE *)(a4 + 48))
      v19 = 240;
    *(_QWORD *)v153 = *(_QWORD *)(v10 + v19);
    *(_QWORD *)&v153[8] = v20;
    if (sub_22E91DDB0(*(_QWORD *)(v16 + 15088), v153, &v158, v17))
      v21 = 7085;
    else
      v21 = 7084;
    v157 = 0uLL;
    v7 = v160[0];
  }
  sub_22E8FCA40(*a1, v7, v21, 0, (uint64_t)&v144);
  v22 = sub_22E8906A0((uint64_t)&v144, v160);
  v23 = sub_22E890024(v22, &v159);
  v140 = (void *)sub_22E83F9A4((uint64_t)v14, v13);
  v141 = v24;
  v25 = sub_22F2F2210(v23, (uint64_t)&v140);
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v158);
  v26 = sub_22F2F3734(v25, __p);
  v27 = *(_OWORD *)(v26 + 9);
  *(_OWORD *)v153 = *(_OWORD *)v26;
  *(_OWORD *)&v153[9] = v27;
  v154[0] = 0;
  v155 = 0;
  if (*(_BYTE *)(v26 + 80))
    sub_22E907424((uint64_t)v154, v26 + 32);
  v156 = *(_QWORD *)(v26 + 88);
  if (v137 < 0)
    operator delete(__p[0]);
  sub_22E903BEC((unsigned int *)&v144);
  if (a5)
  {
    __p[0] = (void *)sub_22E83F9A4(*(_QWORD *)(v10 + 256), *(_QWORD *)(v10 + 264));
    __p[1] = v28;
    v29 = sub_22F2F2210((uint64_t)v153, (uint64_t)__p);
    llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v157);
    sub_22F2F3734(v29, &v144);
    if (SHIBYTE(v146) < 0)
      operator delete(v144);
  }
  sub_22E903BEC((unsigned int *)v153);
  sub_22E8FCA40(*a1, *(_DWORD *)(*(_QWORD *)(a4 + 8) + 24), 0x175Cu, 0, (uint64_t)v153);
  v30 = sub_22E890024((uint64_t)v153, v15);
  v140 = (void *)sub_22E83F9A4((uint64_t)v14, v13);
  v141 = v31;
  v32 = sub_22F2F2210(v30, (uint64_t)&v140);
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v158);
  v33 = sub_22F2F3734(v32, &v144);
  v34 = 280;
  if (!*(_BYTE *)(a4 + 48))
    v34 = 248;
  v35 = 272;
  if (!*(_BYTE *)(a4 + 48))
    v35 = 240;
  v36 = *(_QWORD *)(v10 + v34);
  *(_QWORD *)&v143 = *(_QWORD *)(v10 + v35);
  *((_QWORD *)&v143 + 1) = v36;
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v143);
  sub_22F2F3734(v33, __p);
  if (v137 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v146) < 0)
    operator delete(v144);
  sub_22E903BEC((unsigned int *)v153);
  if (a5)
  {
    v37 = *(_QWORD *)(a5 + 8);
    if (*v15 != v37)
    {
      sub_22E8FCA40(*a1, *(_DWORD *)(v37 + 24), 0x175Cu, 0, (uint64_t)v153);
      v55 = sub_22E890024((uint64_t)v153, (uint64_t *)(a5 + 8));
      v140 = (void *)sub_22E83F9A4(*(_QWORD *)(v10 + 256), *(_QWORD *)(v10 + 264));
      v141 = v56;
      v57 = sub_22F2F2210(v55, (uint64_t)&v140);
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v157);
      v58 = sub_22F2F3734(v57, &v144);
      v143 = *(_OWORD *)(v10 + 272);
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v143);
      sub_22F2F3734(v58, __p);
      if (v137 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v146) < 0)
        operator delete(v144);
      sub_22E903BEC((unsigned int *)v153);
    }
  }
  sub_22E8FCA40(*a1, v160[0], 0x17FEu, 0, (uint64_t)&v144);
  v38 = sub_22E8906A0((uint64_t)&v144, v160);
  v39 = sub_22E890024(v38, &v159);
  LODWORD(__p[0]) = (*(_QWORD *)(*a1)[9] & 0x4000) == 0;
  v40 = sub_22E8900C4(v39, (int *)__p);
  v41 = *(_OWORD *)(v40 + 9);
  *(_OWORD *)v153 = *(_OWORD *)v40;
  *(_OWORD *)&v153[9] = v41;
  v154[0] = 0;
  v155 = 0;
  if (*(_BYTE *)(v40 + 80))
    sub_22E907424((uint64_t)v154, v40 + 32);
  v156 = *(_QWORD *)(v40 + 88);
  sub_22E903BEC((unsigned int *)&v144);
  v42 = *((unsigned int *)a1 + 90);
  if (!(_DWORD)v42)
    return sub_22E903BEC((unsigned int *)v153);
  v43 = a1[44];
  v44 = &v43[v42];
  v45 = v42;
  v46 = (unsigned __int8 *)*(v44 - 1);
  v47 = v43 - 1;
  while (1)
  {
    v48 = (uint64_t)v46;
    v46 = (unsigned __int8 *)v47[v45];
    v49 = *v46;
    if (v49 <= 0x5B)
      break;
    if (*v46 > 0x62u)
    {
      if (v49 != 99)
      {
        if (v49 != 236)
          goto LABEL_55;
        v50 = *(_QWORD *)&v46[8 * (((unint64_t)*(unsigned __int16 *)v46 >> 8) & 1) + 24];
        goto LABEL_54;
      }
      v51 = v46 + 24;
    }
    else
    {
      if (v49 == 92)
      {
        v50 = *((_QWORD *)v46 + 3);
        goto LABEL_54;
      }
      if (v49 != 98)
        goto LABEL_55;
      v51 = &v46[8 * (((unint64_t)*(unsigned __int16 *)v46 >> 8) & 1) + 32];
    }
    v50 = *(_QWORD *)v51;
LABEL_54:
    if (v50 == v48)
      goto LABEL_75;
LABEL_55:
    if (!(--v45 * 8))
    {
      v54 = 0;
      v48 = (uint64_t)v46;
      goto LABEL_76;
    }
  }
  switch(*v46)
  {
    case 5u:
      v50 = *((_QWORD *)v46 + 9);
      goto LABEL_54;
    case 8u:
      if (*(_BYTE *)v48 != 12)
        goto LABEL_75;
      v59 = *(_QWORD *)(v48 + 8);
      if ((v59 & 1) != 0)
      {
        v60 = (void **)((v59 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v61 = &v60[*(unsigned int *)(v59 & 0xFFFFFFFFFFFFFFFELL)];
      }
      else
      {
        if (v59)
          v60 = (void **)(v48 + 8);
        else
          v60 = 0;
        if (v59)
          v61 = (void **)(v48 + 16);
        else
          v61 = 0;
      }
      break;
    case 0xDu:
      v50 = *((_QWORD *)v46 + 1);
      goto LABEL_54;
    case 0xEu:
      v50 = *((_QWORD *)v46 + 5);
      goto LABEL_54;
    case 0x10u:
      v52 = *(unsigned __int16 *)v46;
      v53 = ((v52 >> 13) & 1) + ((v52 >> 12) & 1);
      if (*(_QWORD *)&v46[8 * (v53 + 1) + 16] == v48)
        goto LABEL_75;
      if ((v52 & 0x800) != 0)
        v50 = *(_QWORD *)&v46[8 * (v53 + 2) + 16];
      else
        v50 = 0;
      goto LABEL_54;
    default:
      goto LABEL_55;
  }
  while (v60 != v61)
  {
    v62 = *v60;
    v144 = (void *)a1[44][*((unsigned int *)a1 + 90) - 1];
    if ((sub_22E92FEE0((uint64_t)&v144, (unint64_t)v62) & 1) == 0)
    {
      v144 = v62;
      v131 = *(_DWORD *)v46;
      v130 = v46 + 8;
      v132 = ((unint64_t)v131 >> 5) & 0x7FFFFF8;
      while (v132)
      {
        v54 = *(_QWORD *)&v130[v132];
        v132 -= 8;
        if ((sub_22E943324((uint64_t)&v144, v54, 0) & 1) == 0)
          goto LABEL_76;
      }
      break;
    }
    ++v60;
  }
LABEL_75:
  v54 = 0;
LABEL_76:
  v135 = v13;
  v63 = (*a1)[14];
  sub_22F0D5A50(v48);
  v65 = v64;
  if (v64 < 0)
    v65 = sub_22F1E22F0((_QWORD *)v63, v64);
  if (v54)
    v66 = v54;
  else
    v66 = v48;
  sub_22F0D60E4(v66);
  v68 = sub_22F1E2828((_QWORD *)v63, v67) >> 32;
  v69 = v65 & 0x7FFFFFFF;
  v70 = *(_DWORD *)(v63 + 304);
  v71 = v70 + 1;
  if (v70 + 1 > 1)
  {
    if ((v70 & 0x80000000) != 0)
    {
      v73 = -2 - v70;
      if (((*(_QWORD *)(*(_QWORD *)(v63 + 224) + 8 * ((-2 - v70) >> 6)) >> (-2 - v70)) & 1) != 0)
        v72 = (_DWORD *)(*(_QWORD *)(v63 + 200) + 24 * v73);
      else
        v72 = (_DWORD *)sub_22F1E1134(v63, v73, 0);
    }
    else
    {
      v72 = (_DWORD *)(*(_QWORD *)(v63 + 184) + 24 * v70);
    }
  }
  else
  {
    v72 = *(_DWORD **)(v63 + 184);
  }
  if ((*v72 & 0x7FFFFFFFu) <= v69
    && (v70 == -2
     || (v71 != *(_DWORD *)(v63 + 192)
       ? ((v71 & 0x80000000) != 0
        ? ((v78 = -3 - v70,
            ((*(_QWORD *)(*(_QWORD *)(v63 + 224) + 8 * ((-3 - v70) >> 6)) >> (-3 - v70)) & 1) == 0)
         ? (v77 = (_DWORD *)sub_22F1E1134(v63, v78, 0))
         : (v77 = (_DWORD *)(*(_QWORD *)(v63 + 200) + 24 * v78)))
        : (v77 = (_DWORD *)(*(_QWORD *)(v63 + 184) + 24 * v71)),
          v76 = *v77 & 0x7FFFFFFF)
       : (v76 = *(_DWORD *)(v63 + 216)),
         v76 > v69)))
  {
    v75 = *(_DWORD *)(v63 + 304);
    v74 = v75;
  }
  else
  {
    v74 = sub_22F1E1EE8(v63, v65 & 0x7FFFFFFF);
    v75 = *(_DWORD *)(v63 + 304);
  }
  v134 = v68;
  v79 = v68 & 0x7FFFFFFF;
  v80 = v75;
  v81 = v75 + 1;
  if (v75 + 1 > 1)
  {
    if ((v75 & 0x80000000) != 0)
    {
      v83 = -2 - v75;
      if (((*(_QWORD *)(*(_QWORD *)(v63 + 224) + 8 * ((-2 - v75) >> 6)) >> (-2 - v75)) & 1) != 0)
        v82 = (_DWORD *)(*(_QWORD *)(v63 + 200) + 24 * v83);
      else
        v82 = (_DWORD *)sub_22F1E1134(v63, v83, 0);
    }
    else
    {
      v82 = (_DWORD *)(*(_QWORD *)(v63 + 184) + 24 * v75);
    }
  }
  else
  {
    v82 = *(_DWORD **)(v63 + 184);
  }
  if ((*v82 & 0x7FFFFFFFu) <= v79
    && (v80 == -2
     || (v81 != *(_DWORD *)(v63 + 192)
       ? ((v81 & 0x80000000) != 0
        ? ((v87 = -3 - v80,
            ((*(_QWORD *)(*(_QWORD *)(v63 + 224) + 8 * ((-3 - v80) >> 6)) >> (-3 - v80)) & 1) == 0)
         ? (v86 = (_DWORD *)sub_22F1E1134(v63, v87, 0))
         : (v86 = (_DWORD *)(*(_QWORD *)(v63 + 200) + 24 * v87)))
        : (v86 = (_DWORD *)(*(_QWORD *)(v63 + 184) + 24 * v81)),
          v85 = *v86 & 0x7FFFFFFF)
       : (v85 = *(_DWORD *)(v63 + 216)),
         v85 > v79)))
  {
    v84 = *(_DWORD *)(v63 + 304);
  }
  else
  {
    v84 = sub_22F1E1EE8(v63, v79);
  }
  if (v74 == v84)
  {
    v88 = v65;
    __src = sub_22F1429EC(v65, (_QWORD *)v63);
    v90 = v89;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v145 = 0;
    v149 = 0;
    v150 = 0;
    v151 = 1;
    v147 = 0;
    v148 = 0;
    v146 = 0;
    v144 = (void *)(MEMORY[0x24BED83D8] + 16);
    v152 = &v140;
    llvm::raw_ostream::SetBufferAndMode();
    if ((unint64_t)(v147 - v148) > 3)
    {
      *(_DWORD *)v148 = 673212009;
      v92 = v148 + 4;
      v148 += 4;
      v91 = (char **)&v144;
      v93 = &v148;
    }
    else
    {
      v91 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&v144, "if (");
      v93 = v91 + 4;
      v92 = v91[4];
    }
    v94 = *(_QWORD *)(*a1)[9];
    if ((v94 & 0x4000) != 0)
      v95 = "@available";
    else
      v95 = "__builtin_available";
    if ((v94 & 0x4000) != 0)
      v96 = 10;
    else
      v96 = 19;
    if (v96 <= v91[3] - v92)
    {
      memcpy(v92, v95, v96);
      *v93 += v96;
    }
    else
    {
      v91 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v91, v95);
    }
    v97 = v91[4];
    v98 = &v148;
    if (v91[3] == v97)
    {
      v91 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v91, "(");
    }
    else
    {
      *v97 = 40;
      ++v91[4];
    }
    v100 = (const void *)sub_22E91DEE0((unint64_t)v14, v135);
    v101 = v99;
    v102 = v91[4];
    if (v99 <= v91[3] - v102)
    {
      if (v99)
      {
        memcpy(v102, v100, v99);
        v102 = &v91[4][v101];
        v91[4] = v102;
      }
    }
    else
    {
      v91 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v91, (const char *)v100);
      v102 = v91[4];
    }
    if (v91[3] == v102)
    {
      v91 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v91, " ");
    }
    else
    {
      *v102 = 32;
      ++v91[4];
    }
    llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v158);
    if (v137 >= 0)
      v103 = __p;
    else
      v103 = (void **)__p[0];
    llvm::raw_ostream::write((llvm::raw_ostream *)v91, (const char *)v103);
    if (v137 < 0)
      operator delete(__p[0]);
    if (a5)
    {
      if ((unint64_t)(v147 - v148) > 1)
      {
        *(_WORD *)v148 = 8236;
        v148 += 2;
        v104 = (llvm::raw_ostream *)&v144;
      }
      else
      {
        v104 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v144, ", ");
      }
      v106 = (const void *)sub_22E91DEE0(*(_QWORD *)(v10 + 256), *(_QWORD *)(v10 + 264));
      v107 = v105;
      v108 = (void *)*((_QWORD *)v104 + 4);
      if (v105 <= *((_QWORD *)v104 + 3) - (_QWORD)v108)
      {
        if (v105)
        {
          memcpy(v108, v106, v105);
          *((_QWORD *)v104 + 4) += v107;
        }
      }
      else
      {
        v104 = (llvm::raw_ostream *)llvm::raw_ostream::write(v104, (const char *)v106);
      }
      v109 = (_BYTE *)*((_QWORD *)v104 + 4);
      if (*((_BYTE **)v104 + 3) == v109)
      {
        v104 = (llvm::raw_ostream *)llvm::raw_ostream::write(v104, " ");
      }
      else
      {
        *v109 = 32;
        ++*((_QWORD *)v104 + 4);
      }
      llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v157);
      if (v137 >= 0)
        v110 = __p;
      else
        v110 = (void **)__p[0];
      llvm::raw_ostream::write(v104, (const char *)v110);
      if (v137 < 0)
        operator delete(__p[0]);
    }
    if ((unint64_t)(v147 - v148) > 7)
    {
      *(_QWORD *)v148 = 0xA7B2029292A202CLL;
      v112 = v148 + 8;
      v148 += 8;
      v111 = (char **)&v144;
      v113 = &v148;
    }
    else
    {
      v111 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&v144, ", *)) {\n");
      v113 = v111 + 4;
      v112 = v111[4];
    }
    if (v90 <= v111[3] - v112)
    {
      if (v90)
      {
        memcpy(v112, __src, v90);
        *v113 += v90;
      }
    }
    else
    {
      v111 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v111, __src);
    }
    v114 = v111[4];
    if ((unint64_t)(v111[3] - v114) > 3)
    {
      *(_DWORD *)v114 = 538976288;
      v111[4] += 4;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v111, "    ");
    }
    v115 = *((_BYTE *)v152 + 23);
    if (v115 >= 0)
      v116 = v152;
    else
      v116 = *v152;
    if (v115 >= 0)
      v117 = v115 & 0x7F;
    else
      v117 = (size_t)v152[1];
    sub_22E729148(v116, v117, v88, 0, (uint64_t)__p);
    sub_22E890748((uint64_t)v153, __p);
    if (v139 < 0)
      operator delete(v138);
    v118 = sub_22F142BC4(v134, 62, (uint64_t *)v63, (_DWORD *)(*a1)[9], 0);
    if (!v118)
      v118 = sub_22F141A3C(v134, 0, (_QWORD *)v63, (_DWORD *)(*a1)[9]);
    v119 = v152;
    if (*((char *)v152 + 23) < 0)
    {
      *(_BYTE *)*v152 = 0;
      v119[1] = 0;
    }
    else
    {
      *(_BYTE *)v152 = 0;
      *((_BYTE *)v119 + 23) = 0;
    }
    if (v147 == v148)
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)&v144, "\n");
      v98 = v120 + 4;
      v121 = v120[4];
    }
    else
    {
      *v148 = 10;
      v121 = ++v148;
      v120 = (char **)&v144;
    }
    if (v90 <= v120[3] - v121)
    {
      if (v90)
      {
        memcpy(v121, __src, v90);
        *v98 += v90;
      }
    }
    else
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v120, __src);
    }
    v122 = v120[4];
    if ((unint64_t)(v120[3] - v122) > 8)
    {
      v122[8] = 10;
      *(_QWORD *)v122 = *(_QWORD *)"} else {\n";
      v123 = v120[4] + 9;
      v120[4] = v123;
    }
    else
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v120, "} else {\n");
      v123 = v120[4];
    }
    if (v90 <= v120[3] - v123)
    {
      if (v90)
      {
        memcpy(v123, __src, v90);
        v123 = &v120[4][v90];
        v120[4] = v123;
      }
    }
    else
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v120, __src);
      v123 = v120[4];
    }
    if ((unint64_t)(v120[3] - v123) > 3)
    {
      *(_DWORD *)v123 = 538976288;
      v124 = v120[4] + 4;
      v120[4] = v124;
    }
    else
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v120, "    ");
      v124 = v120[4];
    }
    if ((unint64_t)(v120[3] - v124) > 0x1F)
    {
      qmemcpy(v124, "// Fallback on earlier versions\n", 32);
      v125 = v120[4] + 32;
      v120[4] = v125;
    }
    else
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v120, "// Fallback on earlier versions\n");
      v125 = v120[4];
    }
    if (v90 <= v120[3] - v125)
    {
      if (v90)
      {
        memcpy(v125, __src, v90);
        v125 = &v120[4][v90];
        v120[4] = v125;
      }
    }
    else
    {
      v120 = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)v120, __src);
      v125 = v120[4];
    }
    if (v120[3] == v125)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v120, "}");
    }
    else
    {
      *v125 = 125;
      ++v120[4];
    }
    v126 = *((_BYTE *)v152 + 23);
    if (v126 >= 0)
      v127 = v152;
    else
      v127 = *v152;
    if (v126 >= 0)
      v128 = v126 & 0x7F;
    else
      v128 = (size_t)v152[1];
    sub_22E729148(v127, v128, v118, 0, (uint64_t)__p);
    sub_22E890748((uint64_t)v153, __p);
    if (v139 < 0)
      operator delete(v138);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v144);
    if (SHIBYTE(v142) < 0)
      operator delete(v140);
  }
  return sub_22E903BEC((unsigned int *)v153);
}

uint64_t sub_22E92FC10(_QWORD *a1, uint64_t a2, void *__s2, uint64_t a4, uint64_t *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v12 = a2;
  v14 = sub_22EFC93E8(a2, __s2, a4, a5, a6, 0);
  v15 = v14;
  v16 = *(_DWORD *)(v12 + 28);
  if (v12)
  {
    if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 39 <= 2 && v14 == 0)
    {
      while (1)
      {
        v18 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v12 + 80) & 0xFFFFFFFFFFFFFFF8)
                                    + ((2 * *(_QWORD *)(v12 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
        if (!v18 || (*(_DWORD *)(v18 + 16) & 0xFE) != 0x2C)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            break;
          v18 = sub_22F10CF48(v18);
          if (!v18)
            break;
        }
        v12 = sub_22F114198(*(_QWORD *)(v18 + 24));
        v19 = sub_22EFC93E8(v12, __s2, a4, a5, a6, 0);
        if (v12)
          v20 = (*(_DWORD *)(v12 + 28) & 0x7Fu) - 39 > 2;
        else
          v20 = 1;
        if (v20 || v19 != 0)
        {
          v15 = v19;
          goto LABEL_20;
        }
      }
      v15 = 0;
LABEL_20:
      v16 = *(_DWORD *)(v12 + 28);
    }
  }
  if ((v16 & 0x7F) == 0x16)
  {
    v22 = *(_QWORD *)(v12 + 120);
    if (!v22)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v12 + 96) + 88), *(_QWORD *)(v12 + 96));
      v22 = *(_QWORD *)(v12 + 120);
    }
    if (v22 >= 8)
    {
      v23 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF8);
      v24 = *v23;
      if (*v23)
      {
        v15 = sub_22EFC93E8(*v23, __s2, a4, a5, a6, 0);
        v12 = v24;
      }
    }
  }
  v25 = *(_DWORD *)(v12 + 28);
  if ((v25 & 0x7F) == 0x43)
    v26 = v12;
  else
    v26 = 0;
  if (v26)
    v27 = v15 == 0;
  else
    v27 = 0;
  if (v27)
  {
    v28 = *(_QWORD *)(v26 + 16);
    v29 = v28 & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 4) != 0)
      v29 = *(_QWORD *)v29;
    v15 = 0;
    if (v29 && (*(_WORD *)(v29 + 8) & 0x7F) == 0x21)
    {
      v12 = v29 - 64;
      v15 = sub_22EFC93E8(v29 - 64, __s2, a4, a5, a6, 0);
      v25 = *(_DWORD *)(v29 - 36);
    }
  }
  if ((v25 & 0x7F) == 0x18 && (*(_BYTE *)(a1[9] + 236) & 0x20) == 0)
  {
    if (a7)
    {
      v30 = a1[430];
      if (v30)
      {
        v32 = sub_22F3E98A8(v30, "init", 4uLL, (uint64_t *)(v30 + 656));
        v33 = sub_22EFDBA90(a7, v32, 1, 0, 1, 0);
        if (v33)
        {
          if (!v15)
          {
            if ((*(_BYTE *)(v12 + 58) & 2) == 0
              && (v34 = v33,
                  v35 = *(_QWORD *)(v12 + 40),
                  v35 == sub_22F3E98A8(a1[430], "new", 3uLL, (uint64_t *)(a1[430] + 664)))
              && sub_22EFDC244(v12, a1[11]))
            {
              return sub_22EFC93E8(v34, __s2, a4, a5, a6, 0);
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return v15;
}

uint64_t sub_22E92FEE0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t i;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t v471;
  unsigned int v472;
  BOOL v473;
  uint64_t v474;
  uint64_t **v475;
  uint64_t *v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t **v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t **v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t **v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  unsigned int v496;
  uint64_t v497;
  uint64_t **v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t **v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t **v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t **v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unsigned int v520;
  uint64_t v521;
  uint64_t **v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t **v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  BOOL v537;
  uint64_t **v538;
  uint64_t *v539;
  uint64_t v540;
  uint64_t v541;
  BOOL v542;
  BOOL v543;
  BOOL v544;
  BOOL v545;
  BOOL v546;
  int *v547;
  BOOL v548;
  BOOL v549;
  BOOL v550;
  uint64_t **v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  uint64_t v563;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22E933D68(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22E9427AC(a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22E940604(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22E933FF8(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (uint64_t *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22E933FF8(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22E9427AC(a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22E9427AC(a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22E92FEE0(a1, *(_QWORD *)(a2 + 40));
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22E9413A0(a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v544 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v544 = 1), v544 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22E942710(a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22E9427AC(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22E9427AC(a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22E942710(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22E9427AC(a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22E942710(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22E9427AC(a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22E9427AC(a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22E940604(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v336 & 4) != 0)
          v479 = 0;
        else
          v479 = v336 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22E92FEE0(a1, v479);
        if (!(_DWORD)result)
          return result;
      }
      v480 = *(_DWORD *)v4 & 0x7F;
      if (v480 <= 0x39 && ((1 << v480) & 0x3F0003E01011066) != 0
        || v480 - 70 <= 0xD && ((1 << (v480 - 70)) & 0x2803) != 0
        || v480 - 19 <= 4)
      {
        v481 = sub_22EFCAE04(a2);
      }
      else
      {
        v481 = 0;
      }
      result = sub_22E942710(a1, v481);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v483 = *v482;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v485 = *(_QWORD *)v484 + 8 * *(unsigned int *)(v484 + 8);
      }
      else
      {
        v485 = 0;
      }
      while (1)
      {
        if (v483 == (uint64_t *)v485)
          return 1;
        if ((sub_22E9427AC(a1, *v483) & 1) == 0)
          break;
        ++v483;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22E940604(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        if ((v204 & 4) != 0)
          v465 = 0;
        else
          v465 = v204 & 0xFFFFFFFFFFFFFFF8;
        result = sub_22E92FEE0(a1, v465);
        if (!(_DWORD)result)
          return result;
      }
      v466 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v466)
      {
        for (i = 0; i != v466; ++i)
        {
          v468 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
          v469 = *(_DWORD *)(v468 + 12) & 0x1FFFFFFF;
          if ((_DWORD)v469)
          {
            v470 = (_QWORD *)(v468 + 16);
            v471 = 8 * v469;
            do
            {
              if ((sub_22E92FEE0(a1, *v470) & 1) == 0)
                return 0;
              ++v470;
              v471 -= 8;
            }
            while (v471);
          }
        }
      }
      v472 = *(_DWORD *)v4 & 0x7F;
      v473 = v472 > 0x39 || ((1 << v472) & 0x3F0003E01011066) == 0;
      if (v473 && (v472 - 70 <= 0xD ? (v550 = ((1 << (v472 - 70)) & 0x2803) == 0) : (v550 = 1), v550 && v472 - 19 > 4))
        v474 = 0;
      else
        v474 = sub_22EFCAE04(a2);
      result = sub_22E942710(a1, v474);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v476 = *v475;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v478 = *(_QWORD *)v477 + 8 * *(unsigned int *)(v477 + 8);
      }
      else
      {
        v478 = 0;
      }
      while (1)
      {
        if (v476 == (uint64_t *)v478)
          return 1;
        if ((sub_22E9427AC(a1, *v476) & 1) == 0)
          break;
        ++v476;
      }
      return 0;
    case 10:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22E9427AC(a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22E933DB0(a1, a2) & 1) != 0;
    case 12:
      result = sub_22E942710(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22E9427AC(a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22E9404C4(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v561 = *(_QWORD *)(a2 + 40);
      v562 = v316;
      v563 = v317;
      if (!sub_22E94054C(a1, &v561))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22E942710(a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22E9427AC(a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22E9427AC(a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22E9427AC(a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22E942710(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22E9427AC(a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22E9404C4(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22E9427AC(a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22E9427AC(a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22E933EC8(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22E942710(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22E9427AC(a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22E942710(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22E9427AC(a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22E942710(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22E9427AC(a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22E933EC8(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22E940604(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v555 = sub_22F2590A8(a2);
            v556 = sub_22F25910C(a2);
            v557 = sub_22F259178(a2);
            v558 = sub_22F2591DC(a2);
            if (v555 != v556 && v557 != v558)
            {
              v559 = v557 + 4;
              v560 = v555 + 8;
              do
              {
                if (v560 == v556)
                  break;
                v560 += 8;
                v31 = v559 == v558;
                v559 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22E942710(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v534 = *v533;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v536 = *(_QWORD *)v535 + 8 * *(unsigned int *)(v535 + 8);
            }
            else
            {
              v536 = 0;
            }
            while (v534 != (uint64_t *)v536)
            {
              if ((sub_22E9427AC(a1, *v534) & 1) == 0)
                return 0;
              ++v534;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v526 = sub_22F259248(a2);
        v528 = v527;
        v529 = sub_22F2592CC(a2);
        if (v526 != v528 && v529 != v530)
        {
          v531 = v529 + 4;
          v532 = v526 + 8;
          do
          {
            if (v532 == v528)
              break;
            v532 += 8;
            v31 = v531 == v530;
            v531 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22E942710(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v487 = *v486;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v489 = *(_QWORD *)v488 + 8 * *(unsigned int *)(v488 + 8);
      }
      else
      {
        v489 = 0;
      }
      while (2)
      {
        if (v487 == (uint64_t *)v489)
          return 1;
        if ((sub_22E9427AC(a1, *v487) & 1) != 0)
        {
          ++v487;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22E940604(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD **)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22E92FEE0(a1, *v209) & 1) != 0)
      {
        ++v209;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22E933FF8(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22E9427AC(a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22E940604(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22E940D6C(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v510 = *v509;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v512 = *(_QWORD *)v511 + 8 * *(unsigned int *)(v511 + 8);
      }
      else
      {
        v512 = 0;
      }
      while (2)
      {
        if (v510 == (uint64_t *)v512)
          return 1;
        if ((sub_22E9427AC(a1, *v510) & 1) != 0)
        {
          ++v510;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22E9427AC(a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22E942710(a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22E9427AC(a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E92FEE0(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22E942710(a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22E9427AC(a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E92FEE0(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22E942710(a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22E9427AC(a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22E92FEE0(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22E942710(a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22E9427AC(a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22E92FEE0(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22E942710(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22E9427AC(a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22E92FEE0(a1, *(_QWORD *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v547 = sub_22F259350(a2);
        result = sub_22E9413A0(a1, (uint64_t)v547);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E942670(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22E942710(a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22E9427AC(a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22E942670(a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_952;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_952:
      result = sub_22E9404C4(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v513 = *(_QWORD *)(a2 + 128);
      if ((v513 & 4) != 0 && (v513 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22E940604(a1, *(_QWORD *)(v513 & 0xFFFFFFFFFFFFFFF8), (v513 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E942710(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v515 = *v514;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v517 = *(_QWORD *)v516 + 8 * *(unsigned int *)(v516 + 8);
      }
      else
      {
        v517 = 0;
      }
      if (v515 == (uint64_t *)v517)
        return 1;
      while ((sub_22E9427AC(a1, *v515) & 1) != 0)
      {
        if (++v515 == (uint64_t *)v517)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22E942D48(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E942710(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22E9427AC(a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22E942DBC(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22E942710(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22E9427AC(a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22E940604(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v490 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v490;
        v107 = v490[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22E9404C4(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22E942710(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v492 = *v491;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v494 = *(_QWORD *)v493 + 8 * *(unsigned int *)(v493 + 8);
      }
      else
      {
        v494 = 0;
      }
      if (v492 == (uint64_t *)v494)
        return 1;
      while ((sub_22E9427AC(a1, *v492) & 1) != 0)
      {
        if (++v492 == (uint64_t *)v494)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = (_QWORD *)(v63 + 16);
      v66 = 8 * v64;
      while ((sub_22E92FEE0(a1, *v65) & 1) != 0)
      {
        ++v65;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22E9413A0(a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22E942DBC(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22E942710(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22E9427AC(a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22E940D6C(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22E933D68(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22E940604(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22E942710(a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22E9427AC(a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22E933EC8(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22E940604(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22E942710(a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22E9427AC(a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22E940604(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22E942710(a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22E9427AC(a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22E9404C4(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22E9427AC(a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22E9427AC(a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22E9404C4(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22E9427AC(a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22E9427AC(a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22E9427AC(a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22E9427AC(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22E9427AC(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22E942E34(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v518 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v519 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v519 && (_DWORD)v519 != 3)
          v518 = *(_QWORD *)(v518 + 8);
        if ((sub_22E933FF8(a1, v518, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22E933FF8(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v520 = *(_DWORD *)v4 & 0x7F;
      if (v520 <= 0x39 && ((1 << v520) & 0x3F0003E01011066) != 0
        || v520 - 70 <= 0xD && ((1 << (v520 - 70)) & 0x2803) != 0
        || v520 - 19 <= 4)
      {
        v521 = sub_22EFCAE04(a2);
      }
      else
      {
        v521 = 0;
      }
      result = sub_22E942710(a1, v521);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v523 = *v522;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v525 = *(_QWORD *)v524 + 8 * *(unsigned int *)(v524 + 8);
        }
        else
        {
          v525 = 0;
        }
        for (; v523 != (uint64_t *)v525; ++v523)
        {
          if ((sub_22E9427AC(a1, *v523) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22E942E34(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22E933FF8(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v545 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v545 = 1), !v545 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22E942710(a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22E9427AC(a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22E942E34(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22E933FF8(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v546 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v546 = 1), !v546 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22E942710(a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22E9427AC(a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22E942F00(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22E9427AC(a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22E942F00(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22E9427AC(a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22E942F00(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22E9427AC(a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22E942F00(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22E9427AC(a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22E942F00(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22E9427AC(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22E942F00(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22E9427AC(a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22E942E34(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22E9427AC(a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22E942E34(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22E933FF8(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22E942710(a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22E9427AC(a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22E9432C4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22E9427AC(a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22E9432C4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = (_QWORD *)(a2 + 104);
      v289 = 8 * v287;
      while ((sub_22E92FEE0(a1, *v288) & 1) != 0)
      {
        ++v288;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v548 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v548 = 1), v548 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22E942710(a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22E9427AC(a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22E9432C4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22E9427AC(a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22E9432C4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22E9427AC(a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22E9432C4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22E933FF8(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22E942710(a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22E9427AC(a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22E940604(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v495 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v495;
        v304 = v495[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22E9404C4(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v496 = *(_DWORD *)v4 & 0x7F;
      if (v496 <= 0x39 && ((1 << v496) & 0x3F0003E01011066) != 0
        || v496 - 70 <= 0xD && ((1 << (v496 - 70)) & 0x2803) != 0
        || v496 - 19 <= 4)
      {
        v497 = sub_22EFCAE04(a2);
      }
      else
      {
        v497 = 0;
      }
      result = sub_22E942710(a1, v497);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v499 = *v498;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v501 = *(_QWORD *)v500 + 8 * *(unsigned int *)(v500 + 8);
      }
      else
      {
        v501 = 0;
      }
      if (v499 == (uint64_t *)v501)
        return 1;
      while ((sub_22E9427AC(a1, *v499) & 1) != 0)
      {
        if (++v499 == (uint64_t *)v501)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = (_QWORD *)(v44 + 16);
      v47 = 8 * v45;
      while ((sub_22E92FEE0(a1, *v46) & 1) != 0)
      {
        ++v46;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22E9413A0(a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22E9432C4(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v549 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v549 = 1), v549 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22E942710(a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22E9427AC(a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22E942710(a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22E9427AC(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22E9427AC(a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22E9427AC(a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22E940D6C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22E9414B8(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22E940D6C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22E940D6C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22E933FF8(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22E940D6C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22E9427AC(a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22E9427AC(a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22E9404C4(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v561 = *(_QWORD *)(a2 + 40);
      v562 = v442;
      v563 = v443;
      if (!sub_22E94054C(a1, &v561))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22E942710(a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22E9427AC(a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = (uint64_t *)&v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22E933FF8(a1, *v89, 0) & 1) != 0)
      {
        ++v89;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22E9414B8(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v543 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v543 = 1), v543 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22E942710(a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22E9427AC(a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1019;
      v279 = 8 * v276;
      while ((sub_22E9414B8(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v542 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v542 = 1), v542 && v280 - 19 > 4))
          {
LABEL_1019:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22E942710(a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v552 = *v551;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v554 = *(_QWORD *)v553 + 8 * *(unsigned int *)(v553 + 8);
          }
          else
          {
            v554 = 0;
          }
          if (v552 == (uint64_t *)v554)
            return 1;
          while ((sub_22E9427AC(a1, *v552) & 1) != 0)
          {
            if (++v552 == (uint64_t *)v554)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_1004;
      v28 = (uint64_t *)&v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22E933FF8(a1, *v28, 0) & 1) != 0)
      {
        ++v28;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v537 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v537 = 1), v537 && v30 - 19 > 4))
LABEL_1004:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22E942710(a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v539 = *v538;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v541 = *(_QWORD *)v540 + 8 * *(unsigned int *)(v540 + 8);
          }
          else
          {
            v541 = 0;
          }
          if (v539 == (uint64_t *)v541)
            return 1;
          while ((sub_22E9427AC(a1, *v539) & 1) != 0)
          {
            if (++v539 == (uint64_t *)v541)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22E9427AC(a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22E9427AC(a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22E942710(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22E9427AC(a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22E942710(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22E9427AC(a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22E933FF8(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22E942710(a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22E942710(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v502 = v15;
          do
          {
            v503 = *(_QWORD *)v502;
            if ((*(_DWORD *)(*(_QWORD *)v502 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v502 + 28) & 0x7Fu) - 35 > 2
               || (v504 = *(_QWORD *)(v503 + 128)) == 0
               || ((*(unsigned __int16 *)(v504 + 8) | (*(unsigned __int8 *)(v504 + 10) << 16)) & 0x100000) == 0)
              && !sub_22E92FEE0(a1, v503))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v502 += 8;
          }
          while (v502 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v506 = *v505;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v508 = *(_QWORD *)v507 + 8 * *(unsigned int *)(v507 + 8);
        }
        else
        {
          v508 = 0;
        }
        for (; v506 != (uint64_t *)v508; ++v506)
        {
          if ((sub_22E9427AC(a1, *v506) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22E9427AC(a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

